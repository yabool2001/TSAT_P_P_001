
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012de0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de4  08012ea0  08012ea0  00022ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c84  08014c84  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  08014c84  08014c84  00024c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c8c  08014c8c  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014c8c  08014c8c  00024c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c94  08014c94  00024c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  08014c98  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  200006e0  08015378  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ecc  08015378  00030ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d756  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5d  00000000  00000000  0004dea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a68  00000000  00000000  00051c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014a9  00000000  00000000  00053668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dead  00000000  00000000  00054b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e41b  00000000  00000000  000729be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b16fd  00000000  00000000  00090dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bb4  00000000  00000000  001424d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012e84 	.word	0x08012e84

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	08012e84 	.word	0x08012e84

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08014738 	.word	0x08014738
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f001 f978 	bl	80038a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b0:	f000 f8c4 	bl	800273c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b4:	f000 fafe 	bl	8002bb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025b8:	f000 fa7a 	bl	8002ab0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025bc:	f000 fa2a 	bl	8002a14 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c0:	f000 fac4 	bl	8002b4c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c4:	f000 f9e8 	bl	8002998 <MX_TIM6_Init>
  MX_RTC_Init();
 80025c8:	f000 f904 	bl	80027d4 <MX_RTC_Init>
  MX_SPI1_Init();
 80025cc:	f000 f9a6 	bl	800291c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d0:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <main+0x158>)
 80025d2:	681c      	ldr	r4, [r3, #0]
 80025d4:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <main+0x158>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7fd fd93 	bl	8000104 <strlen>
 80025de:	0003      	movs	r3, r0
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	23fa      	movs	r3, #250	; 0xfa
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4847      	ldr	r0, [pc, #284]	; (8002704 <main+0x15c>)
 80025e8:	0021      	movs	r1, r4
 80025ea:	f004 fc3b 	bl	8006e64 <HAL_UART_Transmit>

  // Is system initialized?
  if ( ! is_system_initialized () )
 80025ee:	f000 fdbd 	bl	800316c <is_system_initialized>
 80025f2:	0003      	movs	r3, r0
 80025f4:	001a      	movs	r2, r3
 80025f6:	2301      	movs	r3, #1
 80025f8:	4053      	eors	r3, r2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d017      	beq.n	8002630 <main+0x88>
  {
	  // ASTRO INIT
	  if ( !my_astro_init () )
 8002600:	f007 fb0a 	bl	8009c18 <my_astro_init>
 8002604:	0003      	movs	r3, r0
 8002606:	001a      	movs	r2, r3
 8002608:	2301      	movs	r3, #1
 800260a:	4053      	eors	r3, r2
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <main+0x6e>
	  {
		  HAL_NVIC_SystemReset () ;
 8002612:	f001 fad2 	bl	8003bba <HAL_NVIC_SystemReset>
	  }

	  // ACC INIT
	  my_lis2dw12_ctx.write_reg = my_lis2dw12_platform_write ;
 8002616:	4b3c      	ldr	r3, [pc, #240]	; (8002708 <main+0x160>)
 8002618:	4a3c      	ldr	r2, [pc, #240]	; (800270c <main+0x164>)
 800261a:	601a      	str	r2, [r3, #0]
	  my_lis2dw12_ctx.read_reg = my_lis2dw12_platform_read ;
 800261c:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <main+0x160>)
 800261e:	4a3c      	ldr	r2, [pc, #240]	; (8002710 <main+0x168>)
 8002620:	605a      	str	r2, [r3, #4]
	  my_lis2dw12_ctx.handle = HSPI1 ;
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <main+0x160>)
 8002624:	4a3b      	ldr	r2, [pc, #236]	; (8002714 <main+0x16c>)
 8002626:	60da      	str	r2, [r3, #12]
	  my_lis2dw12_init ( &my_lis2dw12_ctx ) ;
 8002628:	4b37      	ldr	r3, [pc, #220]	; (8002708 <main+0x160>)
 800262a:	0018      	movs	r0, r3
 800262c:	f007 fbbd 	bl	8009daa <my_lis2dw12_init>

	  // RTC INIT
  }

  // GNSS INIT AND ACQ
  prepare_payload () ;
 8002630:	f000 fb84 	bl	8002d3c <prepare_payload>

  // ACC INT1 WAKEUP ENABLE
  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <main+0x160>)
 8002636:	0018      	movs	r0, r3
 8002638:	f007 fc10 	bl	8009e5c <my_lis2dw12_int1_wu_enable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 800263c:	f000 fccc 	bl	8002fd8 <get_systick>
 8002640:	0002      	movs	r2, r0
 8002642:	4b35      	ldr	r3, [pc, #212]	; (8002718 <main+0x170>)
 8002644:	601a      	str	r2, [r3, #0]
  // MAIN STATE MACHINE
  while (1)
  {
	  if ( is_astro_evt_flag )
 8002646:	4b35      	ldr	r3, [pc, #212]	; (800271c <main+0x174>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <main+0xb0>
	  {
		  my_astro_read_evt_reg () ;
 800264e:	f007 fb5d 	bl	8009d0c <my_astro_read_evt_reg>
		  is_astro_evt_flag = false ;
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <main+0x174>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
	  }
	  if ( is_evt_pin_high() )
 8002658:	f000 fcac 	bl	8002fb4 <is_evt_pin_high>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d001      	beq.n	8002664 <main+0xbc>
	  {
		  my_astro_read_evt_reg () ;
 8002660:	f007 fb54 	bl	8009d0c <my_astro_read_evt_reg>
	  }

	  if ( get_systick () - astro_log_loop_timer >  ASTRO_LOG_TIMER )
 8002664:	f000 fcb8 	bl	8002fd8 <get_systick>
 8002668:	0002      	movs	r2, r0
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <main+0x170>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <main+0x178>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d911      	bls.n	800269a <main+0xf2>
	  {
		  my_astro_log ();
 8002676:	f007 fb7f 	bl	8009d78 <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 800267a:	f000 fcad 	bl	8002fd8 <get_systick>
 800267e:	0002      	movs	r2, r0
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <main+0x170>)
 8002682:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( 0 , payload , strlen ( payload ) ) ;
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <main+0x17c>)
 8002686:	0018      	movs	r0, r3
 8002688:	f7fd fd3c 	bl	8000104 <strlen>
 800268c:	0003      	movs	r3, r0
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <main+0x17c>)
 8002692:	0019      	movs	r1, r3
 8002694:	2000      	movs	r0, #0
 8002696:	f005 fee1 	bl	800845c <astronode_send_pld_er>
	  }
	  if ( is_acc_int1_wkup_flag )
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <main+0x180>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0d1      	beq.n	8002646 <main+0x9e>
	  {
		  // Turn off next int1_wkups for the end of procedure
		  my_lis2dw12_int1_wu_disable ( &my_lis2dw12_ctx ) ;
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <main+0x160>)
 80026a4:	0018      	movs	r0, r3
 80026a6:	f007 fbf4 	bl	8009e92 <my_lis2dw12_int1_wu_disable>
		  is_acc_int1_wkup_flag = false ;
 80026aa:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <main+0x180>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

		  my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 80026b0:	4a1e      	ldr	r2, [pc, #120]	; (800272c <main+0x184>)
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <main+0x188>)
 80026b4:	0011      	movs	r1, r2
 80026b6:	0018      	movs	r0, r3
 80026b8:	f007 fe44 	bl	800a344 <my_rtc_get_dt>
		  current_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <main+0x184>)
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <main+0x188>)
 80026c0:	0011      	movs	r1, r2
 80026c2:	0018      	movs	r0, r3
 80026c4:	f007 fef0 	bl	800a4a8 <my_conv_rtc2timestamp>
 80026c8:	0002      	movs	r2, r0
 80026ca:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <main+0x18c>)
 80026cc:	601a      	str	r2, [r3, #0]
		  /*
		  dbg_buff[0] = 0 ;
		  sprintf ( dbg_buff , "Seconds elapsed from last fix: %lu" , current_ts - last_fix_ts ) ;
		  send_debug_logs ( dbg_buff ) ;
		  */
		  if ( ( current_ts - last_fix_ts ) > SECONDS_IN_1_HOUR ) // If more than 1 hour has elapsed from last fix.
 80026ce:	4b19      	ldr	r3, [pc, #100]	; (8002734 <main+0x18c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <main+0x190>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1ad2      	subs	r2, r2, r3
 80026d8:	23e1      	movs	r3, #225	; 0xe1
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	429a      	cmp	r2, r3
 80026de:	d909      	bls.n	80026f4 <main+0x14c>
		  {
			  if ( astronode_send_rtc_rr () && !astronode_send_nco_rr () ) // If Astro's RC know time and has opportunity to contact SV
 80026e0:	f005 ffdc 	bl	800869c <astronode_send_rtc_rr>
 80026e4:	1e03      	subs	r3, r0, #0
 80026e6:	d005      	beq.n	80026f4 <main+0x14c>
 80026e8:	f005 fd14 	bl	8008114 <astronode_send_nco_rr>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d101      	bne.n	80026f4 <main+0x14c>
			  {
				  prepare_payload () ;
 80026f0:	f000 fb24 	bl	8002d3c <prepare_payload>
			  }
		  }
		  // Turn on int1_wkup
		  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <main+0x160>)
 80026f6:	0018      	movs	r0, r3
 80026f8:	f007 fbb0 	bl	8009e5c <my_lis2dw12_int1_wu_enable>
	  if ( is_astro_evt_flag )
 80026fc:	e7a3      	b.n	8002646 <main+0x9e>
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	20000000 	.word	0x20000000
 8002704:	2000086c 	.word	0x2000086c
 8002708:	20000b88 	.word	0x20000b88
 800270c:	0800307d 	.word	0x0800307d
 8002710:	080030ed 	.word	0x080030ed
 8002714:	20000728 	.word	0x20000728
 8002718:	20000a2c 	.word	0x20000a2c
 800271c:	20000bb1 	.word	0x20000bb1
 8002720:	0000ea60 	.word	0x0000ea60
 8002724:	20000a30 	.word	0x20000a30
 8002728:	20000bb0 	.word	0x20000bb0
 800272c:	20000b98 	.word	0x20000b98
 8002730:	20000bac 	.word	0x20000bac
 8002734:	20000a0c 	.word	0x20000a0c
 8002738:	20000a20 	.word	0x20000a20

0800273c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b093      	sub	sp, #76	; 0x4c
 8002740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002742:	2410      	movs	r4, #16
 8002744:	193b      	adds	r3, r7, r4
 8002746:	0018      	movs	r0, r3
 8002748:	2338      	movs	r3, #56	; 0x38
 800274a:	001a      	movs	r2, r3
 800274c:	2100      	movs	r1, #0
 800274e:	f009 fe17 	bl	800c380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002752:	003b      	movs	r3, r7
 8002754:	0018      	movs	r0, r3
 8002756:	2310      	movs	r3, #16
 8002758:	001a      	movs	r2, r3
 800275a:	2100      	movs	r1, #0
 800275c:	f009 fe10 	bl	800c380 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	0018      	movs	r0, r3
 8002766:	f001 fcdb 	bl	8004120 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800276a:	193b      	adds	r3, r7, r4
 800276c:	220a      	movs	r2, #10
 800276e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002770:	193b      	adds	r3, r7, r4
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	0052      	lsls	r2, r2, #1
 8002776:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002778:	0021      	movs	r1, r4
 800277a:	187b      	adds	r3, r7, r1
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2201      	movs	r2, #1
 800278a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002792:	187b      	adds	r3, r7, r1
 8002794:	0018      	movs	r0, r3
 8002796:	f001 fd0f 	bl	80041b8 <HAL_RCC_OscConfig>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800279e:	f000 fd4b 	bl	8003238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a2:	003b      	movs	r3, r7
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027a8:	003b      	movs	r3, r7
 80027aa:	2200      	movs	r2, #0
 80027ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ae:	003b      	movs	r3, r7
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027b4:	003b      	movs	r3, r7
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027ba:	003b      	movs	r3, r7
 80027bc:	2100      	movs	r1, #0
 80027be:	0018      	movs	r0, r3
 80027c0:	f002 f814 	bl	80047ec <HAL_RCC_ClockConfig>
 80027c4:	1e03      	subs	r3, r0, #0
 80027c6:	d001      	beq.n	80027cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80027c8:	f000 fd36 	bl	8003238 <Error_Handler>
  }
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b013      	add	sp, #76	; 0x4c
 80027d2:	bd90      	pop	{r4, r7, pc}

080027d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b090      	sub	sp, #64	; 0x40
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80027da:	232c      	movs	r3, #44	; 0x2c
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	0018      	movs	r0, r3
 80027e0:	2314      	movs	r3, #20
 80027e2:	001a      	movs	r2, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f009 fdcb 	bl	800c380 <memset>
  RTC_DateTypeDef sDate = {0};
 80027ea:	2328      	movs	r3, #40	; 0x28
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80027f2:	003b      	movs	r3, r7
 80027f4:	0018      	movs	r0, r3
 80027f6:	2328      	movs	r3, #40	; 0x28
 80027f8:	001a      	movs	r2, r3
 80027fa:	2100      	movs	r1, #0
 80027fc:	f009 fdc0 	bl	800c380 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002800:	4b44      	ldr	r3, [pc, #272]	; (8002914 <MX_RTC_Init+0x140>)
 8002802:	4a45      	ldr	r2, [pc, #276]	; (8002918 <MX_RTC_Init+0x144>)
 8002804:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002806:	4b43      	ldr	r3, [pc, #268]	; (8002914 <MX_RTC_Init+0x140>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800280c:	4b41      	ldr	r3, [pc, #260]	; (8002914 <MX_RTC_Init+0x140>)
 800280e:	227f      	movs	r2, #127	; 0x7f
 8002810:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002812:	4b40      	ldr	r3, [pc, #256]	; (8002914 <MX_RTC_Init+0x140>)
 8002814:	22ff      	movs	r2, #255	; 0xff
 8002816:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002818:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <MX_RTC_Init+0x140>)
 800281a:	2200      	movs	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <MX_RTC_Init+0x140>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002824:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <MX_RTC_Init+0x140>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800282a:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <MX_RTC_Init+0x140>)
 800282c:	2280      	movs	r2, #128	; 0x80
 800282e:	05d2      	lsls	r2, r2, #23
 8002830:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002832:	4b38      	ldr	r3, [pc, #224]	; (8002914 <MX_RTC_Init+0x140>)
 8002834:	2200      	movs	r2, #0
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002838:	4b36      	ldr	r3, [pc, #216]	; (8002914 <MX_RTC_Init+0x140>)
 800283a:	0018      	movs	r0, r3
 800283c:	f002 fb38 	bl	8004eb0 <HAL_RTC_Init>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d001      	beq.n	8002848 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002844:	f000 fcf8 	bl	8003238 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	187b      	adds	r3, r7, r1
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2200      	movs	r2, #0
 8002854:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2200      	movs	r2, #0
 800285a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800285c:	187b      	adds	r3, r7, r1
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002862:	187b      	adds	r3, r7, r1
 8002864:	2200      	movs	r2, #0
 8002866:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002868:	187b      	adds	r3, r7, r1
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800286e:	1879      	adds	r1, r7, r1
 8002870:	4b28      	ldr	r3, [pc, #160]	; (8002914 <MX_RTC_Init+0x140>)
 8002872:	2200      	movs	r2, #0
 8002874:	0018      	movs	r0, r3
 8002876:	f002 fbbd 	bl	8004ff4 <HAL_RTC_SetTime>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d001      	beq.n	8002882 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800287e:	f000 fcdb 	bl	8003238 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002882:	2128      	movs	r1, #40	; 0x28
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2206      	movs	r2, #6
 8002888:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2201      	movs	r2, #1
 800288e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002890:	187b      	adds	r3, r7, r1
 8002892:	2201      	movs	r2, #1
 8002894:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2200      	movs	r2, #0
 800289a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800289c:	1879      	adds	r1, r7, r1
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <MX_RTC_Init+0x140>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	0018      	movs	r0, r3
 80028a4:	f002 fcaa 	bl	80051fc <HAL_RTC_SetDate>
 80028a8:	1e03      	subs	r3, r0, #0
 80028aa:	d001      	beq.n	80028b0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80028ac:	f000 fcc4 	bl	8003238 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80028b0:	003b      	movs	r3, r7
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80028b6:	003b      	movs	r3, r7
 80028b8:	2200      	movs	r2, #0
 80028ba:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80028bc:	003b      	movs	r3, r7
 80028be:	2200      	movs	r2, #0
 80028c0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80028c2:	003b      	movs	r3, r7
 80028c4:	2200      	movs	r2, #0
 80028c6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028c8:	003b      	movs	r3, r7
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028ce:	003b      	movs	r3, r7
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80028d4:	003b      	movs	r3, r7
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80028da:	003b      	movs	r3, r7
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80028e0:	003b      	movs	r3, r7
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80028e6:	003b      	movs	r3, r7
 80028e8:	2220      	movs	r2, #32
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80028ee:	003b      	movs	r3, r7
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	0052      	lsls	r2, r2, #1
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80028f6:	0039      	movs	r1, r7
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_RTC_Init+0x140>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	0018      	movs	r0, r3
 80028fe:	f002 fd5d 	bl	80053bc <HAL_RTC_SetAlarm>
 8002902:	1e03      	subs	r3, r0, #0
 8002904:	d001      	beq.n	800290a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002906:	f000 fc97 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b010      	add	sp, #64	; 0x40
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	200006fc 	.word	0x200006fc
 8002918:	40002800 	.word	0x40002800

0800291c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <MX_SPI1_Init+0x74>)
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <MX_SPI1_Init+0x78>)
 8002924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <MX_SPI1_Init+0x74>)
 8002928:	2282      	movs	r2, #130	; 0x82
 800292a:	0052      	lsls	r2, r2, #1
 800292c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_SPI1_Init+0x74>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <MX_SPI1_Init+0x74>)
 8002936:	22e0      	movs	r2, #224	; 0xe0
 8002938:	00d2      	lsls	r2, r2, #3
 800293a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_SPI1_Init+0x74>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <MX_SPI1_Init+0x74>)
 8002944:	2200      	movs	r2, #0
 8002946:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_SPI1_Init+0x74>)
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <MX_SPI1_Init+0x74>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_SPI1_Init+0x74>)
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_SPI1_Init+0x74>)
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <MX_SPI1_Init+0x74>)
 8002964:	2200      	movs	r2, #0
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_SPI1_Init+0x74>)
 800296a:	2207      	movs	r2, #7
 800296c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <MX_SPI1_Init+0x74>)
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <MX_SPI1_Init+0x74>)
 8002976:	2208      	movs	r2, #8
 8002978:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <MX_SPI1_Init+0x74>)
 800297c:	0018      	movs	r0, r3
 800297e:	f002 ff9f 	bl	80058c0 <HAL_SPI_Init>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002986:	f000 fc57 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000728 	.word	0x20000728
 8002994:	40013000 	.word	0x40013000

08002998 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	0018      	movs	r0, r3
 80029a2:	230c      	movs	r3, #12
 80029a4:	001a      	movs	r2, r3
 80029a6:	2100      	movs	r1, #0
 80029a8:	f009 fcea 	bl	800c380 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <MX_TIM6_Init+0x6c>)
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <MX_TIM6_Init+0x70>)
 80029b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_TIM6_Init+0x6c>)
 80029b4:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <MX_TIM6_Init+0x74>)
 80029b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <MX_TIM6_Init+0x6c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_TIM6_Init+0x6c>)
 80029c0:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <MX_TIM6_Init+0x78>)
 80029c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_TIM6_Init+0x6c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_TIM6_Init+0x6c>)
 80029cc:	0018      	movs	r0, r3
 80029ce:	f003 fe79 	bl	80066c4 <HAL_TIM_Base_Init>
 80029d2:	1e03      	subs	r3, r0, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80029d6:	f000 fc2f 	bl	8003238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029e6:	1d3a      	adds	r2, r7, #4
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_TIM6_Init+0x6c>)
 80029ea:	0011      	movs	r1, r2
 80029ec:	0018      	movs	r0, r3
 80029ee:	f004 f91d 	bl	8006c2c <HAL_TIMEx_MasterConfigSynchronization>
 80029f2:	1e03      	subs	r3, r0, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80029f6:	f000 fc1f 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	2000078c 	.word	0x2000078c
 8002a08:	40001000 	.word	0x40001000
 8002a0c:	00003e7f 	.word	0x00003e7f
 8002a10:	000003e7 	.word	0x000003e7

08002a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a1a:	4a24      	ldr	r2, [pc, #144]	; (8002aac <MX_USART1_UART_Init+0x98>)
 8002a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a20:	2296      	movs	r2, #150	; 0x96
 8002a22:	0192      	lsls	r2, r2, #6
 8002a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a38:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a44:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f004 f96a 	bl	8006d38 <HAL_UART_Init>
 8002a64:	1e03      	subs	r3, r0, #0
 8002a66:	d001      	beq.n	8002a6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a68:	f000 fbe6 	bl	8003238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a6e:	2100      	movs	r1, #0
 8002a70:	0018      	movs	r0, r3
 8002a72:	f005 f837 	bl	8007ae4 <HAL_UARTEx_SetTxFifoThreshold>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a7a:	f000 fbdd 	bl	8003238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a80:	2100      	movs	r1, #0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f005 f86e 	bl	8007b64 <HAL_UARTEx_SetRxFifoThreshold>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a8c:	f000 fbd4 	bl	8003238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <MX_USART1_UART_Init+0x94>)
 8002a92:	0018      	movs	r0, r3
 8002a94:	f004 ffec 	bl	8007a70 <HAL_UARTEx_DisableFifoMode>
 8002a98:	1e03      	subs	r3, r0, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a9c:	f000 fbcc 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	200007d8 	.word	0x200007d8
 8002aac:	40013800 	.word	0x40013800

08002ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ab4:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002ab6:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <MX_USART2_UART_Init+0x98>)
 8002ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002abc:	22e1      	movs	r2, #225	; 0xe1
 8002abe:	0252      	lsls	r2, r2, #9
 8002ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002afa:	0018      	movs	r0, r3
 8002afc:	f004 f91c 	bl	8006d38 <HAL_UART_Init>
 8002b00:	1e03      	subs	r3, r0, #0
 8002b02:	d001      	beq.n	8002b08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b04:	f000 fb98 	bl	8003238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b08:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f004 ffe9 	bl	8007ae4 <HAL_UARTEx_SetTxFifoThreshold>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d001      	beq.n	8002b1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b16:	f000 fb8f 	bl	8003238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f005 f820 	bl	8007b64 <HAL_UARTEx_SetRxFifoThreshold>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d001      	beq.n	8002b2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b28:	f000 fb86 	bl	8003238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <MX_USART2_UART_Init+0x94>)
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f004 ff9e 	bl	8007a70 <HAL_UARTEx_DisableFifoMode>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b38:	f000 fb7e 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	2000086c 	.word	0x2000086c
 8002b48:	40004400 	.word	0x40004400

08002b4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <MX_USART3_UART_Init+0x64>)
 8002b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b58:	2296      	movs	r2, #150	; 0x96
 8002b5a:	0192      	lsls	r2, r2, #6
 8002b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b72:	220c      	movs	r2, #12
 8002b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <MX_USART3_UART_Init+0x60>)
 8002b96:	0018      	movs	r0, r3
 8002b98:	f004 f8ce 	bl	8006d38 <HAL_UART_Init>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002ba0:	f000 fb4a 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	20000900 	.word	0x20000900
 8002bb0:	40004800 	.word	0x40004800

08002bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b08b      	sub	sp, #44	; 0x2c
 8002bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bba:	2414      	movs	r4, #20
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	2314      	movs	r3, #20
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	f009 fbdb 	bl	800c380 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bca:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bce:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd6:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	2204      	movs	r2, #4
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be2:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be6:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002be8:	2120      	movs	r1, #32
 8002bea:	430a      	orrs	r2, r1
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
 8002bee:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002c00:	2101      	movs	r1, #1
 8002c02:	430a      	orrs	r2, r1
 8002c04:	635a      	str	r2, [r3, #52]	; 0x34
 8002c06:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c16:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002c18:	2102      	movs	r1, #2
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c1e:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <MX_GPIO_Init+0x178>)
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002c2a:	2388      	movs	r3, #136	; 0x88
 8002c2c:	015b      	lsls	r3, r3, #5
 8002c2e:	4840      	ldr	r0, [pc, #256]	; (8002d30 <MX_GPIO_Init+0x17c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	0019      	movs	r1, r3
 8002c34:	f001 fa23 	bl	800407e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8002c38:	493e      	ldr	r1, [pc, #248]	; (8002d34 <MX_GPIO_Init+0x180>)
 8002c3a:	23a0      	movs	r3, #160	; 0xa0
 8002c3c:	05db      	lsls	r3, r3, #23
 8002c3e:	2200      	movs	r2, #0
 8002c40:	0018      	movs	r0, r3
 8002c42:	f001 fa1c 	bl	800407e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI1_CS_GPIO_Port, LIS_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	01db      	lsls	r3, r3, #7
 8002c4a:	483b      	ldr	r0, [pc, #236]	; (8002d38 <MX_GPIO_Init+0x184>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	0019      	movs	r1, r3
 8002c50:	f001 fa15 	bl	800407e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L86_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|L86_PWR_SW_Pin;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2288      	movs	r2, #136	; 0x88
 8002c58:	0152      	lsls	r2, r2, #5
 8002c5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	2201      	movs	r2, #1
 8002c60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	4a2f      	ldr	r2, [pc, #188]	; (8002d30 <MX_GPIO_Init+0x17c>)
 8002c72:	0019      	movs	r1, r3
 8002c74:	0010      	movs	r0, r2
 8002c76:	f000 ffb1 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin;
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a2d      	ldr	r2, [pc, #180]	; (8002d34 <MX_GPIO_Init+0x180>)
 8002c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	2201      	movs	r2, #1
 8002c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	193a      	adds	r2, r7, r4
 8002c94:	23a0      	movs	r3, #160	; 0xa0
 8002c96:	05db      	lsls	r3, r3, #23
 8002c98:	0011      	movs	r1, r2
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 ff9e 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LIS_SPI1_CS_Pin;
 8002ca0:	0021      	movs	r1, r4
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	01d2      	lsls	r2, r2, #7
 8002ca8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002caa:	000c      	movs	r4, r1
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	2201      	movs	r2, #1
 8002cb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIS_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <MX_GPIO_Init+0x184>)
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	f000 ff89 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	0152      	lsls	r2, r2, #5
 8002cd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	2288      	movs	r2, #136	; 0x88
 8002cd6:	0352      	lsls	r2, r2, #13
 8002cd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8002ce0:	193a      	adds	r2, r7, r4
 8002ce2:	23a0      	movs	r3, #160	; 0xa0
 8002ce4:	05db      	lsls	r3, r3, #23
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 ff77 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002cee:	0021      	movs	r1, r4
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	22c0      	movs	r2, #192	; 0xc0
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	2288      	movs	r2, #136	; 0x88
 8002cfc:	0352      	lsls	r2, r2, #13
 8002cfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <MX_GPIO_Init+0x184>)
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	0010      	movs	r0, r2
 8002d0e:	f000 ff65 	bl	8003bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2101      	movs	r1, #1
 8002d16:	2007      	movs	r0, #7
 8002d18:	f000 ff2a 	bl	8003b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002d1c:	2007      	movs	r0, #7
 8002d1e:	f000 ff3c 	bl	8003b9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b00b      	add	sp, #44	; 0x2c
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	50000800 	.word	0x50000800
 8002d34:	00008860 	.word	0x00008860
 8002d38:	50000400 	.word	0x50000400

08002d3c <prepare_payload>:

/* USER CODE BEGIN 4 */
bool prepare_payload ( void )
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af04      	add	r7, sp, #16
	astro_geo_wr_latitude = 0 ;
 8002d42:	4b48      	ldr	r3, [pc, #288]	; (8002e64 <prepare_payload+0x128>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
	astro_geo_wr_longitude = 0 ;
 8002d48:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <prepare_payload+0x12c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
	if ( my_lx6_get_coordinates ( my_lx6_gnss_max_active_time , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <prepare_payload+0x130>)
 8002d50:	8818      	ldrh	r0, [r3, #0]
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <prepare_payload+0x134>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4943      	ldr	r1, [pc, #268]	; (8002e68 <prepare_payload+0x12c>)
 8002d5a:	9102      	str	r1, [sp, #8]
 8002d5c:	4941      	ldr	r1, [pc, #260]	; (8002e64 <prepare_payload+0x128>)
 8002d5e:	9101      	str	r1, [sp, #4]
 8002d60:	4944      	ldr	r1, [pc, #272]	; (8002e74 <prepare_payload+0x138>)
 8002d62:	9100      	str	r1, [sp, #0]
 8002d64:	f007 f8b0 	bl	8009ec8 <my_lx6_get_coordinates>
 8002d68:	1e03      	subs	r3, r0, #0
 8002d6a:	d100      	bne.n	8002d6e <prepare_payload+0x32>
 8002d6c:	e075      	b.n	8002e5a <prepare_payload+0x11e>
	{
		my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <prepare_payload+0x128>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <prepare_payload+0x12c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	0019      	movs	r1, r3
 8002d78:	0010      	movs	r0, r2
 8002d7a:	f007 f807 	bl	8009d8c <my_astro_write_coordinates>

		// Update ts of last fix
		my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 8002d7e:	4a3e      	ldr	r2, [pc, #248]	; (8002e78 <prepare_payload+0x13c>)
 8002d80:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <prepare_payload+0x140>)
 8002d82:	0011      	movs	r1, r2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f007 fadd 	bl	800a344 <my_rtc_get_dt>
		last_fix_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 8002d8a:	4a3b      	ldr	r2, [pc, #236]	; (8002e78 <prepare_payload+0x13c>)
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <prepare_payload+0x140>)
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f007 fb89 	bl	800a4a8 <my_conv_rtc2timestamp>
 8002d96:	0002      	movs	r2, r0
 8002d98:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <prepare_payload+0x144>)
 8002d9a:	601a      	str	r2, [r3, #0]

		dbg_buff[0] = 0 ;
 8002d9c:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <prepare_payload+0x148>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "Last fix timestap: %lu" , last_fix_ts ) ;
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <prepare_payload+0x144>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4938      	ldr	r1, [pc, #224]	; (8002e88 <prepare_payload+0x14c>)
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <prepare_payload+0x148>)
 8002daa:	0018      	movs	r0, r3
 8002dac:	f009 fa52 	bl	800c254 <sprintf>
		send_debug_logs ( dbg_buff ) ;
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <prepare_payload+0x148>)
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 f880 	bl	8002eb8 <send_debug_logs>

		my_rtc_get_time_s ( rtc_dt_s ) ;
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <prepare_payload+0x150>)
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f007 fada 	bl	800a374 <my_rtc_get_time_s>
		send_debug_logs ( rtc_dt_s ) ;
 8002dc0:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <prepare_payload+0x150>)
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f878 	bl	8002eb8 <send_debug_logs>

		if ( nmea_fixed_pdop_d < 100.0 )
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <prepare_payload+0x138>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <prepare_payload+0x154>)
 8002dd2:	f7fd fb3f 	bl	8000454 <__aeabi_dcmplt>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d00a      	beq.n	8002df0 <prepare_payload+0xb4>
		{
			snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <prepare_payload+0x138>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	492c      	ldr	r1, [pc, #176]	; (8002e94 <prepare_payload+0x158>)
 8002de2:	482d      	ldr	r0, [pc, #180]	; (8002e98 <prepare_payload+0x15c>)
 8002de4:	9200      	str	r2, [sp, #0]
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	000a      	movs	r2, r1
 8002dea:	2105      	movs	r1, #5
 8002dec:	f009 f9fe 	bl	800c1ec <snprintf>
		}

		agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <prepare_payload+0x160>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	001a      	movs	r2, r3
 8002df6:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <prepare_payload+0x164>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	18d2      	adds	r2, r2, r3
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <prepare_payload+0x164>)
 8002dfe:	601a      	str	r2, [r3, #0]

		sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds ) ;
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <prepare_payload+0x160>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	001c      	movs	r4, r3
 8002e06:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <prepare_payload+0x164>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <prepare_payload+0x15c>)
 8002e0c:	4925      	ldr	r1, [pc, #148]	; (8002ea4 <prepare_payload+0x168>)
 8002e0e:	4826      	ldr	r0, [pc, #152]	; (8002ea8 <prepare_payload+0x16c>)
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	0023      	movs	r3, r4
 8002e14:	f009 fa1e 	bl	800c254 <sprintf>
		sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 8002e18:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <prepare_payload+0x16c>)
 8002e1a:	4924      	ldr	r1, [pc, #144]	; (8002eac <prepare_payload+0x170>)
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <prepare_payload+0x174>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f009 fa18 	bl	800c254 <sprintf>
		send_debug_logs ( astro_payload_log ) ;
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <prepare_payload+0x174>)
 8002e26:	0018      	movs	r0, r3
 8002e28:	f000 f846 	bl	8002eb8 <send_debug_logs>
		// astronode_send_pld_fr () ; // Don't clear entire payload queue because it's worth having a travel history, even if sent with delay.
		my_astro_add_payload_2_queue ( astro_payload_id_counter++ , payload ) ;
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <prepare_payload+0x178>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	b291      	uxth	r1, r2
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <prepare_payload+0x178>)
 8002e36:	8011      	strh	r1, [r2, #0]
 8002e38:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <prepare_payload+0x16c>)
 8002e3a:	0011      	movs	r1, r2
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f006 ff3d 	bl	8009cbc <my_astro_add_payload_2_queue>
		if ( astro_payload_id_counter == 0 ) // Avoid id = 0 to avoid collision with control test payload that is always 0
 8002e42:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <prepare_payload+0x178>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <prepare_payload+0x11a>
		{
			astro_payload_id_counter++ ;
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <prepare_payload+0x178>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <prepare_payload+0x178>)
 8002e54:	801a      	strh	r2, [r3, #0]
		}
		return true ;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <prepare_payload+0x120>
	}

	return false ;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b001      	add	sp, #4
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	20000a10 	.word	0x20000a10
 8002e68:	20000a14 	.word	0x20000a14
 8002e6c:	20000010 	.word	0x20000010
 8002e70:	20000008 	.word	0x20000008
 8002e74:	20000018 	.word	0x20000018
 8002e78:	20000b98 	.word	0x20000b98
 8002e7c:	20000bac 	.word	0x20000bac
 8002e80:	20000a20 	.word	0x20000a20
 8002e84:	20000994 	.word	0x20000994
 8002e88:	08012eb8 	.word	0x08012eb8
 8002e8c:	200009f8 	.word	0x200009f8
 8002e90:	40590000 	.word	0x40590000
 8002e94:	08012ed0 	.word	0x08012ed0
 8002e98:	20000a18 	.word	0x20000a18
 8002e9c:	20000a24 	.word	0x20000a24
 8002ea0:	20000a28 	.word	0x20000a28
 8002ea4:	08012ed8 	.word	0x08012ed8
 8002ea8:	20000a30 	.word	0x20000a30
 8002eac:	08012ee4 	.word	0x08012ee4
 8002eb0:	20000ad0 	.word	0x20000ad0
 8002eb4:	20000020 	.word	0x20000020

08002eb8 <send_debug_logs>:

void send_debug_logs ( char* p_tx_buffer )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7fd f91e 	bl	8000104 <strlen>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2bfa      	cmp	r3, #250	; 0xfa
 8002ed0:	d908      	bls.n	8002ee4 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002ed2:	23fa      	movs	r3, #250	; 0xfa
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	490d      	ldr	r1, [pc, #52]	; (8002f0c <send_debug_logs+0x54>)
 8002ed8:	480d      	ldr	r0, [pc, #52]	; (8002f10 <send_debug_logs+0x58>)
 8002eda:	222a      	movs	r2, #42	; 0x2a
 8002edc:	f003 ffc2 	bl	8006e64 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002ee0:	23fa      	movs	r3, #250	; 0xfa
 8002ee2:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	23fa      	movs	r3, #250	; 0xfa
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4808      	ldr	r0, [pc, #32]	; (8002f10 <send_debug_logs+0x58>)
 8002ef0:	f003 ffb8 	bl	8006e64 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002ef4:	23fa      	movs	r3, #250	; 0xfa
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4906      	ldr	r1, [pc, #24]	; (8002f14 <send_debug_logs+0x5c>)
 8002efa:	4805      	ldr	r0, [pc, #20]	; (8002f10 <send_debug_logs+0x58>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	f003 ffb1 	bl	8006e64 <HAL_UART_Transmit>
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b004      	add	sp, #16
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	08012efc 	.word	0x08012efc
 8002f10:	2000086c 	.word	0x2000086c
 8002f14:	08012f28 	.word	0x08012f28

08002f18 <reset_astronode>:
void reset_astronode ( void )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	0119      	lsls	r1, r3, #4
 8002f20:	23a0      	movs	r3, #160	; 0xa0
 8002f22:	05db      	lsls	r3, r3, #23
 8002f24:	2201      	movs	r2, #1
 8002f26:	0018      	movs	r0, r3
 8002f28:	f001 f8a9 	bl	800407e <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	f000 fd3d 	bl	80039ac <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	0119      	lsls	r1, r3, #4
 8002f36:	23a0      	movs	r3, #160	; 0xa0
 8002f38:	05db      	lsls	r3, r3, #23
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f001 f89e 	bl	800407e <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002f42:	20fa      	movs	r0, #250	; 0xfa
 8002f44:	f000 fd32 	bl	80039ac <HAL_Delay>
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <send_astronode_request+0x34>)
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff ffab 	bl	8002eb8 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7ff ffa7 	bl	8002eb8 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	23fa      	movs	r3, #250	; 0xfa
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4804      	ldr	r0, [pc, #16]	; (8002f88 <send_astronode_request+0x38>)
 8002f76:	f003 ff75 	bl	8006e64 <HAL_UART_Transmit>
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	08012f2c 	.word	0x08012f2c
 8002f88:	200007d8 	.word	0x200007d8

08002f8c <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4806      	ldr	r0, [pc, #24]	; (8002fb0 <is_astronode_character_received+0x24>)
 8002f98:	2364      	movs	r3, #100	; 0x64
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f003 fffe 	bl	8006f9c <HAL_UART_Receive>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	425a      	negs	r2, r3
 8002fa4:	4153      	adcs	r3, r2
 8002fa6:	b2db      	uxtb	r3, r3
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200007d8 	.word	0x200007d8

08002fb4 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	23a0      	movs	r3, #160	; 0xa0
 8002fbe:	05db      	lsls	r3, r3, #23
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f001 f83e 	bl	8004044 <HAL_GPIO_ReadPin>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	425a      	negs	r2, r3
 8002fce:	4153      	adcs	r3, r2
 8002fd0:	b2db      	uxtb	r3, r3
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <get_systick>:

uint32_t get_systick ( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002fdc:	f000 fcdc 	bl	8003998 <HAL_GetTick>
 8002fe0:	0003      	movs	r3, r0
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	000a      	movs	r2, r1
 8002ff2:	1cbb      	adds	r3, r7, #2
 8002ff4:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002ff6:	f7ff ffef 	bl	8002fd8 <get_systick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	1cba      	adds	r2, r7, #2
 8003002:	8812      	ldrh	r2, [r2, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	419b      	sbcs	r3, r3
 8003008:	425b      	negs	r3, r3
 800300a:	b2db      	uxtb	r3, r3
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b002      	add	sp, #8
 8003012:	bd80      	pop	{r7, pc}

08003014 <my_lx6_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_lx6_on ( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4808      	ldr	r0, [pc, #32]	; (8003040 <my_lx6_on+0x2c>)
 800301e:	2201      	movs	r2, #1
 8003020:	0019      	movs	r1, r3
 8003022:	f001 f82c 	bl	800407e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	015b      	lsls	r3, r3, #5
 800302a:	4805      	ldr	r0, [pc, #20]	; (8003040 <my_lx6_on+0x2c>)
 800302c:	2201      	movs	r2, #1
 800302e:	0019      	movs	r1, r3
 8003030:	f001 f825 	bl	800407e <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8003034:	f7ff fd8a 	bl	8002b4c <MX_USART3_UART_Init>
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	50000800 	.word	0x50000800

08003044 <my_lx6_off>:
void my_lx6_off ( void )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4809      	ldr	r0, [pc, #36]	; (8003074 <my_lx6_off+0x30>)
 800304e:	2200      	movs	r2, #0
 8003050:	0019      	movs	r1, r3
 8003052:	f001 f814 	bl	800407e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	015b      	lsls	r3, r3, #5
 800305a:	4806      	ldr	r0, [pc, #24]	; (8003074 <my_lx6_off+0x30>)
 800305c:	2200      	movs	r2, #0
 800305e:	0019      	movs	r1, r3
 8003060:	f001 f80d 	bl	800407e <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <my_lx6_off+0x34>)
 8003066:	0018      	movs	r0, r3
 8003068:	f003 febc 	bl	8006de4 <HAL_UART_DeInit>
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	50000800 	.word	0x50000800
 8003078:	20000900 	.word	0x20000900

0800307c <my_lis2dw12_platform_write>:
int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 800307c:	b5b0      	push	{r4, r5, r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	0008      	movs	r0, r1
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	0019      	movs	r1, r3
 800308a:	240b      	movs	r4, #11
 800308c:	193b      	adds	r3, r7, r4
 800308e:	1c02      	adds	r2, r0, #0
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	2508      	movs	r5, #8
 8003094:	197b      	adds	r3, r7, r5
 8003096:	1c0a      	adds	r2, r1, #0
 8003098:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	01db      	lsls	r3, r3, #7
 800309e:	4812      	ldr	r0, [pc, #72]	; (80030e8 <my_lis2dw12_platform_write+0x6c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	0019      	movs	r1, r3
 80030a4:	f000 ffeb 	bl	800407e <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80030a8:	2014      	movs	r0, #20
 80030aa:	f000 fc7f 	bl	80039ac <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 80030ae:	23fa      	movs	r3, #250	; 0xfa
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	1939      	adds	r1, r7, r4
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f002 fcba 	bl	8005a30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 80030bc:	23fa      	movs	r3, #250	; 0xfa
 80030be:	009c      	lsls	r4, r3, #2
 80030c0:	197b      	adds	r3, r7, r5
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	0023      	movs	r3, r4
 80030ca:	f002 fcb1 	bl	8005a30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	01db      	lsls	r3, r3, #7
 80030d2:	4805      	ldr	r0, [pc, #20]	; (80030e8 <my_lis2dw12_platform_write+0x6c>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	0019      	movs	r1, r3
 80030d8:	f000 ffd1 	bl	800407e <HAL_GPIO_WritePin>

	return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bdb0      	pop	{r4, r5, r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	50000400 	.word	0x50000400

080030ec <my_lis2dw12_platform_read>:
int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	0008      	movs	r0, r1
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	0019      	movs	r1, r3
 80030fa:	240b      	movs	r4, #11
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	1c02      	adds	r2, r0, #0
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	2508      	movs	r5, #8
 8003104:	197b      	adds	r3, r7, r5
 8003106:	1c0a      	adds	r2, r1, #0
 8003108:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 800310a:	193b      	adds	r3, r7, r4
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2280      	movs	r2, #128	; 0x80
 8003110:	4252      	negs	r2, r2
 8003112:	4313      	orrs	r3, r2
 8003114:	b2da      	uxtb	r2, r3
 8003116:	193b      	adds	r3, r7, r4
 8003118:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	01db      	lsls	r3, r3, #7
 800311e:	4812      	ldr	r0, [pc, #72]	; (8003168 <my_lis2dw12_platform_read+0x7c>)
 8003120:	2200      	movs	r2, #0
 8003122:	0019      	movs	r1, r3
 8003124:	f000 ffab 	bl	800407e <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003128:	2014      	movs	r0, #20
 800312a:	f000 fc3f 	bl	80039ac <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 800312e:	23fa      	movs	r3, #250	; 0xfa
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	1939      	adds	r1, r7, r4
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f002 fc7a 	bl	8005a30 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 800313c:	23fa      	movs	r3, #250	; 0xfa
 800313e:	009c      	lsls	r4, r3, #2
 8003140:	197b      	adds	r3, r7, r5
 8003142:	881a      	ldrh	r2, [r3, #0]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	0023      	movs	r3, r4
 800314a:	f002 fdc9 	bl	8005ce0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	01db      	lsls	r3, r3, #7
 8003152:	4805      	ldr	r0, [pc, #20]	; (8003168 <my_lis2dw12_platform_read+0x7c>)
 8003154:	2201      	movs	r2, #1
 8003156:	0019      	movs	r1, r3
 8003158:	f000 ff91 	bl	800407e <HAL_GPIO_WritePin>

	return 0;
 800315c:	2300      	movs	r3, #0
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bdb0      	pop	{r4, r5, r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	50000400 	.word	0x50000400

0800316c <is_system_initialized>:
bool is_system_initialized ( void )
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	uint32_t commn_ts = astronode_send_rtc_rr () ;
 8003172:	f005 fa93 	bl	800869c <astronode_send_rtc_rr>
 8003176:	0003      	movs	r3, r0
 8003178:	607b      	str	r3, [r7, #4]

	yyyy = my_rtc_get_time_s ( rtc_dt_s ) ;
 800317a:	1cbc      	adds	r4, r7, #2
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <is_system_initialized+0x44>)
 800317e:	0018      	movs	r0, r3
 8003180:	f007 f8f8 	bl	800a374 <my_rtc_get_time_s>
 8003184:	0003      	movs	r3, r0
 8003186:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <is_system_initialized+0x44>)
 800318a:	0018      	movs	r0, r3
 800318c:	f7ff fe94 	bl	8002eb8 <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR || commn_ts != 0 )
 8003190:	1cbb      	adds	r3, r7, #2
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <is_system_initialized+0x48>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d802      	bhi.n	80031a0 <is_system_initialized+0x34>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <is_system_initialized+0x38>
	{
		return true ;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <is_system_initialized+0x3a>
	}
	return false ;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b003      	add	sp, #12
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	200009f8 	.word	0x200009f8
 80031b4:	000007e6 	.word	0x000007e6

080031b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10d      	bne.n	80031e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031d4:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031d8:	881a      	ldrh	r2, [r3, #0]
 80031da:	23e1      	movs	r3, #225	; 0xe1
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	429a      	cmp	r2, r3
 80031e0:	d901      	bls.n	80031e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 80031e2:	f000 fcea 	bl	8003bba <HAL_NVIC_SystemReset>
		  }
	}
}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b002      	add	sp, #8
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	40001000 	.word	0x40001000
 80031f4:	20000a24 	.word	0x20000a24

080031f8 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	0002      	movs	r2, r0
 8003200:	1dbb      	adds	r3, r7, #6
 8003202:	801a      	strh	r2, [r3, #0]
	if ( GPIO_Pin == 0x100 ) // LIS_INT1_EXTI8_Pin = 0x100
 8003204:	1dbb      	adds	r3, r7, #6
 8003206:	881a      	ldrh	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	429a      	cmp	r2, r3
 800320e:	d102      	bne.n	8003216 <HAL_GPIO_EXTI_Rising_Callback+0x1e>
	{
		is_acc_int1_wkup_flag = true ;
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "INT on GPIO_Pin %04x detected!\n" , GPIO_Pin ) ;
		send_debug_logs ( dbg_buff ) ;
		*/
	}
	//zamiast poniższego może lepiej wrócić do pierwotnego przeglądania GPIO w trybie input bez przerwania
	if ( GPIO_Pin == 0x1000 ) // ASTRO_EVT_Pin = 0x1000
 8003216:	1dbb      	adds	r3, r7, #6
 8003218:	881a      	ldrh	r2, [r3, #0]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	015b      	lsls	r3, r3, #5
 800321e:	429a      	cmp	r2, r3
 8003220:	d102      	bne.n	8003228 <HAL_GPIO_EXTI_Rising_Callback+0x30>
	{
		is_astro_evt_flag = true ;
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <HAL_GPIO_EXTI_Rising_Callback+0x3c>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
	}
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000bb0 	.word	0x20000bb0
 8003234:	20000bb1 	.word	0x20000bb1

08003238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800323c:	b672      	cpsid	i
}
 800323e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003240:	e7fe      	b.n	8003240 <Error_Handler+0x8>
	...

08003244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_MspInit+0x44>)
 800324c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_MspInit+0x44>)
 8003250:	2101      	movs	r1, #1
 8003252:	430a      	orrs	r2, r1
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <HAL_MspInit+0x44>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2201      	movs	r2, #1
 800325c:	4013      	ands	r3, r2
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_MspInit+0x44>)
 8003264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_MspInit+0x44>)
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	0549      	lsls	r1, r1, #21
 800326c:	430a      	orrs	r2, r1
 800326e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_MspInit+0x44>)
 8003272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	055b      	lsls	r3, r3, #21
 8003278:	4013      	ands	r3, r2
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	40021000 	.word	0x40021000

0800328c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b091      	sub	sp, #68	; 0x44
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003294:	240c      	movs	r4, #12
 8003296:	193b      	adds	r3, r7, r4
 8003298:	0018      	movs	r0, r3
 800329a:	2334      	movs	r3, #52	; 0x34
 800329c:	001a      	movs	r2, r3
 800329e:	2100      	movs	r1, #0
 80032a0:	f009 f86e 	bl	800c380 <memset>
  if(hrtc->Instance==RTC)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a15      	ldr	r2, [pc, #84]	; (8003300 <HAL_RTC_MspInit+0x74>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d124      	bne.n	80032f8 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	0292      	lsls	r2, r2, #10
 80032b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80032b6:	193b      	adds	r3, r7, r4
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	0018      	movs	r0, r3
 80032c2:	f001 fc3d 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 80032c6:	1e03      	subs	r3, r0, #0
 80032c8:	d001      	beq.n	80032ce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80032ca:	f7ff ffb5 	bl	8003238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <HAL_RTC_MspInit+0x78>)
 80032d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <HAL_RTC_MspInit+0x78>)
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0209      	lsls	r1, r1, #8
 80032d8:	430a      	orrs	r2, r1
 80032da:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RTC_MspInit+0x78>)
 80032de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RTC_MspInit+0x78>)
 80032e2:	2180      	movs	r1, #128	; 0x80
 80032e4:	00c9      	lsls	r1, r1, #3
 80032e6:	430a      	orrs	r2, r1
 80032e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RTC_MspInit+0x78>)
 80032ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4013      	ands	r3, r2
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b011      	add	sp, #68	; 0x44
 80032fe:	bd90      	pop	{r4, r7, pc}
 8003300:	40002800 	.word	0x40002800
 8003304:	40021000 	.word	0x40021000

08003308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b08b      	sub	sp, #44	; 0x2c
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	2414      	movs	r4, #20
 8003312:	193b      	adds	r3, r7, r4
 8003314:	0018      	movs	r0, r3
 8003316:	2314      	movs	r3, #20
 8003318:	001a      	movs	r2, r3
 800331a:	2100      	movs	r1, #0
 800331c:	f009 f830 	bl	800c380 <memset>
  if(hspi->Instance==SPI1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_SPI_MspInit+0x8c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d12f      	bne.n	800338a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_SPI_MspInit+0x90>)
 800332c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800332e:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <HAL_SPI_MspInit+0x90>)
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	0149      	lsls	r1, r1, #5
 8003334:	430a      	orrs	r2, r1
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <HAL_SPI_MspInit+0x90>)
 800333a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	015b      	lsls	r3, r3, #5
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_SPI_MspInit+0x90>)
 8003348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <HAL_SPI_MspInit+0x90>)
 800334c:	2102      	movs	r1, #2
 800334e:	430a      	orrs	r2, r1
 8003350:	635a      	str	r2, [r3, #52]	; 0x34
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_SPI_MspInit+0x90>)
 8003354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003356:	2202      	movs	r2, #2
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LIS_SPI1_SCK_Pin|LIS_SPI1_MISO_Pin|LIS_SPI1_MOSI_Pin;
 800335e:	0021      	movs	r1, r4
 8003360:	187b      	adds	r3, r7, r1
 8003362:	2238      	movs	r2, #56	; 0x38
 8003364:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	187b      	adds	r3, r7, r1
 8003368:	2202      	movs	r2, #2
 800336a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003378:	187b      	adds	r3, r7, r1
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337e:	187b      	adds	r3, r7, r1
 8003380:	4a06      	ldr	r2, [pc, #24]	; (800339c <HAL_SPI_MspInit+0x94>)
 8003382:	0019      	movs	r1, r3
 8003384:	0010      	movs	r0, r2
 8003386:	f000 fc29 	bl	8003bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b00b      	add	sp, #44	; 0x2c
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	40013000 	.word	0x40013000
 8003398:	40021000 	.word	0x40021000
 800339c:	50000400 	.word	0x50000400

080033a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <HAL_TIM_Base_MspInit+0x44>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d113      	bne.n	80033da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_TIM_Base_MspInit+0x48>)
 80033b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_TIM_Base_MspInit+0x48>)
 80033b8:	2110      	movs	r1, #16
 80033ba:	430a      	orrs	r2, r1
 80033bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_TIM_Base_MspInit+0x48>)
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	2210      	movs	r2, #16
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	2011      	movs	r0, #17
 80033d0:	f000 fbce 	bl	8003b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80033d4:	2011      	movs	r0, #17
 80033d6:	f000 fbe0 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b004      	add	sp, #16
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	40001000 	.word	0x40001000
 80033e8:	40021000 	.word	0x40021000

080033ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b09b      	sub	sp, #108	; 0x6c
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	2354      	movs	r3, #84	; 0x54
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	0018      	movs	r0, r3
 80033fa:	2314      	movs	r3, #20
 80033fc:	001a      	movs	r2, r3
 80033fe:	2100      	movs	r1, #0
 8003400:	f008 ffbe 	bl	800c380 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003404:	2420      	movs	r4, #32
 8003406:	193b      	adds	r3, r7, r4
 8003408:	0018      	movs	r0, r3
 800340a:	2334      	movs	r3, #52	; 0x34
 800340c:	001a      	movs	r2, r3
 800340e:	2100      	movs	r1, #0
 8003410:	f008 ffb6 	bl	800c380 <memset>
  if(huart->Instance==USART1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a61      	ldr	r2, [pc, #388]	; (80035a0 <HAL_UART_MspInit+0x1b4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d140      	bne.n	80034a0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800341e:	193b      	adds	r3, r7, r4
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003424:	193b      	adds	r3, r7, r4
 8003426:	2200      	movs	r2, #0
 8003428:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800342a:	193b      	adds	r3, r7, r4
 800342c:	0018      	movs	r0, r3
 800342e:	f001 fb87 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d001      	beq.n	800343a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003436:	f7ff feff 	bl	8003238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800343a:	4b5a      	ldr	r3, [pc, #360]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 800343c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 8003440:	2180      	movs	r1, #128	; 0x80
 8003442:	01c9      	lsls	r1, r1, #7
 8003444:	430a      	orrs	r2, r1
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
 8003448:	4b56      	ldr	r3, [pc, #344]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 800344a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	01db      	lsls	r3, r3, #7
 8003450:	4013      	ands	r3, r2
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003456:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 8003458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345a:	4b52      	ldr	r3, [pc, #328]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 800345c:	2101      	movs	r1, #1
 800345e:	430a      	orrs	r2, r1
 8003460:	635a      	str	r2, [r3, #52]	; 0x34
 8003462:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	2201      	movs	r2, #1
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 800346e:	2154      	movs	r1, #84	; 0x54
 8003470:	187b      	adds	r3, r7, r1
 8003472:	22c0      	movs	r2, #192	; 0xc0
 8003474:	00d2      	lsls	r2, r2, #3
 8003476:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	187b      	adds	r3, r7, r1
 800347a:	2202      	movs	r2, #2
 800347c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2200      	movs	r2, #0
 8003488:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800348a:	187b      	adds	r3, r7, r1
 800348c:	2201      	movs	r2, #1
 800348e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	187a      	adds	r2, r7, r1
 8003492:	23a0      	movs	r3, #160	; 0xa0
 8003494:	05db      	lsls	r3, r3, #23
 8003496:	0011      	movs	r1, r2
 8003498:	0018      	movs	r0, r3
 800349a:	f000 fb9f 	bl	8003bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800349e:	e07b      	b.n	8003598 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <HAL_UART_MspInit+0x1bc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d140      	bne.n	800352c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034aa:	2120      	movs	r1, #32
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	2202      	movs	r2, #2
 80034b0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034b8:	187b      	adds	r3, r7, r1
 80034ba:	0018      	movs	r0, r3
 80034bc:	f001 fb40 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 80034c0:	1e03      	subs	r3, r0, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80034c4:	f7ff feb8 	bl	8003238 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 80034ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034cc:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	0289      	lsls	r1, r1, #10
 80034d2:	430a      	orrs	r2, r1
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80034d6:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 80034d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	029b      	lsls	r3, r3, #10
 80034de:	4013      	ands	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e4:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 80034e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e8:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 80034ea:	2101      	movs	r1, #1
 80034ec:	430a      	orrs	r2, r1
 80034ee:	635a      	str	r2, [r3, #52]	; 0x34
 80034f0:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	2201      	movs	r2, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 80034fc:	2154      	movs	r1, #84	; 0x54
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	220c      	movs	r2, #12
 8003502:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	187b      	adds	r3, r7, r1
 8003506:	2202      	movs	r2, #2
 8003508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800350a:	187b      	adds	r3, r7, r1
 800350c:	2201      	movs	r2, #1
 800350e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	187b      	adds	r3, r7, r1
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2201      	movs	r2, #1
 800351a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351c:	187a      	adds	r2, r7, r1
 800351e:	23a0      	movs	r3, #160	; 0xa0
 8003520:	05db      	lsls	r3, r3, #23
 8003522:	0011      	movs	r1, r2
 8003524:	0018      	movs	r0, r3
 8003526:	f000 fb59 	bl	8003bdc <HAL_GPIO_Init>
}
 800352a:	e035      	b.n	8003598 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d130      	bne.n	8003598 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 8003538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	02c9      	lsls	r1, r1, #11
 8003540:	430a      	orrs	r2, r1
 8003542:	63da      	str	r2, [r3, #60]	; 0x3c
 8003544:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 8003546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	02db      	lsls	r3, r3, #11
 800354c:	4013      	ands	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 8003554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 8003558:	2104      	movs	r1, #4
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	; 0x34
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_UART_MspInit+0x1b8>)
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	2204      	movs	r2, #4
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 800356a:	2154      	movs	r1, #84	; 0x54
 800356c:	187b      	adds	r3, r7, r1
 800356e:	22c0      	movs	r2, #192	; 0xc0
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	187b      	adds	r3, r7, r1
 8003576:	2202      	movs	r2, #2
 8003578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	187b      	adds	r3, r7, r1
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003580:	187b      	adds	r3, r7, r1
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8003586:	187b      	adds	r3, r7, r1
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800358c:	187b      	adds	r3, r7, r1
 800358e:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <HAL_UART_MspInit+0x1c4>)
 8003590:	0019      	movs	r1, r3
 8003592:	0010      	movs	r0, r2
 8003594:	f000 fb22 	bl	8003bdc <HAL_GPIO_Init>
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b01b      	add	sp, #108	; 0x6c
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	40013800 	.word	0x40013800
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40004400 	.word	0x40004400
 80035ac:	40004800 	.word	0x40004800
 80035b0:	50000800 	.word	0x50000800

080035b4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_UART_MspDeInit+0x80>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d10e      	bne.n	80035e4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HAL_UART_MspDeInit+0x84>)
 80035c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ca:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <HAL_UART_MspDeInit+0x84>)
 80035cc:	491b      	ldr	r1, [pc, #108]	; (800363c <HAL_UART_MspDeInit+0x88>)
 80035ce:	400a      	ands	r2, r1
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 80035d2:	23c0      	movs	r3, #192	; 0xc0
 80035d4:	00da      	lsls	r2, r3, #3
 80035d6:	23a0      	movs	r3, #160	; 0xa0
 80035d8:	05db      	lsls	r3, r3, #23
 80035da:	0011      	movs	r1, r2
 80035dc:	0018      	movs	r0, r3
 80035de:	f000 fc61 	bl	8003ea4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80035e2:	e023      	b.n	800362c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <HAL_UART_MspDeInit+0x8c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10c      	bne.n	8003608 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_UART_MspDeInit+0x84>)
 80035f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035f2:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_UART_MspDeInit+0x84>)
 80035f4:	4913      	ldr	r1, [pc, #76]	; (8003644 <HAL_UART_MspDeInit+0x90>)
 80035f6:	400a      	ands	r2, r1
 80035f8:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 80035fa:	23a0      	movs	r3, #160	; 0xa0
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	210c      	movs	r1, #12
 8003600:	0018      	movs	r0, r3
 8003602:	f000 fc4f 	bl	8003ea4 <HAL_GPIO_DeInit>
}
 8003606:	e011      	b.n	800362c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <HAL_UART_MspDeInit+0x94>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10c      	bne.n	800362c <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_UART_MspDeInit+0x84>)
 8003614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_UART_MspDeInit+0x84>)
 8003618:	490c      	ldr	r1, [pc, #48]	; (800364c <HAL_UART_MspDeInit+0x98>)
 800361a:	400a      	ands	r2, r1
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 800361e:	23c0      	movs	r3, #192	; 0xc0
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <HAL_UART_MspDeInit+0x9c>)
 8003624:	0019      	movs	r1, r3
 8003626:	0010      	movs	r0, r2
 8003628:	f000 fc3c 	bl	8003ea4 <HAL_GPIO_DeInit>
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40013800 	.word	0x40013800
 8003638:	40021000 	.word	0x40021000
 800363c:	ffffbfff 	.word	0xffffbfff
 8003640:	40004400 	.word	0x40004400
 8003644:	fffdffff 	.word	0xfffdffff
 8003648:	40004800 	.word	0x40004800
 800364c:	fffbffff 	.word	0xfffbffff
 8003650:	50000800 	.word	0x50000800

08003654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003658:	e7fe      	b.n	8003658 <NMI_Handler+0x4>

0800365a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800365e:	e7fe      	b.n	800365e <HardFault_Handler+0x4>

08003660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003678:	f000 f97c 	bl	8003974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS_INT1_EXTI8_Pin);
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	0018      	movs	r0, r3
 800368c:	f000 fd14 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIS_INT2_EXTI9_Pin);
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	0018      	movs	r0, r3
 8003696:	f000 fd0f 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	015b      	lsls	r3, r3, #5
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 fd0a 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80036b2:	0018      	movs	r0, r3
 80036b4:	f003 f8e8 	bl	8006888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	2000078c 	.word	0x2000078c

080036c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  return 1;
 80036c8:	2301      	movs	r3, #1
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <_kill>:

int _kill(int pid, int sig)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036da:	f008 fefd 	bl	800c4d8 <__errno>
 80036de:	0003      	movs	r3, r0
 80036e0:	2216      	movs	r2, #22
 80036e2:	601a      	str	r2, [r3, #0]
  return -1;
 80036e4:	2301      	movs	r3, #1
 80036e6:	425b      	negs	r3, r3
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <_exit>:

void _exit (int status)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036f8:	2301      	movs	r3, #1
 80036fa:	425a      	negs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	0011      	movs	r1, r2
 8003700:	0018      	movs	r0, r3
 8003702:	f7ff ffe5 	bl	80036d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003706:	e7fe      	b.n	8003706 <_exit+0x16>

08003708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e00a      	b.n	8003730 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800371a:	e000      	b.n	800371e <_read+0x16>
 800371c:	bf00      	nop
 800371e:	0001      	movs	r1, r0
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	60ba      	str	r2, [r7, #8]
 8003726:	b2ca      	uxtb	r2, r1
 8003728:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	3301      	adds	r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	dbf0      	blt.n	800371a <_read+0x12>
  }

  return len;
 8003738:	687b      	ldr	r3, [r7, #4]
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b006      	add	sp, #24
 8003740:	bd80      	pop	{r7, pc}

08003742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b086      	sub	sp, #24
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e009      	b.n	8003768 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	60ba      	str	r2, [r7, #8]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	0018      	movs	r0, r3
 800375e:	e000      	b.n	8003762 <_write+0x20>
 8003760:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3301      	adds	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	dbf1      	blt.n	8003754 <_write+0x12>
  }
  return len;
 8003770:	687b      	ldr	r3, [r7, #4]
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b006      	add	sp, #24
 8003778:	bd80      	pop	{r7, pc}

0800377a <_close>:

int _close(int file)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003782:	2301      	movs	r3, #1
 8003784:	425b      	negs	r3, r3
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b002      	add	sp, #8
 800378c:	bd80      	pop	{r7, pc}

0800378e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2280      	movs	r2, #128	; 0x80
 800379c:	0192      	lsls	r2, r2, #6
 800379e:	605a      	str	r2, [r3, #4]
  return 0;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b002      	add	sp, #8
 80037a8:	bd80      	pop	{r7, pc}

080037aa <_isatty>:

int _isatty(int file)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037b2:	2301      	movs	r3, #1
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}

080037bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <_sbrk+0x5c>)
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <_sbrk+0x60>)
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <_sbrk+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <_sbrk+0x64>)
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <_sbrk+0x68>)
 80037f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <_sbrk+0x64>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	18d3      	adds	r3, r2, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	429a      	cmp	r2, r3
 8003802:	d207      	bcs.n	8003814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003804:	f008 fe68 	bl	800c4d8 <__errno>
 8003808:	0003      	movs	r3, r0
 800380a:	220c      	movs	r2, #12
 800380c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800380e:	2301      	movs	r3, #1
 8003810:	425b      	negs	r3, r3
 8003812:	e009      	b.n	8003828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <_sbrk+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <_sbrk+0x64>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	18d2      	adds	r2, r2, r3
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <_sbrk+0x64>)
 8003824:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003826:	68fb      	ldr	r3, [r7, #12]
}
 8003828:	0018      	movs	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	b006      	add	sp, #24
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20009000 	.word	0x20009000
 8003834:	00000400 	.word	0x00000400
 8003838:	20000bb4 	.word	0x20000bb4
 800383c:	20000ed0 	.word	0x20000ed0

08003840 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800384c:	480d      	ldr	r0, [pc, #52]	; (8003884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800384e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003850:	f7ff fff6 	bl	8003840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003854:	480c      	ldr	r0, [pc, #48]	; (8003888 <LoopForever+0x6>)
  ldr r1, =_edata
 8003856:	490d      	ldr	r1, [pc, #52]	; (800388c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003858:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <LoopForever+0xe>)
  movs r3, #0
 800385a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800385c:	e002      	b.n	8003864 <LoopCopyDataInit>

0800385e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800385e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003862:	3304      	adds	r3, #4

08003864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003868:	d3f9      	bcc.n	800385e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800386c:	4c0a      	ldr	r4, [pc, #40]	; (8003898 <LoopForever+0x16>)
  movs r3, #0
 800386e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003870:	e001      	b.n	8003876 <LoopFillZerobss>

08003872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003874:	3204      	adds	r2, #4

08003876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003878:	d3fb      	bcc.n	8003872 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800387a:	f008 fe33 	bl	800c4e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800387e:	f7fe fe93 	bl	80025a8 <main>

08003882 <LoopForever>:

LoopForever:
  b LoopForever
 8003882:	e7fe      	b.n	8003882 <LoopForever>
  ldr   r0, =_estack
 8003884:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800388c:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 8003890:	08014c98 	.word	0x08014c98
  ldr r2, =_sbss
 8003894:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 8003898:	20000ecc 	.word	0x20000ecc

0800389c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800389c:	e7fe      	b.n	800389c <ADC1_COMP_IRQHandler>
	...

080038a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_Init+0x3c>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_Init+0x3c>)
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	0049      	lsls	r1, r1, #1
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ba:	2000      	movs	r0, #0
 80038bc:	f000 f810 	bl	80038e0 <HAL_InitTick>
 80038c0:	1e03      	subs	r3, r0, #0
 80038c2:	d003      	beq.n	80038cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e001      	b.n	80038d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80038cc:	f7ff fcba 	bl	8003244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038d0:	1dfb      	adds	r3, r7, #7
 80038d2:	781b      	ldrb	r3, [r3, #0]
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b002      	add	sp, #8
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40022000 	.word	0x40022000

080038e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038e8:	230f      	movs	r3, #15
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_InitTick+0x88>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02b      	beq.n	8003950 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <HAL_InitTick+0x8c>)
 80038fa:	681c      	ldr	r4, [r3, #0]
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_InitTick+0x88>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	0019      	movs	r1, r3
 8003902:	23fa      	movs	r3, #250	; 0xfa
 8003904:	0098      	lsls	r0, r3, #2
 8003906:	f7fc fc19 	bl	800013c <__udivsi3>
 800390a:	0003      	movs	r3, r0
 800390c:	0019      	movs	r1, r3
 800390e:	0020      	movs	r0, r4
 8003910:	f7fc fc14 	bl	800013c <__udivsi3>
 8003914:	0003      	movs	r3, r0
 8003916:	0018      	movs	r0, r3
 8003918:	f000 f953 	bl	8003bc2 <HAL_SYSTICK_Config>
 800391c:	1e03      	subs	r3, r0, #0
 800391e:	d112      	bne.n	8003946 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b03      	cmp	r3, #3
 8003924:	d80a      	bhi.n	800393c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	2301      	movs	r3, #1
 800392a:	425b      	negs	r3, r3
 800392c:	2200      	movs	r2, #0
 800392e:	0018      	movs	r0, r3
 8003930:	f000 f91e 	bl	8003b70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_InitTick+0x90>)
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e00d      	b.n	8003958 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800393c:	230f      	movs	r3, #15
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e008      	b.n	8003958 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003946:	230f      	movs	r3, #15
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e003      	b.n	8003958 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003950:	230f      	movs	r3, #15
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003958:	230f      	movs	r3, #15
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	781b      	ldrb	r3, [r3, #0]
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b005      	add	sp, #20
 8003964:	bd90      	pop	{r4, r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	2000002c 	.word	0x2000002c
 800396c:	20000024 	.word	0x20000024
 8003970:	20000028 	.word	0x20000028

08003974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_IncTick+0x1c>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	001a      	movs	r2, r3
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_IncTick+0x20>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	18d2      	adds	r2, r2, r3
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <HAL_IncTick+0x20>)
 8003986:	601a      	str	r2, [r3, #0]
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	2000002c 	.word	0x2000002c
 8003994:	20000bb8 	.word	0x20000bb8

08003998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  return uwTick;
 800399c:	4b02      	ldr	r3, [pc, #8]	; (80039a8 <HAL_GetTick+0x10>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	20000bb8 	.word	0x20000bb8

080039ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039b4:	f7ff fff0 	bl	8003998 <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3301      	adds	r3, #1
 80039c4:	d005      	beq.n	80039d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_Delay+0x44>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	001a      	movs	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	f7ff ffe0 	bl	8003998 <HAL_GetTick>
 80039d8:	0002      	movs	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d8f7      	bhi.n	80039d4 <HAL_Delay+0x28>
  {
  }
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	2000002c 	.word	0x2000002c

080039f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	0002      	movs	r2, r0
 80039fc:	1dfb      	adds	r3, r7, #7
 80039fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a00:	1dfb      	adds	r3, r7, #7
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b7f      	cmp	r3, #127	; 0x7f
 8003a06:	d809      	bhi.n	8003a1c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a08:	1dfb      	adds	r3, r7, #7
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	001a      	movs	r2, r3
 8003a0e:	231f      	movs	r3, #31
 8003a10:	401a      	ands	r2, r3
 8003a12:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <__NVIC_EnableIRQ+0x30>)
 8003a14:	2101      	movs	r1, #1
 8003a16:	4091      	lsls	r1, r2
 8003a18:	000a      	movs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	e000e100 	.word	0xe000e100

08003a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	0002      	movs	r2, r0
 8003a30:	6039      	str	r1, [r7, #0]
 8003a32:	1dfb      	adds	r3, r7, #7
 8003a34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a36:	1dfb      	adds	r3, r7, #7
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a3c:	d828      	bhi.n	8003a90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a3e:	4a2f      	ldr	r2, [pc, #188]	; (8003afc <__NVIC_SetPriority+0xd4>)
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b25b      	sxtb	r3, r3
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	33c0      	adds	r3, #192	; 0xc0
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	589b      	ldr	r3, [r3, r2]
 8003a4e:	1dfa      	adds	r2, r7, #7
 8003a50:	7812      	ldrb	r2, [r2, #0]
 8003a52:	0011      	movs	r1, r2
 8003a54:	2203      	movs	r2, #3
 8003a56:	400a      	ands	r2, r1
 8003a58:	00d2      	lsls	r2, r2, #3
 8003a5a:	21ff      	movs	r1, #255	; 0xff
 8003a5c:	4091      	lsls	r1, r2
 8003a5e:	000a      	movs	r2, r1
 8003a60:	43d2      	mvns	r2, r2
 8003a62:	401a      	ands	r2, r3
 8003a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	22ff      	movs	r2, #255	; 0xff
 8003a6c:	401a      	ands	r2, r3
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	0018      	movs	r0, r3
 8003a74:	2303      	movs	r3, #3
 8003a76:	4003      	ands	r3, r0
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a7c:	481f      	ldr	r0, [pc, #124]	; (8003afc <__NVIC_SetPriority+0xd4>)
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	430a      	orrs	r2, r1
 8003a88:	33c0      	adds	r3, #192	; 0xc0
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a8e:	e031      	b.n	8003af4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a90:	4a1b      	ldr	r2, [pc, #108]	; (8003b00 <__NVIC_SetPriority+0xd8>)
 8003a92:	1dfb      	adds	r3, r7, #7
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	0019      	movs	r1, r3
 8003a98:	230f      	movs	r3, #15
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	3b08      	subs	r3, #8
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	3306      	adds	r3, #6
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	18d3      	adds	r3, r2, r3
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	1dfa      	adds	r2, r7, #7
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	0011      	movs	r1, r2
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	00d2      	lsls	r2, r2, #3
 8003ab6:	21ff      	movs	r1, #255	; 0xff
 8003ab8:	4091      	lsls	r1, r2
 8003aba:	000a      	movs	r2, r1
 8003abc:	43d2      	mvns	r2, r2
 8003abe:	401a      	ands	r2, r3
 8003ac0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	401a      	ands	r2, r3
 8003aca:	1dfb      	adds	r3, r7, #7
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	4003      	ands	r3, r0
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ad8:	4809      	ldr	r0, [pc, #36]	; (8003b00 <__NVIC_SetPriority+0xd8>)
 8003ada:	1dfb      	adds	r3, r7, #7
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	001c      	movs	r4, r3
 8003ae0:	230f      	movs	r3, #15
 8003ae2:	4023      	ands	r3, r4
 8003ae4:	3b08      	subs	r3, #8
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	3306      	adds	r3, #6
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	18c3      	adds	r3, r0, r3
 8003af0:	3304      	adds	r3, #4
 8003af2:	601a      	str	r2, [r3, #0]
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b003      	add	sp, #12
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	e000e100 	.word	0xe000e100
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b08:	f3bf 8f4f 	dsb	sy
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <__NVIC_SystemReset+0x1c>)
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <__NVIC_SystemReset+0x20>)
 8003b12:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b14:	f3bf 8f4f 	dsb	sy
}
 8003b18:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	e7fd      	b.n	8003b1a <__NVIC_SystemReset+0x16>
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	e000ed00 	.word	0xe000ed00
 8003b24:	05fa0004 	.word	0x05fa0004

08003b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1e5a      	subs	r2, r3, #1
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	045b      	lsls	r3, r3, #17
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d301      	bcc.n	8003b40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e010      	b.n	8003b62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <SysTick_Config+0x44>)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	3a01      	subs	r2, #1
 8003b46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b48:	2301      	movs	r3, #1
 8003b4a:	425b      	negs	r3, r3
 8003b4c:	2103      	movs	r1, #3
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7ff ff6a 	bl	8003a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <SysTick_Config+0x44>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <SysTick_Config+0x44>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	e000e010 	.word	0xe000e010

08003b70 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	210f      	movs	r1, #15
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	1c02      	adds	r2, r0, #0
 8003b80:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	0011      	movs	r1, r2
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7ff ff4b 	bl	8003a28 <__NVIC_SetPriority>
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b004      	add	sp, #16
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	0018      	movs	r0, r3
 8003bae:	f7ff ff21 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b002      	add	sp, #8
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003bbe:	f7ff ffa1 	bl	8003b04 <__NVIC_SystemReset>

08003bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f7ff ffab 	bl	8003b28 <SysTick_Config>
 8003bd2:	0003      	movs	r3, r0
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bea:	e147      	b.n	8003e7c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4091      	lsls	r1, r2
 8003bf6:	000a      	movs	r2, r1
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d100      	bne.n	8003c04 <HAL_GPIO_Init+0x28>
 8003c02:	e138      	b.n	8003e76 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d005      	beq.n	8003c1c <HAL_GPIO_Init+0x40>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2203      	movs	r2, #3
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d130      	bne.n	8003c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	0013      	movs	r3, r2
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	0013      	movs	r3, r2
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c52:	2201      	movs	r2, #1
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	409a      	lsls	r2, r3
 8003c58:	0013      	movs	r3, r2
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	2201      	movs	r2, #1
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	0013      	movs	r3, r2
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2203      	movs	r2, #3
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d017      	beq.n	8003cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	2203      	movs	r2, #3
 8003c96:	409a      	lsls	r2, r3
 8003c98:	0013      	movs	r3, r2
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	409a      	lsls	r2, r3
 8003cac:	0013      	movs	r3, r2
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d123      	bne.n	8003d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	08da      	lsrs	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3208      	adds	r2, #8
 8003cce:	0092      	lsls	r2, r2, #2
 8003cd0:	58d3      	ldr	r3, [r2, r3]
 8003cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2207      	movs	r2, #7
 8003cd8:	4013      	ands	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	220f      	movs	r2, #15
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2107      	movs	r1, #7
 8003cf2:	400b      	ands	r3, r1
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	0013      	movs	r3, r2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	08da      	lsrs	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3208      	adds	r2, #8
 8003d08:	0092      	lsls	r2, r2, #2
 8003d0a:	6939      	ldr	r1, [r7, #16]
 8003d0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	2203      	movs	r2, #3
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	0013      	movs	r3, r2
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	401a      	ands	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	409a      	lsls	r2, r3
 8003d34:	0013      	movs	r3, r2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	23c0      	movs	r3, #192	; 0xc0
 8003d48:	029b      	lsls	r3, r3, #10
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d100      	bne.n	8003d50 <HAL_GPIO_Init+0x174>
 8003d4e:	e092      	b.n	8003e76 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d50:	4a50      	ldr	r2, [pc, #320]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	3318      	adds	r3, #24
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	589b      	ldr	r3, [r3, r2]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2203      	movs	r2, #3
 8003d62:	4013      	ands	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	220f      	movs	r2, #15
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	0013      	movs	r3, r2
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	23a0      	movs	r3, #160	; 0xa0
 8003d78:	05db      	lsls	r3, r3, #23
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d013      	beq.n	8003da6 <HAL_GPIO_Init+0x1ca>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a45      	ldr	r2, [pc, #276]	; (8003e98 <HAL_GPIO_Init+0x2bc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00d      	beq.n	8003da2 <HAL_GPIO_Init+0x1c6>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a44      	ldr	r2, [pc, #272]	; (8003e9c <HAL_GPIO_Init+0x2c0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <HAL_GPIO_Init+0x1c2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a43      	ldr	r2, [pc, #268]	; (8003ea0 <HAL_GPIO_Init+0x2c4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_GPIO_Init+0x1be>
 8003d96:	2303      	movs	r3, #3
 8003d98:	e006      	b.n	8003da8 <HAL_GPIO_Init+0x1cc>
 8003d9a:	2305      	movs	r3, #5
 8003d9c:	e004      	b.n	8003da8 <HAL_GPIO_Init+0x1cc>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e002      	b.n	8003da8 <HAL_GPIO_Init+0x1cc>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_GPIO_Init+0x1cc>
 8003da6:	2300      	movs	r3, #0
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	2103      	movs	r1, #3
 8003dac:	400a      	ands	r2, r1
 8003dae:	00d2      	lsls	r2, r2, #3
 8003db0:	4093      	lsls	r3, r2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003db8:	4936      	ldr	r1, [pc, #216]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	089b      	lsrs	r3, r3, #2
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dc6:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	43da      	mvns	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	035b      	lsls	r3, r3, #13
 8003dde:	4013      	ands	r3, r2
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dea:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003df0:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	43da      	mvns	r2, r3
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	039b      	lsls	r3, r3, #14
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e14:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003e1c:	2384      	movs	r3, #132	; 0x84
 8003e1e:	58d3      	ldr	r3, [r2, r3]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43da      	mvns	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	029b      	lsls	r3, r3, #10
 8003e34:	4013      	ands	r3, r2
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e40:	4914      	ldr	r1, [pc, #80]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003e42:	2284      	movs	r2, #132	; 0x84
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e48:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	58d3      	ldr	r3, [r2, r3]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	43da      	mvns	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	025b      	lsls	r3, r3, #9
 8003e62:	4013      	ands	r3, r2
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e6e:	4909      	ldr	r1, [pc, #36]	; (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	40da      	lsrs	r2, r3
 8003e84:	1e13      	subs	r3, r2, #0
 8003e86:	d000      	beq.n	8003e8a <HAL_GPIO_Init+0x2ae>
 8003e88:	e6b0      	b.n	8003bec <HAL_GPIO_Init+0x10>
  }
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b006      	add	sp, #24
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021800 	.word	0x40021800
 8003e98:	50000400 	.word	0x50000400
 8003e9c:	50000800 	.word	0x50000800
 8003ea0:	50000c00 	.word	0x50000c00

08003ea4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003eb2:	e0b4      	b.n	800401e <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d100      	bne.n	8003ec8 <HAL_GPIO_DeInit+0x24>
 8003ec6:	e0a7      	b.n	8004018 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003ec8:	4a5a      	ldr	r2, [pc, #360]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	3318      	adds	r3, #24
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	589b      	ldr	r3, [r3, r2]
 8003ed4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2203      	movs	r2, #3
 8003eda:	4013      	ands	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	220f      	movs	r2, #15
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	23a0      	movs	r3, #160	; 0xa0
 8003eec:	05db      	lsls	r3, r3, #23
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d013      	beq.n	8003f1a <HAL_GPIO_DeInit+0x76>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a50      	ldr	r2, [pc, #320]	; (8004038 <HAL_GPIO_DeInit+0x194>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00d      	beq.n	8003f16 <HAL_GPIO_DeInit+0x72>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a4f      	ldr	r2, [pc, #316]	; (800403c <HAL_GPIO_DeInit+0x198>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d007      	beq.n	8003f12 <HAL_GPIO_DeInit+0x6e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a4e      	ldr	r2, [pc, #312]	; (8004040 <HAL_GPIO_DeInit+0x19c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <HAL_GPIO_DeInit+0x6a>
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e006      	b.n	8003f1c <HAL_GPIO_DeInit+0x78>
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e004      	b.n	8003f1c <HAL_GPIO_DeInit+0x78>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e002      	b.n	8003f1c <HAL_GPIO_DeInit+0x78>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_GPIO_DeInit+0x78>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	2103      	movs	r1, #3
 8003f20:	400a      	ands	r2, r1
 8003f22:	00d2      	lsls	r2, r2, #3
 8003f24:	4093      	lsls	r3, r2
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d136      	bne.n	8003f9a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f2c:	4a41      	ldr	r2, [pc, #260]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	58d3      	ldr	r3, [r2, r3]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	43d2      	mvns	r2, r2
 8003f36:	493f      	ldr	r1, [pc, #252]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003f3e:	4a3d      	ldr	r2, [pc, #244]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f40:	2384      	movs	r3, #132	; 0x84
 8003f42:	58d3      	ldr	r3, [r2, r3]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	43d2      	mvns	r2, r2
 8003f48:	493a      	ldr	r1, [pc, #232]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2284      	movs	r2, #132	; 0x84
 8003f4e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f50:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	43d9      	mvns	r1, r3
 8003f58:	4b36      	ldr	r3, [pc, #216]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f5e:	4b35      	ldr	r3, [pc, #212]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	43d9      	mvns	r1, r3
 8003f66:	4b33      	ldr	r3, [pc, #204]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f68:	400a      	ands	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	4013      	ands	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	220f      	movs	r2, #15
 8003f76:	409a      	lsls	r2, r3
 8003f78:	0013      	movs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003f7c:	4a2d      	ldr	r2, [pc, #180]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	3318      	adds	r3, #24
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	589a      	ldr	r2, [r3, r2]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	43d9      	mvns	r1, r3
 8003f8c:	4829      	ldr	r0, [pc, #164]	; (8004034 <HAL_GPIO_DeInit+0x190>)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	400a      	ands	r2, r1
 8003f94:	3318      	adds	r3, #24
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	4099      	lsls	r1, r3
 8003fa6:	000b      	movs	r3, r1
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	08da      	lsrs	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3208      	adds	r2, #8
 8003fb6:	0092      	lsls	r2, r2, #2
 8003fb8:	58d3      	ldr	r3, [r2, r3]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	2107      	movs	r1, #7
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	0092      	lsls	r2, r2, #2
 8003fc2:	210f      	movs	r1, #15
 8003fc4:	4091      	lsls	r1, r2
 8003fc6:	000a      	movs	r2, r1
 8003fc8:	43d1      	mvns	r1, r2
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	08d2      	lsrs	r2, r2, #3
 8003fce:	4019      	ands	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	0092      	lsls	r2, r2, #2
 8003fd6:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	0052      	lsls	r2, r2, #1
 8003fe0:	2103      	movs	r1, #3
 8003fe2:	4091      	lsls	r1, r2
 8003fe4:	000a      	movs	r2, r1
 8003fe6:	43d2      	mvns	r2, r2
 8003fe8:	401a      	ands	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4091      	lsls	r1, r2
 8003ff8:	000a      	movs	r2, r1
 8003ffa:	43d2      	mvns	r2, r2
 8003ffc:	401a      	ands	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	0052      	lsls	r2, r2, #1
 800400a:	2103      	movs	r1, #3
 800400c:	4091      	lsls	r1, r2
 800400e:	000a      	movs	r2, r1
 8004010:	43d2      	mvns	r2, r2
 8004012:	401a      	ands	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3301      	adds	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	40da      	lsrs	r2, r3
 8004024:	1e13      	subs	r3, r2, #0
 8004026:	d000      	beq.n	800402a <HAL_GPIO_DeInit+0x186>
 8004028:	e744      	b.n	8003eb4 <HAL_GPIO_DeInit+0x10>
  }
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b006      	add	sp, #24
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021800 	.word	0x40021800
 8004038:	50000400 	.word	0x50000400
 800403c:	50000800 	.word	0x50000800
 8004040:	50000c00 	.word	0x50000c00

08004044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	000a      	movs	r2, r1
 800404e:	1cbb      	adds	r3, r7, #2
 8004050:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	1cba      	adds	r2, r7, #2
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	4013      	ands	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800405e:	230f      	movs	r3, #15
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e003      	b.n	8004070 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004068:	230f      	movs	r3, #15
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004070:	230f      	movs	r3, #15
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	781b      	ldrb	r3, [r3, #0]
}
 8004076:	0018      	movs	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	b004      	add	sp, #16
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	0008      	movs	r0, r1
 8004088:	0011      	movs	r1, r2
 800408a:	1cbb      	adds	r3, r7, #2
 800408c:	1c02      	adds	r2, r0, #0
 800408e:	801a      	strh	r2, [r3, #0]
 8004090:	1c7b      	adds	r3, r7, #1
 8004092:	1c0a      	adds	r2, r1, #0
 8004094:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004096:	1c7b      	adds	r3, r7, #1
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800409e:	1cbb      	adds	r3, r7, #2
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040a6:	e003      	b.n	80040b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040a8:	1cbb      	adds	r3, r7, #2
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b002      	add	sp, #8
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	0002      	movs	r2, r0
 80040c0:	1dbb      	adds	r3, r7, #6
 80040c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	1dba      	adds	r2, r7, #6
 80040ca:	8812      	ldrh	r2, [r2, #0]
 80040cc:	4013      	ands	r3, r2
 80040ce:	d008      	beq.n	80040e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040d2:	1dba      	adds	r2, r7, #6
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80040d8:	1dbb      	adds	r3, r7, #6
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7ff f88b 	bl	80031f8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	1dba      	adds	r2, r7, #6
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	4013      	ands	r3, r2
 80040ec:	d008      	beq.n	8004100 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040f0:	1dba      	adds	r2, r7, #6
 80040f2:	8812      	ldrh	r2, [r2, #0]
 80040f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80040f6:	1dbb      	adds	r3, r7, #6
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 f806 	bl	800410c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021800 	.word	0x40021800

0800410c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	0002      	movs	r2, r0
 8004114:	1dbb      	adds	r3, r7, #6
 8004116:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a19      	ldr	r2, [pc, #100]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800412e:	4013      	ands	r3, r2
 8004130:	0019      	movs	r1, r3
 8004132:	4b17      	ldr	r3, [pc, #92]	; (8004190 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	429a      	cmp	r2, r3
 8004142:	d11f      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	0013      	movs	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	189b      	adds	r3, r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4912      	ldr	r1, [pc, #72]	; (800419c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004152:	0018      	movs	r0, r3
 8004154:	f7fb fff2 	bl	800013c <__udivsi3>
 8004158:	0003      	movs	r3, r0
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800415e:	e008      	b.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3b01      	subs	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e001      	b.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e009      	b.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	401a      	ands	r2, r3
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	429a      	cmp	r2, r3
 8004182:	d0ed      	beq.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	0018      	movs	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	b004      	add	sp, #16
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	40007000 	.word	0x40007000
 8004194:	fffff9ff 	.word	0xfffff9ff
 8004198:	20000024 	.word	0x20000024
 800419c:	000f4240 	.word	0x000f4240

080041a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	23e0      	movs	r3, #224	; 0xe0
 80041aa:	01db      	lsls	r3, r3, #7
 80041ac:	4013      	ands	r3, r2
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40021000 	.word	0x40021000

080041b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e2fe      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2201      	movs	r2, #1
 80041d0:	4013      	ands	r3, r2
 80041d2:	d100      	bne.n	80041d6 <HAL_RCC_OscConfig+0x1e>
 80041d4:	e07c      	b.n	80042d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d6:	4bc3      	ldr	r3, [pc, #780]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2238      	movs	r2, #56	; 0x38
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e0:	4bc0      	ldr	r3, [pc, #768]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2203      	movs	r2, #3
 80041e6:	4013      	ands	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d102      	bne.n	80041f6 <HAL_RCC_OscConfig+0x3e>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d002      	beq.n	80041fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d10b      	bne.n	8004214 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	4bb9      	ldr	r3, [pc, #740]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	029b      	lsls	r3, r3, #10
 8004204:	4013      	ands	r3, r2
 8004206:	d062      	beq.n	80042ce <HAL_RCC_OscConfig+0x116>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d15e      	bne.n	80042ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e2d9      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	025b      	lsls	r3, r3, #9
 800421c:	429a      	cmp	r2, r3
 800421e:	d107      	bne.n	8004230 <HAL_RCC_OscConfig+0x78>
 8004220:	4bb0      	ldr	r3, [pc, #704]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4baf      	ldr	r3, [pc, #700]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004226:	2180      	movs	r1, #128	; 0x80
 8004228:	0249      	lsls	r1, r1, #9
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e020      	b.n	8004272 <HAL_RCC_OscConfig+0xba>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	23a0      	movs	r3, #160	; 0xa0
 8004236:	02db      	lsls	r3, r3, #11
 8004238:	429a      	cmp	r2, r3
 800423a:	d10e      	bne.n	800425a <HAL_RCC_OscConfig+0xa2>
 800423c:	4ba9      	ldr	r3, [pc, #676]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4ba8      	ldr	r3, [pc, #672]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004242:	2180      	movs	r1, #128	; 0x80
 8004244:	02c9      	lsls	r1, r1, #11
 8004246:	430a      	orrs	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	4ba6      	ldr	r3, [pc, #664]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4ba5      	ldr	r3, [pc, #660]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004250:	2180      	movs	r1, #128	; 0x80
 8004252:	0249      	lsls	r1, r1, #9
 8004254:	430a      	orrs	r2, r1
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e00b      	b.n	8004272 <HAL_RCC_OscConfig+0xba>
 800425a:	4ba2      	ldr	r3, [pc, #648]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4ba1      	ldr	r3, [pc, #644]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004260:	49a1      	ldr	r1, [pc, #644]	; (80044e8 <HAL_RCC_OscConfig+0x330>)
 8004262:	400a      	ands	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	4b9f      	ldr	r3, [pc, #636]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b9e      	ldr	r3, [pc, #632]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800426c:	499f      	ldr	r1, [pc, #636]	; (80044ec <HAL_RCC_OscConfig+0x334>)
 800426e:	400a      	ands	r2, r1
 8004270:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d014      	beq.n	80042a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7ff fb8d 	bl	8003998 <HAL_GetTick>
 800427e:	0003      	movs	r3, r0
 8004280:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7ff fb88 	bl	8003998 <HAL_GetTick>
 8004288:	0002      	movs	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e298      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004296:	4b93      	ldr	r3, [pc, #588]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	4013      	ands	r3, r2
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0xcc>
 80042a2:	e015      	b.n	80042d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7ff fb78 	bl	8003998 <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ae:	f7ff fb73 	bl	8003998 <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b64      	cmp	r3, #100	; 0x64
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e283      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c0:	4b88      	ldr	r3, [pc, #544]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	4013      	ands	r3, r2
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0xf6>
 80042cc:	e000      	b.n	80042d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2202      	movs	r2, #2
 80042d6:	4013      	ands	r3, r2
 80042d8:	d100      	bne.n	80042dc <HAL_RCC_OscConfig+0x124>
 80042da:	e099      	b.n	8004410 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042dc:	4b81      	ldr	r3, [pc, #516]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2238      	movs	r2, #56	; 0x38
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e6:	4b7f      	ldr	r3, [pc, #508]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2203      	movs	r2, #3
 80042ec:	4013      	ands	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d102      	bne.n	80042fc <HAL_RCC_OscConfig+0x144>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d002      	beq.n	8004302 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d135      	bne.n	800436e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004302:	4b78      	ldr	r3, [pc, #480]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4013      	ands	r3, r2
 800430c:	d005      	beq.n	800431a <HAL_RCC_OscConfig+0x162>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e256      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431a:	4b72      	ldr	r3, [pc, #456]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4a74      	ldr	r2, [pc, #464]	; (80044f0 <HAL_RCC_OscConfig+0x338>)
 8004320:	4013      	ands	r3, r2
 8004322:	0019      	movs	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	021a      	lsls	r2, r3, #8
 800432a:	4b6e      	ldr	r3, [pc, #440]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d112      	bne.n	800435c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004336:	4b6b      	ldr	r3, [pc, #428]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a6e      	ldr	r2, [pc, #440]	; (80044f4 <HAL_RCC_OscConfig+0x33c>)
 800433c:	4013      	ands	r3, r2
 800433e:	0019      	movs	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	4b67      	ldr	r3, [pc, #412]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004346:	430a      	orrs	r2, r1
 8004348:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800434a:	4b66      	ldr	r3, [pc, #408]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	0adb      	lsrs	r3, r3, #11
 8004350:	2207      	movs	r2, #7
 8004352:	4013      	ands	r3, r2
 8004354:	4a68      	ldr	r2, [pc, #416]	; (80044f8 <HAL_RCC_OscConfig+0x340>)
 8004356:	40da      	lsrs	r2, r3
 8004358:	4b68      	ldr	r3, [pc, #416]	; (80044fc <HAL_RCC_OscConfig+0x344>)
 800435a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800435c:	4b68      	ldr	r3, [pc, #416]	; (8004500 <HAL_RCC_OscConfig+0x348>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	0018      	movs	r0, r3
 8004362:	f7ff fabd 	bl	80038e0 <HAL_InitTick>
 8004366:	1e03      	subs	r3, r0, #0
 8004368:	d051      	beq.n	800440e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e22c      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d030      	beq.n	80043d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004376:	4b5b      	ldr	r3, [pc, #364]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5e      	ldr	r2, [pc, #376]	; (80044f4 <HAL_RCC_OscConfig+0x33c>)
 800437c:	4013      	ands	r3, r2
 800437e:	0019      	movs	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	4b57      	ldr	r3, [pc, #348]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800438a:	4b56      	ldr	r3, [pc, #344]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b55      	ldr	r3, [pc, #340]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004390:	2180      	movs	r1, #128	; 0x80
 8004392:	0049      	lsls	r1, r1, #1
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7ff fafe 	bl	8003998 <HAL_GetTick>
 800439c:	0003      	movs	r3, r0
 800439e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a2:	f7ff faf9 	bl	8003998 <HAL_GetTick>
 80043a6:	0002      	movs	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e209      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b4:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4013      	ands	r3, r2
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c0:	4b48      	ldr	r3, [pc, #288]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a4a      	ldr	r2, [pc, #296]	; (80044f0 <HAL_RCC_OscConfig+0x338>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	0019      	movs	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	021a      	lsls	r2, r3, #8
 80043d0:	4b44      	ldr	r3, [pc, #272]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	e01b      	b.n	8004410 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80043d8:	4b42      	ldr	r3, [pc, #264]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b41      	ldr	r3, [pc, #260]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80043de:	4949      	ldr	r1, [pc, #292]	; (8004504 <HAL_RCC_OscConfig+0x34c>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7ff fad8 	bl	8003998 <HAL_GetTick>
 80043e8:	0003      	movs	r3, r0
 80043ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ee:	f7ff fad3 	bl	8003998 <HAL_GetTick>
 80043f2:	0002      	movs	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e1e3      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004400:	4b38      	ldr	r3, [pc, #224]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4013      	ands	r3, r2
 800440a:	d1f0      	bne.n	80043ee <HAL_RCC_OscConfig+0x236>
 800440c:	e000      	b.n	8004410 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800440e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2208      	movs	r2, #8
 8004416:	4013      	ands	r3, r2
 8004418:	d047      	beq.n	80044aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800441a:	4b32      	ldr	r3, [pc, #200]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2238      	movs	r2, #56	; 0x38
 8004420:	4013      	ands	r3, r2
 8004422:	2b18      	cmp	r3, #24
 8004424:	d10a      	bne.n	800443c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004426:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442a:	2202      	movs	r2, #2
 800442c:	4013      	ands	r3, r2
 800442e:	d03c      	beq.n	80044aa <HAL_RCC_OscConfig+0x2f2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d138      	bne.n	80044aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e1c5      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d019      	beq.n	8004478 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004444:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 8004446:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004448:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800444a:	2101      	movs	r1, #1
 800444c:	430a      	orrs	r2, r1
 800444e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7ff faa2 	bl	8003998 <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800445a:	f7ff fa9d 	bl	8003998 <HAL_GetTick>
 800445e:	0002      	movs	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e1ad      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800446e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004470:	2202      	movs	r2, #2
 8004472:	4013      	ands	r3, r2
 8004474:	d0f1      	beq.n	800445a <HAL_RCC_OscConfig+0x2a2>
 8004476:	e018      	b.n	80044aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800447a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800447c:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 800447e:	2101      	movs	r1, #1
 8004480:	438a      	bics	r2, r1
 8004482:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7ff fa88 	bl	8003998 <HAL_GetTick>
 8004488:	0003      	movs	r3, r0
 800448a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448e:	f7ff fa83 	bl	8003998 <HAL_GetTick>
 8004492:	0002      	movs	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e193      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	2202      	movs	r2, #2
 80044a6:	4013      	ands	r3, r2
 80044a8:	d1f1      	bne.n	800448e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2204      	movs	r2, #4
 80044b0:	4013      	ands	r3, r2
 80044b2:	d100      	bne.n	80044b6 <HAL_RCC_OscConfig+0x2fe>
 80044b4:	e0c6      	b.n	8004644 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b6:	231f      	movs	r3, #31
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2238      	movs	r2, #56	; 0x38
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d11e      	bne.n	8004508 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCC_OscConfig+0x32c>)
 80044cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ce:	2202      	movs	r2, #2
 80044d0:	4013      	ands	r3, r2
 80044d2:	d100      	bne.n	80044d6 <HAL_RCC_OscConfig+0x31e>
 80044d4:	e0b6      	b.n	8004644 <HAL_RCC_OscConfig+0x48c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d000      	beq.n	80044e0 <HAL_RCC_OscConfig+0x328>
 80044de:	e0b1      	b.n	8004644 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e171      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
 80044e4:	40021000 	.word	0x40021000
 80044e8:	fffeffff 	.word	0xfffeffff
 80044ec:	fffbffff 	.word	0xfffbffff
 80044f0:	ffff80ff 	.word	0xffff80ff
 80044f4:	ffffc7ff 	.word	0xffffc7ff
 80044f8:	00f42400 	.word	0x00f42400
 80044fc:	20000024 	.word	0x20000024
 8004500:	20000028 	.word	0x20000028
 8004504:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004508:	4bb1      	ldr	r3, [pc, #708]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800450a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	055b      	lsls	r3, r3, #21
 8004510:	4013      	ands	r3, r2
 8004512:	d101      	bne.n	8004518 <HAL_RCC_OscConfig+0x360>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x362>
 8004518:	2300      	movs	r3, #0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d011      	beq.n	8004542 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	4bac      	ldr	r3, [pc, #688]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004522:	4bab      	ldr	r3, [pc, #684]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	0549      	lsls	r1, r1, #21
 8004528:	430a      	orrs	r2, r1
 800452a:	63da      	str	r2, [r3, #60]	; 0x3c
 800452c:	4ba8      	ldr	r3, [pc, #672]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800452e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	055b      	lsls	r3, r3, #21
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800453a:	231f      	movs	r3, #31
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004542:	4ba4      	ldr	r3, [pc, #656]	; (80047d4 <HAL_RCC_OscConfig+0x61c>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4013      	ands	r3, r2
 800454c:	d11a      	bne.n	8004584 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800454e:	4ba1      	ldr	r3, [pc, #644]	; (80047d4 <HAL_RCC_OscConfig+0x61c>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4ba0      	ldr	r3, [pc, #640]	; (80047d4 <HAL_RCC_OscConfig+0x61c>)
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	0049      	lsls	r1, r1, #1
 8004558:	430a      	orrs	r2, r1
 800455a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800455c:	f7ff fa1c 	bl	8003998 <HAL_GetTick>
 8004560:	0003      	movs	r3, r0
 8004562:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004566:	f7ff fa17 	bl	8003998 <HAL_GetTick>
 800456a:	0002      	movs	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e127      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004578:	4b96      	ldr	r3, [pc, #600]	; (80047d4 <HAL_RCC_OscConfig+0x61c>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4013      	ands	r3, r2
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d106      	bne.n	800459a <HAL_RCC_OscConfig+0x3e2>
 800458c:	4b90      	ldr	r3, [pc, #576]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800458e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004590:	4b8f      	ldr	r3, [pc, #572]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004592:	2101      	movs	r1, #1
 8004594:	430a      	orrs	r2, r1
 8004596:	65da      	str	r2, [r3, #92]	; 0x5c
 8004598:	e01c      	b.n	80045d4 <HAL_RCC_OscConfig+0x41c>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x404>
 80045a2:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80045a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045a6:	4b8a      	ldr	r3, [pc, #552]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80045a8:	2104      	movs	r1, #4
 80045aa:	430a      	orrs	r2, r1
 80045ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80045b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045b2:	4b87      	ldr	r3, [pc, #540]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80045b4:	2101      	movs	r1, #1
 80045b6:	430a      	orrs	r2, r1
 80045b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0x41c>
 80045bc:	4b84      	ldr	r3, [pc, #528]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80045be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045c0:	4b83      	ldr	r3, [pc, #524]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80045c2:	2101      	movs	r1, #1
 80045c4:	438a      	bics	r2, r1
 80045c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045c8:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80045ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045cc:	4b80      	ldr	r3, [pc, #512]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80045ce:	2104      	movs	r1, #4
 80045d0:	438a      	bics	r2, r1
 80045d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d014      	beq.n	8004606 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7ff f9dc 	bl	8003998 <HAL_GetTick>
 80045e0:	0003      	movs	r3, r0
 80045e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e4:	e009      	b.n	80045fa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7ff f9d7 	bl	8003998 <HAL_GetTick>
 80045ea:	0002      	movs	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	4a79      	ldr	r2, [pc, #484]	; (80047d8 <HAL_RCC_OscConfig+0x620>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0e6      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fa:	4b75      	ldr	r3, [pc, #468]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	2202      	movs	r2, #2
 8004600:	4013      	ands	r3, r2
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x42e>
 8004604:	e013      	b.n	800462e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7ff f9c7 	bl	8003998 <HAL_GetTick>
 800460a:	0003      	movs	r3, r0
 800460c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800460e:	e009      	b.n	8004624 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7ff f9c2 	bl	8003998 <HAL_GetTick>
 8004614:	0002      	movs	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	4a6f      	ldr	r2, [pc, #444]	; (80047d8 <HAL_RCC_OscConfig+0x620>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0d1      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	2202      	movs	r2, #2
 800462a:	4013      	ands	r3, r2
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800462e:	231f      	movs	r3, #31
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d105      	bne.n	8004644 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004638:	4b65      	ldr	r3, [pc, #404]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800463a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800463c:	4b64      	ldr	r3, [pc, #400]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800463e:	4967      	ldr	r1, [pc, #412]	; (80047dc <HAL_RCC_OscConfig+0x624>)
 8004640:	400a      	ands	r2, r1
 8004642:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d100      	bne.n	800464e <HAL_RCC_OscConfig+0x496>
 800464c:	e0bb      	b.n	80047c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800464e:	4b60      	ldr	r3, [pc, #384]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2238      	movs	r2, #56	; 0x38
 8004654:	4013      	ands	r3, r2
 8004656:	2b10      	cmp	r3, #16
 8004658:	d100      	bne.n	800465c <HAL_RCC_OscConfig+0x4a4>
 800465a:	e07b      	b.n	8004754 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d156      	bne.n	8004712 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b5a      	ldr	r3, [pc, #360]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800466a:	495d      	ldr	r1, [pc, #372]	; (80047e0 <HAL_RCC_OscConfig+0x628>)
 800466c:	400a      	ands	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7ff f992 	bl	8003998 <HAL_GetTick>
 8004674:	0003      	movs	r3, r0
 8004676:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467a:	f7ff f98d 	bl	8003998 <HAL_GetTick>
 800467e:	0002      	movs	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e09d      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	049b      	lsls	r3, r3, #18
 8004694:	4013      	ands	r3, r2
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004698:	4b4d      	ldr	r3, [pc, #308]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4a51      	ldr	r2, [pc, #324]	; (80047e4 <HAL_RCC_OscConfig+0x62c>)
 800469e:	4013      	ands	r3, r2
 80046a0:	0019      	movs	r1, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	431a      	orrs	r2, r3
 80046c6:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046c8:	430a      	orrs	r2, r1
 80046ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046cc:	4b40      	ldr	r3, [pc, #256]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	0449      	lsls	r1, r1, #17
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80046da:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	4b3c      	ldr	r3, [pc, #240]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046e0:	2180      	movs	r1, #128	; 0x80
 80046e2:	0549      	lsls	r1, r1, #21
 80046e4:	430a      	orrs	r2, r1
 80046e6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7ff f956 	bl	8003998 <HAL_GetTick>
 80046ec:	0003      	movs	r3, r0
 80046ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f2:	f7ff f951 	bl	8003998 <HAL_GetTick>
 80046f6:	0002      	movs	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e061      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004704:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	049b      	lsls	r3, r3, #18
 800470c:	4013      	ands	r3, r2
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x53a>
 8004710:	e059      	b.n	80047c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b2f      	ldr	r3, [pc, #188]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004718:	4931      	ldr	r1, [pc, #196]	; (80047e0 <HAL_RCC_OscConfig+0x628>)
 800471a:	400a      	ands	r2, r1
 800471c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7ff f93b 	bl	8003998 <HAL_GetTick>
 8004722:	0003      	movs	r3, r0
 8004724:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7ff f936 	bl	8003998 <HAL_GetTick>
 800472c:	0002      	movs	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e046      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473a:	4b25      	ldr	r3, [pc, #148]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	049b      	lsls	r3, r3, #18
 8004742:	4013      	ands	r3, r2
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 800474c:	4926      	ldr	r1, [pc, #152]	; (80047e8 <HAL_RCC_OscConfig+0x630>)
 800474e:	400a      	ands	r2, r1
 8004750:	60da      	str	r2, [r3, #12]
 8004752:	e038      	b.n	80047c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e033      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2203      	movs	r2, #3
 800476a:	401a      	ands	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	429a      	cmp	r2, r3
 8004772:	d126      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2270      	movs	r2, #112	; 0x70
 8004778:	401a      	ands	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d11f      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	23fe      	movs	r3, #254	; 0xfe
 8004786:	01db      	lsls	r3, r3, #7
 8004788:	401a      	ands	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d116      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	23f8      	movs	r3, #248	; 0xf8
 8004798:	039b      	lsls	r3, r3, #14
 800479a:	401a      	ands	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d10e      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	23e0      	movs	r3, #224	; 0xe0
 80047a8:	051b      	lsls	r3, r3, #20
 80047aa:	401a      	ands	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	0f5b      	lsrs	r3, r3, #29
 80047b8:	075a      	lsls	r2, r3, #29
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047be:	429a      	cmp	r2, r3
 80047c0:	d001      	beq.n	80047c6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b008      	add	sp, #32
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
 80047d8:	00001388 	.word	0x00001388
 80047dc:	efffffff 	.word	0xefffffff
 80047e0:	feffffff 	.word	0xfeffffff
 80047e4:	11c1808c 	.word	0x11c1808c
 80047e8:	eefefffc 	.word	0xeefefffc

080047ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0e9      	b.n	80049d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004800:	4b76      	ldr	r3, [pc, #472]	; (80049dc <HAL_RCC_ClockConfig+0x1f0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2207      	movs	r2, #7
 8004806:	4013      	ands	r3, r2
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d91e      	bls.n	800484c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b73      	ldr	r3, [pc, #460]	; (80049dc <HAL_RCC_ClockConfig+0x1f0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2207      	movs	r2, #7
 8004814:	4393      	bics	r3, r2
 8004816:	0019      	movs	r1, r3
 8004818:	4b70      	ldr	r3, [pc, #448]	; (80049dc <HAL_RCC_ClockConfig+0x1f0>)
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004820:	f7ff f8ba 	bl	8003998 <HAL_GetTick>
 8004824:	0003      	movs	r3, r0
 8004826:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004828:	e009      	b.n	800483e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482a:	f7ff f8b5 	bl	8003998 <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	4a6a      	ldr	r2, [pc, #424]	; (80049e0 <HAL_RCC_ClockConfig+0x1f4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0ca      	b.n	80049d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800483e:	4b67      	ldr	r3, [pc, #412]	; (80049dc <HAL_RCC_ClockConfig+0x1f0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2207      	movs	r2, #7
 8004844:	4013      	ands	r3, r2
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d1ee      	bne.n	800482a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2202      	movs	r2, #2
 8004852:	4013      	ands	r3, r2
 8004854:	d015      	beq.n	8004882 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2204      	movs	r2, #4
 800485c:	4013      	ands	r3, r2
 800485e:	d006      	beq.n	800486e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004860:	4b60      	ldr	r3, [pc, #384]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	4b5f      	ldr	r3, [pc, #380]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004866:	21e0      	movs	r1, #224	; 0xe0
 8004868:	01c9      	lsls	r1, r1, #7
 800486a:	430a      	orrs	r2, r1
 800486c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800486e:	4b5d      	ldr	r3, [pc, #372]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4a5d      	ldr	r2, [pc, #372]	; (80049e8 <HAL_RCC_ClockConfig+0x1fc>)
 8004874:	4013      	ands	r3, r2
 8004876:	0019      	movs	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	4b59      	ldr	r3, [pc, #356]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2201      	movs	r2, #1
 8004888:	4013      	ands	r3, r2
 800488a:	d057      	beq.n	800493c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004894:	4b53      	ldr	r3, [pc, #332]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	029b      	lsls	r3, r3, #10
 800489c:	4013      	ands	r3, r2
 800489e:	d12b      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e097      	b.n	80049d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ac:	4b4d      	ldr	r3, [pc, #308]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	049b      	lsls	r3, r3, #18
 80048b4:	4013      	ands	r3, r2
 80048b6:	d11f      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e08b      	b.n	80049d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c4:	4b47      	ldr	r3, [pc, #284]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4013      	ands	r3, r2
 80048ce:	d113      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e07f      	b.n	80049d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d106      	bne.n	80048ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048dc:	4b41      	ldr	r3, [pc, #260]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 80048de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e0:	2202      	movs	r2, #2
 80048e2:	4013      	ands	r3, r2
 80048e4:	d108      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e074      	b.n	80049d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ea:	4b3e      	ldr	r3, [pc, #248]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 80048ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ee:	2202      	movs	r2, #2
 80048f0:	4013      	ands	r3, r2
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e06d      	b.n	80049d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048f8:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2207      	movs	r2, #7
 80048fe:	4393      	bics	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490c:	f7ff f844 	bl	8003998 <HAL_GetTick>
 8004910:	0003      	movs	r3, r0
 8004912:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004914:	e009      	b.n	800492a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004916:	f7ff f83f 	bl	8003998 <HAL_GetTick>
 800491a:	0002      	movs	r2, r0
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	4a2f      	ldr	r2, [pc, #188]	; (80049e0 <HAL_RCC_ClockConfig+0x1f4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e054      	b.n	80049d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	4b2e      	ldr	r3, [pc, #184]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2238      	movs	r2, #56	; 0x38
 8004930:	401a      	ands	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	429a      	cmp	r2, r3
 800493a:	d1ec      	bne.n	8004916 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <HAL_RCC_ClockConfig+0x1f0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2207      	movs	r2, #7
 8004942:	4013      	ands	r3, r2
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d21e      	bcs.n	8004988 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_RCC_ClockConfig+0x1f0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2207      	movs	r2, #7
 8004950:	4393      	bics	r3, r2
 8004952:	0019      	movs	r1, r3
 8004954:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCC_ClockConfig+0x1f0>)
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800495c:	f7ff f81c 	bl	8003998 <HAL_GetTick>
 8004960:	0003      	movs	r3, r0
 8004962:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004964:	e009      	b.n	800497a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004966:	f7ff f817 	bl	8003998 <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <HAL_RCC_ClockConfig+0x1f4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e02c      	b.n	80049d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800497a:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_RCC_ClockConfig+0x1f0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2207      	movs	r2, #7
 8004980:	4013      	ands	r3, r2
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d1ee      	bne.n	8004966 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2204      	movs	r2, #4
 800498e:	4013      	ands	r3, r2
 8004990:	d009      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004992:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	4a15      	ldr	r2, [pc, #84]	; (80049ec <HAL_RCC_ClockConfig+0x200>)
 8004998:	4013      	ands	r3, r2
 800499a:	0019      	movs	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 80049a2:	430a      	orrs	r2, r1
 80049a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049a6:	f000 f829 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80049aa:	0001      	movs	r1, r0
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <HAL_RCC_ClockConfig+0x1f8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	220f      	movs	r2, #15
 80049b4:	401a      	ands	r2, r3
 80049b6:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <HAL_RCC_ClockConfig+0x204>)
 80049b8:	0092      	lsls	r2, r2, #2
 80049ba:	58d3      	ldr	r3, [r2, r3]
 80049bc:	221f      	movs	r2, #31
 80049be:	4013      	ands	r3, r2
 80049c0:	000a      	movs	r2, r1
 80049c2:	40da      	lsrs	r2, r3
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_ClockConfig+0x208>)
 80049c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_ClockConfig+0x20c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7fe ff87 	bl	80038e0 <HAL_InitTick>
 80049d2:	0003      	movs	r3, r0
}
 80049d4:	0018      	movs	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b004      	add	sp, #16
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40022000 	.word	0x40022000
 80049e0:	00001388 	.word	0x00001388
 80049e4:	40021000 	.word	0x40021000
 80049e8:	fffff0ff 	.word	0xfffff0ff
 80049ec:	ffff8fff 	.word	0xffff8fff
 80049f0:	08014778 	.word	0x08014778
 80049f4:	20000024 	.word	0x20000024
 80049f8:	20000028 	.word	0x20000028

080049fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a02:	4b3c      	ldr	r3, [pc, #240]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2238      	movs	r2, #56	; 0x38
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d10f      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a0c:	4b39      	ldr	r3, [pc, #228]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0adb      	lsrs	r3, r3, #11
 8004a12:	2207      	movs	r2, #7
 8004a14:	4013      	ands	r3, r2
 8004a16:	2201      	movs	r2, #1
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	0013      	movs	r3, r2
 8004a1c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a1e:	6839      	ldr	r1, [r7, #0]
 8004a20:	4835      	ldr	r0, [pc, #212]	; (8004af8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a22:	f7fb fb8b 	bl	800013c <__udivsi3>
 8004a26:	0003      	movs	r3, r0
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	e05d      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a2c:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2238      	movs	r2, #56	; 0x38
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d102      	bne.n	8004a3e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a38:	4b30      	ldr	r3, [pc, #192]	; (8004afc <HAL_RCC_GetSysClockFreq+0x100>)
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	e054      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a3e:	4b2d      	ldr	r3, [pc, #180]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2238      	movs	r2, #56	; 0x38
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d138      	bne.n	8004abc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a4a:	4b2a      	ldr	r3, [pc, #168]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4013      	ands	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a54:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	2207      	movs	r2, #7
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d10d      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4824      	ldr	r0, [pc, #144]	; (8004afc <HAL_RCC_GetSysClockFreq+0x100>)
 8004a6c:	f7fb fb66 	bl	800013c <__udivsi3>
 8004a70:	0003      	movs	r3, r0
 8004a72:	0019      	movs	r1, r3
 8004a74:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	0a1b      	lsrs	r3, r3, #8
 8004a7a:	227f      	movs	r2, #127	; 0x7f
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	434b      	muls	r3, r1
 8004a80:	617b      	str	r3, [r7, #20]
        break;
 8004a82:	e00d      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	481c      	ldr	r0, [pc, #112]	; (8004af8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a88:	f7fb fb58 	bl	800013c <__udivsi3>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	0019      	movs	r1, r3
 8004a90:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	227f      	movs	r2, #127	; 0x7f
 8004a98:	4013      	ands	r3, r2
 8004a9a:	434b      	muls	r3, r1
 8004a9c:	617b      	str	r3, [r7, #20]
        break;
 8004a9e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004aa0:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0f5b      	lsrs	r3, r3, #29
 8004aa6:	2207      	movs	r2, #7
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	3301      	adds	r3, #1
 8004aac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	6978      	ldr	r0, [r7, #20]
 8004ab2:	f7fb fb43 	bl	800013c <__udivsi3>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	e015      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2238      	movs	r2, #56	; 0x38
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d103      	bne.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004ad0:	4b08      	ldr	r3, [pc, #32]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2238      	movs	r2, #56	; 0x38
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b18      	cmp	r3, #24
 8004ada:	d103      	bne.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004adc:	23fa      	movs	r3, #250	; 0xfa
 8004ade:	01db      	lsls	r3, r3, #7
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	e001      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ae8:	693b      	ldr	r3, [r7, #16]
}
 8004aea:	0018      	movs	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b006      	add	sp, #24
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	40021000 	.word	0x40021000
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	007a1200 	.word	0x007a1200

08004b00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b04:	4b02      	ldr	r3, [pc, #8]	; (8004b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	0018      	movs	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	20000024 	.word	0x20000024

08004b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b14:	b5b0      	push	{r4, r5, r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b18:	f7ff fff2 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b1c:	0004      	movs	r4, r0
 8004b1e:	f7ff fb3f 	bl	80041a0 <LL_RCC_GetAPB1Prescaler>
 8004b22:	0003      	movs	r3, r0
 8004b24:	0b1a      	lsrs	r2, r3, #12
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b28:	0092      	lsls	r2, r2, #2
 8004b2a:	58d3      	ldr	r3, [r2, r3]
 8004b2c:	221f      	movs	r2, #31
 8004b2e:	4013      	ands	r3, r2
 8004b30:	40dc      	lsrs	r4, r3
 8004b32:	0023      	movs	r3, r4
}
 8004b34:	0018      	movs	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bdb0      	pop	{r4, r5, r7, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	080147b8 	.word	0x080147b8

08004b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b48:	2313      	movs	r3, #19
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b50:	2312      	movs	r3, #18
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	029b      	lsls	r3, r3, #10
 8004b60:	4013      	ands	r3, r2
 8004b62:	d100      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004b64:	e0a3      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b66:	2011      	movs	r0, #17
 8004b68:	183b      	adds	r3, r7, r0
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6e:	4bc3      	ldr	r3, [pc, #780]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	055b      	lsls	r3, r3, #21
 8004b76:	4013      	ands	r3, r2
 8004b78:	d110      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	4bc0      	ldr	r3, [pc, #768]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b7e:	4bbf      	ldr	r3, [pc, #764]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	0549      	lsls	r1, r1, #21
 8004b84:	430a      	orrs	r2, r1
 8004b86:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b88:	4bbc      	ldr	r3, [pc, #752]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	055b      	lsls	r3, r3, #21
 8004b90:	4013      	ands	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b9c:	4bb8      	ldr	r3, [pc, #736]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4bb7      	ldr	r3, [pc, #732]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ba2:	2180      	movs	r1, #128	; 0x80
 8004ba4:	0049      	lsls	r1, r1, #1
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004baa:	f7fe fef5 	bl	8003998 <HAL_GetTick>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb4:	f7fe fef0 	bl	8003998 <HAL_GetTick>
 8004bb8:	0002      	movs	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d904      	bls.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004bc2:	2313      	movs	r3, #19
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	701a      	strb	r2, [r3, #0]
        break;
 8004bca:	e005      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bcc:	4bac      	ldr	r3, [pc, #688]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d0ed      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004bd8:	2313      	movs	r3, #19
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d154      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004be2:	4ba6      	ldr	r3, [pc, #664]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004be4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004be6:	23c0      	movs	r3, #192	; 0xc0
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4013      	ands	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d019      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d014      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bfe:	4b9f      	ldr	r3, [pc, #636]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c02:	4aa0      	ldr	r2, [pc, #640]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c08:	4b9c      	ldr	r3, [pc, #624]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c0c:	4b9b      	ldr	r3, [pc, #620]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	0249      	lsls	r1, r1, #9
 8004c12:	430a      	orrs	r2, r1
 8004c14:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c16:	4b99      	ldr	r3, [pc, #612]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c1a:	4b98      	ldr	r3, [pc, #608]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c1c:	499a      	ldr	r1, [pc, #616]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c1e:	400a      	ands	r2, r1
 8004c20:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c22:	4b96      	ldr	r3, [pc, #600]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d016      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fe feb2 	bl	8003998 <HAL_GetTick>
 8004c34:	0003      	movs	r3, r0
 8004c36:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c38:	e00c      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3a:	f7fe fead 	bl	8003998 <HAL_GetTick>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	4a91      	ldr	r2, [pc, #580]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d904      	bls.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c4a:	2313      	movs	r3, #19
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	2203      	movs	r2, #3
 8004c50:	701a      	strb	r2, [r3, #0]
            break;
 8004c52:	e004      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c54:	4b89      	ldr	r3, [pc, #548]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	2202      	movs	r2, #2
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d0ed      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004c5e:	2313      	movs	r3, #19
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c68:	4b84      	ldr	r3, [pc, #528]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6c:	4a85      	ldr	r2, [pc, #532]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	0019      	movs	r1, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c76:	4b81      	ldr	r3, [pc, #516]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c7c:	e00c      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c7e:	2312      	movs	r3, #18
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	2213      	movs	r2, #19
 8004c84:	18ba      	adds	r2, r7, r2
 8004c86:	7812      	ldrb	r2, [r2, #0]
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e005      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	2312      	movs	r3, #18
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2213      	movs	r2, #19
 8004c92:	18ba      	adds	r2, r7, r2
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c98:	2311      	movs	r3, #17
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d105      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca2:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca6:	4b75      	ldr	r3, [pc, #468]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ca8:	4979      	ldr	r1, [pc, #484]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004caa:	400a      	ands	r2, r1
 8004cac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cb8:	4b70      	ldr	r3, [pc, #448]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	4393      	bics	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4b6d      	ldr	r3, [pc, #436]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d009      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cd6:	4b69      	ldr	r3, [pc, #420]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	220c      	movs	r2, #12
 8004cdc:	4393      	bics	r3, r2
 8004cde:	0019      	movs	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2210      	movs	r2, #16
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d009      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cf4:	4b61      	ldr	r3, [pc, #388]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	4a66      	ldr	r2, [pc, #408]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	4b5e      	ldr	r3, [pc, #376]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d04:	430a      	orrs	r2, r1
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4013      	ands	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d14:	4b59      	ldr	r3, [pc, #356]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	4a5f      	ldr	r2, [pc, #380]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	0019      	movs	r1, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	4b56      	ldr	r3, [pc, #344]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d24:	430a      	orrs	r2, r1
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	2380      	movs	r3, #128	; 0x80
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4013      	ands	r3, r2
 8004d32:	d009      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d34:	4b51      	ldr	r3, [pc, #324]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	4a58      	ldr	r2, [pc, #352]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69da      	ldr	r2, [r3, #28]
 8004d42:	4b4e      	ldr	r3, [pc, #312]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d44:	430a      	orrs	r2, r1
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d52:	4b4a      	ldr	r3, [pc, #296]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	0019      	movs	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d62:	430a      	orrs	r2, r1
 8004d64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	01db      	lsls	r3, r3, #7
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d015      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d72:	4b42      	ldr	r3, [pc, #264]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	0899      	lsrs	r1, r3, #2
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	4b3f      	ldr	r3, [pc, #252]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d80:	430a      	orrs	r2, r1
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	05db      	lsls	r3, r3, #23
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d90:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d96:	2180      	movs	r1, #128	; 0x80
 8004d98:	0249      	lsls	r1, r1, #9
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	4013      	ands	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004daa:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	2240      	movs	r2, #64	; 0x40
 8004db0:	4393      	bics	r3, r2
 8004db2:	0019      	movs	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db8:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	039b      	lsls	r3, r3, #14
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d016      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004dca:	4b2c      	ldr	r3, [pc, #176]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	4a35      	ldr	r2, [pc, #212]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	0019      	movs	r1, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd8:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	03db      	lsls	r3, r3, #15
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d106      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004dea:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004df0:	2180      	movs	r1, #128	; 0x80
 8004df2:	0449      	lsls	r1, r1, #17
 8004df4:	430a      	orrs	r2, r1
 8004df6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	03db      	lsls	r3, r3, #15
 8004e00:	4013      	ands	r3, r2
 8004e02:	d016      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	4a27      	ldr	r2, [pc, #156]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e14:	430a      	orrs	r2, r1
 8004e16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	045b      	lsls	r3, r3, #17
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d106      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	0449      	lsls	r1, r1, #17
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d016      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	4a1a      	ldr	r2, [pc, #104]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	2380      	movs	r3, #128	; 0x80
 8004e58:	01db      	lsls	r3, r3, #7
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d106      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e5e:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e64:	2180      	movs	r1, #128	; 0x80
 8004e66:	0249      	lsls	r1, r1, #9
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004e6c:	2312      	movs	r3, #18
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	781b      	ldrb	r3, [r3, #0]
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b006      	add	sp, #24
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40007000 	.word	0x40007000
 8004e84:	fffffcff 	.word	0xfffffcff
 8004e88:	fffeffff 	.word	0xfffeffff
 8004e8c:	00001388 	.word	0x00001388
 8004e90:	efffffff 	.word	0xefffffff
 8004e94:	fffff3ff 	.word	0xfffff3ff
 8004e98:	fff3ffff 	.word	0xfff3ffff
 8004e9c:	ffcfffff 	.word	0xffcfffff
 8004ea0:	ffffcfff 	.word	0xffffcfff
 8004ea4:	ffbfffff 	.word	0xffbfffff
 8004ea8:	feffffff 	.word	0xfeffffff
 8004eac:	ffff3fff 	.word	0xffff3fff

08004eb0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004eb0:	b5b0      	push	{r4, r5, r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004eb8:	230f      	movs	r3, #15
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d100      	bne.n	8004ec8 <HAL_RTC_Init+0x18>
 8004ec6:	e08c      	b.n	8004fe2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2229      	movs	r2, #41	; 0x29
 8004ecc:	5c9b      	ldrb	r3, [r3, r2]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10b      	bne.n	8004eec <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2228      	movs	r2, #40	; 0x28
 8004ed8:	2100      	movs	r1, #0
 8004eda:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2288      	movs	r2, #136	; 0x88
 8004ee0:	0212      	lsls	r2, r2, #8
 8004ee2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f7fe f9d0 	bl	800328c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2229      	movs	r2, #41	; 0x29
 8004ef0:	2102      	movs	r1, #2
 8004ef2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	2210      	movs	r2, #16
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b10      	cmp	r3, #16
 8004f00:	d062      	beq.n	8004fc8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	22ca      	movs	r2, #202	; 0xca
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2253      	movs	r2, #83	; 0x53
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004f12:	250f      	movs	r5, #15
 8004f14:	197c      	adds	r4, r7, r5
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 fb9c 	bl	8005656 <RTC_EnterInitMode>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004f22:	0028      	movs	r0, r5
 8004f24:	183b      	adds	r3, r7, r0
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d12c      	bne.n	8004f86 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	492e      	ldr	r1, [pc, #184]	; (8004ff0 <HAL_RTC_Init+0x140>)
 8004f38:	400a      	ands	r2, r1
 8004f3a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6912      	ldr	r2, [r2, #16]
 8004f62:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6919      	ldr	r1, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	041a      	lsls	r2, r3, #16
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004f78:	183c      	adds	r4, r7, r0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f000 fbad 	bl	80056dc <RTC_ExitInitMode>
 8004f82:	0003      	movs	r3, r0
 8004f84:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004f86:	230f      	movs	r3, #15
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d116      	bne.n	8004fbe <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	00d2      	lsls	r2, r2, #3
 8004f9c:	08d2      	lsrs	r2, r2, #3
 8004f9e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	22ff      	movs	r2, #255	; 0xff
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8004fc6:	e003      	b.n	8004fd0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004fc8:	230f      	movs	r3, #15
 8004fca:	18fb      	adds	r3, r7, r3
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004fd0:	230f      	movs	r3, #15
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2229      	movs	r2, #41	; 0x29
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004fe2:	230f      	movs	r3, #15
 8004fe4:	18fb      	adds	r3, r7, r3
 8004fe6:	781b      	ldrb	r3, [r3, #0]
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b004      	add	sp, #16
 8004fee:	bdb0      	pop	{r4, r5, r7, pc}
 8004ff0:	fb8fffbf 	.word	0xfb8fffbf

08004ff4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ff4:	b5b0      	push	{r4, r5, r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2228      	movs	r2, #40	; 0x28
 8005004:	5c9b      	ldrb	r3, [r3, r2]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_RTC_SetTime+0x1a>
 800500a:	2302      	movs	r3, #2
 800500c:	e092      	b.n	8005134 <HAL_RTC_SetTime+0x140>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2228      	movs	r2, #40	; 0x28
 8005012:	2101      	movs	r1, #1
 8005014:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2229      	movs	r2, #41	; 0x29
 800501a:	2102      	movs	r1, #2
 800501c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	22ca      	movs	r2, #202	; 0xca
 8005024:	625a      	str	r2, [r3, #36]	; 0x24
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2253      	movs	r2, #83	; 0x53
 800502c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800502e:	2513      	movs	r5, #19
 8005030:	197c      	adds	r4, r7, r5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	0018      	movs	r0, r3
 8005036:	f000 fb0e 	bl	8005656 <RTC_EnterInitMode>
 800503a:	0003      	movs	r3, r0
 800503c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800503e:	197b      	adds	r3, r7, r5
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d162      	bne.n	800510c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d125      	bne.n	8005098 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2240      	movs	r2, #64	; 0x40
 8005054:	4013      	ands	r3, r2
 8005056:	d102      	bne.n	800505e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	0018      	movs	r0, r3
 8005064:	f000 fb7e 	bl	8005764 <RTC_ByteToBcd2>
 8005068:	0003      	movs	r3, r0
 800506a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 fb77 	bl	8005764 <RTC_ByteToBcd2>
 8005076:	0003      	movs	r3, r0
 8005078:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800507a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	789b      	ldrb	r3, [r3, #2]
 8005080:	0018      	movs	r0, r3
 8005082:	f000 fb6f 	bl	8005764 <RTC_ByteToBcd2>
 8005086:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005088:	0022      	movs	r2, r4
 800508a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	78db      	ldrb	r3, [r3, #3]
 8005090:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e017      	b.n	80050c8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2240      	movs	r2, #64	; 0x40
 80050a0:	4013      	ands	r3, r2
 80050a2:	d102      	bne.n	80050aa <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050b6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050bc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	78db      	ldrb	r3, [r3, #3]
 80050c2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	491b      	ldr	r1, [pc, #108]	; (800513c <HAL_RTC_SetTime+0x148>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4918      	ldr	r1, [pc, #96]	; (8005140 <HAL_RTC_SetTime+0x14c>)
 80050e0:	400a      	ands	r2, r1
 80050e2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6999      	ldr	r1, [r3, #24]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80050fc:	2313      	movs	r3, #19
 80050fe:	18fc      	adds	r4, r7, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	0018      	movs	r0, r3
 8005104:	f000 faea 	bl	80056dc <RTC_ExitInitMode>
 8005108:	0003      	movs	r3, r0
 800510a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	22ff      	movs	r2, #255	; 0xff
 8005112:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005114:	2313      	movs	r3, #19
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2229      	movs	r2, #41	; 0x29
 8005122:	2101      	movs	r1, #1
 8005124:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2228      	movs	r2, #40	; 0x28
 800512a:	2100      	movs	r1, #0
 800512c:	5499      	strb	r1, [r3, r2]

  return status;
 800512e:	2313      	movs	r3, #19
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	781b      	ldrb	r3, [r3, #0]
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	b006      	add	sp, #24
 800513a:	bdb0      	pop	{r4, r5, r7, pc}
 800513c:	007f7f7f 	.word	0x007f7f7f
 8005140:	fffbffff 	.word	0xfffbffff

08005144 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	045b      	lsls	r3, r3, #17
 8005162:	0c5a      	lsrs	r2, r3, #17
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <HAL_RTC_GetTime+0xb4>)
 8005170:	4013      	ands	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	b2db      	uxtb	r3, r3
 800517a:	223f      	movs	r2, #63	; 0x3f
 800517c:	4013      	ands	r3, r2
 800517e:	b2da      	uxtb	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	b2db      	uxtb	r3, r3
 800518a:	227f      	movs	r2, #127	; 0x7f
 800518c:	4013      	ands	r3, r2
 800518e:	b2da      	uxtb	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	227f      	movs	r2, #127	; 0x7f
 800519a:	4013      	ands	r3, r2
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	0d9b      	lsrs	r3, r3, #22
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2201      	movs	r2, #1
 80051aa:	4013      	ands	r3, r2
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11a      	bne.n	80051ee <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 faf9 	bl	80057b4 <RTC_Bcd2ToByte>
 80051c2:	0003      	movs	r3, r0
 80051c4:	001a      	movs	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	785b      	ldrb	r3, [r3, #1]
 80051ce:	0018      	movs	r0, r3
 80051d0:	f000 faf0 	bl	80057b4 <RTC_Bcd2ToByte>
 80051d4:	0003      	movs	r3, r0
 80051d6:	001a      	movs	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	789b      	ldrb	r3, [r3, #2]
 80051e0:	0018      	movs	r0, r3
 80051e2:	f000 fae7 	bl	80057b4 <RTC_Bcd2ToByte>
 80051e6:	0003      	movs	r3, r0
 80051e8:	001a      	movs	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b006      	add	sp, #24
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	007f7f7f 	.word	0x007f7f7f

080051fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051fc:	b5b0      	push	{r4, r5, r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2228      	movs	r2, #40	; 0x28
 800520c:	5c9b      	ldrb	r3, [r3, r2]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d101      	bne.n	8005216 <HAL_RTC_SetDate+0x1a>
 8005212:	2302      	movs	r3, #2
 8005214:	e07e      	b.n	8005314 <HAL_RTC_SetDate+0x118>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2228      	movs	r2, #40	; 0x28
 800521a:	2101      	movs	r1, #1
 800521c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2229      	movs	r2, #41	; 0x29
 8005222:	2102      	movs	r1, #2
 8005224:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10e      	bne.n	800524a <HAL_RTC_SetDate+0x4e>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	001a      	movs	r2, r3
 8005232:	2310      	movs	r3, #16
 8005234:	4013      	ands	r3, r2
 8005236:	d008      	beq.n	800524a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	2210      	movs	r2, #16
 800523e:	4393      	bics	r3, r2
 8005240:	b2db      	uxtb	r3, r3
 8005242:	330a      	adds	r3, #10
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d11c      	bne.n	800528a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	78db      	ldrb	r3, [r3, #3]
 8005254:	0018      	movs	r0, r3
 8005256:	f000 fa85 	bl	8005764 <RTC_ByteToBcd2>
 800525a:	0003      	movs	r3, r0
 800525c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	785b      	ldrb	r3, [r3, #1]
 8005262:	0018      	movs	r0, r3
 8005264:	f000 fa7e 	bl	8005764 <RTC_ByteToBcd2>
 8005268:	0003      	movs	r3, r0
 800526a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800526c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	789b      	ldrb	r3, [r3, #2]
 8005272:	0018      	movs	r0, r3
 8005274:	f000 fa76 	bl	8005764 <RTC_ByteToBcd2>
 8005278:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800527a:	0022      	movs	r2, r4
 800527c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e00e      	b.n	80052a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	78db      	ldrb	r3, [r3, #3]
 800528e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005296:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800529c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	22ca      	movs	r2, #202	; 0xca
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2253      	movs	r2, #83	; 0x53
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052b8:	2513      	movs	r5, #19
 80052ba:	197c      	adds	r4, r7, r5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 f9c9 	bl	8005656 <RTC_EnterInitMode>
 80052c4:	0003      	movs	r3, r0
 80052c6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80052c8:	0028      	movs	r0, r5
 80052ca:	183b      	adds	r3, r7, r0
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10c      	bne.n	80052ec <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4910      	ldr	r1, [pc, #64]	; (800531c <HAL_RTC_SetDate+0x120>)
 80052da:	400a      	ands	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052de:	183c      	adds	r4, r7, r0
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	0018      	movs	r0, r3
 80052e4:	f000 f9fa 	bl	80056dc <RTC_ExitInitMode>
 80052e8:	0003      	movs	r3, r0
 80052ea:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80052f4:	2313      	movs	r3, #19
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2229      	movs	r2, #41	; 0x29
 8005302:	2101      	movs	r1, #1
 8005304:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2228      	movs	r2, #40	; 0x28
 800530a:	2100      	movs	r1, #0
 800530c:	5499      	strb	r1, [r3, r2]

  return status;
 800530e:	2313      	movs	r3, #19
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	781b      	ldrb	r3, [r3, #0]
}
 8005314:	0018      	movs	r0, r3
 8005316:	46bd      	mov	sp, r7
 8005318:	b006      	add	sp, #24
 800531a:	bdb0      	pop	{r4, r5, r7, pc}
 800531c:	00ffff3f 	.word	0x00ffff3f

08005320 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4a21      	ldr	r2, [pc, #132]	; (80053b8 <HAL_RTC_GetDate+0x98>)
 8005334:	4013      	ands	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	0c1b      	lsrs	r3, r3, #16
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	b2db      	uxtb	r3, r3
 8005348:	221f      	movs	r2, #31
 800534a:	4013      	ands	r3, r2
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	223f      	movs	r2, #63	; 0x3f
 8005358:	4013      	ands	r3, r2
 800535a:	b2da      	uxtb	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	0b5b      	lsrs	r3, r3, #13
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2207      	movs	r2, #7
 8005368:	4013      	ands	r3, r2
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11a      	bne.n	80053ac <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	78db      	ldrb	r3, [r3, #3]
 800537a:	0018      	movs	r0, r3
 800537c:	f000 fa1a 	bl	80057b4 <RTC_Bcd2ToByte>
 8005380:	0003      	movs	r3, r0
 8005382:	001a      	movs	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	0018      	movs	r0, r3
 800538e:	f000 fa11 	bl	80057b4 <RTC_Bcd2ToByte>
 8005392:	0003      	movs	r3, r0
 8005394:	001a      	movs	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	789b      	ldrb	r3, [r3, #2]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 fa08 	bl	80057b4 <RTC_Bcd2ToByte>
 80053a4:	0003      	movs	r3, r0
 80053a6:	001a      	movs	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	0018      	movs	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b006      	add	sp, #24
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	00ffff3f 	.word	0x00ffff3f

080053bc <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80053bc:	b590      	push	{r4, r7, lr}
 80053be:	b089      	sub	sp, #36	; 0x24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2228      	movs	r2, #40	; 0x28
 80053cc:	5c9b      	ldrb	r3, [r3, r2]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_RTC_SetAlarm+0x1a>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e10c      	b.n	80055f0 <HAL_RTC_SetAlarm+0x234>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2228      	movs	r2, #40	; 0x28
 80053da:	2101      	movs	r1, #1
 80053dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2229      	movs	r2, #41	; 0x29
 80053e2:	2102      	movs	r1, #2
 80053e4:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d136      	bne.n	800545a <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2240      	movs	r2, #64	; 0x40
 80053f4:	4013      	ands	r3, r2
 80053f6:	d102      	bne.n	80053fe <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2200      	movs	r2, #0
 80053fc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	0018      	movs	r0, r3
 8005404:	f000 f9ae 	bl	8005764 <RTC_ByteToBcd2>
 8005408:	0003      	movs	r3, r0
 800540a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	0018      	movs	r0, r3
 8005412:	f000 f9a7 	bl	8005764 <RTC_ByteToBcd2>
 8005416:	0003      	movs	r3, r0
 8005418:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800541a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	789b      	ldrb	r3, [r3, #2]
 8005420:	0018      	movs	r0, r3
 8005422:	f000 f99f 	bl	8005764 <RTC_ByteToBcd2>
 8005426:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005428:	0022      	movs	r2, r4
 800542a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	78db      	ldrb	r3, [r3, #3]
 8005430:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005432:	431a      	orrs	r2, r3
 8005434:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2220      	movs	r2, #32
 800543a:	5c9b      	ldrb	r3, [r3, r2]
 800543c:	0018      	movs	r0, r3
 800543e:	f000 f991 	bl	8005764 <RTC_ByteToBcd2>
 8005442:	0003      	movs	r3, r0
 8005444:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005446:	0022      	movs	r2, r4
 8005448:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800544e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005454:	4313      	orrs	r3, r2
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	e022      	b.n	80054a0 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	2240      	movs	r2, #64	; 0x40
 8005462:	4013      	ands	r3, r2
 8005464:	d102      	bne.n	800546c <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2200      	movs	r2, #0
 800546a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005478:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800547e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	78db      	ldrb	r3, [r3, #3]
 8005484:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005486:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2120      	movs	r1, #32
 800548c:	5c5b      	ldrb	r3, [r3, r1]
 800548e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005490:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005496:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800549c:	4313      	orrs	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	22ca      	movs	r2, #202	; 0xca
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2253      	movs	r2, #83	; 0x53
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d143      	bne.n	8005550 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4949      	ldr	r1, [pc, #292]	; (80055f8 <HAL_RTC_SetAlarm+0x23c>)
 80054d4:	400a      	ands	r2, r1
 80054d6:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4946      	ldr	r1, [pc, #280]	; (80055fc <HAL_RTC_SetAlarm+0x240>)
 80054e4:	400a      	ands	r2, r1
 80054e6:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80054e8:	f7fe fa56 	bl	8003998 <HAL_GetTick>
 80054ec:	0003      	movs	r3, r0
 80054ee:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80054f0:	e016      	b.n	8005520 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054f2:	f7fe fa51 	bl	8003998 <HAL_GetTick>
 80054f6:	0002      	movs	r2, r0
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	1ad2      	subs	r2, r2, r3
 80054fc:	23fa      	movs	r3, #250	; 0xfa
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	429a      	cmp	r2, r3
 8005502:	d90d      	bls.n	8005520 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2229      	movs	r2, #41	; 0x29
 8005510:	2103      	movs	r1, #3
 8005512:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2228      	movs	r2, #40	; 0x28
 8005518:	2100      	movs	r1, #0
 800551a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e067      	b.n	80055f0 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	4013      	ands	r3, r2
 800552a:	d0e2      	beq.n	80054f2 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	0049      	lsls	r1, r1, #1
 800554a:	430a      	orrs	r2, r1
 800554c:	619a      	str	r2, [r3, #24]
 800554e:	e042      	b.n	80055d6 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4929      	ldr	r1, [pc, #164]	; (8005600 <HAL_RTC_SetAlarm+0x244>)
 800555c:	400a      	ands	r2, r1
 800555e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4926      	ldr	r1, [pc, #152]	; (8005604 <HAL_RTC_SetAlarm+0x248>)
 800556c:	400a      	ands	r2, r1
 800556e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005570:	f7fe fa12 	bl	8003998 <HAL_GetTick>
 8005574:	0003      	movs	r3, r0
 8005576:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005578:	e016      	b.n	80055a8 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800557a:	f7fe fa0d 	bl	8003998 <HAL_GetTick>
 800557e:	0002      	movs	r2, r0
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	1ad2      	subs	r2, r2, r3
 8005584:	23fa      	movs	r3, #250	; 0xfa
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	429a      	cmp	r2, r3
 800558a:	d90d      	bls.n	80055a8 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	22ff      	movs	r2, #255	; 0xff
 8005592:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2229      	movs	r2, #41	; 0x29
 8005598:	2103      	movs	r1, #3
 800559a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2228      	movs	r2, #40	; 0x28
 80055a0:	2100      	movs	r1, #0
 80055a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e023      	b.n	80055f0 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2202      	movs	r2, #2
 80055b0:	4013      	ands	r3, r2
 80055b2:	d0e2      	beq.n	800557a <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	0089      	lsls	r1, r1, #2
 80055d2:	430a      	orrs	r2, r1
 80055d4:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	22ff      	movs	r2, #255	; 0xff
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2229      	movs	r2, #41	; 0x29
 80055e2:	2101      	movs	r1, #1
 80055e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2228      	movs	r2, #40	; 0x28
 80055ea:	2100      	movs	r1, #0
 80055ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b009      	add	sp, #36	; 0x24
 80055f6:	bd90      	pop	{r4, r7, pc}
 80055f8:	fffffeff 	.word	0xfffffeff
 80055fc:	ffffefff 	.word	0xffffefff
 8005600:	fffffdff 	.word	0xfffffdff
 8005604:	ffffdfff 	.word	0xffffdfff

08005608 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	21a0      	movs	r1, #160	; 0xa0
 800561c:	438a      	bics	r2, r1
 800561e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005620:	f7fe f9ba 	bl	8003998 <HAL_GetTick>
 8005624:	0003      	movs	r3, r0
 8005626:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005628:	e00a      	b.n	8005640 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800562a:	f7fe f9b5 	bl	8003998 <HAL_GetTick>
 800562e:	0002      	movs	r2, r0
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1ad2      	subs	r2, r2, r3
 8005634:	23fa      	movs	r3, #250	; 0xfa
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	429a      	cmp	r2, r3
 800563a:	d901      	bls.n	8005640 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e006      	b.n	800564e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	4013      	ands	r3, r2
 800564a:	d0ee      	beq.n	800562a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b004      	add	sp, #16
 8005654:	bd80      	pop	{r7, pc}

08005656 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800565e:	230f      	movs	r3, #15
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2240      	movs	r2, #64	; 0x40
 800566e:	4013      	ands	r3, r2
 8005670:	d12c      	bne.n	80056cc <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2180      	movs	r1, #128	; 0x80
 800567e:	430a      	orrs	r2, r1
 8005680:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005682:	f7fe f989 	bl	8003998 <HAL_GetTick>
 8005686:	0003      	movs	r3, r0
 8005688:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800568a:	e014      	b.n	80056b6 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800568c:	f7fe f984 	bl	8003998 <HAL_GetTick>
 8005690:	0002      	movs	r2, r0
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	1ad2      	subs	r2, r2, r3
 8005696:	200f      	movs	r0, #15
 8005698:	183b      	adds	r3, r7, r0
 800569a:	1839      	adds	r1, r7, r0
 800569c:	7809      	ldrb	r1, [r1, #0]
 800569e:	7019      	strb	r1, [r3, #0]
 80056a0:	23fa      	movs	r3, #250	; 0xfa
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d906      	bls.n	80056b6 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80056a8:	183b      	adds	r3, r7, r0
 80056aa:	2203      	movs	r2, #3
 80056ac:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2229      	movs	r2, #41	; 0x29
 80056b2:	2103      	movs	r1, #3
 80056b4:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2240      	movs	r2, #64	; 0x40
 80056be:	4013      	ands	r3, r2
 80056c0:	d104      	bne.n	80056cc <RTC_EnterInitMode+0x76>
 80056c2:	230f      	movs	r3, #15
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d1df      	bne.n	800568c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80056cc:	230f      	movs	r3, #15
 80056ce:	18fb      	adds	r3, r7, r3
 80056d0:	781b      	ldrb	r3, [r3, #0]
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b004      	add	sp, #16
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056dc:	b590      	push	{r4, r7, lr}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e4:	240f      	movs	r4, #15
 80056e6:	193b      	adds	r3, r7, r4
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80056ec:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <RTC_ExitInitMode+0x84>)
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <RTC_ExitInitMode+0x84>)
 80056f2:	2180      	movs	r1, #128	; 0x80
 80056f4:	438a      	bics	r2, r1
 80056f6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <RTC_ExitInitMode+0x84>)
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	2220      	movs	r2, #32
 80056fe:	4013      	ands	r3, r2
 8005700:	d10d      	bne.n	800571e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0018      	movs	r0, r3
 8005706:	f7ff ff7f 	bl	8005608 <HAL_RTC_WaitForSynchro>
 800570a:	1e03      	subs	r3, r0, #0
 800570c:	d021      	beq.n	8005752 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2229      	movs	r2, #41	; 0x29
 8005712:	2103      	movs	r1, #3
 8005714:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005716:	193b      	adds	r3, r7, r4
 8005718:	2203      	movs	r2, #3
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e019      	b.n	8005752 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <RTC_ExitInitMode+0x84>)
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <RTC_ExitInitMode+0x84>)
 8005724:	2120      	movs	r1, #32
 8005726:	438a      	bics	r2, r1
 8005728:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0018      	movs	r0, r3
 800572e:	f7ff ff6b 	bl	8005608 <HAL_RTC_WaitForSynchro>
 8005732:	1e03      	subs	r3, r0, #0
 8005734:	d007      	beq.n	8005746 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2229      	movs	r2, #41	; 0x29
 800573a:	2103      	movs	r1, #3
 800573c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800573e:	230f      	movs	r3, #15
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	2203      	movs	r2, #3
 8005744:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005746:	4b06      	ldr	r3, [pc, #24]	; (8005760 <RTC_ExitInitMode+0x84>)
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <RTC_ExitInitMode+0x84>)
 800574c:	2120      	movs	r1, #32
 800574e:	430a      	orrs	r2, r1
 8005750:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005752:	230f      	movs	r3, #15
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	781b      	ldrb	r3, [r3, #0]
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b005      	add	sp, #20
 800575e:	bd90      	pop	{r4, r7, pc}
 8005760:	40002800 	.word	0x40002800

08005764 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	0002      	movs	r2, r0
 800576c:	1dfb      	adds	r3, r7, #7
 800576e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005774:	230b      	movs	r3, #11
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	1dfa      	adds	r2, r7, #7
 800577a:	7812      	ldrb	r2, [r2, #0]
 800577c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800577e:	e008      	b.n	8005792 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005786:	220b      	movs	r2, #11
 8005788:	18bb      	adds	r3, r7, r2
 800578a:	18ba      	adds	r2, r7, r2
 800578c:	7812      	ldrb	r2, [r2, #0]
 800578e:	3a0a      	subs	r2, #10
 8005790:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005792:	210b      	movs	r1, #11
 8005794:	187b      	adds	r3, r7, r1
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b09      	cmp	r3, #9
 800579a:	d8f1      	bhi.n	8005780 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	187b      	adds	r3, r7, r1
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	b2db      	uxtb	r3, r3
}
 80057ac:	0018      	movs	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b004      	add	sp, #16
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	0002      	movs	r2, r0
 80057bc:	1dfb      	adds	r3, r7, #7
 80057be:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	001a      	movs	r2, r3
 80057ca:	0013      	movs	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	189b      	adds	r3, r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	1dfb      	adds	r3, r7, #7
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	210f      	movs	r1, #15
 80057de:	400b      	ands	r3, r1
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	18d3      	adds	r3, r2, r3
 80057e4:	b2db      	uxtb	r3, r3
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b004      	add	sp, #16
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2228      	movs	r2, #40	; 0x28
 80057fa:	5c9b      	ldrb	r3, [r3, r2]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005800:	2302      	movs	r3, #2
 8005802:	e024      	b.n	800584e <HAL_RTCEx_EnableBypassShadow+0x60>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2228      	movs	r2, #40	; 0x28
 8005808:	2101      	movs	r1, #1
 800580a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2229      	movs	r2, #41	; 0x29
 8005810:	2102      	movs	r1, #2
 8005812:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	22ca      	movs	r2, #202	; 0xca
 800581a:	625a      	str	r2, [r3, #36]	; 0x24
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2253      	movs	r2, #83	; 0x53
 8005822:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2120      	movs	r1, #32
 8005830:	430a      	orrs	r2, r1
 8005832:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	22ff      	movs	r2, #255	; 0xff
 800583a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2229      	movs	r2, #41	; 0x29
 8005840:	2101      	movs	r1, #1
 8005842:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2228      	movs	r2, #40	; 0x28
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b002      	add	sp, #8
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2228      	movs	r2, #40	; 0x28
 8005862:	5c9b      	ldrb	r3, [r3, r2]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_RTCEx_DisableBypassShadow+0x16>
 8005868:	2302      	movs	r3, #2
 800586a:	e024      	b.n	80058b6 <HAL_RTCEx_DisableBypassShadow+0x60>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2228      	movs	r2, #40	; 0x28
 8005870:	2101      	movs	r1, #1
 8005872:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2229      	movs	r2, #41	; 0x29
 8005878:	2102      	movs	r1, #2
 800587a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	22ca      	movs	r2, #202	; 0xca
 8005882:	625a      	str	r2, [r3, #36]	; 0x24
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2253      	movs	r2, #83	; 0x53
 800588a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	21df      	movs	r1, #223	; 0xdf
 8005898:	400a      	ands	r2, r1
 800589a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	22ff      	movs	r2, #255	; 0xff
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2229      	movs	r2, #41	; 0x29
 80058a8:	2101      	movs	r1, #1
 80058aa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2228      	movs	r2, #40	; 0x28
 80058b0:	2100      	movs	r1, #0
 80058b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	0018      	movs	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b002      	add	sp, #8
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e0a8      	b.n	8005a24 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	2382      	movs	r3, #130	; 0x82
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d009      	beq.n	80058fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	61da      	str	r2, [r3, #28]
 80058ec:	e005      	b.n	80058fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	225d      	movs	r2, #93	; 0x5d
 8005904:	5c9b      	ldrb	r3, [r3, r2]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d107      	bne.n	800591c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	225c      	movs	r2, #92	; 0x5c
 8005910:	2100      	movs	r1, #0
 8005912:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0018      	movs	r0, r3
 8005918:	f7fd fcf6 	bl	8003308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	225d      	movs	r2, #93	; 0x5d
 8005920:	2102      	movs	r1, #2
 8005922:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2140      	movs	r1, #64	; 0x40
 8005930:	438a      	bics	r2, r1
 8005932:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	23e0      	movs	r3, #224	; 0xe0
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	429a      	cmp	r2, r3
 800593e:	d902      	bls.n	8005946 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e002      	b.n	800594c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005946:	2380      	movs	r3, #128	; 0x80
 8005948:	015b      	lsls	r3, r3, #5
 800594a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	23f0      	movs	r3, #240	; 0xf0
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	429a      	cmp	r2, r3
 8005956:	d008      	beq.n	800596a <HAL_SPI_Init+0xaa>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	23e0      	movs	r3, #224	; 0xe0
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	429a      	cmp	r2, r3
 8005962:	d002      	beq.n	800596a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	2382      	movs	r3, #130	; 0x82
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	401a      	ands	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6899      	ldr	r1, [r3, #8]
 8005978:	2384      	movs	r3, #132	; 0x84
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	400b      	ands	r3, r1
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2102      	movs	r1, #2
 8005986:	400b      	ands	r3, r1
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	2101      	movs	r1, #1
 8005990:	400b      	ands	r3, r1
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6999      	ldr	r1, [r3, #24]
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	400b      	ands	r3, r1
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	2138      	movs	r1, #56	; 0x38
 80059a6:	400b      	ands	r3, r1
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	400b      	ands	r3, r1
 80059b2:	431a      	orrs	r2, r3
 80059b4:	0011      	movs	r1, r2
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ba:	2380      	movs	r3, #128	; 0x80
 80059bc:	019b      	lsls	r3, r3, #6
 80059be:	401a      	ands	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	0c1b      	lsrs	r3, r3, #16
 80059ce:	2204      	movs	r2, #4
 80059d0:	401a      	ands	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2110      	movs	r1, #16
 80059d8:	400b      	ands	r3, r1
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	2108      	movs	r1, #8
 80059e2:	400b      	ands	r3, r1
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68d9      	ldr	r1, [r3, #12]
 80059ea:	23f0      	movs	r3, #240	; 0xf0
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	400b      	ands	r3, r1
 80059f0:	431a      	orrs	r2, r3
 80059f2:	0011      	movs	r1, r2
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	2380      	movs	r3, #128	; 0x80
 80059f8:	015b      	lsls	r3, r3, #5
 80059fa:	401a      	ands	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4907      	ldr	r1, [pc, #28]	; (8005a2c <HAL_SPI_Init+0x16c>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	225d      	movs	r2, #93	; 0x5d
 8005a1e:	2101      	movs	r1, #1
 8005a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	0018      	movs	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b004      	add	sp, #16
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	fffff7ff 	.word	0xfffff7ff

08005a30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	1dbb      	adds	r3, r7, #6
 8005a3e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a40:	231f      	movs	r3, #31
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	225c      	movs	r2, #92	; 0x5c
 8005a4c:	5c9b      	ldrb	r3, [r3, r2]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_SPI_Transmit+0x26>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e140      	b.n	8005cd8 <HAL_SPI_Transmit+0x2a8>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	225c      	movs	r2, #92	; 0x5c
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a5e:	f7fd ff9b 	bl	8003998 <HAL_GetTick>
 8005a62:	0003      	movs	r3, r0
 8005a64:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005a66:	2316      	movs	r3, #22
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	1dba      	adds	r2, r7, #6
 8005a6c:	8812      	ldrh	r2, [r2, #0]
 8005a6e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	225d      	movs	r2, #93	; 0x5d
 8005a74:	5c9b      	ldrb	r3, [r3, r2]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d004      	beq.n	8005a86 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005a7c:	231f      	movs	r3, #31
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	2202      	movs	r2, #2
 8005a82:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a84:	e11d      	b.n	8005cc2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_SPI_Transmit+0x64>
 8005a8c:	1dbb      	adds	r3, r7, #6
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005a94:	231f      	movs	r3, #31
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	2201      	movs	r2, #1
 8005a9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a9c:	e111      	b.n	8005cc2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	225d      	movs	r2, #93	; 0x5d
 8005aa2:	2103      	movs	r1, #3
 8005aa4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1dba      	adds	r2, r7, #6
 8005ab6:	8812      	ldrh	r2, [r2, #0]
 8005ab8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1dba      	adds	r2, r7, #6
 8005abe:	8812      	ldrh	r2, [r2, #0]
 8005ac0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2244      	movs	r2, #68	; 0x44
 8005acc:	2100      	movs	r1, #0
 8005ace:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2246      	movs	r2, #70	; 0x46
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d110      	bne.n	8005b12 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2140      	movs	r1, #64	; 0x40
 8005afc:	438a      	bics	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	01c9      	lsls	r1, r1, #7
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2240      	movs	r2, #64	; 0x40
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	d007      	beq.n	8005b30 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2140      	movs	r1, #64	; 0x40
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	23e0      	movs	r3, #224	; 0xe0
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d94e      	bls.n	8005bda <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d004      	beq.n	8005b4e <HAL_SPI_Transmit+0x11e>
 8005b44:	2316      	movs	r3, #22
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d13f      	bne.n	8005bce <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	1c9a      	adds	r2, r3, #2
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b72:	e02c      	b.n	8005bce <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d112      	bne.n	8005ba8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	881a      	ldrh	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	1c9a      	adds	r2, r3, #2
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ba6:	e012      	b.n	8005bce <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba8:	f7fd fef6 	bl	8003998 <HAL_GetTick>
 8005bac:	0002      	movs	r2, r0
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d802      	bhi.n	8005bbe <HAL_SPI_Transmit+0x18e>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	d102      	bne.n	8005bc4 <HAL_SPI_Transmit+0x194>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005bc4:	231f      	movs	r3, #31
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	2203      	movs	r2, #3
 8005bca:	701a      	strb	r2, [r3, #0]
          goto error;
 8005bcc:	e079      	b.n	8005cc2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1cd      	bne.n	8005b74 <HAL_SPI_Transmit+0x144>
 8005bd8:	e04f      	b.n	8005c7a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <HAL_SPI_Transmit+0x1bc>
 8005be2:	2316      	movs	r3, #22
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d141      	bne.n	8005c70 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	7812      	ldrb	r2, [r2, #0]
 8005bf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005c12:	e02d      	b.n	8005c70 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d113      	bne.n	8005c4a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c48:	e012      	b.n	8005c70 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c4a:	f7fd fea5 	bl	8003998 <HAL_GetTick>
 8005c4e:	0002      	movs	r2, r0
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d802      	bhi.n	8005c60 <HAL_SPI_Transmit+0x230>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	d102      	bne.n	8005c66 <HAL_SPI_Transmit+0x236>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d104      	bne.n	8005c70 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005c66:	231f      	movs	r3, #31
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c6e:	e028      	b.n	8005cc2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1cc      	bne.n	8005c14 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f000 fcd9 	bl	8006638 <SPI_EndRxTxTransaction>
 8005c86:	1e03      	subs	r3, r0, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005cb6:	231f      	movs	r3, #31
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e000      	b.n	8005cc2 <HAL_SPI_Transmit+0x292>
  }

error:
 8005cc0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	225d      	movs	r2, #93	; 0x5d
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	225c      	movs	r2, #92	; 0x5c
 8005cce:	2100      	movs	r1, #0
 8005cd0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005cd2:	231f      	movs	r3, #31
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	781b      	ldrb	r3, [r3, #0]
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b008      	add	sp, #32
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b089      	sub	sp, #36	; 0x24
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	1dbb      	adds	r3, r7, #6
 8005cee:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cf0:	2317      	movs	r3, #23
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	2382      	movs	r3, #130	; 0x82
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d113      	bne.n	8005d2c <HAL_SPI_Receive+0x4c>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10f      	bne.n	8005d2c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	225d      	movs	r2, #93	; 0x5d
 8005d10:	2104      	movs	r1, #4
 8005d12:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d14:	1dbb      	adds	r3, r7, #6
 8005d16:	881c      	ldrh	r4, [r3, #0]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	0023      	movs	r3, r4
 8005d24:	f000 f928 	bl	8005f78 <HAL_SPI_TransmitReceive>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	e11c      	b.n	8005f66 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	225c      	movs	r2, #92	; 0x5c
 8005d30:	5c9b      	ldrb	r3, [r3, r2]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_SPI_Receive+0x5a>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e115      	b.n	8005f66 <HAL_SPI_Receive+0x286>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	225c      	movs	r2, #92	; 0x5c
 8005d3e:	2101      	movs	r1, #1
 8005d40:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d42:	f7fd fe29 	bl	8003998 <HAL_GetTick>
 8005d46:	0003      	movs	r3, r0
 8005d48:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	225d      	movs	r2, #93	; 0x5d
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d004      	beq.n	8005d60 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005d56:	2317      	movs	r3, #23
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d5e:	e0f7      	b.n	8005f50 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_SPI_Receive+0x8e>
 8005d66:	1dbb      	adds	r3, r7, #6
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d104      	bne.n	8005d78 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005d6e:	2317      	movs	r3, #23
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	2201      	movs	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d76:	e0eb      	b.n	8005f50 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	225d      	movs	r2, #93	; 0x5d
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1dba      	adds	r2, r7, #6
 8005d90:	2144      	movs	r1, #68	; 0x44
 8005d92:	8812      	ldrh	r2, [r2, #0]
 8005d94:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1dba      	adds	r2, r7, #6
 8005d9a:	2146      	movs	r1, #70	; 0x46
 8005d9c:	8812      	ldrh	r2, [r2, #0]
 8005d9e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	23e0      	movs	r3, #224	; 0xe0
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d908      	bls.n	8005ddc <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4966      	ldr	r1, [pc, #408]	; (8005f70 <HAL_SPI_Receive+0x290>)
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	e008      	b.n	8005dee <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	0149      	lsls	r1, r1, #5
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d10f      	bne.n	8005e1a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2140      	movs	r1, #64	; 0x40
 8005e06:	438a      	bics	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4957      	ldr	r1, [pc, #348]	; (8005f74 <HAL_SPI_Receive+0x294>)
 8005e16:	400a      	ands	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2240      	movs	r2, #64	; 0x40
 8005e22:	4013      	ands	r3, r2
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d007      	beq.n	8005e38 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2140      	movs	r1, #64	; 0x40
 8005e34:	430a      	orrs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	23e0      	movs	r3, #224	; 0xe0
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d900      	bls.n	8005e46 <HAL_SPI_Receive+0x166>
 8005e44:	e069      	b.n	8005f1a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e46:	e031      	b.n	8005eac <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d117      	bne.n	8005e86 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	001a      	movs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	7812      	ldrb	r2, [r2, #0]
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2246      	movs	r2, #70	; 0x46
 8005e76:	5a9b      	ldrh	r3, [r3, r2]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b299      	uxth	r1, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2246      	movs	r2, #70	; 0x46
 8005e82:	5299      	strh	r1, [r3, r2]
 8005e84:	e012      	b.n	8005eac <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e86:	f7fd fd87 	bl	8003998 <HAL_GetTick>
 8005e8a:	0002      	movs	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d802      	bhi.n	8005e9c <HAL_SPI_Receive+0x1bc>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	d102      	bne.n	8005ea2 <HAL_SPI_Receive+0x1c2>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005ea2:	2317      	movs	r3, #23
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	701a      	strb	r2, [r3, #0]
          goto error;
 8005eaa:	e051      	b.n	8005f50 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2246      	movs	r2, #70	; 0x46
 8005eb0:	5a9b      	ldrh	r3, [r3, r2]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1c7      	bne.n	8005e48 <HAL_SPI_Receive+0x168>
 8005eb8:	e035      	b.n	8005f26 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d115      	bne.n	8005ef4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	b292      	uxth	r2, r2
 8005ed4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	1c9a      	adds	r2, r3, #2
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2246      	movs	r2, #70	; 0x46
 8005ee4:	5a9b      	ldrh	r3, [r3, r2]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b299      	uxth	r1, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2246      	movs	r2, #70	; 0x46
 8005ef0:	5299      	strh	r1, [r3, r2]
 8005ef2:	e012      	b.n	8005f1a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ef4:	f7fd fd50 	bl	8003998 <HAL_GetTick>
 8005ef8:	0002      	movs	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d802      	bhi.n	8005f0a <HAL_SPI_Receive+0x22a>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	d102      	bne.n	8005f10 <HAL_SPI_Receive+0x230>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005f10:	2317      	movs	r3, #23
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	2203      	movs	r2, #3
 8005f16:	701a      	strb	r2, [r3, #0]
          goto error;
 8005f18:	e01a      	b.n	8005f50 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2246      	movs	r2, #70	; 0x46
 8005f1e:	5a9b      	ldrh	r3, [r3, r2]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1c9      	bne.n	8005eba <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 fb25 	bl	800657c <SPI_EndRxTransaction>
 8005f32:	1e03      	subs	r3, r0, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005f44:	2317      	movs	r3, #23
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	2201      	movs	r2, #1
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	e000      	b.n	8005f50 <HAL_SPI_Receive+0x270>
  }

error :
 8005f4e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	225d      	movs	r2, #93	; 0x5d
 8005f54:	2101      	movs	r1, #1
 8005f56:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	225c      	movs	r2, #92	; 0x5c
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005f60:	2317      	movs	r3, #23
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781b      	ldrb	r3, [r3, #0]
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b007      	add	sp, #28
 8005f6c:	bd90      	pop	{r4, r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	ffffefff 	.word	0xffffefff
 8005f74:	ffffbfff 	.word	0xffffbfff

08005f78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	001a      	movs	r2, r3
 8005f86:	1cbb      	adds	r3, r7, #2
 8005f88:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f8e:	2323      	movs	r3, #35	; 0x23
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	225c      	movs	r2, #92	; 0x5c
 8005f9a:	5c9b      	ldrb	r3, [r3, r2]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_SPI_TransmitReceive+0x2c>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e1b5      	b.n	8006310 <HAL_SPI_TransmitReceive+0x398>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	225c      	movs	r2, #92	; 0x5c
 8005fa8:	2101      	movs	r1, #1
 8005faa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fac:	f7fd fcf4 	bl	8003998 <HAL_GetTick>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fb4:	201b      	movs	r0, #27
 8005fb6:	183b      	adds	r3, r7, r0
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	215d      	movs	r1, #93	; 0x5d
 8005fbc:	5c52      	ldrb	r2, [r2, r1]
 8005fbe:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005fc6:	2312      	movs	r3, #18
 8005fc8:	18fb      	adds	r3, r7, r3
 8005fca:	1cba      	adds	r2, r7, #2
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fd0:	183b      	adds	r3, r7, r0
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d011      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x84>
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	2382      	movs	r3, #130	; 0x82
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d107      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x7a>
 8005fea:	183b      	adds	r3, r7, r0
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d004      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005ff2:	2323      	movs	r3, #35	; 0x23
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ffa:	e17e      	b.n	80062fa <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d006      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x98>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x98>
 8006008:	1cbb      	adds	r3, r7, #2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006010:	2323      	movs	r3, #35	; 0x23
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
    goto error;
 8006018:	e16f      	b.n	80062fa <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	225d      	movs	r2, #93	; 0x5d
 800601e:	5c9b      	ldrb	r3, [r3, r2]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b04      	cmp	r3, #4
 8006024:	d003      	beq.n	800602e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	225d      	movs	r2, #93	; 0x5d
 800602a:	2105      	movs	r1, #5
 800602c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1cba      	adds	r2, r7, #2
 800603e:	2146      	movs	r1, #70	; 0x46
 8006040:	8812      	ldrh	r2, [r2, #0]
 8006042:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	1cba      	adds	r2, r7, #2
 8006048:	2144      	movs	r1, #68	; 0x44
 800604a:	8812      	ldrh	r2, [r2, #0]
 800604c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1cba      	adds	r2, r7, #2
 8006058:	8812      	ldrh	r2, [r2, #0]
 800605a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	1cba      	adds	r2, r7, #2
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	23e0      	movs	r3, #224	; 0xe0
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	429a      	cmp	r2, r3
 800607a:	d908      	bls.n	800608e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	49a4      	ldr	r1, [pc, #656]	; (8006318 <HAL_SPI_TransmitReceive+0x3a0>)
 8006088:	400a      	ands	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	e008      	b.n	80060a0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2180      	movs	r1, #128	; 0x80
 800609a:	0149      	lsls	r1, r1, #5
 800609c:	430a      	orrs	r2, r1
 800609e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2240      	movs	r2, #64	; 0x40
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d007      	beq.n	80060be <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	430a      	orrs	r2, r1
 80060bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	23e0      	movs	r3, #224	; 0xe0
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d800      	bhi.n	80060cc <HAL_SPI_TransmitReceive+0x154>
 80060ca:	e07f      	b.n	80061cc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x168>
 80060d4:	2312      	movs	r3, #18
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d000      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x168>
 80060de:	e069      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	881a      	ldrh	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006104:	e056      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2202      	movs	r2, #2
 800610e:	4013      	ands	r3, r2
 8006110:	2b02      	cmp	r3, #2
 8006112:	d11b      	bne.n	800614c <HAL_SPI_TransmitReceive+0x1d4>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d016      	beq.n	800614c <HAL_SPI_TransmitReceive+0x1d4>
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	2b01      	cmp	r3, #1
 8006122:	d113      	bne.n	800614c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	881a      	ldrh	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	1c9a      	adds	r2, r3, #2
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2201      	movs	r2, #1
 8006154:	4013      	ands	r3, r2
 8006156:	2b01      	cmp	r3, #1
 8006158:	d11c      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x21c>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2246      	movs	r2, #70	; 0x46
 800615e:	5a9b      	ldrh	r3, [r3, r2]
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	b292      	uxth	r2, r2
 8006172:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	1c9a      	adds	r2, r3, #2
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2246      	movs	r2, #70	; 0x46
 8006182:	5a9b      	ldrh	r3, [r3, r2]
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b299      	uxth	r1, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2246      	movs	r2, #70	; 0x46
 800618e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006190:	2301      	movs	r3, #1
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006194:	f7fd fc00 	bl	8003998 <HAL_GetTick>
 8006198:	0002      	movs	r2, r0
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d807      	bhi.n	80061b4 <HAL_SPI_TransmitReceive+0x23c>
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	3301      	adds	r3, #1
 80061a8:	d004      	beq.n	80061b4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80061aa:	2323      	movs	r3, #35	; 0x23
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	2203      	movs	r2, #3
 80061b0:	701a      	strb	r2, [r3, #0]
        goto error;
 80061b2:	e0a2      	b.n	80062fa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1a3      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x18e>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2246      	movs	r2, #70	; 0x46
 80061c2:	5a9b      	ldrh	r3, [r3, r2]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d19d      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x18e>
 80061ca:	e085      	b.n	80062d8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_SPI_TransmitReceive+0x268>
 80061d4:	2312      	movs	r3, #18
 80061d6:	18fb      	adds	r3, r7, r3
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d000      	beq.n	80061e0 <HAL_SPI_TransmitReceive+0x268>
 80061de:	e070      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	330c      	adds	r3, #12
 80061ea:	7812      	ldrb	r2, [r2, #0]
 80061ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006206:	e05c      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2202      	movs	r2, #2
 8006210:	4013      	ands	r3, r2
 8006212:	2b02      	cmp	r3, #2
 8006214:	d11c      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x2d8>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d017      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x2d8>
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	2b01      	cmp	r3, #1
 8006224:	d114      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2201      	movs	r2, #1
 8006258:	4013      	ands	r3, r2
 800625a:	2b01      	cmp	r3, #1
 800625c:	d11e      	bne.n	800629c <HAL_SPI_TransmitReceive+0x324>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2246      	movs	r2, #70	; 0x46
 8006262:	5a9b      	ldrh	r3, [r3, r2]
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d018      	beq.n	800629c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	001a      	movs	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2246      	movs	r2, #70	; 0x46
 800628a:	5a9b      	ldrh	r3, [r3, r2]
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b299      	uxth	r1, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2246      	movs	r2, #70	; 0x46
 8006296:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006298:	2301      	movs	r3, #1
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800629c:	f7fd fb7c 	bl	8003998 <HAL_GetTick>
 80062a0:	0002      	movs	r2, r0
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d802      	bhi.n	80062b2 <HAL_SPI_TransmitReceive+0x33a>
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	3301      	adds	r3, #1
 80062b0:	d102      	bne.n	80062b8 <HAL_SPI_TransmitReceive+0x340>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80062b8:	2323      	movs	r3, #35	; 0x23
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	2203      	movs	r2, #3
 80062be:	701a      	strb	r2, [r3, #0]
        goto error;
 80062c0:	e01b      	b.n	80062fa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d19d      	bne.n	8006208 <HAL_SPI_TransmitReceive+0x290>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2246      	movs	r2, #70	; 0x46
 80062d0:	5a9b      	ldrh	r3, [r3, r2]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d197      	bne.n	8006208 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	0018      	movs	r0, r3
 80062e0:	f000 f9aa 	bl	8006638 <SPI_EndRxTxTransaction>
 80062e4:	1e03      	subs	r3, r0, #0
 80062e6:	d007      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80062e8:	2323      	movs	r3, #35	; 0x23
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	661a      	str	r2, [r3, #96]	; 0x60
 80062f6:	e000      	b.n	80062fa <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80062f8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	225d      	movs	r2, #93	; 0x5d
 80062fe:	2101      	movs	r1, #1
 8006300:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	225c      	movs	r2, #92	; 0x5c
 8006306:	2100      	movs	r1, #0
 8006308:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800630a:	2323      	movs	r3, #35	; 0x23
 800630c:	18fb      	adds	r3, r7, r3
 800630e:	781b      	ldrb	r3, [r3, #0]
}
 8006310:	0018      	movs	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	b00a      	add	sp, #40	; 0x28
 8006316:	bd80      	pop	{r7, pc}
 8006318:	ffffefff 	.word	0xffffefff

0800631c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	1dfb      	adds	r3, r7, #7
 800632a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800632c:	f7fd fb34 	bl	8003998 <HAL_GetTick>
 8006330:	0002      	movs	r2, r0
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	18d3      	adds	r3, r2, r3
 800633a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800633c:	f7fd fb2c 	bl	8003998 <HAL_GetTick>
 8006340:	0003      	movs	r3, r0
 8006342:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006344:	4b3a      	ldr	r3, [pc, #232]	; (8006430 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	015b      	lsls	r3, r3, #5
 800634a:	0d1b      	lsrs	r3, r3, #20
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	4353      	muls	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006352:	e058      	b.n	8006406 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	3301      	adds	r3, #1
 8006358:	d055      	beq.n	8006406 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800635a:	f7fd fb1d 	bl	8003998 <HAL_GetTick>
 800635e:	0002      	movs	r2, r0
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	429a      	cmp	r2, r3
 8006368:	d902      	bls.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x54>
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d142      	bne.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	21e0      	movs	r1, #224	; 0xe0
 800637c:	438a      	bics	r2, r1
 800637e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	2382      	movs	r3, #130	; 0x82
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	429a      	cmp	r2, r3
 800638a:	d113      	bne.n	80063b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	429a      	cmp	r2, r3
 8006396:	d005      	beq.n	80063a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d107      	bne.n	80063b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2140      	movs	r1, #64	; 0x40
 80063b0:	438a      	bics	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b8:	2380      	movs	r3, #128	; 0x80
 80063ba:	019b      	lsls	r3, r3, #6
 80063bc:	429a      	cmp	r2, r3
 80063be:	d110      	bne.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	491a      	ldr	r1, [pc, #104]	; (8006434 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80063cc:	400a      	ands	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	0189      	lsls	r1, r1, #6
 80063de:	430a      	orrs	r2, r1
 80063e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	225d      	movs	r2, #93	; 0x5d
 80063e6:	2101      	movs	r1, #1
 80063e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	225c      	movs	r2, #92	; 0x5c
 80063ee:	2100      	movs	r1, #0
 80063f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e017      	b.n	8006426 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	3b01      	subs	r3, #1
 8006404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	4013      	ands	r3, r2
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	425a      	negs	r2, r3
 8006416:	4153      	adcs	r3, r2
 8006418:	b2db      	uxtb	r3, r3
 800641a:	001a      	movs	r2, r3
 800641c:	1dfb      	adds	r3, r7, #7
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d197      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	0018      	movs	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	b008      	add	sp, #32
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	20000024 	.word	0x20000024
 8006434:	ffffdfff 	.word	0xffffdfff

08006438 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006446:	2317      	movs	r3, #23
 8006448:	18fb      	adds	r3, r7, r3
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800644e:	f7fd faa3 	bl	8003998 <HAL_GetTick>
 8006452:	0002      	movs	r2, r0
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	1a9b      	subs	r3, r3, r2
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	18d3      	adds	r3, r2, r3
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800645e:	f7fd fa9b 	bl	8003998 <HAL_GetTick>
 8006462:	0003      	movs	r3, r0
 8006464:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800646e:	4b41      	ldr	r3, [pc, #260]	; (8006574 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	0013      	movs	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	189b      	adds	r3, r3, r2
 8006478:	00da      	lsls	r2, r3, #3
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	0d1b      	lsrs	r3, r3, #20
 800647e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006480:	4353      	muls	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006484:	e068      	b.n	8006558 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	23c0      	movs	r3, #192	; 0xc0
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	429a      	cmp	r2, r3
 800648e:	d10a      	bne.n	80064a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d107      	bne.n	80064a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	b2da      	uxtb	r2, r3
 800649c:	2117      	movs	r1, #23
 800649e:	187b      	adds	r3, r7, r1
 80064a0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064a2:	187b      	adds	r3, r7, r1
 80064a4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	d055      	beq.n	8006558 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064ac:	f7fd fa74 	bl	8003998 <HAL_GetTick>
 80064b0:	0002      	movs	r2, r0
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d902      	bls.n	80064c2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d142      	bne.n	8006548 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	21e0      	movs	r1, #224	; 0xe0
 80064ce:	438a      	bics	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	2382      	movs	r3, #130	; 0x82
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	429a      	cmp	r2, r3
 80064dc:	d113      	bne.n	8006506 <SPI_WaitFifoStateUntilTimeout+0xce>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	2380      	movs	r3, #128	; 0x80
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d005      	beq.n	80064f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	2380      	movs	r3, #128	; 0x80
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d107      	bne.n	8006506 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2140      	movs	r1, #64	; 0x40
 8006502:	438a      	bics	r2, r1
 8006504:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	019b      	lsls	r3, r3, #6
 800650e:	429a      	cmp	r2, r3
 8006510:	d110      	bne.n	8006534 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4916      	ldr	r1, [pc, #88]	; (8006578 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800651e:	400a      	ands	r2, r1
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2180      	movs	r1, #128	; 0x80
 800652e:	0189      	lsls	r1, r1, #6
 8006530:	430a      	orrs	r2, r1
 8006532:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	225d      	movs	r2, #93	; 0x5d
 8006538:	2101      	movs	r1, #1
 800653a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	225c      	movs	r2, #92	; 0x5c
 8006540:	2100      	movs	r1, #0
 8006542:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e010      	b.n	800656a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	3b01      	subs	r3, #1
 8006556:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	429a      	cmp	r2, r3
 8006566:	d18e      	bne.n	8006486 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	0018      	movs	r0, r3
 800656c:	46bd      	mov	sp, r7
 800656e:	b00a      	add	sp, #40	; 0x28
 8006570:	bd80      	pop	{r7, pc}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	20000024 	.word	0x20000024
 8006578:	ffffdfff 	.word	0xffffdfff

0800657c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af02      	add	r7, sp, #8
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	2382      	movs	r3, #130	; 0x82
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	429a      	cmp	r2, r3
 8006592:	d113      	bne.n	80065bc <SPI_EndRxTransaction+0x40>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	429a      	cmp	r2, r3
 800659e:	d005      	beq.n	80065ac <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d107      	bne.n	80065bc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2140      	movs	r1, #64	; 0x40
 80065b8:	438a      	bics	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	0013      	movs	r3, r2
 80065c6:	2200      	movs	r2, #0
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	f7ff fea7 	bl	800631c <SPI_WaitFlagStateUntilTimeout>
 80065ce:	1e03      	subs	r3, r0, #0
 80065d0:	d007      	beq.n	80065e2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d6:	2220      	movs	r2, #32
 80065d8:	431a      	orrs	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e026      	b.n	8006630 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	2382      	movs	r3, #130	; 0x82
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d11f      	bne.n	800662e <SPI_EndRxTransaction+0xb2>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d005      	beq.n	8006606 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	429a      	cmp	r2, r3
 8006604:	d113      	bne.n	800662e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	23c0      	movs	r3, #192	; 0xc0
 800660a:	00d9      	lsls	r1, r3, #3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	0013      	movs	r3, r2
 8006614:	2200      	movs	r2, #0
 8006616:	f7ff ff0f 	bl	8006438 <SPI_WaitFifoStateUntilTimeout>
 800661a:	1e03      	subs	r3, r0, #0
 800661c:	d007      	beq.n	800662e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006622:	2220      	movs	r2, #32
 8006624:	431a      	orrs	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e000      	b.n	8006630 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b004      	add	sp, #16
 8006636:	bd80      	pop	{r7, pc}

08006638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	23c0      	movs	r3, #192	; 0xc0
 8006648:	0159      	lsls	r1, r3, #5
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	0013      	movs	r3, r2
 8006652:	2200      	movs	r2, #0
 8006654:	f7ff fef0 	bl	8006438 <SPI_WaitFifoStateUntilTimeout>
 8006658:	1e03      	subs	r3, r0, #0
 800665a:	d007      	beq.n	800666c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006660:	2220      	movs	r2, #32
 8006662:	431a      	orrs	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e027      	b.n	80066bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	0013      	movs	r3, r2
 8006676:	2200      	movs	r2, #0
 8006678:	2180      	movs	r1, #128	; 0x80
 800667a:	f7ff fe4f 	bl	800631c <SPI_WaitFlagStateUntilTimeout>
 800667e:	1e03      	subs	r3, r0, #0
 8006680:	d007      	beq.n	8006692 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006686:	2220      	movs	r2, #32
 8006688:	431a      	orrs	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e014      	b.n	80066bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	23c0      	movs	r3, #192	; 0xc0
 8006696:	00d9      	lsls	r1, r3, #3
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	0013      	movs	r3, r2
 80066a0:	2200      	movs	r2, #0
 80066a2:	f7ff fec9 	bl	8006438 <SPI_WaitFifoStateUntilTimeout>
 80066a6:	1e03      	subs	r3, r0, #0
 80066a8:	d007      	beq.n	80066ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ae:	2220      	movs	r2, #32
 80066b0:	431a      	orrs	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e000      	b.n	80066bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	0018      	movs	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	b004      	add	sp, #16
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e04a      	b.n	800676c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	223d      	movs	r2, #61	; 0x3d
 80066da:	5c9b      	ldrb	r3, [r3, r2]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d107      	bne.n	80066f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	223c      	movs	r2, #60	; 0x3c
 80066e6:	2100      	movs	r1, #0
 80066e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	0018      	movs	r0, r3
 80066ee:	f7fc fe57 	bl	80033a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	223d      	movs	r2, #61	; 0x3d
 80066f6:	2102      	movs	r1, #2
 80066f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	0019      	movs	r1, r3
 8006704:	0010      	movs	r0, r2
 8006706:	f000 fa11 	bl	8006b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2248      	movs	r2, #72	; 0x48
 800670e:	2101      	movs	r1, #1
 8006710:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	223e      	movs	r2, #62	; 0x3e
 8006716:	2101      	movs	r1, #1
 8006718:	5499      	strb	r1, [r3, r2]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	223f      	movs	r2, #63	; 0x3f
 800671e:	2101      	movs	r1, #1
 8006720:	5499      	strb	r1, [r3, r2]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2240      	movs	r2, #64	; 0x40
 8006726:	2101      	movs	r1, #1
 8006728:	5499      	strb	r1, [r3, r2]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2241      	movs	r2, #65	; 0x41
 800672e:	2101      	movs	r1, #1
 8006730:	5499      	strb	r1, [r3, r2]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2242      	movs	r2, #66	; 0x42
 8006736:	2101      	movs	r1, #1
 8006738:	5499      	strb	r1, [r3, r2]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2243      	movs	r2, #67	; 0x43
 800673e:	2101      	movs	r1, #1
 8006740:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2244      	movs	r2, #68	; 0x44
 8006746:	2101      	movs	r1, #1
 8006748:	5499      	strb	r1, [r3, r2]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2245      	movs	r2, #69	; 0x45
 800674e:	2101      	movs	r1, #1
 8006750:	5499      	strb	r1, [r3, r2]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2246      	movs	r2, #70	; 0x46
 8006756:	2101      	movs	r1, #1
 8006758:	5499      	strb	r1, [r3, r2]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2247      	movs	r2, #71	; 0x47
 800675e:	2101      	movs	r1, #1
 8006760:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	223d      	movs	r2, #61	; 0x3d
 8006766:	2101      	movs	r1, #1
 8006768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	0018      	movs	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	b002      	add	sp, #8
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	223d      	movs	r2, #61	; 0x3d
 8006780:	5c9b      	ldrb	r3, [r3, r2]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b01      	cmp	r3, #1
 8006786:	d001      	beq.n	800678c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e042      	b.n	8006812 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	223d      	movs	r2, #61	; 0x3d
 8006790:	2102      	movs	r1, #2
 8006792:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2101      	movs	r1, #1
 80067a0:	430a      	orrs	r2, r1
 80067a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1c      	ldr	r2, [pc, #112]	; (800681c <HAL_TIM_Base_Start_IT+0xa8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00f      	beq.n	80067ce <HAL_TIM_Base_Start_IT+0x5a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	2380      	movs	r3, #128	; 0x80
 80067b4:	05db      	lsls	r3, r3, #23
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d009      	beq.n	80067ce <HAL_TIM_Base_Start_IT+0x5a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a18      	ldr	r2, [pc, #96]	; (8006820 <HAL_TIM_Base_Start_IT+0xac>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_TIM_Base_Start_IT+0x5a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a16      	ldr	r2, [pc, #88]	; (8006824 <HAL_TIM_Base_Start_IT+0xb0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d116      	bne.n	80067fc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	4a14      	ldr	r2, [pc, #80]	; (8006828 <HAL_TIM_Base_Start_IT+0xb4>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b06      	cmp	r3, #6
 80067de:	d016      	beq.n	800680e <HAL_TIM_Base_Start_IT+0x9a>
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	025b      	lsls	r3, r3, #9
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d011      	beq.n	800680e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2101      	movs	r1, #1
 80067f6:	430a      	orrs	r2, r1
 80067f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fa:	e008      	b.n	800680e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2101      	movs	r1, #1
 8006808:	430a      	orrs	r2, r1
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e000      	b.n	8006810 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	0018      	movs	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	b004      	add	sp, #16
 8006818:	bd80      	pop	{r7, pc}
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40000400 	.word	0x40000400
 8006824:	40014000 	.word	0x40014000
 8006828:	00010007 	.word	0x00010007

0800682c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2101      	movs	r1, #1
 8006840:	438a      	bics	r2, r1
 8006842:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	4a0d      	ldr	r2, [pc, #52]	; (8006880 <HAL_TIM_Base_Stop_IT+0x54>)
 800684c:	4013      	ands	r3, r2
 800684e:	d10d      	bne.n	800686c <HAL_TIM_Base_Stop_IT+0x40>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	4a0b      	ldr	r2, [pc, #44]	; (8006884 <HAL_TIM_Base_Stop_IT+0x58>)
 8006858:	4013      	ands	r3, r2
 800685a:	d107      	bne.n	800686c <HAL_TIM_Base_Stop_IT+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2101      	movs	r1, #1
 8006868:	438a      	bics	r2, r1
 800686a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	223d      	movs	r2, #61	; 0x3d
 8006870:	2101      	movs	r1, #1
 8006872:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	0018      	movs	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	b002      	add	sp, #8
 800687c:	bd80      	pop	{r7, pc}
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	00001111 	.word	0x00001111
 8006884:	00000444 	.word	0x00000444

08006888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2202      	movs	r2, #2
 8006898:	4013      	ands	r3, r2
 800689a:	2b02      	cmp	r3, #2
 800689c:	d124      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	2202      	movs	r2, #2
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d11d      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2203      	movs	r2, #3
 80068b2:	4252      	negs	r2, r2
 80068b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2203      	movs	r2, #3
 80068c4:	4013      	ands	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 f916 	bl	8006afc <HAL_TIM_IC_CaptureCallback>
 80068d0:	e007      	b.n	80068e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	0018      	movs	r0, r3
 80068d6:	f000 f909 	bl	8006aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 f915 	bl	8006b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2204      	movs	r2, #4
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d125      	bne.n	8006942 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	2204      	movs	r2, #4
 80068fe:	4013      	ands	r3, r2
 8006900:	2b04      	cmp	r3, #4
 8006902:	d11e      	bne.n	8006942 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2205      	movs	r2, #5
 800690a:	4252      	negs	r2, r2
 800690c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	23c0      	movs	r3, #192	; 0xc0
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4013      	ands	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0018      	movs	r0, r3
 8006926:	f000 f8e9 	bl	8006afc <HAL_TIM_IC_CaptureCallback>
 800692a:	e007      	b.n	800693c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0018      	movs	r0, r3
 8006930:	f000 f8dc 	bl	8006aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	0018      	movs	r0, r3
 8006938:	f000 f8e8 	bl	8006b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	2208      	movs	r2, #8
 800694a:	4013      	ands	r3, r2
 800694c:	2b08      	cmp	r3, #8
 800694e:	d124      	bne.n	800699a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	2208      	movs	r2, #8
 8006958:	4013      	ands	r3, r2
 800695a:	2b08      	cmp	r3, #8
 800695c:	d11d      	bne.n	800699a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2209      	movs	r2, #9
 8006964:	4252      	negs	r2, r2
 8006966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2204      	movs	r2, #4
 800696c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	2203      	movs	r2, #3
 8006976:	4013      	ands	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	0018      	movs	r0, r3
 800697e:	f000 f8bd 	bl	8006afc <HAL_TIM_IC_CaptureCallback>
 8006982:	e007      	b.n	8006994 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	0018      	movs	r0, r3
 8006988:	f000 f8b0 	bl	8006aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	0018      	movs	r0, r3
 8006990:	f000 f8bc 	bl	8006b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2210      	movs	r2, #16
 80069a2:	4013      	ands	r3, r2
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d125      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2210      	movs	r2, #16
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d11e      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2211      	movs	r2, #17
 80069bc:	4252      	negs	r2, r2
 80069be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2208      	movs	r2, #8
 80069c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	23c0      	movs	r3, #192	; 0xc0
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4013      	ands	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	0018      	movs	r0, r3
 80069d8:	f000 f890 	bl	8006afc <HAL_TIM_IC_CaptureCallback>
 80069dc:	e007      	b.n	80069ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 f883 	bl	8006aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0018      	movs	r0, r3
 80069ea:	f000 f88f 	bl	8006b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2201      	movs	r2, #1
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d10f      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d108      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2202      	movs	r2, #2
 8006a16:	4252      	negs	r2, r2
 8006a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7fc fbcb 	bl	80031b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2280      	movs	r2, #128	; 0x80
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b80      	cmp	r3, #128	; 0x80
 8006a2e:	d10f      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2280      	movs	r2, #128	; 0x80
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b80      	cmp	r3, #128	; 0x80
 8006a3c:	d108      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2281      	movs	r2, #129	; 0x81
 8006a44:	4252      	negs	r2, r2
 8006a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 f964 	bl	8006d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	2380      	movs	r3, #128	; 0x80
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	2380      	movs	r3, #128	; 0x80
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d10e      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b80      	cmp	r3, #128	; 0x80
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1c      	ldr	r2, [pc, #112]	; (8006ae8 <HAL_TIM_IRQHandler+0x260>)
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f000 f953 	bl	8006d28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2240      	movs	r2, #64	; 0x40
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	2b40      	cmp	r3, #64	; 0x40
 8006a8e:	d10f      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2240      	movs	r2, #64	; 0x40
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d108      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2241      	movs	r2, #65	; 0x41
 8006aa4:	4252      	negs	r2, r2
 8006aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 f836 	bl	8006b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	4013      	ands	r3, r2
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d10f      	bne.n	8006ade <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d108      	bne.n	8006ade <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2221      	movs	r2, #33	; 0x21
 8006ad2:	4252      	negs	r2, r2
 8006ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f000 f915 	bl	8006d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b002      	add	sp, #8
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	fffffeff 	.word	0xfffffeff

08006aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006af4:	46c0      	nop			; (mov r8, r8)
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b002      	add	sp, #8
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b04:	46c0      	nop			; (mov r8, r8)
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b002      	add	sp, #8
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b002      	add	sp, #8
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b24:	46c0      	nop			; (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a34      	ldr	r2, [pc, #208]	; (8006c10 <TIM_Base_SetConfig+0xe4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d008      	beq.n	8006b56 <TIM_Base_SetConfig+0x2a>
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	2380      	movs	r3, #128	; 0x80
 8006b48:	05db      	lsls	r3, r3, #23
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d003      	beq.n	8006b56 <TIM_Base_SetConfig+0x2a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a30      	ldr	r2, [pc, #192]	; (8006c14 <TIM_Base_SetConfig+0xe8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d108      	bne.n	8006b68 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2270      	movs	r2, #112	; 0x70
 8006b5a:	4393      	bics	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a29      	ldr	r2, [pc, #164]	; (8006c10 <TIM_Base_SetConfig+0xe4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d018      	beq.n	8006ba2 <TIM_Base_SetConfig+0x76>
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	2380      	movs	r3, #128	; 0x80
 8006b74:	05db      	lsls	r3, r3, #23
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d013      	beq.n	8006ba2 <TIM_Base_SetConfig+0x76>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a25      	ldr	r2, [pc, #148]	; (8006c14 <TIM_Base_SetConfig+0xe8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00f      	beq.n	8006ba2 <TIM_Base_SetConfig+0x76>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a24      	ldr	r2, [pc, #144]	; (8006c18 <TIM_Base_SetConfig+0xec>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <TIM_Base_SetConfig+0x76>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a23      	ldr	r2, [pc, #140]	; (8006c1c <TIM_Base_SetConfig+0xf0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <TIM_Base_SetConfig+0x76>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a22      	ldr	r2, [pc, #136]	; (8006c20 <TIM_Base_SetConfig+0xf4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_Base_SetConfig+0x76>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a21      	ldr	r2, [pc, #132]	; (8006c24 <TIM_Base_SetConfig+0xf8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d108      	bne.n	8006bb4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4a20      	ldr	r2, [pc, #128]	; (8006c28 <TIM_Base_SetConfig+0xfc>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2280      	movs	r2, #128	; 0x80
 8006bb8:	4393      	bics	r3, r2
 8006bba:	001a      	movs	r2, r3
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a0c      	ldr	r2, [pc, #48]	; (8006c10 <TIM_Base_SetConfig+0xe4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d00b      	beq.n	8006bfa <TIM_Base_SetConfig+0xce>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <TIM_Base_SetConfig+0xf0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d007      	beq.n	8006bfa <TIM_Base_SetConfig+0xce>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a0c      	ldr	r2, [pc, #48]	; (8006c20 <TIM_Base_SetConfig+0xf4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d003      	beq.n	8006bfa <TIM_Base_SetConfig+0xce>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a0b      	ldr	r2, [pc, #44]	; (8006c24 <TIM_Base_SetConfig+0xf8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d103      	bne.n	8006c02 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	691a      	ldr	r2, [r3, #16]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	615a      	str	r2, [r3, #20]
}
 8006c08:	46c0      	nop			; (mov r8, r8)
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b004      	add	sp, #16
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40002000 	.word	0x40002000
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40014400 	.word	0x40014400
 8006c24:	40014800 	.word	0x40014800
 8006c28:	fffffcff 	.word	0xfffffcff

08006c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	223c      	movs	r2, #60	; 0x3c
 8006c3a:	5c9b      	ldrb	r3, [r3, r2]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e055      	b.n	8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	223c      	movs	r2, #60	; 0x3c
 8006c48:	2101      	movs	r1, #1
 8006c4a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	223d      	movs	r2, #61	; 0x3d
 8006c50:	2102      	movs	r1, #2
 8006c52:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a23      	ldr	r2, [pc, #140]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d108      	bne.n	8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a22      	ldr	r2, [pc, #136]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2270      	movs	r2, #112	; 0x70
 8006c84:	4393      	bics	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00f      	beq.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	2380      	movs	r3, #128	; 0x80
 8006caa:	05db      	lsls	r3, r3, #23
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d009      	beq.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a12      	ldr	r2, [pc, #72]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d004      	beq.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d10c      	bne.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2280      	movs	r2, #128	; 0x80
 8006cc8:	4393      	bics	r3, r2
 8006cca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	223d      	movs	r2, #61	; 0x3d
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	223c      	movs	r2, #60	; 0x3c
 8006cea:	2100      	movs	r1, #0
 8006cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b004      	add	sp, #16
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	ff0fffff 	.word	0xff0fffff
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40014000 	.word	0x40014000

08006d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d10:	46c0      	nop			; (mov r8, r8)
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b002      	add	sp, #8
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d20:	46c0      	nop			; (mov r8, r8)
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b002      	add	sp, #8
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d30:	46c0      	nop			; (mov r8, r8)
 8006d32:	46bd      	mov	sp, r7
 8006d34:	b002      	add	sp, #8
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e046      	b.n	8006dd8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2288      	movs	r2, #136	; 0x88
 8006d4e:	589b      	ldr	r3, [r3, r2]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d107      	bne.n	8006d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2284      	movs	r2, #132	; 0x84
 8006d58:	2100      	movs	r1, #0
 8006d5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7fc fb44 	bl	80033ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2288      	movs	r2, #136	; 0x88
 8006d68:	2124      	movs	r1, #36	; 0x24
 8006d6a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2101      	movs	r1, #1
 8006d78:	438a      	bics	r2, r1
 8006d7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f000 f9ee 	bl	8007160 <UART_SetConfig>
 8006d84:	0003      	movs	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e024      	b.n	8006dd8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 fc9f 	bl	80076dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	490d      	ldr	r1, [pc, #52]	; (8006de0 <HAL_UART_Init+0xa8>)
 8006daa:	400a      	ands	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	212a      	movs	r1, #42	; 0x2a
 8006dba:	438a      	bics	r2, r1
 8006dbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2101      	movs	r1, #1
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f000 fd37 	bl	8007844 <UART_CheckIdleState>
 8006dd6:	0003      	movs	r3, r0
}
 8006dd8:	0018      	movs	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b002      	add	sp, #8
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	ffffb7ff 	.word	0xffffb7ff

08006de4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e032      	b.n	8006e5c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2288      	movs	r2, #136	; 0x88
 8006dfa:	2124      	movs	r1, #36	; 0x24
 8006dfc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2101      	movs	r1, #1
 8006e0a:	438a      	bics	r2, r1
 8006e0c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2200      	movs	r2, #0
 8006e24:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f7fc fbc3 	bl	80035b4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2290      	movs	r2, #144	; 0x90
 8006e32:	2100      	movs	r1, #0
 8006e34:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2288      	movs	r2, #136	; 0x88
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	228c      	movs	r2, #140	; 0x8c
 8006e42:	2100      	movs	r1, #0
 8006e44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2284      	movs	r2, #132	; 0x84
 8006e56:	2100      	movs	r1, #0
 8006e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	b002      	add	sp, #8
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	; 0x28
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	1dbb      	adds	r3, r7, #6
 8006e72:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2288      	movs	r2, #136	; 0x88
 8006e78:	589b      	ldr	r3, [r3, r2]
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	d000      	beq.n	8006e80 <HAL_UART_Transmit+0x1c>
 8006e7e:	e088      	b.n	8006f92 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_UART_Transmit+0x2a>
 8006e86:	1dbb      	adds	r3, r7, #6
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e080      	b.n	8006f94 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	2380      	movs	r3, #128	; 0x80
 8006e98:	015b      	lsls	r3, r3, #5
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d109      	bne.n	8006eb2 <HAL_UART_Transmit+0x4e>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d105      	bne.n	8006eb2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	4013      	ands	r3, r2
 8006eac:	d001      	beq.n	8006eb2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e070      	b.n	8006f94 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2290      	movs	r2, #144	; 0x90
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2288      	movs	r2, #136	; 0x88
 8006ebe:	2121      	movs	r1, #33	; 0x21
 8006ec0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ec2:	f7fc fd69 	bl	8003998 <HAL_GetTick>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1dba      	adds	r2, r7, #6
 8006ece:	2154      	movs	r1, #84	; 0x54
 8006ed0:	8812      	ldrh	r2, [r2, #0]
 8006ed2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	1dba      	adds	r2, r7, #6
 8006ed8:	2156      	movs	r1, #86	; 0x56
 8006eda:	8812      	ldrh	r2, [r2, #0]
 8006edc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	2380      	movs	r3, #128	; 0x80
 8006ee4:	015b      	lsls	r3, r3, #5
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d108      	bne.n	8006efc <HAL_UART_Transmit+0x98>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	e003      	b.n	8006f04 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f04:	e02c      	b.n	8006f60 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	0013      	movs	r3, r2
 8006f10:	2200      	movs	r2, #0
 8006f12:	2180      	movs	r1, #128	; 0x80
 8006f14:	f000 fce4 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8006f18:	1e03      	subs	r3, r0, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e039      	b.n	8006f94 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10b      	bne.n	8006f3e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	001a      	movs	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	05d2      	lsls	r2, r2, #23
 8006f32:	0dd2      	lsrs	r2, r2, #23
 8006f34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	3302      	adds	r3, #2
 8006f3a:	61bb      	str	r3, [r7, #24]
 8006f3c:	e007      	b.n	8006f4e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	781a      	ldrb	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2256      	movs	r2, #86	; 0x56
 8006f52:	5a9b      	ldrh	r3, [r3, r2]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b299      	uxth	r1, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2256      	movs	r2, #86	; 0x56
 8006f5e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2256      	movs	r2, #86	; 0x56
 8006f64:	5a9b      	ldrh	r3, [r3, r2]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1cc      	bne.n	8006f06 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	0013      	movs	r3, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	2140      	movs	r1, #64	; 0x40
 8006f7a:	f000 fcb1 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8006f7e:	1e03      	subs	r3, r0, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e006      	b.n	8006f94 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2288      	movs	r2, #136	; 0x88
 8006f8a:	2120      	movs	r1, #32
 8006f8c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e000      	b.n	8006f94 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006f92:	2302      	movs	r3, #2
  }
}
 8006f94:	0018      	movs	r0, r3
 8006f96:	46bd      	mov	sp, r7
 8006f98:	b008      	add	sp, #32
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	1dbb      	adds	r3, r7, #6
 8006faa:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	228c      	movs	r2, #140	; 0x8c
 8006fb0:	589b      	ldr	r3, [r3, r2]
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d000      	beq.n	8006fb8 <HAL_UART_Receive+0x1c>
 8006fb6:	e0cc      	b.n	8007152 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_UART_Receive+0x2a>
 8006fbe:	1dbb      	adds	r3, r7, #6
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e0c4      	b.n	8007154 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	015b      	lsls	r3, r3, #5
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d109      	bne.n	8006fea <HAL_UART_Receive+0x4e>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d105      	bne.n	8006fea <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d001      	beq.n	8006fea <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e0b4      	b.n	8007154 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2290      	movs	r2, #144	; 0x90
 8006fee:	2100      	movs	r1, #0
 8006ff0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	228c      	movs	r2, #140	; 0x8c
 8006ff6:	2122      	movs	r1, #34	; 0x22
 8006ff8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007000:	f7fc fcca 	bl	8003998 <HAL_GetTick>
 8007004:	0003      	movs	r3, r0
 8007006:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	1dba      	adds	r2, r7, #6
 800700c:	215c      	movs	r1, #92	; 0x5c
 800700e:	8812      	ldrh	r2, [r2, #0]
 8007010:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1dba      	adds	r2, r7, #6
 8007016:	215e      	movs	r1, #94	; 0x5e
 8007018:	8812      	ldrh	r2, [r2, #0]
 800701a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	2380      	movs	r3, #128	; 0x80
 8007022:	015b      	lsls	r3, r3, #5
 8007024:	429a      	cmp	r2, r3
 8007026:	d10d      	bne.n	8007044 <HAL_UART_Receive+0xa8>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <HAL_UART_Receive+0x9e>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2260      	movs	r2, #96	; 0x60
 8007034:	4949      	ldr	r1, [pc, #292]	; (800715c <HAL_UART_Receive+0x1c0>)
 8007036:	5299      	strh	r1, [r3, r2]
 8007038:	e02e      	b.n	8007098 <HAL_UART_Receive+0xfc>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2260      	movs	r2, #96	; 0x60
 800703e:	21ff      	movs	r1, #255	; 0xff
 8007040:	5299      	strh	r1, [r3, r2]
 8007042:	e029      	b.n	8007098 <HAL_UART_Receive+0xfc>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10d      	bne.n	8007068 <HAL_UART_Receive+0xcc>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <HAL_UART_Receive+0xc2>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2260      	movs	r2, #96	; 0x60
 8007058:	21ff      	movs	r1, #255	; 0xff
 800705a:	5299      	strh	r1, [r3, r2]
 800705c:	e01c      	b.n	8007098 <HAL_UART_Receive+0xfc>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2260      	movs	r2, #96	; 0x60
 8007062:	217f      	movs	r1, #127	; 0x7f
 8007064:	5299      	strh	r1, [r3, r2]
 8007066:	e017      	b.n	8007098 <HAL_UART_Receive+0xfc>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	055b      	lsls	r3, r3, #21
 8007070:	429a      	cmp	r2, r3
 8007072:	d10d      	bne.n	8007090 <HAL_UART_Receive+0xf4>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <HAL_UART_Receive+0xea>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2260      	movs	r2, #96	; 0x60
 8007080:	217f      	movs	r1, #127	; 0x7f
 8007082:	5299      	strh	r1, [r3, r2]
 8007084:	e008      	b.n	8007098 <HAL_UART_Receive+0xfc>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2260      	movs	r2, #96	; 0x60
 800708a:	213f      	movs	r1, #63	; 0x3f
 800708c:	5299      	strh	r1, [r3, r2]
 800708e:	e003      	b.n	8007098 <HAL_UART_Receive+0xfc>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2260      	movs	r2, #96	; 0x60
 8007094:	2100      	movs	r1, #0
 8007096:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007098:	2312      	movs	r3, #18
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	2160      	movs	r1, #96	; 0x60
 80070a0:	5a52      	ldrh	r2, [r2, r1]
 80070a2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	015b      	lsls	r3, r3, #5
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d108      	bne.n	80070c2 <HAL_UART_Receive+0x126>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	e003      	b.n	80070ca <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80070ca:	e036      	b.n	800713a <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	0013      	movs	r3, r2
 80070d6:	2200      	movs	r2, #0
 80070d8:	2120      	movs	r1, #32
 80070da:	f000 fc01 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 80070de:	1e03      	subs	r3, r0, #0
 80070e0:	d001      	beq.n	80070e6 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e036      	b.n	8007154 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10e      	bne.n	800710a <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2212      	movs	r2, #18
 80070f6:	18ba      	adds	r2, r7, r2
 80070f8:	8812      	ldrh	r2, [r2, #0]
 80070fa:	4013      	ands	r3, r2
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	3302      	adds	r3, #2
 8007106:	61bb      	str	r3, [r7, #24]
 8007108:	e00e      	b.n	8007128 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2212      	movs	r2, #18
 8007114:	18ba      	adds	r2, r7, r2
 8007116:	8812      	ldrh	r2, [r2, #0]
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	4013      	ands	r3, r2
 800711c:	b2da      	uxtb	r2, r3
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	3301      	adds	r3, #1
 8007126:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	225e      	movs	r2, #94	; 0x5e
 800712c:	5a9b      	ldrh	r3, [r3, r2]
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b299      	uxth	r1, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	225e      	movs	r2, #94	; 0x5e
 8007138:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	225e      	movs	r2, #94	; 0x5e
 800713e:	5a9b      	ldrh	r3, [r3, r2]
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1c2      	bne.n	80070cc <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	228c      	movs	r2, #140	; 0x8c
 800714a:	2120      	movs	r1, #32
 800714c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	e000      	b.n	8007154 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8007152:	2302      	movs	r3, #2
  }
}
 8007154:	0018      	movs	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	b008      	add	sp, #32
 800715a:	bd80      	pop	{r7, pc}
 800715c:	000001ff 	.word	0x000001ff

08007160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007160:	b5b0      	push	{r4, r5, r7, lr}
 8007162:	b090      	sub	sp, #64	; 0x40
 8007164:	af00      	add	r7, sp, #0
 8007166:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007168:	231a      	movs	r3, #26
 800716a:	2220      	movs	r2, #32
 800716c:	189b      	adds	r3, r3, r2
 800716e:	19db      	adds	r3, r3, r7
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	431a      	orrs	r2, r3
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	431a      	orrs	r2, r3
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	4313      	orrs	r3, r2
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4aaf      	ldr	r2, [pc, #700]	; (8007450 <UART_SetConfig+0x2f0>)
 8007194:	4013      	ands	r3, r2
 8007196:	0019      	movs	r1, r3
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719e:	430b      	orrs	r3, r1
 80071a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4aaa      	ldr	r2, [pc, #680]	; (8007454 <UART_SetConfig+0x2f4>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	0018      	movs	r0, r3
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	68d9      	ldr	r1, [r3, #12]
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	0003      	movs	r3, r0
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4aa4      	ldr	r2, [pc, #656]	; (8007458 <UART_SetConfig+0x2f8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071d2:	4313      	orrs	r3, r2
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	4a9f      	ldr	r2, [pc, #636]	; (800745c <UART_SetConfig+0x2fc>)
 80071de:	4013      	ands	r3, r2
 80071e0:	0019      	movs	r1, r3
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	220f      	movs	r2, #15
 80071f4:	4393      	bics	r3, r2
 80071f6:	0018      	movs	r0, r3
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	0003      	movs	r3, r0
 8007202:	430b      	orrs	r3, r1
 8007204:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a95      	ldr	r2, [pc, #596]	; (8007460 <UART_SetConfig+0x300>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d131      	bne.n	8007274 <UART_SetConfig+0x114>
 8007210:	4b94      	ldr	r3, [pc, #592]	; (8007464 <UART_SetConfig+0x304>)
 8007212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007214:	2203      	movs	r2, #3
 8007216:	4013      	ands	r3, r2
 8007218:	2b03      	cmp	r3, #3
 800721a:	d01d      	beq.n	8007258 <UART_SetConfig+0xf8>
 800721c:	d823      	bhi.n	8007266 <UART_SetConfig+0x106>
 800721e:	2b02      	cmp	r3, #2
 8007220:	d00c      	beq.n	800723c <UART_SetConfig+0xdc>
 8007222:	d820      	bhi.n	8007266 <UART_SetConfig+0x106>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <UART_SetConfig+0xce>
 8007228:	2b01      	cmp	r3, #1
 800722a:	d00e      	beq.n	800724a <UART_SetConfig+0xea>
 800722c:	e01b      	b.n	8007266 <UART_SetConfig+0x106>
 800722e:	231b      	movs	r3, #27
 8007230:	2220      	movs	r2, #32
 8007232:	189b      	adds	r3, r3, r2
 8007234:	19db      	adds	r3, r3, r7
 8007236:	2200      	movs	r2, #0
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	e0b4      	b.n	80073a6 <UART_SetConfig+0x246>
 800723c:	231b      	movs	r3, #27
 800723e:	2220      	movs	r2, #32
 8007240:	189b      	adds	r3, r3, r2
 8007242:	19db      	adds	r3, r3, r7
 8007244:	2202      	movs	r2, #2
 8007246:	701a      	strb	r2, [r3, #0]
 8007248:	e0ad      	b.n	80073a6 <UART_SetConfig+0x246>
 800724a:	231b      	movs	r3, #27
 800724c:	2220      	movs	r2, #32
 800724e:	189b      	adds	r3, r3, r2
 8007250:	19db      	adds	r3, r3, r7
 8007252:	2204      	movs	r2, #4
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	e0a6      	b.n	80073a6 <UART_SetConfig+0x246>
 8007258:	231b      	movs	r3, #27
 800725a:	2220      	movs	r2, #32
 800725c:	189b      	adds	r3, r3, r2
 800725e:	19db      	adds	r3, r3, r7
 8007260:	2208      	movs	r2, #8
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	e09f      	b.n	80073a6 <UART_SetConfig+0x246>
 8007266:	231b      	movs	r3, #27
 8007268:	2220      	movs	r2, #32
 800726a:	189b      	adds	r3, r3, r2
 800726c:	19db      	adds	r3, r3, r7
 800726e:	2210      	movs	r2, #16
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	e098      	b.n	80073a6 <UART_SetConfig+0x246>
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a7b      	ldr	r2, [pc, #492]	; (8007468 <UART_SetConfig+0x308>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d131      	bne.n	80072e2 <UART_SetConfig+0x182>
 800727e:	4b79      	ldr	r3, [pc, #484]	; (8007464 <UART_SetConfig+0x304>)
 8007280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007282:	220c      	movs	r2, #12
 8007284:	4013      	ands	r3, r2
 8007286:	2b0c      	cmp	r3, #12
 8007288:	d01d      	beq.n	80072c6 <UART_SetConfig+0x166>
 800728a:	d823      	bhi.n	80072d4 <UART_SetConfig+0x174>
 800728c:	2b08      	cmp	r3, #8
 800728e:	d00c      	beq.n	80072aa <UART_SetConfig+0x14a>
 8007290:	d820      	bhi.n	80072d4 <UART_SetConfig+0x174>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <UART_SetConfig+0x13c>
 8007296:	2b04      	cmp	r3, #4
 8007298:	d00e      	beq.n	80072b8 <UART_SetConfig+0x158>
 800729a:	e01b      	b.n	80072d4 <UART_SetConfig+0x174>
 800729c:	231b      	movs	r3, #27
 800729e:	2220      	movs	r2, #32
 80072a0:	189b      	adds	r3, r3, r2
 80072a2:	19db      	adds	r3, r3, r7
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	e07d      	b.n	80073a6 <UART_SetConfig+0x246>
 80072aa:	231b      	movs	r3, #27
 80072ac:	2220      	movs	r2, #32
 80072ae:	189b      	adds	r3, r3, r2
 80072b0:	19db      	adds	r3, r3, r7
 80072b2:	2202      	movs	r2, #2
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	e076      	b.n	80073a6 <UART_SetConfig+0x246>
 80072b8:	231b      	movs	r3, #27
 80072ba:	2220      	movs	r2, #32
 80072bc:	189b      	adds	r3, r3, r2
 80072be:	19db      	adds	r3, r3, r7
 80072c0:	2204      	movs	r2, #4
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	e06f      	b.n	80073a6 <UART_SetConfig+0x246>
 80072c6:	231b      	movs	r3, #27
 80072c8:	2220      	movs	r2, #32
 80072ca:	189b      	adds	r3, r3, r2
 80072cc:	19db      	adds	r3, r3, r7
 80072ce:	2208      	movs	r2, #8
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	e068      	b.n	80073a6 <UART_SetConfig+0x246>
 80072d4:	231b      	movs	r3, #27
 80072d6:	2220      	movs	r2, #32
 80072d8:	189b      	adds	r3, r3, r2
 80072da:	19db      	adds	r3, r3, r7
 80072dc:	2210      	movs	r2, #16
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	e061      	b.n	80073a6 <UART_SetConfig+0x246>
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a61      	ldr	r2, [pc, #388]	; (800746c <UART_SetConfig+0x30c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d106      	bne.n	80072fa <UART_SetConfig+0x19a>
 80072ec:	231b      	movs	r3, #27
 80072ee:	2220      	movs	r2, #32
 80072f0:	189b      	adds	r3, r3, r2
 80072f2:	19db      	adds	r3, r3, r7
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	e055      	b.n	80073a6 <UART_SetConfig+0x246>
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a5c      	ldr	r2, [pc, #368]	; (8007470 <UART_SetConfig+0x310>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d106      	bne.n	8007312 <UART_SetConfig+0x1b2>
 8007304:	231b      	movs	r3, #27
 8007306:	2220      	movs	r2, #32
 8007308:	189b      	adds	r3, r3, r2
 800730a:	19db      	adds	r3, r3, r7
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	e049      	b.n	80073a6 <UART_SetConfig+0x246>
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a50      	ldr	r2, [pc, #320]	; (8007458 <UART_SetConfig+0x2f8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d13e      	bne.n	800739a <UART_SetConfig+0x23a>
 800731c:	4b51      	ldr	r3, [pc, #324]	; (8007464 <UART_SetConfig+0x304>)
 800731e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007320:	23c0      	movs	r3, #192	; 0xc0
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	4013      	ands	r3, r2
 8007326:	22c0      	movs	r2, #192	; 0xc0
 8007328:	0112      	lsls	r2, r2, #4
 800732a:	4293      	cmp	r3, r2
 800732c:	d027      	beq.n	800737e <UART_SetConfig+0x21e>
 800732e:	22c0      	movs	r2, #192	; 0xc0
 8007330:	0112      	lsls	r2, r2, #4
 8007332:	4293      	cmp	r3, r2
 8007334:	d82a      	bhi.n	800738c <UART_SetConfig+0x22c>
 8007336:	2280      	movs	r2, #128	; 0x80
 8007338:	0112      	lsls	r2, r2, #4
 800733a:	4293      	cmp	r3, r2
 800733c:	d011      	beq.n	8007362 <UART_SetConfig+0x202>
 800733e:	2280      	movs	r2, #128	; 0x80
 8007340:	0112      	lsls	r2, r2, #4
 8007342:	4293      	cmp	r3, r2
 8007344:	d822      	bhi.n	800738c <UART_SetConfig+0x22c>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <UART_SetConfig+0x1f4>
 800734a:	2280      	movs	r2, #128	; 0x80
 800734c:	00d2      	lsls	r2, r2, #3
 800734e:	4293      	cmp	r3, r2
 8007350:	d00e      	beq.n	8007370 <UART_SetConfig+0x210>
 8007352:	e01b      	b.n	800738c <UART_SetConfig+0x22c>
 8007354:	231b      	movs	r3, #27
 8007356:	2220      	movs	r2, #32
 8007358:	189b      	adds	r3, r3, r2
 800735a:	19db      	adds	r3, r3, r7
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e021      	b.n	80073a6 <UART_SetConfig+0x246>
 8007362:	231b      	movs	r3, #27
 8007364:	2220      	movs	r2, #32
 8007366:	189b      	adds	r3, r3, r2
 8007368:	19db      	adds	r3, r3, r7
 800736a:	2202      	movs	r2, #2
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	e01a      	b.n	80073a6 <UART_SetConfig+0x246>
 8007370:	231b      	movs	r3, #27
 8007372:	2220      	movs	r2, #32
 8007374:	189b      	adds	r3, r3, r2
 8007376:	19db      	adds	r3, r3, r7
 8007378:	2204      	movs	r2, #4
 800737a:	701a      	strb	r2, [r3, #0]
 800737c:	e013      	b.n	80073a6 <UART_SetConfig+0x246>
 800737e:	231b      	movs	r3, #27
 8007380:	2220      	movs	r2, #32
 8007382:	189b      	adds	r3, r3, r2
 8007384:	19db      	adds	r3, r3, r7
 8007386:	2208      	movs	r2, #8
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	e00c      	b.n	80073a6 <UART_SetConfig+0x246>
 800738c:	231b      	movs	r3, #27
 800738e:	2220      	movs	r2, #32
 8007390:	189b      	adds	r3, r3, r2
 8007392:	19db      	adds	r3, r3, r7
 8007394:	2210      	movs	r2, #16
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	e005      	b.n	80073a6 <UART_SetConfig+0x246>
 800739a:	231b      	movs	r3, #27
 800739c:	2220      	movs	r2, #32
 800739e:	189b      	adds	r3, r3, r2
 80073a0:	19db      	adds	r3, r3, r7
 80073a2:	2210      	movs	r2, #16
 80073a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2b      	ldr	r2, [pc, #172]	; (8007458 <UART_SetConfig+0x2f8>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d000      	beq.n	80073b2 <UART_SetConfig+0x252>
 80073b0:	e0a9      	b.n	8007506 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073b2:	231b      	movs	r3, #27
 80073b4:	2220      	movs	r2, #32
 80073b6:	189b      	adds	r3, r3, r2
 80073b8:	19db      	adds	r3, r3, r7
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d015      	beq.n	80073ec <UART_SetConfig+0x28c>
 80073c0:	dc18      	bgt.n	80073f4 <UART_SetConfig+0x294>
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d00d      	beq.n	80073e2 <UART_SetConfig+0x282>
 80073c6:	dc15      	bgt.n	80073f4 <UART_SetConfig+0x294>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <UART_SetConfig+0x272>
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d005      	beq.n	80073dc <UART_SetConfig+0x27c>
 80073d0:	e010      	b.n	80073f4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d2:	f7fd fb9f 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 80073d6:	0003      	movs	r3, r0
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073da:	e014      	b.n	8007406 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073dc:	4b25      	ldr	r3, [pc, #148]	; (8007474 <UART_SetConfig+0x314>)
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e0:	e011      	b.n	8007406 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073e2:	f7fd fb0b 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80073e6:	0003      	movs	r3, r0
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ea:	e00c      	b.n	8007406 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	021b      	lsls	r3, r3, #8
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073f2:	e008      	b.n	8007406 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80073f8:	231a      	movs	r3, #26
 80073fa:	2220      	movs	r2, #32
 80073fc:	189b      	adds	r3, r3, r2
 80073fe:	19db      	adds	r3, r3, r7
 8007400:	2201      	movs	r2, #1
 8007402:	701a      	strb	r2, [r3, #0]
        break;
 8007404:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007408:	2b00      	cmp	r3, #0
 800740a:	d100      	bne.n	800740e <UART_SetConfig+0x2ae>
 800740c:	e14b      	b.n	80076a6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007412:	4b19      	ldr	r3, [pc, #100]	; (8007478 <UART_SetConfig+0x318>)
 8007414:	0052      	lsls	r2, r2, #1
 8007416:	5ad3      	ldrh	r3, [r2, r3]
 8007418:	0019      	movs	r1, r3
 800741a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800741c:	f7f8 fe8e 	bl	800013c <__udivsi3>
 8007420:	0003      	movs	r3, r0
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	0013      	movs	r3, r2
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	189b      	adds	r3, r3, r2
 800742e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007430:	429a      	cmp	r2, r3
 8007432:	d305      	bcc.n	8007440 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800743a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800743c:	429a      	cmp	r2, r3
 800743e:	d91d      	bls.n	800747c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007440:	231a      	movs	r3, #26
 8007442:	2220      	movs	r2, #32
 8007444:	189b      	adds	r3, r3, r2
 8007446:	19db      	adds	r3, r3, r7
 8007448:	2201      	movs	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	e12b      	b.n	80076a6 <UART_SetConfig+0x546>
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	cfff69f3 	.word	0xcfff69f3
 8007454:	ffffcfff 	.word	0xffffcfff
 8007458:	40008000 	.word	0x40008000
 800745c:	11fff4ff 	.word	0x11fff4ff
 8007460:	40013800 	.word	0x40013800
 8007464:	40021000 	.word	0x40021000
 8007468:	40004400 	.word	0x40004400
 800746c:	40004800 	.word	0x40004800
 8007470:	40004c00 	.word	0x40004c00
 8007474:	00f42400 	.word	0x00f42400
 8007478:	080147d8 	.word	0x080147d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007488:	4b92      	ldr	r3, [pc, #584]	; (80076d4 <UART_SetConfig+0x574>)
 800748a:	0052      	lsls	r2, r2, #1
 800748c:	5ad3      	ldrh	r3, [r2, r3]
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	69b8      	ldr	r0, [r7, #24]
 800749a:	69f9      	ldr	r1, [r7, #28]
 800749c:	f7f9 f802 	bl	80004a4 <__aeabi_uldivmod>
 80074a0:	0002      	movs	r2, r0
 80074a2:	000b      	movs	r3, r1
 80074a4:	0e11      	lsrs	r1, r2, #24
 80074a6:	021d      	lsls	r5, r3, #8
 80074a8:	430d      	orrs	r5, r1
 80074aa:	0214      	lsls	r4, r2, #8
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	60bb      	str	r3, [r7, #8]
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	68b8      	ldr	r0, [r7, #8]
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	1900      	adds	r0, r0, r4
 80074be:	4169      	adcs	r1, r5
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	2300      	movs	r3, #0
 80074c8:	607b      	str	r3, [r7, #4]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f7f8 ffe9 	bl	80004a4 <__aeabi_uldivmod>
 80074d2:	0002      	movs	r2, r0
 80074d4:	000b      	movs	r3, r1
 80074d6:	0013      	movs	r3, r2
 80074d8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074dc:	23c0      	movs	r3, #192	; 0xc0
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d309      	bcc.n	80074f8 <UART_SetConfig+0x398>
 80074e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e6:	2380      	movs	r3, #128	; 0x80
 80074e8:	035b      	lsls	r3, r3, #13
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d204      	bcs.n	80074f8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	e0d6      	b.n	80076a6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80074f8:	231a      	movs	r3, #26
 80074fa:	2220      	movs	r2, #32
 80074fc:	189b      	adds	r3, r3, r2
 80074fe:	19db      	adds	r3, r3, r7
 8007500:	2201      	movs	r2, #1
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	e0cf      	b.n	80076a6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	2380      	movs	r3, #128	; 0x80
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	429a      	cmp	r2, r3
 8007510:	d000      	beq.n	8007514 <UART_SetConfig+0x3b4>
 8007512:	e070      	b.n	80075f6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007514:	231b      	movs	r3, #27
 8007516:	2220      	movs	r2, #32
 8007518:	189b      	adds	r3, r3, r2
 800751a:	19db      	adds	r3, r3, r7
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b08      	cmp	r3, #8
 8007520:	d015      	beq.n	800754e <UART_SetConfig+0x3ee>
 8007522:	dc18      	bgt.n	8007556 <UART_SetConfig+0x3f6>
 8007524:	2b04      	cmp	r3, #4
 8007526:	d00d      	beq.n	8007544 <UART_SetConfig+0x3e4>
 8007528:	dc15      	bgt.n	8007556 <UART_SetConfig+0x3f6>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <UART_SetConfig+0x3d4>
 800752e:	2b02      	cmp	r3, #2
 8007530:	d005      	beq.n	800753e <UART_SetConfig+0x3de>
 8007532:	e010      	b.n	8007556 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007534:	f7fd faee 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8007538:	0003      	movs	r3, r0
 800753a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800753c:	e014      	b.n	8007568 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800753e:	4b66      	ldr	r3, [pc, #408]	; (80076d8 <UART_SetConfig+0x578>)
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007542:	e011      	b.n	8007568 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007544:	f7fd fa5a 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8007548:	0003      	movs	r3, r0
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800754c:	e00c      	b.n	8007568 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800754e:	2380      	movs	r3, #128	; 0x80
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007554:	e008      	b.n	8007568 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800755a:	231a      	movs	r3, #26
 800755c:	2220      	movs	r2, #32
 800755e:	189b      	adds	r3, r3, r2
 8007560:	19db      	adds	r3, r3, r7
 8007562:	2201      	movs	r2, #1
 8007564:	701a      	strb	r2, [r3, #0]
        break;
 8007566:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756a:	2b00      	cmp	r3, #0
 800756c:	d100      	bne.n	8007570 <UART_SetConfig+0x410>
 800756e:	e09a      	b.n	80076a6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007574:	4b57      	ldr	r3, [pc, #348]	; (80076d4 <UART_SetConfig+0x574>)
 8007576:	0052      	lsls	r2, r2, #1
 8007578:	5ad3      	ldrh	r3, [r2, r3]
 800757a:	0019      	movs	r1, r3
 800757c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800757e:	f7f8 fddd 	bl	800013c <__udivsi3>
 8007582:	0003      	movs	r3, r0
 8007584:	005a      	lsls	r2, r3, #1
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	18d2      	adds	r2, r2, r3
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	0019      	movs	r1, r3
 8007594:	0010      	movs	r0, r2
 8007596:	f7f8 fdd1 	bl	800013c <__udivsi3>
 800759a:	0003      	movs	r3, r0
 800759c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	2b0f      	cmp	r3, #15
 80075a2:	d921      	bls.n	80075e8 <UART_SetConfig+0x488>
 80075a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	025b      	lsls	r3, r3, #9
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d21c      	bcs.n	80075e8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	200e      	movs	r0, #14
 80075b4:	2420      	movs	r4, #32
 80075b6:	1903      	adds	r3, r0, r4
 80075b8:	19db      	adds	r3, r3, r7
 80075ba:	210f      	movs	r1, #15
 80075bc:	438a      	bics	r2, r1
 80075be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	085b      	lsrs	r3, r3, #1
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2207      	movs	r2, #7
 80075c8:	4013      	ands	r3, r2
 80075ca:	b299      	uxth	r1, r3
 80075cc:	1903      	adds	r3, r0, r4
 80075ce:	19db      	adds	r3, r3, r7
 80075d0:	1902      	adds	r2, r0, r4
 80075d2:	19d2      	adds	r2, r2, r7
 80075d4:	8812      	ldrh	r2, [r2, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	1902      	adds	r2, r0, r4
 80075e0:	19d2      	adds	r2, r2, r7
 80075e2:	8812      	ldrh	r2, [r2, #0]
 80075e4:	60da      	str	r2, [r3, #12]
 80075e6:	e05e      	b.n	80076a6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80075e8:	231a      	movs	r3, #26
 80075ea:	2220      	movs	r2, #32
 80075ec:	189b      	adds	r3, r3, r2
 80075ee:	19db      	adds	r3, r3, r7
 80075f0:	2201      	movs	r2, #1
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	e057      	b.n	80076a6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075f6:	231b      	movs	r3, #27
 80075f8:	2220      	movs	r2, #32
 80075fa:	189b      	adds	r3, r3, r2
 80075fc:	19db      	adds	r3, r3, r7
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b08      	cmp	r3, #8
 8007602:	d015      	beq.n	8007630 <UART_SetConfig+0x4d0>
 8007604:	dc18      	bgt.n	8007638 <UART_SetConfig+0x4d8>
 8007606:	2b04      	cmp	r3, #4
 8007608:	d00d      	beq.n	8007626 <UART_SetConfig+0x4c6>
 800760a:	dc15      	bgt.n	8007638 <UART_SetConfig+0x4d8>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <UART_SetConfig+0x4b6>
 8007610:	2b02      	cmp	r3, #2
 8007612:	d005      	beq.n	8007620 <UART_SetConfig+0x4c0>
 8007614:	e010      	b.n	8007638 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007616:	f7fd fa7d 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 800761a:	0003      	movs	r3, r0
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800761e:	e014      	b.n	800764a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007620:	4b2d      	ldr	r3, [pc, #180]	; (80076d8 <UART_SetConfig+0x578>)
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007624:	e011      	b.n	800764a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007626:	f7fd f9e9 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800762a:	0003      	movs	r3, r0
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800762e:	e00c      	b.n	800764a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007630:	2380      	movs	r3, #128	; 0x80
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007636:	e008      	b.n	800764a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800763c:	231a      	movs	r3, #26
 800763e:	2220      	movs	r2, #32
 8007640:	189b      	adds	r3, r3, r2
 8007642:	19db      	adds	r3, r3, r7
 8007644:	2201      	movs	r2, #1
 8007646:	701a      	strb	r2, [r3, #0]
        break;
 8007648:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02a      	beq.n	80076a6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007654:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <UART_SetConfig+0x574>)
 8007656:	0052      	lsls	r2, r2, #1
 8007658:	5ad3      	ldrh	r3, [r2, r3]
 800765a:	0019      	movs	r1, r3
 800765c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800765e:	f7f8 fd6d 	bl	800013c <__udivsi3>
 8007662:	0003      	movs	r3, r0
 8007664:	001a      	movs	r2, r3
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	085b      	lsrs	r3, r3, #1
 800766c:	18d2      	adds	r2, r2, r3
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	0019      	movs	r1, r3
 8007674:	0010      	movs	r0, r2
 8007676:	f7f8 fd61 	bl	800013c <__udivsi3>
 800767a:	0003      	movs	r3, r0
 800767c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	2b0f      	cmp	r3, #15
 8007682:	d90a      	bls.n	800769a <UART_SetConfig+0x53a>
 8007684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007686:	2380      	movs	r3, #128	; 0x80
 8007688:	025b      	lsls	r3, r3, #9
 800768a:	429a      	cmp	r2, r3
 800768c:	d205      	bcs.n	800769a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	b29a      	uxth	r2, r3
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60da      	str	r2, [r3, #12]
 8007698:	e005      	b.n	80076a6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800769a:	231a      	movs	r3, #26
 800769c:	2220      	movs	r2, #32
 800769e:	189b      	adds	r3, r3, r2
 80076a0:	19db      	adds	r3, r3, r7
 80076a2:	2201      	movs	r2, #1
 80076a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	226a      	movs	r2, #106	; 0x6a
 80076aa:	2101      	movs	r1, #1
 80076ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	2268      	movs	r2, #104	; 0x68
 80076b2:	2101      	movs	r1, #1
 80076b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	2200      	movs	r2, #0
 80076ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	2200      	movs	r2, #0
 80076c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80076c2:	231a      	movs	r3, #26
 80076c4:	2220      	movs	r2, #32
 80076c6:	189b      	adds	r3, r3, r2
 80076c8:	19db      	adds	r3, r3, r7
 80076ca:	781b      	ldrb	r3, [r3, #0]
}
 80076cc:	0018      	movs	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	b010      	add	sp, #64	; 0x40
 80076d2:	bdb0      	pop	{r4, r5, r7, pc}
 80076d4:	080147d8 	.word	0x080147d8
 80076d8:	00f42400 	.word	0x00f42400

080076dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	2201      	movs	r2, #1
 80076ea:	4013      	ands	r3, r2
 80076ec:	d00b      	beq.n	8007706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	4a4a      	ldr	r2, [pc, #296]	; (8007820 <UART_AdvFeatureConfig+0x144>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	0019      	movs	r1, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	2202      	movs	r2, #2
 800770c:	4013      	ands	r3, r2
 800770e:	d00b      	beq.n	8007728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	4a43      	ldr	r2, [pc, #268]	; (8007824 <UART_AdvFeatureConfig+0x148>)
 8007718:	4013      	ands	r3, r2
 800771a:	0019      	movs	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	2204      	movs	r2, #4
 800772e:	4013      	ands	r3, r2
 8007730:	d00b      	beq.n	800774a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4a3b      	ldr	r2, [pc, #236]	; (8007828 <UART_AdvFeatureConfig+0x14c>)
 800773a:	4013      	ands	r3, r2
 800773c:	0019      	movs	r1, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	2208      	movs	r2, #8
 8007750:	4013      	ands	r3, r2
 8007752:	d00b      	beq.n	800776c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	4a34      	ldr	r2, [pc, #208]	; (800782c <UART_AdvFeatureConfig+0x150>)
 800775c:	4013      	ands	r3, r2
 800775e:	0019      	movs	r1, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	2210      	movs	r2, #16
 8007772:	4013      	ands	r3, r2
 8007774:	d00b      	beq.n	800778e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	4a2c      	ldr	r2, [pc, #176]	; (8007830 <UART_AdvFeatureConfig+0x154>)
 800777e:	4013      	ands	r3, r2
 8007780:	0019      	movs	r1, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	2220      	movs	r2, #32
 8007794:	4013      	ands	r3, r2
 8007796:	d00b      	beq.n	80077b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	4a25      	ldr	r2, [pc, #148]	; (8007834 <UART_AdvFeatureConfig+0x158>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	0019      	movs	r1, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	2240      	movs	r2, #64	; 0x40
 80077b6:	4013      	ands	r3, r2
 80077b8:	d01d      	beq.n	80077f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	4a1d      	ldr	r2, [pc, #116]	; (8007838 <UART_AdvFeatureConfig+0x15c>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	0019      	movs	r1, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077d6:	2380      	movs	r3, #128	; 0x80
 80077d8:	035b      	lsls	r3, r3, #13
 80077da:	429a      	cmp	r2, r3
 80077dc:	d10b      	bne.n	80077f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	4a15      	ldr	r2, [pc, #84]	; (800783c <UART_AdvFeatureConfig+0x160>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	0019      	movs	r1, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fa:	2280      	movs	r2, #128	; 0x80
 80077fc:	4013      	ands	r3, r2
 80077fe:	d00b      	beq.n	8007818 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	4a0e      	ldr	r2, [pc, #56]	; (8007840 <UART_AdvFeatureConfig+0x164>)
 8007808:	4013      	ands	r3, r2
 800780a:	0019      	movs	r1, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	605a      	str	r2, [r3, #4]
  }
}
 8007818:	46c0      	nop			; (mov r8, r8)
 800781a:	46bd      	mov	sp, r7
 800781c:	b002      	add	sp, #8
 800781e:	bd80      	pop	{r7, pc}
 8007820:	fffdffff 	.word	0xfffdffff
 8007824:	fffeffff 	.word	0xfffeffff
 8007828:	fffbffff 	.word	0xfffbffff
 800782c:	ffff7fff 	.word	0xffff7fff
 8007830:	ffffefff 	.word	0xffffefff
 8007834:	ffffdfff 	.word	0xffffdfff
 8007838:	ffefffff 	.word	0xffefffff
 800783c:	ff9fffff 	.word	0xff9fffff
 8007840:	fff7ffff 	.word	0xfff7ffff

08007844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af02      	add	r7, sp, #8
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2290      	movs	r2, #144	; 0x90
 8007850:	2100      	movs	r1, #0
 8007852:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007854:	f7fc f8a0 	bl	8003998 <HAL_GetTick>
 8007858:	0003      	movs	r3, r0
 800785a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2208      	movs	r2, #8
 8007864:	4013      	ands	r3, r2
 8007866:	2b08      	cmp	r3, #8
 8007868:	d10c      	bne.n	8007884 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2280      	movs	r2, #128	; 0x80
 800786e:	0391      	lsls	r1, r2, #14
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	4a1a      	ldr	r2, [pc, #104]	; (80078dc <UART_CheckIdleState+0x98>)
 8007874:	9200      	str	r2, [sp, #0]
 8007876:	2200      	movs	r2, #0
 8007878:	f000 f832 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 800787c:	1e03      	subs	r3, r0, #0
 800787e:	d001      	beq.n	8007884 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e026      	b.n	80078d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2204      	movs	r2, #4
 800788c:	4013      	ands	r3, r2
 800788e:	2b04      	cmp	r3, #4
 8007890:	d10c      	bne.n	80078ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2280      	movs	r2, #128	; 0x80
 8007896:	03d1      	lsls	r1, r2, #15
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4a10      	ldr	r2, [pc, #64]	; (80078dc <UART_CheckIdleState+0x98>)
 800789c:	9200      	str	r2, [sp, #0]
 800789e:	2200      	movs	r2, #0
 80078a0:	f000 f81e 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 80078a4:	1e03      	subs	r3, r0, #0
 80078a6:	d001      	beq.n	80078ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e012      	b.n	80078d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2288      	movs	r2, #136	; 0x88
 80078b0:	2120      	movs	r1, #32
 80078b2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	228c      	movs	r2, #140	; 0x8c
 80078b8:	2120      	movs	r1, #32
 80078ba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2284      	movs	r2, #132	; 0x84
 80078cc:	2100      	movs	r1, #0
 80078ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	0018      	movs	r0, r3
 80078d4:	46bd      	mov	sp, r7
 80078d6:	b004      	add	sp, #16
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	46c0      	nop			; (mov r8, r8)
 80078dc:	01ffffff 	.word	0x01ffffff

080078e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b094      	sub	sp, #80	; 0x50
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	1dfb      	adds	r3, r7, #7
 80078ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f0:	e0a7      	b.n	8007a42 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078f4:	3301      	adds	r3, #1
 80078f6:	d100      	bne.n	80078fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80078f8:	e0a3      	b.n	8007a42 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fa:	f7fc f84d 	bl	8003998 <HAL_GetTick>
 80078fe:	0002      	movs	r2, r0
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007906:	429a      	cmp	r2, r3
 8007908:	d302      	bcc.n	8007910 <UART_WaitOnFlagUntilTimeout+0x30>
 800790a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800790c:	2b00      	cmp	r3, #0
 800790e:	d13f      	bne.n	8007990 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007910:	f3ef 8310 	mrs	r3, PRIMASK
 8007914:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007918:	647b      	str	r3, [r7, #68]	; 0x44
 800791a:	2301      	movs	r3, #1
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	f383 8810 	msr	PRIMASK, r3
}
 8007924:	46c0      	nop			; (mov r8, r8)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	494e      	ldr	r1, [pc, #312]	; (8007a6c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007932:	400a      	ands	r2, r1
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007938:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	f383 8810 	msr	PRIMASK, r3
}
 8007940:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007942:	f3ef 8310 	mrs	r3, PRIMASK
 8007946:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794a:	643b      	str	r3, [r7, #64]	; 0x40
 800794c:	2301      	movs	r3, #1
 800794e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	f383 8810 	msr	PRIMASK, r3
}
 8007956:	46c0      	nop			; (mov r8, r8)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2101      	movs	r1, #1
 8007964:	438a      	bics	r2, r1
 8007966:	609a      	str	r2, [r3, #8]
 8007968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796e:	f383 8810 	msr	PRIMASK, r3
}
 8007972:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2288      	movs	r2, #136	; 0x88
 8007978:	2120      	movs	r1, #32
 800797a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	228c      	movs	r2, #140	; 0x8c
 8007980:	2120      	movs	r1, #32
 8007982:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2284      	movs	r2, #132	; 0x84
 8007988:	2100      	movs	r1, #0
 800798a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e069      	b.n	8007a64 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2204      	movs	r2, #4
 8007998:	4013      	ands	r3, r2
 800799a:	d052      	beq.n	8007a42 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69da      	ldr	r2, [r3, #28]
 80079a2:	2380      	movs	r3, #128	; 0x80
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	401a      	ands	r2, r3
 80079a8:	2380      	movs	r3, #128	; 0x80
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d148      	bne.n	8007a42 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2280      	movs	r2, #128	; 0x80
 80079b6:	0112      	lsls	r2, r2, #4
 80079b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ba:	f3ef 8310 	mrs	r3, PRIMASK
 80079be:	613b      	str	r3, [r7, #16]
  return(result);
 80079c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079c4:	2301      	movs	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f383 8810 	msr	PRIMASK, r3
}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4924      	ldr	r1, [pc, #144]	; (8007a6c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80079dc:	400a      	ands	r2, r1
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f383 8810 	msr	PRIMASK, r3
}
 80079ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ec:	f3ef 8310 	mrs	r3, PRIMASK
 80079f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80079f2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80079f6:	2301      	movs	r3, #1
 80079f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	f383 8810 	msr	PRIMASK, r3
}
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	438a      	bics	r2, r1
 8007a10:	609a      	str	r2, [r3, #8]
 8007a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	f383 8810 	msr	PRIMASK, r3
}
 8007a1c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2288      	movs	r2, #136	; 0x88
 8007a22:	2120      	movs	r1, #32
 8007a24:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	228c      	movs	r2, #140	; 0x8c
 8007a2a:	2120      	movs	r1, #32
 8007a2c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2290      	movs	r2, #144	; 0x90
 8007a32:	2120      	movs	r1, #32
 8007a34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2284      	movs	r2, #132	; 0x84
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e010      	b.n	8007a64 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	425a      	negs	r2, r3
 8007a52:	4153      	adcs	r3, r2
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	001a      	movs	r2, r3
 8007a58:	1dfb      	adds	r3, r7, #7
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d100      	bne.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x182>
 8007a60:	e747      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	0018      	movs	r0, r3
 8007a66:	46bd      	mov	sp, r7
 8007a68:	b014      	add	sp, #80	; 0x50
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	fffffe5f 	.word	0xfffffe5f

08007a70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2284      	movs	r2, #132	; 0x84
 8007a7c:	5c9b      	ldrb	r3, [r3, r2]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a82:	2302      	movs	r3, #2
 8007a84:	e027      	b.n	8007ad6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2284      	movs	r2, #132	; 0x84
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2288      	movs	r2, #136	; 0x88
 8007a92:	2124      	movs	r1, #36	; 0x24
 8007a94:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	438a      	bics	r2, r1
 8007aac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4a0b      	ldr	r2, [pc, #44]	; (8007ae0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2288      	movs	r2, #136	; 0x88
 8007ac8:	2120      	movs	r1, #32
 8007aca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2284      	movs	r2, #132	; 0x84
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	b004      	add	sp, #16
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	dfffffff 	.word	0xdfffffff

08007ae4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2284      	movs	r2, #132	; 0x84
 8007af2:	5c9b      	ldrb	r3, [r3, r2]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e02e      	b.n	8007b5a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2284      	movs	r2, #132	; 0x84
 8007b00:	2101      	movs	r1, #1
 8007b02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2288      	movs	r2, #136	; 0x88
 8007b08:	2124      	movs	r1, #36	; 0x24
 8007b0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2101      	movs	r1, #1
 8007b20:	438a      	bics	r2, r1
 8007b22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	08d9      	lsrs	r1, r3, #3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f000 f854 	bl	8007be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2288      	movs	r2, #136	; 0x88
 8007b4c:	2120      	movs	r1, #32
 8007b4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2284      	movs	r2, #132	; 0x84
 8007b54:	2100      	movs	r1, #0
 8007b56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	b004      	add	sp, #16
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2284      	movs	r2, #132	; 0x84
 8007b72:	5c9b      	ldrb	r3, [r3, r2]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e02f      	b.n	8007bdc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2284      	movs	r2, #132	; 0x84
 8007b80:	2101      	movs	r1, #1
 8007b82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2288      	movs	r2, #136	; 0x88
 8007b88:	2124      	movs	r1, #36	; 0x24
 8007b8a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	438a      	bics	r2, r1
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	4a0e      	ldr	r2, [pc, #56]	; (8007be4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	0019      	movs	r1, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f000 f813 	bl	8007be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2288      	movs	r2, #136	; 0x88
 8007bce:	2120      	movs	r1, #32
 8007bd0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2284      	movs	r2, #132	; 0x84
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	0018      	movs	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b004      	add	sp, #16
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	f1ffffff 	.word	0xf1ffffff

08007be8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d108      	bne.n	8007c0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	226a      	movs	r2, #106	; 0x6a
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2268      	movs	r2, #104	; 0x68
 8007c04:	2101      	movs	r1, #1
 8007c06:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c08:	e043      	b.n	8007c92 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c0a:	260f      	movs	r6, #15
 8007c0c:	19bb      	adds	r3, r7, r6
 8007c0e:	2208      	movs	r2, #8
 8007c10:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c12:	200e      	movs	r0, #14
 8007c14:	183b      	adds	r3, r7, r0
 8007c16:	2208      	movs	r2, #8
 8007c18:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	0e5b      	lsrs	r3, r3, #25
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	240d      	movs	r4, #13
 8007c26:	193b      	adds	r3, r7, r4
 8007c28:	2107      	movs	r1, #7
 8007c2a:	400a      	ands	r2, r1
 8007c2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	0f5b      	lsrs	r3, r3, #29
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	250c      	movs	r5, #12
 8007c3a:	197b      	adds	r3, r7, r5
 8007c3c:	2107      	movs	r1, #7
 8007c3e:	400a      	ands	r2, r1
 8007c40:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c42:	183b      	adds	r3, r7, r0
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	197a      	adds	r2, r7, r5
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	4914      	ldr	r1, [pc, #80]	; (8007c9c <UARTEx_SetNbDataToProcess+0xb4>)
 8007c4c:	5c8a      	ldrb	r2, [r1, r2]
 8007c4e:	435a      	muls	r2, r3
 8007c50:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c52:	197b      	adds	r3, r7, r5
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	4a12      	ldr	r2, [pc, #72]	; (8007ca0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007c58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c5a:	0019      	movs	r1, r3
 8007c5c:	f7f8 faf8 	bl	8000250 <__divsi3>
 8007c60:	0003      	movs	r3, r0
 8007c62:	b299      	uxth	r1, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	226a      	movs	r2, #106	; 0x6a
 8007c68:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c6a:	19bb      	adds	r3, r7, r6
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	193a      	adds	r2, r7, r4
 8007c70:	7812      	ldrb	r2, [r2, #0]
 8007c72:	490a      	ldr	r1, [pc, #40]	; (8007c9c <UARTEx_SetNbDataToProcess+0xb4>)
 8007c74:	5c8a      	ldrb	r2, [r1, r2]
 8007c76:	435a      	muls	r2, r3
 8007c78:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c7a:	193b      	adds	r3, r7, r4
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	4a08      	ldr	r2, [pc, #32]	; (8007ca0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007c80:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c82:	0019      	movs	r1, r3
 8007c84:	f7f8 fae4 	bl	8000250 <__divsi3>
 8007c88:	0003      	movs	r3, r0
 8007c8a:	b299      	uxth	r1, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2268      	movs	r2, #104	; 0x68
 8007c90:	5299      	strh	r1, [r3, r2]
}
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	46bd      	mov	sp, r7
 8007c96:	b005      	add	sp, #20
 8007c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9a:	46c0      	nop			; (mov r8, r8)
 8007c9c:	080147f0 	.word	0x080147f0
 8007ca0:	080147f8 	.word	0x080147f8

08007ca4 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007ca4:	b5b0      	push	{r4, r5, r7, lr}
 8007ca6:	b0e4      	sub	sp, #400	; 0x190
 8007ca8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007caa:	24c8      	movs	r4, #200	; 0xc8
 8007cac:	193b      	adds	r3, r7, r4
 8007cae:	0018      	movs	r0, r3
 8007cb0:	23c6      	movs	r3, #198	; 0xc6
 8007cb2:	001a      	movs	r2, r3
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	f004 fb63 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 8007cba:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <astronode_send_cfg_sr+0x64>)
 8007cbc:	25c8      	movs	r5, #200	; 0xc8
 8007cbe:	006d      	lsls	r5, r5, #1
 8007cc0:	195b      	adds	r3, r3, r5
 8007cc2:	19db      	adds	r3, r3, r7
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	23c6      	movs	r3, #198	; 0xc6
 8007cc8:	001a      	movs	r2, r3
 8007cca:	2100      	movs	r1, #0
 8007ccc:	f004 fb58 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007cd0:	193b      	adds	r3, r7, r4
 8007cd2:	2210      	movs	r2, #16
 8007cd4:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007cd6:	003a      	movs	r2, r7
 8007cd8:	193b      	adds	r3, r7, r4
 8007cda:	0011      	movs	r1, r2
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f001 fab1 	bl	8009244 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007ce2:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <astronode_send_cfg_sr+0x64>)
 8007ce4:	195b      	adds	r3, r3, r5
 8007ce6:	19db      	adds	r3, r3, r7
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b90      	cmp	r3, #144	; 0x90
 8007cec:	d104      	bne.n	8007cf8 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <astronode_send_cfg_sr+0x68>)
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f7fb f8e1 	bl	8002eb8 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007cf6:	e003      	b.n	8007d00 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007cf8:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <astronode_send_cfg_sr+0x6c>)
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	f7fb f8dc 	bl	8002eb8 <send_debug_logs>
}
 8007d00:	46c0      	nop			; (mov r8, r8)
 8007d02:	46bd      	mov	sp, r7
 8007d04:	b064      	add	sp, #400	; 0x190
 8007d06:	bdb0      	pop	{r4, r5, r7, pc}
 8007d08:	fffffe70 	.word	0xfffffe70
 8007d0c:	08013360 	.word	0x08013360
 8007d10:	08013394 	.word	0x08013394

08007d14 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d16:	b0e7      	sub	sp, #412	; 0x19c
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	0005      	movs	r5, r0
 8007d1c:	000c      	movs	r4, r1
 8007d1e:	0010      	movs	r0, r2
 8007d20:	0019      	movs	r1, r3
 8007d22:	4b4b      	ldr	r3, [pc, #300]	; (8007e50 <astronode_send_cfg_wr+0x13c>)
 8007d24:	26cc      	movs	r6, #204	; 0xcc
 8007d26:	0076      	lsls	r6, r6, #1
 8007d28:	199b      	adds	r3, r3, r6
 8007d2a:	19db      	adds	r3, r3, r7
 8007d2c:	1c2a      	adds	r2, r5, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	4b48      	ldr	r3, [pc, #288]	; (8007e54 <astronode_send_cfg_wr+0x140>)
 8007d32:	0035      	movs	r5, r6
 8007d34:	195b      	adds	r3, r3, r5
 8007d36:	19db      	adds	r3, r3, r7
 8007d38:	1c22      	adds	r2, r4, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	4b46      	ldr	r3, [pc, #280]	; (8007e58 <astronode_send_cfg_wr+0x144>)
 8007d3e:	002c      	movs	r4, r5
 8007d40:	191b      	adds	r3, r3, r4
 8007d42:	19db      	adds	r3, r3, r7
 8007d44:	1c02      	adds	r2, r0, #0
 8007d46:	701a      	strb	r2, [r3, #0]
 8007d48:	4b44      	ldr	r3, [pc, #272]	; (8007e5c <astronode_send_cfg_wr+0x148>)
 8007d4a:	191b      	adds	r3, r3, r4
 8007d4c:	19db      	adds	r3, r3, r7
 8007d4e:	1c0a      	adds	r2, r1, #0
 8007d50:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007d52:	25d0      	movs	r5, #208	; 0xd0
 8007d54:	197b      	adds	r3, r7, r5
 8007d56:	0018      	movs	r0, r3
 8007d58:	23c6      	movs	r3, #198	; 0xc6
 8007d5a:	001a      	movs	r2, r3
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	f004 fb0f 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 8007d62:	4b3f      	ldr	r3, [pc, #252]	; (8007e60 <astronode_send_cfg_wr+0x14c>)
 8007d64:	191b      	adds	r3, r3, r4
 8007d66:	19db      	adds	r3, r3, r7
 8007d68:	0018      	movs	r0, r3
 8007d6a:	23c6      	movs	r3, #198	; 0xc6
 8007d6c:	001a      	movs	r2, r3
 8007d6e:	2100      	movs	r1, #0
 8007d70:	f004 fb06 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007d74:	0029      	movs	r1, r5
 8007d76:	187b      	adds	r3, r7, r1
 8007d78:	2205      	movs	r2, #5
 8007d7a:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007d7c:	4b34      	ldr	r3, [pc, #208]	; (8007e50 <astronode_send_cfg_wr+0x13c>)
 8007d7e:	191b      	adds	r3, r3, r4
 8007d80:	19db      	adds	r3, r3, r7
 8007d82:	2200      	movs	r2, #0
 8007d84:	569a      	ldrsb	r2, [r3, r2]
 8007d86:	4b33      	ldr	r3, [pc, #204]	; (8007e54 <astronode_send_cfg_wr+0x140>)
 8007d88:	191b      	adds	r3, r3, r4
 8007d8a:	19db      	adds	r3, r3, r7
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007d96:	4b30      	ldr	r3, [pc, #192]	; (8007e58 <astronode_send_cfg_wr+0x144>)
 8007d98:	191b      	adds	r3, r3, r4
 8007d9a:	19db      	adds	r3, r3, r7
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	b25b      	sxtb	r3, r3
 8007da2:	4313      	orrs	r3, r2
 8007da4:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007da6:	4b2d      	ldr	r3, [pc, #180]	; (8007e5c <astronode_send_cfg_wr+0x148>)
 8007da8:	191b      	adds	r3, r3, r4
 8007daa:	19db      	adds	r3, r3, r7
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	b25b      	sxtb	r3, r3
 8007db2:	4313      	orrs	r3, r2
 8007db4:	b25b      	sxtb	r3, r3
 8007db6:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007db8:	187b      	adds	r3, r7, r1
 8007dba:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007dbc:	23d4      	movs	r3, #212	; 0xd4
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	2508      	movs	r5, #8
 8007dc2:	195b      	adds	r3, r3, r5
 8007dc4:	19db      	adds	r3, r3, r7
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	569a      	ldrsb	r2, [r3, r2]
 8007dca:	23d6      	movs	r3, #214	; 0xd6
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	195b      	adds	r3, r3, r5
 8007dd0:	19db      	adds	r3, r3, r7
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	b25b      	sxtb	r3, r3
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007ddc:	23d8      	movs	r3, #216	; 0xd8
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	195b      	adds	r3, r3, r5
 8007de2:	19db      	adds	r3, r3, r7
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	b25b      	sxtb	r3, r3
 8007dea:	4313      	orrs	r3, r2
 8007dec:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007dee:	23da      	movs	r3, #218	; 0xda
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	195b      	adds	r3, r3, r5
 8007df4:	19db      	adds	r3, r3, r7
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	b25b      	sxtb	r3, r3
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	b25b      	sxtb	r3, r3
 8007e00:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007e02:	187b      	adds	r3, r7, r1
 8007e04:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007e06:	0008      	movs	r0, r1
 8007e08:	187b      	adds	r3, r7, r1
 8007e0a:	22c4      	movs	r2, #196	; 0xc4
 8007e0c:	2103      	movs	r1, #3
 8007e0e:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007e10:	002b      	movs	r3, r5
 8007e12:	18fa      	adds	r2, r7, r3
 8007e14:	183b      	adds	r3, r7, r0
 8007e16:	0011      	movs	r1, r2
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f001 fa13 	bl	8009244 <astronode_transport_send_receive>
 8007e1e:	0003      	movs	r3, r0
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d10f      	bne.n	8007e44 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007e24:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <astronode_send_cfg_wr+0x14c>)
 8007e26:	191b      	adds	r3, r3, r4
 8007e28:	19db      	adds	r3, r3, r7
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b85      	cmp	r3, #133	; 0x85
 8007e2e:	d105      	bne.n	8007e3c <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007e30:	4b0c      	ldr	r3, [pc, #48]	; (8007e64 <astronode_send_cfg_wr+0x150>)
 8007e32:	0018      	movs	r0, r3
 8007e34:	f7fb f840 	bl	8002eb8 <send_debug_logs>
            return true ;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e004      	b.n	8007e46 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007e3c:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <astronode_send_cfg_wr+0x154>)
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f7fb f83a 	bl	8002eb8 <send_debug_logs>
        }
    }
    return false ;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	0018      	movs	r0, r3
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	b067      	add	sp, #412	; 0x19c
 8007e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4e:	46c0      	nop			; (mov r8, r8)
 8007e50:	fffffe6f 	.word	0xfffffe6f
 8007e54:	fffffe6e 	.word	0xfffffe6e
 8007e58:	fffffe6d 	.word	0xfffffe6d
 8007e5c:	fffffe6c 	.word	0xfffffe6c
 8007e60:	fffffe70 	.word	0xfffffe70
 8007e64:	080133c8 	.word	0x080133c8
 8007e68:	080133f4 	.word	0x080133f4

08007e6c <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e6e:	b0ed      	sub	sp, #436	; 0x1b4
 8007e70:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007e72:	21c8      	movs	r1, #200	; 0xc8
 8007e74:	2318      	movs	r3, #24
 8007e76:	18cb      	adds	r3, r1, r3
 8007e78:	19db      	adds	r3, r3, r7
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	23c6      	movs	r3, #198	; 0xc6
 8007e7e:	001a      	movs	r2, r3
 8007e80:	2100      	movs	r1, #0
 8007e82:	f004 fa7d 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 8007e86:	4b4a      	ldr	r3, [pc, #296]	; (8007fb0 <astronode_send_mgi_rr+0x144>)
 8007e88:	26cc      	movs	r6, #204	; 0xcc
 8007e8a:	0076      	lsls	r6, r6, #1
 8007e8c:	199b      	adds	r3, r3, r6
 8007e8e:	2218      	movs	r2, #24
 8007e90:	4694      	mov	ip, r2
 8007e92:	44bc      	add	ip, r7
 8007e94:	4463      	add	r3, ip
 8007e96:	0018      	movs	r0, r3
 8007e98:	23c6      	movs	r3, #198	; 0xc6
 8007e9a:	001a      	movs	r2, r3
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	f004 fa6f 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007ea2:	21c8      	movs	r1, #200	; 0xc8
 8007ea4:	2318      	movs	r3, #24
 8007ea6:	18cb      	adds	r3, r1, r3
 8007ea8:	19db      	adds	r3, r3, r7
 8007eaa:	2219      	movs	r2, #25
 8007eac:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007eae:	2318      	movs	r3, #24
 8007eb0:	18fa      	adds	r2, r7, r3
 8007eb2:	2318      	movs	r3, #24
 8007eb4:	18cb      	adds	r3, r1, r3
 8007eb6:	19db      	adds	r3, r3, r7
 8007eb8:	0011      	movs	r1, r2
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f001 f9c2 	bl	8009244 <astronode_transport_send_receive>
 8007ec0:	0003      	movs	r3, r0
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d16f      	bne.n	8007fa6 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007ec6:	4b3a      	ldr	r3, [pc, #232]	; (8007fb0 <astronode_send_mgi_rr+0x144>)
 8007ec8:	0032      	movs	r2, r6
 8007eca:	189b      	adds	r3, r3, r2
 8007ecc:	2118      	movs	r1, #24
 8007ece:	468c      	mov	ip, r1
 8007ed0:	44bc      	add	ip, r7
 8007ed2:	4463      	add	r3, ip
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b99      	cmp	r3, #153	; 0x99
 8007ed8:	d161      	bne.n	8007f9e <astronode_send_mgi_rr+0x132>
        {
 8007eda:	466b      	mov	r3, sp
 8007edc:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007ede:	4b34      	ldr	r3, [pc, #208]	; (8007fb0 <astronode_send_mgi_rr+0x144>)
 8007ee0:	189b      	adds	r3, r3, r2
 8007ee2:	2218      	movs	r2, #24
 8007ee4:	4694      	mov	ip, r2
 8007ee6:	44bc      	add	ip, r7
 8007ee8:	4463      	add	r3, ip
 8007eea:	22c4      	movs	r2, #196	; 0xc4
 8007eec:	5a9b      	ldrh	r3, [r3, r2]
 8007eee:	001a      	movs	r2, r3
 8007ef0:	3a01      	subs	r2, #1
 8007ef2:	21ca      	movs	r1, #202	; 0xca
 8007ef4:	0049      	lsls	r1, r1, #1
 8007ef6:	2018      	movs	r0, #24
 8007ef8:	1809      	adds	r1, r1, r0
 8007efa:	19c9      	adds	r1, r1, r7
 8007efc:	600a      	str	r2, [r1, #0]
 8007efe:	001c      	movs	r4, r3
 8007f00:	2200      	movs	r2, #0
 8007f02:	0015      	movs	r5, r2
 8007f04:	0020      	movs	r0, r4
 8007f06:	0029      	movs	r1, r5
 8007f08:	0004      	movs	r4, r0
 8007f0a:	0f62      	lsrs	r2, r4, #29
 8007f0c:	000c      	movs	r4, r1
 8007f0e:	00e4      	lsls	r4, r4, #3
 8007f10:	617c      	str	r4, [r7, #20]
 8007f12:	697c      	ldr	r4, [r7, #20]
 8007f14:	4314      	orrs	r4, r2
 8007f16:	617c      	str	r4, [r7, #20]
 8007f18:	0001      	movs	r1, r0
 8007f1a:	00c9      	lsls	r1, r1, #3
 8007f1c:	6139      	str	r1, [r7, #16]
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	2200      	movs	r2, #0
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	6838      	ldr	r0, [r7, #0]
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	0004      	movs	r4, r0
 8007f2a:	0f62      	lsrs	r2, r4, #29
 8007f2c:	000c      	movs	r4, r1
 8007f2e:	00e4      	lsls	r4, r4, #3
 8007f30:	60fc      	str	r4, [r7, #12]
 8007f32:	68fc      	ldr	r4, [r7, #12]
 8007f34:	4314      	orrs	r4, r2
 8007f36:	60fc      	str	r4, [r7, #12]
 8007f38:	0001      	movs	r1, r0
 8007f3a:	00ca      	lsls	r2, r1, #3
 8007f3c:	60ba      	str	r2, [r7, #8]
 8007f3e:	3307      	adds	r3, #7
 8007f40:	08db      	lsrs	r3, r3, #3
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	4669      	mov	r1, sp
 8007f46:	1acb      	subs	r3, r1, r3
 8007f48:	469d      	mov	sp, r3
 8007f4a:	466b      	mov	r3, sp
 8007f4c:	3300      	adds	r3, #0
 8007f4e:	24c8      	movs	r4, #200	; 0xc8
 8007f50:	0064      	lsls	r4, r4, #1
 8007f52:	2218      	movs	r2, #24
 8007f54:	18a2      	adds	r2, r4, r2
 8007f56:	19d1      	adds	r1, r2, r7
 8007f58:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007f5a:	4b16      	ldr	r3, [pc, #88]	; (8007fb4 <astronode_send_mgi_rr+0x148>)
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f7fa ffab 	bl	8002eb8 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007f62:	4b13      	ldr	r3, [pc, #76]	; (8007fb0 <astronode_send_mgi_rr+0x144>)
 8007f64:	22cc      	movs	r2, #204	; 0xcc
 8007f66:	0052      	lsls	r2, r2, #1
 8007f68:	189b      	adds	r3, r3, r2
 8007f6a:	2218      	movs	r2, #24
 8007f6c:	4694      	mov	ip, r2
 8007f6e:	44bc      	add	ip, r7
 8007f70:	4463      	add	r3, ip
 8007f72:	22c4      	movs	r2, #196	; 0xc4
 8007f74:	5a9b      	ldrh	r3, [r3, r2]
 8007f76:	0019      	movs	r1, r3
 8007f78:	2318      	movs	r3, #24
 8007f7a:	18fb      	adds	r3, r7, r3
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	4a0e      	ldr	r2, [pc, #56]	; (8007fb8 <astronode_send_mgi_rr+0x14c>)
 8007f80:	2018      	movs	r0, #24
 8007f82:	1820      	adds	r0, r4, r0
 8007f84:	19c0      	adds	r0, r0, r7
 8007f86:	6800      	ldr	r0, [r0, #0]
 8007f88:	f004 f930 	bl	800c1ec <snprintf>
            send_debug_logs(guid);
 8007f8c:	2318      	movs	r3, #24
 8007f8e:	18e3      	adds	r3, r4, r3
 8007f90:	19db      	adds	r3, r3, r7
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	0018      	movs	r0, r3
 8007f96:	f7fa ff8f 	bl	8002eb8 <send_debug_logs>
 8007f9a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007f9c:	e003      	b.n	8007fa6 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007f9e:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <astronode_send_mgi_rr+0x150>)
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f7fa ff89 	bl	8002eb8 <send_debug_logs>
}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	b06d      	add	sp, #436	; 0x1b4
 8007fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	fffffe68 	.word	0xfffffe68
 8007fb4:	08013480 	.word	0x08013480
 8007fb8:	08013490 	.word	0x08013490
 8007fbc:	08013494 	.word	0x08013494

08007fc0 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc2:	b0ed      	sub	sp, #436	; 0x1b4
 8007fc4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007fc6:	21c8      	movs	r1, #200	; 0xc8
 8007fc8:	2318      	movs	r3, #24
 8007fca:	18cb      	adds	r3, r1, r3
 8007fcc:	19db      	adds	r3, r3, r7
 8007fce:	0018      	movs	r0, r3
 8007fd0:	23c6      	movs	r3, #198	; 0xc6
 8007fd2:	001a      	movs	r2, r3
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	f004 f9d3 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 8007fda:	4b4a      	ldr	r3, [pc, #296]	; (8008104 <astronode_send_msn_rr+0x144>)
 8007fdc:	26cc      	movs	r6, #204	; 0xcc
 8007fde:	0076      	lsls	r6, r6, #1
 8007fe0:	199b      	adds	r3, r3, r6
 8007fe2:	2218      	movs	r2, #24
 8007fe4:	4694      	mov	ip, r2
 8007fe6:	44bc      	add	ip, r7
 8007fe8:	4463      	add	r3, ip
 8007fea:	0018      	movs	r0, r3
 8007fec:	23c6      	movs	r3, #198	; 0xc6
 8007fee:	001a      	movs	r2, r3
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	f004 f9c5 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007ff6:	21c8      	movs	r1, #200	; 0xc8
 8007ff8:	2318      	movs	r3, #24
 8007ffa:	18cb      	adds	r3, r1, r3
 8007ffc:	19db      	adds	r3, r3, r7
 8007ffe:	221a      	movs	r2, #26
 8008000:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008002:	2318      	movs	r3, #24
 8008004:	18fa      	adds	r2, r7, r3
 8008006:	2318      	movs	r3, #24
 8008008:	18cb      	adds	r3, r1, r3
 800800a:	19db      	adds	r3, r3, r7
 800800c:	0011      	movs	r1, r2
 800800e:	0018      	movs	r0, r3
 8008010:	f001 f918 	bl	8009244 <astronode_transport_send_receive>
 8008014:	0003      	movs	r3, r0
 8008016:	2b01      	cmp	r3, #1
 8008018:	d16f      	bne.n	80080fa <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 800801a:	4b3a      	ldr	r3, [pc, #232]	; (8008104 <astronode_send_msn_rr+0x144>)
 800801c:	0032      	movs	r2, r6
 800801e:	189b      	adds	r3, r3, r2
 8008020:	2118      	movs	r1, #24
 8008022:	468c      	mov	ip, r1
 8008024:	44bc      	add	ip, r7
 8008026:	4463      	add	r3, ip
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b9a      	cmp	r3, #154	; 0x9a
 800802c:	d161      	bne.n	80080f2 <astronode_send_msn_rr+0x132>
        {
 800802e:	466b      	mov	r3, sp
 8008030:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8008032:	4b34      	ldr	r3, [pc, #208]	; (8008104 <astronode_send_msn_rr+0x144>)
 8008034:	189b      	adds	r3, r3, r2
 8008036:	2218      	movs	r2, #24
 8008038:	4694      	mov	ip, r2
 800803a:	44bc      	add	ip, r7
 800803c:	4463      	add	r3, ip
 800803e:	22c4      	movs	r2, #196	; 0xc4
 8008040:	5a9b      	ldrh	r3, [r3, r2]
 8008042:	001a      	movs	r2, r3
 8008044:	3a01      	subs	r2, #1
 8008046:	21ca      	movs	r1, #202	; 0xca
 8008048:	0049      	lsls	r1, r1, #1
 800804a:	2018      	movs	r0, #24
 800804c:	1809      	adds	r1, r1, r0
 800804e:	19c9      	adds	r1, r1, r7
 8008050:	600a      	str	r2, [r1, #0]
 8008052:	001c      	movs	r4, r3
 8008054:	2200      	movs	r2, #0
 8008056:	0015      	movs	r5, r2
 8008058:	0020      	movs	r0, r4
 800805a:	0029      	movs	r1, r5
 800805c:	0004      	movs	r4, r0
 800805e:	0f62      	lsrs	r2, r4, #29
 8008060:	000c      	movs	r4, r1
 8008062:	00e4      	lsls	r4, r4, #3
 8008064:	617c      	str	r4, [r7, #20]
 8008066:	697c      	ldr	r4, [r7, #20]
 8008068:	4314      	orrs	r4, r2
 800806a:	617c      	str	r4, [r7, #20]
 800806c:	0001      	movs	r1, r0
 800806e:	00c9      	lsls	r1, r1, #3
 8008070:	6139      	str	r1, [r7, #16]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	2200      	movs	r2, #0
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	6838      	ldr	r0, [r7, #0]
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	0004      	movs	r4, r0
 800807e:	0f62      	lsrs	r2, r4, #29
 8008080:	000c      	movs	r4, r1
 8008082:	00e4      	lsls	r4, r4, #3
 8008084:	60fc      	str	r4, [r7, #12]
 8008086:	68fc      	ldr	r4, [r7, #12]
 8008088:	4314      	orrs	r4, r2
 800808a:	60fc      	str	r4, [r7, #12]
 800808c:	0001      	movs	r1, r0
 800808e:	00ca      	lsls	r2, r1, #3
 8008090:	60ba      	str	r2, [r7, #8]
 8008092:	3307      	adds	r3, #7
 8008094:	08db      	lsrs	r3, r3, #3
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4669      	mov	r1, sp
 800809a:	1acb      	subs	r3, r1, r3
 800809c:	469d      	mov	sp, r3
 800809e:	466b      	mov	r3, sp
 80080a0:	3300      	adds	r3, #0
 80080a2:	24c8      	movs	r4, #200	; 0xc8
 80080a4:	0064      	lsls	r4, r4, #1
 80080a6:	2218      	movs	r2, #24
 80080a8:	18a2      	adds	r2, r4, r2
 80080aa:	19d1      	adds	r1, r2, r7
 80080ac:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 80080ae:	4b16      	ldr	r3, [pc, #88]	; (8008108 <astronode_send_msn_rr+0x148>)
 80080b0:	0018      	movs	r0, r3
 80080b2:	f7fa ff01 	bl	8002eb8 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 80080b6:	4b13      	ldr	r3, [pc, #76]	; (8008104 <astronode_send_msn_rr+0x144>)
 80080b8:	22cc      	movs	r2, #204	; 0xcc
 80080ba:	0052      	lsls	r2, r2, #1
 80080bc:	189b      	adds	r3, r3, r2
 80080be:	2218      	movs	r2, #24
 80080c0:	4694      	mov	ip, r2
 80080c2:	44bc      	add	ip, r7
 80080c4:	4463      	add	r3, ip
 80080c6:	22c4      	movs	r2, #196	; 0xc4
 80080c8:	5a9b      	ldrh	r3, [r3, r2]
 80080ca:	0019      	movs	r1, r3
 80080cc:	2318      	movs	r3, #24
 80080ce:	18fb      	adds	r3, r7, r3
 80080d0:	3301      	adds	r3, #1
 80080d2:	4a0e      	ldr	r2, [pc, #56]	; (800810c <astronode_send_msn_rr+0x14c>)
 80080d4:	2018      	movs	r0, #24
 80080d6:	1820      	adds	r0, r4, r0
 80080d8:	19c0      	adds	r0, r0, r7
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	f004 f886 	bl	800c1ec <snprintf>
            send_debug_logs(serial_number);
 80080e0:	2318      	movs	r3, #24
 80080e2:	18e3      	adds	r3, r4, r3
 80080e4:	19db      	adds	r3, r3, r7
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	0018      	movs	r0, r3
 80080ea:	f7fa fee5 	bl	8002eb8 <send_debug_logs>
 80080ee:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80080f0:	e003      	b.n	80080fa <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80080f2:	4b07      	ldr	r3, [pc, #28]	; (8008110 <astronode_send_msn_rr+0x150>)
 80080f4:	0018      	movs	r0, r3
 80080f6:	f7fa fedf 	bl	8002eb8 <send_debug_logs>
}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b06d      	add	sp, #436	; 0x1b4
 8008100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	fffffe68 	.word	0xfffffe68
 8008108:	080134b0 	.word	0x080134b0
 800810c:	08013490 	.word	0x08013490
 8008110:	080134cc 	.word	0x080134cc

08008114 <astronode_send_nco_rr>:

uint32_t astronode_send_nco_rr ( void )
{
 8008114:	b5b0      	push	{r4, r5, r7, lr}
 8008116:	b0fa      	sub	sp, #488	; 0x1e8
 8008118:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800811a:	258e      	movs	r5, #142	; 0x8e
 800811c:	006d      	lsls	r5, r5, #1
 800811e:	197b      	adds	r3, r7, r5
 8008120:	0018      	movs	r0, r3
 8008122:	23c6      	movs	r3, #198	; 0xc6
 8008124:	001a      	movs	r2, r3
 8008126:	2100      	movs	r1, #0
 8008128:	f004 f92a 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0} ;
 800812c:	4b28      	ldr	r3, [pc, #160]	; (80081d0 <astronode_send_nco_rr+0xbc>)
 800812e:	24f4      	movs	r4, #244	; 0xf4
 8008130:	0064      	lsls	r4, r4, #1
 8008132:	191b      	adds	r3, r3, r4
 8008134:	19db      	adds	r3, r3, r7
 8008136:	0018      	movs	r0, r3
 8008138:	23c6      	movs	r3, #198	; 0xc6
 800813a:	001a      	movs	r2, r3
 800813c:	2100      	movs	r1, #0
 800813e:	f004 f91f 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR ;
 8008142:	197b      	adds	r3, r7, r5
 8008144:	2218      	movs	r2, #24
 8008146:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008148:	2354      	movs	r3, #84	; 0x54
 800814a:	18fa      	adds	r2, r7, r3
 800814c:	197b      	adds	r3, r7, r5
 800814e:	0011      	movs	r1, r2
 8008150:	0018      	movs	r0, r3
 8008152:	f001 f877 	bl	8009244 <astronode_transport_send_receive>
 8008156:	0003      	movs	r3, r0
 8008158:	2b01      	cmp	r3, #1
 800815a:	d133      	bne.n	80081c4 <astronode_send_nco_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_NCO_RA )
 800815c:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <astronode_send_nco_rr+0xbc>)
 800815e:	0021      	movs	r1, r4
 8008160:	185b      	adds	r3, r3, r1
 8008162:	19db      	adds	r3, r3, r7
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b98      	cmp	r3, #152	; 0x98
 8008168:	d128      	bne.n	80081bc <astronode_send_nco_rr+0xa8>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 800816a:	4b19      	ldr	r3, [pc, #100]	; (80081d0 <astronode_send_nco_rr+0xbc>)
 800816c:	185b      	adds	r3, r3, r1
 800816e:	19db      	adds	r3, r3, r7
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008174:	4b16      	ldr	r3, [pc, #88]	; (80081d0 <astronode_send_nco_rr+0xbc>)
 8008176:	185b      	adds	r3, r3, r1
 8008178:	19db      	adds	r3, r3, r7
 800817a:	789b      	ldrb	r3, [r3, #2]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008180:	4b13      	ldr	r3, [pc, #76]	; (80081d0 <astronode_send_nco_rr+0xbc>)
 8008182:	185b      	adds	r3, r3, r1
 8008184:	19db      	adds	r3, r3, r7
 8008186:	78db      	ldrb	r3, [r3, #3]
 8008188:	041b      	lsls	r3, r3, #16
 800818a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 800818c:	4b10      	ldr	r3, [pc, #64]	; (80081d0 <astronode_send_nco_rr+0xbc>)
 800818e:	185b      	adds	r3, r3, r1
 8008190:	19db      	adds	r3, r3, r7
 8008192:	791b      	ldrb	r3, [r3, #4]
 8008194:	061b      	lsls	r3, r3, #24
 8008196:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 8008198:	24f2      	movs	r4, #242	; 0xf2
 800819a:	0064      	lsls	r4, r4, #1
 800819c:	193a      	adds	r2, r7, r4
 800819e:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf (str , "Next opportunity for communication with the Astrocast Network: %lds." , time_to_next_pass ) ;
 80081a0:	193b      	adds	r3, r7, r4
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	490b      	ldr	r1, [pc, #44]	; (80081d4 <astronode_send_nco_rr+0xc0>)
 80081a6:	1d3b      	adds	r3, r7, #4
 80081a8:	0018      	movs	r0, r3
 80081aa:	f004 f853 	bl	800c254 <sprintf>
            send_debug_logs ( str ) ;
 80081ae:	1d3b      	adds	r3, r7, #4
 80081b0:	0018      	movs	r0, r3
 80081b2:	f7fa fe81 	bl	8002eb8 <send_debug_logs>
            return time_to_next_pass ;
 80081b6:	193b      	adds	r3, r7, r4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	e005      	b.n	80081c8 <astronode_send_nco_rr+0xb4>
        }
        else
        {
            send_debug_logs ( "Failed to read satellite constellation ephemeris data." ) ;
 80081bc:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <astronode_send_nco_rr+0xc4>)
 80081be:	0018      	movs	r0, r3
 80081c0:	f7fa fe7a 	bl	8002eb8 <send_debug_logs>
        }
    }
    return 0xFFFFFFFF ; // Longest possible time
 80081c4:	2301      	movs	r3, #1
 80081c6:	425b      	negs	r3, r3
}
 80081c8:	0018      	movs	r0, r3
 80081ca:	46bd      	mov	sp, r7
 80081cc:	b07a      	add	sp, #488	; 0x1e8
 80081ce:	bdb0      	pop	{r4, r5, r7, pc}
 80081d0:	fffffe6c 	.word	0xfffffe6c
 80081d4:	080134f4 	.word	0x080134f4
 80081d8:	0801353c 	.word	0x0801353c

080081dc <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 80081dc:	b5b0      	push	{r4, r5, r7, lr}
 80081de:	b0e4      	sub	sp, #400	; 0x190
 80081e0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80081e2:	24c8      	movs	r4, #200	; 0xc8
 80081e4:	193b      	adds	r3, r7, r4
 80081e6:	0018      	movs	r0, r3
 80081e8:	23c6      	movs	r3, #198	; 0xc6
 80081ea:	001a      	movs	r2, r3
 80081ec:	2100      	movs	r1, #0
 80081ee:	f004 f8c7 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 80081f2:	4b31      	ldr	r3, [pc, #196]	; (80082b8 <astronode_send_evt_rr+0xdc>)
 80081f4:	25c8      	movs	r5, #200	; 0xc8
 80081f6:	006d      	lsls	r5, r5, #1
 80081f8:	195b      	adds	r3, r3, r5
 80081fa:	19db      	adds	r3, r3, r7
 80081fc:	0018      	movs	r0, r3
 80081fe:	23c6      	movs	r3, #198	; 0xc6
 8008200:	001a      	movs	r2, r3
 8008202:	2100      	movs	r1, #0
 8008204:	f004 f8bc 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8008208:	193b      	adds	r3, r7, r4
 800820a:	2265      	movs	r2, #101	; 0x65
 800820c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800820e:	003a      	movs	r2, r7
 8008210:	193b      	adds	r3, r7, r4
 8008212:	0011      	movs	r1, r2
 8008214:	0018      	movs	r0, r3
 8008216:	f001 f815 	bl	8009244 <astronode_transport_send_receive>
 800821a:	0003      	movs	r3, r0
 800821c:	2b01      	cmp	r3, #1
 800821e:	d147      	bne.n	80082b0 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8008220:	4b25      	ldr	r3, [pc, #148]	; (80082b8 <astronode_send_evt_rr+0xdc>)
 8008222:	195b      	adds	r3, r3, r5
 8008224:	19db      	adds	r3, r3, r7
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2be5      	cmp	r3, #229	; 0xe5
 800822a:	d141      	bne.n	80082b0 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 800822c:	4b22      	ldr	r3, [pc, #136]	; (80082b8 <astronode_send_evt_rr+0xdc>)
 800822e:	195b      	adds	r3, r3, r5
 8008230:	19db      	adds	r3, r3, r7
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	001a      	movs	r2, r3
 8008236:	2301      	movs	r3, #1
 8008238:	4013      	ands	r3, r2
 800823a:	d006      	beq.n	800824a <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 800823c:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <astronode_send_evt_rr+0xe0>)
 800823e:	2201      	movs	r2, #1
 8008240:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8008242:	4b1f      	ldr	r3, [pc, #124]	; (80082c0 <astronode_send_evt_rr+0xe4>)
 8008244:	0018      	movs	r0, r3
 8008246:	f7fa fe37 	bl	8002eb8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 800824a:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <astronode_send_evt_rr+0xdc>)
 800824c:	22c8      	movs	r2, #200	; 0xc8
 800824e:	0052      	lsls	r2, r2, #1
 8008250:	189b      	adds	r3, r3, r2
 8008252:	19db      	adds	r3, r3, r7
 8008254:	785b      	ldrb	r3, [r3, #1]
 8008256:	001a      	movs	r2, r3
 8008258:	2302      	movs	r3, #2
 800825a:	4013      	ands	r3, r2
 800825c:	d006      	beq.n	800826c <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800825e:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <astronode_send_evt_rr+0xe8>)
 8008260:	2201      	movs	r2, #1
 8008262:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8008264:	4b18      	ldr	r3, [pc, #96]	; (80082c8 <astronode_send_evt_rr+0xec>)
 8008266:	0018      	movs	r0, r3
 8008268:	f7fa fe26 	bl	8002eb8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 800826c:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <astronode_send_evt_rr+0xdc>)
 800826e:	22c8      	movs	r2, #200	; 0xc8
 8008270:	0052      	lsls	r2, r2, #1
 8008272:	189b      	adds	r3, r3, r2
 8008274:	19db      	adds	r3, r3, r7
 8008276:	785b      	ldrb	r3, [r3, #1]
 8008278:	001a      	movs	r2, r3
 800827a:	2304      	movs	r3, #4
 800827c:	4013      	ands	r3, r2
 800827e:	d006      	beq.n	800828e <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8008280:	4b12      	ldr	r3, [pc, #72]	; (80082cc <astronode_send_evt_rr+0xf0>)
 8008282:	2201      	movs	r2, #1
 8008284:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8008286:	4b12      	ldr	r3, [pc, #72]	; (80082d0 <astronode_send_evt_rr+0xf4>)
 8008288:	0018      	movs	r0, r3
 800828a:	f7fa fe15 	bl	8002eb8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800828e:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <astronode_send_evt_rr+0xdc>)
 8008290:	22c8      	movs	r2, #200	; 0xc8
 8008292:	0052      	lsls	r2, r2, #1
 8008294:	189b      	adds	r3, r3, r2
 8008296:	19db      	adds	r3, r3, r7
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	001a      	movs	r2, r3
 800829c:	2308      	movs	r3, #8
 800829e:	4013      	ands	r3, r2
 80082a0:	d006      	beq.n	80082b0 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 80082a2:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <astronode_send_evt_rr+0xf8>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 80082a8:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <astronode_send_evt_rr+0xfc>)
 80082aa:	0018      	movs	r0, r3
 80082ac:	f7fa fe04 	bl	8002eb8 <send_debug_logs>
            }

        }
    }
}
 80082b0:	46c0      	nop			; (mov r8, r8)
 80082b2:	46bd      	mov	sp, r7
 80082b4:	b064      	add	sp, #400	; 0x190
 80082b6:	bdb0      	pop	{r4, r5, r7, pc}
 80082b8:	fffffe70 	.word	0xfffffe70
 80082bc:	20000bbc 	.word	0x20000bbc
 80082c0:	08013574 	.word	0x08013574
 80082c4:	20000bbd 	.word	0x20000bbd
 80082c8:	08013598 	.word	0x08013598
 80082cc:	20000bbe 	.word	0x20000bbe
 80082d0:	080135b0 	.word	0x080135b0
 80082d4:	20000bbf 	.word	0x20000bbf
 80082d8:	080135c4 	.word	0x080135c4

080082dc <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 80082dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082de:	b0e7      	sub	sp, #412	; 0x19c
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 80082e6:	24d0      	movs	r4, #208	; 0xd0
 80082e8:	193b      	adds	r3, r7, r4
 80082ea:	0018      	movs	r0, r3
 80082ec:	23c6      	movs	r3, #198	; 0xc6
 80082ee:	001a      	movs	r2, r3
 80082f0:	2100      	movs	r1, #0
 80082f2:	f004 f845 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 80082f6:	4b56      	ldr	r3, [pc, #344]	; (8008450 <astronode_send_geo_wr+0x174>)
 80082f8:	26cc      	movs	r6, #204	; 0xcc
 80082fa:	0076      	lsls	r6, r6, #1
 80082fc:	199b      	adds	r3, r3, r6
 80082fe:	19db      	adds	r3, r3, r7
 8008300:	0018      	movs	r0, r3
 8008302:	23c6      	movs	r3, #198	; 0xc6
 8008304:	001a      	movs	r2, r3
 8008306:	2100      	movs	r1, #0
 8008308:	f004 f83a 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 800830c:	193b      	adds	r3, r7, r4
 800830e:	2235      	movs	r2, #53	; 0x35
 8008310:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8008312:	193b      	adds	r3, r7, r4
 8008314:	22c4      	movs	r2, #196	; 0xc4
 8008316:	5a9b      	ldrh	r3, [r3, r2]
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	b290      	uxth	r0, r2
 800831c:	193a      	adds	r2, r7, r4
 800831e:	21c4      	movs	r1, #196	; 0xc4
 8008320:	5250      	strh	r0, [r2, r1]
 8008322:	0019      	movs	r1, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	b2da      	uxtb	r2, r3
 8008328:	193b      	adds	r3, r7, r4
 800832a:	185b      	adds	r3, r3, r1
 800832c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	1218      	asrs	r0, r3, #8
 8008332:	0025      	movs	r5, r4
 8008334:	197b      	adds	r3, r7, r5
 8008336:	22c4      	movs	r2, #196	; 0xc4
 8008338:	5a9b      	ldrh	r3, [r3, r2]
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	b294      	uxth	r4, r2
 800833e:	197a      	adds	r2, r7, r5
 8008340:	21c4      	movs	r1, #196	; 0xc4
 8008342:	5254      	strh	r4, [r2, r1]
 8008344:	0019      	movs	r1, r3
 8008346:	b2c2      	uxtb	r2, r0
 8008348:	002c      	movs	r4, r5
 800834a:	193b      	adds	r3, r7, r4
 800834c:	185b      	adds	r3, r3, r1
 800834e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	1418      	asrs	r0, r3, #16
 8008354:	0025      	movs	r5, r4
 8008356:	197b      	adds	r3, r7, r5
 8008358:	22c4      	movs	r2, #196	; 0xc4
 800835a:	5a9b      	ldrh	r3, [r3, r2]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	b294      	uxth	r4, r2
 8008360:	197a      	adds	r2, r7, r5
 8008362:	21c4      	movs	r1, #196	; 0xc4
 8008364:	5254      	strh	r4, [r2, r1]
 8008366:	0019      	movs	r1, r3
 8008368:	b2c2      	uxtb	r2, r0
 800836a:	002c      	movs	r4, r5
 800836c:	193b      	adds	r3, r7, r4
 800836e:	185b      	adds	r3, r3, r1
 8008370:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	1618      	asrs	r0, r3, #24
 8008376:	0025      	movs	r5, r4
 8008378:	197b      	adds	r3, r7, r5
 800837a:	22c4      	movs	r2, #196	; 0xc4
 800837c:	5a9b      	ldrh	r3, [r3, r2]
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	b294      	uxth	r4, r2
 8008382:	197a      	adds	r2, r7, r5
 8008384:	21c4      	movs	r1, #196	; 0xc4
 8008386:	5254      	strh	r4, [r2, r1]
 8008388:	0019      	movs	r1, r3
 800838a:	b2c2      	uxtb	r2, r0
 800838c:	002c      	movs	r4, r5
 800838e:	193b      	adds	r3, r7, r4
 8008390:	185b      	adds	r3, r3, r1
 8008392:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008394:	193b      	adds	r3, r7, r4
 8008396:	22c4      	movs	r2, #196	; 0xc4
 8008398:	5a9b      	ldrh	r3, [r3, r2]
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	b290      	uxth	r0, r2
 800839e:	193a      	adds	r2, r7, r4
 80083a0:	21c4      	movs	r1, #196	; 0xc4
 80083a2:	5250      	strh	r0, [r2, r1]
 80083a4:	0019      	movs	r1, r3
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	193b      	adds	r3, r7, r4
 80083ac:	185b      	adds	r3, r3, r1
 80083ae:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	1218      	asrs	r0, r3, #8
 80083b4:	0025      	movs	r5, r4
 80083b6:	197b      	adds	r3, r7, r5
 80083b8:	22c4      	movs	r2, #196	; 0xc4
 80083ba:	5a9b      	ldrh	r3, [r3, r2]
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	b294      	uxth	r4, r2
 80083c0:	197a      	adds	r2, r7, r5
 80083c2:	21c4      	movs	r1, #196	; 0xc4
 80083c4:	5254      	strh	r4, [r2, r1]
 80083c6:	0019      	movs	r1, r3
 80083c8:	b2c2      	uxtb	r2, r0
 80083ca:	002c      	movs	r4, r5
 80083cc:	193b      	adds	r3, r7, r4
 80083ce:	185b      	adds	r3, r3, r1
 80083d0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	1418      	asrs	r0, r3, #16
 80083d6:	0025      	movs	r5, r4
 80083d8:	197b      	adds	r3, r7, r5
 80083da:	22c4      	movs	r2, #196	; 0xc4
 80083dc:	5a9b      	ldrh	r3, [r3, r2]
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	b294      	uxth	r4, r2
 80083e2:	197a      	adds	r2, r7, r5
 80083e4:	21c4      	movs	r1, #196	; 0xc4
 80083e6:	5254      	strh	r4, [r2, r1]
 80083e8:	0019      	movs	r1, r3
 80083ea:	b2c2      	uxtb	r2, r0
 80083ec:	002c      	movs	r4, r5
 80083ee:	193b      	adds	r3, r7, r4
 80083f0:	185b      	adds	r3, r3, r1
 80083f2:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	1618      	asrs	r0, r3, #24
 80083f8:	0025      	movs	r5, r4
 80083fa:	197b      	adds	r3, r7, r5
 80083fc:	22c4      	movs	r2, #196	; 0xc4
 80083fe:	5a9b      	ldrh	r3, [r3, r2]
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	b294      	uxth	r4, r2
 8008404:	197a      	adds	r2, r7, r5
 8008406:	21c4      	movs	r1, #196	; 0xc4
 8008408:	5254      	strh	r4, [r2, r1]
 800840a:	0019      	movs	r1, r3
 800840c:	b2c2      	uxtb	r2, r0
 800840e:	0028      	movs	r0, r5
 8008410:	183b      	adds	r3, r7, r0
 8008412:	185b      	adds	r3, r3, r1
 8008414:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008416:	2308      	movs	r3, #8
 8008418:	18fa      	adds	r2, r7, r3
 800841a:	183b      	adds	r3, r7, r0
 800841c:	0011      	movs	r1, r2
 800841e:	0018      	movs	r0, r3
 8008420:	f000 ff10 	bl	8009244 <astronode_transport_send_receive>
 8008424:	0003      	movs	r3, r0
 8008426:	2b01      	cmp	r3, #1
 8008428:	d10e      	bne.n	8008448 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <astronode_send_geo_wr+0x174>)
 800842c:	199b      	adds	r3, r3, r6
 800842e:	19db      	adds	r3, r3, r7
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2bb5      	cmp	r3, #181	; 0xb5
 8008434:	d104      	bne.n	8008440 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <astronode_send_geo_wr+0x178>)
 8008438:	0018      	movs	r0, r3
 800843a:	f7fa fd3d 	bl	8002eb8 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800843e:	e003      	b.n	8008448 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8008440:	4b05      	ldr	r3, [pc, #20]	; (8008458 <astronode_send_geo_wr+0x17c>)
 8008442:	0018      	movs	r0, r3
 8008444:	f7fa fd38 	bl	8002eb8 <send_debug_logs>
}
 8008448:	46c0      	nop			; (mov r8, r8)
 800844a:	46bd      	mov	sp, r7
 800844c:	b067      	add	sp, #412	; 0x19c
 800844e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008450:	fffffe70 	.word	0xfffffe70
 8008454:	080135d8 	.word	0x080135d8
 8008458:	08013604 	.word	0x08013604

0800845c <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 800845c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800845e:	b0fb      	sub	sp, #492	; 0x1ec
 8008460:	af00      	add	r7, sp, #0
 8008462:	6039      	str	r1, [r7, #0]
 8008464:	0011      	movs	r1, r2
 8008466:	4b4a      	ldr	r3, [pc, #296]	; (8008590 <astronode_send_pld_er+0x134>)
 8008468:	26f4      	movs	r6, #244	; 0xf4
 800846a:	0076      	lsls	r6, r6, #1
 800846c:	199b      	adds	r3, r3, r6
 800846e:	19db      	adds	r3, r3, r7
 8008470:	1c02      	adds	r2, r0, #0
 8008472:	801a      	strh	r2, [r3, #0]
 8008474:	4b47      	ldr	r3, [pc, #284]	; (8008594 <astronode_send_pld_er+0x138>)
 8008476:	199b      	adds	r3, r3, r6
 8008478:	19db      	adds	r3, r3, r7
 800847a:	1c0a      	adds	r2, r1, #0
 800847c:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800847e:	2490      	movs	r4, #144	; 0x90
 8008480:	0064      	lsls	r4, r4, #1
 8008482:	193b      	adds	r3, r7, r4
 8008484:	0018      	movs	r0, r3
 8008486:	23c6      	movs	r3, #198	; 0xc6
 8008488:	001a      	movs	r2, r3
 800848a:	2100      	movs	r1, #0
 800848c:	f003 ff78 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 8008490:	4b41      	ldr	r3, [pc, #260]	; (8008598 <astronode_send_pld_er+0x13c>)
 8008492:	199b      	adds	r3, r3, r6
 8008494:	19db      	adds	r3, r3, r7
 8008496:	0018      	movs	r0, r3
 8008498:	23c6      	movs	r3, #198	; 0xc6
 800849a:	001a      	movs	r2, r3
 800849c:	2100      	movs	r1, #0
 800849e:	f003 ff6f 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80084a2:	193b      	adds	r3, r7, r4
 80084a4:	2225      	movs	r2, #37	; 0x25
 80084a6:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80084a8:	193b      	adds	r3, r7, r4
 80084aa:	22c4      	movs	r2, #196	; 0xc4
 80084ac:	5a9b      	ldrh	r3, [r3, r2]
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	b290      	uxth	r0, r2
 80084b2:	193a      	adds	r2, r7, r4
 80084b4:	21c4      	movs	r1, #196	; 0xc4
 80084b6:	5250      	strh	r0, [r2, r1]
 80084b8:	0019      	movs	r1, r3
 80084ba:	4b35      	ldr	r3, [pc, #212]	; (8008590 <astronode_send_pld_er+0x134>)
 80084bc:	199b      	adds	r3, r3, r6
 80084be:	19db      	adds	r3, r3, r7
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	193b      	adds	r3, r7, r4
 80084c6:	185b      	adds	r3, r3, r1
 80084c8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80084ca:	4b31      	ldr	r3, [pc, #196]	; (8008590 <astronode_send_pld_er+0x134>)
 80084cc:	199b      	adds	r3, r3, r6
 80084ce:	19db      	adds	r3, r3, r7
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	b298      	uxth	r0, r3
 80084d6:	0025      	movs	r5, r4
 80084d8:	197b      	adds	r3, r7, r5
 80084da:	22c4      	movs	r2, #196	; 0xc4
 80084dc:	5a9b      	ldrh	r3, [r3, r2]
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	b294      	uxth	r4, r2
 80084e2:	197a      	adds	r2, r7, r5
 80084e4:	21c4      	movs	r1, #196	; 0xc4
 80084e6:	5254      	strh	r4, [r2, r1]
 80084e8:	0019      	movs	r1, r3
 80084ea:	b2c2      	uxtb	r2, r0
 80084ec:	002c      	movs	r4, r5
 80084ee:	193b      	adds	r3, r7, r4
 80084f0:	185b      	adds	r3, r3, r1
 80084f2:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80084f4:	193b      	adds	r3, r7, r4
 80084f6:	22c4      	movs	r2, #196	; 0xc4
 80084f8:	5a9b      	ldrh	r3, [r3, r2]
 80084fa:	001a      	movs	r2, r3
 80084fc:	193b      	adds	r3, r7, r4
 80084fe:	189b      	adds	r3, r3, r2
 8008500:	1c58      	adds	r0, r3, #1
 8008502:	4b24      	ldr	r3, [pc, #144]	; (8008594 <astronode_send_pld_er+0x138>)
 8008504:	199b      	adds	r3, r3, r6
 8008506:	19db      	adds	r3, r3, r7
 8008508:	881a      	ldrh	r2, [r3, #0]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	0019      	movs	r1, r3
 800850e:	f004 f81c 	bl	800c54a <memcpy>
    request.payload_len = 2 + payload_length;
 8008512:	4b20      	ldr	r3, [pc, #128]	; (8008594 <astronode_send_pld_er+0x138>)
 8008514:	199b      	adds	r3, r3, r6
 8008516:	19db      	adds	r3, r3, r7
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	3302      	adds	r3, #2
 800851c:	b299      	uxth	r1, r3
 800851e:	193b      	adds	r3, r7, r4
 8008520:	22c4      	movs	r2, #196	; 0xc4
 8008522:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008524:	2358      	movs	r3, #88	; 0x58
 8008526:	18fa      	adds	r2, r7, r3
 8008528:	193b      	adds	r3, r7, r4
 800852a:	0011      	movs	r1, r2
 800852c:	0018      	movs	r0, r3
 800852e:	f000 fe89 	bl	8009244 <astronode_transport_send_receive>
 8008532:	0003      	movs	r3, r0
 8008534:	2b01      	cmp	r3, #1
 8008536:	d125      	bne.n	8008584 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8008538:	4b17      	ldr	r3, [pc, #92]	; (8008598 <astronode_send_pld_er+0x13c>)
 800853a:	199b      	adds	r3, r3, r6
 800853c:	19db      	adds	r3, r3, r7
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2ba5      	cmp	r3, #165	; 0xa5
 8008542:	d10f      	bne.n	8008564 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 8008544:	4b12      	ldr	r3, [pc, #72]	; (8008590 <astronode_send_pld_er+0x134>)
 8008546:	199b      	adds	r3, r3, r6
 8008548:	19db      	adds	r3, r3, r7
 800854a:	881a      	ldrh	r2, [r3, #0]
 800854c:	4913      	ldr	r1, [pc, #76]	; (800859c <astronode_send_pld_er+0x140>)
 800854e:	2408      	movs	r4, #8
 8008550:	193b      	adds	r3, r7, r4
 8008552:	0018      	movs	r0, r3
 8008554:	f003 fe7e 	bl	800c254 <sprintf>
            send_debug_logs ( s ) ;
 8008558:	193b      	adds	r3, r7, r4
 800855a:	0018      	movs	r0, r3
 800855c:	f7fa fcac 	bl	8002eb8 <send_debug_logs>
            return true ;
 8008560:	2301      	movs	r3, #1
 8008562:	e010      	b.n	8008586 <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 8008564:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <astronode_send_pld_er+0x134>)
 8008566:	22f4      	movs	r2, #244	; 0xf4
 8008568:	0052      	lsls	r2, r2, #1
 800856a:	189b      	adds	r3, r3, r2
 800856c:	19db      	adds	r3, r3, r7
 800856e:	881a      	ldrh	r2, [r3, #0]
 8008570:	490b      	ldr	r1, [pc, #44]	; (80085a0 <astronode_send_pld_er+0x144>)
 8008572:	2408      	movs	r4, #8
 8008574:	193b      	adds	r3, r7, r4
 8008576:	0018      	movs	r0, r3
 8008578:	f003 fe6c 	bl	800c254 <sprintf>
            send_debug_logs ( s ) ;
 800857c:	193b      	adds	r3, r7, r4
 800857e:	0018      	movs	r0, r3
 8008580:	f7fa fc9a 	bl	8002eb8 <send_debug_logs>
        }
    }
    return false ;
 8008584:	2300      	movs	r3, #0
}
 8008586:	0018      	movs	r0, r3
 8008588:	46bd      	mov	sp, r7
 800858a:	b07b      	add	sp, #492	; 0x1ec
 800858c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	fffffe1e 	.word	0xfffffe1e
 8008594:	fffffe1c 	.word	0xfffffe1c
 8008598:	fffffe70 	.word	0xfffffe70
 800859c:	0801367c 	.word	0x0801367c
 80085a0:	080136a8 	.word	0x080136a8

080085a4 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80085a4:	b5b0      	push	{r4, r5, r7, lr}
 80085a6:	b0e4      	sub	sp, #400	; 0x190
 80085a8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80085aa:	24c8      	movs	r4, #200	; 0xc8
 80085ac:	193b      	adds	r3, r7, r4
 80085ae:	0018      	movs	r0, r3
 80085b0:	23c6      	movs	r3, #198	; 0xc6
 80085b2:	001a      	movs	r2, r3
 80085b4:	2100      	movs	r1, #0
 80085b6:	f003 fee3 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 80085ba:	4b15      	ldr	r3, [pc, #84]	; (8008610 <astronode_send_pld_fr+0x6c>)
 80085bc:	25c8      	movs	r5, #200	; 0xc8
 80085be:	006d      	lsls	r5, r5, #1
 80085c0:	195b      	adds	r3, r3, r5
 80085c2:	19db      	adds	r3, r3, r7
 80085c4:	0018      	movs	r0, r3
 80085c6:	23c6      	movs	r3, #198	; 0xc6
 80085c8:	001a      	movs	r2, r3
 80085ca:	2100      	movs	r1, #0
 80085cc:	f003 fed8 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 80085d0:	193b      	adds	r3, r7, r4
 80085d2:	2227      	movs	r2, #39	; 0x27
 80085d4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80085d6:	003a      	movs	r2, r7
 80085d8:	193b      	adds	r3, r7, r4
 80085da:	0011      	movs	r1, r2
 80085dc:	0018      	movs	r0, r3
 80085de:	f000 fe31 	bl	8009244 <astronode_transport_send_receive>
 80085e2:	0003      	movs	r3, r0
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d10e      	bne.n	8008606 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80085e8:	4b09      	ldr	r3, [pc, #36]	; (8008610 <astronode_send_pld_fr+0x6c>)
 80085ea:	195b      	adds	r3, r3, r5
 80085ec:	19db      	adds	r3, r3, r7
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2ba7      	cmp	r3, #167	; 0xa7
 80085f2:	d104      	bne.n	80085fe <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <astronode_send_pld_fr+0x70>)
 80085f6:	0018      	movs	r0, r3
 80085f8:	f7fa fc5e 	bl	8002eb8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80085fc:	e003      	b.n	8008606 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80085fe:	4b06      	ldr	r3, [pc, #24]	; (8008618 <astronode_send_pld_fr+0x74>)
 8008600:	0018      	movs	r0, r3
 8008602:	f7fa fc59 	bl	8002eb8 <send_debug_logs>
}
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	46bd      	mov	sp, r7
 800860a:	b064      	add	sp, #400	; 0x190
 800860c:	bdb0      	pop	{r4, r5, r7, pc}
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	fffffe70 	.word	0xfffffe70
 8008614:	080136d8 	.word	0x080136d8
 8008618:	08013710 	.word	0x08013710

0800861c <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 800861c:	b5b0      	push	{r4, r5, r7, lr}
 800861e:	b0e4      	sub	sp, #400	; 0x190
 8008620:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008622:	24c8      	movs	r4, #200	; 0xc8
 8008624:	193b      	adds	r3, r7, r4
 8008626:	0018      	movs	r0, r3
 8008628:	23c6      	movs	r3, #198	; 0xc6
 800862a:	001a      	movs	r2, r3
 800862c:	2100      	movs	r1, #0
 800862e:	f003 fea7 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 8008632:	4b16      	ldr	r3, [pc, #88]	; (800868c <astronode_send_res_cr+0x70>)
 8008634:	25c8      	movs	r5, #200	; 0xc8
 8008636:	006d      	lsls	r5, r5, #1
 8008638:	195b      	adds	r3, r3, r5
 800863a:	19db      	adds	r3, r3, r7
 800863c:	0018      	movs	r0, r3
 800863e:	23c6      	movs	r3, #198	; 0xc6
 8008640:	001a      	movs	r2, r3
 8008642:	2100      	movs	r1, #0
 8008644:	f003 fe9c 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8008648:	193b      	adds	r3, r7, r4
 800864a:	2255      	movs	r2, #85	; 0x55
 800864c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800864e:	003a      	movs	r2, r7
 8008650:	193b      	adds	r3, r7, r4
 8008652:	0011      	movs	r1, r2
 8008654:	0018      	movs	r0, r3
 8008656:	f000 fdf5 	bl	8009244 <astronode_transport_send_receive>
 800865a:	0003      	movs	r3, r0
 800865c:	2b01      	cmp	r3, #1
 800865e:	d111      	bne.n	8008684 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8008660:	4b0a      	ldr	r3, [pc, #40]	; (800868c <astronode_send_res_cr+0x70>)
 8008662:	195b      	adds	r3, r3, r5
 8008664:	19db      	adds	r3, r3, r7
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2bd5      	cmp	r3, #213	; 0xd5
 800866a:	d107      	bne.n	800867c <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 800866c:	4b08      	ldr	r3, [pc, #32]	; (8008690 <astronode_send_res_cr+0x74>)
 800866e:	2200      	movs	r2, #0
 8008670:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8008672:	4b08      	ldr	r3, [pc, #32]	; (8008694 <astronode_send_res_cr+0x78>)
 8008674:	0018      	movs	r0, r3
 8008676:	f7fa fc1f 	bl	8002eb8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 800867a:	e003      	b.n	8008684 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <astronode_send_res_cr+0x7c>)
 800867e:	0018      	movs	r0, r3
 8008680:	f7fa fc1a 	bl	8002eb8 <send_debug_logs>
}
 8008684:	46c0      	nop			; (mov r8, r8)
 8008686:	46bd      	mov	sp, r7
 8008688:	b064      	add	sp, #400	; 0x190
 800868a:	bdb0      	pop	{r4, r5, r7, pc}
 800868c:	fffffe70 	.word	0xfffffe70
 8008690:	20000bbd 	.word	0x20000bbd
 8008694:	0801374c 	.word	0x0801374c
 8008698:	08013780 	.word	0x08013780

0800869c <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 800869c:	b5b0      	push	{r4, r5, r7, lr}
 800869e:	b0fa      	sub	sp, #488	; 0x1e8
 80086a0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80086a2:	258e      	movs	r5, #142	; 0x8e
 80086a4:	006d      	lsls	r5, r5, #1
 80086a6:	197b      	adds	r3, r7, r5
 80086a8:	0018      	movs	r0, r3
 80086aa:	23c6      	movs	r3, #198	; 0xc6
 80086ac:	001a      	movs	r2, r3
 80086ae:	2100      	movs	r1, #0
 80086b0:	f003 fe66 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0} ;
 80086b4:	4b28      	ldr	r3, [pc, #160]	; (8008758 <astronode_send_rtc_rr+0xbc>)
 80086b6:	24f4      	movs	r4, #244	; 0xf4
 80086b8:	0064      	lsls	r4, r4, #1
 80086ba:	191b      	adds	r3, r3, r4
 80086bc:	19db      	adds	r3, r3, r7
 80086be:	0018      	movs	r0, r3
 80086c0:	23c6      	movs	r3, #198	; 0xc6
 80086c2:	001a      	movs	r2, r3
 80086c4:	2100      	movs	r1, #0
 80086c6:	f003 fe5b 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80086ca:	197b      	adds	r3, r7, r5
 80086cc:	2217      	movs	r2, #23
 80086ce:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80086d0:	2354      	movs	r3, #84	; 0x54
 80086d2:	18fa      	adds	r2, r7, r3
 80086d4:	197b      	adds	r3, r7, r5
 80086d6:	0011      	movs	r1, r2
 80086d8:	0018      	movs	r0, r3
 80086da:	f000 fdb3 	bl	8009244 <astronode_transport_send_receive>
 80086de:	0003      	movs	r3, r0
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d133      	bne.n	800874c <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80086e4:	4b1c      	ldr	r3, [pc, #112]	; (8008758 <astronode_send_rtc_rr+0xbc>)
 80086e6:	0021      	movs	r1, r4
 80086e8:	185b      	adds	r3, r3, r1
 80086ea:	19db      	adds	r3, r3, r7
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b97      	cmp	r3, #151	; 0x97
 80086f0:	d128      	bne.n	8008744 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80086f2:	4b19      	ldr	r3, [pc, #100]	; (8008758 <astronode_send_rtc_rr+0xbc>)
 80086f4:	185b      	adds	r3, r3, r1
 80086f6:	19db      	adds	r3, r3, r7
 80086f8:	785b      	ldrb	r3, [r3, #1]
 80086fa:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 80086fc:	4b16      	ldr	r3, [pc, #88]	; (8008758 <astronode_send_rtc_rr+0xbc>)
 80086fe:	185b      	adds	r3, r3, r1
 8008700:	19db      	adds	r3, r3, r7
 8008702:	789b      	ldrb	r3, [r3, #2]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008708:	4b13      	ldr	r3, [pc, #76]	; (8008758 <astronode_send_rtc_rr+0xbc>)
 800870a:	185b      	adds	r3, r3, r1
 800870c:	19db      	adds	r3, r3, r7
 800870e:	78db      	ldrb	r3, [r3, #3]
 8008710:	041b      	lsls	r3, r3, #16
 8008712:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008714:	4b10      	ldr	r3, [pc, #64]	; (8008758 <astronode_send_rtc_rr+0xbc>)
 8008716:	185b      	adds	r3, r3, r1
 8008718:	19db      	adds	r3, r3, r7
 800871a:	791b      	ldrb	r3, [r3, #4]
 800871c:	061b      	lsls	r3, r3, #24
 800871e:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008720:	24f2      	movs	r4, #242	; 0xf2
 8008722:	0064      	lsls	r4, r4, #1
 8008724:	193a      	adds	r2, r7, r4
 8008726:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8008728:	193b      	adds	r3, r7, r4
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	490b      	ldr	r1, [pc, #44]	; (800875c <astronode_send_rtc_rr+0xc0>)
 800872e:	1d3b      	adds	r3, r7, #4
 8008730:	0018      	movs	r0, r3
 8008732:	f003 fd8f 	bl	800c254 <sprintf>
            send_debug_logs ( str ) ;
 8008736:	1d3b      	adds	r3, r7, #4
 8008738:	0018      	movs	r0, r3
 800873a:	f7fa fbbd 	bl	8002eb8 <send_debug_logs>
            return rtc_time ;
 800873e:	193b      	adds	r3, r7, r4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	e004      	b.n	800874e <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008744:	4b06      	ldr	r3, [pc, #24]	; (8008760 <astronode_send_rtc_rr+0xc4>)
 8008746:	0018      	movs	r0, r3
 8008748:	f7fa fbb6 	bl	8002eb8 <send_debug_logs>
        }
    }
    return 0 ;
 800874c:	2300      	movs	r3, #0
}
 800874e:	0018      	movs	r0, r3
 8008750:	46bd      	mov	sp, r7
 8008752:	b07a      	add	sp, #488	; 0x1e8
 8008754:	bdb0      	pop	{r4, r5, r7, pc}
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	fffffe6c 	.word	0xfffffe6c
 800875c:	080137ac 	.word	0x080137ac
 8008760:	080137ec 	.word	0x080137ec

08008764 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8008764:	b5b0      	push	{r4, r5, r7, lr}
 8008766:	b0f8      	sub	sp, #480	; 0x1e0
 8008768:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800876a:	258c      	movs	r5, #140	; 0x8c
 800876c:	006d      	lsls	r5, r5, #1
 800876e:	197b      	adds	r3, r7, r5
 8008770:	0018      	movs	r0, r3
 8008772:	23c6      	movs	r3, #198	; 0xc6
 8008774:	001a      	movs	r2, r3
 8008776:	2100      	movs	r1, #0
 8008778:	f003 fe02 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 800877c:	4b21      	ldr	r3, [pc, #132]	; (8008804 <astronode_send_sak_rr+0xa0>)
 800877e:	24f0      	movs	r4, #240	; 0xf0
 8008780:	0064      	lsls	r4, r4, #1
 8008782:	191b      	adds	r3, r3, r4
 8008784:	19db      	adds	r3, r3, r7
 8008786:	0018      	movs	r0, r3
 8008788:	23c6      	movs	r3, #198	; 0xc6
 800878a:	001a      	movs	r2, r3
 800878c:	2100      	movs	r1, #0
 800878e:	f003 fdf7 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8008792:	197b      	adds	r3, r7, r5
 8008794:	2245      	movs	r2, #69	; 0x45
 8008796:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008798:	2350      	movs	r3, #80	; 0x50
 800879a:	18fa      	adds	r2, r7, r3
 800879c:	197b      	adds	r3, r7, r5
 800879e:	0011      	movs	r1, r2
 80087a0:	0018      	movs	r0, r3
 80087a2:	f000 fd4f 	bl	8009244 <astronode_transport_send_receive>
 80087a6:	0003      	movs	r3, r0
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d126      	bne.n	80087fa <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80087ac:	4b15      	ldr	r3, [pc, #84]	; (8008804 <astronode_send_sak_rr+0xa0>)
 80087ae:	191b      	adds	r3, r3, r4
 80087b0:	19db      	adds	r3, r3, r7
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2bc5      	cmp	r3, #197	; 0xc5
 80087b6:	d11c      	bne.n	80087f2 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80087b8:	4b12      	ldr	r3, [pc, #72]	; (8008804 <astronode_send_sak_rr+0xa0>)
 80087ba:	191b      	adds	r3, r3, r4
 80087bc:	19db      	adds	r3, r3, r7
 80087be:	785b      	ldrb	r3, [r3, #1]
 80087c0:	b299      	uxth	r1, r3
 80087c2:	4b10      	ldr	r3, [pc, #64]	; (8008804 <astronode_send_sak_rr+0xa0>)
 80087c4:	191b      	adds	r3, r3, r4
 80087c6:	19db      	adds	r3, r3, r7
 80087c8:	789b      	ldrb	r3, [r3, #2]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	20ef      	movs	r0, #239	; 0xef
 80087d2:	0040      	lsls	r0, r0, #1
 80087d4:	183b      	adds	r3, r7, r0
 80087d6:	188a      	adds	r2, r1, r2
 80087d8:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80087da:	183b      	adds	r3, r7, r0
 80087dc:	881a      	ldrh	r2, [r3, #0]
 80087de:	490a      	ldr	r1, [pc, #40]	; (8008808 <astronode_send_sak_rr+0xa4>)
 80087e0:	003b      	movs	r3, r7
 80087e2:	0018      	movs	r0, r3
 80087e4:	f003 fd36 	bl	800c254 <sprintf>
            send_debug_logs(str);
 80087e8:	003b      	movs	r3, r7
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7fa fb64 	bl	8002eb8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80087f0:	e003      	b.n	80087fa <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80087f2:	4b06      	ldr	r3, [pc, #24]	; (800880c <astronode_send_sak_rr+0xa8>)
 80087f4:	0018      	movs	r0, r3
 80087f6:	f7fa fb5f 	bl	8002eb8 <send_debug_logs>
}
 80087fa:	46c0      	nop			; (mov r8, r8)
 80087fc:	46bd      	mov	sp, r7
 80087fe:	b078      	add	sp, #480	; 0x1e0
 8008800:	bdb0      	pop	{r4, r5, r7, pc}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	fffffe70 	.word	0xfffffe70
 8008808:	08013808 	.word	0x08013808
 800880c:	08013834 	.word	0x08013834

08008810 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008810:	b5b0      	push	{r4, r5, r7, lr}
 8008812:	b0e4      	sub	sp, #400	; 0x190
 8008814:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008816:	24c8      	movs	r4, #200	; 0xc8
 8008818:	193b      	adds	r3, r7, r4
 800881a:	0018      	movs	r0, r3
 800881c:	23c6      	movs	r3, #198	; 0xc6
 800881e:	001a      	movs	r2, r3
 8008820:	2100      	movs	r1, #0
 8008822:	f003 fdad 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 8008826:	4b16      	ldr	r3, [pc, #88]	; (8008880 <astronode_send_sak_cr+0x70>)
 8008828:	25c8      	movs	r5, #200	; 0xc8
 800882a:	006d      	lsls	r5, r5, #1
 800882c:	195b      	adds	r3, r3, r5
 800882e:	19db      	adds	r3, r3, r7
 8008830:	0018      	movs	r0, r3
 8008832:	23c6      	movs	r3, #198	; 0xc6
 8008834:	001a      	movs	r2, r3
 8008836:	2100      	movs	r1, #0
 8008838:	f003 fda2 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 800883c:	193b      	adds	r3, r7, r4
 800883e:	2246      	movs	r2, #70	; 0x46
 8008840:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008842:	003a      	movs	r2, r7
 8008844:	193b      	adds	r3, r7, r4
 8008846:	0011      	movs	r1, r2
 8008848:	0018      	movs	r0, r3
 800884a:	f000 fcfb 	bl	8009244 <astronode_transport_send_receive>
 800884e:	0003      	movs	r3, r0
 8008850:	2b01      	cmp	r3, #1
 8008852:	d111      	bne.n	8008878 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008854:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <astronode_send_sak_cr+0x70>)
 8008856:	195b      	adds	r3, r3, r5
 8008858:	19db      	adds	r3, r3, r7
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2bc6      	cmp	r3, #198	; 0xc6
 800885e:	d107      	bne.n	8008870 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8008860:	4b08      	ldr	r3, [pc, #32]	; (8008884 <astronode_send_sak_cr+0x74>)
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8008866:	4b08      	ldr	r3, [pc, #32]	; (8008888 <astronode_send_sak_cr+0x78>)
 8008868:	0018      	movs	r0, r3
 800886a:	f7fa fb25 	bl	8002eb8 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 800886e:	e003      	b.n	8008878 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <astronode_send_sak_cr+0x7c>)
 8008872:	0018      	movs	r0, r3
 8008874:	f7fa fb20 	bl	8002eb8 <send_debug_logs>
}
 8008878:	46c0      	nop			; (mov r8, r8)
 800887a:	46bd      	mov	sp, r7
 800887c:	b064      	add	sp, #400	; 0x190
 800887e:	bdb0      	pop	{r4, r5, r7, pc}
 8008880:	fffffe70 	.word	0xfffffe70
 8008884:	20000bbc 	.word	0x20000bbc
 8008888:	08013868 	.word	0x08013868
 800888c:	08013890 	.word	0x08013890

08008890 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008892:	b0ed      	sub	sp, #436	; 0x1b4
 8008894:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008896:	21c8      	movs	r1, #200	; 0xc8
 8008898:	2318      	movs	r3, #24
 800889a:	18cb      	adds	r3, r1, r3
 800889c:	19db      	adds	r3, r3, r7
 800889e:	0018      	movs	r0, r3
 80088a0:	23c6      	movs	r3, #198	; 0xc6
 80088a2:	001a      	movs	r2, r3
 80088a4:	2100      	movs	r1, #0
 80088a6:	f003 fd6b 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 80088aa:	4b4a      	ldr	r3, [pc, #296]	; (80089d4 <astronode_send_mpn_rr+0x144>)
 80088ac:	26cc      	movs	r6, #204	; 0xcc
 80088ae:	0076      	lsls	r6, r6, #1
 80088b0:	199b      	adds	r3, r3, r6
 80088b2:	2218      	movs	r2, #24
 80088b4:	4694      	mov	ip, r2
 80088b6:	44bc      	add	ip, r7
 80088b8:	4463      	add	r3, ip
 80088ba:	0018      	movs	r0, r3
 80088bc:	23c6      	movs	r3, #198	; 0xc6
 80088be:	001a      	movs	r2, r3
 80088c0:	2100      	movs	r1, #0
 80088c2:	f003 fd5d 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80088c6:	21c8      	movs	r1, #200	; 0xc8
 80088c8:	2318      	movs	r3, #24
 80088ca:	18cb      	adds	r3, r1, r3
 80088cc:	19db      	adds	r3, r3, r7
 80088ce:	221b      	movs	r2, #27
 80088d0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80088d2:	2318      	movs	r3, #24
 80088d4:	18fa      	adds	r2, r7, r3
 80088d6:	2318      	movs	r3, #24
 80088d8:	18cb      	adds	r3, r1, r3
 80088da:	19db      	adds	r3, r3, r7
 80088dc:	0011      	movs	r1, r2
 80088de:	0018      	movs	r0, r3
 80088e0:	f000 fcb0 	bl	8009244 <astronode_transport_send_receive>
 80088e4:	0003      	movs	r3, r0
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d16f      	bne.n	80089ca <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80088ea:	4b3a      	ldr	r3, [pc, #232]	; (80089d4 <astronode_send_mpn_rr+0x144>)
 80088ec:	0032      	movs	r2, r6
 80088ee:	189b      	adds	r3, r3, r2
 80088f0:	2118      	movs	r1, #24
 80088f2:	468c      	mov	ip, r1
 80088f4:	44bc      	add	ip, r7
 80088f6:	4463      	add	r3, ip
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b9b      	cmp	r3, #155	; 0x9b
 80088fc:	d161      	bne.n	80089c2 <astronode_send_mpn_rr+0x132>
        {
 80088fe:	466b      	mov	r3, sp
 8008900:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8008902:	4b34      	ldr	r3, [pc, #208]	; (80089d4 <astronode_send_mpn_rr+0x144>)
 8008904:	189b      	adds	r3, r3, r2
 8008906:	2218      	movs	r2, #24
 8008908:	4694      	mov	ip, r2
 800890a:	44bc      	add	ip, r7
 800890c:	4463      	add	r3, ip
 800890e:	22c4      	movs	r2, #196	; 0xc4
 8008910:	5a9b      	ldrh	r3, [r3, r2]
 8008912:	001a      	movs	r2, r3
 8008914:	3a01      	subs	r2, #1
 8008916:	21ca      	movs	r1, #202	; 0xca
 8008918:	0049      	lsls	r1, r1, #1
 800891a:	2018      	movs	r0, #24
 800891c:	1809      	adds	r1, r1, r0
 800891e:	19c9      	adds	r1, r1, r7
 8008920:	600a      	str	r2, [r1, #0]
 8008922:	001c      	movs	r4, r3
 8008924:	2200      	movs	r2, #0
 8008926:	0015      	movs	r5, r2
 8008928:	0020      	movs	r0, r4
 800892a:	0029      	movs	r1, r5
 800892c:	0004      	movs	r4, r0
 800892e:	0f62      	lsrs	r2, r4, #29
 8008930:	000c      	movs	r4, r1
 8008932:	00e4      	lsls	r4, r4, #3
 8008934:	617c      	str	r4, [r7, #20]
 8008936:	697c      	ldr	r4, [r7, #20]
 8008938:	4314      	orrs	r4, r2
 800893a:	617c      	str	r4, [r7, #20]
 800893c:	0001      	movs	r1, r0
 800893e:	00c9      	lsls	r1, r1, #3
 8008940:	6139      	str	r1, [r7, #16]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	2200      	movs	r2, #0
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	6838      	ldr	r0, [r7, #0]
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	0004      	movs	r4, r0
 800894e:	0f62      	lsrs	r2, r4, #29
 8008950:	000c      	movs	r4, r1
 8008952:	00e4      	lsls	r4, r4, #3
 8008954:	60fc      	str	r4, [r7, #12]
 8008956:	68fc      	ldr	r4, [r7, #12]
 8008958:	4314      	orrs	r4, r2
 800895a:	60fc      	str	r4, [r7, #12]
 800895c:	0001      	movs	r1, r0
 800895e:	00ca      	lsls	r2, r1, #3
 8008960:	60ba      	str	r2, [r7, #8]
 8008962:	3307      	adds	r3, #7
 8008964:	08db      	lsrs	r3, r3, #3
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4669      	mov	r1, sp
 800896a:	1acb      	subs	r3, r1, r3
 800896c:	469d      	mov	sp, r3
 800896e:	466b      	mov	r3, sp
 8008970:	3300      	adds	r3, #0
 8008972:	24c8      	movs	r4, #200	; 0xc8
 8008974:	0064      	lsls	r4, r4, #1
 8008976:	2218      	movs	r2, #24
 8008978:	18a2      	adds	r2, r4, r2
 800897a:	19d1      	adds	r1, r2, r7
 800897c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 800897e:	4b16      	ldr	r3, [pc, #88]	; (80089d8 <astronode_send_mpn_rr+0x148>)
 8008980:	0018      	movs	r0, r3
 8008982:	f7fa fa99 	bl	8002eb8 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008986:	4b13      	ldr	r3, [pc, #76]	; (80089d4 <astronode_send_mpn_rr+0x144>)
 8008988:	22cc      	movs	r2, #204	; 0xcc
 800898a:	0052      	lsls	r2, r2, #1
 800898c:	189b      	adds	r3, r3, r2
 800898e:	2218      	movs	r2, #24
 8008990:	4694      	mov	ip, r2
 8008992:	44bc      	add	ip, r7
 8008994:	4463      	add	r3, ip
 8008996:	22c4      	movs	r2, #196	; 0xc4
 8008998:	5a9b      	ldrh	r3, [r3, r2]
 800899a:	0019      	movs	r1, r3
 800899c:	2318      	movs	r3, #24
 800899e:	18fb      	adds	r3, r7, r3
 80089a0:	3301      	adds	r3, #1
 80089a2:	4a0e      	ldr	r2, [pc, #56]	; (80089dc <astronode_send_mpn_rr+0x14c>)
 80089a4:	2018      	movs	r0, #24
 80089a6:	1820      	adds	r0, r4, r0
 80089a8:	19c0      	adds	r0, r0, r7
 80089aa:	6800      	ldr	r0, [r0, #0]
 80089ac:	f003 fc1e 	bl	800c1ec <snprintf>
            send_debug_logs(product_number);
 80089b0:	2318      	movs	r3, #24
 80089b2:	18e3      	adds	r3, r4, r3
 80089b4:	19db      	adds	r3, r3, r7
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	0018      	movs	r0, r3
 80089ba:	f7fa fa7d 	bl	8002eb8 <send_debug_logs>
 80089be:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80089c0:	e003      	b.n	80089ca <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80089c2:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <astronode_send_mpn_rr+0x150>)
 80089c4:	0018      	movs	r0, r3
 80089c6:	f7fa fa77 	bl	8002eb8 <send_debug_logs>
}
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	46bd      	mov	sp, r7
 80089ce:	b06d      	add	sp, #436	; 0x1b4
 80089d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	fffffe68 	.word	0xfffffe68
 80089d8:	08013958 	.word	0x08013958
 80089dc:	08013490 	.word	0x08013490
 80089e0:	080134cc 	.word	0x080134cc

080089e4 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80089e4:	b5b0      	push	{r4, r5, r7, lr}
 80089e6:	b0e4      	sub	sp, #400	; 0x190
 80089e8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80089ea:	24c8      	movs	r4, #200	; 0xc8
 80089ec:	193b      	adds	r3, r7, r4
 80089ee:	0018      	movs	r0, r3
 80089f0:	23c6      	movs	r3, #198	; 0xc6
 80089f2:	001a      	movs	r2, r3
 80089f4:	2100      	movs	r1, #0
 80089f6:	f003 fcc3 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 80089fa:	4b16      	ldr	r3, [pc, #88]	; (8008a54 <astronode_send_cmd_cr+0x70>)
 80089fc:	25c8      	movs	r5, #200	; 0xc8
 80089fe:	006d      	lsls	r5, r5, #1
 8008a00:	195b      	adds	r3, r3, r5
 8008a02:	19db      	adds	r3, r3, r7
 8008a04:	0018      	movs	r0, r3
 8008a06:	23c6      	movs	r3, #198	; 0xc6
 8008a08:	001a      	movs	r2, r3
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	f003 fcb8 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008a10:	193b      	adds	r3, r7, r4
 8008a12:	2248      	movs	r2, #72	; 0x48
 8008a14:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a16:	003a      	movs	r2, r7
 8008a18:	193b      	adds	r3, r7, r4
 8008a1a:	0011      	movs	r1, r2
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f000 fc11 	bl	8009244 <astronode_transport_send_receive>
 8008a22:	0003      	movs	r3, r0
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d111      	bne.n	8008a4c <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008a28:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <astronode_send_cmd_cr+0x70>)
 8008a2a:	195b      	adds	r3, r3, r5
 8008a2c:	19db      	adds	r3, r3, r7
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2bc8      	cmp	r3, #200	; 0xc8
 8008a32:	d107      	bne.n	8008a44 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008a34:	4b08      	ldr	r3, [pc, #32]	; (8008a58 <astronode_send_cmd_cr+0x74>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008a3a:	4b08      	ldr	r3, [pc, #32]	; (8008a5c <astronode_send_cmd_cr+0x78>)
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7fa fa3b 	bl	8002eb8 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008a42:	e003      	b.n	8008a4c <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008a44:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <astronode_send_cmd_cr+0x7c>)
 8008a46:	0018      	movs	r0, r3
 8008a48:	f7fa fa36 	bl	8002eb8 <send_debug_logs>
}
 8008a4c:	46c0      	nop			; (mov r8, r8)
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	b064      	add	sp, #400	; 0x190
 8008a52:	bdb0      	pop	{r4, r5, r7, pc}
 8008a54:	fffffe70 	.word	0xfffffe70
 8008a58:	20000bbe 	.word	0x20000bbe
 8008a5c:	08013da8 	.word	0x08013da8
 8008a60:	08013dcc 	.word	0x08013dcc

08008a64 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8008a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a66:	4cac      	ldr	r4, [pc, #688]	; (8008d18 <astronode_send_cmd_rr+0x2b4>)
 8008a68:	44a5      	add	sp, r4
 8008a6a:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008a6c:	218c      	movs	r1, #140	; 0x8c
 8008a6e:	0049      	lsls	r1, r1, #1
 8008a70:	2318      	movs	r3, #24
 8008a72:	18cb      	adds	r3, r1, r3
 8008a74:	19db      	adds	r3, r3, r7
 8008a76:	0018      	movs	r0, r3
 8008a78:	23c6      	movs	r3, #198	; 0xc6
 8008a7a:	001a      	movs	r2, r3
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	f003 fc7f 	bl	800c380 <memset>
    astronode_app_msg_t answer = {0};
 8008a82:	4ba6      	ldr	r3, [pc, #664]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008a84:	26f8      	movs	r6, #248	; 0xf8
 8008a86:	0076      	lsls	r6, r6, #1
 8008a88:	199b      	adds	r3, r3, r6
 8008a8a:	2218      	movs	r2, #24
 8008a8c:	4694      	mov	ip, r2
 8008a8e:	44bc      	add	ip, r7
 8008a90:	4463      	add	r3, ip
 8008a92:	0018      	movs	r0, r3
 8008a94:	23c6      	movs	r3, #198	; 0xc6
 8008a96:	001a      	movs	r2, r3
 8008a98:	2100      	movs	r1, #0
 8008a9a:	f003 fc71 	bl	800c380 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008a9e:	218c      	movs	r1, #140	; 0x8c
 8008aa0:	0049      	lsls	r1, r1, #1
 8008aa2:	2318      	movs	r3, #24
 8008aa4:	18cb      	adds	r3, r1, r3
 8008aa6:	19db      	adds	r3, r3, r7
 8008aa8:	2247      	movs	r2, #71	; 0x47
 8008aaa:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008aac:	2350      	movs	r3, #80	; 0x50
 8008aae:	2218      	movs	r2, #24
 8008ab0:	189b      	adds	r3, r3, r2
 8008ab2:	19da      	adds	r2, r3, r7
 8008ab4:	2318      	movs	r3, #24
 8008ab6:	18cb      	adds	r3, r1, r3
 8008ab8:	19db      	adds	r3, r3, r7
 8008aba:	0011      	movs	r1, r2
 8008abc:	0018      	movs	r0, r3
 8008abe:	f000 fbc1 	bl	8009244 <astronode_transport_send_receive>
 8008ac2:	0003      	movs	r3, r0
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d000      	beq.n	8008aca <astronode_send_cmd_rr+0x66>
 8008ac8:	e121      	b.n	8008d0e <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008aca:	4b94      	ldr	r3, [pc, #592]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008acc:	199b      	adds	r3, r3, r6
 8008ace:	2218      	movs	r2, #24
 8008ad0:	4694      	mov	ip, r2
 8008ad2:	44bc      	add	ip, r7
 8008ad4:	4463      	add	r3, ip
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2bc7      	cmp	r3, #199	; 0xc7
 8008ada:	d000      	beq.n	8008ade <astronode_send_cmd_rr+0x7a>
 8008adc:	e113      	b.n	8008d06 <astronode_send_cmd_rr+0x2a2>
        {
 8008ade:	466b      	mov	r3, sp
 8008ae0:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008ae2:	4b8f      	ldr	r3, [pc, #572]	; (8008d20 <astronode_send_cmd_rr+0x2bc>)
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f7fa f9e7 	bl	8002eb8 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008aea:	4b8c      	ldr	r3, [pc, #560]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008aec:	21f8      	movs	r1, #248	; 0xf8
 8008aee:	0049      	lsls	r1, r1, #1
 8008af0:	185b      	adds	r3, r3, r1
 8008af2:	2218      	movs	r2, #24
 8008af4:	4694      	mov	ip, r2
 8008af6:	44bc      	add	ip, r7
 8008af8:	4463      	add	r3, ip
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008afe:	4b87      	ldr	r3, [pc, #540]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008b00:	185b      	adds	r3, r3, r1
 8008b02:	2018      	movs	r0, #24
 8008b04:	4684      	mov	ip, r0
 8008b06:	44bc      	add	ip, r7
 8008b08:	4463      	add	r3, ip
 8008b0a:	789b      	ldrb	r3, [r3, #2]
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008b10:	4b82      	ldr	r3, [pc, #520]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008b12:	185b      	adds	r3, r3, r1
 8008b14:	2018      	movs	r0, #24
 8008b16:	4684      	mov	ip, r0
 8008b18:	44bc      	add	ip, r7
 8008b1a:	4463      	add	r3, ip
 8008b1c:	78db      	ldrb	r3, [r3, #3]
 8008b1e:	041b      	lsls	r3, r3, #16
 8008b20:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008b22:	4b7e      	ldr	r3, [pc, #504]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008b24:	185b      	adds	r3, r3, r1
 8008b26:	2118      	movs	r1, #24
 8008b28:	468c      	mov	ip, r1
 8008b2a:	44bc      	add	ip, r7
 8008b2c:	4463      	add	r3, ip
 8008b2e:	791b      	ldrb	r3, [r3, #4]
 8008b30:	061b      	lsls	r3, r3, #24
 8008b32:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008b34:	22f4      	movs	r2, #244	; 0xf4
 8008b36:	0052      	lsls	r2, r2, #1
 8008b38:	2118      	movs	r1, #24
 8008b3a:	1851      	adds	r1, r2, r1
 8008b3c:	19c8      	adds	r0, r1, r7
 8008b3e:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008b40:	2318      	movs	r3, #24
 8008b42:	18d3      	adds	r3, r2, r3
 8008b44:	19db      	adds	r3, r3, r7
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	4976      	ldr	r1, [pc, #472]	; (8008d24 <astronode_send_cmd_rr+0x2c0>)
 8008b4a:	2318      	movs	r3, #24
 8008b4c:	18fb      	adds	r3, r7, r3
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f003 fb80 	bl	800c254 <sprintf>
            send_debug_logs(str);
 8008b54:	2318      	movs	r3, #24
 8008b56:	18fb      	adds	r3, r7, r3
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f7fa f9ad 	bl	8002eb8 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008b5e:	4b6f      	ldr	r3, [pc, #444]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008b60:	21f8      	movs	r1, #248	; 0xf8
 8008b62:	0049      	lsls	r1, r1, #1
 8008b64:	185b      	adds	r3, r3, r1
 8008b66:	2218      	movs	r2, #24
 8008b68:	4694      	mov	ip, r2
 8008b6a:	44bc      	add	ip, r7
 8008b6c:	4463      	add	r3, ip
 8008b6e:	22c4      	movs	r2, #196	; 0xc4
 8008b70:	5a9b      	ldrh	r3, [r3, r2]
 8008b72:	2b2c      	cmp	r3, #44	; 0x2c
 8008b74:	d00e      	beq.n	8008b94 <astronode_send_cmd_rr+0x130>
 8008b76:	4b69      	ldr	r3, [pc, #420]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008b78:	185b      	adds	r3, r3, r1
 8008b7a:	2218      	movs	r2, #24
 8008b7c:	4694      	mov	ip, r2
 8008b7e:	44bc      	add	ip, r7
 8008b80:	4463      	add	r3, ip
 8008b82:	22c4      	movs	r2, #196	; 0xc4
 8008b84:	5a9b      	ldrh	r3, [r3, r2]
 8008b86:	2b0c      	cmp	r3, #12
 8008b88:	d004      	beq.n	8008b94 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008b8a:	4b67      	ldr	r3, [pc, #412]	; (8008d28 <astronode_send_cmd_rr+0x2c4>)
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f7fa f993 	bl	8002eb8 <send_debug_logs>
                return;
 8008b92:	e0b6      	b.n	8008d02 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008b94:	4b61      	ldr	r3, [pc, #388]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008b96:	22f8      	movs	r2, #248	; 0xf8
 8008b98:	0052      	lsls	r2, r2, #1
 8008b9a:	189b      	adds	r3, r3, r2
 8008b9c:	2218      	movs	r2, #24
 8008b9e:	4694      	mov	ip, r2
 8008ba0:	44bc      	add	ip, r7
 8008ba2:	4463      	add	r3, ip
 8008ba4:	22c4      	movs	r2, #196	; 0xc4
 8008ba6:	5a9b      	ldrh	r3, [r3, r2]
 8008ba8:	001a      	movs	r2, r3
 8008baa:	3a01      	subs	r2, #1
 8008bac:	21f2      	movs	r1, #242	; 0xf2
 8008bae:	0049      	lsls	r1, r1, #1
 8008bb0:	2018      	movs	r0, #24
 8008bb2:	1809      	adds	r1, r1, r0
 8008bb4:	19c9      	adds	r1, r1, r7
 8008bb6:	600a      	str	r2, [r1, #0]
 8008bb8:	001c      	movs	r4, r3
 8008bba:	2200      	movs	r2, #0
 8008bbc:	0015      	movs	r5, r2
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	0029      	movs	r1, r5
 8008bc2:	0004      	movs	r4, r0
 8008bc4:	0f62      	lsrs	r2, r4, #29
 8008bc6:	000c      	movs	r4, r1
 8008bc8:	00e4      	lsls	r4, r4, #3
 8008bca:	617c      	str	r4, [r7, #20]
 8008bcc:	697c      	ldr	r4, [r7, #20]
 8008bce:	4314      	orrs	r4, r2
 8008bd0:	617c      	str	r4, [r7, #20]
 8008bd2:	0001      	movs	r1, r0
 8008bd4:	00c9      	lsls	r1, r1, #3
 8008bd6:	6139      	str	r1, [r7, #16]
 8008bd8:	603b      	str	r3, [r7, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	6838      	ldr	r0, [r7, #0]
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	0004      	movs	r4, r0
 8008be4:	0f62      	lsrs	r2, r4, #29
 8008be6:	000c      	movs	r4, r1
 8008be8:	00e4      	lsls	r4, r4, #3
 8008bea:	60fc      	str	r4, [r7, #12]
 8008bec:	68fc      	ldr	r4, [r7, #12]
 8008bee:	4314      	orrs	r4, r2
 8008bf0:	60fc      	str	r4, [r7, #12]
 8008bf2:	0001      	movs	r1, r0
 8008bf4:	00ca      	lsls	r2, r1, #3
 8008bf6:	60ba      	str	r2, [r7, #8]
 8008bf8:	3307      	adds	r3, #7
 8008bfa:	08db      	lsrs	r3, r3, #3
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	4669      	mov	r1, sp
 8008c00:	1acb      	subs	r3, r1, r3
 8008c02:	469d      	mov	sp, r3
 8008c04:	466b      	mov	r3, sp
 8008c06:	3300      	adds	r3, #0
 8008c08:	20f0      	movs	r0, #240	; 0xf0
 8008c0a:	0040      	lsls	r0, r0, #1
 8008c0c:	2218      	movs	r2, #24
 8008c0e:	1882      	adds	r2, r0, r2
 8008c10:	19d1      	adds	r1, r2, r7
 8008c12:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008c14:	4b41      	ldr	r3, [pc, #260]	; (8008d1c <astronode_send_cmd_rr+0x2b8>)
 8008c16:	22f8      	movs	r2, #248	; 0xf8
 8008c18:	0052      	lsls	r2, r2, #1
 8008c1a:	189b      	adds	r3, r3, r2
 8008c1c:	2218      	movs	r2, #24
 8008c1e:	4694      	mov	ip, r2
 8008c20:	44bc      	add	ip, r7
 8008c22:	4463      	add	r3, ip
 8008c24:	22c4      	movs	r2, #196	; 0xc4
 8008c26:	5a9b      	ldrh	r3, [r3, r2]
 8008c28:	3b03      	subs	r3, #3
 8008c2a:	0019      	movs	r1, r3
 8008c2c:	2350      	movs	r3, #80	; 0x50
 8008c2e:	2218      	movs	r2, #24
 8008c30:	189b      	adds	r3, r3, r2
 8008c32:	19db      	adds	r3, r3, r7
 8008c34:	3305      	adds	r3, #5
 8008c36:	4a3d      	ldr	r2, [pc, #244]	; (8008d2c <astronode_send_cmd_rr+0x2c8>)
 8008c38:	2418      	movs	r4, #24
 8008c3a:	1900      	adds	r0, r0, r4
 8008c3c:	19c0      	adds	r0, r0, r7
 8008c3e:	6800      	ldr	r0, [r0, #0]
 8008c40:	f003 fad4 	bl	800c1ec <snprintf>
 8008c44:	0002      	movs	r2, r0
 8008c46:	23ef      	movs	r3, #239	; 0xef
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	2118      	movs	r1, #24
 8008c4c:	185b      	adds	r3, r3, r1
 8008c4e:	19db      	adds	r3, r3, r7
 8008c50:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008c52:	23f0      	movs	r3, #240	; 0xf0
 8008c54:	33ff      	adds	r3, #255	; 0xff
 8008c56:	2218      	movs	r2, #24
 8008c58:	189b      	adds	r3, r3, r2
 8008c5a:	19db      	adds	r3, r3, r7
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
 8008c60:	e024      	b.n	8008cac <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008c62:	23f0      	movs	r3, #240	; 0xf0
 8008c64:	33ff      	adds	r3, #255	; 0xff
 8008c66:	2218      	movs	r2, #24
 8008c68:	189b      	adds	r3, r3, r2
 8008c6a:	19db      	adds	r3, r3, r7
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	22f0      	movs	r2, #240	; 0xf0
 8008c70:	0052      	lsls	r2, r2, #1
 8008c72:	2118      	movs	r1, #24
 8008c74:	1852      	adds	r2, r2, r1
 8008c76:	19d2      	adds	r2, r2, r7
 8008c78:	6812      	ldr	r2, [r2, #0]
 8008c7a:	5cd3      	ldrb	r3, [r2, r3]
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	4b2c      	ldr	r3, [pc, #176]	; (8008d30 <astronode_send_cmd_rr+0x2cc>)
 8008c80:	18d3      	adds	r3, r2, r3
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	001a      	movs	r2, r3
 8008c86:	2397      	movs	r3, #151	; 0x97
 8008c88:	4013      	ands	r3, r2
 8008c8a:	d104      	bne.n	8008c96 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008c8c:	4b29      	ldr	r3, [pc, #164]	; (8008d34 <astronode_send_cmd_rr+0x2d0>)
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f7fa f912 	bl	8002eb8 <send_debug_logs>
                    return;
 8008c94:	e035      	b.n	8008d02 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8008c96:	21f0      	movs	r1, #240	; 0xf0
 8008c98:	31ff      	adds	r1, #255	; 0xff
 8008c9a:	2318      	movs	r3, #24
 8008c9c:	18cb      	adds	r3, r1, r3
 8008c9e:	19db      	adds	r3, r3, r7
 8008ca0:	781a      	ldrb	r2, [r3, #0]
 8008ca2:	2318      	movs	r3, #24
 8008ca4:	18cb      	adds	r3, r1, r3
 8008ca6:	19db      	adds	r3, r3, r7
 8008ca8:	3201      	adds	r2, #1
 8008caa:	701a      	strb	r2, [r3, #0]
 8008cac:	23f0      	movs	r3, #240	; 0xf0
 8008cae:	33ff      	adds	r3, #255	; 0xff
 8008cb0:	2218      	movs	r2, #24
 8008cb2:	189b      	adds	r3, r3, r2
 8008cb4:	19db      	adds	r3, r3, r7
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	22ef      	movs	r2, #239	; 0xef
 8008cbc:	0052      	lsls	r2, r2, #1
 8008cbe:	2118      	movs	r1, #24
 8008cc0:	1852      	adds	r2, r2, r1
 8008cc2:	19d2      	adds	r2, r2, r7
 8008cc4:	8812      	ldrh	r2, [r2, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d8cb      	bhi.n	8008c62 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008cca:	4b1b      	ldr	r3, [pc, #108]	; (8008d38 <astronode_send_cmd_rr+0x2d4>)
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f7fa f8f3 	bl	8002eb8 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008cd2:	2350      	movs	r3, #80	; 0x50
 8008cd4:	2218      	movs	r2, #24
 8008cd6:	189b      	adds	r3, r3, r2
 8008cd8:	19db      	adds	r3, r3, r7
 8008cda:	1d5a      	adds	r2, r3, #5
 8008cdc:	4917      	ldr	r1, [pc, #92]	; (8008d3c <astronode_send_cmd_rr+0x2d8>)
 8008cde:	24f0      	movs	r4, #240	; 0xf0
 8008ce0:	0064      	lsls	r4, r4, #1
 8008ce2:	2318      	movs	r3, #24
 8008ce4:	18e3      	adds	r3, r4, r3
 8008ce6:	19db      	adds	r3, r3, r7
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	0018      	movs	r0, r3
 8008cec:	f003 fab2 	bl	800c254 <sprintf>
            send_debug_logs(command_content);
 8008cf0:	2318      	movs	r3, #24
 8008cf2:	18e3      	adds	r3, r4, r3
 8008cf4:	19db      	adds	r3, r3, r7
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7fa f8dd 	bl	8002eb8 <send_debug_logs>
 8008cfe:	46b5      	mov	sp, r6
 8008d00:	e005      	b.n	8008d0e <astronode_send_cmd_rr+0x2aa>
                return;
 8008d02:	46b5      	mov	sp, r6
 8008d04:	e003      	b.n	8008d0e <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008d06:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <astronode_send_cmd_rr+0x2dc>)
 8008d08:	0018      	movs	r0, r3
 8008d0a:	f7fa f8d5 	bl	8002eb8 <send_debug_logs>
        }
    }
}
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	2383      	movs	r3, #131	; 0x83
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	449d      	add	sp, r3
 8008d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d18:	fffffdf4 	.word	0xfffffdf4
 8008d1c:	fffffe60 	.word	0xfffffe60
 8008d20:	08013de4 	.word	0x08013de4
 8008d24:	08013e00 	.word	0x08013e00
 8008d28:	08013e50 	.word	0x08013e50
 8008d2c:	08013490 	.word	0x08013490
 8008d30:	08014870 	.word	0x08014870
 8008d34:	08013e64 	.word	0x08013e64
 8008d38:	08013e90 	.word	0x08013e90
 8008d3c:	08013ea8 	.word	0x08013ea8
 8008d40:	08013eac 	.word	0x08013eac

08008d44 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008d48:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <is_sak_available+0x10>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
}
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	20000bbc 	.word	0x20000bbc

08008d58 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008d5c:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <is_astronode_reset+0x10>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
}
 8008d60:	0018      	movs	r0, r3
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	20000bbd 	.word	0x20000bbd

08008d6c <is_command_available>:

bool is_command_available()
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008d70:	4b02      	ldr	r3, [pc, #8]	; (8008d7c <is_command_available+0x10>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
}
 8008d74:	0018      	movs	r0, r3
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	20000bbe 	.word	0x20000bbe

08008d80 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	0002      	movs	r2, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	1dfb      	adds	r3, r7, #7
 8008d8c:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008d8e:	1dfb      	adds	r3, r7, #7
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b2f      	cmp	r3, #47	; 0x2f
 8008d94:	d90b      	bls.n	8008dae <ascii_to_value+0x2e>
 8008d96:	1dfb      	adds	r3, r7, #7
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b39      	cmp	r3, #57	; 0x39
 8008d9c:	d807      	bhi.n	8008dae <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008d9e:	1dfb      	adds	r3, r7, #7
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	3b30      	subs	r3, #48	; 0x30
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	701a      	strb	r2, [r3, #0]
        return true;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e010      	b.n	8008dd0 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008dae:	1dfb      	adds	r3, r7, #7
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b40      	cmp	r3, #64	; 0x40
 8008db4:	d90b      	bls.n	8008dce <ascii_to_value+0x4e>
 8008db6:	1dfb      	adds	r3, r7, #7
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b46      	cmp	r3, #70	; 0x46
 8008dbc:	d807      	bhi.n	8008dce <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008dbe:	1dfb      	adds	r3, r7, #7
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	3b37      	subs	r3, #55	; 0x37
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	701a      	strb	r2, [r3, #0]
        return true;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e000      	b.n	8008dd0 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008dce:	2300      	movs	r3, #0
    }
}
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	b002      	add	sp, #8
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008de2:	250e      	movs	r5, #14
 8008de4:	197b      	adds	r3, r7, r5
 8008de6:	2200      	movs	r2, #0
 8008de8:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008dea:	197b      	adds	r3, r7, r5
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	197a      	adds	r2, r7, r5
 8008df0:	1c59      	adds	r1, r3, #1
 8008df2:	8011      	strh	r1, [r2, #0]
 8008df4:	001a      	movs	r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	189b      	adds	r3, r3, r2
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	260a      	movs	r6, #10
 8008e02:	19bc      	adds	r4, r7, r6
 8008e04:	4a44      	ldr	r2, [pc, #272]	; (8008f18 <astronode_create_request_transport+0x140>)
 8008e06:	2101      	movs	r1, #1
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f000 fa7d 	bl	8009308 <calculate_crc>
 8008e0e:	0003      	movs	r3, r0
 8008e10:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	1c58      	adds	r0, r3, #1
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	22c4      	movs	r2, #196	; 0xc4
 8008e1a:	5a99      	ldrh	r1, [r3, r2]
 8008e1c:	19bc      	adds	r4, r7, r6
 8008e1e:	19bb      	adds	r3, r7, r6
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	001a      	movs	r2, r3
 8008e24:	f000 fa70 	bl	8009308 <calculate_crc>
 8008e28:	0003      	movs	r3, r0
 8008e2a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008e2c:	19bb      	adds	r3, r7, r6
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	021b      	lsls	r3, r3, #8
 8008e32:	b21a      	sxth	r2, r3
 8008e34:	0031      	movs	r1, r6
 8008e36:	19bb      	adds	r3, r7, r6
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	0a1b      	lsrs	r3, r3, #8
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	b21b      	sxth	r3, r3
 8008e40:	4313      	orrs	r3, r2
 8008e42:	b21a      	sxth	r2, r3
 8008e44:	187b      	adds	r3, r7, r1
 8008e46:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	7818      	ldrb	r0, [r3, #0]
 8008e4c:	197b      	adds	r3, r7, r5
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	18d3      	adds	r3, r2, r3
 8008e54:	0019      	movs	r1, r3
 8008e56:	f000 fbeb 	bl	8009630 <uint8_to_ascii_buffer>
    index += 2;
 8008e5a:	197b      	adds	r3, r7, r5
 8008e5c:	197a      	adds	r2, r7, r5
 8008e5e:	8812      	ldrh	r2, [r2, #0]
 8008e60:	3202      	adds	r2, #2
 8008e62:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008e64:	230c      	movs	r3, #12
 8008e66:	18fb      	adds	r3, r7, r3
 8008e68:	2200      	movs	r2, #0
 8008e6a:	801a      	strh	r2, [r3, #0]
 8008e6c:	e017      	b.n	8008e9e <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008e6e:	240c      	movs	r4, #12
 8008e70:	193b      	adds	r3, r7, r4
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	18d3      	adds	r3, r2, r3
 8008e78:	7858      	ldrb	r0, [r3, #1]
 8008e7a:	250e      	movs	r5, #14
 8008e7c:	197b      	adds	r3, r7, r5
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	18d3      	adds	r3, r2, r3
 8008e84:	0019      	movs	r1, r3
 8008e86:	f000 fbd3 	bl	8009630 <uint8_to_ascii_buffer>
        index += 2;
 8008e8a:	197b      	adds	r3, r7, r5
 8008e8c:	197a      	adds	r2, r7, r5
 8008e8e:	8812      	ldrh	r2, [r2, #0]
 8008e90:	3202      	adds	r2, #2
 8008e92:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008e94:	193b      	adds	r3, r7, r4
 8008e96:	881a      	ldrh	r2, [r3, #0]
 8008e98:	193b      	adds	r3, r7, r4
 8008e9a:	3201      	adds	r2, #1
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	22c4      	movs	r2, #196	; 0xc4
 8008ea2:	5a9b      	ldrh	r3, [r3, r2]
 8008ea4:	220c      	movs	r2, #12
 8008ea6:	18ba      	adds	r2, r7, r2
 8008ea8:	8812      	ldrh	r2, [r2, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d3df      	bcc.n	8008e6e <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008eae:	250a      	movs	r5, #10
 8008eb0:	197b      	adds	r3, r7, r5
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	0a1b      	lsrs	r3, r3, #8
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	b2d8      	uxtb	r0, r3
 8008eba:	240e      	movs	r4, #14
 8008ebc:	193b      	adds	r3, r7, r4
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	18d3      	adds	r3, r2, r3
 8008ec4:	0019      	movs	r1, r3
 8008ec6:	f000 fbb3 	bl	8009630 <uint8_to_ascii_buffer>
    index += 2;
 8008eca:	0021      	movs	r1, r4
 8008ecc:	187b      	adds	r3, r7, r1
 8008ece:	187a      	adds	r2, r7, r1
 8008ed0:	8812      	ldrh	r2, [r2, #0]
 8008ed2:	3202      	adds	r2, #2
 8008ed4:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008ed6:	197b      	adds	r3, r7, r5
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	b2d8      	uxtb	r0, r3
 8008edc:	000c      	movs	r4, r1
 8008ede:	187b      	adds	r3, r7, r1
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	18d3      	adds	r3, r2, r3
 8008ee6:	0019      	movs	r1, r3
 8008ee8:	f000 fba2 	bl	8009630 <uint8_to_ascii_buffer>
    index += 2;
 8008eec:	0020      	movs	r0, r4
 8008eee:	183b      	adds	r3, r7, r0
 8008ef0:	183a      	adds	r2, r7, r0
 8008ef2:	8812      	ldrh	r2, [r2, #0]
 8008ef4:	3202      	adds	r2, #2
 8008ef6:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008ef8:	183b      	adds	r3, r7, r0
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	183a      	adds	r2, r7, r0
 8008efe:	1c59      	adds	r1, r3, #1
 8008f00:	8011      	strh	r1, [r2, #0]
 8008f02:	001a      	movs	r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	189b      	adds	r3, r3, r2
 8008f08:	2203      	movs	r2, #3
 8008f0a:	701a      	strb	r2, [r3, #0]

    return index;
 8008f0c:	183b      	adds	r3, r7, r0
 8008f0e:	881b      	ldrh	r3, [r3, #0]
}
 8008f10:	0018      	movs	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	b005      	add	sp, #20
 8008f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f18:	0000ffff 	.word	0x0000ffff

08008f1c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f1e:	b089      	sub	sp, #36	; 0x24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	607a      	str	r2, [r7, #4]
 8008f26:	230a      	movs	r3, #10
 8008f28:	18fb      	adds	r3, r7, r3
 8008f2a:	1c0a      	adds	r2, r1, #0
 8008f2c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d005      	beq.n	8008f42 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008f36:	4bbd      	ldr	r3, [pc, #756]	; (800922c <astronode_decode_answer_transport+0x310>)
 8008f38:	0018      	movs	r0, r3
 8008f3a:	f7f9 ffbd 	bl	8002eb8 <send_debug_logs>
        return RS_FAILURE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e170      	b.n	8009224 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008f42:	210a      	movs	r1, #10
 8008f44:	187b      	adds	r3, r7, r1
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d103      	bne.n	8008f5a <astronode_decode_answer_transport+0x3e>
 8008f52:	187b      	adds	r3, r7, r1
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	2b07      	cmp	r3, #7
 8008f58:	d805      	bhi.n	8008f66 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008f5a:	4bb5      	ldr	r3, [pc, #724]	; (8009230 <astronode_decode_answer_transport+0x314>)
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f7f9 ffab 	bl	8002eb8 <send_debug_logs>
        return RS_FAILURE;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e15e      	b.n	8009224 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008f66:	230a      	movs	r3, #10
 8008f68:	18fb      	adds	r3, r7, r3
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	3b08      	subs	r3, #8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	da00      	bge.n	8008f74 <astronode_decode_answer_transport+0x58>
 8008f72:	3301      	adds	r3, #1
 8008f74:	105b      	asrs	r3, r3, #1
 8008f76:	b299      	uxth	r1, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	22c4      	movs	r2, #196	; 0xc4
 8008f7c:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008f7e:	230a      	movs	r3, #10
 8008f80:	18fb      	adds	r3, r7, r3
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	18d3      	adds	r3, r2, r3
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d005      	beq.n	8008f9c <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008f90:	4ba8      	ldr	r3, [pc, #672]	; (8009234 <astronode_decode_answer_transport+0x318>)
 8008f92:	0018      	movs	r0, r3
 8008f94:	f7f9 ff90 	bl	8002eb8 <send_debug_logs>
        return RS_FAILURE;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e143      	b.n	8009224 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008f9c:	2117      	movs	r1, #23
 8008f9e:	187b      	adds	r3, r7, r1
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008fa4:	2416      	movs	r4, #22
 8008fa6:	193b      	adds	r3, r7, r4
 8008fa8:	2200      	movs	r2, #0
 8008faa:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	187a      	adds	r2, r7, r1
 8008fb4:	0011      	movs	r1, r2
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	f7ff fee2 	bl	8008d80 <ascii_to_value>
 8008fbc:	0003      	movs	r3, r0
 8008fbe:	001a      	movs	r2, r3
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	4053      	eors	r3, r2
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10e      	bne.n	8008fe8 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3302      	adds	r3, #2
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	193a      	adds	r2, r7, r4
 8008fd2:	0011      	movs	r1, r2
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f7ff fed3 	bl	8008d80 <ascii_to_value>
 8008fda:	0003      	movs	r3, r0
 8008fdc:	001a      	movs	r2, r3
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4053      	eors	r3, r2
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008fe8:	4b93      	ldr	r3, [pc, #588]	; (8009238 <astronode_decode_answer_transport+0x31c>)
 8008fea:	0018      	movs	r0, r3
 8008fec:	f7f9 ff64 	bl	8002eb8 <send_debug_logs>
        return RS_FAILURE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	e117      	b.n	8009224 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008ff4:	2317      	movs	r3, #23
 8008ff6:	18fb      	adds	r3, r7, r3
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	011b      	lsls	r3, r3, #4
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	2316      	movs	r3, #22
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	18d3      	adds	r3, r2, r3
 8009006:	b2da      	uxtb	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800900c:	231e      	movs	r3, #30
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	2203      	movs	r2, #3
 8009012:	801a      	strh	r2, [r3, #0]
 8009014:	231c      	movs	r3, #28
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	2200      	movs	r2, #0
 800901a:	801a      	strh	r2, [r3, #0]
 800901c:	e045      	b.n	80090aa <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800901e:	241e      	movs	r4, #30
 8009020:	193b      	adds	r3, r7, r4
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	18d3      	adds	r3, r2, r3
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2217      	movs	r2, #23
 800902c:	18ba      	adds	r2, r7, r2
 800902e:	0011      	movs	r1, r2
 8009030:	0018      	movs	r0, r3
 8009032:	f7ff fea5 	bl	8008d80 <ascii_to_value>
 8009036:	0003      	movs	r3, r0
 8009038:	001a      	movs	r2, r3
 800903a:	2301      	movs	r3, #1
 800903c:	4053      	eors	r3, r2
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d112      	bne.n	800906a <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8009044:	193b      	adds	r3, r7, r4
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	3301      	adds	r3, #1
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	18d3      	adds	r3, r2, r3
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2216      	movs	r2, #22
 8009052:	18ba      	adds	r2, r7, r2
 8009054:	0011      	movs	r1, r2
 8009056:	0018      	movs	r0, r3
 8009058:	f7ff fe92 	bl	8008d80 <ascii_to_value>
 800905c:	0003      	movs	r3, r0
 800905e:	001a      	movs	r2, r3
 8009060:	2301      	movs	r3, #1
 8009062:	4053      	eors	r3, r2
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800906a:	4b73      	ldr	r3, [pc, #460]	; (8009238 <astronode_decode_answer_transport+0x31c>)
 800906c:	0018      	movs	r0, r3
 800906e:	f7f9 ff23 	bl	8002eb8 <send_debug_logs>
            return RS_FAILURE;
 8009072:	2300      	movs	r3, #0
 8009074:	e0d6      	b.n	8009224 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8009076:	2317      	movs	r3, #23
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	011b      	lsls	r3, r3, #4
 800907e:	b2d9      	uxtb	r1, r3
 8009080:	2316      	movs	r3, #22
 8009082:	18fb      	adds	r3, r7, r3
 8009084:	781a      	ldrb	r2, [r3, #0]
 8009086:	201c      	movs	r0, #28
 8009088:	183b      	adds	r3, r7, r0
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	1838      	adds	r0, r7, r0
 800908e:	1c5c      	adds	r4, r3, #1
 8009090:	8004      	strh	r4, [r0, #0]
 8009092:	0018      	movs	r0, r3
 8009094:	188b      	adds	r3, r1, r2
 8009096:	b2da      	uxtb	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	181b      	adds	r3, r3, r0
 800909c:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800909e:	221e      	movs	r2, #30
 80090a0:	18bb      	adds	r3, r7, r2
 80090a2:	18ba      	adds	r2, r7, r2
 80090a4:	8812      	ldrh	r2, [r2, #0]
 80090a6:	3202      	adds	r2, #2
 80090a8:	801a      	strh	r2, [r3, #0]
 80090aa:	231e      	movs	r3, #30
 80090ac:	18fb      	adds	r3, r7, r3
 80090ae:	881a      	ldrh	r2, [r3, #0]
 80090b0:	260a      	movs	r6, #10
 80090b2:	19bb      	adds	r3, r7, r6
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	3b05      	subs	r3, #5
 80090b8:	429a      	cmp	r2, r3
 80090ba:	dbb0      	blt.n	800901e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	251a      	movs	r5, #26
 80090c0:	197c      	adds	r4, r7, r5
 80090c2:	4a5e      	ldr	r2, [pc, #376]	; (800923c <astronode_decode_answer_transport+0x320>)
 80090c4:	2101      	movs	r1, #1
 80090c6:	0018      	movs	r0, r3
 80090c8:	f000 f91e 	bl	8009308 <calculate_crc>
 80090cc:	0003      	movs	r3, r0
 80090ce:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	1c58      	adds	r0, r3, #1
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	22c4      	movs	r2, #196	; 0xc4
 80090d8:	5a99      	ldrh	r1, [r3, r2]
 80090da:	197c      	adds	r4, r7, r5
 80090dc:	197b      	adds	r3, r7, r5
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	001a      	movs	r2, r3
 80090e2:	f000 f911 	bl	8009308 <calculate_crc>
 80090e6:	0003      	movs	r3, r0
 80090e8:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 80090ea:	197b      	adds	r3, r7, r5
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	021b      	lsls	r3, r3, #8
 80090f0:	b21a      	sxth	r2, r3
 80090f2:	0029      	movs	r1, r5
 80090f4:	197b      	adds	r3, r7, r5
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	0a1b      	lsrs	r3, r3, #8
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	b21b      	sxth	r3, r3
 80090fe:	4313      	orrs	r3, r2
 8009100:	b21a      	sxth	r2, r3
 8009102:	187b      	adds	r3, r7, r1
 8009104:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8009106:	19bb      	adds	r3, r7, r6
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	3b05      	subs	r3, #5
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	18d3      	adds	r3, r2, r3
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2217      	movs	r2, #23
 8009114:	18ba      	adds	r2, r7, r2
 8009116:	0011      	movs	r1, r2
 8009118:	0018      	movs	r0, r3
 800911a:	f7ff fe31 	bl	8008d80 <ascii_to_value>
 800911e:	0003      	movs	r3, r0
 8009120:	001a      	movs	r2, r3
 8009122:	2301      	movs	r3, #1
 8009124:	4053      	eors	r3, r2
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	d112      	bne.n	8009152 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800912c:	19bb      	adds	r3, r7, r6
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	3b04      	subs	r3, #4
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	18d3      	adds	r3, r2, r3
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2216      	movs	r2, #22
 800913a:	18ba      	adds	r2, r7, r2
 800913c:	0011      	movs	r1, r2
 800913e:	0018      	movs	r0, r3
 8009140:	f7ff fe1e 	bl	8008d80 <ascii_to_value>
 8009144:	0003      	movs	r3, r0
 8009146:	001a      	movs	r2, r3
 8009148:	2301      	movs	r3, #1
 800914a:	4053      	eors	r3, r2
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d005      	beq.n	800915e <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009152:	4b39      	ldr	r3, [pc, #228]	; (8009238 <astronode_decode_answer_transport+0x31c>)
 8009154:	0018      	movs	r0, r3
 8009156:	f7f9 feaf 	bl	8002eb8 <send_debug_logs>
        return RS_FAILURE;
 800915a:	2300      	movs	r3, #0
 800915c:	e062      	b.n	8009224 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800915e:	2017      	movs	r0, #23
 8009160:	183b      	adds	r3, r7, r0
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	031b      	lsls	r3, r3, #12
 8009168:	b299      	uxth	r1, r3
 800916a:	2416      	movs	r4, #22
 800916c:	193b      	adds	r3, r7, r4
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	b29b      	uxth	r3, r3
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	b29a      	uxth	r2, r3
 8009176:	2318      	movs	r3, #24
 8009178:	18fb      	adds	r3, r7, r3
 800917a:	188a      	adds	r2, r1, r2
 800917c:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800917e:	250a      	movs	r5, #10
 8009180:	197b      	adds	r3, r7, r5
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	3b03      	subs	r3, #3
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	18d3      	adds	r3, r2, r3
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	183a      	adds	r2, r7, r0
 800918e:	0011      	movs	r1, r2
 8009190:	0018      	movs	r0, r3
 8009192:	f7ff fdf5 	bl	8008d80 <ascii_to_value>
 8009196:	0003      	movs	r3, r0
 8009198:	001a      	movs	r2, r3
 800919a:	2301      	movs	r3, #1
 800919c:	4053      	eors	r3, r2
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d111      	bne.n	80091c8 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80091a4:	197b      	adds	r3, r7, r5
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	3b02      	subs	r3, #2
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	18d3      	adds	r3, r2, r3
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	193a      	adds	r2, r7, r4
 80091b2:	0011      	movs	r1, r2
 80091b4:	0018      	movs	r0, r3
 80091b6:	f7ff fde3 	bl	8008d80 <ascii_to_value>
 80091ba:	0003      	movs	r3, r0
 80091bc:	001a      	movs	r2, r3
 80091be:	2301      	movs	r3, #1
 80091c0:	4053      	eors	r3, r2
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80091c8:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <astronode_decode_answer_transport+0x31c>)
 80091ca:	0018      	movs	r0, r3
 80091cc:	f7f9 fe74 	bl	8002eb8 <send_debug_logs>
        return RS_FAILURE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	e027      	b.n	8009224 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 80091d4:	2317      	movs	r3, #23
 80091d6:	18fb      	adds	r3, r7, r3
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	011b      	lsls	r3, r3, #4
 80091de:	b29a      	uxth	r2, r3
 80091e0:	2316      	movs	r3, #22
 80091e2:	18fb      	adds	r3, r7, r3
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	18d3      	adds	r3, r2, r3
 80091ea:	b299      	uxth	r1, r3
 80091ec:	2018      	movs	r0, #24
 80091ee:	183b      	adds	r3, r7, r0
 80091f0:	183a      	adds	r2, r7, r0
 80091f2:	8812      	ldrh	r2, [r2, #0]
 80091f4:	188a      	adds	r2, r1, r2
 80091f6:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80091f8:	183a      	adds	r2, r7, r0
 80091fa:	231a      	movs	r3, #26
 80091fc:	18fb      	adds	r3, r7, r3
 80091fe:	8812      	ldrh	r2, [r2, #0]
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d005      	beq.n	8009212 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8009206:	4b0e      	ldr	r3, [pc, #56]	; (8009240 <astronode_decode_answer_transport+0x324>)
 8009208:	0018      	movs	r0, r3
 800920a:	f7f9 fe55 	bl	8002eb8 <send_debug_logs>
        return RS_FAILURE;
 800920e:	2300      	movs	r3, #0
 8009210:	e008      	b.n	8009224 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2bff      	cmp	r3, #255	; 0xff
 8009218:	d103      	bne.n	8009222 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	0018      	movs	r0, r3
 800921e:	f000 f8c3 	bl	80093a8 <check_for_error>
    }

    return RS_SUCCESS;
 8009222:	2301      	movs	r3, #1
}
 8009224:	0018      	movs	r0, r3
 8009226:	46bd      	mov	sp, r7
 8009228:	b009      	add	sp, #36	; 0x24
 800922a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800922c:	08013f3c 	.word	0x08013f3c
 8009230:	08013f8c 	.word	0x08013f8c
 8009234:	08013fdc 	.word	0x08013fdc
 8009238:	0801402c 	.word	0x0801402c
 800923c:	0000ffff 	.word	0x0000ffff
 8009240:	08014078 	.word	0x08014078

08009244 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8009244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009246:	4c2b      	ldr	r4, [pc, #172]	; (80092f4 <astronode_transport_send_receive+0xb0>)
 8009248:	44a5      	add	sp, r4
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009250:	4b29      	ldr	r3, [pc, #164]	; (80092f8 <astronode_transport_send_receive+0xb4>)
 8009252:	25ca      	movs	r5, #202	; 0xca
 8009254:	00ad      	lsls	r5, r5, #2
 8009256:	195b      	adds	r3, r3, r5
 8009258:	19db      	adds	r3, r3, r7
 800925a:	2200      	movs	r2, #0
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	3304      	adds	r3, #4
 8009260:	22c4      	movs	r2, #196	; 0xc4
 8009262:	0052      	lsls	r2, r2, #1
 8009264:	2100      	movs	r1, #0
 8009266:	0018      	movs	r0, r3
 8009268:	f003 f88a 	bl	800c380 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800926c:	4b23      	ldr	r3, [pc, #140]	; (80092fc <astronode_transport_send_receive+0xb8>)
 800926e:	195b      	adds	r3, r3, r5
 8009270:	19db      	adds	r3, r3, r7
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	3304      	adds	r3, #4
 8009278:	22c4      	movs	r2, #196	; 0xc4
 800927a:	0052      	lsls	r2, r2, #1
 800927c:	2100      	movs	r1, #0
 800927e:	0018      	movs	r0, r3
 8009280:	f003 f87e 	bl	800c380 <memset>
    uint16_t answer_length =  0;
 8009284:	4b1e      	ldr	r3, [pc, #120]	; (8009300 <astronode_transport_send_receive+0xbc>)
 8009286:	195b      	adds	r3, r3, r5
 8009288:	19db      	adds	r3, r3, r7
 800928a:	2200      	movs	r2, #0
 800928c:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800928e:	4e1d      	ldr	r6, [pc, #116]	; (8009304 <astronode_transport_send_receive+0xc0>)
 8009290:	19bc      	adds	r4, r7, r6
 8009292:	23cc      	movs	r3, #204	; 0xcc
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	18fa      	adds	r2, r7, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	0011      	movs	r1, r2
 800929c:	0018      	movs	r0, r3
 800929e:	f7ff fd9b 	bl	8008dd8 <astronode_create_request_transport>
 80092a2:	0003      	movs	r3, r0
 80092a4:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80092a6:	19bb      	adds	r3, r7, r6
 80092a8:	881a      	ldrh	r2, [r3, #0]
 80092aa:	23cc      	movs	r3, #204	; 0xcc
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	0011      	movs	r1, r2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f7f9 fe4c 	bl	8002f50 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80092b8:	230a      	movs	r3, #10
 80092ba:	18fa      	adds	r2, r7, r3
 80092bc:	240c      	movs	r4, #12
 80092be:	193b      	adds	r3, r7, r4
 80092c0:	0011      	movs	r1, r2
 80092c2:	0018      	movs	r0, r3
 80092c4:	f000 f92c 	bl	8009520 <receive_astronode_answer>
 80092c8:	0003      	movs	r3, r0
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d10a      	bne.n	80092e4 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80092ce:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <astronode_transport_send_receive+0xbc>)
 80092d0:	195b      	adds	r3, r3, r5
 80092d2:	19db      	adds	r3, r3, r7
 80092d4:	8819      	ldrh	r1, [r3, #0]
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	193b      	adds	r3, r7, r4
 80092da:	0018      	movs	r0, r3
 80092dc:	f7ff fe1e 	bl	8008f1c <astronode_decode_answer_transport>
 80092e0:	0003      	movs	r3, r0
 80092e2:	e000      	b.n	80092e6 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 80092e4:	2300      	movs	r3, #0
    }
}
 80092e6:	0018      	movs	r0, r3
 80092e8:	46bd      	mov	sp, r7
 80092ea:	23cb      	movs	r3, #203	; 0xcb
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	449d      	add	sp, r3
 80092f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	fffffcd4 	.word	0xfffffcd4
 80092f8:	fffffe70 	.word	0xfffffe70
 80092fc:	fffffce4 	.word	0xfffffce4
 8009300:	fffffce2 	.word	0xfffffce2
 8009304:	00000326 	.word	0x00000326

08009308 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8009308:	b590      	push	{r4, r7, lr}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	0008      	movs	r0, r1
 8009312:	0011      	movs	r1, r2
 8009314:	1cbb      	adds	r3, r7, #2
 8009316:	1c02      	adds	r2, r0, #0
 8009318:	801a      	strh	r2, [r3, #0]
 800931a:	003b      	movs	r3, r7
 800931c:	1c0a      	adds	r2, r1, #0
 800931e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8009320:	230e      	movs	r3, #14
 8009322:	18fb      	adds	r3, r7, r3
 8009324:	003a      	movs	r2, r7
 8009326:	8812      	ldrh	r2, [r2, #0]
 8009328:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800932a:	e02e      	b.n	800938a <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800932c:	240e      	movs	r4, #14
 800932e:	193b      	adds	r3, r7, r4
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	0a1b      	lsrs	r3, r3, #8
 8009334:	b299      	uxth	r1, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	1c5a      	adds	r2, r3, #1
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	b29a      	uxth	r2, r3
 8009340:	200c      	movs	r0, #12
 8009342:	183b      	adds	r3, r7, r0
 8009344:	404a      	eors	r2, r1
 8009346:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8009348:	183b      	adds	r3, r7, r0
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	091b      	lsrs	r3, r3, #4
 800934e:	b299      	uxth	r1, r3
 8009350:	183b      	adds	r3, r7, r0
 8009352:	183a      	adds	r2, r7, r0
 8009354:	8812      	ldrh	r2, [r2, #0]
 8009356:	404a      	eors	r2, r1
 8009358:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800935a:	0021      	movs	r1, r4
 800935c:	187b      	adds	r3, r7, r1
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	021b      	lsls	r3, r3, #8
 8009362:	b21a      	sxth	r2, r3
 8009364:	183b      	adds	r3, r7, r0
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	031b      	lsls	r3, r3, #12
 800936a:	b21b      	sxth	r3, r3
 800936c:	4053      	eors	r3, r2
 800936e:	b21a      	sxth	r2, r3
 8009370:	183b      	adds	r3, r7, r0
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	015b      	lsls	r3, r3, #5
 8009376:	b21b      	sxth	r3, r3
 8009378:	4053      	eors	r3, r2
 800937a:	b21a      	sxth	r2, r3
 800937c:	183b      	adds	r3, r7, r0
 800937e:	2000      	movs	r0, #0
 8009380:	5e1b      	ldrsh	r3, [r3, r0]
 8009382:	4053      	eors	r3, r2
 8009384:	b21a      	sxth	r2, r3
 8009386:	187b      	adds	r3, r7, r1
 8009388:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800938a:	1cbb      	adds	r3, r7, #2
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	1cba      	adds	r2, r7, #2
 8009390:	1e59      	subs	r1, r3, #1
 8009392:	8011      	strh	r1, [r2, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1c9      	bne.n	800932c <calculate_crc+0x24>
    }
    return crc;
 8009398:	230e      	movs	r3, #14
 800939a:	18fb      	adds	r3, r7, r3
 800939c:	881b      	ldrh	r3, [r3, #0]
}
 800939e:	0018      	movs	r0, r3
 80093a0:	46bd      	mov	sp, r7
 80093a2:	b005      	add	sp, #20
 80093a4:	bd90      	pop	{r4, r7, pc}
	...

080093a8 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	785b      	ldrb	r3, [r3, #1]
 80093b4:	b299      	uxth	r1, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	789b      	ldrb	r3, [r3, #2]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	b29a      	uxth	r2, r3
 80093c0:	200e      	movs	r0, #14
 80093c2:	183b      	adds	r3, r7, r0
 80093c4:	188a      	adds	r2, r1, r2
 80093c6:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80093c8:	183b      	adds	r3, r7, r0
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	4a40      	ldr	r2, [pc, #256]	; (80094d0 <check_for_error+0x128>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d100      	bne.n	80093d4 <check_for_error+0x2c>
 80093d2:	e06f      	b.n	80094b4 <check_for_error+0x10c>
 80093d4:	4a3e      	ldr	r2, [pc, #248]	; (80094d0 <check_for_error+0x128>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	dd00      	ble.n	80093dc <check_for_error+0x34>
 80093da:	e070      	b.n	80094be <check_for_error+0x116>
 80093dc:	4a3d      	ldr	r2, [pc, #244]	; (80094d4 <check_for_error+0x12c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d100      	bne.n	80093e4 <check_for_error+0x3c>
 80093e2:	e062      	b.n	80094aa <check_for_error+0x102>
 80093e4:	4a3b      	ldr	r2, [pc, #236]	; (80094d4 <check_for_error+0x12c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	dd00      	ble.n	80093ec <check_for_error+0x44>
 80093ea:	e068      	b.n	80094be <check_for_error+0x116>
 80093ec:	4a3a      	ldr	r2, [pc, #232]	; (80094d8 <check_for_error+0x130>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d056      	beq.n	80094a0 <check_for_error+0xf8>
 80093f2:	4a39      	ldr	r2, [pc, #228]	; (80094d8 <check_for_error+0x130>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	dd00      	ble.n	80093fa <check_for_error+0x52>
 80093f8:	e061      	b.n	80094be <check_for_error+0x116>
 80093fa:	4a38      	ldr	r2, [pc, #224]	; (80094dc <check_for_error+0x134>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d04a      	beq.n	8009496 <check_for_error+0xee>
 8009400:	4a36      	ldr	r2, [pc, #216]	; (80094dc <check_for_error+0x134>)
 8009402:	4293      	cmp	r3, r2
 8009404:	dc5b      	bgt.n	80094be <check_for_error+0x116>
 8009406:	4a36      	ldr	r2, [pc, #216]	; (80094e0 <check_for_error+0x138>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d03f      	beq.n	800948c <check_for_error+0xe4>
 800940c:	4a34      	ldr	r2, [pc, #208]	; (80094e0 <check_for_error+0x138>)
 800940e:	4293      	cmp	r3, r2
 8009410:	dc55      	bgt.n	80094be <check_for_error+0x116>
 8009412:	4a34      	ldr	r2, [pc, #208]	; (80094e4 <check_for_error+0x13c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d034      	beq.n	8009482 <check_for_error+0xda>
 8009418:	4a32      	ldr	r2, [pc, #200]	; (80094e4 <check_for_error+0x13c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	dc4f      	bgt.n	80094be <check_for_error+0x116>
 800941e:	4a32      	ldr	r2, [pc, #200]	; (80094e8 <check_for_error+0x140>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d029      	beq.n	8009478 <check_for_error+0xd0>
 8009424:	4a30      	ldr	r2, [pc, #192]	; (80094e8 <check_for_error+0x140>)
 8009426:	4293      	cmp	r3, r2
 8009428:	dc49      	bgt.n	80094be <check_for_error+0x116>
 800942a:	4a30      	ldr	r2, [pc, #192]	; (80094ec <check_for_error+0x144>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d01e      	beq.n	800946e <check_for_error+0xc6>
 8009430:	4a2e      	ldr	r2, [pc, #184]	; (80094ec <check_for_error+0x144>)
 8009432:	4293      	cmp	r3, r2
 8009434:	dc43      	bgt.n	80094be <check_for_error+0x116>
 8009436:	2222      	movs	r2, #34	; 0x22
 8009438:	32ff      	adds	r2, #255	; 0xff
 800943a:	4293      	cmp	r3, r2
 800943c:	d012      	beq.n	8009464 <check_for_error+0xbc>
 800943e:	2291      	movs	r2, #145	; 0x91
 8009440:	0052      	lsls	r2, r2, #1
 8009442:	4293      	cmp	r3, r2
 8009444:	da3b      	bge.n	80094be <check_for_error+0x116>
 8009446:	2b01      	cmp	r3, #1
 8009448:	d002      	beq.n	8009450 <check_for_error+0xa8>
 800944a:	2b11      	cmp	r3, #17
 800944c:	d005      	beq.n	800945a <check_for_error+0xb2>
 800944e:	e036      	b.n	80094be <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8009450:	4b27      	ldr	r3, [pc, #156]	; (80094f0 <check_for_error+0x148>)
 8009452:	0018      	movs	r0, r3
 8009454:	f7f9 fd30 	bl	8002eb8 <send_debug_logs>
            break;
 8009458:	e036      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800945a:	4b26      	ldr	r3, [pc, #152]	; (80094f4 <check_for_error+0x14c>)
 800945c:	0018      	movs	r0, r3
 800945e:	f7f9 fd2b 	bl	8002eb8 <send_debug_logs>
            break;
 8009462:	e031      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8009464:	4b24      	ldr	r3, [pc, #144]	; (80094f8 <check_for_error+0x150>)
 8009466:	0018      	movs	r0, r3
 8009468:	f7f9 fd26 	bl	8002eb8 <send_debug_logs>
            break;
 800946c:	e02c      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800946e:	4b23      	ldr	r3, [pc, #140]	; (80094fc <check_for_error+0x154>)
 8009470:	0018      	movs	r0, r3
 8009472:	f7f9 fd21 	bl	8002eb8 <send_debug_logs>
            break;
 8009476:	e027      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8009478:	4b21      	ldr	r3, [pc, #132]	; (8009500 <check_for_error+0x158>)
 800947a:	0018      	movs	r0, r3
 800947c:	f7f9 fd1c 	bl	8002eb8 <send_debug_logs>
            break;
 8009480:	e022      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8009482:	4b20      	ldr	r3, [pc, #128]	; (8009504 <check_for_error+0x15c>)
 8009484:	0018      	movs	r0, r3
 8009486:	f7f9 fd17 	bl	8002eb8 <send_debug_logs>
            break;
 800948a:	e01d      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800948c:	4b1e      	ldr	r3, [pc, #120]	; (8009508 <check_for_error+0x160>)
 800948e:	0018      	movs	r0, r3
 8009490:	f7f9 fd12 	bl	8002eb8 <send_debug_logs>
            break;
 8009494:	e018      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8009496:	4b1d      	ldr	r3, [pc, #116]	; (800950c <check_for_error+0x164>)
 8009498:	0018      	movs	r0, r3
 800949a:	f7f9 fd0d 	bl	8002eb8 <send_debug_logs>
            break;
 800949e:	e013      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80094a0:	4b1b      	ldr	r3, [pc, #108]	; (8009510 <check_for_error+0x168>)
 80094a2:	0018      	movs	r0, r3
 80094a4:	f7f9 fd08 	bl	8002eb8 <send_debug_logs>
            break;
 80094a8:	e00e      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80094aa:	4b1a      	ldr	r3, [pc, #104]	; (8009514 <check_for_error+0x16c>)
 80094ac:	0018      	movs	r0, r3
 80094ae:	f7f9 fd03 	bl	8002eb8 <send_debug_logs>
            break;
 80094b2:	e009      	b.n	80094c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80094b4:	4b18      	ldr	r3, [pc, #96]	; (8009518 <check_for_error+0x170>)
 80094b6:	0018      	movs	r0, r3
 80094b8:	f7f9 fcfe 	bl	8002eb8 <send_debug_logs>
            break;
 80094bc:	e004      	b.n	80094c8 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80094be:	4b17      	ldr	r3, [pc, #92]	; (800951c <check_for_error+0x174>)
 80094c0:	0018      	movs	r0, r3
 80094c2:	f7f9 fcf9 	bl	8002eb8 <send_debug_logs>
            break;
 80094c6:	46c0      	nop			; (mov r8, r8)
    }
}
 80094c8:	46c0      	nop			; (mov r8, r8)
 80094ca:	46bd      	mov	sp, r7
 80094cc:	b004      	add	sp, #16
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	00004601 	.word	0x00004601
 80094d4:	00004501 	.word	0x00004501
 80094d8:	00003501 	.word	0x00003501
 80094dc:	00002601 	.word	0x00002601
 80094e0:	00002511 	.word	0x00002511
 80094e4:	00002501 	.word	0x00002501
 80094e8:	00000611 	.word	0x00000611
 80094ec:	00000601 	.word	0x00000601
 80094f0:	080140bc 	.word	0x080140bc
 80094f4:	08014108 	.word	0x08014108
 80094f8:	0801416c 	.word	0x0801416c
 80094fc:	080141a4 	.word	0x080141a4
 8009500:	08014248 	.word	0x08014248
 8009504:	080142b0 	.word	0x080142b0
 8009508:	08014310 	.word	0x08014310
 800950c:	0801439c 	.word	0x0801439c
 8009510:	080143fc 	.word	0x080143fc
 8009514:	080144a8 	.word	0x080144a8
 8009518:	080144f4 	.word	0x080144f4
 800951c:	0801453c 	.word	0x0801453c

08009520 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8009520:	b5b0      	push	{r4, r5, r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800952a:	230f      	movs	r3, #15
 800952c:	18fb      	adds	r3, r7, r3
 800952e:	2200      	movs	r2, #0
 8009530:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8009532:	2316      	movs	r3, #22
 8009534:	18fb      	adds	r3, r7, r3
 8009536:	2200      	movs	r2, #0
 8009538:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800953a:	f7f9 fd4d 	bl	8002fd8 <get_systick>
 800953e:	0003      	movs	r3, r0
 8009540:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8009542:	2315      	movs	r3, #21
 8009544:	18fb      	adds	r3, r7, r3
 8009546:	2200      	movs	r2, #0
 8009548:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800954a:	e054      	b.n	80095f6 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800954c:	4a34      	ldr	r2, [pc, #208]	; (8009620 <receive_astronode_answer+0x100>)
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	0011      	movs	r1, r2
 8009552:	0018      	movs	r0, r3
 8009554:	f7f9 fd48 	bl	8002fe8 <is_systick_timeout_over>
 8009558:	1e03      	subs	r3, r0, #0
 800955a:	d005      	beq.n	8009568 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800955c:	4b31      	ldr	r3, [pc, #196]	; (8009624 <receive_astronode_answer+0x104>)
 800955e:	0018      	movs	r0, r3
 8009560:	f7f9 fcaa 	bl	8002eb8 <send_debug_logs>
            return RS_FAILURE;
 8009564:	2300      	movs	r3, #0
 8009566:	e057      	b.n	8009618 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8009568:	250f      	movs	r5, #15
 800956a:	197b      	adds	r3, r7, r5
 800956c:	0018      	movs	r0, r3
 800956e:	f7f9 fd0d 	bl	8002f8c <is_astronode_character_received>
 8009572:	0003      	movs	r3, r0
 8009574:	0019      	movs	r1, r3
 8009576:	2016      	movs	r0, #22
 8009578:	183b      	adds	r3, r7, r0
 800957a:	183a      	adds	r2, r7, r0
 800957c:	8812      	ldrh	r2, [r2, #0]
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	2415      	movs	r4, #21
 8009582:	193b      	adds	r3, r7, r4
 8009584:	193a      	adds	r2, r7, r4
 8009586:	7812      	ldrb	r2, [r2, #0]
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	2900      	cmp	r1, #0
 800958c:	d033      	beq.n	80095f6 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800958e:	197b      	adds	r3, r7, r5
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b02      	cmp	r3, #2
 8009594:	d105      	bne.n	80095a2 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8009596:	193b      	adds	r3, r7, r4
 8009598:	2200      	movs	r2, #0
 800959a:	701a      	strb	r2, [r3, #0]
                length = 0;
 800959c:	183b      	adds	r3, r7, r0
 800959e:	2200      	movs	r2, #0
 80095a0:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80095a2:	2116      	movs	r1, #22
 80095a4:	187b      	adds	r3, r7, r1
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	18d3      	adds	r3, r2, r3
 80095ac:	220f      	movs	r2, #15
 80095ae:	18ba      	adds	r2, r7, r2
 80095b0:	7812      	ldrb	r2, [r2, #0]
 80095b2:	701a      	strb	r2, [r3, #0]
            length++;
 80095b4:	187b      	adds	r3, r7, r1
 80095b6:	881a      	ldrh	r2, [r3, #0]
 80095b8:	187b      	adds	r3, r7, r1
 80095ba:	3201      	adds	r2, #1
 80095bc:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80095be:	187b      	adds	r3, r7, r1
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	2bb2      	cmp	r3, #178	; 0xb2
 80095c4:	d905      	bls.n	80095d2 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80095c6:	4b18      	ldr	r3, [pc, #96]	; (8009628 <receive_astronode_answer+0x108>)
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7f9 fc75 	bl	8002eb8 <send_debug_logs>
                return RS_FAILURE;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e022      	b.n	8009618 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80095d2:	230f      	movs	r3, #15
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d10c      	bne.n	80095f6 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 80095dc:	2216      	movs	r2, #22
 80095de:	18bb      	adds	r3, r7, r2
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d907      	bls.n	80095f6 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	18ba      	adds	r2, r7, r2
 80095ea:	8812      	ldrh	r2, [r2, #0]
 80095ec:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80095ee:	2315      	movs	r3, #21
 80095f0:	18fb      	adds	r3, r7, r3
 80095f2:	2201      	movs	r2, #1
 80095f4:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 80095f6:	2315      	movs	r3, #21
 80095f8:	18fb      	adds	r3, r7, r3
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2201      	movs	r2, #1
 80095fe:	4053      	eors	r3, r2
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1a2      	bne.n	800954c <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009606:	4b09      	ldr	r3, [pc, #36]	; (800962c <receive_astronode_answer+0x10c>)
 8009608:	0018      	movs	r0, r3
 800960a:	f7f9 fc55 	bl	8002eb8 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	0018      	movs	r0, r3
 8009612:	f7f9 fc51 	bl	8002eb8 <send_debug_logs>

    return RS_SUCCESS;
 8009616:	2301      	movs	r3, #1
}
 8009618:	0018      	movs	r0, r3
 800961a:	46bd      	mov	sp, r7
 800961c:	b006      	add	sp, #24
 800961e:	bdb0      	pop	{r4, r5, r7, pc}
 8009620:	000005dc 	.word	0x000005dc
 8009624:	08014560 	.word	0x08014560
 8009628:	08014584 	.word	0x08014584
 800962c:	080145d0 	.word	0x080145d0

08009630 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	0002      	movs	r2, r0
 8009638:	6039      	str	r1, [r7, #0]
 800963a:	1dfb      	adds	r3, r7, #7
 800963c:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800963e:	1dfb      	adds	r3, r7, #7
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	091b      	lsrs	r3, r3, #4
 8009644:	b2db      	uxtb	r3, r3
 8009646:	001a      	movs	r2, r3
 8009648:	4b08      	ldr	r3, [pc, #32]	; (800966c <uint8_to_ascii_buffer+0x3c>)
 800964a:	5c9a      	ldrb	r2, [r3, r2]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8009650:	1dfb      	adds	r3, r7, #7
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	220f      	movs	r2, #15
 8009656:	401a      	ands	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	3301      	adds	r3, #1
 800965c:	4903      	ldr	r1, [pc, #12]	; (800966c <uint8_to_ascii_buffer+0x3c>)
 800965e:	5c8a      	ldrb	r2, [r1, r2]
 8009660:	701a      	strb	r2, [r3, #0]
}
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	46bd      	mov	sp, r7
 8009666:	b002      	add	sp, #8
 8009668:	bd80      	pop	{r7, pc}
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	08014800 	.word	0x08014800

08009670 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	0008      	movs	r0, r1
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	0019      	movs	r1, r3
 800967e:	260b      	movs	r6, #11
 8009680:	19bb      	adds	r3, r7, r6
 8009682:	1c02      	adds	r2, r0, #0
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	2508      	movs	r5, #8
 8009688:	197b      	adds	r3, r7, r5
 800968a:	1c0a      	adds	r2, r1, #0
 800968c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	685c      	ldr	r4, [r3, #4]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	68d8      	ldr	r0, [r3, #12]
 8009696:	197b      	adds	r3, r7, r5
 8009698:	881d      	ldrh	r5, [r3, #0]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	19bb      	adds	r3, r7, r6
 800969e:	7819      	ldrb	r1, [r3, #0]
 80096a0:	002b      	movs	r3, r5
 80096a2:	47a0      	blx	r4
 80096a4:	0003      	movs	r3, r0
 80096a6:	617b      	str	r3, [r7, #20]

  return ret;
 80096a8:	697b      	ldr	r3, [r7, #20]
}
 80096aa:	0018      	movs	r0, r3
 80096ac:	46bd      	mov	sp, r7
 80096ae:	b007      	add	sp, #28
 80096b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096b2 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80096b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b4:	b087      	sub	sp, #28
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	0008      	movs	r0, r1
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	0019      	movs	r1, r3
 80096c0:	260b      	movs	r6, #11
 80096c2:	19bb      	adds	r3, r7, r6
 80096c4:	1c02      	adds	r2, r0, #0
 80096c6:	701a      	strb	r2, [r3, #0]
 80096c8:	2508      	movs	r5, #8
 80096ca:	197b      	adds	r3, r7, r5
 80096cc:	1c0a      	adds	r2, r1, #0
 80096ce:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681c      	ldr	r4, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	68d8      	ldr	r0, [r3, #12]
 80096d8:	197b      	adds	r3, r7, r5
 80096da:	881d      	ldrh	r5, [r3, #0]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	19bb      	adds	r3, r7, r6
 80096e0:	7819      	ldrb	r1, [r3, #0]
 80096e2:	002b      	movs	r3, r5
 80096e4:	47a0      	blx	r4
 80096e6:	0003      	movs	r3, r0
 80096e8:	617b      	str	r3, [r7, #20]

  return ret;
 80096ea:	697b      	ldr	r3, [r7, #20]
}
 80096ec:	0018      	movs	r0, r3
 80096ee:	46bd      	mov	sp, r7
 80096f0:	b007      	add	sp, #28
 80096f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096f4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80096f4:	b590      	push	{r4, r7, lr}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	000a      	movs	r2, r1
 80096fe:	1cfb      	adds	r3, r7, #3
 8009700:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8009702:	2410      	movs	r4, #16
 8009704:	193a      	adds	r2, r7, r4
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	2301      	movs	r3, #1
 800970a:	2120      	movs	r1, #32
 800970c:	f7ff ffb0 	bl	8009670 <lis2dw12_read_reg>
 8009710:	0003      	movs	r3, r0
 8009712:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d129      	bne.n	800976e <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800971a:	1cfb      	adds	r3, r7, #3
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	089b      	lsrs	r3, r3, #2
 8009720:	1c1a      	adds	r2, r3, #0
 8009722:	2303      	movs	r3, #3
 8009724:	4013      	ands	r3, r2
 8009726:	b2da      	uxtb	r2, r3
 8009728:	193b      	adds	r3, r7, r4
 800972a:	2103      	movs	r1, #3
 800972c:	400a      	ands	r2, r1
 800972e:	0090      	lsls	r0, r2, #2
 8009730:	781a      	ldrb	r2, [r3, #0]
 8009732:	210c      	movs	r1, #12
 8009734:	438a      	bics	r2, r1
 8009736:	1c11      	adds	r1, r2, #0
 8009738:	1c02      	adds	r2, r0, #0
 800973a:	430a      	orrs	r2, r1
 800973c:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800973e:	1cfb      	adds	r3, r7, #3
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2203      	movs	r2, #3
 8009744:	4013      	ands	r3, r2
 8009746:	b2da      	uxtb	r2, r3
 8009748:	193b      	adds	r3, r7, r4
 800974a:	2103      	movs	r1, #3
 800974c:	400a      	ands	r2, r1
 800974e:	0010      	movs	r0, r2
 8009750:	781a      	ldrb	r2, [r3, #0]
 8009752:	2103      	movs	r1, #3
 8009754:	438a      	bics	r2, r1
 8009756:	1c11      	adds	r1, r2, #0
 8009758:	1c02      	adds	r2, r0, #0
 800975a:	430a      	orrs	r2, r1
 800975c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800975e:	193a      	adds	r2, r7, r4
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	2301      	movs	r3, #1
 8009764:	2120      	movs	r1, #32
 8009766:	f7ff ffa4 	bl	80096b2 <lis2dw12_write_reg>
 800976a:	0003      	movs	r3, r0
 800976c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d108      	bne.n	8009786 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009774:	230c      	movs	r3, #12
 8009776:	18fa      	adds	r2, r7, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	2301      	movs	r3, #1
 800977c:	2125      	movs	r1, #37	; 0x25
 800977e:	f7ff ff77 	bl	8009670 <lis2dw12_read_reg>
 8009782:	0003      	movs	r3, r0
 8009784:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d11a      	bne.n	80097c2 <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800978c:	1cfb      	adds	r3, r7, #3
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	091b      	lsrs	r3, r3, #4
 8009792:	1c1a      	adds	r2, r3, #0
 8009794:	2301      	movs	r3, #1
 8009796:	4013      	ands	r3, r2
 8009798:	b2da      	uxtb	r2, r3
 800979a:	240c      	movs	r4, #12
 800979c:	193b      	adds	r3, r7, r4
 800979e:	2101      	movs	r1, #1
 80097a0:	400a      	ands	r2, r1
 80097a2:	0090      	lsls	r0, r2, #2
 80097a4:	781a      	ldrb	r2, [r3, #0]
 80097a6:	2104      	movs	r1, #4
 80097a8:	438a      	bics	r2, r1
 80097aa:	1c11      	adds	r1, r2, #0
 80097ac:	1c02      	adds	r2, r0, #0
 80097ae:	430a      	orrs	r2, r1
 80097b0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80097b2:	193a      	adds	r2, r7, r4
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	2301      	movs	r3, #1
 80097b8:	2125      	movs	r1, #37	; 0x25
 80097ba:	f7ff ff7a 	bl	80096b2 <lis2dw12_write_reg>
 80097be:	0003      	movs	r3, r0
 80097c0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80097c2:	697b      	ldr	r3, [r7, #20]
}
 80097c4:	0018      	movs	r0, r3
 80097c6:	46bd      	mov	sp, r7
 80097c8:	b007      	add	sp, #28
 80097ca:	bd90      	pop	{r4, r7, pc}

080097cc <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80097cc:	b590      	push	{r4, r7, lr}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	000a      	movs	r2, r1
 80097d6:	1cfb      	adds	r3, r7, #3
 80097d8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80097da:	2410      	movs	r4, #16
 80097dc:	193a      	adds	r2, r7, r4
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	2301      	movs	r3, #1
 80097e2:	2120      	movs	r1, #32
 80097e4:	f7ff ff44 	bl	8009670 <lis2dw12_read_reg>
 80097e8:	0003      	movs	r3, r0
 80097ea:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d115      	bne.n	800981e <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 80097f2:	1cfb      	adds	r3, r7, #3
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	220f      	movs	r2, #15
 80097f8:	4013      	ands	r3, r2
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	193b      	adds	r3, r7, r4
 80097fe:	0110      	lsls	r0, r2, #4
 8009800:	781a      	ldrb	r2, [r3, #0]
 8009802:	210f      	movs	r1, #15
 8009804:	400a      	ands	r2, r1
 8009806:	1c11      	adds	r1, r2, #0
 8009808:	1c02      	adds	r2, r0, #0
 800980a:	430a      	orrs	r2, r1
 800980c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800980e:	193a      	adds	r2, r7, r4
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	2301      	movs	r3, #1
 8009814:	2120      	movs	r1, #32
 8009816:	f7ff ff4c 	bl	80096b2 <lis2dw12_write_reg>
 800981a:	0003      	movs	r3, r0
 800981c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d108      	bne.n	8009836 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8009824:	230c      	movs	r3, #12
 8009826:	18fa      	adds	r2, r7, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	2301      	movs	r3, #1
 800982c:	2122      	movs	r1, #34	; 0x22
 800982e:	f7ff ff1f 	bl	8009670 <lis2dw12_read_reg>
 8009832:	0003      	movs	r3, r0
 8009834:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d11a      	bne.n	8009872 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800983c:	1cfb      	adds	r3, r7, #3
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	091b      	lsrs	r3, r3, #4
 8009842:	1c1a      	adds	r2, r3, #0
 8009844:	2303      	movs	r3, #3
 8009846:	4013      	ands	r3, r2
 8009848:	b2da      	uxtb	r2, r3
 800984a:	240c      	movs	r4, #12
 800984c:	193b      	adds	r3, r7, r4
 800984e:	2103      	movs	r1, #3
 8009850:	400a      	ands	r2, r1
 8009852:	0010      	movs	r0, r2
 8009854:	781a      	ldrb	r2, [r3, #0]
 8009856:	2103      	movs	r1, #3
 8009858:	438a      	bics	r2, r1
 800985a:	1c11      	adds	r1, r2, #0
 800985c:	1c02      	adds	r2, r0, #0
 800985e:	430a      	orrs	r2, r1
 8009860:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8009862:	193a      	adds	r2, r7, r4
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	2301      	movs	r3, #1
 8009868:	2122      	movs	r1, #34	; 0x22
 800986a:	f7ff ff22 	bl	80096b2 <lis2dw12_write_reg>
 800986e:	0003      	movs	r3, r0
 8009870:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009872:	697b      	ldr	r3, [r7, #20]
}
 8009874:	0018      	movs	r0, r3
 8009876:	46bd      	mov	sp, r7
 8009878:	b007      	add	sp, #28
 800987a:	bd90      	pop	{r4, r7, pc}

0800987c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 800987c:	b590      	push	{r4, r7, lr}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	000a      	movs	r2, r1
 8009886:	1cfb      	adds	r3, r7, #3
 8009888:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800988a:	2408      	movs	r4, #8
 800988c:	193a      	adds	r2, r7, r4
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	2301      	movs	r3, #1
 8009892:	2125      	movs	r1, #37	; 0x25
 8009894:	f7ff feec 	bl	8009670 <lis2dw12_read_reg>
 8009898:	0003      	movs	r3, r0
 800989a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d117      	bne.n	80098d2 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 80098a2:	1cfb      	adds	r3, r7, #3
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2203      	movs	r2, #3
 80098a8:	4013      	ands	r3, r2
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	193b      	adds	r3, r7, r4
 80098ae:	2103      	movs	r1, #3
 80098b0:	400a      	ands	r2, r1
 80098b2:	0110      	lsls	r0, r2, #4
 80098b4:	781a      	ldrb	r2, [r3, #0]
 80098b6:	2130      	movs	r1, #48	; 0x30
 80098b8:	438a      	bics	r2, r1
 80098ba:	1c11      	adds	r1, r2, #0
 80098bc:	1c02      	adds	r2, r0, #0
 80098be:	430a      	orrs	r2, r1
 80098c0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80098c2:	193a      	adds	r2, r7, r4
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	2301      	movs	r3, #1
 80098c8:	2125      	movs	r1, #37	; 0x25
 80098ca:	f7ff fef2 	bl	80096b2 <lis2dw12_write_reg>
 80098ce:	0003      	movs	r3, r0
 80098d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80098d2:	68fb      	ldr	r3, [r7, #12]
}
 80098d4:	0018      	movs	r0, r3
 80098d6:	46bd      	mov	sp, r7
 80098d8:	b005      	add	sp, #20
 80098da:	bd90      	pop	{r4, r7, pc}

080098dc <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	2301      	movs	r3, #1
 80098ec:	210f      	movs	r1, #15
 80098ee:	f7ff febf 	bl	8009670 <lis2dw12_read_reg>
 80098f2:	0003      	movs	r3, r0
 80098f4:	60fb      	str	r3, [r7, #12]

  return ret;
 80098f6:	68fb      	ldr	r3, [r7, #12]
}
 80098f8:	0018      	movs	r0, r3
 80098fa:	46bd      	mov	sp, r7
 80098fc:	b004      	add	sp, #16
 80098fe:	bd80      	pop	{r7, pc}

08009900 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	000a      	movs	r2, r1
 800990a:	1cfb      	adds	r3, r7, #3
 800990c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800990e:	2408      	movs	r4, #8
 8009910:	193a      	adds	r2, r7, r4
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	2301      	movs	r3, #1
 8009916:	2121      	movs	r1, #33	; 0x21
 8009918:	f7ff feaa 	bl	8009670 <lis2dw12_read_reg>
 800991c:	0003      	movs	r3, r0
 800991e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d117      	bne.n	8009956 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8009926:	1cfb      	adds	r3, r7, #3
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2201      	movs	r2, #1
 800992c:	4013      	ands	r3, r2
 800992e:	b2da      	uxtb	r2, r3
 8009930:	193b      	adds	r3, r7, r4
 8009932:	2101      	movs	r1, #1
 8009934:	400a      	ands	r2, r1
 8009936:	0190      	lsls	r0, r2, #6
 8009938:	781a      	ldrb	r2, [r3, #0]
 800993a:	2140      	movs	r1, #64	; 0x40
 800993c:	438a      	bics	r2, r1
 800993e:	1c11      	adds	r1, r2, #0
 8009940:	1c02      	adds	r2, r0, #0
 8009942:	430a      	orrs	r2, r1
 8009944:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009946:	193a      	adds	r2, r7, r4
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	2301      	movs	r3, #1
 800994c:	2121      	movs	r1, #33	; 0x21
 800994e:	f7ff feb0 	bl	80096b2 <lis2dw12_write_reg>
 8009952:	0003      	movs	r3, r0
 8009954:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009956:	68fb      	ldr	r3, [r7, #12]
}
 8009958:	0018      	movs	r0, r3
 800995a:	46bd      	mov	sp, r7
 800995c:	b005      	add	sp, #20
 800995e:	bd90      	pop	{r4, r7, pc}

08009960 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8009960:	b590      	push	{r4, r7, lr}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800996a:	2408      	movs	r4, #8
 800996c:	193a      	adds	r2, r7, r4
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	2301      	movs	r3, #1
 8009972:	2121      	movs	r1, #33	; 0x21
 8009974:	f7ff fe7c 	bl	8009670 <lis2dw12_read_reg>
 8009978:	0003      	movs	r3, r0
 800997a:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 800997c:	193b      	adds	r3, r7, r4
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	065b      	lsls	r3, r3, #25
 8009982:	0fdb      	lsrs	r3, r3, #31
 8009984:	b2db      	uxtb	r3, r3
 8009986:	001a      	movs	r2, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	701a      	strb	r2, [r3, #0]

  return ret;
 800998c:	68fb      	ldr	r3, [r7, #12]
}
 800998e:	0018      	movs	r0, r3
 8009990:	46bd      	mov	sp, r7
 8009992:	b005      	add	sp, #20
 8009994:	bd90      	pop	{r4, r7, pc}

08009996 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8009996:	b590      	push	{r4, r7, lr}
 8009998:	b087      	sub	sp, #28
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	000a      	movs	r2, r1
 80099a0:	1cfb      	adds	r3, r7, #3
 80099a2:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80099a4:	2410      	movs	r4, #16
 80099a6:	193a      	adds	r2, r7, r4
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	2301      	movs	r3, #1
 80099ac:	2125      	movs	r1, #37	; 0x25
 80099ae:	f7ff fe5f 	bl	8009670 <lis2dw12_read_reg>
 80099b2:	0003      	movs	r3, r0
 80099b4:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d119      	bne.n	80099f0 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 80099bc:	1cfb      	adds	r3, r7, #3
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	091b      	lsrs	r3, r3, #4
 80099c2:	1c1a      	adds	r2, r3, #0
 80099c4:	2301      	movs	r3, #1
 80099c6:	4013      	ands	r3, r2
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	193b      	adds	r3, r7, r4
 80099cc:	2101      	movs	r1, #1
 80099ce:	400a      	ands	r2, r1
 80099d0:	00d0      	lsls	r0, r2, #3
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	2108      	movs	r1, #8
 80099d6:	438a      	bics	r2, r1
 80099d8:	1c11      	adds	r1, r2, #0
 80099da:	1c02      	adds	r2, r0, #0
 80099dc:	430a      	orrs	r2, r1
 80099de:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80099e0:	193a      	adds	r2, r7, r4
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	2301      	movs	r3, #1
 80099e6:	2125      	movs	r1, #37	; 0x25
 80099e8:	f7ff fe63 	bl	80096b2 <lis2dw12_write_reg>
 80099ec:	0003      	movs	r3, r0
 80099ee:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d108      	bne.n	8009a08 <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 80099f6:	230c      	movs	r3, #12
 80099f8:	18fa      	adds	r2, r7, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	2301      	movs	r3, #1
 80099fe:	213f      	movs	r1, #63	; 0x3f
 8009a00:	f7ff fe36 	bl	8009670 <lis2dw12_read_reg>
 8009a04:	0003      	movs	r3, r0
 8009a06:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d118      	bne.n	8009a40 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8009a0e:	1cfb      	adds	r3, r7, #3
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2201      	movs	r2, #1
 8009a14:	4013      	ands	r3, r2
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	240c      	movs	r4, #12
 8009a1a:	193b      	adds	r3, r7, r4
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	400a      	ands	r2, r1
 8009a20:	0110      	lsls	r0, r2, #4
 8009a22:	781a      	ldrb	r2, [r3, #0]
 8009a24:	2110      	movs	r1, #16
 8009a26:	438a      	bics	r2, r1
 8009a28:	1c11      	adds	r1, r2, #0
 8009a2a:	1c02      	adds	r2, r0, #0
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8009a30:	193a      	adds	r2, r7, r4
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	2301      	movs	r3, #1
 8009a36:	213f      	movs	r1, #63	; 0x3f
 8009a38:	f7ff fe3b 	bl	80096b2 <lis2dw12_write_reg>
 8009a3c:	0003      	movs	r3, r0
 8009a3e:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8009a40:	697b      	ldr	r3, [r7, #20]
}
 8009a42:	0018      	movs	r0, r3
 8009a44:	46bd      	mov	sp, r7
 8009a46:	b007      	add	sp, #28
 8009a48:	bd90      	pop	{r4, r7, pc}

08009a4a <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b086      	sub	sp, #24
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8009a54:	2310      	movs	r3, #16
 8009a56:	18fa      	adds	r2, r7, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	2124      	movs	r1, #36	; 0x24
 8009a5e:	f7ff fe07 	bl	8009670 <lis2dw12_read_reg>
 8009a62:	0003      	movs	r3, r0
 8009a64:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d108      	bne.n	8009a7e <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009a6c:	230c      	movs	r3, #12
 8009a6e:	18fa      	adds	r2, r7, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	2301      	movs	r3, #1
 8009a74:	213f      	movs	r1, #63	; 0x3f
 8009a76:	f7ff fdfb 	bl	8009670 <lis2dw12_read_reg>
 8009a7a:	0003      	movs	r3, r0
 8009a7c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d146      	bne.n	8009b12 <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	071b      	lsls	r3, r3, #28
 8009a8a:	0fdb      	lsrs	r3, r3, #31
 8009a8c:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	06db      	lsls	r3, r3, #27
 8009a94:	0fdb      	lsrs	r3, r3, #31
 8009a96:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	069b      	lsls	r3, r3, #26
 8009aa2:	0fdb      	lsrs	r3, r3, #31
 8009aa4:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	065b      	lsls	r3, r3, #25
 8009ab0:	0fdb      	lsrs	r3, r3, #31
 8009ab2:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	061b      	lsls	r3, r3, #24
 8009abe:	0fdb      	lsrs	r3, r3, #31
 8009ac0:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009ac6:	2110      	movs	r1, #16
 8009ac8:	187b      	adds	r3, r7, r1
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	061b      	lsls	r3, r3, #24
 8009ace:	0fdb      	lsrs	r3, r3, #31
 8009ad0:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8009ad6:	187b      	adds	r3, r7, r1
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	065b      	lsls	r3, r3, #25
 8009adc:	0fdb      	lsrs	r3, r3, #31
 8009ade:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d006      	beq.n	8009af6 <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8009ae8:	230c      	movs	r3, #12
 8009aea:	18fb      	adds	r3, r7, r3
 8009aec:	781a      	ldrb	r2, [r3, #0]
 8009aee:	2120      	movs	r1, #32
 8009af0:	430a      	orrs	r2, r1
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	e005      	b.n	8009b02 <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8009af6:	230c      	movs	r3, #12
 8009af8:	18fb      	adds	r3, r7, r3
 8009afa:	781a      	ldrb	r2, [r3, #0]
 8009afc:	2120      	movs	r1, #32
 8009afe:	438a      	bics	r2, r1
 8009b00:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	2301      	movs	r3, #1
 8009b08:	2123      	movs	r1, #35	; 0x23
 8009b0a:	f7ff fdd2 	bl	80096b2 <lis2dw12_write_reg>
 8009b0e:	0003      	movs	r3, r0
 8009b10:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d108      	bne.n	8009b2a <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009b18:	230c      	movs	r3, #12
 8009b1a:	18fa      	adds	r2, r7, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	2301      	movs	r3, #1
 8009b20:	213f      	movs	r1, #63	; 0x3f
 8009b22:	f7ff fdc6 	bl	80096b2 <lis2dw12_write_reg>
 8009b26:	0003      	movs	r3, r0
 8009b28:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009b2a:	697b      	ldr	r3, [r7, #20]
}
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	b006      	add	sp, #24
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	2301      	movs	r3, #1
 8009b44:	2123      	movs	r1, #35	; 0x23
 8009b46:	f7ff fd93 	bl	8009670 <lis2dw12_read_reg>
 8009b4a:	0003      	movs	r3, r0
 8009b4c:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
}
 8009b50:	0018      	movs	r0, r3
 8009b52:	46bd      	mov	sp, r7
 8009b54:	b004      	add	sp, #16
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009b58:	b590      	push	{r4, r7, lr}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	000a      	movs	r2, r1
 8009b62:	1cfb      	adds	r3, r7, #3
 8009b64:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009b66:	2408      	movs	r4, #8
 8009b68:	193a      	adds	r2, r7, r4
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	2134      	movs	r1, #52	; 0x34
 8009b70:	f7ff fd7e 	bl	8009670 <lis2dw12_read_reg>
 8009b74:	0003      	movs	r3, r0
 8009b76:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d117      	bne.n	8009bae <lis2dw12_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8009b7e:	1cfb      	adds	r3, r7, #3
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	223f      	movs	r2, #63	; 0x3f
 8009b84:	4013      	ands	r3, r2
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	193b      	adds	r3, r7, r4
 8009b8a:	213f      	movs	r1, #63	; 0x3f
 8009b8c:	400a      	ands	r2, r1
 8009b8e:	0010      	movs	r0, r2
 8009b90:	781a      	ldrb	r2, [r3, #0]
 8009b92:	213f      	movs	r1, #63	; 0x3f
 8009b94:	438a      	bics	r2, r1
 8009b96:	1c11      	adds	r1, r2, #0
 8009b98:	1c02      	adds	r2, r0, #0
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009b9e:	193a      	adds	r2, r7, r4
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	2134      	movs	r1, #52	; 0x34
 8009ba6:	f7ff fd84 	bl	80096b2 <lis2dw12_write_reg>
 8009baa:	0003      	movs	r3, r0
 8009bac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009bae:	68fb      	ldr	r3, [r7, #12]
}
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	b005      	add	sp, #20
 8009bb6:	bd90      	pop	{r4, r7, pc}

08009bb8 <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009bb8:	b590      	push	{r4, r7, lr}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	000a      	movs	r2, r1
 8009bc2:	1cfb      	adds	r3, r7, #3
 8009bc4:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009bc6:	2408      	movs	r4, #8
 8009bc8:	193a      	adds	r2, r7, r4
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	2301      	movs	r3, #1
 8009bce:	2135      	movs	r1, #53	; 0x35
 8009bd0:	f7ff fd4e 	bl	8009670 <lis2dw12_read_reg>
 8009bd4:	0003      	movs	r3, r0
 8009bd6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d117      	bne.n	8009c0e <lis2dw12_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8009bde:	1cfb      	adds	r3, r7, #3
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	2203      	movs	r2, #3
 8009be4:	4013      	ands	r3, r2
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	193b      	adds	r3, r7, r4
 8009bea:	2103      	movs	r1, #3
 8009bec:	400a      	ands	r2, r1
 8009bee:	0150      	lsls	r0, r2, #5
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	2160      	movs	r1, #96	; 0x60
 8009bf4:	438a      	bics	r2, r1
 8009bf6:	1c11      	adds	r1, r2, #0
 8009bf8:	1c02      	adds	r2, r0, #0
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009bfe:	193a      	adds	r2, r7, r4
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	2301      	movs	r3, #1
 8009c04:	2135      	movs	r1, #53	; 0x35
 8009c06:	f7ff fd54 	bl	80096b2 <lis2dw12_write_reg>
 8009c0a:	0003      	movs	r3, r0
 8009c0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
}
 8009c10:	0018      	movs	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	b005      	add	sp, #20
 8009c16:	bd90      	pop	{r4, r7, pc}

08009c18 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ( void )
{
 8009c18:	b590      	push	{r4, r7, lr}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009c1e:	1dfb      	adds	r3, r7, #7
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8009c24:	4b23      	ldr	r3, [pc, #140]	; (8009cb4 <my_astro_init+0x9c>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 8009c2a:	4b23      	ldr	r3, [pc, #140]	; (8009cb8 <my_astro_init+0xa0>)
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f7fc fda1 	bl	8006774 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009c32:	e015      	b.n	8009c60 <my_astro_init+0x48>
	{
		reset_astronode () ;
 8009c34:	f7f9 f970 	bl	8002f18 <reset_astronode>
		HAL_Delay ( 100 ) ;
 8009c38:	2064      	movs	r0, #100	; 0x64
 8009c3a:	f7f9 feb7 	bl	80039ac <HAL_Delay>
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 8009c3e:	1dfc      	adds	r4, r7, #7
 8009c40:	2300      	movs	r3, #0
 8009c42:	9303      	str	r3, [sp, #12]
 8009c44:	2301      	movs	r3, #1
 8009c46:	9302      	str	r3, [sp, #8]
 8009c48:	2301      	movs	r3, #1
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	2300      	movs	r3, #0
 8009c52:	2201      	movs	r2, #1
 8009c54:	2101      	movs	r1, #1
 8009c56:	2001      	movs	r0, #1
 8009c58:	f7fe f85c 	bl	8007d14 <astronode_send_cfg_wr>
 8009c5c:	0003      	movs	r3, r0
 8009c5e:	7023      	strb	r3, [r4, #0]
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009c60:	4b14      	ldr	r3, [pc, #80]	; (8009cb4 <my_astro_init+0x9c>)
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	2b3b      	cmp	r3, #59	; 0x3b
 8009c66:	d806      	bhi.n	8009c76 <my_astro_init+0x5e>
 8009c68:	1dfb      	adds	r3, r7, #7
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	4053      	eors	r3, r2
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1de      	bne.n	8009c34 <my_astro_init+0x1c>
	}
	tim_seconds = 0 ;
 8009c76:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <my_astro_init+0x9c>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 8009c7c:	4b0e      	ldr	r3, [pc, #56]	; (8009cb8 <my_astro_init+0xa0>)
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7fc fdd4 	bl	800682c <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 8009c84:	1dfb      	adds	r3, r7, #7
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00d      	beq.n	8009ca8 <my_astro_init+0x90>
	{
		astronode_send_rtc_rr () ;
 8009c8c:	f7fe fd06 	bl	800869c <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8009c90:	f7fe f808 	bl	8007ca4 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8009c94:	f7fe fdfc 	bl	8008890 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8009c98:	f7fe f992 	bl	8007fc0 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8009c9c:	f7fe f8e6 	bl	8007e6c <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8009ca0:	f7fe fc80 	bl	80085a4 <astronode_send_pld_fr>
		return true ;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e000      	b.n	8009caa <my_astro_init+0x92>
	}
	else
	{
		return false ;
 8009ca8:	2300      	movs	r3, #0
	}
}
 8009caa:	0018      	movs	r0, r3
 8009cac:	46bd      	mov	sp, r7
 8009cae:	b003      	add	sp, #12
 8009cb0:	bd90      	pop	{r4, r7, pc}
 8009cb2:	46c0      	nop			; (mov r8, r8)
 8009cb4:	20000a24 	.word	0x20000a24
 8009cb8:	2000078c 	.word	0x2000078c

08009cbc <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	0002      	movs	r2, r0
 8009cc4:	6039      	str	r1, [r7, #0]
 8009cc6:	1dbb      	adds	r3, r7, #6
 8009cc8:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	0018      	movs	r0, r3
 8009cce:	f7f6 fa19 	bl	8000104 <strlen>
 8009cd2:	0003      	movs	r3, r0
 8009cd4:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2ba0      	cmp	r3, #160	; 0xa0
 8009cda:	d80b      	bhi.n	8009cf4 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	1dbb      	adds	r3, r7, #6
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	0018      	movs	r0, r3
 8009ce8:	f7fe fbb8 	bl	800845c <astronode_send_pld_er>
 8009cec:	1e03      	subs	r3, r0, #0
 8009cee:	d005      	beq.n	8009cfc <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e004      	b.n	8009cfe <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009cf4:	4b04      	ldr	r3, [pc, #16]	; (8009d08 <my_astro_add_payload_2_queue+0x4c>)
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	f7f9 f8de 	bl	8002eb8 <send_debug_logs>
	}
	return false ;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	0018      	movs	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	b004      	add	sp, #16
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	080145fc 	.word	0x080145fc

08009d0c <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8009d10:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <my_astro_read_evt_reg+0x5c>)
 8009d12:	0018      	movs	r0, r3
 8009d14:	f7f9 f8d0 	bl	8002eb8 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009d18:	f7fe fa60 	bl	80081dc <astronode_send_evt_rr>
	if (is_sak_available () )
 8009d1c:	f7ff f812 	bl	8008d44 <is_sak_available>
 8009d20:	1e03      	subs	r3, r0, #0
 8009d22:	d007      	beq.n	8009d34 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8009d24:	f7fe fd1e 	bl	8008764 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009d28:	f7fe fd72 	bl	8008810 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8009d2c:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <my_astro_read_evt_reg+0x60>)
 8009d2e:	0018      	movs	r0, r3
 8009d30:	f7f9 f8c2 	bl	8002eb8 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009d34:	f7ff f810 	bl	8008d58 <is_astronode_reset>
 8009d38:	1e03      	subs	r3, r0, #0
 8009d3a:	d005      	beq.n	8009d48 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8009d3c:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <my_astro_read_evt_reg+0x64>)
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f7f9 f8ba 	bl	8002eb8 <send_debug_logs>
	  astronode_send_res_cr () ;
 8009d44:	f7fe fc6a 	bl	800861c <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009d48:	f7ff f810 	bl	8008d6c <is_command_available>
 8009d4c:	1e03      	subs	r3, r0, #0
 8009d4e:	d007      	beq.n	8009d60 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 8009d50:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <my_astro_read_evt_reg+0x68>)
 8009d52:	0018      	movs	r0, r3
 8009d54:	f7f9 f8b0 	bl	8002eb8 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8009d58:	f7fe fe84 	bl	8008a64 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 8009d5c:	f7fe fe42 	bl	80089e4 <astronode_send_cmd_cr>
	}
	return true ;
 8009d60:	2301      	movs	r3, #1
}
 8009d62:	0018      	movs	r0, r3
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	08014640 	.word	0x08014640
 8009d6c:	0801465c 	.word	0x0801465c
 8009d70:	08014688 	.word	0x08014688
 8009d74:	080146ac 	.word	0x080146ac

08009d78 <my_astro_log>:
bool my_astro_log ( void )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 8009d7c:	f7fe fc8e 	bl	800869c <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 8009d80:	f7fe f9c8 	bl	8008114 <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 8009d84:	2301      	movs	r3, #1
}
 8009d86:	0018      	movs	r0, r3
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	0011      	movs	r1, r2
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	f7fe fa9d 	bl	80082dc <astronode_send_geo_wr>
}
 8009da2:	46c0      	nop			; (mov r8, r8)
 8009da4:	46bd      	mov	sp, r7
 8009da6:	b002      	add	sp, #8
 8009da8:	bd80      	pop	{r7, pc}

08009daa <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 8009daa:	b590      	push	{r4, r7, lr}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 8009db2:	230f      	movs	r3, #15
 8009db4:	18fb      	adds	r3, r7, r3
 8009db6:	2201      	movs	r2, #1
 8009db8:	701a      	strb	r2, [r3, #0]

	/*Restore default configuration */
	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f7ff fd9e 	bl	8009900 <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( ctx, &rst ) ;
 8009dc4:	240f      	movs	r4, #15
 8009dc6:	193a      	adds	r2, r7, r4
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	0011      	movs	r1, r2
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f7ff fdc7 	bl	8009960 <lis2dw12_reset_get>
	} while ( rst ) ;
 8009dd2:	193b      	adds	r3, r7, r4
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1f4      	bne.n	8009dc4 <my_lis2dw12_init+0x1a>

	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	0018      	movs	r0, r3
 8009dde:	f000 f828 	bl	8009e32 <my_lis2dw12_get_id>
 8009de2:	0003      	movs	r3, r0
 8009de4:	2b44      	cmp	r3, #68	; 0x44
 8009de6:	d11f      	bne.n	8009e28 <my_lis2dw12_init+0x7e>
	{
		lis2dw12_full_scale_set 	( ctx , LIS2DW12_2g ) ;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2100      	movs	r1, #0
 8009dec:	0018      	movs	r0, r3
 8009dee:	f7ff fd45 	bl	800987c <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2110      	movs	r1, #16
 8009df6:	0018      	movs	r0, r3
 8009df8:	f7ff fc7c 	bl	80096f4 <lis2dw12_power_mode_set>
		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2106      	movs	r1, #6
 8009e00:	0018      	movs	r0, r3
 8009e02:	f7ff fce3 	bl	80097cc <lis2dw12_data_rate_set>
		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2110      	movs	r1, #16
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f7ff fdc3 	bl	8009996 <lis2dw12_filter_path_set>
		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2100      	movs	r1, #0
 8009e14:	0018      	movs	r0, r3
 8009e16:	f7ff fecf 	bl	8009bb8 <lis2dw12_wkup_dur_set>
		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2102      	movs	r1, #2
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f7ff fe9a 	bl	8009b58 <lis2dw12_wkup_threshold_set>
		return true ;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e000      	b.n	8009e2a <my_lis2dw12_init+0x80>
	}

	return false ;
 8009e28:	2300      	movs	r3, #0

}
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	b005      	add	sp, #20
 8009e30:	bd90      	pop	{r4, r7, pc}

08009e32 <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 8009e32:	b590      	push	{r4, r7, lr}
 8009e34:	b085      	sub	sp, #20
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 8009e3a:	210f      	movs	r1, #15
 8009e3c:	187b      	adds	r3, r7, r1
 8009e3e:	2200      	movs	r2, #0
 8009e40:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 8009e42:	000c      	movs	r4, r1
 8009e44:	187a      	adds	r2, r7, r1
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	0011      	movs	r1, r2
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f7ff fd46 	bl	80098dc <lis2dw12_device_id_get>
	return id ;
 8009e50:	193b      	adds	r3, r7, r4
 8009e52:	781b      	ldrb	r3, [r3, #0]
}
 8009e54:	0018      	movs	r0, r3
 8009e56:	46bd      	mov	sp, r7
 8009e58:	b005      	add	sp, #20
 8009e5a:	bd90      	pop	{r4, r7, pc}

08009e5c <my_lis2dw12_int1_wu_enable>:

void my_lis2dw12_int1_wu_enable ( stmdev_ctx_t* ctx )
{
 8009e5c:	b590      	push	{r4, r7, lr}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8009e64:	240c      	movs	r4, #12
 8009e66:	193a      	adds	r2, r7, r4
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	0011      	movs	r1, r2
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f7ff fe61 	bl	8009b34 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 8009e72:	0020      	movs	r0, r4
 8009e74:	183b      	adds	r3, r7, r0
 8009e76:	781a      	ldrb	r2, [r3, #0]
 8009e78:	2120      	movs	r1, #32
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8009e7e:	183a      	adds	r2, r7, r0
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	0011      	movs	r1, r2
 8009e84:	0018      	movs	r0, r3
 8009e86:	f7ff fde0 	bl	8009a4a <lis2dw12_pin_int1_route_set>
}
 8009e8a:	46c0      	nop			; (mov r8, r8)
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b005      	add	sp, #20
 8009e90:	bd90      	pop	{r4, r7, pc}

08009e92 <my_lis2dw12_int1_wu_disable>:
void my_lis2dw12_int1_wu_disable ( stmdev_ctx_t* ctx )
{
 8009e92:	b590      	push	{r4, r7, lr}
 8009e94:	b085      	sub	sp, #20
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8009e9a:	240c      	movs	r4, #12
 8009e9c:	193a      	adds	r2, r7, r4
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	0011      	movs	r1, r2
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	f7ff fe46 	bl	8009b34 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_DISABLE ;
 8009ea8:	0020      	movs	r0, r4
 8009eaa:	183b      	adds	r3, r7, r0
 8009eac:	781a      	ldrb	r2, [r3, #0]
 8009eae:	2120      	movs	r1, #32
 8009eb0:	438a      	bics	r2, r1
 8009eb2:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8009eb4:	183a      	adds	r2, r7, r0
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	0011      	movs	r1, r2
 8009eba:	0018      	movs	r0, r3
 8009ebc:	f7ff fdc5 	bl	8009a4a <lis2dw12_pin_int1_route_set>
}
 8009ec0:	46c0      	nop			; (mov r8, r8)
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	b005      	add	sp, #20
 8009ec6:	bd90      	pop	{r4, r7, pc}

08009ec8 <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 8009ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eca:	4cde      	ldr	r4, [pc, #888]	; (800a244 <my_lx6_get_coordinates+0x37c>)
 8009ecc:	44a5      	add	sp, r4
 8009ece:	af02      	add	r7, sp, #8
 8009ed0:	0001      	movs	r1, r0
 8009ed2:	603a      	str	r2, [r7, #0]
 8009ed4:	607b      	str	r3, [r7, #4]
 8009ed6:	4bdc      	ldr	r3, [pc, #880]	; (800a248 <my_lx6_get_coordinates+0x380>)
 8009ed8:	20da      	movs	r0, #218	; 0xda
 8009eda:	0080      	lsls	r0, r0, #2
 8009edc:	181b      	adds	r3, r3, r0
 8009ede:	19db      	adds	r3, r3, r7
 8009ee0:	1c0a      	adds	r2, r1, #0
 8009ee2:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 8009ee4:	4bd9      	ldr	r3, [pc, #868]	; (800a24c <my_lx6_get_coordinates+0x384>)
 8009ee6:	18fb      	adds	r3, r7, r3
 8009ee8:	2200      	movs	r2, #0
 8009eea:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 8009eec:	4bd8      	ldr	r3, [pc, #864]	; (800a250 <my_lx6_get_coordinates+0x388>)
 8009eee:	18fb      	adds	r3, r7, r3
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009ef4:	4bd7      	ldr	r3, [pc, #860]	; (800a254 <my_lx6_get_coordinates+0x38c>)
 8009ef6:	0004      	movs	r4, r0
 8009ef8:	191b      	adds	r3, r3, r4
 8009efa:	19db      	adds	r3, r3, r7
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	3304      	adds	r3, #4
 8009f02:	22f6      	movs	r2, #246	; 0xf6
 8009f04:	2100      	movs	r1, #0
 8009f06:	0018      	movs	r0, r3
 8009f08:	f002 fa3a 	bl	800c380 <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f0c:	4bd2      	ldr	r3, [pc, #840]	; (800a258 <my_lx6_get_coordinates+0x390>)
 8009f0e:	191b      	adds	r3, r3, r4
 8009f10:	19db      	adds	r3, r3, r7
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	3304      	adds	r3, #4
 8009f18:	22f6      	movs	r2, #246	; 0xf6
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	0018      	movs	r0, r3
 8009f1e:	f002 fa2f 	bl	800c380 <memset>
	uint8_t		rmc_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f22:	4bce      	ldr	r3, [pc, #824]	; (800a25c <my_lx6_get_coordinates+0x394>)
 8009f24:	191b      	adds	r3, r3, r4
 8009f26:	19db      	adds	r3, r3, r7
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	22f6      	movs	r2, #246	; 0xf6
 8009f30:	2100      	movs	r1, #0
 8009f32:	0018      	movs	r0, r3
 8009f34:	f002 fa24 	bl	800c380 <memset>
	uint8_t		i_nmea = 0 ;
 8009f38:	4bc9      	ldr	r3, [pc, #804]	; (800a260 <my_lx6_get_coordinates+0x398>)
 8009f3a:	0021      	movs	r1, r4
 8009f3c:	185b      	adds	r3, r3, r1
 8009f3e:	19db      	adds	r3, r3, r7
 8009f40:	2200      	movs	r2, #0
 8009f42:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009f44:	4bc7      	ldr	r3, [pc, #796]	; (800a264 <my_lx6_get_coordinates+0x39c>)
 8009f46:	18fb      	adds	r3, r7, r3
 8009f48:	2200      	movs	r2, #0
 8009f4a:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009f4c:	4bc6      	ldr	r3, [pc, #792]	; (800a268 <my_lx6_get_coordinates+0x3a0>)
 8009f4e:	000c      	movs	r4, r1
 8009f50:	185b      	adds	r3, r3, r1
 8009f52:	19db      	adds	r3, r3, r7
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	3304      	adds	r3, #4
 8009f5a:	2208      	movs	r2, #8
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f002 fa0e 	bl	800c380 <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009f64:	4bc1      	ldr	r3, [pc, #772]	; (800a26c <my_lx6_get_coordinates+0x3a4>)
 8009f66:	191b      	adds	r3, r3, r4
 8009f68:	19db      	adds	r3, r3, r7
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	2208      	movs	r2, #8
 8009f72:	2100      	movs	r1, #0
 8009f74:	0018      	movs	r0, r3
 8009f76:	f002 fa03 	bl	800c380 <memset>
	char 		nmea_coordinates_log[52] ; // Nagłowek + 12 + ew. znak minus + '\0'
	char* 		nmea_gngsa_label = "GNGSA" ;
 8009f7a:	4bbd      	ldr	r3, [pc, #756]	; (800a270 <my_lx6_get_coordinates+0x3a8>)
 8009f7c:	22d8      	movs	r2, #216	; 0xd8
 8009f7e:	0092      	lsls	r2, r2, #2
 8009f80:	18ba      	adds	r2, r7, r2
 8009f82:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009f84:	4bbb      	ldr	r3, [pc, #748]	; (800a274 <my_lx6_get_coordinates+0x3ac>)
 8009f86:	22d7      	movs	r2, #215	; 0xd7
 8009f88:	0092      	lsls	r2, r2, #2
 8009f8a:	18ba      	adds	r2, r7, r2
 8009f8c:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 8009f8e:	4bba      	ldr	r3, [pc, #744]	; (800a278 <my_lx6_get_coordinates+0x3b0>)
 8009f90:	22d6      	movs	r2, #214	; 0xd6
 8009f92:	0092      	lsls	r2, r2, #2
 8009f94:	18ba      	adds	r2, r7, r2
 8009f96:	6013      	str	r3, [r2, #0]
	char* 		nmea_gsv_label = "GSV" ;
 8009f98:	4bb8      	ldr	r3, [pc, #736]	; (800a27c <my_lx6_get_coordinates+0x3b4>)
 8009f9a:	22d5      	movs	r2, #213	; 0xd5
 8009f9c:	0092      	lsls	r2, r2, #2
 8009f9e:	18ba      	adds	r2, r7, r2
 8009fa0:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 8009fa2:	4bb7      	ldr	r3, [pc, #732]	; (800a280 <my_lx6_get_coordinates+0x3b8>)
 8009fa4:	18fb      	adds	r3, r7, r3
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 8009faa:	4bb6      	ldr	r3, [pc, #728]	; (800a284 <my_lx6_get_coordinates+0x3bc>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8009fb0:	4bb5      	ldr	r3, [pc, #724]	; (800a288 <my_lx6_get_coordinates+0x3c0>)
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f7fc fbde 	bl	8006774 <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 8009fb8:	f7f9 f82c 	bl	8003014 <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 8009fbc:	e0ea      	b.n	800a194 <my_lx6_get_coordinates+0x2cc>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 8009fbe:	23fa      	movs	r3, #250	; 0xfa
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4ca3      	ldr	r4, [pc, #652]	; (800a250 <my_lx6_get_coordinates+0x388>)
 8009fc4:	1939      	adds	r1, r7, r4
 8009fc6:	48b1      	ldr	r0, [pc, #708]	; (800a28c <my_lx6_get_coordinates+0x3c4>)
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f7fc ffe7 	bl	8006f9c <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 8009fce:	23fa      	movs	r3, #250	; 0xfa
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	1939      	adds	r1, r7, r4
 8009fd4:	48ae      	ldr	r0, [pc, #696]	; (800a290 <my_lx6_get_coordinates+0x3c8>)
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f7fc ff44 	bl	8006e64 <HAL_UART_Transmit>
		if ( rxd_byte )
 8009fdc:	0020      	movs	r0, r4
 8009fde:	193b      	adds	r3, r7, r4
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	4ca0      	ldr	r4, [pc, #640]	; (800a264 <my_lx6_get_coordinates+0x39c>)
 8009fe4:	193a      	adds	r2, r7, r4
 8009fe6:	1939      	adds	r1, r7, r4
 8009fe8:	7809      	ldrb	r1, [r1, #0]
 8009fea:	7011      	strb	r1, [r2, #0]
 8009fec:	4da4      	ldr	r5, [pc, #656]	; (800a280 <my_lx6_get_coordinates+0x3b8>)
 8009fee:	197a      	adds	r2, r7, r5
 8009ff0:	1979      	adds	r1, r7, r5
 8009ff2:	7809      	ldrb	r1, [r1, #0]
 8009ff4:	7011      	strb	r1, [r2, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d100      	bne.n	8009ffc <my_lx6_get_coordinates+0x134>
 8009ffa:	e0cb      	b.n	800a194 <my_lx6_get_coordinates+0x2cc>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 8009ffc:	235f      	movs	r3, #95	; 0x5f
 8009ffe:	18fa      	adds	r2, r7, r3
 800a000:	2696      	movs	r6, #150	; 0x96
 800a002:	00b6      	lsls	r6, r6, #2
 800a004:	19b9      	adds	r1, r7, r6
 800a006:	183b      	adds	r3, r7, r0
 800a008:	0018      	movs	r0, r3
 800a00a:	f000 fadf 	bl	800a5cc <my_nmea_message>
 800a00e:	0001      	movs	r1, r0
 800a010:	193b      	adds	r3, r7, r4
 800a012:	193a      	adds	r2, r7, r4
 800a014:	7812      	ldrb	r2, [r2, #0]
 800a016:	701a      	strb	r2, [r3, #0]
 800a018:	197b      	adds	r3, r7, r5
 800a01a:	197a      	adds	r2, r7, r5
 800a01c:	7812      	ldrb	r2, [r2, #0]
 800a01e:	701a      	strb	r2, [r3, #0]
 800a020:	2902      	cmp	r1, #2
 800a022:	d000      	beq.n	800a026 <my_lx6_get_coordinates+0x15e>
 800a024:	e0b6      	b.n	800a194 <my_lx6_get_coordinates+0x2cc>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800a026:	19bb      	adds	r3, r7, r6
 800a028:	0018      	movs	r0, r3
 800a02a:	f000 fb8f 	bl	800a74c <is_my_nmea_checksum_ok>
 800a02e:	0003      	movs	r3, r0
 800a030:	0019      	movs	r1, r3
 800a032:	193b      	adds	r3, r7, r4
 800a034:	193a      	adds	r2, r7, r4
 800a036:	7812      	ldrb	r2, [r2, #0]
 800a038:	701a      	strb	r2, [r3, #0]
 800a03a:	197b      	adds	r3, r7, r5
 800a03c:	197a      	adds	r2, r7, r5
 800a03e:	7812      	ldrb	r2, [r2, #0]
 800a040:	701a      	strb	r2, [r3, #0]
 800a042:	2900      	cmp	r1, #0
 800a044:	d100      	bne.n	800a048 <my_lx6_get_coordinates+0x180>
 800a046:	e0a5      	b.n	800a194 <my_lx6_get_coordinates+0x2cc>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800a048:	23d6      	movs	r3, #214	; 0xd6
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	18fb      	adds	r3, r7, r3
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	19bb      	adds	r3, r7, r6
 800a052:	0011      	movs	r1, r2
 800a054:	0018      	movs	r0, r3
 800a056:	f002 f9c0 	bl	800c3da <strstr>
 800a05a:	1e03      	subs	r3, r0, #0
 800a05c:	d00d      	beq.n	800a07a <my_lx6_get_coordinates+0x1b2>
					{
						memcpy ( rmc_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby skorzystać z czasu jak najdokładniejszego, bo przed fix ten czas jest fake.
 800a05e:	4b7f      	ldr	r3, [pc, #508]	; (800a25c <my_lx6_get_coordinates+0x394>)
 800a060:	21da      	movs	r1, #218	; 0xda
 800a062:	0089      	lsls	r1, r1, #2
 800a064:	185b      	adds	r3, r3, r1
 800a066:	19da      	adds	r2, r3, r7
 800a068:	4b7a      	ldr	r3, [pc, #488]	; (800a254 <my_lx6_get_coordinates+0x38c>)
 800a06a:	185b      	adds	r3, r3, r1
 800a06c:	19db      	adds	r3, r3, r7
 800a06e:	0010      	movs	r0, r2
 800a070:	0019      	movs	r1, r3
 800a072:	23fa      	movs	r3, #250	; 0xfa
 800a074:	001a      	movs	r2, r3
 800a076:	f002 fa68 	bl	800c54a <memcpy>
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MY_GNSS_MIN_TNS )
 800a07a:	23d5      	movs	r3, #213	; 0xd5
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	18fb      	adds	r3, r7, r3
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	2496      	movs	r4, #150	; 0x96
 800a084:	00a4      	lsls	r4, r4, #2
 800a086:	193b      	adds	r3, r7, r4
 800a088:	0011      	movs	r1, r2
 800a08a:	0018      	movs	r0, r3
 800a08c:	f002 f9a5 	bl	800c3da <strstr>
 800a090:	1e03      	subs	r3, r0, #0
 800a092:	d011      	beq.n	800a0b8 <my_lx6_get_coordinates+0x1f0>
 800a094:	4d73      	ldr	r5, [pc, #460]	; (800a264 <my_lx6_get_coordinates+0x39c>)
 800a096:	197b      	adds	r3, r7, r5
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d80c      	bhi.n	800a0b8 <my_lx6_get_coordinates+0x1f0>
					{
						if ( tim_seconds > MY_GNSS_MIN_TNS_TIME_THS )
 800a09e:	4b79      	ldr	r3, [pc, #484]	; (800a284 <my_lx6_get_coordinates+0x3bc>)
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	2b0a      	cmp	r3, #10
 800a0a4:	d900      	bls.n	800a0a8 <my_lx6_get_coordinates+0x1e0>
 800a0a6:	e081      	b.n	800a1ac <my_lx6_get_coordinates+0x2e4>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800a0a8:	193b      	adds	r3, r7, r4
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f000 fd0c 	bl	800aac8 <my_nmea_get_gsv_tns>
 800a0b0:	0003      	movs	r3, r0
 800a0b2:	001a      	movs	r2, r3
 800a0b4:	197b      	adds	r3, r7, r5
 800a0b6:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 800a0b8:	23d8      	movs	r3, #216	; 0xd8
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	18fb      	adds	r3, r7, r3
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	2596      	movs	r5, #150	; 0x96
 800a0c2:	00ad      	lsls	r5, r5, #2
 800a0c4:	197b      	adds	r3, r7, r5
 800a0c6:	0011      	movs	r1, r2
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	f002 f986 	bl	800c3da <strstr>
 800a0ce:	1e03      	subs	r3, r0, #0
 800a0d0:	d015      	beq.n	800a0fe <my_lx6_get_coordinates+0x236>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800a0d2:	4b6b      	ldr	r3, [pc, #428]	; (800a280 <my_lx6_get_coordinates+0x3b8>)
 800a0d4:	18fc      	adds	r4, r7, r3
 800a0d6:	197b      	adds	r3, r7, r5
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f000 fae3 	bl	800a6a4 <get_my_nmea_gngsa_fixed_mode_s>
 800a0de:	0003      	movs	r3, r0
 800a0e0:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800a0e2:	197b      	adds	r3, r7, r5
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f000 fae8 	bl	800a6ba <get_my_nmea_gngsa_pdop_d>
 800a0ea:	0002      	movs	r2, r0
 800a0ec:	000b      	movs	r3, r1
 800a0ee:	21de      	movs	r1, #222	; 0xde
 800a0f0:	0089      	lsls	r1, r1, #2
 800a0f2:	2008      	movs	r0, #8
 800a0f4:	1809      	adds	r1, r1, r0
 800a0f6:	19c9      	adds	r1, r1, r7
 800a0f8:	6809      	ldr	r1, [r1, #0]
 800a0fa:	600a      	str	r2, [r1, #0]
 800a0fc:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 800a0fe:	23d7      	movs	r3, #215	; 0xd7
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	18fb      	adds	r3, r7, r3
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	2596      	movs	r5, #150	; 0x96
 800a108:	00ad      	lsls	r5, r5, #2
 800a10a:	197b      	adds	r3, r7, r5
 800a10c:	0011      	movs	r1, r2
 800a10e:	0018      	movs	r0, r3
 800a110:	f002 f963 	bl	800c3da <strstr>
 800a114:	1e03      	subs	r3, r0, #0
 800a116:	d03d      	beq.n	800a194 <my_lx6_get_coordinates+0x2cc>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths && nmea_fixed_mode_s == NMEA_3D_FIX )
 800a118:	23de      	movs	r3, #222	; 0xde
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	2408      	movs	r4, #8
 800a11e:	191b      	adds	r3, r3, r4
 800a120:	19db      	adds	r3, r3, r7
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	6838      	ldr	r0, [r7, #0]
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	f7f6 f9b0 	bl	8000490 <__aeabi_dcmpge>
 800a130:	1e03      	subs	r3, r0, #0
 800a132:	d021      	beq.n	800a178 <my_lx6_get_coordinates+0x2b0>
 800a134:	4b52      	ldr	r3, [pc, #328]	; (800a280 <my_lx6_get_coordinates+0x3b8>)
 800a136:	18fb      	adds	r3, r7, r3
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	2b33      	cmp	r3, #51	; 0x33
 800a13c:	d11c      	bne.n	800a178 <my_lx6_get_coordinates+0x2b0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 800a13e:	23df      	movs	r3, #223	; 0xdf
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	0026      	movs	r6, r4
 800a144:	191b      	adds	r3, r3, r4
 800a146:	19db      	adds	r3, r3, r7
 800a148:	681c      	ldr	r4, [r3, #0]
 800a14a:	2344      	movs	r3, #68	; 0x44
 800a14c:	18fa      	adds	r2, r7, r3
 800a14e:	2350      	movs	r3, #80	; 0x50
 800a150:	18f9      	adds	r1, r7, r3
 800a152:	1978      	adds	r0, r7, r5
 800a154:	23e0      	movs	r3, #224	; 0xe0
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	199b      	adds	r3, r3, r6
 800a15a:	19db      	adds	r3, r3, r7
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	0023      	movs	r3, r4
 800a162:	f000 fbaf 	bl	800a8c4 <get_my_nmea_gngll_coordinates>
							my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a166:	197b      	adds	r3, r7, r5
 800a168:	0018      	movs	r0, r3
 800a16a:	f000 f895 	bl	800a298 <my_rtc_set_dt_from_nmea_rmc>
							r = true ;
 800a16e:	4b37      	ldr	r3, [pc, #220]	; (800a24c <my_lx6_get_coordinates+0x384>)
 800a170:	18fb      	adds	r3, r7, r3
 800a172:	2201      	movs	r2, #1
 800a174:	701a      	strb	r2, [r3, #0]
							break ;
 800a176:	e01a      	b.n	800a1ae <my_lx6_get_coordinates+0x2e6>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 800a178:	4b37      	ldr	r3, [pc, #220]	; (800a258 <my_lx6_get_coordinates+0x390>)
 800a17a:	21da      	movs	r1, #218	; 0xda
 800a17c:	0089      	lsls	r1, r1, #2
 800a17e:	185b      	adds	r3, r3, r1
 800a180:	19da      	adds	r2, r3, r7
 800a182:	4b34      	ldr	r3, [pc, #208]	; (800a254 <my_lx6_get_coordinates+0x38c>)
 800a184:	185b      	adds	r3, r3, r1
 800a186:	19db      	adds	r3, r3, r7
 800a188:	0010      	movs	r0, r2
 800a18a:	0019      	movs	r1, r3
 800a18c:	23fa      	movs	r3, #250	; 0xfa
 800a18e:	001a      	movs	r2, r3
 800a190:	f002 f9db 	bl	800c54a <memcpy>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a194:	4b3b      	ldr	r3, [pc, #236]	; (800a284 <my_lx6_get_coordinates+0x3bc>)
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	4a2b      	ldr	r2, [pc, #172]	; (800a248 <my_lx6_get_coordinates+0x380>)
 800a19a:	21da      	movs	r1, #218	; 0xda
 800a19c:	0089      	lsls	r1, r1, #2
 800a19e:	1852      	adds	r2, r2, r1
 800a1a0:	19d2      	adds	r2, r2, r7
 800a1a2:	8812      	ldrh	r2, [r2, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d900      	bls.n	800a1aa <my_lx6_get_coordinates+0x2e2>
 800a1a8:	e709      	b.n	8009fbe <my_lx6_get_coordinates+0xf6>
 800a1aa:	e000      	b.n	800a1ae <my_lx6_get_coordinates+0x2e6>
							break ;
 800a1ac:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 800a1ae:	4b36      	ldr	r3, [pc, #216]	; (800a288 <my_lx6_get_coordinates+0x3c0>)
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	f7fc fb3b 	bl	800682c <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 800a1b6:	f7f8 ff45 	bl	8003044 <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 800a1ba:	4b2b      	ldr	r3, [pc, #172]	; (800a268 <my_lx6_get_coordinates+0x3a0>)
 800a1bc:	22da      	movs	r2, #218	; 0xda
 800a1be:	0092      	lsls	r2, r2, #2
 800a1c0:	189b      	adds	r3, r3, r2
 800a1c2:	19db      	adds	r3, r3, r7
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d125      	bne.n	800a216 <my_lx6_get_coordinates+0x34e>
 800a1ca:	4b23      	ldr	r3, [pc, #140]	; (800a258 <my_lx6_get_coordinates+0x390>)
 800a1cc:	189b      	adds	r3, r3, r2
 800a1ce:	19db      	adds	r3, r3, r7
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d01f      	beq.n	800a216 <my_lx6_get_coordinates+0x34e>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800a1d6:	23df      	movs	r3, #223	; 0xdf
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	2508      	movs	r5, #8
 800a1dc:	195b      	adds	r3, r3, r5
 800a1de:	19db      	adds	r3, r3, r7
 800a1e0:	681c      	ldr	r4, [r3, #0]
 800a1e2:	2344      	movs	r3, #68	; 0x44
 800a1e4:	18fa      	adds	r2, r7, r3
 800a1e6:	2350      	movs	r3, #80	; 0x50
 800a1e8:	18f9      	adds	r1, r7, r3
 800a1ea:	23ae      	movs	r3, #174	; 0xae
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	18f8      	adds	r0, r7, r3
 800a1f0:	23e0      	movs	r3, #224	; 0xe0
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	195b      	adds	r3, r3, r5
 800a1f6:	19db      	adds	r3, r3, r7
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	0023      	movs	r3, r4
 800a1fe:	f000 fb61 	bl	800a8c4 <get_my_nmea_gngll_coordinates>
		my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a202:	2396      	movs	r3, #150	; 0x96
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	18fb      	adds	r3, r7, r3
 800a208:	0018      	movs	r0, r3
 800a20a:	f000 f845 	bl	800a298 <my_rtc_set_dt_from_nmea_rmc>
		r = true ;
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <my_lx6_get_coordinates+0x384>)
 800a210:	18fb      	adds	r3, r7, r3
 800a212:	2201      	movs	r2, #1
 800a214:	701a      	strb	r2, [r3, #0]
	}
	sprintf ( nmea_coordinates_log , "NMEA coordinates: %s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 800a216:	2344      	movs	r3, #68	; 0x44
 800a218:	18fb      	adds	r3, r7, r3
 800a21a:	2250      	movs	r2, #80	; 0x50
 800a21c:	18ba      	adds	r2, r7, r2
 800a21e:	491d      	ldr	r1, [pc, #116]	; (800a294 <my_lx6_get_coordinates+0x3cc>)
 800a220:	2410      	movs	r4, #16
 800a222:	1938      	adds	r0, r7, r4
 800a224:	f002 f816 	bl	800c254 <sprintf>
	send_debug_logs ( nmea_coordinates_log ) ;
 800a228:	193b      	adds	r3, r7, r4
 800a22a:	0018      	movs	r0, r3
 800a22c:	f7f8 fe44 	bl	8002eb8 <send_debug_logs>
	return r ;
 800a230:	4b06      	ldr	r3, [pc, #24]	; (800a24c <my_lx6_get_coordinates+0x384>)
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	781b      	ldrb	r3, [r3, #0]
}
 800a236:	0018      	movs	r0, r3
 800a238:	46bd      	mov	sp, r7
 800a23a:	23db      	movs	r3, #219	; 0xdb
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	449d      	add	sp, r3
 800a240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a242:	46c0      	nop			; (mov r8, r8)
 800a244:	fffffc8c 	.word	0xfffffc8c
 800a248:	fffffca6 	.word	0xfffffca6
 800a24c:	00000367 	.word	0x00000367
 800a250:	00000353 	.word	0x00000353
 800a254:	fffffef0 	.word	0xfffffef0
 800a258:	fffffdf4 	.word	0xfffffdf4
 800a25c:	fffffcf8 	.word	0xfffffcf8
 800a260:	fffffcf7 	.word	0xfffffcf7
 800a264:	00000366 	.word	0x00000366
 800a268:	fffffce8 	.word	0xfffffce8
 800a26c:	fffffcdc 	.word	0xfffffcdc
 800a270:	080146d4 	.word	0x080146d4
 800a274:	080146dc 	.word	0x080146dc
 800a278:	080146e4 	.word	0x080146e4
 800a27c:	080146e8 	.word	0x080146e8
 800a280:	00000365 	.word	0x00000365
 800a284:	20000a24 	.word	0x20000a24
 800a288:	2000078c 	.word	0x2000078c
 800a28c:	20000900 	.word	0x20000900
 800a290:	2000086c 	.word	0x2000086c
 800a294:	080146ec 	.word	0x080146ec

0800a298 <my_rtc_set_dt_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800a298:	b5b0      	push	{r4, r5, r7, lr}
 800a29a:	b088      	sub	sp, #32
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800a2a0:	2508      	movs	r5, #8
 800a2a2:	197b      	adds	r3, r7, r5
 800a2a4:	1cda      	adds	r2, r3, #3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	0011      	movs	r1, r2
 800a2aa:	0018      	movs	r0, r3
 800a2ac:	f000 fc44 	bl	800ab38 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800a2b0:	197b      	adds	r3, r7, r5
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	0011      	movs	r1, r2
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f000 fc77 	bl	800abac <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800a2be:	197b      	adds	r3, r7, r5
 800a2c0:	1c9a      	adds	r2, r3, #2
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	0011      	movs	r1, r2
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	f000 fcaa 	bl	800ac20 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800a2cc:	240c      	movs	r4, #12
 800a2ce:	193a      	adds	r2, r7, r4
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	0011      	movs	r1, r2
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f000 fcdd 	bl	800ac94 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800a2da:	193b      	adds	r3, r7, r4
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	0011      	movs	r1, r2
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	f000 fd10 	bl	800ad08 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800a2e8:	193b      	adds	r3, r7, r4
 800a2ea:	1c9a      	adds	r2, r3, #2
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	0011      	movs	r1, r2
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f000 fd43 	bl	800ad7c <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800a2f6:	193b      	adds	r3, r7, r4
 800a2f8:	1d1a      	adds	r2, r3, #4
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	0011      	movs	r1, r2
 800a2fe:	0018      	movs	r0, r3
 800a300:	f000 fd76 	bl	800adf0 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a304:	193b      	adds	r3, r7, r4
 800a306:	2200      	movs	r2, #0
 800a308:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a30a:	193b      	adds	r3, r7, r4
 800a30c:	2200      	movs	r2, #0
 800a30e:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800a310:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a312:	0018      	movs	r0, r3
 800a314:	f7fb fa6b 	bl	80057ee <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800a318:	1939      	adds	r1, r7, r4
 800a31a:	4b09      	ldr	r3, [pc, #36]	; (800a340 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	0018      	movs	r0, r3
 800a320:	f7fa fe68 	bl	8004ff4 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800a324:	1979      	adds	r1, r7, r5
 800a326:	4b06      	ldr	r3, [pc, #24]	; (800a340 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a328:	2200      	movs	r2, #0
 800a32a:	0018      	movs	r0, r3
 800a32c:	f7fa ff66 	bl	80051fc <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800a330:	4b03      	ldr	r3, [pc, #12]	; (800a340 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a332:	0018      	movs	r0, r3
 800a334:	f7fb fa8f 	bl	8005856 <HAL_RTCEx_DisableBypassShadow>
}
 800a338:	46c0      	nop			; (mov r8, r8)
 800a33a:	46bd      	mov	sp, r7
 800a33c:	b008      	add	sp, #32
 800a33e:	bdb0      	pop	{r4, r5, r7, pc}
 800a340:	200006fc 	.word	0x200006fc

0800a344 <my_rtc_get_dt>:
void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800a34e:	6879      	ldr	r1, [r7, #4]
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <my_rtc_get_dt+0x2c>)
 800a352:	2200      	movs	r2, #0
 800a354:	0018      	movs	r0, r3
 800a356:	f7fa ffe3 	bl	8005320 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	4b04      	ldr	r3, [pc, #16]	; (800a370 <my_rtc_get_dt+0x2c>)
 800a35e:	2200      	movs	r2, #0
 800a360:	0018      	movs	r0, r3
 800a362:	f7fa feef 	bl	8005144 <HAL_RTC_GetTime>
}
 800a366:	46c0      	nop			; (mov r8, r8)
 800a368:	46bd      	mov	sp, r7
 800a36a:	b002      	add	sp, #8
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	46c0      	nop			; (mov r8, r8)
 800a370:	200006fc 	.word	0x200006fc

0800a374 <my_rtc_get_time_s>:
uint16_t my_rtc_get_time_s ( char* dt_s )
{
 800a374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a376:	b08d      	sub	sp, #52	; 0x34
 800a378:	af04      	add	r7, sp, #16
 800a37a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800a37c:	2508      	movs	r5, #8
 800a37e:	1979      	adds	r1, r7, r5
 800a380:	4b1b      	ldr	r3, [pc, #108]	; (800a3f0 <my_rtc_get_time_s+0x7c>)
 800a382:	2200      	movs	r2, #0
 800a384:	0018      	movs	r0, r3
 800a386:	f7fa fedd 	bl	8005144 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800a38a:	241c      	movs	r4, #28
 800a38c:	1939      	adds	r1, r7, r4
 800a38e:	4b18      	ldr	r3, [pc, #96]	; (800a3f0 <my_rtc_get_time_s+0x7c>)
 800a390:	2200      	movs	r2, #0
 800a392:	0018      	movs	r0, r3
 800a394:	f7fa ffc4 	bl	8005320 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 800a398:	0021      	movs	r1, r4
 800a39a:	187b      	adds	r3, r7, r1
 800a39c:	78db      	ldrb	r3, [r3, #3]
 800a39e:	22fa      	movs	r2, #250	; 0xfa
 800a3a0:	00d2      	lsls	r2, r2, #3
 800a3a2:	189a      	adds	r2, r3, r2
 800a3a4:	187b      	adds	r3, r7, r1
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	469c      	mov	ip, r3
 800a3aa:	187b      	adds	r3, r7, r1
 800a3ac:	789b      	ldrb	r3, [r3, #2]
 800a3ae:	001c      	movs	r4, r3
 800a3b0:	0028      	movs	r0, r5
 800a3b2:	183b      	adds	r3, r7, r0
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	001d      	movs	r5, r3
 800a3b8:	183b      	adds	r3, r7, r0
 800a3ba:	785b      	ldrb	r3, [r3, #1]
 800a3bc:	001e      	movs	r6, r3
 800a3be:	183b      	adds	r3, r7, r0
 800a3c0:	789b      	ldrb	r3, [r3, #2]
 800a3c2:	490c      	ldr	r1, [pc, #48]	; (800a3f4 <my_rtc_get_time_s+0x80>)
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	9303      	str	r3, [sp, #12]
 800a3c8:	9602      	str	r6, [sp, #8]
 800a3ca:	9501      	str	r5, [sp, #4]
 800a3cc:	9400      	str	r4, [sp, #0]
 800a3ce:	4663      	mov	r3, ip
 800a3d0:	f001 ff40 	bl	800c254 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800a3d4:	211c      	movs	r1, #28
 800a3d6:	187b      	adds	r3, r7, r1
 800a3d8:	78db      	ldrb	r3, [r3, #3]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	22fa      	movs	r2, #250	; 0xfa
 800a3de:	00d2      	lsls	r2, r2, #3
 800a3e0:	4694      	mov	ip, r2
 800a3e2:	4463      	add	r3, ip
 800a3e4:	b29b      	uxth	r3, r3
}
 800a3e6:	0018      	movs	r0, r3
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	b009      	add	sp, #36	; 0x24
 800a3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ee:	46c0      	nop			; (mov r8, r8)
 800a3f0:	200006fc 	.word	0x200006fc
 800a3f4:	08014704 	.word	0x08014704

0800a3f8 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2100      	movs	r1, #0
 800a404:	0018      	movs	r0, r3
 800a406:	f001 fd89 	bl	800bf1c <strtod>
 800a40a:	0002      	movs	r2, r0
 800a40c:	000b      	movs	r3, r1
 800a40e:	60ba      	str	r2, [r7, #8]
 800a410:	60fb      	str	r3, [r7, #12]
    return d ;
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	68fb      	ldr	r3, [r7, #12]
}
 800a416:	0010      	movs	r0, r2
 800a418:	0019      	movs	r1, r3
 800a41a:	46bd      	mov	sp, r7
 800a41c:	b004      	add	sp, #16
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	0008      	movs	r0, r1
 800a42a:	0011      	movs	r1, r2
 800a42c:	1cfb      	adds	r3, r7, #3
 800a42e:	1c02      	adds	r2, r0, #0
 800a430:	701a      	strb	r2, [r3, #0]
 800a432:	1cbb      	adds	r3, r7, #2
 800a434:	1c0a      	adds	r2, r1, #0
 800a436:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800a438:	230f      	movs	r3, #15
 800a43a:	18fb      	adds	r3, r7, r3
 800a43c:	2200      	movs	r2, #0
 800a43e:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800a440:	230e      	movs	r3, #14
 800a442:	18fb      	adds	r3, r7, r3
 800a444:	2200      	movs	r2, #0
 800a446:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800a448:	e01c      	b.n	800a484 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800a44a:	230f      	movs	r3, #15
 800a44c:	18fb      	adds	r3, r7, r3
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	18d3      	adds	r3, r2, r3
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	1cfa      	adds	r2, r7, #3
 800a458:	7812      	ldrb	r2, [r2, #0]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d105      	bne.n	800a46a <my_find_char_position+0x4a>
			p++ ;
 800a45e:	210e      	movs	r1, #14
 800a460:	187b      	adds	r3, r7, r1
 800a462:	781a      	ldrb	r2, [r3, #0]
 800a464:	187b      	adds	r3, r7, r1
 800a466:	3201      	adds	r2, #1
 800a468:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800a46a:	230e      	movs	r3, #14
 800a46c:	18fa      	adds	r2, r7, r3
 800a46e:	1cbb      	adds	r3, r7, #2
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d00e      	beq.n	800a496 <my_find_char_position+0x76>
			break ;
		i++ ;
 800a478:	210f      	movs	r1, #15
 800a47a:	187b      	adds	r3, r7, r1
 800a47c:	781a      	ldrb	r2, [r3, #0]
 800a47e:	187b      	adds	r3, r7, r1
 800a480:	3201      	adds	r2, #1
 800a482:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800a484:	230f      	movs	r3, #15
 800a486:	18fb      	adds	r3, r7, r3
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	18d3      	adds	r3, r2, r3
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1da      	bne.n	800a44a <my_find_char_position+0x2a>
 800a494:	e000      	b.n	800a498 <my_find_char_position+0x78>
			break ;
 800a496:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800a498:	230f      	movs	r3, #15
 800a49a:	18fb      	adds	r3, r7, r3
 800a49c:	781b      	ldrb	r3, [r3, #0]
}
 800a49e:	0018      	movs	r0, r3
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b004      	add	sp, #16
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	78db      	ldrb	r3, [r3, #3]
 800a4b6:	22fa      	movs	r2, #250	; 0xfa
 800a4b8:	00d2      	lsls	r2, r2, #3
 800a4ba:	4694      	mov	ip, r2
 800a4bc:	4463      	add	r3, ip
 800a4be:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	0013      	movs	r3, r2
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	189b      	adds	r3, r3, r2
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	189b      	adds	r3, r3, r2
 800a4cc:	009a      	lsls	r2, r3, #2
 800a4ce:	189a      	adds	r2, r3, r2
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	492c      	ldr	r1, [pc, #176]	; (800a584 <my_conv_rtc2timestamp+0xdc>)
 800a4d4:	468c      	mov	ip, r1
 800a4d6:	4463      	add	r3, ip
 800a4d8:	089b      	lsrs	r3, r3, #2
 800a4da:	18d3      	adds	r3, r2, r3
 800a4dc:	4a2a      	ldr	r2, [pc, #168]	; (800a588 <my_conv_rtc2timestamp+0xe0>)
 800a4de:	4694      	mov	ip, r2
 800a4e0:	4463      	add	r3, ip
 800a4e2:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	613b      	str	r3, [r7, #16]
 800a4e8:	e00a      	b.n	800a500 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800a4ea:	4a28      	ldr	r2, [pc, #160]	; (800a58c <my_conv_rtc2timestamp+0xe4>)
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	18d3      	adds	r3, r2, r3
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	001a      	movs	r2, r3
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	189b      	adds	r3, r3, r2
 800a4f8:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	613b      	str	r3, [r7, #16]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	3b01      	subs	r3, #1
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	429a      	cmp	r2, r3
 800a50a:	dbee      	blt.n	800a4ea <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	785b      	ldrb	r3, [r3, #1]
 800a510:	2b02      	cmp	r3, #2
 800a512:	d908      	bls.n	800a526 <my_conv_rtc2timestamp+0x7e>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	0018      	movs	r0, r3
 800a518:	f000 f83a 	bl	800a590 <my_conv_is_leap_year>
 800a51c:	1e03      	subs	r3, r0, #0
 800a51e:	d002      	beq.n	800a526 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	3301      	adds	r3, #1
 800a524:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	789b      	ldrb	r3, [r3, #2]
 800a52a:	001a      	movs	r2, r3
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	18d3      	adds	r3, r2, r3
 800a530:	3b01      	subs	r3, #1
 800a532:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	0013      	movs	r3, r2
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	189b      	adds	r3, r3, r2
 800a53c:	011a      	lsls	r2, r3, #4
 800a53e:	1ad2      	subs	r2, r2, r3
 800a540:	0113      	lsls	r3, r2, #4
 800a542:	1a9b      	subs	r3, r3, r2
 800a544:	01db      	lsls	r3, r3, #7
 800a546:	0019      	movs	r1, r3
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	001a      	movs	r2, r3
 800a54e:	0013      	movs	r3, r2
 800a550:	011b      	lsls	r3, r3, #4
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	011a      	lsls	r2, r3, #4
 800a556:	1ad2      	subs	r2, r2, r3
 800a558:	0113      	lsls	r3, r2, #4
 800a55a:	001a      	movs	r2, r3
 800a55c:	0013      	movs	r3, r2
 800a55e:	18ca      	adds	r2, r1, r3
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	785b      	ldrb	r3, [r3, #1]
 800a564:	0019      	movs	r1, r3
 800a566:	000b      	movs	r3, r1
 800a568:	011b      	lsls	r3, r3, #4
 800a56a:	1a5b      	subs	r3, r3, r1
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	18d3      	adds	r3, r2, r3
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	7892      	ldrb	r2, [r2, #2]
 800a574:	189b      	adds	r3, r3, r2
 800a576:	60bb      	str	r3, [r7, #8]

    return ts ;
 800a578:	68bb      	ldr	r3, [r7, #8]
}
 800a57a:	0018      	movs	r0, r3
 800a57c:	46bd      	mov	sp, r7
 800a57e:	b006      	add	sp, #24
 800a580:	bd80      	pop	{r7, pc}
 800a582:	46c0      	nop			; (mov r8, r8)
 800a584:	fffff84f 	.word	0xfffff84f
 800a588:	fff50736 	.word	0xfff50736
 800a58c:	08014810 	.word	0x08014810

0800a590 <my_conv_is_leap_year>:
	t->Seconds = seconds ;
}

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2203      	movs	r2, #3
 800a59c:	4013      	ands	r3, r2
 800a59e:	d106      	bne.n	800a5ae <my_conv_is_leap_year+0x1e>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2164      	movs	r1, #100	; 0x64
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	f7f5 ff39 	bl	800041c <__aeabi_idivmod>
 800a5aa:	1e0b      	subs	r3, r1, #0
 800a5ac:	d107      	bne.n	800a5be <my_conv_is_leap_year+0x2e>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	22c8      	movs	r2, #200	; 0xc8
 800a5b2:	0051      	lsls	r1, r2, #1
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	f7f5 ff31 	bl	800041c <__aeabi_idivmod>
 800a5ba:	1e0b      	subs	r3, r1, #0
 800a5bc:	d101      	bne.n	800a5c2 <my_conv_is_leap_year+0x32>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e000      	b.n	800a5c4 <my_conv_is_leap_year+0x34>
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	b002      	add	sp, #8
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	2b24      	cmp	r3, #36	; 0x24
 800a5de:	d117      	bne.n	800a610 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	b2d1      	uxtb	r1, r2
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	7011      	strb	r1, [r2, #0]
 800a5f2:	001a      	movs	r2, r3
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	189b      	adds	r3, r3, r2
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	7812      	ldrb	r2, [r2, #0]
 800a5fc:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	001a      	movs	r2, r3
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	189b      	adds	r3, r3, r2
 800a608:	2200      	movs	r2, #0
 800a60a:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800a60c:	2300      	movs	r3, #0
 800a60e:	e045      	b.n	800a69c <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	2b1f      	cmp	r3, #31
 800a616:	d907      	bls.n	800a628 <my_nmea_message+0x5c>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b7e      	cmp	r3, #126	; 0x7e
 800a61e:	d803      	bhi.n	800a628 <my_nmea_message+0x5c>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d103      	bne.n	800a630 <my_nmea_message+0x64>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	2b0d      	cmp	r3, #13
 800a62e:	d114      	bne.n	800a65a <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	b2d1      	uxtb	r1, r2
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	7011      	strb	r1, [r2, #0]
 800a63c:	001a      	movs	r2, r3
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	189b      	adds	r3, r3, r2
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	7812      	ldrb	r2, [r2, #0]
 800a646:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	001a      	movs	r2, r3
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	189b      	adds	r3, r3, r2
 800a652:	2200      	movs	r2, #0
 800a654:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800a656:	2301      	movs	r3, #1
 800a658:	e020      	b.n	800a69c <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b0a      	cmp	r3, #10
 800a660:	d11a      	bne.n	800a698 <my_nmea_message+0xcc>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d916      	bls.n	800a698 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	3b01      	subs	r3, #1
 800a670:	b2da      	uxtb	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	701a      	strb	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	001a      	movs	r2, r3
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	189b      	adds	r3, r3, r2
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b0d      	cmp	r3, #13
 800a684:	d108      	bne.n	800a698 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	001a      	movs	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	189b      	adds	r3, r3, r2
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800a694:	2302      	movs	r3, #2
 800a696:	e001      	b.n	800a69c <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800a698:	2301      	movs	r3, #1
 800a69a:	425b      	negs	r3, r3
}
 800a69c:	0018      	movs	r0, r3
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	b004      	add	sp, #16
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3309      	adds	r3, #9
 800a6b0:	781b      	ldrb	r3, [r3, #0]
}
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	b002      	add	sp, #8
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800a6ba:	b5b0      	push	{r4, r5, r7, lr}
 800a6bc:	b086      	sub	sp, #24
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	220f      	movs	r2, #15
 800a6c6:	212c      	movs	r1, #44	; 0x2c
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	f7ff fea9 	bl	800a420 <my_find_char_position>
 800a6ce:	0003      	movs	r3, r0
 800a6d0:	001a      	movs	r2, r3
 800a6d2:	2517      	movs	r5, #23
 800a6d4:	197b      	adds	r3, r7, r5
 800a6d6:	3201      	adds	r2, #1
 800a6d8:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2210      	movs	r2, #16
 800a6de:	212c      	movs	r1, #44	; 0x2c
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f7ff fe9d 	bl	800a420 <my_find_char_position>
 800a6e6:	0003      	movs	r3, r0
 800a6e8:	0019      	movs	r1, r3
 800a6ea:	2416      	movs	r4, #22
 800a6ec:	193b      	adds	r3, r7, r4
 800a6ee:	197a      	adds	r2, r7, r5
 800a6f0:	7812      	ldrb	r2, [r2, #0]
 800a6f2:	1a8a      	subs	r2, r1, r2
 800a6f4:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800a6f6:	193b      	adds	r3, r7, r4
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	0018      	movs	r0, r3
 800a6fe:	f000 fbab 	bl	800ae58 <malloc>
 800a702:	0003      	movs	r3, r0
 800a704:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800a706:	197b      	adds	r3, r7, r5
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	18d1      	adds	r1, r2, r3
 800a70e:	193b      	adds	r3, r7, r4
 800a710:	781a      	ldrb	r2, [r3, #0]
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	0018      	movs	r0, r3
 800a716:	f001 fe4c 	bl	800c3b2 <strncpy>
	pdop_s[pdop_length] = '\0';
 800a71a:	193b      	adds	r3, r7, r4
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	18d3      	adds	r3, r2, r3
 800a722:	2200      	movs	r2, #0
 800a724:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	0018      	movs	r0, r3
 800a72a:	f7ff fe65 	bl	800a3f8 <my_string2double_conv>
 800a72e:	0002      	movs	r2, r0
 800a730:	000b      	movs	r3, r1
 800a732:	60ba      	str	r2, [r7, #8]
 800a734:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	0018      	movs	r0, r3
 800a73a:	f000 fb97 	bl	800ae6c <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	68fb      	ldr	r3, [r7, #12]
}
 800a742:	0010      	movs	r0, r2
 800a744:	0019      	movs	r1, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	b006      	add	sp, #24
 800a74a:	bdb0      	pop	{r4, r5, r7, pc}

0800a74c <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a74c:	b590      	push	{r4, r7, lr}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a754:	230f      	movs	r3, #15
 800a756:	18fb      	adds	r3, r7, r3
 800a758:	2200      	movs	r2, #0
 800a75a:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a75c:	230e      	movs	r3, #14
 800a75e:	18fb      	adds	r3, r7, r3
 800a760:	2201      	movs	r2, #1
 800a762:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a764:	e00f      	b.n	800a786 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a766:	220e      	movs	r2, #14
 800a768:	18bb      	adds	r3, r7, r2
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	18ba      	adds	r2, r7, r2
 800a76e:	1c59      	adds	r1, r3, #1
 800a770:	7011      	strb	r1, [r2, #0]
 800a772:	001a      	movs	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	189b      	adds	r3, r3, r2
 800a778:	7819      	ldrb	r1, [r3, #0]
 800a77a:	220f      	movs	r2, #15
 800a77c:	18bb      	adds	r3, r7, r2
 800a77e:	18ba      	adds	r2, r7, r2
 800a780:	7812      	ldrb	r2, [r2, #0]
 800a782:	404a      	eors	r2, r1
 800a784:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a786:	210e      	movs	r1, #14
 800a788:	187b      	adds	r3, r7, r1
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	18d3      	adds	r3, r2, r3
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2b2a      	cmp	r3, #42	; 0x2a
 800a794:	d00a      	beq.n	800a7ac <is_my_nmea_checksum_ok+0x60>
 800a796:	187b      	adds	r3, r7, r1
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	18d3      	adds	r3, r2, r3
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d003      	beq.n	800a7ac <is_my_nmea_checksum_ok+0x60>
 800a7a4:	187b      	adds	r3, r7, r1
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1dc      	bne.n	800a766 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a7ac:	230f      	movs	r3, #15
 800a7ae:	18fb      	adds	r3, r7, r3
 800a7b0:	781c      	ldrb	r4, [r3, #0]
 800a7b2:	210e      	movs	r1, #14
 800a7b4:	187b      	adds	r3, r7, r1
 800a7b6:	187a      	adds	r2, r7, r1
 800a7b8:	7812      	ldrb	r2, [r2, #0]
 800a7ba:	3201      	adds	r2, #1
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	187b      	adds	r3, r7, r1
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	18d3      	adds	r3, r2, r3
 800a7c6:	2210      	movs	r2, #16
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	0018      	movs	r0, r3
 800a7cc:	f001 fc3e 	bl	800c04c <strtol>
 800a7d0:	0003      	movs	r3, r0
 800a7d2:	1ae3      	subs	r3, r4, r3
 800a7d4:	425a      	negs	r2, r3
 800a7d6:	4153      	adcs	r3, r2
 800a7d8:	b2db      	uxtb	r3, r3
}
 800a7da:	0018      	movs	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	b005      	add	sp, #20
 800a7e0:	bd90      	pop	{r4, r7, pc}
	...

0800a7e4 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a7e4:	b5b0      	push	{r4, r5, r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	000a      	movs	r2, r1
 800a7ee:	1cfb      	adds	r3, r7, #3
 800a7f0:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a7f2:	2308      	movs	r3, #8
 800a7f4:	18fa      	adds	r2, r7, r3
 800a7f6:	492f      	ldr	r1, [pc, #188]	; (800a8b4 <nmea2decimal+0xd0>)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	0018      	movs	r0, r3
 800a7fc:	f001 fd4a 	bl	800c294 <sscanf>
    min = deg / 100 ;
 800a800:	68b8      	ldr	r0, [r7, #8]
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	4b2c      	ldr	r3, [pc, #176]	; (800a8b8 <nmea2decimal+0xd4>)
 800a808:	f7f6 fb36 	bl	8000e78 <__aeabi_ddiv>
 800a80c:	0002      	movs	r2, r0
 800a80e:	000b      	movs	r3, r1
 800a810:	613a      	str	r2, [r7, #16]
 800a812:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a814:	6938      	ldr	r0, [r7, #16]
 800a816:	6979      	ldr	r1, [r7, #20]
 800a818:	f7f7 fd8a 	bl	8002330 <__aeabi_d2iz>
 800a81c:	0003      	movs	r3, r0
 800a81e:	0018      	movs	r0, r3
 800a820:	f7f7 fdbc 	bl	800239c <__aeabi_i2d>
 800a824:	0002      	movs	r2, r0
 800a826:	000b      	movs	r3, r1
 800a828:	60ba      	str	r2, [r7, #8]
 800a82a:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6938      	ldr	r0, [r7, #16]
 800a832:	6979      	ldr	r1, [r7, #20]
 800a834:	f7f7 f9dc 	bl	8001bf0 <__aeabi_dsub>
 800a838:	0002      	movs	r2, r0
 800a83a:	000b      	movs	r3, r1
 800a83c:	0010      	movs	r0, r2
 800a83e:	0019      	movs	r1, r3
 800a840:	2200      	movs	r2, #0
 800a842:	4b1e      	ldr	r3, [pc, #120]	; (800a8bc <nmea2decimal+0xd8>)
 800a844:	f7f6 ff12 	bl	800166c <__aeabi_dmul>
 800a848:	0002      	movs	r2, r0
 800a84a:	000b      	movs	r3, r1
 800a84c:	613a      	str	r2, [r7, #16]
 800a84e:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a850:	2200      	movs	r2, #0
 800a852:	4b1b      	ldr	r3, [pc, #108]	; (800a8c0 <nmea2decimal+0xdc>)
 800a854:	6938      	ldr	r0, [r7, #16]
 800a856:	6979      	ldr	r1, [r7, #20]
 800a858:	f7f6 fb0e 	bl	8000e78 <__aeabi_ddiv>
 800a85c:	0002      	movs	r2, r0
 800a85e:	000b      	movs	r3, r1
 800a860:	613a      	str	r2, [r7, #16]
 800a862:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a864:	1cfb      	adds	r3, r7, #3
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b53      	cmp	r3, #83	; 0x53
 800a86a:	d003      	beq.n	800a874 <nmea2decimal+0x90>
 800a86c:	1cfb      	adds	r3, r7, #3
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b57      	cmp	r3, #87	; 0x57
 800a872:	d10e      	bne.n	800a892 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a874:	68b8      	ldr	r0, [r7, #8]
 800a876:	68f9      	ldr	r1, [r7, #12]
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f7f5 ff9c 	bl	80007b8 <__aeabi_dadd>
 800a880:	0002      	movs	r2, r0
 800a882:	000b      	movs	r3, r1
 800a884:	0011      	movs	r1, r2
 800a886:	000c      	movs	r4, r1
 800a888:	2180      	movs	r1, #128	; 0x80
 800a88a:	0609      	lsls	r1, r1, #24
 800a88c:	4059      	eors	r1, r3
 800a88e:	000d      	movs	r5, r1
 800a890:	e009      	b.n	800a8a6 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a892:	68b8      	ldr	r0, [r7, #8]
 800a894:	68f9      	ldr	r1, [r7, #12]
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f7f5 ff8d 	bl	80007b8 <__aeabi_dadd>
 800a89e:	0002      	movs	r2, r0
 800a8a0:	000b      	movs	r3, r1
 800a8a2:	0014      	movs	r4, r2
 800a8a4:	001d      	movs	r5, r3
}
 800a8a6:	0022      	movs	r2, r4
 800a8a8:	002b      	movs	r3, r5
 800a8aa:	0010      	movs	r0, r2
 800a8ac:	0019      	movs	r1, r3
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	b006      	add	sp, #24
 800a8b2:	bdb0      	pop	{r4, r5, r7, pc}
 800a8b4:	08014724 	.word	0x08014724
 800a8b8:	40590000 	.word	0x40590000
 800a8bc:	40240000 	.word	0x40240000
 800a8c0:	40180000 	.word	0x40180000

0800a8c4 <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 800a8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8c6:	b091      	sub	sp, #68	; 0x44
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
 800a8d0:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	212c      	movs	r1, #44	; 0x2c
 800a8d8:	0018      	movs	r0, r3
 800a8da:	f7ff fda1 	bl	800a420 <my_find_char_position>
 800a8de:	0003      	movs	r3, r0
 800a8e0:	001a      	movs	r2, r3
 800a8e2:	2537      	movs	r5, #55	; 0x37
 800a8e4:	197b      	adds	r3, r7, r5
 800a8e6:	3201      	adds	r2, #1
 800a8e8:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	212c      	movs	r1, #44	; 0x2c
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	f7ff fd95 	bl	800a420 <my_find_char_position>
 800a8f6:	0003      	movs	r3, r0
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	2436      	movs	r4, #54	; 0x36
 800a8fc:	193b      	adds	r3, r7, r4
 800a8fe:	197a      	adds	r2, r7, r5
 800a900:	7812      	ldrb	r2, [r2, #0]
 800a902:	1a8a      	subs	r2, r1, r2
 800a904:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a906:	193b      	adds	r3, r7, r4
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	3301      	adds	r3, #1
 800a90c:	0018      	movs	r0, r3
 800a90e:	f000 faa3 	bl	800ae58 <malloc>
 800a912:	0003      	movs	r3, r0
 800a914:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a916:	197b      	adds	r3, r7, r5
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	18d1      	adds	r1, r2, r3
 800a91e:	193b      	adds	r3, r7, r4
 800a920:	781a      	ldrb	r2, [r3, #0]
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	0018      	movs	r0, r3
 800a926:	f001 fd44 	bl	800c3b2 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a92a:	193b      	adds	r3, r7, r4
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a930:	18d3      	adds	r3, r2, r3
 800a932:	2200      	movs	r2, #0
 800a934:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a936:	197b      	adds	r3, r7, r5
 800a938:	781a      	ldrb	r2, [r3, #0]
 800a93a:	193b      	adds	r3, r7, r4
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	18d3      	adds	r3, r2, r3
 800a940:	3301      	adds	r3, #1
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	18d2      	adds	r2, r2, r3
 800a946:	262f      	movs	r6, #47	; 0x2f
 800a948:	19bb      	adds	r3, r7, r6
 800a94a:	7812      	ldrb	r2, [r2, #0]
 800a94c:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a94e:	19bb      	adds	r3, r7, r6
 800a950:	781a      	ldrb	r2, [r3, #0]
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	0011      	movs	r1, r2
 800a956:	0018      	movs	r0, r3
 800a958:	f7ff ff44 	bl	800a7e4 <nmea2decimal>
 800a95c:	0002      	movs	r2, r0
 800a95e:	000b      	movs	r3, r1
 800a960:	623a      	str	r2, [r7, #32]
 800a962:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	0018      	movs	r0, r3
 800a968:	f000 fa80 	bl	800ae6c <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a96c:	2200      	movs	r2, #0
 800a96e:	4b53      	ldr	r3, [pc, #332]	; (800aabc <get_my_nmea_gngll_coordinates+0x1f8>)
 800a970:	6a38      	ldr	r0, [r7, #32]
 800a972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a974:	f7f6 fe7a 	bl	800166c <__aeabi_dmul>
 800a978:	0002      	movs	r2, r0
 800a97a:	000b      	movs	r3, r1
 800a97c:	0010      	movs	r0, r2
 800a97e:	0019      	movs	r1, r3
 800a980:	f008 fa34 	bl	8012dec <round>
 800a984:	2200      	movs	r2, #0
 800a986:	4b4d      	ldr	r3, [pc, #308]	; (800aabc <get_my_nmea_gngll_coordinates+0x1f8>)
 800a988:	f7f6 fa76 	bl	8000e78 <__aeabi_ddiv>
 800a98c:	0002      	movs	r2, r0
 800a98e:	000b      	movs	r3, r1
 800a990:	623a      	str	r2, [r7, #32]
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 800a994:	494a      	ldr	r1, [pc, #296]	; (800aac0 <get_my_nmea_gngll_coordinates+0x1fc>)
 800a996:	68b8      	ldr	r0, [r7, #8]
 800a998:	6a3a      	ldr	r2, [r7, #32]
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	9200      	str	r2, [sp, #0]
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	000a      	movs	r2, r1
 800a9a2:	210c      	movs	r1, #12
 800a9a4:	f001 fc22 	bl	800c1ec <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	4b46      	ldr	r3, [pc, #280]	; (800aac4 <get_my_nmea_gngll_coordinates+0x200>)
 800a9ac:	6a38      	ldr	r0, [r7, #32]
 800a9ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9b0:	f7f6 fe5c 	bl	800166c <__aeabi_dmul>
 800a9b4:	0002      	movs	r2, r0
 800a9b6:	000b      	movs	r3, r1
 800a9b8:	0010      	movs	r0, r2
 800a9ba:	0019      	movs	r1, r3
 800a9bc:	f7f7 fcb8 	bl	8002330 <__aeabi_d2iz>
 800a9c0:	0002      	movs	r2, r0
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2203      	movs	r2, #3
 800a9ca:	212c      	movs	r1, #44	; 0x2c
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	f7ff fd27 	bl	800a420 <my_find_char_position>
 800a9d2:	0003      	movs	r3, r0
 800a9d4:	001a      	movs	r2, r3
 800a9d6:	197b      	adds	r3, r7, r5
 800a9d8:	3201      	adds	r2, #1
 800a9da:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2204      	movs	r2, #4
 800a9e0:	212c      	movs	r1, #44	; 0x2c
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	f7ff fd1c 	bl	800a420 <my_find_char_position>
 800a9e8:	0003      	movs	r3, r0
 800a9ea:	0019      	movs	r1, r3
 800a9ec:	193b      	adds	r3, r7, r4
 800a9ee:	197a      	adds	r2, r7, r5
 800a9f0:	7812      	ldrb	r2, [r2, #0]
 800a9f2:	1a8a      	subs	r2, r1, r2
 800a9f4:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a9f6:	193b      	adds	r3, r7, r4
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	0018      	movs	r0, r3
 800a9fe:	f000 fa2b 	bl	800ae58 <malloc>
 800aa02:	0003      	movs	r3, r0
 800aa04:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800aa06:	197b      	adds	r3, r7, r5
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	18d1      	adds	r1, r2, r3
 800aa0e:	193b      	adds	r3, r7, r4
 800aa10:	781a      	ldrb	r2, [r3, #0]
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	0018      	movs	r0, r3
 800aa16:	f001 fccc 	bl	800c3b2 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800aa1a:	193b      	adds	r3, r7, r4
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	69fa      	ldr	r2, [r7, #28]
 800aa20:	18d3      	adds	r3, r2, r3
 800aa22:	2200      	movs	r2, #0
 800aa24:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800aa26:	197b      	adds	r3, r7, r5
 800aa28:	781a      	ldrb	r2, [r3, #0]
 800aa2a:	193b      	adds	r3, r7, r4
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	18d3      	adds	r3, r2, r3
 800aa30:	3301      	adds	r3, #1
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	18d2      	adds	r2, r2, r3
 800aa36:	19bb      	adds	r3, r7, r6
 800aa38:	7812      	ldrb	r2, [r2, #0]
 800aa3a:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800aa3c:	19bb      	adds	r3, r7, r6
 800aa3e:	781a      	ldrb	r2, [r3, #0]
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	0011      	movs	r1, r2
 800aa44:	0018      	movs	r0, r3
 800aa46:	f7ff fecd 	bl	800a7e4 <nmea2decimal>
 800aa4a:	0002      	movs	r2, r0
 800aa4c:	000b      	movs	r3, r1
 800aa4e:	613a      	str	r2, [r7, #16]
 800aa50:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	0018      	movs	r0, r3
 800aa56:	f000 fa09 	bl	800ae6c <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4b17      	ldr	r3, [pc, #92]	; (800aabc <get_my_nmea_gngll_coordinates+0x1f8>)
 800aa5e:	6938      	ldr	r0, [r7, #16]
 800aa60:	6979      	ldr	r1, [r7, #20]
 800aa62:	f7f6 fe03 	bl	800166c <__aeabi_dmul>
 800aa66:	0002      	movs	r2, r0
 800aa68:	000b      	movs	r3, r1
 800aa6a:	0010      	movs	r0, r2
 800aa6c:	0019      	movs	r1, r3
 800aa6e:	f008 f9bd 	bl	8012dec <round>
 800aa72:	2200      	movs	r2, #0
 800aa74:	4b11      	ldr	r3, [pc, #68]	; (800aabc <get_my_nmea_gngll_coordinates+0x1f8>)
 800aa76:	f7f6 f9ff 	bl	8000e78 <__aeabi_ddiv>
 800aa7a:	0002      	movs	r2, r0
 800aa7c:	000b      	movs	r3, r1
 800aa7e:	613a      	str	r2, [r7, #16]
 800aa80:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 800aa82:	490f      	ldr	r1, [pc, #60]	; (800aac0 <get_my_nmea_gngll_coordinates+0x1fc>)
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	9200      	str	r2, [sp, #0]
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	000a      	movs	r2, r1
 800aa90:	210c      	movs	r1, #12
 800aa92:	f001 fbab 	bl	800c1ec <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800aa96:	2200      	movs	r2, #0
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <get_my_nmea_gngll_coordinates+0x200>)
 800aa9a:	6938      	ldr	r0, [r7, #16]
 800aa9c:	6979      	ldr	r1, [r7, #20]
 800aa9e:	f7f6 fde5 	bl	800166c <__aeabi_dmul>
 800aaa2:	0002      	movs	r2, r0
 800aaa4:	000b      	movs	r3, r1
 800aaa6:	0010      	movs	r0, r2
 800aaa8:	0019      	movs	r1, r3
 800aaaa:	f7f7 fc41 	bl	8002330 <__aeabi_d2iz>
 800aaae:	0002      	movs	r2, r0
 800aab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aab2:	601a      	str	r2, [r3, #0]
}
 800aab4:	46c0      	nop			; (mov r8, r8)
 800aab6:	46bd      	mov	sp, r7
 800aab8:	b00f      	add	sp, #60	; 0x3c
 800aaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aabc:	412e8480 	.word	0x412e8480
 800aac0:	08014728 	.word	0x08014728
 800aac4:	416312d0 	.word	0x416312d0

0800aac8 <my_nmea_get_gsv_tns>:
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800aac8:	b5b0      	push	{r4, r5, r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800aad0:	240e      	movs	r4, #14
 800aad2:	193b      	adds	r3, r7, r4
 800aad4:	2200      	movs	r2, #0
 800aad6:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2203      	movs	r2, #3
 800aadc:	212c      	movs	r1, #44	; 0x2c
 800aade:	0018      	movs	r0, r3
 800aae0:	f7ff fc9e 	bl	800a420 <my_find_char_position>
 800aae4:	0003      	movs	r3, r0
 800aae6:	001a      	movs	r2, r3
 800aae8:	2517      	movs	r5, #23
 800aaea:	197b      	adds	r3, r7, r5
 800aaec:	3201      	adds	r2, #1
 800aaee:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800aaf0:	2003      	movs	r0, #3
 800aaf2:	f000 f9b1 	bl	800ae58 <malloc>
 800aaf6:	0003      	movs	r3, r0
 800aaf8:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800aafa:	197b      	adds	r3, r7, r5
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	18d1      	adds	r1, r2, r3
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2202      	movs	r2, #2
 800ab06:	0018      	movs	r0, r3
 800ab08:	f001 fc53 	bl	800c3b2 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	3302      	adds	r3, #2
 800ab10:	2200      	movs	r2, #0
 800ab12:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800ab14:	193a      	adds	r2, r7, r4
 800ab16:	4907      	ldr	r1, [pc, #28]	; (800ab34 <my_nmea_get_gsv_tns+0x6c>)
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	0018      	movs	r0, r3
 800ab1c:	f001 fbba 	bl	800c294 <sscanf>
	free ( s ) ;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	0018      	movs	r0, r3
 800ab24:	f000 f9a2 	bl	800ae6c <free>
	return tns ;
 800ab28:	193b      	adds	r3, r7, r4
 800ab2a:	881b      	ldrh	r3, [r3, #0]
}
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	b006      	add	sp, #24
 800ab32:	bdb0      	pop	{r4, r5, r7, pc}
 800ab34:	08014730 	.word	0x08014730

0800ab38 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800ab38:	b590      	push	{r4, r7, lr}
 800ab3a:	b087      	sub	sp, #28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2209      	movs	r2, #9
 800ab46:	212c      	movs	r1, #44	; 0x2c
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f7ff fc69 	bl	800a420 <my_find_char_position>
 800ab4e:	0003      	movs	r3, r0
 800ab50:	001a      	movs	r2, r3
 800ab52:	2417      	movs	r4, #23
 800ab54:	193b      	adds	r3, r7, r4
 800ab56:	3205      	adds	r2, #5
 800ab58:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ab5a:	2003      	movs	r0, #3
 800ab5c:	f000 f97c 	bl	800ae58 <malloc>
 800ab60:	0003      	movs	r3, r0
 800ab62:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ab64:	193b      	adds	r3, r7, r4
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	18d1      	adds	r1, r2, r3
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	0018      	movs	r0, r3
 800ab72:	f001 fc1e 	bl	800c3b2 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	3302      	adds	r3, #2
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ab7e:	240e      	movs	r4, #14
 800ab80:	193a      	adds	r2, r7, r4
 800ab82:	4909      	ldr	r1, [pc, #36]	; (800aba8 <my_nmea_get_rmc_date_yy+0x70>)
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	0018      	movs	r0, r3
 800ab88:	f001 fb84 	bl	800c294 <sscanf>
	free ( s ) ;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	0018      	movs	r0, r3
 800ab90:	f000 f96c 	bl	800ae6c <free>
	*yy = (uint8_t) temp ;
 800ab94:	193b      	adds	r3, r7, r4
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	701a      	strb	r2, [r3, #0]

}
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	46bd      	mov	sp, r7
 800aba2:	b007      	add	sp, #28
 800aba4:	bd90      	pop	{r4, r7, pc}
 800aba6:	46c0      	nop			; (mov r8, r8)
 800aba8:	08014730 	.word	0x08014730

0800abac <my_nmea_get_rmc_date_mm>:
void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2209      	movs	r2, #9
 800abba:	212c      	movs	r1, #44	; 0x2c
 800abbc:	0018      	movs	r0, r3
 800abbe:	f7ff fc2f 	bl	800a420 <my_find_char_position>
 800abc2:	0003      	movs	r3, r0
 800abc4:	001a      	movs	r2, r3
 800abc6:	2417      	movs	r4, #23
 800abc8:	193b      	adds	r3, r7, r4
 800abca:	3203      	adds	r2, #3
 800abcc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800abce:	2003      	movs	r0, #3
 800abd0:	f000 f942 	bl	800ae58 <malloc>
 800abd4:	0003      	movs	r3, r0
 800abd6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800abd8:	193b      	adds	r3, r7, r4
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	18d1      	adds	r1, r2, r3
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	2202      	movs	r2, #2
 800abe4:	0018      	movs	r0, r3
 800abe6:	f001 fbe4 	bl	800c3b2 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	3302      	adds	r3, #2
 800abee:	2200      	movs	r2, #0
 800abf0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800abf2:	240e      	movs	r4, #14
 800abf4:	193a      	adds	r2, r7, r4
 800abf6:	4909      	ldr	r1, [pc, #36]	; (800ac1c <my_nmea_get_rmc_date_mm+0x70>)
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	0018      	movs	r0, r3
 800abfc:	f001 fb4a 	bl	800c294 <sscanf>
	free ( s ) ;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	0018      	movs	r0, r3
 800ac04:	f000 f932 	bl	800ae6c <free>
	*mm = (uint8_t) temp ;
 800ac08:	193b      	adds	r3, r7, r4
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	701a      	strb	r2, [r3, #0]

}
 800ac12:	46c0      	nop			; (mov r8, r8)
 800ac14:	46bd      	mov	sp, r7
 800ac16:	b007      	add	sp, #28
 800ac18:	bd90      	pop	{r4, r7, pc}
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	08014730 	.word	0x08014730

0800ac20 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2209      	movs	r2, #9
 800ac2e:	212c      	movs	r1, #44	; 0x2c
 800ac30:	0018      	movs	r0, r3
 800ac32:	f7ff fbf5 	bl	800a420 <my_find_char_position>
 800ac36:	0003      	movs	r3, r0
 800ac38:	001a      	movs	r2, r3
 800ac3a:	2417      	movs	r4, #23
 800ac3c:	193b      	adds	r3, r7, r4
 800ac3e:	3201      	adds	r2, #1
 800ac40:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ac42:	2003      	movs	r0, #3
 800ac44:	f000 f908 	bl	800ae58 <malloc>
 800ac48:	0003      	movs	r3, r0
 800ac4a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ac4c:	193b      	adds	r3, r7, r4
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	18d1      	adds	r1, r2, r3
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	2202      	movs	r2, #2
 800ac58:	0018      	movs	r0, r3
 800ac5a:	f001 fbaa 	bl	800c3b2 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	3302      	adds	r3, #2
 800ac62:	2200      	movs	r2, #0
 800ac64:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ac66:	240e      	movs	r4, #14
 800ac68:	193a      	adds	r2, r7, r4
 800ac6a:	4909      	ldr	r1, [pc, #36]	; (800ac90 <my_nmea_get_rmc_date_dd+0x70>)
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	0018      	movs	r0, r3
 800ac70:	f001 fb10 	bl	800c294 <sscanf>
	free ( s ) ;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	0018      	movs	r0, r3
 800ac78:	f000 f8f8 	bl	800ae6c <free>
	*dd = (uint8_t) temp ;
 800ac7c:	193b      	adds	r3, r7, r4
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	b2da      	uxtb	r2, r3
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	701a      	strb	r2, [r3, #0]

}
 800ac86:	46c0      	nop			; (mov r8, r8)
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	b007      	add	sp, #28
 800ac8c:	bd90      	pop	{r4, r7, pc}
 800ac8e:	46c0      	nop			; (mov r8, r8)
 800ac90:	08014730 	.word	0x08014730

0800ac94 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800ac94:	b590      	push	{r4, r7, lr}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	212c      	movs	r1, #44	; 0x2c
 800aca4:	0018      	movs	r0, r3
 800aca6:	f7ff fbbb 	bl	800a420 <my_find_char_position>
 800acaa:	0003      	movs	r3, r0
 800acac:	001a      	movs	r2, r3
 800acae:	2417      	movs	r4, #23
 800acb0:	193b      	adds	r3, r7, r4
 800acb2:	3201      	adds	r2, #1
 800acb4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800acb6:	2003      	movs	r0, #3
 800acb8:	f000 f8ce 	bl	800ae58 <malloc>
 800acbc:	0003      	movs	r3, r0
 800acbe:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800acc0:	193b      	adds	r3, r7, r4
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	18d1      	adds	r1, r2, r3
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	2202      	movs	r2, #2
 800accc:	0018      	movs	r0, r3
 800acce:	f001 fb70 	bl	800c3b2 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	3302      	adds	r3, #2
 800acd6:	2200      	movs	r2, #0
 800acd8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800acda:	240e      	movs	r4, #14
 800acdc:	193a      	adds	r2, r7, r4
 800acde:	4909      	ldr	r1, [pc, #36]	; (800ad04 <my_nmea_get_rmc_utc_hh+0x70>)
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	0018      	movs	r0, r3
 800ace4:	f001 fad6 	bl	800c294 <sscanf>
	free ( s ) ;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	0018      	movs	r0, r3
 800acec:	f000 f8be 	bl	800ae6c <free>
	*hh = (uint8_t) temp ;
 800acf0:	193b      	adds	r3, r7, r4
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	701a      	strb	r2, [r3, #0]

}
 800acfa:	46c0      	nop			; (mov r8, r8)
 800acfc:	46bd      	mov	sp, r7
 800acfe:	b007      	add	sp, #28
 800ad00:	bd90      	pop	{r4, r7, pc}
 800ad02:	46c0      	nop			; (mov r8, r8)
 800ad04:	08014730 	.word	0x08014730

0800ad08 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800ad08:	b590      	push	{r4, r7, lr}
 800ad0a:	b087      	sub	sp, #28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	212c      	movs	r1, #44	; 0x2c
 800ad18:	0018      	movs	r0, r3
 800ad1a:	f7ff fb81 	bl	800a420 <my_find_char_position>
 800ad1e:	0003      	movs	r3, r0
 800ad20:	001a      	movs	r2, r3
 800ad22:	2417      	movs	r4, #23
 800ad24:	193b      	adds	r3, r7, r4
 800ad26:	3203      	adds	r2, #3
 800ad28:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ad2a:	2003      	movs	r0, #3
 800ad2c:	f000 f894 	bl	800ae58 <malloc>
 800ad30:	0003      	movs	r3, r0
 800ad32:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ad34:	193b      	adds	r3, r7, r4
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	18d1      	adds	r1, r2, r3
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	0018      	movs	r0, r3
 800ad42:	f001 fb36 	bl	800c3b2 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	3302      	adds	r3, #2
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ad4e:	240e      	movs	r4, #14
 800ad50:	193a      	adds	r2, r7, r4
 800ad52:	4909      	ldr	r1, [pc, #36]	; (800ad78 <my_nmea_get_rmc_utc_mm+0x70>)
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	0018      	movs	r0, r3
 800ad58:	f001 fa9c 	bl	800c294 <sscanf>
	free ( s ) ;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	0018      	movs	r0, r3
 800ad60:	f000 f884 	bl	800ae6c <free>
	*mm = (uint8_t) temp ;
 800ad64:	193b      	adds	r3, r7, r4
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	701a      	strb	r2, [r3, #0]

}
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	46bd      	mov	sp, r7
 800ad72:	b007      	add	sp, #28
 800ad74:	bd90      	pop	{r4, r7, pc}
 800ad76:	46c0      	nop			; (mov r8, r8)
 800ad78:	08014730 	.word	0x08014730

0800ad7c <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800ad7c:	b590      	push	{r4, r7, lr}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	212c      	movs	r1, #44	; 0x2c
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f7ff fb47 	bl	800a420 <my_find_char_position>
 800ad92:	0003      	movs	r3, r0
 800ad94:	001a      	movs	r2, r3
 800ad96:	2417      	movs	r4, #23
 800ad98:	193b      	adds	r3, r7, r4
 800ad9a:	3205      	adds	r2, #5
 800ad9c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ad9e:	2003      	movs	r0, #3
 800ada0:	f000 f85a 	bl	800ae58 <malloc>
 800ada4:	0003      	movs	r3, r0
 800ada6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ada8:	193b      	adds	r3, r7, r4
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	18d1      	adds	r1, r2, r3
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	2202      	movs	r2, #2
 800adb4:	0018      	movs	r0, r3
 800adb6:	f001 fafc 	bl	800c3b2 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	3302      	adds	r3, #2
 800adbe:	2200      	movs	r2, #0
 800adc0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800adc2:	240e      	movs	r4, #14
 800adc4:	193a      	adds	r2, r7, r4
 800adc6:	4909      	ldr	r1, [pc, #36]	; (800adec <my_nmea_get_rmc_utc_ss+0x70>)
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	0018      	movs	r0, r3
 800adcc:	f001 fa62 	bl	800c294 <sscanf>
	free ( s ) ;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	0018      	movs	r0, r3
 800add4:	f000 f84a 	bl	800ae6c <free>
	*ss = (uint8_t) temp ;
 800add8:	193b      	adds	r3, r7, r4
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b2da      	uxtb	r2, r3
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	701a      	strb	r2, [r3, #0]

}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	46bd      	mov	sp, r7
 800ade6:	b007      	add	sp, #28
 800ade8:	bd90      	pop	{r4, r7, pc}
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	08014730 	.word	0x08014730

0800adf0 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800adf0:	b590      	push	{r4, r7, lr}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	212c      	movs	r1, #44	; 0x2c
 800ae00:	0018      	movs	r0, r3
 800ae02:	f7ff fb0d 	bl	800a420 <my_find_char_position>
 800ae06:	0003      	movs	r3, r0
 800ae08:	001a      	movs	r2, r3
 800ae0a:	240f      	movs	r4, #15
 800ae0c:	193b      	adds	r3, r7, r4
 800ae0e:	3208      	adds	r2, #8
 800ae10:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ae12:	2004      	movs	r0, #4
 800ae14:	f000 f820 	bl	800ae58 <malloc>
 800ae18:	0003      	movs	r3, r0
 800ae1a:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ae1c:	193b      	adds	r3, r7, r4
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	18d1      	adds	r1, r2, r3
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	2203      	movs	r2, #3
 800ae28:	0018      	movs	r0, r3
 800ae2a:	f001 fac2 	bl	800c3b2 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	3303      	adds	r3, #3
 800ae32:	2200      	movs	r2, #0
 800ae34:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	4906      	ldr	r1, [pc, #24]	; (800ae54 <my_nmea_get_rmc_utc_sss+0x64>)
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	f001 fa29 	bl	800c294 <sscanf>
	free ( s ) ;
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	0018      	movs	r0, r3
 800ae46:	f000 f811 	bl	800ae6c <free>
}
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	b005      	add	sp, #20
 800ae50:	bd90      	pop	{r4, r7, pc}
 800ae52:	46c0      	nop			; (mov r8, r8)
 800ae54:	08014734 	.word	0x08014734

0800ae58 <malloc>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	4b03      	ldr	r3, [pc, #12]	; (800ae68 <malloc+0x10>)
 800ae5c:	0001      	movs	r1, r0
 800ae5e:	6818      	ldr	r0, [r3, #0]
 800ae60:	f000 f80e 	bl	800ae80 <_malloc_r>
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	46c0      	nop			; (mov r8, r8)
 800ae68:	200006d8 	.word	0x200006d8

0800ae6c <free>:
 800ae6c:	b510      	push	{r4, lr}
 800ae6e:	4b03      	ldr	r3, [pc, #12]	; (800ae7c <free+0x10>)
 800ae70:	0001      	movs	r1, r0
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	f001 fbe4 	bl	800c640 <_free_r>
 800ae78:	bd10      	pop	{r4, pc}
 800ae7a:	46c0      	nop			; (mov r8, r8)
 800ae7c:	200006d8 	.word	0x200006d8

0800ae80 <_malloc_r>:
 800ae80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae82:	000d      	movs	r5, r1
 800ae84:	b087      	sub	sp, #28
 800ae86:	350b      	adds	r5, #11
 800ae88:	9001      	str	r0, [sp, #4]
 800ae8a:	2d16      	cmp	r5, #22
 800ae8c:	d908      	bls.n	800aea0 <_malloc_r+0x20>
 800ae8e:	2207      	movs	r2, #7
 800ae90:	4395      	bics	r5, r2
 800ae92:	d506      	bpl.n	800aea2 <_malloc_r+0x22>
 800ae94:	230c      	movs	r3, #12
 800ae96:	9a01      	ldr	r2, [sp, #4]
 800ae98:	6013      	str	r3, [r2, #0]
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	b007      	add	sp, #28
 800ae9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aea0:	2510      	movs	r5, #16
 800aea2:	42a9      	cmp	r1, r5
 800aea4:	d8f6      	bhi.n	800ae94 <_malloc_r+0x14>
 800aea6:	9801      	ldr	r0, [sp, #4]
 800aea8:	f000 f9fe 	bl	800b2a8 <__malloc_lock>
 800aeac:	23fc      	movs	r3, #252	; 0xfc
 800aeae:	4ebe      	ldr	r6, [pc, #760]	; (800b1a8 <_malloc_r+0x328>)
 800aeb0:	005b      	lsls	r3, r3, #1
 800aeb2:	429d      	cmp	r5, r3
 800aeb4:	d219      	bcs.n	800aeea <_malloc_r+0x6a>
 800aeb6:	002a      	movs	r2, r5
 800aeb8:	3208      	adds	r2, #8
 800aeba:	18b2      	adds	r2, r6, r2
 800aebc:	0011      	movs	r1, r2
 800aebe:	6854      	ldr	r4, [r2, #4]
 800aec0:	3908      	subs	r1, #8
 800aec2:	08eb      	lsrs	r3, r5, #3
 800aec4:	428c      	cmp	r4, r1
 800aec6:	d103      	bne.n	800aed0 <_malloc_r+0x50>
 800aec8:	68d4      	ldr	r4, [r2, #12]
 800aeca:	3302      	adds	r3, #2
 800aecc:	42a2      	cmp	r2, r4
 800aece:	d022      	beq.n	800af16 <_malloc_r+0x96>
 800aed0:	2203      	movs	r2, #3
 800aed2:	6863      	ldr	r3, [r4, #4]
 800aed4:	68a1      	ldr	r1, [r4, #8]
 800aed6:	4393      	bics	r3, r2
 800aed8:	68e2      	ldr	r2, [r4, #12]
 800aeda:	18e3      	adds	r3, r4, r3
 800aedc:	60ca      	str	r2, [r1, #12]
 800aede:	6091      	str	r1, [r2, #8]
 800aee0:	2201      	movs	r2, #1
 800aee2:	6859      	ldr	r1, [r3, #4]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	605a      	str	r2, [r3, #4]
 800aee8:	e02a      	b.n	800af40 <_malloc_r+0xc0>
 800aeea:	233f      	movs	r3, #63	; 0x3f
 800aeec:	0a6a      	lsrs	r2, r5, #9
 800aeee:	d003      	beq.n	800aef8 <_malloc_r+0x78>
 800aef0:	2a04      	cmp	r2, #4
 800aef2:	d82b      	bhi.n	800af4c <_malloc_r+0xcc>
 800aef4:	09ab      	lsrs	r3, r5, #6
 800aef6:	3338      	adds	r3, #56	; 0x38
 800aef8:	2203      	movs	r2, #3
 800aefa:	4694      	mov	ip, r2
 800aefc:	00d9      	lsls	r1, r3, #3
 800aefe:	1989      	adds	r1, r1, r6
 800af00:	68cc      	ldr	r4, [r1, #12]
 800af02:	428c      	cmp	r4, r1
 800af04:	d006      	beq.n	800af14 <_malloc_r+0x94>
 800af06:	4660      	mov	r0, ip
 800af08:	6862      	ldr	r2, [r4, #4]
 800af0a:	4382      	bics	r2, r0
 800af0c:	1b57      	subs	r7, r2, r5
 800af0e:	2f0f      	cmp	r7, #15
 800af10:	dd34      	ble.n	800af7c <_malloc_r+0xfc>
 800af12:	3b01      	subs	r3, #1
 800af14:	3301      	adds	r3, #1
 800af16:	6934      	ldr	r4, [r6, #16]
 800af18:	49a4      	ldr	r1, [pc, #656]	; (800b1ac <_malloc_r+0x32c>)
 800af1a:	428c      	cmp	r4, r1
 800af1c:	d055      	beq.n	800afca <_malloc_r+0x14a>
 800af1e:	2003      	movs	r0, #3
 800af20:	6862      	ldr	r2, [r4, #4]
 800af22:	4382      	bics	r2, r0
 800af24:	1b50      	subs	r0, r2, r5
 800af26:	280f      	cmp	r0, #15
 800af28:	dd36      	ble.n	800af98 <_malloc_r+0x118>
 800af2a:	2301      	movs	r3, #1
 800af2c:	1967      	adds	r7, r4, r5
 800af2e:	431d      	orrs	r5, r3
 800af30:	4303      	orrs	r3, r0
 800af32:	6065      	str	r5, [r4, #4]
 800af34:	6177      	str	r7, [r6, #20]
 800af36:	6137      	str	r7, [r6, #16]
 800af38:	60f9      	str	r1, [r7, #12]
 800af3a:	60b9      	str	r1, [r7, #8]
 800af3c:	607b      	str	r3, [r7, #4]
 800af3e:	50a0      	str	r0, [r4, r2]
 800af40:	9801      	ldr	r0, [sp, #4]
 800af42:	f000 f9b9 	bl	800b2b8 <__malloc_unlock>
 800af46:	0020      	movs	r0, r4
 800af48:	3008      	adds	r0, #8
 800af4a:	e7a7      	b.n	800ae9c <_malloc_r+0x1c>
 800af4c:	2a14      	cmp	r2, #20
 800af4e:	d802      	bhi.n	800af56 <_malloc_r+0xd6>
 800af50:	0013      	movs	r3, r2
 800af52:	335b      	adds	r3, #91	; 0x5b
 800af54:	e7d0      	b.n	800aef8 <_malloc_r+0x78>
 800af56:	2a54      	cmp	r2, #84	; 0x54
 800af58:	d802      	bhi.n	800af60 <_malloc_r+0xe0>
 800af5a:	0b2b      	lsrs	r3, r5, #12
 800af5c:	336e      	adds	r3, #110	; 0x6e
 800af5e:	e7cb      	b.n	800aef8 <_malloc_r+0x78>
 800af60:	23aa      	movs	r3, #170	; 0xaa
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	429a      	cmp	r2, r3
 800af66:	d802      	bhi.n	800af6e <_malloc_r+0xee>
 800af68:	0beb      	lsrs	r3, r5, #15
 800af6a:	3377      	adds	r3, #119	; 0x77
 800af6c:	e7c4      	b.n	800aef8 <_malloc_r+0x78>
 800af6e:	4990      	ldr	r1, [pc, #576]	; (800b1b0 <_malloc_r+0x330>)
 800af70:	237e      	movs	r3, #126	; 0x7e
 800af72:	428a      	cmp	r2, r1
 800af74:	d8c0      	bhi.n	800aef8 <_malloc_r+0x78>
 800af76:	0cab      	lsrs	r3, r5, #18
 800af78:	337c      	adds	r3, #124	; 0x7c
 800af7a:	e7bd      	b.n	800aef8 <_malloc_r+0x78>
 800af7c:	68e0      	ldr	r0, [r4, #12]
 800af7e:	2f00      	cmp	r7, #0
 800af80:	db08      	blt.n	800af94 <_malloc_r+0x114>
 800af82:	68a3      	ldr	r3, [r4, #8]
 800af84:	60d8      	str	r0, [r3, #12]
 800af86:	6083      	str	r3, [r0, #8]
 800af88:	2301      	movs	r3, #1
 800af8a:	18a2      	adds	r2, r4, r2
 800af8c:	6851      	ldr	r1, [r2, #4]
 800af8e:	430b      	orrs	r3, r1
 800af90:	6053      	str	r3, [r2, #4]
 800af92:	e7d5      	b.n	800af40 <_malloc_r+0xc0>
 800af94:	0004      	movs	r4, r0
 800af96:	e7b4      	b.n	800af02 <_malloc_r+0x82>
 800af98:	6171      	str	r1, [r6, #20]
 800af9a:	6131      	str	r1, [r6, #16]
 800af9c:	2800      	cmp	r0, #0
 800af9e:	daf3      	bge.n	800af88 <_malloc_r+0x108>
 800afa0:	6871      	ldr	r1, [r6, #4]
 800afa2:	468c      	mov	ip, r1
 800afa4:	2180      	movs	r1, #128	; 0x80
 800afa6:	0089      	lsls	r1, r1, #2
 800afa8:	428a      	cmp	r2, r1
 800afaa:	d300      	bcc.n	800afae <_malloc_r+0x12e>
 800afac:	e08c      	b.n	800b0c8 <_malloc_r+0x248>
 800afae:	08d1      	lsrs	r1, r2, #3
 800afb0:	0950      	lsrs	r0, r2, #5
 800afb2:	2201      	movs	r2, #1
 800afb4:	4082      	lsls	r2, r0
 800afb6:	4660      	mov	r0, ip
 800afb8:	4302      	orrs	r2, r0
 800afba:	6072      	str	r2, [r6, #4]
 800afbc:	00ca      	lsls	r2, r1, #3
 800afbe:	1992      	adds	r2, r2, r6
 800afc0:	6891      	ldr	r1, [r2, #8]
 800afc2:	60e2      	str	r2, [r4, #12]
 800afc4:	60a1      	str	r1, [r4, #8]
 800afc6:	6094      	str	r4, [r2, #8]
 800afc8:	60cc      	str	r4, [r1, #12]
 800afca:	2201      	movs	r2, #1
 800afcc:	4876      	ldr	r0, [pc, #472]	; (800b1a8 <_malloc_r+0x328>)
 800afce:	1099      	asrs	r1, r3, #2
 800afd0:	408a      	lsls	r2, r1
 800afd2:	6841      	ldr	r1, [r0, #4]
 800afd4:	4291      	cmp	r1, r2
 800afd6:	d328      	bcc.n	800b02a <_malloc_r+0x1aa>
 800afd8:	420a      	tst	r2, r1
 800afda:	d105      	bne.n	800afe8 <_malloc_r+0x168>
 800afdc:	2403      	movs	r4, #3
 800afde:	43a3      	bics	r3, r4
 800afe0:	0052      	lsls	r2, r2, #1
 800afe2:	3304      	adds	r3, #4
 800afe4:	420a      	tst	r2, r1
 800afe6:	d0fb      	beq.n	800afe0 <_malloc_r+0x160>
 800afe8:	496f      	ldr	r1, [pc, #444]	; (800b1a8 <_malloc_r+0x328>)
 800afea:	9104      	str	r1, [sp, #16]
 800afec:	00d9      	lsls	r1, r3, #3
 800afee:	1841      	adds	r1, r0, r1
 800aff0:	468c      	mov	ip, r1
 800aff2:	000f      	movs	r7, r1
 800aff4:	9302      	str	r3, [sp, #8]
 800aff6:	68fc      	ldr	r4, [r7, #12]
 800aff8:	42bc      	cmp	r4, r7
 800affa:	d000      	beq.n	800affe <_malloc_r+0x17e>
 800affc:	e09b      	b.n	800b136 <_malloc_r+0x2b6>
 800affe:	2403      	movs	r4, #3
 800b000:	9902      	ldr	r1, [sp, #8]
 800b002:	3708      	adds	r7, #8
 800b004:	3101      	adds	r1, #1
 800b006:	9102      	str	r1, [sp, #8]
 800b008:	4221      	tst	r1, r4
 800b00a:	d1f4      	bne.n	800aff6 <_malloc_r+0x176>
 800b00c:	2103      	movs	r1, #3
 800b00e:	420b      	tst	r3, r1
 800b010:	d000      	beq.n	800b014 <_malloc_r+0x194>
 800b012:	e0b7      	b.n	800b184 <_malloc_r+0x304>
 800b014:	6843      	ldr	r3, [r0, #4]
 800b016:	4393      	bics	r3, r2
 800b018:	6043      	str	r3, [r0, #4]
 800b01a:	9b04      	ldr	r3, [sp, #16]
 800b01c:	0052      	lsls	r2, r2, #1
 800b01e:	6859      	ldr	r1, [r3, #4]
 800b020:	4291      	cmp	r1, r2
 800b022:	d302      	bcc.n	800b02a <_malloc_r+0x1aa>
 800b024:	2a00      	cmp	r2, #0
 800b026:	d000      	beq.n	800b02a <_malloc_r+0x1aa>
 800b028:	e0bb      	b.n	800b1a2 <_malloc_r+0x322>
 800b02a:	2203      	movs	r2, #3
 800b02c:	6883      	ldr	r3, [r0, #8]
 800b02e:	9302      	str	r3, [sp, #8]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	4393      	bics	r3, r2
 800b034:	9303      	str	r3, [sp, #12]
 800b036:	42ab      	cmp	r3, r5
 800b038:	d303      	bcc.n	800b042 <_malloc_r+0x1c2>
 800b03a:	1b59      	subs	r1, r3, r5
 800b03c:	290f      	cmp	r1, #15
 800b03e:	dd00      	ble.n	800b042 <_malloc_r+0x1c2>
 800b040:	e123      	b.n	800b28a <_malloc_r+0x40a>
 800b042:	9b02      	ldr	r3, [sp, #8]
 800b044:	9a03      	ldr	r2, [sp, #12]
 800b046:	2008      	movs	r0, #8
 800b048:	189e      	adds	r6, r3, r2
 800b04a:	4b5a      	ldr	r3, [pc, #360]	; (800b1b4 <_malloc_r+0x334>)
 800b04c:	681f      	ldr	r7, [r3, #0]
 800b04e:	f001 fa71 	bl	800c534 <sysconf>
 800b052:	4b59      	ldr	r3, [pc, #356]	; (800b1b8 <_malloc_r+0x338>)
 800b054:	3710      	adds	r7, #16
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	197f      	adds	r7, r7, r5
 800b05a:	9004      	str	r0, [sp, #16]
 800b05c:	3301      	adds	r3, #1
 800b05e:	d003      	beq.n	800b068 <_malloc_r+0x1e8>
 800b060:	1e7b      	subs	r3, r7, #1
 800b062:	181b      	adds	r3, r3, r0
 800b064:	4247      	negs	r7, r0
 800b066:	401f      	ands	r7, r3
 800b068:	0039      	movs	r1, r7
 800b06a:	9801      	ldr	r0, [sp, #4]
 800b06c:	f001 fa0e 	bl	800c48c <_sbrk_r>
 800b070:	0004      	movs	r4, r0
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	d100      	bne.n	800b078 <_malloc_r+0x1f8>
 800b076:	e0de      	b.n	800b236 <_malloc_r+0x3b6>
 800b078:	4286      	cmp	r6, r0
 800b07a:	d904      	bls.n	800b086 <_malloc_r+0x206>
 800b07c:	4b4a      	ldr	r3, [pc, #296]	; (800b1a8 <_malloc_r+0x328>)
 800b07e:	9a02      	ldr	r2, [sp, #8]
 800b080:	429a      	cmp	r2, r3
 800b082:	d000      	beq.n	800b086 <_malloc_r+0x206>
 800b084:	e0d7      	b.n	800b236 <_malloc_r+0x3b6>
 800b086:	4a4d      	ldr	r2, [pc, #308]	; (800b1bc <_malloc_r+0x33c>)
 800b088:	6813      	ldr	r3, [r2, #0]
 800b08a:	18fb      	adds	r3, r7, r3
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	9a04      	ldr	r2, [sp, #16]
 800b090:	3a01      	subs	r2, #1
 800b092:	42a6      	cmp	r6, r4
 800b094:	d000      	beq.n	800b098 <_malloc_r+0x218>
 800b096:	e097      	b.n	800b1c8 <_malloc_r+0x348>
 800b098:	4216      	tst	r6, r2
 800b09a:	d000      	beq.n	800b09e <_malloc_r+0x21e>
 800b09c:	e094      	b.n	800b1c8 <_malloc_r+0x348>
 800b09e:	4b42      	ldr	r3, [pc, #264]	; (800b1a8 <_malloc_r+0x328>)
 800b0a0:	689a      	ldr	r2, [r3, #8]
 800b0a2:	9b03      	ldr	r3, [sp, #12]
 800b0a4:	19df      	adds	r7, r3, r7
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	433b      	orrs	r3, r7
 800b0aa:	6053      	str	r3, [r2, #4]
 800b0ac:	4b43      	ldr	r3, [pc, #268]	; (800b1bc <_malloc_r+0x33c>)
 800b0ae:	4a44      	ldr	r2, [pc, #272]	; (800b1c0 <_malloc_r+0x340>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6811      	ldr	r1, [r2, #0]
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	d900      	bls.n	800b0ba <_malloc_r+0x23a>
 800b0b8:	6013      	str	r3, [r2, #0]
 800b0ba:	4a42      	ldr	r2, [pc, #264]	; (800b1c4 <_malloc_r+0x344>)
 800b0bc:	6811      	ldr	r1, [r2, #0]
 800b0be:	428b      	cmp	r3, r1
 800b0c0:	d800      	bhi.n	800b0c4 <_malloc_r+0x244>
 800b0c2:	e0b8      	b.n	800b236 <_malloc_r+0x3b6>
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	e0b6      	b.n	800b236 <_malloc_r+0x3b6>
 800b0c8:	0a50      	lsrs	r0, r2, #9
 800b0ca:	2804      	cmp	r0, #4
 800b0cc:	d811      	bhi.n	800b0f2 <_malloc_r+0x272>
 800b0ce:	0991      	lsrs	r1, r2, #6
 800b0d0:	3138      	adds	r1, #56	; 0x38
 800b0d2:	00cf      	lsls	r7, r1, #3
 800b0d4:	19bf      	adds	r7, r7, r6
 800b0d6:	68b8      	ldr	r0, [r7, #8]
 800b0d8:	4287      	cmp	r7, r0
 800b0da:	d125      	bne.n	800b128 <_malloc_r+0x2a8>
 800b0dc:	2201      	movs	r2, #1
 800b0de:	1089      	asrs	r1, r1, #2
 800b0e0:	408a      	lsls	r2, r1
 800b0e2:	4661      	mov	r1, ip
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	6072      	str	r2, [r6, #4]
 800b0e8:	60e7      	str	r7, [r4, #12]
 800b0ea:	60a0      	str	r0, [r4, #8]
 800b0ec:	60bc      	str	r4, [r7, #8]
 800b0ee:	60c4      	str	r4, [r0, #12]
 800b0f0:	e76b      	b.n	800afca <_malloc_r+0x14a>
 800b0f2:	2814      	cmp	r0, #20
 800b0f4:	d802      	bhi.n	800b0fc <_malloc_r+0x27c>
 800b0f6:	0001      	movs	r1, r0
 800b0f8:	315b      	adds	r1, #91	; 0x5b
 800b0fa:	e7ea      	b.n	800b0d2 <_malloc_r+0x252>
 800b0fc:	2854      	cmp	r0, #84	; 0x54
 800b0fe:	d802      	bhi.n	800b106 <_malloc_r+0x286>
 800b100:	0b11      	lsrs	r1, r2, #12
 800b102:	316e      	adds	r1, #110	; 0x6e
 800b104:	e7e5      	b.n	800b0d2 <_malloc_r+0x252>
 800b106:	21aa      	movs	r1, #170	; 0xaa
 800b108:	0049      	lsls	r1, r1, #1
 800b10a:	4288      	cmp	r0, r1
 800b10c:	d802      	bhi.n	800b114 <_malloc_r+0x294>
 800b10e:	0bd1      	lsrs	r1, r2, #15
 800b110:	3177      	adds	r1, #119	; 0x77
 800b112:	e7de      	b.n	800b0d2 <_malloc_r+0x252>
 800b114:	4f26      	ldr	r7, [pc, #152]	; (800b1b0 <_malloc_r+0x330>)
 800b116:	217e      	movs	r1, #126	; 0x7e
 800b118:	42b8      	cmp	r0, r7
 800b11a:	d8da      	bhi.n	800b0d2 <_malloc_r+0x252>
 800b11c:	0c91      	lsrs	r1, r2, #18
 800b11e:	317c      	adds	r1, #124	; 0x7c
 800b120:	e7d7      	b.n	800b0d2 <_malloc_r+0x252>
 800b122:	6880      	ldr	r0, [r0, #8]
 800b124:	4287      	cmp	r7, r0
 800b126:	d004      	beq.n	800b132 <_malloc_r+0x2b2>
 800b128:	2603      	movs	r6, #3
 800b12a:	6841      	ldr	r1, [r0, #4]
 800b12c:	43b1      	bics	r1, r6
 800b12e:	4291      	cmp	r1, r2
 800b130:	d8f7      	bhi.n	800b122 <_malloc_r+0x2a2>
 800b132:	68c7      	ldr	r7, [r0, #12]
 800b134:	e7d8      	b.n	800b0e8 <_malloc_r+0x268>
 800b136:	2603      	movs	r6, #3
 800b138:	6861      	ldr	r1, [r4, #4]
 800b13a:	43b1      	bics	r1, r6
 800b13c:	9103      	str	r1, [sp, #12]
 800b13e:	68e6      	ldr	r6, [r4, #12]
 800b140:	1b49      	subs	r1, r1, r5
 800b142:	290f      	cmp	r1, #15
 800b144:	dd10      	ble.n	800b168 <_malloc_r+0x2e8>
 800b146:	2201      	movs	r2, #1
 800b148:	1963      	adds	r3, r4, r5
 800b14a:	4315      	orrs	r5, r2
 800b14c:	6065      	str	r5, [r4, #4]
 800b14e:	68a5      	ldr	r5, [r4, #8]
 800b150:	430a      	orrs	r2, r1
 800b152:	60ee      	str	r6, [r5, #12]
 800b154:	60b5      	str	r5, [r6, #8]
 800b156:	6143      	str	r3, [r0, #20]
 800b158:	6103      	str	r3, [r0, #16]
 800b15a:	4814      	ldr	r0, [pc, #80]	; (800b1ac <_malloc_r+0x32c>)
 800b15c:	605a      	str	r2, [r3, #4]
 800b15e:	60d8      	str	r0, [r3, #12]
 800b160:	6098      	str	r0, [r3, #8]
 800b162:	9b03      	ldr	r3, [sp, #12]
 800b164:	50e1      	str	r1, [r4, r3]
 800b166:	e6eb      	b.n	800af40 <_malloc_r+0xc0>
 800b168:	2900      	cmp	r1, #0
 800b16a:	db09      	blt.n	800b180 <_malloc_r+0x300>
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	18e1      	adds	r1, r4, r3
 800b170:	2301      	movs	r3, #1
 800b172:	684a      	ldr	r2, [r1, #4]
 800b174:	4313      	orrs	r3, r2
 800b176:	604b      	str	r3, [r1, #4]
 800b178:	68a3      	ldr	r3, [r4, #8]
 800b17a:	60de      	str	r6, [r3, #12]
 800b17c:	60b3      	str	r3, [r6, #8]
 800b17e:	e6df      	b.n	800af40 <_malloc_r+0xc0>
 800b180:	0034      	movs	r4, r6
 800b182:	e739      	b.n	800aff8 <_malloc_r+0x178>
 800b184:	2108      	movs	r1, #8
 800b186:	4249      	negs	r1, r1
 800b188:	448c      	add	ip, r1
 800b18a:	4661      	mov	r1, ip
 800b18c:	6889      	ldr	r1, [r1, #8]
 800b18e:	3b01      	subs	r3, #1
 800b190:	4561      	cmp	r1, ip
 800b192:	d100      	bne.n	800b196 <_malloc_r+0x316>
 800b194:	e73a      	b.n	800b00c <_malloc_r+0x18c>
 800b196:	e740      	b.n	800b01a <_malloc_r+0x19a>
 800b198:	3304      	adds	r3, #4
 800b19a:	0052      	lsls	r2, r2, #1
 800b19c:	420a      	tst	r2, r1
 800b19e:	d0fb      	beq.n	800b198 <_malloc_r+0x318>
 800b1a0:	e724      	b.n	800afec <_malloc_r+0x16c>
 800b1a2:	9b02      	ldr	r3, [sp, #8]
 800b1a4:	e7fa      	b.n	800b19c <_malloc_r+0x31c>
 800b1a6:	46c0      	nop			; (mov r8, r8)
 800b1a8:	20000030 	.word	0x20000030
 800b1ac:	20000038 	.word	0x20000038
 800b1b0:	00000554 	.word	0x00000554
 800b1b4:	20000bf0 	.word	0x20000bf0
 800b1b8:	20000438 	.word	0x20000438
 800b1bc:	20000bc0 	.word	0x20000bc0
 800b1c0:	20000be8 	.word	0x20000be8
 800b1c4:	20000bec 	.word	0x20000bec
 800b1c8:	4934      	ldr	r1, [pc, #208]	; (800b29c <_malloc_r+0x41c>)
 800b1ca:	6808      	ldr	r0, [r1, #0]
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d140      	bne.n	800b252 <_malloc_r+0x3d2>
 800b1d0:	600c      	str	r4, [r1, #0]
 800b1d2:	2107      	movs	r1, #7
 800b1d4:	0026      	movs	r6, r4
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	400e      	ands	r6, r1
 800b1da:	420c      	tst	r4, r1
 800b1dc:	d002      	beq.n	800b1e4 <_malloc_r+0x364>
 800b1de:	3308      	adds	r3, #8
 800b1e0:	1b9b      	subs	r3, r3, r6
 800b1e2:	18e4      	adds	r4, r4, r3
 800b1e4:	19e1      	adds	r1, r4, r7
 800b1e6:	9105      	str	r1, [sp, #20]
 800b1e8:	9f05      	ldr	r7, [sp, #20]
 800b1ea:	9904      	ldr	r1, [sp, #16]
 800b1ec:	4017      	ands	r7, r2
 800b1ee:	18cb      	adds	r3, r1, r3
 800b1f0:	1bdf      	subs	r7, r3, r7
 800b1f2:	4017      	ands	r7, r2
 800b1f4:	0039      	movs	r1, r7
 800b1f6:	9801      	ldr	r0, [sp, #4]
 800b1f8:	f001 f948 	bl	800c48c <_sbrk_r>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d107      	bne.n	800b210 <_malloc_r+0x390>
 800b200:	1e37      	subs	r7, r6, #0
 800b202:	9805      	ldr	r0, [sp, #20]
 800b204:	d004      	beq.n	800b210 <_malloc_r+0x390>
 800b206:	0030      	movs	r0, r6
 800b208:	2700      	movs	r7, #0
 800b20a:	9b05      	ldr	r3, [sp, #20]
 800b20c:	3808      	subs	r0, #8
 800b20e:	1818      	adds	r0, r3, r0
 800b210:	4a23      	ldr	r2, [pc, #140]	; (800b2a0 <_malloc_r+0x420>)
 800b212:	1b00      	subs	r0, r0, r4
 800b214:	6813      	ldr	r3, [r2, #0]
 800b216:	19c0      	adds	r0, r0, r7
 800b218:	19db      	adds	r3, r3, r7
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	2201      	movs	r2, #1
 800b21e:	4b21      	ldr	r3, [pc, #132]	; (800b2a4 <_malloc_r+0x424>)
 800b220:	9902      	ldr	r1, [sp, #8]
 800b222:	4310      	orrs	r0, r2
 800b224:	609c      	str	r4, [r3, #8]
 800b226:	6060      	str	r0, [r4, #4]
 800b228:	4299      	cmp	r1, r3
 800b22a:	d100      	bne.n	800b22e <_malloc_r+0x3ae>
 800b22c:	e73e      	b.n	800b0ac <_malloc_r+0x22c>
 800b22e:	9b03      	ldr	r3, [sp, #12]
 800b230:	2b0f      	cmp	r3, #15
 800b232:	d813      	bhi.n	800b25c <_malloc_r+0x3dc>
 800b234:	6062      	str	r2, [r4, #4]
 800b236:	2203      	movs	r2, #3
 800b238:	4b1a      	ldr	r3, [pc, #104]	; (800b2a4 <_malloc_r+0x424>)
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	4393      	bics	r3, r2
 800b240:	1b59      	subs	r1, r3, r5
 800b242:	42ab      	cmp	r3, r5
 800b244:	d301      	bcc.n	800b24a <_malloc_r+0x3ca>
 800b246:	290f      	cmp	r1, #15
 800b248:	dc1f      	bgt.n	800b28a <_malloc_r+0x40a>
 800b24a:	9801      	ldr	r0, [sp, #4]
 800b24c:	f000 f834 	bl	800b2b8 <__malloc_unlock>
 800b250:	e623      	b.n	800ae9a <_malloc_r+0x1a>
 800b252:	4913      	ldr	r1, [pc, #76]	; (800b2a0 <_malloc_r+0x420>)
 800b254:	1ba6      	subs	r6, r4, r6
 800b256:	18f6      	adds	r6, r6, r3
 800b258:	600e      	str	r6, [r1, #0]
 800b25a:	e7ba      	b.n	800b1d2 <_malloc_r+0x352>
 800b25c:	2107      	movs	r1, #7
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	3b0c      	subs	r3, #12
 800b262:	438b      	bics	r3, r1
 800b264:	9902      	ldr	r1, [sp, #8]
 800b266:	6849      	ldr	r1, [r1, #4]
 800b268:	400a      	ands	r2, r1
 800b26a:	9902      	ldr	r1, [sp, #8]
 800b26c:	431a      	orrs	r2, r3
 800b26e:	604a      	str	r2, [r1, #4]
 800b270:	18ca      	adds	r2, r1, r3
 800b272:	2105      	movs	r1, #5
 800b274:	6051      	str	r1, [r2, #4]
 800b276:	6091      	str	r1, [r2, #8]
 800b278:	2b0f      	cmp	r3, #15
 800b27a:	d800      	bhi.n	800b27e <_malloc_r+0x3fe>
 800b27c:	e716      	b.n	800b0ac <_malloc_r+0x22c>
 800b27e:	9902      	ldr	r1, [sp, #8]
 800b280:	9801      	ldr	r0, [sp, #4]
 800b282:	3108      	adds	r1, #8
 800b284:	f001 f9dc 	bl	800c640 <_free_r>
 800b288:	e710      	b.n	800b0ac <_malloc_r+0x22c>
 800b28a:	2201      	movs	r2, #1
 800b28c:	0013      	movs	r3, r2
 800b28e:	4805      	ldr	r0, [pc, #20]	; (800b2a4 <_malloc_r+0x424>)
 800b290:	432b      	orrs	r3, r5
 800b292:	6884      	ldr	r4, [r0, #8]
 800b294:	6063      	str	r3, [r4, #4]
 800b296:	1963      	adds	r3, r4, r5
 800b298:	6083      	str	r3, [r0, #8]
 800b29a:	e623      	b.n	800aee4 <_malloc_r+0x64>
 800b29c:	20000438 	.word	0x20000438
 800b2a0:	20000bc0 	.word	0x20000bc0
 800b2a4:	20000030 	.word	0x20000030

0800b2a8 <__malloc_lock>:
 800b2a8:	b510      	push	{r4, lr}
 800b2aa:	4802      	ldr	r0, [pc, #8]	; (800b2b4 <__malloc_lock+0xc>)
 800b2ac:	f001 f940 	bl	800c530 <__retarget_lock_acquire_recursive>
 800b2b0:	bd10      	pop	{r4, pc}
 800b2b2:	46c0      	nop			; (mov r8, r8)
 800b2b4:	20000d35 	.word	0x20000d35

0800b2b8 <__malloc_unlock>:
 800b2b8:	b510      	push	{r4, lr}
 800b2ba:	4802      	ldr	r0, [pc, #8]	; (800b2c4 <__malloc_unlock+0xc>)
 800b2bc:	f001 f939 	bl	800c532 <__retarget_lock_release_recursive>
 800b2c0:	bd10      	pop	{r4, pc}
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	20000d35 	.word	0x20000d35

0800b2c8 <sulp>:
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	0016      	movs	r6, r2
 800b2cc:	000d      	movs	r5, r1
 800b2ce:	f002 f90d 	bl	800d4ec <__ulp>
 800b2d2:	2e00      	cmp	r6, #0
 800b2d4:	d00d      	beq.n	800b2f2 <sulp+0x2a>
 800b2d6:	236b      	movs	r3, #107	; 0x6b
 800b2d8:	006a      	lsls	r2, r5, #1
 800b2da:	0d52      	lsrs	r2, r2, #21
 800b2dc:	1a9b      	subs	r3, r3, r2
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	dd07      	ble.n	800b2f2 <sulp+0x2a>
 800b2e2:	2400      	movs	r4, #0
 800b2e4:	4a03      	ldr	r2, [pc, #12]	; (800b2f4 <sulp+0x2c>)
 800b2e6:	051b      	lsls	r3, r3, #20
 800b2e8:	189d      	adds	r5, r3, r2
 800b2ea:	002b      	movs	r3, r5
 800b2ec:	0022      	movs	r2, r4
 800b2ee:	f7f6 f9bd 	bl	800166c <__aeabi_dmul>
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
 800b2f4:	3ff00000 	.word	0x3ff00000

0800b2f8 <_strtod_l>:
 800b2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2fa:	b0a1      	sub	sp, #132	; 0x84
 800b2fc:	9219      	str	r2, [sp, #100]	; 0x64
 800b2fe:	2200      	movs	r2, #0
 800b300:	2600      	movs	r6, #0
 800b302:	2700      	movs	r7, #0
 800b304:	9004      	str	r0, [sp, #16]
 800b306:	9107      	str	r1, [sp, #28]
 800b308:	921c      	str	r2, [sp, #112]	; 0x70
 800b30a:	911b      	str	r1, [sp, #108]	; 0x6c
 800b30c:	780a      	ldrb	r2, [r1, #0]
 800b30e:	2a2b      	cmp	r2, #43	; 0x2b
 800b310:	d055      	beq.n	800b3be <_strtod_l+0xc6>
 800b312:	d841      	bhi.n	800b398 <_strtod_l+0xa0>
 800b314:	2a0d      	cmp	r2, #13
 800b316:	d83b      	bhi.n	800b390 <_strtod_l+0x98>
 800b318:	2a08      	cmp	r2, #8
 800b31a:	d83b      	bhi.n	800b394 <_strtod_l+0x9c>
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	d044      	beq.n	800b3aa <_strtod_l+0xb2>
 800b320:	2200      	movs	r2, #0
 800b322:	920f      	str	r2, [sp, #60]	; 0x3c
 800b324:	2100      	movs	r1, #0
 800b326:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b328:	9109      	str	r1, [sp, #36]	; 0x24
 800b32a:	782a      	ldrb	r2, [r5, #0]
 800b32c:	2a30      	cmp	r2, #48	; 0x30
 800b32e:	d000      	beq.n	800b332 <_strtod_l+0x3a>
 800b330:	e085      	b.n	800b43e <_strtod_l+0x146>
 800b332:	786a      	ldrb	r2, [r5, #1]
 800b334:	3120      	adds	r1, #32
 800b336:	438a      	bics	r2, r1
 800b338:	2a58      	cmp	r2, #88	; 0x58
 800b33a:	d000      	beq.n	800b33e <_strtod_l+0x46>
 800b33c:	e075      	b.n	800b42a <_strtod_l+0x132>
 800b33e:	9302      	str	r3, [sp, #8]
 800b340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b342:	4a97      	ldr	r2, [pc, #604]	; (800b5a0 <_strtod_l+0x2a8>)
 800b344:	9301      	str	r3, [sp, #4]
 800b346:	ab1c      	add	r3, sp, #112	; 0x70
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	9804      	ldr	r0, [sp, #16]
 800b34c:	ab1d      	add	r3, sp, #116	; 0x74
 800b34e:	a91b      	add	r1, sp, #108	; 0x6c
 800b350:	f001 fa92 	bl	800c878 <__gethex>
 800b354:	230f      	movs	r3, #15
 800b356:	0002      	movs	r2, r0
 800b358:	401a      	ands	r2, r3
 800b35a:	0004      	movs	r4, r0
 800b35c:	9205      	str	r2, [sp, #20]
 800b35e:	4218      	tst	r0, r3
 800b360:	d005      	beq.n	800b36e <_strtod_l+0x76>
 800b362:	2a06      	cmp	r2, #6
 800b364:	d12d      	bne.n	800b3c2 <_strtod_l+0xca>
 800b366:	1c6b      	adds	r3, r5, #1
 800b368:	931b      	str	r3, [sp, #108]	; 0x6c
 800b36a:	2300      	movs	r3, #0
 800b36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b36e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <_strtod_l+0x82>
 800b374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b376:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b378:	6013      	str	r3, [r2, #0]
 800b37a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d01b      	beq.n	800b3b8 <_strtod_l+0xc0>
 800b380:	2380      	movs	r3, #128	; 0x80
 800b382:	0032      	movs	r2, r6
 800b384:	061b      	lsls	r3, r3, #24
 800b386:	18fb      	adds	r3, r7, r3
 800b388:	0010      	movs	r0, r2
 800b38a:	0019      	movs	r1, r3
 800b38c:	b021      	add	sp, #132	; 0x84
 800b38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b390:	2a20      	cmp	r2, #32
 800b392:	d1c5      	bne.n	800b320 <_strtod_l+0x28>
 800b394:	3101      	adds	r1, #1
 800b396:	e7b8      	b.n	800b30a <_strtod_l+0x12>
 800b398:	2a2d      	cmp	r2, #45	; 0x2d
 800b39a:	d1c1      	bne.n	800b320 <_strtod_l+0x28>
 800b39c:	3a2c      	subs	r2, #44	; 0x2c
 800b39e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b3a0:	1c4a      	adds	r2, r1, #1
 800b3a2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3a4:	784a      	ldrb	r2, [r1, #1]
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	d1bc      	bne.n	800b324 <_strtod_l+0x2c>
 800b3aa:	9b07      	ldr	r3, [sp, #28]
 800b3ac:	931b      	str	r3, [sp, #108]	; 0x6c
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1dd      	bne.n	800b374 <_strtod_l+0x7c>
 800b3b8:	0032      	movs	r2, r6
 800b3ba:	003b      	movs	r3, r7
 800b3bc:	e7e4      	b.n	800b388 <_strtod_l+0x90>
 800b3be:	2200      	movs	r2, #0
 800b3c0:	e7ed      	b.n	800b39e <_strtod_l+0xa6>
 800b3c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b3c4:	2a00      	cmp	r2, #0
 800b3c6:	d007      	beq.n	800b3d8 <_strtod_l+0xe0>
 800b3c8:	2135      	movs	r1, #53	; 0x35
 800b3ca:	a81e      	add	r0, sp, #120	; 0x78
 800b3cc:	f002 f97f 	bl	800d6ce <__copybits>
 800b3d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3d2:	9804      	ldr	r0, [sp, #16]
 800b3d4:	f001 fd7c 	bl	800ced0 <_Bfree>
 800b3d8:	9805      	ldr	r0, [sp, #20]
 800b3da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3dc:	3801      	subs	r0, #1
 800b3de:	2804      	cmp	r0, #4
 800b3e0:	d806      	bhi.n	800b3f0 <_strtod_l+0xf8>
 800b3e2:	f7f4 fe97 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b3e6:	0312      	.short	0x0312
 800b3e8:	1e1c      	.short	0x1e1c
 800b3ea:	12          	.byte	0x12
 800b3eb:	00          	.byte	0x00
 800b3ec:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b3ee:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b3f0:	05e4      	lsls	r4, r4, #23
 800b3f2:	d502      	bpl.n	800b3fa <_strtod_l+0x102>
 800b3f4:	2380      	movs	r3, #128	; 0x80
 800b3f6:	061b      	lsls	r3, r3, #24
 800b3f8:	431f      	orrs	r7, r3
 800b3fa:	4b6a      	ldr	r3, [pc, #424]	; (800b5a4 <_strtod_l+0x2ac>)
 800b3fc:	423b      	tst	r3, r7
 800b3fe:	d1b6      	bne.n	800b36e <_strtod_l+0x76>
 800b400:	f001 f86a 	bl	800c4d8 <__errno>
 800b404:	2322      	movs	r3, #34	; 0x22
 800b406:	6003      	str	r3, [r0, #0]
 800b408:	e7b1      	b.n	800b36e <_strtod_l+0x76>
 800b40a:	4967      	ldr	r1, [pc, #412]	; (800b5a8 <_strtod_l+0x2b0>)
 800b40c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b40e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b410:	400a      	ands	r2, r1
 800b412:	4966      	ldr	r1, [pc, #408]	; (800b5ac <_strtod_l+0x2b4>)
 800b414:	185b      	adds	r3, r3, r1
 800b416:	051b      	lsls	r3, r3, #20
 800b418:	431a      	orrs	r2, r3
 800b41a:	0017      	movs	r7, r2
 800b41c:	e7e8      	b.n	800b3f0 <_strtod_l+0xf8>
 800b41e:	4f61      	ldr	r7, [pc, #388]	; (800b5a4 <_strtod_l+0x2ac>)
 800b420:	e7e6      	b.n	800b3f0 <_strtod_l+0xf8>
 800b422:	2601      	movs	r6, #1
 800b424:	4f62      	ldr	r7, [pc, #392]	; (800b5b0 <_strtod_l+0x2b8>)
 800b426:	4276      	negs	r6, r6
 800b428:	e7e2      	b.n	800b3f0 <_strtod_l+0xf8>
 800b42a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b430:	785b      	ldrb	r3, [r3, #1]
 800b432:	2b30      	cmp	r3, #48	; 0x30
 800b434:	d0f9      	beq.n	800b42a <_strtod_l+0x132>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d099      	beq.n	800b36e <_strtod_l+0x76>
 800b43a:	2301      	movs	r3, #1
 800b43c:	9309      	str	r3, [sp, #36]	; 0x24
 800b43e:	2500      	movs	r5, #0
 800b440:	220a      	movs	r2, #10
 800b442:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b444:	950d      	str	r5, [sp, #52]	; 0x34
 800b446:	9310      	str	r3, [sp, #64]	; 0x40
 800b448:	9508      	str	r5, [sp, #32]
 800b44a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b44c:	7804      	ldrb	r4, [r0, #0]
 800b44e:	0023      	movs	r3, r4
 800b450:	3b30      	subs	r3, #48	; 0x30
 800b452:	b2d9      	uxtb	r1, r3
 800b454:	2909      	cmp	r1, #9
 800b456:	d927      	bls.n	800b4a8 <_strtod_l+0x1b0>
 800b458:	2201      	movs	r2, #1
 800b45a:	4956      	ldr	r1, [pc, #344]	; (800b5b4 <_strtod_l+0x2bc>)
 800b45c:	f000 ff98 	bl	800c390 <strncmp>
 800b460:	2800      	cmp	r0, #0
 800b462:	d031      	beq.n	800b4c8 <_strtod_l+0x1d0>
 800b464:	2000      	movs	r0, #0
 800b466:	0023      	movs	r3, r4
 800b468:	4684      	mov	ip, r0
 800b46a:	9a08      	ldr	r2, [sp, #32]
 800b46c:	900c      	str	r0, [sp, #48]	; 0x30
 800b46e:	9205      	str	r2, [sp, #20]
 800b470:	2220      	movs	r2, #32
 800b472:	0019      	movs	r1, r3
 800b474:	4391      	bics	r1, r2
 800b476:	000a      	movs	r2, r1
 800b478:	2100      	movs	r1, #0
 800b47a:	9106      	str	r1, [sp, #24]
 800b47c:	2a45      	cmp	r2, #69	; 0x45
 800b47e:	d000      	beq.n	800b482 <_strtod_l+0x18a>
 800b480:	e0c2      	b.n	800b608 <_strtod_l+0x310>
 800b482:	9b05      	ldr	r3, [sp, #20]
 800b484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b486:	4303      	orrs	r3, r0
 800b488:	4313      	orrs	r3, r2
 800b48a:	428b      	cmp	r3, r1
 800b48c:	d08d      	beq.n	800b3aa <_strtod_l+0xb2>
 800b48e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b490:	9307      	str	r3, [sp, #28]
 800b492:	3301      	adds	r3, #1
 800b494:	931b      	str	r3, [sp, #108]	; 0x6c
 800b496:	9b07      	ldr	r3, [sp, #28]
 800b498:	785b      	ldrb	r3, [r3, #1]
 800b49a:	2b2b      	cmp	r3, #43	; 0x2b
 800b49c:	d071      	beq.n	800b582 <_strtod_l+0x28a>
 800b49e:	000c      	movs	r4, r1
 800b4a0:	2b2d      	cmp	r3, #45	; 0x2d
 800b4a2:	d174      	bne.n	800b58e <_strtod_l+0x296>
 800b4a4:	2401      	movs	r4, #1
 800b4a6:	e06d      	b.n	800b584 <_strtod_l+0x28c>
 800b4a8:	9908      	ldr	r1, [sp, #32]
 800b4aa:	2908      	cmp	r1, #8
 800b4ac:	dc09      	bgt.n	800b4c2 <_strtod_l+0x1ca>
 800b4ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b4b0:	4351      	muls	r1, r2
 800b4b2:	185b      	adds	r3, r3, r1
 800b4b4:	930d      	str	r3, [sp, #52]	; 0x34
 800b4b6:	9b08      	ldr	r3, [sp, #32]
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	9308      	str	r3, [sp, #32]
 800b4be:	901b      	str	r0, [sp, #108]	; 0x6c
 800b4c0:	e7c3      	b.n	800b44a <_strtod_l+0x152>
 800b4c2:	4355      	muls	r5, r2
 800b4c4:	195d      	adds	r5, r3, r5
 800b4c6:	e7f6      	b.n	800b4b6 <_strtod_l+0x1be>
 800b4c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4ce:	9a08      	ldr	r2, [sp, #32]
 800b4d0:	785b      	ldrb	r3, [r3, #1]
 800b4d2:	2a00      	cmp	r2, #0
 800b4d4:	d03a      	beq.n	800b54c <_strtod_l+0x254>
 800b4d6:	900c      	str	r0, [sp, #48]	; 0x30
 800b4d8:	9205      	str	r2, [sp, #20]
 800b4da:	001a      	movs	r2, r3
 800b4dc:	3a30      	subs	r2, #48	; 0x30
 800b4de:	2a09      	cmp	r2, #9
 800b4e0:	d912      	bls.n	800b508 <_strtod_l+0x210>
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	4694      	mov	ip, r2
 800b4e6:	e7c3      	b.n	800b470 <_strtod_l+0x178>
 800b4e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	1c5a      	adds	r2, r3, #1
 800b4ee:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4f0:	785b      	ldrb	r3, [r3, #1]
 800b4f2:	2b30      	cmp	r3, #48	; 0x30
 800b4f4:	d0f8      	beq.n	800b4e8 <_strtod_l+0x1f0>
 800b4f6:	001a      	movs	r2, r3
 800b4f8:	3a31      	subs	r2, #49	; 0x31
 800b4fa:	2a08      	cmp	r2, #8
 800b4fc:	d83c      	bhi.n	800b578 <_strtod_l+0x280>
 800b4fe:	900c      	str	r0, [sp, #48]	; 0x30
 800b500:	2000      	movs	r0, #0
 800b502:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b504:	9005      	str	r0, [sp, #20]
 800b506:	9210      	str	r2, [sp, #64]	; 0x40
 800b508:	001a      	movs	r2, r3
 800b50a:	1c41      	adds	r1, r0, #1
 800b50c:	3a30      	subs	r2, #48	; 0x30
 800b50e:	2b30      	cmp	r3, #48	; 0x30
 800b510:	d016      	beq.n	800b540 <_strtod_l+0x248>
 800b512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b514:	185b      	adds	r3, r3, r1
 800b516:	930c      	str	r3, [sp, #48]	; 0x30
 800b518:	9b05      	ldr	r3, [sp, #20]
 800b51a:	210a      	movs	r1, #10
 800b51c:	469c      	mov	ip, r3
 800b51e:	4484      	add	ip, r0
 800b520:	4563      	cmp	r3, ip
 800b522:	d115      	bne.n	800b550 <_strtod_l+0x258>
 800b524:	9905      	ldr	r1, [sp, #20]
 800b526:	9b05      	ldr	r3, [sp, #20]
 800b528:	3101      	adds	r1, #1
 800b52a:	1809      	adds	r1, r1, r0
 800b52c:	181b      	adds	r3, r3, r0
 800b52e:	9105      	str	r1, [sp, #20]
 800b530:	2b08      	cmp	r3, #8
 800b532:	dc19      	bgt.n	800b568 <_strtod_l+0x270>
 800b534:	230a      	movs	r3, #10
 800b536:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b538:	434b      	muls	r3, r1
 800b53a:	2100      	movs	r1, #0
 800b53c:	18d3      	adds	r3, r2, r3
 800b53e:	930d      	str	r3, [sp, #52]	; 0x34
 800b540:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b542:	0008      	movs	r0, r1
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	921b      	str	r2, [sp, #108]	; 0x6c
 800b548:	785b      	ldrb	r3, [r3, #1]
 800b54a:	e7c6      	b.n	800b4da <_strtod_l+0x1e2>
 800b54c:	9808      	ldr	r0, [sp, #32]
 800b54e:	e7d0      	b.n	800b4f2 <_strtod_l+0x1fa>
 800b550:	1c5c      	adds	r4, r3, #1
 800b552:	2b08      	cmp	r3, #8
 800b554:	dc04      	bgt.n	800b560 <_strtod_l+0x268>
 800b556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b558:	434b      	muls	r3, r1
 800b55a:	930d      	str	r3, [sp, #52]	; 0x34
 800b55c:	0023      	movs	r3, r4
 800b55e:	e7df      	b.n	800b520 <_strtod_l+0x228>
 800b560:	2c10      	cmp	r4, #16
 800b562:	dcfb      	bgt.n	800b55c <_strtod_l+0x264>
 800b564:	434d      	muls	r5, r1
 800b566:	e7f9      	b.n	800b55c <_strtod_l+0x264>
 800b568:	9b05      	ldr	r3, [sp, #20]
 800b56a:	2100      	movs	r1, #0
 800b56c:	2b10      	cmp	r3, #16
 800b56e:	dce7      	bgt.n	800b540 <_strtod_l+0x248>
 800b570:	230a      	movs	r3, #10
 800b572:	435d      	muls	r5, r3
 800b574:	1955      	adds	r5, r2, r5
 800b576:	e7e3      	b.n	800b540 <_strtod_l+0x248>
 800b578:	2200      	movs	r2, #0
 800b57a:	920c      	str	r2, [sp, #48]	; 0x30
 800b57c:	9205      	str	r2, [sp, #20]
 800b57e:	3201      	adds	r2, #1
 800b580:	e7b0      	b.n	800b4e4 <_strtod_l+0x1ec>
 800b582:	2400      	movs	r4, #0
 800b584:	9b07      	ldr	r3, [sp, #28]
 800b586:	3302      	adds	r3, #2
 800b588:	931b      	str	r3, [sp, #108]	; 0x6c
 800b58a:	9b07      	ldr	r3, [sp, #28]
 800b58c:	789b      	ldrb	r3, [r3, #2]
 800b58e:	001a      	movs	r2, r3
 800b590:	3a30      	subs	r2, #48	; 0x30
 800b592:	2a09      	cmp	r2, #9
 800b594:	d914      	bls.n	800b5c0 <_strtod_l+0x2c8>
 800b596:	9a07      	ldr	r2, [sp, #28]
 800b598:	921b      	str	r2, [sp, #108]	; 0x6c
 800b59a:	2200      	movs	r2, #0
 800b59c:	e033      	b.n	800b606 <_strtod_l+0x30e>
 800b59e:	46c0      	nop			; (mov r8, r8)
 800b5a0:	08014820 	.word	0x08014820
 800b5a4:	7ff00000 	.word	0x7ff00000
 800b5a8:	ffefffff 	.word	0xffefffff
 800b5ac:	00000433 	.word	0x00000433
 800b5b0:	7fffffff 	.word	0x7fffffff
 800b5b4:	0801481c 	.word	0x0801481c
 800b5b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	921b      	str	r2, [sp, #108]	; 0x6c
 800b5be:	785b      	ldrb	r3, [r3, #1]
 800b5c0:	2b30      	cmp	r3, #48	; 0x30
 800b5c2:	d0f9      	beq.n	800b5b8 <_strtod_l+0x2c0>
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	9206      	str	r2, [sp, #24]
 800b5c8:	001a      	movs	r2, r3
 800b5ca:	3a31      	subs	r2, #49	; 0x31
 800b5cc:	2a08      	cmp	r2, #8
 800b5ce:	d81b      	bhi.n	800b608 <_strtod_l+0x310>
 800b5d0:	3b30      	subs	r3, #48	; 0x30
 800b5d2:	930e      	str	r3, [sp, #56]	; 0x38
 800b5d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5d6:	9306      	str	r3, [sp, #24]
 800b5d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5da:	1c59      	adds	r1, r3, #1
 800b5dc:	911b      	str	r1, [sp, #108]	; 0x6c
 800b5de:	785b      	ldrb	r3, [r3, #1]
 800b5e0:	001a      	movs	r2, r3
 800b5e2:	3a30      	subs	r2, #48	; 0x30
 800b5e4:	2a09      	cmp	r2, #9
 800b5e6:	d93a      	bls.n	800b65e <_strtod_l+0x366>
 800b5e8:	9a06      	ldr	r2, [sp, #24]
 800b5ea:	1a8a      	subs	r2, r1, r2
 800b5ec:	49b2      	ldr	r1, [pc, #712]	; (800b8b8 <_strtod_l+0x5c0>)
 800b5ee:	9106      	str	r1, [sp, #24]
 800b5f0:	2a08      	cmp	r2, #8
 800b5f2:	dc04      	bgt.n	800b5fe <_strtod_l+0x306>
 800b5f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5f6:	9206      	str	r2, [sp, #24]
 800b5f8:	428a      	cmp	r2, r1
 800b5fa:	dd00      	ble.n	800b5fe <_strtod_l+0x306>
 800b5fc:	9106      	str	r1, [sp, #24]
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	d002      	beq.n	800b608 <_strtod_l+0x310>
 800b602:	9a06      	ldr	r2, [sp, #24]
 800b604:	4252      	negs	r2, r2
 800b606:	9206      	str	r2, [sp, #24]
 800b608:	9a05      	ldr	r2, [sp, #20]
 800b60a:	2a00      	cmp	r2, #0
 800b60c:	d14d      	bne.n	800b6aa <_strtod_l+0x3b2>
 800b60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b610:	4310      	orrs	r0, r2
 800b612:	d000      	beq.n	800b616 <_strtod_l+0x31e>
 800b614:	e6ab      	b.n	800b36e <_strtod_l+0x76>
 800b616:	4662      	mov	r2, ip
 800b618:	2a00      	cmp	r2, #0
 800b61a:	d000      	beq.n	800b61e <_strtod_l+0x326>
 800b61c:	e6c5      	b.n	800b3aa <_strtod_l+0xb2>
 800b61e:	2b69      	cmp	r3, #105	; 0x69
 800b620:	d027      	beq.n	800b672 <_strtod_l+0x37a>
 800b622:	dc23      	bgt.n	800b66c <_strtod_l+0x374>
 800b624:	2b49      	cmp	r3, #73	; 0x49
 800b626:	d024      	beq.n	800b672 <_strtod_l+0x37a>
 800b628:	2b4e      	cmp	r3, #78	; 0x4e
 800b62a:	d000      	beq.n	800b62e <_strtod_l+0x336>
 800b62c:	e6bd      	b.n	800b3aa <_strtod_l+0xb2>
 800b62e:	49a3      	ldr	r1, [pc, #652]	; (800b8bc <_strtod_l+0x5c4>)
 800b630:	a81b      	add	r0, sp, #108	; 0x6c
 800b632:	f001 fb57 	bl	800cce4 <__match>
 800b636:	2800      	cmp	r0, #0
 800b638:	d100      	bne.n	800b63c <_strtod_l+0x344>
 800b63a:	e6b6      	b.n	800b3aa <_strtod_l+0xb2>
 800b63c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b28      	cmp	r3, #40	; 0x28
 800b642:	d12c      	bne.n	800b69e <_strtod_l+0x3a6>
 800b644:	499e      	ldr	r1, [pc, #632]	; (800b8c0 <_strtod_l+0x5c8>)
 800b646:	aa1e      	add	r2, sp, #120	; 0x78
 800b648:	a81b      	add	r0, sp, #108	; 0x6c
 800b64a:	f001 fb5f 	bl	800cd0c <__hexnan>
 800b64e:	2805      	cmp	r0, #5
 800b650:	d125      	bne.n	800b69e <_strtod_l+0x3a6>
 800b652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b654:	4a9b      	ldr	r2, [pc, #620]	; (800b8c4 <_strtod_l+0x5cc>)
 800b656:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b658:	431a      	orrs	r2, r3
 800b65a:	0017      	movs	r7, r2
 800b65c:	e687      	b.n	800b36e <_strtod_l+0x76>
 800b65e:	220a      	movs	r2, #10
 800b660:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b662:	434a      	muls	r2, r1
 800b664:	18d2      	adds	r2, r2, r3
 800b666:	3a30      	subs	r2, #48	; 0x30
 800b668:	920e      	str	r2, [sp, #56]	; 0x38
 800b66a:	e7b5      	b.n	800b5d8 <_strtod_l+0x2e0>
 800b66c:	2b6e      	cmp	r3, #110	; 0x6e
 800b66e:	d0de      	beq.n	800b62e <_strtod_l+0x336>
 800b670:	e69b      	b.n	800b3aa <_strtod_l+0xb2>
 800b672:	4995      	ldr	r1, [pc, #596]	; (800b8c8 <_strtod_l+0x5d0>)
 800b674:	a81b      	add	r0, sp, #108	; 0x6c
 800b676:	f001 fb35 	bl	800cce4 <__match>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d100      	bne.n	800b680 <_strtod_l+0x388>
 800b67e:	e694      	b.n	800b3aa <_strtod_l+0xb2>
 800b680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b682:	4992      	ldr	r1, [pc, #584]	; (800b8cc <_strtod_l+0x5d4>)
 800b684:	3b01      	subs	r3, #1
 800b686:	a81b      	add	r0, sp, #108	; 0x6c
 800b688:	931b      	str	r3, [sp, #108]	; 0x6c
 800b68a:	f001 fb2b 	bl	800cce4 <__match>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d102      	bne.n	800b698 <_strtod_l+0x3a0>
 800b692:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b694:	3301      	adds	r3, #1
 800b696:	931b      	str	r3, [sp, #108]	; 0x6c
 800b698:	2600      	movs	r6, #0
 800b69a:	4f8a      	ldr	r7, [pc, #552]	; (800b8c4 <_strtod_l+0x5cc>)
 800b69c:	e667      	b.n	800b36e <_strtod_l+0x76>
 800b69e:	488c      	ldr	r0, [pc, #560]	; (800b8d0 <_strtod_l+0x5d8>)
 800b6a0:	f000 ff5c 	bl	800c55c <nan>
 800b6a4:	0006      	movs	r6, r0
 800b6a6:	000f      	movs	r7, r1
 800b6a8:	e661      	b.n	800b36e <_strtod_l+0x76>
 800b6aa:	9b06      	ldr	r3, [sp, #24]
 800b6ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6ae:	1a9b      	subs	r3, r3, r2
 800b6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b2:	9b08      	ldr	r3, [sp, #32]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <_strtod_l+0x3c4>
 800b6b8:	9b05      	ldr	r3, [sp, #20]
 800b6ba:	9308      	str	r3, [sp, #32]
 800b6bc:	9c05      	ldr	r4, [sp, #20]
 800b6be:	2c10      	cmp	r4, #16
 800b6c0:	dd00      	ble.n	800b6c4 <_strtod_l+0x3cc>
 800b6c2:	2410      	movs	r4, #16
 800b6c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b6c6:	f7f6 fe99 	bl	80023fc <__aeabi_ui2d>
 800b6ca:	9b05      	ldr	r3, [sp, #20]
 800b6cc:	0006      	movs	r6, r0
 800b6ce:	000f      	movs	r7, r1
 800b6d0:	2b09      	cmp	r3, #9
 800b6d2:	dd15      	ble.n	800b700 <_strtod_l+0x408>
 800b6d4:	0022      	movs	r2, r4
 800b6d6:	4b7f      	ldr	r3, [pc, #508]	; (800b8d4 <_strtod_l+0x5dc>)
 800b6d8:	3a09      	subs	r2, #9
 800b6da:	00d2      	lsls	r2, r2, #3
 800b6dc:	189b      	adds	r3, r3, r2
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	f7f5 ffc3 	bl	800166c <__aeabi_dmul>
 800b6e6:	0006      	movs	r6, r0
 800b6e8:	0028      	movs	r0, r5
 800b6ea:	000f      	movs	r7, r1
 800b6ec:	f7f6 fe86 	bl	80023fc <__aeabi_ui2d>
 800b6f0:	0002      	movs	r2, r0
 800b6f2:	000b      	movs	r3, r1
 800b6f4:	0030      	movs	r0, r6
 800b6f6:	0039      	movs	r1, r7
 800b6f8:	f7f5 f85e 	bl	80007b8 <__aeabi_dadd>
 800b6fc:	0006      	movs	r6, r0
 800b6fe:	000f      	movs	r7, r1
 800b700:	9b05      	ldr	r3, [sp, #20]
 800b702:	2b0f      	cmp	r3, #15
 800b704:	dc39      	bgt.n	800b77a <_strtod_l+0x482>
 800b706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d100      	bne.n	800b70e <_strtod_l+0x416>
 800b70c:	e62f      	b.n	800b36e <_strtod_l+0x76>
 800b70e:	dd24      	ble.n	800b75a <_strtod_l+0x462>
 800b710:	2b16      	cmp	r3, #22
 800b712:	dc09      	bgt.n	800b728 <_strtod_l+0x430>
 800b714:	496f      	ldr	r1, [pc, #444]	; (800b8d4 <_strtod_l+0x5dc>)
 800b716:	00db      	lsls	r3, r3, #3
 800b718:	18c9      	adds	r1, r1, r3
 800b71a:	0032      	movs	r2, r6
 800b71c:	6808      	ldr	r0, [r1, #0]
 800b71e:	6849      	ldr	r1, [r1, #4]
 800b720:	003b      	movs	r3, r7
 800b722:	f7f5 ffa3 	bl	800166c <__aeabi_dmul>
 800b726:	e7bd      	b.n	800b6a4 <_strtod_l+0x3ac>
 800b728:	2325      	movs	r3, #37	; 0x25
 800b72a:	9a05      	ldr	r2, [sp, #20]
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b730:	4293      	cmp	r3, r2
 800b732:	db22      	blt.n	800b77a <_strtod_l+0x482>
 800b734:	240f      	movs	r4, #15
 800b736:	9b05      	ldr	r3, [sp, #20]
 800b738:	4d66      	ldr	r5, [pc, #408]	; (800b8d4 <_strtod_l+0x5dc>)
 800b73a:	1ae4      	subs	r4, r4, r3
 800b73c:	00e1      	lsls	r1, r4, #3
 800b73e:	1869      	adds	r1, r5, r1
 800b740:	0032      	movs	r2, r6
 800b742:	6808      	ldr	r0, [r1, #0]
 800b744:	6849      	ldr	r1, [r1, #4]
 800b746:	003b      	movs	r3, r7
 800b748:	f7f5 ff90 	bl	800166c <__aeabi_dmul>
 800b74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74e:	1b1c      	subs	r4, r3, r4
 800b750:	00e4      	lsls	r4, r4, #3
 800b752:	192d      	adds	r5, r5, r4
 800b754:	682a      	ldr	r2, [r5, #0]
 800b756:	686b      	ldr	r3, [r5, #4]
 800b758:	e7e3      	b.n	800b722 <_strtod_l+0x42a>
 800b75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b75c:	3316      	adds	r3, #22
 800b75e:	db0c      	blt.n	800b77a <_strtod_l+0x482>
 800b760:	9906      	ldr	r1, [sp, #24]
 800b762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b764:	4b5b      	ldr	r3, [pc, #364]	; (800b8d4 <_strtod_l+0x5dc>)
 800b766:	1a52      	subs	r2, r2, r1
 800b768:	00d2      	lsls	r2, r2, #3
 800b76a:	189b      	adds	r3, r3, r2
 800b76c:	0030      	movs	r0, r6
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	0039      	movs	r1, r7
 800b774:	f7f5 fb80 	bl	8000e78 <__aeabi_ddiv>
 800b778:	e794      	b.n	800b6a4 <_strtod_l+0x3ac>
 800b77a:	9b05      	ldr	r3, [sp, #20]
 800b77c:	1b1c      	subs	r4, r3, r4
 800b77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b780:	18e4      	adds	r4, r4, r3
 800b782:	2c00      	cmp	r4, #0
 800b784:	dd72      	ble.n	800b86c <_strtod_l+0x574>
 800b786:	220f      	movs	r2, #15
 800b788:	0023      	movs	r3, r4
 800b78a:	4013      	ands	r3, r2
 800b78c:	4214      	tst	r4, r2
 800b78e:	d00a      	beq.n	800b7a6 <_strtod_l+0x4ae>
 800b790:	4950      	ldr	r1, [pc, #320]	; (800b8d4 <_strtod_l+0x5dc>)
 800b792:	00db      	lsls	r3, r3, #3
 800b794:	18c9      	adds	r1, r1, r3
 800b796:	0032      	movs	r2, r6
 800b798:	6808      	ldr	r0, [r1, #0]
 800b79a:	6849      	ldr	r1, [r1, #4]
 800b79c:	003b      	movs	r3, r7
 800b79e:	f7f5 ff65 	bl	800166c <__aeabi_dmul>
 800b7a2:	0006      	movs	r6, r0
 800b7a4:	000f      	movs	r7, r1
 800b7a6:	230f      	movs	r3, #15
 800b7a8:	439c      	bics	r4, r3
 800b7aa:	d04a      	beq.n	800b842 <_strtod_l+0x54a>
 800b7ac:	3326      	adds	r3, #38	; 0x26
 800b7ae:	33ff      	adds	r3, #255	; 0xff
 800b7b0:	429c      	cmp	r4, r3
 800b7b2:	dd22      	ble.n	800b7fa <_strtod_l+0x502>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	9305      	str	r3, [sp, #20]
 800b7b8:	9306      	str	r3, [sp, #24]
 800b7ba:	930d      	str	r3, [sp, #52]	; 0x34
 800b7bc:	9308      	str	r3, [sp, #32]
 800b7be:	2322      	movs	r3, #34	; 0x22
 800b7c0:	2600      	movs	r6, #0
 800b7c2:	9a04      	ldr	r2, [sp, #16]
 800b7c4:	4f3f      	ldr	r7, [pc, #252]	; (800b8c4 <_strtod_l+0x5cc>)
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ca:	42b3      	cmp	r3, r6
 800b7cc:	d100      	bne.n	800b7d0 <_strtod_l+0x4d8>
 800b7ce:	e5ce      	b.n	800b36e <_strtod_l+0x76>
 800b7d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7d2:	9804      	ldr	r0, [sp, #16]
 800b7d4:	f001 fb7c 	bl	800ced0 <_Bfree>
 800b7d8:	9908      	ldr	r1, [sp, #32]
 800b7da:	9804      	ldr	r0, [sp, #16]
 800b7dc:	f001 fb78 	bl	800ced0 <_Bfree>
 800b7e0:	9906      	ldr	r1, [sp, #24]
 800b7e2:	9804      	ldr	r0, [sp, #16]
 800b7e4:	f001 fb74 	bl	800ced0 <_Bfree>
 800b7e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b7ea:	9804      	ldr	r0, [sp, #16]
 800b7ec:	f001 fb70 	bl	800ced0 <_Bfree>
 800b7f0:	9905      	ldr	r1, [sp, #20]
 800b7f2:	9804      	ldr	r0, [sp, #16]
 800b7f4:	f001 fb6c 	bl	800ced0 <_Bfree>
 800b7f8:	e5b9      	b.n	800b36e <_strtod_l+0x76>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	0030      	movs	r0, r6
 800b7fe:	0039      	movs	r1, r7
 800b800:	4d35      	ldr	r5, [pc, #212]	; (800b8d8 <_strtod_l+0x5e0>)
 800b802:	1124      	asrs	r4, r4, #4
 800b804:	9307      	str	r3, [sp, #28]
 800b806:	2c01      	cmp	r4, #1
 800b808:	dc1e      	bgt.n	800b848 <_strtod_l+0x550>
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <_strtod_l+0x51a>
 800b80e:	0006      	movs	r6, r0
 800b810:	000f      	movs	r7, r1
 800b812:	4b32      	ldr	r3, [pc, #200]	; (800b8dc <_strtod_l+0x5e4>)
 800b814:	9a07      	ldr	r2, [sp, #28]
 800b816:	18ff      	adds	r7, r7, r3
 800b818:	4b2f      	ldr	r3, [pc, #188]	; (800b8d8 <_strtod_l+0x5e0>)
 800b81a:	00d2      	lsls	r2, r2, #3
 800b81c:	189d      	adds	r5, r3, r2
 800b81e:	6828      	ldr	r0, [r5, #0]
 800b820:	6869      	ldr	r1, [r5, #4]
 800b822:	0032      	movs	r2, r6
 800b824:	003b      	movs	r3, r7
 800b826:	f7f5 ff21 	bl	800166c <__aeabi_dmul>
 800b82a:	4b26      	ldr	r3, [pc, #152]	; (800b8c4 <_strtod_l+0x5cc>)
 800b82c:	4a2c      	ldr	r2, [pc, #176]	; (800b8e0 <_strtod_l+0x5e8>)
 800b82e:	0006      	movs	r6, r0
 800b830:	400b      	ands	r3, r1
 800b832:	4293      	cmp	r3, r2
 800b834:	d8be      	bhi.n	800b7b4 <_strtod_l+0x4bc>
 800b836:	4a2b      	ldr	r2, [pc, #172]	; (800b8e4 <_strtod_l+0x5ec>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d913      	bls.n	800b864 <_strtod_l+0x56c>
 800b83c:	2601      	movs	r6, #1
 800b83e:	4f2a      	ldr	r7, [pc, #168]	; (800b8e8 <_strtod_l+0x5f0>)
 800b840:	4276      	negs	r6, r6
 800b842:	2300      	movs	r3, #0
 800b844:	9307      	str	r3, [sp, #28]
 800b846:	e088      	b.n	800b95a <_strtod_l+0x662>
 800b848:	2201      	movs	r2, #1
 800b84a:	4214      	tst	r4, r2
 800b84c:	d004      	beq.n	800b858 <_strtod_l+0x560>
 800b84e:	682a      	ldr	r2, [r5, #0]
 800b850:	686b      	ldr	r3, [r5, #4]
 800b852:	f7f5 ff0b 	bl	800166c <__aeabi_dmul>
 800b856:	2301      	movs	r3, #1
 800b858:	9a07      	ldr	r2, [sp, #28]
 800b85a:	1064      	asrs	r4, r4, #1
 800b85c:	3201      	adds	r2, #1
 800b85e:	9207      	str	r2, [sp, #28]
 800b860:	3508      	adds	r5, #8
 800b862:	e7d0      	b.n	800b806 <_strtod_l+0x50e>
 800b864:	23d4      	movs	r3, #212	; 0xd4
 800b866:	049b      	lsls	r3, r3, #18
 800b868:	18cf      	adds	r7, r1, r3
 800b86a:	e7ea      	b.n	800b842 <_strtod_l+0x54a>
 800b86c:	2c00      	cmp	r4, #0
 800b86e:	d0e8      	beq.n	800b842 <_strtod_l+0x54a>
 800b870:	4264      	negs	r4, r4
 800b872:	230f      	movs	r3, #15
 800b874:	0022      	movs	r2, r4
 800b876:	401a      	ands	r2, r3
 800b878:	421c      	tst	r4, r3
 800b87a:	d00a      	beq.n	800b892 <_strtod_l+0x59a>
 800b87c:	4b15      	ldr	r3, [pc, #84]	; (800b8d4 <_strtod_l+0x5dc>)
 800b87e:	00d2      	lsls	r2, r2, #3
 800b880:	189b      	adds	r3, r3, r2
 800b882:	0030      	movs	r0, r6
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	0039      	movs	r1, r7
 800b88a:	f7f5 faf5 	bl	8000e78 <__aeabi_ddiv>
 800b88e:	0006      	movs	r6, r0
 800b890:	000f      	movs	r7, r1
 800b892:	1124      	asrs	r4, r4, #4
 800b894:	d0d5      	beq.n	800b842 <_strtod_l+0x54a>
 800b896:	2c1f      	cmp	r4, #31
 800b898:	dd28      	ble.n	800b8ec <_strtod_l+0x5f4>
 800b89a:	2300      	movs	r3, #0
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	9306      	str	r3, [sp, #24]
 800b8a0:	930d      	str	r3, [sp, #52]	; 0x34
 800b8a2:	9308      	str	r3, [sp, #32]
 800b8a4:	2322      	movs	r3, #34	; 0x22
 800b8a6:	9a04      	ldr	r2, [sp, #16]
 800b8a8:	2600      	movs	r6, #0
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ae:	2700      	movs	r7, #0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d18d      	bne.n	800b7d0 <_strtod_l+0x4d8>
 800b8b4:	e55b      	b.n	800b36e <_strtod_l+0x76>
 800b8b6:	46c0      	nop			; (mov r8, r8)
 800b8b8:	00004e1f 	.word	0x00004e1f
 800b8bc:	08014b51 	.word	0x08014b51
 800b8c0:	08014834 	.word	0x08014834
 800b8c4:	7ff00000 	.word	0x7ff00000
 800b8c8:	08014b49 	.word	0x08014b49
 800b8cc:	08014bff 	.word	0x08014bff
 800b8d0:	08014bfb 	.word	0x08014bfb
 800b8d4:	08014a70 	.word	0x08014a70
 800b8d8:	08014a48 	.word	0x08014a48
 800b8dc:	fcb00000 	.word	0xfcb00000
 800b8e0:	7ca00000 	.word	0x7ca00000
 800b8e4:	7c900000 	.word	0x7c900000
 800b8e8:	7fefffff 	.word	0x7fefffff
 800b8ec:	2310      	movs	r3, #16
 800b8ee:	0022      	movs	r2, r4
 800b8f0:	401a      	ands	r2, r3
 800b8f2:	9207      	str	r2, [sp, #28]
 800b8f4:	421c      	tst	r4, r3
 800b8f6:	d001      	beq.n	800b8fc <_strtod_l+0x604>
 800b8f8:	335a      	adds	r3, #90	; 0x5a
 800b8fa:	9307      	str	r3, [sp, #28]
 800b8fc:	0030      	movs	r0, r6
 800b8fe:	0039      	movs	r1, r7
 800b900:	2300      	movs	r3, #0
 800b902:	4dc4      	ldr	r5, [pc, #784]	; (800bc14 <_strtod_l+0x91c>)
 800b904:	2201      	movs	r2, #1
 800b906:	4214      	tst	r4, r2
 800b908:	d004      	beq.n	800b914 <_strtod_l+0x61c>
 800b90a:	682a      	ldr	r2, [r5, #0]
 800b90c:	686b      	ldr	r3, [r5, #4]
 800b90e:	f7f5 fead 	bl	800166c <__aeabi_dmul>
 800b912:	2301      	movs	r3, #1
 800b914:	1064      	asrs	r4, r4, #1
 800b916:	3508      	adds	r5, #8
 800b918:	2c00      	cmp	r4, #0
 800b91a:	d1f3      	bne.n	800b904 <_strtod_l+0x60c>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <_strtod_l+0x62c>
 800b920:	0006      	movs	r6, r0
 800b922:	000f      	movs	r7, r1
 800b924:	9b07      	ldr	r3, [sp, #28]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00f      	beq.n	800b94a <_strtod_l+0x652>
 800b92a:	236b      	movs	r3, #107	; 0x6b
 800b92c:	007a      	lsls	r2, r7, #1
 800b92e:	0d52      	lsrs	r2, r2, #21
 800b930:	0039      	movs	r1, r7
 800b932:	1a9b      	subs	r3, r3, r2
 800b934:	2b00      	cmp	r3, #0
 800b936:	dd08      	ble.n	800b94a <_strtod_l+0x652>
 800b938:	2b1f      	cmp	r3, #31
 800b93a:	dc00      	bgt.n	800b93e <_strtod_l+0x646>
 800b93c:	e121      	b.n	800bb82 <_strtod_l+0x88a>
 800b93e:	2600      	movs	r6, #0
 800b940:	2b34      	cmp	r3, #52	; 0x34
 800b942:	dc00      	bgt.n	800b946 <_strtod_l+0x64e>
 800b944:	e116      	b.n	800bb74 <_strtod_l+0x87c>
 800b946:	27dc      	movs	r7, #220	; 0xdc
 800b948:	04bf      	lsls	r7, r7, #18
 800b94a:	2200      	movs	r2, #0
 800b94c:	2300      	movs	r3, #0
 800b94e:	0030      	movs	r0, r6
 800b950:	0039      	movs	r1, r7
 800b952:	f7f4 fd79 	bl	8000448 <__aeabi_dcmpeq>
 800b956:	2800      	cmp	r0, #0
 800b958:	d19f      	bne.n	800b89a <_strtod_l+0x5a2>
 800b95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b95c:	9a08      	ldr	r2, [sp, #32]
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b962:	9b05      	ldr	r3, [sp, #20]
 800b964:	9804      	ldr	r0, [sp, #16]
 800b966:	f001 fb01 	bl	800cf6c <__s2b>
 800b96a:	900d      	str	r0, [sp, #52]	; 0x34
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d100      	bne.n	800b972 <_strtod_l+0x67a>
 800b970:	e720      	b.n	800b7b4 <_strtod_l+0x4bc>
 800b972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b974:	9906      	ldr	r1, [sp, #24]
 800b976:	17da      	asrs	r2, r3, #31
 800b978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b97a:	1a5b      	subs	r3, r3, r1
 800b97c:	401a      	ands	r2, r3
 800b97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b980:	9215      	str	r2, [sp, #84]	; 0x54
 800b982:	43db      	mvns	r3, r3
 800b984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b986:	17db      	asrs	r3, r3, #31
 800b988:	401a      	ands	r2, r3
 800b98a:	2300      	movs	r3, #0
 800b98c:	9218      	str	r2, [sp, #96]	; 0x60
 800b98e:	9305      	str	r3, [sp, #20]
 800b990:	9306      	str	r3, [sp, #24]
 800b992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b994:	9804      	ldr	r0, [sp, #16]
 800b996:	6859      	ldr	r1, [r3, #4]
 800b998:	f001 fa72 	bl	800ce80 <_Balloc>
 800b99c:	9008      	str	r0, [sp, #32]
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d100      	bne.n	800b9a4 <_strtod_l+0x6ac>
 800b9a2:	e70c      	b.n	800b7be <_strtod_l+0x4c6>
 800b9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9a6:	300c      	adds	r0, #12
 800b9a8:	0019      	movs	r1, r3
 800b9aa:	691a      	ldr	r2, [r3, #16]
 800b9ac:	310c      	adds	r1, #12
 800b9ae:	3202      	adds	r2, #2
 800b9b0:	0092      	lsls	r2, r2, #2
 800b9b2:	f000 fdca 	bl	800c54a <memcpy>
 800b9b6:	ab1e      	add	r3, sp, #120	; 0x78
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	ab1d      	add	r3, sp, #116	; 0x74
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	0032      	movs	r2, r6
 800b9c0:	003b      	movs	r3, r7
 800b9c2:	9804      	ldr	r0, [sp, #16]
 800b9c4:	9610      	str	r6, [sp, #64]	; 0x40
 800b9c6:	9711      	str	r7, [sp, #68]	; 0x44
 800b9c8:	f001 fdf8 	bl	800d5bc <__d2b>
 800b9cc:	901c      	str	r0, [sp, #112]	; 0x70
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d100      	bne.n	800b9d4 <_strtod_l+0x6dc>
 800b9d2:	e6f4      	b.n	800b7be <_strtod_l+0x4c6>
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	9804      	ldr	r0, [sp, #16]
 800b9d8:	f001 fb5c 	bl	800d094 <__i2b>
 800b9dc:	9006      	str	r0, [sp, #24]
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d100      	bne.n	800b9e4 <_strtod_l+0x6ec>
 800b9e2:	e6ec      	b.n	800b7be <_strtod_l+0x4c6>
 800b9e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b9e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b9ea:	1ad4      	subs	r4, r2, r3
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	db01      	blt.n	800b9f4 <_strtod_l+0x6fc>
 800b9f0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b9f2:	195d      	adds	r5, r3, r5
 800b9f4:	9907      	ldr	r1, [sp, #28]
 800b9f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b9f8:	1a5b      	subs	r3, r3, r1
 800b9fa:	2136      	movs	r1, #54	; 0x36
 800b9fc:	189b      	adds	r3, r3, r2
 800b9fe:	1a8a      	subs	r2, r1, r2
 800ba00:	4985      	ldr	r1, [pc, #532]	; (800bc18 <_strtod_l+0x920>)
 800ba02:	2001      	movs	r0, #1
 800ba04:	468c      	mov	ip, r1
 800ba06:	2100      	movs	r1, #0
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	9114      	str	r1, [sp, #80]	; 0x50
 800ba0c:	9012      	str	r0, [sp, #72]	; 0x48
 800ba0e:	4563      	cmp	r3, ip
 800ba10:	da07      	bge.n	800ba22 <_strtod_l+0x72a>
 800ba12:	4661      	mov	r1, ip
 800ba14:	1ac9      	subs	r1, r1, r3
 800ba16:	1a52      	subs	r2, r2, r1
 800ba18:	291f      	cmp	r1, #31
 800ba1a:	dd00      	ble.n	800ba1e <_strtod_l+0x726>
 800ba1c:	e0b6      	b.n	800bb8c <_strtod_l+0x894>
 800ba1e:	4088      	lsls	r0, r1
 800ba20:	9012      	str	r0, [sp, #72]	; 0x48
 800ba22:	18ab      	adds	r3, r5, r2
 800ba24:	930c      	str	r3, [sp, #48]	; 0x30
 800ba26:	18a4      	adds	r4, r4, r2
 800ba28:	9b07      	ldr	r3, [sp, #28]
 800ba2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba2c:	191c      	adds	r4, r3, r4
 800ba2e:	002b      	movs	r3, r5
 800ba30:	4295      	cmp	r5, r2
 800ba32:	dd00      	ble.n	800ba36 <_strtod_l+0x73e>
 800ba34:	0013      	movs	r3, r2
 800ba36:	42a3      	cmp	r3, r4
 800ba38:	dd00      	ble.n	800ba3c <_strtod_l+0x744>
 800ba3a:	0023      	movs	r3, r4
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	dd04      	ble.n	800ba4a <_strtod_l+0x752>
 800ba40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba42:	1ae4      	subs	r4, r4, r3
 800ba44:	1ad2      	subs	r2, r2, r3
 800ba46:	920c      	str	r2, [sp, #48]	; 0x30
 800ba48:	1aed      	subs	r5, r5, r3
 800ba4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dd17      	ble.n	800ba80 <_strtod_l+0x788>
 800ba50:	001a      	movs	r2, r3
 800ba52:	9906      	ldr	r1, [sp, #24]
 800ba54:	9804      	ldr	r0, [sp, #16]
 800ba56:	f001 fbe5 	bl	800d224 <__pow5mult>
 800ba5a:	9006      	str	r0, [sp, #24]
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d100      	bne.n	800ba62 <_strtod_l+0x76a>
 800ba60:	e6ad      	b.n	800b7be <_strtod_l+0x4c6>
 800ba62:	0001      	movs	r1, r0
 800ba64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ba66:	9804      	ldr	r0, [sp, #16]
 800ba68:	f001 fb2c 	bl	800d0c4 <__multiply>
 800ba6c:	900e      	str	r0, [sp, #56]	; 0x38
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d100      	bne.n	800ba74 <_strtod_l+0x77c>
 800ba72:	e6a4      	b.n	800b7be <_strtod_l+0x4c6>
 800ba74:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba76:	9804      	ldr	r0, [sp, #16]
 800ba78:	f001 fa2a 	bl	800ced0 <_Bfree>
 800ba7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba7e:	931c      	str	r3, [sp, #112]	; 0x70
 800ba80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	dd00      	ble.n	800ba88 <_strtod_l+0x790>
 800ba86:	e087      	b.n	800bb98 <_strtod_l+0x8a0>
 800ba88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	dd08      	ble.n	800baa0 <_strtod_l+0x7a8>
 800ba8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ba90:	9908      	ldr	r1, [sp, #32]
 800ba92:	9804      	ldr	r0, [sp, #16]
 800ba94:	f001 fbc6 	bl	800d224 <__pow5mult>
 800ba98:	9008      	str	r0, [sp, #32]
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d100      	bne.n	800baa0 <_strtod_l+0x7a8>
 800ba9e:	e68e      	b.n	800b7be <_strtod_l+0x4c6>
 800baa0:	2c00      	cmp	r4, #0
 800baa2:	dd08      	ble.n	800bab6 <_strtod_l+0x7be>
 800baa4:	0022      	movs	r2, r4
 800baa6:	9908      	ldr	r1, [sp, #32]
 800baa8:	9804      	ldr	r0, [sp, #16]
 800baaa:	f001 fbfd 	bl	800d2a8 <__lshift>
 800baae:	9008      	str	r0, [sp, #32]
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d100      	bne.n	800bab6 <_strtod_l+0x7be>
 800bab4:	e683      	b.n	800b7be <_strtod_l+0x4c6>
 800bab6:	2d00      	cmp	r5, #0
 800bab8:	dd08      	ble.n	800bacc <_strtod_l+0x7d4>
 800baba:	002a      	movs	r2, r5
 800babc:	9906      	ldr	r1, [sp, #24]
 800babe:	9804      	ldr	r0, [sp, #16]
 800bac0:	f001 fbf2 	bl	800d2a8 <__lshift>
 800bac4:	9006      	str	r0, [sp, #24]
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d100      	bne.n	800bacc <_strtod_l+0x7d4>
 800baca:	e678      	b.n	800b7be <_strtod_l+0x4c6>
 800bacc:	9a08      	ldr	r2, [sp, #32]
 800bace:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bad0:	9804      	ldr	r0, [sp, #16]
 800bad2:	f001 fc73 	bl	800d3bc <__mdiff>
 800bad6:	9005      	str	r0, [sp, #20]
 800bad8:	2800      	cmp	r0, #0
 800bada:	d100      	bne.n	800bade <_strtod_l+0x7e6>
 800badc:	e66f      	b.n	800b7be <_strtod_l+0x4c6>
 800bade:	2200      	movs	r2, #0
 800bae0:	68c3      	ldr	r3, [r0, #12]
 800bae2:	9906      	ldr	r1, [sp, #24]
 800bae4:	60c2      	str	r2, [r0, #12]
 800bae6:	930c      	str	r3, [sp, #48]	; 0x30
 800bae8:	f001 fc4c 	bl	800d384 <__mcmp>
 800baec:	2800      	cmp	r0, #0
 800baee:	da5d      	bge.n	800bbac <_strtod_l+0x8b4>
 800baf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baf2:	4333      	orrs	r3, r6
 800baf4:	d000      	beq.n	800baf8 <_strtod_l+0x800>
 800baf6:	e088      	b.n	800bc0a <_strtod_l+0x912>
 800baf8:	033b      	lsls	r3, r7, #12
 800bafa:	d000      	beq.n	800bafe <_strtod_l+0x806>
 800bafc:	e085      	b.n	800bc0a <_strtod_l+0x912>
 800bafe:	22d6      	movs	r2, #214	; 0xd6
 800bb00:	4b46      	ldr	r3, [pc, #280]	; (800bc1c <_strtod_l+0x924>)
 800bb02:	04d2      	lsls	r2, r2, #19
 800bb04:	403b      	ands	r3, r7
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d97f      	bls.n	800bc0a <_strtod_l+0x912>
 800bb0a:	9b05      	ldr	r3, [sp, #20]
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d103      	bne.n	800bb1a <_strtod_l+0x822>
 800bb12:	9b05      	ldr	r3, [sp, #20]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	dd77      	ble.n	800bc0a <_strtod_l+0x912>
 800bb1a:	9905      	ldr	r1, [sp, #20]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	9804      	ldr	r0, [sp, #16]
 800bb20:	f001 fbc2 	bl	800d2a8 <__lshift>
 800bb24:	9906      	ldr	r1, [sp, #24]
 800bb26:	9005      	str	r0, [sp, #20]
 800bb28:	f001 fc2c 	bl	800d384 <__mcmp>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	dd6c      	ble.n	800bc0a <_strtod_l+0x912>
 800bb30:	9907      	ldr	r1, [sp, #28]
 800bb32:	003b      	movs	r3, r7
 800bb34:	4a39      	ldr	r2, [pc, #228]	; (800bc1c <_strtod_l+0x924>)
 800bb36:	2900      	cmp	r1, #0
 800bb38:	d100      	bne.n	800bb3c <_strtod_l+0x844>
 800bb3a:	e094      	b.n	800bc66 <_strtod_l+0x96e>
 800bb3c:	0011      	movs	r1, r2
 800bb3e:	20d6      	movs	r0, #214	; 0xd6
 800bb40:	4039      	ands	r1, r7
 800bb42:	04c0      	lsls	r0, r0, #19
 800bb44:	4281      	cmp	r1, r0
 800bb46:	dd00      	ble.n	800bb4a <_strtod_l+0x852>
 800bb48:	e08d      	b.n	800bc66 <_strtod_l+0x96e>
 800bb4a:	23dc      	movs	r3, #220	; 0xdc
 800bb4c:	049b      	lsls	r3, r3, #18
 800bb4e:	4299      	cmp	r1, r3
 800bb50:	dc00      	bgt.n	800bb54 <_strtod_l+0x85c>
 800bb52:	e6a7      	b.n	800b8a4 <_strtod_l+0x5ac>
 800bb54:	0030      	movs	r0, r6
 800bb56:	0039      	movs	r1, r7
 800bb58:	4b31      	ldr	r3, [pc, #196]	; (800bc20 <_strtod_l+0x928>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f7f5 fd86 	bl	800166c <__aeabi_dmul>
 800bb60:	4b2e      	ldr	r3, [pc, #184]	; (800bc1c <_strtod_l+0x924>)
 800bb62:	0006      	movs	r6, r0
 800bb64:	000f      	movs	r7, r1
 800bb66:	420b      	tst	r3, r1
 800bb68:	d000      	beq.n	800bb6c <_strtod_l+0x874>
 800bb6a:	e631      	b.n	800b7d0 <_strtod_l+0x4d8>
 800bb6c:	2322      	movs	r3, #34	; 0x22
 800bb6e:	9a04      	ldr	r2, [sp, #16]
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	e62d      	b.n	800b7d0 <_strtod_l+0x4d8>
 800bb74:	234b      	movs	r3, #75	; 0x4b
 800bb76:	1a9a      	subs	r2, r3, r2
 800bb78:	3b4c      	subs	r3, #76	; 0x4c
 800bb7a:	4093      	lsls	r3, r2
 800bb7c:	4019      	ands	r1, r3
 800bb7e:	000f      	movs	r7, r1
 800bb80:	e6e3      	b.n	800b94a <_strtod_l+0x652>
 800bb82:	2201      	movs	r2, #1
 800bb84:	4252      	negs	r2, r2
 800bb86:	409a      	lsls	r2, r3
 800bb88:	4016      	ands	r6, r2
 800bb8a:	e6de      	b.n	800b94a <_strtod_l+0x652>
 800bb8c:	4925      	ldr	r1, [pc, #148]	; (800bc24 <_strtod_l+0x92c>)
 800bb8e:	1acb      	subs	r3, r1, r3
 800bb90:	0001      	movs	r1, r0
 800bb92:	4099      	lsls	r1, r3
 800bb94:	9114      	str	r1, [sp, #80]	; 0x50
 800bb96:	e743      	b.n	800ba20 <_strtod_l+0x728>
 800bb98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb9c:	9804      	ldr	r0, [sp, #16]
 800bb9e:	f001 fb83 	bl	800d2a8 <__lshift>
 800bba2:	901c      	str	r0, [sp, #112]	; 0x70
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d000      	beq.n	800bbaa <_strtod_l+0x8b2>
 800bba8:	e76e      	b.n	800ba88 <_strtod_l+0x790>
 800bbaa:	e608      	b.n	800b7be <_strtod_l+0x4c6>
 800bbac:	970e      	str	r7, [sp, #56]	; 0x38
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d177      	bne.n	800bca2 <_strtod_l+0x9aa>
 800bbb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbb4:	033b      	lsls	r3, r7, #12
 800bbb6:	0b1b      	lsrs	r3, r3, #12
 800bbb8:	2a00      	cmp	r2, #0
 800bbba:	d039      	beq.n	800bc30 <_strtod_l+0x938>
 800bbbc:	4a1a      	ldr	r2, [pc, #104]	; (800bc28 <_strtod_l+0x930>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d139      	bne.n	800bc36 <_strtod_l+0x93e>
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	9b07      	ldr	r3, [sp, #28]
 800bbc6:	4249      	negs	r1, r1
 800bbc8:	0032      	movs	r2, r6
 800bbca:	0008      	movs	r0, r1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00b      	beq.n	800bbe8 <_strtod_l+0x8f0>
 800bbd0:	24d4      	movs	r4, #212	; 0xd4
 800bbd2:	4b12      	ldr	r3, [pc, #72]	; (800bc1c <_strtod_l+0x924>)
 800bbd4:	0008      	movs	r0, r1
 800bbd6:	403b      	ands	r3, r7
 800bbd8:	04e4      	lsls	r4, r4, #19
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	d804      	bhi.n	800bbe8 <_strtod_l+0x8f0>
 800bbde:	306c      	adds	r0, #108	; 0x6c
 800bbe0:	0d1b      	lsrs	r3, r3, #20
 800bbe2:	1ac3      	subs	r3, r0, r3
 800bbe4:	4099      	lsls	r1, r3
 800bbe6:	0008      	movs	r0, r1
 800bbe8:	4282      	cmp	r2, r0
 800bbea:	d124      	bne.n	800bc36 <_strtod_l+0x93e>
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <_strtod_l+0x934>)
 800bbee:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bbf0:	4299      	cmp	r1, r3
 800bbf2:	d102      	bne.n	800bbfa <_strtod_l+0x902>
 800bbf4:	3201      	adds	r2, #1
 800bbf6:	d100      	bne.n	800bbfa <_strtod_l+0x902>
 800bbf8:	e5e1      	b.n	800b7be <_strtod_l+0x4c6>
 800bbfa:	4b08      	ldr	r3, [pc, #32]	; (800bc1c <_strtod_l+0x924>)
 800bbfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbfe:	2600      	movs	r6, #0
 800bc00:	401a      	ands	r2, r3
 800bc02:	0013      	movs	r3, r2
 800bc04:	2280      	movs	r2, #128	; 0x80
 800bc06:	0352      	lsls	r2, r2, #13
 800bc08:	189f      	adds	r7, r3, r2
 800bc0a:	9b07      	ldr	r3, [sp, #28]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1a1      	bne.n	800bb54 <_strtod_l+0x85c>
 800bc10:	e5de      	b.n	800b7d0 <_strtod_l+0x4d8>
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	08014848 	.word	0x08014848
 800bc18:	fffffc02 	.word	0xfffffc02
 800bc1c:	7ff00000 	.word	0x7ff00000
 800bc20:	39500000 	.word	0x39500000
 800bc24:	fffffbe2 	.word	0xfffffbe2
 800bc28:	000fffff 	.word	0x000fffff
 800bc2c:	7fefffff 	.word	0x7fefffff
 800bc30:	4333      	orrs	r3, r6
 800bc32:	d100      	bne.n	800bc36 <_strtod_l+0x93e>
 800bc34:	e77c      	b.n	800bb30 <_strtod_l+0x838>
 800bc36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d01d      	beq.n	800bc78 <_strtod_l+0x980>
 800bc3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc40:	4213      	tst	r3, r2
 800bc42:	d0e2      	beq.n	800bc0a <_strtod_l+0x912>
 800bc44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc46:	0030      	movs	r0, r6
 800bc48:	0039      	movs	r1, r7
 800bc4a:	9a07      	ldr	r2, [sp, #28]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d017      	beq.n	800bc80 <_strtod_l+0x988>
 800bc50:	f7ff fb3a 	bl	800b2c8 <sulp>
 800bc54:	0002      	movs	r2, r0
 800bc56:	000b      	movs	r3, r1
 800bc58:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bc5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc5c:	f7f4 fdac 	bl	80007b8 <__aeabi_dadd>
 800bc60:	0006      	movs	r6, r0
 800bc62:	000f      	movs	r7, r1
 800bc64:	e7d1      	b.n	800bc0a <_strtod_l+0x912>
 800bc66:	2601      	movs	r6, #1
 800bc68:	4013      	ands	r3, r2
 800bc6a:	4a98      	ldr	r2, [pc, #608]	; (800becc <_strtod_l+0xbd4>)
 800bc6c:	4276      	negs	r6, r6
 800bc6e:	189b      	adds	r3, r3, r2
 800bc70:	4a97      	ldr	r2, [pc, #604]	; (800bed0 <_strtod_l+0xbd8>)
 800bc72:	431a      	orrs	r2, r3
 800bc74:	0017      	movs	r7, r2
 800bc76:	e7c8      	b.n	800bc0a <_strtod_l+0x912>
 800bc78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc7a:	4233      	tst	r3, r6
 800bc7c:	d0c5      	beq.n	800bc0a <_strtod_l+0x912>
 800bc7e:	e7e1      	b.n	800bc44 <_strtod_l+0x94c>
 800bc80:	f7ff fb22 	bl	800b2c8 <sulp>
 800bc84:	0002      	movs	r2, r0
 800bc86:	000b      	movs	r3, r1
 800bc88:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bc8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc8c:	f7f5 ffb0 	bl	8001bf0 <__aeabi_dsub>
 800bc90:	2200      	movs	r2, #0
 800bc92:	2300      	movs	r3, #0
 800bc94:	0006      	movs	r6, r0
 800bc96:	000f      	movs	r7, r1
 800bc98:	f7f4 fbd6 	bl	8000448 <__aeabi_dcmpeq>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d0b4      	beq.n	800bc0a <_strtod_l+0x912>
 800bca0:	e600      	b.n	800b8a4 <_strtod_l+0x5ac>
 800bca2:	9906      	ldr	r1, [sp, #24]
 800bca4:	9805      	ldr	r0, [sp, #20]
 800bca6:	f001 fce9 	bl	800d67c <__ratio>
 800bcaa:	2380      	movs	r3, #128	; 0x80
 800bcac:	2200      	movs	r2, #0
 800bcae:	05db      	lsls	r3, r3, #23
 800bcb0:	0004      	movs	r4, r0
 800bcb2:	000d      	movs	r5, r1
 800bcb4:	f7f4 fbd8 	bl	8000468 <__aeabi_dcmple>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d06d      	beq.n	800bd98 <_strtod_l+0xaa0>
 800bcbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d000      	beq.n	800bcc4 <_strtod_l+0x9cc>
 800bcc2:	e07e      	b.n	800bdc2 <_strtod_l+0xaca>
 800bcc4:	2e00      	cmp	r6, #0
 800bcc6:	d158      	bne.n	800bd7a <_strtod_l+0xa82>
 800bcc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcca:	031b      	lsls	r3, r3, #12
 800bccc:	d000      	beq.n	800bcd0 <_strtod_l+0x9d8>
 800bcce:	e07f      	b.n	800bdd0 <_strtod_l+0xad8>
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	0020      	movs	r0, r4
 800bcd4:	0029      	movs	r1, r5
 800bcd6:	4b7f      	ldr	r3, [pc, #508]	; (800bed4 <_strtod_l+0xbdc>)
 800bcd8:	f7f4 fbbc 	bl	8000454 <__aeabi_dcmplt>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d158      	bne.n	800bd92 <_strtod_l+0xa9a>
 800bce0:	0020      	movs	r0, r4
 800bce2:	0029      	movs	r1, r5
 800bce4:	2200      	movs	r2, #0
 800bce6:	4b7c      	ldr	r3, [pc, #496]	; (800bed8 <_strtod_l+0xbe0>)
 800bce8:	f7f5 fcc0 	bl	800166c <__aeabi_dmul>
 800bcec:	0004      	movs	r4, r0
 800bcee:	000d      	movs	r5, r1
 800bcf0:	2380      	movs	r3, #128	; 0x80
 800bcf2:	061b      	lsls	r3, r3, #24
 800bcf4:	940a      	str	r4, [sp, #40]	; 0x28
 800bcf6:	18eb      	adds	r3, r5, r3
 800bcf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcfe:	9212      	str	r2, [sp, #72]	; 0x48
 800bd00:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd02:	4a76      	ldr	r2, [pc, #472]	; (800bedc <_strtod_l+0xbe4>)
 800bd04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd06:	4013      	ands	r3, r2
 800bd08:	9314      	str	r3, [sp, #80]	; 0x50
 800bd0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd0c:	4b74      	ldr	r3, [pc, #464]	; (800bee0 <_strtod_l+0xbe8>)
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d000      	beq.n	800bd14 <_strtod_l+0xa1c>
 800bd12:	e091      	b.n	800be38 <_strtod_l+0xb40>
 800bd14:	4a73      	ldr	r2, [pc, #460]	; (800bee4 <_strtod_l+0xbec>)
 800bd16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd18:	4694      	mov	ip, r2
 800bd1a:	4463      	add	r3, ip
 800bd1c:	001f      	movs	r7, r3
 800bd1e:	0030      	movs	r0, r6
 800bd20:	0019      	movs	r1, r3
 800bd22:	f001 fbe3 	bl	800d4ec <__ulp>
 800bd26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd2a:	f7f5 fc9f 	bl	800166c <__aeabi_dmul>
 800bd2e:	0032      	movs	r2, r6
 800bd30:	003b      	movs	r3, r7
 800bd32:	f7f4 fd41 	bl	80007b8 <__aeabi_dadd>
 800bd36:	4a69      	ldr	r2, [pc, #420]	; (800bedc <_strtod_l+0xbe4>)
 800bd38:	4b6b      	ldr	r3, [pc, #428]	; (800bee8 <_strtod_l+0xbf0>)
 800bd3a:	0006      	movs	r6, r0
 800bd3c:	400a      	ands	r2, r1
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d949      	bls.n	800bdd6 <_strtod_l+0xade>
 800bd42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd44:	4b69      	ldr	r3, [pc, #420]	; (800beec <_strtod_l+0xbf4>)
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d103      	bne.n	800bd52 <_strtod_l+0xa5a>
 800bd4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	d100      	bne.n	800bd52 <_strtod_l+0xa5a>
 800bd50:	e535      	b.n	800b7be <_strtod_l+0x4c6>
 800bd52:	2601      	movs	r6, #1
 800bd54:	4f65      	ldr	r7, [pc, #404]	; (800beec <_strtod_l+0xbf4>)
 800bd56:	4276      	negs	r6, r6
 800bd58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bd5a:	9804      	ldr	r0, [sp, #16]
 800bd5c:	f001 f8b8 	bl	800ced0 <_Bfree>
 800bd60:	9908      	ldr	r1, [sp, #32]
 800bd62:	9804      	ldr	r0, [sp, #16]
 800bd64:	f001 f8b4 	bl	800ced0 <_Bfree>
 800bd68:	9906      	ldr	r1, [sp, #24]
 800bd6a:	9804      	ldr	r0, [sp, #16]
 800bd6c:	f001 f8b0 	bl	800ced0 <_Bfree>
 800bd70:	9905      	ldr	r1, [sp, #20]
 800bd72:	9804      	ldr	r0, [sp, #16]
 800bd74:	f001 f8ac 	bl	800ced0 <_Bfree>
 800bd78:	e60b      	b.n	800b992 <_strtod_l+0x69a>
 800bd7a:	2e01      	cmp	r6, #1
 800bd7c:	d103      	bne.n	800bd86 <_strtod_l+0xa8e>
 800bd7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d100      	bne.n	800bd86 <_strtod_l+0xa8e>
 800bd84:	e58e      	b.n	800b8a4 <_strtod_l+0x5ac>
 800bd86:	2300      	movs	r3, #0
 800bd88:	4c59      	ldr	r4, [pc, #356]	; (800bef0 <_strtod_l+0xbf8>)
 800bd8a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd8c:	940b      	str	r4, [sp, #44]	; 0x2c
 800bd8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bd90:	e01c      	b.n	800bdcc <_strtod_l+0xad4>
 800bd92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bd94:	4d50      	ldr	r5, [pc, #320]	; (800bed8 <_strtod_l+0xbe0>)
 800bd96:	e7ab      	b.n	800bcf0 <_strtod_l+0x9f8>
 800bd98:	2200      	movs	r2, #0
 800bd9a:	0020      	movs	r0, r4
 800bd9c:	0029      	movs	r1, r5
 800bd9e:	4b4e      	ldr	r3, [pc, #312]	; (800bed8 <_strtod_l+0xbe0>)
 800bda0:	f7f5 fc64 	bl	800166c <__aeabi_dmul>
 800bda4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bda6:	0004      	movs	r4, r0
 800bda8:	000b      	movs	r3, r1
 800bdaa:	000d      	movs	r5, r1
 800bdac:	2a00      	cmp	r2, #0
 800bdae:	d104      	bne.n	800bdba <_strtod_l+0xac2>
 800bdb0:	2280      	movs	r2, #128	; 0x80
 800bdb2:	0612      	lsls	r2, r2, #24
 800bdb4:	900a      	str	r0, [sp, #40]	; 0x28
 800bdb6:	188b      	adds	r3, r1, r2
 800bdb8:	e79e      	b.n	800bcf8 <_strtod_l+0xa00>
 800bdba:	0002      	movs	r2, r0
 800bdbc:	920a      	str	r2, [sp, #40]	; 0x28
 800bdbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdc0:	e79b      	b.n	800bcfa <_strtod_l+0xa02>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4c43      	ldr	r4, [pc, #268]	; (800bed4 <_strtod_l+0xbdc>)
 800bdc6:	930a      	str	r3, [sp, #40]	; 0x28
 800bdc8:	940b      	str	r4, [sp, #44]	; 0x2c
 800bdca:	2400      	movs	r4, #0
 800bdcc:	4d41      	ldr	r5, [pc, #260]	; (800bed4 <_strtod_l+0xbdc>)
 800bdce:	e794      	b.n	800bcfa <_strtod_l+0xa02>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4c47      	ldr	r4, [pc, #284]	; (800bef0 <_strtod_l+0xbf8>)
 800bdd4:	e7f7      	b.n	800bdc6 <_strtod_l+0xace>
 800bdd6:	23d4      	movs	r3, #212	; 0xd4
 800bdd8:	049b      	lsls	r3, r3, #18
 800bdda:	18cf      	adds	r7, r1, r3
 800bddc:	9b07      	ldr	r3, [sp, #28]
 800bdde:	970e      	str	r7, [sp, #56]	; 0x38
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1b9      	bne.n	800bd58 <_strtod_l+0xa60>
 800bde4:	4b3d      	ldr	r3, [pc, #244]	; (800bedc <_strtod_l+0xbe4>)
 800bde6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bde8:	403b      	ands	r3, r7
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d1b4      	bne.n	800bd58 <_strtod_l+0xa60>
 800bdee:	0020      	movs	r0, r4
 800bdf0:	0029      	movs	r1, r5
 800bdf2:	f7f4 fbc3 	bl	800057c <__aeabi_d2lz>
 800bdf6:	f7f4 fbfd 	bl	80005f4 <__aeabi_l2d>
 800bdfa:	0002      	movs	r2, r0
 800bdfc:	000b      	movs	r3, r1
 800bdfe:	0020      	movs	r0, r4
 800be00:	0029      	movs	r1, r5
 800be02:	f7f5 fef5 	bl	8001bf0 <__aeabi_dsub>
 800be06:	033b      	lsls	r3, r7, #12
 800be08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be0a:	0b1b      	lsrs	r3, r3, #12
 800be0c:	4333      	orrs	r3, r6
 800be0e:	4313      	orrs	r3, r2
 800be10:	0004      	movs	r4, r0
 800be12:	000d      	movs	r5, r1
 800be14:	4a37      	ldr	r2, [pc, #220]	; (800bef4 <_strtod_l+0xbfc>)
 800be16:	2b00      	cmp	r3, #0
 800be18:	d054      	beq.n	800bec4 <_strtod_l+0xbcc>
 800be1a:	4b37      	ldr	r3, [pc, #220]	; (800bef8 <_strtod_l+0xc00>)
 800be1c:	f7f4 fb1a 	bl	8000454 <__aeabi_dcmplt>
 800be20:	2800      	cmp	r0, #0
 800be22:	d000      	beq.n	800be26 <_strtod_l+0xb2e>
 800be24:	e4d4      	b.n	800b7d0 <_strtod_l+0x4d8>
 800be26:	0020      	movs	r0, r4
 800be28:	0029      	movs	r1, r5
 800be2a:	4a34      	ldr	r2, [pc, #208]	; (800befc <_strtod_l+0xc04>)
 800be2c:	4b2a      	ldr	r3, [pc, #168]	; (800bed8 <_strtod_l+0xbe0>)
 800be2e:	f7f4 fb25 	bl	800047c <__aeabi_dcmpgt>
 800be32:	2800      	cmp	r0, #0
 800be34:	d090      	beq.n	800bd58 <_strtod_l+0xa60>
 800be36:	e4cb      	b.n	800b7d0 <_strtod_l+0x4d8>
 800be38:	9b07      	ldr	r3, [sp, #28]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d02b      	beq.n	800be96 <_strtod_l+0xb9e>
 800be3e:	23d4      	movs	r3, #212	; 0xd4
 800be40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be42:	04db      	lsls	r3, r3, #19
 800be44:	429a      	cmp	r2, r3
 800be46:	d826      	bhi.n	800be96 <_strtod_l+0xb9e>
 800be48:	0020      	movs	r0, r4
 800be4a:	0029      	movs	r1, r5
 800be4c:	4a2c      	ldr	r2, [pc, #176]	; (800bf00 <_strtod_l+0xc08>)
 800be4e:	4b2d      	ldr	r3, [pc, #180]	; (800bf04 <_strtod_l+0xc0c>)
 800be50:	f7f4 fb0a 	bl	8000468 <__aeabi_dcmple>
 800be54:	2800      	cmp	r0, #0
 800be56:	d017      	beq.n	800be88 <_strtod_l+0xb90>
 800be58:	0020      	movs	r0, r4
 800be5a:	0029      	movs	r1, r5
 800be5c:	f7f4 fb70 	bl	8000540 <__aeabi_d2uiz>
 800be60:	2800      	cmp	r0, #0
 800be62:	d100      	bne.n	800be66 <_strtod_l+0xb6e>
 800be64:	3001      	adds	r0, #1
 800be66:	f7f6 fac9 	bl	80023fc <__aeabi_ui2d>
 800be6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be6c:	0004      	movs	r4, r0
 800be6e:	000b      	movs	r3, r1
 800be70:	000d      	movs	r5, r1
 800be72:	2a00      	cmp	r2, #0
 800be74:	d122      	bne.n	800bebc <_strtod_l+0xbc4>
 800be76:	2280      	movs	r2, #128	; 0x80
 800be78:	0612      	lsls	r2, r2, #24
 800be7a:	188b      	adds	r3, r1, r2
 800be7c:	9016      	str	r0, [sp, #88]	; 0x58
 800be7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800be80:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be84:	9212      	str	r2, [sp, #72]	; 0x48
 800be86:	9313      	str	r3, [sp, #76]	; 0x4c
 800be88:	22d6      	movs	r2, #214	; 0xd6
 800be8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be8c:	04d2      	lsls	r2, r2, #19
 800be8e:	189b      	adds	r3, r3, r2
 800be90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	9313      	str	r3, [sp, #76]	; 0x4c
 800be96:	9810      	ldr	r0, [sp, #64]	; 0x40
 800be98:	9911      	ldr	r1, [sp, #68]	; 0x44
 800be9a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800be9c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800be9e:	f001 fb25 	bl	800d4ec <__ulp>
 800bea2:	0002      	movs	r2, r0
 800bea4:	000b      	movs	r3, r1
 800bea6:	0030      	movs	r0, r6
 800bea8:	0039      	movs	r1, r7
 800beaa:	f7f5 fbdf 	bl	800166c <__aeabi_dmul>
 800beae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800beb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800beb2:	f7f4 fc81 	bl	80007b8 <__aeabi_dadd>
 800beb6:	0006      	movs	r6, r0
 800beb8:	000f      	movs	r7, r1
 800beba:	e78f      	b.n	800bddc <_strtod_l+0xae4>
 800bebc:	0002      	movs	r2, r0
 800bebe:	9216      	str	r2, [sp, #88]	; 0x58
 800bec0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bec2:	e7dd      	b.n	800be80 <_strtod_l+0xb88>
 800bec4:	4b10      	ldr	r3, [pc, #64]	; (800bf08 <_strtod_l+0xc10>)
 800bec6:	f7f4 fac5 	bl	8000454 <__aeabi_dcmplt>
 800beca:	e7b2      	b.n	800be32 <_strtod_l+0xb3a>
 800becc:	fff00000 	.word	0xfff00000
 800bed0:	000fffff 	.word	0x000fffff
 800bed4:	3ff00000 	.word	0x3ff00000
 800bed8:	3fe00000 	.word	0x3fe00000
 800bedc:	7ff00000 	.word	0x7ff00000
 800bee0:	7fe00000 	.word	0x7fe00000
 800bee4:	fcb00000 	.word	0xfcb00000
 800bee8:	7c9fffff 	.word	0x7c9fffff
 800beec:	7fefffff 	.word	0x7fefffff
 800bef0:	bff00000 	.word	0xbff00000
 800bef4:	94a03595 	.word	0x94a03595
 800bef8:	3fdfffff 	.word	0x3fdfffff
 800befc:	35afe535 	.word	0x35afe535
 800bf00:	ffc00000 	.word	0xffc00000
 800bf04:	41dfffff 	.word	0x41dfffff
 800bf08:	3fcfffff 	.word	0x3fcfffff

0800bf0c <_strtod_r>:
 800bf0c:	b510      	push	{r4, lr}
 800bf0e:	4b02      	ldr	r3, [pc, #8]	; (800bf18 <_strtod_r+0xc>)
 800bf10:	f7ff f9f2 	bl	800b2f8 <_strtod_l>
 800bf14:	bd10      	pop	{r4, pc}
 800bf16:	46c0      	nop			; (mov r8, r8)
 800bf18:	2000044c 	.word	0x2000044c

0800bf1c <strtod>:
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	4c04      	ldr	r4, [pc, #16]	; (800bf30 <strtod+0x14>)
 800bf20:	000a      	movs	r2, r1
 800bf22:	0001      	movs	r1, r0
 800bf24:	4b03      	ldr	r3, [pc, #12]	; (800bf34 <strtod+0x18>)
 800bf26:	6820      	ldr	r0, [r4, #0]
 800bf28:	f7ff f9e6 	bl	800b2f8 <_strtod_l>
 800bf2c:	bd10      	pop	{r4, pc}
 800bf2e:	46c0      	nop			; (mov r8, r8)
 800bf30:	200006d8 	.word	0x200006d8
 800bf34:	2000044c 	.word	0x2000044c

0800bf38 <_strtol_l.constprop.0>:
 800bf38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	001e      	movs	r6, r3
 800bf3e:	9005      	str	r0, [sp, #20]
 800bf40:	9101      	str	r1, [sp, #4]
 800bf42:	9202      	str	r2, [sp, #8]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d048      	beq.n	800bfda <_strtol_l.constprop.0+0xa2>
 800bf48:	000b      	movs	r3, r1
 800bf4a:	2e24      	cmp	r6, #36	; 0x24
 800bf4c:	d845      	bhi.n	800bfda <_strtol_l.constprop.0+0xa2>
 800bf4e:	4a3b      	ldr	r2, [pc, #236]	; (800c03c <_strtol_l.constprop.0+0x104>)
 800bf50:	2108      	movs	r1, #8
 800bf52:	4694      	mov	ip, r2
 800bf54:	001a      	movs	r2, r3
 800bf56:	4660      	mov	r0, ip
 800bf58:	7814      	ldrb	r4, [r2, #0]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	5d00      	ldrb	r0, [r0, r4]
 800bf5e:	001d      	movs	r5, r3
 800bf60:	0007      	movs	r7, r0
 800bf62:	400f      	ands	r7, r1
 800bf64:	4208      	tst	r0, r1
 800bf66:	d1f5      	bne.n	800bf54 <_strtol_l.constprop.0+0x1c>
 800bf68:	2c2d      	cmp	r4, #45	; 0x2d
 800bf6a:	d13d      	bne.n	800bfe8 <_strtol_l.constprop.0+0xb0>
 800bf6c:	2701      	movs	r7, #1
 800bf6e:	781c      	ldrb	r4, [r3, #0]
 800bf70:	1c95      	adds	r5, r2, #2
 800bf72:	2e00      	cmp	r6, #0
 800bf74:	d05e      	beq.n	800c034 <_strtol_l.constprop.0+0xfc>
 800bf76:	2e10      	cmp	r6, #16
 800bf78:	d109      	bne.n	800bf8e <_strtol_l.constprop.0+0x56>
 800bf7a:	2c30      	cmp	r4, #48	; 0x30
 800bf7c:	d107      	bne.n	800bf8e <_strtol_l.constprop.0+0x56>
 800bf7e:	2220      	movs	r2, #32
 800bf80:	782b      	ldrb	r3, [r5, #0]
 800bf82:	4393      	bics	r3, r2
 800bf84:	2b58      	cmp	r3, #88	; 0x58
 800bf86:	d150      	bne.n	800c02a <_strtol_l.constprop.0+0xf2>
 800bf88:	2610      	movs	r6, #16
 800bf8a:	786c      	ldrb	r4, [r5, #1]
 800bf8c:	3502      	adds	r5, #2
 800bf8e:	4b2c      	ldr	r3, [pc, #176]	; (800c040 <_strtol_l.constprop.0+0x108>)
 800bf90:	0031      	movs	r1, r6
 800bf92:	18fb      	adds	r3, r7, r3
 800bf94:	0018      	movs	r0, r3
 800bf96:	9303      	str	r3, [sp, #12]
 800bf98:	f7f4 f956 	bl	8000248 <__aeabi_uidivmod>
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	9104      	str	r1, [sp, #16]
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	4684      	mov	ip, r0
 800bfa4:	0010      	movs	r0, r2
 800bfa6:	4249      	negs	r1, r1
 800bfa8:	0023      	movs	r3, r4
 800bfaa:	3b30      	subs	r3, #48	; 0x30
 800bfac:	2b09      	cmp	r3, #9
 800bfae:	d903      	bls.n	800bfb8 <_strtol_l.constprop.0+0x80>
 800bfb0:	3b11      	subs	r3, #17
 800bfb2:	2b19      	cmp	r3, #25
 800bfb4:	d81d      	bhi.n	800bff2 <_strtol_l.constprop.0+0xba>
 800bfb6:	330a      	adds	r3, #10
 800bfb8:	429e      	cmp	r6, r3
 800bfba:	dd1e      	ble.n	800bffa <_strtol_l.constprop.0+0xc2>
 800bfbc:	1c54      	adds	r4, r2, #1
 800bfbe:	d009      	beq.n	800bfd4 <_strtol_l.constprop.0+0x9c>
 800bfc0:	000a      	movs	r2, r1
 800bfc2:	4584      	cmp	ip, r0
 800bfc4:	d306      	bcc.n	800bfd4 <_strtol_l.constprop.0+0x9c>
 800bfc6:	d102      	bne.n	800bfce <_strtol_l.constprop.0+0x96>
 800bfc8:	9c04      	ldr	r4, [sp, #16]
 800bfca:	429c      	cmp	r4, r3
 800bfcc:	db02      	blt.n	800bfd4 <_strtol_l.constprop.0+0x9c>
 800bfce:	2201      	movs	r2, #1
 800bfd0:	4370      	muls	r0, r6
 800bfd2:	1818      	adds	r0, r3, r0
 800bfd4:	782c      	ldrb	r4, [r5, #0]
 800bfd6:	3501      	adds	r5, #1
 800bfd8:	e7e6      	b.n	800bfa8 <_strtol_l.constprop.0+0x70>
 800bfda:	f000 fa7d 	bl	800c4d8 <__errno>
 800bfde:	2316      	movs	r3, #22
 800bfe0:	6003      	str	r3, [r0, #0]
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	b007      	add	sp, #28
 800bfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfe8:	2c2b      	cmp	r4, #43	; 0x2b
 800bfea:	d1c2      	bne.n	800bf72 <_strtol_l.constprop.0+0x3a>
 800bfec:	781c      	ldrb	r4, [r3, #0]
 800bfee:	1c95      	adds	r5, r2, #2
 800bff0:	e7bf      	b.n	800bf72 <_strtol_l.constprop.0+0x3a>
 800bff2:	0023      	movs	r3, r4
 800bff4:	3b61      	subs	r3, #97	; 0x61
 800bff6:	2b19      	cmp	r3, #25
 800bff8:	d9dd      	bls.n	800bfb6 <_strtol_l.constprop.0+0x7e>
 800bffa:	1c53      	adds	r3, r2, #1
 800bffc:	d109      	bne.n	800c012 <_strtol_l.constprop.0+0xda>
 800bffe:	2322      	movs	r3, #34	; 0x22
 800c000:	9a05      	ldr	r2, [sp, #20]
 800c002:	9803      	ldr	r0, [sp, #12]
 800c004:	6013      	str	r3, [r2, #0]
 800c006:	9b02      	ldr	r3, [sp, #8]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d0eb      	beq.n	800bfe4 <_strtol_l.constprop.0+0xac>
 800c00c:	1e6b      	subs	r3, r5, #1
 800c00e:	9301      	str	r3, [sp, #4]
 800c010:	e007      	b.n	800c022 <_strtol_l.constprop.0+0xea>
 800c012:	2f00      	cmp	r7, #0
 800c014:	d000      	beq.n	800c018 <_strtol_l.constprop.0+0xe0>
 800c016:	4240      	negs	r0, r0
 800c018:	9b02      	ldr	r3, [sp, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d0e2      	beq.n	800bfe4 <_strtol_l.constprop.0+0xac>
 800c01e:	2a00      	cmp	r2, #0
 800c020:	d1f4      	bne.n	800c00c <_strtol_l.constprop.0+0xd4>
 800c022:	9b02      	ldr	r3, [sp, #8]
 800c024:	9a01      	ldr	r2, [sp, #4]
 800c026:	601a      	str	r2, [r3, #0]
 800c028:	e7dc      	b.n	800bfe4 <_strtol_l.constprop.0+0xac>
 800c02a:	2430      	movs	r4, #48	; 0x30
 800c02c:	2e00      	cmp	r6, #0
 800c02e:	d1ae      	bne.n	800bf8e <_strtol_l.constprop.0+0x56>
 800c030:	3608      	adds	r6, #8
 800c032:	e7ac      	b.n	800bf8e <_strtol_l.constprop.0+0x56>
 800c034:	2c30      	cmp	r4, #48	; 0x30
 800c036:	d0a2      	beq.n	800bf7e <_strtol_l.constprop.0+0x46>
 800c038:	260a      	movs	r6, #10
 800c03a:	e7a8      	b.n	800bf8e <_strtol_l.constprop.0+0x56>
 800c03c:	08014871 	.word	0x08014871
 800c040:	7fffffff 	.word	0x7fffffff

0800c044 <_strtol_r>:
 800c044:	b510      	push	{r4, lr}
 800c046:	f7ff ff77 	bl	800bf38 <_strtol_l.constprop.0>
 800c04a:	bd10      	pop	{r4, pc}

0800c04c <strtol>:
 800c04c:	b510      	push	{r4, lr}
 800c04e:	4c04      	ldr	r4, [pc, #16]	; (800c060 <strtol+0x14>)
 800c050:	0013      	movs	r3, r2
 800c052:	000a      	movs	r2, r1
 800c054:	0001      	movs	r1, r0
 800c056:	6820      	ldr	r0, [r4, #0]
 800c058:	f7ff ff6e 	bl	800bf38 <_strtol_l.constprop.0>
 800c05c:	bd10      	pop	{r4, pc}
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	200006d8 	.word	0x200006d8

0800c064 <std>:
 800c064:	2300      	movs	r3, #0
 800c066:	b510      	push	{r4, lr}
 800c068:	0004      	movs	r4, r0
 800c06a:	6003      	str	r3, [r0, #0]
 800c06c:	6043      	str	r3, [r0, #4]
 800c06e:	6083      	str	r3, [r0, #8]
 800c070:	8181      	strh	r1, [r0, #12]
 800c072:	6643      	str	r3, [r0, #100]	; 0x64
 800c074:	81c2      	strh	r2, [r0, #14]
 800c076:	6103      	str	r3, [r0, #16]
 800c078:	6143      	str	r3, [r0, #20]
 800c07a:	6183      	str	r3, [r0, #24]
 800c07c:	0019      	movs	r1, r3
 800c07e:	2208      	movs	r2, #8
 800c080:	305c      	adds	r0, #92	; 0x5c
 800c082:	f000 f97d 	bl	800c380 <memset>
 800c086:	4b0b      	ldr	r3, [pc, #44]	; (800c0b4 <std+0x50>)
 800c088:	61e4      	str	r4, [r4, #28]
 800c08a:	6223      	str	r3, [r4, #32]
 800c08c:	4b0a      	ldr	r3, [pc, #40]	; (800c0b8 <std+0x54>)
 800c08e:	6263      	str	r3, [r4, #36]	; 0x24
 800c090:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <std+0x58>)
 800c092:	62a3      	str	r3, [r4, #40]	; 0x28
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <std+0x5c>)
 800c096:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c098:	4b0a      	ldr	r3, [pc, #40]	; (800c0c4 <std+0x60>)
 800c09a:	429c      	cmp	r4, r3
 800c09c:	d005      	beq.n	800c0aa <std+0x46>
 800c09e:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <std+0x64>)
 800c0a0:	429c      	cmp	r4, r3
 800c0a2:	d002      	beq.n	800c0aa <std+0x46>
 800c0a4:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <std+0x68>)
 800c0a6:	429c      	cmp	r4, r3
 800c0a8:	d103      	bne.n	800c0b2 <std+0x4e>
 800c0aa:	0020      	movs	r0, r4
 800c0ac:	3058      	adds	r0, #88	; 0x58
 800c0ae:	f000 fa3d 	bl	800c52c <__retarget_lock_init_recursive>
 800c0b2:	bd10      	pop	{r4, pc}
 800c0b4:	0800c2e5 	.word	0x0800c2e5
 800c0b8:	0800c311 	.word	0x0800c311
 800c0bc:	0800c349 	.word	0x0800c349
 800c0c0:	0800c375 	.word	0x0800c375
 800c0c4:	20000bf4 	.word	0x20000bf4
 800c0c8:	20000c5c 	.word	0x20000c5c
 800c0cc:	20000cc4 	.word	0x20000cc4

0800c0d0 <stdio_exit_handler>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	4a03      	ldr	r2, [pc, #12]	; (800c0e0 <stdio_exit_handler+0x10>)
 800c0d4:	4903      	ldr	r1, [pc, #12]	; (800c0e4 <stdio_exit_handler+0x14>)
 800c0d6:	4804      	ldr	r0, [pc, #16]	; (800c0e8 <stdio_exit_handler+0x18>)
 800c0d8:	f000 f86c 	bl	800c1b4 <_fwalk_sglue>
 800c0dc:	bd10      	pop	{r4, pc}
 800c0de:	46c0      	nop			; (mov r8, r8)
 800c0e0:	20000440 	.word	0x20000440
 800c0e4:	0801002d 	.word	0x0801002d
 800c0e8:	200005b8 	.word	0x200005b8

0800c0ec <cleanup_stdio>:
 800c0ec:	6841      	ldr	r1, [r0, #4]
 800c0ee:	4b0b      	ldr	r3, [pc, #44]	; (800c11c <cleanup_stdio+0x30>)
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	0004      	movs	r4, r0
 800c0f4:	4299      	cmp	r1, r3
 800c0f6:	d001      	beq.n	800c0fc <cleanup_stdio+0x10>
 800c0f8:	f003 ff98 	bl	801002c <_fclose_r>
 800c0fc:	68a1      	ldr	r1, [r4, #8]
 800c0fe:	4b08      	ldr	r3, [pc, #32]	; (800c120 <cleanup_stdio+0x34>)
 800c100:	4299      	cmp	r1, r3
 800c102:	d002      	beq.n	800c10a <cleanup_stdio+0x1e>
 800c104:	0020      	movs	r0, r4
 800c106:	f003 ff91 	bl	801002c <_fclose_r>
 800c10a:	68e1      	ldr	r1, [r4, #12]
 800c10c:	4b05      	ldr	r3, [pc, #20]	; (800c124 <cleanup_stdio+0x38>)
 800c10e:	4299      	cmp	r1, r3
 800c110:	d002      	beq.n	800c118 <cleanup_stdio+0x2c>
 800c112:	0020      	movs	r0, r4
 800c114:	f003 ff8a 	bl	801002c <_fclose_r>
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	46c0      	nop			; (mov r8, r8)
 800c11c:	20000bf4 	.word	0x20000bf4
 800c120:	20000c5c 	.word	0x20000c5c
 800c124:	20000cc4 	.word	0x20000cc4

0800c128 <global_stdio_init.part.0>:
 800c128:	b510      	push	{r4, lr}
 800c12a:	4b09      	ldr	r3, [pc, #36]	; (800c150 <global_stdio_init.part.0+0x28>)
 800c12c:	4a09      	ldr	r2, [pc, #36]	; (800c154 <global_stdio_init.part.0+0x2c>)
 800c12e:	2104      	movs	r1, #4
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	4809      	ldr	r0, [pc, #36]	; (800c158 <global_stdio_init.part.0+0x30>)
 800c134:	2200      	movs	r2, #0
 800c136:	f7ff ff95 	bl	800c064 <std>
 800c13a:	2201      	movs	r2, #1
 800c13c:	2109      	movs	r1, #9
 800c13e:	4807      	ldr	r0, [pc, #28]	; (800c15c <global_stdio_init.part.0+0x34>)
 800c140:	f7ff ff90 	bl	800c064 <std>
 800c144:	2202      	movs	r2, #2
 800c146:	2112      	movs	r1, #18
 800c148:	4805      	ldr	r0, [pc, #20]	; (800c160 <global_stdio_init.part.0+0x38>)
 800c14a:	f7ff ff8b 	bl	800c064 <std>
 800c14e:	bd10      	pop	{r4, pc}
 800c150:	20000d2c 	.word	0x20000d2c
 800c154:	0800c0d1 	.word	0x0800c0d1
 800c158:	20000bf4 	.word	0x20000bf4
 800c15c:	20000c5c 	.word	0x20000c5c
 800c160:	20000cc4 	.word	0x20000cc4

0800c164 <__sfp_lock_acquire>:
 800c164:	b510      	push	{r4, lr}
 800c166:	4802      	ldr	r0, [pc, #8]	; (800c170 <__sfp_lock_acquire+0xc>)
 800c168:	f000 f9e2 	bl	800c530 <__retarget_lock_acquire_recursive>
 800c16c:	bd10      	pop	{r4, pc}
 800c16e:	46c0      	nop			; (mov r8, r8)
 800c170:	20000d36 	.word	0x20000d36

0800c174 <__sfp_lock_release>:
 800c174:	b510      	push	{r4, lr}
 800c176:	4802      	ldr	r0, [pc, #8]	; (800c180 <__sfp_lock_release+0xc>)
 800c178:	f000 f9db 	bl	800c532 <__retarget_lock_release_recursive>
 800c17c:	bd10      	pop	{r4, pc}
 800c17e:	46c0      	nop			; (mov r8, r8)
 800c180:	20000d36 	.word	0x20000d36

0800c184 <__sinit>:
 800c184:	b510      	push	{r4, lr}
 800c186:	0004      	movs	r4, r0
 800c188:	f7ff ffec 	bl	800c164 <__sfp_lock_acquire>
 800c18c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <__sinit+0x14>
 800c192:	f7ff ffef 	bl	800c174 <__sfp_lock_release>
 800c196:	bd10      	pop	{r4, pc}
 800c198:	4b04      	ldr	r3, [pc, #16]	; (800c1ac <__sinit+0x28>)
 800c19a:	6363      	str	r3, [r4, #52]	; 0x34
 800c19c:	4b04      	ldr	r3, [pc, #16]	; (800c1b0 <__sinit+0x2c>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1f6      	bne.n	800c192 <__sinit+0xe>
 800c1a4:	f7ff ffc0 	bl	800c128 <global_stdio_init.part.0>
 800c1a8:	e7f3      	b.n	800c192 <__sinit+0xe>
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	0800c0ed 	.word	0x0800c0ed
 800c1b0:	20000d2c 	.word	0x20000d2c

0800c1b4 <_fwalk_sglue>:
 800c1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1b6:	0014      	movs	r4, r2
 800c1b8:	2600      	movs	r6, #0
 800c1ba:	9000      	str	r0, [sp, #0]
 800c1bc:	9101      	str	r1, [sp, #4]
 800c1be:	68a5      	ldr	r5, [r4, #8]
 800c1c0:	6867      	ldr	r7, [r4, #4]
 800c1c2:	3f01      	subs	r7, #1
 800c1c4:	d504      	bpl.n	800c1d0 <_fwalk_sglue+0x1c>
 800c1c6:	6824      	ldr	r4, [r4, #0]
 800c1c8:	2c00      	cmp	r4, #0
 800c1ca:	d1f8      	bne.n	800c1be <_fwalk_sglue+0xa>
 800c1cc:	0030      	movs	r0, r6
 800c1ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1d0:	89ab      	ldrh	r3, [r5, #12]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d908      	bls.n	800c1e8 <_fwalk_sglue+0x34>
 800c1d6:	220e      	movs	r2, #14
 800c1d8:	5eab      	ldrsh	r3, [r5, r2]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	d004      	beq.n	800c1e8 <_fwalk_sglue+0x34>
 800c1de:	0029      	movs	r1, r5
 800c1e0:	9800      	ldr	r0, [sp, #0]
 800c1e2:	9b01      	ldr	r3, [sp, #4]
 800c1e4:	4798      	blx	r3
 800c1e6:	4306      	orrs	r6, r0
 800c1e8:	3568      	adds	r5, #104	; 0x68
 800c1ea:	e7ea      	b.n	800c1c2 <_fwalk_sglue+0xe>

0800c1ec <snprintf>:
 800c1ec:	b40c      	push	{r2, r3}
 800c1ee:	b530      	push	{r4, r5, lr}
 800c1f0:	4b17      	ldr	r3, [pc, #92]	; (800c250 <snprintf+0x64>)
 800c1f2:	000c      	movs	r4, r1
 800c1f4:	681d      	ldr	r5, [r3, #0]
 800c1f6:	b09d      	sub	sp, #116	; 0x74
 800c1f8:	2900      	cmp	r1, #0
 800c1fa:	da08      	bge.n	800c20e <snprintf+0x22>
 800c1fc:	238b      	movs	r3, #139	; 0x8b
 800c1fe:	2001      	movs	r0, #1
 800c200:	602b      	str	r3, [r5, #0]
 800c202:	4240      	negs	r0, r0
 800c204:	b01d      	add	sp, #116	; 0x74
 800c206:	bc30      	pop	{r4, r5}
 800c208:	bc08      	pop	{r3}
 800c20a:	b002      	add	sp, #8
 800c20c:	4718      	bx	r3
 800c20e:	2382      	movs	r3, #130	; 0x82
 800c210:	466a      	mov	r2, sp
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	8293      	strh	r3, [r2, #20]
 800c216:	2300      	movs	r3, #0
 800c218:	9002      	str	r0, [sp, #8]
 800c21a:	9006      	str	r0, [sp, #24]
 800c21c:	4299      	cmp	r1, r3
 800c21e:	d000      	beq.n	800c222 <snprintf+0x36>
 800c220:	1e4b      	subs	r3, r1, #1
 800c222:	9304      	str	r3, [sp, #16]
 800c224:	9307      	str	r3, [sp, #28]
 800c226:	2301      	movs	r3, #1
 800c228:	466a      	mov	r2, sp
 800c22a:	425b      	negs	r3, r3
 800c22c:	82d3      	strh	r3, [r2, #22]
 800c22e:	0028      	movs	r0, r5
 800c230:	ab21      	add	r3, sp, #132	; 0x84
 800c232:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c234:	a902      	add	r1, sp, #8
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	f001 fa9a 	bl	800d770 <_svfprintf_r>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	da01      	bge.n	800c244 <snprintf+0x58>
 800c240:	238b      	movs	r3, #139	; 0x8b
 800c242:	602b      	str	r3, [r5, #0]
 800c244:	2c00      	cmp	r4, #0
 800c246:	d0dd      	beq.n	800c204 <snprintf+0x18>
 800c248:	2200      	movs	r2, #0
 800c24a:	9b02      	ldr	r3, [sp, #8]
 800c24c:	701a      	strb	r2, [r3, #0]
 800c24e:	e7d9      	b.n	800c204 <snprintf+0x18>
 800c250:	200006d8 	.word	0x200006d8

0800c254 <sprintf>:
 800c254:	b40e      	push	{r1, r2, r3}
 800c256:	b500      	push	{lr}
 800c258:	490b      	ldr	r1, [pc, #44]	; (800c288 <sprintf+0x34>)
 800c25a:	b09c      	sub	sp, #112	; 0x70
 800c25c:	ab1d      	add	r3, sp, #116	; 0x74
 800c25e:	9002      	str	r0, [sp, #8]
 800c260:	9006      	str	r0, [sp, #24]
 800c262:	9107      	str	r1, [sp, #28]
 800c264:	9104      	str	r1, [sp, #16]
 800c266:	4809      	ldr	r0, [pc, #36]	; (800c28c <sprintf+0x38>)
 800c268:	4909      	ldr	r1, [pc, #36]	; (800c290 <sprintf+0x3c>)
 800c26a:	cb04      	ldmia	r3!, {r2}
 800c26c:	9105      	str	r1, [sp, #20]
 800c26e:	6800      	ldr	r0, [r0, #0]
 800c270:	a902      	add	r1, sp, #8
 800c272:	9301      	str	r3, [sp, #4]
 800c274:	f001 fa7c 	bl	800d770 <_svfprintf_r>
 800c278:	2200      	movs	r2, #0
 800c27a:	9b02      	ldr	r3, [sp, #8]
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	b01c      	add	sp, #112	; 0x70
 800c280:	bc08      	pop	{r3}
 800c282:	b003      	add	sp, #12
 800c284:	4718      	bx	r3
 800c286:	46c0      	nop			; (mov r8, r8)
 800c288:	7fffffff 	.word	0x7fffffff
 800c28c:	200006d8 	.word	0x200006d8
 800c290:	ffff0208 	.word	0xffff0208

0800c294 <sscanf>:
 800c294:	b40e      	push	{r1, r2, r3}
 800c296:	b530      	push	{r4, r5, lr}
 800c298:	2381      	movs	r3, #129	; 0x81
 800c29a:	b09c      	sub	sp, #112	; 0x70
 800c29c:	466a      	mov	r2, sp
 800c29e:	ac1f      	add	r4, sp, #124	; 0x7c
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	cc20      	ldmia	r4!, {r5}
 800c2a4:	8293      	strh	r3, [r2, #20]
 800c2a6:	9002      	str	r0, [sp, #8]
 800c2a8:	9006      	str	r0, [sp, #24]
 800c2aa:	f7f3 ff2b 	bl	8000104 <strlen>
 800c2ae:	4b0b      	ldr	r3, [pc, #44]	; (800c2dc <sscanf+0x48>)
 800c2b0:	466a      	mov	r2, sp
 800c2b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9003      	str	r0, [sp, #12]
 800c2b8:	9007      	str	r0, [sp, #28]
 800c2ba:	4809      	ldr	r0, [pc, #36]	; (800c2e0 <sscanf+0x4c>)
 800c2bc:	930e      	str	r3, [sp, #56]	; 0x38
 800c2be:	9313      	str	r3, [sp, #76]	; 0x4c
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	82d3      	strh	r3, [r2, #22]
 800c2c4:	a902      	add	r1, sp, #8
 800c2c6:	0023      	movs	r3, r4
 800c2c8:	002a      	movs	r2, r5
 800c2ca:	6800      	ldr	r0, [r0, #0]
 800c2cc:	9401      	str	r4, [sp, #4]
 800c2ce:	f002 fc91 	bl	800ebf4 <__ssvfscanf_r>
 800c2d2:	b01c      	add	sp, #112	; 0x70
 800c2d4:	bc30      	pop	{r4, r5}
 800c2d6:	bc08      	pop	{r3}
 800c2d8:	b003      	add	sp, #12
 800c2da:	4718      	bx	r3
 800c2dc:	0800c30d 	.word	0x0800c30d
 800c2e0:	200006d8 	.word	0x200006d8

0800c2e4 <__sread>:
 800c2e4:	b570      	push	{r4, r5, r6, lr}
 800c2e6:	000c      	movs	r4, r1
 800c2e8:	250e      	movs	r5, #14
 800c2ea:	5f49      	ldrsh	r1, [r1, r5]
 800c2ec:	f000 f8ba 	bl	800c464 <_read_r>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	db03      	blt.n	800c2fc <__sread+0x18>
 800c2f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c2f6:	181b      	adds	r3, r3, r0
 800c2f8:	6523      	str	r3, [r4, #80]	; 0x50
 800c2fa:	bd70      	pop	{r4, r5, r6, pc}
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	4a02      	ldr	r2, [pc, #8]	; (800c308 <__sread+0x24>)
 800c300:	4013      	ands	r3, r2
 800c302:	81a3      	strh	r3, [r4, #12]
 800c304:	e7f9      	b.n	800c2fa <__sread+0x16>
 800c306:	46c0      	nop			; (mov r8, r8)
 800c308:	ffffefff 	.word	0xffffefff

0800c30c <__seofread>:
 800c30c:	2000      	movs	r0, #0
 800c30e:	4770      	bx	lr

0800c310 <__swrite>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	001f      	movs	r7, r3
 800c314:	898b      	ldrh	r3, [r1, #12]
 800c316:	0005      	movs	r5, r0
 800c318:	000c      	movs	r4, r1
 800c31a:	0016      	movs	r6, r2
 800c31c:	05db      	lsls	r3, r3, #23
 800c31e:	d505      	bpl.n	800c32c <__swrite+0x1c>
 800c320:	230e      	movs	r3, #14
 800c322:	5ec9      	ldrsh	r1, [r1, r3]
 800c324:	2200      	movs	r2, #0
 800c326:	2302      	movs	r3, #2
 800c328:	f000 f888 	bl	800c43c <_lseek_r>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	4a05      	ldr	r2, [pc, #20]	; (800c344 <__swrite+0x34>)
 800c330:	0028      	movs	r0, r5
 800c332:	4013      	ands	r3, r2
 800c334:	81a3      	strh	r3, [r4, #12]
 800c336:	0032      	movs	r2, r6
 800c338:	230e      	movs	r3, #14
 800c33a:	5ee1      	ldrsh	r1, [r4, r3]
 800c33c:	003b      	movs	r3, r7
 800c33e:	f000 f8b7 	bl	800c4b0 <_write_r>
 800c342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c344:	ffffefff 	.word	0xffffefff

0800c348 <__sseek>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	000c      	movs	r4, r1
 800c34c:	250e      	movs	r5, #14
 800c34e:	5f49      	ldrsh	r1, [r1, r5]
 800c350:	f000 f874 	bl	800c43c <_lseek_r>
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	1c42      	adds	r2, r0, #1
 800c358:	d103      	bne.n	800c362 <__sseek+0x1a>
 800c35a:	4a05      	ldr	r2, [pc, #20]	; (800c370 <__sseek+0x28>)
 800c35c:	4013      	ands	r3, r2
 800c35e:	81a3      	strh	r3, [r4, #12]
 800c360:	bd70      	pop	{r4, r5, r6, pc}
 800c362:	2280      	movs	r2, #128	; 0x80
 800c364:	0152      	lsls	r2, r2, #5
 800c366:	4313      	orrs	r3, r2
 800c368:	81a3      	strh	r3, [r4, #12]
 800c36a:	6520      	str	r0, [r4, #80]	; 0x50
 800c36c:	e7f8      	b.n	800c360 <__sseek+0x18>
 800c36e:	46c0      	nop			; (mov r8, r8)
 800c370:	ffffefff 	.word	0xffffefff

0800c374 <__sclose>:
 800c374:	b510      	push	{r4, lr}
 800c376:	230e      	movs	r3, #14
 800c378:	5ec9      	ldrsh	r1, [r1, r3]
 800c37a:	f000 f84d 	bl	800c418 <_close_r>
 800c37e:	bd10      	pop	{r4, pc}

0800c380 <memset>:
 800c380:	0003      	movs	r3, r0
 800c382:	1882      	adds	r2, r0, r2
 800c384:	4293      	cmp	r3, r2
 800c386:	d100      	bne.n	800c38a <memset+0xa>
 800c388:	4770      	bx	lr
 800c38a:	7019      	strb	r1, [r3, #0]
 800c38c:	3301      	adds	r3, #1
 800c38e:	e7f9      	b.n	800c384 <memset+0x4>

0800c390 <strncmp>:
 800c390:	b530      	push	{r4, r5, lr}
 800c392:	0005      	movs	r5, r0
 800c394:	1e10      	subs	r0, r2, #0
 800c396:	d00b      	beq.n	800c3b0 <strncmp+0x20>
 800c398:	2400      	movs	r4, #0
 800c39a:	3a01      	subs	r2, #1
 800c39c:	5d2b      	ldrb	r3, [r5, r4]
 800c39e:	5d08      	ldrb	r0, [r1, r4]
 800c3a0:	4283      	cmp	r3, r0
 800c3a2:	d104      	bne.n	800c3ae <strncmp+0x1e>
 800c3a4:	42a2      	cmp	r2, r4
 800c3a6:	d002      	beq.n	800c3ae <strncmp+0x1e>
 800c3a8:	3401      	adds	r4, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1f6      	bne.n	800c39c <strncmp+0xc>
 800c3ae:	1a18      	subs	r0, r3, r0
 800c3b0:	bd30      	pop	{r4, r5, pc}

0800c3b2 <strncpy>:
 800c3b2:	0003      	movs	r3, r0
 800c3b4:	b530      	push	{r4, r5, lr}
 800c3b6:	001d      	movs	r5, r3
 800c3b8:	2a00      	cmp	r2, #0
 800c3ba:	d006      	beq.n	800c3ca <strncpy+0x18>
 800c3bc:	780c      	ldrb	r4, [r1, #0]
 800c3be:	3a01      	subs	r2, #1
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	702c      	strb	r4, [r5, #0]
 800c3c4:	3101      	adds	r1, #1
 800c3c6:	2c00      	cmp	r4, #0
 800c3c8:	d1f5      	bne.n	800c3b6 <strncpy+0x4>
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	189a      	adds	r2, r3, r2
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d100      	bne.n	800c3d4 <strncpy+0x22>
 800c3d2:	bd30      	pop	{r4, r5, pc}
 800c3d4:	7019      	strb	r1, [r3, #0]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	e7f9      	b.n	800c3ce <strncpy+0x1c>

0800c3da <strstr>:
 800c3da:	780a      	ldrb	r2, [r1, #0]
 800c3dc:	b530      	push	{r4, r5, lr}
 800c3de:	2a00      	cmp	r2, #0
 800c3e0:	d10c      	bne.n	800c3fc <strstr+0x22>
 800c3e2:	bd30      	pop	{r4, r5, pc}
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d108      	bne.n	800c3fa <strstr+0x20>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	5ccc      	ldrb	r4, [r1, r3]
 800c3ec:	2c00      	cmp	r4, #0
 800c3ee:	d0f8      	beq.n	800c3e2 <strstr+0x8>
 800c3f0:	5cc5      	ldrb	r5, [r0, r3]
 800c3f2:	42a5      	cmp	r5, r4
 800c3f4:	d101      	bne.n	800c3fa <strstr+0x20>
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	e7f7      	b.n	800c3ea <strstr+0x10>
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	7803      	ldrb	r3, [r0, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1f0      	bne.n	800c3e4 <strstr+0xa>
 800c402:	0018      	movs	r0, r3
 800c404:	e7ed      	b.n	800c3e2 <strstr+0x8>
	...

0800c408 <__locale_mb_cur_max>:
 800c408:	2294      	movs	r2, #148	; 0x94
 800c40a:	4b02      	ldr	r3, [pc, #8]	; (800c414 <__locale_mb_cur_max+0xc>)
 800c40c:	0052      	lsls	r2, r2, #1
 800c40e:	5c98      	ldrb	r0, [r3, r2]
 800c410:	4770      	bx	lr
 800c412:	46c0      	nop			; (mov r8, r8)
 800c414:	2000044c 	.word	0x2000044c

0800c418 <_close_r>:
 800c418:	2300      	movs	r3, #0
 800c41a:	b570      	push	{r4, r5, r6, lr}
 800c41c:	4d06      	ldr	r5, [pc, #24]	; (800c438 <_close_r+0x20>)
 800c41e:	0004      	movs	r4, r0
 800c420:	0008      	movs	r0, r1
 800c422:	602b      	str	r3, [r5, #0]
 800c424:	f7f7 f9a9 	bl	800377a <_close>
 800c428:	1c43      	adds	r3, r0, #1
 800c42a:	d103      	bne.n	800c434 <_close_r+0x1c>
 800c42c:	682b      	ldr	r3, [r5, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d000      	beq.n	800c434 <_close_r+0x1c>
 800c432:	6023      	str	r3, [r4, #0]
 800c434:	bd70      	pop	{r4, r5, r6, pc}
 800c436:	46c0      	nop			; (mov r8, r8)
 800c438:	20000d30 	.word	0x20000d30

0800c43c <_lseek_r>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	0004      	movs	r4, r0
 800c440:	0008      	movs	r0, r1
 800c442:	0011      	movs	r1, r2
 800c444:	001a      	movs	r2, r3
 800c446:	2300      	movs	r3, #0
 800c448:	4d05      	ldr	r5, [pc, #20]	; (800c460 <_lseek_r+0x24>)
 800c44a:	602b      	str	r3, [r5, #0]
 800c44c:	f7f7 f9b6 	bl	80037bc <_lseek>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d103      	bne.n	800c45c <_lseek_r+0x20>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d000      	beq.n	800c45c <_lseek_r+0x20>
 800c45a:	6023      	str	r3, [r4, #0]
 800c45c:	bd70      	pop	{r4, r5, r6, pc}
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	20000d30 	.word	0x20000d30

0800c464 <_read_r>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	0004      	movs	r4, r0
 800c468:	0008      	movs	r0, r1
 800c46a:	0011      	movs	r1, r2
 800c46c:	001a      	movs	r2, r3
 800c46e:	2300      	movs	r3, #0
 800c470:	4d05      	ldr	r5, [pc, #20]	; (800c488 <_read_r+0x24>)
 800c472:	602b      	str	r3, [r5, #0]
 800c474:	f7f7 f948 	bl	8003708 <_read>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d103      	bne.n	800c484 <_read_r+0x20>
 800c47c:	682b      	ldr	r3, [r5, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d000      	beq.n	800c484 <_read_r+0x20>
 800c482:	6023      	str	r3, [r4, #0]
 800c484:	bd70      	pop	{r4, r5, r6, pc}
 800c486:	46c0      	nop			; (mov r8, r8)
 800c488:	20000d30 	.word	0x20000d30

0800c48c <_sbrk_r>:
 800c48c:	2300      	movs	r3, #0
 800c48e:	b570      	push	{r4, r5, r6, lr}
 800c490:	4d06      	ldr	r5, [pc, #24]	; (800c4ac <_sbrk_r+0x20>)
 800c492:	0004      	movs	r4, r0
 800c494:	0008      	movs	r0, r1
 800c496:	602b      	str	r3, [r5, #0]
 800c498:	f7f7 f99c 	bl	80037d4 <_sbrk>
 800c49c:	1c43      	adds	r3, r0, #1
 800c49e:	d103      	bne.n	800c4a8 <_sbrk_r+0x1c>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d000      	beq.n	800c4a8 <_sbrk_r+0x1c>
 800c4a6:	6023      	str	r3, [r4, #0]
 800c4a8:	bd70      	pop	{r4, r5, r6, pc}
 800c4aa:	46c0      	nop			; (mov r8, r8)
 800c4ac:	20000d30 	.word	0x20000d30

0800c4b0 <_write_r>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	0004      	movs	r4, r0
 800c4b4:	0008      	movs	r0, r1
 800c4b6:	0011      	movs	r1, r2
 800c4b8:	001a      	movs	r2, r3
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	4d05      	ldr	r5, [pc, #20]	; (800c4d4 <_write_r+0x24>)
 800c4be:	602b      	str	r3, [r5, #0]
 800c4c0:	f7f7 f93f 	bl	8003742 <_write>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d103      	bne.n	800c4d0 <_write_r+0x20>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d000      	beq.n	800c4d0 <_write_r+0x20>
 800c4ce:	6023      	str	r3, [r4, #0]
 800c4d0:	bd70      	pop	{r4, r5, r6, pc}
 800c4d2:	46c0      	nop			; (mov r8, r8)
 800c4d4:	20000d30 	.word	0x20000d30

0800c4d8 <__errno>:
 800c4d8:	4b01      	ldr	r3, [pc, #4]	; (800c4e0 <__errno+0x8>)
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	4770      	bx	lr
 800c4de:	46c0      	nop			; (mov r8, r8)
 800c4e0:	200006d8 	.word	0x200006d8

0800c4e4 <__libc_init_array>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	2600      	movs	r6, #0
 800c4e8:	4c0c      	ldr	r4, [pc, #48]	; (800c51c <__libc_init_array+0x38>)
 800c4ea:	4d0d      	ldr	r5, [pc, #52]	; (800c520 <__libc_init_array+0x3c>)
 800c4ec:	1b64      	subs	r4, r4, r5
 800c4ee:	10a4      	asrs	r4, r4, #2
 800c4f0:	42a6      	cmp	r6, r4
 800c4f2:	d109      	bne.n	800c508 <__libc_init_array+0x24>
 800c4f4:	2600      	movs	r6, #0
 800c4f6:	f006 fcc5 	bl	8012e84 <_init>
 800c4fa:	4c0a      	ldr	r4, [pc, #40]	; (800c524 <__libc_init_array+0x40>)
 800c4fc:	4d0a      	ldr	r5, [pc, #40]	; (800c528 <__libc_init_array+0x44>)
 800c4fe:	1b64      	subs	r4, r4, r5
 800c500:	10a4      	asrs	r4, r4, #2
 800c502:	42a6      	cmp	r6, r4
 800c504:	d105      	bne.n	800c512 <__libc_init_array+0x2e>
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	00b3      	lsls	r3, r6, #2
 800c50a:	58eb      	ldr	r3, [r5, r3]
 800c50c:	4798      	blx	r3
 800c50e:	3601      	adds	r6, #1
 800c510:	e7ee      	b.n	800c4f0 <__libc_init_array+0xc>
 800c512:	00b3      	lsls	r3, r6, #2
 800c514:	58eb      	ldr	r3, [r5, r3]
 800c516:	4798      	blx	r3
 800c518:	3601      	adds	r6, #1
 800c51a:	e7f2      	b.n	800c502 <__libc_init_array+0x1e>
 800c51c:	08014c8c 	.word	0x08014c8c
 800c520:	08014c8c 	.word	0x08014c8c
 800c524:	08014c94 	.word	0x08014c94
 800c528:	08014c8c 	.word	0x08014c8c

0800c52c <__retarget_lock_init_recursive>:
 800c52c:	4770      	bx	lr

0800c52e <__retarget_lock_close_recursive>:
 800c52e:	4770      	bx	lr

0800c530 <__retarget_lock_acquire_recursive>:
 800c530:	4770      	bx	lr

0800c532 <__retarget_lock_release_recursive>:
 800c532:	4770      	bx	lr

0800c534 <sysconf>:
 800c534:	2380      	movs	r3, #128	; 0x80
 800c536:	b510      	push	{r4, lr}
 800c538:	2808      	cmp	r0, #8
 800c53a:	d004      	beq.n	800c546 <sysconf+0x12>
 800c53c:	f7ff ffcc 	bl	800c4d8 <__errno>
 800c540:	2316      	movs	r3, #22
 800c542:	6003      	str	r3, [r0, #0]
 800c544:	3b17      	subs	r3, #23
 800c546:	0018      	movs	r0, r3
 800c548:	bd10      	pop	{r4, pc}

0800c54a <memcpy>:
 800c54a:	2300      	movs	r3, #0
 800c54c:	b510      	push	{r4, lr}
 800c54e:	429a      	cmp	r2, r3
 800c550:	d100      	bne.n	800c554 <memcpy+0xa>
 800c552:	bd10      	pop	{r4, pc}
 800c554:	5ccc      	ldrb	r4, [r1, r3]
 800c556:	54c4      	strb	r4, [r0, r3]
 800c558:	3301      	adds	r3, #1
 800c55a:	e7f8      	b.n	800c54e <memcpy+0x4>

0800c55c <nan>:
 800c55c:	2000      	movs	r0, #0
 800c55e:	4901      	ldr	r1, [pc, #4]	; (800c564 <nan+0x8>)
 800c560:	4770      	bx	lr
 800c562:	46c0      	nop			; (mov r8, r8)
 800c564:	7ff80000 	.word	0x7ff80000

0800c568 <nanf>:
 800c568:	4800      	ldr	r0, [pc, #0]	; (800c56c <nanf+0x4>)
 800c56a:	4770      	bx	lr
 800c56c:	7fc00000 	.word	0x7fc00000

0800c570 <register_fini>:
 800c570:	4b03      	ldr	r3, [pc, #12]	; (800c580 <register_fini+0x10>)
 800c572:	b510      	push	{r4, lr}
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <register_fini+0xe>
 800c578:	4802      	ldr	r0, [pc, #8]	; (800c584 <register_fini+0x14>)
 800c57a:	f000 f805 	bl	800c588 <atexit>
 800c57e:	bd10      	pop	{r4, pc}
 800c580:	00000000 	.word	0x00000000
 800c584:	080102e5 	.word	0x080102e5

0800c588 <atexit>:
 800c588:	2300      	movs	r3, #0
 800c58a:	b510      	push	{r4, lr}
 800c58c:	0001      	movs	r1, r0
 800c58e:	001a      	movs	r2, r3
 800c590:	0018      	movs	r0, r3
 800c592:	f003 fef9 	bl	8010388 <__register_exitproc>
 800c596:	bd10      	pop	{r4, pc}

0800c598 <_malloc_trim_r>:
 800c598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c59a:	0004      	movs	r4, r0
 800c59c:	2008      	movs	r0, #8
 800c59e:	000d      	movs	r5, r1
 800c5a0:	f7ff ffc8 	bl	800c534 <sysconf>
 800c5a4:	0006      	movs	r6, r0
 800c5a6:	0020      	movs	r0, r4
 800c5a8:	f7fe fe7e 	bl	800b2a8 <__malloc_lock>
 800c5ac:	2203      	movs	r2, #3
 800c5ae:	4f21      	ldr	r7, [pc, #132]	; (800c634 <_malloc_trim_r+0x9c>)
 800c5b0:	0031      	movs	r1, r6
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	4393      	bics	r3, r2
 800c5b8:	1b58      	subs	r0, r3, r5
 800c5ba:	3811      	subs	r0, #17
 800c5bc:	1980      	adds	r0, r0, r6
 800c5be:	9301      	str	r3, [sp, #4]
 800c5c0:	f7f3 fdbc 	bl	800013c <__udivsi3>
 800c5c4:	1e45      	subs	r5, r0, #1
 800c5c6:	4375      	muls	r5, r6
 800c5c8:	42ae      	cmp	r6, r5
 800c5ca:	dd04      	ble.n	800c5d6 <_malloc_trim_r+0x3e>
 800c5cc:	0020      	movs	r0, r4
 800c5ce:	f7fe fe73 	bl	800b2b8 <__malloc_unlock>
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	0020      	movs	r0, r4
 800c5da:	f7ff ff57 	bl	800c48c <_sbrk_r>
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	9a01      	ldr	r2, [sp, #4]
 800c5e2:	189b      	adds	r3, r3, r2
 800c5e4:	4298      	cmp	r0, r3
 800c5e6:	d1f1      	bne.n	800c5cc <_malloc_trim_r+0x34>
 800c5e8:	0020      	movs	r0, r4
 800c5ea:	4269      	negs	r1, r5
 800c5ec:	f7ff ff4e 	bl	800c48c <_sbrk_r>
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	d110      	bne.n	800c616 <_malloc_trim_r+0x7e>
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	0020      	movs	r0, r4
 800c5f8:	f7ff ff48 	bl	800c48c <_sbrk_r>
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	1a81      	subs	r1, r0, r2
 800c600:	290f      	cmp	r1, #15
 800c602:	dde3      	ble.n	800c5cc <_malloc_trim_r+0x34>
 800c604:	4d0c      	ldr	r5, [pc, #48]	; (800c638 <_malloc_trim_r+0xa0>)
 800c606:	4b0d      	ldr	r3, [pc, #52]	; (800c63c <_malloc_trim_r+0xa4>)
 800c608:	682d      	ldr	r5, [r5, #0]
 800c60a:	1b40      	subs	r0, r0, r5
 800c60c:	6018      	str	r0, [r3, #0]
 800c60e:	2301      	movs	r3, #1
 800c610:	430b      	orrs	r3, r1
 800c612:	6053      	str	r3, [r2, #4]
 800c614:	e7da      	b.n	800c5cc <_malloc_trim_r+0x34>
 800c616:	2601      	movs	r6, #1
 800c618:	9b01      	ldr	r3, [sp, #4]
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	1b5b      	subs	r3, r3, r5
 800c61e:	4333      	orrs	r3, r6
 800c620:	6053      	str	r3, [r2, #4]
 800c622:	4a06      	ldr	r2, [pc, #24]	; (800c63c <_malloc_trim_r+0xa4>)
 800c624:	0020      	movs	r0, r4
 800c626:	6813      	ldr	r3, [r2, #0]
 800c628:	1b5b      	subs	r3, r3, r5
 800c62a:	6013      	str	r3, [r2, #0]
 800c62c:	f7fe fe44 	bl	800b2b8 <__malloc_unlock>
 800c630:	0030      	movs	r0, r6
 800c632:	e7cf      	b.n	800c5d4 <_malloc_trim_r+0x3c>
 800c634:	20000030 	.word	0x20000030
 800c638:	20000438 	.word	0x20000438
 800c63c:	20000bc0 	.word	0x20000bc0

0800c640 <_free_r>:
 800c640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c642:	1e0d      	subs	r5, r1, #0
 800c644:	9001      	str	r0, [sp, #4]
 800c646:	d02d      	beq.n	800c6a4 <_free_r+0x64>
 800c648:	f7fe fe2e 	bl	800b2a8 <__malloc_lock>
 800c64c:	2301      	movs	r3, #1
 800c64e:	0029      	movs	r1, r5
 800c650:	469c      	mov	ip, r3
 800c652:	3908      	subs	r1, #8
 800c654:	684f      	ldr	r7, [r1, #4]
 800c656:	4662      	mov	r2, ip
 800c658:	003b      	movs	r3, r7
 800c65a:	4664      	mov	r4, ip
 800c65c:	4393      	bics	r3, r2
 800c65e:	18c8      	adds	r0, r1, r3
 800c660:	6845      	ldr	r5, [r0, #4]
 800c662:	3202      	adds	r2, #2
 800c664:	4395      	bics	r5, r2
 800c666:	4a4a      	ldr	r2, [pc, #296]	; (800c790 <_free_r+0x150>)
 800c668:	4027      	ands	r7, r4
 800c66a:	6896      	ldr	r6, [r2, #8]
 800c66c:	4286      	cmp	r6, r0
 800c66e:	d11a      	bne.n	800c6a6 <_free_r+0x66>
 800c670:	195b      	adds	r3, r3, r5
 800c672:	2f00      	cmp	r7, #0
 800c674:	d106      	bne.n	800c684 <_free_r+0x44>
 800c676:	6808      	ldr	r0, [r1, #0]
 800c678:	1a09      	subs	r1, r1, r0
 800c67a:	688d      	ldr	r5, [r1, #8]
 800c67c:	181b      	adds	r3, r3, r0
 800c67e:	68c8      	ldr	r0, [r1, #12]
 800c680:	60e8      	str	r0, [r5, #12]
 800c682:	6085      	str	r5, [r0, #8]
 800c684:	2001      	movs	r0, #1
 800c686:	4318      	orrs	r0, r3
 800c688:	6048      	str	r0, [r1, #4]
 800c68a:	6091      	str	r1, [r2, #8]
 800c68c:	4a41      	ldr	r2, [pc, #260]	; (800c794 <_free_r+0x154>)
 800c68e:	6812      	ldr	r2, [r2, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d804      	bhi.n	800c69e <_free_r+0x5e>
 800c694:	4b40      	ldr	r3, [pc, #256]	; (800c798 <_free_r+0x158>)
 800c696:	9801      	ldr	r0, [sp, #4]
 800c698:	6819      	ldr	r1, [r3, #0]
 800c69a:	f7ff ff7d 	bl	800c598 <_malloc_trim_r>
 800c69e:	9801      	ldr	r0, [sp, #4]
 800c6a0:	f7fe fe0a 	bl	800b2b8 <__malloc_unlock>
 800c6a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c6a6:	2600      	movs	r6, #0
 800c6a8:	6045      	str	r5, [r0, #4]
 800c6aa:	42b7      	cmp	r7, r6
 800c6ac:	d109      	bne.n	800c6c2 <_free_r+0x82>
 800c6ae:	680f      	ldr	r7, [r1, #0]
 800c6b0:	4c3a      	ldr	r4, [pc, #232]	; (800c79c <_free_r+0x15c>)
 800c6b2:	1bc9      	subs	r1, r1, r7
 800c6b4:	19db      	adds	r3, r3, r7
 800c6b6:	688f      	ldr	r7, [r1, #8]
 800c6b8:	42a7      	cmp	r7, r4
 800c6ba:	d02c      	beq.n	800c716 <_free_r+0xd6>
 800c6bc:	68cc      	ldr	r4, [r1, #12]
 800c6be:	60fc      	str	r4, [r7, #12]
 800c6c0:	60a7      	str	r7, [r4, #8]
 800c6c2:	1947      	adds	r7, r0, r5
 800c6c4:	687c      	ldr	r4, [r7, #4]
 800c6c6:	2701      	movs	r7, #1
 800c6c8:	423c      	tst	r4, r7
 800c6ca:	d10b      	bne.n	800c6e4 <_free_r+0xa4>
 800c6cc:	195b      	adds	r3, r3, r5
 800c6ce:	6885      	ldr	r5, [r0, #8]
 800c6d0:	2e00      	cmp	r6, #0
 800c6d2:	d122      	bne.n	800c71a <_free_r+0xda>
 800c6d4:	4c31      	ldr	r4, [pc, #196]	; (800c79c <_free_r+0x15c>)
 800c6d6:	42a5      	cmp	r5, r4
 800c6d8:	d11f      	bne.n	800c71a <_free_r+0xda>
 800c6da:	003e      	movs	r6, r7
 800c6dc:	6151      	str	r1, [r2, #20]
 800c6de:	6111      	str	r1, [r2, #16]
 800c6e0:	60cd      	str	r5, [r1, #12]
 800c6e2:	608d      	str	r5, [r1, #8]
 800c6e4:	2501      	movs	r5, #1
 800c6e6:	0028      	movs	r0, r5
 800c6e8:	4318      	orrs	r0, r3
 800c6ea:	6048      	str	r0, [r1, #4]
 800c6ec:	50cb      	str	r3, [r1, r3]
 800c6ee:	2e00      	cmp	r6, #0
 800c6f0:	d1d5      	bne.n	800c69e <_free_r+0x5e>
 800c6f2:	2080      	movs	r0, #128	; 0x80
 800c6f4:	0080      	lsls	r0, r0, #2
 800c6f6:	4283      	cmp	r3, r0
 800c6f8:	d213      	bcs.n	800c722 <_free_r+0xe2>
 800c6fa:	08d8      	lsrs	r0, r3, #3
 800c6fc:	095b      	lsrs	r3, r3, #5
 800c6fe:	409d      	lsls	r5, r3
 800c700:	6853      	ldr	r3, [r2, #4]
 800c702:	431d      	orrs	r5, r3
 800c704:	00c3      	lsls	r3, r0, #3
 800c706:	189b      	adds	r3, r3, r2
 800c708:	6055      	str	r5, [r2, #4]
 800c70a:	689a      	ldr	r2, [r3, #8]
 800c70c:	60cb      	str	r3, [r1, #12]
 800c70e:	608a      	str	r2, [r1, #8]
 800c710:	6099      	str	r1, [r3, #8]
 800c712:	60d1      	str	r1, [r2, #12]
 800c714:	e7c3      	b.n	800c69e <_free_r+0x5e>
 800c716:	4666      	mov	r6, ip
 800c718:	e7d3      	b.n	800c6c2 <_free_r+0x82>
 800c71a:	68c0      	ldr	r0, [r0, #12]
 800c71c:	60e8      	str	r0, [r5, #12]
 800c71e:	6085      	str	r5, [r0, #8]
 800c720:	e7e0      	b.n	800c6e4 <_free_r+0xa4>
 800c722:	0a5d      	lsrs	r5, r3, #9
 800c724:	2d04      	cmp	r5, #4
 800c726:	d812      	bhi.n	800c74e <_free_r+0x10e>
 800c728:	0998      	lsrs	r0, r3, #6
 800c72a:	3038      	adds	r0, #56	; 0x38
 800c72c:	00c6      	lsls	r6, r0, #3
 800c72e:	18b6      	adds	r6, r6, r2
 800c730:	68b5      	ldr	r5, [r6, #8]
 800c732:	2703      	movs	r7, #3
 800c734:	42ae      	cmp	r6, r5
 800c736:	d125      	bne.n	800c784 <_free_r+0x144>
 800c738:	2301      	movs	r3, #1
 800c73a:	1080      	asrs	r0, r0, #2
 800c73c:	4083      	lsls	r3, r0
 800c73e:	6850      	ldr	r0, [r2, #4]
 800c740:	4303      	orrs	r3, r0
 800c742:	6053      	str	r3, [r2, #4]
 800c744:	60ce      	str	r6, [r1, #12]
 800c746:	608d      	str	r5, [r1, #8]
 800c748:	60b1      	str	r1, [r6, #8]
 800c74a:	60e9      	str	r1, [r5, #12]
 800c74c:	e7a7      	b.n	800c69e <_free_r+0x5e>
 800c74e:	2d14      	cmp	r5, #20
 800c750:	d802      	bhi.n	800c758 <_free_r+0x118>
 800c752:	0028      	movs	r0, r5
 800c754:	305b      	adds	r0, #91	; 0x5b
 800c756:	e7e9      	b.n	800c72c <_free_r+0xec>
 800c758:	2d54      	cmp	r5, #84	; 0x54
 800c75a:	d802      	bhi.n	800c762 <_free_r+0x122>
 800c75c:	0b18      	lsrs	r0, r3, #12
 800c75e:	306e      	adds	r0, #110	; 0x6e
 800c760:	e7e4      	b.n	800c72c <_free_r+0xec>
 800c762:	20aa      	movs	r0, #170	; 0xaa
 800c764:	0040      	lsls	r0, r0, #1
 800c766:	4285      	cmp	r5, r0
 800c768:	d802      	bhi.n	800c770 <_free_r+0x130>
 800c76a:	0bd8      	lsrs	r0, r3, #15
 800c76c:	3077      	adds	r0, #119	; 0x77
 800c76e:	e7dd      	b.n	800c72c <_free_r+0xec>
 800c770:	4e0b      	ldr	r6, [pc, #44]	; (800c7a0 <_free_r+0x160>)
 800c772:	207e      	movs	r0, #126	; 0x7e
 800c774:	42b5      	cmp	r5, r6
 800c776:	d8d9      	bhi.n	800c72c <_free_r+0xec>
 800c778:	0c98      	lsrs	r0, r3, #18
 800c77a:	307c      	adds	r0, #124	; 0x7c
 800c77c:	e7d6      	b.n	800c72c <_free_r+0xec>
 800c77e:	68ad      	ldr	r5, [r5, #8]
 800c780:	42ae      	cmp	r6, r5
 800c782:	d003      	beq.n	800c78c <_free_r+0x14c>
 800c784:	686a      	ldr	r2, [r5, #4]
 800c786:	43ba      	bics	r2, r7
 800c788:	429a      	cmp	r2, r3
 800c78a:	d8f8      	bhi.n	800c77e <_free_r+0x13e>
 800c78c:	68ee      	ldr	r6, [r5, #12]
 800c78e:	e7d9      	b.n	800c744 <_free_r+0x104>
 800c790:	20000030 	.word	0x20000030
 800c794:	2000043c 	.word	0x2000043c
 800c798:	20000bf0 	.word	0x20000bf0
 800c79c:	20000038 	.word	0x20000038
 800c7a0:	00000554 	.word	0x00000554

0800c7a4 <rshift>:
 800c7a4:	0002      	movs	r2, r0
 800c7a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7a8:	6904      	ldr	r4, [r0, #16]
 800c7aa:	114b      	asrs	r3, r1, #5
 800c7ac:	b085      	sub	sp, #20
 800c7ae:	3214      	adds	r2, #20
 800c7b0:	9302      	str	r3, [sp, #8]
 800c7b2:	114d      	asrs	r5, r1, #5
 800c7b4:	0013      	movs	r3, r2
 800c7b6:	42ac      	cmp	r4, r5
 800c7b8:	dd32      	ble.n	800c820 <rshift+0x7c>
 800c7ba:	261f      	movs	r6, #31
 800c7bc:	000f      	movs	r7, r1
 800c7be:	114b      	asrs	r3, r1, #5
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	00a5      	lsls	r5, r4, #2
 800c7c4:	18d3      	adds	r3, r2, r3
 800c7c6:	4037      	ands	r7, r6
 800c7c8:	1955      	adds	r5, r2, r5
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	9701      	str	r7, [sp, #4]
 800c7ce:	4231      	tst	r1, r6
 800c7d0:	d10d      	bne.n	800c7ee <rshift+0x4a>
 800c7d2:	0016      	movs	r6, r2
 800c7d4:	0019      	movs	r1, r3
 800c7d6:	428d      	cmp	r5, r1
 800c7d8:	d836      	bhi.n	800c848 <rshift+0xa4>
 800c7da:	9900      	ldr	r1, [sp, #0]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	3903      	subs	r1, #3
 800c7e0:	428d      	cmp	r5, r1
 800c7e2:	d302      	bcc.n	800c7ea <rshift+0x46>
 800c7e4:	9b02      	ldr	r3, [sp, #8]
 800c7e6:	1ae4      	subs	r4, r4, r3
 800c7e8:	00a3      	lsls	r3, r4, #2
 800c7ea:	18d3      	adds	r3, r2, r3
 800c7ec:	e018      	b.n	800c820 <rshift+0x7c>
 800c7ee:	2120      	movs	r1, #32
 800c7f0:	9e01      	ldr	r6, [sp, #4]
 800c7f2:	9f01      	ldr	r7, [sp, #4]
 800c7f4:	1b89      	subs	r1, r1, r6
 800c7f6:	9e00      	ldr	r6, [sp, #0]
 800c7f8:	9103      	str	r1, [sp, #12]
 800c7fa:	ce02      	ldmia	r6!, {r1}
 800c7fc:	4694      	mov	ip, r2
 800c7fe:	40f9      	lsrs	r1, r7
 800c800:	42b5      	cmp	r5, r6
 800c802:	d816      	bhi.n	800c832 <rshift+0x8e>
 800c804:	9e00      	ldr	r6, [sp, #0]
 800c806:	2300      	movs	r3, #0
 800c808:	3601      	adds	r6, #1
 800c80a:	42b5      	cmp	r5, r6
 800c80c:	d303      	bcc.n	800c816 <rshift+0x72>
 800c80e:	9b02      	ldr	r3, [sp, #8]
 800c810:	1ae3      	subs	r3, r4, r3
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	3b04      	subs	r3, #4
 800c816:	18d3      	adds	r3, r2, r3
 800c818:	6019      	str	r1, [r3, #0]
 800c81a:	2900      	cmp	r1, #0
 800c81c:	d000      	beq.n	800c820 <rshift+0x7c>
 800c81e:	3304      	adds	r3, #4
 800c820:	1a99      	subs	r1, r3, r2
 800c822:	1089      	asrs	r1, r1, #2
 800c824:	6101      	str	r1, [r0, #16]
 800c826:	4293      	cmp	r3, r2
 800c828:	d101      	bne.n	800c82e <rshift+0x8a>
 800c82a:	2300      	movs	r3, #0
 800c82c:	6143      	str	r3, [r0, #20]
 800c82e:	b005      	add	sp, #20
 800c830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c832:	6837      	ldr	r7, [r6, #0]
 800c834:	9b03      	ldr	r3, [sp, #12]
 800c836:	409f      	lsls	r7, r3
 800c838:	430f      	orrs	r7, r1
 800c83a:	4661      	mov	r1, ip
 800c83c:	c180      	stmia	r1!, {r7}
 800c83e:	468c      	mov	ip, r1
 800c840:	9b01      	ldr	r3, [sp, #4]
 800c842:	ce02      	ldmia	r6!, {r1}
 800c844:	40d9      	lsrs	r1, r3
 800c846:	e7db      	b.n	800c800 <rshift+0x5c>
 800c848:	c980      	ldmia	r1!, {r7}
 800c84a:	c680      	stmia	r6!, {r7}
 800c84c:	e7c3      	b.n	800c7d6 <rshift+0x32>

0800c84e <__hexdig_fun>:
 800c84e:	0002      	movs	r2, r0
 800c850:	3a30      	subs	r2, #48	; 0x30
 800c852:	0003      	movs	r3, r0
 800c854:	2a09      	cmp	r2, #9
 800c856:	d802      	bhi.n	800c85e <__hexdig_fun+0x10>
 800c858:	3b20      	subs	r3, #32
 800c85a:	b2d8      	uxtb	r0, r3
 800c85c:	4770      	bx	lr
 800c85e:	0002      	movs	r2, r0
 800c860:	3a61      	subs	r2, #97	; 0x61
 800c862:	2a05      	cmp	r2, #5
 800c864:	d801      	bhi.n	800c86a <__hexdig_fun+0x1c>
 800c866:	3b47      	subs	r3, #71	; 0x47
 800c868:	e7f7      	b.n	800c85a <__hexdig_fun+0xc>
 800c86a:	001a      	movs	r2, r3
 800c86c:	3a41      	subs	r2, #65	; 0x41
 800c86e:	2000      	movs	r0, #0
 800c870:	2a05      	cmp	r2, #5
 800c872:	d8f3      	bhi.n	800c85c <__hexdig_fun+0xe>
 800c874:	3b27      	subs	r3, #39	; 0x27
 800c876:	e7f0      	b.n	800c85a <__hexdig_fun+0xc>

0800c878 <__gethex>:
 800c878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c87a:	b089      	sub	sp, #36	; 0x24
 800c87c:	9307      	str	r3, [sp, #28]
 800c87e:	2302      	movs	r3, #2
 800c880:	9201      	str	r2, [sp, #4]
 800c882:	680a      	ldr	r2, [r1, #0]
 800c884:	425b      	negs	r3, r3
 800c886:	9003      	str	r0, [sp, #12]
 800c888:	9106      	str	r1, [sp, #24]
 800c88a:	1c96      	adds	r6, r2, #2
 800c88c:	1a9b      	subs	r3, r3, r2
 800c88e:	199a      	adds	r2, r3, r6
 800c890:	9600      	str	r6, [sp, #0]
 800c892:	9205      	str	r2, [sp, #20]
 800c894:	9a00      	ldr	r2, [sp, #0]
 800c896:	3601      	adds	r6, #1
 800c898:	7810      	ldrb	r0, [r2, #0]
 800c89a:	2830      	cmp	r0, #48	; 0x30
 800c89c:	d0f7      	beq.n	800c88e <__gethex+0x16>
 800c89e:	f7ff ffd6 	bl	800c84e <__hexdig_fun>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	001d      	movs	r5, r3
 800c8a6:	9302      	str	r3, [sp, #8]
 800c8a8:	4298      	cmp	r0, r3
 800c8aa:	d11d      	bne.n	800c8e8 <__gethex+0x70>
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	49a6      	ldr	r1, [pc, #664]	; (800cb48 <__gethex+0x2d0>)
 800c8b0:	9800      	ldr	r0, [sp, #0]
 800c8b2:	f7ff fd6d 	bl	800c390 <strncmp>
 800c8b6:	0007      	movs	r7, r0
 800c8b8:	42a8      	cmp	r0, r5
 800c8ba:	d169      	bne.n	800c990 <__gethex+0x118>
 800c8bc:	9b00      	ldr	r3, [sp, #0]
 800c8be:	0034      	movs	r4, r6
 800c8c0:	7858      	ldrb	r0, [r3, #1]
 800c8c2:	f7ff ffc4 	bl	800c84e <__hexdig_fun>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	9302      	str	r3, [sp, #8]
 800c8ca:	42a8      	cmp	r0, r5
 800c8cc:	d02f      	beq.n	800c92e <__gethex+0xb6>
 800c8ce:	9600      	str	r6, [sp, #0]
 800c8d0:	9b00      	ldr	r3, [sp, #0]
 800c8d2:	7818      	ldrb	r0, [r3, #0]
 800c8d4:	2830      	cmp	r0, #48	; 0x30
 800c8d6:	d009      	beq.n	800c8ec <__gethex+0x74>
 800c8d8:	f7ff ffb9 	bl	800c84e <__hexdig_fun>
 800c8dc:	4242      	negs	r2, r0
 800c8de:	4142      	adcs	r2, r0
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	0035      	movs	r5, r6
 800c8e4:	9202      	str	r2, [sp, #8]
 800c8e6:	9305      	str	r3, [sp, #20]
 800c8e8:	9c00      	ldr	r4, [sp, #0]
 800c8ea:	e004      	b.n	800c8f6 <__gethex+0x7e>
 800c8ec:	9b00      	ldr	r3, [sp, #0]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	e7ed      	b.n	800c8d0 <__gethex+0x58>
 800c8f4:	3401      	adds	r4, #1
 800c8f6:	7820      	ldrb	r0, [r4, #0]
 800c8f8:	f7ff ffa9 	bl	800c84e <__hexdig_fun>
 800c8fc:	1e07      	subs	r7, r0, #0
 800c8fe:	d1f9      	bne.n	800c8f4 <__gethex+0x7c>
 800c900:	2201      	movs	r2, #1
 800c902:	0020      	movs	r0, r4
 800c904:	4990      	ldr	r1, [pc, #576]	; (800cb48 <__gethex+0x2d0>)
 800c906:	f7ff fd43 	bl	800c390 <strncmp>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d10d      	bne.n	800c92a <__gethex+0xb2>
 800c90e:	2d00      	cmp	r5, #0
 800c910:	d106      	bne.n	800c920 <__gethex+0xa8>
 800c912:	3401      	adds	r4, #1
 800c914:	0025      	movs	r5, r4
 800c916:	7820      	ldrb	r0, [r4, #0]
 800c918:	f7ff ff99 	bl	800c84e <__hexdig_fun>
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d102      	bne.n	800c926 <__gethex+0xae>
 800c920:	1b2d      	subs	r5, r5, r4
 800c922:	00af      	lsls	r7, r5, #2
 800c924:	e003      	b.n	800c92e <__gethex+0xb6>
 800c926:	3401      	adds	r4, #1
 800c928:	e7f5      	b.n	800c916 <__gethex+0x9e>
 800c92a:	2d00      	cmp	r5, #0
 800c92c:	d1f8      	bne.n	800c920 <__gethex+0xa8>
 800c92e:	2220      	movs	r2, #32
 800c930:	7823      	ldrb	r3, [r4, #0]
 800c932:	0026      	movs	r6, r4
 800c934:	4393      	bics	r3, r2
 800c936:	2b50      	cmp	r3, #80	; 0x50
 800c938:	d11d      	bne.n	800c976 <__gethex+0xfe>
 800c93a:	7863      	ldrb	r3, [r4, #1]
 800c93c:	2b2b      	cmp	r3, #43	; 0x2b
 800c93e:	d02c      	beq.n	800c99a <__gethex+0x122>
 800c940:	2b2d      	cmp	r3, #45	; 0x2d
 800c942:	d02e      	beq.n	800c9a2 <__gethex+0x12a>
 800c944:	2300      	movs	r3, #0
 800c946:	1c66      	adds	r6, r4, #1
 800c948:	9304      	str	r3, [sp, #16]
 800c94a:	7830      	ldrb	r0, [r6, #0]
 800c94c:	f7ff ff7f 	bl	800c84e <__hexdig_fun>
 800c950:	1e43      	subs	r3, r0, #1
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b18      	cmp	r3, #24
 800c956:	d82b      	bhi.n	800c9b0 <__gethex+0x138>
 800c958:	3810      	subs	r0, #16
 800c95a:	0005      	movs	r5, r0
 800c95c:	7870      	ldrb	r0, [r6, #1]
 800c95e:	f7ff ff76 	bl	800c84e <__hexdig_fun>
 800c962:	1e43      	subs	r3, r0, #1
 800c964:	b2db      	uxtb	r3, r3
 800c966:	3601      	adds	r6, #1
 800c968:	2b18      	cmp	r3, #24
 800c96a:	d91c      	bls.n	800c9a6 <__gethex+0x12e>
 800c96c:	9b04      	ldr	r3, [sp, #16]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d000      	beq.n	800c974 <__gethex+0xfc>
 800c972:	426d      	negs	r5, r5
 800c974:	197f      	adds	r7, r7, r5
 800c976:	9b06      	ldr	r3, [sp, #24]
 800c978:	601e      	str	r6, [r3, #0]
 800c97a:	9b02      	ldr	r3, [sp, #8]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d019      	beq.n	800c9b4 <__gethex+0x13c>
 800c980:	2600      	movs	r6, #0
 800c982:	9b05      	ldr	r3, [sp, #20]
 800c984:	42b3      	cmp	r3, r6
 800c986:	d100      	bne.n	800c98a <__gethex+0x112>
 800c988:	3606      	adds	r6, #6
 800c98a:	0030      	movs	r0, r6
 800c98c:	b009      	add	sp, #36	; 0x24
 800c98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c990:	2301      	movs	r3, #1
 800c992:	2700      	movs	r7, #0
 800c994:	9c00      	ldr	r4, [sp, #0]
 800c996:	9302      	str	r3, [sp, #8]
 800c998:	e7c9      	b.n	800c92e <__gethex+0xb6>
 800c99a:	2300      	movs	r3, #0
 800c99c:	9304      	str	r3, [sp, #16]
 800c99e:	1ca6      	adds	r6, r4, #2
 800c9a0:	e7d3      	b.n	800c94a <__gethex+0xd2>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e7fa      	b.n	800c99c <__gethex+0x124>
 800c9a6:	230a      	movs	r3, #10
 800c9a8:	435d      	muls	r5, r3
 800c9aa:	182d      	adds	r5, r5, r0
 800c9ac:	3d10      	subs	r5, #16
 800c9ae:	e7d5      	b.n	800c95c <__gethex+0xe4>
 800c9b0:	0026      	movs	r6, r4
 800c9b2:	e7e0      	b.n	800c976 <__gethex+0xfe>
 800c9b4:	9b00      	ldr	r3, [sp, #0]
 800c9b6:	9902      	ldr	r1, [sp, #8]
 800c9b8:	1ae3      	subs	r3, r4, r3
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	2b07      	cmp	r3, #7
 800c9be:	dc0a      	bgt.n	800c9d6 <__gethex+0x15e>
 800c9c0:	9803      	ldr	r0, [sp, #12]
 800c9c2:	f000 fa5d 	bl	800ce80 <_Balloc>
 800c9c6:	1e05      	subs	r5, r0, #0
 800c9c8:	d108      	bne.n	800c9dc <__gethex+0x164>
 800c9ca:	002a      	movs	r2, r5
 800c9cc:	21e4      	movs	r1, #228	; 0xe4
 800c9ce:	4b5f      	ldr	r3, [pc, #380]	; (800cb4c <__gethex+0x2d4>)
 800c9d0:	485f      	ldr	r0, [pc, #380]	; (800cb50 <__gethex+0x2d8>)
 800c9d2:	f003 fd19 	bl	8010408 <__assert_func>
 800c9d6:	3101      	adds	r1, #1
 800c9d8:	105b      	asrs	r3, r3, #1
 800c9da:	e7ef      	b.n	800c9bc <__gethex+0x144>
 800c9dc:	0003      	movs	r3, r0
 800c9de:	3314      	adds	r3, #20
 800c9e0:	9302      	str	r3, [sp, #8]
 800c9e2:	9305      	str	r3, [sp, #20]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	001e      	movs	r6, r3
 800c9e8:	9304      	str	r3, [sp, #16]
 800c9ea:	9b00      	ldr	r3, [sp, #0]
 800c9ec:	42a3      	cmp	r3, r4
 800c9ee:	d33f      	bcc.n	800ca70 <__gethex+0x1f8>
 800c9f0:	9c05      	ldr	r4, [sp, #20]
 800c9f2:	9b02      	ldr	r3, [sp, #8]
 800c9f4:	c440      	stmia	r4!, {r6}
 800c9f6:	1ae4      	subs	r4, r4, r3
 800c9f8:	10a4      	asrs	r4, r4, #2
 800c9fa:	0030      	movs	r0, r6
 800c9fc:	612c      	str	r4, [r5, #16]
 800c9fe:	f000 fb01 	bl	800d004 <__hi0bits>
 800ca02:	9b01      	ldr	r3, [sp, #4]
 800ca04:	0164      	lsls	r4, r4, #5
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	1a26      	subs	r6, r4, r0
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	429e      	cmp	r6, r3
 800ca0e:	dd51      	ble.n	800cab4 <__gethex+0x23c>
 800ca10:	1af6      	subs	r6, r6, r3
 800ca12:	0031      	movs	r1, r6
 800ca14:	0028      	movs	r0, r5
 800ca16:	f000 fe7b 	bl	800d710 <__any_on>
 800ca1a:	1e04      	subs	r4, r0, #0
 800ca1c:	d016      	beq.n	800ca4c <__gethex+0x1d4>
 800ca1e:	2401      	movs	r4, #1
 800ca20:	231f      	movs	r3, #31
 800ca22:	0020      	movs	r0, r4
 800ca24:	1e72      	subs	r2, r6, #1
 800ca26:	4013      	ands	r3, r2
 800ca28:	4098      	lsls	r0, r3
 800ca2a:	0003      	movs	r3, r0
 800ca2c:	1151      	asrs	r1, r2, #5
 800ca2e:	9802      	ldr	r0, [sp, #8]
 800ca30:	0089      	lsls	r1, r1, #2
 800ca32:	5809      	ldr	r1, [r1, r0]
 800ca34:	4219      	tst	r1, r3
 800ca36:	d009      	beq.n	800ca4c <__gethex+0x1d4>
 800ca38:	42a2      	cmp	r2, r4
 800ca3a:	dd06      	ble.n	800ca4a <__gethex+0x1d2>
 800ca3c:	0028      	movs	r0, r5
 800ca3e:	1eb1      	subs	r1, r6, #2
 800ca40:	f000 fe66 	bl	800d710 <__any_on>
 800ca44:	3402      	adds	r4, #2
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d100      	bne.n	800ca4c <__gethex+0x1d4>
 800ca4a:	2402      	movs	r4, #2
 800ca4c:	0031      	movs	r1, r6
 800ca4e:	0028      	movs	r0, r5
 800ca50:	f7ff fea8 	bl	800c7a4 <rshift>
 800ca54:	19bf      	adds	r7, r7, r6
 800ca56:	9b01      	ldr	r3, [sp, #4]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	42bb      	cmp	r3, r7
 800ca5c:	da3a      	bge.n	800cad4 <__gethex+0x25c>
 800ca5e:	0029      	movs	r1, r5
 800ca60:	9803      	ldr	r0, [sp, #12]
 800ca62:	f000 fa35 	bl	800ced0 <_Bfree>
 800ca66:	2300      	movs	r3, #0
 800ca68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca6a:	26a3      	movs	r6, #163	; 0xa3
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	e78c      	b.n	800c98a <__gethex+0x112>
 800ca70:	3c01      	subs	r4, #1
 800ca72:	7823      	ldrb	r3, [r4, #0]
 800ca74:	2b2e      	cmp	r3, #46	; 0x2e
 800ca76:	d012      	beq.n	800ca9e <__gethex+0x226>
 800ca78:	9b04      	ldr	r3, [sp, #16]
 800ca7a:	2b20      	cmp	r3, #32
 800ca7c:	d104      	bne.n	800ca88 <__gethex+0x210>
 800ca7e:	9b05      	ldr	r3, [sp, #20]
 800ca80:	c340      	stmia	r3!, {r6}
 800ca82:	2600      	movs	r6, #0
 800ca84:	9305      	str	r3, [sp, #20]
 800ca86:	9604      	str	r6, [sp, #16]
 800ca88:	7820      	ldrb	r0, [r4, #0]
 800ca8a:	f7ff fee0 	bl	800c84e <__hexdig_fun>
 800ca8e:	230f      	movs	r3, #15
 800ca90:	4018      	ands	r0, r3
 800ca92:	9b04      	ldr	r3, [sp, #16]
 800ca94:	4098      	lsls	r0, r3
 800ca96:	3304      	adds	r3, #4
 800ca98:	4306      	orrs	r6, r0
 800ca9a:	9304      	str	r3, [sp, #16]
 800ca9c:	e7a5      	b.n	800c9ea <__gethex+0x172>
 800ca9e:	9b00      	ldr	r3, [sp, #0]
 800caa0:	42a3      	cmp	r3, r4
 800caa2:	d8e9      	bhi.n	800ca78 <__gethex+0x200>
 800caa4:	2201      	movs	r2, #1
 800caa6:	0020      	movs	r0, r4
 800caa8:	4927      	ldr	r1, [pc, #156]	; (800cb48 <__gethex+0x2d0>)
 800caaa:	f7ff fc71 	bl	800c390 <strncmp>
 800caae:	2800      	cmp	r0, #0
 800cab0:	d1e2      	bne.n	800ca78 <__gethex+0x200>
 800cab2:	e79a      	b.n	800c9ea <__gethex+0x172>
 800cab4:	9b00      	ldr	r3, [sp, #0]
 800cab6:	2400      	movs	r4, #0
 800cab8:	429e      	cmp	r6, r3
 800caba:	dacc      	bge.n	800ca56 <__gethex+0x1de>
 800cabc:	1b9e      	subs	r6, r3, r6
 800cabe:	0029      	movs	r1, r5
 800cac0:	0032      	movs	r2, r6
 800cac2:	9803      	ldr	r0, [sp, #12]
 800cac4:	f000 fbf0 	bl	800d2a8 <__lshift>
 800cac8:	0003      	movs	r3, r0
 800caca:	3314      	adds	r3, #20
 800cacc:	0005      	movs	r5, r0
 800cace:	1bbf      	subs	r7, r7, r6
 800cad0:	9302      	str	r3, [sp, #8]
 800cad2:	e7c0      	b.n	800ca56 <__gethex+0x1de>
 800cad4:	9b01      	ldr	r3, [sp, #4]
 800cad6:	685e      	ldr	r6, [r3, #4]
 800cad8:	42be      	cmp	r6, r7
 800cada:	dd70      	ble.n	800cbbe <__gethex+0x346>
 800cadc:	9b00      	ldr	r3, [sp, #0]
 800cade:	1bf6      	subs	r6, r6, r7
 800cae0:	42b3      	cmp	r3, r6
 800cae2:	dc37      	bgt.n	800cb54 <__gethex+0x2dc>
 800cae4:	9b01      	ldr	r3, [sp, #4]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d024      	beq.n	800cb36 <__gethex+0x2be>
 800caec:	2b03      	cmp	r3, #3
 800caee:	d026      	beq.n	800cb3e <__gethex+0x2c6>
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d117      	bne.n	800cb24 <__gethex+0x2ac>
 800caf4:	9b00      	ldr	r3, [sp, #0]
 800caf6:	42b3      	cmp	r3, r6
 800caf8:	d114      	bne.n	800cb24 <__gethex+0x2ac>
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d10b      	bne.n	800cb16 <__gethex+0x29e>
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	9a07      	ldr	r2, [sp, #28]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	2662      	movs	r6, #98	; 0x62
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	2301      	movs	r3, #1
 800cb0a:	9a02      	ldr	r2, [sp, #8]
 800cb0c:	612b      	str	r3, [r5, #16]
 800cb0e:	6013      	str	r3, [r2, #0]
 800cb10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb12:	601d      	str	r5, [r3, #0]
 800cb14:	e739      	b.n	800c98a <__gethex+0x112>
 800cb16:	9900      	ldr	r1, [sp, #0]
 800cb18:	0028      	movs	r0, r5
 800cb1a:	3901      	subs	r1, #1
 800cb1c:	f000 fdf8 	bl	800d710 <__any_on>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d1ec      	bne.n	800cafe <__gethex+0x286>
 800cb24:	0029      	movs	r1, r5
 800cb26:	9803      	ldr	r0, [sp, #12]
 800cb28:	f000 f9d2 	bl	800ced0 <_Bfree>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb30:	2650      	movs	r6, #80	; 0x50
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	e729      	b.n	800c98a <__gethex+0x112>
 800cb36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1f3      	bne.n	800cb24 <__gethex+0x2ac>
 800cb3c:	e7df      	b.n	800cafe <__gethex+0x286>
 800cb3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1dc      	bne.n	800cafe <__gethex+0x286>
 800cb44:	e7ee      	b.n	800cb24 <__gethex+0x2ac>
 800cb46:	46c0      	nop			; (mov r8, r8)
 800cb48:	0801481c 	.word	0x0801481c
 800cb4c:	08014979 	.word	0x08014979
 800cb50:	0801498a 	.word	0x0801498a
 800cb54:	1e77      	subs	r7, r6, #1
 800cb56:	2c00      	cmp	r4, #0
 800cb58:	d12f      	bne.n	800cbba <__gethex+0x342>
 800cb5a:	2f00      	cmp	r7, #0
 800cb5c:	d004      	beq.n	800cb68 <__gethex+0x2f0>
 800cb5e:	0039      	movs	r1, r7
 800cb60:	0028      	movs	r0, r5
 800cb62:	f000 fdd5 	bl	800d710 <__any_on>
 800cb66:	0004      	movs	r4, r0
 800cb68:	231f      	movs	r3, #31
 800cb6a:	117a      	asrs	r2, r7, #5
 800cb6c:	401f      	ands	r7, r3
 800cb6e:	3b1e      	subs	r3, #30
 800cb70:	40bb      	lsls	r3, r7
 800cb72:	9902      	ldr	r1, [sp, #8]
 800cb74:	0092      	lsls	r2, r2, #2
 800cb76:	5852      	ldr	r2, [r2, r1]
 800cb78:	421a      	tst	r2, r3
 800cb7a:	d001      	beq.n	800cb80 <__gethex+0x308>
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	431c      	orrs	r4, r3
 800cb80:	9b00      	ldr	r3, [sp, #0]
 800cb82:	0031      	movs	r1, r6
 800cb84:	1b9b      	subs	r3, r3, r6
 800cb86:	2602      	movs	r6, #2
 800cb88:	0028      	movs	r0, r5
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	f7ff fe0a 	bl	800c7a4 <rshift>
 800cb90:	9b01      	ldr	r3, [sp, #4]
 800cb92:	685f      	ldr	r7, [r3, #4]
 800cb94:	2c00      	cmp	r4, #0
 800cb96:	d041      	beq.n	800cc1c <__gethex+0x3a4>
 800cb98:	9b01      	ldr	r3, [sp, #4]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d010      	beq.n	800cbc2 <__gethex+0x34a>
 800cba0:	2b03      	cmp	r3, #3
 800cba2:	d012      	beq.n	800cbca <__gethex+0x352>
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d106      	bne.n	800cbb6 <__gethex+0x33e>
 800cba8:	07a2      	lsls	r2, r4, #30
 800cbaa:	d504      	bpl.n	800cbb6 <__gethex+0x33e>
 800cbac:	9a02      	ldr	r2, [sp, #8]
 800cbae:	6812      	ldr	r2, [r2, #0]
 800cbb0:	4314      	orrs	r4, r2
 800cbb2:	421c      	tst	r4, r3
 800cbb4:	d10c      	bne.n	800cbd0 <__gethex+0x358>
 800cbb6:	2310      	movs	r3, #16
 800cbb8:	e02f      	b.n	800cc1a <__gethex+0x3a2>
 800cbba:	2401      	movs	r4, #1
 800cbbc:	e7d4      	b.n	800cb68 <__gethex+0x2f0>
 800cbbe:	2601      	movs	r6, #1
 800cbc0:	e7e8      	b.n	800cb94 <__gethex+0x31c>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbc6:	1a9b      	subs	r3, r3, r2
 800cbc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d0f2      	beq.n	800cbb6 <__gethex+0x33e>
 800cbd0:	692b      	ldr	r3, [r5, #16]
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	9302      	str	r3, [sp, #8]
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	9304      	str	r3, [sp, #16]
 800cbda:	002b      	movs	r3, r5
 800cbdc:	9a04      	ldr	r2, [sp, #16]
 800cbde:	3314      	adds	r3, #20
 800cbe0:	1899      	adds	r1, r3, r2
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	1c54      	adds	r4, r2, #1
 800cbe6:	d01e      	beq.n	800cc26 <__gethex+0x3ae>
 800cbe8:	3201      	adds	r2, #1
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	002b      	movs	r3, r5
 800cbee:	3314      	adds	r3, #20
 800cbf0:	2e02      	cmp	r6, #2
 800cbf2:	d141      	bne.n	800cc78 <__gethex+0x400>
 800cbf4:	9a01      	ldr	r2, [sp, #4]
 800cbf6:	9900      	ldr	r1, [sp, #0]
 800cbf8:	6812      	ldr	r2, [r2, #0]
 800cbfa:	3a01      	subs	r2, #1
 800cbfc:	428a      	cmp	r2, r1
 800cbfe:	d10b      	bne.n	800cc18 <__gethex+0x3a0>
 800cc00:	221f      	movs	r2, #31
 800cc02:	9800      	ldr	r0, [sp, #0]
 800cc04:	1149      	asrs	r1, r1, #5
 800cc06:	4002      	ands	r2, r0
 800cc08:	2001      	movs	r0, #1
 800cc0a:	0004      	movs	r4, r0
 800cc0c:	4094      	lsls	r4, r2
 800cc0e:	0089      	lsls	r1, r1, #2
 800cc10:	58cb      	ldr	r3, [r1, r3]
 800cc12:	4223      	tst	r3, r4
 800cc14:	d000      	beq.n	800cc18 <__gethex+0x3a0>
 800cc16:	2601      	movs	r6, #1
 800cc18:	2320      	movs	r3, #32
 800cc1a:	431e      	orrs	r6, r3
 800cc1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc1e:	601d      	str	r5, [r3, #0]
 800cc20:	9b07      	ldr	r3, [sp, #28]
 800cc22:	601f      	str	r7, [r3, #0]
 800cc24:	e6b1      	b.n	800c98a <__gethex+0x112>
 800cc26:	c301      	stmia	r3!, {r0}
 800cc28:	4299      	cmp	r1, r3
 800cc2a:	d8da      	bhi.n	800cbe2 <__gethex+0x36a>
 800cc2c:	68ab      	ldr	r3, [r5, #8]
 800cc2e:	9a02      	ldr	r2, [sp, #8]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	db18      	blt.n	800cc66 <__gethex+0x3ee>
 800cc34:	6869      	ldr	r1, [r5, #4]
 800cc36:	9803      	ldr	r0, [sp, #12]
 800cc38:	3101      	adds	r1, #1
 800cc3a:	f000 f921 	bl	800ce80 <_Balloc>
 800cc3e:	1e04      	subs	r4, r0, #0
 800cc40:	d104      	bne.n	800cc4c <__gethex+0x3d4>
 800cc42:	0022      	movs	r2, r4
 800cc44:	2184      	movs	r1, #132	; 0x84
 800cc46:	4b1c      	ldr	r3, [pc, #112]	; (800ccb8 <__gethex+0x440>)
 800cc48:	481c      	ldr	r0, [pc, #112]	; (800ccbc <__gethex+0x444>)
 800cc4a:	e6c2      	b.n	800c9d2 <__gethex+0x15a>
 800cc4c:	0029      	movs	r1, r5
 800cc4e:	692a      	ldr	r2, [r5, #16]
 800cc50:	310c      	adds	r1, #12
 800cc52:	3202      	adds	r2, #2
 800cc54:	0092      	lsls	r2, r2, #2
 800cc56:	300c      	adds	r0, #12
 800cc58:	f7ff fc77 	bl	800c54a <memcpy>
 800cc5c:	0029      	movs	r1, r5
 800cc5e:	9803      	ldr	r0, [sp, #12]
 800cc60:	f000 f936 	bl	800ced0 <_Bfree>
 800cc64:	0025      	movs	r5, r4
 800cc66:	692b      	ldr	r3, [r5, #16]
 800cc68:	1c5a      	adds	r2, r3, #1
 800cc6a:	612a      	str	r2, [r5, #16]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	3304      	adds	r3, #4
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	18eb      	adds	r3, r5, r3
 800cc74:	605a      	str	r2, [r3, #4]
 800cc76:	e7b9      	b.n	800cbec <__gethex+0x374>
 800cc78:	692a      	ldr	r2, [r5, #16]
 800cc7a:	9902      	ldr	r1, [sp, #8]
 800cc7c:	428a      	cmp	r2, r1
 800cc7e:	dd09      	ble.n	800cc94 <__gethex+0x41c>
 800cc80:	2101      	movs	r1, #1
 800cc82:	0028      	movs	r0, r5
 800cc84:	f7ff fd8e 	bl	800c7a4 <rshift>
 800cc88:	9b01      	ldr	r3, [sp, #4]
 800cc8a:	3701      	adds	r7, #1
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	42bb      	cmp	r3, r7
 800cc90:	dac1      	bge.n	800cc16 <__gethex+0x39e>
 800cc92:	e6e4      	b.n	800ca5e <__gethex+0x1e6>
 800cc94:	221f      	movs	r2, #31
 800cc96:	9c00      	ldr	r4, [sp, #0]
 800cc98:	9900      	ldr	r1, [sp, #0]
 800cc9a:	2601      	movs	r6, #1
 800cc9c:	4014      	ands	r4, r2
 800cc9e:	4211      	tst	r1, r2
 800cca0:	d0ba      	beq.n	800cc18 <__gethex+0x3a0>
 800cca2:	9a04      	ldr	r2, [sp, #16]
 800cca4:	189b      	adds	r3, r3, r2
 800cca6:	3b04      	subs	r3, #4
 800cca8:	6818      	ldr	r0, [r3, #0]
 800ccaa:	f000 f9ab 	bl	800d004 <__hi0bits>
 800ccae:	2320      	movs	r3, #32
 800ccb0:	1b1b      	subs	r3, r3, r4
 800ccb2:	4298      	cmp	r0, r3
 800ccb4:	dbe4      	blt.n	800cc80 <__gethex+0x408>
 800ccb6:	e7af      	b.n	800cc18 <__gethex+0x3a0>
 800ccb8:	08014979 	.word	0x08014979
 800ccbc:	0801498a 	.word	0x0801498a

0800ccc0 <L_shift>:
 800ccc0:	2308      	movs	r3, #8
 800ccc2:	b570      	push	{r4, r5, r6, lr}
 800ccc4:	2520      	movs	r5, #32
 800ccc6:	1a9a      	subs	r2, r3, r2
 800ccc8:	0092      	lsls	r2, r2, #2
 800ccca:	1aad      	subs	r5, r5, r2
 800cccc:	6843      	ldr	r3, [r0, #4]
 800ccce:	6804      	ldr	r4, [r0, #0]
 800ccd0:	001e      	movs	r6, r3
 800ccd2:	40ae      	lsls	r6, r5
 800ccd4:	40d3      	lsrs	r3, r2
 800ccd6:	4334      	orrs	r4, r6
 800ccd8:	6004      	str	r4, [r0, #0]
 800ccda:	6043      	str	r3, [r0, #4]
 800ccdc:	3004      	adds	r0, #4
 800ccde:	4288      	cmp	r0, r1
 800cce0:	d3f4      	bcc.n	800cccc <L_shift+0xc>
 800cce2:	bd70      	pop	{r4, r5, r6, pc}

0800cce4 <__match>:
 800cce4:	b530      	push	{r4, r5, lr}
 800cce6:	6803      	ldr	r3, [r0, #0]
 800cce8:	780c      	ldrb	r4, [r1, #0]
 800ccea:	3301      	adds	r3, #1
 800ccec:	2c00      	cmp	r4, #0
 800ccee:	d102      	bne.n	800ccf6 <__match+0x12>
 800ccf0:	6003      	str	r3, [r0, #0]
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	bd30      	pop	{r4, r5, pc}
 800ccf6:	781a      	ldrb	r2, [r3, #0]
 800ccf8:	0015      	movs	r5, r2
 800ccfa:	3d41      	subs	r5, #65	; 0x41
 800ccfc:	2d19      	cmp	r5, #25
 800ccfe:	d800      	bhi.n	800cd02 <__match+0x1e>
 800cd00:	3220      	adds	r2, #32
 800cd02:	3101      	adds	r1, #1
 800cd04:	42a2      	cmp	r2, r4
 800cd06:	d0ef      	beq.n	800cce8 <__match+0x4>
 800cd08:	2000      	movs	r0, #0
 800cd0a:	e7f3      	b.n	800ccf4 <__match+0x10>

0800cd0c <__hexnan>:
 800cd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd0e:	680b      	ldr	r3, [r1, #0]
 800cd10:	b08b      	sub	sp, #44	; 0x2c
 800cd12:	9201      	str	r2, [sp, #4]
 800cd14:	9901      	ldr	r1, [sp, #4]
 800cd16:	115a      	asrs	r2, r3, #5
 800cd18:	0092      	lsls	r2, r2, #2
 800cd1a:	188a      	adds	r2, r1, r2
 800cd1c:	9202      	str	r2, [sp, #8]
 800cd1e:	0019      	movs	r1, r3
 800cd20:	221f      	movs	r2, #31
 800cd22:	4011      	ands	r1, r2
 800cd24:	9008      	str	r0, [sp, #32]
 800cd26:	9106      	str	r1, [sp, #24]
 800cd28:	4213      	tst	r3, r2
 800cd2a:	d002      	beq.n	800cd32 <__hexnan+0x26>
 800cd2c:	9b02      	ldr	r3, [sp, #8]
 800cd2e:	3304      	adds	r3, #4
 800cd30:	9302      	str	r3, [sp, #8]
 800cd32:	9b02      	ldr	r3, [sp, #8]
 800cd34:	2500      	movs	r5, #0
 800cd36:	1f1f      	subs	r7, r3, #4
 800cd38:	003e      	movs	r6, r7
 800cd3a:	003c      	movs	r4, r7
 800cd3c:	9b08      	ldr	r3, [sp, #32]
 800cd3e:	603d      	str	r5, [r7, #0]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	9507      	str	r5, [sp, #28]
 800cd44:	9305      	str	r3, [sp, #20]
 800cd46:	9503      	str	r5, [sp, #12]
 800cd48:	9b05      	ldr	r3, [sp, #20]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd4e:	9b05      	ldr	r3, [sp, #20]
 800cd50:	785b      	ldrb	r3, [r3, #1]
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d028      	beq.n	800cdaa <__hexnan+0x9e>
 800cd58:	9804      	ldr	r0, [sp, #16]
 800cd5a:	f7ff fd78 	bl	800c84e <__hexdig_fun>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d154      	bne.n	800ce0c <__hexnan+0x100>
 800cd62:	9b04      	ldr	r3, [sp, #16]
 800cd64:	2b20      	cmp	r3, #32
 800cd66:	d819      	bhi.n	800cd9c <__hexnan+0x90>
 800cd68:	9b03      	ldr	r3, [sp, #12]
 800cd6a:	9a07      	ldr	r2, [sp, #28]
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	dd12      	ble.n	800cd96 <__hexnan+0x8a>
 800cd70:	42b4      	cmp	r4, r6
 800cd72:	d206      	bcs.n	800cd82 <__hexnan+0x76>
 800cd74:	2d07      	cmp	r5, #7
 800cd76:	dc04      	bgt.n	800cd82 <__hexnan+0x76>
 800cd78:	002a      	movs	r2, r5
 800cd7a:	0031      	movs	r1, r6
 800cd7c:	0020      	movs	r0, r4
 800cd7e:	f7ff ff9f 	bl	800ccc0 <L_shift>
 800cd82:	9b01      	ldr	r3, [sp, #4]
 800cd84:	2508      	movs	r5, #8
 800cd86:	429c      	cmp	r4, r3
 800cd88:	d905      	bls.n	800cd96 <__hexnan+0x8a>
 800cd8a:	1f26      	subs	r6, r4, #4
 800cd8c:	2500      	movs	r5, #0
 800cd8e:	0034      	movs	r4, r6
 800cd90:	9b03      	ldr	r3, [sp, #12]
 800cd92:	6035      	str	r5, [r6, #0]
 800cd94:	9307      	str	r3, [sp, #28]
 800cd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd98:	9305      	str	r3, [sp, #20]
 800cd9a:	e7d5      	b.n	800cd48 <__hexnan+0x3c>
 800cd9c:	9b04      	ldr	r3, [sp, #16]
 800cd9e:	2b29      	cmp	r3, #41	; 0x29
 800cda0:	d159      	bne.n	800ce56 <__hexnan+0x14a>
 800cda2:	9b05      	ldr	r3, [sp, #20]
 800cda4:	9a08      	ldr	r2, [sp, #32]
 800cda6:	3302      	adds	r3, #2
 800cda8:	6013      	str	r3, [r2, #0]
 800cdaa:	9b03      	ldr	r3, [sp, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d052      	beq.n	800ce56 <__hexnan+0x14a>
 800cdb0:	42b4      	cmp	r4, r6
 800cdb2:	d206      	bcs.n	800cdc2 <__hexnan+0xb6>
 800cdb4:	2d07      	cmp	r5, #7
 800cdb6:	dc04      	bgt.n	800cdc2 <__hexnan+0xb6>
 800cdb8:	002a      	movs	r2, r5
 800cdba:	0031      	movs	r1, r6
 800cdbc:	0020      	movs	r0, r4
 800cdbe:	f7ff ff7f 	bl	800ccc0 <L_shift>
 800cdc2:	9b01      	ldr	r3, [sp, #4]
 800cdc4:	429c      	cmp	r4, r3
 800cdc6:	d935      	bls.n	800ce34 <__hexnan+0x128>
 800cdc8:	001a      	movs	r2, r3
 800cdca:	0023      	movs	r3, r4
 800cdcc:	cb02      	ldmia	r3!, {r1}
 800cdce:	c202      	stmia	r2!, {r1}
 800cdd0:	429f      	cmp	r7, r3
 800cdd2:	d2fb      	bcs.n	800cdcc <__hexnan+0xc0>
 800cdd4:	9b02      	ldr	r3, [sp, #8]
 800cdd6:	1c62      	adds	r2, r4, #1
 800cdd8:	1ed9      	subs	r1, r3, #3
 800cdda:	2304      	movs	r3, #4
 800cddc:	4291      	cmp	r1, r2
 800cdde:	d305      	bcc.n	800cdec <__hexnan+0xe0>
 800cde0:	9b02      	ldr	r3, [sp, #8]
 800cde2:	3b04      	subs	r3, #4
 800cde4:	1b1b      	subs	r3, r3, r4
 800cde6:	089b      	lsrs	r3, r3, #2
 800cde8:	3301      	adds	r3, #1
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	9a01      	ldr	r2, [sp, #4]
 800cdee:	18d3      	adds	r3, r2, r3
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	c304      	stmia	r3!, {r2}
 800cdf4:	429f      	cmp	r7, r3
 800cdf6:	d2fc      	bcs.n	800cdf2 <__hexnan+0xe6>
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d104      	bne.n	800ce08 <__hexnan+0xfc>
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	429f      	cmp	r7, r3
 800ce02:	d126      	bne.n	800ce52 <__hexnan+0x146>
 800ce04:	2301      	movs	r3, #1
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	2005      	movs	r0, #5
 800ce0a:	e025      	b.n	800ce58 <__hexnan+0x14c>
 800ce0c:	9b03      	ldr	r3, [sp, #12]
 800ce0e:	3501      	adds	r5, #1
 800ce10:	3301      	adds	r3, #1
 800ce12:	9303      	str	r3, [sp, #12]
 800ce14:	2d08      	cmp	r5, #8
 800ce16:	dd06      	ble.n	800ce26 <__hexnan+0x11a>
 800ce18:	9b01      	ldr	r3, [sp, #4]
 800ce1a:	429c      	cmp	r4, r3
 800ce1c:	d9bb      	bls.n	800cd96 <__hexnan+0x8a>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	2501      	movs	r5, #1
 800ce22:	3c04      	subs	r4, #4
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	220f      	movs	r2, #15
 800ce28:	6823      	ldr	r3, [r4, #0]
 800ce2a:	4010      	ands	r0, r2
 800ce2c:	011b      	lsls	r3, r3, #4
 800ce2e:	4303      	orrs	r3, r0
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	e7b0      	b.n	800cd96 <__hexnan+0x8a>
 800ce34:	9b06      	ldr	r3, [sp, #24]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d0de      	beq.n	800cdf8 <__hexnan+0xec>
 800ce3a:	2320      	movs	r3, #32
 800ce3c:	9a06      	ldr	r2, [sp, #24]
 800ce3e:	9902      	ldr	r1, [sp, #8]
 800ce40:	1a9b      	subs	r3, r3, r2
 800ce42:	2201      	movs	r2, #1
 800ce44:	4252      	negs	r2, r2
 800ce46:	40da      	lsrs	r2, r3
 800ce48:	3904      	subs	r1, #4
 800ce4a:	680b      	ldr	r3, [r1, #0]
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	600b      	str	r3, [r1, #0]
 800ce50:	e7d2      	b.n	800cdf8 <__hexnan+0xec>
 800ce52:	3f04      	subs	r7, #4
 800ce54:	e7d0      	b.n	800cdf8 <__hexnan+0xec>
 800ce56:	2004      	movs	r0, #4
 800ce58:	b00b      	add	sp, #44	; 0x2c
 800ce5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce5c <__ascii_mbtowc>:
 800ce5c:	b082      	sub	sp, #8
 800ce5e:	2900      	cmp	r1, #0
 800ce60:	d100      	bne.n	800ce64 <__ascii_mbtowc+0x8>
 800ce62:	a901      	add	r1, sp, #4
 800ce64:	1e10      	subs	r0, r2, #0
 800ce66:	d006      	beq.n	800ce76 <__ascii_mbtowc+0x1a>
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d006      	beq.n	800ce7a <__ascii_mbtowc+0x1e>
 800ce6c:	7813      	ldrb	r3, [r2, #0]
 800ce6e:	600b      	str	r3, [r1, #0]
 800ce70:	7810      	ldrb	r0, [r2, #0]
 800ce72:	1e43      	subs	r3, r0, #1
 800ce74:	4198      	sbcs	r0, r3
 800ce76:	b002      	add	sp, #8
 800ce78:	4770      	bx	lr
 800ce7a:	2002      	movs	r0, #2
 800ce7c:	4240      	negs	r0, r0
 800ce7e:	e7fa      	b.n	800ce76 <__ascii_mbtowc+0x1a>

0800ce80 <_Balloc>:
 800ce80:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ce82:	b570      	push	{r4, r5, r6, lr}
 800ce84:	0006      	movs	r6, r0
 800ce86:	000c      	movs	r4, r1
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d012      	beq.n	800ceb2 <_Balloc+0x32>
 800ce8c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ce8e:	00a2      	lsls	r2, r4, #2
 800ce90:	189b      	adds	r3, r3, r2
 800ce92:	6818      	ldr	r0, [r3, #0]
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d115      	bne.n	800cec4 <_Balloc+0x44>
 800ce98:	2101      	movs	r1, #1
 800ce9a:	000d      	movs	r5, r1
 800ce9c:	40a5      	lsls	r5, r4
 800ce9e:	1d6a      	adds	r2, r5, #5
 800cea0:	0030      	movs	r0, r6
 800cea2:	0092      	lsls	r2, r2, #2
 800cea4:	f003 face 	bl	8010444 <_calloc_r>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d009      	beq.n	800cec0 <_Balloc+0x40>
 800ceac:	6044      	str	r4, [r0, #4]
 800ceae:	6085      	str	r5, [r0, #8]
 800ceb0:	e00a      	b.n	800cec8 <_Balloc+0x48>
 800ceb2:	2221      	movs	r2, #33	; 0x21
 800ceb4:	2104      	movs	r1, #4
 800ceb6:	f003 fac5 	bl	8010444 <_calloc_r>
 800ceba:	6470      	str	r0, [r6, #68]	; 0x44
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d1e5      	bne.n	800ce8c <_Balloc+0xc>
 800cec0:	2000      	movs	r0, #0
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
 800cec4:	6802      	ldr	r2, [r0, #0]
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	2300      	movs	r3, #0
 800ceca:	6103      	str	r3, [r0, #16]
 800cecc:	60c3      	str	r3, [r0, #12]
 800cece:	e7f8      	b.n	800cec2 <_Balloc+0x42>

0800ced0 <_Bfree>:
 800ced0:	2900      	cmp	r1, #0
 800ced2:	d006      	beq.n	800cee2 <_Bfree+0x12>
 800ced4:	684a      	ldr	r2, [r1, #4]
 800ced6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ced8:	0092      	lsls	r2, r2, #2
 800ceda:	189b      	adds	r3, r3, r2
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	600a      	str	r2, [r1, #0]
 800cee0:	6019      	str	r1, [r3, #0]
 800cee2:	4770      	bx	lr

0800cee4 <__multadd>:
 800cee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cee6:	000e      	movs	r6, r1
 800cee8:	9001      	str	r0, [sp, #4]
 800ceea:	000c      	movs	r4, r1
 800ceec:	001d      	movs	r5, r3
 800ceee:	2000      	movs	r0, #0
 800cef0:	690f      	ldr	r7, [r1, #16]
 800cef2:	3614      	adds	r6, #20
 800cef4:	6833      	ldr	r3, [r6, #0]
 800cef6:	3001      	adds	r0, #1
 800cef8:	b299      	uxth	r1, r3
 800cefa:	4351      	muls	r1, r2
 800cefc:	0c1b      	lsrs	r3, r3, #16
 800cefe:	4353      	muls	r3, r2
 800cf00:	1949      	adds	r1, r1, r5
 800cf02:	0c0d      	lsrs	r5, r1, #16
 800cf04:	195b      	adds	r3, r3, r5
 800cf06:	0c1d      	lsrs	r5, r3, #16
 800cf08:	b289      	uxth	r1, r1
 800cf0a:	041b      	lsls	r3, r3, #16
 800cf0c:	185b      	adds	r3, r3, r1
 800cf0e:	c608      	stmia	r6!, {r3}
 800cf10:	4287      	cmp	r7, r0
 800cf12:	dcef      	bgt.n	800cef4 <__multadd+0x10>
 800cf14:	2d00      	cmp	r5, #0
 800cf16:	d022      	beq.n	800cf5e <__multadd+0x7a>
 800cf18:	68a3      	ldr	r3, [r4, #8]
 800cf1a:	42bb      	cmp	r3, r7
 800cf1c:	dc19      	bgt.n	800cf52 <__multadd+0x6e>
 800cf1e:	6861      	ldr	r1, [r4, #4]
 800cf20:	9801      	ldr	r0, [sp, #4]
 800cf22:	3101      	adds	r1, #1
 800cf24:	f7ff ffac 	bl	800ce80 <_Balloc>
 800cf28:	1e06      	subs	r6, r0, #0
 800cf2a:	d105      	bne.n	800cf38 <__multadd+0x54>
 800cf2c:	0032      	movs	r2, r6
 800cf2e:	21ba      	movs	r1, #186	; 0xba
 800cf30:	4b0c      	ldr	r3, [pc, #48]	; (800cf64 <__multadd+0x80>)
 800cf32:	480d      	ldr	r0, [pc, #52]	; (800cf68 <__multadd+0x84>)
 800cf34:	f003 fa68 	bl	8010408 <__assert_func>
 800cf38:	0021      	movs	r1, r4
 800cf3a:	6922      	ldr	r2, [r4, #16]
 800cf3c:	310c      	adds	r1, #12
 800cf3e:	3202      	adds	r2, #2
 800cf40:	0092      	lsls	r2, r2, #2
 800cf42:	300c      	adds	r0, #12
 800cf44:	f7ff fb01 	bl	800c54a <memcpy>
 800cf48:	0021      	movs	r1, r4
 800cf4a:	9801      	ldr	r0, [sp, #4]
 800cf4c:	f7ff ffc0 	bl	800ced0 <_Bfree>
 800cf50:	0034      	movs	r4, r6
 800cf52:	1d3b      	adds	r3, r7, #4
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	18e3      	adds	r3, r4, r3
 800cf58:	605d      	str	r5, [r3, #4]
 800cf5a:	1c7b      	adds	r3, r7, #1
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	0020      	movs	r0, r4
 800cf60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf62:	46c0      	nop			; (mov r8, r8)
 800cf64:	08014979 	.word	0x08014979
 800cf68:	080149ea 	.word	0x080149ea

0800cf6c <__s2b>:
 800cf6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf6e:	0006      	movs	r6, r0
 800cf70:	0018      	movs	r0, r3
 800cf72:	000c      	movs	r4, r1
 800cf74:	3008      	adds	r0, #8
 800cf76:	2109      	movs	r1, #9
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	0015      	movs	r5, r2
 800cf7c:	f7f3 f968 	bl	8000250 <__divsi3>
 800cf80:	2301      	movs	r3, #1
 800cf82:	2100      	movs	r1, #0
 800cf84:	4283      	cmp	r3, r0
 800cf86:	db0a      	blt.n	800cf9e <__s2b+0x32>
 800cf88:	0030      	movs	r0, r6
 800cf8a:	f7ff ff79 	bl	800ce80 <_Balloc>
 800cf8e:	1e01      	subs	r1, r0, #0
 800cf90:	d108      	bne.n	800cfa4 <__s2b+0x38>
 800cf92:	000a      	movs	r2, r1
 800cf94:	4b19      	ldr	r3, [pc, #100]	; (800cffc <__s2b+0x90>)
 800cf96:	481a      	ldr	r0, [pc, #104]	; (800d000 <__s2b+0x94>)
 800cf98:	31d3      	adds	r1, #211	; 0xd3
 800cf9a:	f003 fa35 	bl	8010408 <__assert_func>
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	3101      	adds	r1, #1
 800cfa2:	e7ef      	b.n	800cf84 <__s2b+0x18>
 800cfa4:	9b08      	ldr	r3, [sp, #32]
 800cfa6:	6143      	str	r3, [r0, #20]
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	6103      	str	r3, [r0, #16]
 800cfac:	2d09      	cmp	r5, #9
 800cfae:	dd18      	ble.n	800cfe2 <__s2b+0x76>
 800cfb0:	0023      	movs	r3, r4
 800cfb2:	3309      	adds	r3, #9
 800cfb4:	001f      	movs	r7, r3
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	1964      	adds	r4, r4, r5
 800cfba:	783b      	ldrb	r3, [r7, #0]
 800cfbc:	220a      	movs	r2, #10
 800cfbe:	0030      	movs	r0, r6
 800cfc0:	3b30      	subs	r3, #48	; 0x30
 800cfc2:	f7ff ff8f 	bl	800cee4 <__multadd>
 800cfc6:	3701      	adds	r7, #1
 800cfc8:	0001      	movs	r1, r0
 800cfca:	42a7      	cmp	r7, r4
 800cfcc:	d1f5      	bne.n	800cfba <__s2b+0x4e>
 800cfce:	002c      	movs	r4, r5
 800cfd0:	9b00      	ldr	r3, [sp, #0]
 800cfd2:	3c08      	subs	r4, #8
 800cfd4:	191c      	adds	r4, r3, r4
 800cfd6:	002f      	movs	r7, r5
 800cfd8:	9b01      	ldr	r3, [sp, #4]
 800cfda:	429f      	cmp	r7, r3
 800cfdc:	db04      	blt.n	800cfe8 <__s2b+0x7c>
 800cfde:	0008      	movs	r0, r1
 800cfe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cfe2:	2509      	movs	r5, #9
 800cfe4:	340a      	adds	r4, #10
 800cfe6:	e7f6      	b.n	800cfd6 <__s2b+0x6a>
 800cfe8:	1b63      	subs	r3, r4, r5
 800cfea:	5ddb      	ldrb	r3, [r3, r7]
 800cfec:	220a      	movs	r2, #10
 800cfee:	0030      	movs	r0, r6
 800cff0:	3b30      	subs	r3, #48	; 0x30
 800cff2:	f7ff ff77 	bl	800cee4 <__multadd>
 800cff6:	3701      	adds	r7, #1
 800cff8:	0001      	movs	r1, r0
 800cffa:	e7ed      	b.n	800cfd8 <__s2b+0x6c>
 800cffc:	08014979 	.word	0x08014979
 800d000:	080149ea 	.word	0x080149ea

0800d004 <__hi0bits>:
 800d004:	0003      	movs	r3, r0
 800d006:	0c02      	lsrs	r2, r0, #16
 800d008:	2000      	movs	r0, #0
 800d00a:	4282      	cmp	r2, r0
 800d00c:	d101      	bne.n	800d012 <__hi0bits+0xe>
 800d00e:	041b      	lsls	r3, r3, #16
 800d010:	3010      	adds	r0, #16
 800d012:	0e1a      	lsrs	r2, r3, #24
 800d014:	d101      	bne.n	800d01a <__hi0bits+0x16>
 800d016:	3008      	adds	r0, #8
 800d018:	021b      	lsls	r3, r3, #8
 800d01a:	0f1a      	lsrs	r2, r3, #28
 800d01c:	d101      	bne.n	800d022 <__hi0bits+0x1e>
 800d01e:	3004      	adds	r0, #4
 800d020:	011b      	lsls	r3, r3, #4
 800d022:	0f9a      	lsrs	r2, r3, #30
 800d024:	d101      	bne.n	800d02a <__hi0bits+0x26>
 800d026:	3002      	adds	r0, #2
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	db03      	blt.n	800d036 <__hi0bits+0x32>
 800d02e:	3001      	adds	r0, #1
 800d030:	005b      	lsls	r3, r3, #1
 800d032:	d400      	bmi.n	800d036 <__hi0bits+0x32>
 800d034:	2020      	movs	r0, #32
 800d036:	4770      	bx	lr

0800d038 <__lo0bits>:
 800d038:	6803      	ldr	r3, [r0, #0]
 800d03a:	0001      	movs	r1, r0
 800d03c:	2207      	movs	r2, #7
 800d03e:	0018      	movs	r0, r3
 800d040:	4010      	ands	r0, r2
 800d042:	4213      	tst	r3, r2
 800d044:	d00d      	beq.n	800d062 <__lo0bits+0x2a>
 800d046:	3a06      	subs	r2, #6
 800d048:	2000      	movs	r0, #0
 800d04a:	4213      	tst	r3, r2
 800d04c:	d105      	bne.n	800d05a <__lo0bits+0x22>
 800d04e:	3002      	adds	r0, #2
 800d050:	4203      	tst	r3, r0
 800d052:	d003      	beq.n	800d05c <__lo0bits+0x24>
 800d054:	40d3      	lsrs	r3, r2
 800d056:	0010      	movs	r0, r2
 800d058:	600b      	str	r3, [r1, #0]
 800d05a:	4770      	bx	lr
 800d05c:	089b      	lsrs	r3, r3, #2
 800d05e:	600b      	str	r3, [r1, #0]
 800d060:	e7fb      	b.n	800d05a <__lo0bits+0x22>
 800d062:	b29a      	uxth	r2, r3
 800d064:	2a00      	cmp	r2, #0
 800d066:	d101      	bne.n	800d06c <__lo0bits+0x34>
 800d068:	2010      	movs	r0, #16
 800d06a:	0c1b      	lsrs	r3, r3, #16
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	2a00      	cmp	r2, #0
 800d070:	d101      	bne.n	800d076 <__lo0bits+0x3e>
 800d072:	3008      	adds	r0, #8
 800d074:	0a1b      	lsrs	r3, r3, #8
 800d076:	071a      	lsls	r2, r3, #28
 800d078:	d101      	bne.n	800d07e <__lo0bits+0x46>
 800d07a:	3004      	adds	r0, #4
 800d07c:	091b      	lsrs	r3, r3, #4
 800d07e:	079a      	lsls	r2, r3, #30
 800d080:	d101      	bne.n	800d086 <__lo0bits+0x4e>
 800d082:	3002      	adds	r0, #2
 800d084:	089b      	lsrs	r3, r3, #2
 800d086:	07da      	lsls	r2, r3, #31
 800d088:	d4e9      	bmi.n	800d05e <__lo0bits+0x26>
 800d08a:	3001      	adds	r0, #1
 800d08c:	085b      	lsrs	r3, r3, #1
 800d08e:	d1e6      	bne.n	800d05e <__lo0bits+0x26>
 800d090:	2020      	movs	r0, #32
 800d092:	e7e2      	b.n	800d05a <__lo0bits+0x22>

0800d094 <__i2b>:
 800d094:	b510      	push	{r4, lr}
 800d096:	000c      	movs	r4, r1
 800d098:	2101      	movs	r1, #1
 800d09a:	f7ff fef1 	bl	800ce80 <_Balloc>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d107      	bne.n	800d0b2 <__i2b+0x1e>
 800d0a2:	2146      	movs	r1, #70	; 0x46
 800d0a4:	4c05      	ldr	r4, [pc, #20]	; (800d0bc <__i2b+0x28>)
 800d0a6:	0002      	movs	r2, r0
 800d0a8:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <__i2b+0x2c>)
 800d0aa:	0020      	movs	r0, r4
 800d0ac:	31ff      	adds	r1, #255	; 0xff
 800d0ae:	f003 f9ab 	bl	8010408 <__assert_func>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	6144      	str	r4, [r0, #20]
 800d0b6:	6103      	str	r3, [r0, #16]
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	46c0      	nop			; (mov r8, r8)
 800d0bc:	080149ea 	.word	0x080149ea
 800d0c0:	08014979 	.word	0x08014979

0800d0c4 <__multiply>:
 800d0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0c6:	0015      	movs	r5, r2
 800d0c8:	690a      	ldr	r2, [r1, #16]
 800d0ca:	692b      	ldr	r3, [r5, #16]
 800d0cc:	000c      	movs	r4, r1
 800d0ce:	b08b      	sub	sp, #44	; 0x2c
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	da01      	bge.n	800d0d8 <__multiply+0x14>
 800d0d4:	002c      	movs	r4, r5
 800d0d6:	000d      	movs	r5, r1
 800d0d8:	6927      	ldr	r7, [r4, #16]
 800d0da:	692e      	ldr	r6, [r5, #16]
 800d0dc:	6861      	ldr	r1, [r4, #4]
 800d0de:	19bb      	adds	r3, r7, r6
 800d0e0:	9303      	str	r3, [sp, #12]
 800d0e2:	68a3      	ldr	r3, [r4, #8]
 800d0e4:	19ba      	adds	r2, r7, r6
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	da00      	bge.n	800d0ec <__multiply+0x28>
 800d0ea:	3101      	adds	r1, #1
 800d0ec:	f7ff fec8 	bl	800ce80 <_Balloc>
 800d0f0:	9002      	str	r0, [sp, #8]
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d106      	bne.n	800d104 <__multiply+0x40>
 800d0f6:	21b1      	movs	r1, #177	; 0xb1
 800d0f8:	4b48      	ldr	r3, [pc, #288]	; (800d21c <__multiply+0x158>)
 800d0fa:	4849      	ldr	r0, [pc, #292]	; (800d220 <__multiply+0x15c>)
 800d0fc:	9a02      	ldr	r2, [sp, #8]
 800d0fe:	0049      	lsls	r1, r1, #1
 800d100:	f003 f982 	bl	8010408 <__assert_func>
 800d104:	9b02      	ldr	r3, [sp, #8]
 800d106:	2200      	movs	r2, #0
 800d108:	3314      	adds	r3, #20
 800d10a:	469c      	mov	ip, r3
 800d10c:	19bb      	adds	r3, r7, r6
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4463      	add	r3, ip
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	4663      	mov	r3, ip
 800d116:	9904      	ldr	r1, [sp, #16]
 800d118:	428b      	cmp	r3, r1
 800d11a:	d32a      	bcc.n	800d172 <__multiply+0xae>
 800d11c:	0023      	movs	r3, r4
 800d11e:	00bf      	lsls	r7, r7, #2
 800d120:	3314      	adds	r3, #20
 800d122:	3514      	adds	r5, #20
 800d124:	9308      	str	r3, [sp, #32]
 800d126:	00b6      	lsls	r6, r6, #2
 800d128:	19db      	adds	r3, r3, r7
 800d12a:	9305      	str	r3, [sp, #20]
 800d12c:	19ab      	adds	r3, r5, r6
 800d12e:	9309      	str	r3, [sp, #36]	; 0x24
 800d130:	2304      	movs	r3, #4
 800d132:	9306      	str	r3, [sp, #24]
 800d134:	0023      	movs	r3, r4
 800d136:	9a05      	ldr	r2, [sp, #20]
 800d138:	3315      	adds	r3, #21
 800d13a:	9501      	str	r5, [sp, #4]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d305      	bcc.n	800d14c <__multiply+0x88>
 800d140:	1b13      	subs	r3, r2, r4
 800d142:	3b15      	subs	r3, #21
 800d144:	089b      	lsrs	r3, r3, #2
 800d146:	3301      	adds	r3, #1
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	9306      	str	r3, [sp, #24]
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d150:	4293      	cmp	r3, r2
 800d152:	d310      	bcc.n	800d176 <__multiply+0xb2>
 800d154:	9b03      	ldr	r3, [sp, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	dd05      	ble.n	800d166 <__multiply+0xa2>
 800d15a:	9b04      	ldr	r3, [sp, #16]
 800d15c:	3b04      	subs	r3, #4
 800d15e:	9304      	str	r3, [sp, #16]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d056      	beq.n	800d214 <__multiply+0x150>
 800d166:	9b02      	ldr	r3, [sp, #8]
 800d168:	9a03      	ldr	r2, [sp, #12]
 800d16a:	0018      	movs	r0, r3
 800d16c:	611a      	str	r2, [r3, #16]
 800d16e:	b00b      	add	sp, #44	; 0x2c
 800d170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d172:	c304      	stmia	r3!, {r2}
 800d174:	e7cf      	b.n	800d116 <__multiply+0x52>
 800d176:	9b01      	ldr	r3, [sp, #4]
 800d178:	6818      	ldr	r0, [r3, #0]
 800d17a:	b280      	uxth	r0, r0
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d01e      	beq.n	800d1be <__multiply+0xfa>
 800d180:	4667      	mov	r7, ip
 800d182:	2500      	movs	r5, #0
 800d184:	9e08      	ldr	r6, [sp, #32]
 800d186:	ce02      	ldmia	r6!, {r1}
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	9307      	str	r3, [sp, #28]
 800d18c:	b28b      	uxth	r3, r1
 800d18e:	4343      	muls	r3, r0
 800d190:	001a      	movs	r2, r3
 800d192:	466b      	mov	r3, sp
 800d194:	8b9b      	ldrh	r3, [r3, #28]
 800d196:	18d3      	adds	r3, r2, r3
 800d198:	195b      	adds	r3, r3, r5
 800d19a:	0c0d      	lsrs	r5, r1, #16
 800d19c:	4345      	muls	r5, r0
 800d19e:	9a07      	ldr	r2, [sp, #28]
 800d1a0:	0c11      	lsrs	r1, r2, #16
 800d1a2:	1869      	adds	r1, r5, r1
 800d1a4:	0c1a      	lsrs	r2, r3, #16
 800d1a6:	188a      	adds	r2, r1, r2
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	0c15      	lsrs	r5, r2, #16
 800d1ac:	0412      	lsls	r2, r2, #16
 800d1ae:	431a      	orrs	r2, r3
 800d1b0:	9b05      	ldr	r3, [sp, #20]
 800d1b2:	c704      	stmia	r7!, {r2}
 800d1b4:	42b3      	cmp	r3, r6
 800d1b6:	d8e6      	bhi.n	800d186 <__multiply+0xc2>
 800d1b8:	4663      	mov	r3, ip
 800d1ba:	9a06      	ldr	r2, [sp, #24]
 800d1bc:	509d      	str	r5, [r3, r2]
 800d1be:	9b01      	ldr	r3, [sp, #4]
 800d1c0:	6818      	ldr	r0, [r3, #0]
 800d1c2:	0c00      	lsrs	r0, r0, #16
 800d1c4:	d020      	beq.n	800d208 <__multiply+0x144>
 800d1c6:	4663      	mov	r3, ip
 800d1c8:	0025      	movs	r5, r4
 800d1ca:	4661      	mov	r1, ip
 800d1cc:	2700      	movs	r7, #0
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	3514      	adds	r5, #20
 800d1d2:	682a      	ldr	r2, [r5, #0]
 800d1d4:	680e      	ldr	r6, [r1, #0]
 800d1d6:	b292      	uxth	r2, r2
 800d1d8:	4342      	muls	r2, r0
 800d1da:	0c36      	lsrs	r6, r6, #16
 800d1dc:	1992      	adds	r2, r2, r6
 800d1de:	19d2      	adds	r2, r2, r7
 800d1e0:	0416      	lsls	r6, r2, #16
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	431e      	orrs	r6, r3
 800d1e6:	600e      	str	r6, [r1, #0]
 800d1e8:	cd40      	ldmia	r5!, {r6}
 800d1ea:	684b      	ldr	r3, [r1, #4]
 800d1ec:	0c36      	lsrs	r6, r6, #16
 800d1ee:	4346      	muls	r6, r0
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	0c12      	lsrs	r2, r2, #16
 800d1f4:	18f3      	adds	r3, r6, r3
 800d1f6:	189b      	adds	r3, r3, r2
 800d1f8:	9a05      	ldr	r2, [sp, #20]
 800d1fa:	0c1f      	lsrs	r7, r3, #16
 800d1fc:	3104      	adds	r1, #4
 800d1fe:	42aa      	cmp	r2, r5
 800d200:	d8e7      	bhi.n	800d1d2 <__multiply+0x10e>
 800d202:	4662      	mov	r2, ip
 800d204:	9906      	ldr	r1, [sp, #24]
 800d206:	5053      	str	r3, [r2, r1]
 800d208:	9b01      	ldr	r3, [sp, #4]
 800d20a:	3304      	adds	r3, #4
 800d20c:	9301      	str	r3, [sp, #4]
 800d20e:	2304      	movs	r3, #4
 800d210:	449c      	add	ip, r3
 800d212:	e79b      	b.n	800d14c <__multiply+0x88>
 800d214:	9b03      	ldr	r3, [sp, #12]
 800d216:	3b01      	subs	r3, #1
 800d218:	9303      	str	r3, [sp, #12]
 800d21a:	e79b      	b.n	800d154 <__multiply+0x90>
 800d21c:	08014979 	.word	0x08014979
 800d220:	080149ea 	.word	0x080149ea

0800d224 <__pow5mult>:
 800d224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d226:	2303      	movs	r3, #3
 800d228:	0015      	movs	r5, r2
 800d22a:	0007      	movs	r7, r0
 800d22c:	000e      	movs	r6, r1
 800d22e:	401a      	ands	r2, r3
 800d230:	421d      	tst	r5, r3
 800d232:	d008      	beq.n	800d246 <__pow5mult+0x22>
 800d234:	491a      	ldr	r1, [pc, #104]	; (800d2a0 <__pow5mult+0x7c>)
 800d236:	3a01      	subs	r2, #1
 800d238:	0092      	lsls	r2, r2, #2
 800d23a:	5852      	ldr	r2, [r2, r1]
 800d23c:	2300      	movs	r3, #0
 800d23e:	0031      	movs	r1, r6
 800d240:	f7ff fe50 	bl	800cee4 <__multadd>
 800d244:	0006      	movs	r6, r0
 800d246:	10ad      	asrs	r5, r5, #2
 800d248:	d027      	beq.n	800d29a <__pow5mult+0x76>
 800d24a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d24c:	2c00      	cmp	r4, #0
 800d24e:	d107      	bne.n	800d260 <__pow5mult+0x3c>
 800d250:	0038      	movs	r0, r7
 800d252:	4914      	ldr	r1, [pc, #80]	; (800d2a4 <__pow5mult+0x80>)
 800d254:	f7ff ff1e 	bl	800d094 <__i2b>
 800d258:	2300      	movs	r3, #0
 800d25a:	0004      	movs	r4, r0
 800d25c:	6438      	str	r0, [r7, #64]	; 0x40
 800d25e:	6003      	str	r3, [r0, #0]
 800d260:	2301      	movs	r3, #1
 800d262:	421d      	tst	r5, r3
 800d264:	d00a      	beq.n	800d27c <__pow5mult+0x58>
 800d266:	0031      	movs	r1, r6
 800d268:	0022      	movs	r2, r4
 800d26a:	0038      	movs	r0, r7
 800d26c:	f7ff ff2a 	bl	800d0c4 <__multiply>
 800d270:	0031      	movs	r1, r6
 800d272:	9001      	str	r0, [sp, #4]
 800d274:	0038      	movs	r0, r7
 800d276:	f7ff fe2b 	bl	800ced0 <_Bfree>
 800d27a:	9e01      	ldr	r6, [sp, #4]
 800d27c:	106d      	asrs	r5, r5, #1
 800d27e:	d00c      	beq.n	800d29a <__pow5mult+0x76>
 800d280:	6820      	ldr	r0, [r4, #0]
 800d282:	2800      	cmp	r0, #0
 800d284:	d107      	bne.n	800d296 <__pow5mult+0x72>
 800d286:	0022      	movs	r2, r4
 800d288:	0021      	movs	r1, r4
 800d28a:	0038      	movs	r0, r7
 800d28c:	f7ff ff1a 	bl	800d0c4 <__multiply>
 800d290:	2300      	movs	r3, #0
 800d292:	6020      	str	r0, [r4, #0]
 800d294:	6003      	str	r3, [r0, #0]
 800d296:	0004      	movs	r4, r0
 800d298:	e7e2      	b.n	800d260 <__pow5mult+0x3c>
 800d29a:	0030      	movs	r0, r6
 800d29c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d29e:	46c0      	nop			; (mov r8, r8)
 800d2a0:	08014b38 	.word	0x08014b38
 800d2a4:	00000271 	.word	0x00000271

0800d2a8 <__lshift>:
 800d2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2aa:	000c      	movs	r4, r1
 800d2ac:	0017      	movs	r7, r2
 800d2ae:	6923      	ldr	r3, [r4, #16]
 800d2b0:	1155      	asrs	r5, r2, #5
 800d2b2:	b087      	sub	sp, #28
 800d2b4:	18eb      	adds	r3, r5, r3
 800d2b6:	9302      	str	r3, [sp, #8]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	9301      	str	r3, [sp, #4]
 800d2bc:	6849      	ldr	r1, [r1, #4]
 800d2be:	68a3      	ldr	r3, [r4, #8]
 800d2c0:	9004      	str	r0, [sp, #16]
 800d2c2:	9a01      	ldr	r2, [sp, #4]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	db10      	blt.n	800d2ea <__lshift+0x42>
 800d2c8:	9804      	ldr	r0, [sp, #16]
 800d2ca:	f7ff fdd9 	bl	800ce80 <_Balloc>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	0002      	movs	r2, r0
 800d2d2:	0006      	movs	r6, r0
 800d2d4:	0019      	movs	r1, r3
 800d2d6:	3214      	adds	r2, #20
 800d2d8:	4298      	cmp	r0, r3
 800d2da:	d10c      	bne.n	800d2f6 <__lshift+0x4e>
 800d2dc:	31df      	adds	r1, #223	; 0xdf
 800d2de:	0032      	movs	r2, r6
 800d2e0:	4b26      	ldr	r3, [pc, #152]	; (800d37c <__lshift+0xd4>)
 800d2e2:	4827      	ldr	r0, [pc, #156]	; (800d380 <__lshift+0xd8>)
 800d2e4:	31ff      	adds	r1, #255	; 0xff
 800d2e6:	f003 f88f 	bl	8010408 <__assert_func>
 800d2ea:	3101      	adds	r1, #1
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	e7e8      	b.n	800d2c2 <__lshift+0x1a>
 800d2f0:	0098      	lsls	r0, r3, #2
 800d2f2:	5011      	str	r1, [r2, r0]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	42ab      	cmp	r3, r5
 800d2f8:	dbfa      	blt.n	800d2f0 <__lshift+0x48>
 800d2fa:	43eb      	mvns	r3, r5
 800d2fc:	17db      	asrs	r3, r3, #31
 800d2fe:	401d      	ands	r5, r3
 800d300:	211f      	movs	r1, #31
 800d302:	0023      	movs	r3, r4
 800d304:	0038      	movs	r0, r7
 800d306:	00ad      	lsls	r5, r5, #2
 800d308:	1955      	adds	r5, r2, r5
 800d30a:	6922      	ldr	r2, [r4, #16]
 800d30c:	3314      	adds	r3, #20
 800d30e:	0092      	lsls	r2, r2, #2
 800d310:	4008      	ands	r0, r1
 800d312:	4684      	mov	ip, r0
 800d314:	189a      	adds	r2, r3, r2
 800d316:	420f      	tst	r7, r1
 800d318:	d02a      	beq.n	800d370 <__lshift+0xc8>
 800d31a:	3101      	adds	r1, #1
 800d31c:	1a09      	subs	r1, r1, r0
 800d31e:	9105      	str	r1, [sp, #20]
 800d320:	2100      	movs	r1, #0
 800d322:	9503      	str	r5, [sp, #12]
 800d324:	4667      	mov	r7, ip
 800d326:	6818      	ldr	r0, [r3, #0]
 800d328:	40b8      	lsls	r0, r7
 800d32a:	4308      	orrs	r0, r1
 800d32c:	9903      	ldr	r1, [sp, #12]
 800d32e:	c101      	stmia	r1!, {r0}
 800d330:	9103      	str	r1, [sp, #12]
 800d332:	9805      	ldr	r0, [sp, #20]
 800d334:	cb02      	ldmia	r3!, {r1}
 800d336:	40c1      	lsrs	r1, r0
 800d338:	429a      	cmp	r2, r3
 800d33a:	d8f3      	bhi.n	800d324 <__lshift+0x7c>
 800d33c:	0020      	movs	r0, r4
 800d33e:	3015      	adds	r0, #21
 800d340:	2304      	movs	r3, #4
 800d342:	4282      	cmp	r2, r0
 800d344:	d304      	bcc.n	800d350 <__lshift+0xa8>
 800d346:	1b13      	subs	r3, r2, r4
 800d348:	3b15      	subs	r3, #21
 800d34a:	089b      	lsrs	r3, r3, #2
 800d34c:	3301      	adds	r3, #1
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	50e9      	str	r1, [r5, r3]
 800d352:	2900      	cmp	r1, #0
 800d354:	d002      	beq.n	800d35c <__lshift+0xb4>
 800d356:	9b02      	ldr	r3, [sp, #8]
 800d358:	3302      	adds	r3, #2
 800d35a:	9301      	str	r3, [sp, #4]
 800d35c:	9b01      	ldr	r3, [sp, #4]
 800d35e:	9804      	ldr	r0, [sp, #16]
 800d360:	3b01      	subs	r3, #1
 800d362:	0021      	movs	r1, r4
 800d364:	6133      	str	r3, [r6, #16]
 800d366:	f7ff fdb3 	bl	800ced0 <_Bfree>
 800d36a:	0030      	movs	r0, r6
 800d36c:	b007      	add	sp, #28
 800d36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d370:	cb02      	ldmia	r3!, {r1}
 800d372:	c502      	stmia	r5!, {r1}
 800d374:	429a      	cmp	r2, r3
 800d376:	d8fb      	bhi.n	800d370 <__lshift+0xc8>
 800d378:	e7f0      	b.n	800d35c <__lshift+0xb4>
 800d37a:	46c0      	nop			; (mov r8, r8)
 800d37c:	08014979 	.word	0x08014979
 800d380:	080149ea 	.word	0x080149ea

0800d384 <__mcmp>:
 800d384:	b530      	push	{r4, r5, lr}
 800d386:	690b      	ldr	r3, [r1, #16]
 800d388:	6904      	ldr	r4, [r0, #16]
 800d38a:	0002      	movs	r2, r0
 800d38c:	1ae0      	subs	r0, r4, r3
 800d38e:	429c      	cmp	r4, r3
 800d390:	d10e      	bne.n	800d3b0 <__mcmp+0x2c>
 800d392:	3214      	adds	r2, #20
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	3114      	adds	r1, #20
 800d398:	0014      	movs	r4, r2
 800d39a:	18c9      	adds	r1, r1, r3
 800d39c:	18d2      	adds	r2, r2, r3
 800d39e:	3a04      	subs	r2, #4
 800d3a0:	3904      	subs	r1, #4
 800d3a2:	6815      	ldr	r5, [r2, #0]
 800d3a4:	680b      	ldr	r3, [r1, #0]
 800d3a6:	429d      	cmp	r5, r3
 800d3a8:	d003      	beq.n	800d3b2 <__mcmp+0x2e>
 800d3aa:	2001      	movs	r0, #1
 800d3ac:	429d      	cmp	r5, r3
 800d3ae:	d303      	bcc.n	800d3b8 <__mcmp+0x34>
 800d3b0:	bd30      	pop	{r4, r5, pc}
 800d3b2:	4294      	cmp	r4, r2
 800d3b4:	d3f3      	bcc.n	800d39e <__mcmp+0x1a>
 800d3b6:	e7fb      	b.n	800d3b0 <__mcmp+0x2c>
 800d3b8:	4240      	negs	r0, r0
 800d3ba:	e7f9      	b.n	800d3b0 <__mcmp+0x2c>

0800d3bc <__mdiff>:
 800d3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3be:	000e      	movs	r6, r1
 800d3c0:	0007      	movs	r7, r0
 800d3c2:	0011      	movs	r1, r2
 800d3c4:	0030      	movs	r0, r6
 800d3c6:	b087      	sub	sp, #28
 800d3c8:	0014      	movs	r4, r2
 800d3ca:	f7ff ffdb 	bl	800d384 <__mcmp>
 800d3ce:	1e05      	subs	r5, r0, #0
 800d3d0:	d110      	bne.n	800d3f4 <__mdiff+0x38>
 800d3d2:	0001      	movs	r1, r0
 800d3d4:	0038      	movs	r0, r7
 800d3d6:	f7ff fd53 	bl	800ce80 <_Balloc>
 800d3da:	1e02      	subs	r2, r0, #0
 800d3dc:	d104      	bne.n	800d3e8 <__mdiff+0x2c>
 800d3de:	4b3f      	ldr	r3, [pc, #252]	; (800d4dc <__mdiff+0x120>)
 800d3e0:	483f      	ldr	r0, [pc, #252]	; (800d4e0 <__mdiff+0x124>)
 800d3e2:	4940      	ldr	r1, [pc, #256]	; (800d4e4 <__mdiff+0x128>)
 800d3e4:	f003 f810 	bl	8010408 <__assert_func>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	6145      	str	r5, [r0, #20]
 800d3ec:	6103      	str	r3, [r0, #16]
 800d3ee:	0010      	movs	r0, r2
 800d3f0:	b007      	add	sp, #28
 800d3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	9301      	str	r3, [sp, #4]
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	db04      	blt.n	800d406 <__mdiff+0x4a>
 800d3fc:	0023      	movs	r3, r4
 800d3fe:	0034      	movs	r4, r6
 800d400:	001e      	movs	r6, r3
 800d402:	2300      	movs	r3, #0
 800d404:	9301      	str	r3, [sp, #4]
 800d406:	0038      	movs	r0, r7
 800d408:	6861      	ldr	r1, [r4, #4]
 800d40a:	f7ff fd39 	bl	800ce80 <_Balloc>
 800d40e:	1e02      	subs	r2, r0, #0
 800d410:	d103      	bne.n	800d41a <__mdiff+0x5e>
 800d412:	4b32      	ldr	r3, [pc, #200]	; (800d4dc <__mdiff+0x120>)
 800d414:	4832      	ldr	r0, [pc, #200]	; (800d4e0 <__mdiff+0x124>)
 800d416:	4934      	ldr	r1, [pc, #208]	; (800d4e8 <__mdiff+0x12c>)
 800d418:	e7e4      	b.n	800d3e4 <__mdiff+0x28>
 800d41a:	9b01      	ldr	r3, [sp, #4]
 800d41c:	2700      	movs	r7, #0
 800d41e:	60c3      	str	r3, [r0, #12]
 800d420:	6920      	ldr	r0, [r4, #16]
 800d422:	3414      	adds	r4, #20
 800d424:	0083      	lsls	r3, r0, #2
 800d426:	18e3      	adds	r3, r4, r3
 800d428:	0021      	movs	r1, r4
 800d42a:	9401      	str	r4, [sp, #4]
 800d42c:	0034      	movs	r4, r6
 800d42e:	9302      	str	r3, [sp, #8]
 800d430:	6933      	ldr	r3, [r6, #16]
 800d432:	3414      	adds	r4, #20
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	18e3      	adds	r3, r4, r3
 800d438:	9303      	str	r3, [sp, #12]
 800d43a:	0013      	movs	r3, r2
 800d43c:	3314      	adds	r3, #20
 800d43e:	469c      	mov	ip, r3
 800d440:	9305      	str	r3, [sp, #20]
 800d442:	9104      	str	r1, [sp, #16]
 800d444:	9b04      	ldr	r3, [sp, #16]
 800d446:	cc02      	ldmia	r4!, {r1}
 800d448:	cb20      	ldmia	r3!, {r5}
 800d44a:	9304      	str	r3, [sp, #16]
 800d44c:	b2ab      	uxth	r3, r5
 800d44e:	19df      	adds	r7, r3, r7
 800d450:	b28b      	uxth	r3, r1
 800d452:	1afb      	subs	r3, r7, r3
 800d454:	0c09      	lsrs	r1, r1, #16
 800d456:	0c2d      	lsrs	r5, r5, #16
 800d458:	1a6d      	subs	r5, r5, r1
 800d45a:	1419      	asrs	r1, r3, #16
 800d45c:	1869      	adds	r1, r5, r1
 800d45e:	b29b      	uxth	r3, r3
 800d460:	140f      	asrs	r7, r1, #16
 800d462:	0409      	lsls	r1, r1, #16
 800d464:	4319      	orrs	r1, r3
 800d466:	4663      	mov	r3, ip
 800d468:	c302      	stmia	r3!, {r1}
 800d46a:	469c      	mov	ip, r3
 800d46c:	9b03      	ldr	r3, [sp, #12]
 800d46e:	42a3      	cmp	r3, r4
 800d470:	d8e8      	bhi.n	800d444 <__mdiff+0x88>
 800d472:	0031      	movs	r1, r6
 800d474:	9c03      	ldr	r4, [sp, #12]
 800d476:	3115      	adds	r1, #21
 800d478:	2304      	movs	r3, #4
 800d47a:	428c      	cmp	r4, r1
 800d47c:	d304      	bcc.n	800d488 <__mdiff+0xcc>
 800d47e:	1ba3      	subs	r3, r4, r6
 800d480:	3b15      	subs	r3, #21
 800d482:	089b      	lsrs	r3, r3, #2
 800d484:	3301      	adds	r3, #1
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	9901      	ldr	r1, [sp, #4]
 800d48a:	18cd      	adds	r5, r1, r3
 800d48c:	9905      	ldr	r1, [sp, #20]
 800d48e:	002e      	movs	r6, r5
 800d490:	18cb      	adds	r3, r1, r3
 800d492:	469c      	mov	ip, r3
 800d494:	9902      	ldr	r1, [sp, #8]
 800d496:	428e      	cmp	r6, r1
 800d498:	d310      	bcc.n	800d4bc <__mdiff+0x100>
 800d49a:	9e02      	ldr	r6, [sp, #8]
 800d49c:	1ee9      	subs	r1, r5, #3
 800d49e:	2400      	movs	r4, #0
 800d4a0:	428e      	cmp	r6, r1
 800d4a2:	d304      	bcc.n	800d4ae <__mdiff+0xf2>
 800d4a4:	0031      	movs	r1, r6
 800d4a6:	3103      	adds	r1, #3
 800d4a8:	1b49      	subs	r1, r1, r5
 800d4aa:	0889      	lsrs	r1, r1, #2
 800d4ac:	008c      	lsls	r4, r1, #2
 800d4ae:	191b      	adds	r3, r3, r4
 800d4b0:	3b04      	subs	r3, #4
 800d4b2:	6819      	ldr	r1, [r3, #0]
 800d4b4:	2900      	cmp	r1, #0
 800d4b6:	d00f      	beq.n	800d4d8 <__mdiff+0x11c>
 800d4b8:	6110      	str	r0, [r2, #16]
 800d4ba:	e798      	b.n	800d3ee <__mdiff+0x32>
 800d4bc:	ce02      	ldmia	r6!, {r1}
 800d4be:	b28c      	uxth	r4, r1
 800d4c0:	19e4      	adds	r4, r4, r7
 800d4c2:	0c0f      	lsrs	r7, r1, #16
 800d4c4:	1421      	asrs	r1, r4, #16
 800d4c6:	1879      	adds	r1, r7, r1
 800d4c8:	b2a4      	uxth	r4, r4
 800d4ca:	140f      	asrs	r7, r1, #16
 800d4cc:	0409      	lsls	r1, r1, #16
 800d4ce:	4321      	orrs	r1, r4
 800d4d0:	4664      	mov	r4, ip
 800d4d2:	c402      	stmia	r4!, {r1}
 800d4d4:	46a4      	mov	ip, r4
 800d4d6:	e7dd      	b.n	800d494 <__mdiff+0xd8>
 800d4d8:	3801      	subs	r0, #1
 800d4da:	e7e9      	b.n	800d4b0 <__mdiff+0xf4>
 800d4dc:	08014979 	.word	0x08014979
 800d4e0:	080149ea 	.word	0x080149ea
 800d4e4:	00000237 	.word	0x00000237
 800d4e8:	00000245 	.word	0x00000245

0800d4ec <__ulp>:
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	4b0b      	ldr	r3, [pc, #44]	; (800d51c <__ulp+0x30>)
 800d4f0:	4019      	ands	r1, r3
 800d4f2:	4b0b      	ldr	r3, [pc, #44]	; (800d520 <__ulp+0x34>)
 800d4f4:	18c9      	adds	r1, r1, r3
 800d4f6:	4281      	cmp	r1, r0
 800d4f8:	dc06      	bgt.n	800d508 <__ulp+0x1c>
 800d4fa:	4249      	negs	r1, r1
 800d4fc:	150b      	asrs	r3, r1, #20
 800d4fe:	2b13      	cmp	r3, #19
 800d500:	dc03      	bgt.n	800d50a <__ulp+0x1e>
 800d502:	2180      	movs	r1, #128	; 0x80
 800d504:	0309      	lsls	r1, r1, #12
 800d506:	4119      	asrs	r1, r3
 800d508:	4770      	bx	lr
 800d50a:	3b14      	subs	r3, #20
 800d50c:	2001      	movs	r0, #1
 800d50e:	2b1e      	cmp	r3, #30
 800d510:	dc02      	bgt.n	800d518 <__ulp+0x2c>
 800d512:	2080      	movs	r0, #128	; 0x80
 800d514:	0600      	lsls	r0, r0, #24
 800d516:	40d8      	lsrs	r0, r3
 800d518:	2100      	movs	r1, #0
 800d51a:	e7f5      	b.n	800d508 <__ulp+0x1c>
 800d51c:	7ff00000 	.word	0x7ff00000
 800d520:	fcc00000 	.word	0xfcc00000

0800d524 <__b2d>:
 800d524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d526:	0006      	movs	r6, r0
 800d528:	6903      	ldr	r3, [r0, #16]
 800d52a:	3614      	adds	r6, #20
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	18f3      	adds	r3, r6, r3
 800d530:	1f1d      	subs	r5, r3, #4
 800d532:	682c      	ldr	r4, [r5, #0]
 800d534:	000f      	movs	r7, r1
 800d536:	0020      	movs	r0, r4
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	f7ff fd63 	bl	800d004 <__hi0bits>
 800d53e:	2220      	movs	r2, #32
 800d540:	1a12      	subs	r2, r2, r0
 800d542:	603a      	str	r2, [r7, #0]
 800d544:	0003      	movs	r3, r0
 800d546:	4a1c      	ldr	r2, [pc, #112]	; (800d5b8 <__b2d+0x94>)
 800d548:	280a      	cmp	r0, #10
 800d54a:	dc15      	bgt.n	800d578 <__b2d+0x54>
 800d54c:	210b      	movs	r1, #11
 800d54e:	0027      	movs	r7, r4
 800d550:	1a09      	subs	r1, r1, r0
 800d552:	40cf      	lsrs	r7, r1
 800d554:	433a      	orrs	r2, r7
 800d556:	468c      	mov	ip, r1
 800d558:	0011      	movs	r1, r2
 800d55a:	2200      	movs	r2, #0
 800d55c:	42ae      	cmp	r6, r5
 800d55e:	d202      	bcs.n	800d566 <__b2d+0x42>
 800d560:	9a01      	ldr	r2, [sp, #4]
 800d562:	3a08      	subs	r2, #8
 800d564:	6812      	ldr	r2, [r2, #0]
 800d566:	3315      	adds	r3, #21
 800d568:	409c      	lsls	r4, r3
 800d56a:	4663      	mov	r3, ip
 800d56c:	0027      	movs	r7, r4
 800d56e:	40da      	lsrs	r2, r3
 800d570:	4317      	orrs	r7, r2
 800d572:	0038      	movs	r0, r7
 800d574:	b003      	add	sp, #12
 800d576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d578:	2700      	movs	r7, #0
 800d57a:	42ae      	cmp	r6, r5
 800d57c:	d202      	bcs.n	800d584 <__b2d+0x60>
 800d57e:	9d01      	ldr	r5, [sp, #4]
 800d580:	3d08      	subs	r5, #8
 800d582:	682f      	ldr	r7, [r5, #0]
 800d584:	210b      	movs	r1, #11
 800d586:	4249      	negs	r1, r1
 800d588:	468c      	mov	ip, r1
 800d58a:	449c      	add	ip, r3
 800d58c:	2b0b      	cmp	r3, #11
 800d58e:	d010      	beq.n	800d5b2 <__b2d+0x8e>
 800d590:	4661      	mov	r1, ip
 800d592:	2320      	movs	r3, #32
 800d594:	408c      	lsls	r4, r1
 800d596:	1a5b      	subs	r3, r3, r1
 800d598:	0039      	movs	r1, r7
 800d59a:	40d9      	lsrs	r1, r3
 800d59c:	430c      	orrs	r4, r1
 800d59e:	4322      	orrs	r2, r4
 800d5a0:	0011      	movs	r1, r2
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	42b5      	cmp	r5, r6
 800d5a6:	d901      	bls.n	800d5ac <__b2d+0x88>
 800d5a8:	3d04      	subs	r5, #4
 800d5aa:	682a      	ldr	r2, [r5, #0]
 800d5ac:	4664      	mov	r4, ip
 800d5ae:	40a7      	lsls	r7, r4
 800d5b0:	e7dd      	b.n	800d56e <__b2d+0x4a>
 800d5b2:	4322      	orrs	r2, r4
 800d5b4:	0011      	movs	r1, r2
 800d5b6:	e7dc      	b.n	800d572 <__b2d+0x4e>
 800d5b8:	3ff00000 	.word	0x3ff00000

0800d5bc <__d2b>:
 800d5bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5be:	2101      	movs	r1, #1
 800d5c0:	0014      	movs	r4, r2
 800d5c2:	001d      	movs	r5, r3
 800d5c4:	9f08      	ldr	r7, [sp, #32]
 800d5c6:	f7ff fc5b 	bl	800ce80 <_Balloc>
 800d5ca:	1e06      	subs	r6, r0, #0
 800d5cc:	d105      	bne.n	800d5da <__d2b+0x1e>
 800d5ce:	0032      	movs	r2, r6
 800d5d0:	4b24      	ldr	r3, [pc, #144]	; (800d664 <__d2b+0xa8>)
 800d5d2:	4825      	ldr	r0, [pc, #148]	; (800d668 <__d2b+0xac>)
 800d5d4:	4925      	ldr	r1, [pc, #148]	; (800d66c <__d2b+0xb0>)
 800d5d6:	f002 ff17 	bl	8010408 <__assert_func>
 800d5da:	032b      	lsls	r3, r5, #12
 800d5dc:	006d      	lsls	r5, r5, #1
 800d5de:	0b1b      	lsrs	r3, r3, #12
 800d5e0:	0d6d      	lsrs	r5, r5, #21
 800d5e2:	d125      	bne.n	800d630 <__d2b+0x74>
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	2c00      	cmp	r4, #0
 800d5e8:	d028      	beq.n	800d63c <__d2b+0x80>
 800d5ea:	4668      	mov	r0, sp
 800d5ec:	9400      	str	r4, [sp, #0]
 800d5ee:	f7ff fd23 	bl	800d038 <__lo0bits>
 800d5f2:	9b01      	ldr	r3, [sp, #4]
 800d5f4:	9900      	ldr	r1, [sp, #0]
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d01e      	beq.n	800d638 <__d2b+0x7c>
 800d5fa:	2220      	movs	r2, #32
 800d5fc:	001c      	movs	r4, r3
 800d5fe:	1a12      	subs	r2, r2, r0
 800d600:	4094      	lsls	r4, r2
 800d602:	0022      	movs	r2, r4
 800d604:	40c3      	lsrs	r3, r0
 800d606:	430a      	orrs	r2, r1
 800d608:	6172      	str	r2, [r6, #20]
 800d60a:	9301      	str	r3, [sp, #4]
 800d60c:	9c01      	ldr	r4, [sp, #4]
 800d60e:	61b4      	str	r4, [r6, #24]
 800d610:	1e63      	subs	r3, r4, #1
 800d612:	419c      	sbcs	r4, r3
 800d614:	3401      	adds	r4, #1
 800d616:	6134      	str	r4, [r6, #16]
 800d618:	2d00      	cmp	r5, #0
 800d61a:	d017      	beq.n	800d64c <__d2b+0x90>
 800d61c:	2435      	movs	r4, #53	; 0x35
 800d61e:	4b14      	ldr	r3, [pc, #80]	; (800d670 <__d2b+0xb4>)
 800d620:	18ed      	adds	r5, r5, r3
 800d622:	182d      	adds	r5, r5, r0
 800d624:	603d      	str	r5, [r7, #0]
 800d626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d628:	1a24      	subs	r4, r4, r0
 800d62a:	601c      	str	r4, [r3, #0]
 800d62c:	0030      	movs	r0, r6
 800d62e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d630:	2280      	movs	r2, #128	; 0x80
 800d632:	0352      	lsls	r2, r2, #13
 800d634:	4313      	orrs	r3, r2
 800d636:	e7d5      	b.n	800d5e4 <__d2b+0x28>
 800d638:	6171      	str	r1, [r6, #20]
 800d63a:	e7e7      	b.n	800d60c <__d2b+0x50>
 800d63c:	a801      	add	r0, sp, #4
 800d63e:	f7ff fcfb 	bl	800d038 <__lo0bits>
 800d642:	9b01      	ldr	r3, [sp, #4]
 800d644:	2401      	movs	r4, #1
 800d646:	6173      	str	r3, [r6, #20]
 800d648:	3020      	adds	r0, #32
 800d64a:	e7e4      	b.n	800d616 <__d2b+0x5a>
 800d64c:	4b09      	ldr	r3, [pc, #36]	; (800d674 <__d2b+0xb8>)
 800d64e:	18c0      	adds	r0, r0, r3
 800d650:	4b09      	ldr	r3, [pc, #36]	; (800d678 <__d2b+0xbc>)
 800d652:	6038      	str	r0, [r7, #0]
 800d654:	18e3      	adds	r3, r4, r3
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	18f3      	adds	r3, r6, r3
 800d65a:	6958      	ldr	r0, [r3, #20]
 800d65c:	f7ff fcd2 	bl	800d004 <__hi0bits>
 800d660:	0164      	lsls	r4, r4, #5
 800d662:	e7e0      	b.n	800d626 <__d2b+0x6a>
 800d664:	08014979 	.word	0x08014979
 800d668:	080149ea 	.word	0x080149ea
 800d66c:	0000030f 	.word	0x0000030f
 800d670:	fffffbcd 	.word	0xfffffbcd
 800d674:	fffffbce 	.word	0xfffffbce
 800d678:	3fffffff 	.word	0x3fffffff

0800d67c <__ratio>:
 800d67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d67e:	b087      	sub	sp, #28
 800d680:	000f      	movs	r7, r1
 800d682:	a904      	add	r1, sp, #16
 800d684:	0006      	movs	r6, r0
 800d686:	f7ff ff4d 	bl	800d524 <__b2d>
 800d68a:	9000      	str	r0, [sp, #0]
 800d68c:	9101      	str	r1, [sp, #4]
 800d68e:	9c00      	ldr	r4, [sp, #0]
 800d690:	9d01      	ldr	r5, [sp, #4]
 800d692:	0038      	movs	r0, r7
 800d694:	a905      	add	r1, sp, #20
 800d696:	f7ff ff45 	bl	800d524 <__b2d>
 800d69a:	9002      	str	r0, [sp, #8]
 800d69c:	9103      	str	r1, [sp, #12]
 800d69e:	9a02      	ldr	r2, [sp, #8]
 800d6a0:	9b03      	ldr	r3, [sp, #12]
 800d6a2:	6930      	ldr	r0, [r6, #16]
 800d6a4:	6939      	ldr	r1, [r7, #16]
 800d6a6:	9e04      	ldr	r6, [sp, #16]
 800d6a8:	1a40      	subs	r0, r0, r1
 800d6aa:	9905      	ldr	r1, [sp, #20]
 800d6ac:	0140      	lsls	r0, r0, #5
 800d6ae:	1a71      	subs	r1, r6, r1
 800d6b0:	1841      	adds	r1, r0, r1
 800d6b2:	0508      	lsls	r0, r1, #20
 800d6b4:	2900      	cmp	r1, #0
 800d6b6:	dd07      	ble.n	800d6c8 <__ratio+0x4c>
 800d6b8:	9901      	ldr	r1, [sp, #4]
 800d6ba:	1845      	adds	r5, r0, r1
 800d6bc:	0020      	movs	r0, r4
 800d6be:	0029      	movs	r1, r5
 800d6c0:	f7f3 fbda 	bl	8000e78 <__aeabi_ddiv>
 800d6c4:	b007      	add	sp, #28
 800d6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6c8:	9903      	ldr	r1, [sp, #12]
 800d6ca:	1a0b      	subs	r3, r1, r0
 800d6cc:	e7f6      	b.n	800d6bc <__ratio+0x40>

0800d6ce <__copybits>:
 800d6ce:	b570      	push	{r4, r5, r6, lr}
 800d6d0:	0014      	movs	r4, r2
 800d6d2:	0005      	movs	r5, r0
 800d6d4:	3901      	subs	r1, #1
 800d6d6:	6913      	ldr	r3, [r2, #16]
 800d6d8:	1149      	asrs	r1, r1, #5
 800d6da:	3101      	adds	r1, #1
 800d6dc:	0089      	lsls	r1, r1, #2
 800d6de:	3414      	adds	r4, #20
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	1841      	adds	r1, r0, r1
 800d6e4:	18e3      	adds	r3, r4, r3
 800d6e6:	42a3      	cmp	r3, r4
 800d6e8:	d80d      	bhi.n	800d706 <__copybits+0x38>
 800d6ea:	0014      	movs	r4, r2
 800d6ec:	3411      	adds	r4, #17
 800d6ee:	2500      	movs	r5, #0
 800d6f0:	429c      	cmp	r4, r3
 800d6f2:	d803      	bhi.n	800d6fc <__copybits+0x2e>
 800d6f4:	1a9b      	subs	r3, r3, r2
 800d6f6:	3b11      	subs	r3, #17
 800d6f8:	089b      	lsrs	r3, r3, #2
 800d6fa:	009d      	lsls	r5, r3, #2
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	1940      	adds	r0, r0, r5
 800d700:	4281      	cmp	r1, r0
 800d702:	d803      	bhi.n	800d70c <__copybits+0x3e>
 800d704:	bd70      	pop	{r4, r5, r6, pc}
 800d706:	cc40      	ldmia	r4!, {r6}
 800d708:	c540      	stmia	r5!, {r6}
 800d70a:	e7ec      	b.n	800d6e6 <__copybits+0x18>
 800d70c:	c008      	stmia	r0!, {r3}
 800d70e:	e7f7      	b.n	800d700 <__copybits+0x32>

0800d710 <__any_on>:
 800d710:	0002      	movs	r2, r0
 800d712:	6900      	ldr	r0, [r0, #16]
 800d714:	b510      	push	{r4, lr}
 800d716:	3214      	adds	r2, #20
 800d718:	114b      	asrs	r3, r1, #5
 800d71a:	4298      	cmp	r0, r3
 800d71c:	db13      	blt.n	800d746 <__any_on+0x36>
 800d71e:	dd0c      	ble.n	800d73a <__any_on+0x2a>
 800d720:	241f      	movs	r4, #31
 800d722:	0008      	movs	r0, r1
 800d724:	4020      	ands	r0, r4
 800d726:	4221      	tst	r1, r4
 800d728:	d007      	beq.n	800d73a <__any_on+0x2a>
 800d72a:	0099      	lsls	r1, r3, #2
 800d72c:	588c      	ldr	r4, [r1, r2]
 800d72e:	0021      	movs	r1, r4
 800d730:	40c1      	lsrs	r1, r0
 800d732:	4081      	lsls	r1, r0
 800d734:	2001      	movs	r0, #1
 800d736:	428c      	cmp	r4, r1
 800d738:	d104      	bne.n	800d744 <__any_on+0x34>
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	18d3      	adds	r3, r2, r3
 800d73e:	4293      	cmp	r3, r2
 800d740:	d803      	bhi.n	800d74a <__any_on+0x3a>
 800d742:	2000      	movs	r0, #0
 800d744:	bd10      	pop	{r4, pc}
 800d746:	0003      	movs	r3, r0
 800d748:	e7f7      	b.n	800d73a <__any_on+0x2a>
 800d74a:	3b04      	subs	r3, #4
 800d74c:	6819      	ldr	r1, [r3, #0]
 800d74e:	2900      	cmp	r1, #0
 800d750:	d0f5      	beq.n	800d73e <__any_on+0x2e>
 800d752:	2001      	movs	r0, #1
 800d754:	e7f6      	b.n	800d744 <__any_on+0x34>

0800d756 <__ascii_wctomb>:
 800d756:	0003      	movs	r3, r0
 800d758:	1e08      	subs	r0, r1, #0
 800d75a:	d005      	beq.n	800d768 <__ascii_wctomb+0x12>
 800d75c:	2aff      	cmp	r2, #255	; 0xff
 800d75e:	d904      	bls.n	800d76a <__ascii_wctomb+0x14>
 800d760:	228a      	movs	r2, #138	; 0x8a
 800d762:	2001      	movs	r0, #1
 800d764:	601a      	str	r2, [r3, #0]
 800d766:	4240      	negs	r0, r0
 800d768:	4770      	bx	lr
 800d76a:	2001      	movs	r0, #1
 800d76c:	700a      	strb	r2, [r1, #0]
 800d76e:	e7fb      	b.n	800d768 <__ascii_wctomb+0x12>

0800d770 <_svfprintf_r>:
 800d770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d772:	b0d9      	sub	sp, #356	; 0x164
 800d774:	001c      	movs	r4, r3
 800d776:	910b      	str	r1, [sp, #44]	; 0x2c
 800d778:	9208      	str	r2, [sp, #32]
 800d77a:	900a      	str	r0, [sp, #40]	; 0x28
 800d77c:	f002 fdae 	bl	80102dc <_localeconv_r>
 800d780:	6803      	ldr	r3, [r0, #0]
 800d782:	0018      	movs	r0, r3
 800d784:	931c      	str	r3, [sp, #112]	; 0x70
 800d786:	f7f2 fcbd 	bl	8000104 <strlen>
 800d78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d78c:	9016      	str	r0, [sp, #88]	; 0x58
 800d78e:	899b      	ldrh	r3, [r3, #12]
 800d790:	061b      	lsls	r3, r3, #24
 800d792:	d517      	bpl.n	800d7c4 <_svfprintf_r+0x54>
 800d794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d796:	691b      	ldr	r3, [r3, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d113      	bne.n	800d7c4 <_svfprintf_r+0x54>
 800d79c:	2140      	movs	r1, #64	; 0x40
 800d79e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d7a0:	f7fd fb6e 	bl	800ae80 <_malloc_r>
 800d7a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7a6:	6018      	str	r0, [r3, #0]
 800d7a8:	6118      	str	r0, [r3, #16]
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d107      	bne.n	800d7be <_svfprintf_r+0x4e>
 800d7ae:	230c      	movs	r3, #12
 800d7b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7b2:	6013      	str	r3, [r2, #0]
 800d7b4:	3b0d      	subs	r3, #13
 800d7b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7b8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d7ba:	b059      	add	sp, #356	; 0x164
 800d7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7be:	2340      	movs	r3, #64	; 0x40
 800d7c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7c2:	6153      	str	r3, [r2, #20]
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	932e      	str	r3, [sp, #184]	; 0xb8
 800d7ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800d7cc:	930e      	str	r3, [sp, #56]	; 0x38
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	9214      	str	r2, [sp, #80]	; 0x50
 800d7d2:	9315      	str	r3, [sp, #84]	; 0x54
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	af2f      	add	r7, sp, #188	; 0xbc
 800d7d8:	972c      	str	r7, [sp, #176]	; 0xb0
 800d7da:	931f      	str	r3, [sp, #124]	; 0x7c
 800d7dc:	931e      	str	r3, [sp, #120]	; 0x78
 800d7de:	9312      	str	r3, [sp, #72]	; 0x48
 800d7e0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d7e2:	931d      	str	r3, [sp, #116]	; 0x74
 800d7e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7e6:	9d08      	ldr	r5, [sp, #32]
 800d7e8:	782b      	ldrb	r3, [r5, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d002      	beq.n	800d7f4 <_svfprintf_r+0x84>
 800d7ee:	2b25      	cmp	r3, #37	; 0x25
 800d7f0:	d000      	beq.n	800d7f4 <_svfprintf_r+0x84>
 800d7f2:	e091      	b.n	800d918 <_svfprintf_r+0x1a8>
 800d7f4:	9b08      	ldr	r3, [sp, #32]
 800d7f6:	1aee      	subs	r6, r5, r3
 800d7f8:	429d      	cmp	r5, r3
 800d7fa:	d016      	beq.n	800d82a <_svfprintf_r+0xba>
 800d7fc:	603b      	str	r3, [r7, #0]
 800d7fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d800:	607e      	str	r6, [r7, #4]
 800d802:	199b      	adds	r3, r3, r6
 800d804:	932e      	str	r3, [sp, #184]	; 0xb8
 800d806:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d808:	3708      	adds	r7, #8
 800d80a:	3301      	adds	r3, #1
 800d80c:	932d      	str	r3, [sp, #180]	; 0xb4
 800d80e:	2b07      	cmp	r3, #7
 800d810:	dd08      	ble.n	800d824 <_svfprintf_r+0xb4>
 800d812:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d814:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d816:	aa2c      	add	r2, sp, #176	; 0xb0
 800d818:	f004 f8c0 	bl	801199c <__ssprint_r>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d000      	beq.n	800d822 <_svfprintf_r+0xb2>
 800d820:	e1cf      	b.n	800dbc2 <_svfprintf_r+0x452>
 800d822:	af2f      	add	r7, sp, #188	; 0xbc
 800d824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d826:	199b      	adds	r3, r3, r6
 800d828:	9317      	str	r3, [sp, #92]	; 0x5c
 800d82a:	782b      	ldrb	r3, [r5, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d101      	bne.n	800d834 <_svfprintf_r+0xc4>
 800d830:	f001 f99e 	bl	800eb70 <_svfprintf_r+0x1400>
 800d834:	221b      	movs	r2, #27
 800d836:	2300      	movs	r3, #0
 800d838:	a91e      	add	r1, sp, #120	; 0x78
 800d83a:	1852      	adds	r2, r2, r1
 800d83c:	7013      	strb	r3, [r2, #0]
 800d83e:	2201      	movs	r2, #1
 800d840:	001e      	movs	r6, r3
 800d842:	4252      	negs	r2, r2
 800d844:	3501      	adds	r5, #1
 800d846:	9209      	str	r2, [sp, #36]	; 0x24
 800d848:	9318      	str	r3, [sp, #96]	; 0x60
 800d84a:	1c6b      	adds	r3, r5, #1
 800d84c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d84e:	782b      	ldrb	r3, [r5, #0]
 800d850:	930f      	str	r3, [sp, #60]	; 0x3c
 800d852:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d854:	3820      	subs	r0, #32
 800d856:	285a      	cmp	r0, #90	; 0x5a
 800d858:	d901      	bls.n	800d85e <_svfprintf_r+0xee>
 800d85a:	f000 fe20 	bl	800e49e <_svfprintf_r+0xd2e>
 800d85e:	f7f2 fc63 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d862:	0078      	.short	0x0078
 800d864:	061e061e 	.word	0x061e061e
 800d868:	061e0082 	.word	0x061e0082
 800d86c:	061e061e 	.word	0x061e061e
 800d870:	061e005d 	.word	0x061e005d
 800d874:	0084061e 	.word	0x0084061e
 800d878:	061e008c 	.word	0x061e008c
 800d87c:	0091008a 	.word	0x0091008a
 800d880:	00b2061e 	.word	0x00b2061e
 800d884:	00b400b4 	.word	0x00b400b4
 800d888:	00b400b4 	.word	0x00b400b4
 800d88c:	00b400b4 	.word	0x00b400b4
 800d890:	00b400b4 	.word	0x00b400b4
 800d894:	061e00b4 	.word	0x061e00b4
 800d898:	061e061e 	.word	0x061e061e
 800d89c:	061e061e 	.word	0x061e061e
 800d8a0:	061e061e 	.word	0x061e061e
 800d8a4:	061e013b 	.word	0x061e013b
 800d8a8:	00f400e0 	.word	0x00f400e0
 800d8ac:	013b013b 	.word	0x013b013b
 800d8b0:	061e013b 	.word	0x061e013b
 800d8b4:	061e061e 	.word	0x061e061e
 800d8b8:	00c7061e 	.word	0x00c7061e
 800d8bc:	061e061e 	.word	0x061e061e
 800d8c0:	061e04c7 	.word	0x061e04c7
 800d8c4:	061e061e 	.word	0x061e061e
 800d8c8:	061e050a 	.word	0x061e050a
 800d8cc:	061e052a 	.word	0x061e052a
 800d8d0:	055c061e 	.word	0x055c061e
 800d8d4:	061e061e 	.word	0x061e061e
 800d8d8:	061e061e 	.word	0x061e061e
 800d8dc:	061e061e 	.word	0x061e061e
 800d8e0:	061e061e 	.word	0x061e061e
 800d8e4:	061e013b 	.word	0x061e013b
 800d8e8:	00f600e0 	.word	0x00f600e0
 800d8ec:	013b013b 	.word	0x013b013b
 800d8f0:	00c9013b 	.word	0x00c9013b
 800d8f4:	00dc00f6 	.word	0x00dc00f6
 800d8f8:	00d5061e 	.word	0x00d5061e
 800d8fc:	04a7061e 	.word	0x04a7061e
 800d900:	04fa04c9 	.word	0x04fa04c9
 800d904:	061e00dc 	.word	0x061e00dc
 800d908:	0080050a 	.word	0x0080050a
 800d90c:	061e052c 	.word	0x061e052c
 800d910:	057c061e 	.word	0x057c061e
 800d914:	0080061e 	.word	0x0080061e
 800d918:	3501      	adds	r5, #1
 800d91a:	e765      	b.n	800d7e8 <_svfprintf_r+0x78>
 800d91c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d91e:	f002 fcdd 	bl	80102dc <_localeconv_r>
 800d922:	6843      	ldr	r3, [r0, #4]
 800d924:	0018      	movs	r0, r3
 800d926:	931d      	str	r3, [sp, #116]	; 0x74
 800d928:	f7f2 fbec 	bl	8000104 <strlen>
 800d92c:	901b      	str	r0, [sp, #108]	; 0x6c
 800d92e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d930:	f002 fcd4 	bl	80102dc <_localeconv_r>
 800d934:	6883      	ldr	r3, [r0, #8]
 800d936:	9312      	str	r3, [sp, #72]	; 0x48
 800d938:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d011      	beq.n	800d962 <_svfprintf_r+0x1f2>
 800d93e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00e      	beq.n	800d962 <_svfprintf_r+0x1f2>
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00b      	beq.n	800d962 <_svfprintf_r+0x1f2>
 800d94a:	2380      	movs	r3, #128	; 0x80
 800d94c:	00db      	lsls	r3, r3, #3
 800d94e:	431e      	orrs	r6, r3
 800d950:	e007      	b.n	800d962 <_svfprintf_r+0x1f2>
 800d952:	231b      	movs	r3, #27
 800d954:	aa1e      	add	r2, sp, #120	; 0x78
 800d956:	189b      	adds	r3, r3, r2
 800d958:	781a      	ldrb	r2, [r3, #0]
 800d95a:	2a00      	cmp	r2, #0
 800d95c:	d101      	bne.n	800d962 <_svfprintf_r+0x1f2>
 800d95e:	3220      	adds	r2, #32
 800d960:	701a      	strb	r2, [r3, #0]
 800d962:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d964:	e771      	b.n	800d84a <_svfprintf_r+0xda>
 800d966:	2301      	movs	r3, #1
 800d968:	e7f1      	b.n	800d94e <_svfprintf_r+0x1de>
 800d96a:	cc08      	ldmia	r4!, {r3}
 800d96c:	9318      	str	r3, [sp, #96]	; 0x60
 800d96e:	2b00      	cmp	r3, #0
 800d970:	daf7      	bge.n	800d962 <_svfprintf_r+0x1f2>
 800d972:	425b      	negs	r3, r3
 800d974:	9318      	str	r3, [sp, #96]	; 0x60
 800d976:	2304      	movs	r3, #4
 800d978:	e7e9      	b.n	800d94e <_svfprintf_r+0x1de>
 800d97a:	231b      	movs	r3, #27
 800d97c:	aa1e      	add	r2, sp, #120	; 0x78
 800d97e:	189b      	adds	r3, r3, r2
 800d980:	222b      	movs	r2, #43	; 0x2b
 800d982:	e7ed      	b.n	800d960 <_svfprintf_r+0x1f0>
 800d984:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d986:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d988:	7812      	ldrb	r2, [r2, #0]
 800d98a:	3301      	adds	r3, #1
 800d98c:	920f      	str	r2, [sp, #60]	; 0x3c
 800d98e:	2a2a      	cmp	r2, #42	; 0x2a
 800d990:	d010      	beq.n	800d9b4 <_svfprintf_r+0x244>
 800d992:	2200      	movs	r2, #0
 800d994:	9209      	str	r2, [sp, #36]	; 0x24
 800d996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d998:	9313      	str	r3, [sp, #76]	; 0x4c
 800d99a:	3a30      	subs	r2, #48	; 0x30
 800d99c:	2a09      	cmp	r2, #9
 800d99e:	d900      	bls.n	800d9a2 <_svfprintf_r+0x232>
 800d9a0:	e757      	b.n	800d852 <_svfprintf_r+0xe2>
 800d9a2:	200a      	movs	r0, #10
 800d9a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9a6:	4341      	muls	r1, r0
 800d9a8:	188a      	adds	r2, r1, r2
 800d9aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ac:	781a      	ldrb	r2, [r3, #0]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9b2:	e7f0      	b.n	800d996 <_svfprintf_r+0x226>
 800d9b4:	cc04      	ldmia	r4!, {r2}
 800d9b6:	9209      	str	r2, [sp, #36]	; 0x24
 800d9b8:	2a00      	cmp	r2, #0
 800d9ba:	da02      	bge.n	800d9c2 <_svfprintf_r+0x252>
 800d9bc:	2201      	movs	r2, #1
 800d9be:	4252      	negs	r2, r2
 800d9c0:	9209      	str	r2, [sp, #36]	; 0x24
 800d9c2:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9c4:	e7cd      	b.n	800d962 <_svfprintf_r+0x1f2>
 800d9c6:	2380      	movs	r3, #128	; 0x80
 800d9c8:	e7c1      	b.n	800d94e <_svfprintf_r+0x1de>
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9ce:	9218      	str	r2, [sp, #96]	; 0x60
 800d9d0:	210a      	movs	r1, #10
 800d9d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d9d4:	434a      	muls	r2, r1
 800d9d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d9d8:	3930      	subs	r1, #48	; 0x30
 800d9da:	188a      	adds	r2, r1, r2
 800d9dc:	9218      	str	r2, [sp, #96]	; 0x60
 800d9de:	001a      	movs	r2, r3
 800d9e0:	7812      	ldrb	r2, [r2, #0]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9e6:	3a30      	subs	r2, #48	; 0x30
 800d9e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9ea:	2a09      	cmp	r2, #9
 800d9ec:	d9f0      	bls.n	800d9d0 <_svfprintf_r+0x260>
 800d9ee:	e730      	b.n	800d852 <_svfprintf_r+0xe2>
 800d9f0:	2308      	movs	r3, #8
 800d9f2:	e7ac      	b.n	800d94e <_svfprintf_r+0x1de>
 800d9f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	2b68      	cmp	r3, #104	; 0x68
 800d9fa:	d105      	bne.n	800da08 <_svfprintf_r+0x298>
 800d9fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9fe:	3301      	adds	r3, #1
 800da00:	9313      	str	r3, [sp, #76]	; 0x4c
 800da02:	2380      	movs	r3, #128	; 0x80
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	e7a2      	b.n	800d94e <_svfprintf_r+0x1de>
 800da08:	2340      	movs	r3, #64	; 0x40
 800da0a:	e7a0      	b.n	800d94e <_svfprintf_r+0x1de>
 800da0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b6c      	cmp	r3, #108	; 0x6c
 800da12:	d104      	bne.n	800da1e <_svfprintf_r+0x2ae>
 800da14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da16:	3301      	adds	r3, #1
 800da18:	9313      	str	r3, [sp, #76]	; 0x4c
 800da1a:	2320      	movs	r3, #32
 800da1c:	e797      	b.n	800d94e <_svfprintf_r+0x1de>
 800da1e:	2310      	movs	r3, #16
 800da20:	e795      	b.n	800d94e <_svfprintf_r+0x1de>
 800da22:	0021      	movs	r1, r4
 800da24:	c904      	ldmia	r1!, {r2}
 800da26:	ab3f      	add	r3, sp, #252	; 0xfc
 800da28:	910d      	str	r1, [sp, #52]	; 0x34
 800da2a:	211b      	movs	r1, #27
 800da2c:	701a      	strb	r2, [r3, #0]
 800da2e:	2200      	movs	r2, #0
 800da30:	a81e      	add	r0, sp, #120	; 0x78
 800da32:	1809      	adds	r1, r1, r0
 800da34:	700a      	strb	r2, [r1, #0]
 800da36:	920c      	str	r2, [sp, #48]	; 0x30
 800da38:	3201      	adds	r2, #1
 800da3a:	9209      	str	r2, [sp, #36]	; 0x24
 800da3c:	2200      	movs	r2, #0
 800da3e:	9308      	str	r3, [sp, #32]
 800da40:	0015      	movs	r5, r2
 800da42:	9219      	str	r2, [sp, #100]	; 0x64
 800da44:	9210      	str	r2, [sp, #64]	; 0x40
 800da46:	9211      	str	r2, [sp, #68]	; 0x44
 800da48:	e1f1      	b.n	800de2e <_svfprintf_r+0x6be>
 800da4a:	2310      	movs	r3, #16
 800da4c:	431e      	orrs	r6, r3
 800da4e:	06b3      	lsls	r3, r6, #26
 800da50:	d531      	bpl.n	800dab6 <_svfprintf_r+0x346>
 800da52:	2307      	movs	r3, #7
 800da54:	3407      	adds	r4, #7
 800da56:	439c      	bics	r4, r3
 800da58:	0022      	movs	r2, r4
 800da5a:	ca18      	ldmia	r2!, {r3, r4}
 800da5c:	9306      	str	r3, [sp, #24]
 800da5e:	9407      	str	r4, [sp, #28]
 800da60:	920d      	str	r2, [sp, #52]	; 0x34
 800da62:	9a07      	ldr	r2, [sp, #28]
 800da64:	2301      	movs	r3, #1
 800da66:	2a00      	cmp	r2, #0
 800da68:	da0b      	bge.n	800da82 <_svfprintf_r+0x312>
 800da6a:	9c06      	ldr	r4, [sp, #24]
 800da6c:	9d07      	ldr	r5, [sp, #28]
 800da6e:	2200      	movs	r2, #0
 800da70:	4261      	negs	r1, r4
 800da72:	41aa      	sbcs	r2, r5
 800da74:	9106      	str	r1, [sp, #24]
 800da76:	9207      	str	r2, [sp, #28]
 800da78:	221b      	movs	r2, #27
 800da7a:	a91e      	add	r1, sp, #120	; 0x78
 800da7c:	1852      	adds	r2, r2, r1
 800da7e:	212d      	movs	r1, #45	; 0x2d
 800da80:	7011      	strb	r1, [r2, #0]
 800da82:	9907      	ldr	r1, [sp, #28]
 800da84:	9a06      	ldr	r2, [sp, #24]
 800da86:	430a      	orrs	r2, r1
 800da88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da8a:	3101      	adds	r1, #1
 800da8c:	d101      	bne.n	800da92 <_svfprintf_r+0x322>
 800da8e:	f001 f87b 	bl	800eb88 <_svfprintf_r+0x1418>
 800da92:	2180      	movs	r1, #128	; 0x80
 800da94:	0034      	movs	r4, r6
 800da96:	438c      	bics	r4, r1
 800da98:	2a00      	cmp	r2, #0
 800da9a:	d001      	beq.n	800daa0 <_svfprintf_r+0x330>
 800da9c:	f001 f879 	bl	800eb92 <_svfprintf_r+0x1422>
 800daa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daa2:	2a00      	cmp	r2, #0
 800daa4:	d101      	bne.n	800daaa <_svfprintf_r+0x33a>
 800daa6:	f000 fcef 	bl	800e488 <_svfprintf_r+0xd18>
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d001      	beq.n	800dab2 <_svfprintf_r+0x342>
 800daae:	f001 f874 	bl	800eb9a <_svfprintf_r+0x142a>
 800dab2:	f000 fc79 	bl	800e3a8 <_svfprintf_r+0xc38>
 800dab6:	0022      	movs	r2, r4
 800dab8:	ca08      	ldmia	r2!, {r3}
 800daba:	920d      	str	r2, [sp, #52]	; 0x34
 800dabc:	06f2      	lsls	r2, r6, #27
 800dabe:	d503      	bpl.n	800dac8 <_svfprintf_r+0x358>
 800dac0:	9306      	str	r3, [sp, #24]
 800dac2:	17db      	asrs	r3, r3, #31
 800dac4:	9307      	str	r3, [sp, #28]
 800dac6:	e7cc      	b.n	800da62 <_svfprintf_r+0x2f2>
 800dac8:	0672      	lsls	r2, r6, #25
 800daca:	d501      	bpl.n	800dad0 <_svfprintf_r+0x360>
 800dacc:	b21b      	sxth	r3, r3
 800dace:	e7f7      	b.n	800dac0 <_svfprintf_r+0x350>
 800dad0:	05b2      	lsls	r2, r6, #22
 800dad2:	d5f5      	bpl.n	800dac0 <_svfprintf_r+0x350>
 800dad4:	b25b      	sxtb	r3, r3
 800dad6:	e7f3      	b.n	800dac0 <_svfprintf_r+0x350>
 800dad8:	2307      	movs	r3, #7
 800dada:	3407      	adds	r4, #7
 800dadc:	439c      	bics	r4, r3
 800dade:	0022      	movs	r2, r4
 800dae0:	ca18      	ldmia	r2!, {r3, r4}
 800dae2:	920d      	str	r2, [sp, #52]	; 0x34
 800dae4:	2201      	movs	r2, #1
 800dae6:	9314      	str	r3, [sp, #80]	; 0x50
 800dae8:	9415      	str	r4, [sp, #84]	; 0x54
 800daea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800daec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800daee:	005c      	lsls	r4, r3, #1
 800daf0:	0864      	lsrs	r4, r4, #1
 800daf2:	0028      	movs	r0, r5
 800daf4:	0021      	movs	r1, r4
 800daf6:	4b3e      	ldr	r3, [pc, #248]	; (800dbf0 <_svfprintf_r+0x480>)
 800daf8:	4252      	negs	r2, r2
 800dafa:	f7f4 fbfb 	bl	80022f4 <__aeabi_dcmpun>
 800dafe:	2800      	cmp	r0, #0
 800db00:	d126      	bne.n	800db50 <_svfprintf_r+0x3e0>
 800db02:	2201      	movs	r2, #1
 800db04:	0028      	movs	r0, r5
 800db06:	0021      	movs	r1, r4
 800db08:	4b39      	ldr	r3, [pc, #228]	; (800dbf0 <_svfprintf_r+0x480>)
 800db0a:	4252      	negs	r2, r2
 800db0c:	f7f2 fcac 	bl	8000468 <__aeabi_dcmple>
 800db10:	2800      	cmp	r0, #0
 800db12:	d11d      	bne.n	800db50 <_svfprintf_r+0x3e0>
 800db14:	9814      	ldr	r0, [sp, #80]	; 0x50
 800db16:	9915      	ldr	r1, [sp, #84]	; 0x54
 800db18:	2200      	movs	r2, #0
 800db1a:	2300      	movs	r3, #0
 800db1c:	f7f2 fc9a 	bl	8000454 <__aeabi_dcmplt>
 800db20:	2800      	cmp	r0, #0
 800db22:	d004      	beq.n	800db2e <_svfprintf_r+0x3be>
 800db24:	231b      	movs	r3, #27
 800db26:	aa1e      	add	r2, sp, #120	; 0x78
 800db28:	189b      	adds	r3, r3, r2
 800db2a:	222d      	movs	r2, #45	; 0x2d
 800db2c:	701a      	strb	r2, [r3, #0]
 800db2e:	4b31      	ldr	r3, [pc, #196]	; (800dbf4 <_svfprintf_r+0x484>)
 800db30:	9308      	str	r3, [sp, #32]
 800db32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db34:	2b47      	cmp	r3, #71	; 0x47
 800db36:	dd01      	ble.n	800db3c <_svfprintf_r+0x3cc>
 800db38:	4b2f      	ldr	r3, [pc, #188]	; (800dbf8 <_svfprintf_r+0x488>)
 800db3a:	9308      	str	r3, [sp, #32]
 800db3c:	2380      	movs	r3, #128	; 0x80
 800db3e:	439e      	bics	r6, r3
 800db40:	2300      	movs	r3, #0
 800db42:	930c      	str	r3, [sp, #48]	; 0x30
 800db44:	3303      	adds	r3, #3
 800db46:	9309      	str	r3, [sp, #36]	; 0x24
 800db48:	2300      	movs	r3, #0
 800db4a:	9319      	str	r3, [sp, #100]	; 0x64
 800db4c:	f000 fc78 	bl	800e440 <_svfprintf_r+0xcd0>
 800db50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db54:	0010      	movs	r0, r2
 800db56:	0019      	movs	r1, r3
 800db58:	f7f4 fbcc 	bl	80022f4 <__aeabi_dcmpun>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d00e      	beq.n	800db7e <_svfprintf_r+0x40e>
 800db60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db62:	2b00      	cmp	r3, #0
 800db64:	da04      	bge.n	800db70 <_svfprintf_r+0x400>
 800db66:	231b      	movs	r3, #27
 800db68:	aa1e      	add	r2, sp, #120	; 0x78
 800db6a:	189b      	adds	r3, r3, r2
 800db6c:	222d      	movs	r2, #45	; 0x2d
 800db6e:	701a      	strb	r2, [r3, #0]
 800db70:	4b22      	ldr	r3, [pc, #136]	; (800dbfc <_svfprintf_r+0x48c>)
 800db72:	9308      	str	r3, [sp, #32]
 800db74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db76:	2b47      	cmp	r3, #71	; 0x47
 800db78:	dde0      	ble.n	800db3c <_svfprintf_r+0x3cc>
 800db7a:	4b21      	ldr	r3, [pc, #132]	; (800dc00 <_svfprintf_r+0x490>)
 800db7c:	e7dd      	b.n	800db3a <_svfprintf_r+0x3ca>
 800db7e:	2320      	movs	r3, #32
 800db80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db82:	439a      	bics	r2, r3
 800db84:	9210      	str	r2, [sp, #64]	; 0x40
 800db86:	2a41      	cmp	r2, #65	; 0x41
 800db88:	d123      	bne.n	800dbd2 <_svfprintf_r+0x462>
 800db8a:	2230      	movs	r2, #48	; 0x30
 800db8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800db8e:	ab25      	add	r3, sp, #148	; 0x94
 800db90:	701a      	strb	r2, [r3, #0]
 800db92:	3248      	adds	r2, #72	; 0x48
 800db94:	2961      	cmp	r1, #97	; 0x61
 800db96:	d000      	beq.n	800db9a <_svfprintf_r+0x42a>
 800db98:	3a20      	subs	r2, #32
 800db9a:	705a      	strb	r2, [r3, #1]
 800db9c:	2302      	movs	r3, #2
 800db9e:	431e      	orrs	r6, r3
 800dba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba2:	2b63      	cmp	r3, #99	; 0x63
 800dba4:	dd2e      	ble.n	800dc04 <_svfprintf_r+0x494>
 800dba6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dba8:	1c59      	adds	r1, r3, #1
 800dbaa:	f7fd f969 	bl	800ae80 <_malloc_r>
 800dbae:	9008      	str	r0, [sp, #32]
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d000      	beq.n	800dbb6 <_svfprintf_r+0x446>
 800dbb4:	e216      	b.n	800dfe4 <_svfprintf_r+0x874>
 800dbb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbb8:	899a      	ldrh	r2, [r3, #12]
 800dbba:	2340      	movs	r3, #64	; 0x40
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbc0:	8193      	strh	r3, [r2, #12]
 800dbc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbc4:	899b      	ldrh	r3, [r3, #12]
 800dbc6:	065b      	lsls	r3, r3, #25
 800dbc8:	d400      	bmi.n	800dbcc <_svfprintf_r+0x45c>
 800dbca:	e5f5      	b.n	800d7b8 <_svfprintf_r+0x48>
 800dbcc:	2301      	movs	r3, #1
 800dbce:	425b      	negs	r3, r3
 800dbd0:	e5f1      	b.n	800d7b6 <_svfprintf_r+0x46>
 800dbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd4:	900c      	str	r0, [sp, #48]	; 0x30
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	d100      	bne.n	800dbdc <_svfprintf_r+0x46c>
 800dbda:	e206      	b.n	800dfea <_svfprintf_r+0x87a>
 800dbdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbde:	2b47      	cmp	r3, #71	; 0x47
 800dbe0:	d114      	bne.n	800dc0c <_svfprintf_r+0x49c>
 800dbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d111      	bne.n	800dc0c <_svfprintf_r+0x49c>
 800dbe8:	3301      	adds	r3, #1
 800dbea:	9309      	str	r3, [sp, #36]	; 0x24
 800dbec:	e00e      	b.n	800dc0c <_svfprintf_r+0x49c>
 800dbee:	46c0      	nop			; (mov r8, r8)
 800dbf0:	7fefffff 	.word	0x7fefffff
 800dbf4:	08014b44 	.word	0x08014b44
 800dbf8:	08014b48 	.word	0x08014b48
 800dbfc:	08014b4c 	.word	0x08014b4c
 800dc00:	08014b50 	.word	0x08014b50
 800dc04:	2300      	movs	r3, #0
 800dc06:	930c      	str	r3, [sp, #48]	; 0x30
 800dc08:	ab3f      	add	r3, sp, #252	; 0xfc
 800dc0a:	9308      	str	r3, [sp, #32]
 800dc0c:	2380      	movs	r3, #128	; 0x80
 800dc0e:	005b      	lsls	r3, r3, #1
 800dc10:	4333      	orrs	r3, r6
 800dc12:	931a      	str	r3, [sp, #104]	; 0x68
 800dc14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc16:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	db00      	blt.n	800dc1e <_svfprintf_r+0x4ae>
 800dc1c:	e1e7      	b.n	800dfee <_svfprintf_r+0x87e>
 800dc1e:	2280      	movs	r2, #128	; 0x80
 800dc20:	0612      	lsls	r2, r2, #24
 800dc22:	4694      	mov	ip, r2
 800dc24:	4463      	add	r3, ip
 800dc26:	930e      	str	r3, [sp, #56]	; 0x38
 800dc28:	232d      	movs	r3, #45	; 0x2d
 800dc2a:	9322      	str	r3, [sp, #136]	; 0x88
 800dc2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc2e:	2b41      	cmp	r3, #65	; 0x41
 800dc30:	d000      	beq.n	800dc34 <_svfprintf_r+0x4c4>
 800dc32:	e1f5      	b.n	800e020 <_svfprintf_r+0x8b0>
 800dc34:	0028      	movs	r0, r5
 800dc36:	aa26      	add	r2, sp, #152	; 0x98
 800dc38:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dc3a:	f002 fb73 	bl	8010324 <frexp>
 800dc3e:	23ff      	movs	r3, #255	; 0xff
 800dc40:	2200      	movs	r2, #0
 800dc42:	059b      	lsls	r3, r3, #22
 800dc44:	f7f3 fd12 	bl	800166c <__aeabi_dmul>
 800dc48:	2200      	movs	r2, #0
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	0004      	movs	r4, r0
 800dc4e:	000d      	movs	r5, r1
 800dc50:	f7f2 fbfa 	bl	8000448 <__aeabi_dcmpeq>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d001      	beq.n	800dc5c <_svfprintf_r+0x4ec>
 800dc58:	2301      	movs	r3, #1
 800dc5a:	9326      	str	r3, [sp, #152]	; 0x98
 800dc5c:	4bda      	ldr	r3, [pc, #872]	; (800dfc8 <_svfprintf_r+0x858>)
 800dc5e:	9319      	str	r3, [sp, #100]	; 0x64
 800dc60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc62:	2b61      	cmp	r3, #97	; 0x61
 800dc64:	d001      	beq.n	800dc6a <_svfprintf_r+0x4fa>
 800dc66:	4bd9      	ldr	r3, [pc, #868]	; (800dfcc <_svfprintf_r+0x85c>)
 800dc68:	9319      	str	r3, [sp, #100]	; 0x64
 800dc6a:	9b08      	ldr	r3, [sp, #32]
 800dc6c:	930e      	str	r3, [sp, #56]	; 0x38
 800dc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc70:	3b01      	subs	r3, #1
 800dc72:	9311      	str	r3, [sp, #68]	; 0x44
 800dc74:	2200      	movs	r2, #0
 800dc76:	4bd6      	ldr	r3, [pc, #856]	; (800dfd0 <_svfprintf_r+0x860>)
 800dc78:	0020      	movs	r0, r4
 800dc7a:	0029      	movs	r1, r5
 800dc7c:	f7f3 fcf6 	bl	800166c <__aeabi_dmul>
 800dc80:	000d      	movs	r5, r1
 800dc82:	0004      	movs	r4, r0
 800dc84:	f7f4 fb54 	bl	8002330 <__aeabi_d2iz>
 800dc88:	9021      	str	r0, [sp, #132]	; 0x84
 800dc8a:	f7f4 fb87 	bl	800239c <__aeabi_i2d>
 800dc8e:	0002      	movs	r2, r0
 800dc90:	000b      	movs	r3, r1
 800dc92:	0020      	movs	r0, r4
 800dc94:	0029      	movs	r1, r5
 800dc96:	f7f3 ffab 	bl	8001bf0 <__aeabi_dsub>
 800dc9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc9c:	000d      	movs	r5, r1
 800dc9e:	001a      	movs	r2, r3
 800dca0:	3201      	adds	r2, #1
 800dca2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dca4:	920e      	str	r2, [sp, #56]	; 0x38
 800dca6:	9223      	str	r2, [sp, #140]	; 0x8c
 800dca8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dcaa:	0004      	movs	r4, r0
 800dcac:	5c52      	ldrb	r2, [r2, r1]
 800dcae:	701a      	strb	r2, [r3, #0]
 800dcb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcb2:	9320      	str	r3, [sp, #128]	; 0x80
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	d00a      	beq.n	800dcce <_svfprintf_r+0x55e>
 800dcb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcba:	2200      	movs	r2, #0
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	9311      	str	r3, [sp, #68]	; 0x44
 800dcc0:	0020      	movs	r0, r4
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	0029      	movs	r1, r5
 800dcc6:	f7f2 fbbf 	bl	8000448 <__aeabi_dcmpeq>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d0d2      	beq.n	800dc74 <_svfprintf_r+0x504>
 800dcce:	2200      	movs	r2, #0
 800dcd0:	0020      	movs	r0, r4
 800dcd2:	0029      	movs	r1, r5
 800dcd4:	4bbf      	ldr	r3, [pc, #764]	; (800dfd4 <_svfprintf_r+0x864>)
 800dcd6:	f7f2 fbd1 	bl	800047c <__aeabi_dcmpgt>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d10c      	bne.n	800dcf8 <_svfprintf_r+0x588>
 800dcde:	2200      	movs	r2, #0
 800dce0:	0020      	movs	r0, r4
 800dce2:	0029      	movs	r1, r5
 800dce4:	4bbb      	ldr	r3, [pc, #748]	; (800dfd4 <_svfprintf_r+0x864>)
 800dce6:	f7f2 fbaf 	bl	8000448 <__aeabi_dcmpeq>
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d100      	bne.n	800dcf0 <_svfprintf_r+0x580>
 800dcee:	e191      	b.n	800e014 <_svfprintf_r+0x8a4>
 800dcf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcf2:	07db      	lsls	r3, r3, #31
 800dcf4:	d400      	bmi.n	800dcf8 <_svfprintf_r+0x588>
 800dcf6:	e18d      	b.n	800e014 <_svfprintf_r+0x8a4>
 800dcf8:	2030      	movs	r0, #48	; 0x30
 800dcfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcfc:	932a      	str	r3, [sp, #168]	; 0xa8
 800dcfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd00:	7bdb      	ldrb	r3, [r3, #15]
 800dd02:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800dd04:	3a01      	subs	r2, #1
 800dd06:	922a      	str	r2, [sp, #168]	; 0xa8
 800dd08:	7811      	ldrb	r1, [r2, #0]
 800dd0a:	4299      	cmp	r1, r3
 800dd0c:	d100      	bne.n	800dd10 <_svfprintf_r+0x5a0>
 800dd0e:	e171      	b.n	800dff4 <_svfprintf_r+0x884>
 800dd10:	1c4b      	adds	r3, r1, #1
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2939      	cmp	r1, #57	; 0x39
 800dd16:	d101      	bne.n	800dd1c <_svfprintf_r+0x5ac>
 800dd18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd1a:	7a9b      	ldrb	r3, [r3, #10]
 800dd1c:	7013      	strb	r3, [r2, #0]
 800dd1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd20:	9a08      	ldr	r2, [sp, #32]
 800dd22:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800dd24:	1a9b      	subs	r3, r3, r2
 800dd26:	930e      	str	r3, [sp, #56]	; 0x38
 800dd28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd2a:	2b47      	cmp	r3, #71	; 0x47
 800dd2c:	d000      	beq.n	800dd30 <_svfprintf_r+0x5c0>
 800dd2e:	e1c4      	b.n	800e0ba <_svfprintf_r+0x94a>
 800dd30:	1ceb      	adds	r3, r5, #3
 800dd32:	db03      	blt.n	800dd3c <_svfprintf_r+0x5cc>
 800dd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd36:	42ab      	cmp	r3, r5
 800dd38:	db00      	blt.n	800dd3c <_svfprintf_r+0x5cc>
 800dd3a:	e1e6      	b.n	800e10a <_svfprintf_r+0x99a>
 800dd3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd3e:	3b02      	subs	r3, #2
 800dd40:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd42:	223c      	movs	r2, #60	; 0x3c
 800dd44:	466b      	mov	r3, sp
 800dd46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dd48:	189b      	adds	r3, r3, r2
 800dd4a:	1e6c      	subs	r4, r5, #1
 800dd4c:	3a1c      	subs	r2, #28
 800dd4e:	2000      	movs	r0, #0
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	9426      	str	r4, [sp, #152]	; 0x98
 800dd54:	4391      	bics	r1, r2
 800dd56:	2941      	cmp	r1, #65	; 0x41
 800dd58:	d102      	bne.n	800dd60 <_svfprintf_r+0x5f0>
 800dd5a:	330f      	adds	r3, #15
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	3001      	adds	r0, #1
 800dd60:	a928      	add	r1, sp, #160	; 0xa0
 800dd62:	700b      	strb	r3, [r1, #0]
 800dd64:	232b      	movs	r3, #43	; 0x2b
 800dd66:	2c00      	cmp	r4, #0
 800dd68:	da02      	bge.n	800dd70 <_svfprintf_r+0x600>
 800dd6a:	2401      	movs	r4, #1
 800dd6c:	3302      	adds	r3, #2
 800dd6e:	1b64      	subs	r4, r4, r5
 800dd70:	704b      	strb	r3, [r1, #1]
 800dd72:	2c09      	cmp	r4, #9
 800dd74:	dc00      	bgt.n	800dd78 <_svfprintf_r+0x608>
 800dd76:	e1ba      	b.n	800e0ee <_svfprintf_r+0x97e>
 800dd78:	2337      	movs	r3, #55	; 0x37
 800dd7a:	250a      	movs	r5, #10
 800dd7c:	aa1e      	add	r2, sp, #120	; 0x78
 800dd7e:	189b      	adds	r3, r3, r2
 800dd80:	9310      	str	r3, [sp, #64]	; 0x40
 800dd82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd84:	0020      	movs	r0, r4
 800dd86:	9309      	str	r3, [sp, #36]	; 0x24
 800dd88:	0029      	movs	r1, r5
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	9310      	str	r3, [sp, #64]	; 0x40
 800dd8e:	f7f2 fb45 	bl	800041c <__aeabi_idivmod>
 800dd92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd94:	3130      	adds	r1, #48	; 0x30
 800dd96:	7019      	strb	r1, [r3, #0]
 800dd98:	0020      	movs	r0, r4
 800dd9a:	0029      	movs	r1, r5
 800dd9c:	9411      	str	r4, [sp, #68]	; 0x44
 800dd9e:	f7f2 fa57 	bl	8000250 <__divsi3>
 800dda2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dda4:	0004      	movs	r4, r0
 800dda6:	2b63      	cmp	r3, #99	; 0x63
 800dda8:	dceb      	bgt.n	800dd82 <_svfprintf_r+0x612>
 800ddaa:	222a      	movs	r2, #42	; 0x2a
 800ddac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddae:	a81e      	add	r0, sp, #120	; 0x78
 800ddb0:	1e99      	subs	r1, r3, #2
 800ddb2:	1812      	adds	r2, r2, r0
 800ddb4:	2037      	movs	r0, #55	; 0x37
 800ddb6:	000b      	movs	r3, r1
 800ddb8:	3430      	adds	r4, #48	; 0x30
 800ddba:	700c      	strb	r4, [r1, #0]
 800ddbc:	ac1e      	add	r4, sp, #120	; 0x78
 800ddbe:	1900      	adds	r0, r0, r4
 800ddc0:	4283      	cmp	r3, r0
 800ddc2:	d200      	bcs.n	800ddc6 <_svfprintf_r+0x656>
 800ddc4:	e18e      	b.n	800e0e4 <_svfprintf_r+0x974>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	4281      	cmp	r1, r0
 800ddca:	d804      	bhi.n	800ddd6 <_svfprintf_r+0x666>
 800ddcc:	aa1e      	add	r2, sp, #120	; 0x78
 800ddce:	3339      	adds	r3, #57	; 0x39
 800ddd0:	189b      	adds	r3, r3, r2
 800ddd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddd4:	1a9b      	subs	r3, r3, r2
 800ddd6:	222a      	movs	r2, #42	; 0x2a
 800ddd8:	a91e      	add	r1, sp, #120	; 0x78
 800ddda:	1852      	adds	r2, r2, r1
 800dddc:	18d3      	adds	r3, r2, r3
 800ddde:	aa28      	add	r2, sp, #160	; 0xa0
 800dde0:	1a9b      	subs	r3, r3, r2
 800dde2:	931e      	str	r3, [sp, #120]	; 0x78
 800dde4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dde6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dde8:	4694      	mov	ip, r2
 800ddea:	4463      	add	r3, ip
 800ddec:	9309      	str	r3, [sp, #36]	; 0x24
 800ddee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	dc01      	bgt.n	800ddf8 <_svfprintf_r+0x688>
 800ddf4:	07f3      	lsls	r3, r6, #31
 800ddf6:	d504      	bpl.n	800de02 <_svfprintf_r+0x692>
 800ddf8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ddfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfc:	4694      	mov	ip, r2
 800ddfe:	4463      	add	r3, ip
 800de00:	9309      	str	r3, [sp, #36]	; 0x24
 800de02:	2280      	movs	r2, #128	; 0x80
 800de04:	4b74      	ldr	r3, [pc, #464]	; (800dfd8 <_svfprintf_r+0x868>)
 800de06:	0052      	lsls	r2, r2, #1
 800de08:	4033      	ands	r3, r6
 800de0a:	431a      	orrs	r2, r3
 800de0c:	2300      	movs	r3, #0
 800de0e:	001d      	movs	r5, r3
 800de10:	921a      	str	r2, [sp, #104]	; 0x68
 800de12:	9310      	str	r3, [sp, #64]	; 0x40
 800de14:	9311      	str	r3, [sp, #68]	; 0x44
 800de16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de18:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800de1a:	9319      	str	r3, [sp, #100]	; 0x64
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d006      	beq.n	800de2e <_svfprintf_r+0x6be>
 800de20:	231b      	movs	r3, #27
 800de22:	aa1e      	add	r2, sp, #120	; 0x78
 800de24:	189b      	adds	r3, r3, r2
 800de26:	222d      	movs	r2, #45	; 0x2d
 800de28:	701a      	strb	r2, [r3, #0]
 800de2a:	2300      	movs	r3, #0
 800de2c:	9319      	str	r3, [sp, #100]	; 0x64
 800de2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de32:	931a      	str	r3, [sp, #104]	; 0x68
 800de34:	4293      	cmp	r3, r2
 800de36:	da00      	bge.n	800de3a <_svfprintf_r+0x6ca>
 800de38:	921a      	str	r2, [sp, #104]	; 0x68
 800de3a:	231b      	movs	r3, #27
 800de3c:	aa1e      	add	r2, sp, #120	; 0x78
 800de3e:	189b      	adds	r3, r3, r2
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	1e5a      	subs	r2, r3, #1
 800de44:	4193      	sbcs	r3, r2
 800de46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de48:	18d3      	adds	r3, r2, r3
 800de4a:	931a      	str	r3, [sp, #104]	; 0x68
 800de4c:	0032      	movs	r2, r6
 800de4e:	2302      	movs	r3, #2
 800de50:	401a      	ands	r2, r3
 800de52:	9220      	str	r2, [sp, #128]	; 0x80
 800de54:	421e      	tst	r6, r3
 800de56:	d002      	beq.n	800de5e <_svfprintf_r+0x6ee>
 800de58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800de5a:	3302      	adds	r3, #2
 800de5c:	931a      	str	r3, [sp, #104]	; 0x68
 800de5e:	2384      	movs	r3, #132	; 0x84
 800de60:	0032      	movs	r2, r6
 800de62:	401a      	ands	r2, r3
 800de64:	9221      	str	r2, [sp, #132]	; 0x84
 800de66:	421e      	tst	r6, r3
 800de68:	d11f      	bne.n	800deaa <_svfprintf_r+0x73a>
 800de6a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800de6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de6e:	1a9c      	subs	r4, r3, r2
 800de70:	2c00      	cmp	r4, #0
 800de72:	dd1a      	ble.n	800deaa <_svfprintf_r+0x73a>
 800de74:	0039      	movs	r1, r7
 800de76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de78:	4858      	ldr	r0, [pc, #352]	; (800dfdc <_svfprintf_r+0x86c>)
 800de7a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de7c:	3301      	adds	r3, #1
 800de7e:	3108      	adds	r1, #8
 800de80:	6038      	str	r0, [r7, #0]
 800de82:	2c10      	cmp	r4, #16
 800de84:	dd00      	ble.n	800de88 <_svfprintf_r+0x718>
 800de86:	e31c      	b.n	800e4c2 <_svfprintf_r+0xd52>
 800de88:	607c      	str	r4, [r7, #4]
 800de8a:	18a4      	adds	r4, r4, r2
 800de8c:	000f      	movs	r7, r1
 800de8e:	942e      	str	r4, [sp, #184]	; 0xb8
 800de90:	932d      	str	r3, [sp, #180]	; 0xb4
 800de92:	2b07      	cmp	r3, #7
 800de94:	dd09      	ble.n	800deaa <_svfprintf_r+0x73a>
 800de96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de98:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de9a:	aa2c      	add	r2, sp, #176	; 0xb0
 800de9c:	f003 fd7e 	bl	801199c <__ssprint_r>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d001      	beq.n	800dea8 <_svfprintf_r+0x738>
 800dea4:	f000 fe43 	bl	800eb2e <_svfprintf_r+0x13be>
 800dea8:	af2f      	add	r7, sp, #188	; 0xbc
 800deaa:	221b      	movs	r2, #27
 800deac:	a91e      	add	r1, sp, #120	; 0x78
 800deae:	1852      	adds	r2, r2, r1
 800deb0:	7811      	ldrb	r1, [r2, #0]
 800deb2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800deb4:	2900      	cmp	r1, #0
 800deb6:	d014      	beq.n	800dee2 <_svfprintf_r+0x772>
 800deb8:	603a      	str	r2, [r7, #0]
 800deba:	2201      	movs	r2, #1
 800debc:	189b      	adds	r3, r3, r2
 800debe:	932e      	str	r3, [sp, #184]	; 0xb8
 800dec0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dec2:	607a      	str	r2, [r7, #4]
 800dec4:	189b      	adds	r3, r3, r2
 800dec6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dec8:	3708      	adds	r7, #8
 800deca:	2b07      	cmp	r3, #7
 800decc:	dd09      	ble.n	800dee2 <_svfprintf_r+0x772>
 800dece:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ded0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ded2:	aa2c      	add	r2, sp, #176	; 0xb0
 800ded4:	f003 fd62 	bl	801199c <__ssprint_r>
 800ded8:	2800      	cmp	r0, #0
 800deda:	d001      	beq.n	800dee0 <_svfprintf_r+0x770>
 800dedc:	f000 fe27 	bl	800eb2e <_svfprintf_r+0x13be>
 800dee0:	af2f      	add	r7, sp, #188	; 0xbc
 800dee2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dee4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dee6:	2a00      	cmp	r2, #0
 800dee8:	d015      	beq.n	800df16 <_svfprintf_r+0x7a6>
 800deea:	aa25      	add	r2, sp, #148	; 0x94
 800deec:	603a      	str	r2, [r7, #0]
 800deee:	2202      	movs	r2, #2
 800def0:	189b      	adds	r3, r3, r2
 800def2:	932e      	str	r3, [sp, #184]	; 0xb8
 800def4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	3301      	adds	r3, #1
 800defa:	932d      	str	r3, [sp, #180]	; 0xb4
 800defc:	3708      	adds	r7, #8
 800defe:	2b07      	cmp	r3, #7
 800df00:	dd09      	ble.n	800df16 <_svfprintf_r+0x7a6>
 800df02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df04:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df06:	aa2c      	add	r2, sp, #176	; 0xb0
 800df08:	f003 fd48 	bl	801199c <__ssprint_r>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d001      	beq.n	800df14 <_svfprintf_r+0x7a4>
 800df10:	f000 fe0d 	bl	800eb2e <_svfprintf_r+0x13be>
 800df14:	af2f      	add	r7, sp, #188	; 0xbc
 800df16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df18:	2b80      	cmp	r3, #128	; 0x80
 800df1a:	d11f      	bne.n	800df5c <_svfprintf_r+0x7ec>
 800df1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800df20:	1a9c      	subs	r4, r3, r2
 800df22:	2c00      	cmp	r4, #0
 800df24:	dd1a      	ble.n	800df5c <_svfprintf_r+0x7ec>
 800df26:	0039      	movs	r1, r7
 800df28:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df2a:	482d      	ldr	r0, [pc, #180]	; (800dfe0 <_svfprintf_r+0x870>)
 800df2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df2e:	3301      	adds	r3, #1
 800df30:	3108      	adds	r1, #8
 800df32:	6038      	str	r0, [r7, #0]
 800df34:	2c10      	cmp	r4, #16
 800df36:	dd00      	ble.n	800df3a <_svfprintf_r+0x7ca>
 800df38:	e2d6      	b.n	800e4e8 <_svfprintf_r+0xd78>
 800df3a:	607c      	str	r4, [r7, #4]
 800df3c:	18a4      	adds	r4, r4, r2
 800df3e:	000f      	movs	r7, r1
 800df40:	942e      	str	r4, [sp, #184]	; 0xb8
 800df42:	932d      	str	r3, [sp, #180]	; 0xb4
 800df44:	2b07      	cmp	r3, #7
 800df46:	dd09      	ble.n	800df5c <_svfprintf_r+0x7ec>
 800df48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df4c:	aa2c      	add	r2, sp, #176	; 0xb0
 800df4e:	f003 fd25 	bl	801199c <__ssprint_r>
 800df52:	2800      	cmp	r0, #0
 800df54:	d001      	beq.n	800df5a <_svfprintf_r+0x7ea>
 800df56:	f000 fdea 	bl	800eb2e <_svfprintf_r+0x13be>
 800df5a:	af2f      	add	r7, sp, #188	; 0xbc
 800df5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df60:	1a9c      	subs	r4, r3, r2
 800df62:	2c00      	cmp	r4, #0
 800df64:	dd1a      	ble.n	800df9c <_svfprintf_r+0x82c>
 800df66:	0039      	movs	r1, r7
 800df68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df6a:	481d      	ldr	r0, [pc, #116]	; (800dfe0 <_svfprintf_r+0x870>)
 800df6c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df6e:	3301      	adds	r3, #1
 800df70:	3108      	adds	r1, #8
 800df72:	6038      	str	r0, [r7, #0]
 800df74:	2c10      	cmp	r4, #16
 800df76:	dd00      	ble.n	800df7a <_svfprintf_r+0x80a>
 800df78:	e2c9      	b.n	800e50e <_svfprintf_r+0xd9e>
 800df7a:	18a2      	adds	r2, r4, r2
 800df7c:	607c      	str	r4, [r7, #4]
 800df7e:	922e      	str	r2, [sp, #184]	; 0xb8
 800df80:	000f      	movs	r7, r1
 800df82:	932d      	str	r3, [sp, #180]	; 0xb4
 800df84:	2b07      	cmp	r3, #7
 800df86:	dd09      	ble.n	800df9c <_svfprintf_r+0x82c>
 800df88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df8c:	aa2c      	add	r2, sp, #176	; 0xb0
 800df8e:	f003 fd05 	bl	801199c <__ssprint_r>
 800df92:	2800      	cmp	r0, #0
 800df94:	d001      	beq.n	800df9a <_svfprintf_r+0x82a>
 800df96:	f000 fdca 	bl	800eb2e <_svfprintf_r+0x13be>
 800df9a:	af2f      	add	r7, sp, #188	; 0xbc
 800df9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df9e:	9319      	str	r3, [sp, #100]	; 0x64
 800dfa0:	05f3      	lsls	r3, r6, #23
 800dfa2:	d500      	bpl.n	800dfa6 <_svfprintf_r+0x836>
 800dfa4:	e2ce      	b.n	800e544 <_svfprintf_r+0xdd4>
 800dfa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfa8:	9b08      	ldr	r3, [sp, #32]
 800dfaa:	4694      	mov	ip, r2
 800dfac:	603b      	str	r3, [r7, #0]
 800dfae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb0:	607b      	str	r3, [r7, #4]
 800dfb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dfb4:	4463      	add	r3, ip
 800dfb6:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfb8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfba:	3301      	adds	r3, #1
 800dfbc:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfbe:	2b07      	cmp	r3, #7
 800dfc0:	dd00      	ble.n	800dfc4 <_svfprintf_r+0x854>
 800dfc2:	e3a3      	b.n	800e70c <_svfprintf_r+0xf9c>
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	e301      	b.n	800e5cc <_svfprintf_r+0xe5c>
 800dfc8:	08014b54 	.word	0x08014b54
 800dfcc:	08014b65 	.word	0x08014b65
 800dfd0:	40300000 	.word	0x40300000
 800dfd4:	3fe00000 	.word	0x3fe00000
 800dfd8:	fffffbff 	.word	0xfffffbff
 800dfdc:	08014b78 	.word	0x08014b78
 800dfe0:	08014b88 	.word	0x08014b88
 800dfe4:	9b08      	ldr	r3, [sp, #32]
 800dfe6:	930c      	str	r3, [sp, #48]	; 0x30
 800dfe8:	e610      	b.n	800dc0c <_svfprintf_r+0x49c>
 800dfea:	2306      	movs	r3, #6
 800dfec:	e5fd      	b.n	800dbea <_svfprintf_r+0x47a>
 800dfee:	930e      	str	r3, [sp, #56]	; 0x38
 800dff0:	2300      	movs	r3, #0
 800dff2:	e61a      	b.n	800dc2a <_svfprintf_r+0x4ba>
 800dff4:	7010      	strb	r0, [r2, #0]
 800dff6:	e684      	b.n	800dd02 <_svfprintf_r+0x592>
 800dff8:	7018      	strb	r0, [r3, #0]
 800dffa:	3301      	adds	r3, #1
 800dffc:	1aca      	subs	r2, r1, r3
 800dffe:	d5fb      	bpl.n	800dff8 <_svfprintf_r+0x888>
 800e000:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e002:	2300      	movs	r3, #0
 800e004:	3201      	adds	r2, #1
 800e006:	db01      	blt.n	800e00c <_svfprintf_r+0x89c>
 800e008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e00a:	3301      	adds	r3, #1
 800e00c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e00e:	18d3      	adds	r3, r2, r3
 800e010:	9323      	str	r3, [sp, #140]	; 0x8c
 800e012:	e684      	b.n	800dd1e <_svfprintf_r+0x5ae>
 800e014:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e016:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e018:	2030      	movs	r0, #48	; 0x30
 800e01a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e01c:	1851      	adds	r1, r2, r1
 800e01e:	e7ed      	b.n	800dffc <_svfprintf_r+0x88c>
 800e020:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e022:	2303      	movs	r3, #3
 800e024:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e026:	2a46      	cmp	r2, #70	; 0x46
 800e028:	d006      	beq.n	800e038 <_svfprintf_r+0x8c8>
 800e02a:	0014      	movs	r4, r2
 800e02c:	3c45      	subs	r4, #69	; 0x45
 800e02e:	4262      	negs	r2, r4
 800e030:	4154      	adcs	r4, r2
 800e032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e034:	3b01      	subs	r3, #1
 800e036:	1914      	adds	r4, r2, r4
 800e038:	aa2a      	add	r2, sp, #168	; 0xa8
 800e03a:	9204      	str	r2, [sp, #16]
 800e03c:	aa27      	add	r2, sp, #156	; 0x9c
 800e03e:	9203      	str	r2, [sp, #12]
 800e040:	aa26      	add	r2, sp, #152	; 0x98
 800e042:	9202      	str	r2, [sp, #8]
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	002a      	movs	r2, r5
 800e048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e04a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e04c:	9401      	str	r4, [sp, #4]
 800e04e:	f002 fad7 	bl	8010600 <_dtoa_r>
 800e052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e054:	9008      	str	r0, [sp, #32]
 800e056:	2b47      	cmp	r3, #71	; 0x47
 800e058:	d103      	bne.n	800e062 <_svfprintf_r+0x8f2>
 800e05a:	07f3      	lsls	r3, r6, #31
 800e05c:	d401      	bmi.n	800e062 <_svfprintf_r+0x8f2>
 800e05e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e060:	e65e      	b.n	800dd20 <_svfprintf_r+0x5b0>
 800e062:	9b08      	ldr	r3, [sp, #32]
 800e064:	191b      	adds	r3, r3, r4
 800e066:	9311      	str	r3, [sp, #68]	; 0x44
 800e068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e06a:	2b46      	cmp	r3, #70	; 0x46
 800e06c:	d112      	bne.n	800e094 <_svfprintf_r+0x924>
 800e06e:	9b08      	ldr	r3, [sp, #32]
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b30      	cmp	r3, #48	; 0x30
 800e074:	d10a      	bne.n	800e08c <_svfprintf_r+0x91c>
 800e076:	2200      	movs	r2, #0
 800e078:	2300      	movs	r3, #0
 800e07a:	0028      	movs	r0, r5
 800e07c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e07e:	f7f2 f9e3 	bl	8000448 <__aeabi_dcmpeq>
 800e082:	2800      	cmp	r0, #0
 800e084:	d102      	bne.n	800e08c <_svfprintf_r+0x91c>
 800e086:	2301      	movs	r3, #1
 800e088:	1b1b      	subs	r3, r3, r4
 800e08a:	9326      	str	r3, [sp, #152]	; 0x98
 800e08c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e08e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e090:	18d3      	adds	r3, r2, r3
 800e092:	9311      	str	r3, [sp, #68]	; 0x44
 800e094:	2200      	movs	r2, #0
 800e096:	2300      	movs	r3, #0
 800e098:	0028      	movs	r0, r5
 800e09a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e09c:	f7f2 f9d4 	bl	8000448 <__aeabi_dcmpeq>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d001      	beq.n	800e0a8 <_svfprintf_r+0x938>
 800e0a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0a6:	932a      	str	r3, [sp, #168]	; 0xa8
 800e0a8:	2230      	movs	r2, #48	; 0x30
 800e0aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e0ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e0ae:	4299      	cmp	r1, r3
 800e0b0:	d9d5      	bls.n	800e05e <_svfprintf_r+0x8ee>
 800e0b2:	1c59      	adds	r1, r3, #1
 800e0b4:	912a      	str	r1, [sp, #168]	; 0xa8
 800e0b6:	701a      	strb	r2, [r3, #0]
 800e0b8:	e7f7      	b.n	800e0aa <_svfprintf_r+0x93a>
 800e0ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0bc:	2b46      	cmp	r3, #70	; 0x46
 800e0be:	d000      	beq.n	800e0c2 <_svfprintf_r+0x952>
 800e0c0:	e63f      	b.n	800dd42 <_svfprintf_r+0x5d2>
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	0033      	movs	r3, r6
 800e0c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0c8:	4013      	ands	r3, r2
 800e0ca:	430b      	orrs	r3, r1
 800e0cc:	2d00      	cmp	r5, #0
 800e0ce:	dd2c      	ble.n	800e12a <_svfprintf_r+0x9ba>
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d046      	beq.n	800e162 <_svfprintf_r+0x9f2>
 800e0d4:	000a      	movs	r2, r1
 800e0d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0d8:	18eb      	adds	r3, r5, r3
 800e0da:	18d3      	adds	r3, r2, r3
 800e0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e0de:	2366      	movs	r3, #102	; 0x66
 800e0e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0e2:	e030      	b.n	800e146 <_svfprintf_r+0x9d6>
 800e0e4:	781c      	ldrb	r4, [r3, #0]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	7014      	strb	r4, [r2, #0]
 800e0ea:	3201      	adds	r2, #1
 800e0ec:	e668      	b.n	800ddc0 <_svfprintf_r+0x650>
 800e0ee:	222a      	movs	r2, #42	; 0x2a
 800e0f0:	ab1e      	add	r3, sp, #120	; 0x78
 800e0f2:	18d2      	adds	r2, r2, r3
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d104      	bne.n	800e102 <_svfprintf_r+0x992>
 800e0f8:	2330      	movs	r3, #48	; 0x30
 800e0fa:	222b      	movs	r2, #43	; 0x2b
 800e0fc:	708b      	strb	r3, [r1, #2]
 800e0fe:	ab1e      	add	r3, sp, #120	; 0x78
 800e100:	18d2      	adds	r2, r2, r3
 800e102:	3430      	adds	r4, #48	; 0x30
 800e104:	1c53      	adds	r3, r2, #1
 800e106:	7014      	strb	r4, [r2, #0]
 800e108:	e669      	b.n	800ddde <_svfprintf_r+0x66e>
 800e10a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e10c:	42ab      	cmp	r3, r5
 800e10e:	dd12      	ble.n	800e136 <_svfprintf_r+0x9c6>
 800e110:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e114:	4694      	mov	ip, r2
 800e116:	4463      	add	r3, ip
 800e118:	9309      	str	r3, [sp, #36]	; 0x24
 800e11a:	2367      	movs	r3, #103	; 0x67
 800e11c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e11e:	2d00      	cmp	r5, #0
 800e120:	dc11      	bgt.n	800e146 <_svfprintf_r+0x9d6>
 800e122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e124:	1b5b      	subs	r3, r3, r5
 800e126:	3301      	adds	r3, #1
 800e128:	e00c      	b.n	800e144 <_svfprintf_r+0x9d4>
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d01b      	beq.n	800e166 <_svfprintf_r+0x9f6>
 800e12e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e132:	3301      	adds	r3, #1
 800e134:	e7d1      	b.n	800e0da <_svfprintf_r+0x96a>
 800e136:	2367      	movs	r3, #103	; 0x67
 800e138:	9509      	str	r5, [sp, #36]	; 0x24
 800e13a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e13c:	07f3      	lsls	r3, r6, #31
 800e13e:	d502      	bpl.n	800e146 <_svfprintf_r+0x9d6>
 800e140:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e142:	18eb      	adds	r3, r5, r3
 800e144:	9309      	str	r3, [sp, #36]	; 0x24
 800e146:	2380      	movs	r3, #128	; 0x80
 800e148:	0032      	movs	r2, r6
 800e14a:	00db      	lsls	r3, r3, #3
 800e14c:	401a      	ands	r2, r3
 800e14e:	9211      	str	r2, [sp, #68]	; 0x44
 800e150:	2200      	movs	r2, #0
 800e152:	9210      	str	r2, [sp, #64]	; 0x40
 800e154:	421e      	tst	r6, r3
 800e156:	d100      	bne.n	800e15a <_svfprintf_r+0x9ea>
 800e158:	e65d      	b.n	800de16 <_svfprintf_r+0x6a6>
 800e15a:	4295      	cmp	r5, r2
 800e15c:	dc25      	bgt.n	800e1aa <_svfprintf_r+0xa3a>
 800e15e:	9211      	str	r2, [sp, #68]	; 0x44
 800e160:	e659      	b.n	800de16 <_svfprintf_r+0x6a6>
 800e162:	9509      	str	r5, [sp, #36]	; 0x24
 800e164:	e7bb      	b.n	800e0de <_svfprintf_r+0x96e>
 800e166:	2366      	movs	r3, #102	; 0x66
 800e168:	9209      	str	r2, [sp, #36]	; 0x24
 800e16a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e16c:	e7eb      	b.n	800e146 <_svfprintf_r+0x9d6>
 800e16e:	42ab      	cmp	r3, r5
 800e170:	da0e      	bge.n	800e190 <_svfprintf_r+0xa20>
 800e172:	1aed      	subs	r5, r5, r3
 800e174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e176:	785b      	ldrb	r3, [r3, #1]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d012      	beq.n	800e1a2 <_svfprintf_r+0xa32>
 800e17c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e17e:	3301      	adds	r3, #1
 800e180:	9311      	str	r3, [sp, #68]	; 0x44
 800e182:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e184:	3301      	adds	r3, #1
 800e186:	9312      	str	r3, [sp, #72]	; 0x48
 800e188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2bff      	cmp	r3, #255	; 0xff
 800e18e:	d1ee      	bne.n	800e16e <_svfprintf_r+0x9fe>
 800e190:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e194:	189b      	adds	r3, r3, r2
 800e196:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e198:	4353      	muls	r3, r2
 800e19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e19c:	189b      	adds	r3, r3, r2
 800e19e:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a0:	e639      	b.n	800de16 <_svfprintf_r+0x6a6>
 800e1a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	9310      	str	r3, [sp, #64]	; 0x40
 800e1a8:	e7ee      	b.n	800e188 <_svfprintf_r+0xa18>
 800e1aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1ac:	9311      	str	r3, [sp, #68]	; 0x44
 800e1ae:	e7eb      	b.n	800e188 <_svfprintf_r+0xa18>
 800e1b0:	1d23      	adds	r3, r4, #4
 800e1b2:	930d      	str	r3, [sp, #52]	; 0x34
 800e1b4:	06b3      	lsls	r3, r6, #26
 800e1b6:	d509      	bpl.n	800e1cc <_svfprintf_r+0xa5c>
 800e1b8:	6823      	ldr	r3, [r4, #0]
 800e1ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1bc:	601a      	str	r2, [r3, #0]
 800e1be:	17d2      	asrs	r2, r2, #31
 800e1c0:	605a      	str	r2, [r3, #4]
 800e1c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e1c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e1c6:	9308      	str	r3, [sp, #32]
 800e1c8:	f7ff fb0d 	bl	800d7e6 <_svfprintf_r+0x76>
 800e1cc:	06f3      	lsls	r3, r6, #27
 800e1ce:	d503      	bpl.n	800e1d8 <_svfprintf_r+0xa68>
 800e1d0:	6823      	ldr	r3, [r4, #0]
 800e1d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1d4:	601a      	str	r2, [r3, #0]
 800e1d6:	e7f4      	b.n	800e1c2 <_svfprintf_r+0xa52>
 800e1d8:	0673      	lsls	r3, r6, #25
 800e1da:	d503      	bpl.n	800e1e4 <_svfprintf_r+0xa74>
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1e0:	801a      	strh	r2, [r3, #0]
 800e1e2:	e7ee      	b.n	800e1c2 <_svfprintf_r+0xa52>
 800e1e4:	05b6      	lsls	r6, r6, #22
 800e1e6:	d5f3      	bpl.n	800e1d0 <_svfprintf_r+0xa60>
 800e1e8:	6823      	ldr	r3, [r4, #0]
 800e1ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1ec:	701a      	strb	r2, [r3, #0]
 800e1ee:	e7e8      	b.n	800e1c2 <_svfprintf_r+0xa52>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	431e      	orrs	r6, r3
 800e1f4:	2320      	movs	r3, #32
 800e1f6:	0030      	movs	r0, r6
 800e1f8:	4018      	ands	r0, r3
 800e1fa:	421e      	tst	r6, r3
 800e1fc:	d00f      	beq.n	800e21e <_svfprintf_r+0xaae>
 800e1fe:	3b19      	subs	r3, #25
 800e200:	3407      	adds	r4, #7
 800e202:	439c      	bics	r4, r3
 800e204:	0022      	movs	r2, r4
 800e206:	ca18      	ldmia	r2!, {r3, r4}
 800e208:	9306      	str	r3, [sp, #24]
 800e20a:	9407      	str	r4, [sp, #28]
 800e20c:	920d      	str	r2, [sp, #52]	; 0x34
 800e20e:	4bc9      	ldr	r3, [pc, #804]	; (800e534 <_svfprintf_r+0xdc4>)
 800e210:	401e      	ands	r6, r3
 800e212:	2300      	movs	r3, #0
 800e214:	221b      	movs	r2, #27
 800e216:	a91e      	add	r1, sp, #120	; 0x78
 800e218:	1852      	adds	r2, r2, r1
 800e21a:	2100      	movs	r1, #0
 800e21c:	e430      	b.n	800da80 <_svfprintf_r+0x310>
 800e21e:	0022      	movs	r2, r4
 800e220:	ca08      	ldmia	r2!, {r3}
 800e222:	0031      	movs	r1, r6
 800e224:	920d      	str	r2, [sp, #52]	; 0x34
 800e226:	2210      	movs	r2, #16
 800e228:	4011      	ands	r1, r2
 800e22a:	4216      	tst	r6, r2
 800e22c:	d002      	beq.n	800e234 <_svfprintf_r+0xac4>
 800e22e:	9306      	str	r3, [sp, #24]
 800e230:	9007      	str	r0, [sp, #28]
 800e232:	e7ec      	b.n	800e20e <_svfprintf_r+0xa9e>
 800e234:	2240      	movs	r2, #64	; 0x40
 800e236:	0030      	movs	r0, r6
 800e238:	4010      	ands	r0, r2
 800e23a:	4216      	tst	r6, r2
 800e23c:	d003      	beq.n	800e246 <_svfprintf_r+0xad6>
 800e23e:	b29b      	uxth	r3, r3
 800e240:	9306      	str	r3, [sp, #24]
 800e242:	9107      	str	r1, [sp, #28]
 800e244:	e7e3      	b.n	800e20e <_svfprintf_r+0xa9e>
 800e246:	2280      	movs	r2, #128	; 0x80
 800e248:	0031      	movs	r1, r6
 800e24a:	0092      	lsls	r2, r2, #2
 800e24c:	4011      	ands	r1, r2
 800e24e:	4216      	tst	r6, r2
 800e250:	d0f6      	beq.n	800e240 <_svfprintf_r+0xad0>
 800e252:	b2db      	uxtb	r3, r3
 800e254:	e7eb      	b.n	800e22e <_svfprintf_r+0xabe>
 800e256:	0023      	movs	r3, r4
 800e258:	cb04      	ldmia	r3!, {r2}
 800e25a:	49b7      	ldr	r1, [pc, #732]	; (800e538 <_svfprintf_r+0xdc8>)
 800e25c:	9206      	str	r2, [sp, #24]
 800e25e:	aa25      	add	r2, sp, #148	; 0x94
 800e260:	8011      	strh	r1, [r2, #0]
 800e262:	4ab6      	ldr	r2, [pc, #728]	; (800e53c <_svfprintf_r+0xdcc>)
 800e264:	930d      	str	r3, [sp, #52]	; 0x34
 800e266:	2300      	movs	r3, #0
 800e268:	921f      	str	r2, [sp, #124]	; 0x7c
 800e26a:	2278      	movs	r2, #120	; 0x78
 800e26c:	9307      	str	r3, [sp, #28]
 800e26e:	3302      	adds	r3, #2
 800e270:	431e      	orrs	r6, r3
 800e272:	920f      	str	r2, [sp, #60]	; 0x3c
 800e274:	e7ce      	b.n	800e214 <_svfprintf_r+0xaa4>
 800e276:	0023      	movs	r3, r4
 800e278:	cb04      	ldmia	r3!, {r2}
 800e27a:	2400      	movs	r4, #0
 800e27c:	930d      	str	r3, [sp, #52]	; 0x34
 800e27e:	231b      	movs	r3, #27
 800e280:	9208      	str	r2, [sp, #32]
 800e282:	aa1e      	add	r2, sp, #120	; 0x78
 800e284:	189b      	adds	r3, r3, r2
 800e286:	701c      	strb	r4, [r3, #0]
 800e288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e28a:	3301      	adds	r3, #1
 800e28c:	d00e      	beq.n	800e2ac <_svfprintf_r+0xb3c>
 800e28e:	0021      	movs	r1, r4
 800e290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e292:	9808      	ldr	r0, [sp, #32]
 800e294:	f002 f83a 	bl	801030c <memchr>
 800e298:	900c      	str	r0, [sp, #48]	; 0x30
 800e29a:	42a0      	cmp	r0, r4
 800e29c:	d100      	bne.n	800e2a0 <_svfprintf_r+0xb30>
 800e29e:	e10d      	b.n	800e4bc <_svfprintf_r+0xd4c>
 800e2a0:	9a08      	ldr	r2, [sp, #32]
 800e2a2:	1a83      	subs	r3, r0, r2
 800e2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e2a6:	0023      	movs	r3, r4
 800e2a8:	940c      	str	r4, [sp, #48]	; 0x30
 800e2aa:	e44e      	b.n	800db4a <_svfprintf_r+0x3da>
 800e2ac:	9808      	ldr	r0, [sp, #32]
 800e2ae:	f7f1 ff29 	bl	8000104 <strlen>
 800e2b2:	9009      	str	r0, [sp, #36]	; 0x24
 800e2b4:	e7f7      	b.n	800e2a6 <_svfprintf_r+0xb36>
 800e2b6:	2310      	movs	r3, #16
 800e2b8:	431e      	orrs	r6, r3
 800e2ba:	2320      	movs	r3, #32
 800e2bc:	0030      	movs	r0, r6
 800e2be:	4018      	ands	r0, r3
 800e2c0:	421e      	tst	r6, r3
 800e2c2:	d009      	beq.n	800e2d8 <_svfprintf_r+0xb68>
 800e2c4:	3b19      	subs	r3, #25
 800e2c6:	3407      	adds	r4, #7
 800e2c8:	439c      	bics	r4, r3
 800e2ca:	0022      	movs	r2, r4
 800e2cc:	ca18      	ldmia	r2!, {r3, r4}
 800e2ce:	9306      	str	r3, [sp, #24]
 800e2d0:	9407      	str	r4, [sp, #28]
 800e2d2:	920d      	str	r2, [sp, #52]	; 0x34
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	e79d      	b.n	800e214 <_svfprintf_r+0xaa4>
 800e2d8:	0023      	movs	r3, r4
 800e2da:	cb04      	ldmia	r3!, {r2}
 800e2dc:	0031      	movs	r1, r6
 800e2de:	930d      	str	r3, [sp, #52]	; 0x34
 800e2e0:	2310      	movs	r3, #16
 800e2e2:	4019      	ands	r1, r3
 800e2e4:	421e      	tst	r6, r3
 800e2e6:	d003      	beq.n	800e2f0 <_svfprintf_r+0xb80>
 800e2e8:	9206      	str	r2, [sp, #24]
 800e2ea:	9007      	str	r0, [sp, #28]
 800e2ec:	3b0f      	subs	r3, #15
 800e2ee:	e791      	b.n	800e214 <_svfprintf_r+0xaa4>
 800e2f0:	2340      	movs	r3, #64	; 0x40
 800e2f2:	0030      	movs	r0, r6
 800e2f4:	4018      	ands	r0, r3
 800e2f6:	421e      	tst	r6, r3
 800e2f8:	d003      	beq.n	800e302 <_svfprintf_r+0xb92>
 800e2fa:	b293      	uxth	r3, r2
 800e2fc:	9306      	str	r3, [sp, #24]
 800e2fe:	9107      	str	r1, [sp, #28]
 800e300:	e7e8      	b.n	800e2d4 <_svfprintf_r+0xb64>
 800e302:	2380      	movs	r3, #128	; 0x80
 800e304:	0031      	movs	r1, r6
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4019      	ands	r1, r3
 800e30a:	421e      	tst	r6, r3
 800e30c:	d003      	beq.n	800e316 <_svfprintf_r+0xba6>
 800e30e:	b2d3      	uxtb	r3, r2
 800e310:	9306      	str	r3, [sp, #24]
 800e312:	9007      	str	r0, [sp, #28]
 800e314:	e7de      	b.n	800e2d4 <_svfprintf_r+0xb64>
 800e316:	9206      	str	r2, [sp, #24]
 800e318:	e7f1      	b.n	800e2fe <_svfprintf_r+0xb8e>
 800e31a:	4b89      	ldr	r3, [pc, #548]	; (800e540 <_svfprintf_r+0xdd0>)
 800e31c:	0030      	movs	r0, r6
 800e31e:	931f      	str	r3, [sp, #124]	; 0x7c
 800e320:	2320      	movs	r3, #32
 800e322:	4018      	ands	r0, r3
 800e324:	421e      	tst	r6, r3
 800e326:	d01a      	beq.n	800e35e <_svfprintf_r+0xbee>
 800e328:	3b19      	subs	r3, #25
 800e32a:	3407      	adds	r4, #7
 800e32c:	439c      	bics	r4, r3
 800e32e:	0022      	movs	r2, r4
 800e330:	ca18      	ldmia	r2!, {r3, r4}
 800e332:	9306      	str	r3, [sp, #24]
 800e334:	9407      	str	r4, [sp, #28]
 800e336:	920d      	str	r2, [sp, #52]	; 0x34
 800e338:	07f3      	lsls	r3, r6, #31
 800e33a:	d50a      	bpl.n	800e352 <_svfprintf_r+0xbe2>
 800e33c:	9b06      	ldr	r3, [sp, #24]
 800e33e:	9a07      	ldr	r2, [sp, #28]
 800e340:	4313      	orrs	r3, r2
 800e342:	d006      	beq.n	800e352 <_svfprintf_r+0xbe2>
 800e344:	2230      	movs	r2, #48	; 0x30
 800e346:	ab25      	add	r3, sp, #148	; 0x94
 800e348:	701a      	strb	r2, [r3, #0]
 800e34a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e34c:	705a      	strb	r2, [r3, #1]
 800e34e:	2302      	movs	r3, #2
 800e350:	431e      	orrs	r6, r3
 800e352:	4b78      	ldr	r3, [pc, #480]	; (800e534 <_svfprintf_r+0xdc4>)
 800e354:	401e      	ands	r6, r3
 800e356:	2302      	movs	r3, #2
 800e358:	e75c      	b.n	800e214 <_svfprintf_r+0xaa4>
 800e35a:	4b78      	ldr	r3, [pc, #480]	; (800e53c <_svfprintf_r+0xdcc>)
 800e35c:	e7de      	b.n	800e31c <_svfprintf_r+0xbac>
 800e35e:	0023      	movs	r3, r4
 800e360:	cb04      	ldmia	r3!, {r2}
 800e362:	0031      	movs	r1, r6
 800e364:	930d      	str	r3, [sp, #52]	; 0x34
 800e366:	2310      	movs	r3, #16
 800e368:	4019      	ands	r1, r3
 800e36a:	421e      	tst	r6, r3
 800e36c:	d002      	beq.n	800e374 <_svfprintf_r+0xc04>
 800e36e:	9206      	str	r2, [sp, #24]
 800e370:	9007      	str	r0, [sp, #28]
 800e372:	e7e1      	b.n	800e338 <_svfprintf_r+0xbc8>
 800e374:	2340      	movs	r3, #64	; 0x40
 800e376:	0030      	movs	r0, r6
 800e378:	4018      	ands	r0, r3
 800e37a:	421e      	tst	r6, r3
 800e37c:	d003      	beq.n	800e386 <_svfprintf_r+0xc16>
 800e37e:	b293      	uxth	r3, r2
 800e380:	9306      	str	r3, [sp, #24]
 800e382:	9107      	str	r1, [sp, #28]
 800e384:	e7d8      	b.n	800e338 <_svfprintf_r+0xbc8>
 800e386:	2380      	movs	r3, #128	; 0x80
 800e388:	0031      	movs	r1, r6
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	4019      	ands	r1, r3
 800e38e:	421e      	tst	r6, r3
 800e390:	d002      	beq.n	800e398 <_svfprintf_r+0xc28>
 800e392:	b2d3      	uxtb	r3, r2
 800e394:	9306      	str	r3, [sp, #24]
 800e396:	e7eb      	b.n	800e370 <_svfprintf_r+0xc00>
 800e398:	9206      	str	r2, [sp, #24]
 800e39a:	e7f2      	b.n	800e382 <_svfprintf_r+0xc12>
 800e39c:	9b07      	ldr	r3, [sp, #28]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d10a      	bne.n	800e3b8 <_svfprintf_r+0xc48>
 800e3a2:	9b06      	ldr	r3, [sp, #24]
 800e3a4:	2b09      	cmp	r3, #9
 800e3a6:	d807      	bhi.n	800e3b8 <_svfprintf_r+0xc48>
 800e3a8:	23e7      	movs	r3, #231	; 0xe7
 800e3aa:	aa1e      	add	r2, sp, #120	; 0x78
 800e3ac:	189b      	adds	r3, r3, r2
 800e3ae:	9a06      	ldr	r2, [sp, #24]
 800e3b0:	3230      	adds	r2, #48	; 0x30
 800e3b2:	701a      	strb	r2, [r3, #0]
 800e3b4:	f000 fc18 	bl	800ebe8 <_svfprintf_r+0x1478>
 800e3b8:	2680      	movs	r6, #128	; 0x80
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	00f6      	lsls	r6, r6, #3
 800e3be:	930e      	str	r3, [sp, #56]	; 0x38
 800e3c0:	ad58      	add	r5, sp, #352	; 0x160
 800e3c2:	4026      	ands	r6, r4
 800e3c4:	220a      	movs	r2, #10
 800e3c6:	9806      	ldr	r0, [sp, #24]
 800e3c8:	9907      	ldr	r1, [sp, #28]
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f7f2 f86a 	bl	80004a4 <__aeabi_uldivmod>
 800e3d0:	1e6b      	subs	r3, r5, #1
 800e3d2:	3230      	adds	r2, #48	; 0x30
 800e3d4:	9308      	str	r3, [sp, #32]
 800e3d6:	701a      	strb	r2, [r3, #0]
 800e3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3da:	900c      	str	r0, [sp, #48]	; 0x30
 800e3dc:	3301      	adds	r3, #1
 800e3de:	9110      	str	r1, [sp, #64]	; 0x40
 800e3e0:	930e      	str	r3, [sp, #56]	; 0x38
 800e3e2:	2e00      	cmp	r6, #0
 800e3e4:	d01d      	beq.n	800e422 <_svfprintf_r+0xcb2>
 800e3e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d118      	bne.n	800e422 <_svfprintf_r+0xcb2>
 800e3f0:	2aff      	cmp	r2, #255	; 0xff
 800e3f2:	d016      	beq.n	800e422 <_svfprintf_r+0xcb2>
 800e3f4:	9b07      	ldr	r3, [sp, #28]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d102      	bne.n	800e400 <_svfprintf_r+0xc90>
 800e3fa:	9b06      	ldr	r3, [sp, #24]
 800e3fc:	2b09      	cmp	r3, #9
 800e3fe:	d910      	bls.n	800e422 <_svfprintf_r+0xcb2>
 800e400:	9b08      	ldr	r3, [sp, #32]
 800e402:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e404:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e406:	1a9b      	subs	r3, r3, r2
 800e408:	0018      	movs	r0, r3
 800e40a:	9308      	str	r3, [sp, #32]
 800e40c:	f7fd ffd1 	bl	800c3b2 <strncpy>
 800e410:	2200      	movs	r2, #0
 800e412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e414:	920e      	str	r2, [sp, #56]	; 0x38
 800e416:	785b      	ldrb	r3, [r3, #1]
 800e418:	1e5a      	subs	r2, r3, #1
 800e41a:	4193      	sbcs	r3, r2
 800e41c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e41e:	18d3      	adds	r3, r2, r3
 800e420:	9312      	str	r3, [sp, #72]	; 0x48
 800e422:	9b07      	ldr	r3, [sp, #28]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10f      	bne.n	800e448 <_svfprintf_r+0xcd8>
 800e428:	9b06      	ldr	r3, [sp, #24]
 800e42a:	2b09      	cmp	r3, #9
 800e42c:	d80c      	bhi.n	800e448 <_svfprintf_r+0xcd8>
 800e42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e430:	9a08      	ldr	r2, [sp, #32]
 800e432:	9319      	str	r3, [sp, #100]	; 0x64
 800e434:	ab58      	add	r3, sp, #352	; 0x160
 800e436:	1a9b      	subs	r3, r3, r2
 800e438:	9309      	str	r3, [sp, #36]	; 0x24
 800e43a:	2300      	movs	r3, #0
 800e43c:	0026      	movs	r6, r4
 800e43e:	930c      	str	r3, [sp, #48]	; 0x30
 800e440:	001d      	movs	r5, r3
 800e442:	9310      	str	r3, [sp, #64]	; 0x40
 800e444:	9311      	str	r3, [sp, #68]	; 0x44
 800e446:	e4f2      	b.n	800de2e <_svfprintf_r+0x6be>
 800e448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e44a:	9d08      	ldr	r5, [sp, #32]
 800e44c:	9306      	str	r3, [sp, #24]
 800e44e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e450:	9307      	str	r3, [sp, #28]
 800e452:	e7b7      	b.n	800e3c4 <_svfprintf_r+0xc54>
 800e454:	200f      	movs	r0, #15
 800e456:	ab58      	add	r3, sp, #352	; 0x160
 800e458:	9308      	str	r3, [sp, #32]
 800e45a:	9b08      	ldr	r3, [sp, #32]
 800e45c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e45e:	3b01      	subs	r3, #1
 800e460:	9308      	str	r3, [sp, #32]
 800e462:	9b06      	ldr	r3, [sp, #24]
 800e464:	4003      	ands	r3, r0
 800e466:	5cd3      	ldrb	r3, [r2, r3]
 800e468:	9a08      	ldr	r2, [sp, #32]
 800e46a:	7013      	strb	r3, [r2, #0]
 800e46c:	9b07      	ldr	r3, [sp, #28]
 800e46e:	0719      	lsls	r1, r3, #28
 800e470:	9b06      	ldr	r3, [sp, #24]
 800e472:	091a      	lsrs	r2, r3, #4
 800e474:	9b07      	ldr	r3, [sp, #28]
 800e476:	4311      	orrs	r1, r2
 800e478:	091b      	lsrs	r3, r3, #4
 800e47a:	9307      	str	r3, [sp, #28]
 800e47c:	000b      	movs	r3, r1
 800e47e:	9a07      	ldr	r2, [sp, #28]
 800e480:	9106      	str	r1, [sp, #24]
 800e482:	4313      	orrs	r3, r2
 800e484:	d1e9      	bne.n	800e45a <_svfprintf_r+0xcea>
 800e486:	e7d2      	b.n	800e42e <_svfprintf_r+0xcbe>
 800e488:	aa58      	add	r2, sp, #352	; 0x160
 800e48a:	9208      	str	r2, [sp, #32]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1ce      	bne.n	800e42e <_svfprintf_r+0xcbe>
 800e490:	07f6      	lsls	r6, r6, #31
 800e492:	d5cc      	bpl.n	800e42e <_svfprintf_r+0xcbe>
 800e494:	aa1e      	add	r2, sp, #120	; 0x78
 800e496:	33e7      	adds	r3, #231	; 0xe7
 800e498:	189b      	adds	r3, r3, r2
 800e49a:	2230      	movs	r2, #48	; 0x30
 800e49c:	e789      	b.n	800e3b2 <_svfprintf_r+0xc42>
 800e49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d100      	bne.n	800e4a6 <_svfprintf_r+0xd36>
 800e4a4:	e364      	b.n	800eb70 <_svfprintf_r+0x1400>
 800e4a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4a8:	211b      	movs	r1, #27
 800e4aa:	ab3f      	add	r3, sp, #252	; 0xfc
 800e4ac:	701a      	strb	r2, [r3, #0]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	a81e      	add	r0, sp, #120	; 0x78
 800e4b2:	1809      	adds	r1, r1, r0
 800e4b4:	700a      	strb	r2, [r1, #0]
 800e4b6:	940d      	str	r4, [sp, #52]	; 0x34
 800e4b8:	f7ff fabd 	bl	800da36 <_svfprintf_r+0x2c6>
 800e4bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4be:	f7ff fb44 	bl	800db4a <_svfprintf_r+0x3da>
 800e4c2:	2010      	movs	r0, #16
 800e4c4:	1812      	adds	r2, r2, r0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4cc:	2b07      	cmp	r3, #7
 800e4ce:	dd08      	ble.n	800e4e2 <_svfprintf_r+0xd72>
 800e4d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4d4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4d6:	f003 fa61 	bl	801199c <__ssprint_r>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d000      	beq.n	800e4e0 <_svfprintf_r+0xd70>
 800e4de:	e326      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e4e0:	a92f      	add	r1, sp, #188	; 0xbc
 800e4e2:	000f      	movs	r7, r1
 800e4e4:	3c10      	subs	r4, #16
 800e4e6:	e4c5      	b.n	800de74 <_svfprintf_r+0x704>
 800e4e8:	2010      	movs	r0, #16
 800e4ea:	1812      	adds	r2, r2, r0
 800e4ec:	6078      	str	r0, [r7, #4]
 800e4ee:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4f0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4f2:	2b07      	cmp	r3, #7
 800e4f4:	dd08      	ble.n	800e508 <_svfprintf_r+0xd98>
 800e4f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4fc:	f003 fa4e 	bl	801199c <__ssprint_r>
 800e500:	2800      	cmp	r0, #0
 800e502:	d000      	beq.n	800e506 <_svfprintf_r+0xd96>
 800e504:	e313      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e506:	a92f      	add	r1, sp, #188	; 0xbc
 800e508:	000f      	movs	r7, r1
 800e50a:	3c10      	subs	r4, #16
 800e50c:	e50b      	b.n	800df26 <_svfprintf_r+0x7b6>
 800e50e:	2010      	movs	r0, #16
 800e510:	1812      	adds	r2, r2, r0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	922e      	str	r2, [sp, #184]	; 0xb8
 800e516:	932d      	str	r3, [sp, #180]	; 0xb4
 800e518:	2b07      	cmp	r3, #7
 800e51a:	dd08      	ble.n	800e52e <_svfprintf_r+0xdbe>
 800e51c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e51e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e520:	aa2c      	add	r2, sp, #176	; 0xb0
 800e522:	f003 fa3b 	bl	801199c <__ssprint_r>
 800e526:	2800      	cmp	r0, #0
 800e528:	d000      	beq.n	800e52c <_svfprintf_r+0xdbc>
 800e52a:	e300      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e52c:	a92f      	add	r1, sp, #188	; 0xbc
 800e52e:	000f      	movs	r7, r1
 800e530:	3c10      	subs	r4, #16
 800e532:	e518      	b.n	800df66 <_svfprintf_r+0x7f6>
 800e534:	fffffbff 	.word	0xfffffbff
 800e538:	00007830 	.word	0x00007830
 800e53c:	08014b54 	.word	0x08014b54
 800e540:	08014b65 	.word	0x08014b65
 800e544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e546:	2b65      	cmp	r3, #101	; 0x65
 800e548:	dc00      	bgt.n	800e54c <_svfprintf_r+0xddc>
 800e54a:	e241      	b.n	800e9d0 <_svfprintf_r+0x1260>
 800e54c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e54e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e550:	2200      	movs	r2, #0
 800e552:	2300      	movs	r3, #0
 800e554:	f7f1 ff78 	bl	8000448 <__aeabi_dcmpeq>
 800e558:	2800      	cmp	r0, #0
 800e55a:	d077      	beq.n	800e64c <_svfprintf_r+0xedc>
 800e55c:	4bca      	ldr	r3, [pc, #808]	; (800e888 <_svfprintf_r+0x1118>)
 800e55e:	603b      	str	r3, [r7, #0]
 800e560:	2301      	movs	r3, #1
 800e562:	607b      	str	r3, [r7, #4]
 800e564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e566:	3708      	adds	r7, #8
 800e568:	3301      	adds	r3, #1
 800e56a:	932e      	str	r3, [sp, #184]	; 0xb8
 800e56c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e56e:	3301      	adds	r3, #1
 800e570:	932d      	str	r3, [sp, #180]	; 0xb4
 800e572:	2b07      	cmp	r3, #7
 800e574:	dd08      	ble.n	800e588 <_svfprintf_r+0xe18>
 800e576:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e578:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e57a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e57c:	f003 fa0e 	bl	801199c <__ssprint_r>
 800e580:	2800      	cmp	r0, #0
 800e582:	d000      	beq.n	800e586 <_svfprintf_r+0xe16>
 800e584:	e2d3      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e586:	af2f      	add	r7, sp, #188	; 0xbc
 800e588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e58a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e58c:	4293      	cmp	r3, r2
 800e58e:	db01      	blt.n	800e594 <_svfprintf_r+0xe24>
 800e590:	07f3      	lsls	r3, r6, #31
 800e592:	d51b      	bpl.n	800e5cc <_svfprintf_r+0xe5c>
 800e594:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e596:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e598:	603b      	str	r3, [r7, #0]
 800e59a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e59c:	607b      	str	r3, [r7, #4]
 800e59e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5a0:	3708      	adds	r7, #8
 800e5a2:	189b      	adds	r3, r3, r2
 800e5a4:	932e      	str	r3, [sp, #184]	; 0xb8
 800e5a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5ac:	2b07      	cmp	r3, #7
 800e5ae:	dd08      	ble.n	800e5c2 <_svfprintf_r+0xe52>
 800e5b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5b4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5b6:	f003 f9f1 	bl	801199c <__ssprint_r>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d000      	beq.n	800e5c0 <_svfprintf_r+0xe50>
 800e5be:	e2b6      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e5c0:	af2f      	add	r7, sp, #188	; 0xbc
 800e5c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5c4:	2510      	movs	r5, #16
 800e5c6:	1e5c      	subs	r4, r3, #1
 800e5c8:	2c00      	cmp	r4, #0
 800e5ca:	dc2e      	bgt.n	800e62a <_svfprintf_r+0xeba>
 800e5cc:	0776      	lsls	r6, r6, #29
 800e5ce:	d500      	bpl.n	800e5d2 <_svfprintf_r+0xe62>
 800e5d0:	e290      	b.n	800eaf4 <_svfprintf_r+0x1384>
 800e5d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e5d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	da00      	bge.n	800e5dc <_svfprintf_r+0xe6c>
 800e5da:	0013      	movs	r3, r2
 800e5dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e5de:	18d3      	adds	r3, r2, r3
 800e5e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d007      	beq.n	800e5f8 <_svfprintf_r+0xe88>
 800e5e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5ec:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5ee:	f003 f9d5 	bl	801199c <__ssprint_r>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d000      	beq.n	800e5f8 <_svfprintf_r+0xe88>
 800e5f6:	e29a      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d000      	beq.n	800e604 <_svfprintf_r+0xe94>
 800e602:	e2b0      	b.n	800eb66 <_svfprintf_r+0x13f6>
 800e604:	af2f      	add	r7, sp, #188	; 0xbc
 800e606:	e5dc      	b.n	800e1c2 <_svfprintf_r+0xa52>
 800e608:	3210      	adds	r2, #16
 800e60a:	607d      	str	r5, [r7, #4]
 800e60c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e60e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e610:	2b07      	cmp	r3, #7
 800e612:	dd08      	ble.n	800e626 <_svfprintf_r+0xeb6>
 800e614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e616:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e618:	aa2c      	add	r2, sp, #176	; 0xb0
 800e61a:	f003 f9bf 	bl	801199c <__ssprint_r>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d000      	beq.n	800e624 <_svfprintf_r+0xeb4>
 800e622:	e284      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e624:	a92f      	add	r1, sp, #188	; 0xbc
 800e626:	000f      	movs	r7, r1
 800e628:	3c10      	subs	r4, #16
 800e62a:	0039      	movs	r1, r7
 800e62c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e62e:	4897      	ldr	r0, [pc, #604]	; (800e88c <_svfprintf_r+0x111c>)
 800e630:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e632:	3301      	adds	r3, #1
 800e634:	3108      	adds	r1, #8
 800e636:	6038      	str	r0, [r7, #0]
 800e638:	2c10      	cmp	r4, #16
 800e63a:	dce5      	bgt.n	800e608 <_svfprintf_r+0xe98>
 800e63c:	607c      	str	r4, [r7, #4]
 800e63e:	18a4      	adds	r4, r4, r2
 800e640:	942e      	str	r4, [sp, #184]	; 0xb8
 800e642:	000f      	movs	r7, r1
 800e644:	932d      	str	r3, [sp, #180]	; 0xb4
 800e646:	2b07      	cmp	r3, #7
 800e648:	ddc0      	ble.n	800e5cc <_svfprintf_r+0xe5c>
 800e64a:	e05f      	b.n	800e70c <_svfprintf_r+0xf9c>
 800e64c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e64e:	2b00      	cmp	r3, #0
 800e650:	dc78      	bgt.n	800e744 <_svfprintf_r+0xfd4>
 800e652:	4b8d      	ldr	r3, [pc, #564]	; (800e888 <_svfprintf_r+0x1118>)
 800e654:	603b      	str	r3, [r7, #0]
 800e656:	2301      	movs	r3, #1
 800e658:	607b      	str	r3, [r7, #4]
 800e65a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e65c:	3708      	adds	r7, #8
 800e65e:	3301      	adds	r3, #1
 800e660:	932e      	str	r3, [sp, #184]	; 0xb8
 800e662:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e664:	3301      	adds	r3, #1
 800e666:	932d      	str	r3, [sp, #180]	; 0xb4
 800e668:	2b07      	cmp	r3, #7
 800e66a:	dd08      	ble.n	800e67e <_svfprintf_r+0xf0e>
 800e66c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e66e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e670:	aa2c      	add	r2, sp, #176	; 0xb0
 800e672:	f003 f993 	bl	801199c <__ssprint_r>
 800e676:	2800      	cmp	r0, #0
 800e678:	d000      	beq.n	800e67c <_svfprintf_r+0xf0c>
 800e67a:	e258      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e67c:	af2f      	add	r7, sp, #188	; 0xbc
 800e67e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e680:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e682:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e684:	430b      	orrs	r3, r1
 800e686:	2101      	movs	r1, #1
 800e688:	4031      	ands	r1, r6
 800e68a:	430b      	orrs	r3, r1
 800e68c:	d09e      	beq.n	800e5cc <_svfprintf_r+0xe5c>
 800e68e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e690:	603b      	str	r3, [r7, #0]
 800e692:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e694:	607b      	str	r3, [r7, #4]
 800e696:	189a      	adds	r2, r3, r2
 800e698:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e69a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e69c:	3301      	adds	r3, #1
 800e69e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	2b07      	cmp	r3, #7
 800e6a4:	dd08      	ble.n	800e6b8 <_svfprintf_r+0xf48>
 800e6a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6ac:	f003 f976 	bl	801199c <__ssprint_r>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d000      	beq.n	800e6b6 <_svfprintf_r+0xf46>
 800e6b4:	e23b      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e6b6:	af2f      	add	r7, sp, #188	; 0xbc
 800e6b8:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e6ba:	2c00      	cmp	r4, #0
 800e6bc:	da19      	bge.n	800e6f2 <_svfprintf_r+0xf82>
 800e6be:	0038      	movs	r0, r7
 800e6c0:	2510      	movs	r5, #16
 800e6c2:	4264      	negs	r4, r4
 800e6c4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e6c6:	4a71      	ldr	r2, [pc, #452]	; (800e88c <_svfprintf_r+0x111c>)
 800e6c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e6ca:	3101      	adds	r1, #1
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	6002      	str	r2, [r0, #0]
 800e6d0:	2c10      	cmp	r4, #16
 800e6d2:	dc25      	bgt.n	800e720 <_svfprintf_r+0xfb0>
 800e6d4:	6044      	str	r4, [r0, #4]
 800e6d6:	18e4      	adds	r4, r4, r3
 800e6d8:	942e      	str	r4, [sp, #184]	; 0xb8
 800e6da:	912d      	str	r1, [sp, #180]	; 0xb4
 800e6dc:	2907      	cmp	r1, #7
 800e6de:	dd08      	ble.n	800e6f2 <_svfprintf_r+0xf82>
 800e6e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6e4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6e6:	f003 f959 	bl	801199c <__ssprint_r>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d000      	beq.n	800e6f0 <_svfprintf_r+0xf80>
 800e6ee:	e21e      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e6f0:	af2f      	add	r7, sp, #188	; 0xbc
 800e6f2:	9b08      	ldr	r3, [sp, #32]
 800e6f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e6f6:	603b      	str	r3, [r7, #0]
 800e6f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6fa:	18d2      	adds	r2, r2, r3
 800e6fc:	922e      	str	r2, [sp, #184]	; 0xb8
 800e6fe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e700:	607b      	str	r3, [r7, #4]
 800e702:	3201      	adds	r2, #1
 800e704:	922d      	str	r2, [sp, #180]	; 0xb4
 800e706:	2a07      	cmp	r2, #7
 800e708:	dc00      	bgt.n	800e70c <_svfprintf_r+0xf9c>
 800e70a:	e45b      	b.n	800dfc4 <_svfprintf_r+0x854>
 800e70c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e70e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e710:	aa2c      	add	r2, sp, #176	; 0xb0
 800e712:	f003 f943 	bl	801199c <__ssprint_r>
 800e716:	2800      	cmp	r0, #0
 800e718:	d000      	beq.n	800e71c <_svfprintf_r+0xfac>
 800e71a:	e208      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e71c:	af2f      	add	r7, sp, #188	; 0xbc
 800e71e:	e755      	b.n	800e5cc <_svfprintf_r+0xe5c>
 800e720:	3310      	adds	r3, #16
 800e722:	6045      	str	r5, [r0, #4]
 800e724:	932e      	str	r3, [sp, #184]	; 0xb8
 800e726:	912d      	str	r1, [sp, #180]	; 0xb4
 800e728:	2907      	cmp	r1, #7
 800e72a:	dd08      	ble.n	800e73e <_svfprintf_r+0xfce>
 800e72c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e72e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e730:	aa2c      	add	r2, sp, #176	; 0xb0
 800e732:	f003 f933 	bl	801199c <__ssprint_r>
 800e736:	2800      	cmp	r0, #0
 800e738:	d000      	beq.n	800e73c <_svfprintf_r+0xfcc>
 800e73a:	e1f8      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e73c:	af2f      	add	r7, sp, #188	; 0xbc
 800e73e:	0038      	movs	r0, r7
 800e740:	3c10      	subs	r4, #16
 800e742:	e7bf      	b.n	800e6c4 <_svfprintf_r+0xf54>
 800e744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e746:	002c      	movs	r4, r5
 800e748:	429d      	cmp	r5, r3
 800e74a:	dd00      	ble.n	800e74e <_svfprintf_r+0xfde>
 800e74c:	001c      	movs	r4, r3
 800e74e:	2c00      	cmp	r4, #0
 800e750:	dd14      	ble.n	800e77c <_svfprintf_r+0x100c>
 800e752:	9b08      	ldr	r3, [sp, #32]
 800e754:	607c      	str	r4, [r7, #4]
 800e756:	603b      	str	r3, [r7, #0]
 800e758:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e75a:	3708      	adds	r7, #8
 800e75c:	18e3      	adds	r3, r4, r3
 800e75e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e760:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e762:	3301      	adds	r3, #1
 800e764:	932d      	str	r3, [sp, #180]	; 0xb4
 800e766:	2b07      	cmp	r3, #7
 800e768:	dd08      	ble.n	800e77c <_svfprintf_r+0x100c>
 800e76a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e76c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e76e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e770:	f003 f914 	bl	801199c <__ssprint_r>
 800e774:	2800      	cmp	r0, #0
 800e776:	d000      	beq.n	800e77a <_svfprintf_r+0x100a>
 800e778:	e1d9      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e77a:	af2f      	add	r7, sp, #188	; 0xbc
 800e77c:	43e3      	mvns	r3, r4
 800e77e:	17db      	asrs	r3, r3, #31
 800e780:	401c      	ands	r4, r3
 800e782:	1b2c      	subs	r4, r5, r4
 800e784:	2c00      	cmp	r4, #0
 800e786:	dd18      	ble.n	800e7ba <_svfprintf_r+0x104a>
 800e788:	0039      	movs	r1, r7
 800e78a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e78c:	483f      	ldr	r0, [pc, #252]	; (800e88c <_svfprintf_r+0x111c>)
 800e78e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e790:	3301      	adds	r3, #1
 800e792:	3108      	adds	r1, #8
 800e794:	6038      	str	r0, [r7, #0]
 800e796:	2c10      	cmp	r4, #16
 800e798:	dc7a      	bgt.n	800e890 <_svfprintf_r+0x1120>
 800e79a:	607c      	str	r4, [r7, #4]
 800e79c:	18a4      	adds	r4, r4, r2
 800e79e:	000f      	movs	r7, r1
 800e7a0:	942e      	str	r4, [sp, #184]	; 0xb8
 800e7a2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7a4:	2b07      	cmp	r3, #7
 800e7a6:	dd08      	ble.n	800e7ba <_svfprintf_r+0x104a>
 800e7a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7ac:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7ae:	f003 f8f5 	bl	801199c <__ssprint_r>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d000      	beq.n	800e7b8 <_svfprintf_r+0x1048>
 800e7b6:	e1ba      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e7b8:	af2f      	add	r7, sp, #188	; 0xbc
 800e7ba:	9b08      	ldr	r3, [sp, #32]
 800e7bc:	195d      	adds	r5, r3, r5
 800e7be:	0573      	lsls	r3, r6, #21
 800e7c0:	d50b      	bpl.n	800e7da <_svfprintf_r+0x106a>
 800e7c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d176      	bne.n	800e8b6 <_svfprintf_r+0x1146>
 800e7c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d176      	bne.n	800e8bc <_svfprintf_r+0x114c>
 800e7ce:	9b08      	ldr	r3, [sp, #32]
 800e7d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7d2:	189b      	adds	r3, r3, r2
 800e7d4:	429d      	cmp	r5, r3
 800e7d6:	d900      	bls.n	800e7da <_svfprintf_r+0x106a>
 800e7d8:	001d      	movs	r5, r3
 800e7da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e7dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	db01      	blt.n	800e7e6 <_svfprintf_r+0x1076>
 800e7e2:	07f3      	lsls	r3, r6, #31
 800e7e4:	d516      	bpl.n	800e814 <_svfprintf_r+0x10a4>
 800e7e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e7e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7ea:	603b      	str	r3, [r7, #0]
 800e7ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e7ee:	607b      	str	r3, [r7, #4]
 800e7f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e7f2:	3708      	adds	r7, #8
 800e7f4:	189b      	adds	r3, r3, r2
 800e7f6:	932e      	str	r3, [sp, #184]	; 0xb8
 800e7f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7fe:	2b07      	cmp	r3, #7
 800e800:	dd08      	ble.n	800e814 <_svfprintf_r+0x10a4>
 800e802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e804:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e806:	aa2c      	add	r2, sp, #176	; 0xb0
 800e808:	f003 f8c8 	bl	801199c <__ssprint_r>
 800e80c:	2800      	cmp	r0, #0
 800e80e:	d000      	beq.n	800e812 <_svfprintf_r+0x10a2>
 800e810:	e18d      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e812:	af2f      	add	r7, sp, #188	; 0xbc
 800e814:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e816:	9b08      	ldr	r3, [sp, #32]
 800e818:	4694      	mov	ip, r2
 800e81a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e81c:	4463      	add	r3, ip
 800e81e:	1b5b      	subs	r3, r3, r5
 800e820:	1b14      	subs	r4, r2, r4
 800e822:	429c      	cmp	r4, r3
 800e824:	dd00      	ble.n	800e828 <_svfprintf_r+0x10b8>
 800e826:	001c      	movs	r4, r3
 800e828:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e82a:	2c00      	cmp	r4, #0
 800e82c:	dd12      	ble.n	800e854 <_svfprintf_r+0x10e4>
 800e82e:	18e3      	adds	r3, r4, r3
 800e830:	932e      	str	r3, [sp, #184]	; 0xb8
 800e832:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e834:	603d      	str	r5, [r7, #0]
 800e836:	3301      	adds	r3, #1
 800e838:	607c      	str	r4, [r7, #4]
 800e83a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e83c:	3708      	adds	r7, #8
 800e83e:	2b07      	cmp	r3, #7
 800e840:	dd08      	ble.n	800e854 <_svfprintf_r+0x10e4>
 800e842:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e844:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e846:	aa2c      	add	r2, sp, #176	; 0xb0
 800e848:	f003 f8a8 	bl	801199c <__ssprint_r>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d000      	beq.n	800e852 <_svfprintf_r+0x10e2>
 800e850:	e16d      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e852:	af2f      	add	r7, sp, #188	; 0xbc
 800e854:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e856:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e858:	2510      	movs	r5, #16
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	43e2      	mvns	r2, r4
 800e85e:	17d2      	asrs	r2, r2, #31
 800e860:	4014      	ands	r4, r2
 800e862:	1b1c      	subs	r4, r3, r4
 800e864:	2c00      	cmp	r4, #0
 800e866:	dc00      	bgt.n	800e86a <_svfprintf_r+0x10fa>
 800e868:	e6b0      	b.n	800e5cc <_svfprintf_r+0xe5c>
 800e86a:	0039      	movs	r1, r7
 800e86c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e86e:	4807      	ldr	r0, [pc, #28]	; (800e88c <_svfprintf_r+0x111c>)
 800e870:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e872:	3301      	adds	r3, #1
 800e874:	3108      	adds	r1, #8
 800e876:	6038      	str	r0, [r7, #0]
 800e878:	2c10      	cmp	r4, #16
 800e87a:	dd00      	ble.n	800e87e <_svfprintf_r+0x110e>
 800e87c:	e096      	b.n	800e9ac <_svfprintf_r+0x123c>
 800e87e:	1912      	adds	r2, r2, r4
 800e880:	607c      	str	r4, [r7, #4]
 800e882:	922e      	str	r2, [sp, #184]	; 0xb8
 800e884:	e6dd      	b.n	800e642 <_svfprintf_r+0xed2>
 800e886:	46c0      	nop			; (mov r8, r8)
 800e888:	08014b76 	.word	0x08014b76
 800e88c:	08014b88 	.word	0x08014b88
 800e890:	2010      	movs	r0, #16
 800e892:	1812      	adds	r2, r2, r0
 800e894:	6078      	str	r0, [r7, #4]
 800e896:	922e      	str	r2, [sp, #184]	; 0xb8
 800e898:	932d      	str	r3, [sp, #180]	; 0xb4
 800e89a:	2b07      	cmp	r3, #7
 800e89c:	dd08      	ble.n	800e8b0 <_svfprintf_r+0x1140>
 800e89e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8a2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8a4:	f003 f87a 	bl	801199c <__ssprint_r>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d000      	beq.n	800e8ae <_svfprintf_r+0x113e>
 800e8ac:	e13f      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e8ae:	a92f      	add	r1, sp, #188	; 0xbc
 800e8b0:	000f      	movs	r7, r1
 800e8b2:	3c10      	subs	r4, #16
 800e8b4:	e768      	b.n	800e788 <_svfprintf_r+0x1018>
 800e8b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d05d      	beq.n	800e978 <_svfprintf_r+0x1208>
 800e8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	9310      	str	r3, [sp, #64]	; 0x40
 800e8c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e8c6:	603b      	str	r3, [r7, #0]
 800e8c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8ca:	607b      	str	r3, [r7, #4]
 800e8cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	189b      	adds	r3, r3, r2
 800e8d2:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8da:	2b07      	cmp	r3, #7
 800e8dc:	dd08      	ble.n	800e8f0 <_svfprintf_r+0x1180>
 800e8de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8e2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8e4:	f003 f85a 	bl	801199c <__ssprint_r>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d000      	beq.n	800e8ee <_svfprintf_r+0x117e>
 800e8ec:	e11f      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e8ee:	af2f      	add	r7, sp, #188	; 0xbc
 800e8f0:	9b08      	ldr	r3, [sp, #32]
 800e8f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8f4:	189c      	adds	r4, r3, r2
 800e8f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8f8:	1b64      	subs	r4, r4, r5
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	429c      	cmp	r4, r3
 800e8fe:	dd00      	ble.n	800e902 <_svfprintf_r+0x1192>
 800e900:	001c      	movs	r4, r3
 800e902:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e904:	2c00      	cmp	r4, #0
 800e906:	dd12      	ble.n	800e92e <_svfprintf_r+0x11be>
 800e908:	18e3      	adds	r3, r4, r3
 800e90a:	932e      	str	r3, [sp, #184]	; 0xb8
 800e90c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e90e:	603d      	str	r5, [r7, #0]
 800e910:	3301      	adds	r3, #1
 800e912:	607c      	str	r4, [r7, #4]
 800e914:	932d      	str	r3, [sp, #180]	; 0xb4
 800e916:	3708      	adds	r7, #8
 800e918:	2b07      	cmp	r3, #7
 800e91a:	dd08      	ble.n	800e92e <_svfprintf_r+0x11be>
 800e91c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e91e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e920:	aa2c      	add	r2, sp, #176	; 0xb0
 800e922:	f003 f83b 	bl	801199c <__ssprint_r>
 800e926:	2800      	cmp	r0, #0
 800e928:	d000      	beq.n	800e92c <_svfprintf_r+0x11bc>
 800e92a:	e100      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e92c:	af2f      	add	r7, sp, #188	; 0xbc
 800e92e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e930:	781a      	ldrb	r2, [r3, #0]
 800e932:	43e3      	mvns	r3, r4
 800e934:	17db      	asrs	r3, r3, #31
 800e936:	401c      	ands	r4, r3
 800e938:	1b14      	subs	r4, r2, r4
 800e93a:	2c00      	cmp	r4, #0
 800e93c:	dd18      	ble.n	800e970 <_svfprintf_r+0x1200>
 800e93e:	0039      	movs	r1, r7
 800e940:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e942:	48aa      	ldr	r0, [pc, #680]	; (800ebec <_svfprintf_r+0x147c>)
 800e944:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e946:	3301      	adds	r3, #1
 800e948:	3108      	adds	r1, #8
 800e94a:	6038      	str	r0, [r7, #0]
 800e94c:	2c10      	cmp	r4, #16
 800e94e:	dc1a      	bgt.n	800e986 <_svfprintf_r+0x1216>
 800e950:	1912      	adds	r2, r2, r4
 800e952:	607c      	str	r4, [r7, #4]
 800e954:	922e      	str	r2, [sp, #184]	; 0xb8
 800e956:	000f      	movs	r7, r1
 800e958:	932d      	str	r3, [sp, #180]	; 0xb4
 800e95a:	2b07      	cmp	r3, #7
 800e95c:	dd08      	ble.n	800e970 <_svfprintf_r+0x1200>
 800e95e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e960:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e962:	aa2c      	add	r2, sp, #176	; 0xb0
 800e964:	f003 f81a 	bl	801199c <__ssprint_r>
 800e968:	2800      	cmp	r0, #0
 800e96a:	d000      	beq.n	800e96e <_svfprintf_r+0x11fe>
 800e96c:	e0df      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e96e:	af2f      	add	r7, sp, #188	; 0xbc
 800e970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	18ed      	adds	r5, r5, r3
 800e976:	e724      	b.n	800e7c2 <_svfprintf_r+0x1052>
 800e978:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e97a:	3b01      	subs	r3, #1
 800e97c:	9312      	str	r3, [sp, #72]	; 0x48
 800e97e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e980:	3b01      	subs	r3, #1
 800e982:	9311      	str	r3, [sp, #68]	; 0x44
 800e984:	e79d      	b.n	800e8c2 <_svfprintf_r+0x1152>
 800e986:	2010      	movs	r0, #16
 800e988:	1812      	adds	r2, r2, r0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e98e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e990:	2b07      	cmp	r3, #7
 800e992:	dd08      	ble.n	800e9a6 <_svfprintf_r+0x1236>
 800e994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e996:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e998:	aa2c      	add	r2, sp, #176	; 0xb0
 800e99a:	f002 ffff 	bl	801199c <__ssprint_r>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d000      	beq.n	800e9a4 <_svfprintf_r+0x1234>
 800e9a2:	e0c4      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e9a4:	a92f      	add	r1, sp, #188	; 0xbc
 800e9a6:	000f      	movs	r7, r1
 800e9a8:	3c10      	subs	r4, #16
 800e9aa:	e7c8      	b.n	800e93e <_svfprintf_r+0x11ce>
 800e9ac:	3210      	adds	r2, #16
 800e9ae:	607d      	str	r5, [r7, #4]
 800e9b0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9b4:	2b07      	cmp	r3, #7
 800e9b6:	dd08      	ble.n	800e9ca <_svfprintf_r+0x125a>
 800e9b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9be:	f002 ffed 	bl	801199c <__ssprint_r>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d000      	beq.n	800e9c8 <_svfprintf_r+0x1258>
 800e9c6:	e0b2      	b.n	800eb2e <_svfprintf_r+0x13be>
 800e9c8:	a92f      	add	r1, sp, #188	; 0xbc
 800e9ca:	000f      	movs	r7, r1
 800e9cc:	3c10      	subs	r4, #16
 800e9ce:	e74c      	b.n	800e86a <_svfprintf_r+0x10fa>
 800e9d0:	003c      	movs	r4, r7
 800e9d2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e9d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e9d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9d8:	3101      	adds	r1, #1
 800e9da:	3301      	adds	r3, #1
 800e9dc:	3408      	adds	r4, #8
 800e9de:	2a01      	cmp	r2, #1
 800e9e0:	dc03      	bgt.n	800e9ea <_svfprintf_r+0x127a>
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	4216      	tst	r6, r2
 800e9e6:	d100      	bne.n	800e9ea <_svfprintf_r+0x127a>
 800e9e8:	e07f      	b.n	800eaea <_svfprintf_r+0x137a>
 800e9ea:	9a08      	ldr	r2, [sp, #32]
 800e9ec:	912e      	str	r1, [sp, #184]	; 0xb8
 800e9ee:	603a      	str	r2, [r7, #0]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9f4:	607a      	str	r2, [r7, #4]
 800e9f6:	2b07      	cmp	r3, #7
 800e9f8:	dd08      	ble.n	800ea0c <_svfprintf_r+0x129c>
 800e9fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9fe:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea00:	f002 ffcc 	bl	801199c <__ssprint_r>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d000      	beq.n	800ea0a <_svfprintf_r+0x129a>
 800ea08:	e091      	b.n	800eb2e <_svfprintf_r+0x13be>
 800ea0a:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ea0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea10:	6023      	str	r3, [r4, #0]
 800ea12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea14:	6063      	str	r3, [r4, #4]
 800ea16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea18:	3408      	adds	r4, #8
 800ea1a:	189b      	adds	r3, r3, r2
 800ea1c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea1e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea20:	3301      	adds	r3, #1
 800ea22:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea24:	2b07      	cmp	r3, #7
 800ea26:	dd07      	ble.n	800ea38 <_svfprintf_r+0x12c8>
 800ea28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea2c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea2e:	f002 ffb5 	bl	801199c <__ssprint_r>
 800ea32:	2800      	cmp	r0, #0
 800ea34:	d17b      	bne.n	800eb2e <_svfprintf_r+0x13be>
 800ea36:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ea3e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ea40:	9309      	str	r3, [sp, #36]	; 0x24
 800ea42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea44:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800ea46:	1e5d      	subs	r5, r3, #1
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f7f1 fcfd 	bl	8000448 <__aeabi_dcmpeq>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d126      	bne.n	800eaa0 <_svfprintf_r+0x1330>
 800ea52:	9b08      	ldr	r3, [sp, #32]
 800ea54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea56:	3301      	adds	r3, #1
 800ea58:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ea5a:	6023      	str	r3, [r4, #0]
 800ea5c:	1e7b      	subs	r3, r7, #1
 800ea5e:	3201      	adds	r2, #1
 800ea60:	185b      	adds	r3, r3, r1
 800ea62:	6065      	str	r5, [r4, #4]
 800ea64:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea66:	922d      	str	r2, [sp, #180]	; 0xb4
 800ea68:	3408      	adds	r4, #8
 800ea6a:	2a07      	cmp	r2, #7
 800ea6c:	dd07      	ble.n	800ea7e <_svfprintf_r+0x130e>
 800ea6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea70:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea72:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea74:	f002 ff92 	bl	801199c <__ssprint_r>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d158      	bne.n	800eb2e <_svfprintf_r+0x13be>
 800ea7c:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea7e:	ab28      	add	r3, sp, #160	; 0xa0
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ea84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ea86:	6063      	str	r3, [r4, #4]
 800ea88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea8a:	189b      	adds	r3, r3, r2
 800ea8c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea90:	3301      	adds	r3, #1
 800ea92:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea94:	2b07      	cmp	r3, #7
 800ea96:	dd00      	ble.n	800ea9a <_svfprintf_r+0x132a>
 800ea98:	e638      	b.n	800e70c <_svfprintf_r+0xf9c>
 800ea9a:	3408      	adds	r4, #8
 800ea9c:	0027      	movs	r7, r4
 800ea9e:	e595      	b.n	800e5cc <_svfprintf_r+0xe5c>
 800eaa0:	2710      	movs	r7, #16
 800eaa2:	2d00      	cmp	r5, #0
 800eaa4:	ddeb      	ble.n	800ea7e <_svfprintf_r+0x130e>
 800eaa6:	0021      	movs	r1, r4
 800eaa8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eaaa:	4850      	ldr	r0, [pc, #320]	; (800ebec <_svfprintf_r+0x147c>)
 800eaac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eaae:	3301      	adds	r3, #1
 800eab0:	3108      	adds	r1, #8
 800eab2:	6020      	str	r0, [r4, #0]
 800eab4:	2d10      	cmp	r5, #16
 800eab6:	dc07      	bgt.n	800eac8 <_svfprintf_r+0x1358>
 800eab8:	6065      	str	r5, [r4, #4]
 800eaba:	000c      	movs	r4, r1
 800eabc:	18ad      	adds	r5, r5, r2
 800eabe:	952e      	str	r5, [sp, #184]	; 0xb8
 800eac0:	932d      	str	r3, [sp, #180]	; 0xb4
 800eac2:	2b07      	cmp	r3, #7
 800eac4:	dddb      	ble.n	800ea7e <_svfprintf_r+0x130e>
 800eac6:	e7d2      	b.n	800ea6e <_svfprintf_r+0x12fe>
 800eac8:	3210      	adds	r2, #16
 800eaca:	6067      	str	r7, [r4, #4]
 800eacc:	922e      	str	r2, [sp, #184]	; 0xb8
 800eace:	932d      	str	r3, [sp, #180]	; 0xb4
 800ead0:	2b07      	cmp	r3, #7
 800ead2:	dd07      	ble.n	800eae4 <_svfprintf_r+0x1374>
 800ead4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ead6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ead8:	aa2c      	add	r2, sp, #176	; 0xb0
 800eada:	f002 ff5f 	bl	801199c <__ssprint_r>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d125      	bne.n	800eb2e <_svfprintf_r+0x13be>
 800eae2:	a92f      	add	r1, sp, #188	; 0xbc
 800eae4:	000c      	movs	r4, r1
 800eae6:	3d10      	subs	r5, #16
 800eae8:	e7dd      	b.n	800eaa6 <_svfprintf_r+0x1336>
 800eaea:	9808      	ldr	r0, [sp, #32]
 800eaec:	912e      	str	r1, [sp, #184]	; 0xb8
 800eaee:	c705      	stmia	r7!, {r0, r2}
 800eaf0:	932d      	str	r3, [sp, #180]	; 0xb4
 800eaf2:	e7e6      	b.n	800eac2 <_svfprintf_r+0x1352>
 800eaf4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eaf6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eaf8:	2510      	movs	r5, #16
 800eafa:	1a9c      	subs	r4, r3, r2
 800eafc:	2c00      	cmp	r4, #0
 800eafe:	dc00      	bgt.n	800eb02 <_svfprintf_r+0x1392>
 800eb00:	e567      	b.n	800e5d2 <_svfprintf_r+0xe62>
 800eb02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb04:	493a      	ldr	r1, [pc, #232]	; (800ebf0 <_svfprintf_r+0x1480>)
 800eb06:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eb08:	3301      	adds	r3, #1
 800eb0a:	6039      	str	r1, [r7, #0]
 800eb0c:	2c10      	cmp	r4, #16
 800eb0e:	dc19      	bgt.n	800eb44 <_svfprintf_r+0x13d4>
 800eb10:	607c      	str	r4, [r7, #4]
 800eb12:	18a4      	adds	r4, r4, r2
 800eb14:	942e      	str	r4, [sp, #184]	; 0xb8
 800eb16:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb18:	2b07      	cmp	r3, #7
 800eb1a:	dc00      	bgt.n	800eb1e <_svfprintf_r+0x13ae>
 800eb1c:	e559      	b.n	800e5d2 <_svfprintf_r+0xe62>
 800eb1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb20:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb22:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb24:	f002 ff3a 	bl	801199c <__ssprint_r>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d100      	bne.n	800eb2e <_svfprintf_r+0x13be>
 800eb2c:	e551      	b.n	800e5d2 <_svfprintf_r+0xe62>
 800eb2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d101      	bne.n	800eb38 <_svfprintf_r+0x13c8>
 800eb34:	f7ff f845 	bl	800dbc2 <_svfprintf_r+0x452>
 800eb38:	0019      	movs	r1, r3
 800eb3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb3c:	f7fd fd80 	bl	800c640 <_free_r>
 800eb40:	f7ff f83f 	bl	800dbc2 <_svfprintf_r+0x452>
 800eb44:	3210      	adds	r2, #16
 800eb46:	607d      	str	r5, [r7, #4]
 800eb48:	922e      	str	r2, [sp, #184]	; 0xb8
 800eb4a:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	2b07      	cmp	r3, #7
 800eb50:	dd07      	ble.n	800eb62 <_svfprintf_r+0x13f2>
 800eb52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb56:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb58:	f002 ff20 	bl	801199c <__ssprint_r>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d1e6      	bne.n	800eb2e <_svfprintf_r+0x13be>
 800eb60:	af2f      	add	r7, sp, #188	; 0xbc
 800eb62:	3c10      	subs	r4, #16
 800eb64:	e7cd      	b.n	800eb02 <_svfprintf_r+0x1392>
 800eb66:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb6a:	f7fd fd69 	bl	800c640 <_free_r>
 800eb6e:	e549      	b.n	800e604 <_svfprintf_r+0xe94>
 800eb70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d101      	bne.n	800eb7a <_svfprintf_r+0x140a>
 800eb76:	f7ff f824 	bl	800dbc2 <_svfprintf_r+0x452>
 800eb7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb7e:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb80:	f002 ff0c 	bl	801199c <__ssprint_r>
 800eb84:	f7ff f81d 	bl	800dbc2 <_svfprintf_r+0x452>
 800eb88:	0034      	movs	r4, r6
 800eb8a:	2a00      	cmp	r2, #0
 800eb8c:	d101      	bne.n	800eb92 <_svfprintf_r+0x1422>
 800eb8e:	f7fe ff8c 	bl	800daaa <_svfprintf_r+0x33a>
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d101      	bne.n	800eb9a <_svfprintf_r+0x142a>
 800eb96:	f7ff fc01 	bl	800e39c <_svfprintf_r+0xc2c>
 800eb9a:	2b02      	cmp	r3, #2
 800eb9c:	d100      	bne.n	800eba0 <_svfprintf_r+0x1430>
 800eb9e:	e459      	b.n	800e454 <_svfprintf_r+0xce4>
 800eba0:	2507      	movs	r5, #7
 800eba2:	ab58      	add	r3, sp, #352	; 0x160
 800eba4:	9308      	str	r3, [sp, #32]
 800eba6:	9a08      	ldr	r2, [sp, #32]
 800eba8:	0013      	movs	r3, r2
 800ebaa:	3b01      	subs	r3, #1
 800ebac:	9308      	str	r3, [sp, #32]
 800ebae:	9b06      	ldr	r3, [sp, #24]
 800ebb0:	9908      	ldr	r1, [sp, #32]
 800ebb2:	402b      	ands	r3, r5
 800ebb4:	3330      	adds	r3, #48	; 0x30
 800ebb6:	700b      	strb	r3, [r1, #0]
 800ebb8:	9907      	ldr	r1, [sp, #28]
 800ebba:	074e      	lsls	r6, r1, #29
 800ebbc:	9906      	ldr	r1, [sp, #24]
 800ebbe:	08c8      	lsrs	r0, r1, #3
 800ebc0:	9907      	ldr	r1, [sp, #28]
 800ebc2:	4306      	orrs	r6, r0
 800ebc4:	08c9      	lsrs	r1, r1, #3
 800ebc6:	9107      	str	r1, [sp, #28]
 800ebc8:	0031      	movs	r1, r6
 800ebca:	9807      	ldr	r0, [sp, #28]
 800ebcc:	9606      	str	r6, [sp, #24]
 800ebce:	4301      	orrs	r1, r0
 800ebd0:	d1e9      	bne.n	800eba6 <_svfprintf_r+0x1436>
 800ebd2:	07e1      	lsls	r1, r4, #31
 800ebd4:	d400      	bmi.n	800ebd8 <_svfprintf_r+0x1468>
 800ebd6:	e42a      	b.n	800e42e <_svfprintf_r+0xcbe>
 800ebd8:	2b30      	cmp	r3, #48	; 0x30
 800ebda:	d100      	bne.n	800ebde <_svfprintf_r+0x146e>
 800ebdc:	e427      	b.n	800e42e <_svfprintf_r+0xcbe>
 800ebde:	2130      	movs	r1, #48	; 0x30
 800ebe0:	9b08      	ldr	r3, [sp, #32]
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	7019      	strb	r1, [r3, #0]
 800ebe6:	1e93      	subs	r3, r2, #2
 800ebe8:	9308      	str	r3, [sp, #32]
 800ebea:	e420      	b.n	800e42e <_svfprintf_r+0xcbe>
 800ebec:	08014b88 	.word	0x08014b88
 800ebf0:	08014b78 	.word	0x08014b78

0800ebf4 <__ssvfscanf_r>:
 800ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf6:	4ca7      	ldr	r4, [pc, #668]	; (800ee94 <__ssvfscanf_r+0x2a0>)
 800ebf8:	44a5      	add	sp, r4
 800ebfa:	af02      	add	r7, sp, #8
 800ebfc:	633b      	str	r3, [r7, #48]	; 0x30
 800ebfe:	000b      	movs	r3, r1
 800ec00:	6378      	str	r0, [r7, #52]	; 0x34
 800ec02:	6479      	str	r1, [r7, #68]	; 0x44
 800ec04:	61ba      	str	r2, [r7, #24]
 800ec06:	220c      	movs	r2, #12
 800ec08:	5e9a      	ldrsh	r2, [r3, r2]
 800ec0a:	2380      	movs	r3, #128	; 0x80
 800ec0c:	019b      	lsls	r3, r3, #6
 800ec0e:	421a      	tst	r2, r3
 800ec10:	d105      	bne.n	800ec1e <__ssvfscanf_r+0x2a>
 800ec12:	4313      	orrs	r3, r2
 800ec14:	818b      	strh	r3, [r1, #12]
 800ec16:	4aa0      	ldr	r2, [pc, #640]	; (800ee98 <__ssvfscanf_r+0x2a4>)
 800ec18:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ec1a:	4013      	ands	r3, r2
 800ec1c:	664b      	str	r3, [r1, #100]	; 0x64
 800ec1e:	2300      	movs	r3, #0
 800ec20:	617b      	str	r3, [r7, #20]
 800ec22:	643b      	str	r3, [r7, #64]	; 0x40
 800ec24:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec26:	627b      	str	r3, [r7, #36]	; 0x24
 800ec28:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	69ba      	ldr	r2, [r7, #24]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	3201      	adds	r2, #1
 800ec34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec36:	61ba      	str	r2, [r7, #24]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d100      	bne.n	800ec3e <__ssvfscanf_r+0x4a>
 800ec3c:	e0d7      	b.n	800edee <__ssvfscanf_r+0x1fa>
 800ec3e:	2608      	movs	r6, #8
 800ec40:	2108      	movs	r1, #8
 800ec42:	4a96      	ldr	r2, [pc, #600]	; (800ee9c <__ssvfscanf_r+0x2a8>)
 800ec44:	5cd2      	ldrb	r2, [r2, r3]
 800ec46:	4016      	ands	r6, r2
 800ec48:	420a      	tst	r2, r1
 800ec4a:	d01d      	beq.n	800ec88 <__ssvfscanf_r+0x94>
 800ec4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	dd12      	ble.n	800ec7a <__ssvfscanf_r+0x86>
 800ec54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec56:	4991      	ldr	r1, [pc, #580]	; (800ee9c <__ssvfscanf_r+0x2a8>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	781a      	ldrb	r2, [r3, #0]
 800ec5c:	5c8a      	ldrb	r2, [r1, r2]
 800ec5e:	2108      	movs	r1, #8
 800ec60:	420a      	tst	r2, r1
 800ec62:	d0e3      	beq.n	800ec2c <__ssvfscanf_r+0x38>
 800ec64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec68:	3201      	adds	r2, #1
 800ec6a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ec6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec6e:	3301      	adds	r3, #1
 800ec70:	6852      	ldr	r2, [r2, #4]
 800ec72:	600b      	str	r3, [r1, #0]
 800ec74:	3a01      	subs	r2, #1
 800ec76:	604a      	str	r2, [r1, #4]
 800ec78:	e7e8      	b.n	800ec4c <__ssvfscanf_r+0x58>
 800ec7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec7e:	f002 ff4d 	bl	8011b1c <__ssrefill_r>
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d0e6      	beq.n	800ec54 <__ssvfscanf_r+0x60>
 800ec86:	e7d1      	b.n	800ec2c <__ssvfscanf_r+0x38>
 800ec88:	2b25      	cmp	r3, #37	; 0x25
 800ec8a:	d165      	bne.n	800ed58 <__ssvfscanf_r+0x164>
 800ec8c:	250a      	movs	r5, #10
 800ec8e:	2480      	movs	r4, #128	; 0x80
 800ec90:	69ba      	ldr	r2, [r7, #24]
 800ec92:	63fe      	str	r6, [r7, #60]	; 0x3c
 800ec94:	3b16      	subs	r3, #22
 800ec96:	69b9      	ldr	r1, [r7, #24]
 800ec98:	3101      	adds	r1, #1
 800ec9a:	61b9      	str	r1, [r7, #24]
 800ec9c:	7811      	ldrb	r1, [r2, #0]
 800ec9e:	0008      	movs	r0, r1
 800eca0:	3825      	subs	r0, #37	; 0x25
 800eca2:	2855      	cmp	r0, #85	; 0x55
 800eca4:	d900      	bls.n	800eca8 <__ssvfscanf_r+0xb4>
 800eca6:	e170      	b.n	800ef8a <__ssvfscanf_r+0x396>
 800eca8:	f7f1 fa3e 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ecac:	016f0056 	.word	0x016f0056
 800ecb0:	016f016f 	.word	0x016f016f
 800ecb4:	0081016f 	.word	0x0081016f
 800ecb8:	016f016f 	.word	0x016f016f
 800ecbc:	016f016f 	.word	0x016f016f
 800ecc0:	00b8016f 	.word	0x00b8016f
 800ecc4:	00b800b8 	.word	0x00b800b8
 800ecc8:	00b800b8 	.word	0x00b800b8
 800eccc:	00b800b8 	.word	0x00b800b8
 800ecd0:	00b800b8 	.word	0x00b800b8
 800ecd4:	016f00b8 	.word	0x016f00b8
 800ecd8:	016f016f 	.word	0x016f016f
 800ecdc:	016f016f 	.word	0x016f016f
 800ece0:	016f016f 	.word	0x016f016f
 800ece4:	016f00d8 	.word	0x016f00d8
 800ece8:	00c1010a 	.word	0x00c1010a
 800ecec:	00d800d8 	.word	0x00d800d8
 800ecf0:	016f00d8 	.word	0x016f00d8
 800ecf4:	016f016f 	.word	0x016f016f
 800ecf8:	009f016f 	.word	0x009f016f
 800ecfc:	016f016f 	.word	0x016f016f
 800ed00:	016f00c9 	.word	0x016f00c9
 800ed04:	016f016f 	.word	0x016f016f
 800ed08:	016f00f0 	.word	0x016f00f0
 800ed0c:	016f016f 	.word	0x016f016f
 800ed10:	00d1016f 	.word	0x00d1016f
 800ed14:	016f016f 	.word	0x016f016f
 800ed18:	016f00fe 	.word	0x016f00fe
 800ed1c:	016f016f 	.word	0x016f016f
 800ed20:	016f016f 	.word	0x016f016f
 800ed24:	016f00d8 	.word	0x016f00d8
 800ed28:	00c3010c 	.word	0x00c3010c
 800ed2c:	00d800d8 	.word	0x00d800d8
 800ed30:	009400d8 	.word	0x009400d8
 800ed34:	009f012f 	.word	0x009f012f
 800ed38:	0088016f 	.word	0x0088016f
 800ed3c:	011200a9 	.word	0x011200a9
 800ed40:	011000cb 	.word	0x011000cb
 800ed44:	016f016f 	.word	0x016f016f
 800ed48:	00a600f2 	.word	0x00a600f2
 800ed4c:	016f00cf 	.word	0x016f00cf
 800ed50:	00d1016f 	.word	0x00d1016f
 800ed54:	00a6016f 	.word	0x00a6016f
 800ed58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	dd12      	ble.n	800ed86 <__ssvfscanf_r+0x192>
 800ed60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed62:	69ba      	ldr	r2, [r7, #24]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	3a01      	subs	r2, #1
 800ed68:	7819      	ldrb	r1, [r3, #0]
 800ed6a:	7812      	ldrb	r2, [r2, #0]
 800ed6c:	4291      	cmp	r1, r2
 800ed6e:	d13e      	bne.n	800edee <__ssvfscanf_r+0x1fa>
 800ed70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed74:	6852      	ldr	r2, [r2, #4]
 800ed76:	3301      	adds	r3, #1
 800ed78:	600b      	str	r3, [r1, #0]
 800ed7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7c:	3a01      	subs	r2, #1
 800ed7e:	604a      	str	r2, [r1, #4]
 800ed80:	3301      	adds	r3, #1
 800ed82:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed84:	e752      	b.n	800ec2c <__ssvfscanf_r+0x38>
 800ed86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed8a:	f002 fec7 	bl	8011b1c <__ssrefill_r>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	d0e6      	beq.n	800ed60 <__ssvfscanf_r+0x16c>
 800ed92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d003      	beq.n	800eda0 <__ssvfscanf_r+0x1ac>
 800ed98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed9a:	899b      	ldrh	r3, [r3, #12]
 800ed9c:	065b      	lsls	r3, r3, #25
 800ed9e:	d526      	bpl.n	800edee <__ssvfscanf_r+0x1fa>
 800eda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d000      	beq.n	800eda8 <__ssvfscanf_r+0x1b4>
 800eda6:	e0f6      	b.n	800ef96 <__ssvfscanf_r+0x3a2>
 800eda8:	3b01      	subs	r3, #1
 800edaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edac:	e104      	b.n	800efb8 <__ssvfscanf_r+0x3c4>
 800edae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edb0:	4332      	orrs	r2, r6
 800edb2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800edb4:	d11b      	bne.n	800edee <__ssvfscanf_r+0x1fa>
 800edb6:	2610      	movs	r6, #16
 800edb8:	69ba      	ldr	r2, [r7, #24]
 800edba:	e76c      	b.n	800ec96 <__ssvfscanf_r+0xa2>
 800edbc:	421e      	tst	r6, r3
 800edbe:	d116      	bne.n	800edee <__ssvfscanf_r+0x1fa>
 800edc0:	7851      	ldrb	r1, [r2, #1]
 800edc2:	296c      	cmp	r1, #108	; 0x6c
 800edc4:	d103      	bne.n	800edce <__ssvfscanf_r+0x1da>
 800edc6:	3202      	adds	r2, #2
 800edc8:	61ba      	str	r2, [r7, #24]
 800edca:	2202      	movs	r2, #2
 800edcc:	e000      	b.n	800edd0 <__ssvfscanf_r+0x1dc>
 800edce:	2201      	movs	r2, #1
 800edd0:	4316      	orrs	r6, r2
 800edd2:	e7f1      	b.n	800edb8 <__ssvfscanf_r+0x1c4>
 800edd4:	421e      	tst	r6, r3
 800edd6:	d10a      	bne.n	800edee <__ssvfscanf_r+0x1fa>
 800edd8:	7851      	ldrb	r1, [r2, #1]
 800edda:	2968      	cmp	r1, #104	; 0x68
 800eddc:	d103      	bne.n	800ede6 <__ssvfscanf_r+0x1f2>
 800edde:	3202      	adds	r2, #2
 800ede0:	61ba      	str	r2, [r7, #24]
 800ede2:	2208      	movs	r2, #8
 800ede4:	e7f4      	b.n	800edd0 <__ssvfscanf_r+0x1dc>
 800ede6:	2204      	movs	r2, #4
 800ede8:	e7f2      	b.n	800edd0 <__ssvfscanf_r+0x1dc>
 800edea:	421e      	tst	r6, r3
 800edec:	d0ed      	beq.n	800edca <__ssvfscanf_r+0x1d6>
 800edee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d000      	beq.n	800edf6 <__ssvfscanf_r+0x202>
 800edf4:	e0da      	b.n	800efac <__ssvfscanf_r+0x3b8>
 800edf6:	e0df      	b.n	800efb8 <__ssvfscanf_r+0x3c4>
 800edf8:	421e      	tst	r6, r3
 800edfa:	d0dd      	beq.n	800edb8 <__ssvfscanf_r+0x1c4>
 800edfc:	e7f7      	b.n	800edee <__ssvfscanf_r+0x1fa>
 800edfe:	228f      	movs	r2, #143	; 0x8f
 800ee00:	218f      	movs	r1, #143	; 0x8f
 800ee02:	4032      	ands	r2, r6
 800ee04:	420e      	tst	r6, r1
 800ee06:	d1f2      	bne.n	800edee <__ssvfscanf_r+0x1fa>
 800ee08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee0a:	2900      	cmp	r1, #0
 800ee0c:	d104      	bne.n	800ee18 <__ssvfscanf_r+0x224>
 800ee0e:	b082      	sub	sp, #8
 800ee10:	a902      	add	r1, sp, #8
 800ee12:	6439      	str	r1, [r7, #64]	; 0x40
 800ee14:	600a      	str	r2, [r1, #0]
 800ee16:	604a      	str	r2, [r1, #4]
 800ee18:	4326      	orrs	r6, r4
 800ee1a:	e7cd      	b.n	800edb8 <__ssvfscanf_r+0x1c4>
 800ee1c:	228f      	movs	r2, #143	; 0x8f
 800ee1e:	4216      	tst	r6, r2
 800ee20:	d1e5      	bne.n	800edee <__ssvfscanf_r+0x1fa>
 800ee22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee24:	436a      	muls	r2, r5
 800ee26:	3a30      	subs	r2, #48	; 0x30
 800ee28:	188a      	adds	r2, r1, r2
 800ee2a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ee2c:	e7c4      	b.n	800edb8 <__ssvfscanf_r+0x1c4>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	431e      	orrs	r6, r3
 800ee32:	4b1b      	ldr	r3, [pc, #108]	; (800eea0 <__ssvfscanf_r+0x2ac>)
 800ee34:	617b      	str	r3, [r7, #20]
 800ee36:	230a      	movs	r3, #10
 800ee38:	2403      	movs	r4, #3
 800ee3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee3c:	e00f      	b.n	800ee5e <__ssvfscanf_r+0x26a>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	431e      	orrs	r6, r3
 800ee42:	4b18      	ldr	r3, [pc, #96]	; (800eea4 <__ssvfscanf_r+0x2b0>)
 800ee44:	617b      	str	r3, [r7, #20]
 800ee46:	2308      	movs	r3, #8
 800ee48:	e7f6      	b.n	800ee38 <__ssvfscanf_r+0x244>
 800ee4a:	4b16      	ldr	r3, [pc, #88]	; (800eea4 <__ssvfscanf_r+0x2b0>)
 800ee4c:	e7f2      	b.n	800ee34 <__ssvfscanf_r+0x240>
 800ee4e:	2380      	movs	r3, #128	; 0x80
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	431e      	orrs	r6, r3
 800ee54:	4b13      	ldr	r3, [pc, #76]	; (800eea4 <__ssvfscanf_r+0x2b0>)
 800ee56:	617b      	str	r3, [r7, #20]
 800ee58:	2310      	movs	r3, #16
 800ee5a:	e7ed      	b.n	800ee38 <__ssvfscanf_r+0x244>
 800ee5c:	2404      	movs	r4, #4
 800ee5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	dd55      	ble.n	800ef12 <__ssvfscanf_r+0x31e>
 800ee66:	0673      	lsls	r3, r6, #25
 800ee68:	d407      	bmi.n	800ee7a <__ssvfscanf_r+0x286>
 800ee6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee6c:	490b      	ldr	r1, [pc, #44]	; (800ee9c <__ssvfscanf_r+0x2a8>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	781a      	ldrb	r2, [r3, #0]
 800ee72:	5c8a      	ldrb	r2, [r1, r2]
 800ee74:	2108      	movs	r1, #8
 800ee76:	420a      	tst	r2, r1
 800ee78:	d152      	bne.n	800ef20 <__ssvfscanf_r+0x32c>
 800ee7a:	1e60      	subs	r0, r4, #1
 800ee7c:	2803      	cmp	r0, #3
 800ee7e:	d863      	bhi.n	800ef48 <__ssvfscanf_r+0x354>
 800ee80:	f7f1 f952 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ee84:	03bd01da 	.word	0x03bd01da
 800ee88:	068a0579 	.word	0x068a0579
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	431e      	orrs	r6, r3
 800ee90:	2402      	movs	r4, #2
 800ee92:	e7e4      	b.n	800ee5e <__ssvfscanf_r+0x26a>
 800ee94:	fffffd34 	.word	0xfffffd34
 800ee98:	ffffdfff 	.word	0xffffdfff
 800ee9c:	08014871 	.word	0x08014871
 800eea0:	0800c045 	.word	0x0800c045
 800eea4:	0801164d 	.word	0x0801164d
 800eea8:	2248      	movs	r2, #72	; 0x48
 800eeaa:	2318      	movs	r3, #24
 800eeac:	189b      	adds	r3, r3, r2
 800eeae:	19d8      	adds	r0, r3, r7
 800eeb0:	69b9      	ldr	r1, [r7, #24]
 800eeb2:	f001 f9d7 	bl	8010264 <__sccl>
 800eeb6:	2340      	movs	r3, #64	; 0x40
 800eeb8:	2401      	movs	r4, #1
 800eeba:	61b8      	str	r0, [r7, #24]
 800eebc:	431e      	orrs	r6, r3
 800eebe:	e7ce      	b.n	800ee5e <__ssvfscanf_r+0x26a>
 800eec0:	2301      	movs	r3, #1
 800eec2:	431e      	orrs	r6, r3
 800eec4:	2340      	movs	r3, #64	; 0x40
 800eec6:	2400      	movs	r4, #0
 800eec8:	431e      	orrs	r6, r3
 800eeca:	e7c8      	b.n	800ee5e <__ssvfscanf_r+0x26a>
 800eecc:	2388      	movs	r3, #136	; 0x88
 800eece:	e7bf      	b.n	800ee50 <__ssvfscanf_r+0x25c>
 800eed0:	06f3      	lsls	r3, r6, #27
 800eed2:	d500      	bpl.n	800eed6 <__ssvfscanf_r+0x2e2>
 800eed4:	e6aa      	b.n	800ec2c <__ssvfscanf_r+0x38>
 800eed6:	2108      	movs	r1, #8
 800eed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeda:	cb04      	ldmia	r3!, {r2}
 800eedc:	420e      	tst	r6, r1
 800eede:	d003      	beq.n	800eee8 <__ssvfscanf_r+0x2f4>
 800eee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eee2:	7011      	strb	r1, [r2, #0]
 800eee4:	633b      	str	r3, [r7, #48]	; 0x30
 800eee6:	e6a1      	b.n	800ec2c <__ssvfscanf_r+0x38>
 800eee8:	0771      	lsls	r1, r6, #29
 800eeea:	d502      	bpl.n	800eef2 <__ssvfscanf_r+0x2fe>
 800eeec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eeee:	8011      	strh	r1, [r2, #0]
 800eef0:	e7f8      	b.n	800eee4 <__ssvfscanf_r+0x2f0>
 800eef2:	07f1      	lsls	r1, r6, #31
 800eef4:	d502      	bpl.n	800eefc <__ssvfscanf_r+0x308>
 800eef6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eef8:	6011      	str	r1, [r2, #0]
 800eefa:	e7f3      	b.n	800eee4 <__ssvfscanf_r+0x2f0>
 800eefc:	07b6      	lsls	r6, r6, #30
 800eefe:	d5fa      	bpl.n	800eef6 <__ssvfscanf_r+0x302>
 800ef00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef02:	6011      	str	r1, [r2, #0]
 800ef04:	17c9      	asrs	r1, r1, #31
 800ef06:	6051      	str	r1, [r2, #4]
 800ef08:	e7ec      	b.n	800eee4 <__ssvfscanf_r+0x2f0>
 800ef0a:	4ba2      	ldr	r3, [pc, #648]	; (800f194 <__ssvfscanf_r+0x5a0>)
 800ef0c:	617b      	str	r3, [r7, #20]
 800ef0e:	2300      	movs	r3, #0
 800ef10:	e792      	b.n	800ee38 <__ssvfscanf_r+0x244>
 800ef12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef16:	f002 fe01 	bl	8011b1c <__ssrefill_r>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d0a3      	beq.n	800ee66 <__ssvfscanf_r+0x272>
 800ef1e:	e738      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800ef20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef24:	3201      	adds	r2, #1
 800ef26:	63ba      	str	r2, [r7, #56]	; 0x38
 800ef28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef2a:	6852      	ldr	r2, [r2, #4]
 800ef2c:	3a01      	subs	r2, #1
 800ef2e:	604a      	str	r2, [r1, #4]
 800ef30:	2a00      	cmp	r2, #0
 800ef32:	dd02      	ble.n	800ef3a <__ssvfscanf_r+0x346>
 800ef34:	3301      	adds	r3, #1
 800ef36:	600b      	str	r3, [r1, #0]
 800ef38:	e797      	b.n	800ee6a <__ssvfscanf_r+0x276>
 800ef3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef3e:	f002 fded 	bl	8011b1c <__ssrefill_r>
 800ef42:	2800      	cmp	r0, #0
 800ef44:	d091      	beq.n	800ee6a <__ssvfscanf_r+0x276>
 800ef46:	e724      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800ef48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	2a00      	cmp	r2, #0
 800ef4e:	d100      	bne.n	800ef52 <__ssvfscanf_r+0x35e>
 800ef50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef52:	2210      	movs	r2, #16
 800ef54:	0034      	movs	r4, r6
 800ef56:	4032      	ands	r2, r6
 800ef58:	623a      	str	r2, [r7, #32]
 800ef5a:	401c      	ands	r4, r3
 800ef5c:	421e      	tst	r6, r3
 800ef5e:	d100      	bne.n	800ef62 <__ssvfscanf_r+0x36e>
 800ef60:	e0f3      	b.n	800f14a <__ssvfscanf_r+0x556>
 800ef62:	2a00      	cmp	r2, #0
 800ef64:	d000      	beq.n	800ef68 <__ssvfscanf_r+0x374>
 800ef66:	e0b6      	b.n	800f0d6 <__ssvfscanf_r+0x4e2>
 800ef68:	2080      	movs	r0, #128	; 0x80
 800ef6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6c:	cb10      	ldmia	r3!, {r4}
 800ef6e:	613b      	str	r3, [r7, #16]
 800ef70:	4206      	tst	r6, r0
 800ef72:	d100      	bne.n	800ef76 <__ssvfscanf_r+0x382>
 800ef74:	e0b7      	b.n	800f0e6 <__ssvfscanf_r+0x4f2>
 800ef76:	2c00      	cmp	r4, #0
 800ef78:	d007      	beq.n	800ef8a <__ssvfscanf_r+0x396>
 800ef7a:	f7fb ff6d 	bl	800ae58 <malloc>
 800ef7e:	6338      	str	r0, [r7, #48]	; 0x30
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d11f      	bne.n	800efc4 <__ssvfscanf_r+0x3d0>
 800ef84:	2301      	movs	r3, #1
 800ef86:	425b      	negs	r3, r3
 800ef88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d013      	beq.n	800efb8 <__ssvfscanf_r+0x3c4>
 800ef90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef92:	3301      	adds	r3, #1
 800ef94:	d10a      	bne.n	800efac <__ssvfscanf_r+0x3b8>
 800ef96:	2400      	movs	r4, #0
 800ef98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef9a:	681d      	ldr	r5, [r3, #0]
 800ef9c:	88db      	ldrh	r3, [r3, #6]
 800ef9e:	42a3      	cmp	r3, r4
 800efa0:	dd01      	ble.n	800efa6 <__ssvfscanf_r+0x3b2>
 800efa2:	f001 f82a 	bl	800fffa <__ssvfscanf_r+0x1406>
 800efa6:	2301      	movs	r3, #1
 800efa8:	425b      	negs	r3, r3
 800efaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efae:	6818      	ldr	r0, [r3, #0]
 800efb0:	2800      	cmp	r0, #0
 800efb2:	d001      	beq.n	800efb8 <__ssvfscanf_r+0x3c4>
 800efb4:	f7fb ff5a 	bl	800ae6c <free>
 800efb8:	46bd      	mov	sp, r7
 800efba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efbc:	23b1      	movs	r3, #177	; 0xb1
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	449d      	add	sp, r3
 800efc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc6:	6023      	str	r3, [r4, #0]
 800efc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efca:	88de      	ldrh	r6, [r3, #6]
 800efcc:	889d      	ldrh	r5, [r3, #4]
 800efce:	42ae      	cmp	r6, r5
 800efd0:	d30e      	bcc.n	800eff0 <__ssvfscanf_r+0x3fc>
 800efd2:	4b71      	ldr	r3, [pc, #452]	; (800f198 <__ssvfscanf_r+0x5a4>)
 800efd4:	429d      	cmp	r5, r3
 800efd6:	d8d5      	bhi.n	800ef84 <__ssvfscanf_r+0x390>
 800efd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efda:	3508      	adds	r5, #8
 800efdc:	b2ad      	uxth	r5, r5
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	00a9      	lsls	r1, r5, #2
 800efe2:	f002 f901 	bl	80111e8 <realloc>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d0cc      	beq.n	800ef84 <__ssvfscanf_r+0x390>
 800efea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efec:	6018      	str	r0, [r3, #0]
 800efee:	809d      	strh	r5, [r3, #4]
 800eff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff2:	1c72      	adds	r2, r6, #1
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	00b6      	lsls	r6, r6, #2
 800eff8:	50f4      	str	r4, [r6, r3]
 800effa:	2320      	movs	r3, #32
 800effc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800effe:	0026      	movs	r6, r4
 800f000:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f002:	80ca      	strh	r2, [r1, #6]
 800f004:	61fb      	str	r3, [r7, #28]
 800f006:	2500      	movs	r5, #0
 800f008:	f7fd f9fe 	bl	800c408 <__locale_mb_cur_max>
 800f00c:	42a8      	cmp	r0, r5
 800f00e:	d100      	bne.n	800f012 <__ssvfscanf_r+0x41e>
 800f010:	e6bf      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800f012:	1c6a      	adds	r2, r5, #1
 800f014:	60fa      	str	r2, [r7, #12]
 800f016:	228c      	movs	r2, #140	; 0x8c
 800f018:	2048      	movs	r0, #72	; 0x48
 800f01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f01c:	0052      	lsls	r2, r2, #1
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	1812      	adds	r2, r2, r0
 800f022:	7819      	ldrb	r1, [r3, #0]
 800f024:	19d2      	adds	r2, r2, r7
 800f026:	5551      	strb	r1, [r2, r5]
 800f028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f02a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f02c:	6852      	ldr	r2, [r2, #4]
 800f02e:	3301      	adds	r3, #1
 800f030:	600b      	str	r3, [r1, #0]
 800f032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f034:	3a01      	subs	r2, #1
 800f036:	604a      	str	r2, [r1, #4]
 800f038:	2b03      	cmp	r3, #3
 800f03a:	d102      	bne.n	800f042 <__ssvfscanf_r+0x44e>
 800f03c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f03e:	2b04      	cmp	r3, #4
 800f040:	d007      	beq.n	800f052 <__ssvfscanf_r+0x45e>
 800f042:	2048      	movs	r0, #72	; 0x48
 800f044:	2310      	movs	r3, #16
 800f046:	181b      	adds	r3, r3, r0
 800f048:	2208      	movs	r2, #8
 800f04a:	2100      	movs	r1, #0
 800f04c:	19d8      	adds	r0, r3, r7
 800f04e:	f7fd f997 	bl	800c380 <memset>
 800f052:	2148      	movs	r1, #72	; 0x48
 800f054:	2310      	movs	r3, #16
 800f056:	228c      	movs	r2, #140	; 0x8c
 800f058:	185b      	adds	r3, r3, r1
 800f05a:	0052      	lsls	r2, r2, #1
 800f05c:	19db      	adds	r3, r3, r7
 800f05e:	1852      	adds	r2, r2, r1
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	0021      	movs	r1, r4
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f068:	19d2      	adds	r2, r2, r7
 800f06a:	f002 fc57 	bl	801191c <_mbrtowc_r>
 800f06e:	0003      	movs	r3, r0
 800f070:	62b8      	str	r0, [r7, #40]	; 0x28
 800f072:	3301      	adds	r3, #1
 800f074:	d100      	bne.n	800f078 <__ssvfscanf_r+0x484>
 800f076:	e68c      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d139      	bne.n	800f0f0 <__ssvfscanf_r+0x4fc>
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d100      	bne.n	800f084 <__ssvfscanf_r+0x490>
 800f082:	6023      	str	r3, [r4, #0]
 800f084:	68fa      	ldr	r2, [r7, #12]
 800f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f088:	4694      	mov	ip, r2
 800f08a:	4463      	add	r3, ip
 800f08c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f090:	2b03      	cmp	r3, #3
 800f092:	d102      	bne.n	800f09a <__ssvfscanf_r+0x4a6>
 800f094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f096:	2b04      	cmp	r3, #4
 800f098:	d002      	beq.n	800f0a0 <__ssvfscanf_r+0x4ac>
 800f09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f09c:	3b01      	subs	r3, #1
 800f09e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0a0:	6a3b      	ldr	r3, [r7, #32]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d115      	bne.n	800f0d2 <__ssvfscanf_r+0x4de>
 800f0a6:	2e00      	cmp	r6, #0
 800f0a8:	d012      	beq.n	800f0d0 <__ssvfscanf_r+0x4dc>
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ac:	69fa      	ldr	r2, [r7, #28]
 800f0ae:	1ae5      	subs	r5, r4, r3
 800f0b0:	10ab      	asrs	r3, r5, #2
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d30c      	bcc.n	800f0d0 <__ssvfscanf_r+0x4dc>
 800f0b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0b8:	00d1      	lsls	r1, r2, #3
 800f0ba:	f002 f895 	bl	80111e8 <realloc>
 800f0be:	6338      	str	r0, [r7, #48]	; 0x30
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d100      	bne.n	800f0c6 <__ssvfscanf_r+0x4d2>
 800f0c4:	e75e      	b.n	800ef84 <__ssvfscanf_r+0x390>
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	1944      	adds	r4, r0, r5
 800f0ca:	005b      	lsls	r3, r3, #1
 800f0cc:	6030      	str	r0, [r6, #0]
 800f0ce:	61fb      	str	r3, [r7, #28]
 800f0d0:	3404      	adds	r4, #4
 800f0d2:	2500      	movs	r5, #0
 800f0d4:	e010      	b.n	800f0f8 <__ssvfscanf_r+0x504>
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d8:	613b      	str	r3, [r7, #16]
 800f0da:	2300      	movs	r3, #0
 800f0dc:	001e      	movs	r6, r3
 800f0de:	001c      	movs	r4, r3
 800f0e0:	61fb      	str	r3, [r7, #28]
 800f0e2:	633b      	str	r3, [r7, #48]	; 0x30
 800f0e4:	e78f      	b.n	800f006 <__ssvfscanf_r+0x412>
 800f0e6:	6a3b      	ldr	r3, [r7, #32]
 800f0e8:	001e      	movs	r6, r3
 800f0ea:	61fb      	str	r3, [r7, #28]
 800f0ec:	633b      	str	r3, [r7, #48]	; 0x30
 800f0ee:	e78a      	b.n	800f006 <__ssvfscanf_r+0x412>
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	68fd      	ldr	r5, [r7, #12]
 800f0f4:	3302      	adds	r3, #2
 800f0f6:	d1c5      	bne.n	800f084 <__ssvfscanf_r+0x490>
 800f0f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	dc12      	bgt.n	800f126 <__ssvfscanf_r+0x532>
 800f100:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f102:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f104:	f002 fd0a 	bl	8011b1c <__ssrefill_r>
 800f108:	2800      	cmp	r0, #0
 800f10a:	d00c      	beq.n	800f126 <__ssvfscanf_r+0x532>
 800f10c:	2d00      	cmp	r5, #0
 800f10e:	d000      	beq.n	800f112 <__ssvfscanf_r+0x51e>
 800f110:	e63f      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800f112:	2e00      	cmp	r6, #0
 800f114:	d10c      	bne.n	800f130 <__ssvfscanf_r+0x53c>
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	425a      	negs	r2, r3
 800f11a:	4153      	adcs	r3, r2
 800f11c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f11e:	18d3      	adds	r3, r2, r3
 800f120:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	e6de      	b.n	800eee4 <__ssvfscanf_r+0x2f0>
 800f126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d000      	beq.n	800f12e <__ssvfscanf_r+0x53a>
 800f12c:	e76c      	b.n	800f008 <__ssvfscanf_r+0x414>
 800f12e:	e7f0      	b.n	800f112 <__ssvfscanf_r+0x51e>
 800f130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f132:	69fa      	ldr	r2, [r7, #28]
 800f134:	1ae1      	subs	r1, r4, r3
 800f136:	108b      	asrs	r3, r1, #2
 800f138:	429a      	cmp	r2, r3
 800f13a:	d9ec      	bls.n	800f116 <__ssvfscanf_r+0x522>
 800f13c:	6830      	ldr	r0, [r6, #0]
 800f13e:	f002 f853 	bl	80111e8 <realloc>
 800f142:	2800      	cmp	r0, #0
 800f144:	d0e7      	beq.n	800f116 <__ssvfscanf_r+0x522>
 800f146:	6030      	str	r0, [r6, #0]
 800f148:	e7e5      	b.n	800f116 <__ssvfscanf_r+0x522>
 800f14a:	6a3b      	ldr	r3, [r7, #32]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d025      	beq.n	800f19c <__ssvfscanf_r+0x5a8>
 800f150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f158:	6812      	ldr	r2, [r2, #0]
 800f15a:	4299      	cmp	r1, r3
 800f15c:	dd11      	ble.n	800f182 <__ssvfscanf_r+0x58e>
 800f15e:	1ac9      	subs	r1, r1, r3
 800f160:	18d2      	adds	r2, r2, r3
 800f162:	18e4      	adds	r4, r4, r3
 800f164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f166:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f168:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f16a:	0019      	movs	r1, r3
 800f16c:	601a      	str	r2, [r3, #0]
 800f16e:	f002 fcd5 	bl	8011b1c <__ssrefill_r>
 800f172:	2800      	cmp	r0, #0
 800f174:	d0ec      	beq.n	800f150 <__ssvfscanf_r+0x55c>
 800f176:	2c00      	cmp	r4, #0
 800f178:	d100      	bne.n	800f17c <__ssvfscanf_r+0x588>
 800f17a:	e60a      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800f17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17e:	191b      	adds	r3, r3, r4
 800f180:	e5ff      	b.n	800ed82 <__ssvfscanf_r+0x18e>
 800f182:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f184:	1a5b      	subs	r3, r3, r1
 800f186:	1864      	adds	r4, r4, r1
 800f188:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f18a:	604b      	str	r3, [r1, #4]
 800f18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f18e:	18d2      	adds	r2, r2, r3
 800f190:	600a      	str	r2, [r1, #0]
 800f192:	e7f3      	b.n	800f17c <__ssvfscanf_r+0x588>
 800f194:	0800c045 	.word	0x0800c045
 800f198:	0000fff6 	.word	0x0000fff6
 800f19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19e:	0034      	movs	r4, r6
 800f1a0:	cb20      	ldmia	r3!, {r5}
 800f1a2:	633b      	str	r3, [r7, #48]	; 0x30
 800f1a4:	2380      	movs	r3, #128	; 0x80
 800f1a6:	401c      	ands	r4, r3
 800f1a8:	421e      	tst	r6, r3
 800f1aa:	d028      	beq.n	800f1fe <__ssvfscanf_r+0x60a>
 800f1ac:	2d00      	cmp	r5, #0
 800f1ae:	d100      	bne.n	800f1b2 <__ssvfscanf_r+0x5be>
 800f1b0:	e61d      	b.n	800edee <__ssvfscanf_r+0x1fa>
 800f1b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1b4:	f7fb fe50 	bl	800ae58 <malloc>
 800f1b8:	6238      	str	r0, [r7, #32]
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d100      	bne.n	800f1c0 <__ssvfscanf_r+0x5cc>
 800f1be:	e5ef      	b.n	800eda0 <__ssvfscanf_r+0x1ac>
 800f1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1c2:	6028      	str	r0, [r5, #0]
 800f1c4:	88de      	ldrh	r6, [r3, #6]
 800f1c6:	889c      	ldrh	r4, [r3, #4]
 800f1c8:	6818      	ldr	r0, [r3, #0]
 800f1ca:	42a6      	cmp	r6, r4
 800f1cc:	d30e      	bcc.n	800f1ec <__ssvfscanf_r+0x5f8>
 800f1ce:	4bbf      	ldr	r3, [pc, #764]	; (800f4cc <__ssvfscanf_r+0x8d8>)
 800f1d0:	429c      	cmp	r4, r3
 800f1d2:	d900      	bls.n	800f1d6 <__ssvfscanf_r+0x5e2>
 800f1d4:	e6df      	b.n	800ef96 <__ssvfscanf_r+0x3a2>
 800f1d6:	3408      	adds	r4, #8
 800f1d8:	b2a4      	uxth	r4, r4
 800f1da:	00a1      	lsls	r1, r4, #2
 800f1dc:	f002 f804 	bl	80111e8 <realloc>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d100      	bne.n	800f1e6 <__ssvfscanf_r+0x5f2>
 800f1e4:	e6d7      	b.n	800ef96 <__ssvfscanf_r+0x3a2>
 800f1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1e8:	6018      	str	r0, [r3, #0]
 800f1ea:	809c      	strh	r4, [r3, #4]
 800f1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ee:	1c72      	adds	r2, r6, #1
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1f4:	00b6      	lsls	r6, r6, #2
 800f1f6:	002c      	movs	r4, r5
 800f1f8:	50f5      	str	r5, [r6, r3]
 800f1fa:	6a3d      	ldr	r5, [r7, #32]
 800f1fc:	80ca      	strh	r2, [r1, #6]
 800f1fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f200:	0029      	movs	r1, r5
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	2201      	movs	r2, #1
 800f206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f208:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f20a:	f002 fca6 	bl	8011b5a <_sfread_r>
 800f20e:	1e05      	subs	r5, r0, #0
 800f210:	d100      	bne.n	800f214 <__ssvfscanf_r+0x620>
 800f212:	e5be      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800f214:	2c00      	cmp	r4, #0
 800f216:	d009      	beq.n	800f22c <__ssvfscanf_r+0x638>
 800f218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21a:	4283      	cmp	r3, r0
 800f21c:	d906      	bls.n	800f22c <__ssvfscanf_r+0x638>
 800f21e:	0001      	movs	r1, r0
 800f220:	6820      	ldr	r0, [r4, #0]
 800f222:	f001 ffe1 	bl	80111e8 <realloc>
 800f226:	2800      	cmp	r0, #0
 800f228:	d000      	beq.n	800f22c <__ssvfscanf_r+0x638>
 800f22a:	6020      	str	r0, [r4, #0]
 800f22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22e:	195b      	adds	r3, r3, r5
 800f230:	63bb      	str	r3, [r7, #56]	; 0x38
 800f232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f234:	3301      	adds	r3, #1
 800f236:	e4f8      	b.n	800ec2a <__ssvfscanf_r+0x36>
 800f238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d101      	bne.n	800f242 <__ssvfscanf_r+0x64e>
 800f23e:	3b01      	subs	r3, #1
 800f240:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f242:	2210      	movs	r2, #16
 800f244:	2301      	movs	r3, #1
 800f246:	0034      	movs	r4, r6
 800f248:	4032      	ands	r2, r6
 800f24a:	401c      	ands	r4, r3
 800f24c:	623a      	str	r2, [r7, #32]
 800f24e:	421e      	tst	r6, r3
 800f250:	d100      	bne.n	800f254 <__ssvfscanf_r+0x660>
 800f252:	e116      	b.n	800f482 <__ssvfscanf_r+0x88e>
 800f254:	2a00      	cmp	r2, #0
 800f256:	d000      	beq.n	800f25a <__ssvfscanf_r+0x666>
 800f258:	e0b0      	b.n	800f3bc <__ssvfscanf_r+0x7c8>
 800f25a:	2080      	movs	r0, #128	; 0x80
 800f25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25e:	cb10      	ldmia	r3!, {r4}
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	4206      	tst	r6, r0
 800f264:	d100      	bne.n	800f268 <__ssvfscanf_r+0x674>
 800f266:	e0b2      	b.n	800f3ce <__ssvfscanf_r+0x7da>
 800f268:	2c00      	cmp	r4, #0
 800f26a:	d100      	bne.n	800f26e <__ssvfscanf_r+0x67a>
 800f26c:	e68d      	b.n	800ef8a <__ssvfscanf_r+0x396>
 800f26e:	f7fb fdf3 	bl	800ae58 <malloc>
 800f272:	6338      	str	r0, [r7, #48]	; 0x30
 800f274:	2800      	cmp	r0, #0
 800f276:	d100      	bne.n	800f27a <__ssvfscanf_r+0x686>
 800f278:	e684      	b.n	800ef84 <__ssvfscanf_r+0x390>
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f280:	88de      	ldrh	r6, [r3, #6]
 800f282:	889d      	ldrh	r5, [r3, #4]
 800f284:	42ae      	cmp	r6, r5
 800f286:	d310      	bcc.n	800f2aa <__ssvfscanf_r+0x6b6>
 800f288:	4b90      	ldr	r3, [pc, #576]	; (800f4cc <__ssvfscanf_r+0x8d8>)
 800f28a:	429d      	cmp	r5, r3
 800f28c:	d900      	bls.n	800f290 <__ssvfscanf_r+0x69c>
 800f28e:	e679      	b.n	800ef84 <__ssvfscanf_r+0x390>
 800f290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f292:	3508      	adds	r5, #8
 800f294:	b2ad      	uxth	r5, r5
 800f296:	6818      	ldr	r0, [r3, #0]
 800f298:	00a9      	lsls	r1, r5, #2
 800f29a:	f001 ffa5 	bl	80111e8 <realloc>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d100      	bne.n	800f2a4 <__ssvfscanf_r+0x6b0>
 800f2a2:	e66f      	b.n	800ef84 <__ssvfscanf_r+0x390>
 800f2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2a6:	6018      	str	r0, [r3, #0]
 800f2a8:	809d      	strh	r5, [r3, #4]
 800f2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2ac:	1c72      	adds	r2, r6, #1
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	00b6      	lsls	r6, r6, #2
 800f2b2:	50f4      	str	r4, [r6, r3]
 800f2b4:	2320      	movs	r3, #32
 800f2b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2b8:	0026      	movs	r6, r4
 800f2ba:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f2bc:	80ca      	strh	r2, [r1, #6]
 800f2be:	613b      	str	r3, [r7, #16]
 800f2c0:	2500      	movs	r5, #0
 800f2c2:	f7fd f8a1 	bl	800c408 <__locale_mb_cur_max>
 800f2c6:	42a8      	cmp	r0, r5
 800f2c8:	d100      	bne.n	800f2cc <__ssvfscanf_r+0x6d8>
 800f2ca:	e562      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800f2cc:	1c6a      	adds	r2, r5, #1
 800f2ce:	61fa      	str	r2, [r7, #28]
 800f2d0:	228c      	movs	r2, #140	; 0x8c
 800f2d2:	2048      	movs	r0, #72	; 0x48
 800f2d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2d6:	0052      	lsls	r2, r2, #1
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	1812      	adds	r2, r2, r0
 800f2dc:	7819      	ldrb	r1, [r3, #0]
 800f2de:	19d2      	adds	r2, r2, r7
 800f2e0:	5551      	strb	r1, [r2, r5]
 800f2e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2e6:	6852      	ldr	r2, [r2, #4]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	600b      	str	r3, [r1, #0]
 800f2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ee:	3a01      	subs	r2, #1
 800f2f0:	604a      	str	r2, [r1, #4]
 800f2f2:	2b03      	cmp	r3, #3
 800f2f4:	d102      	bne.n	800f2fc <__ssvfscanf_r+0x708>
 800f2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f8:	2b04      	cmp	r3, #4
 800f2fa:	d006      	beq.n	800f30a <__ssvfscanf_r+0x716>
 800f2fc:	2048      	movs	r0, #72	; 0x48
 800f2fe:	2208      	movs	r2, #8
 800f300:	1813      	adds	r3, r2, r0
 800f302:	2100      	movs	r1, #0
 800f304:	19d8      	adds	r0, r3, r7
 800f306:	f7fd f83b 	bl	800c380 <memset>
 800f30a:	2148      	movs	r1, #72	; 0x48
 800f30c:	2308      	movs	r3, #8
 800f30e:	228c      	movs	r2, #140	; 0x8c
 800f310:	185b      	adds	r3, r3, r1
 800f312:	0052      	lsls	r2, r2, #1
 800f314:	19db      	adds	r3, r3, r7
 800f316:	1852      	adds	r2, r2, r1
 800f318:	9300      	str	r3, [sp, #0]
 800f31a:	0021      	movs	r1, r4
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f320:	19d2      	adds	r2, r2, r7
 800f322:	f002 fafb 	bl	801191c <_mbrtowc_r>
 800f326:	0003      	movs	r3, r0
 800f328:	62b8      	str	r0, [r7, #40]	; 0x28
 800f32a:	3301      	adds	r3, #1
 800f32c:	d100      	bne.n	800f330 <__ssvfscanf_r+0x73c>
 800f32e:	e530      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800f330:	2800      	cmp	r0, #0
 800f332:	d151      	bne.n	800f3d8 <__ssvfscanf_r+0x7e4>
 800f334:	6020      	str	r0, [r4, #0]
 800f336:	2301      	movs	r3, #1
 800f338:	6825      	ldr	r5, [r4, #0]
 800f33a:	425b      	negs	r3, r3
 800f33c:	1c6a      	adds	r2, r5, #1
 800f33e:	d01a      	beq.n	800f376 <__ssvfscanf_r+0x782>
 800f340:	2048      	movs	r0, #72	; 0x48
 800f342:	3311      	adds	r3, #17
 800f344:	181b      	adds	r3, r3, r0
 800f346:	2208      	movs	r2, #8
 800f348:	2100      	movs	r1, #0
 800f34a:	19d8      	adds	r0, r3, r7
 800f34c:	f7fd f818 	bl	800c380 <memset>
 800f350:	4b5f      	ldr	r3, [pc, #380]	; (800f4d0 <__ssvfscanf_r+0x8dc>)
 800f352:	2148      	movs	r1, #72	; 0x48
 800f354:	33e0      	adds	r3, #224	; 0xe0
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	2310      	movs	r3, #16
 800f35a:	4694      	mov	ip, r2
 800f35c:	185b      	adds	r3, r3, r1
 800f35e:	002a      	movs	r2, r5
 800f360:	19db      	adds	r3, r3, r7
 800f362:	4665      	mov	r5, ip
 800f364:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f366:	1879      	adds	r1, r7, r1
 800f368:	47a8      	blx	r5
 800f36a:	2300      	movs	r3, #0
 800f36c:	2801      	cmp	r0, #1
 800f36e:	d102      	bne.n	800f376 <__ssvfscanf_r+0x782>
 800f370:	3348      	adds	r3, #72	; 0x48
 800f372:	18fb      	adds	r3, r7, r3
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	2218      	movs	r2, #24
 800f378:	2148      	movs	r1, #72	; 0x48
 800f37a:	1852      	adds	r2, r2, r1
 800f37c:	19d2      	adds	r2, r2, r7
 800f37e:	5cd3      	ldrb	r3, [r2, r3]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d149      	bne.n	800f418 <__ssvfscanf_r+0x824>
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d137      	bne.n	800f3fa <__ssvfscanf_r+0x806>
 800f38a:	6a3b      	ldr	r3, [r7, #32]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d113      	bne.n	800f3b8 <__ssvfscanf_r+0x7c4>
 800f390:	6023      	str	r3, [r4, #0]
 800f392:	2e00      	cmp	r6, #0
 800f394:	d00d      	beq.n	800f3b2 <__ssvfscanf_r+0x7be>
 800f396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f398:	693a      	ldr	r2, [r7, #16]
 800f39a:	1ae4      	subs	r4, r4, r3
 800f39c:	10a3      	asrs	r3, r4, #2
 800f39e:	3301      	adds	r3, #1
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d906      	bls.n	800f3b2 <__ssvfscanf_r+0x7be>
 800f3a4:	6830      	ldr	r0, [r6, #0]
 800f3a6:	1d21      	adds	r1, r4, #4
 800f3a8:	f001 ff1e 	bl	80111e8 <realloc>
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d000      	beq.n	800f3b2 <__ssvfscanf_r+0x7be>
 800f3b0:	6030      	str	r0, [r6, #0]
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	e593      	b.n	800eee4 <__ssvfscanf_r+0x2f0>
 800f3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3be:	60fb      	str	r3, [r7, #12]
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	001e      	movs	r6, r3
 800f3c4:	613b      	str	r3, [r7, #16]
 800f3c6:	633b      	str	r3, [r7, #48]	; 0x30
 800f3c8:	334c      	adds	r3, #76	; 0x4c
 800f3ca:	18fc      	adds	r4, r7, r3
 800f3cc:	e778      	b.n	800f2c0 <__ssvfscanf_r+0x6cc>
 800f3ce:	6a3b      	ldr	r3, [r7, #32]
 800f3d0:	001e      	movs	r6, r3
 800f3d2:	613b      	str	r3, [r7, #16]
 800f3d4:	633b      	str	r3, [r7, #48]	; 0x30
 800f3d6:	e773      	b.n	800f2c0 <__ssvfscanf_r+0x6cc>
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	69fd      	ldr	r5, [r7, #28]
 800f3dc:	3302      	adds	r3, #2
 800f3de:	d1aa      	bne.n	800f336 <__ssvfscanf_r+0x742>
 800f3e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	dc47      	bgt.n	800f478 <__ssvfscanf_r+0x884>
 800f3e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3ec:	f002 fb96 	bl	8011b1c <__ssrefill_r>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d041      	beq.n	800f478 <__ssvfscanf_r+0x884>
 800f3f4:	2d00      	cmp	r5, #0
 800f3f6:	d0c8      	beq.n	800f38a <__ssvfscanf_r+0x796>
 800f3f8:	e4cb      	b.n	800ed92 <__ssvfscanf_r+0x19e>
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	2248      	movs	r2, #72	; 0x48
 800f3fe:	3b01      	subs	r3, #1
 800f400:	61fb      	str	r3, [r7, #28]
 800f402:	238c      	movs	r3, #140	; 0x8c
 800f404:	005b      	lsls	r3, r3, #1
 800f406:	189b      	adds	r3, r3, r2
 800f408:	69fa      	ldr	r2, [r7, #28]
 800f40a:	19db      	adds	r3, r3, r7
 800f40c:	5cd1      	ldrb	r1, [r2, r3]
 800f40e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f412:	f002 fb47 	bl	8011aa4 <_sungetc_r>
 800f416:	e7b5      	b.n	800f384 <__ssvfscanf_r+0x790>
 800f418:	69fa      	ldr	r2, [r7, #28]
 800f41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41c:	4694      	mov	ip, r2
 800f41e:	4463      	add	r3, ip
 800f420:	63bb      	str	r3, [r7, #56]	; 0x38
 800f422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f424:	2b03      	cmp	r3, #3
 800f426:	d102      	bne.n	800f42e <__ssvfscanf_r+0x83a>
 800f428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d002      	beq.n	800f434 <__ssvfscanf_r+0x840>
 800f42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f430:	3b01      	subs	r3, #1
 800f432:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f434:	6a3b      	ldr	r3, [r7, #32]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d11a      	bne.n	800f470 <__ssvfscanf_r+0x87c>
 800f43a:	3404      	adds	r4, #4
 800f43c:	2e00      	cmp	r6, #0
 800f43e:	d019      	beq.n	800f474 <__ssvfscanf_r+0x880>
 800f440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f442:	693a      	ldr	r2, [r7, #16]
 800f444:	1ae3      	subs	r3, r4, r3
 800f446:	61fb      	str	r3, [r7, #28]
 800f448:	6a3d      	ldr	r5, [r7, #32]
 800f44a:	109b      	asrs	r3, r3, #2
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d3c7      	bcc.n	800f3e0 <__ssvfscanf_r+0x7ec>
 800f450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f452:	00d1      	lsls	r1, r2, #3
 800f454:	f001 fec8 	bl	80111e8 <realloc>
 800f458:	6338      	str	r0, [r7, #48]	; 0x30
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d100      	bne.n	800f460 <__ssvfscanf_r+0x86c>
 800f45e:	e591      	b.n	800ef84 <__ssvfscanf_r+0x390>
 800f460:	4684      	mov	ip, r0
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	69fc      	ldr	r4, [r7, #28]
 800f466:	005b      	lsls	r3, r3, #1
 800f468:	4464      	add	r4, ip
 800f46a:	6030      	str	r0, [r6, #0]
 800f46c:	613b      	str	r3, [r7, #16]
 800f46e:	e7b7      	b.n	800f3e0 <__ssvfscanf_r+0x7ec>
 800f470:	2500      	movs	r5, #0
 800f472:	e7b5      	b.n	800f3e0 <__ssvfscanf_r+0x7ec>
 800f474:	0035      	movs	r5, r6
 800f476:	e7b3      	b.n	800f3e0 <__ssvfscanf_r+0x7ec>
 800f478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d000      	beq.n	800f480 <__ssvfscanf_r+0x88c>
 800f47e:	e720      	b.n	800f2c2 <__ssvfscanf_r+0x6ce>
 800f480:	e783      	b.n	800f38a <__ssvfscanf_r+0x796>
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d025      	beq.n	800f4d4 <__ssvfscanf_r+0x8e0>
 800f488:	2118      	movs	r1, #24
 800f48a:	2048      	movs	r0, #72	; 0x48
 800f48c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f48e:	1809      	adds	r1, r1, r0
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	19c9      	adds	r1, r1, r7
 800f494:	781a      	ldrb	r2, [r3, #0]
 800f496:	5c8a      	ldrb	r2, [r1, r2]
 800f498:	2a00      	cmp	r2, #0
 800f49a:	d103      	bne.n	800f4a4 <__ssvfscanf_r+0x8b0>
 800f49c:	2c00      	cmp	r4, #0
 800f49e:	d000      	beq.n	800f4a2 <__ssvfscanf_r+0x8ae>
 800f4a0:	e66c      	b.n	800f17c <__ssvfscanf_r+0x588>
 800f4a2:	e4a4      	b.n	800edee <__ssvfscanf_r+0x1fa>
 800f4a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4a8:	6852      	ldr	r2, [r2, #4]
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	600b      	str	r3, [r1, #0]
 800f4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b0:	3a01      	subs	r2, #1
 800f4b2:	3401      	adds	r4, #1
 800f4b4:	604a      	str	r2, [r1, #4]
 800f4b6:	429c      	cmp	r4, r3
 800f4b8:	d100      	bne.n	800f4bc <__ssvfscanf_r+0x8c8>
 800f4ba:	e65f      	b.n	800f17c <__ssvfscanf_r+0x588>
 800f4bc:	2a00      	cmp	r2, #0
 800f4be:	dce3      	bgt.n	800f488 <__ssvfscanf_r+0x894>
 800f4c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4c2:	f002 fb2b 	bl	8011b1c <__ssrefill_r>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d0de      	beq.n	800f488 <__ssvfscanf_r+0x894>
 800f4ca:	e657      	b.n	800f17c <__ssvfscanf_r+0x588>
 800f4cc:	0000fff6 	.word	0x0000fff6
 800f4d0:	2000044c 	.word	0x2000044c
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d6:	0032      	movs	r2, r6
 800f4d8:	cb20      	ldmia	r3!, {r5}
 800f4da:	61fb      	str	r3, [r7, #28]
 800f4dc:	2380      	movs	r3, #128	; 0x80
 800f4de:	401a      	ands	r2, r3
 800f4e0:	421e      	tst	r6, r3
 800f4e2:	d100      	bne.n	800f4e6 <__ssvfscanf_r+0x8f2>
 800f4e4:	e086      	b.n	800f5f4 <__ssvfscanf_r+0xa00>
 800f4e6:	2d00      	cmp	r5, #0
 800f4e8:	d100      	bne.n	800f4ec <__ssvfscanf_r+0x8f8>
 800f4ea:	e480      	b.n	800edee <__ssvfscanf_r+0x1fa>
 800f4ec:	2020      	movs	r0, #32
 800f4ee:	f7fb fcb3 	bl	800ae58 <malloc>
 800f4f2:	6338      	str	r0, [r7, #48]	; 0x30
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	d100      	bne.n	800f4fa <__ssvfscanf_r+0x906>
 800f4f8:	e452      	b.n	800eda0 <__ssvfscanf_r+0x1ac>
 800f4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4fc:	6028      	str	r0, [r5, #0]
 800f4fe:	88de      	ldrh	r6, [r3, #6]
 800f500:	889c      	ldrh	r4, [r3, #4]
 800f502:	6818      	ldr	r0, [r3, #0]
 800f504:	42a6      	cmp	r6, r4
 800f506:	d30e      	bcc.n	800f526 <__ssvfscanf_r+0x932>
 800f508:	4bc3      	ldr	r3, [pc, #780]	; (800f818 <__ssvfscanf_r+0xc24>)
 800f50a:	429c      	cmp	r4, r3
 800f50c:	d900      	bls.n	800f510 <__ssvfscanf_r+0x91c>
 800f50e:	e542      	b.n	800ef96 <__ssvfscanf_r+0x3a2>
 800f510:	3408      	adds	r4, #8
 800f512:	b2a4      	uxth	r4, r4
 800f514:	00a1      	lsls	r1, r4, #2
 800f516:	f001 fe67 	bl	80111e8 <realloc>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d100      	bne.n	800f520 <__ssvfscanf_r+0x92c>
 800f51e:	e53a      	b.n	800ef96 <__ssvfscanf_r+0x3a2>
 800f520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f522:	6018      	str	r0, [r3, #0]
 800f524:	809c      	strh	r4, [r3, #4]
 800f526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f528:	1c72      	adds	r2, r6, #1
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	00b6      	lsls	r6, r6, #2
 800f52e:	50f5      	str	r5, [r6, r3]
 800f530:	2320      	movs	r3, #32
 800f532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f534:	002e      	movs	r6, r5
 800f536:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f538:	80ca      	strh	r2, [r1, #6]
 800f53a:	623b      	str	r3, [r7, #32]
 800f53c:	002c      	movs	r4, r5
 800f53e:	2118      	movs	r1, #24
 800f540:	2048      	movs	r0, #72	; 0x48
 800f542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f544:	1809      	adds	r1, r1, r0
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	19c9      	adds	r1, r1, r7
 800f54a:	781a      	ldrb	r2, [r3, #0]
 800f54c:	5c8a      	ldrb	r2, [r1, r2]
 800f54e:	2a00      	cmp	r2, #0
 800f550:	d101      	bne.n	800f556 <__ssvfscanf_r+0x962>
 800f552:	633d      	str	r5, [r7, #48]	; 0x30
 800f554:	e031      	b.n	800f5ba <__ssvfscanf_r+0x9c6>
 800f556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f558:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f55a:	6852      	ldr	r2, [r2, #4]
 800f55c:	3a01      	subs	r2, #1
 800f55e:	604a      	str	r2, [r1, #4]
 800f560:	1c5a      	adds	r2, r3, #1
 800f562:	600a      	str	r2, [r1, #0]
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	1c6a      	adds	r2, r5, #1
 800f568:	633a      	str	r2, [r7, #48]	; 0x30
 800f56a:	702b      	strb	r3, [r5, #0]
 800f56c:	2e00      	cmp	r6, #0
 800f56e:	d010      	beq.n	800f592 <__ssvfscanf_r+0x99e>
 800f570:	6a3b      	ldr	r3, [r7, #32]
 800f572:	1b15      	subs	r5, r2, r4
 800f574:	429d      	cmp	r5, r3
 800f576:	d30c      	bcc.n	800f592 <__ssvfscanf_r+0x99e>
 800f578:	005b      	lsls	r3, r3, #1
 800f57a:	0020      	movs	r0, r4
 800f57c:	0019      	movs	r1, r3
 800f57e:	623b      	str	r3, [r7, #32]
 800f580:	f001 fe32 	bl	80111e8 <realloc>
 800f584:	1e04      	subs	r4, r0, #0
 800f586:	d101      	bne.n	800f58c <__ssvfscanf_r+0x998>
 800f588:	f7ff fc0a 	bl	800eda0 <__ssvfscanf_r+0x1ac>
 800f58c:	1943      	adds	r3, r0, r5
 800f58e:	633b      	str	r3, [r7, #48]	; 0x30
 800f590:	6030      	str	r0, [r6, #0]
 800f592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f594:	3b01      	subs	r3, #1
 800f596:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00e      	beq.n	800f5ba <__ssvfscanf_r+0x9c6>
 800f59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	dc2a      	bgt.n	800f5fa <__ssvfscanf_r+0xa06>
 800f5a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5a8:	f002 fab8 	bl	8011b1c <__ssrefill_r>
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	d024      	beq.n	800f5fa <__ssvfscanf_r+0xa06>
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b2:	42a3      	cmp	r3, r4
 800f5b4:	d101      	bne.n	800f5ba <__ssvfscanf_r+0x9c6>
 800f5b6:	f7ff fbec 	bl	800ed92 <__ssvfscanf_r+0x19e>
 800f5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5bc:	1b1d      	subs	r5, r3, r4
 800f5be:	42a3      	cmp	r3, r4
 800f5c0:	d101      	bne.n	800f5c6 <__ssvfscanf_r+0x9d2>
 800f5c2:	f7ff fc14 	bl	800edee <__ssvfscanf_r+0x1fa>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5ca:	7013      	strb	r3, [r2, #0]
 800f5cc:	429e      	cmp	r6, r3
 800f5ce:	d009      	beq.n	800f5e4 <__ssvfscanf_r+0x9f0>
 800f5d0:	6a3b      	ldr	r3, [r7, #32]
 800f5d2:	1c69      	adds	r1, r5, #1
 800f5d4:	428b      	cmp	r3, r1
 800f5d6:	d905      	bls.n	800f5e4 <__ssvfscanf_r+0x9f0>
 800f5d8:	6830      	ldr	r0, [r6, #0]
 800f5da:	f001 fe05 	bl	80111e8 <realloc>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d000      	beq.n	800f5e4 <__ssvfscanf_r+0x9f0>
 800f5e2:	6030      	str	r0, [r6, #0]
 800f5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ec:	195b      	adds	r3, r3, r5
 800f5ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	e477      	b.n	800eee4 <__ssvfscanf_r+0x2f0>
 800f5f4:	0016      	movs	r6, r2
 800f5f6:	623a      	str	r2, [r7, #32]
 800f5f8:	e7a0      	b.n	800f53c <__ssvfscanf_r+0x948>
 800f5fa:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f5fc:	e79f      	b.n	800f53e <__ssvfscanf_r+0x94a>
 800f5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f600:	2b00      	cmp	r3, #0
 800f602:	d101      	bne.n	800f608 <__ssvfscanf_r+0xa14>
 800f604:	3b01      	subs	r3, #1
 800f606:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f608:	2210      	movs	r2, #16
 800f60a:	2301      	movs	r3, #1
 800f60c:	0034      	movs	r4, r6
 800f60e:	4032      	ands	r2, r6
 800f610:	401c      	ands	r4, r3
 800f612:	61fa      	str	r2, [r7, #28]
 800f614:	421e      	tst	r6, r3
 800f616:	d100      	bne.n	800f61a <__ssvfscanf_r+0xa26>
 800f618:	e102      	b.n	800f820 <__ssvfscanf_r+0xc2c>
 800f61a:	2a00      	cmp	r2, #0
 800f61c:	d000      	beq.n	800f620 <__ssvfscanf_r+0xa2c>
 800f61e:	e09f      	b.n	800f760 <__ssvfscanf_r+0xb6c>
 800f620:	2080      	movs	r0, #128	; 0x80
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	cb10      	ldmia	r3!, {r4}
 800f626:	60fb      	str	r3, [r7, #12]
 800f628:	4206      	tst	r6, r0
 800f62a:	d100      	bne.n	800f62e <__ssvfscanf_r+0xa3a>
 800f62c:	e0a1      	b.n	800f772 <__ssvfscanf_r+0xb7e>
 800f62e:	2c00      	cmp	r4, #0
 800f630:	d100      	bne.n	800f634 <__ssvfscanf_r+0xa40>
 800f632:	e4aa      	b.n	800ef8a <__ssvfscanf_r+0x396>
 800f634:	f7fb fc10 	bl	800ae58 <malloc>
 800f638:	6338      	str	r0, [r7, #48]	; 0x30
 800f63a:	2800      	cmp	r0, #0
 800f63c:	d100      	bne.n	800f640 <__ssvfscanf_r+0xa4c>
 800f63e:	e4a1      	b.n	800ef84 <__ssvfscanf_r+0x390>
 800f640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f642:	6023      	str	r3, [r4, #0]
 800f644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f646:	88de      	ldrh	r6, [r3, #6]
 800f648:	889d      	ldrh	r5, [r3, #4]
 800f64a:	42ae      	cmp	r6, r5
 800f64c:	d310      	bcc.n	800f670 <__ssvfscanf_r+0xa7c>
 800f64e:	4b72      	ldr	r3, [pc, #456]	; (800f818 <__ssvfscanf_r+0xc24>)
 800f650:	429d      	cmp	r5, r3
 800f652:	d900      	bls.n	800f656 <__ssvfscanf_r+0xa62>
 800f654:	e496      	b.n	800ef84 <__ssvfscanf_r+0x390>
 800f656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f658:	3508      	adds	r5, #8
 800f65a:	b2ad      	uxth	r5, r5
 800f65c:	6818      	ldr	r0, [r3, #0]
 800f65e:	00a9      	lsls	r1, r5, #2
 800f660:	f001 fdc2 	bl	80111e8 <realloc>
 800f664:	2800      	cmp	r0, #0
 800f666:	d100      	bne.n	800f66a <__ssvfscanf_r+0xa76>
 800f668:	e48c      	b.n	800ef84 <__ssvfscanf_r+0x390>
 800f66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f66c:	6018      	str	r0, [r3, #0]
 800f66e:	809d      	strh	r5, [r3, #4]
 800f670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f672:	1c72      	adds	r2, r6, #1
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	00b6      	lsls	r6, r6, #2
 800f678:	50f4      	str	r4, [r6, r3]
 800f67a:	2320      	movs	r3, #32
 800f67c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f67e:	0025      	movs	r5, r4
 800f680:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f682:	80ca      	strh	r2, [r1, #6]
 800f684:	613b      	str	r3, [r7, #16]
 800f686:	2300      	movs	r3, #0
 800f688:	623b      	str	r3, [r7, #32]
 800f68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f68c:	4a63      	ldr	r2, [pc, #396]	; (800f81c <__ssvfscanf_r+0xc28>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	5cd3      	ldrb	r3, [r2, r3]
 800f694:	2208      	movs	r2, #8
 800f696:	4213      	tst	r3, r2
 800f698:	d149      	bne.n	800f72e <__ssvfscanf_r+0xb3a>
 800f69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d046      	beq.n	800f72e <__ssvfscanf_r+0xb3a>
 800f6a0:	f7fc feb2 	bl	800c408 <__locale_mb_cur_max>
 800f6a4:	6a3b      	ldr	r3, [r7, #32]
 800f6a6:	4298      	cmp	r0, r3
 800f6a8:	d101      	bne.n	800f6ae <__ssvfscanf_r+0xaba>
 800f6aa:	f7ff fb72 	bl	800ed92 <__ssvfscanf_r+0x19e>
 800f6ae:	6a3a      	ldr	r2, [r7, #32]
 800f6b0:	2048      	movs	r0, #72	; 0x48
 800f6b2:	1c56      	adds	r6, r2, #1
 800f6b4:	228c      	movs	r2, #140	; 0x8c
 800f6b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6b8:	0052      	lsls	r2, r2, #1
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	1812      	adds	r2, r2, r0
 800f6be:	7819      	ldrb	r1, [r3, #0]
 800f6c0:	6a38      	ldr	r0, [r7, #32]
 800f6c2:	19d2      	adds	r2, r2, r7
 800f6c4:	5411      	strb	r1, [r2, r0]
 800f6c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6ca:	6852      	ldr	r2, [r2, #4]
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	600b      	str	r3, [r1, #0]
 800f6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d2:	3a01      	subs	r2, #1
 800f6d4:	604a      	str	r2, [r1, #4]
 800f6d6:	2b03      	cmp	r3, #3
 800f6d8:	d102      	bne.n	800f6e0 <__ssvfscanf_r+0xaec>
 800f6da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6dc:	2b04      	cmp	r3, #4
 800f6de:	d007      	beq.n	800f6f0 <__ssvfscanf_r+0xafc>
 800f6e0:	2048      	movs	r0, #72	; 0x48
 800f6e2:	2310      	movs	r3, #16
 800f6e4:	181b      	adds	r3, r3, r0
 800f6e6:	2208      	movs	r2, #8
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	19d8      	adds	r0, r3, r7
 800f6ec:	f7fc fe48 	bl	800c380 <memset>
 800f6f0:	2148      	movs	r1, #72	; 0x48
 800f6f2:	2310      	movs	r3, #16
 800f6f4:	228c      	movs	r2, #140	; 0x8c
 800f6f6:	185b      	adds	r3, r3, r1
 800f6f8:	0052      	lsls	r2, r2, #1
 800f6fa:	19db      	adds	r3, r3, r7
 800f6fc:	1852      	adds	r2, r2, r1
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	0021      	movs	r1, r4
 800f702:	0033      	movs	r3, r6
 800f704:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f706:	19d2      	adds	r2, r2, r7
 800f708:	f002 f908 	bl	801191c <_mbrtowc_r>
 800f70c:	0003      	movs	r3, r0
 800f70e:	62b8      	str	r0, [r7, #40]	; 0x28
 800f710:	3301      	adds	r3, #1
 800f712:	d101      	bne.n	800f718 <__ssvfscanf_r+0xb24>
 800f714:	f7ff fb3d 	bl	800ed92 <__ssvfscanf_r+0x19e>
 800f718:	2800      	cmp	r0, #0
 800f71a:	d12f      	bne.n	800f77c <__ssvfscanf_r+0xb88>
 800f71c:	6020      	str	r0, [r4, #0]
 800f71e:	6820      	ldr	r0, [r4, #0]
 800f720:	f002 f91a 	bl	8011958 <iswspace>
 800f724:	6238      	str	r0, [r7, #32]
 800f726:	2800      	cmp	r0, #0
 800f728:	d04a      	beq.n	800f7c0 <__ssvfscanf_r+0xbcc>
 800f72a:	2e00      	cmp	r6, #0
 800f72c:	d13c      	bne.n	800f7a8 <__ssvfscanf_r+0xbb4>
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d000      	beq.n	800f736 <__ssvfscanf_r+0xb42>
 800f734:	e640      	b.n	800f3b8 <__ssvfscanf_r+0x7c4>
 800f736:	6023      	str	r3, [r4, #0]
 800f738:	2d00      	cmp	r5, #0
 800f73a:	d100      	bne.n	800f73e <__ssvfscanf_r+0xb4a>
 800f73c:	e639      	b.n	800f3b2 <__ssvfscanf_r+0x7be>
 800f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f740:	693a      	ldr	r2, [r7, #16]
 800f742:	1ae4      	subs	r4, r4, r3
 800f744:	10a3      	asrs	r3, r4, #2
 800f746:	3301      	adds	r3, #1
 800f748:	429a      	cmp	r2, r3
 800f74a:	d800      	bhi.n	800f74e <__ssvfscanf_r+0xb5a>
 800f74c:	e631      	b.n	800f3b2 <__ssvfscanf_r+0x7be>
 800f74e:	6828      	ldr	r0, [r5, #0]
 800f750:	1d21      	adds	r1, r4, #4
 800f752:	f001 fd49 	bl	80111e8 <realloc>
 800f756:	2800      	cmp	r0, #0
 800f758:	d100      	bne.n	800f75c <__ssvfscanf_r+0xb68>
 800f75a:	e62a      	b.n	800f3b2 <__ssvfscanf_r+0x7be>
 800f75c:	6028      	str	r0, [r5, #0]
 800f75e:	e628      	b.n	800f3b2 <__ssvfscanf_r+0x7be>
 800f760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f762:	60fb      	str	r3, [r7, #12]
 800f764:	2300      	movs	r3, #0
 800f766:	001d      	movs	r5, r3
 800f768:	613b      	str	r3, [r7, #16]
 800f76a:	633b      	str	r3, [r7, #48]	; 0x30
 800f76c:	334c      	adds	r3, #76	; 0x4c
 800f76e:	18fc      	adds	r4, r7, r3
 800f770:	e789      	b.n	800f686 <__ssvfscanf_r+0xa92>
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	001d      	movs	r5, r3
 800f776:	613b      	str	r3, [r7, #16]
 800f778:	633b      	str	r3, [r7, #48]	; 0x30
 800f77a:	e784      	b.n	800f686 <__ssvfscanf_r+0xa92>
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	623e      	str	r6, [r7, #32]
 800f780:	3302      	adds	r3, #2
 800f782:	d1cc      	bne.n	800f71e <__ssvfscanf_r+0xb2a>
 800f784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	dd00      	ble.n	800f78e <__ssvfscanf_r+0xb9a>
 800f78c:	e77d      	b.n	800f68a <__ssvfscanf_r+0xa96>
 800f78e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f790:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f792:	f002 f9c3 	bl	8011b1c <__ssrefill_r>
 800f796:	2800      	cmp	r0, #0
 800f798:	d100      	bne.n	800f79c <__ssvfscanf_r+0xba8>
 800f79a:	e776      	b.n	800f68a <__ssvfscanf_r+0xa96>
 800f79c:	6a3b      	ldr	r3, [r7, #32]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d001      	beq.n	800f7a6 <__ssvfscanf_r+0xbb2>
 800f7a2:	f7ff faf6 	bl	800ed92 <__ssvfscanf_r+0x19e>
 800f7a6:	e7c2      	b.n	800f72e <__ssvfscanf_r+0xb3a>
 800f7a8:	238c      	movs	r3, #140	; 0x8c
 800f7aa:	2248      	movs	r2, #72	; 0x48
 800f7ac:	005b      	lsls	r3, r3, #1
 800f7ae:	189b      	adds	r3, r3, r2
 800f7b0:	3e01      	subs	r6, #1
 800f7b2:	19db      	adds	r3, r3, r7
 800f7b4:	5cf1      	ldrb	r1, [r6, r3]
 800f7b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7ba:	f002 f973 	bl	8011aa4 <_sungetc_r>
 800f7be:	e7b4      	b.n	800f72a <__ssvfscanf_r+0xb36>
 800f7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c2:	199b      	adds	r3, r3, r6
 800f7c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c8:	2b03      	cmp	r3, #3
 800f7ca:	d102      	bne.n	800f7d2 <__ssvfscanf_r+0xbde>
 800f7cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7ce:	2b04      	cmp	r3, #4
 800f7d0:	d002      	beq.n	800f7d8 <__ssvfscanf_r+0xbe4>
 800f7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d1d2      	bne.n	800f784 <__ssvfscanf_r+0xb90>
 800f7de:	3404      	adds	r4, #4
 800f7e0:	2d00      	cmp	r5, #0
 800f7e2:	d016      	beq.n	800f812 <__ssvfscanf_r+0xc1e>
 800f7e4:	69fa      	ldr	r2, [r7, #28]
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e8:	623a      	str	r2, [r7, #32]
 800f7ea:	693a      	ldr	r2, [r7, #16]
 800f7ec:	1ae6      	subs	r6, r4, r3
 800f7ee:	10b3      	asrs	r3, r6, #2
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d3c7      	bcc.n	800f784 <__ssvfscanf_r+0xb90>
 800f7f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7f6:	00d1      	lsls	r1, r2, #3
 800f7f8:	f001 fcf6 	bl	80111e8 <realloc>
 800f7fc:	6338      	str	r0, [r7, #48]	; 0x30
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d101      	bne.n	800f806 <__ssvfscanf_r+0xc12>
 800f802:	f7ff fbbf 	bl	800ef84 <__ssvfscanf_r+0x390>
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	1984      	adds	r4, r0, r6
 800f80a:	005b      	lsls	r3, r3, #1
 800f80c:	6028      	str	r0, [r5, #0]
 800f80e:	613b      	str	r3, [r7, #16]
 800f810:	e7b8      	b.n	800f784 <__ssvfscanf_r+0xb90>
 800f812:	623d      	str	r5, [r7, #32]
 800f814:	e7b6      	b.n	800f784 <__ssvfscanf_r+0xb90>
 800f816:	46c0      	nop			; (mov r8, r8)
 800f818:	0000fff6 	.word	0x0000fff6
 800f81c:	08014871 	.word	0x08014871
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d01c      	beq.n	800f860 <__ssvfscanf_r+0xc6c>
 800f826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f828:	49bf      	ldr	r1, [pc, #764]	; (800fb28 <__ssvfscanf_r+0xf34>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	781a      	ldrb	r2, [r3, #0]
 800f82e:	5c8a      	ldrb	r2, [r1, r2]
 800f830:	2108      	movs	r1, #8
 800f832:	420a      	tst	r2, r1
 800f834:	d000      	beq.n	800f838 <__ssvfscanf_r+0xc44>
 800f836:	e4a1      	b.n	800f17c <__ssvfscanf_r+0x588>
 800f838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f83a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f83c:	6852      	ldr	r2, [r2, #4]
 800f83e:	3301      	adds	r3, #1
 800f840:	600b      	str	r3, [r1, #0]
 800f842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f844:	3a01      	subs	r2, #1
 800f846:	3401      	adds	r4, #1
 800f848:	604a      	str	r2, [r1, #4]
 800f84a:	429c      	cmp	r4, r3
 800f84c:	d100      	bne.n	800f850 <__ssvfscanf_r+0xc5c>
 800f84e:	e495      	b.n	800f17c <__ssvfscanf_r+0x588>
 800f850:	2a00      	cmp	r2, #0
 800f852:	dce8      	bgt.n	800f826 <__ssvfscanf_r+0xc32>
 800f854:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f856:	f002 f961 	bl	8011b1c <__ssrefill_r>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d0e3      	beq.n	800f826 <__ssvfscanf_r+0xc32>
 800f85e:	e48d      	b.n	800f17c <__ssvfscanf_r+0x588>
 800f860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f862:	0032      	movs	r2, r6
 800f864:	cb10      	ldmia	r3!, {r4}
 800f866:	61fb      	str	r3, [r7, #28]
 800f868:	2380      	movs	r3, #128	; 0x80
 800f86a:	401a      	ands	r2, r3
 800f86c:	421e      	tst	r6, r3
 800f86e:	d039      	beq.n	800f8e4 <__ssvfscanf_r+0xcf0>
 800f870:	2c00      	cmp	r4, #0
 800f872:	d101      	bne.n	800f878 <__ssvfscanf_r+0xc84>
 800f874:	f7ff fabb 	bl	800edee <__ssvfscanf_r+0x1fa>
 800f878:	2020      	movs	r0, #32
 800f87a:	f7fb faed 	bl	800ae58 <malloc>
 800f87e:	6338      	str	r0, [r7, #48]	; 0x30
 800f880:	2800      	cmp	r0, #0
 800f882:	d101      	bne.n	800f888 <__ssvfscanf_r+0xc94>
 800f884:	f7ff fa8c 	bl	800eda0 <__ssvfscanf_r+0x1ac>
 800f888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f88a:	6020      	str	r0, [r4, #0]
 800f88c:	88de      	ldrh	r6, [r3, #6]
 800f88e:	889d      	ldrh	r5, [r3, #4]
 800f890:	6818      	ldr	r0, [r3, #0]
 800f892:	42ae      	cmp	r6, r5
 800f894:	d310      	bcc.n	800f8b8 <__ssvfscanf_r+0xcc4>
 800f896:	4ba5      	ldr	r3, [pc, #660]	; (800fb2c <__ssvfscanf_r+0xf38>)
 800f898:	429d      	cmp	r5, r3
 800f89a:	d901      	bls.n	800f8a0 <__ssvfscanf_r+0xcac>
 800f89c:	f7ff fb7b 	bl	800ef96 <__ssvfscanf_r+0x3a2>
 800f8a0:	3508      	adds	r5, #8
 800f8a2:	b2ad      	uxth	r5, r5
 800f8a4:	00a9      	lsls	r1, r5, #2
 800f8a6:	f001 fc9f 	bl	80111e8 <realloc>
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	d101      	bne.n	800f8b2 <__ssvfscanf_r+0xcbe>
 800f8ae:	f7ff fb72 	bl	800ef96 <__ssvfscanf_r+0x3a2>
 800f8b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8b4:	6018      	str	r0, [r3, #0]
 800f8b6:	809d      	strh	r5, [r3, #4]
 800f8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ba:	1c72      	adds	r2, r6, #1
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	00b6      	lsls	r6, r6, #2
 800f8c0:	50f4      	str	r4, [r6, r3]
 800f8c2:	2320      	movs	r3, #32
 800f8c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8c6:	0026      	movs	r6, r4
 800f8c8:	80ca      	strh	r2, [r1, #6]
 800f8ca:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f8cc:	633b      	str	r3, [r7, #48]	; 0x30
 800f8ce:	0025      	movs	r5, r4
 800f8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8d2:	4995      	ldr	r1, [pc, #596]	; (800fb28 <__ssvfscanf_r+0xf34>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	781a      	ldrb	r2, [r3, #0]
 800f8d8:	5c8a      	ldrb	r2, [r1, r2]
 800f8da:	2108      	movs	r1, #8
 800f8dc:	420a      	tst	r2, r1
 800f8de:	d004      	beq.n	800f8ea <__ssvfscanf_r+0xcf6>
 800f8e0:	623c      	str	r4, [r7, #32]
 800f8e2:	e031      	b.n	800f948 <__ssvfscanf_r+0xd54>
 800f8e4:	0016      	movs	r6, r2
 800f8e6:	633a      	str	r2, [r7, #48]	; 0x30
 800f8e8:	e7f1      	b.n	800f8ce <__ssvfscanf_r+0xcda>
 800f8ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8ee:	6852      	ldr	r2, [r2, #4]
 800f8f0:	3a01      	subs	r2, #1
 800f8f2:	604a      	str	r2, [r1, #4]
 800f8f4:	1c5a      	adds	r2, r3, #1
 800f8f6:	600a      	str	r2, [r1, #0]
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	1c62      	adds	r2, r4, #1
 800f8fc:	623a      	str	r2, [r7, #32]
 800f8fe:	7023      	strb	r3, [r4, #0]
 800f900:	2e00      	cmp	r6, #0
 800f902:	d010      	beq.n	800f926 <__ssvfscanf_r+0xd32>
 800f904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f906:	1b54      	subs	r4, r2, r5
 800f908:	429c      	cmp	r4, r3
 800f90a:	d30c      	bcc.n	800f926 <__ssvfscanf_r+0xd32>
 800f90c:	005b      	lsls	r3, r3, #1
 800f90e:	0028      	movs	r0, r5
 800f910:	0019      	movs	r1, r3
 800f912:	633b      	str	r3, [r7, #48]	; 0x30
 800f914:	f001 fc68 	bl	80111e8 <realloc>
 800f918:	1e05      	subs	r5, r0, #0
 800f91a:	d101      	bne.n	800f920 <__ssvfscanf_r+0xd2c>
 800f91c:	f7ff fa40 	bl	800eda0 <__ssvfscanf_r+0x1ac>
 800f920:	1903      	adds	r3, r0, r4
 800f922:	623b      	str	r3, [r7, #32]
 800f924:	6030      	str	r0, [r6, #0]
 800f926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f928:	3b01      	subs	r3, #1
 800f92a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00b      	beq.n	800f948 <__ssvfscanf_r+0xd54>
 800f930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	2b00      	cmp	r3, #0
 800f936:	dd01      	ble.n	800f93c <__ssvfscanf_r+0xd48>
 800f938:	6a3c      	ldr	r4, [r7, #32]
 800f93a:	e7c9      	b.n	800f8d0 <__ssvfscanf_r+0xcdc>
 800f93c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f93e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f940:	f002 f8ec 	bl	8011b1c <__ssrefill_r>
 800f944:	2800      	cmp	r0, #0
 800f946:	d0f7      	beq.n	800f938 <__ssvfscanf_r+0xd44>
 800f948:	2300      	movs	r3, #0
 800f94a:	6a3a      	ldr	r2, [r7, #32]
 800f94c:	7013      	strb	r3, [r2, #0]
 800f94e:	1b55      	subs	r5, r2, r5
 800f950:	2e00      	cmp	r6, #0
 800f952:	d009      	beq.n	800f968 <__ssvfscanf_r+0xd74>
 800f954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f956:	1c69      	adds	r1, r5, #1
 800f958:	428b      	cmp	r3, r1
 800f95a:	d905      	bls.n	800f968 <__ssvfscanf_r+0xd74>
 800f95c:	6830      	ldr	r0, [r6, #0]
 800f95e:	f001 fc43 	bl	80111e8 <realloc>
 800f962:	2800      	cmp	r0, #0
 800f964:	d000      	beq.n	800f968 <__ssvfscanf_r+0xd74>
 800f966:	6030      	str	r0, [r6, #0]
 800f968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96a:	195b      	adds	r3, r3, r5
 800f96c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f970:	3301      	adds	r3, #1
 800f972:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f974:	e63c      	b.n	800f5f0 <__ssvfscanf_r+0x9fc>
 800f976:	22ae      	movs	r2, #174	; 0xae
 800f978:	2100      	movs	r1, #0
 800f97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f97c:	0052      	lsls	r2, r2, #1
 800f97e:	3b01      	subs	r3, #1
 800f980:	6239      	str	r1, [r7, #32]
 800f982:	4293      	cmp	r3, r2
 800f984:	d906      	bls.n	800f994 <__ssvfscanf_r+0xda0>
 800f986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f988:	3b5e      	subs	r3, #94	; 0x5e
 800f98a:	3bff      	subs	r3, #255	; 0xff
 800f98c:	623b      	str	r3, [r7, #32]
 800f98e:	235e      	movs	r3, #94	; 0x5e
 800f990:	33ff      	adds	r3, #255	; 0xff
 800f992:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f994:	24d8      	movs	r4, #216	; 0xd8
 800f996:	2300      	movs	r3, #0
 800f998:	2248      	movs	r2, #72	; 0x48
 800f99a:	0124      	lsls	r4, r4, #4
 800f99c:	4334      	orrs	r4, r6
 800f99e:	2680      	movs	r6, #128	; 0x80
 800f9a0:	61fb      	str	r3, [r7, #28]
 800f9a2:	3319      	adds	r3, #25
 800f9a4:	33ff      	adds	r3, #255	; 0xff
 800f9a6:	189b      	adds	r3, r3, r2
 800f9a8:	19dd      	adds	r5, r3, r7
 800f9aa:	00b6      	lsls	r6, r6, #2
 800f9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	7813      	ldrb	r3, [r2, #0]
 800f9b2:	2b39      	cmp	r3, #57	; 0x39
 800f9b4:	d80f      	bhi.n	800f9d6 <__ssvfscanf_r+0xde2>
 800f9b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f9b8:	d91b      	bls.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800f9ba:	0018      	movs	r0, r3
 800f9bc:	382b      	subs	r0, #43	; 0x2b
 800f9be:	280e      	cmp	r0, #14
 800f9c0:	d817      	bhi.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800f9c2:	f7f0 fba7 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f9c6:	168f      	.short	0x168f
 800f9c8:	5416168f 	.word	0x5416168f
 800f9cc:	80808080 	.word	0x80808080
 800f9d0:	87808080 	.word	0x87808080
 800f9d4:	87          	.byte	0x87
 800f9d5:	00          	.byte	0x00
 800f9d6:	2b66      	cmp	r3, #102	; 0x66
 800f9d8:	d83a      	bhi.n	800fa50 <__ssvfscanf_r+0xe5c>
 800f9da:	2b60      	cmp	r3, #96	; 0x60
 800f9dc:	d803      	bhi.n	800f9e6 <__ssvfscanf_r+0xdf2>
 800f9de:	2b46      	cmp	r3, #70	; 0x46
 800f9e0:	d805      	bhi.n	800f9ee <__ssvfscanf_r+0xdfa>
 800f9e2:	2b40      	cmp	r3, #64	; 0x40
 800f9e4:	d905      	bls.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800f9e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9e8:	290a      	cmp	r1, #10
 800f9ea:	dc71      	bgt.n	800fad0 <__ssvfscanf_r+0xedc>
 800f9ec:	e001      	b.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800f9ee:	2b58      	cmp	r3, #88	; 0x58
 800f9f0:	d030      	beq.n	800fa54 <__ssvfscanf_r+0xe60>
 800f9f2:	05e3      	lsls	r3, r4, #23
 800f9f4:	d515      	bpl.n	800fa22 <__ssvfscanf_r+0xe2e>
 800f9f6:	238c      	movs	r3, #140	; 0x8c
 800f9f8:	2248      	movs	r2, #72	; 0x48
 800f9fa:	005b      	lsls	r3, r3, #1
 800f9fc:	189b      	adds	r3, r3, r2
 800f9fe:	19db      	adds	r3, r3, r7
 800fa00:	429d      	cmp	r5, r3
 800fa02:	d905      	bls.n	800fa10 <__ssvfscanf_r+0xe1c>
 800fa04:	3d01      	subs	r5, #1
 800fa06:	7829      	ldrb	r1, [r5, #0]
 800fa08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa0c:	f002 f84a 	bl	8011aa4 <_sungetc_r>
 800fa10:	238c      	movs	r3, #140	; 0x8c
 800fa12:	2248      	movs	r2, #72	; 0x48
 800fa14:	005b      	lsls	r3, r3, #1
 800fa16:	189b      	adds	r3, r3, r2
 800fa18:	19db      	adds	r3, r3, r7
 800fa1a:	429d      	cmp	r5, r3
 800fa1c:	d101      	bne.n	800fa22 <__ssvfscanf_r+0xe2e>
 800fa1e:	f7ff f9e6 	bl	800edee <__ssvfscanf_r+0x1fa>
 800fa22:	2310      	movs	r3, #16
 800fa24:	0022      	movs	r2, r4
 800fa26:	401a      	ands	r2, r3
 800fa28:	421c      	tst	r4, r3
 800fa2a:	d171      	bne.n	800fb10 <__ssvfscanf_r+0xf1c>
 800fa2c:	218c      	movs	r1, #140	; 0x8c
 800fa2e:	2048      	movs	r0, #72	; 0x48
 800fa30:	0049      	lsls	r1, r1, #1
 800fa32:	1809      	adds	r1, r1, r0
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa36:	697e      	ldr	r6, [r7, #20]
 800fa38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa3a:	19c9      	adds	r1, r1, r7
 800fa3c:	702a      	strb	r2, [r5, #0]
 800fa3e:	47b0      	blx	r6
 800fa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa42:	1d1e      	adds	r6, r3, #4
 800fa44:	06a3      	lsls	r3, r4, #26
 800fa46:	d559      	bpl.n	800fafc <__ssvfscanf_r+0xf08>
 800fa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6018      	str	r0, [r3, #0]
 800fa4e:	e05b      	b.n	800fb08 <__ssvfscanf_r+0xf14>
 800fa50:	2b78      	cmp	r3, #120	; 0x78
 800fa52:	d1ce      	bne.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800fa54:	21c0      	movs	r1, #192	; 0xc0
 800fa56:	00c9      	lsls	r1, r1, #3
 800fa58:	4021      	ands	r1, r4
 800fa5a:	42b1      	cmp	r1, r6
 800fa5c:	d1c9      	bne.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800fa5e:	4934      	ldr	r1, [pc, #208]	; (800fb30 <__ssvfscanf_r+0xf3c>)
 800fa60:	4021      	ands	r1, r4
 800fa62:	24a0      	movs	r4, #160	; 0xa0
 800fa64:	00e4      	lsls	r4, r4, #3
 800fa66:	430c      	orrs	r4, r1
 800fa68:	2110      	movs	r1, #16
 800fa6a:	6279      	str	r1, [r7, #36]	; 0x24
 800fa6c:	e00b      	b.n	800fa86 <__ssvfscanf_r+0xe92>
 800fa6e:	0521      	lsls	r1, r4, #20
 800fa70:	d509      	bpl.n	800fa86 <__ssvfscanf_r+0xe92>
 800fa72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa74:	2900      	cmp	r1, #0
 800fa76:	d102      	bne.n	800fa7e <__ssvfscanf_r+0xe8a>
 800fa78:	3108      	adds	r1, #8
 800fa7a:	4334      	orrs	r4, r6
 800fa7c:	6279      	str	r1, [r7, #36]	; 0x24
 800fa7e:	0561      	lsls	r1, r4, #21
 800fa80:	d504      	bpl.n	800fa8c <__ssvfscanf_r+0xe98>
 800fa82:	492c      	ldr	r1, [pc, #176]	; (800fb34 <__ssvfscanf_r+0xf40>)
 800fa84:	400c      	ands	r4, r1
 800fa86:	702b      	strb	r3, [r5, #0]
 800fa88:	3501      	adds	r5, #1
 800fa8a:	e00c      	b.n	800faa6 <__ssvfscanf_r+0xeb2>
 800fa8c:	4b2a      	ldr	r3, [pc, #168]	; (800fb38 <__ssvfscanf_r+0xf44>)
 800fa8e:	401c      	ands	r4, r3
 800fa90:	6a3b      	ldr	r3, [r7, #32]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d004      	beq.n	800faa0 <__ssvfscanf_r+0xeac>
 800fa96:	3b01      	subs	r3, #1
 800fa98:	623b      	str	r3, [r7, #32]
 800fa9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	3301      	adds	r3, #1
 800faa4:	61fb      	str	r3, [r7, #28]
 800faa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	3b01      	subs	r3, #1
 800faae:	604b      	str	r3, [r1, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	dd1c      	ble.n	800faee <__ssvfscanf_r+0xefa>
 800fab4:	3201      	adds	r2, #1
 800fab6:	600a      	str	r2, [r1, #0]
 800fab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faba:	3b01      	subs	r3, #1
 800fabc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d000      	beq.n	800fac4 <__ssvfscanf_r+0xed0>
 800fac2:	e773      	b.n	800f9ac <__ssvfscanf_r+0xdb8>
 800fac4:	e795      	b.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800fac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fac8:	491c      	ldr	r1, [pc, #112]	; (800fb3c <__ssvfscanf_r+0xf48>)
 800faca:	0040      	lsls	r0, r0, #1
 800facc:	5e41      	ldrsh	r1, [r0, r1]
 800face:	6279      	str	r1, [r7, #36]	; 0x24
 800fad0:	491b      	ldr	r1, [pc, #108]	; (800fb40 <__ssvfscanf_r+0xf4c>)
 800fad2:	e7d7      	b.n	800fa84 <__ssvfscanf_r+0xe90>
 800fad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fad6:	4919      	ldr	r1, [pc, #100]	; (800fb3c <__ssvfscanf_r+0xf48>)
 800fad8:	0040      	lsls	r0, r0, #1
 800fada:	5e41      	ldrsh	r1, [r0, r1]
 800fadc:	6279      	str	r1, [r7, #36]	; 0x24
 800fade:	2908      	cmp	r1, #8
 800fae0:	dcf6      	bgt.n	800fad0 <__ssvfscanf_r+0xedc>
 800fae2:	e786      	b.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800fae4:	2180      	movs	r1, #128	; 0x80
 800fae6:	420c      	tst	r4, r1
 800fae8:	d083      	beq.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800faea:	438c      	bics	r4, r1
 800faec:	e7cb      	b.n	800fa86 <__ssvfscanf_r+0xe92>
 800faee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800faf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800faf2:	f002 f813 	bl	8011b1c <__ssrefill_r>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	d0de      	beq.n	800fab8 <__ssvfscanf_r+0xec4>
 800fafa:	e77a      	b.n	800f9f2 <__ssvfscanf_r+0xdfe>
 800fafc:	2308      	movs	r3, #8
 800fafe:	421c      	tst	r4, r3
 800fb00:	d020      	beq.n	800fb44 <__ssvfscanf_r+0xf50>
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	7018      	strb	r0, [r3, #0]
 800fb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0a:	633e      	str	r6, [r7, #48]	; 0x30
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb10:	238c      	movs	r3, #140	; 0x8c
 800fb12:	2248      	movs	r2, #72	; 0x48
 800fb14:	005b      	lsls	r3, r3, #1
 800fb16:	189b      	adds	r3, r3, r2
 800fb18:	19db      	adds	r3, r3, r7
 800fb1a:	1aed      	subs	r5, r5, r3
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	18ed      	adds	r5, r5, r3
 800fb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb22:	195b      	adds	r3, r3, r5
 800fb24:	f7ff f92d 	bl	800ed82 <__ssvfscanf_r+0x18e>
 800fb28:	08014871 	.word	0x08014871
 800fb2c:	0000fff6 	.word	0x0000fff6
 800fb30:	fffffdff 	.word	0xfffffdff
 800fb34:	fffffa7f 	.word	0xfffffa7f
 800fb38:	fffffc7f 	.word	0xfffffc7f
 800fb3c:	08014b9e 	.word	0x08014b9e
 800fb40:	fffff47f 	.word	0xfffff47f
 800fb44:	0763      	lsls	r3, r4, #29
 800fb46:	d503      	bpl.n	800fb50 <__ssvfscanf_r+0xf5c>
 800fb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	8018      	strh	r0, [r3, #0]
 800fb4e:	e7db      	b.n	800fb08 <__ssvfscanf_r+0xf14>
 800fb50:	2301      	movs	r3, #1
 800fb52:	0022      	movs	r2, r4
 800fb54:	401a      	ands	r2, r3
 800fb56:	421c      	tst	r4, r3
 800fb58:	d000      	beq.n	800fb5c <__ssvfscanf_r+0xf68>
 800fb5a:	e775      	b.n	800fa48 <__ssvfscanf_r+0xe54>
 800fb5c:	07a4      	lsls	r4, r4, #30
 800fb5e:	d400      	bmi.n	800fb62 <__ssvfscanf_r+0xf6e>
 800fb60:	e772      	b.n	800fa48 <__ssvfscanf_r+0xe54>
 800fb62:	4ba8      	ldr	r3, [pc, #672]	; (800fe04 <__ssvfscanf_r+0x1210>)
 800fb64:	6979      	ldr	r1, [r7, #20]
 800fb66:	4299      	cmp	r1, r3
 800fb68:	d10c      	bne.n	800fb84 <__ssvfscanf_r+0xf90>
 800fb6a:	218c      	movs	r1, #140	; 0x8c
 800fb6c:	2048      	movs	r0, #72	; 0x48
 800fb6e:	0049      	lsls	r1, r1, #1
 800fb70:	1809      	adds	r1, r1, r0
 800fb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb76:	19c9      	adds	r1, r1, r7
 800fb78:	f001 fecc 	bl	8011914 <_strtoull_r>
 800fb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	c303      	stmia	r3!, {r0, r1}
 800fb82:	e7c1      	b.n	800fb08 <__ssvfscanf_r+0xf14>
 800fb84:	218c      	movs	r1, #140	; 0x8c
 800fb86:	2048      	movs	r0, #72	; 0x48
 800fb88:	0049      	lsls	r1, r1, #1
 800fb8a:	1809      	adds	r1, r1, r0
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb90:	19c9      	adds	r1, r1, r7
 800fb92:	f001 fe0d 	bl	80117b0 <_strtoll_r>
 800fb96:	e7f1      	b.n	800fb7c <__ssvfscanf_r+0xf88>
 800fb98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb9a:	f000 fb9f 	bl	80102dc <_localeconv_r>
 800fb9e:	22ae      	movs	r2, #174	; 0xae
 800fba0:	2100      	movs	r1, #0
 800fba2:	6803      	ldr	r3, [r0, #0]
 800fba4:	0052      	lsls	r2, r2, #1
 800fba6:	603b      	str	r3, [r7, #0]
 800fba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbaa:	60f9      	str	r1, [r7, #12]
 800fbac:	3b01      	subs	r3, #1
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d906      	bls.n	800fbc0 <__ssvfscanf_r+0xfcc>
 800fbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb4:	3b5e      	subs	r3, #94	; 0x5e
 800fbb6:	3bff      	subs	r3, #255	; 0xff
 800fbb8:	60fb      	str	r3, [r7, #12]
 800fbba:	235e      	movs	r3, #94	; 0x5e
 800fbbc:	33ff      	adds	r3, #255	; 0xff
 800fbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbc0:	23f0      	movs	r3, #240	; 0xf0
 800fbc2:	00db      	lsls	r3, r3, #3
 800fbc4:	431e      	orrs	r6, r3
 800fbc6:	238c      	movs	r3, #140	; 0x8c
 800fbc8:	2248      	movs	r2, #72	; 0x48
 800fbca:	2400      	movs	r4, #0
 800fbcc:	005b      	lsls	r3, r3, #1
 800fbce:	189b      	adds	r3, r3, r2
 800fbd0:	623c      	str	r4, [r7, #32]
 800fbd2:	607c      	str	r4, [r7, #4]
 800fbd4:	60bc      	str	r4, [r7, #8]
 800fbd6:	61fc      	str	r4, [r7, #28]
 800fbd8:	613c      	str	r4, [r7, #16]
 800fbda:	19dd      	adds	r5, r3, r7
 800fbdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	781a      	ldrb	r2, [r3, #0]
 800fbe2:	0010      	movs	r0, r2
 800fbe4:	382b      	subs	r0, #43	; 0x2b
 800fbe6:	284e      	cmp	r0, #78	; 0x4e
 800fbe8:	d900      	bls.n	800fbec <__ssvfscanf_r+0xff8>
 800fbea:	e133      	b.n	800fe54 <__ssvfscanf_r+0x1260>
 800fbec:	f7f0 fa9c 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fbf0:	0132009b 	.word	0x0132009b
 800fbf4:	0132009b 	.word	0x0132009b
 800fbf8:	004f0132 	.word	0x004f0132
 800fbfc:	00720072 	.word	0x00720072
 800fc00:	00720072 	.word	0x00720072
 800fc04:	00720072 	.word	0x00720072
 800fc08:	00720072 	.word	0x00720072
 800fc0c:	01320072 	.word	0x01320072
 800fc10:	01320132 	.word	0x01320132
 800fc14:	01320132 	.word	0x01320132
 800fc18:	01320132 	.word	0x01320132
 800fc1c:	007b00bc 	.word	0x007b00bc
 800fc20:	007b007b 	.word	0x007b007b
 800fc24:	00f7012f 	.word	0x00f7012f
 800fc28:	01320132 	.word	0x01320132
 800fc2c:	013200e3 	.word	0x013200e3
 800fc30:	01320132 	.word	0x01320132
 800fc34:	00a00132 	.word	0x00a00132
 800fc38:	01120132 	.word	0x01120132
 800fc3c:	01320132 	.word	0x01320132
 800fc40:	01010132 	.word	0x01010132
 800fc44:	01320132 	.word	0x01320132
 800fc48:	00820132 	.word	0x00820132
 800fc4c:	01320105 	.word	0x01320105
 800fc50:	01320132 	.word	0x01320132
 800fc54:	01320132 	.word	0x01320132
 800fc58:	01320132 	.word	0x01320132
 800fc5c:	007b00bc 	.word	0x007b00bc
 800fc60:	007b007b 	.word	0x007b007b
 800fc64:	00f7012f 	.word	0x00f7012f
 800fc68:	01320132 	.word	0x01320132
 800fc6c:	013200e3 	.word	0x013200e3
 800fc70:	01320132 	.word	0x01320132
 800fc74:	00a00132 	.word	0x00a00132
 800fc78:	01120132 	.word	0x01120132
 800fc7c:	01320132 	.word	0x01320132
 800fc80:	01010132 	.word	0x01010132
 800fc84:	01320132 	.word	0x01320132
 800fc88:	00820132 	.word	0x00820132
 800fc8c:	0105      	.short	0x0105
 800fc8e:	05f1      	lsls	r1, r6, #23
 800fc90:	d520      	bpl.n	800fcd4 <__ssvfscanf_r+0x10e0>
 800fc92:	2280      	movs	r2, #128	; 0x80
 800fc94:	4396      	bics	r6, r2
 800fc96:	69fa      	ldr	r2, [r7, #28]
 800fc98:	3201      	adds	r2, #1
 800fc9a:	61fa      	str	r2, [r7, #28]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	2a00      	cmp	r2, #0
 800fca0:	d004      	beq.n	800fcac <__ssvfscanf_r+0x10b8>
 800fca2:	3a01      	subs	r2, #1
 800fca4:	60fa      	str	r2, [r7, #12]
 800fca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fca8:	3201      	adds	r2, #1
 800fcaa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fcac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fcb0:	3a01      	subs	r2, #1
 800fcb2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fcb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcb6:	3201      	adds	r2, #1
 800fcb8:	63ba      	str	r2, [r7, #56]	; 0x38
 800fcba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcbc:	6852      	ldr	r2, [r2, #4]
 800fcbe:	3a01      	subs	r2, #1
 800fcc0:	604a      	str	r2, [r1, #4]
 800fcc2:	2a00      	cmp	r2, #0
 800fcc4:	dc00      	bgt.n	800fcc8 <__ssvfscanf_r+0x10d4>
 800fcc6:	e0d6      	b.n	800fe76 <__ssvfscanf_r+0x1282>
 800fcc8:	3301      	adds	r3, #1
 800fcca:	600b      	str	r3, [r1, #0]
 800fccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d184      	bne.n	800fbdc <__ssvfscanf_r+0xfe8>
 800fcd2:	e057      	b.n	800fd84 <__ssvfscanf_r+0x1190>
 800fcd4:	6a39      	ldr	r1, [r7, #32]
 800fcd6:	1909      	adds	r1, r1, r4
 800fcd8:	2900      	cmp	r1, #0
 800fcda:	d153      	bne.n	800fd84 <__ssvfscanf_r+0x1190>
 800fcdc:	494a      	ldr	r1, [pc, #296]	; (800fe08 <__ssvfscanf_r+0x1214>)
 800fcde:	400e      	ands	r6, r1
 800fce0:	702a      	strb	r2, [r5, #0]
 800fce2:	3501      	adds	r5, #1
 800fce4:	e7e2      	b.n	800fcac <__ssvfscanf_r+0x10b8>
 800fce6:	0531      	lsls	r1, r6, #20
 800fce8:	d54c      	bpl.n	800fd84 <__ssvfscanf_r+0x1190>
 800fcea:	6a39      	ldr	r1, [r7, #32]
 800fcec:	1909      	adds	r1, r1, r4
 800fcee:	2900      	cmp	r1, #0
 800fcf0:	d040      	beq.n	800fd74 <__ssvfscanf_r+0x1180>
 800fcf2:	e047      	b.n	800fd84 <__ssvfscanf_r+0x1190>
 800fcf4:	2198      	movs	r1, #152	; 0x98
 800fcf6:	2080      	movs	r0, #128	; 0x80
 800fcf8:	0109      	lsls	r1, r1, #4
 800fcfa:	4031      	ands	r1, r6
 800fcfc:	0040      	lsls	r0, r0, #1
 800fcfe:	4281      	cmp	r1, r0
 800fd00:	d140      	bne.n	800fd84 <__ssvfscanf_r+0x1190>
 800fd02:	69f9      	ldr	r1, [r7, #28]
 800fd04:	2901      	cmp	r1, #1
 800fd06:	d13d      	bne.n	800fd84 <__ssvfscanf_r+0x1190>
 800fd08:	2080      	movs	r0, #128	; 0x80
 800fd0a:	4940      	ldr	r1, [pc, #256]	; (800fe0c <__ssvfscanf_r+0x1218>)
 800fd0c:	0100      	lsls	r0, r0, #4
 800fd0e:	400e      	ands	r6, r1
 800fd10:	3132      	adds	r1, #50	; 0x32
 800fd12:	31ff      	adds	r1, #255	; 0xff
 800fd14:	7029      	strb	r1, [r5, #0]
 800fd16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd18:	4306      	orrs	r6, r0
 800fd1a:	3901      	subs	r1, #1
 800fd1c:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fd1e:	3501      	adds	r5, #1
 800fd20:	2100      	movs	r1, #0
 800fd22:	61f9      	str	r1, [r7, #28]
 800fd24:	e7dc      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fd26:	2180      	movs	r1, #128	; 0x80
 800fd28:	420e      	tst	r6, r1
 800fd2a:	d02b      	beq.n	800fd84 <__ssvfscanf_r+0x1190>
 800fd2c:	438e      	bics	r6, r1
 800fd2e:	e7d7      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fd30:	6a39      	ldr	r1, [r7, #32]
 800fd32:	2900      	cmp	r1, #0
 800fd34:	d10d      	bne.n	800fd52 <__ssvfscanf_r+0x115e>
 800fd36:	69f9      	ldr	r1, [r7, #28]
 800fd38:	2900      	cmp	r1, #0
 800fd3a:	d10e      	bne.n	800fd5a <__ssvfscanf_r+0x1166>
 800fd3c:	21e0      	movs	r1, #224	; 0xe0
 800fd3e:	0030      	movs	r0, r6
 800fd40:	00c9      	lsls	r1, r1, #3
 800fd42:	4008      	ands	r0, r1
 800fd44:	4288      	cmp	r0, r1
 800fd46:	d108      	bne.n	800fd5a <__ssvfscanf_r+0x1166>
 800fd48:	4931      	ldr	r1, [pc, #196]	; (800fe10 <__ssvfscanf_r+0x121c>)
 800fd4a:	400e      	ands	r6, r1
 800fd4c:	2101      	movs	r1, #1
 800fd4e:	6239      	str	r1, [r7, #32]
 800fd50:	e7c6      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fd52:	6a39      	ldr	r1, [r7, #32]
 800fd54:	2902      	cmp	r1, #2
 800fd56:	d100      	bne.n	800fd5a <__ssvfscanf_r+0x1166>
 800fd58:	e089      	b.n	800fe6e <__ssvfscanf_r+0x127a>
 800fd5a:	2c01      	cmp	r4, #1
 800fd5c:	d001      	beq.n	800fd62 <__ssvfscanf_r+0x116e>
 800fd5e:	2c04      	cmp	r4, #4
 800fd60:	d110      	bne.n	800fd84 <__ssvfscanf_r+0x1190>
 800fd62:	3401      	adds	r4, #1
 800fd64:	b2e4      	uxtb	r4, r4
 800fd66:	e7bb      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fd68:	0531      	lsls	r1, r6, #20
 800fd6a:	d508      	bpl.n	800fd7e <__ssvfscanf_r+0x118a>
 800fd6c:	6a39      	ldr	r1, [r7, #32]
 800fd6e:	1909      	adds	r1, r1, r4
 800fd70:	2900      	cmp	r1, #0
 800fd72:	d104      	bne.n	800fd7e <__ssvfscanf_r+0x118a>
 800fd74:	4824      	ldr	r0, [pc, #144]	; (800fe08 <__ssvfscanf_r+0x1214>)
 800fd76:	000c      	movs	r4, r1
 800fd78:	4006      	ands	r6, r0
 800fd7a:	6239      	str	r1, [r7, #32]
 800fd7c:	e7b0      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fd7e:	6a39      	ldr	r1, [r7, #32]
 800fd80:	2901      	cmp	r1, #1
 800fd82:	d076      	beq.n	800fe72 <__ssvfscanf_r+0x127e>
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <__ssvfscanf_r+0x119a>
 800fd8a:	4b20      	ldr	r3, [pc, #128]	; (800fe0c <__ssvfscanf_r+0x1218>)
 800fd8c:	401e      	ands	r6, r3
 800fd8e:	6a3b      	ldr	r3, [r7, #32]
 800fd90:	3b01      	subs	r3, #1
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d877      	bhi.n	800fe86 <__ssvfscanf_r+0x1292>
 800fd96:	238c      	movs	r3, #140	; 0x8c
 800fd98:	2248      	movs	r2, #72	; 0x48
 800fd9a:	005b      	lsls	r3, r3, #1
 800fd9c:	189b      	adds	r3, r3, r2
 800fd9e:	19db      	adds	r3, r3, r7
 800fda0:	429d      	cmp	r5, r3
 800fda2:	d801      	bhi.n	800fda8 <__ssvfscanf_r+0x11b4>
 800fda4:	f7ff f823 	bl	800edee <__ssvfscanf_r+0x1fa>
 800fda8:	3d01      	subs	r5, #1
 800fdaa:	7829      	ldrb	r1, [r5, #0]
 800fdac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fdb0:	f001 fe78 	bl	8011aa4 <_sungetc_r>
 800fdb4:	e7ef      	b.n	800fd96 <__ssvfscanf_r+0x11a2>
 800fdb6:	2c00      	cmp	r4, #0
 800fdb8:	d10c      	bne.n	800fdd4 <__ssvfscanf_r+0x11e0>
 800fdba:	69f9      	ldr	r1, [r7, #28]
 800fdbc:	2900      	cmp	r1, #0
 800fdbe:	d1e4      	bne.n	800fd8a <__ssvfscanf_r+0x1196>
 800fdc0:	21e0      	movs	r1, #224	; 0xe0
 800fdc2:	0030      	movs	r0, r6
 800fdc4:	00c9      	lsls	r1, r1, #3
 800fdc6:	4008      	ands	r0, r1
 800fdc8:	4288      	cmp	r0, r1
 800fdca:	d1e0      	bne.n	800fd8e <__ssvfscanf_r+0x119a>
 800fdcc:	4910      	ldr	r1, [pc, #64]	; (800fe10 <__ssvfscanf_r+0x121c>)
 800fdce:	3401      	adds	r4, #1
 800fdd0:	400e      	ands	r6, r1
 800fdd2:	e785      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fdd4:	20fd      	movs	r0, #253	; 0xfd
 800fdd6:	1ee1      	subs	r1, r4, #3
 800fdd8:	4201      	tst	r1, r0
 800fdda:	d1d3      	bne.n	800fd84 <__ssvfscanf_r+0x1190>
 800fddc:	e7c1      	b.n	800fd62 <__ssvfscanf_r+0x116e>
 800fdde:	0531      	lsls	r1, r6, #20
 800fde0:	d503      	bpl.n	800fdea <__ssvfscanf_r+0x11f6>
 800fde2:	6a39      	ldr	r1, [r7, #32]
 800fde4:	1909      	adds	r1, r1, r4
 800fde6:	2900      	cmp	r1, #0
 800fde8:	d0c4      	beq.n	800fd74 <__ssvfscanf_r+0x1180>
 800fdea:	2c02      	cmp	r4, #2
 800fdec:	d1ca      	bne.n	800fd84 <__ssvfscanf_r+0x1190>
 800fdee:	2403      	movs	r4, #3
 800fdf0:	e776      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fdf2:	2c06      	cmp	r4, #6
 800fdf4:	d1c6      	bne.n	800fd84 <__ssvfscanf_r+0x1190>
 800fdf6:	2407      	movs	r4, #7
 800fdf8:	e772      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fdfa:	2c07      	cmp	r4, #7
 800fdfc:	d1c2      	bne.n	800fd84 <__ssvfscanf_r+0x1190>
 800fdfe:	2408      	movs	r4, #8
 800fe00:	e76e      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fe02:	46c0      	nop			; (mov r8, r8)
 800fe04:	0801164d 	.word	0x0801164d
 800fe08:	fffffe7f 	.word	0xfffffe7f
 800fe0c:	fffffeff 	.word	0xfffffeff
 800fe10:	fffff87f 	.word	0xfffff87f
 800fe14:	0531      	lsls	r1, r6, #20
 800fe16:	d5b5      	bpl.n	800fd84 <__ssvfscanf_r+0x1190>
 800fe18:	21a0      	movs	r1, #160	; 0xa0
 800fe1a:	2080      	movs	r0, #128	; 0x80
 800fe1c:	00c9      	lsls	r1, r1, #3
 800fe1e:	00c0      	lsls	r0, r0, #3
 800fe20:	4031      	ands	r1, r6
 800fe22:	4281      	cmp	r1, r0
 800fe24:	d004      	beq.n	800fe30 <__ssvfscanf_r+0x123c>
 800fe26:	4206      	tst	r6, r0
 800fe28:	d0ac      	beq.n	800fd84 <__ssvfscanf_r+0x1190>
 800fe2a:	69f9      	ldr	r1, [r7, #28]
 800fe2c:	2900      	cmp	r1, #0
 800fe2e:	d0ae      	beq.n	800fd8e <__ssvfscanf_r+0x119a>
 800fe30:	2180      	movs	r1, #128	; 0x80
 800fe32:	0089      	lsls	r1, r1, #2
 800fe34:	420e      	tst	r6, r1
 800fe36:	d104      	bne.n	800fe42 <__ssvfscanf_r+0x124e>
 800fe38:	69f9      	ldr	r1, [r7, #28]
 800fe3a:	6938      	ldr	r0, [r7, #16]
 800fe3c:	607d      	str	r5, [r7, #4]
 800fe3e:	1a09      	subs	r1, r1, r0
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	20c0      	movs	r0, #192	; 0xc0
 800fe44:	4973      	ldr	r1, [pc, #460]	; (8010014 <__ssvfscanf_r+0x1420>)
 800fe46:	0040      	lsls	r0, r0, #1
 800fe48:	400e      	ands	r6, r1
 800fe4a:	4306      	orrs	r6, r0
 800fe4c:	e768      	b.n	800fd20 <__ssvfscanf_r+0x112c>
 800fe4e:	0531      	lsls	r1, r6, #20
 800fe50:	d5e2      	bpl.n	800fe18 <__ssvfscanf_r+0x1224>
 800fe52:	e74a      	b.n	800fcea <__ssvfscanf_r+0x10f6>
 800fe54:	6839      	ldr	r1, [r7, #0]
 800fe56:	7809      	ldrb	r1, [r1, #0]
 800fe58:	4291      	cmp	r1, r2
 800fe5a:	d193      	bne.n	800fd84 <__ssvfscanf_r+0x1190>
 800fe5c:	2180      	movs	r1, #128	; 0x80
 800fe5e:	0089      	lsls	r1, r1, #2
 800fe60:	420e      	tst	r6, r1
 800fe62:	d08f      	beq.n	800fd84 <__ssvfscanf_r+0x1190>
 800fe64:	496c      	ldr	r1, [pc, #432]	; (8010018 <__ssvfscanf_r+0x1424>)
 800fe66:	400e      	ands	r6, r1
 800fe68:	69f9      	ldr	r1, [r7, #28]
 800fe6a:	6139      	str	r1, [r7, #16]
 800fe6c:	e738      	b.n	800fce0 <__ssvfscanf_r+0x10ec>
 800fe6e:	2103      	movs	r1, #3
 800fe70:	e76d      	b.n	800fd4e <__ssvfscanf_r+0x115a>
 800fe72:	2102      	movs	r1, #2
 800fe74:	e76b      	b.n	800fd4e <__ssvfscanf_r+0x115a>
 800fe76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe7a:	f001 fe4f 	bl	8011b1c <__ssrefill_r>
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	d100      	bne.n	800fe84 <__ssvfscanf_r+0x1290>
 800fe82:	e723      	b.n	800fccc <__ssvfscanf_r+0x10d8>
 800fe84:	e77e      	b.n	800fd84 <__ssvfscanf_r+0x1190>
 800fe86:	1e63      	subs	r3, r4, #1
 800fe88:	2b06      	cmp	r3, #6
 800fe8a:	d825      	bhi.n	800fed8 <__ssvfscanf_r+0x12e4>
 800fe8c:	2c02      	cmp	r4, #2
 800fe8e:	d837      	bhi.n	800ff00 <__ssvfscanf_r+0x130c>
 800fe90:	238c      	movs	r3, #140	; 0x8c
 800fe92:	2248      	movs	r2, #72	; 0x48
 800fe94:	005b      	lsls	r3, r3, #1
 800fe96:	189b      	adds	r3, r3, r2
 800fe98:	19db      	adds	r3, r3, r7
 800fe9a:	429d      	cmp	r5, r3
 800fe9c:	d801      	bhi.n	800fea2 <__ssvfscanf_r+0x12ae>
 800fe9e:	f7fe ffa6 	bl	800edee <__ssvfscanf_r+0x1fa>
 800fea2:	3d01      	subs	r5, #1
 800fea4:	7829      	ldrb	r1, [r5, #0]
 800fea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fea8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800feaa:	f001 fdfb 	bl	8011aa4 <_sungetc_r>
 800feae:	e7ef      	b.n	800fe90 <__ssvfscanf_r+0x129c>
 800feb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800feb4:	3b01      	subs	r3, #1
 800feb6:	7819      	ldrb	r1, [r3, #0]
 800feb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800feba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800febc:	f001 fdf2 	bl	8011aa4 <_sungetc_r>
 800fec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fec2:	6a3a      	ldr	r2, [r7, #32]
 800fec4:	189b      	adds	r3, r3, r2
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	2b03      	cmp	r3, #3
 800feca:	d8f1      	bhi.n	800feb0 <__ssvfscanf_r+0x12bc>
 800fecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fece:	3c03      	subs	r4, #3
 800fed0:	b2e4      	uxtb	r4, r4
 800fed2:	1b1b      	subs	r3, r3, r4
 800fed4:	1b2d      	subs	r5, r5, r4
 800fed6:	63bb      	str	r3, [r7, #56]	; 0x38
 800fed8:	05f3      	lsls	r3, r6, #23
 800feda:	d52f      	bpl.n	800ff3c <__ssvfscanf_r+0x1348>
 800fedc:	0573      	lsls	r3, r6, #21
 800fede:	d514      	bpl.n	800ff0a <__ssvfscanf_r+0x1316>
 800fee0:	238c      	movs	r3, #140	; 0x8c
 800fee2:	2248      	movs	r2, #72	; 0x48
 800fee4:	005b      	lsls	r3, r3, #1
 800fee6:	189b      	adds	r3, r3, r2
 800fee8:	19db      	adds	r3, r3, r7
 800feea:	429d      	cmp	r5, r3
 800feec:	d801      	bhi.n	800fef2 <__ssvfscanf_r+0x12fe>
 800feee:	f7fe ff7e 	bl	800edee <__ssvfscanf_r+0x1fa>
 800fef2:	3d01      	subs	r5, #1
 800fef4:	7829      	ldrb	r1, [r5, #0]
 800fef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fef8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fefa:	f001 fdd3 	bl	8011aa4 <_sungetc_r>
 800fefe:	e7ef      	b.n	800fee0 <__ssvfscanf_r+0x12ec>
 800ff00:	1b63      	subs	r3, r4, r5
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	63fd      	str	r5, [r7, #60]	; 0x3c
 800ff06:	623b      	str	r3, [r7, #32]
 800ff08:	e7da      	b.n	800fec0 <__ssvfscanf_r+0x12cc>
 800ff0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0c:	1e6c      	subs	r4, r5, #1
 800ff0e:	7821      	ldrb	r1, [r4, #0]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff14:	2965      	cmp	r1, #101	; 0x65
 800ff16:	d00a      	beq.n	800ff2e <__ssvfscanf_r+0x133a>
 800ff18:	2945      	cmp	r1, #69	; 0x45
 800ff1a:	d008      	beq.n	800ff2e <__ssvfscanf_r+0x133a>
 800ff1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff20:	f001 fdc0 	bl	8011aa4 <_sungetc_r>
 800ff24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff26:	1eac      	subs	r4, r5, #2
 800ff28:	3b02      	subs	r3, #2
 800ff2a:	7821      	ldrb	r1, [r4, #0]
 800ff2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff2e:	0025      	movs	r5, r4
 800ff30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff34:	f001 fdb6 	bl	8011aa4 <_sungetc_r>
 800ff38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff3c:	2310      	movs	r3, #16
 800ff3e:	0032      	movs	r2, r6
 800ff40:	401a      	ands	r2, r3
 800ff42:	421e      	tst	r6, r3
 800ff44:	d001      	beq.n	800ff4a <__ssvfscanf_r+0x1356>
 800ff46:	f7fe fe71 	bl	800ec2c <__ssvfscanf_r+0x38>
 800ff4a:	23c0      	movs	r3, #192	; 0xc0
 800ff4c:	2180      	movs	r1, #128	; 0x80
 800ff4e:	00db      	lsls	r3, r3, #3
 800ff50:	702a      	strb	r2, [r5, #0]
 800ff52:	4033      	ands	r3, r6
 800ff54:	00c9      	lsls	r1, r1, #3
 800ff56:	428b      	cmp	r3, r1
 800ff58:	d11f      	bne.n	800ff9a <__ssvfscanf_r+0x13a6>
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	69fa      	ldr	r2, [r7, #28]
 800ff5e:	69f9      	ldr	r1, [r7, #28]
 800ff60:	1a9a      	subs	r2, r3, r2
 800ff62:	428b      	cmp	r3, r1
 800ff64:	d125      	bne.n	800ffb2 <__ssvfscanf_r+0x13be>
 800ff66:	238c      	movs	r3, #140	; 0x8c
 800ff68:	2148      	movs	r1, #72	; 0x48
 800ff6a:	005b      	lsls	r3, r3, #1
 800ff6c:	185b      	adds	r3, r3, r1
 800ff6e:	19d9      	adds	r1, r3, r7
 800ff70:	2200      	movs	r2, #0
 800ff72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff74:	f7fb ffca 	bl	800bf0c <_strtod_r>
 800ff78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7a:	0004      	movs	r4, r0
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	000d      	movs	r5, r1
 800ff80:	623b      	str	r3, [r7, #32]
 800ff82:	07f3      	lsls	r3, r6, #31
 800ff84:	d523      	bpl.n	800ffce <__ssvfscanf_r+0x13da>
 800ff86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	601c      	str	r4, [r3, #0]
 800ff8c:	605d      	str	r5, [r3, #4]
 800ff8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff90:	3301      	adds	r3, #1
 800ff92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff94:	6a3b      	ldr	r3, [r7, #32]
 800ff96:	f7fe ffa5 	bl	800eee4 <__ssvfscanf_r+0x2f0>
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d0e2      	beq.n	800ff66 <__ssvfscanf_r+0x1372>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffa4:	1c59      	adds	r1, r3, #1
 800ffa6:	230a      	movs	r3, #10
 800ffa8:	f7fc f84c 	bl	800c044 <_strtol_r>
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	687d      	ldr	r5, [r7, #4]
 800ffb0:	1ac2      	subs	r2, r0, r3
 800ffb2:	2148      	movs	r1, #72	; 0x48
 800ffb4:	4b19      	ldr	r3, [pc, #100]	; (801001c <__ssvfscanf_r+0x1428>)
 800ffb6:	185b      	adds	r3, r3, r1
 800ffb8:	19db      	adds	r3, r3, r7
 800ffba:	429d      	cmp	r5, r3
 800ffbc:	d302      	bcc.n	800ffc4 <__ssvfscanf_r+0x13d0>
 800ffbe:	4b18      	ldr	r3, [pc, #96]	; (8010020 <__ssvfscanf_r+0x142c>)
 800ffc0:	185b      	adds	r3, r3, r1
 800ffc2:	19dd      	adds	r5, r3, r7
 800ffc4:	0028      	movs	r0, r5
 800ffc6:	4917      	ldr	r1, [pc, #92]	; (8010024 <__ssvfscanf_r+0x1430>)
 800ffc8:	f7fc f944 	bl	800c254 <sprintf>
 800ffcc:	e7cb      	b.n	800ff66 <__ssvfscanf_r+0x1372>
 800ffce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffd4:	07b6      	lsls	r6, r6, #30
 800ffd6:	d4d8      	bmi.n	800ff8a <__ssvfscanf_r+0x1396>
 800ffd8:	0002      	movs	r2, r0
 800ffda:	000b      	movs	r3, r1
 800ffdc:	f7f2 f98a 	bl	80022f4 <__aeabi_dcmpun>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	d005      	beq.n	800fff0 <__ssvfscanf_r+0x13fc>
 800ffe4:	4810      	ldr	r0, [pc, #64]	; (8010028 <__ssvfscanf_r+0x1434>)
 800ffe6:	f7fc fabf 	bl	800c568 <nanf>
 800ffea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffec:	6018      	str	r0, [r3, #0]
 800ffee:	e7ce      	b.n	800ff8e <__ssvfscanf_r+0x139a>
 800fff0:	0020      	movs	r0, r4
 800fff2:	0029      	movs	r1, r5
 800fff4:	f7f2 fa28 	bl	8002448 <__aeabi_d2f>
 800fff8:	e7f7      	b.n	800ffea <__ssvfscanf_r+0x13f6>
 800fffa:	00a3      	lsls	r3, r4, #2
 800fffc:	18ed      	adds	r5, r5, r3
 800fffe:	682b      	ldr	r3, [r5, #0]
 8010000:	3401      	adds	r4, #1
 8010002:	6818      	ldr	r0, [r3, #0]
 8010004:	f7fa ff32 	bl	800ae6c <free>
 8010008:	2200      	movs	r2, #0
 801000a:	682b      	ldr	r3, [r5, #0]
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	f7fe ffc3 	bl	800ef98 <__ssvfscanf_r+0x3a4>
 8010012:	46c0      	nop			; (mov r8, r8)
 8010014:	fffff07f 	.word	0xfffff07f
 8010018:	fffffd7f 	.word	0xfffffd7f
 801001c:	0000026b 	.word	0x0000026b
 8010020:	0000026a 	.word	0x0000026a
 8010024:	08014b98 	.word	0x08014b98
 8010028:	08014bfb 	.word	0x08014bfb

0801002c <_fclose_r>:
 801002c:	b570      	push	{r4, r5, r6, lr}
 801002e:	0005      	movs	r5, r0
 8010030:	1e0c      	subs	r4, r1, #0
 8010032:	d102      	bne.n	801003a <_fclose_r+0xe>
 8010034:	2600      	movs	r6, #0
 8010036:	0030      	movs	r0, r6
 8010038:	bd70      	pop	{r4, r5, r6, pc}
 801003a:	2800      	cmp	r0, #0
 801003c:	d004      	beq.n	8010048 <_fclose_r+0x1c>
 801003e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <_fclose_r+0x1c>
 8010044:	f7fc f89e 	bl	800c184 <__sinit>
 8010048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801004a:	07db      	lsls	r3, r3, #31
 801004c:	d405      	bmi.n	801005a <_fclose_r+0x2e>
 801004e:	89a3      	ldrh	r3, [r4, #12]
 8010050:	059b      	lsls	r3, r3, #22
 8010052:	d402      	bmi.n	801005a <_fclose_r+0x2e>
 8010054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010056:	f7fc fa6b 	bl	800c530 <__retarget_lock_acquire_recursive>
 801005a:	220c      	movs	r2, #12
 801005c:	5ea3      	ldrsh	r3, [r4, r2]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d109      	bne.n	8010076 <_fclose_r+0x4a>
 8010062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010064:	3301      	adds	r3, #1
 8010066:	0016      	movs	r6, r2
 8010068:	401e      	ands	r6, r3
 801006a:	421a      	tst	r2, r3
 801006c:	d1e2      	bne.n	8010034 <_fclose_r+0x8>
 801006e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010070:	f7fc fa5f 	bl	800c532 <__retarget_lock_release_recursive>
 8010074:	e7df      	b.n	8010036 <_fclose_r+0xa>
 8010076:	0021      	movs	r1, r4
 8010078:	0028      	movs	r0, r5
 801007a:	f000 f837 	bl	80100ec <__sflush_r>
 801007e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010080:	0006      	movs	r6, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d006      	beq.n	8010094 <_fclose_r+0x68>
 8010086:	0028      	movs	r0, r5
 8010088:	69e1      	ldr	r1, [r4, #28]
 801008a:	4798      	blx	r3
 801008c:	2800      	cmp	r0, #0
 801008e:	da01      	bge.n	8010094 <_fclose_r+0x68>
 8010090:	2601      	movs	r6, #1
 8010092:	4276      	negs	r6, r6
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	061b      	lsls	r3, r3, #24
 8010098:	d503      	bpl.n	80100a2 <_fclose_r+0x76>
 801009a:	0028      	movs	r0, r5
 801009c:	6921      	ldr	r1, [r4, #16]
 801009e:	f7fc facf 	bl	800c640 <_free_r>
 80100a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80100a4:	2900      	cmp	r1, #0
 80100a6:	d008      	beq.n	80100ba <_fclose_r+0x8e>
 80100a8:	0023      	movs	r3, r4
 80100aa:	3340      	adds	r3, #64	; 0x40
 80100ac:	4299      	cmp	r1, r3
 80100ae:	d002      	beq.n	80100b6 <_fclose_r+0x8a>
 80100b0:	0028      	movs	r0, r5
 80100b2:	f7fc fac5 	bl	800c640 <_free_r>
 80100b6:	2300      	movs	r3, #0
 80100b8:	6323      	str	r3, [r4, #48]	; 0x30
 80100ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80100bc:	2900      	cmp	r1, #0
 80100be:	d004      	beq.n	80100ca <_fclose_r+0x9e>
 80100c0:	0028      	movs	r0, r5
 80100c2:	f7fc fabd 	bl	800c640 <_free_r>
 80100c6:	2300      	movs	r3, #0
 80100c8:	6463      	str	r3, [r4, #68]	; 0x44
 80100ca:	f7fc f84b 	bl	800c164 <__sfp_lock_acquire>
 80100ce:	2300      	movs	r3, #0
 80100d0:	81a3      	strh	r3, [r4, #12]
 80100d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100d4:	07db      	lsls	r3, r3, #31
 80100d6:	d402      	bmi.n	80100de <_fclose_r+0xb2>
 80100d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100da:	f7fc fa2a 	bl	800c532 <__retarget_lock_release_recursive>
 80100de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100e0:	f7fc fa25 	bl	800c52e <__retarget_lock_close_recursive>
 80100e4:	f7fc f846 	bl	800c174 <__sfp_lock_release>
 80100e8:	e7a5      	b.n	8010036 <_fclose_r+0xa>
	...

080100ec <__sflush_r>:
 80100ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100ee:	230c      	movs	r3, #12
 80100f0:	5eca      	ldrsh	r2, [r1, r3]
 80100f2:	000c      	movs	r4, r1
 80100f4:	0005      	movs	r5, r0
 80100f6:	b291      	uxth	r1, r2
 80100f8:	0713      	lsls	r3, r2, #28
 80100fa:	d464      	bmi.n	80101c6 <__sflush_r+0xda>
 80100fc:	2380      	movs	r3, #128	; 0x80
 80100fe:	011b      	lsls	r3, r3, #4
 8010100:	4313      	orrs	r3, r2
 8010102:	6862      	ldr	r2, [r4, #4]
 8010104:	81a3      	strh	r3, [r4, #12]
 8010106:	2a00      	cmp	r2, #0
 8010108:	dc04      	bgt.n	8010114 <__sflush_r+0x28>
 801010a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801010c:	2a00      	cmp	r2, #0
 801010e:	dc01      	bgt.n	8010114 <__sflush_r+0x28>
 8010110:	2000      	movs	r0, #0
 8010112:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010114:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010116:	2f00      	cmp	r7, #0
 8010118:	d0fa      	beq.n	8010110 <__sflush_r+0x24>
 801011a:	2200      	movs	r2, #0
 801011c:	2080      	movs	r0, #128	; 0x80
 801011e:	682e      	ldr	r6, [r5, #0]
 8010120:	602a      	str	r2, [r5, #0]
 8010122:	001a      	movs	r2, r3
 8010124:	0140      	lsls	r0, r0, #5
 8010126:	69e1      	ldr	r1, [r4, #28]
 8010128:	4002      	ands	r2, r0
 801012a:	4203      	tst	r3, r0
 801012c:	d038      	beq.n	80101a0 <__sflush_r+0xb4>
 801012e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010130:	89a3      	ldrh	r3, [r4, #12]
 8010132:	075b      	lsls	r3, r3, #29
 8010134:	d506      	bpl.n	8010144 <__sflush_r+0x58>
 8010136:	6863      	ldr	r3, [r4, #4]
 8010138:	1ac0      	subs	r0, r0, r3
 801013a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801013c:	2b00      	cmp	r3, #0
 801013e:	d001      	beq.n	8010144 <__sflush_r+0x58>
 8010140:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010142:	1ac0      	subs	r0, r0, r3
 8010144:	0002      	movs	r2, r0
 8010146:	2300      	movs	r3, #0
 8010148:	0028      	movs	r0, r5
 801014a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801014c:	69e1      	ldr	r1, [r4, #28]
 801014e:	47b8      	blx	r7
 8010150:	89a2      	ldrh	r2, [r4, #12]
 8010152:	1c43      	adds	r3, r0, #1
 8010154:	d106      	bne.n	8010164 <__sflush_r+0x78>
 8010156:	6829      	ldr	r1, [r5, #0]
 8010158:	291d      	cmp	r1, #29
 801015a:	d830      	bhi.n	80101be <__sflush_r+0xd2>
 801015c:	4b2c      	ldr	r3, [pc, #176]	; (8010210 <__sflush_r+0x124>)
 801015e:	410b      	asrs	r3, r1
 8010160:	07db      	lsls	r3, r3, #31
 8010162:	d42c      	bmi.n	80101be <__sflush_r+0xd2>
 8010164:	4b2b      	ldr	r3, [pc, #172]	; (8010214 <__sflush_r+0x128>)
 8010166:	4013      	ands	r3, r2
 8010168:	2200      	movs	r2, #0
 801016a:	6062      	str	r2, [r4, #4]
 801016c:	6922      	ldr	r2, [r4, #16]
 801016e:	b21b      	sxth	r3, r3
 8010170:	81a3      	strh	r3, [r4, #12]
 8010172:	6022      	str	r2, [r4, #0]
 8010174:	04db      	lsls	r3, r3, #19
 8010176:	d505      	bpl.n	8010184 <__sflush_r+0x98>
 8010178:	1c43      	adds	r3, r0, #1
 801017a:	d102      	bne.n	8010182 <__sflush_r+0x96>
 801017c:	682b      	ldr	r3, [r5, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d100      	bne.n	8010184 <__sflush_r+0x98>
 8010182:	6520      	str	r0, [r4, #80]	; 0x50
 8010184:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010186:	602e      	str	r6, [r5, #0]
 8010188:	2900      	cmp	r1, #0
 801018a:	d0c1      	beq.n	8010110 <__sflush_r+0x24>
 801018c:	0023      	movs	r3, r4
 801018e:	3340      	adds	r3, #64	; 0x40
 8010190:	4299      	cmp	r1, r3
 8010192:	d002      	beq.n	801019a <__sflush_r+0xae>
 8010194:	0028      	movs	r0, r5
 8010196:	f7fc fa53 	bl	800c640 <_free_r>
 801019a:	2000      	movs	r0, #0
 801019c:	6320      	str	r0, [r4, #48]	; 0x30
 801019e:	e7b8      	b.n	8010112 <__sflush_r+0x26>
 80101a0:	2301      	movs	r3, #1
 80101a2:	0028      	movs	r0, r5
 80101a4:	47b8      	blx	r7
 80101a6:	1c43      	adds	r3, r0, #1
 80101a8:	d1c2      	bne.n	8010130 <__sflush_r+0x44>
 80101aa:	682b      	ldr	r3, [r5, #0]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d0bf      	beq.n	8010130 <__sflush_r+0x44>
 80101b0:	2b1d      	cmp	r3, #29
 80101b2:	d001      	beq.n	80101b8 <__sflush_r+0xcc>
 80101b4:	2b16      	cmp	r3, #22
 80101b6:	d101      	bne.n	80101bc <__sflush_r+0xd0>
 80101b8:	602e      	str	r6, [r5, #0]
 80101ba:	e7a9      	b.n	8010110 <__sflush_r+0x24>
 80101bc:	89a2      	ldrh	r2, [r4, #12]
 80101be:	2340      	movs	r3, #64	; 0x40
 80101c0:	4313      	orrs	r3, r2
 80101c2:	81a3      	strh	r3, [r4, #12]
 80101c4:	e7a5      	b.n	8010112 <__sflush_r+0x26>
 80101c6:	6926      	ldr	r6, [r4, #16]
 80101c8:	2e00      	cmp	r6, #0
 80101ca:	d0a1      	beq.n	8010110 <__sflush_r+0x24>
 80101cc:	6827      	ldr	r7, [r4, #0]
 80101ce:	6026      	str	r6, [r4, #0]
 80101d0:	1bbb      	subs	r3, r7, r6
 80101d2:	9301      	str	r3, [sp, #4]
 80101d4:	2300      	movs	r3, #0
 80101d6:	0789      	lsls	r1, r1, #30
 80101d8:	d100      	bne.n	80101dc <__sflush_r+0xf0>
 80101da:	6963      	ldr	r3, [r4, #20]
 80101dc:	60a3      	str	r3, [r4, #8]
 80101de:	9b01      	ldr	r3, [sp, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	dc00      	bgt.n	80101e6 <__sflush_r+0xfa>
 80101e4:	e794      	b.n	8010110 <__sflush_r+0x24>
 80101e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101e8:	0032      	movs	r2, r6
 80101ea:	001f      	movs	r7, r3
 80101ec:	0028      	movs	r0, r5
 80101ee:	9b01      	ldr	r3, [sp, #4]
 80101f0:	69e1      	ldr	r1, [r4, #28]
 80101f2:	47b8      	blx	r7
 80101f4:	2800      	cmp	r0, #0
 80101f6:	dc06      	bgt.n	8010206 <__sflush_r+0x11a>
 80101f8:	2340      	movs	r3, #64	; 0x40
 80101fa:	2001      	movs	r0, #1
 80101fc:	89a2      	ldrh	r2, [r4, #12]
 80101fe:	4240      	negs	r0, r0
 8010200:	4313      	orrs	r3, r2
 8010202:	81a3      	strh	r3, [r4, #12]
 8010204:	e785      	b.n	8010112 <__sflush_r+0x26>
 8010206:	9b01      	ldr	r3, [sp, #4]
 8010208:	1836      	adds	r6, r6, r0
 801020a:	1a1b      	subs	r3, r3, r0
 801020c:	9301      	str	r3, [sp, #4]
 801020e:	e7e6      	b.n	80101de <__sflush_r+0xf2>
 8010210:	dfbffffe 	.word	0xdfbffffe
 8010214:	fffff7ff 	.word	0xfffff7ff

08010218 <_fflush_r>:
 8010218:	b570      	push	{r4, r5, r6, lr}
 801021a:	0005      	movs	r5, r0
 801021c:	000c      	movs	r4, r1
 801021e:	2800      	cmp	r0, #0
 8010220:	d004      	beq.n	801022c <_fflush_r+0x14>
 8010222:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <_fflush_r+0x14>
 8010228:	f7fb ffac 	bl	800c184 <__sinit>
 801022c:	220c      	movs	r2, #12
 801022e:	5ea3      	ldrsh	r3, [r4, r2]
 8010230:	1e1e      	subs	r6, r3, #0
 8010232:	d015      	beq.n	8010260 <_fflush_r+0x48>
 8010234:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010236:	07d2      	lsls	r2, r2, #31
 8010238:	d404      	bmi.n	8010244 <_fflush_r+0x2c>
 801023a:	059b      	lsls	r3, r3, #22
 801023c:	d402      	bmi.n	8010244 <_fflush_r+0x2c>
 801023e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010240:	f7fc f976 	bl	800c530 <__retarget_lock_acquire_recursive>
 8010244:	0021      	movs	r1, r4
 8010246:	0028      	movs	r0, r5
 8010248:	f7ff ff50 	bl	80100ec <__sflush_r>
 801024c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801024e:	0006      	movs	r6, r0
 8010250:	07db      	lsls	r3, r3, #31
 8010252:	d405      	bmi.n	8010260 <_fflush_r+0x48>
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	059b      	lsls	r3, r3, #22
 8010258:	d402      	bmi.n	8010260 <_fflush_r+0x48>
 801025a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801025c:	f7fc f969 	bl	800c532 <__retarget_lock_release_recursive>
 8010260:	0030      	movs	r0, r6
 8010262:	bd70      	pop	{r4, r5, r6, pc}

08010264 <__sccl>:
 8010264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010266:	780b      	ldrb	r3, [r1, #0]
 8010268:	0004      	movs	r4, r0
 801026a:	2b5e      	cmp	r3, #94	; 0x5e
 801026c:	d019      	beq.n	80102a2 <__sccl+0x3e>
 801026e:	2200      	movs	r2, #0
 8010270:	1c4d      	adds	r5, r1, #1
 8010272:	0021      	movs	r1, r4
 8010274:	1c60      	adds	r0, r4, #1
 8010276:	30ff      	adds	r0, #255	; 0xff
 8010278:	700a      	strb	r2, [r1, #0]
 801027a:	3101      	adds	r1, #1
 801027c:	4281      	cmp	r1, r0
 801027e:	d1fb      	bne.n	8010278 <__sccl+0x14>
 8010280:	1e68      	subs	r0, r5, #1
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00c      	beq.n	80102a0 <__sccl+0x3c>
 8010286:	2101      	movs	r1, #1
 8010288:	262d      	movs	r6, #45	; 0x2d
 801028a:	404a      	eors	r2, r1
 801028c:	0028      	movs	r0, r5
 801028e:	54e2      	strb	r2, [r4, r3]
 8010290:	7801      	ldrb	r1, [r0, #0]
 8010292:	1c45      	adds	r5, r0, #1
 8010294:	292d      	cmp	r1, #45	; 0x2d
 8010296:	d00c      	beq.n	80102b2 <__sccl+0x4e>
 8010298:	295d      	cmp	r1, #93	; 0x5d
 801029a:	d01d      	beq.n	80102d8 <__sccl+0x74>
 801029c:	2900      	cmp	r1, #0
 801029e:	d104      	bne.n	80102aa <__sccl+0x46>
 80102a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102a2:	2201      	movs	r2, #1
 80102a4:	784b      	ldrb	r3, [r1, #1]
 80102a6:	1c8d      	adds	r5, r1, #2
 80102a8:	e7e3      	b.n	8010272 <__sccl+0xe>
 80102aa:	000b      	movs	r3, r1
 80102ac:	e7ee      	b.n	801028c <__sccl+0x28>
 80102ae:	0033      	movs	r3, r6
 80102b0:	e7ec      	b.n	801028c <__sccl+0x28>
 80102b2:	7841      	ldrb	r1, [r0, #1]
 80102b4:	295d      	cmp	r1, #93	; 0x5d
 80102b6:	d0fa      	beq.n	80102ae <__sccl+0x4a>
 80102b8:	428b      	cmp	r3, r1
 80102ba:	dcf8      	bgt.n	80102ae <__sccl+0x4a>
 80102bc:	001d      	movs	r5, r3
 80102be:	3002      	adds	r0, #2
 80102c0:	3501      	adds	r5, #1
 80102c2:	5562      	strb	r2, [r4, r5]
 80102c4:	42a9      	cmp	r1, r5
 80102c6:	dcfb      	bgt.n	80102c0 <__sccl+0x5c>
 80102c8:	2500      	movs	r5, #0
 80102ca:	1c5f      	adds	r7, r3, #1
 80102cc:	428b      	cmp	r3, r1
 80102ce:	da01      	bge.n	80102d4 <__sccl+0x70>
 80102d0:	1acd      	subs	r5, r1, r3
 80102d2:	3d01      	subs	r5, #1
 80102d4:	197b      	adds	r3, r7, r5
 80102d6:	e7db      	b.n	8010290 <__sccl+0x2c>
 80102d8:	0028      	movs	r0, r5
 80102da:	e7e1      	b.n	80102a0 <__sccl+0x3c>

080102dc <_localeconv_r>:
 80102dc:	4800      	ldr	r0, [pc, #0]	; (80102e0 <_localeconv_r+0x4>)
 80102de:	4770      	bx	lr
 80102e0:	2000053c 	.word	0x2000053c

080102e4 <__libc_fini_array>:
 80102e4:	b570      	push	{r4, r5, r6, lr}
 80102e6:	4c07      	ldr	r4, [pc, #28]	; (8010304 <__libc_fini_array+0x20>)
 80102e8:	4d07      	ldr	r5, [pc, #28]	; (8010308 <__libc_fini_array+0x24>)
 80102ea:	1b64      	subs	r4, r4, r5
 80102ec:	10a4      	asrs	r4, r4, #2
 80102ee:	2c00      	cmp	r4, #0
 80102f0:	d102      	bne.n	80102f8 <__libc_fini_array+0x14>
 80102f2:	f002 fdcd 	bl	8012e90 <_fini>
 80102f6:	bd70      	pop	{r4, r5, r6, pc}
 80102f8:	3c01      	subs	r4, #1
 80102fa:	00a3      	lsls	r3, r4, #2
 80102fc:	58eb      	ldr	r3, [r5, r3]
 80102fe:	4798      	blx	r3
 8010300:	e7f5      	b.n	80102ee <__libc_fini_array+0xa>
 8010302:	46c0      	nop			; (mov r8, r8)
 8010304:	08014c98 	.word	0x08014c98
 8010308:	08014c94 	.word	0x08014c94

0801030c <memchr>:
 801030c:	b2c9      	uxtb	r1, r1
 801030e:	1882      	adds	r2, r0, r2
 8010310:	4290      	cmp	r0, r2
 8010312:	d101      	bne.n	8010318 <memchr+0xc>
 8010314:	2000      	movs	r0, #0
 8010316:	4770      	bx	lr
 8010318:	7803      	ldrb	r3, [r0, #0]
 801031a:	428b      	cmp	r3, r1
 801031c:	d0fb      	beq.n	8010316 <memchr+0xa>
 801031e:	3001      	adds	r0, #1
 8010320:	e7f6      	b.n	8010310 <memchr+0x4>
	...

08010324 <frexp>:
 8010324:	b570      	push	{r4, r5, r6, lr}
 8010326:	0014      	movs	r4, r2
 8010328:	2500      	movs	r5, #0
 801032a:	6025      	str	r5, [r4, #0]
 801032c:	4d10      	ldr	r5, [pc, #64]	; (8010370 <frexp+0x4c>)
 801032e:	004b      	lsls	r3, r1, #1
 8010330:	000a      	movs	r2, r1
 8010332:	085b      	lsrs	r3, r3, #1
 8010334:	42ab      	cmp	r3, r5
 8010336:	dc1a      	bgt.n	801036e <frexp+0x4a>
 8010338:	001d      	movs	r5, r3
 801033a:	4305      	orrs	r5, r0
 801033c:	d017      	beq.n	801036e <frexp+0x4a>
 801033e:	4d0d      	ldr	r5, [pc, #52]	; (8010374 <frexp+0x50>)
 8010340:	4229      	tst	r1, r5
 8010342:	d109      	bne.n	8010358 <frexp+0x34>
 8010344:	2200      	movs	r2, #0
 8010346:	4b0c      	ldr	r3, [pc, #48]	; (8010378 <frexp+0x54>)
 8010348:	f7f1 f990 	bl	800166c <__aeabi_dmul>
 801034c:	2536      	movs	r5, #54	; 0x36
 801034e:	000a      	movs	r2, r1
 8010350:	004b      	lsls	r3, r1, #1
 8010352:	426d      	negs	r5, r5
 8010354:	085b      	lsrs	r3, r3, #1
 8010356:	6025      	str	r5, [r4, #0]
 8010358:	4d08      	ldr	r5, [pc, #32]	; (801037c <frexp+0x58>)
 801035a:	151b      	asrs	r3, r3, #20
 801035c:	195b      	adds	r3, r3, r5
 801035e:	6825      	ldr	r5, [r4, #0]
 8010360:	18eb      	adds	r3, r5, r3
 8010362:	6023      	str	r3, [r4, #0]
 8010364:	4b06      	ldr	r3, [pc, #24]	; (8010380 <frexp+0x5c>)
 8010366:	401a      	ands	r2, r3
 8010368:	4b06      	ldr	r3, [pc, #24]	; (8010384 <frexp+0x60>)
 801036a:	4313      	orrs	r3, r2
 801036c:	0019      	movs	r1, r3
 801036e:	bd70      	pop	{r4, r5, r6, pc}
 8010370:	7fefffff 	.word	0x7fefffff
 8010374:	7ff00000 	.word	0x7ff00000
 8010378:	43500000 	.word	0x43500000
 801037c:	fffffc02 	.word	0xfffffc02
 8010380:	800fffff 	.word	0x800fffff
 8010384:	3fe00000 	.word	0x3fe00000

08010388 <__register_exitproc>:
 8010388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801038a:	4f1c      	ldr	r7, [pc, #112]	; (80103fc <__register_exitproc+0x74>)
 801038c:	0004      	movs	r4, r0
 801038e:	6838      	ldr	r0, [r7, #0]
 8010390:	0016      	movs	r6, r2
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	9100      	str	r1, [sp, #0]
 8010396:	f7fc f8cb 	bl	800c530 <__retarget_lock_acquire_recursive>
 801039a:	4a19      	ldr	r2, [pc, #100]	; (8010400 <__register_exitproc+0x78>)
 801039c:	6813      	ldr	r3, [r2, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d101      	bne.n	80103a6 <__register_exitproc+0x1e>
 80103a2:	4b18      	ldr	r3, [pc, #96]	; (8010404 <__register_exitproc+0x7c>)
 80103a4:	6013      	str	r3, [r2, #0]
 80103a6:	685a      	ldr	r2, [r3, #4]
 80103a8:	6838      	ldr	r0, [r7, #0]
 80103aa:	2a1f      	cmp	r2, #31
 80103ac:	dd04      	ble.n	80103b8 <__register_exitproc+0x30>
 80103ae:	f7fc f8c0 	bl	800c532 <__retarget_lock_release_recursive>
 80103b2:	2001      	movs	r0, #1
 80103b4:	4240      	negs	r0, r0
 80103b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80103b8:	2c00      	cmp	r4, #0
 80103ba:	d014      	beq.n	80103e6 <__register_exitproc+0x5e>
 80103bc:	0091      	lsls	r1, r2, #2
 80103be:	1859      	adds	r1, r3, r1
 80103c0:	000f      	movs	r7, r1
 80103c2:	3788      	adds	r7, #136	; 0x88
 80103c4:	603e      	str	r6, [r7, #0]
 80103c6:	2701      	movs	r7, #1
 80103c8:	001e      	movs	r6, r3
 80103ca:	4097      	lsls	r7, r2
 80103cc:	3685      	adds	r6, #133	; 0x85
 80103ce:	36ff      	adds	r6, #255	; 0xff
 80103d0:	6875      	ldr	r5, [r6, #4]
 80103d2:	31fc      	adds	r1, #252	; 0xfc
 80103d4:	433d      	orrs	r5, r7
 80103d6:	6075      	str	r5, [r6, #4]
 80103d8:	9d01      	ldr	r5, [sp, #4]
 80103da:	60cd      	str	r5, [r1, #12]
 80103dc:	2c02      	cmp	r4, #2
 80103de:	d102      	bne.n	80103e6 <__register_exitproc+0x5e>
 80103e0:	68b1      	ldr	r1, [r6, #8]
 80103e2:	4339      	orrs	r1, r7
 80103e4:	60b1      	str	r1, [r6, #8]
 80103e6:	1c51      	adds	r1, r2, #1
 80103e8:	6059      	str	r1, [r3, #4]
 80103ea:	3202      	adds	r2, #2
 80103ec:	9900      	ldr	r1, [sp, #0]
 80103ee:	0092      	lsls	r2, r2, #2
 80103f0:	50d1      	str	r1, [r2, r3]
 80103f2:	f7fc f89e 	bl	800c532 <__retarget_lock_release_recursive>
 80103f6:	2000      	movs	r0, #0
 80103f8:	e7dd      	b.n	80103b6 <__register_exitproc+0x2e>
 80103fa:	46c0      	nop			; (mov r8, r8)
 80103fc:	200006dc 	.word	0x200006dc
 8010400:	20000d38 	.word	0x20000d38
 8010404:	20000d3c 	.word	0x20000d3c

08010408 <__assert_func>:
 8010408:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801040a:	0014      	movs	r4, r2
 801040c:	001a      	movs	r2, r3
 801040e:	4b09      	ldr	r3, [pc, #36]	; (8010434 <__assert_func+0x2c>)
 8010410:	0005      	movs	r5, r0
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	000e      	movs	r6, r1
 8010416:	68d8      	ldr	r0, [r3, #12]
 8010418:	4b07      	ldr	r3, [pc, #28]	; (8010438 <__assert_func+0x30>)
 801041a:	2c00      	cmp	r4, #0
 801041c:	d101      	bne.n	8010422 <__assert_func+0x1a>
 801041e:	4b07      	ldr	r3, [pc, #28]	; (801043c <__assert_func+0x34>)
 8010420:	001c      	movs	r4, r3
 8010422:	4907      	ldr	r1, [pc, #28]	; (8010440 <__assert_func+0x38>)
 8010424:	9301      	str	r3, [sp, #4]
 8010426:	9402      	str	r4, [sp, #8]
 8010428:	002b      	movs	r3, r5
 801042a:	9600      	str	r6, [sp, #0]
 801042c:	f001 faa6 	bl	801197c <fiprintf>
 8010430:	f002 fb8e 	bl	8012b50 <abort>
 8010434:	200006d8 	.word	0x200006d8
 8010438:	08014bc0 	.word	0x08014bc0
 801043c:	08014bfb 	.word	0x08014bfb
 8010440:	08014bcd 	.word	0x08014bcd

08010444 <_calloc_r>:
 8010444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010446:	2400      	movs	r4, #0
 8010448:	0c0b      	lsrs	r3, r1, #16
 801044a:	0c16      	lsrs	r6, r2, #16
 801044c:	42a3      	cmp	r3, r4
 801044e:	d133      	bne.n	80104b8 <_calloc_r+0x74>
 8010450:	42a6      	cmp	r6, r4
 8010452:	d121      	bne.n	8010498 <_calloc_r+0x54>
 8010454:	b28b      	uxth	r3, r1
 8010456:	b291      	uxth	r1, r2
 8010458:	4359      	muls	r1, r3
 801045a:	f7fa fd11 	bl	800ae80 <_malloc_r>
 801045e:	1e05      	subs	r5, r0, #0
 8010460:	d033      	beq.n	80104ca <_calloc_r+0x86>
 8010462:	0003      	movs	r3, r0
 8010464:	3b08      	subs	r3, #8
 8010466:	685a      	ldr	r2, [r3, #4]
 8010468:	2303      	movs	r3, #3
 801046a:	439a      	bics	r2, r3
 801046c:	3a04      	subs	r2, #4
 801046e:	2a24      	cmp	r2, #36	; 0x24
 8010470:	d832      	bhi.n	80104d8 <_calloc_r+0x94>
 8010472:	0003      	movs	r3, r0
 8010474:	2a13      	cmp	r2, #19
 8010476:	d90a      	bls.n	801048e <_calloc_r+0x4a>
 8010478:	6004      	str	r4, [r0, #0]
 801047a:	6044      	str	r4, [r0, #4]
 801047c:	3308      	adds	r3, #8
 801047e:	2a1b      	cmp	r2, #27
 8010480:	d905      	bls.n	801048e <_calloc_r+0x4a>
 8010482:	6084      	str	r4, [r0, #8]
 8010484:	60c4      	str	r4, [r0, #12]
 8010486:	2a24      	cmp	r2, #36	; 0x24
 8010488:	d021      	beq.n	80104ce <_calloc_r+0x8a>
 801048a:	0003      	movs	r3, r0
 801048c:	3310      	adds	r3, #16
 801048e:	2200      	movs	r2, #0
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	605a      	str	r2, [r3, #4]
 8010494:	609a      	str	r2, [r3, #8]
 8010496:	e018      	b.n	80104ca <_calloc_r+0x86>
 8010498:	1c33      	adds	r3, r6, #0
 801049a:	1c0d      	adds	r5, r1, #0
 801049c:	b289      	uxth	r1, r1
 801049e:	b292      	uxth	r2, r2
 80104a0:	434a      	muls	r2, r1
 80104a2:	b2ad      	uxth	r5, r5
 80104a4:	b299      	uxth	r1, r3
 80104a6:	4369      	muls	r1, r5
 80104a8:	0c13      	lsrs	r3, r2, #16
 80104aa:	18c9      	adds	r1, r1, r3
 80104ac:	0c0b      	lsrs	r3, r1, #16
 80104ae:	d107      	bne.n	80104c0 <_calloc_r+0x7c>
 80104b0:	0409      	lsls	r1, r1, #16
 80104b2:	b292      	uxth	r2, r2
 80104b4:	4311      	orrs	r1, r2
 80104b6:	e7d0      	b.n	801045a <_calloc_r+0x16>
 80104b8:	2e00      	cmp	r6, #0
 80104ba:	d101      	bne.n	80104c0 <_calloc_r+0x7c>
 80104bc:	1c15      	adds	r5, r2, #0
 80104be:	e7ed      	b.n	801049c <_calloc_r+0x58>
 80104c0:	f7fc f80a 	bl	800c4d8 <__errno>
 80104c4:	230c      	movs	r3, #12
 80104c6:	2500      	movs	r5, #0
 80104c8:	6003      	str	r3, [r0, #0]
 80104ca:	0028      	movs	r0, r5
 80104cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ce:	0003      	movs	r3, r0
 80104d0:	6104      	str	r4, [r0, #16]
 80104d2:	3318      	adds	r3, #24
 80104d4:	6144      	str	r4, [r0, #20]
 80104d6:	e7da      	b.n	801048e <_calloc_r+0x4a>
 80104d8:	2100      	movs	r1, #0
 80104da:	f7fb ff51 	bl	800c380 <memset>
 80104de:	e7f4      	b.n	80104ca <_calloc_r+0x86>

080104e0 <quorem>:
 80104e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e2:	6902      	ldr	r2, [r0, #16]
 80104e4:	690b      	ldr	r3, [r1, #16]
 80104e6:	b089      	sub	sp, #36	; 0x24
 80104e8:	0007      	movs	r7, r0
 80104ea:	9104      	str	r1, [sp, #16]
 80104ec:	2000      	movs	r0, #0
 80104ee:	429a      	cmp	r2, r3
 80104f0:	db69      	blt.n	80105c6 <quorem+0xe6>
 80104f2:	3b01      	subs	r3, #1
 80104f4:	009c      	lsls	r4, r3, #2
 80104f6:	9301      	str	r3, [sp, #4]
 80104f8:	000b      	movs	r3, r1
 80104fa:	3314      	adds	r3, #20
 80104fc:	9306      	str	r3, [sp, #24]
 80104fe:	191b      	adds	r3, r3, r4
 8010500:	9305      	str	r3, [sp, #20]
 8010502:	003b      	movs	r3, r7
 8010504:	3314      	adds	r3, #20
 8010506:	9303      	str	r3, [sp, #12]
 8010508:	191c      	adds	r4, r3, r4
 801050a:	9b05      	ldr	r3, [sp, #20]
 801050c:	6826      	ldr	r6, [r4, #0]
 801050e:	681d      	ldr	r5, [r3, #0]
 8010510:	0030      	movs	r0, r6
 8010512:	3501      	adds	r5, #1
 8010514:	0029      	movs	r1, r5
 8010516:	f7ef fe11 	bl	800013c <__udivsi3>
 801051a:	9002      	str	r0, [sp, #8]
 801051c:	42ae      	cmp	r6, r5
 801051e:	d329      	bcc.n	8010574 <quorem+0x94>
 8010520:	9b06      	ldr	r3, [sp, #24]
 8010522:	2600      	movs	r6, #0
 8010524:	469c      	mov	ip, r3
 8010526:	9d03      	ldr	r5, [sp, #12]
 8010528:	9606      	str	r6, [sp, #24]
 801052a:	4662      	mov	r2, ip
 801052c:	ca08      	ldmia	r2!, {r3}
 801052e:	6828      	ldr	r0, [r5, #0]
 8010530:	4694      	mov	ip, r2
 8010532:	9a02      	ldr	r2, [sp, #8]
 8010534:	b299      	uxth	r1, r3
 8010536:	4351      	muls	r1, r2
 8010538:	0c1b      	lsrs	r3, r3, #16
 801053a:	4353      	muls	r3, r2
 801053c:	1989      	adds	r1, r1, r6
 801053e:	0c0a      	lsrs	r2, r1, #16
 8010540:	189b      	adds	r3, r3, r2
 8010542:	9307      	str	r3, [sp, #28]
 8010544:	0c1e      	lsrs	r6, r3, #16
 8010546:	9b06      	ldr	r3, [sp, #24]
 8010548:	b282      	uxth	r2, r0
 801054a:	18d2      	adds	r2, r2, r3
 801054c:	466b      	mov	r3, sp
 801054e:	b289      	uxth	r1, r1
 8010550:	8b9b      	ldrh	r3, [r3, #28]
 8010552:	1a52      	subs	r2, r2, r1
 8010554:	0c01      	lsrs	r1, r0, #16
 8010556:	1ac9      	subs	r1, r1, r3
 8010558:	1413      	asrs	r3, r2, #16
 801055a:	18cb      	adds	r3, r1, r3
 801055c:	1419      	asrs	r1, r3, #16
 801055e:	b292      	uxth	r2, r2
 8010560:	041b      	lsls	r3, r3, #16
 8010562:	4313      	orrs	r3, r2
 8010564:	c508      	stmia	r5!, {r3}
 8010566:	9b05      	ldr	r3, [sp, #20]
 8010568:	9106      	str	r1, [sp, #24]
 801056a:	4563      	cmp	r3, ip
 801056c:	d2dd      	bcs.n	801052a <quorem+0x4a>
 801056e:	6823      	ldr	r3, [r4, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d030      	beq.n	80105d6 <quorem+0xf6>
 8010574:	0038      	movs	r0, r7
 8010576:	9904      	ldr	r1, [sp, #16]
 8010578:	f7fc ff04 	bl	800d384 <__mcmp>
 801057c:	2800      	cmp	r0, #0
 801057e:	db21      	blt.n	80105c4 <quorem+0xe4>
 8010580:	0038      	movs	r0, r7
 8010582:	2600      	movs	r6, #0
 8010584:	9b02      	ldr	r3, [sp, #8]
 8010586:	9c04      	ldr	r4, [sp, #16]
 8010588:	3301      	adds	r3, #1
 801058a:	9302      	str	r3, [sp, #8]
 801058c:	3014      	adds	r0, #20
 801058e:	3414      	adds	r4, #20
 8010590:	6803      	ldr	r3, [r0, #0]
 8010592:	cc02      	ldmia	r4!, {r1}
 8010594:	b29d      	uxth	r5, r3
 8010596:	19ad      	adds	r5, r5, r6
 8010598:	b28a      	uxth	r2, r1
 801059a:	1aaa      	subs	r2, r5, r2
 801059c:	0c09      	lsrs	r1, r1, #16
 801059e:	0c1b      	lsrs	r3, r3, #16
 80105a0:	1a5b      	subs	r3, r3, r1
 80105a2:	1411      	asrs	r1, r2, #16
 80105a4:	185b      	adds	r3, r3, r1
 80105a6:	141e      	asrs	r6, r3, #16
 80105a8:	b292      	uxth	r2, r2
 80105aa:	041b      	lsls	r3, r3, #16
 80105ac:	4313      	orrs	r3, r2
 80105ae:	c008      	stmia	r0!, {r3}
 80105b0:	9b05      	ldr	r3, [sp, #20]
 80105b2:	42a3      	cmp	r3, r4
 80105b4:	d2ec      	bcs.n	8010590 <quorem+0xb0>
 80105b6:	9b01      	ldr	r3, [sp, #4]
 80105b8:	9a03      	ldr	r2, [sp, #12]
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	18d3      	adds	r3, r2, r3
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	2a00      	cmp	r2, #0
 80105c2:	d015      	beq.n	80105f0 <quorem+0x110>
 80105c4:	9802      	ldr	r0, [sp, #8]
 80105c6:	b009      	add	sp, #36	; 0x24
 80105c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ca:	6823      	ldr	r3, [r4, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d106      	bne.n	80105de <quorem+0xfe>
 80105d0:	9b01      	ldr	r3, [sp, #4]
 80105d2:	3b01      	subs	r3, #1
 80105d4:	9301      	str	r3, [sp, #4]
 80105d6:	9b03      	ldr	r3, [sp, #12]
 80105d8:	3c04      	subs	r4, #4
 80105da:	42a3      	cmp	r3, r4
 80105dc:	d3f5      	bcc.n	80105ca <quorem+0xea>
 80105de:	9b01      	ldr	r3, [sp, #4]
 80105e0:	613b      	str	r3, [r7, #16]
 80105e2:	e7c7      	b.n	8010574 <quorem+0x94>
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	2a00      	cmp	r2, #0
 80105e8:	d106      	bne.n	80105f8 <quorem+0x118>
 80105ea:	9a01      	ldr	r2, [sp, #4]
 80105ec:	3a01      	subs	r2, #1
 80105ee:	9201      	str	r2, [sp, #4]
 80105f0:	9a03      	ldr	r2, [sp, #12]
 80105f2:	3b04      	subs	r3, #4
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d3f5      	bcc.n	80105e4 <quorem+0x104>
 80105f8:	9b01      	ldr	r3, [sp, #4]
 80105fa:	613b      	str	r3, [r7, #16]
 80105fc:	e7e2      	b.n	80105c4 <quorem+0xe4>
	...

08010600 <_dtoa_r>:
 8010600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010602:	0014      	movs	r4, r2
 8010604:	001d      	movs	r5, r3
 8010606:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8010608:	b09d      	sub	sp, #116	; 0x74
 801060a:	9408      	str	r4, [sp, #32]
 801060c:	9509      	str	r5, [sp, #36]	; 0x24
 801060e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8010610:	9004      	str	r0, [sp, #16]
 8010612:	2900      	cmp	r1, #0
 8010614:	d009      	beq.n	801062a <_dtoa_r+0x2a>
 8010616:	2301      	movs	r3, #1
 8010618:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801061a:	4093      	lsls	r3, r2
 801061c:	604a      	str	r2, [r1, #4]
 801061e:	608b      	str	r3, [r1, #8]
 8010620:	f7fc fc56 	bl	800ced0 <_Bfree>
 8010624:	2300      	movs	r3, #0
 8010626:	9a04      	ldr	r2, [sp, #16]
 8010628:	6393      	str	r3, [r2, #56]	; 0x38
 801062a:	2d00      	cmp	r5, #0
 801062c:	da1e      	bge.n	801066c <_dtoa_r+0x6c>
 801062e:	2301      	movs	r3, #1
 8010630:	6033      	str	r3, [r6, #0]
 8010632:	006b      	lsls	r3, r5, #1
 8010634:	085b      	lsrs	r3, r3, #1
 8010636:	9309      	str	r3, [sp, #36]	; 0x24
 8010638:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801063a:	4bb5      	ldr	r3, [pc, #724]	; (8010910 <_dtoa_r+0x310>)
 801063c:	4ab4      	ldr	r2, [pc, #720]	; (8010910 <_dtoa_r+0x310>)
 801063e:	403b      	ands	r3, r7
 8010640:	4293      	cmp	r3, r2
 8010642:	d116      	bne.n	8010672 <_dtoa_r+0x72>
 8010644:	4bb3      	ldr	r3, [pc, #716]	; (8010914 <_dtoa_r+0x314>)
 8010646:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010648:	6013      	str	r3, [r2, #0]
 801064a:	033b      	lsls	r3, r7, #12
 801064c:	0b1b      	lsrs	r3, r3, #12
 801064e:	4323      	orrs	r3, r4
 8010650:	d101      	bne.n	8010656 <_dtoa_r+0x56>
 8010652:	f000 fdb2 	bl	80111ba <_dtoa_r+0xbba>
 8010656:	4bb0      	ldr	r3, [pc, #704]	; (8010918 <_dtoa_r+0x318>)
 8010658:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801065a:	9306      	str	r3, [sp, #24]
 801065c:	2a00      	cmp	r2, #0
 801065e:	d002      	beq.n	8010666 <_dtoa_r+0x66>
 8010660:	4bae      	ldr	r3, [pc, #696]	; (801091c <_dtoa_r+0x31c>)
 8010662:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010664:	6013      	str	r3, [r2, #0]
 8010666:	9806      	ldr	r0, [sp, #24]
 8010668:	b01d      	add	sp, #116	; 0x74
 801066a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801066c:	2300      	movs	r3, #0
 801066e:	6033      	str	r3, [r6, #0]
 8010670:	e7e2      	b.n	8010638 <_dtoa_r+0x38>
 8010672:	9a08      	ldr	r2, [sp, #32]
 8010674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010676:	9210      	str	r2, [sp, #64]	; 0x40
 8010678:	9311      	str	r3, [sp, #68]	; 0x44
 801067a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801067c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801067e:	2200      	movs	r2, #0
 8010680:	2300      	movs	r3, #0
 8010682:	f7ef fee1 	bl	8000448 <__aeabi_dcmpeq>
 8010686:	1e06      	subs	r6, r0, #0
 8010688:	d009      	beq.n	801069e <_dtoa_r+0x9e>
 801068a:	2301      	movs	r3, #1
 801068c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801068e:	6013      	str	r3, [r2, #0]
 8010690:	4ba3      	ldr	r3, [pc, #652]	; (8010920 <_dtoa_r+0x320>)
 8010692:	9306      	str	r3, [sp, #24]
 8010694:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010696:	2b00      	cmp	r3, #0
 8010698:	d0e5      	beq.n	8010666 <_dtoa_r+0x66>
 801069a:	4ba2      	ldr	r3, [pc, #648]	; (8010924 <_dtoa_r+0x324>)
 801069c:	e7e1      	b.n	8010662 <_dtoa_r+0x62>
 801069e:	ab1a      	add	r3, sp, #104	; 0x68
 80106a0:	9301      	str	r3, [sp, #4]
 80106a2:	ab1b      	add	r3, sp, #108	; 0x6c
 80106a4:	9300      	str	r3, [sp, #0]
 80106a6:	9804      	ldr	r0, [sp, #16]
 80106a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80106aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106ac:	f7fc ff86 	bl	800d5bc <__d2b>
 80106b0:	007a      	lsls	r2, r7, #1
 80106b2:	9005      	str	r0, [sp, #20]
 80106b4:	0d52      	lsrs	r2, r2, #21
 80106b6:	d100      	bne.n	80106ba <_dtoa_r+0xba>
 80106b8:	e07b      	b.n	80107b2 <_dtoa_r+0x1b2>
 80106ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106bc:	9617      	str	r6, [sp, #92]	; 0x5c
 80106be:	0319      	lsls	r1, r3, #12
 80106c0:	4b99      	ldr	r3, [pc, #612]	; (8010928 <_dtoa_r+0x328>)
 80106c2:	0b09      	lsrs	r1, r1, #12
 80106c4:	430b      	orrs	r3, r1
 80106c6:	4999      	ldr	r1, [pc, #612]	; (801092c <_dtoa_r+0x32c>)
 80106c8:	1857      	adds	r7, r2, r1
 80106ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80106cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80106ce:	0019      	movs	r1, r3
 80106d0:	2200      	movs	r2, #0
 80106d2:	4b97      	ldr	r3, [pc, #604]	; (8010930 <_dtoa_r+0x330>)
 80106d4:	f7f1 fa8c 	bl	8001bf0 <__aeabi_dsub>
 80106d8:	4a96      	ldr	r2, [pc, #600]	; (8010934 <_dtoa_r+0x334>)
 80106da:	4b97      	ldr	r3, [pc, #604]	; (8010938 <_dtoa_r+0x338>)
 80106dc:	f7f0 ffc6 	bl	800166c <__aeabi_dmul>
 80106e0:	4a96      	ldr	r2, [pc, #600]	; (801093c <_dtoa_r+0x33c>)
 80106e2:	4b97      	ldr	r3, [pc, #604]	; (8010940 <_dtoa_r+0x340>)
 80106e4:	f7f0 f868 	bl	80007b8 <__aeabi_dadd>
 80106e8:	0004      	movs	r4, r0
 80106ea:	0038      	movs	r0, r7
 80106ec:	000d      	movs	r5, r1
 80106ee:	f7f1 fe55 	bl	800239c <__aeabi_i2d>
 80106f2:	4a94      	ldr	r2, [pc, #592]	; (8010944 <_dtoa_r+0x344>)
 80106f4:	4b94      	ldr	r3, [pc, #592]	; (8010948 <_dtoa_r+0x348>)
 80106f6:	f7f0 ffb9 	bl	800166c <__aeabi_dmul>
 80106fa:	0002      	movs	r2, r0
 80106fc:	000b      	movs	r3, r1
 80106fe:	0020      	movs	r0, r4
 8010700:	0029      	movs	r1, r5
 8010702:	f7f0 f859 	bl	80007b8 <__aeabi_dadd>
 8010706:	0004      	movs	r4, r0
 8010708:	000d      	movs	r5, r1
 801070a:	f7f1 fe11 	bl	8002330 <__aeabi_d2iz>
 801070e:	2200      	movs	r2, #0
 8010710:	9003      	str	r0, [sp, #12]
 8010712:	2300      	movs	r3, #0
 8010714:	0020      	movs	r0, r4
 8010716:	0029      	movs	r1, r5
 8010718:	f7ef fe9c 	bl	8000454 <__aeabi_dcmplt>
 801071c:	2800      	cmp	r0, #0
 801071e:	d00b      	beq.n	8010738 <_dtoa_r+0x138>
 8010720:	9803      	ldr	r0, [sp, #12]
 8010722:	f7f1 fe3b 	bl	800239c <__aeabi_i2d>
 8010726:	002b      	movs	r3, r5
 8010728:	0022      	movs	r2, r4
 801072a:	f7ef fe8d 	bl	8000448 <__aeabi_dcmpeq>
 801072e:	4243      	negs	r3, r0
 8010730:	4158      	adcs	r0, r3
 8010732:	9b03      	ldr	r3, [sp, #12]
 8010734:	1a1b      	subs	r3, r3, r0
 8010736:	9303      	str	r3, [sp, #12]
 8010738:	2301      	movs	r3, #1
 801073a:	9316      	str	r3, [sp, #88]	; 0x58
 801073c:	9b03      	ldr	r3, [sp, #12]
 801073e:	2b16      	cmp	r3, #22
 8010740:	d810      	bhi.n	8010764 <_dtoa_r+0x164>
 8010742:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010744:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010746:	9a03      	ldr	r2, [sp, #12]
 8010748:	4b80      	ldr	r3, [pc, #512]	; (801094c <_dtoa_r+0x34c>)
 801074a:	00d2      	lsls	r2, r2, #3
 801074c:	189b      	adds	r3, r3, r2
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	f7ef fe7f 	bl	8000454 <__aeabi_dcmplt>
 8010756:	2800      	cmp	r0, #0
 8010758:	d047      	beq.n	80107ea <_dtoa_r+0x1ea>
 801075a:	9b03      	ldr	r3, [sp, #12]
 801075c:	3b01      	subs	r3, #1
 801075e:	9303      	str	r3, [sp, #12]
 8010760:	2300      	movs	r3, #0
 8010762:	9316      	str	r3, [sp, #88]	; 0x58
 8010764:	2200      	movs	r2, #0
 8010766:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010768:	920a      	str	r2, [sp, #40]	; 0x28
 801076a:	1bdb      	subs	r3, r3, r7
 801076c:	1e5a      	subs	r2, r3, #1
 801076e:	d53e      	bpl.n	80107ee <_dtoa_r+0x1ee>
 8010770:	2201      	movs	r2, #1
 8010772:	1ad3      	subs	r3, r2, r3
 8010774:	930a      	str	r3, [sp, #40]	; 0x28
 8010776:	2300      	movs	r3, #0
 8010778:	930c      	str	r3, [sp, #48]	; 0x30
 801077a:	9b03      	ldr	r3, [sp, #12]
 801077c:	2b00      	cmp	r3, #0
 801077e:	db38      	blt.n	80107f2 <_dtoa_r+0x1f2>
 8010780:	9a03      	ldr	r2, [sp, #12]
 8010782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010784:	4694      	mov	ip, r2
 8010786:	4463      	add	r3, ip
 8010788:	930c      	str	r3, [sp, #48]	; 0x30
 801078a:	2300      	movs	r3, #0
 801078c:	9213      	str	r2, [sp, #76]	; 0x4c
 801078e:	930d      	str	r3, [sp, #52]	; 0x34
 8010790:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010792:	2401      	movs	r4, #1
 8010794:	2b09      	cmp	r3, #9
 8010796:	d867      	bhi.n	8010868 <_dtoa_r+0x268>
 8010798:	2b05      	cmp	r3, #5
 801079a:	dd02      	ble.n	80107a2 <_dtoa_r+0x1a2>
 801079c:	2400      	movs	r4, #0
 801079e:	3b04      	subs	r3, #4
 80107a0:	9322      	str	r3, [sp, #136]	; 0x88
 80107a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107a4:	1e98      	subs	r0, r3, #2
 80107a6:	2803      	cmp	r0, #3
 80107a8:	d867      	bhi.n	801087a <_dtoa_r+0x27a>
 80107aa:	f7ef fcb3 	bl	8000114 <__gnu_thumb1_case_uqi>
 80107ae:	3a2b      	.short	0x3a2b
 80107b0:	5b38      	.short	0x5b38
 80107b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80107b4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80107b6:	18f6      	adds	r6, r6, r3
 80107b8:	4b65      	ldr	r3, [pc, #404]	; (8010950 <_dtoa_r+0x350>)
 80107ba:	18f2      	adds	r2, r6, r3
 80107bc:	2a20      	cmp	r2, #32
 80107be:	dd0f      	ble.n	80107e0 <_dtoa_r+0x1e0>
 80107c0:	2340      	movs	r3, #64	; 0x40
 80107c2:	1a9b      	subs	r3, r3, r2
 80107c4:	409f      	lsls	r7, r3
 80107c6:	4b63      	ldr	r3, [pc, #396]	; (8010954 <_dtoa_r+0x354>)
 80107c8:	0038      	movs	r0, r7
 80107ca:	18f3      	adds	r3, r6, r3
 80107cc:	40dc      	lsrs	r4, r3
 80107ce:	4320      	orrs	r0, r4
 80107d0:	f7f1 fe14 	bl	80023fc <__aeabi_ui2d>
 80107d4:	2201      	movs	r2, #1
 80107d6:	4b60      	ldr	r3, [pc, #384]	; (8010958 <_dtoa_r+0x358>)
 80107d8:	1e77      	subs	r7, r6, #1
 80107da:	18cb      	adds	r3, r1, r3
 80107dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80107de:	e776      	b.n	80106ce <_dtoa_r+0xce>
 80107e0:	2320      	movs	r3, #32
 80107e2:	0020      	movs	r0, r4
 80107e4:	1a9b      	subs	r3, r3, r2
 80107e6:	4098      	lsls	r0, r3
 80107e8:	e7f2      	b.n	80107d0 <_dtoa_r+0x1d0>
 80107ea:	9016      	str	r0, [sp, #88]	; 0x58
 80107ec:	e7ba      	b.n	8010764 <_dtoa_r+0x164>
 80107ee:	920c      	str	r2, [sp, #48]	; 0x30
 80107f0:	e7c3      	b.n	801077a <_dtoa_r+0x17a>
 80107f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107f4:	9a03      	ldr	r2, [sp, #12]
 80107f6:	1a9b      	subs	r3, r3, r2
 80107f8:	930a      	str	r3, [sp, #40]	; 0x28
 80107fa:	4253      	negs	r3, r2
 80107fc:	930d      	str	r3, [sp, #52]	; 0x34
 80107fe:	2300      	movs	r3, #0
 8010800:	9313      	str	r3, [sp, #76]	; 0x4c
 8010802:	e7c5      	b.n	8010790 <_dtoa_r+0x190>
 8010804:	2300      	movs	r3, #0
 8010806:	930f      	str	r3, [sp, #60]	; 0x3c
 8010808:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801080a:	930b      	str	r3, [sp, #44]	; 0x2c
 801080c:	9307      	str	r3, [sp, #28]
 801080e:	2b00      	cmp	r3, #0
 8010810:	dc13      	bgt.n	801083a <_dtoa_r+0x23a>
 8010812:	2301      	movs	r3, #1
 8010814:	001a      	movs	r2, r3
 8010816:	930b      	str	r3, [sp, #44]	; 0x2c
 8010818:	9307      	str	r3, [sp, #28]
 801081a:	9223      	str	r2, [sp, #140]	; 0x8c
 801081c:	e00d      	b.n	801083a <_dtoa_r+0x23a>
 801081e:	2301      	movs	r3, #1
 8010820:	e7f1      	b.n	8010806 <_dtoa_r+0x206>
 8010822:	2300      	movs	r3, #0
 8010824:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010826:	930f      	str	r3, [sp, #60]	; 0x3c
 8010828:	4694      	mov	ip, r2
 801082a:	9b03      	ldr	r3, [sp, #12]
 801082c:	4463      	add	r3, ip
 801082e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010830:	3301      	adds	r3, #1
 8010832:	9307      	str	r3, [sp, #28]
 8010834:	2b00      	cmp	r3, #0
 8010836:	dc00      	bgt.n	801083a <_dtoa_r+0x23a>
 8010838:	2301      	movs	r3, #1
 801083a:	2100      	movs	r1, #0
 801083c:	2204      	movs	r2, #4
 801083e:	0010      	movs	r0, r2
 8010840:	3014      	adds	r0, #20
 8010842:	4298      	cmp	r0, r3
 8010844:	d91d      	bls.n	8010882 <_dtoa_r+0x282>
 8010846:	9b04      	ldr	r3, [sp, #16]
 8010848:	0018      	movs	r0, r3
 801084a:	63d9      	str	r1, [r3, #60]	; 0x3c
 801084c:	f7fc fb18 	bl	800ce80 <_Balloc>
 8010850:	9006      	str	r0, [sp, #24]
 8010852:	2800      	cmp	r0, #0
 8010854:	d118      	bne.n	8010888 <_dtoa_r+0x288>
 8010856:	21b0      	movs	r1, #176	; 0xb0
 8010858:	4b40      	ldr	r3, [pc, #256]	; (801095c <_dtoa_r+0x35c>)
 801085a:	4841      	ldr	r0, [pc, #260]	; (8010960 <_dtoa_r+0x360>)
 801085c:	9a06      	ldr	r2, [sp, #24]
 801085e:	31ff      	adds	r1, #255	; 0xff
 8010860:	f7ff fdd2 	bl	8010408 <__assert_func>
 8010864:	2301      	movs	r3, #1
 8010866:	e7dd      	b.n	8010824 <_dtoa_r+0x224>
 8010868:	2300      	movs	r3, #0
 801086a:	940f      	str	r4, [sp, #60]	; 0x3c
 801086c:	9322      	str	r3, [sp, #136]	; 0x88
 801086e:	3b01      	subs	r3, #1
 8010870:	930b      	str	r3, [sp, #44]	; 0x2c
 8010872:	9307      	str	r3, [sp, #28]
 8010874:	2200      	movs	r2, #0
 8010876:	3313      	adds	r3, #19
 8010878:	e7cf      	b.n	801081a <_dtoa_r+0x21a>
 801087a:	2301      	movs	r3, #1
 801087c:	930f      	str	r3, [sp, #60]	; 0x3c
 801087e:	3b02      	subs	r3, #2
 8010880:	e7f6      	b.n	8010870 <_dtoa_r+0x270>
 8010882:	3101      	adds	r1, #1
 8010884:	0052      	lsls	r2, r2, #1
 8010886:	e7da      	b.n	801083e <_dtoa_r+0x23e>
 8010888:	9b04      	ldr	r3, [sp, #16]
 801088a:	9a06      	ldr	r2, [sp, #24]
 801088c:	639a      	str	r2, [r3, #56]	; 0x38
 801088e:	9b07      	ldr	r3, [sp, #28]
 8010890:	2b0e      	cmp	r3, #14
 8010892:	d900      	bls.n	8010896 <_dtoa_r+0x296>
 8010894:	e0e3      	b.n	8010a5e <_dtoa_r+0x45e>
 8010896:	2c00      	cmp	r4, #0
 8010898:	d100      	bne.n	801089c <_dtoa_r+0x29c>
 801089a:	e0e0      	b.n	8010a5e <_dtoa_r+0x45e>
 801089c:	9b03      	ldr	r3, [sp, #12]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	dd62      	ble.n	8010968 <_dtoa_r+0x368>
 80108a2:	210f      	movs	r1, #15
 80108a4:	9a03      	ldr	r2, [sp, #12]
 80108a6:	4b29      	ldr	r3, [pc, #164]	; (801094c <_dtoa_r+0x34c>)
 80108a8:	400a      	ands	r2, r1
 80108aa:	00d2      	lsls	r2, r2, #3
 80108ac:	189b      	adds	r3, r3, r2
 80108ae:	681e      	ldr	r6, [r3, #0]
 80108b0:	685f      	ldr	r7, [r3, #4]
 80108b2:	9b03      	ldr	r3, [sp, #12]
 80108b4:	2402      	movs	r4, #2
 80108b6:	111d      	asrs	r5, r3, #4
 80108b8:	05db      	lsls	r3, r3, #23
 80108ba:	d50a      	bpl.n	80108d2 <_dtoa_r+0x2d2>
 80108bc:	4b29      	ldr	r3, [pc, #164]	; (8010964 <_dtoa_r+0x364>)
 80108be:	400d      	ands	r5, r1
 80108c0:	6a1a      	ldr	r2, [r3, #32]
 80108c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80108c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80108c8:	f7f0 fad6 	bl	8000e78 <__aeabi_ddiv>
 80108cc:	9008      	str	r0, [sp, #32]
 80108ce:	9109      	str	r1, [sp, #36]	; 0x24
 80108d0:	3401      	adds	r4, #1
 80108d2:	4b24      	ldr	r3, [pc, #144]	; (8010964 <_dtoa_r+0x364>)
 80108d4:	930e      	str	r3, [sp, #56]	; 0x38
 80108d6:	2d00      	cmp	r5, #0
 80108d8:	d108      	bne.n	80108ec <_dtoa_r+0x2ec>
 80108da:	9808      	ldr	r0, [sp, #32]
 80108dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108de:	0032      	movs	r2, r6
 80108e0:	003b      	movs	r3, r7
 80108e2:	f7f0 fac9 	bl	8000e78 <__aeabi_ddiv>
 80108e6:	9008      	str	r0, [sp, #32]
 80108e8:	9109      	str	r1, [sp, #36]	; 0x24
 80108ea:	e058      	b.n	801099e <_dtoa_r+0x39e>
 80108ec:	2301      	movs	r3, #1
 80108ee:	421d      	tst	r5, r3
 80108f0:	d009      	beq.n	8010906 <_dtoa_r+0x306>
 80108f2:	18e4      	adds	r4, r4, r3
 80108f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108f6:	0030      	movs	r0, r6
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	0039      	movs	r1, r7
 80108fe:	f7f0 feb5 	bl	800166c <__aeabi_dmul>
 8010902:	0006      	movs	r6, r0
 8010904:	000f      	movs	r7, r1
 8010906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010908:	106d      	asrs	r5, r5, #1
 801090a:	3308      	adds	r3, #8
 801090c:	e7e2      	b.n	80108d4 <_dtoa_r+0x2d4>
 801090e:	46c0      	nop			; (mov r8, r8)
 8010910:	7ff00000 	.word	0x7ff00000
 8010914:	0000270f 	.word	0x0000270f
 8010918:	08014c05 	.word	0x08014c05
 801091c:	08014c08 	.word	0x08014c08
 8010920:	08014b76 	.word	0x08014b76
 8010924:	08014b77 	.word	0x08014b77
 8010928:	3ff00000 	.word	0x3ff00000
 801092c:	fffffc01 	.word	0xfffffc01
 8010930:	3ff80000 	.word	0x3ff80000
 8010934:	636f4361 	.word	0x636f4361
 8010938:	3fd287a7 	.word	0x3fd287a7
 801093c:	8b60c8b3 	.word	0x8b60c8b3
 8010940:	3fc68a28 	.word	0x3fc68a28
 8010944:	509f79fb 	.word	0x509f79fb
 8010948:	3fd34413 	.word	0x3fd34413
 801094c:	08014a70 	.word	0x08014a70
 8010950:	00000432 	.word	0x00000432
 8010954:	00000412 	.word	0x00000412
 8010958:	fe100000 	.word	0xfe100000
 801095c:	08014979 	.word	0x08014979
 8010960:	08014c09 	.word	0x08014c09
 8010964:	08014a48 	.word	0x08014a48
 8010968:	9b03      	ldr	r3, [sp, #12]
 801096a:	2402      	movs	r4, #2
 801096c:	2b00      	cmp	r3, #0
 801096e:	d016      	beq.n	801099e <_dtoa_r+0x39e>
 8010970:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010972:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010974:	220f      	movs	r2, #15
 8010976:	425d      	negs	r5, r3
 8010978:	402a      	ands	r2, r5
 801097a:	4bdd      	ldr	r3, [pc, #884]	; (8010cf0 <_dtoa_r+0x6f0>)
 801097c:	00d2      	lsls	r2, r2, #3
 801097e:	189b      	adds	r3, r3, r2
 8010980:	681a      	ldr	r2, [r3, #0]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	f7f0 fe72 	bl	800166c <__aeabi_dmul>
 8010988:	2701      	movs	r7, #1
 801098a:	2300      	movs	r3, #0
 801098c:	9008      	str	r0, [sp, #32]
 801098e:	9109      	str	r1, [sp, #36]	; 0x24
 8010990:	4ed8      	ldr	r6, [pc, #864]	; (8010cf4 <_dtoa_r+0x6f4>)
 8010992:	112d      	asrs	r5, r5, #4
 8010994:	2d00      	cmp	r5, #0
 8010996:	d000      	beq.n	801099a <_dtoa_r+0x39a>
 8010998:	e091      	b.n	8010abe <_dtoa_r+0x4be>
 801099a:	2b00      	cmp	r3, #0
 801099c:	d1a3      	bne.n	80108e6 <_dtoa_r+0x2e6>
 801099e:	9e08      	ldr	r6, [sp, #32]
 80109a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80109a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d100      	bne.n	80109aa <_dtoa_r+0x3aa>
 80109a8:	e094      	b.n	8010ad4 <_dtoa_r+0x4d4>
 80109aa:	2200      	movs	r2, #0
 80109ac:	0030      	movs	r0, r6
 80109ae:	0039      	movs	r1, r7
 80109b0:	4bd1      	ldr	r3, [pc, #836]	; (8010cf8 <_dtoa_r+0x6f8>)
 80109b2:	f7ef fd4f 	bl	8000454 <__aeabi_dcmplt>
 80109b6:	2800      	cmp	r0, #0
 80109b8:	d100      	bne.n	80109bc <_dtoa_r+0x3bc>
 80109ba:	e08b      	b.n	8010ad4 <_dtoa_r+0x4d4>
 80109bc:	9b07      	ldr	r3, [sp, #28]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d100      	bne.n	80109c4 <_dtoa_r+0x3c4>
 80109c2:	e087      	b.n	8010ad4 <_dtoa_r+0x4d4>
 80109c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	dd45      	ble.n	8010a56 <_dtoa_r+0x456>
 80109ca:	9b03      	ldr	r3, [sp, #12]
 80109cc:	2200      	movs	r2, #0
 80109ce:	3b01      	subs	r3, #1
 80109d0:	930e      	str	r3, [sp, #56]	; 0x38
 80109d2:	0030      	movs	r0, r6
 80109d4:	4bc9      	ldr	r3, [pc, #804]	; (8010cfc <_dtoa_r+0x6fc>)
 80109d6:	0039      	movs	r1, r7
 80109d8:	f7f0 fe48 	bl	800166c <__aeabi_dmul>
 80109dc:	9008      	str	r0, [sp, #32]
 80109de:	9109      	str	r1, [sp, #36]	; 0x24
 80109e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109e2:	3401      	adds	r4, #1
 80109e4:	0020      	movs	r0, r4
 80109e6:	9e08      	ldr	r6, [sp, #32]
 80109e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80109ea:	9312      	str	r3, [sp, #72]	; 0x48
 80109ec:	f7f1 fcd6 	bl	800239c <__aeabi_i2d>
 80109f0:	0032      	movs	r2, r6
 80109f2:	003b      	movs	r3, r7
 80109f4:	f7f0 fe3a 	bl	800166c <__aeabi_dmul>
 80109f8:	2200      	movs	r2, #0
 80109fa:	4bc1      	ldr	r3, [pc, #772]	; (8010d00 <_dtoa_r+0x700>)
 80109fc:	f7ef fedc 	bl	80007b8 <__aeabi_dadd>
 8010a00:	4ac0      	ldr	r2, [pc, #768]	; (8010d04 <_dtoa_r+0x704>)
 8010a02:	9014      	str	r0, [sp, #80]	; 0x50
 8010a04:	9115      	str	r1, [sp, #84]	; 0x54
 8010a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a08:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010a0a:	4694      	mov	ip, r2
 8010a0c:	9308      	str	r3, [sp, #32]
 8010a0e:	9409      	str	r4, [sp, #36]	; 0x24
 8010a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a12:	4463      	add	r3, ip
 8010a14:	9318      	str	r3, [sp, #96]	; 0x60
 8010a16:	9309      	str	r3, [sp, #36]	; 0x24
 8010a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d15e      	bne.n	8010adc <_dtoa_r+0x4dc>
 8010a1e:	2200      	movs	r2, #0
 8010a20:	4bb9      	ldr	r3, [pc, #740]	; (8010d08 <_dtoa_r+0x708>)
 8010a22:	0030      	movs	r0, r6
 8010a24:	0039      	movs	r1, r7
 8010a26:	f7f1 f8e3 	bl	8001bf0 <__aeabi_dsub>
 8010a2a:	9a08      	ldr	r2, [sp, #32]
 8010a2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010a2e:	0004      	movs	r4, r0
 8010a30:	000d      	movs	r5, r1
 8010a32:	f7ef fd23 	bl	800047c <__aeabi_dcmpgt>
 8010a36:	2800      	cmp	r0, #0
 8010a38:	d000      	beq.n	8010a3c <_dtoa_r+0x43c>
 8010a3a:	e2b3      	b.n	8010fa4 <_dtoa_r+0x9a4>
 8010a3c:	48b3      	ldr	r0, [pc, #716]	; (8010d0c <_dtoa_r+0x70c>)
 8010a3e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010a40:	4684      	mov	ip, r0
 8010a42:	4461      	add	r1, ip
 8010a44:	000b      	movs	r3, r1
 8010a46:	0020      	movs	r0, r4
 8010a48:	0029      	movs	r1, r5
 8010a4a:	9a08      	ldr	r2, [sp, #32]
 8010a4c:	f7ef fd02 	bl	8000454 <__aeabi_dcmplt>
 8010a50:	2800      	cmp	r0, #0
 8010a52:	d000      	beq.n	8010a56 <_dtoa_r+0x456>
 8010a54:	e2a3      	b.n	8010f9e <_dtoa_r+0x99e>
 8010a56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a58:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010a5a:	9308      	str	r3, [sp, #32]
 8010a5c:	9409      	str	r4, [sp, #36]	; 0x24
 8010a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	da00      	bge.n	8010a66 <_dtoa_r+0x466>
 8010a64:	e179      	b.n	8010d5a <_dtoa_r+0x75a>
 8010a66:	9a03      	ldr	r2, [sp, #12]
 8010a68:	2a0e      	cmp	r2, #14
 8010a6a:	dd00      	ble.n	8010a6e <_dtoa_r+0x46e>
 8010a6c:	e175      	b.n	8010d5a <_dtoa_r+0x75a>
 8010a6e:	4ba0      	ldr	r3, [pc, #640]	; (8010cf0 <_dtoa_r+0x6f0>)
 8010a70:	00d2      	lsls	r2, r2, #3
 8010a72:	189b      	adds	r3, r3, r2
 8010a74:	681e      	ldr	r6, [r3, #0]
 8010a76:	685f      	ldr	r7, [r3, #4]
 8010a78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	db00      	blt.n	8010a80 <_dtoa_r+0x480>
 8010a7e:	e0e5      	b.n	8010c4c <_dtoa_r+0x64c>
 8010a80:	9b07      	ldr	r3, [sp, #28]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	dd00      	ble.n	8010a88 <_dtoa_r+0x488>
 8010a86:	e0e1      	b.n	8010c4c <_dtoa_r+0x64c>
 8010a88:	d000      	beq.n	8010a8c <_dtoa_r+0x48c>
 8010a8a:	e288      	b.n	8010f9e <_dtoa_r+0x99e>
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	0030      	movs	r0, r6
 8010a90:	0039      	movs	r1, r7
 8010a92:	4b9d      	ldr	r3, [pc, #628]	; (8010d08 <_dtoa_r+0x708>)
 8010a94:	f7f0 fdea 	bl	800166c <__aeabi_dmul>
 8010a98:	9a08      	ldr	r2, [sp, #32]
 8010a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a9c:	f7ef fcf8 	bl	8000490 <__aeabi_dcmpge>
 8010aa0:	9e07      	ldr	r6, [sp, #28]
 8010aa2:	0037      	movs	r7, r6
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d000      	beq.n	8010aaa <_dtoa_r+0x4aa>
 8010aa8:	e25f      	b.n	8010f6a <_dtoa_r+0x96a>
 8010aaa:	9b06      	ldr	r3, [sp, #24]
 8010aac:	9a06      	ldr	r2, [sp, #24]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	9308      	str	r3, [sp, #32]
 8010ab2:	2331      	movs	r3, #49	; 0x31
 8010ab4:	7013      	strb	r3, [r2, #0]
 8010ab6:	9b03      	ldr	r3, [sp, #12]
 8010ab8:	3301      	adds	r3, #1
 8010aba:	9303      	str	r3, [sp, #12]
 8010abc:	e25a      	b.n	8010f74 <_dtoa_r+0x974>
 8010abe:	423d      	tst	r5, r7
 8010ac0:	d005      	beq.n	8010ace <_dtoa_r+0x4ce>
 8010ac2:	6832      	ldr	r2, [r6, #0]
 8010ac4:	6873      	ldr	r3, [r6, #4]
 8010ac6:	f7f0 fdd1 	bl	800166c <__aeabi_dmul>
 8010aca:	003b      	movs	r3, r7
 8010acc:	3401      	adds	r4, #1
 8010ace:	106d      	asrs	r5, r5, #1
 8010ad0:	3608      	adds	r6, #8
 8010ad2:	e75f      	b.n	8010994 <_dtoa_r+0x394>
 8010ad4:	9b03      	ldr	r3, [sp, #12]
 8010ad6:	930e      	str	r3, [sp, #56]	; 0x38
 8010ad8:	9b07      	ldr	r3, [sp, #28]
 8010ada:	e783      	b.n	80109e4 <_dtoa_r+0x3e4>
 8010adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ade:	4b84      	ldr	r3, [pc, #528]	; (8010cf0 <_dtoa_r+0x6f0>)
 8010ae0:	3a01      	subs	r2, #1
 8010ae2:	00d2      	lsls	r2, r2, #3
 8010ae4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010ae6:	189b      	adds	r3, r3, r2
 8010ae8:	9c08      	ldr	r4, [sp, #32]
 8010aea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	2900      	cmp	r1, #0
 8010af2:	d051      	beq.n	8010b98 <_dtoa_r+0x598>
 8010af4:	2000      	movs	r0, #0
 8010af6:	4986      	ldr	r1, [pc, #536]	; (8010d10 <_dtoa_r+0x710>)
 8010af8:	f7f0 f9be 	bl	8000e78 <__aeabi_ddiv>
 8010afc:	0022      	movs	r2, r4
 8010afe:	002b      	movs	r3, r5
 8010b00:	f7f1 f876 	bl	8001bf0 <__aeabi_dsub>
 8010b04:	9a06      	ldr	r2, [sp, #24]
 8010b06:	0004      	movs	r4, r0
 8010b08:	4694      	mov	ip, r2
 8010b0a:	000d      	movs	r5, r1
 8010b0c:	9b06      	ldr	r3, [sp, #24]
 8010b0e:	9314      	str	r3, [sp, #80]	; 0x50
 8010b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b12:	4463      	add	r3, ip
 8010b14:	9318      	str	r3, [sp, #96]	; 0x60
 8010b16:	0039      	movs	r1, r7
 8010b18:	0030      	movs	r0, r6
 8010b1a:	f7f1 fc09 	bl	8002330 <__aeabi_d2iz>
 8010b1e:	9012      	str	r0, [sp, #72]	; 0x48
 8010b20:	f7f1 fc3c 	bl	800239c <__aeabi_i2d>
 8010b24:	0002      	movs	r2, r0
 8010b26:	000b      	movs	r3, r1
 8010b28:	0030      	movs	r0, r6
 8010b2a:	0039      	movs	r1, r7
 8010b2c:	f7f1 f860 	bl	8001bf0 <__aeabi_dsub>
 8010b30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b34:	3301      	adds	r3, #1
 8010b36:	9308      	str	r3, [sp, #32]
 8010b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b3a:	0006      	movs	r6, r0
 8010b3c:	3330      	adds	r3, #48	; 0x30
 8010b3e:	7013      	strb	r3, [r2, #0]
 8010b40:	0022      	movs	r2, r4
 8010b42:	002b      	movs	r3, r5
 8010b44:	000f      	movs	r7, r1
 8010b46:	f7ef fc85 	bl	8000454 <__aeabi_dcmplt>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d174      	bne.n	8010c38 <_dtoa_r+0x638>
 8010b4e:	0032      	movs	r2, r6
 8010b50:	003b      	movs	r3, r7
 8010b52:	2000      	movs	r0, #0
 8010b54:	4968      	ldr	r1, [pc, #416]	; (8010cf8 <_dtoa_r+0x6f8>)
 8010b56:	f7f1 f84b 	bl	8001bf0 <__aeabi_dsub>
 8010b5a:	0022      	movs	r2, r4
 8010b5c:	002b      	movs	r3, r5
 8010b5e:	f7ef fc79 	bl	8000454 <__aeabi_dcmplt>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d000      	beq.n	8010b68 <_dtoa_r+0x568>
 8010b66:	e0d7      	b.n	8010d18 <_dtoa_r+0x718>
 8010b68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010b6a:	9a08      	ldr	r2, [sp, #32]
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d100      	bne.n	8010b72 <_dtoa_r+0x572>
 8010b70:	e771      	b.n	8010a56 <_dtoa_r+0x456>
 8010b72:	2200      	movs	r2, #0
 8010b74:	0020      	movs	r0, r4
 8010b76:	0029      	movs	r1, r5
 8010b78:	4b60      	ldr	r3, [pc, #384]	; (8010cfc <_dtoa_r+0x6fc>)
 8010b7a:	f7f0 fd77 	bl	800166c <__aeabi_dmul>
 8010b7e:	4b5f      	ldr	r3, [pc, #380]	; (8010cfc <_dtoa_r+0x6fc>)
 8010b80:	0004      	movs	r4, r0
 8010b82:	000d      	movs	r5, r1
 8010b84:	0030      	movs	r0, r6
 8010b86:	0039      	movs	r1, r7
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f7f0 fd6f 	bl	800166c <__aeabi_dmul>
 8010b8e:	9b08      	ldr	r3, [sp, #32]
 8010b90:	0006      	movs	r6, r0
 8010b92:	000f      	movs	r7, r1
 8010b94:	9314      	str	r3, [sp, #80]	; 0x50
 8010b96:	e7be      	b.n	8010b16 <_dtoa_r+0x516>
 8010b98:	0020      	movs	r0, r4
 8010b9a:	0029      	movs	r1, r5
 8010b9c:	f7f0 fd66 	bl	800166c <__aeabi_dmul>
 8010ba0:	9a06      	ldr	r2, [sp, #24]
 8010ba2:	9b06      	ldr	r3, [sp, #24]
 8010ba4:	4694      	mov	ip, r2
 8010ba6:	9308      	str	r3, [sp, #32]
 8010ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010baa:	9014      	str	r0, [sp, #80]	; 0x50
 8010bac:	9115      	str	r1, [sp, #84]	; 0x54
 8010bae:	4463      	add	r3, ip
 8010bb0:	9319      	str	r3, [sp, #100]	; 0x64
 8010bb2:	0030      	movs	r0, r6
 8010bb4:	0039      	movs	r1, r7
 8010bb6:	f7f1 fbbb 	bl	8002330 <__aeabi_d2iz>
 8010bba:	9018      	str	r0, [sp, #96]	; 0x60
 8010bbc:	f7f1 fbee 	bl	800239c <__aeabi_i2d>
 8010bc0:	0002      	movs	r2, r0
 8010bc2:	000b      	movs	r3, r1
 8010bc4:	0030      	movs	r0, r6
 8010bc6:	0039      	movs	r1, r7
 8010bc8:	f7f1 f812 	bl	8001bf0 <__aeabi_dsub>
 8010bcc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010bce:	9b08      	ldr	r3, [sp, #32]
 8010bd0:	3630      	adds	r6, #48	; 0x30
 8010bd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010bd4:	701e      	strb	r6, [r3, #0]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	0004      	movs	r4, r0
 8010bda:	000d      	movs	r5, r1
 8010bdc:	9308      	str	r3, [sp, #32]
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d12d      	bne.n	8010c3e <_dtoa_r+0x63e>
 8010be2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010be4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010be6:	9a06      	ldr	r2, [sp, #24]
 8010be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bea:	4694      	mov	ip, r2
 8010bec:	4463      	add	r3, ip
 8010bee:	2200      	movs	r2, #0
 8010bf0:	9308      	str	r3, [sp, #32]
 8010bf2:	4b47      	ldr	r3, [pc, #284]	; (8010d10 <_dtoa_r+0x710>)
 8010bf4:	f7ef fde0 	bl	80007b8 <__aeabi_dadd>
 8010bf8:	0002      	movs	r2, r0
 8010bfa:	000b      	movs	r3, r1
 8010bfc:	0020      	movs	r0, r4
 8010bfe:	0029      	movs	r1, r5
 8010c00:	f7ef fc3c 	bl	800047c <__aeabi_dcmpgt>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	d000      	beq.n	8010c0a <_dtoa_r+0x60a>
 8010c08:	e086      	b.n	8010d18 <_dtoa_r+0x718>
 8010c0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c0e:	2000      	movs	r0, #0
 8010c10:	493f      	ldr	r1, [pc, #252]	; (8010d10 <_dtoa_r+0x710>)
 8010c12:	f7f0 ffed 	bl	8001bf0 <__aeabi_dsub>
 8010c16:	0002      	movs	r2, r0
 8010c18:	000b      	movs	r3, r1
 8010c1a:	0020      	movs	r0, r4
 8010c1c:	0029      	movs	r1, r5
 8010c1e:	f7ef fc19 	bl	8000454 <__aeabi_dcmplt>
 8010c22:	2800      	cmp	r0, #0
 8010c24:	d100      	bne.n	8010c28 <_dtoa_r+0x628>
 8010c26:	e716      	b.n	8010a56 <_dtoa_r+0x456>
 8010c28:	9b08      	ldr	r3, [sp, #32]
 8010c2a:	001a      	movs	r2, r3
 8010c2c:	3a01      	subs	r2, #1
 8010c2e:	9208      	str	r2, [sp, #32]
 8010c30:	7812      	ldrb	r2, [r2, #0]
 8010c32:	2a30      	cmp	r2, #48	; 0x30
 8010c34:	d0f8      	beq.n	8010c28 <_dtoa_r+0x628>
 8010c36:	9308      	str	r3, [sp, #32]
 8010c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c3a:	9303      	str	r3, [sp, #12]
 8010c3c:	e046      	b.n	8010ccc <_dtoa_r+0x6cc>
 8010c3e:	2200      	movs	r2, #0
 8010c40:	4b2e      	ldr	r3, [pc, #184]	; (8010cfc <_dtoa_r+0x6fc>)
 8010c42:	f7f0 fd13 	bl	800166c <__aeabi_dmul>
 8010c46:	0006      	movs	r6, r0
 8010c48:	000f      	movs	r7, r1
 8010c4a:	e7b2      	b.n	8010bb2 <_dtoa_r+0x5b2>
 8010c4c:	9b06      	ldr	r3, [sp, #24]
 8010c4e:	9a06      	ldr	r2, [sp, #24]
 8010c50:	930a      	str	r3, [sp, #40]	; 0x28
 8010c52:	9b07      	ldr	r3, [sp, #28]
 8010c54:	9c08      	ldr	r4, [sp, #32]
 8010c56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	189b      	adds	r3, r3, r2
 8010c5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c5e:	0032      	movs	r2, r6
 8010c60:	003b      	movs	r3, r7
 8010c62:	0020      	movs	r0, r4
 8010c64:	0029      	movs	r1, r5
 8010c66:	f7f0 f907 	bl	8000e78 <__aeabi_ddiv>
 8010c6a:	f7f1 fb61 	bl	8002330 <__aeabi_d2iz>
 8010c6e:	9007      	str	r0, [sp, #28]
 8010c70:	f7f1 fb94 	bl	800239c <__aeabi_i2d>
 8010c74:	0032      	movs	r2, r6
 8010c76:	003b      	movs	r3, r7
 8010c78:	f7f0 fcf8 	bl	800166c <__aeabi_dmul>
 8010c7c:	0002      	movs	r2, r0
 8010c7e:	000b      	movs	r3, r1
 8010c80:	0020      	movs	r0, r4
 8010c82:	0029      	movs	r1, r5
 8010c84:	f7f0 ffb4 	bl	8001bf0 <__aeabi_dsub>
 8010c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c8a:	001a      	movs	r2, r3
 8010c8c:	3201      	adds	r2, #1
 8010c8e:	920a      	str	r2, [sp, #40]	; 0x28
 8010c90:	9208      	str	r2, [sp, #32]
 8010c92:	9a07      	ldr	r2, [sp, #28]
 8010c94:	3230      	adds	r2, #48	; 0x30
 8010c96:	701a      	strb	r2, [r3, #0]
 8010c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d14f      	bne.n	8010d3e <_dtoa_r+0x73e>
 8010c9e:	0002      	movs	r2, r0
 8010ca0:	000b      	movs	r3, r1
 8010ca2:	f7ef fd89 	bl	80007b8 <__aeabi_dadd>
 8010ca6:	0032      	movs	r2, r6
 8010ca8:	003b      	movs	r3, r7
 8010caa:	0004      	movs	r4, r0
 8010cac:	000d      	movs	r5, r1
 8010cae:	f7ef fbe5 	bl	800047c <__aeabi_dcmpgt>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d12e      	bne.n	8010d14 <_dtoa_r+0x714>
 8010cb6:	0032      	movs	r2, r6
 8010cb8:	003b      	movs	r3, r7
 8010cba:	0020      	movs	r0, r4
 8010cbc:	0029      	movs	r1, r5
 8010cbe:	f7ef fbc3 	bl	8000448 <__aeabi_dcmpeq>
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	d002      	beq.n	8010ccc <_dtoa_r+0x6cc>
 8010cc6:	9b07      	ldr	r3, [sp, #28]
 8010cc8:	07de      	lsls	r6, r3, #31
 8010cca:	d423      	bmi.n	8010d14 <_dtoa_r+0x714>
 8010ccc:	9905      	ldr	r1, [sp, #20]
 8010cce:	9804      	ldr	r0, [sp, #16]
 8010cd0:	f7fc f8fe 	bl	800ced0 <_Bfree>
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	9a08      	ldr	r2, [sp, #32]
 8010cd8:	7013      	strb	r3, [r2, #0]
 8010cda:	9b03      	ldr	r3, [sp, #12]
 8010cdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010cde:	3301      	adds	r3, #1
 8010ce0:	6013      	str	r3, [r2, #0]
 8010ce2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d100      	bne.n	8010cea <_dtoa_r+0x6ea>
 8010ce8:	e4bd      	b.n	8010666 <_dtoa_r+0x66>
 8010cea:	9a08      	ldr	r2, [sp, #32]
 8010cec:	601a      	str	r2, [r3, #0]
 8010cee:	e4ba      	b.n	8010666 <_dtoa_r+0x66>
 8010cf0:	08014a70 	.word	0x08014a70
 8010cf4:	08014a48 	.word	0x08014a48
 8010cf8:	3ff00000 	.word	0x3ff00000
 8010cfc:	40240000 	.word	0x40240000
 8010d00:	401c0000 	.word	0x401c0000
 8010d04:	fcc00000 	.word	0xfcc00000
 8010d08:	40140000 	.word	0x40140000
 8010d0c:	7cc00000 	.word	0x7cc00000
 8010d10:	3fe00000 	.word	0x3fe00000
 8010d14:	9b03      	ldr	r3, [sp, #12]
 8010d16:	930e      	str	r3, [sp, #56]	; 0x38
 8010d18:	9b08      	ldr	r3, [sp, #32]
 8010d1a:	9308      	str	r3, [sp, #32]
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	781a      	ldrb	r2, [r3, #0]
 8010d20:	2a39      	cmp	r2, #57	; 0x39
 8010d22:	d108      	bne.n	8010d36 <_dtoa_r+0x736>
 8010d24:	9a06      	ldr	r2, [sp, #24]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d1f7      	bne.n	8010d1a <_dtoa_r+0x71a>
 8010d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d2c:	9906      	ldr	r1, [sp, #24]
 8010d2e:	3201      	adds	r2, #1
 8010d30:	920e      	str	r2, [sp, #56]	; 0x38
 8010d32:	2230      	movs	r2, #48	; 0x30
 8010d34:	700a      	strb	r2, [r1, #0]
 8010d36:	781a      	ldrb	r2, [r3, #0]
 8010d38:	3201      	adds	r2, #1
 8010d3a:	701a      	strb	r2, [r3, #0]
 8010d3c:	e77c      	b.n	8010c38 <_dtoa_r+0x638>
 8010d3e:	2200      	movs	r2, #0
 8010d40:	4ba9      	ldr	r3, [pc, #676]	; (8010fe8 <_dtoa_r+0x9e8>)
 8010d42:	f7f0 fc93 	bl	800166c <__aeabi_dmul>
 8010d46:	2200      	movs	r2, #0
 8010d48:	2300      	movs	r3, #0
 8010d4a:	0004      	movs	r4, r0
 8010d4c:	000d      	movs	r5, r1
 8010d4e:	f7ef fb7b 	bl	8000448 <__aeabi_dcmpeq>
 8010d52:	2800      	cmp	r0, #0
 8010d54:	d100      	bne.n	8010d58 <_dtoa_r+0x758>
 8010d56:	e782      	b.n	8010c5e <_dtoa_r+0x65e>
 8010d58:	e7b8      	b.n	8010ccc <_dtoa_r+0x6cc>
 8010d5a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010d5c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010d5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010d60:	2f00      	cmp	r7, #0
 8010d62:	d012      	beq.n	8010d8a <_dtoa_r+0x78a>
 8010d64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010d66:	2a01      	cmp	r2, #1
 8010d68:	dc6e      	bgt.n	8010e48 <_dtoa_r+0x848>
 8010d6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d6c:	2a00      	cmp	r2, #0
 8010d6e:	d065      	beq.n	8010e3c <_dtoa_r+0x83c>
 8010d70:	4a9e      	ldr	r2, [pc, #632]	; (8010fec <_dtoa_r+0x9ec>)
 8010d72:	189b      	adds	r3, r3, r2
 8010d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d76:	2101      	movs	r1, #1
 8010d78:	18d2      	adds	r2, r2, r3
 8010d7a:	920a      	str	r2, [sp, #40]	; 0x28
 8010d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d7e:	9804      	ldr	r0, [sp, #16]
 8010d80:	18d3      	adds	r3, r2, r3
 8010d82:	930c      	str	r3, [sp, #48]	; 0x30
 8010d84:	f7fc f986 	bl	800d094 <__i2b>
 8010d88:	0007      	movs	r7, r0
 8010d8a:	2c00      	cmp	r4, #0
 8010d8c:	d00e      	beq.n	8010dac <_dtoa_r+0x7ac>
 8010d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	dd0b      	ble.n	8010dac <_dtoa_r+0x7ac>
 8010d94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d96:	0023      	movs	r3, r4
 8010d98:	4294      	cmp	r4, r2
 8010d9a:	dd00      	ble.n	8010d9e <_dtoa_r+0x79e>
 8010d9c:	0013      	movs	r3, r2
 8010d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010da0:	1ae4      	subs	r4, r4, r3
 8010da2:	1ad2      	subs	r2, r2, r3
 8010da4:	920a      	str	r2, [sp, #40]	; 0x28
 8010da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	930c      	str	r3, [sp, #48]	; 0x30
 8010dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d01e      	beq.n	8010df0 <_dtoa_r+0x7f0>
 8010db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d05c      	beq.n	8010e72 <_dtoa_r+0x872>
 8010db8:	2d00      	cmp	r5, #0
 8010dba:	dd10      	ble.n	8010dde <_dtoa_r+0x7de>
 8010dbc:	0039      	movs	r1, r7
 8010dbe:	002a      	movs	r2, r5
 8010dc0:	9804      	ldr	r0, [sp, #16]
 8010dc2:	f7fc fa2f 	bl	800d224 <__pow5mult>
 8010dc6:	9a05      	ldr	r2, [sp, #20]
 8010dc8:	0001      	movs	r1, r0
 8010dca:	0007      	movs	r7, r0
 8010dcc:	9804      	ldr	r0, [sp, #16]
 8010dce:	f7fc f979 	bl	800d0c4 <__multiply>
 8010dd2:	0006      	movs	r6, r0
 8010dd4:	9905      	ldr	r1, [sp, #20]
 8010dd6:	9804      	ldr	r0, [sp, #16]
 8010dd8:	f7fc f87a 	bl	800ced0 <_Bfree>
 8010ddc:	9605      	str	r6, [sp, #20]
 8010dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010de0:	1b5a      	subs	r2, r3, r5
 8010de2:	42ab      	cmp	r3, r5
 8010de4:	d004      	beq.n	8010df0 <_dtoa_r+0x7f0>
 8010de6:	9905      	ldr	r1, [sp, #20]
 8010de8:	9804      	ldr	r0, [sp, #16]
 8010dea:	f7fc fa1b 	bl	800d224 <__pow5mult>
 8010dee:	9005      	str	r0, [sp, #20]
 8010df0:	2101      	movs	r1, #1
 8010df2:	9804      	ldr	r0, [sp, #16]
 8010df4:	f7fc f94e 	bl	800d094 <__i2b>
 8010df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010dfa:	0006      	movs	r6, r0
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	dd3a      	ble.n	8010e76 <_dtoa_r+0x876>
 8010e00:	001a      	movs	r2, r3
 8010e02:	0001      	movs	r1, r0
 8010e04:	9804      	ldr	r0, [sp, #16]
 8010e06:	f7fc fa0d 	bl	800d224 <__pow5mult>
 8010e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e0c:	0006      	movs	r6, r0
 8010e0e:	2500      	movs	r5, #0
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	dc38      	bgt.n	8010e86 <_dtoa_r+0x886>
 8010e14:	2500      	movs	r5, #0
 8010e16:	9b08      	ldr	r3, [sp, #32]
 8010e18:	42ab      	cmp	r3, r5
 8010e1a:	d130      	bne.n	8010e7e <_dtoa_r+0x87e>
 8010e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e1e:	031b      	lsls	r3, r3, #12
 8010e20:	42ab      	cmp	r3, r5
 8010e22:	d12c      	bne.n	8010e7e <_dtoa_r+0x87e>
 8010e24:	4b72      	ldr	r3, [pc, #456]	; (8010ff0 <_dtoa_r+0x9f0>)
 8010e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e28:	4213      	tst	r3, r2
 8010e2a:	d028      	beq.n	8010e7e <_dtoa_r+0x87e>
 8010e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e2e:	3501      	adds	r5, #1
 8010e30:	3301      	adds	r3, #1
 8010e32:	930a      	str	r3, [sp, #40]	; 0x28
 8010e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e36:	3301      	adds	r3, #1
 8010e38:	930c      	str	r3, [sp, #48]	; 0x30
 8010e3a:	e020      	b.n	8010e7e <_dtoa_r+0x87e>
 8010e3c:	2336      	movs	r3, #54	; 0x36
 8010e3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010e40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010e42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e44:	1a9b      	subs	r3, r3, r2
 8010e46:	e795      	b.n	8010d74 <_dtoa_r+0x774>
 8010e48:	9b07      	ldr	r3, [sp, #28]
 8010e4a:	1e5d      	subs	r5, r3, #1
 8010e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e4e:	42ab      	cmp	r3, r5
 8010e50:	db07      	blt.n	8010e62 <_dtoa_r+0x862>
 8010e52:	1b5d      	subs	r5, r3, r5
 8010e54:	9b07      	ldr	r3, [sp, #28]
 8010e56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	da8b      	bge.n	8010d74 <_dtoa_r+0x774>
 8010e5c:	1ae4      	subs	r4, r4, r3
 8010e5e:	2300      	movs	r3, #0
 8010e60:	e788      	b.n	8010d74 <_dtoa_r+0x774>
 8010e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e66:	1aeb      	subs	r3, r5, r3
 8010e68:	18d3      	adds	r3, r2, r3
 8010e6a:	950d      	str	r5, [sp, #52]	; 0x34
 8010e6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8010e6e:	2500      	movs	r5, #0
 8010e70:	e7f0      	b.n	8010e54 <_dtoa_r+0x854>
 8010e72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e74:	e7b7      	b.n	8010de6 <_dtoa_r+0x7e6>
 8010e76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e78:	2500      	movs	r5, #0
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	ddca      	ble.n	8010e14 <_dtoa_r+0x814>
 8010e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e80:	2001      	movs	r0, #1
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d008      	beq.n	8010e98 <_dtoa_r+0x898>
 8010e86:	6933      	ldr	r3, [r6, #16]
 8010e88:	3303      	adds	r3, #3
 8010e8a:	009b      	lsls	r3, r3, #2
 8010e8c:	18f3      	adds	r3, r6, r3
 8010e8e:	6858      	ldr	r0, [r3, #4]
 8010e90:	f7fc f8b8 	bl	800d004 <__hi0bits>
 8010e94:	2320      	movs	r3, #32
 8010e96:	1a18      	subs	r0, r3, r0
 8010e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e9a:	1818      	adds	r0, r3, r0
 8010e9c:	0002      	movs	r2, r0
 8010e9e:	231f      	movs	r3, #31
 8010ea0:	401a      	ands	r2, r3
 8010ea2:	4218      	tst	r0, r3
 8010ea4:	d047      	beq.n	8010f36 <_dtoa_r+0x936>
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	1a9b      	subs	r3, r3, r2
 8010eaa:	2b04      	cmp	r3, #4
 8010eac:	dd3f      	ble.n	8010f2e <_dtoa_r+0x92e>
 8010eae:	231c      	movs	r3, #28
 8010eb0:	1a9b      	subs	r3, r3, r2
 8010eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010eb4:	18e4      	adds	r4, r4, r3
 8010eb6:	18d2      	adds	r2, r2, r3
 8010eb8:	920a      	str	r2, [sp, #40]	; 0x28
 8010eba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ebc:	18d3      	adds	r3, r2, r3
 8010ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8010ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	dd05      	ble.n	8010ed2 <_dtoa_r+0x8d2>
 8010ec6:	001a      	movs	r2, r3
 8010ec8:	9905      	ldr	r1, [sp, #20]
 8010eca:	9804      	ldr	r0, [sp, #16]
 8010ecc:	f7fc f9ec 	bl	800d2a8 <__lshift>
 8010ed0:	9005      	str	r0, [sp, #20]
 8010ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	dd05      	ble.n	8010ee4 <_dtoa_r+0x8e4>
 8010ed8:	0031      	movs	r1, r6
 8010eda:	001a      	movs	r2, r3
 8010edc:	9804      	ldr	r0, [sp, #16]
 8010ede:	f7fc f9e3 	bl	800d2a8 <__lshift>
 8010ee2:	0006      	movs	r6, r0
 8010ee4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d027      	beq.n	8010f3a <_dtoa_r+0x93a>
 8010eea:	0031      	movs	r1, r6
 8010eec:	9805      	ldr	r0, [sp, #20]
 8010eee:	f7fc fa49 	bl	800d384 <__mcmp>
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	da21      	bge.n	8010f3a <_dtoa_r+0x93a>
 8010ef6:	9b03      	ldr	r3, [sp, #12]
 8010ef8:	220a      	movs	r2, #10
 8010efa:	3b01      	subs	r3, #1
 8010efc:	9303      	str	r3, [sp, #12]
 8010efe:	9905      	ldr	r1, [sp, #20]
 8010f00:	2300      	movs	r3, #0
 8010f02:	9804      	ldr	r0, [sp, #16]
 8010f04:	f7fb ffee 	bl	800cee4 <__multadd>
 8010f08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f0a:	9005      	str	r0, [sp, #20]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d100      	bne.n	8010f12 <_dtoa_r+0x912>
 8010f10:	e15d      	b.n	80111ce <_dtoa_r+0xbce>
 8010f12:	2300      	movs	r3, #0
 8010f14:	0039      	movs	r1, r7
 8010f16:	220a      	movs	r2, #10
 8010f18:	9804      	ldr	r0, [sp, #16]
 8010f1a:	f7fb ffe3 	bl	800cee4 <__multadd>
 8010f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f20:	0007      	movs	r7, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	dc49      	bgt.n	8010fba <_dtoa_r+0x9ba>
 8010f26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f28:	2b02      	cmp	r3, #2
 8010f2a:	dc0e      	bgt.n	8010f4a <_dtoa_r+0x94a>
 8010f2c:	e045      	b.n	8010fba <_dtoa_r+0x9ba>
 8010f2e:	2b04      	cmp	r3, #4
 8010f30:	d0c6      	beq.n	8010ec0 <_dtoa_r+0x8c0>
 8010f32:	331c      	adds	r3, #28
 8010f34:	e7bd      	b.n	8010eb2 <_dtoa_r+0x8b2>
 8010f36:	0013      	movs	r3, r2
 8010f38:	e7fb      	b.n	8010f32 <_dtoa_r+0x932>
 8010f3a:	9b07      	ldr	r3, [sp, #28]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	dc36      	bgt.n	8010fae <_dtoa_r+0x9ae>
 8010f40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f42:	2b02      	cmp	r3, #2
 8010f44:	dd33      	ble.n	8010fae <_dtoa_r+0x9ae>
 8010f46:	9b07      	ldr	r3, [sp, #28]
 8010f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d10c      	bne.n	8010f6a <_dtoa_r+0x96a>
 8010f50:	0031      	movs	r1, r6
 8010f52:	2205      	movs	r2, #5
 8010f54:	9804      	ldr	r0, [sp, #16]
 8010f56:	f7fb ffc5 	bl	800cee4 <__multadd>
 8010f5a:	0006      	movs	r6, r0
 8010f5c:	0001      	movs	r1, r0
 8010f5e:	9805      	ldr	r0, [sp, #20]
 8010f60:	f7fc fa10 	bl	800d384 <__mcmp>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	dd00      	ble.n	8010f6a <_dtoa_r+0x96a>
 8010f68:	e59f      	b.n	8010aaa <_dtoa_r+0x4aa>
 8010f6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010f6c:	43db      	mvns	r3, r3
 8010f6e:	9303      	str	r3, [sp, #12]
 8010f70:	9b06      	ldr	r3, [sp, #24]
 8010f72:	9308      	str	r3, [sp, #32]
 8010f74:	2500      	movs	r5, #0
 8010f76:	0031      	movs	r1, r6
 8010f78:	9804      	ldr	r0, [sp, #16]
 8010f7a:	f7fb ffa9 	bl	800ced0 <_Bfree>
 8010f7e:	2f00      	cmp	r7, #0
 8010f80:	d100      	bne.n	8010f84 <_dtoa_r+0x984>
 8010f82:	e6a3      	b.n	8010ccc <_dtoa_r+0x6cc>
 8010f84:	2d00      	cmp	r5, #0
 8010f86:	d005      	beq.n	8010f94 <_dtoa_r+0x994>
 8010f88:	42bd      	cmp	r5, r7
 8010f8a:	d003      	beq.n	8010f94 <_dtoa_r+0x994>
 8010f8c:	0029      	movs	r1, r5
 8010f8e:	9804      	ldr	r0, [sp, #16]
 8010f90:	f7fb ff9e 	bl	800ced0 <_Bfree>
 8010f94:	0039      	movs	r1, r7
 8010f96:	9804      	ldr	r0, [sp, #16]
 8010f98:	f7fb ff9a 	bl	800ced0 <_Bfree>
 8010f9c:	e696      	b.n	8010ccc <_dtoa_r+0x6cc>
 8010f9e:	2600      	movs	r6, #0
 8010fa0:	0037      	movs	r7, r6
 8010fa2:	e7e2      	b.n	8010f6a <_dtoa_r+0x96a>
 8010fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fa6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010fa8:	9303      	str	r3, [sp, #12]
 8010faa:	0037      	movs	r7, r6
 8010fac:	e57d      	b.n	8010aaa <_dtoa_r+0x4aa>
 8010fae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d100      	bne.n	8010fb6 <_dtoa_r+0x9b6>
 8010fb4:	e0c3      	b.n	801113e <_dtoa_r+0xb3e>
 8010fb6:	9b07      	ldr	r3, [sp, #28]
 8010fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fba:	2c00      	cmp	r4, #0
 8010fbc:	dd05      	ble.n	8010fca <_dtoa_r+0x9ca>
 8010fbe:	0039      	movs	r1, r7
 8010fc0:	0022      	movs	r2, r4
 8010fc2:	9804      	ldr	r0, [sp, #16]
 8010fc4:	f7fc f970 	bl	800d2a8 <__lshift>
 8010fc8:	0007      	movs	r7, r0
 8010fca:	0038      	movs	r0, r7
 8010fcc:	2d00      	cmp	r5, #0
 8010fce:	d024      	beq.n	801101a <_dtoa_r+0xa1a>
 8010fd0:	6879      	ldr	r1, [r7, #4]
 8010fd2:	9804      	ldr	r0, [sp, #16]
 8010fd4:	f7fb ff54 	bl	800ce80 <_Balloc>
 8010fd8:	1e04      	subs	r4, r0, #0
 8010fda:	d111      	bne.n	8011000 <_dtoa_r+0xa00>
 8010fdc:	0022      	movs	r2, r4
 8010fde:	4b05      	ldr	r3, [pc, #20]	; (8010ff4 <_dtoa_r+0x9f4>)
 8010fe0:	4805      	ldr	r0, [pc, #20]	; (8010ff8 <_dtoa_r+0x9f8>)
 8010fe2:	4906      	ldr	r1, [pc, #24]	; (8010ffc <_dtoa_r+0x9fc>)
 8010fe4:	e43c      	b.n	8010860 <_dtoa_r+0x260>
 8010fe6:	46c0      	nop			; (mov r8, r8)
 8010fe8:	40240000 	.word	0x40240000
 8010fec:	00000433 	.word	0x00000433
 8010ff0:	7ff00000 	.word	0x7ff00000
 8010ff4:	08014979 	.word	0x08014979
 8010ff8:	08014c09 	.word	0x08014c09
 8010ffc:	000002ef 	.word	0x000002ef
 8011000:	0039      	movs	r1, r7
 8011002:	693a      	ldr	r2, [r7, #16]
 8011004:	310c      	adds	r1, #12
 8011006:	3202      	adds	r2, #2
 8011008:	0092      	lsls	r2, r2, #2
 801100a:	300c      	adds	r0, #12
 801100c:	f7fb fa9d 	bl	800c54a <memcpy>
 8011010:	2201      	movs	r2, #1
 8011012:	0021      	movs	r1, r4
 8011014:	9804      	ldr	r0, [sp, #16]
 8011016:	f7fc f947 	bl	800d2a8 <__lshift>
 801101a:	9b06      	ldr	r3, [sp, #24]
 801101c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801101e:	9307      	str	r3, [sp, #28]
 8011020:	3b01      	subs	r3, #1
 8011022:	189b      	adds	r3, r3, r2
 8011024:	2201      	movs	r2, #1
 8011026:	003d      	movs	r5, r7
 8011028:	0007      	movs	r7, r0
 801102a:	930e      	str	r3, [sp, #56]	; 0x38
 801102c:	9b08      	ldr	r3, [sp, #32]
 801102e:	4013      	ands	r3, r2
 8011030:	930d      	str	r3, [sp, #52]	; 0x34
 8011032:	0031      	movs	r1, r6
 8011034:	9805      	ldr	r0, [sp, #20]
 8011036:	f7ff fa53 	bl	80104e0 <quorem>
 801103a:	0029      	movs	r1, r5
 801103c:	0004      	movs	r4, r0
 801103e:	900b      	str	r0, [sp, #44]	; 0x2c
 8011040:	9805      	ldr	r0, [sp, #20]
 8011042:	f7fc f99f 	bl	800d384 <__mcmp>
 8011046:	003a      	movs	r2, r7
 8011048:	900c      	str	r0, [sp, #48]	; 0x30
 801104a:	0031      	movs	r1, r6
 801104c:	9804      	ldr	r0, [sp, #16]
 801104e:	f7fc f9b5 	bl	800d3bc <__mdiff>
 8011052:	2201      	movs	r2, #1
 8011054:	68c3      	ldr	r3, [r0, #12]
 8011056:	3430      	adds	r4, #48	; 0x30
 8011058:	9008      	str	r0, [sp, #32]
 801105a:	920a      	str	r2, [sp, #40]	; 0x28
 801105c:	2b00      	cmp	r3, #0
 801105e:	d104      	bne.n	801106a <_dtoa_r+0xa6a>
 8011060:	0001      	movs	r1, r0
 8011062:	9805      	ldr	r0, [sp, #20]
 8011064:	f7fc f98e 	bl	800d384 <__mcmp>
 8011068:	900a      	str	r0, [sp, #40]	; 0x28
 801106a:	9908      	ldr	r1, [sp, #32]
 801106c:	9804      	ldr	r0, [sp, #16]
 801106e:	f7fb ff2f 	bl	800ced0 <_Bfree>
 8011072:	9b07      	ldr	r3, [sp, #28]
 8011074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011076:	3301      	adds	r3, #1
 8011078:	9308      	str	r3, [sp, #32]
 801107a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801107c:	4313      	orrs	r3, r2
 801107e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011080:	4313      	orrs	r3, r2
 8011082:	d109      	bne.n	8011098 <_dtoa_r+0xa98>
 8011084:	2c39      	cmp	r4, #57	; 0x39
 8011086:	d022      	beq.n	80110ce <_dtoa_r+0xace>
 8011088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801108a:	2b00      	cmp	r3, #0
 801108c:	dd01      	ble.n	8011092 <_dtoa_r+0xa92>
 801108e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011090:	3431      	adds	r4, #49	; 0x31
 8011092:	9b07      	ldr	r3, [sp, #28]
 8011094:	701c      	strb	r4, [r3, #0]
 8011096:	e76e      	b.n	8010f76 <_dtoa_r+0x976>
 8011098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801109a:	2b00      	cmp	r3, #0
 801109c:	db04      	blt.n	80110a8 <_dtoa_r+0xaa8>
 801109e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80110a0:	4313      	orrs	r3, r2
 80110a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110a4:	4313      	orrs	r3, r2
 80110a6:	d11e      	bne.n	80110e6 <_dtoa_r+0xae6>
 80110a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	ddf1      	ble.n	8011092 <_dtoa_r+0xa92>
 80110ae:	9905      	ldr	r1, [sp, #20]
 80110b0:	2201      	movs	r2, #1
 80110b2:	9804      	ldr	r0, [sp, #16]
 80110b4:	f7fc f8f8 	bl	800d2a8 <__lshift>
 80110b8:	0031      	movs	r1, r6
 80110ba:	9005      	str	r0, [sp, #20]
 80110bc:	f7fc f962 	bl	800d384 <__mcmp>
 80110c0:	2800      	cmp	r0, #0
 80110c2:	dc02      	bgt.n	80110ca <_dtoa_r+0xaca>
 80110c4:	d1e5      	bne.n	8011092 <_dtoa_r+0xa92>
 80110c6:	07e3      	lsls	r3, r4, #31
 80110c8:	d5e3      	bpl.n	8011092 <_dtoa_r+0xa92>
 80110ca:	2c39      	cmp	r4, #57	; 0x39
 80110cc:	d1df      	bne.n	801108e <_dtoa_r+0xa8e>
 80110ce:	2339      	movs	r3, #57	; 0x39
 80110d0:	9a07      	ldr	r2, [sp, #28]
 80110d2:	7013      	strb	r3, [r2, #0]
 80110d4:	9b08      	ldr	r3, [sp, #32]
 80110d6:	9308      	str	r3, [sp, #32]
 80110d8:	3b01      	subs	r3, #1
 80110da:	781a      	ldrb	r2, [r3, #0]
 80110dc:	2a39      	cmp	r2, #57	; 0x39
 80110de:	d063      	beq.n	80111a8 <_dtoa_r+0xba8>
 80110e0:	3201      	adds	r2, #1
 80110e2:	701a      	strb	r2, [r3, #0]
 80110e4:	e747      	b.n	8010f76 <_dtoa_r+0x976>
 80110e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	dd03      	ble.n	80110f4 <_dtoa_r+0xaf4>
 80110ec:	2c39      	cmp	r4, #57	; 0x39
 80110ee:	d0ee      	beq.n	80110ce <_dtoa_r+0xace>
 80110f0:	3401      	adds	r4, #1
 80110f2:	e7ce      	b.n	8011092 <_dtoa_r+0xa92>
 80110f4:	9b07      	ldr	r3, [sp, #28]
 80110f6:	9a07      	ldr	r2, [sp, #28]
 80110f8:	701c      	strb	r4, [r3, #0]
 80110fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d03e      	beq.n	801117e <_dtoa_r+0xb7e>
 8011100:	2300      	movs	r3, #0
 8011102:	220a      	movs	r2, #10
 8011104:	9905      	ldr	r1, [sp, #20]
 8011106:	9804      	ldr	r0, [sp, #16]
 8011108:	f7fb feec 	bl	800cee4 <__multadd>
 801110c:	2300      	movs	r3, #0
 801110e:	9005      	str	r0, [sp, #20]
 8011110:	220a      	movs	r2, #10
 8011112:	0029      	movs	r1, r5
 8011114:	9804      	ldr	r0, [sp, #16]
 8011116:	42bd      	cmp	r5, r7
 8011118:	d106      	bne.n	8011128 <_dtoa_r+0xb28>
 801111a:	f7fb fee3 	bl	800cee4 <__multadd>
 801111e:	0005      	movs	r5, r0
 8011120:	0007      	movs	r7, r0
 8011122:	9b08      	ldr	r3, [sp, #32]
 8011124:	9307      	str	r3, [sp, #28]
 8011126:	e784      	b.n	8011032 <_dtoa_r+0xa32>
 8011128:	f7fb fedc 	bl	800cee4 <__multadd>
 801112c:	0039      	movs	r1, r7
 801112e:	0005      	movs	r5, r0
 8011130:	2300      	movs	r3, #0
 8011132:	220a      	movs	r2, #10
 8011134:	9804      	ldr	r0, [sp, #16]
 8011136:	f7fb fed5 	bl	800cee4 <__multadd>
 801113a:	0007      	movs	r7, r0
 801113c:	e7f1      	b.n	8011122 <_dtoa_r+0xb22>
 801113e:	9b07      	ldr	r3, [sp, #28]
 8011140:	930b      	str	r3, [sp, #44]	; 0x2c
 8011142:	2500      	movs	r5, #0
 8011144:	0031      	movs	r1, r6
 8011146:	9805      	ldr	r0, [sp, #20]
 8011148:	f7ff f9ca 	bl	80104e0 <quorem>
 801114c:	9b06      	ldr	r3, [sp, #24]
 801114e:	3030      	adds	r0, #48	; 0x30
 8011150:	5558      	strb	r0, [r3, r5]
 8011152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011154:	3501      	adds	r5, #1
 8011156:	0004      	movs	r4, r0
 8011158:	42ab      	cmp	r3, r5
 801115a:	dd07      	ble.n	801116c <_dtoa_r+0xb6c>
 801115c:	2300      	movs	r3, #0
 801115e:	220a      	movs	r2, #10
 8011160:	9905      	ldr	r1, [sp, #20]
 8011162:	9804      	ldr	r0, [sp, #16]
 8011164:	f7fb febe 	bl	800cee4 <__multadd>
 8011168:	9005      	str	r0, [sp, #20]
 801116a:	e7eb      	b.n	8011144 <_dtoa_r+0xb44>
 801116c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801116e:	2301      	movs	r3, #1
 8011170:	2a00      	cmp	r2, #0
 8011172:	dd00      	ble.n	8011176 <_dtoa_r+0xb76>
 8011174:	0013      	movs	r3, r2
 8011176:	2500      	movs	r5, #0
 8011178:	9a06      	ldr	r2, [sp, #24]
 801117a:	18d3      	adds	r3, r2, r3
 801117c:	9308      	str	r3, [sp, #32]
 801117e:	9905      	ldr	r1, [sp, #20]
 8011180:	2201      	movs	r2, #1
 8011182:	9804      	ldr	r0, [sp, #16]
 8011184:	f7fc f890 	bl	800d2a8 <__lshift>
 8011188:	0031      	movs	r1, r6
 801118a:	9005      	str	r0, [sp, #20]
 801118c:	f7fc f8fa 	bl	800d384 <__mcmp>
 8011190:	2800      	cmp	r0, #0
 8011192:	dc9f      	bgt.n	80110d4 <_dtoa_r+0xad4>
 8011194:	d101      	bne.n	801119a <_dtoa_r+0xb9a>
 8011196:	07e4      	lsls	r4, r4, #31
 8011198:	d49c      	bmi.n	80110d4 <_dtoa_r+0xad4>
 801119a:	9b08      	ldr	r3, [sp, #32]
 801119c:	9308      	str	r3, [sp, #32]
 801119e:	3b01      	subs	r3, #1
 80111a0:	781a      	ldrb	r2, [r3, #0]
 80111a2:	2a30      	cmp	r2, #48	; 0x30
 80111a4:	d0fa      	beq.n	801119c <_dtoa_r+0xb9c>
 80111a6:	e6e6      	b.n	8010f76 <_dtoa_r+0x976>
 80111a8:	9a06      	ldr	r2, [sp, #24]
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d193      	bne.n	80110d6 <_dtoa_r+0xad6>
 80111ae:	9b03      	ldr	r3, [sp, #12]
 80111b0:	3301      	adds	r3, #1
 80111b2:	9303      	str	r3, [sp, #12]
 80111b4:	2331      	movs	r3, #49	; 0x31
 80111b6:	7013      	strb	r3, [r2, #0]
 80111b8:	e6dd      	b.n	8010f76 <_dtoa_r+0x976>
 80111ba:	4b09      	ldr	r3, [pc, #36]	; (80111e0 <_dtoa_r+0xbe0>)
 80111bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80111be:	9306      	str	r3, [sp, #24]
 80111c0:	4b08      	ldr	r3, [pc, #32]	; (80111e4 <_dtoa_r+0xbe4>)
 80111c2:	2a00      	cmp	r2, #0
 80111c4:	d001      	beq.n	80111ca <_dtoa_r+0xbca>
 80111c6:	f7ff fa4c 	bl	8010662 <_dtoa_r+0x62>
 80111ca:	f7ff fa4c 	bl	8010666 <_dtoa_r+0x66>
 80111ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	dcb6      	bgt.n	8011142 <_dtoa_r+0xb42>
 80111d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80111d6:	2b02      	cmp	r3, #2
 80111d8:	dd00      	ble.n	80111dc <_dtoa_r+0xbdc>
 80111da:	e6b6      	b.n	8010f4a <_dtoa_r+0x94a>
 80111dc:	e7b1      	b.n	8011142 <_dtoa_r+0xb42>
 80111de:	46c0      	nop			; (mov r8, r8)
 80111e0:	08014bfc 	.word	0x08014bfc
 80111e4:	08014c04 	.word	0x08014c04

080111e8 <realloc>:
 80111e8:	b510      	push	{r4, lr}
 80111ea:	4b03      	ldr	r3, [pc, #12]	; (80111f8 <realloc+0x10>)
 80111ec:	000a      	movs	r2, r1
 80111ee:	0001      	movs	r1, r0
 80111f0:	6818      	ldr	r0, [r3, #0]
 80111f2:	f000 f803 	bl	80111fc <_realloc_r>
 80111f6:	bd10      	pop	{r4, pc}
 80111f8:	200006d8 	.word	0x200006d8

080111fc <_realloc_r>:
 80111fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111fe:	b087      	sub	sp, #28
 8011200:	1e0c      	subs	r4, r1, #0
 8011202:	9001      	str	r0, [sp, #4]
 8011204:	9205      	str	r2, [sp, #20]
 8011206:	d106      	bne.n	8011216 <_realloc_r+0x1a>
 8011208:	0011      	movs	r1, r2
 801120a:	f7f9 fe39 	bl	800ae80 <_malloc_r>
 801120e:	0007      	movs	r7, r0
 8011210:	0038      	movs	r0, r7
 8011212:	b007      	add	sp, #28
 8011214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011216:	9801      	ldr	r0, [sp, #4]
 8011218:	f7fa f846 	bl	800b2a8 <__malloc_lock>
 801121c:	0023      	movs	r3, r4
 801121e:	3b08      	subs	r3, #8
 8011220:	685f      	ldr	r7, [r3, #4]
 8011222:	9304      	str	r3, [sp, #16]
 8011224:	9b05      	ldr	r3, [sp, #20]
 8011226:	330b      	adds	r3, #11
 8011228:	2b16      	cmp	r3, #22
 801122a:	d908      	bls.n	801123e <_realloc_r+0x42>
 801122c:	2207      	movs	r2, #7
 801122e:	4393      	bics	r3, r2
 8011230:	9300      	str	r3, [sp, #0]
 8011232:	d506      	bpl.n	8011242 <_realloc_r+0x46>
 8011234:	230c      	movs	r3, #12
 8011236:	9a01      	ldr	r2, [sp, #4]
 8011238:	2700      	movs	r7, #0
 801123a:	6013      	str	r3, [r2, #0]
 801123c:	e7e8      	b.n	8011210 <_realloc_r+0x14>
 801123e:	2310      	movs	r3, #16
 8011240:	9300      	str	r3, [sp, #0]
 8011242:	9b00      	ldr	r3, [sp, #0]
 8011244:	9a05      	ldr	r2, [sp, #20]
 8011246:	4293      	cmp	r3, r2
 8011248:	d3f4      	bcc.n	8011234 <_realloc_r+0x38>
 801124a:	9b04      	ldr	r3, [sp, #16]
 801124c:	003a      	movs	r2, r7
 801124e:	9302      	str	r3, [sp, #8]
 8011250:	2303      	movs	r3, #3
 8011252:	439a      	bics	r2, r3
 8011254:	9b00      	ldr	r3, [sp, #0]
 8011256:	9203      	str	r2, [sp, #12]
 8011258:	4293      	cmp	r3, r2
 801125a:	dc00      	bgt.n	801125e <_realloc_r+0x62>
 801125c:	e169      	b.n	8011532 <_realloc_r+0x336>
 801125e:	9b04      	ldr	r3, [sp, #16]
 8011260:	48b8      	ldr	r0, [pc, #736]	; (8011544 <_realloc_r+0x348>)
 8011262:	189b      	adds	r3, r3, r2
 8011264:	6882      	ldr	r2, [r0, #8]
 8011266:	4694      	mov	ip, r2
 8011268:	685a      	ldr	r2, [r3, #4]
 801126a:	459c      	cmp	ip, r3
 801126c:	d006      	beq.n	801127c <_realloc_r+0x80>
 801126e:	2501      	movs	r5, #1
 8011270:	0011      	movs	r1, r2
 8011272:	43a9      	bics	r1, r5
 8011274:	1859      	adds	r1, r3, r1
 8011276:	6849      	ldr	r1, [r1, #4]
 8011278:	4229      	tst	r1, r5
 801127a:	d144      	bne.n	8011306 <_realloc_r+0x10a>
 801127c:	2103      	movs	r1, #3
 801127e:	438a      	bics	r2, r1
 8011280:	9903      	ldr	r1, [sp, #12]
 8011282:	188e      	adds	r6, r1, r2
 8011284:	9900      	ldr	r1, [sp, #0]
 8011286:	459c      	cmp	ip, r3
 8011288:	d117      	bne.n	80112ba <_realloc_r+0xbe>
 801128a:	3110      	adds	r1, #16
 801128c:	42b1      	cmp	r1, r6
 801128e:	dc3c      	bgt.n	801130a <_realloc_r+0x10e>
 8011290:	9a00      	ldr	r2, [sp, #0]
 8011292:	2101      	movs	r1, #1
 8011294:	4694      	mov	ip, r2
 8011296:	1ab6      	subs	r6, r6, r2
 8011298:	0022      	movs	r2, r4
 801129a:	9b04      	ldr	r3, [sp, #16]
 801129c:	430e      	orrs	r6, r1
 801129e:	4463      	add	r3, ip
 80112a0:	6083      	str	r3, [r0, #8]
 80112a2:	3a08      	subs	r2, #8
 80112a4:	605e      	str	r6, [r3, #4]
 80112a6:	6853      	ldr	r3, [r2, #4]
 80112a8:	9801      	ldr	r0, [sp, #4]
 80112aa:	400b      	ands	r3, r1
 80112ac:	4661      	mov	r1, ip
 80112ae:	430b      	orrs	r3, r1
 80112b0:	6053      	str	r3, [r2, #4]
 80112b2:	f7fa f801 	bl	800b2b8 <__malloc_unlock>
 80112b6:	0027      	movs	r7, r4
 80112b8:	e7aa      	b.n	8011210 <_realloc_r+0x14>
 80112ba:	42b1      	cmp	r1, r6
 80112bc:	dc25      	bgt.n	801130a <_realloc_r+0x10e>
 80112be:	68da      	ldr	r2, [r3, #12]
 80112c0:	689b      	ldr	r3, [r3, #8]
 80112c2:	60da      	str	r2, [r3, #12]
 80112c4:	6093      	str	r3, [r2, #8]
 80112c6:	9b00      	ldr	r3, [sp, #0]
 80112c8:	9a02      	ldr	r2, [sp, #8]
 80112ca:	1af4      	subs	r4, r6, r3
 80112cc:	9b02      	ldr	r3, [sp, #8]
 80112ce:	1992      	adds	r2, r2, r6
 80112d0:	6858      	ldr	r0, [r3, #4]
 80112d2:	2301      	movs	r3, #1
 80112d4:	4018      	ands	r0, r3
 80112d6:	2c0f      	cmp	r4, #15
 80112d8:	d800      	bhi.n	80112dc <_realloc_r+0xe0>
 80112da:	e12c      	b.n	8011536 <_realloc_r+0x33a>
 80112dc:	9d00      	ldr	r5, [sp, #0]
 80112de:	9902      	ldr	r1, [sp, #8]
 80112e0:	4328      	orrs	r0, r5
 80112e2:	1949      	adds	r1, r1, r5
 80112e4:	9d02      	ldr	r5, [sp, #8]
 80112e6:	431c      	orrs	r4, r3
 80112e8:	6068      	str	r0, [r5, #4]
 80112ea:	604c      	str	r4, [r1, #4]
 80112ec:	6850      	ldr	r0, [r2, #4]
 80112ee:	3108      	adds	r1, #8
 80112f0:	4303      	orrs	r3, r0
 80112f2:	6053      	str	r3, [r2, #4]
 80112f4:	9801      	ldr	r0, [sp, #4]
 80112f6:	f7fb f9a3 	bl	800c640 <_free_r>
 80112fa:	9801      	ldr	r0, [sp, #4]
 80112fc:	f7f9 ffdc 	bl	800b2b8 <__malloc_unlock>
 8011300:	9f02      	ldr	r7, [sp, #8]
 8011302:	3708      	adds	r7, #8
 8011304:	e784      	b.n	8011210 <_realloc_r+0x14>
 8011306:	2200      	movs	r2, #0
 8011308:	0013      	movs	r3, r2
 801130a:	07ff      	lsls	r7, r7, #31
 801130c:	d500      	bpl.n	8011310 <_realloc_r+0x114>
 801130e:	e0c6      	b.n	801149e <_realloc_r+0x2a2>
 8011310:	0021      	movs	r1, r4
 8011312:	2003      	movs	r0, #3
 8011314:	3908      	subs	r1, #8
 8011316:	680d      	ldr	r5, [r1, #0]
 8011318:	9904      	ldr	r1, [sp, #16]
 801131a:	1b4d      	subs	r5, r1, r5
 801131c:	6869      	ldr	r1, [r5, #4]
 801131e:	4381      	bics	r1, r0
 8011320:	9803      	ldr	r0, [sp, #12]
 8011322:	180f      	adds	r7, r1, r0
 8011324:	2b00      	cmp	r3, #0
 8011326:	d100      	bne.n	801132a <_realloc_r+0x12e>
 8011328:	e084      	b.n	8011434 <_realloc_r+0x238>
 801132a:	19d6      	adds	r6, r2, r7
 801132c:	459c      	cmp	ip, r3
 801132e:	d148      	bne.n	80113c2 <_realloc_r+0x1c6>
 8011330:	9b00      	ldr	r3, [sp, #0]
 8011332:	3310      	adds	r3, #16
 8011334:	42b3      	cmp	r3, r6
 8011336:	dc7d      	bgt.n	8011434 <_realloc_r+0x238>
 8011338:	68aa      	ldr	r2, [r5, #8]
 801133a:	68eb      	ldr	r3, [r5, #12]
 801133c:	002f      	movs	r7, r5
 801133e:	60d3      	str	r3, [r2, #12]
 8011340:	609a      	str	r2, [r3, #8]
 8011342:	0002      	movs	r2, r0
 8011344:	3a04      	subs	r2, #4
 8011346:	3708      	adds	r7, #8
 8011348:	2a24      	cmp	r2, #36	; 0x24
 801134a:	d835      	bhi.n	80113b8 <_realloc_r+0x1bc>
 801134c:	003b      	movs	r3, r7
 801134e:	2a13      	cmp	r2, #19
 8011350:	d908      	bls.n	8011364 <_realloc_r+0x168>
 8011352:	6823      	ldr	r3, [r4, #0]
 8011354:	60ab      	str	r3, [r5, #8]
 8011356:	6863      	ldr	r3, [r4, #4]
 8011358:	60eb      	str	r3, [r5, #12]
 801135a:	2a1b      	cmp	r2, #27
 801135c:	d81a      	bhi.n	8011394 <_realloc_r+0x198>
 801135e:	002b      	movs	r3, r5
 8011360:	3408      	adds	r4, #8
 8011362:	3310      	adds	r3, #16
 8011364:	6822      	ldr	r2, [r4, #0]
 8011366:	601a      	str	r2, [r3, #0]
 8011368:	6862      	ldr	r2, [r4, #4]
 801136a:	605a      	str	r2, [r3, #4]
 801136c:	68a2      	ldr	r2, [r4, #8]
 801136e:	609a      	str	r2, [r3, #8]
 8011370:	9b00      	ldr	r3, [sp, #0]
 8011372:	4a74      	ldr	r2, [pc, #464]	; (8011544 <_realloc_r+0x348>)
 8011374:	18eb      	adds	r3, r5, r3
 8011376:	6093      	str	r3, [r2, #8]
 8011378:	9a00      	ldr	r2, [sp, #0]
 801137a:	1ab6      	subs	r6, r6, r2
 801137c:	2201      	movs	r2, #1
 801137e:	4316      	orrs	r6, r2
 8011380:	605e      	str	r6, [r3, #4]
 8011382:	686b      	ldr	r3, [r5, #4]
 8011384:	4013      	ands	r3, r2
 8011386:	9a00      	ldr	r2, [sp, #0]
 8011388:	4313      	orrs	r3, r2
 801138a:	606b      	str	r3, [r5, #4]
 801138c:	9801      	ldr	r0, [sp, #4]
 801138e:	f7f9 ff93 	bl	800b2b8 <__malloc_unlock>
 8011392:	e73d      	b.n	8011210 <_realloc_r+0x14>
 8011394:	68a3      	ldr	r3, [r4, #8]
 8011396:	612b      	str	r3, [r5, #16]
 8011398:	68e3      	ldr	r3, [r4, #12]
 801139a:	616b      	str	r3, [r5, #20]
 801139c:	2a24      	cmp	r2, #36	; 0x24
 801139e:	d003      	beq.n	80113a8 <_realloc_r+0x1ac>
 80113a0:	002b      	movs	r3, r5
 80113a2:	3410      	adds	r4, #16
 80113a4:	3318      	adds	r3, #24
 80113a6:	e7dd      	b.n	8011364 <_realloc_r+0x168>
 80113a8:	6923      	ldr	r3, [r4, #16]
 80113aa:	61ab      	str	r3, [r5, #24]
 80113ac:	002b      	movs	r3, r5
 80113ae:	6962      	ldr	r2, [r4, #20]
 80113b0:	3320      	adds	r3, #32
 80113b2:	61ea      	str	r2, [r5, #28]
 80113b4:	3418      	adds	r4, #24
 80113b6:	e7d5      	b.n	8011364 <_realloc_r+0x168>
 80113b8:	0021      	movs	r1, r4
 80113ba:	0038      	movs	r0, r7
 80113bc:	f001 fbb5 	bl	8012b2a <memmove>
 80113c0:	e7d6      	b.n	8011370 <_realloc_r+0x174>
 80113c2:	9a00      	ldr	r2, [sp, #0]
 80113c4:	42b2      	cmp	r2, r6
 80113c6:	dc35      	bgt.n	8011434 <_realloc_r+0x238>
 80113c8:	0028      	movs	r0, r5
 80113ca:	68da      	ldr	r2, [r3, #12]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	3008      	adds	r0, #8
 80113d0:	60da      	str	r2, [r3, #12]
 80113d2:	6093      	str	r3, [r2, #8]
 80113d4:	68aa      	ldr	r2, [r5, #8]
 80113d6:	68eb      	ldr	r3, [r5, #12]
 80113d8:	60d3      	str	r3, [r2, #12]
 80113da:	609a      	str	r2, [r3, #8]
 80113dc:	9a03      	ldr	r2, [sp, #12]
 80113de:	3a04      	subs	r2, #4
 80113e0:	2a24      	cmp	r2, #36	; 0x24
 80113e2:	d823      	bhi.n	801142c <_realloc_r+0x230>
 80113e4:	2a13      	cmp	r2, #19
 80113e6:	d907      	bls.n	80113f8 <_realloc_r+0x1fc>
 80113e8:	6823      	ldr	r3, [r4, #0]
 80113ea:	60ab      	str	r3, [r5, #8]
 80113ec:	6863      	ldr	r3, [r4, #4]
 80113ee:	60eb      	str	r3, [r5, #12]
 80113f0:	2a1b      	cmp	r2, #27
 80113f2:	d809      	bhi.n	8011408 <_realloc_r+0x20c>
 80113f4:	3408      	adds	r4, #8
 80113f6:	3008      	adds	r0, #8
 80113f8:	6823      	ldr	r3, [r4, #0]
 80113fa:	6003      	str	r3, [r0, #0]
 80113fc:	6863      	ldr	r3, [r4, #4]
 80113fe:	6043      	str	r3, [r0, #4]
 8011400:	68a3      	ldr	r3, [r4, #8]
 8011402:	6083      	str	r3, [r0, #8]
 8011404:	9502      	str	r5, [sp, #8]
 8011406:	e75e      	b.n	80112c6 <_realloc_r+0xca>
 8011408:	68a3      	ldr	r3, [r4, #8]
 801140a:	612b      	str	r3, [r5, #16]
 801140c:	68e3      	ldr	r3, [r4, #12]
 801140e:	616b      	str	r3, [r5, #20]
 8011410:	2a24      	cmp	r2, #36	; 0x24
 8011412:	d003      	beq.n	801141c <_realloc_r+0x220>
 8011414:	0028      	movs	r0, r5
 8011416:	3410      	adds	r4, #16
 8011418:	3018      	adds	r0, #24
 801141a:	e7ed      	b.n	80113f8 <_realloc_r+0x1fc>
 801141c:	0028      	movs	r0, r5
 801141e:	6923      	ldr	r3, [r4, #16]
 8011420:	3020      	adds	r0, #32
 8011422:	61ab      	str	r3, [r5, #24]
 8011424:	6963      	ldr	r3, [r4, #20]
 8011426:	3418      	adds	r4, #24
 8011428:	61eb      	str	r3, [r5, #28]
 801142a:	e7e5      	b.n	80113f8 <_realloc_r+0x1fc>
 801142c:	0021      	movs	r1, r4
 801142e:	f001 fb7c 	bl	8012b2a <memmove>
 8011432:	e7e7      	b.n	8011404 <_realloc_r+0x208>
 8011434:	9b00      	ldr	r3, [sp, #0]
 8011436:	42bb      	cmp	r3, r7
 8011438:	dc31      	bgt.n	801149e <_realloc_r+0x2a2>
 801143a:	0028      	movs	r0, r5
 801143c:	68aa      	ldr	r2, [r5, #8]
 801143e:	68eb      	ldr	r3, [r5, #12]
 8011440:	3008      	adds	r0, #8
 8011442:	60d3      	str	r3, [r2, #12]
 8011444:	609a      	str	r2, [r3, #8]
 8011446:	9a03      	ldr	r2, [sp, #12]
 8011448:	3a04      	subs	r2, #4
 801144a:	2a24      	cmp	r2, #36	; 0x24
 801144c:	d823      	bhi.n	8011496 <_realloc_r+0x29a>
 801144e:	2a13      	cmp	r2, #19
 8011450:	d907      	bls.n	8011462 <_realloc_r+0x266>
 8011452:	6823      	ldr	r3, [r4, #0]
 8011454:	60ab      	str	r3, [r5, #8]
 8011456:	6863      	ldr	r3, [r4, #4]
 8011458:	60eb      	str	r3, [r5, #12]
 801145a:	2a1b      	cmp	r2, #27
 801145c:	d809      	bhi.n	8011472 <_realloc_r+0x276>
 801145e:	3408      	adds	r4, #8
 8011460:	3008      	adds	r0, #8
 8011462:	6823      	ldr	r3, [r4, #0]
 8011464:	6003      	str	r3, [r0, #0]
 8011466:	6863      	ldr	r3, [r4, #4]
 8011468:	6043      	str	r3, [r0, #4]
 801146a:	68a3      	ldr	r3, [r4, #8]
 801146c:	6083      	str	r3, [r0, #8]
 801146e:	003e      	movs	r6, r7
 8011470:	e7c8      	b.n	8011404 <_realloc_r+0x208>
 8011472:	68a3      	ldr	r3, [r4, #8]
 8011474:	612b      	str	r3, [r5, #16]
 8011476:	68e3      	ldr	r3, [r4, #12]
 8011478:	616b      	str	r3, [r5, #20]
 801147a:	2a24      	cmp	r2, #36	; 0x24
 801147c:	d003      	beq.n	8011486 <_realloc_r+0x28a>
 801147e:	0028      	movs	r0, r5
 8011480:	3410      	adds	r4, #16
 8011482:	3018      	adds	r0, #24
 8011484:	e7ed      	b.n	8011462 <_realloc_r+0x266>
 8011486:	0028      	movs	r0, r5
 8011488:	6923      	ldr	r3, [r4, #16]
 801148a:	3020      	adds	r0, #32
 801148c:	61ab      	str	r3, [r5, #24]
 801148e:	6963      	ldr	r3, [r4, #20]
 8011490:	3418      	adds	r4, #24
 8011492:	61eb      	str	r3, [r5, #28]
 8011494:	e7e5      	b.n	8011462 <_realloc_r+0x266>
 8011496:	0021      	movs	r1, r4
 8011498:	f001 fb47 	bl	8012b2a <memmove>
 801149c:	e7e7      	b.n	801146e <_realloc_r+0x272>
 801149e:	9905      	ldr	r1, [sp, #20]
 80114a0:	9801      	ldr	r0, [sp, #4]
 80114a2:	f7f9 fced 	bl	800ae80 <_malloc_r>
 80114a6:	1e07      	subs	r7, r0, #0
 80114a8:	d100      	bne.n	80114ac <_realloc_r+0x2b0>
 80114aa:	e76f      	b.n	801138c <_realloc_r+0x190>
 80114ac:	0023      	movs	r3, r4
 80114ae:	2201      	movs	r2, #1
 80114b0:	3b08      	subs	r3, #8
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	4393      	bics	r3, r2
 80114b6:	9a04      	ldr	r2, [sp, #16]
 80114b8:	18d3      	adds	r3, r2, r3
 80114ba:	0002      	movs	r2, r0
 80114bc:	3a08      	subs	r2, #8
 80114be:	4293      	cmp	r3, r2
 80114c0:	d105      	bne.n	80114ce <_realloc_r+0x2d2>
 80114c2:	685e      	ldr	r6, [r3, #4]
 80114c4:	2303      	movs	r3, #3
 80114c6:	439e      	bics	r6, r3
 80114c8:	9b03      	ldr	r3, [sp, #12]
 80114ca:	18f6      	adds	r6, r6, r3
 80114cc:	e6fb      	b.n	80112c6 <_realloc_r+0xca>
 80114ce:	9a03      	ldr	r2, [sp, #12]
 80114d0:	3a04      	subs	r2, #4
 80114d2:	2a24      	cmp	r2, #36	; 0x24
 80114d4:	d829      	bhi.n	801152a <_realloc_r+0x32e>
 80114d6:	0003      	movs	r3, r0
 80114d8:	0021      	movs	r1, r4
 80114da:	2a13      	cmp	r2, #19
 80114dc:	d908      	bls.n	80114f0 <_realloc_r+0x2f4>
 80114de:	6823      	ldr	r3, [r4, #0]
 80114e0:	6003      	str	r3, [r0, #0]
 80114e2:	6863      	ldr	r3, [r4, #4]
 80114e4:	6043      	str	r3, [r0, #4]
 80114e6:	2a1b      	cmp	r2, #27
 80114e8:	d80d      	bhi.n	8011506 <_realloc_r+0x30a>
 80114ea:	0003      	movs	r3, r0
 80114ec:	3108      	adds	r1, #8
 80114ee:	3308      	adds	r3, #8
 80114f0:	680a      	ldr	r2, [r1, #0]
 80114f2:	601a      	str	r2, [r3, #0]
 80114f4:	684a      	ldr	r2, [r1, #4]
 80114f6:	605a      	str	r2, [r3, #4]
 80114f8:	688a      	ldr	r2, [r1, #8]
 80114fa:	609a      	str	r2, [r3, #8]
 80114fc:	0021      	movs	r1, r4
 80114fe:	9801      	ldr	r0, [sp, #4]
 8011500:	f7fb f89e 	bl	800c640 <_free_r>
 8011504:	e742      	b.n	801138c <_realloc_r+0x190>
 8011506:	68a3      	ldr	r3, [r4, #8]
 8011508:	6083      	str	r3, [r0, #8]
 801150a:	68e3      	ldr	r3, [r4, #12]
 801150c:	60c3      	str	r3, [r0, #12]
 801150e:	2a24      	cmp	r2, #36	; 0x24
 8011510:	d003      	beq.n	801151a <_realloc_r+0x31e>
 8011512:	0003      	movs	r3, r0
 8011514:	3110      	adds	r1, #16
 8011516:	3310      	adds	r3, #16
 8011518:	e7ea      	b.n	80114f0 <_realloc_r+0x2f4>
 801151a:	6923      	ldr	r3, [r4, #16]
 801151c:	3118      	adds	r1, #24
 801151e:	6103      	str	r3, [r0, #16]
 8011520:	0003      	movs	r3, r0
 8011522:	6962      	ldr	r2, [r4, #20]
 8011524:	3318      	adds	r3, #24
 8011526:	6142      	str	r2, [r0, #20]
 8011528:	e7e2      	b.n	80114f0 <_realloc_r+0x2f4>
 801152a:	0021      	movs	r1, r4
 801152c:	f001 fafd 	bl	8012b2a <memmove>
 8011530:	e7e4      	b.n	80114fc <_realloc_r+0x300>
 8011532:	9e03      	ldr	r6, [sp, #12]
 8011534:	e6c7      	b.n	80112c6 <_realloc_r+0xca>
 8011536:	9902      	ldr	r1, [sp, #8]
 8011538:	4306      	orrs	r6, r0
 801153a:	604e      	str	r6, [r1, #4]
 801153c:	6851      	ldr	r1, [r2, #4]
 801153e:	430b      	orrs	r3, r1
 8011540:	6053      	str	r3, [r2, #4]
 8011542:	e6da      	b.n	80112fa <_realloc_r+0xfe>
 8011544:	20000030 	.word	0x20000030

08011548 <_strtoul_l.constprop.0>:
 8011548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801154a:	b087      	sub	sp, #28
 801154c:	9202      	str	r2, [sp, #8]
 801154e:	4a3e      	ldr	r2, [pc, #248]	; (8011648 <_strtoul_l.constprop.0+0x100>)
 8011550:	001e      	movs	r6, r3
 8011552:	9101      	str	r1, [sp, #4]
 8011554:	000b      	movs	r3, r1
 8011556:	4694      	mov	ip, r2
 8011558:	2108      	movs	r1, #8
 801155a:	9005      	str	r0, [sp, #20]
 801155c:	001a      	movs	r2, r3
 801155e:	4660      	mov	r0, ip
 8011560:	7814      	ldrb	r4, [r2, #0]
 8011562:	3301      	adds	r3, #1
 8011564:	5d00      	ldrb	r0, [r0, r4]
 8011566:	001d      	movs	r5, r3
 8011568:	0007      	movs	r7, r0
 801156a:	400f      	ands	r7, r1
 801156c:	4208      	tst	r0, r1
 801156e:	d1f5      	bne.n	801155c <_strtoul_l.constprop.0+0x14>
 8011570:	2c2d      	cmp	r4, #45	; 0x2d
 8011572:	d13d      	bne.n	80115f0 <_strtoul_l.constprop.0+0xa8>
 8011574:	2701      	movs	r7, #1
 8011576:	781c      	ldrb	r4, [r3, #0]
 8011578:	1c95      	adds	r5, r2, #2
 801157a:	2e00      	cmp	r6, #0
 801157c:	d05f      	beq.n	801163e <_strtoul_l.constprop.0+0xf6>
 801157e:	2e10      	cmp	r6, #16
 8011580:	d109      	bne.n	8011596 <_strtoul_l.constprop.0+0x4e>
 8011582:	2c30      	cmp	r4, #48	; 0x30
 8011584:	d107      	bne.n	8011596 <_strtoul_l.constprop.0+0x4e>
 8011586:	2220      	movs	r2, #32
 8011588:	782b      	ldrb	r3, [r5, #0]
 801158a:	4393      	bics	r3, r2
 801158c:	2b58      	cmp	r3, #88	; 0x58
 801158e:	d151      	bne.n	8011634 <_strtoul_l.constprop.0+0xec>
 8011590:	2610      	movs	r6, #16
 8011592:	786c      	ldrb	r4, [r5, #1]
 8011594:	3502      	adds	r5, #2
 8011596:	2001      	movs	r0, #1
 8011598:	0031      	movs	r1, r6
 801159a:	4240      	negs	r0, r0
 801159c:	f7ee fdce 	bl	800013c <__udivsi3>
 80115a0:	9003      	str	r0, [sp, #12]
 80115a2:	2001      	movs	r0, #1
 80115a4:	0031      	movs	r1, r6
 80115a6:	4240      	negs	r0, r0
 80115a8:	f7ee fe4e 	bl	8000248 <__aeabi_uidivmod>
 80115ac:	2300      	movs	r3, #0
 80115ae:	2201      	movs	r2, #1
 80115b0:	9104      	str	r1, [sp, #16]
 80115b2:	2101      	movs	r1, #1
 80115b4:	0018      	movs	r0, r3
 80115b6:	4694      	mov	ip, r2
 80115b8:	4249      	negs	r1, r1
 80115ba:	0022      	movs	r2, r4
 80115bc:	3a30      	subs	r2, #48	; 0x30
 80115be:	2a09      	cmp	r2, #9
 80115c0:	d903      	bls.n	80115ca <_strtoul_l.constprop.0+0x82>
 80115c2:	3a11      	subs	r2, #17
 80115c4:	2a19      	cmp	r2, #25
 80115c6:	d818      	bhi.n	80115fa <_strtoul_l.constprop.0+0xb2>
 80115c8:	320a      	adds	r2, #10
 80115ca:	4296      	cmp	r6, r2
 80115cc:	dd19      	ble.n	8011602 <_strtoul_l.constprop.0+0xba>
 80115ce:	1c5c      	adds	r4, r3, #1
 80115d0:	d00b      	beq.n	80115ea <_strtoul_l.constprop.0+0xa2>
 80115d2:	9c03      	ldr	r4, [sp, #12]
 80115d4:	000b      	movs	r3, r1
 80115d6:	4284      	cmp	r4, r0
 80115d8:	d307      	bcc.n	80115ea <_strtoul_l.constprop.0+0xa2>
 80115da:	d103      	bne.n	80115e4 <_strtoul_l.constprop.0+0x9c>
 80115dc:	9c04      	ldr	r4, [sp, #16]
 80115de:	000b      	movs	r3, r1
 80115e0:	4294      	cmp	r4, r2
 80115e2:	db02      	blt.n	80115ea <_strtoul_l.constprop.0+0xa2>
 80115e4:	4663      	mov	r3, ip
 80115e6:	4370      	muls	r0, r6
 80115e8:	1810      	adds	r0, r2, r0
 80115ea:	782c      	ldrb	r4, [r5, #0]
 80115ec:	3501      	adds	r5, #1
 80115ee:	e7e4      	b.n	80115ba <_strtoul_l.constprop.0+0x72>
 80115f0:	2c2b      	cmp	r4, #43	; 0x2b
 80115f2:	d1c2      	bne.n	801157a <_strtoul_l.constprop.0+0x32>
 80115f4:	781c      	ldrb	r4, [r3, #0]
 80115f6:	1c95      	adds	r5, r2, #2
 80115f8:	e7bf      	b.n	801157a <_strtoul_l.constprop.0+0x32>
 80115fa:	0022      	movs	r2, r4
 80115fc:	3a61      	subs	r2, #97	; 0x61
 80115fe:	2a19      	cmp	r2, #25
 8011600:	d9e2      	bls.n	80115c8 <_strtoul_l.constprop.0+0x80>
 8011602:	1c5a      	adds	r2, r3, #1
 8011604:	d108      	bne.n	8011618 <_strtoul_l.constprop.0+0xd0>
 8011606:	2222      	movs	r2, #34	; 0x22
 8011608:	9905      	ldr	r1, [sp, #20]
 801160a:	0018      	movs	r0, r3
 801160c:	600a      	str	r2, [r1, #0]
 801160e:	9a02      	ldr	r2, [sp, #8]
 8011610:	2a00      	cmp	r2, #0
 8011612:	d109      	bne.n	8011628 <_strtoul_l.constprop.0+0xe0>
 8011614:	b007      	add	sp, #28
 8011616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011618:	2f00      	cmp	r7, #0
 801161a:	d000      	beq.n	801161e <_strtoul_l.constprop.0+0xd6>
 801161c:	4240      	negs	r0, r0
 801161e:	9a02      	ldr	r2, [sp, #8]
 8011620:	2a00      	cmp	r2, #0
 8011622:	d0f7      	beq.n	8011614 <_strtoul_l.constprop.0+0xcc>
 8011624:	2b00      	cmp	r3, #0
 8011626:	d001      	beq.n	801162c <_strtoul_l.constprop.0+0xe4>
 8011628:	1e6b      	subs	r3, r5, #1
 801162a:	9301      	str	r3, [sp, #4]
 801162c:	9b02      	ldr	r3, [sp, #8]
 801162e:	9a01      	ldr	r2, [sp, #4]
 8011630:	601a      	str	r2, [r3, #0]
 8011632:	e7ef      	b.n	8011614 <_strtoul_l.constprop.0+0xcc>
 8011634:	2430      	movs	r4, #48	; 0x30
 8011636:	2e00      	cmp	r6, #0
 8011638:	d1ad      	bne.n	8011596 <_strtoul_l.constprop.0+0x4e>
 801163a:	3608      	adds	r6, #8
 801163c:	e7ab      	b.n	8011596 <_strtoul_l.constprop.0+0x4e>
 801163e:	2c30      	cmp	r4, #48	; 0x30
 8011640:	d0a1      	beq.n	8011586 <_strtoul_l.constprop.0+0x3e>
 8011642:	260a      	movs	r6, #10
 8011644:	e7a7      	b.n	8011596 <_strtoul_l.constprop.0+0x4e>
 8011646:	46c0      	nop			; (mov r8, r8)
 8011648:	08014871 	.word	0x08014871

0801164c <_strtoul_r>:
 801164c:	b510      	push	{r4, lr}
 801164e:	f7ff ff7b 	bl	8011548 <_strtoul_l.constprop.0>
 8011652:	bd10      	pop	{r4, pc}

08011654 <_strtoll_l.constprop.0>:
 8011654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011656:	b08d      	sub	sp, #52	; 0x34
 8011658:	9203      	str	r2, [sp, #12]
 801165a:	4a53      	ldr	r2, [pc, #332]	; (80117a8 <_strtoll_l.constprop.0+0x154>)
 801165c:	001e      	movs	r6, r3
 801165e:	9102      	str	r1, [sp, #8]
 8011660:	000b      	movs	r3, r1
 8011662:	4694      	mov	ip, r2
 8011664:	2108      	movs	r1, #8
 8011666:	900a      	str	r0, [sp, #40]	; 0x28
 8011668:	001a      	movs	r2, r3
 801166a:	4660      	mov	r0, ip
 801166c:	7814      	ldrb	r4, [r2, #0]
 801166e:	3301      	adds	r3, #1
 8011670:	5d00      	ldrb	r0, [r0, r4]
 8011672:	001d      	movs	r5, r3
 8011674:	0007      	movs	r7, r0
 8011676:	400f      	ands	r7, r1
 8011678:	4208      	tst	r0, r1
 801167a:	d1f5      	bne.n	8011668 <_strtoll_l.constprop.0+0x14>
 801167c:	2c2d      	cmp	r4, #45	; 0x2d
 801167e:	d153      	bne.n	8011728 <_strtoll_l.constprop.0+0xd4>
 8011680:	781c      	ldrb	r4, [r3, #0]
 8011682:	2301      	movs	r3, #1
 8011684:	1c95      	adds	r5, r2, #2
 8011686:	9301      	str	r3, [sp, #4]
 8011688:	2e00      	cmp	r6, #0
 801168a:	d100      	bne.n	801168e <_strtoll_l.constprop.0+0x3a>
 801168c:	e086      	b.n	801179c <_strtoll_l.constprop.0+0x148>
 801168e:	2e10      	cmp	r6, #16
 8011690:	d10a      	bne.n	80116a8 <_strtoll_l.constprop.0+0x54>
 8011692:	2c30      	cmp	r4, #48	; 0x30
 8011694:	d108      	bne.n	80116a8 <_strtoll_l.constprop.0+0x54>
 8011696:	2220      	movs	r2, #32
 8011698:	782b      	ldrb	r3, [r5, #0]
 801169a:	4393      	bics	r3, r2
 801169c:	2b58      	cmp	r3, #88	; 0x58
 801169e:	d000      	beq.n	80116a2 <_strtoll_l.constprop.0+0x4e>
 80116a0:	e076      	b.n	8011790 <_strtoll_l.constprop.0+0x13c>
 80116a2:	2610      	movs	r6, #16
 80116a4:	786c      	ldrb	r4, [r5, #1]
 80116a6:	3502      	adds	r5, #2
 80116a8:	2001      	movs	r0, #1
 80116aa:	2300      	movs	r3, #0
 80116ac:	493f      	ldr	r1, [pc, #252]	; (80117ac <_strtoll_l.constprop.0+0x158>)
 80116ae:	9a01      	ldr	r2, [sp, #4]
 80116b0:	4240      	negs	r0, r0
 80116b2:	1812      	adds	r2, r2, r0
 80116b4:	414b      	adcs	r3, r1
 80116b6:	9204      	str	r2, [sp, #16]
 80116b8:	9305      	str	r3, [sp, #20]
 80116ba:	9804      	ldr	r0, [sp, #16]
 80116bc:	9905      	ldr	r1, [sp, #20]
 80116be:	17f3      	asrs	r3, r6, #31
 80116c0:	0032      	movs	r2, r6
 80116c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80116c4:	f7ee feee 	bl	80004a4 <__aeabi_uldivmod>
 80116c8:	2300      	movs	r3, #0
 80116ca:	000f      	movs	r7, r1
 80116cc:	9008      	str	r0, [sp, #32]
 80116ce:	2100      	movs	r1, #0
 80116d0:	2000      	movs	r0, #0
 80116d2:	9209      	str	r2, [sp, #36]	; 0x24
 80116d4:	0022      	movs	r2, r4
 80116d6:	3a30      	subs	r2, #48	; 0x30
 80116d8:	2a09      	cmp	r2, #9
 80116da:	d82b      	bhi.n	8011734 <_strtoll_l.constprop.0+0xe0>
 80116dc:	0014      	movs	r4, r2
 80116de:	42a6      	cmp	r6, r4
 80116e0:	dd37      	ble.n	8011752 <_strtoll_l.constprop.0+0xfe>
 80116e2:	1c5a      	adds	r2, r3, #1
 80116e4:	d01d      	beq.n	8011722 <_strtoll_l.constprop.0+0xce>
 80116e6:	42b9      	cmp	r1, r7
 80116e8:	d830      	bhi.n	801174c <_strtoll_l.constprop.0+0xf8>
 80116ea:	d102      	bne.n	80116f2 <_strtoll_l.constprop.0+0x9e>
 80116ec:	9b08      	ldr	r3, [sp, #32]
 80116ee:	4298      	cmp	r0, r3
 80116f0:	d82c      	bhi.n	801174c <_strtoll_l.constprop.0+0xf8>
 80116f2:	9b08      	ldr	r3, [sp, #32]
 80116f4:	4283      	cmp	r3, r0
 80116f6:	d106      	bne.n	8011706 <_strtoll_l.constprop.0+0xb2>
 80116f8:	428f      	cmp	r7, r1
 80116fa:	d104      	bne.n	8011706 <_strtoll_l.constprop.0+0xb2>
 80116fc:	2301      	movs	r3, #1
 80116fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011700:	425b      	negs	r3, r3
 8011702:	42a2      	cmp	r2, r4
 8011704:	db0d      	blt.n	8011722 <_strtoll_l.constprop.0+0xce>
 8011706:	000b      	movs	r3, r1
 8011708:	0002      	movs	r2, r0
 801170a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801170c:	0030      	movs	r0, r6
 801170e:	f7ee fee9 	bl	80004e4 <__aeabi_lmul>
 8011712:	17e3      	asrs	r3, r4, #31
 8011714:	9406      	str	r4, [sp, #24]
 8011716:	9307      	str	r3, [sp, #28]
 8011718:	9b06      	ldr	r3, [sp, #24]
 801171a:	9c07      	ldr	r4, [sp, #28]
 801171c:	18c0      	adds	r0, r0, r3
 801171e:	4161      	adcs	r1, r4
 8011720:	2301      	movs	r3, #1
 8011722:	782c      	ldrb	r4, [r5, #0]
 8011724:	3501      	adds	r5, #1
 8011726:	e7d5      	b.n	80116d4 <_strtoll_l.constprop.0+0x80>
 8011728:	9701      	str	r7, [sp, #4]
 801172a:	2c2b      	cmp	r4, #43	; 0x2b
 801172c:	d1ac      	bne.n	8011688 <_strtoll_l.constprop.0+0x34>
 801172e:	781c      	ldrb	r4, [r3, #0]
 8011730:	1c95      	adds	r5, r2, #2
 8011732:	e7a9      	b.n	8011688 <_strtoll_l.constprop.0+0x34>
 8011734:	0022      	movs	r2, r4
 8011736:	3a41      	subs	r2, #65	; 0x41
 8011738:	2a19      	cmp	r2, #25
 801173a:	d801      	bhi.n	8011740 <_strtoll_l.constprop.0+0xec>
 801173c:	3c37      	subs	r4, #55	; 0x37
 801173e:	e7ce      	b.n	80116de <_strtoll_l.constprop.0+0x8a>
 8011740:	0022      	movs	r2, r4
 8011742:	3a61      	subs	r2, #97	; 0x61
 8011744:	2a19      	cmp	r2, #25
 8011746:	d804      	bhi.n	8011752 <_strtoll_l.constprop.0+0xfe>
 8011748:	3c57      	subs	r4, #87	; 0x57
 801174a:	e7c8      	b.n	80116de <_strtoll_l.constprop.0+0x8a>
 801174c:	2301      	movs	r3, #1
 801174e:	425b      	negs	r3, r3
 8011750:	e7e7      	b.n	8011722 <_strtoll_l.constprop.0+0xce>
 8011752:	1c5a      	adds	r2, r3, #1
 8011754:	d109      	bne.n	801176a <_strtoll_l.constprop.0+0x116>
 8011756:	9804      	ldr	r0, [sp, #16]
 8011758:	9905      	ldr	r1, [sp, #20]
 801175a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801175c:	3323      	adds	r3, #35	; 0x23
 801175e:	6013      	str	r3, [r2, #0]
 8011760:	9b03      	ldr	r3, [sp, #12]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d10e      	bne.n	8011784 <_strtoll_l.constprop.0+0x130>
 8011766:	b00d      	add	sp, #52	; 0x34
 8011768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801176a:	9a01      	ldr	r2, [sp, #4]
 801176c:	2a00      	cmp	r2, #0
 801176e:	d004      	beq.n	801177a <_strtoll_l.constprop.0+0x126>
 8011770:	0006      	movs	r6, r0
 8011772:	000f      	movs	r7, r1
 8011774:	2100      	movs	r1, #0
 8011776:	4270      	negs	r0, r6
 8011778:	41b9      	sbcs	r1, r7
 801177a:	9a03      	ldr	r2, [sp, #12]
 801177c:	2a00      	cmp	r2, #0
 801177e:	d0f2      	beq.n	8011766 <_strtoll_l.constprop.0+0x112>
 8011780:	2b00      	cmp	r3, #0
 8011782:	d001      	beq.n	8011788 <_strtoll_l.constprop.0+0x134>
 8011784:	1e6b      	subs	r3, r5, #1
 8011786:	9302      	str	r3, [sp, #8]
 8011788:	9b03      	ldr	r3, [sp, #12]
 801178a:	9a02      	ldr	r2, [sp, #8]
 801178c:	601a      	str	r2, [r3, #0]
 801178e:	e7ea      	b.n	8011766 <_strtoll_l.constprop.0+0x112>
 8011790:	2430      	movs	r4, #48	; 0x30
 8011792:	2e00      	cmp	r6, #0
 8011794:	d000      	beq.n	8011798 <_strtoll_l.constprop.0+0x144>
 8011796:	e787      	b.n	80116a8 <_strtoll_l.constprop.0+0x54>
 8011798:	3608      	adds	r6, #8
 801179a:	e785      	b.n	80116a8 <_strtoll_l.constprop.0+0x54>
 801179c:	2c30      	cmp	r4, #48	; 0x30
 801179e:	d100      	bne.n	80117a2 <_strtoll_l.constprop.0+0x14e>
 80117a0:	e779      	b.n	8011696 <_strtoll_l.constprop.0+0x42>
 80117a2:	260a      	movs	r6, #10
 80117a4:	e780      	b.n	80116a8 <_strtoll_l.constprop.0+0x54>
 80117a6:	46c0      	nop			; (mov r8, r8)
 80117a8:	08014871 	.word	0x08014871
 80117ac:	7fffffff 	.word	0x7fffffff

080117b0 <_strtoll_r>:
 80117b0:	b510      	push	{r4, lr}
 80117b2:	f7ff ff4f 	bl	8011654 <_strtoll_l.constprop.0>
 80117b6:	bd10      	pop	{r4, pc}

080117b8 <_strtoull_l.constprop.0>:
 80117b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ba:	b08b      	sub	sp, #44	; 0x2c
 80117bc:	9202      	str	r2, [sp, #8]
 80117be:	4a54      	ldr	r2, [pc, #336]	; (8011910 <_strtoull_l.constprop.0+0x158>)
 80117c0:	001e      	movs	r6, r3
 80117c2:	9101      	str	r1, [sp, #4]
 80117c4:	000b      	movs	r3, r1
 80117c6:	4694      	mov	ip, r2
 80117c8:	2108      	movs	r1, #8
 80117ca:	9009      	str	r0, [sp, #36]	; 0x24
 80117cc:	001a      	movs	r2, r3
 80117ce:	4660      	mov	r0, ip
 80117d0:	7814      	ldrb	r4, [r2, #0]
 80117d2:	3301      	adds	r3, #1
 80117d4:	5d00      	ldrb	r0, [r0, r4]
 80117d6:	001d      	movs	r5, r3
 80117d8:	0007      	movs	r7, r0
 80117da:	400f      	ands	r7, r1
 80117dc:	4208      	tst	r0, r1
 80117de:	d1f5      	bne.n	80117cc <_strtoull_l.constprop.0+0x14>
 80117e0:	2c2d      	cmp	r4, #45	; 0x2d
 80117e2:	d154      	bne.n	801188e <_strtoull_l.constprop.0+0xd6>
 80117e4:	781c      	ldrb	r4, [r3, #0]
 80117e6:	2301      	movs	r3, #1
 80117e8:	1c95      	adds	r5, r2, #2
 80117ea:	9306      	str	r3, [sp, #24]
 80117ec:	2e00      	cmp	r6, #0
 80117ee:	d100      	bne.n	80117f2 <_strtoull_l.constprop.0+0x3a>
 80117f0:	e088      	b.n	8011904 <_strtoull_l.constprop.0+0x14c>
 80117f2:	2e10      	cmp	r6, #16
 80117f4:	d10a      	bne.n	801180c <_strtoull_l.constprop.0+0x54>
 80117f6:	2c30      	cmp	r4, #48	; 0x30
 80117f8:	d108      	bne.n	801180c <_strtoull_l.constprop.0+0x54>
 80117fa:	2220      	movs	r2, #32
 80117fc:	782b      	ldrb	r3, [r5, #0]
 80117fe:	4393      	bics	r3, r2
 8011800:	2b58      	cmp	r3, #88	; 0x58
 8011802:	d000      	beq.n	8011806 <_strtoull_l.constprop.0+0x4e>
 8011804:	e078      	b.n	80118f8 <_strtoull_l.constprop.0+0x140>
 8011806:	2610      	movs	r6, #16
 8011808:	786c      	ldrb	r4, [r5, #1]
 801180a:	3502      	adds	r5, #2
 801180c:	17f7      	asrs	r7, r6, #31
 801180e:	0032      	movs	r2, r6
 8011810:	003b      	movs	r3, r7
 8011812:	2001      	movs	r0, #1
 8011814:	4240      	negs	r0, r0
 8011816:	17c1      	asrs	r1, r0, #31
 8011818:	f7ee fe44 	bl	80004a4 <__aeabi_uldivmod>
 801181c:	0032      	movs	r2, r6
 801181e:	9007      	str	r0, [sp, #28]
 8011820:	9103      	str	r1, [sp, #12]
 8011822:	003b      	movs	r3, r7
 8011824:	2001      	movs	r0, #1
 8011826:	4240      	negs	r0, r0
 8011828:	17c1      	asrs	r1, r0, #31
 801182a:	f7ee fe3b 	bl	80004a4 <__aeabi_uldivmod>
 801182e:	2300      	movs	r3, #0
 8011830:	2000      	movs	r0, #0
 8011832:	2100      	movs	r1, #0
 8011834:	9208      	str	r2, [sp, #32]
 8011836:	0022      	movs	r2, r4
 8011838:	3a30      	subs	r2, #48	; 0x30
 801183a:	2a09      	cmp	r2, #9
 801183c:	d82d      	bhi.n	801189a <_strtoull_l.constprop.0+0xe2>
 801183e:	0014      	movs	r4, r2
 8011840:	42a6      	cmp	r6, r4
 8011842:	dd39      	ble.n	80118b8 <_strtoull_l.constprop.0+0x100>
 8011844:	1c5a      	adds	r2, r3, #1
 8011846:	d01f      	beq.n	8011888 <_strtoull_l.constprop.0+0xd0>
 8011848:	9b03      	ldr	r3, [sp, #12]
 801184a:	4299      	cmp	r1, r3
 801184c:	d831      	bhi.n	80118b2 <_strtoull_l.constprop.0+0xfa>
 801184e:	d102      	bne.n	8011856 <_strtoull_l.constprop.0+0x9e>
 8011850:	9b07      	ldr	r3, [sp, #28]
 8011852:	4298      	cmp	r0, r3
 8011854:	d82d      	bhi.n	80118b2 <_strtoull_l.constprop.0+0xfa>
 8011856:	9b07      	ldr	r3, [sp, #28]
 8011858:	4283      	cmp	r3, r0
 801185a:	d107      	bne.n	801186c <_strtoull_l.constprop.0+0xb4>
 801185c:	9b03      	ldr	r3, [sp, #12]
 801185e:	428b      	cmp	r3, r1
 8011860:	d104      	bne.n	801186c <_strtoull_l.constprop.0+0xb4>
 8011862:	2301      	movs	r3, #1
 8011864:	9a08      	ldr	r2, [sp, #32]
 8011866:	425b      	negs	r3, r3
 8011868:	42a2      	cmp	r2, r4
 801186a:	db0d      	blt.n	8011888 <_strtoull_l.constprop.0+0xd0>
 801186c:	000b      	movs	r3, r1
 801186e:	0002      	movs	r2, r0
 8011870:	0039      	movs	r1, r7
 8011872:	0030      	movs	r0, r6
 8011874:	f7ee fe36 	bl	80004e4 <__aeabi_lmul>
 8011878:	17e3      	asrs	r3, r4, #31
 801187a:	9404      	str	r4, [sp, #16]
 801187c:	9305      	str	r3, [sp, #20]
 801187e:	9b04      	ldr	r3, [sp, #16]
 8011880:	9c05      	ldr	r4, [sp, #20]
 8011882:	18c0      	adds	r0, r0, r3
 8011884:	4161      	adcs	r1, r4
 8011886:	2301      	movs	r3, #1
 8011888:	782c      	ldrb	r4, [r5, #0]
 801188a:	3501      	adds	r5, #1
 801188c:	e7d3      	b.n	8011836 <_strtoull_l.constprop.0+0x7e>
 801188e:	9706      	str	r7, [sp, #24]
 8011890:	2c2b      	cmp	r4, #43	; 0x2b
 8011892:	d1ab      	bne.n	80117ec <_strtoull_l.constprop.0+0x34>
 8011894:	781c      	ldrb	r4, [r3, #0]
 8011896:	1c95      	adds	r5, r2, #2
 8011898:	e7a8      	b.n	80117ec <_strtoull_l.constprop.0+0x34>
 801189a:	0022      	movs	r2, r4
 801189c:	3a41      	subs	r2, #65	; 0x41
 801189e:	2a19      	cmp	r2, #25
 80118a0:	d801      	bhi.n	80118a6 <_strtoull_l.constprop.0+0xee>
 80118a2:	3c37      	subs	r4, #55	; 0x37
 80118a4:	e7cc      	b.n	8011840 <_strtoull_l.constprop.0+0x88>
 80118a6:	0022      	movs	r2, r4
 80118a8:	3a61      	subs	r2, #97	; 0x61
 80118aa:	2a19      	cmp	r2, #25
 80118ac:	d804      	bhi.n	80118b8 <_strtoull_l.constprop.0+0x100>
 80118ae:	3c57      	subs	r4, #87	; 0x57
 80118b0:	e7c6      	b.n	8011840 <_strtoull_l.constprop.0+0x88>
 80118b2:	2301      	movs	r3, #1
 80118b4:	425b      	negs	r3, r3
 80118b6:	e7e7      	b.n	8011888 <_strtoull_l.constprop.0+0xd0>
 80118b8:	1c5a      	adds	r2, r3, #1
 80118ba:	d10a      	bne.n	80118d2 <_strtoull_l.constprop.0+0x11a>
 80118bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118be:	3323      	adds	r3, #35	; 0x23
 80118c0:	6013      	str	r3, [r2, #0]
 80118c2:	9b02      	ldr	r3, [sp, #8]
 80118c4:	2001      	movs	r0, #1
 80118c6:	4240      	negs	r0, r0
 80118c8:	17c1      	asrs	r1, r0, #31
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d10e      	bne.n	80118ec <_strtoull_l.constprop.0+0x134>
 80118ce:	b00b      	add	sp, #44	; 0x2c
 80118d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118d2:	9a06      	ldr	r2, [sp, #24]
 80118d4:	2a00      	cmp	r2, #0
 80118d6:	d004      	beq.n	80118e2 <_strtoull_l.constprop.0+0x12a>
 80118d8:	0006      	movs	r6, r0
 80118da:	000f      	movs	r7, r1
 80118dc:	2100      	movs	r1, #0
 80118de:	4270      	negs	r0, r6
 80118e0:	41b9      	sbcs	r1, r7
 80118e2:	9a02      	ldr	r2, [sp, #8]
 80118e4:	2a00      	cmp	r2, #0
 80118e6:	d0f2      	beq.n	80118ce <_strtoull_l.constprop.0+0x116>
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d001      	beq.n	80118f0 <_strtoull_l.constprop.0+0x138>
 80118ec:	1e6b      	subs	r3, r5, #1
 80118ee:	9301      	str	r3, [sp, #4]
 80118f0:	9b02      	ldr	r3, [sp, #8]
 80118f2:	9a01      	ldr	r2, [sp, #4]
 80118f4:	601a      	str	r2, [r3, #0]
 80118f6:	e7ea      	b.n	80118ce <_strtoull_l.constprop.0+0x116>
 80118f8:	2430      	movs	r4, #48	; 0x30
 80118fa:	2e00      	cmp	r6, #0
 80118fc:	d000      	beq.n	8011900 <_strtoull_l.constprop.0+0x148>
 80118fe:	e785      	b.n	801180c <_strtoull_l.constprop.0+0x54>
 8011900:	3608      	adds	r6, #8
 8011902:	e783      	b.n	801180c <_strtoull_l.constprop.0+0x54>
 8011904:	2c30      	cmp	r4, #48	; 0x30
 8011906:	d100      	bne.n	801190a <_strtoull_l.constprop.0+0x152>
 8011908:	e777      	b.n	80117fa <_strtoull_l.constprop.0+0x42>
 801190a:	260a      	movs	r6, #10
 801190c:	e77e      	b.n	801180c <_strtoull_l.constprop.0+0x54>
 801190e:	46c0      	nop			; (mov r8, r8)
 8011910:	08014871 	.word	0x08014871

08011914 <_strtoull_r>:
 8011914:	b510      	push	{r4, lr}
 8011916:	f7ff ff4f 	bl	80117b8 <_strtoull_l.constprop.0>
 801191a:	bd10      	pop	{r4, pc}

0801191c <_mbrtowc_r>:
 801191c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801191e:	0004      	movs	r4, r0
 8011920:	0010      	movs	r0, r2
 8011922:	4a0b      	ldr	r2, [pc, #44]	; (8011950 <_mbrtowc_r+0x34>)
 8011924:	9d06      	ldr	r5, [sp, #24]
 8011926:	32e4      	adds	r2, #228	; 0xe4
 8011928:	6816      	ldr	r6, [r2, #0]
 801192a:	2800      	cmp	r0, #0
 801192c:	d10c      	bne.n	8011948 <_mbrtowc_r+0x2c>
 801192e:	2301      	movs	r3, #1
 8011930:	0001      	movs	r1, r0
 8011932:	4a08      	ldr	r2, [pc, #32]	; (8011954 <_mbrtowc_r+0x38>)
 8011934:	9500      	str	r5, [sp, #0]
 8011936:	0020      	movs	r0, r4
 8011938:	47b0      	blx	r6
 801193a:	1c43      	adds	r3, r0, #1
 801193c:	d103      	bne.n	8011946 <_mbrtowc_r+0x2a>
 801193e:	2300      	movs	r3, #0
 8011940:	602b      	str	r3, [r5, #0]
 8011942:	338a      	adds	r3, #138	; 0x8a
 8011944:	6023      	str	r3, [r4, #0]
 8011946:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011948:	0002      	movs	r2, r0
 801194a:	9500      	str	r5, [sp, #0]
 801194c:	e7f3      	b.n	8011936 <_mbrtowc_r+0x1a>
 801194e:	46c0      	nop			; (mov r8, r8)
 8011950:	2000044c 	.word	0x2000044c
 8011954:	08014bfb 	.word	0x08014bfb

08011958 <iswspace>:
 8011958:	b510      	push	{r4, lr}
 801195a:	2100      	movs	r1, #0
 801195c:	f000 f802 	bl	8011964 <iswspace_l>
 8011960:	bd10      	pop	{r4, pc}
	...

08011964 <iswspace_l>:
 8011964:	0003      	movs	r3, r0
 8011966:	2000      	movs	r0, #0
 8011968:	2bff      	cmp	r3, #255	; 0xff
 801196a:	d803      	bhi.n	8011974 <iswspace_l+0x10>
 801196c:	4a02      	ldr	r2, [pc, #8]	; (8011978 <iswspace_l+0x14>)
 801196e:	5cd0      	ldrb	r0, [r2, r3]
 8011970:	2308      	movs	r3, #8
 8011972:	4018      	ands	r0, r3
 8011974:	4770      	bx	lr
 8011976:	46c0      	nop			; (mov r8, r8)
 8011978:	08014871 	.word	0x08014871

0801197c <fiprintf>:
 801197c:	b40e      	push	{r1, r2, r3}
 801197e:	b517      	push	{r0, r1, r2, r4, lr}
 8011980:	4c05      	ldr	r4, [pc, #20]	; (8011998 <fiprintf+0x1c>)
 8011982:	ab05      	add	r3, sp, #20
 8011984:	cb04      	ldmia	r3!, {r2}
 8011986:	0001      	movs	r1, r0
 8011988:	6820      	ldr	r0, [r4, #0]
 801198a:	9301      	str	r3, [sp, #4]
 801198c:	f000 f954 	bl	8011c38 <_vfiprintf_r>
 8011990:	bc1e      	pop	{r1, r2, r3, r4}
 8011992:	bc08      	pop	{r3}
 8011994:	b003      	add	sp, #12
 8011996:	4718      	bx	r3
 8011998:	200006d8 	.word	0x200006d8

0801199c <__ssprint_r>:
 801199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801199e:	6813      	ldr	r3, [r2, #0]
 80119a0:	b087      	sub	sp, #28
 80119a2:	0017      	movs	r7, r2
 80119a4:	9303      	str	r3, [sp, #12]
 80119a6:	6893      	ldr	r3, [r2, #8]
 80119a8:	2200      	movs	r2, #0
 80119aa:	000c      	movs	r4, r1
 80119ac:	9005      	str	r0, [sp, #20]
 80119ae:	9202      	str	r2, [sp, #8]
 80119b0:	9201      	str	r2, [sp, #4]
 80119b2:	4293      	cmp	r3, r2
 80119b4:	d10d      	bne.n	80119d2 <__ssprint_r+0x36>
 80119b6:	2000      	movs	r0, #0
 80119b8:	2300      	movs	r3, #0
 80119ba:	607b      	str	r3, [r7, #4]
 80119bc:	b007      	add	sp, #28
 80119be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119c0:	9b03      	ldr	r3, [sp, #12]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	9302      	str	r3, [sp, #8]
 80119c6:	9b03      	ldr	r3, [sp, #12]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	9301      	str	r3, [sp, #4]
 80119cc:	9b03      	ldr	r3, [sp, #12]
 80119ce:	3308      	adds	r3, #8
 80119d0:	9303      	str	r3, [sp, #12]
 80119d2:	9a01      	ldr	r2, [sp, #4]
 80119d4:	68a6      	ldr	r6, [r4, #8]
 80119d6:	6823      	ldr	r3, [r4, #0]
 80119d8:	2a00      	cmp	r2, #0
 80119da:	d0f1      	beq.n	80119c0 <__ssprint_r+0x24>
 80119dc:	42b2      	cmp	r2, r6
 80119de:	d32e      	bcc.n	8011a3e <__ssprint_r+0xa2>
 80119e0:	2190      	movs	r1, #144	; 0x90
 80119e2:	89a2      	ldrh	r2, [r4, #12]
 80119e4:	00c9      	lsls	r1, r1, #3
 80119e6:	420a      	tst	r2, r1
 80119e8:	d029      	beq.n	8011a3e <__ssprint_r+0xa2>
 80119ea:	2003      	movs	r0, #3
 80119ec:	6921      	ldr	r1, [r4, #16]
 80119ee:	1a5b      	subs	r3, r3, r1
 80119f0:	9304      	str	r3, [sp, #16]
 80119f2:	6963      	ldr	r3, [r4, #20]
 80119f4:	4343      	muls	r3, r0
 80119f6:	0fdd      	lsrs	r5, r3, #31
 80119f8:	18ed      	adds	r5, r5, r3
 80119fa:	9b04      	ldr	r3, [sp, #16]
 80119fc:	9801      	ldr	r0, [sp, #4]
 80119fe:	3301      	adds	r3, #1
 8011a00:	181b      	adds	r3, r3, r0
 8011a02:	106d      	asrs	r5, r5, #1
 8011a04:	42ab      	cmp	r3, r5
 8011a06:	d900      	bls.n	8011a0a <__ssprint_r+0x6e>
 8011a08:	001d      	movs	r5, r3
 8011a0a:	0552      	lsls	r2, r2, #21
 8011a0c:	d532      	bpl.n	8011a74 <__ssprint_r+0xd8>
 8011a0e:	0029      	movs	r1, r5
 8011a10:	9805      	ldr	r0, [sp, #20]
 8011a12:	f7f9 fa35 	bl	800ae80 <_malloc_r>
 8011a16:	1e06      	subs	r6, r0, #0
 8011a18:	d036      	beq.n	8011a88 <__ssprint_r+0xec>
 8011a1a:	9a04      	ldr	r2, [sp, #16]
 8011a1c:	6921      	ldr	r1, [r4, #16]
 8011a1e:	f7fa fd94 	bl	800c54a <memcpy>
 8011a22:	89a2      	ldrh	r2, [r4, #12]
 8011a24:	4b1e      	ldr	r3, [pc, #120]	; (8011aa0 <__ssprint_r+0x104>)
 8011a26:	401a      	ands	r2, r3
 8011a28:	2380      	movs	r3, #128	; 0x80
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	81a3      	strh	r3, [r4, #12]
 8011a2e:	9b04      	ldr	r3, [sp, #16]
 8011a30:	6126      	str	r6, [r4, #16]
 8011a32:	18f6      	adds	r6, r6, r3
 8011a34:	6026      	str	r6, [r4, #0]
 8011a36:	6165      	str	r5, [r4, #20]
 8011a38:	9e01      	ldr	r6, [sp, #4]
 8011a3a:	1aed      	subs	r5, r5, r3
 8011a3c:	60a5      	str	r5, [r4, #8]
 8011a3e:	9b01      	ldr	r3, [sp, #4]
 8011a40:	429e      	cmp	r6, r3
 8011a42:	d900      	bls.n	8011a46 <__ssprint_r+0xaa>
 8011a44:	001e      	movs	r6, r3
 8011a46:	0032      	movs	r2, r6
 8011a48:	9902      	ldr	r1, [sp, #8]
 8011a4a:	6820      	ldr	r0, [r4, #0]
 8011a4c:	f001 f86d 	bl	8012b2a <memmove>
 8011a50:	9a01      	ldr	r2, [sp, #4]
 8011a52:	68a3      	ldr	r3, [r4, #8]
 8011a54:	4694      	mov	ip, r2
 8011a56:	1b9b      	subs	r3, r3, r6
 8011a58:	60a3      	str	r3, [r4, #8]
 8011a5a:	6823      	ldr	r3, [r4, #0]
 8011a5c:	199b      	adds	r3, r3, r6
 8011a5e:	6023      	str	r3, [r4, #0]
 8011a60:	9b02      	ldr	r3, [sp, #8]
 8011a62:	4463      	add	r3, ip
 8011a64:	9302      	str	r3, [sp, #8]
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	1a9b      	subs	r3, r3, r2
 8011a6a:	60bb      	str	r3, [r7, #8]
 8011a6c:	d0a3      	beq.n	80119b6 <__ssprint_r+0x1a>
 8011a6e:	2300      	movs	r3, #0
 8011a70:	9301      	str	r3, [sp, #4]
 8011a72:	e7ae      	b.n	80119d2 <__ssprint_r+0x36>
 8011a74:	002a      	movs	r2, r5
 8011a76:	9805      	ldr	r0, [sp, #20]
 8011a78:	f7ff fbc0 	bl	80111fc <_realloc_r>
 8011a7c:	1e06      	subs	r6, r0, #0
 8011a7e:	d1d6      	bne.n	8011a2e <__ssprint_r+0x92>
 8011a80:	6921      	ldr	r1, [r4, #16]
 8011a82:	9805      	ldr	r0, [sp, #20]
 8011a84:	f7fa fddc 	bl	800c640 <_free_r>
 8011a88:	230c      	movs	r3, #12
 8011a8a:	9a05      	ldr	r2, [sp, #20]
 8011a8c:	2001      	movs	r0, #1
 8011a8e:	6013      	str	r3, [r2, #0]
 8011a90:	89a2      	ldrh	r2, [r4, #12]
 8011a92:	3334      	adds	r3, #52	; 0x34
 8011a94:	4313      	orrs	r3, r2
 8011a96:	81a3      	strh	r3, [r4, #12]
 8011a98:	2300      	movs	r3, #0
 8011a9a:	4240      	negs	r0, r0
 8011a9c:	60bb      	str	r3, [r7, #8]
 8011a9e:	e78b      	b.n	80119b8 <__ssprint_r+0x1c>
 8011aa0:	fffffb7f 	.word	0xfffffb7f

08011aa4 <_sungetc_r>:
 8011aa4:	b570      	push	{r4, r5, r6, lr}
 8011aa6:	0014      	movs	r4, r2
 8011aa8:	1c4b      	adds	r3, r1, #1
 8011aaa:	d103      	bne.n	8011ab4 <_sungetc_r+0x10>
 8011aac:	2501      	movs	r5, #1
 8011aae:	426d      	negs	r5, r5
 8011ab0:	0028      	movs	r0, r5
 8011ab2:	bd70      	pop	{r4, r5, r6, pc}
 8011ab4:	8993      	ldrh	r3, [r2, #12]
 8011ab6:	2220      	movs	r2, #32
 8011ab8:	4393      	bics	r3, r2
 8011aba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011abc:	81a3      	strh	r3, [r4, #12]
 8011abe:	b2ce      	uxtb	r6, r1
 8011ac0:	6863      	ldr	r3, [r4, #4]
 8011ac2:	b2cd      	uxtb	r5, r1
 8011ac4:	2a00      	cmp	r2, #0
 8011ac6:	d010      	beq.n	8011aea <_sungetc_r+0x46>
 8011ac8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011aca:	429a      	cmp	r2, r3
 8011acc:	dd07      	ble.n	8011ade <_sungetc_r+0x3a>
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	3b01      	subs	r3, #1
 8011ad2:	6023      	str	r3, [r4, #0]
 8011ad4:	701e      	strb	r6, [r3, #0]
 8011ad6:	6863      	ldr	r3, [r4, #4]
 8011ad8:	3301      	adds	r3, #1
 8011ada:	6063      	str	r3, [r4, #4]
 8011adc:	e7e8      	b.n	8011ab0 <_sungetc_r+0xc>
 8011ade:	0021      	movs	r1, r4
 8011ae0:	f000 ff1a 	bl	8012918 <__submore>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d0f2      	beq.n	8011ace <_sungetc_r+0x2a>
 8011ae8:	e7e0      	b.n	8011aac <_sungetc_r+0x8>
 8011aea:	6921      	ldr	r1, [r4, #16]
 8011aec:	6822      	ldr	r2, [r4, #0]
 8011aee:	2900      	cmp	r1, #0
 8011af0:	d007      	beq.n	8011b02 <_sungetc_r+0x5e>
 8011af2:	4291      	cmp	r1, r2
 8011af4:	d205      	bcs.n	8011b02 <_sungetc_r+0x5e>
 8011af6:	1e51      	subs	r1, r2, #1
 8011af8:	7808      	ldrb	r0, [r1, #0]
 8011afa:	42a8      	cmp	r0, r5
 8011afc:	d101      	bne.n	8011b02 <_sungetc_r+0x5e>
 8011afe:	6021      	str	r1, [r4, #0]
 8011b00:	e7ea      	b.n	8011ad8 <_sungetc_r+0x34>
 8011b02:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011b04:	0023      	movs	r3, r4
 8011b06:	3340      	adds	r3, #64	; 0x40
 8011b08:	6323      	str	r3, [r4, #48]	; 0x30
 8011b0a:	2303      	movs	r3, #3
 8011b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8011b0e:	0023      	movs	r3, r4
 8011b10:	3342      	adds	r3, #66	; 0x42
 8011b12:	63a2      	str	r2, [r4, #56]	; 0x38
 8011b14:	701e      	strb	r6, [r3, #0]
 8011b16:	6023      	str	r3, [r4, #0]
 8011b18:	2301      	movs	r3, #1
 8011b1a:	e7de      	b.n	8011ada <_sungetc_r+0x36>

08011b1c <__ssrefill_r>:
 8011b1c:	b510      	push	{r4, lr}
 8011b1e:	000c      	movs	r4, r1
 8011b20:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8011b22:	2900      	cmp	r1, #0
 8011b24:	d00e      	beq.n	8011b44 <__ssrefill_r+0x28>
 8011b26:	0023      	movs	r3, r4
 8011b28:	3340      	adds	r3, #64	; 0x40
 8011b2a:	4299      	cmp	r1, r3
 8011b2c:	d001      	beq.n	8011b32 <__ssrefill_r+0x16>
 8011b2e:	f7fa fd87 	bl	800c640 <_free_r>
 8011b32:	2000      	movs	r0, #0
 8011b34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011b36:	6320      	str	r0, [r4, #48]	; 0x30
 8011b38:	6063      	str	r3, [r4, #4]
 8011b3a:	4283      	cmp	r3, r0
 8011b3c:	d002      	beq.n	8011b44 <__ssrefill_r+0x28>
 8011b3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b40:	6023      	str	r3, [r4, #0]
 8011b42:	bd10      	pop	{r4, pc}
 8011b44:	6923      	ldr	r3, [r4, #16]
 8011b46:	2001      	movs	r0, #1
 8011b48:	6023      	str	r3, [r4, #0]
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	89a2      	ldrh	r2, [r4, #12]
 8011b4e:	6063      	str	r3, [r4, #4]
 8011b50:	3320      	adds	r3, #32
 8011b52:	4313      	orrs	r3, r2
 8011b54:	81a3      	strh	r3, [r4, #12]
 8011b56:	4240      	negs	r0, r0
 8011b58:	e7f3      	b.n	8011b42 <__ssrefill_r+0x26>

08011b5a <_sfread_r>:
 8011b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b5c:	0014      	movs	r4, r2
 8011b5e:	435c      	muls	r4, r3
 8011b60:	b087      	sub	sp, #28
 8011b62:	1e26      	subs	r6, r4, #0
 8011b64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b66:	9005      	str	r0, [sp, #20]
 8011b68:	9101      	str	r1, [sp, #4]
 8011b6a:	9202      	str	r2, [sp, #8]
 8011b6c:	9303      	str	r3, [sp, #12]
 8011b6e:	d11e      	bne.n	8011bae <_sfread_r+0x54>
 8011b70:	0020      	movs	r0, r4
 8011b72:	b007      	add	sp, #28
 8011b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b76:	003a      	movs	r2, r7
 8011b78:	9801      	ldr	r0, [sp, #4]
 8011b7a:	f7fa fce6 	bl	800c54a <memcpy>
 8011b7e:	682b      	ldr	r3, [r5, #0]
 8011b80:	0029      	movs	r1, r5
 8011b82:	19db      	adds	r3, r3, r7
 8011b84:	602b      	str	r3, [r5, #0]
 8011b86:	2300      	movs	r3, #0
 8011b88:	606b      	str	r3, [r5, #4]
 8011b8a:	9b01      	ldr	r3, [sp, #4]
 8011b8c:	9805      	ldr	r0, [sp, #20]
 8011b8e:	19db      	adds	r3, r3, r7
 8011b90:	9301      	str	r3, [sp, #4]
 8011b92:	1bf3      	subs	r3, r6, r7
 8011b94:	9304      	str	r3, [sp, #16]
 8011b96:	f7ff ffc1 	bl	8011b1c <__ssrefill_r>
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	d006      	beq.n	8011bac <_sfread_r+0x52>
 8011b9e:	193c      	adds	r4, r7, r4
 8011ba0:	1ba0      	subs	r0, r4, r6
 8011ba2:	9902      	ldr	r1, [sp, #8]
 8011ba4:	f7ee faca 	bl	800013c <__udivsi3>
 8011ba8:	0004      	movs	r4, r0
 8011baa:	e7e1      	b.n	8011b70 <_sfread_r+0x16>
 8011bac:	9e04      	ldr	r6, [sp, #16]
 8011bae:	686f      	ldr	r7, [r5, #4]
 8011bb0:	6829      	ldr	r1, [r5, #0]
 8011bb2:	42b7      	cmp	r7, r6
 8011bb4:	d3df      	bcc.n	8011b76 <_sfread_r+0x1c>
 8011bb6:	0032      	movs	r2, r6
 8011bb8:	9801      	ldr	r0, [sp, #4]
 8011bba:	f7fa fcc6 	bl	800c54a <memcpy>
 8011bbe:	686b      	ldr	r3, [r5, #4]
 8011bc0:	9c03      	ldr	r4, [sp, #12]
 8011bc2:	1b9b      	subs	r3, r3, r6
 8011bc4:	606b      	str	r3, [r5, #4]
 8011bc6:	682b      	ldr	r3, [r5, #0]
 8011bc8:	199b      	adds	r3, r3, r6
 8011bca:	602b      	str	r3, [r5, #0]
 8011bcc:	e7d0      	b.n	8011b70 <_sfread_r+0x16>

08011bce <__sprint_r>:
 8011bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bd0:	6893      	ldr	r3, [r2, #8]
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	9001      	str	r0, [sp, #4]
 8011bd6:	000d      	movs	r5, r1
 8011bd8:	0014      	movs	r4, r2
 8011bda:	1e18      	subs	r0, r3, #0
 8011bdc:	d018      	beq.n	8011c10 <__sprint_r+0x42>
 8011bde:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011be0:	049b      	lsls	r3, r3, #18
 8011be2:	d524      	bpl.n	8011c2e <__sprint_r+0x60>
 8011be4:	6817      	ldr	r7, [r2, #0]
 8011be6:	2600      	movs	r6, #0
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	9302      	str	r3, [sp, #8]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	089b      	lsrs	r3, r3, #2
 8011bf2:	9303      	str	r3, [sp, #12]
 8011bf4:	9b03      	ldr	r3, [sp, #12]
 8011bf6:	42b3      	cmp	r3, r6
 8011bf8:	dc0e      	bgt.n	8011c18 <__sprint_r+0x4a>
 8011bfa:	2203      	movs	r2, #3
 8011bfc:	9b00      	ldr	r3, [sp, #0]
 8011bfe:	68a0      	ldr	r0, [r4, #8]
 8011c00:	4393      	bics	r3, r2
 8011c02:	1ac0      	subs	r0, r0, r3
 8011c04:	60a0      	str	r0, [r4, #8]
 8011c06:	3708      	adds	r7, #8
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d1ec      	bne.n	8011be6 <__sprint_r+0x18>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	60a3      	str	r3, [r4, #8]
 8011c10:	2300      	movs	r3, #0
 8011c12:	6063      	str	r3, [r4, #4]
 8011c14:	b005      	add	sp, #20
 8011c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c18:	9902      	ldr	r1, [sp, #8]
 8011c1a:	00b3      	lsls	r3, r6, #2
 8011c1c:	58c9      	ldr	r1, [r1, r3]
 8011c1e:	002a      	movs	r2, r5
 8011c20:	9801      	ldr	r0, [sp, #4]
 8011c22:	f000 ff59 	bl	8012ad8 <_fputwc_r>
 8011c26:	1c43      	adds	r3, r0, #1
 8011c28:	d0f0      	beq.n	8011c0c <__sprint_r+0x3e>
 8011c2a:	3601      	adds	r6, #1
 8011c2c:	e7e2      	b.n	8011bf4 <__sprint_r+0x26>
 8011c2e:	9801      	ldr	r0, [sp, #4]
 8011c30:	f000 fd14 	bl	801265c <__sfvwrite_r>
 8011c34:	e7ea      	b.n	8011c0c <__sprint_r+0x3e>
	...

08011c38 <_vfiprintf_r>:
 8011c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c3a:	b0c1      	sub	sp, #260	; 0x104
 8011c3c:	001c      	movs	r4, r3
 8011c3e:	001f      	movs	r7, r3
 8011c40:	9006      	str	r0, [sp, #24]
 8011c42:	9103      	str	r1, [sp, #12]
 8011c44:	9207      	str	r2, [sp, #28]
 8011c46:	2800      	cmp	r0, #0
 8011c48:	d004      	beq.n	8011c54 <_vfiprintf_r+0x1c>
 8011c4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d101      	bne.n	8011c54 <_vfiprintf_r+0x1c>
 8011c50:	f7fa fa98 	bl	800c184 <__sinit>
 8011c54:	9b03      	ldr	r3, [sp, #12]
 8011c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c58:	07db      	lsls	r3, r3, #31
 8011c5a:	d407      	bmi.n	8011c6c <_vfiprintf_r+0x34>
 8011c5c:	9b03      	ldr	r3, [sp, #12]
 8011c5e:	899b      	ldrh	r3, [r3, #12]
 8011c60:	059b      	lsls	r3, r3, #22
 8011c62:	d403      	bmi.n	8011c6c <_vfiprintf_r+0x34>
 8011c64:	9b03      	ldr	r3, [sp, #12]
 8011c66:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011c68:	f7fa fc62 	bl	800c530 <__retarget_lock_acquire_recursive>
 8011c6c:	9b03      	ldr	r3, [sp, #12]
 8011c6e:	220c      	movs	r2, #12
 8011c70:	5e9a      	ldrsh	r2, [r3, r2]
 8011c72:	2380      	movs	r3, #128	; 0x80
 8011c74:	019b      	lsls	r3, r3, #6
 8011c76:	421a      	tst	r2, r3
 8011c78:	d107      	bne.n	8011c8a <_vfiprintf_r+0x52>
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	9a03      	ldr	r2, [sp, #12]
 8011c7e:	8193      	strh	r3, [r2, #12]
 8011c80:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011c82:	4aa3      	ldr	r2, [pc, #652]	; (8011f10 <_vfiprintf_r+0x2d8>)
 8011c84:	4013      	ands	r3, r2
 8011c86:	9a03      	ldr	r2, [sp, #12]
 8011c88:	6653      	str	r3, [r2, #100]	; 0x64
 8011c8a:	9b03      	ldr	r3, [sp, #12]
 8011c8c:	899b      	ldrh	r3, [r3, #12]
 8011c8e:	071b      	lsls	r3, r3, #28
 8011c90:	d503      	bpl.n	8011c9a <_vfiprintf_r+0x62>
 8011c92:	9b03      	ldr	r3, [sp, #12]
 8011c94:	691b      	ldr	r3, [r3, #16]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d118      	bne.n	8011ccc <_vfiprintf_r+0x94>
 8011c9a:	9903      	ldr	r1, [sp, #12]
 8011c9c:	9806      	ldr	r0, [sp, #24]
 8011c9e:	f000 fe79 	bl	8012994 <__swsetup_r>
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	d012      	beq.n	8011ccc <_vfiprintf_r+0x94>
 8011ca6:	9b03      	ldr	r3, [sp, #12]
 8011ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011caa:	07db      	lsls	r3, r3, #31
 8011cac:	d505      	bpl.n	8011cba <_vfiprintf_r+0x82>
 8011cae:	2301      	movs	r3, #1
 8011cb0:	425b      	negs	r3, r3
 8011cb2:	9308      	str	r3, [sp, #32]
 8011cb4:	9808      	ldr	r0, [sp, #32]
 8011cb6:	b041      	add	sp, #260	; 0x104
 8011cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cba:	9b03      	ldr	r3, [sp, #12]
 8011cbc:	899b      	ldrh	r3, [r3, #12]
 8011cbe:	059b      	lsls	r3, r3, #22
 8011cc0:	d4f5      	bmi.n	8011cae <_vfiprintf_r+0x76>
 8011cc2:	9b03      	ldr	r3, [sp, #12]
 8011cc4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011cc6:	f7fa fc34 	bl	800c532 <__retarget_lock_release_recursive>
 8011cca:	e7f0      	b.n	8011cae <_vfiprintf_r+0x76>
 8011ccc:	221a      	movs	r2, #26
 8011cce:	9b03      	ldr	r3, [sp, #12]
 8011cd0:	899b      	ldrh	r3, [r3, #12]
 8011cd2:	401a      	ands	r2, r3
 8011cd4:	2a0a      	cmp	r2, #10
 8011cd6:	d116      	bne.n	8011d06 <_vfiprintf_r+0xce>
 8011cd8:	9a03      	ldr	r2, [sp, #12]
 8011cda:	210e      	movs	r1, #14
 8011cdc:	5e52      	ldrsh	r2, [r2, r1]
 8011cde:	2a00      	cmp	r2, #0
 8011ce0:	db11      	blt.n	8011d06 <_vfiprintf_r+0xce>
 8011ce2:	9a03      	ldr	r2, [sp, #12]
 8011ce4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011ce6:	07d2      	lsls	r2, r2, #31
 8011ce8:	d405      	bmi.n	8011cf6 <_vfiprintf_r+0xbe>
 8011cea:	059b      	lsls	r3, r3, #22
 8011cec:	d403      	bmi.n	8011cf6 <_vfiprintf_r+0xbe>
 8011cee:	9b03      	ldr	r3, [sp, #12]
 8011cf0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011cf2:	f7fa fc1e 	bl	800c532 <__retarget_lock_release_recursive>
 8011cf6:	0023      	movs	r3, r4
 8011cf8:	9a07      	ldr	r2, [sp, #28]
 8011cfa:	9903      	ldr	r1, [sp, #12]
 8011cfc:	9806      	ldr	r0, [sp, #24]
 8011cfe:	f000 fc69 	bl	80125d4 <__sbprintf>
 8011d02:	9008      	str	r0, [sp, #32]
 8011d04:	e7d6      	b.n	8011cb4 <_vfiprintf_r+0x7c>
 8011d06:	2300      	movs	r3, #0
 8011d08:	ad17      	add	r5, sp, #92	; 0x5c
 8011d0a:	9514      	str	r5, [sp, #80]	; 0x50
 8011d0c:	9316      	str	r3, [sp, #88]	; 0x58
 8011d0e:	9315      	str	r3, [sp, #84]	; 0x54
 8011d10:	930c      	str	r3, [sp, #48]	; 0x30
 8011d12:	930d      	str	r3, [sp, #52]	; 0x34
 8011d14:	930e      	str	r3, [sp, #56]	; 0x38
 8011d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d18:	9308      	str	r3, [sp, #32]
 8011d1a:	9c07      	ldr	r4, [sp, #28]
 8011d1c:	7823      	ldrb	r3, [r4, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d002      	beq.n	8011d28 <_vfiprintf_r+0xf0>
 8011d22:	2b25      	cmp	r3, #37	; 0x25
 8011d24:	d000      	beq.n	8011d28 <_vfiprintf_r+0xf0>
 8011d26:	e08d      	b.n	8011e44 <_vfiprintf_r+0x20c>
 8011d28:	9b07      	ldr	r3, [sp, #28]
 8011d2a:	1ae6      	subs	r6, r4, r3
 8011d2c:	429c      	cmp	r4, r3
 8011d2e:	d016      	beq.n	8011d5e <_vfiprintf_r+0x126>
 8011d30:	602b      	str	r3, [r5, #0]
 8011d32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011d34:	606e      	str	r6, [r5, #4]
 8011d36:	199b      	adds	r3, r3, r6
 8011d38:	9316      	str	r3, [sp, #88]	; 0x58
 8011d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d3c:	3508      	adds	r5, #8
 8011d3e:	3301      	adds	r3, #1
 8011d40:	9315      	str	r3, [sp, #84]	; 0x54
 8011d42:	2b07      	cmp	r3, #7
 8011d44:	dd08      	ble.n	8011d58 <_vfiprintf_r+0x120>
 8011d46:	9903      	ldr	r1, [sp, #12]
 8011d48:	9806      	ldr	r0, [sp, #24]
 8011d4a:	aa14      	add	r2, sp, #80	; 0x50
 8011d4c:	f7ff ff3f 	bl	8011bce <__sprint_r>
 8011d50:	2800      	cmp	r0, #0
 8011d52:	d000      	beq.n	8011d56 <_vfiprintf_r+0x11e>
 8011d54:	e3d9      	b.n	801250a <_vfiprintf_r+0x8d2>
 8011d56:	ad17      	add	r5, sp, #92	; 0x5c
 8011d58:	9b08      	ldr	r3, [sp, #32]
 8011d5a:	199b      	adds	r3, r3, r6
 8011d5c:	9308      	str	r3, [sp, #32]
 8011d5e:	7823      	ldrb	r3, [r4, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d101      	bne.n	8011d68 <_vfiprintf_r+0x130>
 8011d64:	f000 fbf6 	bl	8012554 <_vfiprintf_r+0x91c>
 8011d68:	2200      	movs	r2, #0
 8011d6a:	a912      	add	r1, sp, #72	; 0x48
 8011d6c:	70ca      	strb	r2, [r1, #3]
 8011d6e:	2101      	movs	r1, #1
 8011d70:	1c63      	adds	r3, r4, #1
 8011d72:	0014      	movs	r4, r2
 8011d74:	4249      	negs	r1, r1
 8011d76:	9105      	str	r1, [sp, #20]
 8011d78:	9209      	str	r2, [sp, #36]	; 0x24
 8011d7a:	1c5a      	adds	r2, r3, #1
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	9207      	str	r2, [sp, #28]
 8011d80:	0018      	movs	r0, r3
 8011d82:	3820      	subs	r0, #32
 8011d84:	285a      	cmp	r0, #90	; 0x5a
 8011d86:	d900      	bls.n	8011d8a <_vfiprintf_r+0x152>
 8011d88:	e362      	b.n	8012450 <_vfiprintf_r+0x818>
 8011d8a:	f7ee f9cd 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011d8e:	0078      	.short	0x0078
 8011d90:	03610361 	.word	0x03610361
 8011d94:	03610081 	.word	0x03610081
 8011d98:	03610361 	.word	0x03610361
 8011d9c:	0361005d 	.word	0x0361005d
 8011da0:	00830361 	.word	0x00830361
 8011da4:	0361008b 	.word	0x0361008b
 8011da8:	008f0089 	.word	0x008f0089
 8011dac:	00ad0361 	.word	0x00ad0361
 8011db0:	00af00af 	.word	0x00af00af
 8011db4:	00af00af 	.word	0x00af00af
 8011db8:	00af00af 	.word	0x00af00af
 8011dbc:	00af00af 	.word	0x00af00af
 8011dc0:	036100af 	.word	0x036100af
 8011dc4:	03610361 	.word	0x03610361
 8011dc8:	03610361 	.word	0x03610361
 8011dcc:	03610361 	.word	0x03610361
 8011dd0:	03610361 	.word	0x03610361
 8011dd4:	00e600da 	.word	0x00e600da
 8011dd8:	03610361 	.word	0x03610361
 8011ddc:	03610361 	.word	0x03610361
 8011de0:	03610361 	.word	0x03610361
 8011de4:	03610361 	.word	0x03610361
 8011de8:	03610361 	.word	0x03610361
 8011dec:	03610143 	.word	0x03610143
 8011df0:	03610361 	.word	0x03610361
 8011df4:	03610182 	.word	0x03610182
 8011df8:	0361027c 	.word	0x0361027c
 8011dfc:	02ae0361 	.word	0x02ae0361
 8011e00:	03610361 	.word	0x03610361
 8011e04:	03610361 	.word	0x03610361
 8011e08:	03610361 	.word	0x03610361
 8011e0c:	03610361 	.word	0x03610361
 8011e10:	03610361 	.word	0x03610361
 8011e14:	00e800da 	.word	0x00e800da
 8011e18:	03610361 	.word	0x03610361
 8011e1c:	00c30361 	.word	0x00c30361
 8011e20:	00d600e8 	.word	0x00d600e8
 8011e24:	00cf0361 	.word	0x00cf0361
 8011e28:	01260361 	.word	0x01260361
 8011e2c:	01740145 	.word	0x01740145
 8011e30:	036100d6 	.word	0x036100d6
 8011e34:	007f0182 	.word	0x007f0182
 8011e38:	0361027e 	.word	0x0361027e
 8011e3c:	02cd0361 	.word	0x02cd0361
 8011e40:	007f0361 	.word	0x007f0361
 8011e44:	3401      	adds	r4, #1
 8011e46:	e769      	b.n	8011d1c <_vfiprintf_r+0xe4>
 8011e48:	9806      	ldr	r0, [sp, #24]
 8011e4a:	f7fe fa47 	bl	80102dc <_localeconv_r>
 8011e4e:	6843      	ldr	r3, [r0, #4]
 8011e50:	0018      	movs	r0, r3
 8011e52:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e54:	f7ee f956 	bl	8000104 <strlen>
 8011e58:	900e      	str	r0, [sp, #56]	; 0x38
 8011e5a:	9806      	ldr	r0, [sp, #24]
 8011e5c:	f7fe fa3e 	bl	80102dc <_localeconv_r>
 8011e60:	6883      	ldr	r3, [r0, #8]
 8011e62:	930d      	str	r3, [sp, #52]	; 0x34
 8011e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d010      	beq.n	8011e8c <_vfiprintf_r+0x254>
 8011e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d00d      	beq.n	8011e8c <_vfiprintf_r+0x254>
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00a      	beq.n	8011e8c <_vfiprintf_r+0x254>
 8011e76:	2380      	movs	r3, #128	; 0x80
 8011e78:	00db      	lsls	r3, r3, #3
 8011e7a:	431c      	orrs	r4, r3
 8011e7c:	e006      	b.n	8011e8c <_vfiprintf_r+0x254>
 8011e7e:	ab12      	add	r3, sp, #72	; 0x48
 8011e80:	78da      	ldrb	r2, [r3, #3]
 8011e82:	3303      	adds	r3, #3
 8011e84:	2a00      	cmp	r2, #0
 8011e86:	d101      	bne.n	8011e8c <_vfiprintf_r+0x254>
 8011e88:	3220      	adds	r2, #32
 8011e8a:	701a      	strb	r2, [r3, #0]
 8011e8c:	9b07      	ldr	r3, [sp, #28]
 8011e8e:	e774      	b.n	8011d7a <_vfiprintf_r+0x142>
 8011e90:	2301      	movs	r3, #1
 8011e92:	e7f2      	b.n	8011e7a <_vfiprintf_r+0x242>
 8011e94:	cf08      	ldmia	r7!, {r3}
 8011e96:	9309      	str	r3, [sp, #36]	; 0x24
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	daf7      	bge.n	8011e8c <_vfiprintf_r+0x254>
 8011e9c:	425b      	negs	r3, r3
 8011e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8011ea0:	2304      	movs	r3, #4
 8011ea2:	e7ea      	b.n	8011e7a <_vfiprintf_r+0x242>
 8011ea4:	222b      	movs	r2, #43	; 0x2b
 8011ea6:	ab12      	add	r3, sp, #72	; 0x48
 8011ea8:	70da      	strb	r2, [r3, #3]
 8011eaa:	e7ef      	b.n	8011e8c <_vfiprintf_r+0x254>
 8011eac:	9b07      	ldr	r3, [sp, #28]
 8011eae:	1c5a      	adds	r2, r3, #1
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8011eb4:	d00f      	beq.n	8011ed6 <_vfiprintf_r+0x29e>
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	9105      	str	r1, [sp, #20]
 8011eba:	0019      	movs	r1, r3
 8011ebc:	3930      	subs	r1, #48	; 0x30
 8011ebe:	9207      	str	r2, [sp, #28]
 8011ec0:	2909      	cmp	r1, #9
 8011ec2:	d900      	bls.n	8011ec6 <_vfiprintf_r+0x28e>
 8011ec4:	e75c      	b.n	8011d80 <_vfiprintf_r+0x148>
 8011ec6:	200a      	movs	r0, #10
 8011ec8:	9b05      	ldr	r3, [sp, #20]
 8011eca:	4343      	muls	r3, r0
 8011ecc:	185b      	adds	r3, r3, r1
 8011ece:	9305      	str	r3, [sp, #20]
 8011ed0:	7813      	ldrb	r3, [r2, #0]
 8011ed2:	3201      	adds	r2, #1
 8011ed4:	e7f1      	b.n	8011eba <_vfiprintf_r+0x282>
 8011ed6:	cf08      	ldmia	r7!, {r3}
 8011ed8:	9305      	str	r3, [sp, #20]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	da02      	bge.n	8011ee4 <_vfiprintf_r+0x2ac>
 8011ede:	2301      	movs	r3, #1
 8011ee0:	425b      	negs	r3, r3
 8011ee2:	9305      	str	r3, [sp, #20]
 8011ee4:	9207      	str	r2, [sp, #28]
 8011ee6:	e7d1      	b.n	8011e8c <_vfiprintf_r+0x254>
 8011ee8:	2380      	movs	r3, #128	; 0x80
 8011eea:	e7c6      	b.n	8011e7a <_vfiprintf_r+0x242>
 8011eec:	2100      	movs	r1, #0
 8011eee:	9a07      	ldr	r2, [sp, #28]
 8011ef0:	9109      	str	r1, [sp, #36]	; 0x24
 8011ef2:	200a      	movs	r0, #10
 8011ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ef6:	3b30      	subs	r3, #48	; 0x30
 8011ef8:	4341      	muls	r1, r0
 8011efa:	185b      	adds	r3, r3, r1
 8011efc:	9309      	str	r3, [sp, #36]	; 0x24
 8011efe:	0013      	movs	r3, r2
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	3201      	adds	r2, #1
 8011f04:	0019      	movs	r1, r3
 8011f06:	3930      	subs	r1, #48	; 0x30
 8011f08:	9207      	str	r2, [sp, #28]
 8011f0a:	2909      	cmp	r1, #9
 8011f0c:	d9f1      	bls.n	8011ef2 <_vfiprintf_r+0x2ba>
 8011f0e:	e737      	b.n	8011d80 <_vfiprintf_r+0x148>
 8011f10:	ffffdfff 	.word	0xffffdfff
 8011f14:	9b07      	ldr	r3, [sp, #28]
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	2b68      	cmp	r3, #104	; 0x68
 8011f1a:	d105      	bne.n	8011f28 <_vfiprintf_r+0x2f0>
 8011f1c:	9b07      	ldr	r3, [sp, #28]
 8011f1e:	3301      	adds	r3, #1
 8011f20:	9307      	str	r3, [sp, #28]
 8011f22:	2380      	movs	r3, #128	; 0x80
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	e7a8      	b.n	8011e7a <_vfiprintf_r+0x242>
 8011f28:	2340      	movs	r3, #64	; 0x40
 8011f2a:	e7a6      	b.n	8011e7a <_vfiprintf_r+0x242>
 8011f2c:	9b07      	ldr	r3, [sp, #28]
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	2b6c      	cmp	r3, #108	; 0x6c
 8011f32:	d104      	bne.n	8011f3e <_vfiprintf_r+0x306>
 8011f34:	9b07      	ldr	r3, [sp, #28]
 8011f36:	3301      	adds	r3, #1
 8011f38:	9307      	str	r3, [sp, #28]
 8011f3a:	2320      	movs	r3, #32
 8011f3c:	e79d      	b.n	8011e7a <_vfiprintf_r+0x242>
 8011f3e:	2310      	movs	r3, #16
 8011f40:	e79b      	b.n	8011e7a <_vfiprintf_r+0x242>
 8011f42:	003a      	movs	r2, r7
 8011f44:	ca08      	ldmia	r2!, {r3}
 8011f46:	ae27      	add	r6, sp, #156	; 0x9c
 8011f48:	7033      	strb	r3, [r6, #0]
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	9204      	str	r2, [sp, #16]
 8011f4e:	aa12      	add	r2, sp, #72	; 0x48
 8011f50:	70d3      	strb	r3, [r2, #3]
 8011f52:	2201      	movs	r2, #1
 8011f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f56:	9205      	str	r2, [sp, #20]
 8011f58:	e0b0      	b.n	80120bc <_vfiprintf_r+0x484>
 8011f5a:	2310      	movs	r3, #16
 8011f5c:	431c      	orrs	r4, r3
 8011f5e:	06a3      	lsls	r3, r4, #26
 8011f60:	d52a      	bpl.n	8011fb8 <_vfiprintf_r+0x380>
 8011f62:	2307      	movs	r3, #7
 8011f64:	3707      	adds	r7, #7
 8011f66:	439f      	bics	r7, r3
 8011f68:	0039      	movs	r1, r7
 8011f6a:	c90c      	ldmia	r1!, {r2, r3}
 8011f6c:	9200      	str	r2, [sp, #0]
 8011f6e:	9301      	str	r3, [sp, #4]
 8011f70:	9104      	str	r1, [sp, #16]
 8011f72:	9a01      	ldr	r2, [sp, #4]
 8011f74:	2301      	movs	r3, #1
 8011f76:	2a00      	cmp	r2, #0
 8011f78:	da09      	bge.n	8011f8e <_vfiprintf_r+0x356>
 8011f7a:	9e00      	ldr	r6, [sp, #0]
 8011f7c:	9f01      	ldr	r7, [sp, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	4271      	negs	r1, r6
 8011f82:	41ba      	sbcs	r2, r7
 8011f84:	9100      	str	r1, [sp, #0]
 8011f86:	9201      	str	r2, [sp, #4]
 8011f88:	212d      	movs	r1, #45	; 0x2d
 8011f8a:	aa12      	add	r2, sp, #72	; 0x48
 8011f8c:	70d1      	strb	r1, [r2, #3]
 8011f8e:	9901      	ldr	r1, [sp, #4]
 8011f90:	9a00      	ldr	r2, [sp, #0]
 8011f92:	430a      	orrs	r2, r1
 8011f94:	9905      	ldr	r1, [sp, #20]
 8011f96:	3101      	adds	r1, #1
 8011f98:	d100      	bne.n	8011f9c <_vfiprintf_r+0x364>
 8011f9a:	e2e9      	b.n	8012570 <_vfiprintf_r+0x938>
 8011f9c:	2180      	movs	r1, #128	; 0x80
 8011f9e:	0027      	movs	r7, r4
 8011fa0:	438f      	bics	r7, r1
 8011fa2:	2a00      	cmp	r2, #0
 8011fa4:	d000      	beq.n	8011fa8 <_vfiprintf_r+0x370>
 8011fa6:	e2e7      	b.n	8012578 <_vfiprintf_r+0x940>
 8011fa8:	9a05      	ldr	r2, [sp, #20]
 8011faa:	2a00      	cmp	r2, #0
 8011fac:	d100      	bne.n	8011fb0 <_vfiprintf_r+0x378>
 8011fae:	e243      	b.n	8012438 <_vfiprintf_r+0x800>
 8011fb0:	2b01      	cmp	r3, #1
 8011fb2:	d000      	beq.n	8011fb6 <_vfiprintf_r+0x37e>
 8011fb4:	e2e3      	b.n	801257e <_vfiprintf_r+0x946>
 8011fb6:	e1e7      	b.n	8012388 <_vfiprintf_r+0x750>
 8011fb8:	003a      	movs	r2, r7
 8011fba:	ca08      	ldmia	r2!, {r3}
 8011fbc:	9204      	str	r2, [sp, #16]
 8011fbe:	06e2      	lsls	r2, r4, #27
 8011fc0:	d503      	bpl.n	8011fca <_vfiprintf_r+0x392>
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	17db      	asrs	r3, r3, #31
 8011fc6:	9301      	str	r3, [sp, #4]
 8011fc8:	e7d3      	b.n	8011f72 <_vfiprintf_r+0x33a>
 8011fca:	0662      	lsls	r2, r4, #25
 8011fcc:	d501      	bpl.n	8011fd2 <_vfiprintf_r+0x39a>
 8011fce:	b21b      	sxth	r3, r3
 8011fd0:	e7f7      	b.n	8011fc2 <_vfiprintf_r+0x38a>
 8011fd2:	05a2      	lsls	r2, r4, #22
 8011fd4:	d5f5      	bpl.n	8011fc2 <_vfiprintf_r+0x38a>
 8011fd6:	b25b      	sxtb	r3, r3
 8011fd8:	e7f3      	b.n	8011fc2 <_vfiprintf_r+0x38a>
 8011fda:	1d3b      	adds	r3, r7, #4
 8011fdc:	9304      	str	r3, [sp, #16]
 8011fde:	06a3      	lsls	r3, r4, #26
 8011fe0:	d506      	bpl.n	8011ff0 <_vfiprintf_r+0x3b8>
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	9a08      	ldr	r2, [sp, #32]
 8011fe6:	601a      	str	r2, [r3, #0]
 8011fe8:	17d2      	asrs	r2, r2, #31
 8011fea:	605a      	str	r2, [r3, #4]
 8011fec:	9f04      	ldr	r7, [sp, #16]
 8011fee:	e694      	b.n	8011d1a <_vfiprintf_r+0xe2>
 8011ff0:	06e3      	lsls	r3, r4, #27
 8011ff2:	d503      	bpl.n	8011ffc <_vfiprintf_r+0x3c4>
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	9a08      	ldr	r2, [sp, #32]
 8011ff8:	601a      	str	r2, [r3, #0]
 8011ffa:	e7f7      	b.n	8011fec <_vfiprintf_r+0x3b4>
 8011ffc:	0663      	lsls	r3, r4, #25
 8011ffe:	d503      	bpl.n	8012008 <_vfiprintf_r+0x3d0>
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	9a08      	ldr	r2, [sp, #32]
 8012004:	801a      	strh	r2, [r3, #0]
 8012006:	e7f1      	b.n	8011fec <_vfiprintf_r+0x3b4>
 8012008:	05a4      	lsls	r4, r4, #22
 801200a:	d5f3      	bpl.n	8011ff4 <_vfiprintf_r+0x3bc>
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	9a08      	ldr	r2, [sp, #32]
 8012010:	701a      	strb	r2, [r3, #0]
 8012012:	e7eb      	b.n	8011fec <_vfiprintf_r+0x3b4>
 8012014:	2310      	movs	r3, #16
 8012016:	431c      	orrs	r4, r3
 8012018:	2320      	movs	r3, #32
 801201a:	0020      	movs	r0, r4
 801201c:	4018      	ands	r0, r3
 801201e:	421c      	tst	r4, r3
 8012020:	d00d      	beq.n	801203e <_vfiprintf_r+0x406>
 8012022:	3b19      	subs	r3, #25
 8012024:	3707      	adds	r7, #7
 8012026:	439f      	bics	r7, r3
 8012028:	0039      	movs	r1, r7
 801202a:	c90c      	ldmia	r1!, {r2, r3}
 801202c:	9200      	str	r2, [sp, #0]
 801202e:	9301      	str	r3, [sp, #4]
 8012030:	9104      	str	r1, [sp, #16]
 8012032:	4bcc      	ldr	r3, [pc, #816]	; (8012364 <_vfiprintf_r+0x72c>)
 8012034:	401c      	ands	r4, r3
 8012036:	2300      	movs	r3, #0
 8012038:	2100      	movs	r1, #0
 801203a:	aa12      	add	r2, sp, #72	; 0x48
 801203c:	e7a6      	b.n	8011f8c <_vfiprintf_r+0x354>
 801203e:	003a      	movs	r2, r7
 8012040:	ca08      	ldmia	r2!, {r3}
 8012042:	0021      	movs	r1, r4
 8012044:	9204      	str	r2, [sp, #16]
 8012046:	2210      	movs	r2, #16
 8012048:	4011      	ands	r1, r2
 801204a:	4214      	tst	r4, r2
 801204c:	d002      	beq.n	8012054 <_vfiprintf_r+0x41c>
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	9001      	str	r0, [sp, #4]
 8012052:	e7ee      	b.n	8012032 <_vfiprintf_r+0x3fa>
 8012054:	2240      	movs	r2, #64	; 0x40
 8012056:	0020      	movs	r0, r4
 8012058:	4010      	ands	r0, r2
 801205a:	4214      	tst	r4, r2
 801205c:	d003      	beq.n	8012066 <_vfiprintf_r+0x42e>
 801205e:	b29b      	uxth	r3, r3
 8012060:	9300      	str	r3, [sp, #0]
 8012062:	9101      	str	r1, [sp, #4]
 8012064:	e7e5      	b.n	8012032 <_vfiprintf_r+0x3fa>
 8012066:	2280      	movs	r2, #128	; 0x80
 8012068:	0021      	movs	r1, r4
 801206a:	0092      	lsls	r2, r2, #2
 801206c:	4011      	ands	r1, r2
 801206e:	4214      	tst	r4, r2
 8012070:	d0f6      	beq.n	8012060 <_vfiprintf_r+0x428>
 8012072:	b2db      	uxtb	r3, r3
 8012074:	e7eb      	b.n	801204e <_vfiprintf_r+0x416>
 8012076:	003b      	movs	r3, r7
 8012078:	cb04      	ldmia	r3!, {r2}
 801207a:	49bb      	ldr	r1, [pc, #748]	; (8012368 <_vfiprintf_r+0x730>)
 801207c:	9304      	str	r3, [sp, #16]
 801207e:	2300      	movs	r3, #0
 8012080:	9200      	str	r2, [sp, #0]
 8012082:	aa13      	add	r2, sp, #76	; 0x4c
 8012084:	8011      	strh	r1, [r2, #0]
 8012086:	4ab9      	ldr	r2, [pc, #740]	; (801236c <_vfiprintf_r+0x734>)
 8012088:	9301      	str	r3, [sp, #4]
 801208a:	3302      	adds	r3, #2
 801208c:	431c      	orrs	r4, r3
 801208e:	920c      	str	r2, [sp, #48]	; 0x30
 8012090:	e7d2      	b.n	8012038 <_vfiprintf_r+0x400>
 8012092:	003b      	movs	r3, r7
 8012094:	2700      	movs	r7, #0
 8012096:	cb40      	ldmia	r3!, {r6}
 8012098:	9304      	str	r3, [sp, #16]
 801209a:	ab12      	add	r3, sp, #72	; 0x48
 801209c:	70df      	strb	r7, [r3, #3]
 801209e:	9b05      	ldr	r3, [sp, #20]
 80120a0:	3301      	adds	r3, #1
 80120a2:	d100      	bne.n	80120a6 <_vfiprintf_r+0x46e>
 80120a4:	e0ea      	b.n	801227c <_vfiprintf_r+0x644>
 80120a6:	0039      	movs	r1, r7
 80120a8:	0030      	movs	r0, r6
 80120aa:	9a05      	ldr	r2, [sp, #20]
 80120ac:	f7fe f92e 	bl	801030c <memchr>
 80120b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80120b2:	42b8      	cmp	r0, r7
 80120b4:	d002      	beq.n	80120bc <_vfiprintf_r+0x484>
 80120b6:	1b83      	subs	r3, r0, r6
 80120b8:	9305      	str	r3, [sp, #20]
 80120ba:	970b      	str	r7, [sp, #44]	; 0x2c
 80120bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120be:	9a05      	ldr	r2, [sp, #20]
 80120c0:	930a      	str	r3, [sp, #40]	; 0x28
 80120c2:	4293      	cmp	r3, r2
 80120c4:	da00      	bge.n	80120c8 <_vfiprintf_r+0x490>
 80120c6:	920a      	str	r2, [sp, #40]	; 0x28
 80120c8:	ab12      	add	r3, sp, #72	; 0x48
 80120ca:	3303      	adds	r3, #3
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	1e5a      	subs	r2, r3, #1
 80120d0:	4193      	sbcs	r3, r2
 80120d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120d4:	18d3      	adds	r3, r2, r3
 80120d6:	930a      	str	r3, [sp, #40]	; 0x28
 80120d8:	0022      	movs	r2, r4
 80120da:	2302      	movs	r3, #2
 80120dc:	401a      	ands	r2, r3
 80120de:	9210      	str	r2, [sp, #64]	; 0x40
 80120e0:	421c      	tst	r4, r3
 80120e2:	d002      	beq.n	80120ea <_vfiprintf_r+0x4b2>
 80120e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120e6:	3302      	adds	r3, #2
 80120e8:	930a      	str	r3, [sp, #40]	; 0x28
 80120ea:	2384      	movs	r3, #132	; 0x84
 80120ec:	0022      	movs	r2, r4
 80120ee:	401a      	ands	r2, r3
 80120f0:	9211      	str	r2, [sp, #68]	; 0x44
 80120f2:	421c      	tst	r4, r3
 80120f4:	d11e      	bne.n	8012134 <_vfiprintf_r+0x4fc>
 80120f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120fa:	1a9f      	subs	r7, r3, r2
 80120fc:	2f00      	cmp	r7, #0
 80120fe:	dd19      	ble.n	8012134 <_vfiprintf_r+0x4fc>
 8012100:	0029      	movs	r1, r5
 8012102:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012104:	489a      	ldr	r0, [pc, #616]	; (8012370 <_vfiprintf_r+0x738>)
 8012106:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012108:	3301      	adds	r3, #1
 801210a:	3108      	adds	r1, #8
 801210c:	6028      	str	r0, [r5, #0]
 801210e:	2f10      	cmp	r7, #16
 8012110:	dd00      	ble.n	8012114 <_vfiprintf_r+0x4dc>
 8012112:	e1a7      	b.n	8012464 <_vfiprintf_r+0x82c>
 8012114:	606f      	str	r7, [r5, #4]
 8012116:	18bf      	adds	r7, r7, r2
 8012118:	000d      	movs	r5, r1
 801211a:	9716      	str	r7, [sp, #88]	; 0x58
 801211c:	9315      	str	r3, [sp, #84]	; 0x54
 801211e:	2b07      	cmp	r3, #7
 8012120:	dd08      	ble.n	8012134 <_vfiprintf_r+0x4fc>
 8012122:	9903      	ldr	r1, [sp, #12]
 8012124:	9806      	ldr	r0, [sp, #24]
 8012126:	aa14      	add	r2, sp, #80	; 0x50
 8012128:	f7ff fd51 	bl	8011bce <__sprint_r>
 801212c:	2800      	cmp	r0, #0
 801212e:	d000      	beq.n	8012132 <_vfiprintf_r+0x4fa>
 8012130:	e1eb      	b.n	801250a <_vfiprintf_r+0x8d2>
 8012132:	ad17      	add	r5, sp, #92	; 0x5c
 8012134:	a912      	add	r1, sp, #72	; 0x48
 8012136:	78c8      	ldrb	r0, [r1, #3]
 8012138:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801213a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801213c:	3103      	adds	r1, #3
 801213e:	2800      	cmp	r0, #0
 8012140:	d012      	beq.n	8012168 <_vfiprintf_r+0x530>
 8012142:	6029      	str	r1, [r5, #0]
 8012144:	2101      	movs	r1, #1
 8012146:	3301      	adds	r3, #1
 8012148:	1852      	adds	r2, r2, r1
 801214a:	6069      	str	r1, [r5, #4]
 801214c:	9216      	str	r2, [sp, #88]	; 0x58
 801214e:	9315      	str	r3, [sp, #84]	; 0x54
 8012150:	3508      	adds	r5, #8
 8012152:	2b07      	cmp	r3, #7
 8012154:	dd08      	ble.n	8012168 <_vfiprintf_r+0x530>
 8012156:	9903      	ldr	r1, [sp, #12]
 8012158:	9806      	ldr	r0, [sp, #24]
 801215a:	aa14      	add	r2, sp, #80	; 0x50
 801215c:	f7ff fd37 	bl	8011bce <__sprint_r>
 8012160:	2800      	cmp	r0, #0
 8012162:	d000      	beq.n	8012166 <_vfiprintf_r+0x52e>
 8012164:	e1d1      	b.n	801250a <_vfiprintf_r+0x8d2>
 8012166:	ad17      	add	r5, sp, #92	; 0x5c
 8012168:	9910      	ldr	r1, [sp, #64]	; 0x40
 801216a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801216c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801216e:	2900      	cmp	r1, #0
 8012170:	d013      	beq.n	801219a <_vfiprintf_r+0x562>
 8012172:	a913      	add	r1, sp, #76	; 0x4c
 8012174:	6029      	str	r1, [r5, #0]
 8012176:	2102      	movs	r1, #2
 8012178:	3301      	adds	r3, #1
 801217a:	1852      	adds	r2, r2, r1
 801217c:	6069      	str	r1, [r5, #4]
 801217e:	9216      	str	r2, [sp, #88]	; 0x58
 8012180:	9315      	str	r3, [sp, #84]	; 0x54
 8012182:	3508      	adds	r5, #8
 8012184:	2b07      	cmp	r3, #7
 8012186:	dd08      	ble.n	801219a <_vfiprintf_r+0x562>
 8012188:	9903      	ldr	r1, [sp, #12]
 801218a:	9806      	ldr	r0, [sp, #24]
 801218c:	aa14      	add	r2, sp, #80	; 0x50
 801218e:	f7ff fd1e 	bl	8011bce <__sprint_r>
 8012192:	2800      	cmp	r0, #0
 8012194:	d000      	beq.n	8012198 <_vfiprintf_r+0x560>
 8012196:	e1b8      	b.n	801250a <_vfiprintf_r+0x8d2>
 8012198:	ad17      	add	r5, sp, #92	; 0x5c
 801219a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801219c:	2b80      	cmp	r3, #128	; 0x80
 801219e:	d11e      	bne.n	80121de <_vfiprintf_r+0x5a6>
 80121a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121a4:	1a9f      	subs	r7, r3, r2
 80121a6:	2f00      	cmp	r7, #0
 80121a8:	dd19      	ble.n	80121de <_vfiprintf_r+0x5a6>
 80121aa:	0029      	movs	r1, r5
 80121ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121ae:	4871      	ldr	r0, [pc, #452]	; (8012374 <_vfiprintf_r+0x73c>)
 80121b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80121b2:	3301      	adds	r3, #1
 80121b4:	3108      	adds	r1, #8
 80121b6:	6028      	str	r0, [r5, #0]
 80121b8:	2f10      	cmp	r7, #16
 80121ba:	dd00      	ble.n	80121be <_vfiprintf_r+0x586>
 80121bc:	e164      	b.n	8012488 <_vfiprintf_r+0x850>
 80121be:	606f      	str	r7, [r5, #4]
 80121c0:	18bf      	adds	r7, r7, r2
 80121c2:	000d      	movs	r5, r1
 80121c4:	9716      	str	r7, [sp, #88]	; 0x58
 80121c6:	9315      	str	r3, [sp, #84]	; 0x54
 80121c8:	2b07      	cmp	r3, #7
 80121ca:	dd08      	ble.n	80121de <_vfiprintf_r+0x5a6>
 80121cc:	9903      	ldr	r1, [sp, #12]
 80121ce:	9806      	ldr	r0, [sp, #24]
 80121d0:	aa14      	add	r2, sp, #80	; 0x50
 80121d2:	f7ff fcfc 	bl	8011bce <__sprint_r>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d000      	beq.n	80121dc <_vfiprintf_r+0x5a4>
 80121da:	e196      	b.n	801250a <_vfiprintf_r+0x8d2>
 80121dc:	ad17      	add	r5, sp, #92	; 0x5c
 80121de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121e0:	9a05      	ldr	r2, [sp, #20]
 80121e2:	1a9f      	subs	r7, r3, r2
 80121e4:	2f00      	cmp	r7, #0
 80121e6:	dd19      	ble.n	801221c <_vfiprintf_r+0x5e4>
 80121e8:	0029      	movs	r1, r5
 80121ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121ec:	4861      	ldr	r0, [pc, #388]	; (8012374 <_vfiprintf_r+0x73c>)
 80121ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80121f0:	3301      	adds	r3, #1
 80121f2:	3108      	adds	r1, #8
 80121f4:	6028      	str	r0, [r5, #0]
 80121f6:	2f10      	cmp	r7, #16
 80121f8:	dd00      	ble.n	80121fc <_vfiprintf_r+0x5c4>
 80121fa:	e157      	b.n	80124ac <_vfiprintf_r+0x874>
 80121fc:	606f      	str	r7, [r5, #4]
 80121fe:	18bf      	adds	r7, r7, r2
 8012200:	000d      	movs	r5, r1
 8012202:	9716      	str	r7, [sp, #88]	; 0x58
 8012204:	9315      	str	r3, [sp, #84]	; 0x54
 8012206:	2b07      	cmp	r3, #7
 8012208:	dd08      	ble.n	801221c <_vfiprintf_r+0x5e4>
 801220a:	9903      	ldr	r1, [sp, #12]
 801220c:	9806      	ldr	r0, [sp, #24]
 801220e:	aa14      	add	r2, sp, #80	; 0x50
 8012210:	f7ff fcdd 	bl	8011bce <__sprint_r>
 8012214:	2800      	cmp	r0, #0
 8012216:	d000      	beq.n	801221a <_vfiprintf_r+0x5e2>
 8012218:	e177      	b.n	801250a <_vfiprintf_r+0x8d2>
 801221a:	ad17      	add	r5, sp, #92	; 0x5c
 801221c:	9b05      	ldr	r3, [sp, #20]
 801221e:	9a05      	ldr	r2, [sp, #20]
 8012220:	606b      	str	r3, [r5, #4]
 8012222:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012224:	602e      	str	r6, [r5, #0]
 8012226:	189b      	adds	r3, r3, r2
 8012228:	9316      	str	r3, [sp, #88]	; 0x58
 801222a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801222c:	3508      	adds	r5, #8
 801222e:	3301      	adds	r3, #1
 8012230:	9315      	str	r3, [sp, #84]	; 0x54
 8012232:	2b07      	cmp	r3, #7
 8012234:	dd08      	ble.n	8012248 <_vfiprintf_r+0x610>
 8012236:	9903      	ldr	r1, [sp, #12]
 8012238:	9806      	ldr	r0, [sp, #24]
 801223a:	aa14      	add	r2, sp, #80	; 0x50
 801223c:	f7ff fcc7 	bl	8011bce <__sprint_r>
 8012240:	2800      	cmp	r0, #0
 8012242:	d000      	beq.n	8012246 <_vfiprintf_r+0x60e>
 8012244:	e161      	b.n	801250a <_vfiprintf_r+0x8d2>
 8012246:	ad17      	add	r5, sp, #92	; 0x5c
 8012248:	0764      	lsls	r4, r4, #29
 801224a:	d500      	bpl.n	801224e <_vfiprintf_r+0x616>
 801224c:	e140      	b.n	80124d0 <_vfiprintf_r+0x898>
 801224e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012252:	4293      	cmp	r3, r2
 8012254:	da00      	bge.n	8012258 <_vfiprintf_r+0x620>
 8012256:	0013      	movs	r3, r2
 8012258:	9a08      	ldr	r2, [sp, #32]
 801225a:	18d3      	adds	r3, r2, r3
 801225c:	9308      	str	r3, [sp, #32]
 801225e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012260:	2b00      	cmp	r3, #0
 8012262:	d007      	beq.n	8012274 <_vfiprintf_r+0x63c>
 8012264:	9903      	ldr	r1, [sp, #12]
 8012266:	9806      	ldr	r0, [sp, #24]
 8012268:	aa14      	add	r2, sp, #80	; 0x50
 801226a:	f7ff fcb0 	bl	8011bce <__sprint_r>
 801226e:	2800      	cmp	r0, #0
 8012270:	d000      	beq.n	8012274 <_vfiprintf_r+0x63c>
 8012272:	e14a      	b.n	801250a <_vfiprintf_r+0x8d2>
 8012274:	2300      	movs	r3, #0
 8012276:	ad17      	add	r5, sp, #92	; 0x5c
 8012278:	9315      	str	r3, [sp, #84]	; 0x54
 801227a:	e6b7      	b.n	8011fec <_vfiprintf_r+0x3b4>
 801227c:	0030      	movs	r0, r6
 801227e:	f7ed ff41 	bl	8000104 <strlen>
 8012282:	9005      	str	r0, [sp, #20]
 8012284:	e719      	b.n	80120ba <_vfiprintf_r+0x482>
 8012286:	2310      	movs	r3, #16
 8012288:	431c      	orrs	r4, r3
 801228a:	2320      	movs	r3, #32
 801228c:	0020      	movs	r0, r4
 801228e:	4018      	ands	r0, r3
 8012290:	421c      	tst	r4, r3
 8012292:	d009      	beq.n	80122a8 <_vfiprintf_r+0x670>
 8012294:	3b19      	subs	r3, #25
 8012296:	3707      	adds	r7, #7
 8012298:	439f      	bics	r7, r3
 801229a:	0039      	movs	r1, r7
 801229c:	c90c      	ldmia	r1!, {r2, r3}
 801229e:	9200      	str	r2, [sp, #0]
 80122a0:	9301      	str	r3, [sp, #4]
 80122a2:	9104      	str	r1, [sp, #16]
 80122a4:	2301      	movs	r3, #1
 80122a6:	e6c7      	b.n	8012038 <_vfiprintf_r+0x400>
 80122a8:	003b      	movs	r3, r7
 80122aa:	cb04      	ldmia	r3!, {r2}
 80122ac:	0021      	movs	r1, r4
 80122ae:	9304      	str	r3, [sp, #16]
 80122b0:	2310      	movs	r3, #16
 80122b2:	4019      	ands	r1, r3
 80122b4:	421c      	tst	r4, r3
 80122b6:	d003      	beq.n	80122c0 <_vfiprintf_r+0x688>
 80122b8:	9200      	str	r2, [sp, #0]
 80122ba:	9001      	str	r0, [sp, #4]
 80122bc:	3b0f      	subs	r3, #15
 80122be:	e6bb      	b.n	8012038 <_vfiprintf_r+0x400>
 80122c0:	2340      	movs	r3, #64	; 0x40
 80122c2:	0020      	movs	r0, r4
 80122c4:	4018      	ands	r0, r3
 80122c6:	421c      	tst	r4, r3
 80122c8:	d003      	beq.n	80122d2 <_vfiprintf_r+0x69a>
 80122ca:	b293      	uxth	r3, r2
 80122cc:	9300      	str	r3, [sp, #0]
 80122ce:	9101      	str	r1, [sp, #4]
 80122d0:	e7e8      	b.n	80122a4 <_vfiprintf_r+0x66c>
 80122d2:	2380      	movs	r3, #128	; 0x80
 80122d4:	0021      	movs	r1, r4
 80122d6:	009b      	lsls	r3, r3, #2
 80122d8:	4019      	ands	r1, r3
 80122da:	421c      	tst	r4, r3
 80122dc:	d003      	beq.n	80122e6 <_vfiprintf_r+0x6ae>
 80122de:	b2d3      	uxtb	r3, r2
 80122e0:	9300      	str	r3, [sp, #0]
 80122e2:	9001      	str	r0, [sp, #4]
 80122e4:	e7de      	b.n	80122a4 <_vfiprintf_r+0x66c>
 80122e6:	9200      	str	r2, [sp, #0]
 80122e8:	e7f1      	b.n	80122ce <_vfiprintf_r+0x696>
 80122ea:	4a23      	ldr	r2, [pc, #140]	; (8012378 <_vfiprintf_r+0x740>)
 80122ec:	0020      	movs	r0, r4
 80122ee:	920c      	str	r2, [sp, #48]	; 0x30
 80122f0:	2220      	movs	r2, #32
 80122f2:	4010      	ands	r0, r2
 80122f4:	4214      	tst	r4, r2
 80122f6:	d019      	beq.n	801232c <_vfiprintf_r+0x6f4>
 80122f8:	3a19      	subs	r2, #25
 80122fa:	3707      	adds	r7, #7
 80122fc:	4397      	bics	r7, r2
 80122fe:	0038      	movs	r0, r7
 8012300:	c806      	ldmia	r0!, {r1, r2}
 8012302:	9100      	str	r1, [sp, #0]
 8012304:	9201      	str	r2, [sp, #4]
 8012306:	9004      	str	r0, [sp, #16]
 8012308:	07e2      	lsls	r2, r4, #31
 801230a:	d509      	bpl.n	8012320 <_vfiprintf_r+0x6e8>
 801230c:	9a00      	ldr	r2, [sp, #0]
 801230e:	9901      	ldr	r1, [sp, #4]
 8012310:	430a      	orrs	r2, r1
 8012312:	d005      	beq.n	8012320 <_vfiprintf_r+0x6e8>
 8012314:	aa13      	add	r2, sp, #76	; 0x4c
 8012316:	2130      	movs	r1, #48	; 0x30
 8012318:	7053      	strb	r3, [r2, #1]
 801231a:	2302      	movs	r3, #2
 801231c:	7011      	strb	r1, [r2, #0]
 801231e:	431c      	orrs	r4, r3
 8012320:	4b10      	ldr	r3, [pc, #64]	; (8012364 <_vfiprintf_r+0x72c>)
 8012322:	401c      	ands	r4, r3
 8012324:	2302      	movs	r3, #2
 8012326:	e687      	b.n	8012038 <_vfiprintf_r+0x400>
 8012328:	4a10      	ldr	r2, [pc, #64]	; (801236c <_vfiprintf_r+0x734>)
 801232a:	e7df      	b.n	80122ec <_vfiprintf_r+0x6b4>
 801232c:	0039      	movs	r1, r7
 801232e:	c904      	ldmia	r1!, {r2}
 8012330:	0026      	movs	r6, r4
 8012332:	9104      	str	r1, [sp, #16]
 8012334:	2110      	movs	r1, #16
 8012336:	400e      	ands	r6, r1
 8012338:	420c      	tst	r4, r1
 801233a:	d002      	beq.n	8012342 <_vfiprintf_r+0x70a>
 801233c:	9200      	str	r2, [sp, #0]
 801233e:	9001      	str	r0, [sp, #4]
 8012340:	e7e2      	b.n	8012308 <_vfiprintf_r+0x6d0>
 8012342:	2140      	movs	r1, #64	; 0x40
 8012344:	0020      	movs	r0, r4
 8012346:	4008      	ands	r0, r1
 8012348:	420c      	tst	r4, r1
 801234a:	d003      	beq.n	8012354 <_vfiprintf_r+0x71c>
 801234c:	b292      	uxth	r2, r2
 801234e:	9200      	str	r2, [sp, #0]
 8012350:	9601      	str	r6, [sp, #4]
 8012352:	e7d9      	b.n	8012308 <_vfiprintf_r+0x6d0>
 8012354:	2180      	movs	r1, #128	; 0x80
 8012356:	0026      	movs	r6, r4
 8012358:	0089      	lsls	r1, r1, #2
 801235a:	400e      	ands	r6, r1
 801235c:	420c      	tst	r4, r1
 801235e:	d0f6      	beq.n	801234e <_vfiprintf_r+0x716>
 8012360:	b2d2      	uxtb	r2, r2
 8012362:	e7eb      	b.n	801233c <_vfiprintf_r+0x704>
 8012364:	fffffbff 	.word	0xfffffbff
 8012368:	00007830 	.word	0x00007830
 801236c:	08014b54 	.word	0x08014b54
 8012370:	08014c61 	.word	0x08014c61
 8012374:	08014c71 	.word	0x08014c71
 8012378:	08014b65 	.word	0x08014b65
 801237c:	9b01      	ldr	r3, [sp, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d109      	bne.n	8012396 <_vfiprintf_r+0x75e>
 8012382:	9b00      	ldr	r3, [sp, #0]
 8012384:	2b09      	cmp	r3, #9
 8012386:	d806      	bhi.n	8012396 <_vfiprintf_r+0x75e>
 8012388:	26b7      	movs	r6, #183	; 0xb7
 801238a:	ab12      	add	r3, sp, #72	; 0x48
 801238c:	18f6      	adds	r6, r6, r3
 801238e:	9b00      	ldr	r3, [sp, #0]
 8012390:	3330      	adds	r3, #48	; 0x30
 8012392:	7033      	strb	r3, [r6, #0]
 8012394:	e115      	b.n	80125c2 <_vfiprintf_r+0x98a>
 8012396:	2380      	movs	r3, #128	; 0x80
 8012398:	2400      	movs	r4, #0
 801239a:	00db      	lsls	r3, r3, #3
 801239c:	403b      	ands	r3, r7
 801239e:	ae40      	add	r6, sp, #256	; 0x100
 80123a0:	930a      	str	r3, [sp, #40]	; 0x28
 80123a2:	220a      	movs	r2, #10
 80123a4:	9800      	ldr	r0, [sp, #0]
 80123a6:	9901      	ldr	r1, [sp, #4]
 80123a8:	2300      	movs	r3, #0
 80123aa:	f7ee f87b 	bl	80004a4 <__aeabi_uldivmod>
 80123ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123b0:	3e01      	subs	r6, #1
 80123b2:	3230      	adds	r2, #48	; 0x30
 80123b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80123b6:	9110      	str	r1, [sp, #64]	; 0x40
 80123b8:	7032      	strb	r2, [r6, #0]
 80123ba:	3401      	adds	r4, #1
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d01a      	beq.n	80123f6 <_vfiprintf_r+0x7be>
 80123c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	42a3      	cmp	r3, r4
 80123c6:	d116      	bne.n	80123f6 <_vfiprintf_r+0x7be>
 80123c8:	2cff      	cmp	r4, #255	; 0xff
 80123ca:	d014      	beq.n	80123f6 <_vfiprintf_r+0x7be>
 80123cc:	9b01      	ldr	r3, [sp, #4]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d102      	bne.n	80123d8 <_vfiprintf_r+0x7a0>
 80123d2:	9b00      	ldr	r3, [sp, #0]
 80123d4:	2b09      	cmp	r3, #9
 80123d6:	d90e      	bls.n	80123f6 <_vfiprintf_r+0x7be>
 80123d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80123dc:	1af6      	subs	r6, r6, r3
 80123de:	001a      	movs	r2, r3
 80123e0:	0030      	movs	r0, r6
 80123e2:	f7f9 ffe6 	bl	800c3b2 <strncpy>
 80123e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123e8:	2400      	movs	r4, #0
 80123ea:	785b      	ldrb	r3, [r3, #1]
 80123ec:	1e5a      	subs	r2, r3, #1
 80123ee:	4193      	sbcs	r3, r2
 80123f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123f2:	18d3      	adds	r3, r2, r3
 80123f4:	930d      	str	r3, [sp, #52]	; 0x34
 80123f6:	9b01      	ldr	r3, [sp, #4]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d103      	bne.n	8012404 <_vfiprintf_r+0x7cc>
 80123fc:	9b00      	ldr	r3, [sp, #0]
 80123fe:	2b09      	cmp	r3, #9
 8012400:	d800      	bhi.n	8012404 <_vfiprintf_r+0x7cc>
 8012402:	e0de      	b.n	80125c2 <_vfiprintf_r+0x98a>
 8012404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012406:	9300      	str	r3, [sp, #0]
 8012408:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801240a:	9301      	str	r3, [sp, #4]
 801240c:	e7c9      	b.n	80123a2 <_vfiprintf_r+0x76a>
 801240e:	200f      	movs	r0, #15
 8012410:	9b00      	ldr	r3, [sp, #0]
 8012412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012414:	4003      	ands	r3, r0
 8012416:	5cd3      	ldrb	r3, [r2, r3]
 8012418:	3e01      	subs	r6, #1
 801241a:	7033      	strb	r3, [r6, #0]
 801241c:	9b01      	ldr	r3, [sp, #4]
 801241e:	0719      	lsls	r1, r3, #28
 8012420:	9b00      	ldr	r3, [sp, #0]
 8012422:	091a      	lsrs	r2, r3, #4
 8012424:	9b01      	ldr	r3, [sp, #4]
 8012426:	4311      	orrs	r1, r2
 8012428:	091b      	lsrs	r3, r3, #4
 801242a:	9301      	str	r3, [sp, #4]
 801242c:	000b      	movs	r3, r1
 801242e:	9a01      	ldr	r2, [sp, #4]
 8012430:	9100      	str	r1, [sp, #0]
 8012432:	4313      	orrs	r3, r2
 8012434:	d1ec      	bne.n	8012410 <_vfiprintf_r+0x7d8>
 8012436:	e0c4      	b.n	80125c2 <_vfiprintf_r+0x98a>
 8012438:	ae40      	add	r6, sp, #256	; 0x100
 801243a:	2b00      	cmp	r3, #0
 801243c:	d000      	beq.n	8012440 <_vfiprintf_r+0x808>
 801243e:	e0c0      	b.n	80125c2 <_vfiprintf_r+0x98a>
 8012440:	07e4      	lsls	r4, r4, #31
 8012442:	d400      	bmi.n	8012446 <_vfiprintf_r+0x80e>
 8012444:	e0bd      	b.n	80125c2 <_vfiprintf_r+0x98a>
 8012446:	26b7      	movs	r6, #183	; 0xb7
 8012448:	ab12      	add	r3, sp, #72	; 0x48
 801244a:	18f6      	adds	r6, r6, r3
 801244c:	2330      	movs	r3, #48	; 0x30
 801244e:	e7a0      	b.n	8012392 <_vfiprintf_r+0x75a>
 8012450:	2b00      	cmp	r3, #0
 8012452:	d100      	bne.n	8012456 <_vfiprintf_r+0x81e>
 8012454:	e07e      	b.n	8012554 <_vfiprintf_r+0x91c>
 8012456:	ae27      	add	r6, sp, #156	; 0x9c
 8012458:	7033      	strb	r3, [r6, #0]
 801245a:	2300      	movs	r3, #0
 801245c:	aa12      	add	r2, sp, #72	; 0x48
 801245e:	70d3      	strb	r3, [r2, #3]
 8012460:	9704      	str	r7, [sp, #16]
 8012462:	e576      	b.n	8011f52 <_vfiprintf_r+0x31a>
 8012464:	2010      	movs	r0, #16
 8012466:	1812      	adds	r2, r2, r0
 8012468:	6068      	str	r0, [r5, #4]
 801246a:	9216      	str	r2, [sp, #88]	; 0x58
 801246c:	9315      	str	r3, [sp, #84]	; 0x54
 801246e:	2b07      	cmp	r3, #7
 8012470:	dd07      	ble.n	8012482 <_vfiprintf_r+0x84a>
 8012472:	9903      	ldr	r1, [sp, #12]
 8012474:	9806      	ldr	r0, [sp, #24]
 8012476:	aa14      	add	r2, sp, #80	; 0x50
 8012478:	f7ff fba9 	bl	8011bce <__sprint_r>
 801247c:	2800      	cmp	r0, #0
 801247e:	d144      	bne.n	801250a <_vfiprintf_r+0x8d2>
 8012480:	a917      	add	r1, sp, #92	; 0x5c
 8012482:	000d      	movs	r5, r1
 8012484:	3f10      	subs	r7, #16
 8012486:	e63b      	b.n	8012100 <_vfiprintf_r+0x4c8>
 8012488:	2010      	movs	r0, #16
 801248a:	1812      	adds	r2, r2, r0
 801248c:	6068      	str	r0, [r5, #4]
 801248e:	9216      	str	r2, [sp, #88]	; 0x58
 8012490:	9315      	str	r3, [sp, #84]	; 0x54
 8012492:	2b07      	cmp	r3, #7
 8012494:	dd07      	ble.n	80124a6 <_vfiprintf_r+0x86e>
 8012496:	9903      	ldr	r1, [sp, #12]
 8012498:	9806      	ldr	r0, [sp, #24]
 801249a:	aa14      	add	r2, sp, #80	; 0x50
 801249c:	f7ff fb97 	bl	8011bce <__sprint_r>
 80124a0:	2800      	cmp	r0, #0
 80124a2:	d132      	bne.n	801250a <_vfiprintf_r+0x8d2>
 80124a4:	a917      	add	r1, sp, #92	; 0x5c
 80124a6:	000d      	movs	r5, r1
 80124a8:	3f10      	subs	r7, #16
 80124aa:	e67e      	b.n	80121aa <_vfiprintf_r+0x572>
 80124ac:	2010      	movs	r0, #16
 80124ae:	1812      	adds	r2, r2, r0
 80124b0:	6068      	str	r0, [r5, #4]
 80124b2:	9216      	str	r2, [sp, #88]	; 0x58
 80124b4:	9315      	str	r3, [sp, #84]	; 0x54
 80124b6:	2b07      	cmp	r3, #7
 80124b8:	dd07      	ble.n	80124ca <_vfiprintf_r+0x892>
 80124ba:	9903      	ldr	r1, [sp, #12]
 80124bc:	9806      	ldr	r0, [sp, #24]
 80124be:	aa14      	add	r2, sp, #80	; 0x50
 80124c0:	f7ff fb85 	bl	8011bce <__sprint_r>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	d120      	bne.n	801250a <_vfiprintf_r+0x8d2>
 80124c8:	a917      	add	r1, sp, #92	; 0x5c
 80124ca:	000d      	movs	r5, r1
 80124cc:	3f10      	subs	r7, #16
 80124ce:	e68b      	b.n	80121e8 <_vfiprintf_r+0x5b0>
 80124d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124d4:	2610      	movs	r6, #16
 80124d6:	1a9c      	subs	r4, r3, r2
 80124d8:	2c00      	cmp	r4, #0
 80124da:	dc00      	bgt.n	80124de <_vfiprintf_r+0x8a6>
 80124dc:	e6b7      	b.n	801224e <_vfiprintf_r+0x616>
 80124de:	9915      	ldr	r1, [sp, #84]	; 0x54
 80124e0:	4a3b      	ldr	r2, [pc, #236]	; (80125d0 <_vfiprintf_r+0x998>)
 80124e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80124e4:	3101      	adds	r1, #1
 80124e6:	602a      	str	r2, [r5, #0]
 80124e8:	2c10      	cmp	r4, #16
 80124ea:	dc22      	bgt.n	8012532 <_vfiprintf_r+0x8fa>
 80124ec:	606c      	str	r4, [r5, #4]
 80124ee:	18e4      	adds	r4, r4, r3
 80124f0:	9416      	str	r4, [sp, #88]	; 0x58
 80124f2:	9115      	str	r1, [sp, #84]	; 0x54
 80124f4:	2907      	cmp	r1, #7
 80124f6:	dc00      	bgt.n	80124fa <_vfiprintf_r+0x8c2>
 80124f8:	e6a9      	b.n	801224e <_vfiprintf_r+0x616>
 80124fa:	9903      	ldr	r1, [sp, #12]
 80124fc:	9806      	ldr	r0, [sp, #24]
 80124fe:	aa14      	add	r2, sp, #80	; 0x50
 8012500:	f7ff fb65 	bl	8011bce <__sprint_r>
 8012504:	2800      	cmp	r0, #0
 8012506:	d100      	bne.n	801250a <_vfiprintf_r+0x8d2>
 8012508:	e6a1      	b.n	801224e <_vfiprintf_r+0x616>
 801250a:	9b03      	ldr	r3, [sp, #12]
 801250c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801250e:	07db      	lsls	r3, r3, #31
 8012510:	d407      	bmi.n	8012522 <_vfiprintf_r+0x8ea>
 8012512:	9b03      	ldr	r3, [sp, #12]
 8012514:	899b      	ldrh	r3, [r3, #12]
 8012516:	059b      	lsls	r3, r3, #22
 8012518:	d403      	bmi.n	8012522 <_vfiprintf_r+0x8ea>
 801251a:	9b03      	ldr	r3, [sp, #12]
 801251c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801251e:	f7fa f808 	bl	800c532 <__retarget_lock_release_recursive>
 8012522:	9b03      	ldr	r3, [sp, #12]
 8012524:	899b      	ldrh	r3, [r3, #12]
 8012526:	065b      	lsls	r3, r3, #25
 8012528:	d401      	bmi.n	801252e <_vfiprintf_r+0x8f6>
 801252a:	f7ff fbc3 	bl	8011cb4 <_vfiprintf_r+0x7c>
 801252e:	f7ff fbbe 	bl	8011cae <_vfiprintf_r+0x76>
 8012532:	3310      	adds	r3, #16
 8012534:	606e      	str	r6, [r5, #4]
 8012536:	9316      	str	r3, [sp, #88]	; 0x58
 8012538:	9115      	str	r1, [sp, #84]	; 0x54
 801253a:	3508      	adds	r5, #8
 801253c:	2907      	cmp	r1, #7
 801253e:	dd07      	ble.n	8012550 <_vfiprintf_r+0x918>
 8012540:	9903      	ldr	r1, [sp, #12]
 8012542:	9806      	ldr	r0, [sp, #24]
 8012544:	aa14      	add	r2, sp, #80	; 0x50
 8012546:	f7ff fb42 	bl	8011bce <__sprint_r>
 801254a:	2800      	cmp	r0, #0
 801254c:	d1dd      	bne.n	801250a <_vfiprintf_r+0x8d2>
 801254e:	ad17      	add	r5, sp, #92	; 0x5c
 8012550:	3c10      	subs	r4, #16
 8012552:	e7c4      	b.n	80124de <_vfiprintf_r+0x8a6>
 8012554:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012556:	2b00      	cmp	r3, #0
 8012558:	d102      	bne.n	8012560 <_vfiprintf_r+0x928>
 801255a:	2300      	movs	r3, #0
 801255c:	9315      	str	r3, [sp, #84]	; 0x54
 801255e:	e7d4      	b.n	801250a <_vfiprintf_r+0x8d2>
 8012560:	9903      	ldr	r1, [sp, #12]
 8012562:	9806      	ldr	r0, [sp, #24]
 8012564:	aa14      	add	r2, sp, #80	; 0x50
 8012566:	f7ff fb32 	bl	8011bce <__sprint_r>
 801256a:	2800      	cmp	r0, #0
 801256c:	d0f5      	beq.n	801255a <_vfiprintf_r+0x922>
 801256e:	e7cc      	b.n	801250a <_vfiprintf_r+0x8d2>
 8012570:	0027      	movs	r7, r4
 8012572:	2a00      	cmp	r2, #0
 8012574:	d100      	bne.n	8012578 <_vfiprintf_r+0x940>
 8012576:	e51b      	b.n	8011fb0 <_vfiprintf_r+0x378>
 8012578:	2b01      	cmp	r3, #1
 801257a:	d100      	bne.n	801257e <_vfiprintf_r+0x946>
 801257c:	e6fe      	b.n	801237c <_vfiprintf_r+0x744>
 801257e:	ae40      	add	r6, sp, #256	; 0x100
 8012580:	2b02      	cmp	r3, #2
 8012582:	d100      	bne.n	8012586 <_vfiprintf_r+0x94e>
 8012584:	e743      	b.n	801240e <_vfiprintf_r+0x7d6>
 8012586:	2307      	movs	r3, #7
 8012588:	469c      	mov	ip, r3
 801258a:	4663      	mov	r3, ip
 801258c:	9900      	ldr	r1, [sp, #0]
 801258e:	0032      	movs	r2, r6
 8012590:	400b      	ands	r3, r1
 8012592:	9901      	ldr	r1, [sp, #4]
 8012594:	3e01      	subs	r6, #1
 8012596:	074c      	lsls	r4, r1, #29
 8012598:	9900      	ldr	r1, [sp, #0]
 801259a:	3330      	adds	r3, #48	; 0x30
 801259c:	08c8      	lsrs	r0, r1, #3
 801259e:	9901      	ldr	r1, [sp, #4]
 80125a0:	4304      	orrs	r4, r0
 80125a2:	08c9      	lsrs	r1, r1, #3
 80125a4:	9101      	str	r1, [sp, #4]
 80125a6:	0021      	movs	r1, r4
 80125a8:	9801      	ldr	r0, [sp, #4]
 80125aa:	7033      	strb	r3, [r6, #0]
 80125ac:	9400      	str	r4, [sp, #0]
 80125ae:	4301      	orrs	r1, r0
 80125b0:	d1eb      	bne.n	801258a <_vfiprintf_r+0x952>
 80125b2:	07f9      	lsls	r1, r7, #31
 80125b4:	d505      	bpl.n	80125c2 <_vfiprintf_r+0x98a>
 80125b6:	2b30      	cmp	r3, #48	; 0x30
 80125b8:	d003      	beq.n	80125c2 <_vfiprintf_r+0x98a>
 80125ba:	2330      	movs	r3, #48	; 0x30
 80125bc:	3e01      	subs	r6, #1
 80125be:	7033      	strb	r3, [r6, #0]
 80125c0:	1e96      	subs	r6, r2, #2
 80125c2:	9b05      	ldr	r3, [sp, #20]
 80125c4:	003c      	movs	r4, r7
 80125c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80125c8:	ab40      	add	r3, sp, #256	; 0x100
 80125ca:	1b9b      	subs	r3, r3, r6
 80125cc:	9305      	str	r3, [sp, #20]
 80125ce:	e575      	b.n	80120bc <_vfiprintf_r+0x484>
 80125d0:	08014c61 	.word	0x08014c61

080125d4 <__sbprintf>:
 80125d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125d6:	0015      	movs	r5, r2
 80125d8:	2202      	movs	r2, #2
 80125da:	4c1e      	ldr	r4, [pc, #120]	; (8012654 <__sbprintf+0x80>)
 80125dc:	001f      	movs	r7, r3
 80125de:	898b      	ldrh	r3, [r1, #12]
 80125e0:	44a5      	add	sp, r4
 80125e2:	4393      	bics	r3, r2
 80125e4:	466a      	mov	r2, sp
 80125e6:	8193      	strh	r3, [r2, #12]
 80125e8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80125ea:	0006      	movs	r6, r0
 80125ec:	9319      	str	r3, [sp, #100]	; 0x64
 80125ee:	89cb      	ldrh	r3, [r1, #14]
 80125f0:	a816      	add	r0, sp, #88	; 0x58
 80125f2:	81d3      	strh	r3, [r2, #14]
 80125f4:	69cb      	ldr	r3, [r1, #28]
 80125f6:	000c      	movs	r4, r1
 80125f8:	9307      	str	r3, [sp, #28]
 80125fa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80125fc:	9309      	str	r3, [sp, #36]	; 0x24
 80125fe:	ab1a      	add	r3, sp, #104	; 0x68
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	9304      	str	r3, [sp, #16]
 8012604:	2380      	movs	r3, #128	; 0x80
 8012606:	00db      	lsls	r3, r3, #3
 8012608:	9302      	str	r3, [sp, #8]
 801260a:	9305      	str	r3, [sp, #20]
 801260c:	2300      	movs	r3, #0
 801260e:	9306      	str	r3, [sp, #24]
 8012610:	f7f9 ff8c 	bl	800c52c <__retarget_lock_init_recursive>
 8012614:	002a      	movs	r2, r5
 8012616:	003b      	movs	r3, r7
 8012618:	4669      	mov	r1, sp
 801261a:	0030      	movs	r0, r6
 801261c:	f7ff fb0c 	bl	8011c38 <_vfiprintf_r>
 8012620:	1e05      	subs	r5, r0, #0
 8012622:	db07      	blt.n	8012634 <__sbprintf+0x60>
 8012624:	4669      	mov	r1, sp
 8012626:	0030      	movs	r0, r6
 8012628:	f7fd fdf6 	bl	8010218 <_fflush_r>
 801262c:	2800      	cmp	r0, #0
 801262e:	d001      	beq.n	8012634 <__sbprintf+0x60>
 8012630:	2501      	movs	r5, #1
 8012632:	426d      	negs	r5, r5
 8012634:	466b      	mov	r3, sp
 8012636:	899a      	ldrh	r2, [r3, #12]
 8012638:	2340      	movs	r3, #64	; 0x40
 801263a:	421a      	tst	r2, r3
 801263c:	d002      	beq.n	8012644 <__sbprintf+0x70>
 801263e:	89a2      	ldrh	r2, [r4, #12]
 8012640:	4313      	orrs	r3, r2
 8012642:	81a3      	strh	r3, [r4, #12]
 8012644:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012646:	f7f9 ff72 	bl	800c52e <__retarget_lock_close_recursive>
 801264a:	0028      	movs	r0, r5
 801264c:	4b02      	ldr	r3, [pc, #8]	; (8012658 <__sbprintf+0x84>)
 801264e:	449d      	add	sp, r3
 8012650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012652:	46c0      	nop			; (mov r8, r8)
 8012654:	fffffb94 	.word	0xfffffb94
 8012658:	0000046c 	.word	0x0000046c

0801265c <__sfvwrite_r>:
 801265c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801265e:	6893      	ldr	r3, [r2, #8]
 8012660:	b087      	sub	sp, #28
 8012662:	000c      	movs	r4, r1
 8012664:	9002      	str	r0, [sp, #8]
 8012666:	9204      	str	r2, [sp, #16]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d102      	bne.n	8012672 <__sfvwrite_r+0x16>
 801266c:	2000      	movs	r0, #0
 801266e:	b007      	add	sp, #28
 8012670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012672:	898b      	ldrh	r3, [r1, #12]
 8012674:	071b      	lsls	r3, r3, #28
 8012676:	d557      	bpl.n	8012728 <__sfvwrite_r+0xcc>
 8012678:	690b      	ldr	r3, [r1, #16]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d054      	beq.n	8012728 <__sfvwrite_r+0xcc>
 801267e:	9b04      	ldr	r3, [sp, #16]
 8012680:	2202      	movs	r2, #2
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	9301      	str	r3, [sp, #4]
 8012686:	89a3      	ldrh	r3, [r4, #12]
 8012688:	001f      	movs	r7, r3
 801268a:	4017      	ands	r7, r2
 801268c:	4213      	tst	r3, r2
 801268e:	d171      	bne.n	8012774 <__sfvwrite_r+0x118>
 8012690:	2201      	movs	r2, #1
 8012692:	2101      	movs	r1, #1
 8012694:	401a      	ands	r2, r3
 8012696:	420b      	tst	r3, r1
 8012698:	d100      	bne.n	801269c <__sfvwrite_r+0x40>
 801269a:	e0a5      	b.n	80127e8 <__sfvwrite_r+0x18c>
 801269c:	0038      	movs	r0, r7
 801269e:	003e      	movs	r6, r7
 80126a0:	9703      	str	r7, [sp, #12]
 80126a2:	9b03      	ldr	r3, [sp, #12]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d100      	bne.n	80126aa <__sfvwrite_r+0x4e>
 80126a8:	e10b      	b.n	80128c2 <__sfvwrite_r+0x266>
 80126aa:	2800      	cmp	r0, #0
 80126ac:	d10a      	bne.n	80126c4 <__sfvwrite_r+0x68>
 80126ae:	001a      	movs	r2, r3
 80126b0:	210a      	movs	r1, #10
 80126b2:	0030      	movs	r0, r6
 80126b4:	f7fd fe2a 	bl	801030c <memchr>
 80126b8:	9b03      	ldr	r3, [sp, #12]
 80126ba:	1c5f      	adds	r7, r3, #1
 80126bc:	2800      	cmp	r0, #0
 80126be:	d001      	beq.n	80126c4 <__sfvwrite_r+0x68>
 80126c0:	3001      	adds	r0, #1
 80126c2:	1b87      	subs	r7, r0, r6
 80126c4:	9b03      	ldr	r3, [sp, #12]
 80126c6:	9705      	str	r7, [sp, #20]
 80126c8:	429f      	cmp	r7, r3
 80126ca:	d900      	bls.n	80126ce <__sfvwrite_r+0x72>
 80126cc:	9305      	str	r3, [sp, #20]
 80126ce:	6820      	ldr	r0, [r4, #0]
 80126d0:	6922      	ldr	r2, [r4, #16]
 80126d2:	68a5      	ldr	r5, [r4, #8]
 80126d4:	6963      	ldr	r3, [r4, #20]
 80126d6:	4290      	cmp	r0, r2
 80126d8:	d800      	bhi.n	80126dc <__sfvwrite_r+0x80>
 80126da:	e0fb      	b.n	80128d4 <__sfvwrite_r+0x278>
 80126dc:	9a05      	ldr	r2, [sp, #20]
 80126de:	18ed      	adds	r5, r5, r3
 80126e0:	42aa      	cmp	r2, r5
 80126e2:	dc00      	bgt.n	80126e6 <__sfvwrite_r+0x8a>
 80126e4:	e0f6      	b.n	80128d4 <__sfvwrite_r+0x278>
 80126e6:	0031      	movs	r1, r6
 80126e8:	002a      	movs	r2, r5
 80126ea:	f000 fa1e 	bl	8012b2a <memmove>
 80126ee:	6823      	ldr	r3, [r4, #0]
 80126f0:	0021      	movs	r1, r4
 80126f2:	195b      	adds	r3, r3, r5
 80126f4:	9802      	ldr	r0, [sp, #8]
 80126f6:	6023      	str	r3, [r4, #0]
 80126f8:	f7fd fd8e 	bl	8010218 <_fflush_r>
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d16e      	bne.n	80127de <__sfvwrite_r+0x182>
 8012700:	2001      	movs	r0, #1
 8012702:	1b7f      	subs	r7, r7, r5
 8012704:	d105      	bne.n	8012712 <__sfvwrite_r+0xb6>
 8012706:	0021      	movs	r1, r4
 8012708:	9802      	ldr	r0, [sp, #8]
 801270a:	f7fd fd85 	bl	8010218 <_fflush_r>
 801270e:	2800      	cmp	r0, #0
 8012710:	d165      	bne.n	80127de <__sfvwrite_r+0x182>
 8012712:	9b03      	ldr	r3, [sp, #12]
 8012714:	9a04      	ldr	r2, [sp, #16]
 8012716:	1b5b      	subs	r3, r3, r5
 8012718:	9303      	str	r3, [sp, #12]
 801271a:	9b04      	ldr	r3, [sp, #16]
 801271c:	1976      	adds	r6, r6, r5
 801271e:	689b      	ldr	r3, [r3, #8]
 8012720:	1b5b      	subs	r3, r3, r5
 8012722:	6093      	str	r3, [r2, #8]
 8012724:	d1bd      	bne.n	80126a2 <__sfvwrite_r+0x46>
 8012726:	e7a1      	b.n	801266c <__sfvwrite_r+0x10>
 8012728:	0021      	movs	r1, r4
 801272a:	9802      	ldr	r0, [sp, #8]
 801272c:	f000 f932 	bl	8012994 <__swsetup_r>
 8012730:	2800      	cmp	r0, #0
 8012732:	d0a4      	beq.n	801267e <__sfvwrite_r+0x22>
 8012734:	2001      	movs	r0, #1
 8012736:	4240      	negs	r0, r0
 8012738:	e799      	b.n	801266e <__sfvwrite_r+0x12>
 801273a:	9b01      	ldr	r3, [sp, #4]
 801273c:	681e      	ldr	r6, [r3, #0]
 801273e:	685d      	ldr	r5, [r3, #4]
 8012740:	3308      	adds	r3, #8
 8012742:	9301      	str	r3, [sp, #4]
 8012744:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012746:	69e1      	ldr	r1, [r4, #28]
 8012748:	2d00      	cmp	r5, #0
 801274a:	d0f6      	beq.n	801273a <__sfvwrite_r+0xde>
 801274c:	4a6e      	ldr	r2, [pc, #440]	; (8012908 <__sfvwrite_r+0x2ac>)
 801274e:	002b      	movs	r3, r5
 8012750:	4295      	cmp	r5, r2
 8012752:	d900      	bls.n	8012756 <__sfvwrite_r+0xfa>
 8012754:	0013      	movs	r3, r2
 8012756:	0032      	movs	r2, r6
 8012758:	9802      	ldr	r0, [sp, #8]
 801275a:	47b8      	blx	r7
 801275c:	2800      	cmp	r0, #0
 801275e:	dd3e      	ble.n	80127de <__sfvwrite_r+0x182>
 8012760:	9b04      	ldr	r3, [sp, #16]
 8012762:	9a04      	ldr	r2, [sp, #16]
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	1836      	adds	r6, r6, r0
 8012768:	1a1b      	subs	r3, r3, r0
 801276a:	1a2d      	subs	r5, r5, r0
 801276c:	6093      	str	r3, [r2, #8]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d1e8      	bne.n	8012744 <__sfvwrite_r+0xe8>
 8012772:	e77b      	b.n	801266c <__sfvwrite_r+0x10>
 8012774:	2600      	movs	r6, #0
 8012776:	0035      	movs	r5, r6
 8012778:	e7e4      	b.n	8012744 <__sfvwrite_r+0xe8>
 801277a:	9b01      	ldr	r3, [sp, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	9303      	str	r3, [sp, #12]
 8012780:	9b01      	ldr	r3, [sp, #4]
 8012782:	685d      	ldr	r5, [r3, #4]
 8012784:	3308      	adds	r3, #8
 8012786:	9301      	str	r3, [sp, #4]
 8012788:	220c      	movs	r2, #12
 801278a:	5ea3      	ldrsh	r3, [r4, r2]
 801278c:	6820      	ldr	r0, [r4, #0]
 801278e:	68a6      	ldr	r6, [r4, #8]
 8012790:	2d00      	cmp	r5, #0
 8012792:	d0f2      	beq.n	801277a <__sfvwrite_r+0x11e>
 8012794:	2180      	movs	r1, #128	; 0x80
 8012796:	0089      	lsls	r1, r1, #2
 8012798:	b29a      	uxth	r2, r3
 801279a:	420b      	tst	r3, r1
 801279c:	d062      	beq.n	8012864 <__sfvwrite_r+0x208>
 801279e:	42ae      	cmp	r6, r5
 80127a0:	d837      	bhi.n	8012812 <__sfvwrite_r+0x1b6>
 80127a2:	2390      	movs	r3, #144	; 0x90
 80127a4:	00db      	lsls	r3, r3, #3
 80127a6:	421a      	tst	r2, r3
 80127a8:	d033      	beq.n	8012812 <__sfvwrite_r+0x1b6>
 80127aa:	6921      	ldr	r1, [r4, #16]
 80127ac:	1a43      	subs	r3, r0, r1
 80127ae:	2003      	movs	r0, #3
 80127b0:	9305      	str	r3, [sp, #20]
 80127b2:	6963      	ldr	r3, [r4, #20]
 80127b4:	4343      	muls	r3, r0
 80127b6:	0fdf      	lsrs	r7, r3, #31
 80127b8:	18ff      	adds	r7, r7, r3
 80127ba:	9b05      	ldr	r3, [sp, #20]
 80127bc:	107f      	asrs	r7, r7, #1
 80127be:	3301      	adds	r3, #1
 80127c0:	195b      	adds	r3, r3, r5
 80127c2:	42bb      	cmp	r3, r7
 80127c4:	d900      	bls.n	80127c8 <__sfvwrite_r+0x16c>
 80127c6:	001f      	movs	r7, r3
 80127c8:	0552      	lsls	r2, r2, #21
 80127ca:	d53c      	bpl.n	8012846 <__sfvwrite_r+0x1ea>
 80127cc:	0039      	movs	r1, r7
 80127ce:	9802      	ldr	r0, [sp, #8]
 80127d0:	f7f8 fb56 	bl	800ae80 <_malloc_r>
 80127d4:	1e06      	subs	r6, r0, #0
 80127d6:	d10a      	bne.n	80127ee <__sfvwrite_r+0x192>
 80127d8:	230c      	movs	r3, #12
 80127da:	9a02      	ldr	r2, [sp, #8]
 80127dc:	6013      	str	r3, [r2, #0]
 80127de:	2340      	movs	r3, #64	; 0x40
 80127e0:	89a2      	ldrh	r2, [r4, #12]
 80127e2:	4313      	orrs	r3, r2
 80127e4:	81a3      	strh	r3, [r4, #12]
 80127e6:	e7a5      	b.n	8012734 <__sfvwrite_r+0xd8>
 80127e8:	0015      	movs	r5, r2
 80127ea:	9203      	str	r2, [sp, #12]
 80127ec:	e7cc      	b.n	8012788 <__sfvwrite_r+0x12c>
 80127ee:	9a05      	ldr	r2, [sp, #20]
 80127f0:	6921      	ldr	r1, [r4, #16]
 80127f2:	f7f9 feaa 	bl	800c54a <memcpy>
 80127f6:	89a2      	ldrh	r2, [r4, #12]
 80127f8:	4b44      	ldr	r3, [pc, #272]	; (801290c <__sfvwrite_r+0x2b0>)
 80127fa:	401a      	ands	r2, r3
 80127fc:	2380      	movs	r3, #128	; 0x80
 80127fe:	4313      	orrs	r3, r2
 8012800:	81a3      	strh	r3, [r4, #12]
 8012802:	9b05      	ldr	r3, [sp, #20]
 8012804:	6126      	str	r6, [r4, #16]
 8012806:	18f6      	adds	r6, r6, r3
 8012808:	6026      	str	r6, [r4, #0]
 801280a:	002e      	movs	r6, r5
 801280c:	6167      	str	r7, [r4, #20]
 801280e:	1aff      	subs	r7, r7, r3
 8012810:	60a7      	str	r7, [r4, #8]
 8012812:	002f      	movs	r7, r5
 8012814:	42ae      	cmp	r6, r5
 8012816:	d900      	bls.n	801281a <__sfvwrite_r+0x1be>
 8012818:	002e      	movs	r6, r5
 801281a:	0032      	movs	r2, r6
 801281c:	9903      	ldr	r1, [sp, #12]
 801281e:	6820      	ldr	r0, [r4, #0]
 8012820:	f000 f983 	bl	8012b2a <memmove>
 8012824:	68a3      	ldr	r3, [r4, #8]
 8012826:	1b9b      	subs	r3, r3, r6
 8012828:	60a3      	str	r3, [r4, #8]
 801282a:	6823      	ldr	r3, [r4, #0]
 801282c:	199b      	adds	r3, r3, r6
 801282e:	6023      	str	r3, [r4, #0]
 8012830:	9b03      	ldr	r3, [sp, #12]
 8012832:	9a04      	ldr	r2, [sp, #16]
 8012834:	19db      	adds	r3, r3, r7
 8012836:	9303      	str	r3, [sp, #12]
 8012838:	9b04      	ldr	r3, [sp, #16]
 801283a:	1bed      	subs	r5, r5, r7
 801283c:	689b      	ldr	r3, [r3, #8]
 801283e:	1bdb      	subs	r3, r3, r7
 8012840:	6093      	str	r3, [r2, #8]
 8012842:	d1a1      	bne.n	8012788 <__sfvwrite_r+0x12c>
 8012844:	e712      	b.n	801266c <__sfvwrite_r+0x10>
 8012846:	003a      	movs	r2, r7
 8012848:	9802      	ldr	r0, [sp, #8]
 801284a:	f7fe fcd7 	bl	80111fc <_realloc_r>
 801284e:	1e06      	subs	r6, r0, #0
 8012850:	d1d7      	bne.n	8012802 <__sfvwrite_r+0x1a6>
 8012852:	6921      	ldr	r1, [r4, #16]
 8012854:	9802      	ldr	r0, [sp, #8]
 8012856:	f7f9 fef3 	bl	800c640 <_free_r>
 801285a:	2280      	movs	r2, #128	; 0x80
 801285c:	89a3      	ldrh	r3, [r4, #12]
 801285e:	4393      	bics	r3, r2
 8012860:	81a3      	strh	r3, [r4, #12]
 8012862:	e7b9      	b.n	80127d8 <__sfvwrite_r+0x17c>
 8012864:	6923      	ldr	r3, [r4, #16]
 8012866:	4283      	cmp	r3, r0
 8012868:	d302      	bcc.n	8012870 <__sfvwrite_r+0x214>
 801286a:	6967      	ldr	r7, [r4, #20]
 801286c:	42af      	cmp	r7, r5
 801286e:	d916      	bls.n	801289e <__sfvwrite_r+0x242>
 8012870:	42ae      	cmp	r6, r5
 8012872:	d900      	bls.n	8012876 <__sfvwrite_r+0x21a>
 8012874:	002e      	movs	r6, r5
 8012876:	0032      	movs	r2, r6
 8012878:	9903      	ldr	r1, [sp, #12]
 801287a:	f000 f956 	bl	8012b2a <memmove>
 801287e:	68a3      	ldr	r3, [r4, #8]
 8012880:	6822      	ldr	r2, [r4, #0]
 8012882:	1b9b      	subs	r3, r3, r6
 8012884:	1992      	adds	r2, r2, r6
 8012886:	0037      	movs	r7, r6
 8012888:	60a3      	str	r3, [r4, #8]
 801288a:	6022      	str	r2, [r4, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d1cf      	bne.n	8012830 <__sfvwrite_r+0x1d4>
 8012890:	0021      	movs	r1, r4
 8012892:	9802      	ldr	r0, [sp, #8]
 8012894:	f7fd fcc0 	bl	8010218 <_fflush_r>
 8012898:	2800      	cmp	r0, #0
 801289a:	d0c9      	beq.n	8012830 <__sfvwrite_r+0x1d4>
 801289c:	e79f      	b.n	80127de <__sfvwrite_r+0x182>
 801289e:	4b1c      	ldr	r3, [pc, #112]	; (8012910 <__sfvwrite_r+0x2b4>)
 80128a0:	0028      	movs	r0, r5
 80128a2:	429d      	cmp	r5, r3
 80128a4:	d900      	bls.n	80128a8 <__sfvwrite_r+0x24c>
 80128a6:	481b      	ldr	r0, [pc, #108]	; (8012914 <__sfvwrite_r+0x2b8>)
 80128a8:	0039      	movs	r1, r7
 80128aa:	f7ed fcd1 	bl	8000250 <__divsi3>
 80128ae:	003b      	movs	r3, r7
 80128b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80128b2:	4343      	muls	r3, r0
 80128b4:	9a03      	ldr	r2, [sp, #12]
 80128b6:	69e1      	ldr	r1, [r4, #28]
 80128b8:	9802      	ldr	r0, [sp, #8]
 80128ba:	47b0      	blx	r6
 80128bc:	1e07      	subs	r7, r0, #0
 80128be:	dcb7      	bgt.n	8012830 <__sfvwrite_r+0x1d4>
 80128c0:	e78d      	b.n	80127de <__sfvwrite_r+0x182>
 80128c2:	9b01      	ldr	r3, [sp, #4]
 80128c4:	2000      	movs	r0, #0
 80128c6:	681e      	ldr	r6, [r3, #0]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	9303      	str	r3, [sp, #12]
 80128cc:	9b01      	ldr	r3, [sp, #4]
 80128ce:	3308      	adds	r3, #8
 80128d0:	9301      	str	r3, [sp, #4]
 80128d2:	e6e6      	b.n	80126a2 <__sfvwrite_r+0x46>
 80128d4:	9a05      	ldr	r2, [sp, #20]
 80128d6:	4293      	cmp	r3, r2
 80128d8:	dc08      	bgt.n	80128ec <__sfvwrite_r+0x290>
 80128da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80128dc:	0032      	movs	r2, r6
 80128de:	69e1      	ldr	r1, [r4, #28]
 80128e0:	9802      	ldr	r0, [sp, #8]
 80128e2:	47a8      	blx	r5
 80128e4:	1e05      	subs	r5, r0, #0
 80128e6:	dd00      	ble.n	80128ea <__sfvwrite_r+0x28e>
 80128e8:	e70a      	b.n	8012700 <__sfvwrite_r+0xa4>
 80128ea:	e778      	b.n	80127de <__sfvwrite_r+0x182>
 80128ec:	9a05      	ldr	r2, [sp, #20]
 80128ee:	0031      	movs	r1, r6
 80128f0:	f000 f91b 	bl	8012b2a <memmove>
 80128f4:	9a05      	ldr	r2, [sp, #20]
 80128f6:	68a3      	ldr	r3, [r4, #8]
 80128f8:	0015      	movs	r5, r2
 80128fa:	1a9b      	subs	r3, r3, r2
 80128fc:	60a3      	str	r3, [r4, #8]
 80128fe:	6823      	ldr	r3, [r4, #0]
 8012900:	189b      	adds	r3, r3, r2
 8012902:	6023      	str	r3, [r4, #0]
 8012904:	e6fc      	b.n	8012700 <__sfvwrite_r+0xa4>
 8012906:	46c0      	nop			; (mov r8, r8)
 8012908:	7ffffc00 	.word	0x7ffffc00
 801290c:	fffffb7f 	.word	0xfffffb7f
 8012910:	7ffffffe 	.word	0x7ffffffe
 8012914:	7fffffff 	.word	0x7fffffff

08012918 <__submore>:
 8012918:	000b      	movs	r3, r1
 801291a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801291c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 801291e:	3340      	adds	r3, #64	; 0x40
 8012920:	000c      	movs	r4, r1
 8012922:	429d      	cmp	r5, r3
 8012924:	d11c      	bne.n	8012960 <__submore+0x48>
 8012926:	2680      	movs	r6, #128	; 0x80
 8012928:	00f6      	lsls	r6, r6, #3
 801292a:	0031      	movs	r1, r6
 801292c:	f7f8 faa8 	bl	800ae80 <_malloc_r>
 8012930:	2800      	cmp	r0, #0
 8012932:	d102      	bne.n	801293a <__submore+0x22>
 8012934:	2001      	movs	r0, #1
 8012936:	4240      	negs	r0, r0
 8012938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801293a:	0023      	movs	r3, r4
 801293c:	6320      	str	r0, [r4, #48]	; 0x30
 801293e:	6366      	str	r6, [r4, #52]	; 0x34
 8012940:	3342      	adds	r3, #66	; 0x42
 8012942:	781a      	ldrb	r2, [r3, #0]
 8012944:	4b10      	ldr	r3, [pc, #64]	; (8012988 <__submore+0x70>)
 8012946:	54c2      	strb	r2, [r0, r3]
 8012948:	0023      	movs	r3, r4
 801294a:	3341      	adds	r3, #65	; 0x41
 801294c:	781a      	ldrb	r2, [r3, #0]
 801294e:	4b0f      	ldr	r3, [pc, #60]	; (801298c <__submore+0x74>)
 8012950:	54c2      	strb	r2, [r0, r3]
 8012952:	782a      	ldrb	r2, [r5, #0]
 8012954:	4b0e      	ldr	r3, [pc, #56]	; (8012990 <__submore+0x78>)
 8012956:	54c2      	strb	r2, [r0, r3]
 8012958:	18c0      	adds	r0, r0, r3
 801295a:	6020      	str	r0, [r4, #0]
 801295c:	2000      	movs	r0, #0
 801295e:	e7eb      	b.n	8012938 <__submore+0x20>
 8012960:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8012962:	0029      	movs	r1, r5
 8012964:	0073      	lsls	r3, r6, #1
 8012966:	001a      	movs	r2, r3
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	f7fe fc47 	bl	80111fc <_realloc_r>
 801296e:	1e05      	subs	r5, r0, #0
 8012970:	d0e0      	beq.n	8012934 <__submore+0x1c>
 8012972:	1987      	adds	r7, r0, r6
 8012974:	0001      	movs	r1, r0
 8012976:	0032      	movs	r2, r6
 8012978:	0038      	movs	r0, r7
 801297a:	f7f9 fde6 	bl	800c54a <memcpy>
 801297e:	9b01      	ldr	r3, [sp, #4]
 8012980:	6027      	str	r7, [r4, #0]
 8012982:	6325      	str	r5, [r4, #48]	; 0x30
 8012984:	6363      	str	r3, [r4, #52]	; 0x34
 8012986:	e7e9      	b.n	801295c <__submore+0x44>
 8012988:	000003ff 	.word	0x000003ff
 801298c:	000003fe 	.word	0x000003fe
 8012990:	000003fd 	.word	0x000003fd

08012994 <__swsetup_r>:
 8012994:	4b30      	ldr	r3, [pc, #192]	; (8012a58 <__swsetup_r+0xc4>)
 8012996:	b570      	push	{r4, r5, r6, lr}
 8012998:	0005      	movs	r5, r0
 801299a:	6818      	ldr	r0, [r3, #0]
 801299c:	000c      	movs	r4, r1
 801299e:	2800      	cmp	r0, #0
 80129a0:	d004      	beq.n	80129ac <__swsetup_r+0x18>
 80129a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d101      	bne.n	80129ac <__swsetup_r+0x18>
 80129a8:	f7f9 fbec 	bl	800c184 <__sinit>
 80129ac:	230c      	movs	r3, #12
 80129ae:	5ee2      	ldrsh	r2, [r4, r3]
 80129b0:	b293      	uxth	r3, r2
 80129b2:	0711      	lsls	r1, r2, #28
 80129b4:	d423      	bmi.n	80129fe <__swsetup_r+0x6a>
 80129b6:	06d9      	lsls	r1, r3, #27
 80129b8:	d407      	bmi.n	80129ca <__swsetup_r+0x36>
 80129ba:	2309      	movs	r3, #9
 80129bc:	2001      	movs	r0, #1
 80129be:	602b      	str	r3, [r5, #0]
 80129c0:	3337      	adds	r3, #55	; 0x37
 80129c2:	4313      	orrs	r3, r2
 80129c4:	81a3      	strh	r3, [r4, #12]
 80129c6:	4240      	negs	r0, r0
 80129c8:	bd70      	pop	{r4, r5, r6, pc}
 80129ca:	075b      	lsls	r3, r3, #29
 80129cc:	d513      	bpl.n	80129f6 <__swsetup_r+0x62>
 80129ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80129d0:	2900      	cmp	r1, #0
 80129d2:	d008      	beq.n	80129e6 <__swsetup_r+0x52>
 80129d4:	0023      	movs	r3, r4
 80129d6:	3340      	adds	r3, #64	; 0x40
 80129d8:	4299      	cmp	r1, r3
 80129da:	d002      	beq.n	80129e2 <__swsetup_r+0x4e>
 80129dc:	0028      	movs	r0, r5
 80129de:	f7f9 fe2f 	bl	800c640 <_free_r>
 80129e2:	2300      	movs	r3, #0
 80129e4:	6323      	str	r3, [r4, #48]	; 0x30
 80129e6:	2224      	movs	r2, #36	; 0x24
 80129e8:	89a3      	ldrh	r3, [r4, #12]
 80129ea:	4393      	bics	r3, r2
 80129ec:	81a3      	strh	r3, [r4, #12]
 80129ee:	2300      	movs	r3, #0
 80129f0:	6063      	str	r3, [r4, #4]
 80129f2:	6923      	ldr	r3, [r4, #16]
 80129f4:	6023      	str	r3, [r4, #0]
 80129f6:	2308      	movs	r3, #8
 80129f8:	89a2      	ldrh	r2, [r4, #12]
 80129fa:	4313      	orrs	r3, r2
 80129fc:	81a3      	strh	r3, [r4, #12]
 80129fe:	6923      	ldr	r3, [r4, #16]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d10b      	bne.n	8012a1c <__swsetup_r+0x88>
 8012a04:	21a0      	movs	r1, #160	; 0xa0
 8012a06:	2280      	movs	r2, #128	; 0x80
 8012a08:	89a3      	ldrh	r3, [r4, #12]
 8012a0a:	0089      	lsls	r1, r1, #2
 8012a0c:	0092      	lsls	r2, r2, #2
 8012a0e:	400b      	ands	r3, r1
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d003      	beq.n	8012a1c <__swsetup_r+0x88>
 8012a14:	0021      	movs	r1, r4
 8012a16:	0028      	movs	r0, r5
 8012a18:	f000 f8e8 	bl	8012bec <__smakebuf_r>
 8012a1c:	220c      	movs	r2, #12
 8012a1e:	5ea3      	ldrsh	r3, [r4, r2]
 8012a20:	2001      	movs	r0, #1
 8012a22:	001a      	movs	r2, r3
 8012a24:	b299      	uxth	r1, r3
 8012a26:	4002      	ands	r2, r0
 8012a28:	4203      	tst	r3, r0
 8012a2a:	d00f      	beq.n	8012a4c <__swsetup_r+0xb8>
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	60a2      	str	r2, [r4, #8]
 8012a30:	6962      	ldr	r2, [r4, #20]
 8012a32:	4252      	negs	r2, r2
 8012a34:	61a2      	str	r2, [r4, #24]
 8012a36:	2000      	movs	r0, #0
 8012a38:	6922      	ldr	r2, [r4, #16]
 8012a3a:	4282      	cmp	r2, r0
 8012a3c:	d1c4      	bne.n	80129c8 <__swsetup_r+0x34>
 8012a3e:	0609      	lsls	r1, r1, #24
 8012a40:	d5c2      	bpl.n	80129c8 <__swsetup_r+0x34>
 8012a42:	2240      	movs	r2, #64	; 0x40
 8012a44:	4313      	orrs	r3, r2
 8012a46:	81a3      	strh	r3, [r4, #12]
 8012a48:	3801      	subs	r0, #1
 8012a4a:	e7bd      	b.n	80129c8 <__swsetup_r+0x34>
 8012a4c:	0788      	lsls	r0, r1, #30
 8012a4e:	d400      	bmi.n	8012a52 <__swsetup_r+0xbe>
 8012a50:	6962      	ldr	r2, [r4, #20]
 8012a52:	60a2      	str	r2, [r4, #8]
 8012a54:	e7ef      	b.n	8012a36 <__swsetup_r+0xa2>
 8012a56:	46c0      	nop			; (mov r8, r8)
 8012a58:	200006d8 	.word	0x200006d8

08012a5c <__fputwc>:
 8012a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a5e:	b085      	sub	sp, #20
 8012a60:	000e      	movs	r6, r1
 8012a62:	0015      	movs	r5, r2
 8012a64:	9001      	str	r0, [sp, #4]
 8012a66:	f7f9 fccf 	bl	800c408 <__locale_mb_cur_max>
 8012a6a:	0004      	movs	r4, r0
 8012a6c:	2801      	cmp	r0, #1
 8012a6e:	d119      	bne.n	8012aa4 <__fputwc+0x48>
 8012a70:	1e73      	subs	r3, r6, #1
 8012a72:	2bfe      	cmp	r3, #254	; 0xfe
 8012a74:	d816      	bhi.n	8012aa4 <__fputwc+0x48>
 8012a76:	ab02      	add	r3, sp, #8
 8012a78:	711e      	strb	r6, [r3, #4]
 8012a7a:	2700      	movs	r7, #0
 8012a7c:	42a7      	cmp	r7, r4
 8012a7e:	d020      	beq.n	8012ac2 <__fputwc+0x66>
 8012a80:	ab03      	add	r3, sp, #12
 8012a82:	5dd9      	ldrb	r1, [r3, r7]
 8012a84:	68ab      	ldr	r3, [r5, #8]
 8012a86:	3b01      	subs	r3, #1
 8012a88:	60ab      	str	r3, [r5, #8]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	da04      	bge.n	8012a98 <__fputwc+0x3c>
 8012a8e:	69aa      	ldr	r2, [r5, #24]
 8012a90:	4293      	cmp	r3, r2
 8012a92:	db19      	blt.n	8012ac8 <__fputwc+0x6c>
 8012a94:	290a      	cmp	r1, #10
 8012a96:	d017      	beq.n	8012ac8 <__fputwc+0x6c>
 8012a98:	682b      	ldr	r3, [r5, #0]
 8012a9a:	1c5a      	adds	r2, r3, #1
 8012a9c:	602a      	str	r2, [r5, #0]
 8012a9e:	7019      	strb	r1, [r3, #0]
 8012aa0:	3701      	adds	r7, #1
 8012aa2:	e7eb      	b.n	8012a7c <__fputwc+0x20>
 8012aa4:	002b      	movs	r3, r5
 8012aa6:	0032      	movs	r2, r6
 8012aa8:	9801      	ldr	r0, [sp, #4]
 8012aaa:	335c      	adds	r3, #92	; 0x5c
 8012aac:	a903      	add	r1, sp, #12
 8012aae:	f000 f857 	bl	8012b60 <_wcrtomb_r>
 8012ab2:	0004      	movs	r4, r0
 8012ab4:	1c43      	adds	r3, r0, #1
 8012ab6:	d1e0      	bne.n	8012a7a <__fputwc+0x1e>
 8012ab8:	2340      	movs	r3, #64	; 0x40
 8012aba:	0006      	movs	r6, r0
 8012abc:	89aa      	ldrh	r2, [r5, #12]
 8012abe:	4313      	orrs	r3, r2
 8012ac0:	81ab      	strh	r3, [r5, #12]
 8012ac2:	0030      	movs	r0, r6
 8012ac4:	b005      	add	sp, #20
 8012ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ac8:	002a      	movs	r2, r5
 8012aca:	9801      	ldr	r0, [sp, #4]
 8012acc:	f000 f8cc 	bl	8012c68 <__swbuf_r>
 8012ad0:	1c43      	adds	r3, r0, #1
 8012ad2:	d1e5      	bne.n	8012aa0 <__fputwc+0x44>
 8012ad4:	0006      	movs	r6, r0
 8012ad6:	e7f4      	b.n	8012ac2 <__fputwc+0x66>

08012ad8 <_fputwc_r>:
 8012ad8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012ada:	b570      	push	{r4, r5, r6, lr}
 8012adc:	0005      	movs	r5, r0
 8012ade:	000e      	movs	r6, r1
 8012ae0:	0014      	movs	r4, r2
 8012ae2:	07db      	lsls	r3, r3, #31
 8012ae4:	d405      	bmi.n	8012af2 <_fputwc_r+0x1a>
 8012ae6:	8993      	ldrh	r3, [r2, #12]
 8012ae8:	059b      	lsls	r3, r3, #22
 8012aea:	d402      	bmi.n	8012af2 <_fputwc_r+0x1a>
 8012aec:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8012aee:	f7f9 fd1f 	bl	800c530 <__retarget_lock_acquire_recursive>
 8012af2:	230c      	movs	r3, #12
 8012af4:	5ee2      	ldrsh	r2, [r4, r3]
 8012af6:	2380      	movs	r3, #128	; 0x80
 8012af8:	019b      	lsls	r3, r3, #6
 8012afa:	421a      	tst	r2, r3
 8012afc:	d104      	bne.n	8012b08 <_fputwc_r+0x30>
 8012afe:	431a      	orrs	r2, r3
 8012b00:	81a2      	strh	r2, [r4, #12]
 8012b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012b04:	4313      	orrs	r3, r2
 8012b06:	6663      	str	r3, [r4, #100]	; 0x64
 8012b08:	0028      	movs	r0, r5
 8012b0a:	0022      	movs	r2, r4
 8012b0c:	0031      	movs	r1, r6
 8012b0e:	f7ff ffa5 	bl	8012a5c <__fputwc>
 8012b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b14:	0005      	movs	r5, r0
 8012b16:	07db      	lsls	r3, r3, #31
 8012b18:	d405      	bmi.n	8012b26 <_fputwc_r+0x4e>
 8012b1a:	89a3      	ldrh	r3, [r4, #12]
 8012b1c:	059b      	lsls	r3, r3, #22
 8012b1e:	d402      	bmi.n	8012b26 <_fputwc_r+0x4e>
 8012b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b22:	f7f9 fd06 	bl	800c532 <__retarget_lock_release_recursive>
 8012b26:	0028      	movs	r0, r5
 8012b28:	bd70      	pop	{r4, r5, r6, pc}

08012b2a <memmove>:
 8012b2a:	b510      	push	{r4, lr}
 8012b2c:	4288      	cmp	r0, r1
 8012b2e:	d902      	bls.n	8012b36 <memmove+0xc>
 8012b30:	188b      	adds	r3, r1, r2
 8012b32:	4298      	cmp	r0, r3
 8012b34:	d303      	bcc.n	8012b3e <memmove+0x14>
 8012b36:	2300      	movs	r3, #0
 8012b38:	e007      	b.n	8012b4a <memmove+0x20>
 8012b3a:	5c8b      	ldrb	r3, [r1, r2]
 8012b3c:	5483      	strb	r3, [r0, r2]
 8012b3e:	3a01      	subs	r2, #1
 8012b40:	d2fb      	bcs.n	8012b3a <memmove+0x10>
 8012b42:	bd10      	pop	{r4, pc}
 8012b44:	5ccc      	ldrb	r4, [r1, r3]
 8012b46:	54c4      	strb	r4, [r0, r3]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d1fa      	bne.n	8012b44 <memmove+0x1a>
 8012b4e:	e7f8      	b.n	8012b42 <memmove+0x18>

08012b50 <abort>:
 8012b50:	2006      	movs	r0, #6
 8012b52:	b510      	push	{r4, lr}
 8012b54:	f000 f906 	bl	8012d64 <raise>
 8012b58:	2001      	movs	r0, #1
 8012b5a:	f7f0 fdc9 	bl	80036f0 <_exit>
	...

08012b60 <_wcrtomb_r>:
 8012b60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012b62:	001d      	movs	r5, r3
 8012b64:	4b09      	ldr	r3, [pc, #36]	; (8012b8c <_wcrtomb_r+0x2c>)
 8012b66:	0004      	movs	r4, r0
 8012b68:	33e0      	adds	r3, #224	; 0xe0
 8012b6a:	681e      	ldr	r6, [r3, #0]
 8012b6c:	002b      	movs	r3, r5
 8012b6e:	2900      	cmp	r1, #0
 8012b70:	d101      	bne.n	8012b76 <_wcrtomb_r+0x16>
 8012b72:	000a      	movs	r2, r1
 8012b74:	a901      	add	r1, sp, #4
 8012b76:	0020      	movs	r0, r4
 8012b78:	47b0      	blx	r6
 8012b7a:	1c43      	adds	r3, r0, #1
 8012b7c:	d103      	bne.n	8012b86 <_wcrtomb_r+0x26>
 8012b7e:	2300      	movs	r3, #0
 8012b80:	602b      	str	r3, [r5, #0]
 8012b82:	338a      	adds	r3, #138	; 0x8a
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	b004      	add	sp, #16
 8012b88:	bd70      	pop	{r4, r5, r6, pc}
 8012b8a:	46c0      	nop			; (mov r8, r8)
 8012b8c:	2000044c 	.word	0x2000044c

08012b90 <__swhatbuf_r>:
 8012b90:	b570      	push	{r4, r5, r6, lr}
 8012b92:	000e      	movs	r6, r1
 8012b94:	001d      	movs	r5, r3
 8012b96:	230e      	movs	r3, #14
 8012b98:	5ec9      	ldrsh	r1, [r1, r3]
 8012b9a:	0014      	movs	r4, r2
 8012b9c:	b096      	sub	sp, #88	; 0x58
 8012b9e:	2900      	cmp	r1, #0
 8012ba0:	da09      	bge.n	8012bb6 <__swhatbuf_r+0x26>
 8012ba2:	89b2      	ldrh	r2, [r6, #12]
 8012ba4:	2380      	movs	r3, #128	; 0x80
 8012ba6:	0011      	movs	r1, r2
 8012ba8:	4019      	ands	r1, r3
 8012baa:	421a      	tst	r2, r3
 8012bac:	d018      	beq.n	8012be0 <__swhatbuf_r+0x50>
 8012bae:	2100      	movs	r1, #0
 8012bb0:	3b40      	subs	r3, #64	; 0x40
 8012bb2:	0008      	movs	r0, r1
 8012bb4:	e010      	b.n	8012bd8 <__swhatbuf_r+0x48>
 8012bb6:	466a      	mov	r2, sp
 8012bb8:	f000 f8de 	bl	8012d78 <_fstat_r>
 8012bbc:	2800      	cmp	r0, #0
 8012bbe:	dbf0      	blt.n	8012ba2 <__swhatbuf_r+0x12>
 8012bc0:	23f0      	movs	r3, #240	; 0xf0
 8012bc2:	9901      	ldr	r1, [sp, #4]
 8012bc4:	021b      	lsls	r3, r3, #8
 8012bc6:	4019      	ands	r1, r3
 8012bc8:	4b07      	ldr	r3, [pc, #28]	; (8012be8 <__swhatbuf_r+0x58>)
 8012bca:	2080      	movs	r0, #128	; 0x80
 8012bcc:	18c9      	adds	r1, r1, r3
 8012bce:	424b      	negs	r3, r1
 8012bd0:	4159      	adcs	r1, r3
 8012bd2:	2380      	movs	r3, #128	; 0x80
 8012bd4:	0100      	lsls	r0, r0, #4
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	6029      	str	r1, [r5, #0]
 8012bda:	6023      	str	r3, [r4, #0]
 8012bdc:	b016      	add	sp, #88	; 0x58
 8012bde:	bd70      	pop	{r4, r5, r6, pc}
 8012be0:	2380      	movs	r3, #128	; 0x80
 8012be2:	00db      	lsls	r3, r3, #3
 8012be4:	e7e5      	b.n	8012bb2 <__swhatbuf_r+0x22>
 8012be6:	46c0      	nop			; (mov r8, r8)
 8012be8:	ffffe000 	.word	0xffffe000

08012bec <__smakebuf_r>:
 8012bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bee:	2602      	movs	r6, #2
 8012bf0:	898b      	ldrh	r3, [r1, #12]
 8012bf2:	0005      	movs	r5, r0
 8012bf4:	000c      	movs	r4, r1
 8012bf6:	4233      	tst	r3, r6
 8012bf8:	d006      	beq.n	8012c08 <__smakebuf_r+0x1c>
 8012bfa:	0023      	movs	r3, r4
 8012bfc:	3343      	adds	r3, #67	; 0x43
 8012bfe:	6023      	str	r3, [r4, #0]
 8012c00:	6123      	str	r3, [r4, #16]
 8012c02:	2301      	movs	r3, #1
 8012c04:	6163      	str	r3, [r4, #20]
 8012c06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012c08:	466a      	mov	r2, sp
 8012c0a:	ab01      	add	r3, sp, #4
 8012c0c:	f7ff ffc0 	bl	8012b90 <__swhatbuf_r>
 8012c10:	9900      	ldr	r1, [sp, #0]
 8012c12:	0007      	movs	r7, r0
 8012c14:	0028      	movs	r0, r5
 8012c16:	f7f8 f933 	bl	800ae80 <_malloc_r>
 8012c1a:	2800      	cmp	r0, #0
 8012c1c:	d108      	bne.n	8012c30 <__smakebuf_r+0x44>
 8012c1e:	220c      	movs	r2, #12
 8012c20:	5ea3      	ldrsh	r3, [r4, r2]
 8012c22:	059a      	lsls	r2, r3, #22
 8012c24:	d4ef      	bmi.n	8012c06 <__smakebuf_r+0x1a>
 8012c26:	2203      	movs	r2, #3
 8012c28:	4393      	bics	r3, r2
 8012c2a:	431e      	orrs	r6, r3
 8012c2c:	81a6      	strh	r6, [r4, #12]
 8012c2e:	e7e4      	b.n	8012bfa <__smakebuf_r+0xe>
 8012c30:	2380      	movs	r3, #128	; 0x80
 8012c32:	89a2      	ldrh	r2, [r4, #12]
 8012c34:	6020      	str	r0, [r4, #0]
 8012c36:	4313      	orrs	r3, r2
 8012c38:	81a3      	strh	r3, [r4, #12]
 8012c3a:	9b00      	ldr	r3, [sp, #0]
 8012c3c:	6120      	str	r0, [r4, #16]
 8012c3e:	6163      	str	r3, [r4, #20]
 8012c40:	9b01      	ldr	r3, [sp, #4]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00c      	beq.n	8012c60 <__smakebuf_r+0x74>
 8012c46:	0028      	movs	r0, r5
 8012c48:	230e      	movs	r3, #14
 8012c4a:	5ee1      	ldrsh	r1, [r4, r3]
 8012c4c:	f000 f8a6 	bl	8012d9c <_isatty_r>
 8012c50:	2800      	cmp	r0, #0
 8012c52:	d005      	beq.n	8012c60 <__smakebuf_r+0x74>
 8012c54:	2303      	movs	r3, #3
 8012c56:	89a2      	ldrh	r2, [r4, #12]
 8012c58:	439a      	bics	r2, r3
 8012c5a:	3b02      	subs	r3, #2
 8012c5c:	4313      	orrs	r3, r2
 8012c5e:	81a3      	strh	r3, [r4, #12]
 8012c60:	89a3      	ldrh	r3, [r4, #12]
 8012c62:	433b      	orrs	r3, r7
 8012c64:	81a3      	strh	r3, [r4, #12]
 8012c66:	e7ce      	b.n	8012c06 <__smakebuf_r+0x1a>

08012c68 <__swbuf_r>:
 8012c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c6a:	0006      	movs	r6, r0
 8012c6c:	000d      	movs	r5, r1
 8012c6e:	0014      	movs	r4, r2
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d004      	beq.n	8012c7e <__swbuf_r+0x16>
 8012c74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d101      	bne.n	8012c7e <__swbuf_r+0x16>
 8012c7a:	f7f9 fa83 	bl	800c184 <__sinit>
 8012c7e:	69a3      	ldr	r3, [r4, #24]
 8012c80:	60a3      	str	r3, [r4, #8]
 8012c82:	89a3      	ldrh	r3, [r4, #12]
 8012c84:	071b      	lsls	r3, r3, #28
 8012c86:	d52e      	bpl.n	8012ce6 <__swbuf_r+0x7e>
 8012c88:	6923      	ldr	r3, [r4, #16]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d02b      	beq.n	8012ce6 <__swbuf_r+0x7e>
 8012c8e:	230c      	movs	r3, #12
 8012c90:	5ee2      	ldrsh	r2, [r4, r3]
 8012c92:	2380      	movs	r3, #128	; 0x80
 8012c94:	019b      	lsls	r3, r3, #6
 8012c96:	b2ef      	uxtb	r7, r5
 8012c98:	b2ed      	uxtb	r5, r5
 8012c9a:	421a      	tst	r2, r3
 8012c9c:	d02c      	beq.n	8012cf8 <__swbuf_r+0x90>
 8012c9e:	6923      	ldr	r3, [r4, #16]
 8012ca0:	6820      	ldr	r0, [r4, #0]
 8012ca2:	1ac0      	subs	r0, r0, r3
 8012ca4:	6963      	ldr	r3, [r4, #20]
 8012ca6:	4283      	cmp	r3, r0
 8012ca8:	dc05      	bgt.n	8012cb6 <__swbuf_r+0x4e>
 8012caa:	0021      	movs	r1, r4
 8012cac:	0030      	movs	r0, r6
 8012cae:	f7fd fab3 	bl	8010218 <_fflush_r>
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	d11d      	bne.n	8012cf2 <__swbuf_r+0x8a>
 8012cb6:	68a3      	ldr	r3, [r4, #8]
 8012cb8:	3001      	adds	r0, #1
 8012cba:	3b01      	subs	r3, #1
 8012cbc:	60a3      	str	r3, [r4, #8]
 8012cbe:	6823      	ldr	r3, [r4, #0]
 8012cc0:	1c5a      	adds	r2, r3, #1
 8012cc2:	6022      	str	r2, [r4, #0]
 8012cc4:	701f      	strb	r7, [r3, #0]
 8012cc6:	6963      	ldr	r3, [r4, #20]
 8012cc8:	4283      	cmp	r3, r0
 8012cca:	d004      	beq.n	8012cd6 <__swbuf_r+0x6e>
 8012ccc:	89a3      	ldrh	r3, [r4, #12]
 8012cce:	07db      	lsls	r3, r3, #31
 8012cd0:	d507      	bpl.n	8012ce2 <__swbuf_r+0x7a>
 8012cd2:	2d0a      	cmp	r5, #10
 8012cd4:	d105      	bne.n	8012ce2 <__swbuf_r+0x7a>
 8012cd6:	0021      	movs	r1, r4
 8012cd8:	0030      	movs	r0, r6
 8012cda:	f7fd fa9d 	bl	8010218 <_fflush_r>
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	d107      	bne.n	8012cf2 <__swbuf_r+0x8a>
 8012ce2:	0028      	movs	r0, r5
 8012ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ce6:	0021      	movs	r1, r4
 8012ce8:	0030      	movs	r0, r6
 8012cea:	f7ff fe53 	bl	8012994 <__swsetup_r>
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	d0cd      	beq.n	8012c8e <__swbuf_r+0x26>
 8012cf2:	2501      	movs	r5, #1
 8012cf4:	426d      	negs	r5, r5
 8012cf6:	e7f4      	b.n	8012ce2 <__swbuf_r+0x7a>
 8012cf8:	4313      	orrs	r3, r2
 8012cfa:	81a3      	strh	r3, [r4, #12]
 8012cfc:	4a02      	ldr	r2, [pc, #8]	; (8012d08 <__swbuf_r+0xa0>)
 8012cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d00:	4013      	ands	r3, r2
 8012d02:	6663      	str	r3, [r4, #100]	; 0x64
 8012d04:	e7cb      	b.n	8012c9e <__swbuf_r+0x36>
 8012d06:	46c0      	nop			; (mov r8, r8)
 8012d08:	ffffdfff 	.word	0xffffdfff

08012d0c <_raise_r>:
 8012d0c:	b570      	push	{r4, r5, r6, lr}
 8012d0e:	0004      	movs	r4, r0
 8012d10:	000d      	movs	r5, r1
 8012d12:	291f      	cmp	r1, #31
 8012d14:	d904      	bls.n	8012d20 <_raise_r+0x14>
 8012d16:	2316      	movs	r3, #22
 8012d18:	6003      	str	r3, [r0, #0]
 8012d1a:	2001      	movs	r0, #1
 8012d1c:	4240      	negs	r0, r0
 8012d1e:	bd70      	pop	{r4, r5, r6, pc}
 8012d20:	0003      	movs	r3, r0
 8012d22:	33fc      	adds	r3, #252	; 0xfc
 8012d24:	69db      	ldr	r3, [r3, #28]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d004      	beq.n	8012d34 <_raise_r+0x28>
 8012d2a:	008a      	lsls	r2, r1, #2
 8012d2c:	189b      	adds	r3, r3, r2
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	2a00      	cmp	r2, #0
 8012d32:	d108      	bne.n	8012d46 <_raise_r+0x3a>
 8012d34:	0020      	movs	r0, r4
 8012d36:	f000 f855 	bl	8012de4 <_getpid_r>
 8012d3a:	002a      	movs	r2, r5
 8012d3c:	0001      	movs	r1, r0
 8012d3e:	0020      	movs	r0, r4
 8012d40:	f000 f83e 	bl	8012dc0 <_kill_r>
 8012d44:	e7eb      	b.n	8012d1e <_raise_r+0x12>
 8012d46:	2000      	movs	r0, #0
 8012d48:	2a01      	cmp	r2, #1
 8012d4a:	d0e8      	beq.n	8012d1e <_raise_r+0x12>
 8012d4c:	1c51      	adds	r1, r2, #1
 8012d4e:	d103      	bne.n	8012d58 <_raise_r+0x4c>
 8012d50:	2316      	movs	r3, #22
 8012d52:	3001      	adds	r0, #1
 8012d54:	6023      	str	r3, [r4, #0]
 8012d56:	e7e2      	b.n	8012d1e <_raise_r+0x12>
 8012d58:	2400      	movs	r4, #0
 8012d5a:	0028      	movs	r0, r5
 8012d5c:	601c      	str	r4, [r3, #0]
 8012d5e:	4790      	blx	r2
 8012d60:	0020      	movs	r0, r4
 8012d62:	e7dc      	b.n	8012d1e <_raise_r+0x12>

08012d64 <raise>:
 8012d64:	b510      	push	{r4, lr}
 8012d66:	4b03      	ldr	r3, [pc, #12]	; (8012d74 <raise+0x10>)
 8012d68:	0001      	movs	r1, r0
 8012d6a:	6818      	ldr	r0, [r3, #0]
 8012d6c:	f7ff ffce 	bl	8012d0c <_raise_r>
 8012d70:	bd10      	pop	{r4, pc}
 8012d72:	46c0      	nop			; (mov r8, r8)
 8012d74:	200006d8 	.word	0x200006d8

08012d78 <_fstat_r>:
 8012d78:	2300      	movs	r3, #0
 8012d7a:	b570      	push	{r4, r5, r6, lr}
 8012d7c:	4d06      	ldr	r5, [pc, #24]	; (8012d98 <_fstat_r+0x20>)
 8012d7e:	0004      	movs	r4, r0
 8012d80:	0008      	movs	r0, r1
 8012d82:	0011      	movs	r1, r2
 8012d84:	602b      	str	r3, [r5, #0]
 8012d86:	f7f0 fd02 	bl	800378e <_fstat>
 8012d8a:	1c43      	adds	r3, r0, #1
 8012d8c:	d103      	bne.n	8012d96 <_fstat_r+0x1e>
 8012d8e:	682b      	ldr	r3, [r5, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d000      	beq.n	8012d96 <_fstat_r+0x1e>
 8012d94:	6023      	str	r3, [r4, #0]
 8012d96:	bd70      	pop	{r4, r5, r6, pc}
 8012d98:	20000d30 	.word	0x20000d30

08012d9c <_isatty_r>:
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	b570      	push	{r4, r5, r6, lr}
 8012da0:	4d06      	ldr	r5, [pc, #24]	; (8012dbc <_isatty_r+0x20>)
 8012da2:	0004      	movs	r4, r0
 8012da4:	0008      	movs	r0, r1
 8012da6:	602b      	str	r3, [r5, #0]
 8012da8:	f7f0 fcff 	bl	80037aa <_isatty>
 8012dac:	1c43      	adds	r3, r0, #1
 8012dae:	d103      	bne.n	8012db8 <_isatty_r+0x1c>
 8012db0:	682b      	ldr	r3, [r5, #0]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d000      	beq.n	8012db8 <_isatty_r+0x1c>
 8012db6:	6023      	str	r3, [r4, #0]
 8012db8:	bd70      	pop	{r4, r5, r6, pc}
 8012dba:	46c0      	nop			; (mov r8, r8)
 8012dbc:	20000d30 	.word	0x20000d30

08012dc0 <_kill_r>:
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	b570      	push	{r4, r5, r6, lr}
 8012dc4:	4d06      	ldr	r5, [pc, #24]	; (8012de0 <_kill_r+0x20>)
 8012dc6:	0004      	movs	r4, r0
 8012dc8:	0008      	movs	r0, r1
 8012dca:	0011      	movs	r1, r2
 8012dcc:	602b      	str	r3, [r5, #0]
 8012dce:	f7f0 fc7f 	bl	80036d0 <_kill>
 8012dd2:	1c43      	adds	r3, r0, #1
 8012dd4:	d103      	bne.n	8012dde <_kill_r+0x1e>
 8012dd6:	682b      	ldr	r3, [r5, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d000      	beq.n	8012dde <_kill_r+0x1e>
 8012ddc:	6023      	str	r3, [r4, #0]
 8012dde:	bd70      	pop	{r4, r5, r6, pc}
 8012de0:	20000d30 	.word	0x20000d30

08012de4 <_getpid_r>:
 8012de4:	b510      	push	{r4, lr}
 8012de6:	f7f0 fc6d 	bl	80036c4 <_getpid>
 8012dea:	bd10      	pop	{r4, pc}

08012dec <round>:
 8012dec:	b570      	push	{r4, r5, r6, lr}
 8012dee:	004a      	lsls	r2, r1, #1
 8012df0:	000d      	movs	r5, r1
 8012df2:	4920      	ldr	r1, [pc, #128]	; (8012e74 <round+0x88>)
 8012df4:	0d52      	lsrs	r2, r2, #21
 8012df6:	1851      	adds	r1, r2, r1
 8012df8:	0006      	movs	r6, r0
 8012dfa:	2913      	cmp	r1, #19
 8012dfc:	dc18      	bgt.n	8012e30 <round+0x44>
 8012dfe:	2900      	cmp	r1, #0
 8012e00:	da09      	bge.n	8012e16 <round+0x2a>
 8012e02:	0feb      	lsrs	r3, r5, #31
 8012e04:	2200      	movs	r2, #0
 8012e06:	07db      	lsls	r3, r3, #31
 8012e08:	3101      	adds	r1, #1
 8012e0a:	d101      	bne.n	8012e10 <round+0x24>
 8012e0c:	491a      	ldr	r1, [pc, #104]	; (8012e78 <round+0x8c>)
 8012e0e:	430b      	orrs	r3, r1
 8012e10:	0019      	movs	r1, r3
 8012e12:	0010      	movs	r0, r2
 8012e14:	e017      	b.n	8012e46 <round+0x5a>
 8012e16:	4c19      	ldr	r4, [pc, #100]	; (8012e7c <round+0x90>)
 8012e18:	410c      	asrs	r4, r1
 8012e1a:	0022      	movs	r2, r4
 8012e1c:	402a      	ands	r2, r5
 8012e1e:	4302      	orrs	r2, r0
 8012e20:	d013      	beq.n	8012e4a <round+0x5e>
 8012e22:	2280      	movs	r2, #128	; 0x80
 8012e24:	0312      	lsls	r2, r2, #12
 8012e26:	410a      	asrs	r2, r1
 8012e28:	1953      	adds	r3, r2, r5
 8012e2a:	43a3      	bics	r3, r4
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	e7ef      	b.n	8012e10 <round+0x24>
 8012e30:	2933      	cmp	r1, #51	; 0x33
 8012e32:	dd0d      	ble.n	8012e50 <round+0x64>
 8012e34:	2380      	movs	r3, #128	; 0x80
 8012e36:	00db      	lsls	r3, r3, #3
 8012e38:	4299      	cmp	r1, r3
 8012e3a:	d106      	bne.n	8012e4a <round+0x5e>
 8012e3c:	0002      	movs	r2, r0
 8012e3e:	002b      	movs	r3, r5
 8012e40:	0029      	movs	r1, r5
 8012e42:	f7ed fcb9 	bl	80007b8 <__aeabi_dadd>
 8012e46:	0006      	movs	r6, r0
 8012e48:	000d      	movs	r5, r1
 8012e4a:	0030      	movs	r0, r6
 8012e4c:	0029      	movs	r1, r5
 8012e4e:	bd70      	pop	{r4, r5, r6, pc}
 8012e50:	4c0b      	ldr	r4, [pc, #44]	; (8012e80 <round+0x94>)
 8012e52:	1912      	adds	r2, r2, r4
 8012e54:	2401      	movs	r4, #1
 8012e56:	4264      	negs	r4, r4
 8012e58:	40d4      	lsrs	r4, r2
 8012e5a:	4220      	tst	r0, r4
 8012e5c:	d0f5      	beq.n	8012e4a <round+0x5e>
 8012e5e:	2233      	movs	r2, #51	; 0x33
 8012e60:	1a51      	subs	r1, r2, r1
 8012e62:	3a32      	subs	r2, #50	; 0x32
 8012e64:	408a      	lsls	r2, r1
 8012e66:	1812      	adds	r2, r2, r0
 8012e68:	4282      	cmp	r2, r0
 8012e6a:	4180      	sbcs	r0, r0
 8012e6c:	4240      	negs	r0, r0
 8012e6e:	182b      	adds	r3, r5, r0
 8012e70:	43a2      	bics	r2, r4
 8012e72:	e7cd      	b.n	8012e10 <round+0x24>
 8012e74:	fffffc01 	.word	0xfffffc01
 8012e78:	3ff00000 	.word	0x3ff00000
 8012e7c:	000fffff 	.word	0x000fffff
 8012e80:	fffffbed 	.word	0xfffffbed

08012e84 <_init>:
 8012e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e86:	46c0      	nop			; (mov r8, r8)
 8012e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e8a:	bc08      	pop	{r3}
 8012e8c:	469e      	mov	lr, r3
 8012e8e:	4770      	bx	lr

08012e90 <_fini>:
 8012e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e92:	46c0      	nop			; (mov r8, r8)
 8012e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e96:	bc08      	pop	{r3}
 8012e98:	469e      	mov	lr, r3
 8012e9a:	4770      	bx	lr
