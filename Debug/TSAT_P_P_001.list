
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b714  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800b7d0  0800b7d0  0001b7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd6c  0800bd6c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd74  0800bd74  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd74  0800bd74  0001bd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd78  0800bd78  0001bd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bd7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200001e8  0800bf60  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  0800bf60  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014108  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b07  00000000  00000000  00034357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00036e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6f  00000000  00000000  000380b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aaee  00000000  00000000  00038f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171f8  00000000  00000000  00053a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a693f  00000000  00000000  0006ac0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a44  00000000  00000000  0011154c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00116f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e8 	.word	0x200001e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b7b8 	.word	0x0800b7b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001ec 	.word	0x200001ec
 8000100:	0800b7b8 	.word	0x0800b7b8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f885 	bl	8001548 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffd5 	bl	80013f8 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f877 	bl	8001548 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f86d 	bl	8001548 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fffd 	bl	800147c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fff3 	bl	800147c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 feeb 	bl	80022d4 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 fb44 	bl	8001b94 <__aeabi_dsub>
 800050c:	f001 fee2 	bl	80022d4 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 f853 	bl	8001610 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f001 ff16 	bl	80023a0 <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 f84a 	bl	8001610 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fb06 	bl	8001b94 <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f001 fecf 	bl	8002340 <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 f833 	bl	8001610 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f001 fef6 	bl	80023a0 <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 f8d0 	bl	800075c <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f001 ffa6 	bl	8002534 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f001 ffa1 	bl	8002534 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	d434      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fa:	469b      	mov	fp, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	465a      	mov	r2, fp
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83b      	bhi.n	8000688 <__udivmoddi4+0xc4>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e079      	b.n	800070a <__udivmoddi4+0x146>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e076      	b.n	8000710 <__udivmoddi4+0x14c>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e029      	b.n	8000690 <__udivmoddi4+0xcc>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	469b      	mov	fp, r3
 8000668:	2320      	movs	r3, #32
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	4652      	mov	r2, sl
 800066e:	40da      	lsrs	r2, r3
 8000670:	4641      	mov	r1, r8
 8000672:	0013      	movs	r3, r2
 8000674:	464a      	mov	r2, r9
 8000676:	408a      	lsls	r2, r1
 8000678:	0017      	movs	r7, r2
 800067a:	4642      	mov	r2, r8
 800067c:	431f      	orrs	r7, r3
 800067e:	4653      	mov	r3, sl
 8000680:	4093      	lsls	r3, r2
 8000682:	001e      	movs	r6, r3
 8000684:	42af      	cmp	r7, r5
 8000686:	d9c3      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000688:	2200      	movs	r2, #0
 800068a:	2300      	movs	r3, #0
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	4643      	mov	r3, r8
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0d8      	beq.n	8000648 <__udivmoddi4+0x84>
 8000696:	07fb      	lsls	r3, r7, #31
 8000698:	0872      	lsrs	r2, r6, #1
 800069a:	431a      	orrs	r2, r3
 800069c:	4646      	mov	r6, r8
 800069e:	087b      	lsrs	r3, r7, #1
 80006a0:	e00e      	b.n	80006c0 <__udivmoddi4+0xfc>
 80006a2:	42ab      	cmp	r3, r5
 80006a4:	d101      	bne.n	80006aa <__udivmoddi4+0xe6>
 80006a6:	42a2      	cmp	r2, r4
 80006a8:	d80c      	bhi.n	80006c4 <__udivmoddi4+0x100>
 80006aa:	1aa4      	subs	r4, r4, r2
 80006ac:	419d      	sbcs	r5, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	1924      	adds	r4, r4, r4
 80006b2:	416d      	adcs	r5, r5
 80006b4:	2100      	movs	r1, #0
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1824      	adds	r4, r4, r0
 80006ba:	414d      	adcs	r5, r1
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d006      	beq.n	80006ce <__udivmoddi4+0x10a>
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d9ee      	bls.n	80006a2 <__udivmoddi4+0xde>
 80006c4:	3e01      	subs	r6, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d1f8      	bne.n	80006c0 <__udivmoddi4+0xfc>
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	465b      	mov	r3, fp
 80006d4:	1900      	adds	r0, r0, r4
 80006d6:	4169      	adcs	r1, r5
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db24      	blt.n	8000726 <__udivmoddi4+0x162>
 80006dc:	002b      	movs	r3, r5
 80006de:	465a      	mov	r2, fp
 80006e0:	4644      	mov	r4, r8
 80006e2:	40d3      	lsrs	r3, r2
 80006e4:	002a      	movs	r2, r5
 80006e6:	40e2      	lsrs	r2, r4
 80006e8:	001c      	movs	r4, r3
 80006ea:	465b      	mov	r3, fp
 80006ec:	0015      	movs	r5, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db2a      	blt.n	8000748 <__udivmoddi4+0x184>
 80006f2:	0026      	movs	r6, r4
 80006f4:	409e      	lsls	r6, r3
 80006f6:	0033      	movs	r3, r6
 80006f8:	0026      	movs	r6, r4
 80006fa:	4647      	mov	r7, r8
 80006fc:	40be      	lsls	r6, r7
 80006fe:	0032      	movs	r2, r6
 8000700:	1a80      	subs	r0, r0, r2
 8000702:	4199      	sbcs	r1, r3
 8000704:	9000      	str	r0, [sp, #0]
 8000706:	9101      	str	r1, [sp, #4]
 8000708:	e79e      	b.n	8000648 <__udivmoddi4+0x84>
 800070a:	42a3      	cmp	r3, r4
 800070c:	d8bc      	bhi.n	8000688 <__udivmoddi4+0xc4>
 800070e:	e782      	b.n	8000616 <__udivmoddi4+0x52>
 8000710:	4642      	mov	r2, r8
 8000712:	2320      	movs	r3, #32
 8000714:	2100      	movs	r1, #0
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	9100      	str	r1, [sp, #0]
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	40da      	lsrs	r2, r3
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	e785      	b.n	8000632 <__udivmoddi4+0x6e>
 8000726:	4642      	mov	r2, r8
 8000728:	2320      	movs	r3, #32
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4646      	mov	r6, r8
 8000730:	409a      	lsls	r2, r3
 8000732:	0023      	movs	r3, r4
 8000734:	40f3      	lsrs	r3, r6
 8000736:	4644      	mov	r4, r8
 8000738:	4313      	orrs	r3, r2
 800073a:	002a      	movs	r2, r5
 800073c:	40e2      	lsrs	r2, r4
 800073e:	001c      	movs	r4, r3
 8000740:	465b      	mov	r3, fp
 8000742:	0015      	movs	r5, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	dad4      	bge.n	80006f2 <__udivmoddi4+0x12e>
 8000748:	4642      	mov	r2, r8
 800074a:	002f      	movs	r7, r5
 800074c:	2320      	movs	r3, #32
 800074e:	0026      	movs	r6, r4
 8000750:	4097      	lsls	r7, r2
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	40de      	lsrs	r6, r3
 8000756:	003b      	movs	r3, r7
 8000758:	4333      	orrs	r3, r6
 800075a:	e7cd      	b.n	80006f8 <__udivmoddi4+0x134>

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	0004      	movs	r4, r0
 8000766:	b5c0      	push	{r6, r7, lr}
 8000768:	001f      	movs	r7, r3
 800076a:	030b      	lsls	r3, r1, #12
 800076c:	0010      	movs	r0, r2
 800076e:	004e      	lsls	r6, r1, #1
 8000770:	0a5b      	lsrs	r3, r3, #9
 8000772:	0fcd      	lsrs	r5, r1, #31
 8000774:	0f61      	lsrs	r1, r4, #29
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	4319      	orrs	r1, r3
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	0fff      	lsrs	r7, r7, #31
 8000780:	46bc      	mov	ip, r7
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	0f47      	lsrs	r7, r0, #29
 8000786:	4327      	orrs	r7, r4
 8000788:	0d76      	lsrs	r6, r6, #21
 800078a:	0d52      	lsrs	r2, r2, #21
 800078c:	00c0      	lsls	r0, r0, #3
 800078e:	46b9      	mov	r9, r7
 8000790:	4680      	mov	r8, r0
 8000792:	1ab7      	subs	r7, r6, r2
 8000794:	4565      	cmp	r5, ip
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e09b      	b.n	80008d2 <__aeabi_dadd+0x176>
 800079a:	2f00      	cmp	r7, #0
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_dadd+0x44>
 800079e:	e084      	b.n	80008aa <__aeabi_dadd+0x14e>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e0be      	b.n	8000924 <__aeabi_dadd+0x1c8>
 80007a6:	4ac8      	ldr	r2, [pc, #800]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80007a8:	4296      	cmp	r6, r2
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e124      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	464c      	mov	r4, r9
 80007b2:	0412      	lsls	r2, r2, #16
 80007b4:	4314      	orrs	r4, r2
 80007b6:	46a1      	mov	r9, r4
 80007b8:	2f38      	cmp	r7, #56	; 0x38
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x62>
 80007bc:	e167      	b.n	8000a8e <__aeabi_dadd+0x332>
 80007be:	2f1f      	cmp	r7, #31
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_dadd+0x68>
 80007c2:	e1d6      	b.n	8000b72 <__aeabi_dadd+0x416>
 80007c4:	2220      	movs	r2, #32
 80007c6:	464c      	mov	r4, r9
 80007c8:	1bd2      	subs	r2, r2, r7
 80007ca:	4094      	lsls	r4, r2
 80007cc:	46a2      	mov	sl, r4
 80007ce:	4644      	mov	r4, r8
 80007d0:	40fc      	lsrs	r4, r7
 80007d2:	0020      	movs	r0, r4
 80007d4:	4654      	mov	r4, sl
 80007d6:	4304      	orrs	r4, r0
 80007d8:	4640      	mov	r0, r8
 80007da:	4090      	lsls	r0, r2
 80007dc:	1e42      	subs	r2, r0, #1
 80007de:	4190      	sbcs	r0, r2
 80007e0:	464a      	mov	r2, r9
 80007e2:	40fa      	lsrs	r2, r7
 80007e4:	4304      	orrs	r4, r0
 80007e6:	1a89      	subs	r1, r1, r2
 80007e8:	1b1c      	subs	r4, r3, r4
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	4192      	sbcs	r2, r2
 80007ee:	4252      	negs	r2, r2
 80007f0:	1a8b      	subs	r3, r1, r2
 80007f2:	469a      	mov	sl, r3
 80007f4:	4653      	mov	r3, sl
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0xa0>
 80007fa:	e0d4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 80007fc:	4653      	mov	r3, sl
 80007fe:	025a      	lsls	r2, r3, #9
 8000800:	0a53      	lsrs	r3, r2, #9
 8000802:	469a      	mov	sl, r3
 8000804:	4653      	mov	r3, sl
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0xb0>
 800080a:	e104      	b.n	8000a16 <__aeabi_dadd+0x2ba>
 800080c:	4650      	mov	r0, sl
 800080e:	f001 fe73 	bl	80024f8 <__clzsi2>
 8000812:	0003      	movs	r3, r0
 8000814:	3b08      	subs	r3, #8
 8000816:	2220      	movs	r2, #32
 8000818:	0020      	movs	r0, r4
 800081a:	1ad2      	subs	r2, r2, r3
 800081c:	4651      	mov	r1, sl
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4099      	lsls	r1, r3
 8000822:	0002      	movs	r2, r0
 8000824:	409c      	lsls	r4, r3
 8000826:	430a      	orrs	r2, r1
 8000828:	42b3      	cmp	r3, r6
 800082a:	da00      	bge.n	800082e <__aeabi_dadd+0xd2>
 800082c:	e102      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 800082e:	1b9b      	subs	r3, r3, r6
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	291f      	cmp	r1, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0xdc>
 8000836:	e0a7      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000838:	2320      	movs	r3, #32
 800083a:	0010      	movs	r0, r2
 800083c:	0026      	movs	r6, r4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	409c      	lsls	r4, r3
 8000842:	4098      	lsls	r0, r3
 8000844:	40ce      	lsrs	r6, r1
 8000846:	40ca      	lsrs	r2, r1
 8000848:	1e63      	subs	r3, r4, #1
 800084a:	419c      	sbcs	r4, r3
 800084c:	4330      	orrs	r0, r6
 800084e:	4692      	mov	sl, r2
 8000850:	2600      	movs	r6, #0
 8000852:	4304      	orrs	r4, r0
 8000854:	0763      	lsls	r3, r4, #29
 8000856:	d009      	beq.n	800086c <__aeabi_dadd+0x110>
 8000858:	230f      	movs	r3, #15
 800085a:	4023      	ands	r3, r4
 800085c:	2b04      	cmp	r3, #4
 800085e:	d005      	beq.n	800086c <__aeabi_dadd+0x110>
 8000860:	1d23      	adds	r3, r4, #4
 8000862:	42a3      	cmp	r3, r4
 8000864:	41a4      	sbcs	r4, r4
 8000866:	4264      	negs	r4, r4
 8000868:	44a2      	add	sl, r4
 800086a:	001c      	movs	r4, r3
 800086c:	4653      	mov	r3, sl
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	d400      	bmi.n	8000874 <__aeabi_dadd+0x118>
 8000872:	e09b      	b.n	80009ac <__aeabi_dadd+0x250>
 8000874:	4b94      	ldr	r3, [pc, #592]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000876:	3601      	adds	r6, #1
 8000878:	429e      	cmp	r6, r3
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x122>
 800087c:	e0b8      	b.n	80009f0 <__aeabi_dadd+0x294>
 800087e:	4653      	mov	r3, sl
 8000880:	4992      	ldr	r1, [pc, #584]	; (8000acc <__aeabi_dadd+0x370>)
 8000882:	08e4      	lsrs	r4, r4, #3
 8000884:	400b      	ands	r3, r1
 8000886:	0019      	movs	r1, r3
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	4323      	orrs	r3, r4
 800088c:	0572      	lsls	r2, r6, #21
 800088e:	024c      	lsls	r4, r1, #9
 8000890:	0b24      	lsrs	r4, r4, #12
 8000892:	0d52      	lsrs	r2, r2, #21
 8000894:	0512      	lsls	r2, r2, #20
 8000896:	07ed      	lsls	r5, r5, #31
 8000898:	4322      	orrs	r2, r4
 800089a:	432a      	orrs	r2, r5
 800089c:	0018      	movs	r0, r3
 800089e:	0011      	movs	r1, r2
 80008a0:	bce0      	pop	{r5, r6, r7}
 80008a2:	46ba      	mov	sl, r7
 80008a4:	46b1      	mov	r9, r6
 80008a6:	46a8      	mov	r8, r5
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	d048      	beq.n	8000940 <__aeabi_dadd+0x1e4>
 80008ae:	1b97      	subs	r7, r2, r6
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_dadd+0x15a>
 80008b4:	e10e      	b.n	8000ad4 <__aeabi_dadd+0x378>
 80008b6:	000c      	movs	r4, r1
 80008b8:	431c      	orrs	r4, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x162>
 80008bc:	e1b7      	b.n	8000c2e <__aeabi_dadd+0x4d2>
 80008be:	1e7c      	subs	r4, r7, #1
 80008c0:	2f01      	cmp	r7, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x16a>
 80008c4:	e226      	b.n	8000d14 <__aeabi_dadd+0x5b8>
 80008c6:	4d80      	ldr	r5, [pc, #512]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008c8:	42af      	cmp	r7, r5
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x172>
 80008cc:	e1d5      	b.n	8000c7a <__aeabi_dadd+0x51e>
 80008ce:	0027      	movs	r7, r4
 80008d0:	e107      	b.n	8000ae2 <__aeabi_dadd+0x386>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_dadd+0x17c>
 80008d6:	e0b2      	b.n	8000a3e <__aeabi_dadd+0x2e2>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d047      	beq.n	800096c <__aeabi_dadd+0x210>
 80008dc:	4a7a      	ldr	r2, [pc, #488]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008de:	4296      	cmp	r6, r2
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x188>
 80008e2:	e089      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	464c      	mov	r4, r9
 80008e8:	0412      	lsls	r2, r2, #16
 80008ea:	4314      	orrs	r4, r2
 80008ec:	46a1      	mov	r9, r4
 80008ee:	2f38      	cmp	r7, #56	; 0x38
 80008f0:	dc6b      	bgt.n	80009ca <__aeabi_dadd+0x26e>
 80008f2:	2f1f      	cmp	r7, #31
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_dadd+0x19c>
 80008f6:	e16e      	b.n	8000bd6 <__aeabi_dadd+0x47a>
 80008f8:	003a      	movs	r2, r7
 80008fa:	4648      	mov	r0, r9
 80008fc:	3a20      	subs	r2, #32
 80008fe:	40d0      	lsrs	r0, r2
 8000900:	4684      	mov	ip, r0
 8000902:	2f20      	cmp	r7, #32
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	4648      	mov	r0, r9
 800090a:	1bd2      	subs	r2, r2, r7
 800090c:	4090      	lsls	r0, r2
 800090e:	0002      	movs	r2, r0
 8000910:	4640      	mov	r0, r8
 8000912:	4310      	orrs	r0, r2
 8000914:	4680      	mov	r8, r0
 8000916:	4640      	mov	r0, r8
 8000918:	1e42      	subs	r2, r0, #1
 800091a:	4190      	sbcs	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	0004      	movs	r4, r0
 8000920:	4314      	orrs	r4, r2
 8000922:	e057      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000924:	464a      	mov	r2, r9
 8000926:	4302      	orrs	r2, r0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x1d0>
 800092a:	e103      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 800092c:	1e7a      	subs	r2, r7, #1
 800092e:	2f01      	cmp	r7, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x1d8>
 8000932:	e193      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000934:	4c64      	ldr	r4, [pc, #400]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000936:	42a7      	cmp	r7, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x1e0>
 800093a:	e18a      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 800093c:	0017      	movs	r7, r2
 800093e:	e73b      	b.n	80007b8 <__aeabi_dadd+0x5c>
 8000940:	4c63      	ldr	r4, [pc, #396]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000942:	1c72      	adds	r2, r6, #1
 8000944:	4222      	tst	r2, r4
 8000946:	d000      	beq.n	800094a <__aeabi_dadd+0x1ee>
 8000948:	e0e0      	b.n	8000b0c <__aeabi_dadd+0x3b0>
 800094a:	000a      	movs	r2, r1
 800094c:	431a      	orrs	r2, r3
 800094e:	2e00      	cmp	r6, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_dadd+0x1f8>
 8000952:	e174      	b.n	8000c3e <__aeabi_dadd+0x4e2>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x1fe>
 8000958:	e1d0      	b.n	8000cfc <__aeabi_dadd+0x5a0>
 800095a:	464a      	mov	r2, r9
 800095c:	4302      	orrs	r2, r0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x206>
 8000960:	e1e3      	b.n	8000d2a <__aeabi_dadd+0x5ce>
 8000962:	074a      	lsls	r2, r1, #29
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	4313      	orrs	r3, r2
 8000968:	08c9      	lsrs	r1, r1, #3
 800096a:	e029      	b.n	80009c0 <__aeabi_dadd+0x264>
 800096c:	464a      	mov	r2, r9
 800096e:	4302      	orrs	r2, r0
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x218>
 8000972:	e17d      	b.n	8000c70 <__aeabi_dadd+0x514>
 8000974:	1e7a      	subs	r2, r7, #1
 8000976:	2f01      	cmp	r7, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c52      	ldr	r4, [pc, #328]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800097e:	42a7      	cmp	r7, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e166      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000984:	0017      	movs	r7, r2
 8000986:	e7b2      	b.n	80008ee <__aeabi_dadd+0x192>
 8000988:	0010      	movs	r0, r2
 800098a:	3b1f      	subs	r3, #31
 800098c:	40d8      	lsrs	r0, r3
 800098e:	2920      	cmp	r1, #32
 8000990:	d003      	beq.n	800099a <__aeabi_dadd+0x23e>
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	1a5b      	subs	r3, r3, r1
 8000996:	409a      	lsls	r2, r3
 8000998:	4314      	orrs	r4, r2
 800099a:	1e63      	subs	r3, r4, #1
 800099c:	419c      	sbcs	r4, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	2600      	movs	r6, #0
 80009a2:	469a      	mov	sl, r3
 80009a4:	4304      	orrs	r4, r0
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e755      	b.n	8000858 <__aeabi_dadd+0xfc>
 80009ac:	4652      	mov	r2, sl
 80009ae:	08e3      	lsrs	r3, r4, #3
 80009b0:	0752      	lsls	r2, r2, #29
 80009b2:	4313      	orrs	r3, r2
 80009b4:	4652      	mov	r2, sl
 80009b6:	0037      	movs	r7, r6
 80009b8:	08d1      	lsrs	r1, r2, #3
 80009ba:	4a43      	ldr	r2, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009bc:	4297      	cmp	r7, r2
 80009be:	d01f      	beq.n	8000a00 <__aeabi_dadd+0x2a4>
 80009c0:	0309      	lsls	r1, r1, #12
 80009c2:	057a      	lsls	r2, r7, #21
 80009c4:	0b0c      	lsrs	r4, r1, #12
 80009c6:	0d52      	lsrs	r2, r2, #21
 80009c8:	e764      	b.n	8000894 <__aeabi_dadd+0x138>
 80009ca:	4642      	mov	r2, r8
 80009cc:	464c      	mov	r4, r9
 80009ce:	4314      	orrs	r4, r2
 80009d0:	1e62      	subs	r2, r4, #1
 80009d2:	4194      	sbcs	r4, r2
 80009d4:	18e4      	adds	r4, r4, r3
 80009d6:	429c      	cmp	r4, r3
 80009d8:	4192      	sbcs	r2, r2
 80009da:	4252      	negs	r2, r2
 80009dc:	4692      	mov	sl, r2
 80009de:	448a      	add	sl, r1
 80009e0:	4653      	mov	r3, sl
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	d5df      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009e8:	3601      	adds	r6, #1
 80009ea:	429e      	cmp	r6, r3
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x294>
 80009ee:	e0b3      	b.n	8000b58 <__aeabi_dadd+0x3fc>
 80009f0:	0032      	movs	r2, r6
 80009f2:	2400      	movs	r4, #0
 80009f4:	2300      	movs	r3, #0
 80009f6:	e74d      	b.n	8000894 <__aeabi_dadd+0x138>
 80009f8:	074a      	lsls	r2, r1, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	001a      	movs	r2, r3
 8000a02:	430a      	orrs	r2, r1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x2ac>
 8000a06:	e200      	b.n	8000e0a <__aeabi_dadd+0x6ae>
 8000a08:	2480      	movs	r4, #128	; 0x80
 8000a0a:	0324      	lsls	r4, r4, #12
 8000a0c:	430c      	orrs	r4, r1
 8000a0e:	0324      	lsls	r4, r4, #12
 8000a10:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a12:	0b24      	lsrs	r4, r4, #12
 8000a14:	e73e      	b.n	8000894 <__aeabi_dadd+0x138>
 8000a16:	0020      	movs	r0, r4
 8000a18:	f001 fd6e 	bl	80024f8 <__clzsi2>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	3318      	adds	r3, #24
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_dadd+0x2ca>
 8000a24:	e6f7      	b.n	8000816 <__aeabi_dadd+0xba>
 8000a26:	0022      	movs	r2, r4
 8000a28:	3808      	subs	r0, #8
 8000a2a:	4082      	lsls	r2, r0
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	42b3      	cmp	r3, r6
 8000a30:	db00      	blt.n	8000a34 <__aeabi_dadd+0x2d8>
 8000a32:	e6fc      	b.n	800082e <__aeabi_dadd+0xd2>
 8000a34:	1af6      	subs	r6, r6, r3
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <__aeabi_dadd+0x370>)
 8000a38:	401a      	ands	r2, r3
 8000a3a:	4692      	mov	sl, r2
 8000a3c:	e70a      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d02b      	beq.n	8000a9a <__aeabi_dadd+0x33e>
 8000a42:	1b97      	subs	r7, r2, r6
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x2ee>
 8000a48:	e0b8      	b.n	8000bbc <__aeabi_dadd+0x460>
 8000a4a:	4c1f      	ldr	r4, [pc, #124]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a4c:	42a2      	cmp	r2, r4
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x2f6>
 8000a50:	e11c      	b.n	8000c8c <__aeabi_dadd+0x530>
 8000a52:	2480      	movs	r4, #128	; 0x80
 8000a54:	0424      	lsls	r4, r4, #16
 8000a56:	4321      	orrs	r1, r4
 8000a58:	2f38      	cmp	r7, #56	; 0x38
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dadd+0x302>
 8000a5c:	e11e      	b.n	8000c9c <__aeabi_dadd+0x540>
 8000a5e:	2f1f      	cmp	r7, #31
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x308>
 8000a62:	e19e      	b.n	8000da2 <__aeabi_dadd+0x646>
 8000a64:	2620      	movs	r6, #32
 8000a66:	000c      	movs	r4, r1
 8000a68:	1bf6      	subs	r6, r6, r7
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	40b3      	lsls	r3, r6
 8000a6e:	40b4      	lsls	r4, r6
 8000a70:	40f8      	lsrs	r0, r7
 8000a72:	1e5e      	subs	r6, r3, #1
 8000a74:	41b3      	sbcs	r3, r6
 8000a76:	40f9      	lsrs	r1, r7
 8000a78:	4304      	orrs	r4, r0
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4489      	add	r9, r1
 8000a7e:	4444      	add	r4, r8
 8000a80:	4544      	cmp	r4, r8
 8000a82:	419b      	sbcs	r3, r3
 8000a84:	425b      	negs	r3, r3
 8000a86:	444b      	add	r3, r9
 8000a88:	469a      	mov	sl, r3
 8000a8a:	0016      	movs	r6, r2
 8000a8c:	e7a8      	b.n	80009e0 <__aeabi_dadd+0x284>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	464c      	mov	r4, r9
 8000a92:	4314      	orrs	r4, r2
 8000a94:	1e62      	subs	r2, r4, #1
 8000a96:	4194      	sbcs	r4, r2
 8000a98:	e6a6      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000a9a:	4c0d      	ldr	r4, [pc, #52]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000a9c:	1c72      	adds	r2, r6, #1
 8000a9e:	4222      	tst	r2, r4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x348>
 8000aa2:	e0a8      	b.n	8000bf6 <__aeabi_dadd+0x49a>
 8000aa4:	000a      	movs	r2, r1
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x352>
 8000aac:	e10a      	b.n	8000cc4 <__aeabi_dadd+0x568>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x358>
 8000ab2:	e15e      	b.n	8000d72 <__aeabi_dadd+0x616>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	4302      	orrs	r2, r0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_dadd+0x360>
 8000aba:	e161      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000abc:	074a      	lsls	r2, r1, #29
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	08c9      	lsrs	r1, r1, #3
 8000ac4:	e77c      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	000007ff 	.word	0x000007ff
 8000acc:	ff7fffff 	.word	0xff7fffff
 8000ad0:	000007fe 	.word	0x000007fe
 8000ad4:	4ccf      	ldr	r4, [pc, #828]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000ad6:	42a2      	cmp	r2, r4
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x380>
 8000ada:	e0ce      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	0424      	lsls	r4, r4, #16
 8000ae0:	4321      	orrs	r1, r4
 8000ae2:	2f38      	cmp	r7, #56	; 0x38
 8000ae4:	dc5b      	bgt.n	8000b9e <__aeabi_dadd+0x442>
 8000ae6:	2f1f      	cmp	r7, #31
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dadd+0x390>
 8000aea:	e0dc      	b.n	8000ca6 <__aeabi_dadd+0x54a>
 8000aec:	2520      	movs	r5, #32
 8000aee:	000c      	movs	r4, r1
 8000af0:	1bed      	subs	r5, r5, r7
 8000af2:	001e      	movs	r6, r3
 8000af4:	40ab      	lsls	r3, r5
 8000af6:	40ac      	lsls	r4, r5
 8000af8:	40fe      	lsrs	r6, r7
 8000afa:	1e5d      	subs	r5, r3, #1
 8000afc:	41ab      	sbcs	r3, r5
 8000afe:	4334      	orrs	r4, r6
 8000b00:	40f9      	lsrs	r1, r7
 8000b02:	431c      	orrs	r4, r3
 8000b04:	464b      	mov	r3, r9
 8000b06:	1a5b      	subs	r3, r3, r1
 8000b08:	4699      	mov	r9, r3
 8000b0a:	e04c      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	1a1c      	subs	r4, r3, r0
 8000b10:	1a88      	subs	r0, r1, r2
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	4192      	sbcs	r2, r2
 8000b16:	4252      	negs	r2, r2
 8000b18:	4692      	mov	sl, r2
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	4650      	mov	r0, sl
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	4692      	mov	sl, r2
 8000b22:	0212      	lsls	r2, r2, #8
 8000b24:	d478      	bmi.n	8000c18 <__aeabi_dadd+0x4bc>
 8000b26:	4653      	mov	r3, sl
 8000b28:	4323      	orrs	r3, r4
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x3d2>
 8000b2c:	e66a      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2500      	movs	r5, #0
 8000b32:	e745      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000b34:	074a      	lsls	r2, r1, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c9      	lsrs	r1, r1, #3
 8000b3c:	e73d      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000b3e:	181c      	adds	r4, r3, r0
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4449      	add	r1, r9
 8000b46:	468a      	mov	sl, r1
 8000b48:	425b      	negs	r3, r3
 8000b4a:	449a      	add	sl, r3
 8000b4c:	4653      	mov	r3, sl
 8000b4e:	2601      	movs	r6, #1
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_dadd+0x3fa>
 8000b54:	e727      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b56:	2602      	movs	r6, #2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	4baf      	ldr	r3, [pc, #700]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	4021      	ands	r1, r4
 8000b64:	0862      	lsrs	r2, r4, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	07dc      	lsls	r4, r3, #31
 8000b6a:	085b      	lsrs	r3, r3, #1
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	4314      	orrs	r4, r2
 8000b70:	e670      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000b72:	003a      	movs	r2, r7
 8000b74:	464c      	mov	r4, r9
 8000b76:	3a20      	subs	r2, #32
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	46a4      	mov	ip, r4
 8000b7c:	2f20      	cmp	r7, #32
 8000b7e:	d007      	beq.n	8000b90 <__aeabi_dadd+0x434>
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	4648      	mov	r0, r9
 8000b84:	1bd2      	subs	r2, r2, r7
 8000b86:	4090      	lsls	r0, r2
 8000b88:	0002      	movs	r2, r0
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	4310      	orrs	r0, r2
 8000b8e:	4680      	mov	r8, r0
 8000b90:	4640      	mov	r0, r8
 8000b92:	1e42      	subs	r2, r0, #1
 8000b94:	4190      	sbcs	r0, r2
 8000b96:	4662      	mov	r2, ip
 8000b98:	0004      	movs	r4, r0
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	e624      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	1e63      	subs	r3, r4, #1
 8000ba4:	419c      	sbcs	r4, r3
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1b1c      	subs	r4, r3, r4
 8000baa:	45a0      	cmp	r8, r4
 8000bac:	419b      	sbcs	r3, r3
 8000bae:	4649      	mov	r1, r9
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	1acb      	subs	r3, r1, r3
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	0016      	movs	r6, r2
 8000bba:	e61b      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000bbc:	000c      	movs	r4, r1
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x468>
 8000bc2:	e0c7      	b.n	8000d54 <__aeabi_dadd+0x5f8>
 8000bc4:	1e7c      	subs	r4, r7, #1
 8000bc6:	2f01      	cmp	r7, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x470>
 8000bca:	e0f9      	b.n	8000dc0 <__aeabi_dadd+0x664>
 8000bcc:	4e91      	ldr	r6, [pc, #580]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bce:	42b7      	cmp	r7, r6
 8000bd0:	d05c      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000bd2:	0027      	movs	r7, r4
 8000bd4:	e740      	b.n	8000a58 <__aeabi_dadd+0x2fc>
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	464c      	mov	r4, r9
 8000bda:	4640      	mov	r0, r8
 8000bdc:	1bd2      	subs	r2, r2, r7
 8000bde:	4094      	lsls	r4, r2
 8000be0:	40f8      	lsrs	r0, r7
 8000be2:	4304      	orrs	r4, r0
 8000be4:	4640      	mov	r0, r8
 8000be6:	4090      	lsls	r0, r2
 8000be8:	1e42      	subs	r2, r0, #1
 8000bea:	4190      	sbcs	r0, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	40fa      	lsrs	r2, r7
 8000bf0:	4304      	orrs	r4, r0
 8000bf2:	1889      	adds	r1, r1, r2
 8000bf4:	e6ee      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000bf6:	4c87      	ldr	r4, [pc, #540]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bf8:	42a2      	cmp	r2, r4
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x4a2>
 8000bfc:	e6f9      	b.n	80009f2 <__aeabi_dadd+0x296>
 8000bfe:	1818      	adds	r0, r3, r0
 8000c00:	4298      	cmp	r0, r3
 8000c02:	419b      	sbcs	r3, r3
 8000c04:	4449      	add	r1, r9
 8000c06:	425b      	negs	r3, r3
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	07dc      	lsls	r4, r3, #31
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	469a      	mov	sl, r3
 8000c12:	0016      	movs	r6, r2
 8000c14:	4304      	orrs	r4, r0
 8000c16:	e6c6      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	1ad4      	subs	r4, r2, r3
 8000c1c:	45a0      	cmp	r8, r4
 8000c1e:	4180      	sbcs	r0, r0
 8000c20:	464b      	mov	r3, r9
 8000c22:	4240      	negs	r0, r0
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	1a0b      	subs	r3, r1, r0
 8000c28:	469a      	mov	sl, r3
 8000c2a:	4665      	mov	r5, ip
 8000c2c:	e5ea      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000c2e:	464b      	mov	r3, r9
 8000c30:	464a      	mov	r2, r9
 8000c32:	08c0      	lsrs	r0, r0, #3
 8000c34:	075b      	lsls	r3, r3, #29
 8000c36:	4665      	mov	r5, ip
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	08d1      	lsrs	r1, r2, #3
 8000c3c:	e6bd      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x4e8>
 8000c42:	e08e      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000c44:	464b      	mov	r3, r9
 8000c46:	4303      	orrs	r3, r0
 8000c48:	d117      	bne.n	8000c7a <__aeabi_dadd+0x51e>
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	0309      	lsls	r1, r1, #12
 8000c50:	e6da      	b.n	8000a08 <__aeabi_dadd+0x2ac>
 8000c52:	074a      	lsls	r2, r1, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c9      	lsrs	r1, r1, #3
 8000c5a:	e6d1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c5c:	1a1c      	subs	r4, r3, r0
 8000c5e:	464a      	mov	r2, r9
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	1a89      	subs	r1, r1, r2
 8000c66:	425b      	negs	r3, r3
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	469a      	mov	sl, r3
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	e5c1      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	e69f      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	08d8      	lsrs	r0, r3, #3
 8000c7e:	464b      	mov	r3, r9
 8000c80:	464a      	mov	r2, r9
 8000c82:	075b      	lsls	r3, r3, #29
 8000c84:	4665      	mov	r5, ip
 8000c86:	4303      	orrs	r3, r0
 8000c88:	08d1      	lsrs	r1, r2, #3
 8000c8a:	e6b9      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	08d8      	lsrs	r0, r3, #3
 8000c90:	464b      	mov	r3, r9
 8000c92:	464a      	mov	r2, r9
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4303      	orrs	r3, r0
 8000c98:	08d1      	lsrs	r1, r2, #3
 8000c9a:	e6b1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	1e63      	subs	r3, r4, #1
 8000ca2:	419c      	sbcs	r4, r3
 8000ca4:	e6eb      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000ca6:	003c      	movs	r4, r7
 8000ca8:	000d      	movs	r5, r1
 8000caa:	3c20      	subs	r4, #32
 8000cac:	40e5      	lsrs	r5, r4
 8000cae:	2f20      	cmp	r7, #32
 8000cb0:	d003      	beq.n	8000cba <__aeabi_dadd+0x55e>
 8000cb2:	2440      	movs	r4, #64	; 0x40
 8000cb4:	1be4      	subs	r4, r4, r7
 8000cb6:	40a1      	lsls	r1, r4
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	001c      	movs	r4, r3
 8000cbc:	1e63      	subs	r3, r4, #1
 8000cbe:	419c      	sbcs	r4, r3
 8000cc0:	432c      	orrs	r4, r5
 8000cc2:	e770      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d0e1      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	4302      	orrs	r2, r0
 8000ccc:	d0c1      	beq.n	8000c52 <__aeabi_dadd+0x4f6>
 8000cce:	074a      	lsls	r2, r1, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	0312      	lsls	r2, r2, #12
 8000cda:	4211      	tst	r1, r2
 8000cdc:	d008      	beq.n	8000cf0 <__aeabi_dadd+0x594>
 8000cde:	4648      	mov	r0, r9
 8000ce0:	08c4      	lsrs	r4, r0, #3
 8000ce2:	4214      	tst	r4, r2
 8000ce4:	d104      	bne.n	8000cf0 <__aeabi_dadd+0x594>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	0021      	movs	r1, r4
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	0742      	lsls	r2, r0, #29
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	0f5a      	lsrs	r2, r3, #29
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	0752      	lsls	r2, r2, #29
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	e681      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	4303      	orrs	r3, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x5a8>
 8000d02:	e714      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	075b      	lsls	r3, r3, #29
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	4303      	orrs	r3, r0
 8000d10:	08d1      	lsrs	r1, r2, #3
 8000d12:	e655      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d14:	1ac4      	subs	r4, r0, r3
 8000d16:	45a0      	cmp	r8, r4
 8000d18:	4180      	sbcs	r0, r0
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	4240      	negs	r0, r0
 8000d1e:	1a59      	subs	r1, r3, r1
 8000d20:	1a0b      	subs	r3, r1, r0
 8000d22:	469a      	mov	sl, r3
 8000d24:	4665      	mov	r5, ip
 8000d26:	2601      	movs	r6, #1
 8000d28:	e564      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000d2a:	1a1c      	subs	r4, r3, r0
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	4180      	sbcs	r0, r0
 8000d32:	1a8a      	subs	r2, r1, r2
 8000d34:	4240      	negs	r0, r0
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	4692      	mov	sl, r2
 8000d3a:	0212      	lsls	r2, r2, #8
 8000d3c:	d549      	bpl.n	8000dd2 <__aeabi_dadd+0x676>
 8000d3e:	4642      	mov	r2, r8
 8000d40:	1ad4      	subs	r4, r2, r3
 8000d42:	45a0      	cmp	r8, r4
 8000d44:	4180      	sbcs	r0, r0
 8000d46:	464b      	mov	r3, r9
 8000d48:	4240      	negs	r0, r0
 8000d4a:	1a59      	subs	r1, r3, r1
 8000d4c:	1a0b      	subs	r3, r1, r0
 8000d4e:	469a      	mov	sl, r3
 8000d50:	4665      	mov	r5, ip
 8000d52:	e57f      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000d54:	464b      	mov	r3, r9
 8000d56:	464a      	mov	r2, r9
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	075b      	lsls	r3, r3, #29
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	08d1      	lsrs	r1, r2, #3
 8000d60:	e62b      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000d62:	464a      	mov	r2, r9
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	4302      	orrs	r2, r0
 8000d68:	d138      	bne.n	8000ddc <__aeabi_dadd+0x680>
 8000d6a:	074a      	lsls	r2, r1, #29
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	08c9      	lsrs	r1, r1, #3
 8000d70:	e646      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000d72:	464b      	mov	r3, r9
 8000d74:	464a      	mov	r2, r9
 8000d76:	08c0      	lsrs	r0, r0, #3
 8000d78:	075b      	lsls	r3, r3, #29
 8000d7a:	4303      	orrs	r3, r0
 8000d7c:	08d1      	lsrs	r1, r2, #3
 8000d7e:	e61f      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d80:	181c      	adds	r4, r3, r0
 8000d82:	429c      	cmp	r4, r3
 8000d84:	419b      	sbcs	r3, r3
 8000d86:	4449      	add	r1, r9
 8000d88:	468a      	mov	sl, r1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	449a      	add	sl, r3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	d400      	bmi.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e607      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d96:	4652      	mov	r2, sl
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4692      	mov	sl, r2
 8000da0:	e601      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000da2:	003c      	movs	r4, r7
 8000da4:	000e      	movs	r6, r1
 8000da6:	3c20      	subs	r4, #32
 8000da8:	40e6      	lsrs	r6, r4
 8000daa:	2f20      	cmp	r7, #32
 8000dac:	d003      	beq.n	8000db6 <__aeabi_dadd+0x65a>
 8000dae:	2440      	movs	r4, #64	; 0x40
 8000db0:	1be4      	subs	r4, r4, r7
 8000db2:	40a1      	lsls	r1, r4
 8000db4:	430b      	orrs	r3, r1
 8000db6:	001c      	movs	r4, r3
 8000db8:	1e63      	subs	r3, r4, #1
 8000dba:	419c      	sbcs	r4, r3
 8000dbc:	4334      	orrs	r4, r6
 8000dbe:	e65e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000dc0:	4443      	add	r3, r8
 8000dc2:	4283      	cmp	r3, r0
 8000dc4:	4180      	sbcs	r0, r0
 8000dc6:	4449      	add	r1, r9
 8000dc8:	468a      	mov	sl, r1
 8000dca:	4240      	negs	r0, r0
 8000dcc:	001c      	movs	r4, r3
 8000dce:	4482      	add	sl, r0
 8000dd0:	e6bc      	b.n	8000b4c <__aeabi_dadd+0x3f0>
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	4323      	orrs	r3, r4
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x67e>
 8000dd8:	e6a9      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000dda:	e5e4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000ddc:	074a      	lsls	r2, r1, #29
 8000dde:	4313      	orrs	r3, r2
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	08c9      	lsrs	r1, r1, #3
 8000de4:	0312      	lsls	r2, r2, #12
 8000de6:	4211      	tst	r1, r2
 8000de8:	d009      	beq.n	8000dfe <__aeabi_dadd+0x6a2>
 8000dea:	4648      	mov	r0, r9
 8000dec:	08c4      	lsrs	r4, r0, #3
 8000dee:	4214      	tst	r4, r2
 8000df0:	d105      	bne.n	8000dfe <__aeabi_dadd+0x6a2>
 8000df2:	4643      	mov	r3, r8
 8000df4:	4665      	mov	r5, ip
 8000df6:	0021      	movs	r1, r4
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	0742      	lsls	r2, r0, #29
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	0f5a      	lsrs	r2, r3, #29
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	08db      	lsrs	r3, r3, #3
 8000e04:	0752      	lsls	r2, r2, #29
 8000e06:	4313      	orrs	r3, r2
 8000e08:	e5fa      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4a01      	ldr	r2, [pc, #4]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000e0e:	001c      	movs	r4, r3
 8000e10:	e540      	b.n	8000894 <__aeabi_dadd+0x138>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007ff 	.word	0x000007ff
 8000e18:	ff7fffff 	.word	0xff7fffff

08000e1c <__aeabi_ddiv>:
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	4657      	mov	r7, sl
 8000e20:	464e      	mov	r6, r9
 8000e22:	4645      	mov	r5, r8
 8000e24:	46de      	mov	lr, fp
 8000e26:	b5e0      	push	{r5, r6, r7, lr}
 8000e28:	030c      	lsls	r4, r1, #12
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	004b      	lsls	r3, r1, #1
 8000e2e:	4681      	mov	r9, r0
 8000e30:	4692      	mov	sl, r2
 8000e32:	0005      	movs	r5, r0
 8000e34:	b085      	sub	sp, #20
 8000e36:	0b24      	lsrs	r4, r4, #12
 8000e38:	0d5b      	lsrs	r3, r3, #21
 8000e3a:	0fce      	lsrs	r6, r1, #31
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x26>
 8000e40:	e152      	b.n	80010e8 <__aeabi_ddiv+0x2cc>
 8000e42:	4ad2      	ldr	r2, [pc, #840]	; (800118c <__aeabi_ddiv+0x370>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0x2e>
 8000e48:	e16e      	b.n	8001128 <__aeabi_ddiv+0x30c>
 8000e4a:	0f42      	lsrs	r2, r0, #29
 8000e4c:	00e4      	lsls	r4, r4, #3
 8000e4e:	4314      	orrs	r4, r2
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	4322      	orrs	r2, r4
 8000e56:	4690      	mov	r8, r2
 8000e58:	4acd      	ldr	r2, [pc, #820]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e5a:	00c5      	lsls	r5, r0, #3
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	449b      	add	fp, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	4699      	mov	r9, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	033c      	lsls	r4, r7, #12
 8000e68:	007b      	lsls	r3, r7, #1
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	0b24      	lsrs	r4, r4, #12
 8000e6e:	0d5b      	lsrs	r3, r3, #21
 8000e70:	0fff      	lsrs	r7, r7, #31
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x5c>
 8000e76:	e11a      	b.n	80010ae <__aeabi_ddiv+0x292>
 8000e78:	4ac4      	ldr	r2, [pc, #784]	; (800118c <__aeabi_ddiv+0x370>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x64>
 8000e7e:	e15e      	b.n	800113e <__aeabi_ddiv+0x322>
 8000e80:	0f42      	lsrs	r2, r0, #29
 8000e82:	00e4      	lsls	r4, r4, #3
 8000e84:	4322      	orrs	r2, r4
 8000e86:	2480      	movs	r4, #128	; 0x80
 8000e88:	0424      	lsls	r4, r4, #16
 8000e8a:	4314      	orrs	r4, r2
 8000e8c:	4ac0      	ldr	r2, [pc, #768]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e8e:	00c1      	lsls	r1, r0, #3
 8000e90:	4694      	mov	ip, r2
 8000e92:	465a      	mov	r2, fp
 8000e94:	4463      	add	r3, ip
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	469b      	mov	fp, r3
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	407b      	eors	r3, r7
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d827      	bhi.n	8000ef8 <__aeabi_ddiv+0xdc>
 8000ea8:	4aba      	ldr	r2, [pc, #744]	; (8001194 <__aeabi_ddiv+0x378>)
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	469f      	mov	pc, r3
 8000eb0:	46b2      	mov	sl, r6
 8000eb2:	9b00      	ldr	r3, [sp, #0]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d016      	beq.n	8000ee6 <__aeabi_ddiv+0xca>
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0xa2>
 8000ebc:	e287      	b.n	80013ce <__aeabi_ddiv+0x5b2>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_ddiv+0xa8>
 8000ec2:	e0d5      	b.n	8001070 <__aeabi_ddiv+0x254>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2500      	movs	r5, #0
 8000eca:	051b      	lsls	r3, r3, #20
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	4652      	mov	r2, sl
 8000ed0:	07d2      	lsls	r2, r2, #31
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	b005      	add	sp, #20
 8000eda:	bcf0      	pop	{r4, r5, r6, r7}
 8000edc:	46bb      	mov	fp, r7
 8000ede:	46b2      	mov	sl, r6
 8000ee0:	46a9      	mov	r9, r5
 8000ee2:	46a0      	mov	r8, r4
 8000ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2500      	movs	r5, #0
 8000eea:	4ba8      	ldr	r3, [pc, #672]	; (800118c <__aeabi_ddiv+0x370>)
 8000eec:	e7ed      	b.n	8000eca <__aeabi_ddiv+0xae>
 8000eee:	46ba      	mov	sl, r7
 8000ef0:	46a0      	mov	r8, r4
 8000ef2:	000d      	movs	r5, r1
 8000ef4:	9000      	str	r0, [sp, #0]
 8000ef6:	e7dc      	b.n	8000eb2 <__aeabi_ddiv+0x96>
 8000ef8:	4544      	cmp	r4, r8
 8000efa:	d200      	bcs.n	8000efe <__aeabi_ddiv+0xe2>
 8000efc:	e1c4      	b.n	8001288 <__aeabi_ddiv+0x46c>
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0xe6>
 8000f00:	e1bf      	b.n	8001282 <__aeabi_ddiv+0x466>
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	469c      	mov	ip, r3
 8000f08:	002e      	movs	r6, r5
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	44e3      	add	fp, ip
 8000f10:	0223      	lsls	r3, r4, #8
 8000f12:	0e0c      	lsrs	r4, r1, #24
 8000f14:	431c      	orrs	r4, r3
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	4699      	mov	r9, r3
 8000f1a:	0423      	lsls	r3, r4, #16
 8000f1c:	020a      	lsls	r2, r1, #8
 8000f1e:	0c1f      	lsrs	r7, r3, #16
 8000f20:	4649      	mov	r1, r9
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	9701      	str	r7, [sp, #4]
 8000f26:	f7ff f98f 	bl	8000248 <__aeabi_uidivmod>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	437a      	muls	r2, r7
 8000f2e:	040b      	lsls	r3, r1, #16
 8000f30:	0c31      	lsrs	r1, r6, #16
 8000f32:	4680      	mov	r8, r0
 8000f34:	4319      	orrs	r1, r3
 8000f36:	428a      	cmp	r2, r1
 8000f38:	d907      	bls.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	469c      	mov	ip, r3
 8000f40:	1909      	adds	r1, r1, r4
 8000f42:	44e0      	add	r8, ip
 8000f44:	428c      	cmp	r4, r1
 8000f46:	d800      	bhi.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f48:	e201      	b.n	800134e <__aeabi_ddiv+0x532>
 8000f4a:	1a88      	subs	r0, r1, r2
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	f7ff f97b 	bl	8000248 <__aeabi_uidivmod>
 8000f52:	9a01      	ldr	r2, [sp, #4]
 8000f54:	0436      	lsls	r6, r6, #16
 8000f56:	4342      	muls	r2, r0
 8000f58:	0409      	lsls	r1, r1, #16
 8000f5a:	0c36      	lsrs	r6, r6, #16
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	430e      	orrs	r6, r1
 8000f60:	42b2      	cmp	r2, r6
 8000f62:	d904      	bls.n	8000f6e <__aeabi_ddiv+0x152>
 8000f64:	1936      	adds	r6, r6, r4
 8000f66:	3b01      	subs	r3, #1
 8000f68:	42b4      	cmp	r4, r6
 8000f6a:	d800      	bhi.n	8000f6e <__aeabi_ddiv+0x152>
 8000f6c:	e1e9      	b.n	8001342 <__aeabi_ddiv+0x526>
 8000f6e:	1ab0      	subs	r0, r6, r2
 8000f70:	4642      	mov	r2, r8
 8000f72:	9e00      	ldr	r6, [sp, #0]
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	431a      	orrs	r2, r3
 8000f78:	0c33      	lsrs	r3, r6, #16
 8000f7a:	001f      	movs	r7, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	4690      	mov	r8, r2
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	0413      	lsls	r3, r2, #16
 8000f84:	0432      	lsls	r2, r6, #16
 8000f86:	0c16      	lsrs	r6, r2, #16
 8000f88:	0032      	movs	r2, r6
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	435a      	muls	r2, r3
 8000f8e:	9603      	str	r6, [sp, #12]
 8000f90:	437b      	muls	r3, r7
 8000f92:	434e      	muls	r6, r1
 8000f94:	4379      	muls	r1, r7
 8000f96:	0c17      	lsrs	r7, r2, #16
 8000f98:	46bc      	mov	ip, r7
 8000f9a:	199b      	adds	r3, r3, r6
 8000f9c:	4463      	add	r3, ip
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	d903      	bls.n	8000faa <__aeabi_ddiv+0x18e>
 8000fa2:	2680      	movs	r6, #128	; 0x80
 8000fa4:	0276      	lsls	r6, r6, #9
 8000fa6:	46b4      	mov	ip, r6
 8000fa8:	4461      	add	r1, ip
 8000faa:	0c1e      	lsrs	r6, r3, #16
 8000fac:	1871      	adds	r1, r6, r1
 8000fae:	0416      	lsls	r6, r2, #16
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	0c36      	lsrs	r6, r6, #16
 8000fb4:	199e      	adds	r6, r3, r6
 8000fb6:	4288      	cmp	r0, r1
 8000fb8:	d302      	bcc.n	8000fc0 <__aeabi_ddiv+0x1a4>
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fbc:	42b5      	cmp	r5, r6
 8000fbe:	d210      	bcs.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	9b00      	ldr	r3, [sp, #0]
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	4465      	add	r5, ip
 8000fca:	001f      	movs	r7, r3
 8000fcc:	429d      	cmp	r5, r3
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	191b      	adds	r3, r3, r4
 8000fd4:	18c0      	adds	r0, r0, r3
 8000fd6:	4284      	cmp	r4, r0
 8000fd8:	d200      	bcs.n	8000fdc <__aeabi_ddiv+0x1c0>
 8000fda:	e19e      	b.n	800131a <__aeabi_ddiv+0x4fe>
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8000fde:	e199      	b.n	8001314 <__aeabi_ddiv+0x4f8>
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	1bae      	subs	r6, r5, r6
 8000fe4:	42b5      	cmp	r5, r6
 8000fe6:	41ad      	sbcs	r5, r5
 8000fe8:	1a40      	subs	r0, r0, r1
 8000fea:	426d      	negs	r5, r5
 8000fec:	1b40      	subs	r0, r0, r5
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0x1d8>
 8000ff2:	e1d2      	b.n	800139a <__aeabi_ddiv+0x57e>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f927 	bl	8000248 <__aeabi_uidivmod>
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	040b      	lsls	r3, r1, #16
 8000ffe:	4342      	muls	r2, r0
 8001000:	0c31      	lsrs	r1, r6, #16
 8001002:	0005      	movs	r5, r0
 8001004:	4319      	orrs	r1, r3
 8001006:	428a      	cmp	r2, r1
 8001008:	d900      	bls.n	800100c <__aeabi_ddiv+0x1f0>
 800100a:	e16c      	b.n	80012e6 <__aeabi_ddiv+0x4ca>
 800100c:	1a88      	subs	r0, r1, r2
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff f91a 	bl	8000248 <__aeabi_uidivmod>
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	0436      	lsls	r6, r6, #16
 8001018:	4342      	muls	r2, r0
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	0c36      	lsrs	r6, r6, #16
 800101e:	0003      	movs	r3, r0
 8001020:	430e      	orrs	r6, r1
 8001022:	42b2      	cmp	r2, r6
 8001024:	d900      	bls.n	8001028 <__aeabi_ddiv+0x20c>
 8001026:	e153      	b.n	80012d0 <__aeabi_ddiv+0x4b4>
 8001028:	9803      	ldr	r0, [sp, #12]
 800102a:	1ab6      	subs	r6, r6, r2
 800102c:	0002      	movs	r2, r0
 800102e:	042d      	lsls	r5, r5, #16
 8001030:	431d      	orrs	r5, r3
 8001032:	9f02      	ldr	r7, [sp, #8]
 8001034:	042b      	lsls	r3, r5, #16
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	435a      	muls	r2, r3
 800103a:	437b      	muls	r3, r7
 800103c:	469c      	mov	ip, r3
 800103e:	0c29      	lsrs	r1, r5, #16
 8001040:	4348      	muls	r0, r1
 8001042:	0c13      	lsrs	r3, r2, #16
 8001044:	4484      	add	ip, r0
 8001046:	4463      	add	r3, ip
 8001048:	4379      	muls	r1, r7
 800104a:	4298      	cmp	r0, r3
 800104c:	d903      	bls.n	8001056 <__aeabi_ddiv+0x23a>
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	0240      	lsls	r0, r0, #9
 8001052:	4684      	mov	ip, r0
 8001054:	4461      	add	r1, ip
 8001056:	0c18      	lsrs	r0, r3, #16
 8001058:	0412      	lsls	r2, r2, #16
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	0c12      	lsrs	r2, r2, #16
 800105e:	1840      	adds	r0, r0, r1
 8001060:	189b      	adds	r3, r3, r2
 8001062:	4286      	cmp	r6, r0
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x24c>
 8001066:	e100      	b.n	800126a <__aeabi_ddiv+0x44e>
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x250>
 800106a:	e0fb      	b.n	8001264 <__aeabi_ddiv+0x448>
 800106c:	2301      	movs	r3, #1
 800106e:	431d      	orrs	r5, r3
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <__aeabi_ddiv+0x37c>)
 8001072:	445b      	add	r3, fp
 8001074:	2b00      	cmp	r3, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_ddiv+0x25e>
 8001078:	e0aa      	b.n	80011d0 <__aeabi_ddiv+0x3b4>
 800107a:	076a      	lsls	r2, r5, #29
 800107c:	d000      	beq.n	8001080 <__aeabi_ddiv+0x264>
 800107e:	e13d      	b.n	80012fc <__aeabi_ddiv+0x4e0>
 8001080:	08e9      	lsrs	r1, r5, #3
 8001082:	4642      	mov	r2, r8
 8001084:	01d2      	lsls	r2, r2, #7
 8001086:	d506      	bpl.n	8001096 <__aeabi_ddiv+0x27a>
 8001088:	4642      	mov	r2, r8
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <__aeabi_ddiv+0x380>)
 800108c:	401a      	ands	r2, r3
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	4690      	mov	r8, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	445b      	add	r3, fp
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <__aeabi_ddiv+0x384>)
 8001098:	4293      	cmp	r3, r2
 800109a:	dd00      	ble.n	800109e <__aeabi_ddiv+0x282>
 800109c:	e723      	b.n	8000ee6 <__aeabi_ddiv+0xca>
 800109e:	4642      	mov	r2, r8
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	0755      	lsls	r5, r2, #29
 80010a4:	0252      	lsls	r2, r2, #9
 80010a6:	430d      	orrs	r5, r1
 80010a8:	0b12      	lsrs	r2, r2, #12
 80010aa:	0d5b      	lsrs	r3, r3, #21
 80010ac:	e70d      	b.n	8000eca <__aeabi_ddiv+0xae>
 80010ae:	4651      	mov	r1, sl
 80010b0:	4321      	orrs	r1, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x29a>
 80010b4:	e07c      	b.n	80011b0 <__aeabi_ddiv+0x394>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_ddiv+0x2a0>
 80010ba:	e0fb      	b.n	80012b4 <__aeabi_ddiv+0x498>
 80010bc:	0020      	movs	r0, r4
 80010be:	f001 fa1b 	bl	80024f8 <__clzsi2>
 80010c2:	0002      	movs	r2, r0
 80010c4:	3a0b      	subs	r2, #11
 80010c6:	231d      	movs	r3, #29
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	4652      	mov	r2, sl
 80010cc:	0001      	movs	r1, r0
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	4653      	mov	r3, sl
 80010d2:	3908      	subs	r1, #8
 80010d4:	408b      	lsls	r3, r1
 80010d6:	408c      	lsls	r4, r1
 80010d8:	0019      	movs	r1, r3
 80010da:	4314      	orrs	r4, r2
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <__aeabi_ddiv+0x388>)
 80010de:	4458      	add	r0, fp
 80010e0:	469b      	mov	fp, r3
 80010e2:	4483      	add	fp, r0
 80010e4:	2000      	movs	r0, #0
 80010e6:	e6d9      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80010e8:	0003      	movs	r3, r0
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d044      	beq.n	800117a <__aeabi_ddiv+0x35e>
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x2da>
 80010f4:	e0cf      	b.n	8001296 <__aeabi_ddiv+0x47a>
 80010f6:	0020      	movs	r0, r4
 80010f8:	f001 f9fe 	bl	80024f8 <__clzsi2>
 80010fc:	0001      	movs	r1, r0
 80010fe:	0002      	movs	r2, r0
 8001100:	390b      	subs	r1, #11
 8001102:	231d      	movs	r3, #29
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	4649      	mov	r1, r9
 8001108:	0010      	movs	r0, r2
 800110a:	40d9      	lsrs	r1, r3
 800110c:	3808      	subs	r0, #8
 800110e:	4084      	lsls	r4, r0
 8001110:	000b      	movs	r3, r1
 8001112:	464d      	mov	r5, r9
 8001114:	4323      	orrs	r3, r4
 8001116:	4698      	mov	r8, r3
 8001118:	4085      	lsls	r5, r0
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <__aeabi_ddiv+0x38c>)
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	469b      	mov	fp, r3
 8001120:	2300      	movs	r3, #0
 8001122:	4699      	mov	r9, r3
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	e69e      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 8001128:	0002      	movs	r2, r0
 800112a:	4322      	orrs	r2, r4
 800112c:	4690      	mov	r8, r2
 800112e:	d11d      	bne.n	800116c <__aeabi_ddiv+0x350>
 8001130:	2208      	movs	r2, #8
 8001132:	469b      	mov	fp, r3
 8001134:	2302      	movs	r3, #2
 8001136:	2500      	movs	r5, #0
 8001138:	4691      	mov	r9, r2
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	e693      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800113e:	4651      	mov	r1, sl
 8001140:	4321      	orrs	r1, r4
 8001142:	d109      	bne.n	8001158 <__aeabi_ddiv+0x33c>
 8001144:	2302      	movs	r3, #2
 8001146:	464a      	mov	r2, r9
 8001148:	431a      	orrs	r2, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <__aeabi_ddiv+0x390>)
 800114c:	4691      	mov	r9, r2
 800114e:	469c      	mov	ip, r3
 8001150:	2400      	movs	r4, #0
 8001152:	2002      	movs	r0, #2
 8001154:	44e3      	add	fp, ip
 8001156:	e6a1      	b.n	8000e9c <__aeabi_ddiv+0x80>
 8001158:	2303      	movs	r3, #3
 800115a:	464a      	mov	r2, r9
 800115c:	431a      	orrs	r2, r3
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <__aeabi_ddiv+0x390>)
 8001160:	4691      	mov	r9, r2
 8001162:	469c      	mov	ip, r3
 8001164:	4651      	mov	r1, sl
 8001166:	2003      	movs	r0, #3
 8001168:	44e3      	add	fp, ip
 800116a:	e697      	b.n	8000e9c <__aeabi_ddiv+0x80>
 800116c:	220c      	movs	r2, #12
 800116e:	469b      	mov	fp, r3
 8001170:	2303      	movs	r3, #3
 8001172:	46a0      	mov	r8, r4
 8001174:	4691      	mov	r9, r2
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	e675      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800117a:	2304      	movs	r3, #4
 800117c:	4699      	mov	r9, r3
 800117e:	2300      	movs	r3, #0
 8001180:	469b      	mov	fp, r3
 8001182:	3301      	adds	r3, #1
 8001184:	2500      	movs	r5, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	e66d      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	fffffc01 	.word	0xfffffc01
 8001194:	0800b864 	.word	0x0800b864
 8001198:	000003ff 	.word	0x000003ff
 800119c:	feffffff 	.word	0xfeffffff
 80011a0:	000007fe 	.word	0x000007fe
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	fffffc0d 	.word	0xfffffc0d
 80011ac:	fffff801 	.word	0xfffff801
 80011b0:	464a      	mov	r2, r9
 80011b2:	2301      	movs	r3, #1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	4691      	mov	r9, r2
 80011b8:	2400      	movs	r4, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	e66e      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80011be:	2300      	movs	r3, #0
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	469a      	mov	sl, r3
 80011c4:	2500      	movs	r5, #0
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80011c8:	0312      	lsls	r2, r2, #12
 80011ca:	e67e      	b.n	8000eca <__aeabi_ddiv+0xae>
 80011cc:	2501      	movs	r5, #1
 80011ce:	426d      	negs	r5, r5
 80011d0:	2201      	movs	r2, #1
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	2a38      	cmp	r2, #56	; 0x38
 80011d6:	dd00      	ble.n	80011da <__aeabi_ddiv+0x3be>
 80011d8:	e674      	b.n	8000ec4 <__aeabi_ddiv+0xa8>
 80011da:	2a1f      	cmp	r2, #31
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_ddiv+0x3c4>
 80011de:	e0bd      	b.n	800135c <__aeabi_ddiv+0x540>
 80011e0:	211f      	movs	r1, #31
 80011e2:	4249      	negs	r1, r1
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	4641      	mov	r1, r8
 80011e8:	40d9      	lsrs	r1, r3
 80011ea:	000b      	movs	r3, r1
 80011ec:	2a20      	cmp	r2, #32
 80011ee:	d004      	beq.n	80011fa <__aeabi_ddiv+0x3de>
 80011f0:	4641      	mov	r1, r8
 80011f2:	4a7e      	ldr	r2, [pc, #504]	; (80013ec <__aeabi_ddiv+0x5d0>)
 80011f4:	445a      	add	r2, fp
 80011f6:	4091      	lsls	r1, r2
 80011f8:	430d      	orrs	r5, r1
 80011fa:	0029      	movs	r1, r5
 80011fc:	1e4a      	subs	r2, r1, #1
 80011fe:	4191      	sbcs	r1, r2
 8001200:	4319      	orrs	r1, r3
 8001202:	2307      	movs	r3, #7
 8001204:	001d      	movs	r5, r3
 8001206:	2200      	movs	r2, #0
 8001208:	400d      	ands	r5, r1
 800120a:	420b      	tst	r3, r1
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x3f4>
 800120e:	e0d0      	b.n	80013b2 <__aeabi_ddiv+0x596>
 8001210:	220f      	movs	r2, #15
 8001212:	2300      	movs	r3, #0
 8001214:	400a      	ands	r2, r1
 8001216:	2a04      	cmp	r2, #4
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x400>
 800121a:	e0c7      	b.n	80013ac <__aeabi_ddiv+0x590>
 800121c:	1d0a      	adds	r2, r1, #4
 800121e:	428a      	cmp	r2, r1
 8001220:	4189      	sbcs	r1, r1
 8001222:	4249      	negs	r1, r1
 8001224:	185b      	adds	r3, r3, r1
 8001226:	0011      	movs	r1, r2
 8001228:	021a      	lsls	r2, r3, #8
 800122a:	d400      	bmi.n	800122e <__aeabi_ddiv+0x412>
 800122c:	e0be      	b.n	80013ac <__aeabi_ddiv+0x590>
 800122e:	2301      	movs	r3, #1
 8001230:	2200      	movs	r2, #0
 8001232:	2500      	movs	r5, #0
 8001234:	e649      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	4643      	mov	r3, r8
 800123a:	0312      	lsls	r2, r2, #12
 800123c:	4213      	tst	r3, r2
 800123e:	d008      	beq.n	8001252 <__aeabi_ddiv+0x436>
 8001240:	4214      	tst	r4, r2
 8001242:	d106      	bne.n	8001252 <__aeabi_ddiv+0x436>
 8001244:	4322      	orrs	r2, r4
 8001246:	0312      	lsls	r2, r2, #12
 8001248:	46ba      	mov	sl, r7
 800124a:	000d      	movs	r5, r1
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	e63b      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	4643      	mov	r3, r8
 8001256:	0312      	lsls	r2, r2, #12
 8001258:	431a      	orrs	r2, r3
 800125a:	0312      	lsls	r2, r2, #12
 800125c:	46b2      	mov	sl, r6
 800125e:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 8001260:	0b12      	lsrs	r2, r2, #12
 8001262:	e632      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001264:	2b00      	cmp	r3, #0
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x44e>
 8001268:	e702      	b.n	8001070 <__aeabi_ddiv+0x254>
 800126a:	19a6      	adds	r6, r4, r6
 800126c:	1e6a      	subs	r2, r5, #1
 800126e:	42a6      	cmp	r6, r4
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x458>
 8001272:	e089      	b.n	8001388 <__aeabi_ddiv+0x56c>
 8001274:	4286      	cmp	r6, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x45e>
 8001278:	e09f      	b.n	80013ba <__aeabi_ddiv+0x59e>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x462>
 800127c:	e0af      	b.n	80013de <__aeabi_ddiv+0x5c2>
 800127e:	0015      	movs	r5, r2
 8001280:	e6f4      	b.n	800106c <__aeabi_ddiv+0x250>
 8001282:	42a9      	cmp	r1, r5
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x46c>
 8001286:	e63c      	b.n	8000f02 <__aeabi_ddiv+0xe6>
 8001288:	4643      	mov	r3, r8
 800128a:	07de      	lsls	r6, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	086b      	lsrs	r3, r5, #1
 8001290:	431e      	orrs	r6, r3
 8001292:	07ed      	lsls	r5, r5, #31
 8001294:	e63c      	b.n	8000f10 <__aeabi_ddiv+0xf4>
 8001296:	f001 f92f 	bl	80024f8 <__clzsi2>
 800129a:	0001      	movs	r1, r0
 800129c:	0002      	movs	r2, r0
 800129e:	3115      	adds	r1, #21
 80012a0:	3220      	adds	r2, #32
 80012a2:	291c      	cmp	r1, #28
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_ddiv+0x48c>
 80012a6:	e72c      	b.n	8001102 <__aeabi_ddiv+0x2e6>
 80012a8:	464b      	mov	r3, r9
 80012aa:	3808      	subs	r0, #8
 80012ac:	4083      	lsls	r3, r0
 80012ae:	2500      	movs	r5, #0
 80012b0:	4698      	mov	r8, r3
 80012b2:	e732      	b.n	800111a <__aeabi_ddiv+0x2fe>
 80012b4:	f001 f920 	bl	80024f8 <__clzsi2>
 80012b8:	0003      	movs	r3, r0
 80012ba:	001a      	movs	r2, r3
 80012bc:	3215      	adds	r2, #21
 80012be:	3020      	adds	r0, #32
 80012c0:	2a1c      	cmp	r2, #28
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x4aa>
 80012c4:	e6ff      	b.n	80010c6 <__aeabi_ddiv+0x2aa>
 80012c6:	4654      	mov	r4, sl
 80012c8:	3b08      	subs	r3, #8
 80012ca:	2100      	movs	r1, #0
 80012cc:	409c      	lsls	r4, r3
 80012ce:	e705      	b.n	80010dc <__aeabi_ddiv+0x2c0>
 80012d0:	1936      	adds	r6, r6, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	42b4      	cmp	r4, r6
 80012d6:	d900      	bls.n	80012da <__aeabi_ddiv+0x4be>
 80012d8:	e6a6      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012da:	42b2      	cmp	r2, r6
 80012dc:	d800      	bhi.n	80012e0 <__aeabi_ddiv+0x4c4>
 80012de:	e6a3      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e0:	1e83      	subs	r3, r0, #2
 80012e2:	1936      	adds	r6, r6, r4
 80012e4:	e6a0      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e6:	1909      	adds	r1, r1, r4
 80012e8:	3d01      	subs	r5, #1
 80012ea:	428c      	cmp	r4, r1
 80012ec:	d900      	bls.n	80012f0 <__aeabi_ddiv+0x4d4>
 80012ee:	e68d      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f0:	428a      	cmp	r2, r1
 80012f2:	d800      	bhi.n	80012f6 <__aeabi_ddiv+0x4da>
 80012f4:	e68a      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f6:	1e85      	subs	r5, r0, #2
 80012f8:	1909      	adds	r1, r1, r4
 80012fa:	e687      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012fc:	220f      	movs	r2, #15
 80012fe:	402a      	ands	r2, r5
 8001300:	2a04      	cmp	r2, #4
 8001302:	d100      	bne.n	8001306 <__aeabi_ddiv+0x4ea>
 8001304:	e6bc      	b.n	8001080 <__aeabi_ddiv+0x264>
 8001306:	1d29      	adds	r1, r5, #4
 8001308:	42a9      	cmp	r1, r5
 800130a:	41ad      	sbcs	r5, r5
 800130c:	426d      	negs	r5, r5
 800130e:	08c9      	lsrs	r1, r1, #3
 8001310:	44a8      	add	r8, r5
 8001312:	e6b6      	b.n	8001082 <__aeabi_ddiv+0x266>
 8001314:	42af      	cmp	r7, r5
 8001316:	d900      	bls.n	800131a <__aeabi_ddiv+0x4fe>
 8001318:	e662      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 800131a:	4281      	cmp	r1, r0
 800131c:	d804      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 800131e:	d000      	beq.n	8001322 <__aeabi_ddiv+0x506>
 8001320:	e65e      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001322:	42ae      	cmp	r6, r5
 8001324:	d800      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 8001326:	e65b      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001328:	2302      	movs	r3, #2
 800132a:	425b      	negs	r3, r3
 800132c:	469c      	mov	ip, r3
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	44e0      	add	r8, ip
 8001332:	469c      	mov	ip, r3
 8001334:	4465      	add	r5, ip
 8001336:	429d      	cmp	r5, r3
 8001338:	419b      	sbcs	r3, r3
 800133a:	425b      	negs	r3, r3
 800133c:	191b      	adds	r3, r3, r4
 800133e:	18c0      	adds	r0, r0, r3
 8001340:	e64f      	b.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8001342:	42b2      	cmp	r2, r6
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x52c>
 8001346:	e612      	b.n	8000f6e <__aeabi_ddiv+0x152>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	1936      	adds	r6, r6, r4
 800134c:	e60f      	b.n	8000f6e <__aeabi_ddiv+0x152>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x538>
 8001352:	e5fa      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 8001354:	1e83      	subs	r3, r0, #2
 8001356:	4698      	mov	r8, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e5f6      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <__aeabi_ddiv+0x5d4>)
 800135e:	0028      	movs	r0, r5
 8001360:	445b      	add	r3, fp
 8001362:	4641      	mov	r1, r8
 8001364:	409d      	lsls	r5, r3
 8001366:	4099      	lsls	r1, r3
 8001368:	40d0      	lsrs	r0, r2
 800136a:	1e6b      	subs	r3, r5, #1
 800136c:	419d      	sbcs	r5, r3
 800136e:	4643      	mov	r3, r8
 8001370:	4301      	orrs	r1, r0
 8001372:	4329      	orrs	r1, r5
 8001374:	40d3      	lsrs	r3, r2
 8001376:	074a      	lsls	r2, r1, #29
 8001378:	d100      	bne.n	800137c <__aeabi_ddiv+0x560>
 800137a:	e755      	b.n	8001228 <__aeabi_ddiv+0x40c>
 800137c:	220f      	movs	r2, #15
 800137e:	400a      	ands	r2, r1
 8001380:	2a04      	cmp	r2, #4
 8001382:	d000      	beq.n	8001386 <__aeabi_ddiv+0x56a>
 8001384:	e74a      	b.n	800121c <__aeabi_ddiv+0x400>
 8001386:	e74f      	b.n	8001228 <__aeabi_ddiv+0x40c>
 8001388:	0015      	movs	r5, r2
 800138a:	4286      	cmp	r6, r0
 800138c:	d000      	beq.n	8001390 <__aeabi_ddiv+0x574>
 800138e:	e66d      	b.n	800106c <__aeabi_ddiv+0x250>
 8001390:	9a00      	ldr	r2, [sp, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d000      	beq.n	8001398 <__aeabi_ddiv+0x57c>
 8001396:	e669      	b.n	800106c <__aeabi_ddiv+0x250>
 8001398:	e66a      	b.n	8001070 <__aeabi_ddiv+0x254>
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <__aeabi_ddiv+0x5d8>)
 800139c:	445b      	add	r3, fp
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_ddiv+0x588>
 80013a2:	e713      	b.n	80011cc <__aeabi_ddiv+0x3b0>
 80013a4:	2501      	movs	r5, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	44a8      	add	r8, r5
 80013aa:	e66a      	b.n	8001082 <__aeabi_ddiv+0x266>
 80013ac:	075d      	lsls	r5, r3, #29
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	0b1a      	lsrs	r2, r3, #12
 80013b2:	08c9      	lsrs	r1, r1, #3
 80013b4:	2300      	movs	r3, #0
 80013b6:	430d      	orrs	r5, r1
 80013b8:	e587      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013ba:	9900      	ldr	r1, [sp, #0]
 80013bc:	3d02      	subs	r5, #2
 80013be:	004a      	lsls	r2, r1, #1
 80013c0:	428a      	cmp	r2, r1
 80013c2:	41bf      	sbcs	r7, r7
 80013c4:	427f      	negs	r7, r7
 80013c6:	193f      	adds	r7, r7, r4
 80013c8:	19f6      	adds	r6, r6, r7
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	e7dd      	b.n	800138a <__aeabi_ddiv+0x56e>
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	4643      	mov	r3, r8
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	431a      	orrs	r2, r3
 80013d6:	0312      	lsls	r2, r2, #12
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80013da:	0b12      	lsrs	r2, r2, #12
 80013dc:	e575      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013de:	9900      	ldr	r1, [sp, #0]
 80013e0:	4299      	cmp	r1, r3
 80013e2:	d3ea      	bcc.n	80013ba <__aeabi_ddiv+0x59e>
 80013e4:	0015      	movs	r5, r2
 80013e6:	e7d3      	b.n	8001390 <__aeabi_ddiv+0x574>
 80013e8:	000007ff 	.word	0x000007ff
 80013ec:	0000043e 	.word	0x0000043e
 80013f0:	0000041e 	.word	0x0000041e
 80013f4:	000003ff 	.word	0x000003ff

080013f8 <__eqdf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	46de      	mov	lr, fp
 8001400:	4657      	mov	r7, sl
 8001402:	4690      	mov	r8, r2
 8001404:	b5e0      	push	{r5, r6, r7, lr}
 8001406:	0017      	movs	r7, r2
 8001408:	031a      	lsls	r2, r3, #12
 800140a:	0b12      	lsrs	r2, r2, #12
 800140c:	0005      	movs	r5, r0
 800140e:	4684      	mov	ip, r0
 8001410:	4819      	ldr	r0, [pc, #100]	; (8001478 <__eqdf2+0x80>)
 8001412:	030e      	lsls	r6, r1, #12
 8001414:	004c      	lsls	r4, r1, #1
 8001416:	4691      	mov	r9, r2
 8001418:	005a      	lsls	r2, r3, #1
 800141a:	0fdb      	lsrs	r3, r3, #31
 800141c:	469b      	mov	fp, r3
 800141e:	0b36      	lsrs	r6, r6, #12
 8001420:	0d64      	lsrs	r4, r4, #21
 8001422:	0fc9      	lsrs	r1, r1, #31
 8001424:	0d52      	lsrs	r2, r2, #21
 8001426:	4284      	cmp	r4, r0
 8001428:	d019      	beq.n	800145e <__eqdf2+0x66>
 800142a:	4282      	cmp	r2, r0
 800142c:	d010      	beq.n	8001450 <__eqdf2+0x58>
 800142e:	2001      	movs	r0, #1
 8001430:	4294      	cmp	r4, r2
 8001432:	d10e      	bne.n	8001452 <__eqdf2+0x5a>
 8001434:	454e      	cmp	r6, r9
 8001436:	d10c      	bne.n	8001452 <__eqdf2+0x5a>
 8001438:	2001      	movs	r0, #1
 800143a:	45c4      	cmp	ip, r8
 800143c:	d109      	bne.n	8001452 <__eqdf2+0x5a>
 800143e:	4559      	cmp	r1, fp
 8001440:	d017      	beq.n	8001472 <__eqdf2+0x7a>
 8001442:	2c00      	cmp	r4, #0
 8001444:	d105      	bne.n	8001452 <__eqdf2+0x5a>
 8001446:	0030      	movs	r0, r6
 8001448:	4328      	orrs	r0, r5
 800144a:	1e43      	subs	r3, r0, #1
 800144c:	4198      	sbcs	r0, r3
 800144e:	e000      	b.n	8001452 <__eqdf2+0x5a>
 8001450:	2001      	movs	r0, #1
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	0033      	movs	r3, r6
 8001460:	2001      	movs	r0, #1
 8001462:	432b      	orrs	r3, r5
 8001464:	d1f5      	bne.n	8001452 <__eqdf2+0x5a>
 8001466:	42a2      	cmp	r2, r4
 8001468:	d1f3      	bne.n	8001452 <__eqdf2+0x5a>
 800146a:	464b      	mov	r3, r9
 800146c:	433b      	orrs	r3, r7
 800146e:	d1f0      	bne.n	8001452 <__eqdf2+0x5a>
 8001470:	e7e2      	b.n	8001438 <__eqdf2+0x40>
 8001472:	2000      	movs	r0, #0
 8001474:	e7ed      	b.n	8001452 <__eqdf2+0x5a>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4647      	mov	r7, r8
 8001480:	46ce      	mov	lr, r9
 8001482:	0004      	movs	r4, r0
 8001484:	0018      	movs	r0, r3
 8001486:	0016      	movs	r6, r2
 8001488:	031b      	lsls	r3, r3, #12
 800148a:	0b1b      	lsrs	r3, r3, #12
 800148c:	4d2d      	ldr	r5, [pc, #180]	; (8001544 <__gedf2+0xc8>)
 800148e:	004a      	lsls	r2, r1, #1
 8001490:	4699      	mov	r9, r3
 8001492:	b580      	push	{r7, lr}
 8001494:	0043      	lsls	r3, r0, #1
 8001496:	030f      	lsls	r7, r1, #12
 8001498:	46a4      	mov	ip, r4
 800149a:	46b0      	mov	r8, r6
 800149c:	0b3f      	lsrs	r7, r7, #12
 800149e:	0d52      	lsrs	r2, r2, #21
 80014a0:	0fc9      	lsrs	r1, r1, #31
 80014a2:	0d5b      	lsrs	r3, r3, #21
 80014a4:	0fc0      	lsrs	r0, r0, #31
 80014a6:	42aa      	cmp	r2, r5
 80014a8:	d021      	beq.n	80014ee <__gedf2+0x72>
 80014aa:	42ab      	cmp	r3, r5
 80014ac:	d013      	beq.n	80014d6 <__gedf2+0x5a>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d122      	bne.n	80014f8 <__gedf2+0x7c>
 80014b2:	433c      	orrs	r4, r7
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <__gedf2+0x42>
 80014b8:	464d      	mov	r5, r9
 80014ba:	432e      	orrs	r6, r5
 80014bc:	d022      	beq.n	8001504 <__gedf2+0x88>
 80014be:	2c00      	cmp	r4, #0
 80014c0:	d010      	beq.n	80014e4 <__gedf2+0x68>
 80014c2:	4281      	cmp	r1, r0
 80014c4:	d022      	beq.n	800150c <__gedf2+0x90>
 80014c6:	2002      	movs	r0, #2
 80014c8:	3901      	subs	r1, #1
 80014ca:	4008      	ands	r0, r1
 80014cc:	3801      	subs	r0, #1
 80014ce:	bcc0      	pop	{r6, r7}
 80014d0:	46b9      	mov	r9, r7
 80014d2:	46b0      	mov	r8, r6
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d6:	464d      	mov	r5, r9
 80014d8:	432e      	orrs	r6, r5
 80014da:	d129      	bne.n	8001530 <__gedf2+0xb4>
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d1f0      	bne.n	80014c2 <__gedf2+0x46>
 80014e0:	433c      	orrs	r4, r7
 80014e2:	d1ee      	bne.n	80014c2 <__gedf2+0x46>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f2      	bne.n	80014ce <__gedf2+0x52>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7ef      	b.n	80014ce <__gedf2+0x52>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d11d      	bne.n	8001530 <__gedf2+0xb4>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d0ee      	beq.n	80014d6 <__gedf2+0x5a>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e2      	bne.n	80014c2 <__gedf2+0x46>
 80014fc:	464c      	mov	r4, r9
 80014fe:	4326      	orrs	r6, r4
 8001500:	d1df      	bne.n	80014c2 <__gedf2+0x46>
 8001502:	e7e0      	b.n	80014c6 <__gedf2+0x4a>
 8001504:	2000      	movs	r0, #0
 8001506:	2c00      	cmp	r4, #0
 8001508:	d0e1      	beq.n	80014ce <__gedf2+0x52>
 800150a:	e7dc      	b.n	80014c6 <__gedf2+0x4a>
 800150c:	429a      	cmp	r2, r3
 800150e:	dc0a      	bgt.n	8001526 <__gedf2+0xaa>
 8001510:	dbe8      	blt.n	80014e4 <__gedf2+0x68>
 8001512:	454f      	cmp	r7, r9
 8001514:	d8d7      	bhi.n	80014c6 <__gedf2+0x4a>
 8001516:	d00e      	beq.n	8001536 <__gedf2+0xba>
 8001518:	2000      	movs	r0, #0
 800151a:	454f      	cmp	r7, r9
 800151c:	d2d7      	bcs.n	80014ce <__gedf2+0x52>
 800151e:	2900      	cmp	r1, #0
 8001520:	d0e2      	beq.n	80014e8 <__gedf2+0x6c>
 8001522:	0008      	movs	r0, r1
 8001524:	e7d3      	b.n	80014ce <__gedf2+0x52>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7ce      	b.n	80014ce <__gedf2+0x52>
 8001530:	2002      	movs	r0, #2
 8001532:	4240      	negs	r0, r0
 8001534:	e7cb      	b.n	80014ce <__gedf2+0x52>
 8001536:	45c4      	cmp	ip, r8
 8001538:	d8c5      	bhi.n	80014c6 <__gedf2+0x4a>
 800153a:	2000      	movs	r0, #0
 800153c:	45c4      	cmp	ip, r8
 800153e:	d2c6      	bcs.n	80014ce <__gedf2+0x52>
 8001540:	e7ed      	b.n	800151e <__gedf2+0xa2>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff

08001548 <__ledf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	4647      	mov	r7, r8
 800154c:	46ce      	mov	lr, r9
 800154e:	0004      	movs	r4, r0
 8001550:	0018      	movs	r0, r3
 8001552:	0016      	movs	r6, r2
 8001554:	031b      	lsls	r3, r3, #12
 8001556:	0b1b      	lsrs	r3, r3, #12
 8001558:	4d2c      	ldr	r5, [pc, #176]	; (800160c <__ledf2+0xc4>)
 800155a:	004a      	lsls	r2, r1, #1
 800155c:	4699      	mov	r9, r3
 800155e:	b580      	push	{r7, lr}
 8001560:	0043      	lsls	r3, r0, #1
 8001562:	030f      	lsls	r7, r1, #12
 8001564:	46a4      	mov	ip, r4
 8001566:	46b0      	mov	r8, r6
 8001568:	0b3f      	lsrs	r7, r7, #12
 800156a:	0d52      	lsrs	r2, r2, #21
 800156c:	0fc9      	lsrs	r1, r1, #31
 800156e:	0d5b      	lsrs	r3, r3, #21
 8001570:	0fc0      	lsrs	r0, r0, #31
 8001572:	42aa      	cmp	r2, r5
 8001574:	d00d      	beq.n	8001592 <__ledf2+0x4a>
 8001576:	42ab      	cmp	r3, r5
 8001578:	d010      	beq.n	800159c <__ledf2+0x54>
 800157a:	2a00      	cmp	r2, #0
 800157c:	d127      	bne.n	80015ce <__ledf2+0x86>
 800157e:	433c      	orrs	r4, r7
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <__ledf2+0x60>
 8001584:	464d      	mov	r5, r9
 8001586:	432e      	orrs	r6, r5
 8001588:	d10e      	bne.n	80015a8 <__ledf2+0x60>
 800158a:	2000      	movs	r0, #0
 800158c:	2c00      	cmp	r4, #0
 800158e:	d015      	beq.n	80015bc <__ledf2+0x74>
 8001590:	e00e      	b.n	80015b0 <__ledf2+0x68>
 8001592:	003d      	movs	r5, r7
 8001594:	4325      	orrs	r5, r4
 8001596:	d110      	bne.n	80015ba <__ledf2+0x72>
 8001598:	4293      	cmp	r3, r2
 800159a:	d118      	bne.n	80015ce <__ledf2+0x86>
 800159c:	464d      	mov	r5, r9
 800159e:	432e      	orrs	r6, r5
 80015a0:	d10b      	bne.n	80015ba <__ledf2+0x72>
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <__ledf2+0x64>
 80015a6:	433c      	orrs	r4, r7
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d00b      	beq.n	80015c4 <__ledf2+0x7c>
 80015ac:	4281      	cmp	r1, r0
 80015ae:	d014      	beq.n	80015da <__ledf2+0x92>
 80015b0:	2002      	movs	r0, #2
 80015b2:	3901      	subs	r1, #1
 80015b4:	4008      	ands	r0, r1
 80015b6:	3801      	subs	r0, #1
 80015b8:	e000      	b.n	80015bc <__ledf2+0x74>
 80015ba:	2002      	movs	r0, #2
 80015bc:	bcc0      	pop	{r6, r7}
 80015be:	46b9      	mov	r9, r7
 80015c0:	46b0      	mov	r8, r6
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d1f9      	bne.n	80015bc <__ledf2+0x74>
 80015c8:	2001      	movs	r0, #1
 80015ca:	4240      	negs	r0, r0
 80015cc:	e7f6      	b.n	80015bc <__ledf2+0x74>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ec      	bne.n	80015ac <__ledf2+0x64>
 80015d2:	464c      	mov	r4, r9
 80015d4:	4326      	orrs	r6, r4
 80015d6:	d1e9      	bne.n	80015ac <__ledf2+0x64>
 80015d8:	e7ea      	b.n	80015b0 <__ledf2+0x68>
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd04      	ble.n	80015e8 <__ledf2+0xa0>
 80015de:	4243      	negs	r3, r0
 80015e0:	4158      	adcs	r0, r3
 80015e2:	0040      	lsls	r0, r0, #1
 80015e4:	3801      	subs	r0, #1
 80015e6:	e7e9      	b.n	80015bc <__ledf2+0x74>
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbeb      	blt.n	80015c4 <__ledf2+0x7c>
 80015ec:	454f      	cmp	r7, r9
 80015ee:	d8df      	bhi.n	80015b0 <__ledf2+0x68>
 80015f0:	d006      	beq.n	8001600 <__ledf2+0xb8>
 80015f2:	2000      	movs	r0, #0
 80015f4:	454f      	cmp	r7, r9
 80015f6:	d2e1      	bcs.n	80015bc <__ledf2+0x74>
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d0e5      	beq.n	80015c8 <__ledf2+0x80>
 80015fc:	0008      	movs	r0, r1
 80015fe:	e7dd      	b.n	80015bc <__ledf2+0x74>
 8001600:	45c4      	cmp	ip, r8
 8001602:	d8d5      	bhi.n	80015b0 <__ledf2+0x68>
 8001604:	2000      	movs	r0, #0
 8001606:	45c4      	cmp	ip, r8
 8001608:	d2d8      	bcs.n	80015bc <__ledf2+0x74>
 800160a:	e7f5      	b.n	80015f8 <__ledf2+0xb0>
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_dmul>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4645      	mov	r5, r8
 8001614:	46de      	mov	lr, fp
 8001616:	4657      	mov	r7, sl
 8001618:	464e      	mov	r6, r9
 800161a:	b5e0      	push	{r5, r6, r7, lr}
 800161c:	001f      	movs	r7, r3
 800161e:	030b      	lsls	r3, r1, #12
 8001620:	0b1b      	lsrs	r3, r3, #12
 8001622:	469b      	mov	fp, r3
 8001624:	004d      	lsls	r5, r1, #1
 8001626:	0fcb      	lsrs	r3, r1, #31
 8001628:	0004      	movs	r4, r0
 800162a:	4691      	mov	r9, r2
 800162c:	4698      	mov	r8, r3
 800162e:	b087      	sub	sp, #28
 8001630:	0d6d      	lsrs	r5, r5, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x26>
 8001634:	e1cd      	b.n	80019d2 <__aeabi_dmul+0x3c2>
 8001636:	4bce      	ldr	r3, [pc, #824]	; (8001970 <__aeabi_dmul+0x360>)
 8001638:	429d      	cmp	r5, r3
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2e>
 800163c:	e1e9      	b.n	8001a12 <__aeabi_dmul+0x402>
 800163e:	465a      	mov	r2, fp
 8001640:	0f43      	lsrs	r3, r0, #29
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	4313      	orrs	r3, r2
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	00c3      	lsls	r3, r0, #3
 800164e:	469a      	mov	sl, r3
 8001650:	4bc8      	ldr	r3, [pc, #800]	; (8001974 <__aeabi_dmul+0x364>)
 8001652:	4693      	mov	fp, r2
 8001654:	469c      	mov	ip, r3
 8001656:	2300      	movs	r3, #0
 8001658:	2600      	movs	r6, #0
 800165a:	4465      	add	r5, ip
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	033c      	lsls	r4, r7, #12
 8001660:	007b      	lsls	r3, r7, #1
 8001662:	4648      	mov	r0, r9
 8001664:	0b24      	lsrs	r4, r4, #12
 8001666:	0d5b      	lsrs	r3, r3, #21
 8001668:	0fff      	lsrs	r7, r7, #31
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dmul+0x60>
 800166e:	e189      	b.n	8001984 <__aeabi_dmul+0x374>
 8001670:	4abf      	ldr	r2, [pc, #764]	; (8001970 <__aeabi_dmul+0x360>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <__aeabi_dmul+0x9a>
 8001676:	0f42      	lsrs	r2, r0, #29
 8001678:	00e4      	lsls	r4, r4, #3
 800167a:	4322      	orrs	r2, r4
 800167c:	2480      	movs	r4, #128	; 0x80
 800167e:	0424      	lsls	r4, r4, #16
 8001680:	4314      	orrs	r4, r2
 8001682:	4abc      	ldr	r2, [pc, #752]	; (8001974 <__aeabi_dmul+0x364>)
 8001684:	2100      	movs	r1, #0
 8001686:	4694      	mov	ip, r2
 8001688:	4642      	mov	r2, r8
 800168a:	4463      	add	r3, ip
 800168c:	195b      	adds	r3, r3, r5
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	407a      	eors	r2, r7
 8001694:	3301      	adds	r3, #1
 8001696:	00c0      	lsls	r0, r0, #3
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2e0a      	cmp	r6, #10
 800169e:	dd1c      	ble.n	80016da <__aeabi_dmul+0xca>
 80016a0:	003a      	movs	r2, r7
 80016a2:	2e0b      	cmp	r6, #11
 80016a4:	d05e      	beq.n	8001764 <__aeabi_dmul+0x154>
 80016a6:	4647      	mov	r7, r8
 80016a8:	e056      	b.n	8001758 <__aeabi_dmul+0x148>
 80016aa:	4649      	mov	r1, r9
 80016ac:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <__aeabi_dmul+0x360>)
 80016ae:	4321      	orrs	r1, r4
 80016b0:	18eb      	adds	r3, r5, r3
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d12a      	bne.n	800170e <__aeabi_dmul+0xfe>
 80016b8:	2080      	movs	r0, #128	; 0x80
 80016ba:	2202      	movs	r2, #2
 80016bc:	0100      	lsls	r0, r0, #4
 80016be:	002b      	movs	r3, r5
 80016c0:	4684      	mov	ip, r0
 80016c2:	4316      	orrs	r6, r2
 80016c4:	4642      	mov	r2, r8
 80016c6:	4463      	add	r3, ip
 80016c8:	407a      	eors	r2, r7
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2e0a      	cmp	r6, #10
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dmul+0xc4>
 80016d2:	e231      	b.n	8001b38 <__aeabi_dmul+0x528>
 80016d4:	2000      	movs	r0, #0
 80016d6:	2400      	movs	r4, #0
 80016d8:	2102      	movs	r1, #2
 80016da:	2e02      	cmp	r6, #2
 80016dc:	dc26      	bgt.n	800172c <__aeabi_dmul+0x11c>
 80016de:	3e01      	subs	r6, #1
 80016e0:	2e01      	cmp	r6, #1
 80016e2:	d852      	bhi.n	800178a <__aeabi_dmul+0x17a>
 80016e4:	2902      	cmp	r1, #2
 80016e6:	d04c      	beq.n	8001782 <__aeabi_dmul+0x172>
 80016e8:	2901      	cmp	r1, #1
 80016ea:	d000      	beq.n	80016ee <__aeabi_dmul+0xde>
 80016ec:	e118      	b.n	8001920 <__aeabi_dmul+0x310>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2500      	movs	r5, #0
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	4323      	orrs	r3, r4
 80016f8:	07d2      	lsls	r2, r2, #31
 80016fa:	4313      	orrs	r3, r2
 80016fc:	0028      	movs	r0, r5
 80016fe:	0019      	movs	r1, r3
 8001700:	b007      	add	sp, #28
 8001702:	bcf0      	pop	{r4, r5, r6, r7}
 8001704:	46bb      	mov	fp, r7
 8001706:	46b2      	mov	sl, r6
 8001708:	46a9      	mov	r9, r5
 800170a:	46a0      	mov	r8, r4
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	2203      	movs	r2, #3
 8001712:	0109      	lsls	r1, r1, #4
 8001714:	002b      	movs	r3, r5
 8001716:	468c      	mov	ip, r1
 8001718:	4316      	orrs	r6, r2
 800171a:	4642      	mov	r2, r8
 800171c:	4463      	add	r3, ip
 800171e:	407a      	eors	r2, r7
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2e0a      	cmp	r6, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x11a>
 8001728:	e228      	b.n	8001b7c <__aeabi_dmul+0x56c>
 800172a:	2103      	movs	r1, #3
 800172c:	2501      	movs	r5, #1
 800172e:	40b5      	lsls	r5, r6
 8001730:	46ac      	mov	ip, r5
 8001732:	26a6      	movs	r6, #166	; 0xa6
 8001734:	4663      	mov	r3, ip
 8001736:	00f6      	lsls	r6, r6, #3
 8001738:	4035      	ands	r5, r6
 800173a:	4233      	tst	r3, r6
 800173c:	d10b      	bne.n	8001756 <__aeabi_dmul+0x146>
 800173e:	2690      	movs	r6, #144	; 0x90
 8001740:	00b6      	lsls	r6, r6, #2
 8001742:	4233      	tst	r3, r6
 8001744:	d118      	bne.n	8001778 <__aeabi_dmul+0x168>
 8001746:	3eb9      	subs	r6, #185	; 0xb9
 8001748:	3eff      	subs	r6, #255	; 0xff
 800174a:	421e      	tst	r6, r3
 800174c:	d01d      	beq.n	800178a <__aeabi_dmul+0x17a>
 800174e:	46a3      	mov	fp, r4
 8001750:	4682      	mov	sl, r0
 8001752:	9100      	str	r1, [sp, #0]
 8001754:	e000      	b.n	8001758 <__aeabi_dmul+0x148>
 8001756:	0017      	movs	r7, r2
 8001758:	9900      	ldr	r1, [sp, #0]
 800175a:	003a      	movs	r2, r7
 800175c:	2902      	cmp	r1, #2
 800175e:	d010      	beq.n	8001782 <__aeabi_dmul+0x172>
 8001760:	465c      	mov	r4, fp
 8001762:	4650      	mov	r0, sl
 8001764:	2903      	cmp	r1, #3
 8001766:	d1bf      	bne.n	80016e8 <__aeabi_dmul+0xd8>
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	431c      	orrs	r4, r3
 800176e:	0324      	lsls	r4, r4, #12
 8001770:	0005      	movs	r5, r0
 8001772:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <__aeabi_dmul+0x360>)
 8001774:	0b24      	lsrs	r4, r4, #12
 8001776:	e7bd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001778:	2480      	movs	r4, #128	; 0x80
 800177a:	2200      	movs	r2, #0
 800177c:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <__aeabi_dmul+0x360>)
 800177e:	0324      	lsls	r4, r4, #12
 8001780:	e7b8      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001782:	2400      	movs	r4, #0
 8001784:	2500      	movs	r5, #0
 8001786:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <__aeabi_dmul+0x360>)
 8001788:	e7b4      	b.n	80016f4 <__aeabi_dmul+0xe4>
 800178a:	4653      	mov	r3, sl
 800178c:	041e      	lsls	r6, r3, #16
 800178e:	0c36      	lsrs	r6, r6, #16
 8001790:	0c1f      	lsrs	r7, r3, #16
 8001792:	0033      	movs	r3, r6
 8001794:	0c01      	lsrs	r1, r0, #16
 8001796:	0400      	lsls	r0, r0, #16
 8001798:	0c00      	lsrs	r0, r0, #16
 800179a:	4343      	muls	r3, r0
 800179c:	4698      	mov	r8, r3
 800179e:	0003      	movs	r3, r0
 80017a0:	437b      	muls	r3, r7
 80017a2:	4699      	mov	r9, r3
 80017a4:	0033      	movs	r3, r6
 80017a6:	434b      	muls	r3, r1
 80017a8:	469c      	mov	ip, r3
 80017aa:	4643      	mov	r3, r8
 80017ac:	000d      	movs	r5, r1
 80017ae:	0c1b      	lsrs	r3, r3, #16
 80017b0:	469a      	mov	sl, r3
 80017b2:	437d      	muls	r5, r7
 80017b4:	44cc      	add	ip, r9
 80017b6:	44d4      	add	ip, sl
 80017b8:	9500      	str	r5, [sp, #0]
 80017ba:	45e1      	cmp	r9, ip
 80017bc:	d904      	bls.n	80017c8 <__aeabi_dmul+0x1b8>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4699      	mov	r9, r3
 80017c4:	444d      	add	r5, r9
 80017c6:	9500      	str	r5, [sp, #0]
 80017c8:	4663      	mov	r3, ip
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	001d      	movs	r5, r3
 80017ce:	4663      	mov	r3, ip
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	469c      	mov	ip, r3
 80017d4:	4643      	mov	r3, r8
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	4698      	mov	r8, r3
 80017dc:	4663      	mov	r3, ip
 80017de:	4443      	add	r3, r8
 80017e0:	9303      	str	r3, [sp, #12]
 80017e2:	0c23      	lsrs	r3, r4, #16
 80017e4:	4698      	mov	r8, r3
 80017e6:	0033      	movs	r3, r6
 80017e8:	0424      	lsls	r4, r4, #16
 80017ea:	0c24      	lsrs	r4, r4, #16
 80017ec:	4363      	muls	r3, r4
 80017ee:	469c      	mov	ip, r3
 80017f0:	0023      	movs	r3, r4
 80017f2:	437b      	muls	r3, r7
 80017f4:	4699      	mov	r9, r3
 80017f6:	4643      	mov	r3, r8
 80017f8:	435e      	muls	r6, r3
 80017fa:	435f      	muls	r7, r3
 80017fc:	444e      	add	r6, r9
 80017fe:	4663      	mov	r3, ip
 8001800:	46b2      	mov	sl, r6
 8001802:	0c1e      	lsrs	r6, r3, #16
 8001804:	4456      	add	r6, sl
 8001806:	45b1      	cmp	r9, r6
 8001808:	d903      	bls.n	8001812 <__aeabi_dmul+0x202>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4699      	mov	r9, r3
 8001810:	444f      	add	r7, r9
 8001812:	0c33      	lsrs	r3, r6, #16
 8001814:	4699      	mov	r9, r3
 8001816:	003b      	movs	r3, r7
 8001818:	444b      	add	r3, r9
 800181a:	9305      	str	r3, [sp, #20]
 800181c:	4663      	mov	r3, ip
 800181e:	46ac      	mov	ip, r5
 8001820:	041f      	lsls	r7, r3, #16
 8001822:	0c3f      	lsrs	r7, r7, #16
 8001824:	0436      	lsls	r6, r6, #16
 8001826:	19f6      	adds	r6, r6, r7
 8001828:	44b4      	add	ip, r6
 800182a:	4663      	mov	r3, ip
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	465b      	mov	r3, fp
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	465b      	mov	r3, fp
 8001836:	041f      	lsls	r7, r3, #16
 8001838:	0c3f      	lsrs	r7, r7, #16
 800183a:	003b      	movs	r3, r7
 800183c:	4343      	muls	r3, r0
 800183e:	4699      	mov	r9, r3
 8001840:	4663      	mov	r3, ip
 8001842:	4343      	muls	r3, r0
 8001844:	469a      	mov	sl, r3
 8001846:	464b      	mov	r3, r9
 8001848:	4660      	mov	r0, ip
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	469b      	mov	fp, r3
 800184e:	4348      	muls	r0, r1
 8001850:	4379      	muls	r1, r7
 8001852:	4451      	add	r1, sl
 8001854:	4459      	add	r1, fp
 8001856:	458a      	cmp	sl, r1
 8001858:	d903      	bls.n	8001862 <__aeabi_dmul+0x252>
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	469a      	mov	sl, r3
 8001860:	4450      	add	r0, sl
 8001862:	0c0b      	lsrs	r3, r1, #16
 8001864:	469a      	mov	sl, r3
 8001866:	464b      	mov	r3, r9
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	4699      	mov	r9, r3
 800186e:	003b      	movs	r3, r7
 8001870:	4363      	muls	r3, r4
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	4645      	mov	r5, r8
 8001876:	4449      	add	r1, r9
 8001878:	4699      	mov	r9, r3
 800187a:	4663      	mov	r3, ip
 800187c:	435c      	muls	r4, r3
 800187e:	436b      	muls	r3, r5
 8001880:	469c      	mov	ip, r3
 8001882:	464b      	mov	r3, r9
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	4698      	mov	r8, r3
 8001888:	436f      	muls	r7, r5
 800188a:	193f      	adds	r7, r7, r4
 800188c:	4447      	add	r7, r8
 800188e:	4450      	add	r0, sl
 8001890:	42bc      	cmp	r4, r7
 8001892:	d903      	bls.n	800189c <__aeabi_dmul+0x28c>
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	4698      	mov	r8, r3
 800189a:	44c4      	add	ip, r8
 800189c:	9b04      	ldr	r3, [sp, #16]
 800189e:	9d00      	ldr	r5, [sp, #0]
 80018a0:	4698      	mov	r8, r3
 80018a2:	4445      	add	r5, r8
 80018a4:	42b5      	cmp	r5, r6
 80018a6:	41b6      	sbcs	r6, r6
 80018a8:	4273      	negs	r3, r6
 80018aa:	4698      	mov	r8, r3
 80018ac:	464b      	mov	r3, r9
 80018ae:	041e      	lsls	r6, r3, #16
 80018b0:	9b05      	ldr	r3, [sp, #20]
 80018b2:	043c      	lsls	r4, r7, #16
 80018b4:	4699      	mov	r9, r3
 80018b6:	0c36      	lsrs	r6, r6, #16
 80018b8:	19a4      	adds	r4, r4, r6
 80018ba:	444c      	add	r4, r9
 80018bc:	46a1      	mov	r9, r4
 80018be:	4683      	mov	fp, r0
 80018c0:	186e      	adds	r6, r5, r1
 80018c2:	44c1      	add	r9, r8
 80018c4:	428e      	cmp	r6, r1
 80018c6:	4189      	sbcs	r1, r1
 80018c8:	44cb      	add	fp, r9
 80018ca:	465d      	mov	r5, fp
 80018cc:	4249      	negs	r1, r1
 80018ce:	186d      	adds	r5, r5, r1
 80018d0:	429c      	cmp	r4, r3
 80018d2:	41a4      	sbcs	r4, r4
 80018d4:	45c1      	cmp	r9, r8
 80018d6:	419b      	sbcs	r3, r3
 80018d8:	4583      	cmp	fp, r0
 80018da:	4180      	sbcs	r0, r0
 80018dc:	428d      	cmp	r5, r1
 80018de:	4189      	sbcs	r1, r1
 80018e0:	425b      	negs	r3, r3
 80018e2:	4264      	negs	r4, r4
 80018e4:	431c      	orrs	r4, r3
 80018e6:	4240      	negs	r0, r0
 80018e8:	9b03      	ldr	r3, [sp, #12]
 80018ea:	4249      	negs	r1, r1
 80018ec:	4301      	orrs	r1, r0
 80018ee:	0270      	lsls	r0, r6, #9
 80018f0:	0c3f      	lsrs	r7, r7, #16
 80018f2:	4318      	orrs	r0, r3
 80018f4:	19e4      	adds	r4, r4, r7
 80018f6:	1e47      	subs	r7, r0, #1
 80018f8:	41b8      	sbcs	r0, r7
 80018fa:	1864      	adds	r4, r4, r1
 80018fc:	4464      	add	r4, ip
 80018fe:	0df6      	lsrs	r6, r6, #23
 8001900:	0261      	lsls	r1, r4, #9
 8001902:	4330      	orrs	r0, r6
 8001904:	0dec      	lsrs	r4, r5, #23
 8001906:	026e      	lsls	r6, r5, #9
 8001908:	430c      	orrs	r4, r1
 800190a:	4330      	orrs	r0, r6
 800190c:	01c9      	lsls	r1, r1, #7
 800190e:	d400      	bmi.n	8001912 <__aeabi_dmul+0x302>
 8001910:	e0f1      	b.n	8001af6 <__aeabi_dmul+0x4e6>
 8001912:	2101      	movs	r1, #1
 8001914:	0843      	lsrs	r3, r0, #1
 8001916:	4001      	ands	r1, r0
 8001918:	430b      	orrs	r3, r1
 800191a:	07e0      	lsls	r0, r4, #31
 800191c:	4318      	orrs	r0, r3
 800191e:	0864      	lsrs	r4, r4, #1
 8001920:	4915      	ldr	r1, [pc, #84]	; (8001978 <__aeabi_dmul+0x368>)
 8001922:	9b02      	ldr	r3, [sp, #8]
 8001924:	468c      	mov	ip, r1
 8001926:	4463      	add	r3, ip
 8001928:	2b00      	cmp	r3, #0
 800192a:	dc00      	bgt.n	800192e <__aeabi_dmul+0x31e>
 800192c:	e097      	b.n	8001a5e <__aeabi_dmul+0x44e>
 800192e:	0741      	lsls	r1, r0, #29
 8001930:	d009      	beq.n	8001946 <__aeabi_dmul+0x336>
 8001932:	210f      	movs	r1, #15
 8001934:	4001      	ands	r1, r0
 8001936:	2904      	cmp	r1, #4
 8001938:	d005      	beq.n	8001946 <__aeabi_dmul+0x336>
 800193a:	1d01      	adds	r1, r0, #4
 800193c:	4281      	cmp	r1, r0
 800193e:	4180      	sbcs	r0, r0
 8001940:	4240      	negs	r0, r0
 8001942:	1824      	adds	r4, r4, r0
 8001944:	0008      	movs	r0, r1
 8001946:	01e1      	lsls	r1, r4, #7
 8001948:	d506      	bpl.n	8001958 <__aeabi_dmul+0x348>
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	00c9      	lsls	r1, r1, #3
 800194e:	468c      	mov	ip, r1
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <__aeabi_dmul+0x36c>)
 8001952:	401c      	ands	r4, r3
 8001954:	9b02      	ldr	r3, [sp, #8]
 8001956:	4463      	add	r3, ip
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <__aeabi_dmul+0x370>)
 800195a:	428b      	cmp	r3, r1
 800195c:	dd00      	ble.n	8001960 <__aeabi_dmul+0x350>
 800195e:	e710      	b.n	8001782 <__aeabi_dmul+0x172>
 8001960:	0761      	lsls	r1, r4, #29
 8001962:	08c5      	lsrs	r5, r0, #3
 8001964:	0264      	lsls	r4, r4, #9
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	430d      	orrs	r5, r1
 800196a:	0b24      	lsrs	r4, r4, #12
 800196c:	0d5b      	lsrs	r3, r3, #21
 800196e:	e6c1      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001970:	000007ff 	.word	0x000007ff
 8001974:	fffffc01 	.word	0xfffffc01
 8001978:	000003ff 	.word	0x000003ff
 800197c:	feffffff 	.word	0xfeffffff
 8001980:	000007fe 	.word	0x000007fe
 8001984:	464b      	mov	r3, r9
 8001986:	4323      	orrs	r3, r4
 8001988:	d059      	beq.n	8001a3e <__aeabi_dmul+0x42e>
 800198a:	2c00      	cmp	r4, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dmul+0x380>
 800198e:	e0a3      	b.n	8001ad8 <__aeabi_dmul+0x4c8>
 8001990:	0020      	movs	r0, r4
 8001992:	f000 fdb1 	bl	80024f8 <__clzsi2>
 8001996:	0001      	movs	r1, r0
 8001998:	0003      	movs	r3, r0
 800199a:	390b      	subs	r1, #11
 800199c:	221d      	movs	r2, #29
 800199e:	1a52      	subs	r2, r2, r1
 80019a0:	4649      	mov	r1, r9
 80019a2:	0018      	movs	r0, r3
 80019a4:	40d1      	lsrs	r1, r2
 80019a6:	464a      	mov	r2, r9
 80019a8:	3808      	subs	r0, #8
 80019aa:	4082      	lsls	r2, r0
 80019ac:	4084      	lsls	r4, r0
 80019ae:	0010      	movs	r0, r2
 80019b0:	430c      	orrs	r4, r1
 80019b2:	4a74      	ldr	r2, [pc, #464]	; (8001b84 <__aeabi_dmul+0x574>)
 80019b4:	1aeb      	subs	r3, r5, r3
 80019b6:	4694      	mov	ip, r2
 80019b8:	4642      	mov	r2, r8
 80019ba:	4463      	add	r3, ip
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	407a      	eors	r2, r7
 80019c2:	3301      	adds	r3, #1
 80019c4:	2100      	movs	r1, #0
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2e0a      	cmp	r6, #10
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dmul+0x3c0>
 80019ce:	e667      	b.n	80016a0 <__aeabi_dmul+0x90>
 80019d0:	e683      	b.n	80016da <__aeabi_dmul+0xca>
 80019d2:	465b      	mov	r3, fp
 80019d4:	4303      	orrs	r3, r0
 80019d6:	469a      	mov	sl, r3
 80019d8:	d02a      	beq.n	8001a30 <__aeabi_dmul+0x420>
 80019da:	465b      	mov	r3, fp
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d06d      	beq.n	8001abc <__aeabi_dmul+0x4ac>
 80019e0:	4658      	mov	r0, fp
 80019e2:	f000 fd89 	bl	80024f8 <__clzsi2>
 80019e6:	0001      	movs	r1, r0
 80019e8:	0003      	movs	r3, r0
 80019ea:	390b      	subs	r1, #11
 80019ec:	221d      	movs	r2, #29
 80019ee:	1a52      	subs	r2, r2, r1
 80019f0:	0021      	movs	r1, r4
 80019f2:	0018      	movs	r0, r3
 80019f4:	465d      	mov	r5, fp
 80019f6:	40d1      	lsrs	r1, r2
 80019f8:	3808      	subs	r0, #8
 80019fa:	4085      	lsls	r5, r0
 80019fc:	000a      	movs	r2, r1
 80019fe:	4084      	lsls	r4, r0
 8001a00:	432a      	orrs	r2, r5
 8001a02:	4693      	mov	fp, r2
 8001a04:	46a2      	mov	sl, r4
 8001a06:	4d5f      	ldr	r5, [pc, #380]	; (8001b84 <__aeabi_dmul+0x574>)
 8001a08:	2600      	movs	r6, #0
 8001a0a:	1aed      	subs	r5, r5, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	e625      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a12:	465b      	mov	r3, fp
 8001a14:	4303      	orrs	r3, r0
 8001a16:	469a      	mov	sl, r3
 8001a18:	d105      	bne.n	8001a26 <__aeabi_dmul+0x416>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	469b      	mov	fp, r3
 8001a1e:	3302      	adds	r3, #2
 8001a20:	2608      	movs	r6, #8
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	e61b      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a26:	2303      	movs	r3, #3
 8001a28:	4682      	mov	sl, r0
 8001a2a:	260c      	movs	r6, #12
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	e616      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a30:	2300      	movs	r3, #0
 8001a32:	469b      	mov	fp, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	2604      	movs	r6, #4
 8001a38:	2500      	movs	r5, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e60f      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a3e:	4642      	mov	r2, r8
 8001a40:	3301      	adds	r3, #1
 8001a42:	9501      	str	r5, [sp, #4]
 8001a44:	431e      	orrs	r6, r3
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	407a      	eors	r2, r7
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2e0a      	cmp	r6, #10
 8001a58:	dd00      	ble.n	8001a5c <__aeabi_dmul+0x44c>
 8001a5a:	e621      	b.n	80016a0 <__aeabi_dmul+0x90>
 8001a5c:	e63d      	b.n	80016da <__aeabi_dmul+0xca>
 8001a5e:	2101      	movs	r1, #1
 8001a60:	1ac9      	subs	r1, r1, r3
 8001a62:	2938      	cmp	r1, #56	; 0x38
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x458>
 8001a66:	e642      	b.n	80016ee <__aeabi_dmul+0xde>
 8001a68:	291f      	cmp	r1, #31
 8001a6a:	dd47      	ble.n	8001afc <__aeabi_dmul+0x4ec>
 8001a6c:	261f      	movs	r6, #31
 8001a6e:	0025      	movs	r5, r4
 8001a70:	4276      	negs	r6, r6
 8001a72:	1af3      	subs	r3, r6, r3
 8001a74:	40dd      	lsrs	r5, r3
 8001a76:	002b      	movs	r3, r5
 8001a78:	2920      	cmp	r1, #32
 8001a7a:	d005      	beq.n	8001a88 <__aeabi_dmul+0x478>
 8001a7c:	4942      	ldr	r1, [pc, #264]	; (8001b88 <__aeabi_dmul+0x578>)
 8001a7e:	9d02      	ldr	r5, [sp, #8]
 8001a80:	468c      	mov	ip, r1
 8001a82:	4465      	add	r5, ip
 8001a84:	40ac      	lsls	r4, r5
 8001a86:	4320      	orrs	r0, r4
 8001a88:	1e41      	subs	r1, r0, #1
 8001a8a:	4188      	sbcs	r0, r1
 8001a8c:	4318      	orrs	r0, r3
 8001a8e:	2307      	movs	r3, #7
 8001a90:	001d      	movs	r5, r3
 8001a92:	2400      	movs	r4, #0
 8001a94:	4005      	ands	r5, r0
 8001a96:	4203      	tst	r3, r0
 8001a98:	d04a      	beq.n	8001b30 <__aeabi_dmul+0x520>
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d042      	beq.n	8001b2a <__aeabi_dmul+0x51a>
 8001aa4:	1d03      	adds	r3, r0, #4
 8001aa6:	4283      	cmp	r3, r0
 8001aa8:	4180      	sbcs	r0, r0
 8001aaa:	4240      	negs	r0, r0
 8001aac:	1824      	adds	r4, r4, r0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	0223      	lsls	r3, r4, #8
 8001ab2:	d53a      	bpl.n	8001b2a <__aeabi_dmul+0x51a>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	2500      	movs	r5, #0
 8001aba:	e61b      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001abc:	f000 fd1c 	bl	80024f8 <__clzsi2>
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	3115      	adds	r1, #21
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	291c      	cmp	r1, #28
 8001aca:	dd8f      	ble.n	80019ec <__aeabi_dmul+0x3dc>
 8001acc:	3808      	subs	r0, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4084      	lsls	r4, r0
 8001ad2:	4692      	mov	sl, r2
 8001ad4:	46a3      	mov	fp, r4
 8001ad6:	e796      	b.n	8001a06 <__aeabi_dmul+0x3f6>
 8001ad8:	f000 fd0e 	bl	80024f8 <__clzsi2>
 8001adc:	0001      	movs	r1, r0
 8001ade:	0003      	movs	r3, r0
 8001ae0:	3115      	adds	r1, #21
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	291c      	cmp	r1, #28
 8001ae6:	dc00      	bgt.n	8001aea <__aeabi_dmul+0x4da>
 8001ae8:	e758      	b.n	800199c <__aeabi_dmul+0x38c>
 8001aea:	0002      	movs	r2, r0
 8001aec:	464c      	mov	r4, r9
 8001aee:	3a08      	subs	r2, #8
 8001af0:	2000      	movs	r0, #0
 8001af2:	4094      	lsls	r4, r2
 8001af4:	e75d      	b.n	80019b2 <__aeabi_dmul+0x3a2>
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	e711      	b.n	8001920 <__aeabi_dmul+0x310>
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <__aeabi_dmul+0x57c>)
 8001afe:	0026      	movs	r6, r4
 8001b00:	469c      	mov	ip, r3
 8001b02:	0003      	movs	r3, r0
 8001b04:	9d02      	ldr	r5, [sp, #8]
 8001b06:	40cb      	lsrs	r3, r1
 8001b08:	4465      	add	r5, ip
 8001b0a:	40ae      	lsls	r6, r5
 8001b0c:	431e      	orrs	r6, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	40ab      	lsls	r3, r5
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	4183      	sbcs	r3, r0
 8001b16:	0030      	movs	r0, r6
 8001b18:	4318      	orrs	r0, r3
 8001b1a:	40cc      	lsrs	r4, r1
 8001b1c:	0743      	lsls	r3, r0, #29
 8001b1e:	d0c7      	beq.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b20:	230f      	movs	r3, #15
 8001b22:	4003      	ands	r3, r0
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d1bd      	bne.n	8001aa4 <__aeabi_dmul+0x494>
 8001b28:	e7c2      	b.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b2a:	0765      	lsls	r5, r4, #29
 8001b2c:	0264      	lsls	r4, r4, #9
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	08c0      	lsrs	r0, r0, #3
 8001b32:	2300      	movs	r3, #0
 8001b34:	4305      	orrs	r5, r0
 8001b36:	e5dd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b38:	2500      	movs	r5, #0
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	2e0f      	cmp	r6, #15
 8001b3e:	d10c      	bne.n	8001b5a <__aeabi_dmul+0x54a>
 8001b40:	2480      	movs	r4, #128	; 0x80
 8001b42:	465b      	mov	r3, fp
 8001b44:	0324      	lsls	r4, r4, #12
 8001b46:	4223      	tst	r3, r4
 8001b48:	d00e      	beq.n	8001b68 <__aeabi_dmul+0x558>
 8001b4a:	4221      	tst	r1, r4
 8001b4c:	d10c      	bne.n	8001b68 <__aeabi_dmul+0x558>
 8001b4e:	430c      	orrs	r4, r1
 8001b50:	0324      	lsls	r4, r4, #12
 8001b52:	003a      	movs	r2, r7
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b56:	0b24      	lsrs	r4, r4, #12
 8001b58:	e5cc      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b5a:	2e0b      	cmp	r6, #11
 8001b5c:	d000      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b5e:	e5a2      	b.n	80016a6 <__aeabi_dmul+0x96>
 8001b60:	468b      	mov	fp, r1
 8001b62:	46aa      	mov	sl, r5
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	e5f7      	b.n	8001758 <__aeabi_dmul+0x148>
 8001b68:	2480      	movs	r4, #128	; 0x80
 8001b6a:	465b      	mov	r3, fp
 8001b6c:	0324      	lsls	r4, r4, #12
 8001b6e:	431c      	orrs	r4, r3
 8001b70:	0324      	lsls	r4, r4, #12
 8001b72:	4642      	mov	r2, r8
 8001b74:	4655      	mov	r5, sl
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b78:	0b24      	lsrs	r4, r4, #12
 8001b7a:	e5bb      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	0021      	movs	r1, r4
 8001b80:	2303      	movs	r3, #3
 8001b82:	e7db      	b.n	8001b3c <__aeabi_dmul+0x52c>
 8001b84:	fffffc0d 	.word	0xfffffc0d
 8001b88:	0000043e 	.word	0x0000043e
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	000007ff 	.word	0x000007ff

08001b94 <__aeabi_dsub>:
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	4657      	mov	r7, sl
 8001b98:	464e      	mov	r6, r9
 8001b9a:	4645      	mov	r5, r8
 8001b9c:	46de      	mov	lr, fp
 8001b9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ba0:	000d      	movs	r5, r1
 8001ba2:	0004      	movs	r4, r0
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	032b      	lsls	r3, r5, #12
 8001baa:	0a5b      	lsrs	r3, r3, #9
 8001bac:	0f62      	lsrs	r2, r4, #29
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	00e3      	lsls	r3, r4, #3
 8001bb2:	030c      	lsls	r4, r1, #12
 8001bb4:	0a64      	lsrs	r4, r4, #9
 8001bb6:	0f47      	lsrs	r7, r0, #29
 8001bb8:	4327      	orrs	r7, r4
 8001bba:	4cd0      	ldr	r4, [pc, #832]	; (8001efc <__aeabi_dsub+0x368>)
 8001bbc:	006e      	lsls	r6, r5, #1
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	004a      	lsls	r2, r1, #1
 8001bc4:	00c0      	lsls	r0, r0, #3
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	46a2      	mov	sl, r4
 8001bca:	0d76      	lsrs	r6, r6, #21
 8001bcc:	0fed      	lsrs	r5, r5, #31
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	9001      	str	r0, [sp, #4]
 8001bd4:	42a2      	cmp	r2, r4
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x46>
 8001bd8:	e0b9      	b.n	8001d4e <__aeabi_dsub+0x1ba>
 8001bda:	2401      	movs	r4, #1
 8001bdc:	4061      	eors	r1, r4
 8001bde:	468b      	mov	fp, r1
 8001be0:	428d      	cmp	r5, r1
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x52>
 8001be4:	e08d      	b.n	8001d02 <__aeabi_dsub+0x16e>
 8001be6:	1ab4      	subs	r4, r6, r2
 8001be8:	46a4      	mov	ip, r4
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_dsub+0x5c>
 8001bee:	e0b7      	b.n	8001d60 <__aeabi_dsub+0x1cc>
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x62>
 8001bf4:	e0cb      	b.n	8001d8e <__aeabi_dsub+0x1fa>
 8001bf6:	4ac1      	ldr	r2, [pc, #772]	; (8001efc <__aeabi_dsub+0x368>)
 8001bf8:	4296      	cmp	r6, r2
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x6a>
 8001bfc:	e186      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	0412      	lsls	r2, r2, #16
 8001c02:	4317      	orrs	r7, r2
 8001c04:	4662      	mov	r2, ip
 8001c06:	2a38      	cmp	r2, #56	; 0x38
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x78>
 8001c0a:	e1a4      	b.n	8001f56 <__aeabi_dsub+0x3c2>
 8001c0c:	2a1f      	cmp	r2, #31
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dsub+0x7e>
 8001c10:	e21d      	b.n	800204e <__aeabi_dsub+0x4ba>
 8001c12:	4661      	mov	r1, ip
 8001c14:	2220      	movs	r2, #32
 8001c16:	003c      	movs	r4, r7
 8001c18:	1a52      	subs	r2, r2, r1
 8001c1a:	0001      	movs	r1, r0
 8001c1c:	4090      	lsls	r0, r2
 8001c1e:	4094      	lsls	r4, r2
 8001c20:	1e42      	subs	r2, r0, #1
 8001c22:	4190      	sbcs	r0, r2
 8001c24:	4662      	mov	r2, ip
 8001c26:	46a0      	mov	r8, r4
 8001c28:	4664      	mov	r4, ip
 8001c2a:	40d7      	lsrs	r7, r2
 8001c2c:	464a      	mov	r2, r9
 8001c2e:	40e1      	lsrs	r1, r4
 8001c30:	4644      	mov	r4, r8
 8001c32:	1bd2      	subs	r2, r2, r7
 8001c34:	4691      	mov	r9, r2
 8001c36:	430c      	orrs	r4, r1
 8001c38:	4304      	orrs	r4, r0
 8001c3a:	1b1c      	subs	r4, r3, r4
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	4192      	sbcs	r2, r2
 8001c40:	464b      	mov	r3, r9
 8001c42:	4252      	negs	r2, r2
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	469a      	mov	sl, r3
 8001c48:	4653      	mov	r3, sl
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	d400      	bmi.n	8001c50 <__aeabi_dsub+0xbc>
 8001c4e:	e12b      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001c50:	4653      	mov	r3, sl
 8001c52:	025a      	lsls	r2, r3, #9
 8001c54:	0a53      	lsrs	r3, r2, #9
 8001c56:	469a      	mov	sl, r3
 8001c58:	4653      	mov	r3, sl
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0xcc>
 8001c5e:	e166      	b.n	8001f2e <__aeabi_dsub+0x39a>
 8001c60:	4650      	mov	r0, sl
 8001c62:	f000 fc49 	bl	80024f8 <__clzsi2>
 8001c66:	0003      	movs	r3, r0
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	0020      	movs	r0, r4
 8001c6e:	1ad2      	subs	r2, r2, r3
 8001c70:	4651      	mov	r1, sl
 8001c72:	40d0      	lsrs	r0, r2
 8001c74:	4099      	lsls	r1, r3
 8001c76:	0002      	movs	r2, r0
 8001c78:	409c      	lsls	r4, r3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	429e      	cmp	r6, r3
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_dsub+0xee>
 8001c80:	e164      	b.n	8001f4c <__aeabi_dsub+0x3b8>
 8001c82:	1b9b      	subs	r3, r3, r6
 8001c84:	1c59      	adds	r1, r3, #1
 8001c86:	291f      	cmp	r1, #31
 8001c88:	dd00      	ble.n	8001c8c <__aeabi_dsub+0xf8>
 8001c8a:	e0fe      	b.n	8001e8a <__aeabi_dsub+0x2f6>
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0026      	movs	r6, r4
 8001c92:	1a5b      	subs	r3, r3, r1
 8001c94:	409c      	lsls	r4, r3
 8001c96:	4098      	lsls	r0, r3
 8001c98:	40ce      	lsrs	r6, r1
 8001c9a:	40ca      	lsrs	r2, r1
 8001c9c:	1e63      	subs	r3, r4, #1
 8001c9e:	419c      	sbcs	r4, r3
 8001ca0:	4330      	orrs	r0, r6
 8001ca2:	4692      	mov	sl, r2
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	4304      	orrs	r4, r0
 8001ca8:	0763      	lsls	r3, r4, #29
 8001caa:	d009      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cac:	230f      	movs	r3, #15
 8001cae:	4023      	ands	r3, r4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cb4:	1d23      	adds	r3, r4, #4
 8001cb6:	42a3      	cmp	r3, r4
 8001cb8:	41a4      	sbcs	r4, r4
 8001cba:	4264      	negs	r4, r4
 8001cbc:	44a2      	add	sl, r4
 8001cbe:	001c      	movs	r4, r3
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	d400      	bmi.n	8001cc8 <__aeabi_dsub+0x134>
 8001cc6:	e0f2      	b.n	8001eae <__aeabi_dsub+0x31a>
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <__aeabi_dsub+0x368>)
 8001cca:	3601      	adds	r6, #1
 8001ccc:	429e      	cmp	r6, r3
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x13e>
 8001cd0:	e10f      	b.n	8001ef2 <__aeabi_dsub+0x35e>
 8001cd2:	4653      	mov	r3, sl
 8001cd4:	498a      	ldr	r1, [pc, #552]	; (8001f00 <__aeabi_dsub+0x36c>)
 8001cd6:	08e4      	lsrs	r4, r4, #3
 8001cd8:	400b      	ands	r3, r1
 8001cda:	0019      	movs	r1, r3
 8001cdc:	075b      	lsls	r3, r3, #29
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	0572      	lsls	r2, r6, #21
 8001ce2:	024c      	lsls	r4, r1, #9
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	0d52      	lsrs	r2, r2, #21
 8001ce8:	0512      	lsls	r2, r2, #20
 8001cea:	4322      	orrs	r2, r4
 8001cec:	07ed      	lsls	r5, r5, #31
 8001cee:	432a      	orrs	r2, r5
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf8:	46bb      	mov	fp, r7
 8001cfa:	46b2      	mov	sl, r6
 8001cfc:	46a9      	mov	r9, r5
 8001cfe:	46a0      	mov	r8, r4
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	1ab4      	subs	r4, r6, r2
 8001d04:	46a4      	mov	ip, r4
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	dd59      	ble.n	8001dbe <__aeabi_dsub+0x22a>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x17c>
 8001d0e:	e0b0      	b.n	8001e72 <__aeabi_dsub+0x2de>
 8001d10:	4556      	cmp	r6, sl
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x182>
 8001d14:	e0fa      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0412      	lsls	r2, r2, #16
 8001d1a:	4317      	orrs	r7, r2
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	2a38      	cmp	r2, #56	; 0x38
 8001d20:	dd00      	ble.n	8001d24 <__aeabi_dsub+0x190>
 8001d22:	e0d4      	b.n	8001ece <__aeabi_dsub+0x33a>
 8001d24:	2a1f      	cmp	r2, #31
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dsub+0x196>
 8001d28:	e1c0      	b.n	80020ac <__aeabi_dsub+0x518>
 8001d2a:	0039      	movs	r1, r7
 8001d2c:	3a20      	subs	r2, #32
 8001d2e:	40d1      	lsrs	r1, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	2a20      	cmp	r2, #32
 8001d34:	d006      	beq.n	8001d44 <__aeabi_dsub+0x1b0>
 8001d36:	4664      	mov	r4, ip
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	1b12      	subs	r2, r2, r4
 8001d3c:	003c      	movs	r4, r7
 8001d3e:	4094      	lsls	r4, r2
 8001d40:	4304      	orrs	r4, r0
 8001d42:	9401      	str	r4, [sp, #4]
 8001d44:	9c01      	ldr	r4, [sp, #4]
 8001d46:	1e62      	subs	r2, r4, #1
 8001d48:	4194      	sbcs	r4, r2
 8001d4a:	430c      	orrs	r4, r1
 8001d4c:	e0c3      	b.n	8001ed6 <__aeabi_dsub+0x342>
 8001d4e:	003c      	movs	r4, r7
 8001d50:	4304      	orrs	r4, r0
 8001d52:	d02b      	beq.n	8001dac <__aeabi_dsub+0x218>
 8001d54:	468b      	mov	fp, r1
 8001d56:	428d      	cmp	r5, r1
 8001d58:	d02e      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001d5a:	4c6a      	ldr	r4, [pc, #424]	; (8001f04 <__aeabi_dsub+0x370>)
 8001d5c:	46a4      	mov	ip, r4
 8001d5e:	44b4      	add	ip, r6
 8001d60:	4664      	mov	r4, ip
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d05f      	beq.n	8001e26 <__aeabi_dsub+0x292>
 8001d66:	1b94      	subs	r4, r2, r6
 8001d68:	46a4      	mov	ip, r4
 8001d6a:	2e00      	cmp	r6, #0
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x1dc>
 8001d6e:	e120      	b.n	8001fb2 <__aeabi_dsub+0x41e>
 8001d70:	464c      	mov	r4, r9
 8001d72:	431c      	orrs	r4, r3
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x1e4>
 8001d76:	e1c7      	b.n	8002108 <__aeabi_dsub+0x574>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	1e4c      	subs	r4, r1, #1
 8001d7c:	2901      	cmp	r1, #1
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x1ee>
 8001d80:	e223      	b.n	80021ca <__aeabi_dsub+0x636>
 8001d82:	4d5e      	ldr	r5, [pc, #376]	; (8001efc <__aeabi_dsub+0x368>)
 8001d84:	45ac      	cmp	ip, r5
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x1f6>
 8001d88:	e1d8      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001d8a:	46a4      	mov	ip, r4
 8001d8c:	e11a      	b.n	8001fc4 <__aeabi_dsub+0x430>
 8001d8e:	003a      	movs	r2, r7
 8001d90:	4302      	orrs	r2, r0
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dsub+0x202>
 8001d94:	e0e4      	b.n	8001f60 <__aeabi_dsub+0x3cc>
 8001d96:	0022      	movs	r2, r4
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	2c01      	cmp	r4, #1
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x20c>
 8001d9e:	e1c3      	b.n	8002128 <__aeabi_dsub+0x594>
 8001da0:	4956      	ldr	r1, [pc, #344]	; (8001efc <__aeabi_dsub+0x368>)
 8001da2:	428c      	cmp	r4, r1
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x214>
 8001da6:	e0b1      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001da8:	4694      	mov	ip, r2
 8001daa:	e72b      	b.n	8001c04 <__aeabi_dsub+0x70>
 8001dac:	2401      	movs	r4, #1
 8001dae:	4061      	eors	r1, r4
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d000      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001db6:	e716      	b.n	8001be6 <__aeabi_dsub+0x52>
 8001db8:	4952      	ldr	r1, [pc, #328]	; (8001f04 <__aeabi_dsub+0x370>)
 8001dba:	468c      	mov	ip, r1
 8001dbc:	44b4      	add	ip, r6
 8001dbe:	4664      	mov	r4, ip
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x232>
 8001dc4:	e0d3      	b.n	8001f6e <__aeabi_dsub+0x3da>
 8001dc6:	1b91      	subs	r1, r2, r6
 8001dc8:	468c      	mov	ip, r1
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x23c>
 8001dce:	e15e      	b.n	800208e <__aeabi_dsub+0x4fa>
 8001dd0:	494a      	ldr	r1, [pc, #296]	; (8001efc <__aeabi_dsub+0x368>)
 8001dd2:	428a      	cmp	r2, r1
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x244>
 8001dd6:	e1be      	b.n	8002156 <__aeabi_dsub+0x5c2>
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	464c      	mov	r4, r9
 8001ddc:	0409      	lsls	r1, r1, #16
 8001dde:	430c      	orrs	r4, r1
 8001de0:	46a1      	mov	r9, r4
 8001de2:	4661      	mov	r1, ip
 8001de4:	2938      	cmp	r1, #56	; 0x38
 8001de6:	dd00      	ble.n	8001dea <__aeabi_dsub+0x256>
 8001de8:	e1ba      	b.n	8002160 <__aeabi_dsub+0x5cc>
 8001dea:	291f      	cmp	r1, #31
 8001dec:	dd00      	ble.n	8001df0 <__aeabi_dsub+0x25c>
 8001dee:	e227      	b.n	8002240 <__aeabi_dsub+0x6ac>
 8001df0:	2420      	movs	r4, #32
 8001df2:	1a64      	subs	r4, r4, r1
 8001df4:	4649      	mov	r1, r9
 8001df6:	40a1      	lsls	r1, r4
 8001df8:	001e      	movs	r6, r3
 8001dfa:	4688      	mov	r8, r1
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	40a3      	lsls	r3, r4
 8001e00:	40ce      	lsrs	r6, r1
 8001e02:	4641      	mov	r1, r8
 8001e04:	1e5c      	subs	r4, r3, #1
 8001e06:	41a3      	sbcs	r3, r4
 8001e08:	4331      	orrs	r1, r6
 8001e0a:	4319      	orrs	r1, r3
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	4663      	mov	r3, ip
 8001e10:	4649      	mov	r1, r9
 8001e12:	40d9      	lsrs	r1, r3
 8001e14:	187f      	adds	r7, r7, r1
 8001e16:	1824      	adds	r4, r4, r0
 8001e18:	4284      	cmp	r4, r0
 8001e1a:	419b      	sbcs	r3, r3
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	469a      	mov	sl, r3
 8001e20:	0016      	movs	r6, r2
 8001e22:	44ba      	add	sl, r7
 8001e24:	e05d      	b.n	8001ee2 <__aeabi_dsub+0x34e>
 8001e26:	4c38      	ldr	r4, [pc, #224]	; (8001f08 <__aeabi_dsub+0x374>)
 8001e28:	1c72      	adds	r2, r6, #1
 8001e2a:	4222      	tst	r2, r4
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x29c>
 8001e2e:	e0df      	b.n	8001ff0 <__aeabi_dsub+0x45c>
 8001e30:	464a      	mov	r2, r9
 8001e32:	431a      	orrs	r2, r3
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x2a6>
 8001e38:	e15c      	b.n	80020f4 <__aeabi_dsub+0x560>
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x2ac>
 8001e3e:	e1cf      	b.n	80021e0 <__aeabi_dsub+0x64c>
 8001e40:	003a      	movs	r2, r7
 8001e42:	4302      	orrs	r2, r0
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x2b4>
 8001e46:	e17f      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001e48:	1a1c      	subs	r4, r3, r0
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	42a3      	cmp	r3, r4
 8001e4e:	4189      	sbcs	r1, r1
 8001e50:	1bd2      	subs	r2, r2, r7
 8001e52:	4249      	negs	r1, r1
 8001e54:	1a52      	subs	r2, r2, r1
 8001e56:	4692      	mov	sl, r2
 8001e58:	0212      	lsls	r2, r2, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x2ca>
 8001e5c:	e20a      	b.n	8002274 <__aeabi_dsub+0x6e0>
 8001e5e:	1ac4      	subs	r4, r0, r3
 8001e60:	42a0      	cmp	r0, r4
 8001e62:	4180      	sbcs	r0, r0
 8001e64:	464b      	mov	r3, r9
 8001e66:	4240      	negs	r0, r0
 8001e68:	1aff      	subs	r7, r7, r3
 8001e6a:	1a3b      	subs	r3, r7, r0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	465d      	mov	r5, fp
 8001e70:	e71a      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001e72:	003a      	movs	r2, r7
 8001e74:	4302      	orrs	r2, r0
 8001e76:	d073      	beq.n	8001f60 <__aeabi_dsub+0x3cc>
 8001e78:	0022      	movs	r2, r4
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	2c01      	cmp	r4, #1
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x2ee>
 8001e80:	e0cb      	b.n	800201a <__aeabi_dsub+0x486>
 8001e82:	4554      	cmp	r4, sl
 8001e84:	d042      	beq.n	8001f0c <__aeabi_dsub+0x378>
 8001e86:	4694      	mov	ip, r2
 8001e88:	e748      	b.n	8001d1c <__aeabi_dsub+0x188>
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	3b1f      	subs	r3, #31
 8001e8e:	40d8      	lsrs	r0, r3
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d003      	beq.n	8001e9c <__aeabi_dsub+0x308>
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	1a5b      	subs	r3, r3, r1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	4314      	orrs	r4, r2
 8001e9c:	1e63      	subs	r3, r4, #1
 8001e9e:	419c      	sbcs	r4, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	469a      	mov	sl, r3
 8001ea6:	4304      	orrs	r4, r0
 8001ea8:	0763      	lsls	r3, r4, #29
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x31a>
 8001eac:	e6fe      	b.n	8001cac <__aeabi_dsub+0x118>
 8001eae:	4652      	mov	r2, sl
 8001eb0:	08e3      	lsrs	r3, r4, #3
 8001eb2:	0752      	lsls	r2, r2, #29
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	46b4      	mov	ip, r6
 8001eba:	08d2      	lsrs	r2, r2, #3
 8001ebc:	490f      	ldr	r1, [pc, #60]	; (8001efc <__aeabi_dsub+0x368>)
 8001ebe:	458c      	cmp	ip, r1
 8001ec0:	d02a      	beq.n	8001f18 <__aeabi_dsub+0x384>
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	0b14      	lsrs	r4, r2, #12
 8001ec6:	4662      	mov	r2, ip
 8001ec8:	0552      	lsls	r2, r2, #21
 8001eca:	0d52      	lsrs	r2, r2, #21
 8001ecc:	e70c      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4304      	orrs	r4, r0
 8001ed2:	1e62      	subs	r2, r4, #1
 8001ed4:	4194      	sbcs	r4, r2
 8001ed6:	18e4      	adds	r4, r4, r3
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	4252      	negs	r2, r2
 8001ede:	444a      	add	r2, r9
 8001ee0:	4692      	mov	sl, r2
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	d5df      	bpl.n	8001ea8 <__aeabi_dsub+0x314>
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__aeabi_dsub+0x368>)
 8001eea:	3601      	adds	r6, #1
 8001eec:	429e      	cmp	r6, r3
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x35e>
 8001ef0:	e0a0      	b.n	8002034 <__aeabi_dsub+0x4a0>
 8001ef2:	0032      	movs	r2, r6
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e6f6      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	ff7fffff 	.word	0xff7fffff
 8001f04:	fffff801 	.word	0xfffff801
 8001f08:	000007fe 	.word	0x000007fe
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	464a      	mov	r2, r9
 8001f10:	0752      	lsls	r2, r2, #29
 8001f12:	4313      	orrs	r3, r2
 8001f14:	464a      	mov	r2, r9
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x38c>
 8001f1e:	e1b5      	b.n	800228c <__aeabi_dsub+0x6f8>
 8001f20:	2480      	movs	r4, #128	; 0x80
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4314      	orrs	r4, r2
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	4ad5      	ldr	r2, [pc, #852]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	e6dc      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f000 fae2 	bl	80024f8 <__clzsi2>
 8001f34:	0003      	movs	r3, r0
 8001f36:	3318      	adds	r3, #24
 8001f38:	2b1f      	cmp	r3, #31
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dsub+0x3aa>
 8001f3c:	e695      	b.n	8001c6a <__aeabi_dsub+0xd6>
 8001f3e:	0022      	movs	r2, r4
 8001f40:	3808      	subs	r0, #8
 8001f42:	4082      	lsls	r2, r0
 8001f44:	2400      	movs	r4, #0
 8001f46:	429e      	cmp	r6, r3
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x3b8>
 8001f4a:	e69a      	b.n	8001c82 <__aeabi_dsub+0xee>
 8001f4c:	1af6      	subs	r6, r6, r3
 8001f4e:	4bcd      	ldr	r3, [pc, #820]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001f50:	401a      	ands	r2, r3
 8001f52:	4692      	mov	sl, r2
 8001f54:	e6a8      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001f56:	003c      	movs	r4, r7
 8001f58:	4304      	orrs	r4, r0
 8001f5a:	1e62      	subs	r2, r4, #1
 8001f5c:	4194      	sbcs	r4, r2
 8001f5e:	e66c      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8001f60:	464a      	mov	r2, r9
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	0752      	lsls	r2, r2, #29
 8001f66:	4313      	orrs	r3, r2
 8001f68:	464a      	mov	r2, r9
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	e7a6      	b.n	8001ebc <__aeabi_dsub+0x328>
 8001f6e:	4cc6      	ldr	r4, [pc, #792]	; (8002288 <__aeabi_dsub+0x6f4>)
 8001f70:	1c72      	adds	r2, r6, #1
 8001f72:	4222      	tst	r2, r4
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dsub+0x3e4>
 8001f76:	e0ac      	b.n	80020d2 <__aeabi_dsub+0x53e>
 8001f78:	464a      	mov	r2, r9
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	2e00      	cmp	r6, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x3ee>
 8001f80:	e105      	b.n	800218e <__aeabi_dsub+0x5fa>
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x3f4>
 8001f86:	e156      	b.n	8002236 <__aeabi_dsub+0x6a2>
 8001f88:	003a      	movs	r2, r7
 8001f8a:	4302      	orrs	r2, r0
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x3fc>
 8001f8e:	e0db      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001f90:	181c      	adds	r4, r3, r0
 8001f92:	429c      	cmp	r4, r3
 8001f94:	419b      	sbcs	r3, r3
 8001f96:	444f      	add	r7, r9
 8001f98:	46ba      	mov	sl, r7
 8001f9a:	425b      	negs	r3, r3
 8001f9c:	449a      	add	sl, r3
 8001f9e:	4653      	mov	r3, sl
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	d400      	bmi.n	8001fa6 <__aeabi_dsub+0x412>
 8001fa4:	e780      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	4bb6      	ldr	r3, [pc, #728]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001faa:	2601      	movs	r6, #1
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e77a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fb2:	4cb3      	ldr	r4, [pc, #716]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001fb4:	42a2      	cmp	r2, r4
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x426>
 8001fb8:	e0c0      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001fba:	2480      	movs	r4, #128	; 0x80
 8001fbc:	464d      	mov	r5, r9
 8001fbe:	0424      	lsls	r4, r4, #16
 8001fc0:	4325      	orrs	r5, r4
 8001fc2:	46a9      	mov	r9, r5
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	2c38      	cmp	r4, #56	; 0x38
 8001fc8:	dc53      	bgt.n	8002072 <__aeabi_dsub+0x4de>
 8001fca:	4661      	mov	r1, ip
 8001fcc:	2c1f      	cmp	r4, #31
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0x43e>
 8001fd0:	e0cd      	b.n	800216e <__aeabi_dsub+0x5da>
 8001fd2:	2520      	movs	r5, #32
 8001fd4:	001e      	movs	r6, r3
 8001fd6:	1b2d      	subs	r5, r5, r4
 8001fd8:	464c      	mov	r4, r9
 8001fda:	40ab      	lsls	r3, r5
 8001fdc:	40ac      	lsls	r4, r5
 8001fde:	40ce      	lsrs	r6, r1
 8001fe0:	1e5d      	subs	r5, r3, #1
 8001fe2:	41ab      	sbcs	r3, r5
 8001fe4:	4334      	orrs	r4, r6
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	464c      	mov	r4, r9
 8001fea:	40cc      	lsrs	r4, r1
 8001fec:	1b3f      	subs	r7, r7, r4
 8001fee:	e045      	b.n	800207c <__aeabi_dsub+0x4e8>
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	1a1c      	subs	r4, r3, r0
 8001ff4:	1bd1      	subs	r1, r2, r7
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	4192      	sbcs	r2, r2
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	4692      	mov	sl, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	4651      	mov	r1, sl
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4692      	mov	sl, r2
 8002006:	0212      	lsls	r2, r2, #8
 8002008:	d500      	bpl.n	800200c <__aeabi_dsub+0x478>
 800200a:	e083      	b.n	8002114 <__aeabi_dsub+0x580>
 800200c:	4653      	mov	r3, sl
 800200e:	4323      	orrs	r3, r4
 8002010:	d000      	beq.n	8002014 <__aeabi_dsub+0x480>
 8002012:	e621      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002014:	2200      	movs	r2, #0
 8002016:	2500      	movs	r5, #0
 8002018:	e753      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 800201a:	181c      	adds	r4, r3, r0
 800201c:	429c      	cmp	r4, r3
 800201e:	419b      	sbcs	r3, r3
 8002020:	444f      	add	r7, r9
 8002022:	46ba      	mov	sl, r7
 8002024:	425b      	negs	r3, r3
 8002026:	449a      	add	sl, r3
 8002028:	4653      	mov	r3, sl
 800202a:	2601      	movs	r6, #1
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	d400      	bmi.n	8002032 <__aeabi_dsub+0x49e>
 8002030:	e73a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8002032:	2602      	movs	r6, #2
 8002034:	4652      	mov	r2, sl
 8002036:	4b93      	ldr	r3, [pc, #588]	; (8002284 <__aeabi_dsub+0x6f0>)
 8002038:	2101      	movs	r1, #1
 800203a:	401a      	ands	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	4021      	ands	r1, r4
 8002040:	0862      	lsrs	r2, r4, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	07dc      	lsls	r4, r3, #31
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	469a      	mov	sl, r3
 800204a:	4314      	orrs	r4, r2
 800204c:	e62c      	b.n	8001ca8 <__aeabi_dsub+0x114>
 800204e:	0039      	movs	r1, r7
 8002050:	3a20      	subs	r2, #32
 8002052:	40d1      	lsrs	r1, r2
 8002054:	4662      	mov	r2, ip
 8002056:	2a20      	cmp	r2, #32
 8002058:	d006      	beq.n	8002068 <__aeabi_dsub+0x4d4>
 800205a:	4664      	mov	r4, ip
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	1b12      	subs	r2, r2, r4
 8002060:	003c      	movs	r4, r7
 8002062:	4094      	lsls	r4, r2
 8002064:	4304      	orrs	r4, r0
 8002066:	9401      	str	r4, [sp, #4]
 8002068:	9c01      	ldr	r4, [sp, #4]
 800206a:	1e62      	subs	r2, r4, #1
 800206c:	4194      	sbcs	r4, r2
 800206e:	430c      	orrs	r4, r1
 8002070:	e5e3      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8002072:	4649      	mov	r1, r9
 8002074:	4319      	orrs	r1, r3
 8002076:	000b      	movs	r3, r1
 8002078:	1e5c      	subs	r4, r3, #1
 800207a:	41a3      	sbcs	r3, r4
 800207c:	1ac4      	subs	r4, r0, r3
 800207e:	42a0      	cmp	r0, r4
 8002080:	419b      	sbcs	r3, r3
 8002082:	425b      	negs	r3, r3
 8002084:	1afb      	subs	r3, r7, r3
 8002086:	469a      	mov	sl, r3
 8002088:	465d      	mov	r5, fp
 800208a:	0016      	movs	r6, r2
 800208c:	e5dc      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800208e:	4649      	mov	r1, r9
 8002090:	4319      	orrs	r1, r3
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x502>
 8002094:	e0ae      	b.n	80021f4 <__aeabi_dsub+0x660>
 8002096:	4661      	mov	r1, ip
 8002098:	4664      	mov	r4, ip
 800209a:	3901      	subs	r1, #1
 800209c:	2c01      	cmp	r4, #1
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x50e>
 80020a0:	e0e0      	b.n	8002264 <__aeabi_dsub+0x6d0>
 80020a2:	4c77      	ldr	r4, [pc, #476]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020a4:	45a4      	cmp	ip, r4
 80020a6:	d056      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 80020a8:	468c      	mov	ip, r1
 80020aa:	e69a      	b.n	8001de2 <__aeabi_dsub+0x24e>
 80020ac:	4661      	mov	r1, ip
 80020ae:	2220      	movs	r2, #32
 80020b0:	003c      	movs	r4, r7
 80020b2:	1a52      	subs	r2, r2, r1
 80020b4:	4094      	lsls	r4, r2
 80020b6:	0001      	movs	r1, r0
 80020b8:	4090      	lsls	r0, r2
 80020ba:	46a0      	mov	r8, r4
 80020bc:	4664      	mov	r4, ip
 80020be:	1e42      	subs	r2, r0, #1
 80020c0:	4190      	sbcs	r0, r2
 80020c2:	4662      	mov	r2, ip
 80020c4:	40e1      	lsrs	r1, r4
 80020c6:	4644      	mov	r4, r8
 80020c8:	40d7      	lsrs	r7, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	4304      	orrs	r4, r0
 80020ce:	44b9      	add	r9, r7
 80020d0:	e701      	b.n	8001ed6 <__aeabi_dsub+0x342>
 80020d2:	496b      	ldr	r1, [pc, #428]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020d4:	428a      	cmp	r2, r1
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x546>
 80020d8:	e70c      	b.n	8001ef4 <__aeabi_dsub+0x360>
 80020da:	1818      	adds	r0, r3, r0
 80020dc:	4298      	cmp	r0, r3
 80020de:	419b      	sbcs	r3, r3
 80020e0:	444f      	add	r7, r9
 80020e2:	425b      	negs	r3, r3
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	07dc      	lsls	r4, r3, #31
 80020e8:	0840      	lsrs	r0, r0, #1
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	469a      	mov	sl, r3
 80020ee:	0016      	movs	r6, r2
 80020f0:	4304      	orrs	r4, r0
 80020f2:	e6d9      	b.n	8001ea8 <__aeabi_dsub+0x314>
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x566>
 80020f8:	e081      	b.n	80021fe <__aeabi_dsub+0x66a>
 80020fa:	003b      	movs	r3, r7
 80020fc:	4303      	orrs	r3, r0
 80020fe:	d11d      	bne.n	800213c <__aeabi_dsub+0x5a8>
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	2500      	movs	r5, #0
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	e70b      	b.n	8001f20 <__aeabi_dsub+0x38c>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e6d3      	b.n	8001ebc <__aeabi_dsub+0x328>
 8002114:	1ac4      	subs	r4, r0, r3
 8002116:	42a0      	cmp	r0, r4
 8002118:	4180      	sbcs	r0, r0
 800211a:	464b      	mov	r3, r9
 800211c:	4240      	negs	r0, r0
 800211e:	1aff      	subs	r7, r7, r3
 8002120:	1a3b      	subs	r3, r7, r0
 8002122:	469a      	mov	sl, r3
 8002124:	465d      	mov	r5, fp
 8002126:	e597      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002128:	1a1c      	subs	r4, r3, r0
 800212a:	464a      	mov	r2, r9
 800212c:	42a3      	cmp	r3, r4
 800212e:	419b      	sbcs	r3, r3
 8002130:	1bd7      	subs	r7, r2, r7
 8002132:	425b      	negs	r3, r3
 8002134:	1afb      	subs	r3, r7, r3
 8002136:	469a      	mov	sl, r3
 8002138:	2601      	movs	r6, #1
 800213a:	e585      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800213c:	08c0      	lsrs	r0, r0, #3
 800213e:	077b      	lsls	r3, r7, #29
 8002140:	465d      	mov	r5, fp
 8002142:	4303      	orrs	r3, r0
 8002144:	08fa      	lsrs	r2, r7, #3
 8002146:	e6e7      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002148:	464a      	mov	r2, r9
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4313      	orrs	r3, r2
 8002150:	464a      	mov	r2, r9
 8002152:	08d2      	lsrs	r2, r2, #3
 8002154:	e6b5      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e6db      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002160:	4649      	mov	r1, r9
 8002162:	4319      	orrs	r1, r3
 8002164:	000b      	movs	r3, r1
 8002166:	1e59      	subs	r1, r3, #1
 8002168:	418b      	sbcs	r3, r1
 800216a:	001c      	movs	r4, r3
 800216c:	e653      	b.n	8001e16 <__aeabi_dsub+0x282>
 800216e:	464d      	mov	r5, r9
 8002170:	3c20      	subs	r4, #32
 8002172:	40e5      	lsrs	r5, r4
 8002174:	2920      	cmp	r1, #32
 8002176:	d005      	beq.n	8002184 <__aeabi_dsub+0x5f0>
 8002178:	2440      	movs	r4, #64	; 0x40
 800217a:	1a64      	subs	r4, r4, r1
 800217c:	4649      	mov	r1, r9
 800217e:	40a1      	lsls	r1, r4
 8002180:	430b      	orrs	r3, r1
 8002182:	4698      	mov	r8, r3
 8002184:	4643      	mov	r3, r8
 8002186:	1e5c      	subs	r4, r3, #1
 8002188:	41a3      	sbcs	r3, r4
 800218a:	432b      	orrs	r3, r5
 800218c:	e776      	b.n	800207c <__aeabi_dsub+0x4e8>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d0e1      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 8002192:	003a      	movs	r2, r7
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	4302      	orrs	r2, r0
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x608>
 800219a:	e6b8      	b.n	8001f0e <__aeabi_dsub+0x37a>
 800219c:	464a      	mov	r2, r9
 800219e:	0752      	lsls	r2, r2, #29
 80021a0:	2480      	movs	r4, #128	; 0x80
 80021a2:	4313      	orrs	r3, r2
 80021a4:	464a      	mov	r2, r9
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	08d2      	lsrs	r2, r2, #3
 80021aa:	4222      	tst	r2, r4
 80021ac:	d007      	beq.n	80021be <__aeabi_dsub+0x62a>
 80021ae:	08fe      	lsrs	r6, r7, #3
 80021b0:	4226      	tst	r6, r4
 80021b2:	d104      	bne.n	80021be <__aeabi_dsub+0x62a>
 80021b4:	465d      	mov	r5, fp
 80021b6:	0032      	movs	r2, r6
 80021b8:	08c3      	lsrs	r3, r0, #3
 80021ba:	077f      	lsls	r7, r7, #29
 80021bc:	433b      	orrs	r3, r7
 80021be:	0f59      	lsrs	r1, r3, #29
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	0749      	lsls	r1, r1, #29
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	430b      	orrs	r3, r1
 80021c8:	e6a6      	b.n	8001f18 <__aeabi_dsub+0x384>
 80021ca:	1ac4      	subs	r4, r0, r3
 80021cc:	42a0      	cmp	r0, r4
 80021ce:	4180      	sbcs	r0, r0
 80021d0:	464b      	mov	r3, r9
 80021d2:	4240      	negs	r0, r0
 80021d4:	1aff      	subs	r7, r7, r3
 80021d6:	1a3b      	subs	r3, r7, r0
 80021d8:	469a      	mov	sl, r3
 80021da:	465d      	mov	r5, fp
 80021dc:	2601      	movs	r6, #1
 80021de:	e533      	b.n	8001c48 <__aeabi_dsub+0xb4>
 80021e0:	003b      	movs	r3, r7
 80021e2:	4303      	orrs	r3, r0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x654>
 80021e6:	e715      	b.n	8002014 <__aeabi_dsub+0x480>
 80021e8:	08c0      	lsrs	r0, r0, #3
 80021ea:	077b      	lsls	r3, r7, #29
 80021ec:	465d      	mov	r5, fp
 80021ee:	4303      	orrs	r3, r0
 80021f0:	08fa      	lsrs	r2, r7, #3
 80021f2:	e666      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 80021f4:	08c0      	lsrs	r0, r0, #3
 80021f6:	077b      	lsls	r3, r7, #29
 80021f8:	4303      	orrs	r3, r0
 80021fa:	08fa      	lsrs	r2, r7, #3
 80021fc:	e65e      	b.n	8001ebc <__aeabi_dsub+0x328>
 80021fe:	003a      	movs	r2, r7
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	4302      	orrs	r2, r0
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x674>
 8002206:	e682      	b.n	8001f0e <__aeabi_dsub+0x37a>
 8002208:	464a      	mov	r2, r9
 800220a:	0752      	lsls	r2, r2, #29
 800220c:	2480      	movs	r4, #128	; 0x80
 800220e:	4313      	orrs	r3, r2
 8002210:	464a      	mov	r2, r9
 8002212:	0324      	lsls	r4, r4, #12
 8002214:	08d2      	lsrs	r2, r2, #3
 8002216:	4222      	tst	r2, r4
 8002218:	d007      	beq.n	800222a <__aeabi_dsub+0x696>
 800221a:	08fe      	lsrs	r6, r7, #3
 800221c:	4226      	tst	r6, r4
 800221e:	d104      	bne.n	800222a <__aeabi_dsub+0x696>
 8002220:	465d      	mov	r5, fp
 8002222:	0032      	movs	r2, r6
 8002224:	08c3      	lsrs	r3, r0, #3
 8002226:	077f      	lsls	r7, r7, #29
 8002228:	433b      	orrs	r3, r7
 800222a:	0f59      	lsrs	r1, r3, #29
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	0749      	lsls	r1, r1, #29
 8002232:	430b      	orrs	r3, r1
 8002234:	e670      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002236:	08c0      	lsrs	r0, r0, #3
 8002238:	077b      	lsls	r3, r7, #29
 800223a:	4303      	orrs	r3, r0
 800223c:	08fa      	lsrs	r2, r7, #3
 800223e:	e640      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002240:	464c      	mov	r4, r9
 8002242:	3920      	subs	r1, #32
 8002244:	40cc      	lsrs	r4, r1
 8002246:	4661      	mov	r1, ip
 8002248:	2920      	cmp	r1, #32
 800224a:	d006      	beq.n	800225a <__aeabi_dsub+0x6c6>
 800224c:	4666      	mov	r6, ip
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	1b89      	subs	r1, r1, r6
 8002252:	464e      	mov	r6, r9
 8002254:	408e      	lsls	r6, r1
 8002256:	4333      	orrs	r3, r6
 8002258:	4698      	mov	r8, r3
 800225a:	4643      	mov	r3, r8
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	418b      	sbcs	r3, r1
 8002260:	431c      	orrs	r4, r3
 8002262:	e5d8      	b.n	8001e16 <__aeabi_dsub+0x282>
 8002264:	181c      	adds	r4, r3, r0
 8002266:	4284      	cmp	r4, r0
 8002268:	4180      	sbcs	r0, r0
 800226a:	444f      	add	r7, r9
 800226c:	46ba      	mov	sl, r7
 800226e:	4240      	negs	r0, r0
 8002270:	4482      	add	sl, r0
 8002272:	e6d9      	b.n	8002028 <__aeabi_dsub+0x494>
 8002274:	4653      	mov	r3, sl
 8002276:	4323      	orrs	r3, r4
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x6e8>
 800227a:	e6cb      	b.n	8002014 <__aeabi_dsub+0x480>
 800227c:	e614      	b.n	8001ea8 <__aeabi_dsub+0x314>
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	000007ff 	.word	0x000007ff
 8002284:	ff7fffff 	.word	0xff7fffff
 8002288:	000007fe 	.word	0x000007fe
 800228c:	2300      	movs	r3, #0
 800228e:	4a01      	ldr	r2, [pc, #4]	; (8002294 <__aeabi_dsub+0x700>)
 8002290:	001c      	movs	r4, r3
 8002292:	e529      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8002294:	000007ff 	.word	0x000007ff

08002298 <__aeabi_dcmpun>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	0005      	movs	r5, r0
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <__aeabi_dcmpun+0x38>)
 800229e:	031c      	lsls	r4, r3, #12
 80022a0:	0016      	movs	r6, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	030a      	lsls	r2, r1, #12
 80022a6:	0049      	lsls	r1, r1, #1
 80022a8:	0b12      	lsrs	r2, r2, #12
 80022aa:	0d49      	lsrs	r1, r1, #21
 80022ac:	0b24      	lsrs	r4, r4, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	4281      	cmp	r1, r0
 80022b2:	d008      	beq.n	80022c6 <__aeabi_dcmpun+0x2e>
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <__aeabi_dcmpun+0x38>)
 80022b6:	2000      	movs	r0, #0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022bc:	0020      	movs	r0, r4
 80022be:	4330      	orrs	r0, r6
 80022c0:	1e43      	subs	r3, r0, #1
 80022c2:	4198      	sbcs	r0, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	2001      	movs	r0, #1
 80022c8:	432a      	orrs	r2, r5
 80022ca:	d1fb      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022cc:	e7f2      	b.n	80022b4 <__aeabi_dcmpun+0x1c>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_d2iz>:
 80022d4:	000a      	movs	r2, r1
 80022d6:	b530      	push	{r4, r5, lr}
 80022d8:	4c13      	ldr	r4, [pc, #76]	; (8002328 <__aeabi_d2iz+0x54>)
 80022da:	0053      	lsls	r3, r2, #1
 80022dc:	0309      	lsls	r1, r1, #12
 80022de:	0005      	movs	r5, r0
 80022e0:	0b09      	lsrs	r1, r1, #12
 80022e2:	2000      	movs	r0, #0
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	0fd2      	lsrs	r2, r2, #31
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	dd04      	ble.n	80022f6 <__aeabi_d2iz+0x22>
 80022ec:	480f      	ldr	r0, [pc, #60]	; (800232c <__aeabi_d2iz+0x58>)
 80022ee:	4283      	cmp	r3, r0
 80022f0:	dd02      	ble.n	80022f8 <__aeabi_d2iz+0x24>
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <__aeabi_d2iz+0x5c>)
 80022f4:	18d0      	adds	r0, r2, r3
 80022f6:	bd30      	pop	{r4, r5, pc}
 80022f8:	2080      	movs	r0, #128	; 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4301      	orrs	r1, r0
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <__aeabi_d2iz+0x60>)
 8002300:	1ac0      	subs	r0, r0, r3
 8002302:	281f      	cmp	r0, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x44>
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <__aeabi_d2iz+0x64>)
 8002308:	1ac3      	subs	r3, r0, r3
 800230a:	40d9      	lsrs	r1, r3
 800230c:	000b      	movs	r3, r1
 800230e:	4258      	negs	r0, r3
 8002310:	2a00      	cmp	r2, #0
 8002312:	d1f0      	bne.n	80022f6 <__aeabi_d2iz+0x22>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ee      	b.n	80022f6 <__aeabi_d2iz+0x22>
 8002318:	4c08      	ldr	r4, [pc, #32]	; (800233c <__aeabi_d2iz+0x68>)
 800231a:	40c5      	lsrs	r5, r0
 800231c:	46a4      	mov	ip, r4
 800231e:	4463      	add	r3, ip
 8002320:	4099      	lsls	r1, r3
 8002322:	000b      	movs	r3, r1
 8002324:	432b      	orrs	r3, r5
 8002326:	e7f2      	b.n	800230e <__aeabi_d2iz+0x3a>
 8002328:	000003fe 	.word	0x000003fe
 800232c:	0000041d 	.word	0x0000041d
 8002330:	7fffffff 	.word	0x7fffffff
 8002334:	00000433 	.word	0x00000433
 8002338:	00000413 	.word	0x00000413
 800233c:	fffffbed 	.word	0xfffffbed

08002340 <__aeabi_i2d>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	2800      	cmp	r0, #0
 8002344:	d016      	beq.n	8002374 <__aeabi_i2d+0x34>
 8002346:	17c3      	asrs	r3, r0, #31
 8002348:	18c5      	adds	r5, r0, r3
 800234a:	405d      	eors	r5, r3
 800234c:	0fc4      	lsrs	r4, r0, #31
 800234e:	0028      	movs	r0, r5
 8002350:	f000 f8d2 	bl	80024f8 <__clzsi2>
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <__aeabi_i2d+0x5c>)
 8002356:	1a1b      	subs	r3, r3, r0
 8002358:	280a      	cmp	r0, #10
 800235a:	dc16      	bgt.n	800238a <__aeabi_i2d+0x4a>
 800235c:	0002      	movs	r2, r0
 800235e:	002e      	movs	r6, r5
 8002360:	3215      	adds	r2, #21
 8002362:	4096      	lsls	r6, r2
 8002364:	220b      	movs	r2, #11
 8002366:	1a12      	subs	r2, r2, r0
 8002368:	40d5      	lsrs	r5, r2
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	032d      	lsls	r5, r5, #12
 800236e:	0b2d      	lsrs	r5, r5, #12
 8002370:	0d5b      	lsrs	r3, r3, #21
 8002372:	e003      	b.n	800237c <__aeabi_i2d+0x3c>
 8002374:	2400      	movs	r4, #0
 8002376:	2300      	movs	r3, #0
 8002378:	2500      	movs	r5, #0
 800237a:	2600      	movs	r6, #0
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	432b      	orrs	r3, r5
 8002380:	07e4      	lsls	r4, r4, #31
 8002382:	4323      	orrs	r3, r4
 8002384:	0030      	movs	r0, r6
 8002386:	0019      	movs	r1, r3
 8002388:	bd70      	pop	{r4, r5, r6, pc}
 800238a:	380b      	subs	r0, #11
 800238c:	4085      	lsls	r5, r0
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	032d      	lsls	r5, r5, #12
 8002392:	2600      	movs	r6, #0
 8002394:	0b2d      	lsrs	r5, r5, #12
 8002396:	0d5b      	lsrs	r3, r3, #21
 8002398:	e7f0      	b.n	800237c <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f8a7 	bl	80024f8 <__clzsi2>
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <__aeabi_ui2d+0x48>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	280a      	cmp	r0, #10
 80023b0:	dc11      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b2:	220b      	movs	r2, #11
 80023b4:	0021      	movs	r1, r4
 80023b6:	1a12      	subs	r2, r2, r0
 80023b8:	40d1      	lsrs	r1, r2
 80023ba:	3015      	adds	r0, #21
 80023bc:	030a      	lsls	r2, r1, #12
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	4084      	lsls	r4, r0
 80023c2:	0b12      	lsrs	r2, r2, #12
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	055b      	lsls	r3, r3, #21
 80023de:	0312      	lsls	r2, r2, #12
 80023e0:	2400      	movs	r4, #0
 80023e2:	0b12      	lsrs	r2, r2, #12
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	e7f1      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e8:	0000041e 	.word	0x0000041e

080023ec <__aeabi_d2f>:
 80023ec:	0002      	movs	r2, r0
 80023ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f0:	004b      	lsls	r3, r1, #1
 80023f2:	030d      	lsls	r5, r1, #12
 80023f4:	0f40      	lsrs	r0, r0, #29
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	0fcc      	lsrs	r4, r1, #31
 80023fa:	0a6d      	lsrs	r5, r5, #9
 80023fc:	493a      	ldr	r1, [pc, #232]	; (80024e8 <__aeabi_d2f+0xfc>)
 80023fe:	4305      	orrs	r5, r0
 8002400:	1c58      	adds	r0, r3, #1
 8002402:	00d7      	lsls	r7, r2, #3
 8002404:	4208      	tst	r0, r1
 8002406:	d00a      	beq.n	800241e <__aeabi_d2f+0x32>
 8002408:	4938      	ldr	r1, [pc, #224]	; (80024ec <__aeabi_d2f+0x100>)
 800240a:	1859      	adds	r1, r3, r1
 800240c:	29fe      	cmp	r1, #254	; 0xfe
 800240e:	dd16      	ble.n	800243e <__aeabi_d2f+0x52>
 8002410:	20ff      	movs	r0, #255	; 0xff
 8002412:	2200      	movs	r2, #0
 8002414:	05c0      	lsls	r0, r0, #23
 8002416:	4310      	orrs	r0, r2
 8002418:	07e4      	lsls	r4, r4, #31
 800241a:	4320      	orrs	r0, r4
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <__aeabi_d2f+0x44>
 8002422:	433d      	orrs	r5, r7
 8002424:	d026      	beq.n	8002474 <__aeabi_d2f+0x88>
 8002426:	2205      	movs	r2, #5
 8002428:	0192      	lsls	r2, r2, #6
 800242a:	0a52      	lsrs	r2, r2, #9
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	e7f1      	b.n	8002414 <__aeabi_d2f+0x28>
 8002430:	432f      	orrs	r7, r5
 8002432:	d0ed      	beq.n	8002410 <__aeabi_d2f+0x24>
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	03d2      	lsls	r2, r2, #15
 8002438:	20ff      	movs	r0, #255	; 0xff
 800243a:	432a      	orrs	r2, r5
 800243c:	e7ea      	b.n	8002414 <__aeabi_d2f+0x28>
 800243e:	2900      	cmp	r1, #0
 8002440:	dd1b      	ble.n	800247a <__aeabi_d2f+0x8e>
 8002442:	0192      	lsls	r2, r2, #6
 8002444:	1e50      	subs	r0, r2, #1
 8002446:	4182      	sbcs	r2, r0
 8002448:	00ed      	lsls	r5, r5, #3
 800244a:	0f7f      	lsrs	r7, r7, #29
 800244c:	432a      	orrs	r2, r5
 800244e:	433a      	orrs	r2, r7
 8002450:	0753      	lsls	r3, r2, #29
 8002452:	d047      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002454:	230f      	movs	r3, #15
 8002456:	4013      	ands	r3, r2
 8002458:	2b04      	cmp	r3, #4
 800245a:	d000      	beq.n	800245e <__aeabi_d2f+0x72>
 800245c:	3204      	adds	r2, #4
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	04db      	lsls	r3, r3, #19
 8002462:	4013      	ands	r3, r2
 8002464:	d03e      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002466:	1c48      	adds	r0, r1, #1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	d0d1      	beq.n	8002410 <__aeabi_d2f+0x24>
 800246c:	0192      	lsls	r2, r2, #6
 800246e:	0a52      	lsrs	r2, r2, #9
 8002470:	b2c0      	uxtb	r0, r0
 8002472:	e7cf      	b.n	8002414 <__aeabi_d2f+0x28>
 8002474:	2000      	movs	r0, #0
 8002476:	2200      	movs	r2, #0
 8002478:	e7cc      	b.n	8002414 <__aeabi_d2f+0x28>
 800247a:	000a      	movs	r2, r1
 800247c:	3217      	adds	r2, #23
 800247e:	db2f      	blt.n	80024e0 <__aeabi_d2f+0xf4>
 8002480:	2680      	movs	r6, #128	; 0x80
 8002482:	0436      	lsls	r6, r6, #16
 8002484:	432e      	orrs	r6, r5
 8002486:	251e      	movs	r5, #30
 8002488:	1a6d      	subs	r5, r5, r1
 800248a:	2d1f      	cmp	r5, #31
 800248c:	dd11      	ble.n	80024b2 <__aeabi_d2f+0xc6>
 800248e:	2202      	movs	r2, #2
 8002490:	4252      	negs	r2, r2
 8002492:	1a52      	subs	r2, r2, r1
 8002494:	0031      	movs	r1, r6
 8002496:	40d1      	lsrs	r1, r2
 8002498:	2d20      	cmp	r5, #32
 800249a:	d004      	beq.n	80024a6 <__aeabi_d2f+0xba>
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <__aeabi_d2f+0x104>)
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	409e      	lsls	r6, r3
 80024a4:	4337      	orrs	r7, r6
 80024a6:	003a      	movs	r2, r7
 80024a8:	1e53      	subs	r3, r2, #1
 80024aa:	419a      	sbcs	r2, r3
 80024ac:	430a      	orrs	r2, r1
 80024ae:	2100      	movs	r1, #0
 80024b0:	e7ce      	b.n	8002450 <__aeabi_d2f+0x64>
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <__aeabi_d2f+0x108>)
 80024b4:	0038      	movs	r0, r7
 80024b6:	4694      	mov	ip, r2
 80024b8:	4463      	add	r3, ip
 80024ba:	4098      	lsls	r0, r3
 80024bc:	003a      	movs	r2, r7
 80024be:	1e41      	subs	r1, r0, #1
 80024c0:	4188      	sbcs	r0, r1
 80024c2:	409e      	lsls	r6, r3
 80024c4:	40ea      	lsrs	r2, r5
 80024c6:	4330      	orrs	r0, r6
 80024c8:	4302      	orrs	r2, r0
 80024ca:	2100      	movs	r1, #0
 80024cc:	0753      	lsls	r3, r2, #29
 80024ce:	d1c1      	bne.n	8002454 <__aeabi_d2f+0x68>
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0013      	movs	r3, r2
 80024d4:	04c9      	lsls	r1, r1, #19
 80024d6:	2001      	movs	r0, #1
 80024d8:	400b      	ands	r3, r1
 80024da:	420a      	tst	r2, r1
 80024dc:	d1c6      	bne.n	800246c <__aeabi_d2f+0x80>
 80024de:	e7a3      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e0:	2300      	movs	r3, #0
 80024e2:	e7a0      	b.n	8002426 <__aeabi_d2f+0x3a>
 80024e4:	000b      	movs	r3, r1
 80024e6:	e79f      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e8:	000007fe 	.word	0x000007fe
 80024ec:	fffffc80 	.word	0xfffffc80
 80024f0:	fffffca2 	.word	0xfffffca2
 80024f4:	fffffc82 	.word	0xfffffc82

080024f8 <__clzsi2>:
 80024f8:	211c      	movs	r1, #28
 80024fa:	2301      	movs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	4298      	cmp	r0, r3
 8002500:	d301      	bcc.n	8002506 <__clzsi2+0xe>
 8002502:	0c00      	lsrs	r0, r0, #16
 8002504:	3910      	subs	r1, #16
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	4298      	cmp	r0, r3
 800250a:	d301      	bcc.n	8002510 <__clzsi2+0x18>
 800250c:	0a00      	lsrs	r0, r0, #8
 800250e:	3908      	subs	r1, #8
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	4298      	cmp	r0, r3
 8002514:	d301      	bcc.n	800251a <__clzsi2+0x22>
 8002516:	0900      	lsrs	r0, r0, #4
 8002518:	3904      	subs	r1, #4
 800251a:	a202      	add	r2, pc, #8	; (adr r2, 8002524 <__clzsi2+0x2c>)
 800251c:	5c10      	ldrb	r0, [r2, r0]
 800251e:	1840      	adds	r0, r0, r1
 8002520:	4770      	bx	lr
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	02020304 	.word	0x02020304
 8002528:	01010101 	.word	0x01010101
	...

08002534 <__clzdi2>:
 8002534:	b510      	push	{r4, lr}
 8002536:	2900      	cmp	r1, #0
 8002538:	d103      	bne.n	8002542 <__clzdi2+0xe>
 800253a:	f7ff ffdd 	bl	80024f8 <__clzsi2>
 800253e:	3020      	adds	r0, #32
 8002540:	e002      	b.n	8002548 <__clzdi2+0x14>
 8002542:	0008      	movs	r0, r1
 8002544:	f7ff ffd8 	bl	80024f8 <__clzsi2>
 8002548:	bd10      	pop	{r4, pc}
 800254a:	46c0      	nop			; (mov r8, r8)

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b5b0      	push	{r4, r5, r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002550:	f000 fe30 	bl	80031b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002554:	f000 f8c6 	bl	80026e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002558:	f000 fa5a 	bl	8002a10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800255c:	f000 f9d6 	bl	800290c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002560:	f000 f986 	bl	8002870 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002564:	f000 fa20 	bl	80029a8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002568:	f000 f904 	bl	8002774 <MX_I2C1_Init>
  MX_TIM6_Init();
 800256c:	f000 f942 	bl	80027f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , DBG_TX_TIMEOUT ) ;
 8002570:	4b4b      	ldr	r3, [pc, #300]	; (80026a0 <main+0x154>)
 8002572:	681c      	ldr	r4, [r3, #0]
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <main+0x154>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0018      	movs	r0, r3
 800257a:	f7fd fdc3 	bl	8000104 <strlen>
 800257e:	0003      	movs	r3, r0
 8002580:	b29a      	uxth	r2, r3
 8002582:	23fa      	movs	r3, #250	; 0xfa
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4847      	ldr	r0, [pc, #284]	; (80026a4 <main+0x158>)
 8002588:	0021      	movs	r1, r4
 800258a:	f002 fd8f 	bl	80050ac <HAL_UART_Transmit>
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 800258e:	4b46      	ldr	r3, [pc, #280]	; (80026a8 <main+0x15c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2202      	movs	r2, #2
 8002594:	4252      	negs	r2, r2
 8002596:	611a      	str	r2, [r3, #16]
  my_astro_off () ;
 8002598:	f000 fac8 	bl	8002b2c <my_astro_off>
  astronode_send_mpn_rr () ;
  astronode_send_msn_rr () ;
  astronode_send_mgi_rr () ;
  my_astro_off () ;
  */
  my_lx6_on () ;
 800259c:	f000 fad8 	bl	8002b50 <my_lx6_on>
  __NOP () ;
 80025a0:	46c0      	nop			; (mov r8, r8)

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  seek_fix_loop_flag = true ;
 80025a2:	4b42      	ldr	r3, [pc, #264]	; (80026ac <main+0x160>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <main+0x15c>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f002 fa06 	bl	80049bc <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_SET ) ;
 80025b0:	23a0      	movs	r3, #160	; 0xa0
 80025b2:	05db      	lsls	r3, r3, #23
 80025b4:	2201      	movs	r2, #1
 80025b6:	2120      	movs	r1, #32
 80025b8:	0018      	movs	r0, r3
 80025ba:	f001 f993 	bl	80038e4 <HAL_GPIO_WritePin>
	  while ( seek_fix_loop_flag )
 80025be:	e06a      	b.n	8002696 <main+0x14a>
	  {
		  HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , 1000 ) ;
 80025c0:	23fa      	movs	r3, #250	; 0xfa
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	493a      	ldr	r1, [pc, #232]	; (80026b0 <main+0x164>)
 80025c6:	483b      	ldr	r0, [pc, #236]	; (80026b4 <main+0x168>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	f002 fe0b 	bl	80051e4 <HAL_UART_Receive>
		  //HAL_UART_Receive ( HUART_DBG , &rxd_byte , 1 , 1000 ) ; // Receive nmea from DBG "sim_nmea_uart" python script
		  if ( rxd_byte )
 80025ce:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <main+0x164>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d05c      	beq.n	8002690 <main+0x144>
		  {
			  // HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , DBG_TX_TIMEOUT ) ; // Transmit all nmea to DBG
			  if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 80025d6:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <main+0x16c>)
 80025d8:	4938      	ldr	r1, [pc, #224]	; (80026bc <main+0x170>)
 80025da:	4b35      	ldr	r3, [pc, #212]	; (80026b0 <main+0x164>)
 80025dc:	0018      	movs	r0, r3
 80025de:	f003 fcdc 	bl	8005f9a <my_nmea_message>
 80025e2:	0003      	movs	r3, r0
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d153      	bne.n	8002690 <main+0x144>
			  {
				  if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80025e8:	4b34      	ldr	r3, [pc, #208]	; (80026bc <main+0x170>)
 80025ea:	0018      	movs	r0, r3
 80025ec:	f003 fd95 	bl	800611a <is_my_nmea_checksum_ok>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d04d      	beq.n	8002690 <main+0x144>
				  {
					  if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <main+0x174>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b30      	ldr	r3, [pc, #192]	; (80026bc <main+0x170>)
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f005 ff00 	bl	8008402 <strstr>
					  {

					  }
					  if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <main+0x178>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <main+0x170>)
 8002608:	0011      	movs	r1, r2
 800260a:	0018      	movs	r0, r3
 800260c:	f005 fef9 	bl	8008402 <strstr>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d024      	beq.n	800265e <main+0x112>
					  {
						  nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <main+0x170>)
 8002616:	0018      	movs	r0, r3
 8002618:	f003 fd2b 	bl	8006072 <get_my_nmea_gngsa_fixed_mode_s>
 800261c:	0003      	movs	r3, r0
 800261e:	001a      	movs	r2, r3
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <main+0x17c>)
 8002622:	701a      	strb	r2, [r3, #0]
						  nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <main+0x170>)
 8002626:	0018      	movs	r0, r3
 8002628:	f003 fd2e 	bl	8006088 <get_my_nmea_gngsa_pdop_d>
 800262c:	0002      	movs	r2, r0
 800262e:	000b      	movs	r3, r1
 8002630:	4926      	ldr	r1, [pc, #152]	; (80026cc <main+0x180>)
 8002632:	600a      	str	r2, [r1, #0]
 8002634:	604b      	str	r3, [r1, #4]
						  if ( nmea_fixed_mode_s == NMEA_3D_FIX )
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <main+0x17c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b33      	cmp	r3, #51	; 0x33
 800263c:	d10f      	bne.n	800265e <main+0x112>
						  {
							  if ( nmea_fixed_pdop_d <= NMEA_PDOP_MIN_THS_D )
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <main+0x180>)
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <main+0x184>)
 8002648:	f7fd ff0e 	bl	8000468 <__aeabi_dcmple>
 800264c:	1e03      	subs	r3, r0, #0
 800264e:	d003      	beq.n	8002658 <main+0x10c>
							  {
								  fix_quality = 2 ;
 8002650:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <main+0x188>)
 8002652:	2202      	movs	r2, #2
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e002      	b.n	800265e <main+0x112>
							  }
							  else
							  {
								  fix_quality = 1 ;
 8002658:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <main+0x188>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
							  }

						  }
					  }
					  if ( strstr ( (char*) nmea_message , nmea_gngll_label ) )
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <main+0x18c>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <main+0x170>)
 8002664:	0011      	movs	r1, r2
 8002666:	0018      	movs	r0, r3
 8002668:	f005 fecb 	bl	8008402 <strstr>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d00f      	beq.n	8002690 <main+0x144>
					  {
						  get_my_nmea_gngll_coordinates_s ( (char*) nmea_message , nmea_latitude , nmea_longitude ) ;
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <main+0x190>)
 8002672:	491b      	ldr	r1, [pc, #108]	; (80026e0 <main+0x194>)
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <main+0x170>)
 8002676:	0018      	movs	r0, r3
 8002678:	f003 fe0a 	bl	8006290 <get_my_nmea_gngll_coordinates_s>
						  HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
 800267c:	23a0      	movs	r3, #160	; 0xa0
 800267e:	05db      	lsls	r3, r3, #23
 8002680:	2200      	movs	r2, #0
 8002682:	2120      	movs	r1, #32
 8002684:	0018      	movs	r0, r3
 8002686:	f001 f92d 	bl	80038e4 <HAL_GPIO_WritePin>
						  seek_fix_loop_flag = false ;
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <main+0x160>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
					  }
				  }
			  }
		  }
		  rxd_byte = 0 ;
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <main+0x164>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
	  while ( seek_fix_loop_flag )
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <main+0x160>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d190      	bne.n	80025c0 <main+0x74>
	  seek_fix_loop_flag = true ;
 800269e:	e780      	b.n	80025a2 <main+0x56>
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000338 	.word	0x20000338
 80026a8:	20000258 	.word	0x20000258
 80026ac:	20000588 	.word	0x20000588
 80026b0:	20000460 	.word	0x20000460
 80026b4:	200003cc 	.word	0x200003cc
 80026b8:	2000055e 	.word	0x2000055e
 80026bc:	20000464 	.word	0x20000464
 80026c0:	2000000c 	.word	0x2000000c
 80026c4:	20000004 	.word	0x20000004
 80026c8:	20000579 	.word	0x20000579
 80026cc:	20000580 	.word	0x20000580
 80026d0:	40140000 	.word	0x40140000
 80026d4:	20000578 	.word	0x20000578
 80026d8:	20000008 	.word	0x20000008
 80026dc:	2000056c 	.word	0x2000056c
 80026e0:	20000560 	.word	0x20000560

080026e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b093      	sub	sp, #76	; 0x4c
 80026e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ea:	2410      	movs	r4, #16
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	0018      	movs	r0, r3
 80026f0:	2338      	movs	r3, #56	; 0x38
 80026f2:	001a      	movs	r2, r3
 80026f4:	2100      	movs	r1, #0
 80026f6:	f005 fe57 	bl	80083a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026fa:	003b      	movs	r3, r7
 80026fc:	0018      	movs	r0, r3
 80026fe:	2310      	movs	r3, #16
 8002700:	001a      	movs	r2, r3
 8002702:	2100      	movs	r1, #0
 8002704:	f005 fe50 	bl	80083a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	0018      	movs	r0, r3
 800270e:	f001 fa35 	bl	8003b7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002712:	193b      	adds	r3, r7, r4
 8002714:	2202      	movs	r2, #2
 8002716:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002718:	193b      	adds	r3, r7, r4
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	0052      	lsls	r2, r2, #1
 800271e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002720:	193b      	adds	r3, r7, r4
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002726:	193b      	adds	r3, r7, r4
 8002728:	2240      	movs	r2, #64	; 0x40
 800272a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800272c:	193b      	adds	r3, r7, r4
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002732:	193b      	adds	r3, r7, r4
 8002734:	0018      	movs	r0, r3
 8002736:	f001 fa6d 	bl	8003c14 <HAL_RCC_OscConfig>
 800273a:	1e03      	subs	r3, r0, #0
 800273c:	d001      	beq.n	8002742 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800273e:	f000 fa41 	bl	8002bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002742:	003b      	movs	r3, r7
 8002744:	2207      	movs	r2, #7
 8002746:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002748:	003b      	movs	r3, r7
 800274a:	2200      	movs	r2, #0
 800274c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800274e:	003b      	movs	r3, r7
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002754:	003b      	movs	r3, r7
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800275a:	003b      	movs	r3, r7
 800275c:	2100      	movs	r1, #0
 800275e:	0018      	movs	r0, r3
 8002760:	f001 fd72 	bl	8004248 <HAL_RCC_ClockConfig>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002768:	f000 fa2c 	bl	8002bc4 <Error_Handler>
  }
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b013      	add	sp, #76	; 0x4c
 8002772:	bd90      	pop	{r4, r7, pc}

08002774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <MX_I2C1_Init+0x74>)
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <MX_I2C1_Init+0x78>)
 800277c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <MX_I2C1_Init+0x74>)
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <MX_I2C1_Init+0x7c>)
 8002782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <MX_I2C1_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <MX_I2C1_Init+0x74>)
 800278c:	2201      	movs	r2, #1
 800278e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <MX_I2C1_Init+0x74>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <MX_I2C1_Init+0x74>)
 8002798:	2200      	movs	r2, #0
 800279a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <MX_I2C1_Init+0x74>)
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027b0:	0018      	movs	r0, r3
 80027b2:	f001 f8b5 	bl	8003920 <HAL_I2C_Init>
 80027b6:	1e03      	subs	r3, r0, #0
 80027b8:	d001      	beq.n	80027be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027ba:	f000 fa03 	bl	8002bc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027c0:	2100      	movs	r1, #0
 80027c2:	0018      	movs	r0, r3
 80027c4:	f001 f942 	bl	8003a4c <HAL_I2CEx_ConfigAnalogFilter>
 80027c8:	1e03      	subs	r3, r0, #0
 80027ca:	d001      	beq.n	80027d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027cc:	f000 f9fa 	bl	8002bc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027d2:	2100      	movs	r1, #0
 80027d4:	0018      	movs	r0, r3
 80027d6:	f001 f985 	bl	8003ae4 <HAL_I2CEx_ConfigDigitalFilter>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d001      	beq.n	80027e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027de:	f000 f9f1 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000204 	.word	0x20000204
 80027ec:	40005400 	.word	0x40005400
 80027f0:	00303d5b 	.word	0x00303d5b

080027f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	0018      	movs	r0, r3
 80027fe:	230c      	movs	r3, #12
 8002800:	001a      	movs	r2, r3
 8002802:	2100      	movs	r1, #0
 8002804:	f005 fdd0 	bl	80083a8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_TIM6_Init+0x6c>)
 800280a:	4a16      	ldr	r2, [pc, #88]	; (8002864 <MX_TIM6_Init+0x70>)
 800280c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <MX_TIM6_Init+0x6c>)
 8002810:	4a15      	ldr	r2, [pc, #84]	; (8002868 <MX_TIM6_Init+0x74>)
 8002812:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <MX_TIM6_Init+0x6c>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_TIM6_Init+0x6c>)
 800281c:	4a13      	ldr	r2, [pc, #76]	; (800286c <MX_TIM6_Init+0x78>)
 800281e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_TIM6_Init+0x6c>)
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_TIM6_Init+0x6c>)
 8002828:	0018      	movs	r0, r3
 800282a:	f002 f86f 	bl	800490c <HAL_TIM_Base_Init>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002832:	f000 f9c7 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002842:	1d3a      	adds	r2, r7, #4
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_TIM6_Init+0x6c>)
 8002846:	0011      	movs	r1, r2
 8002848:	0018      	movs	r0, r3
 800284a:	f002 fb13 	bl	8004e74 <HAL_TIMEx_MasterConfigSynchronization>
 800284e:	1e03      	subs	r3, r0, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002852:	f000 f9b7 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	20000258 	.word	0x20000258
 8002864:	40001000 	.word	0x40001000
 8002868:	00003e7f 	.word	0x00003e7f
 800286c:	000003e7 	.word	0x000003e7

08002870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <MX_USART1_UART_Init+0x94>)
 8002876:	4a24      	ldr	r2, [pc, #144]	; (8002908 <MX_USART1_UART_Init+0x98>)
 8002878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <MX_USART1_UART_Init+0x94>)
 800287c:	2296      	movs	r2, #150	; 0x96
 800287e:	0192      	lsls	r2, r2, #6
 8002880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <MX_USART1_UART_Init+0x94>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <MX_USART1_UART_Init+0x94>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_USART1_UART_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MX_USART1_UART_Init+0x94>)
 8002896:	220c      	movs	r2, #12
 8002898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <MX_USART1_UART_Init+0x94>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <MX_USART1_UART_Init+0x94>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_USART1_UART_Init+0x94>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_USART1_UART_Init+0x94>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_USART1_UART_Init+0x94>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <MX_USART1_UART_Init+0x94>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f002 fb60 	bl	8004f80 <HAL_UART_Init>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d001      	beq.n	80028c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028c4:	f000 f97e 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_USART1_UART_Init+0x94>)
 80028ca:	2100      	movs	r1, #0
 80028cc:	0018      	movs	r0, r3
 80028ce:	f003 fa2d 	bl	8005d2c <HAL_UARTEx_SetTxFifoThreshold>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d001      	beq.n	80028da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028d6:	f000 f975 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_USART1_UART_Init+0x94>)
 80028dc:	2100      	movs	r1, #0
 80028de:	0018      	movs	r0, r3
 80028e0:	f003 fa64 	bl	8005dac <HAL_UARTEx_SetRxFifoThreshold>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028e8:	f000 f96c 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <MX_USART1_UART_Init+0x94>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f003 f9e2 	bl	8005cb8 <HAL_UARTEx_DisableFifoMode>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028f8:	f000 f964 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	200002a4 	.word	0x200002a4
 8002908:	40013800 	.word	0x40013800

0800290c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002912:	4a24      	ldr	r2, [pc, #144]	; (80029a4 <MX_USART2_UART_Init+0x98>)
 8002914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002918:	22e1      	movs	r2, #225	; 0xe1
 800291a:	0252      	lsls	r2, r2, #9
 800291c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800293c:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002950:	2200      	movs	r2, #0
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002956:	0018      	movs	r0, r3
 8002958:	f002 fb12 	bl	8004f80 <HAL_UART_Init>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d001      	beq.n	8002964 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002960:	f000 f930 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002966:	2100      	movs	r1, #0
 8002968:	0018      	movs	r0, r3
 800296a:	f003 f9df 	bl	8005d2c <HAL_UARTEx_SetTxFifoThreshold>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002972:	f000 f927 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 8002978:	2100      	movs	r1, #0
 800297a:	0018      	movs	r0, r3
 800297c:	f003 fa16 	bl	8005dac <HAL_UARTEx_SetRxFifoThreshold>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d001      	beq.n	8002988 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002984:	f000 f91e 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <MX_USART2_UART_Init+0x94>)
 800298a:	0018      	movs	r0, r3
 800298c:	f003 f994 	bl	8005cb8 <HAL_UARTEx_DisableFifoMode>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d001      	beq.n	8002998 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002994:	f000 f916 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	20000338 	.word	0x20000338
 80029a4:	40004400 	.word	0x40004400

080029a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029ae:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <MX_USART3_UART_Init+0x64>)
 80029b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029b4:	2296      	movs	r2, #150	; 0x96
 80029b6:	0192      	lsls	r2, r2, #6
 80029b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029ce:	220c      	movs	r2, #12
 80029d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029da:	2200      	movs	r2, #0
 80029dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <MX_USART3_UART_Init+0x60>)
 80029f2:	0018      	movs	r0, r3
 80029f4:	f002 fac4 	bl	8004f80 <HAL_UART_Init>
 80029f8:	1e03      	subs	r3, r0, #0
 80029fa:	d001      	beq.n	8002a00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80029fc:	f000 f8e2 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	200003cc 	.word	0x200003cc
 8002a0c:	40004800 	.word	0x40004800

08002a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b08b      	sub	sp, #44	; 0x2c
 8002a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a16:	2414      	movs	r4, #20
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	2314      	movs	r3, #20
 8002a1e:	001a      	movs	r2, r3
 8002a20:	2100      	movs	r1, #0
 8002a22:	f005 fcc1 	bl	80083a8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34
 8002a32:	4b3a      	ldr	r3, [pc, #232]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	2204      	movs	r2, #4
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a44:	2120      	movs	r1, #32
 8002a46:	430a      	orrs	r2, r1
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34
 8002a4a:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4e:	2220      	movs	r2, #32
 8002a50:	4013      	ands	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5a:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	635a      	str	r2, [r3, #52]	; 0x34
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	2201      	movs	r2, #1
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a74:	2102      	movs	r1, #2
 8002a76:	430a      	orrs	r2, r1
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34
 8002a7a:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <MX_GPIO_Init+0x10c>)
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	2202      	movs	r2, #2
 8002a80:	4013      	ands	r3, r2
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002a86:	238c      	movs	r3, #140	; 0x8c
 8002a88:	015b      	lsls	r3, r3, #5
 8002a8a:	4825      	ldr	r0, [pc, #148]	; (8002b20 <MX_GPIO_Init+0x110>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	0019      	movs	r1, r3
 8002a90:	f000 ff28 	bl	80038e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002a94:	4923      	ldr	r1, [pc, #140]	; (8002b24 <MX_GPIO_Init+0x114>)
 8002a96:	23a0      	movs	r3, #160	; 0xa0
 8002a98:	05db      	lsls	r3, r3, #23
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 ff21 	bl	80038e4 <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	228c      	movs	r2, #140	; 0x8c
 8002aa6:	0152      	lsls	r2, r2, #5
 8002aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	2201      	movs	r2, #1
 8002aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <MX_GPIO_Init+0x110>)
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	0010      	movs	r0, r2
 8002ac4:	f000 fcda 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002ac8:	193b      	adds	r3, r7, r4
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <MX_GPIO_Init+0x114>)
 8002acc:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	193b      	adds	r3, r7, r4
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	193b      	adds	r3, r7, r4
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	193a      	adds	r2, r7, r4
 8002ae2:	23a0      	movs	r3, #160	; 0xa0
 8002ae4:	05db      	lsls	r3, r3, #23
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 fcc7 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002aee:	0021      	movs	r1, r4
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	22c0      	movs	r2, #192	; 0xc0
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2288      	movs	r2, #136	; 0x88
 8002afc:	0352      	lsls	r2, r2, #13
 8002afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <MX_GPIO_Init+0x118>)
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f000 fcb5 	bl	800347c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b00b      	add	sp, #44	; 0x2c
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	50000800 	.word	0x50000800
 8002b24:	00009860 	.word	0x00009860
 8002b28:	50000400 	.word	0x50000400

08002b2c <my_astro_off>:
{
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
	MX_USART1_UART_Init () ;
}
void my_astro_off ( void )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002b30:	23a0      	movs	r3, #160	; 0xa0
 8002b32:	05db      	lsls	r3, r3, #23
 8002b34:	2200      	movs	r2, #0
 8002b36:	2140      	movs	r1, #64	; 0x40
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 fed3 	bl	80038e4 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 8002b3e:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <my_astro_off+0x20>)
 8002b40:	0018      	movs	r0, r3
 8002b42:	f002 fa73 	bl	800502c <HAL_UART_DeInit>
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200002a4 	.word	0x200002a4

08002b50 <my_lx6_on>:
void my_lx6_on ( void )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4808      	ldr	r0, [pc, #32]	; (8002b7c <my_lx6_on+0x2c>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	f000 fec1 	bl	80038e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	015b      	lsls	r3, r3, #5
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <my_lx6_on+0x2c>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	f000 feba 	bl	80038e4 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002b70:	f7ff ff1a 	bl	80029a8 <MX_USART3_UART_Init>
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	50000800 	.word	0x50000800

08002b80 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( HUART_Lx6 ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10d      	bne.n	8002bae <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
 8002b92:	23a0      	movs	r3, #160	; 0xa0
 8002b94:	05db      	lsls	r3, r3, #23
 8002b96:	2200      	movs	r2, #0
 8002b98:	2120      	movs	r1, #32
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fea2 	bl	80038e4 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f001 ff66 	bl	8004a74 <HAL_TIM_Base_Stop_IT>
		seek_fix_loop_flag = false ;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
	}
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b002      	add	sp, #8
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	40001000 	.word	0x40001000
 8002bbc:	20000258 	.word	0x20000258
 8002bc0:	20000588 	.word	0x20000588

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
}
 8002bca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <Error_Handler+0x8>
	...

08002bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_MspInit+0x44>)
 8002bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_MspInit+0x44>)
 8002bdc:	2101      	movs	r1, #1
 8002bde:	430a      	orrs	r2, r1
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_MspInit+0x44>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	2201      	movs	r2, #1
 8002be8:	4013      	ands	r3, r2
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_MspInit+0x44>)
 8002bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_MspInit+0x44>)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	0549      	lsls	r1, r1, #21
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_MspInit+0x44>)
 8002bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	055b      	lsls	r3, r3, #21
 8002c04:	4013      	ands	r3, r2
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b002      	add	sp, #8
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b097      	sub	sp, #92	; 0x5c
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	2344      	movs	r3, #68	; 0x44
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	0018      	movs	r0, r3
 8002c26:	2314      	movs	r3, #20
 8002c28:	001a      	movs	r2, r3
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f005 fbbc 	bl	80083a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c30:	2410      	movs	r4, #16
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	0018      	movs	r0, r3
 8002c36:	2334      	movs	r3, #52	; 0x34
 8002c38:	001a      	movs	r2, r3
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	f005 fbb4 	bl	80083a8 <memset>
  if(hi2c->Instance==I2C1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_I2C_MspInit+0xb8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d13d      	bne.n	8002cc6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	2200      	movs	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f001 fc9f 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c62:	f7ff ffaf 	bl	8002bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_I2C_MspInit+0xbc>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_I2C_MspInit+0xbc>)
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <HAL_I2C_MspInit+0xbc>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 8002c7e:	2144      	movs	r1, #68	; 0x44
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	22c0      	movs	r2, #192	; 0xc0
 8002c84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2212      	movs	r2, #18
 8002c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	2200      	movs	r2, #0
 8002c96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	2206      	movs	r2, #6
 8002c9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <HAL_I2C_MspInit+0xc0>)
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f000 fbe9 	bl	800347c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_I2C_MspInit+0xbc>)
 8002cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_I2C_MspInit+0xbc>)
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	0389      	lsls	r1, r1, #14
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_I2C_MspInit+0xbc>)
 8002cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	039b      	lsls	r3, r3, #14
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b017      	add	sp, #92	; 0x5c
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	40005400 	.word	0x40005400
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	50000400 	.word	0x50000400

08002cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <HAL_TIM_Base_MspInit+0x44>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d113      	bne.n	8002d16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_TIM_Base_MspInit+0x48>)
 8002cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HAL_TIM_Base_MspInit+0x48>)
 8002cf4:	2110      	movs	r1, #16
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_TIM_Base_MspInit+0x48>)
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	2210      	movs	r2, #16
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2011      	movs	r0, #17
 8002d0c:	f000 fb84 	bl	8003418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002d10:	2011      	movs	r0, #17
 8002d12:	f000 fb96 	bl	8003442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	40001000 	.word	0x40001000
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b09b      	sub	sp, #108	; 0x6c
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	2354      	movs	r3, #84	; 0x54
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	0018      	movs	r0, r3
 8002d36:	2314      	movs	r3, #20
 8002d38:	001a      	movs	r2, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f005 fb34 	bl	80083a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d40:	2420      	movs	r4, #32
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	0018      	movs	r0, r3
 8002d46:	2334      	movs	r3, #52	; 0x34
 8002d48:	001a      	movs	r2, r3
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	f005 fb2c 	bl	80083a8 <memset>
  if(huart->Instance==USART1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a61      	ldr	r2, [pc, #388]	; (8002edc <HAL_UART_MspInit+0x1b4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d140      	bne.n	8002ddc <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	2200      	movs	r2, #0
 8002d64:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f001 fc17 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d72:	f7ff ff27 	bl	8002bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d76:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7a:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	01c9      	lsls	r1, r1, #7
 8002d80:	430a      	orrs	r2, r1
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
 8002d84:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	01db      	lsls	r3, r3, #7
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d96:	4b52      	ldr	r3, [pc, #328]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002d98:	2101      	movs	r1, #1
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	2201      	movs	r2, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 8002daa:	2154      	movs	r1, #84	; 0x54
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	22c0      	movs	r2, #192	; 0xc0
 8002db0:	00d2      	lsls	r2, r2, #3
 8002db2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	2202      	movs	r2, #2
 8002db8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	2201      	movs	r2, #1
 8002dca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	187a      	adds	r2, r7, r1
 8002dce:	23a0      	movs	r3, #160	; 0xa0
 8002dd0:	05db      	lsls	r3, r3, #23
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 fb51 	bl	800347c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dda:	e07b      	b.n	8002ed4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a40      	ldr	r2, [pc, #256]	; (8002ee4 <HAL_UART_MspInit+0x1bc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d140      	bne.n	8002e68 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002de6:	2120      	movs	r1, #32
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	2202      	movs	r2, #2
 8002dec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	0018      	movs	r0, r3
 8002df8:	f001 fbd0 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8002dfc:	1e03      	subs	r3, r0, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8002e00:	f7ff fee0 	bl	8002bc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e08:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	0289      	lsls	r1, r1, #10
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e12:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	029b      	lsls	r3, r3, #10
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e20:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e24:	4b2e      	ldr	r3, [pc, #184]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2201      	movs	r2, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8002e38:	2154      	movs	r1, #84	; 0x54
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	220c      	movs	r2, #12
 8002e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	2202      	movs	r2, #2
 8002e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	2201      	movs	r2, #1
 8002e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	2201      	movs	r2, #1
 8002e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e58:	187a      	adds	r2, r7, r1
 8002e5a:	23a0      	movs	r3, #160	; 0xa0
 8002e5c:	05db      	lsls	r3, r3, #23
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 fb0b 	bl	800347c <HAL_GPIO_Init>
}
 8002e66:	e035      	b.n	8002ed4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <HAL_UART_MspInit+0x1c0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d130      	bne.n	8002ed4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	02c9      	lsls	r1, r1, #11
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	02db      	lsls	r3, r3, #11
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e94:	2104      	movs	r1, #4
 8002e96:	430a      	orrs	r2, r1
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_UART_MspInit+0x1b8>)
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8002ea6:	2154      	movs	r1, #84	; 0x54
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	22c0      	movs	r2, #192	; 0xc0
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	187b      	adds	r3, r7, r1
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8002ec2:	187b      	adds	r3, r7, r1
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	4a08      	ldr	r2, [pc, #32]	; (8002eec <HAL_UART_MspInit+0x1c4>)
 8002ecc:	0019      	movs	r1, r3
 8002ece:	0010      	movs	r0, r2
 8002ed0:	f000 fad4 	bl	800347c <HAL_GPIO_Init>
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b01b      	add	sp, #108	; 0x6c
 8002eda:	bd90      	pop	{r4, r7, pc}
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40004400 	.word	0x40004400
 8002ee8:	40004800 	.word	0x40004800
 8002eec:	50000800 	.word	0x50000800

08002ef0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_UART_MspDeInit+0x80>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10e      	bne.n	8002f20 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_UART_MspDeInit+0x84>)
 8002f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_UART_MspDeInit+0x84>)
 8002f08:	491b      	ldr	r1, [pc, #108]	; (8002f78 <HAL_UART_MspDeInit+0x88>)
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 8002f0e:	23c0      	movs	r3, #192	; 0xc0
 8002f10:	00da      	lsls	r2, r3, #3
 8002f12:	23a0      	movs	r3, #160	; 0xa0
 8002f14:	05db      	lsls	r3, r3, #23
 8002f16:	0011      	movs	r1, r2
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 fc13 	bl	8003744 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002f1e:	e023      	b.n	8002f68 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <HAL_UART_MspDeInit+0x8c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10c      	bne.n	8002f44 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_UART_MspDeInit+0x84>)
 8002f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f2e:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <HAL_UART_MspDeInit+0x84>)
 8002f30:	4913      	ldr	r1, [pc, #76]	; (8002f80 <HAL_UART_MspDeInit+0x90>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 8002f36:	23a0      	movs	r3, #160	; 0xa0
 8002f38:	05db      	lsls	r3, r3, #23
 8002f3a:	210c      	movs	r1, #12
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 fc01 	bl	8003744 <HAL_GPIO_DeInit>
}
 8002f42:	e011      	b.n	8002f68 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <HAL_UART_MspDeInit+0x94>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10c      	bne.n	8002f68 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_UART_MspDeInit+0x84>)
 8002f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_UART_MspDeInit+0x84>)
 8002f54:	490c      	ldr	r1, [pc, #48]	; (8002f88 <HAL_UART_MspDeInit+0x98>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 8002f5a:	23c0      	movs	r3, #192	; 0xc0
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <HAL_UART_MspDeInit+0x9c>)
 8002f60:	0019      	movs	r1, r3
 8002f62:	0010      	movs	r0, r2
 8002f64:	f000 fbee 	bl	8003744 <HAL_GPIO_DeInit>
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40021000 	.word	0x40021000
 8002f78:	ffffbfff 	.word	0xffffbfff
 8002f7c:	40004400 	.word	0x40004400
 8002f80:	fffdffff 	.word	0xfffdffff
 8002f84:	40004800 	.word	0x40004800
 8002f88:	fffbffff 	.word	0xfffbffff
 8002f8c:	50000800 	.word	0x50000800

08002f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <NMI_Handler+0x4>

08002f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9a:	e7fe      	b.n	8002f9a <HardFault_Handler+0x4>

08002f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb4:	f000 f968 	bl	8003288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f001 fd82 	bl	8004ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	20000258 	.word	0x20000258

08002fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  return 1;
 8002fdc:	2301      	movs	r3, #1
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_kill>:

int _kill(int pid, int sig)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fee:	f005 fa83 	bl	80084f8 <__errno>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	2216      	movs	r2, #22
 8002ff6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	425b      	negs	r3, r3
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}

08003004 <_exit>:

void _exit (int status)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800300c:	2301      	movs	r3, #1
 800300e:	425a      	negs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0011      	movs	r1, r2
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff ffe5 	bl	8002fe4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800301a:	e7fe      	b.n	800301a <_exit+0x16>

0800301c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e00a      	b.n	8003044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800302e:	e000      	b.n	8003032 <_read+0x16>
 8003030:	bf00      	nop
 8003032:	0001      	movs	r1, r0
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	60ba      	str	r2, [r7, #8]
 800303a:	b2ca      	uxtb	r2, r1
 800303c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3301      	adds	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	dbf0      	blt.n	800302e <_read+0x12>
  }

  return len;
 800304c:	687b      	ldr	r3, [r7, #4]
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b006      	add	sp, #24
 8003054:	bd80      	pop	{r7, pc}

08003056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e009      	b.n	800307c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	60ba      	str	r2, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	0018      	movs	r0, r3
 8003072:	e000      	b.n	8003076 <_write+0x20>
 8003074:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	3301      	adds	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	429a      	cmp	r2, r3
 8003082:	dbf1      	blt.n	8003068 <_write+0x12>
  }
  return len;
 8003084:	687b      	ldr	r3, [r7, #4]
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b006      	add	sp, #24
 800308c:	bd80      	pop	{r7, pc}

0800308e <_close>:

int _close(int file)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003096:	2301      	movs	r3, #1
 8003098:	425b      	negs	r3, r3
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b002      	add	sp, #8
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	0192      	lsls	r2, r2, #6
 80030b2:	605a      	str	r2, [r3, #4]
  return 0;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b002      	add	sp, #8
 80030bc:	bd80      	pop	{r7, pc}

080030be <_isatty>:

int _isatty(int file)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <_sbrk+0x5c>)
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <_sbrk+0x60>)
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <_sbrk+0x64>)
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <_sbrk+0x68>)
 8003108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	18d3      	adds	r3, r2, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d207      	bcs.n	8003128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003118:	f005 f9ee 	bl	80084f8 <__errno>
 800311c:	0003      	movs	r3, r0
 800311e:	220c      	movs	r2, #12
 8003120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003122:	2301      	movs	r3, #1
 8003124:	425b      	negs	r3, r3
 8003126:	e009      	b.n	800313c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800312e:	4b07      	ldr	r3, [pc, #28]	; (800314c <_sbrk+0x64>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	18d2      	adds	r2, r2, r3
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <_sbrk+0x64>)
 8003138:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20009000 	.word	0x20009000
 8003148:	00000400 	.word	0x00000400
 800314c:	2000058c 	.word	0x2000058c
 8003150:	200006e0 	.word	0x200006e0

08003154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003160:	480d      	ldr	r0, [pc, #52]	; (8003198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003162:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003164:	f7ff fff6 	bl	8003154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003168:	480c      	ldr	r0, [pc, #48]	; (800319c <LoopForever+0x6>)
  ldr r1, =_edata
 800316a:	490d      	ldr	r1, [pc, #52]	; (80031a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <LoopForever+0xe>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003170:	e002      	b.n	8003178 <LoopCopyDataInit>

08003172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003176:	3304      	adds	r3, #4

08003178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800317c:	d3f9      	bcc.n	8003172 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003180:	4c0a      	ldr	r4, [pc, #40]	; (80031ac <LoopForever+0x16>)
  movs r3, #0
 8003182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003184:	e001      	b.n	800318a <LoopFillZerobss>

08003186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003188:	3204      	adds	r2, #4

0800318a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800318c:	d3fb      	bcc.n	8003186 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800318e:	f005 f9b9 	bl	8008504 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003192:	f7ff f9db 	bl	800254c <main>

08003196 <LoopForever>:

LoopForever:
  b LoopForever
 8003196:	e7fe      	b.n	8003196 <LoopForever>
  ldr   r0, =_estack
 8003198:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800319c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80031a4:	0800bd7c 	.word	0x0800bd7c
  ldr r2, =_sbss
 80031a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80031ac:	200006e0 	.word	0x200006e0

080031b0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031b0:	e7fe      	b.n	80031b0 <ADC1_COMP_IRQHandler>
	...

080031b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031ba:	1dfb      	adds	r3, r7, #7
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_Init+0x3c>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <HAL_Init+0x3c>)
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	0049      	lsls	r1, r1, #1
 80031ca:	430a      	orrs	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031ce:	2000      	movs	r0, #0
 80031d0:	f000 f810 	bl	80031f4 <HAL_InitTick>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e001      	b.n	80031e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80031e0:	f7ff fcf6 	bl	8002bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031e4:	1dfb      	adds	r3, r7, #7
 80031e6:	781b      	ldrb	r3, [r3, #0]
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40022000 	.word	0x40022000

080031f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031fc:	230f      	movs	r3, #15
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_InitTick+0x88>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d02b      	beq.n	8003264 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800320c:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_InitTick+0x8c>)
 800320e:	681c      	ldr	r4, [r3, #0]
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_InitTick+0x88>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	0019      	movs	r1, r3
 8003216:	23fa      	movs	r3, #250	; 0xfa
 8003218:	0098      	lsls	r0, r3, #2
 800321a:	f7fc ff8f 	bl	800013c <__udivsi3>
 800321e:	0003      	movs	r3, r0
 8003220:	0019      	movs	r1, r3
 8003222:	0020      	movs	r0, r4
 8003224:	f7fc ff8a 	bl	800013c <__udivsi3>
 8003228:	0003      	movs	r3, r0
 800322a:	0018      	movs	r0, r3
 800322c:	f000 f919 	bl	8003462 <HAL_SYSTICK_Config>
 8003230:	1e03      	subs	r3, r0, #0
 8003232:	d112      	bne.n	800325a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d80a      	bhi.n	8003250 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	2301      	movs	r3, #1
 800323e:	425b      	negs	r3, r3
 8003240:	2200      	movs	r2, #0
 8003242:	0018      	movs	r0, r3
 8003244:	f000 f8e8 	bl	8003418 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_InitTick+0x90>)
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e00d      	b.n	800326c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003250:	230f      	movs	r3, #15
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e008      	b.n	800326c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800325a:	230f      	movs	r3, #15
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e003      	b.n	800326c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003264:	230f      	movs	r3, #15
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800326c:	230f      	movs	r3, #15
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	781b      	ldrb	r3, [r3, #0]
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	b005      	add	sp, #20
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	20000018 	.word	0x20000018
 8003280:	20000010 	.word	0x20000010
 8003284:	20000014 	.word	0x20000014

08003288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_IncTick+0x1c>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	001a      	movs	r2, r3
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_IncTick+0x20>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	18d2      	adds	r2, r2, r3
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_IncTick+0x20>)
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	20000018 	.word	0x20000018
 80032a8:	20000590 	.word	0x20000590

080032ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  return uwTick;
 80032b0:	4b02      	ldr	r3, [pc, #8]	; (80032bc <HAL_GetTick+0x10>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20000590 	.word	0x20000590

080032c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	0002      	movs	r2, r0
 80032c8:	1dfb      	adds	r3, r7, #7
 80032ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032cc:	1dfb      	adds	r3, r7, #7
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b7f      	cmp	r3, #127	; 0x7f
 80032d2:	d809      	bhi.n	80032e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d4:	1dfb      	adds	r3, r7, #7
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	001a      	movs	r2, r3
 80032da:	231f      	movs	r3, #31
 80032dc:	401a      	ands	r2, r3
 80032de:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__NVIC_EnableIRQ+0x30>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	4091      	lsls	r1, r2
 80032e4:	000a      	movs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b002      	add	sp, #8
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	e000e100 	.word	0xe000e100

080032f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	0002      	movs	r2, r0
 80032fc:	6039      	str	r1, [r7, #0]
 80032fe:	1dfb      	adds	r3, r7, #7
 8003300:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b7f      	cmp	r3, #127	; 0x7f
 8003308:	d828      	bhi.n	800335c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800330a:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <__NVIC_SetPriority+0xd4>)
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b25b      	sxtb	r3, r3
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	33c0      	adds	r3, #192	; 0xc0
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	589b      	ldr	r3, [r3, r2]
 800331a:	1dfa      	adds	r2, r7, #7
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	0011      	movs	r1, r2
 8003320:	2203      	movs	r2, #3
 8003322:	400a      	ands	r2, r1
 8003324:	00d2      	lsls	r2, r2, #3
 8003326:	21ff      	movs	r1, #255	; 0xff
 8003328:	4091      	lsls	r1, r2
 800332a:	000a      	movs	r2, r1
 800332c:	43d2      	mvns	r2, r2
 800332e:	401a      	ands	r2, r3
 8003330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	22ff      	movs	r2, #255	; 0xff
 8003338:	401a      	ands	r2, r3
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	0018      	movs	r0, r3
 8003340:	2303      	movs	r3, #3
 8003342:	4003      	ands	r3, r0
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003348:	481f      	ldr	r0, [pc, #124]	; (80033c8 <__NVIC_SetPriority+0xd4>)
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b25b      	sxtb	r3, r3
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	430a      	orrs	r2, r1
 8003354:	33c0      	adds	r3, #192	; 0xc0
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800335a:	e031      	b.n	80033c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800335c:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <__NVIC_SetPriority+0xd8>)
 800335e:	1dfb      	adds	r3, r7, #7
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	0019      	movs	r1, r3
 8003364:	230f      	movs	r3, #15
 8003366:	400b      	ands	r3, r1
 8003368:	3b08      	subs	r3, #8
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	3306      	adds	r3, #6
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	18d3      	adds	r3, r2, r3
 8003372:	3304      	adds	r3, #4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	1dfa      	adds	r2, r7, #7
 8003378:	7812      	ldrb	r2, [r2, #0]
 800337a:	0011      	movs	r1, r2
 800337c:	2203      	movs	r2, #3
 800337e:	400a      	ands	r2, r1
 8003380:	00d2      	lsls	r2, r2, #3
 8003382:	21ff      	movs	r1, #255	; 0xff
 8003384:	4091      	lsls	r1, r2
 8003386:	000a      	movs	r2, r1
 8003388:	43d2      	mvns	r2, r2
 800338a:	401a      	ands	r2, r3
 800338c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	22ff      	movs	r2, #255	; 0xff
 8003394:	401a      	ands	r2, r3
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	0018      	movs	r0, r3
 800339c:	2303      	movs	r3, #3
 800339e:	4003      	ands	r3, r0
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a4:	4809      	ldr	r0, [pc, #36]	; (80033cc <__NVIC_SetPriority+0xd8>)
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	001c      	movs	r4, r3
 80033ac:	230f      	movs	r3, #15
 80033ae:	4023      	ands	r3, r4
 80033b0:	3b08      	subs	r3, #8
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	430a      	orrs	r2, r1
 80033b6:	3306      	adds	r3, #6
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	18c3      	adds	r3, r0, r3
 80033bc:	3304      	adds	r3, #4
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b003      	add	sp, #12
 80033c6:	bd90      	pop	{r4, r7, pc}
 80033c8:	e000e100 	.word	0xe000e100
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	1e5a      	subs	r2, r3, #1
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	045b      	lsls	r3, r3, #17
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d301      	bcc.n	80033e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e4:	2301      	movs	r3, #1
 80033e6:	e010      	b.n	800340a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <SysTick_Config+0x44>)
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	3a01      	subs	r2, #1
 80033ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033f0:	2301      	movs	r3, #1
 80033f2:	425b      	negs	r3, r3
 80033f4:	2103      	movs	r1, #3
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff ff7c 	bl	80032f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <SysTick_Config+0x44>)
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <SysTick_Config+0x44>)
 8003404:	2207      	movs	r2, #7
 8003406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003408:	2300      	movs	r3, #0
}
 800340a:	0018      	movs	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	b002      	add	sp, #8
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	e000e010 	.word	0xe000e010

08003418 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	210f      	movs	r1, #15
 8003424:	187b      	adds	r3, r7, r1
 8003426:	1c02      	adds	r2, r0, #0
 8003428:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	187b      	adds	r3, r7, r1
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b25b      	sxtb	r3, r3
 8003432:	0011      	movs	r1, r2
 8003434:	0018      	movs	r0, r3
 8003436:	f7ff ff5d 	bl	80032f4 <__NVIC_SetPriority>
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b004      	add	sp, #16
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	0002      	movs	r2, r0
 800344a:	1dfb      	adds	r3, r7, #7
 800344c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	b25b      	sxtb	r3, r3
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff ff33 	bl	80032c0 <__NVIC_EnableIRQ>
}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	b002      	add	sp, #8
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff ffaf 	bl	80033d0 <SysTick_Config>
 8003472:	0003      	movs	r3, r0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348a:	e147      	b.n	800371c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4091      	lsls	r1, r2
 8003496:	000a      	movs	r2, r1
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d100      	bne.n	80034a4 <HAL_GPIO_Init+0x28>
 80034a2:	e138      	b.n	8003716 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2203      	movs	r2, #3
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d005      	beq.n	80034bc <HAL_GPIO_Init+0x40>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2203      	movs	r2, #3
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d130      	bne.n	800351e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	409a      	lsls	r2, r3
 80034ca:	0013      	movs	r3, r2
 80034cc:	43da      	mvns	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	409a      	lsls	r2, r3
 80034de:	0013      	movs	r3, r2
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034f2:	2201      	movs	r2, #1
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	409a      	lsls	r2, r3
 80034f8:	0013      	movs	r3, r2
 80034fa:	43da      	mvns	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	2201      	movs	r2, #1
 800350a:	401a      	ands	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	409a      	lsls	r2, r3
 8003510:	0013      	movs	r3, r2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2203      	movs	r2, #3
 8003524:	4013      	ands	r3, r2
 8003526:	2b03      	cmp	r3, #3
 8003528:	d017      	beq.n	800355a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	2203      	movs	r2, #3
 8003536:	409a      	lsls	r2, r3
 8003538:	0013      	movs	r3, r2
 800353a:	43da      	mvns	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	409a      	lsls	r2, r3
 800354c:	0013      	movs	r3, r2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2203      	movs	r2, #3
 8003560:	4013      	ands	r3, r2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d123      	bne.n	80035ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	0092      	lsls	r2, r2, #2
 8003570:	58d3      	ldr	r3, [r2, r3]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2207      	movs	r2, #7
 8003578:	4013      	ands	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	220f      	movs	r2, #15
 800357e:	409a      	lsls	r2, r3
 8003580:	0013      	movs	r3, r2
 8003582:	43da      	mvns	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2107      	movs	r1, #7
 8003592:	400b      	ands	r3, r1
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	409a      	lsls	r2, r3
 8003598:	0013      	movs	r3, r2
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	0092      	lsls	r2, r2, #2
 80035aa:	6939      	ldr	r1, [r7, #16]
 80035ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	2203      	movs	r2, #3
 80035ba:	409a      	lsls	r2, r3
 80035bc:	0013      	movs	r3, r2
 80035be:	43da      	mvns	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2203      	movs	r2, #3
 80035cc:	401a      	ands	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	409a      	lsls	r2, r3
 80035d4:	0013      	movs	r3, r2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	23c0      	movs	r3, #192	; 0xc0
 80035e8:	029b      	lsls	r3, r3, #10
 80035ea:	4013      	ands	r3, r2
 80035ec:	d100      	bne.n	80035f0 <HAL_GPIO_Init+0x174>
 80035ee:	e092      	b.n	8003716 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035f0:	4a50      	ldr	r2, [pc, #320]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	3318      	adds	r3, #24
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	589b      	ldr	r3, [r3, r2]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2203      	movs	r2, #3
 8003602:	4013      	ands	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	220f      	movs	r2, #15
 8003608:	409a      	lsls	r2, r3
 800360a:	0013      	movs	r3, r2
 800360c:	43da      	mvns	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	23a0      	movs	r3, #160	; 0xa0
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	429a      	cmp	r2, r3
 800361c:	d013      	beq.n	8003646 <HAL_GPIO_Init+0x1ca>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a45      	ldr	r2, [pc, #276]	; (8003738 <HAL_GPIO_Init+0x2bc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00d      	beq.n	8003642 <HAL_GPIO_Init+0x1c6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a44      	ldr	r2, [pc, #272]	; (800373c <HAL_GPIO_Init+0x2c0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <HAL_GPIO_Init+0x1c2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a43      	ldr	r2, [pc, #268]	; (8003740 <HAL_GPIO_Init+0x2c4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_GPIO_Init+0x1be>
 8003636:	2303      	movs	r3, #3
 8003638:	e006      	b.n	8003648 <HAL_GPIO_Init+0x1cc>
 800363a:	2305      	movs	r3, #5
 800363c:	e004      	b.n	8003648 <HAL_GPIO_Init+0x1cc>
 800363e:	2302      	movs	r3, #2
 8003640:	e002      	b.n	8003648 <HAL_GPIO_Init+0x1cc>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <HAL_GPIO_Init+0x1cc>
 8003646:	2300      	movs	r3, #0
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	2103      	movs	r1, #3
 800364c:	400a      	ands	r2, r1
 800364e:	00d2      	lsls	r2, r2, #3
 8003650:	4093      	lsls	r3, r2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003658:	4936      	ldr	r1, [pc, #216]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	3318      	adds	r3, #24
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003666:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43da      	mvns	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	035b      	lsls	r3, r3, #13
 800367e:	4013      	ands	r3, r2
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800368a:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	43da      	mvns	r2, r3
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	039b      	lsls	r3, r3, #14
 80036a8:	4013      	ands	r3, r2
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036b4:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036ba:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 80036bc:	2384      	movs	r3, #132	; 0x84
 80036be:	58d3      	ldr	r3, [r2, r3]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	029b      	lsls	r3, r3, #10
 80036d4:	4013      	ands	r3, r2
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036e0:	4914      	ldr	r1, [pc, #80]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 80036e2:	2284      	movs	r2, #132	; 0x84
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80036e8:	4a12      	ldr	r2, [pc, #72]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 80036ea:	2380      	movs	r3, #128	; 0x80
 80036ec:	58d3      	ldr	r3, [r2, r3]
 80036ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	43da      	mvns	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	025b      	lsls	r3, r3, #9
 8003702:	4013      	ands	r3, r2
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800370e:	4909      	ldr	r1, [pc, #36]	; (8003734 <HAL_GPIO_Init+0x2b8>)
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	40da      	lsrs	r2, r3
 8003724:	1e13      	subs	r3, r2, #0
 8003726:	d000      	beq.n	800372a <HAL_GPIO_Init+0x2ae>
 8003728:	e6b0      	b.n	800348c <HAL_GPIO_Init+0x10>
  }
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46c0      	nop			; (mov r8, r8)
 800372e:	46bd      	mov	sp, r7
 8003730:	b006      	add	sp, #24
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021800 	.word	0x40021800
 8003738:	50000400 	.word	0x50000400
 800373c:	50000800 	.word	0x50000800
 8003740:	50000c00 	.word	0x50000c00

08003744 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003752:	e0b4      	b.n	80038be <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003754:	2201      	movs	r2, #1
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	409a      	lsls	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d100      	bne.n	8003768 <HAL_GPIO_DeInit+0x24>
 8003766:	e0a7      	b.n	80038b8 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003768:	4a5a      	ldr	r2, [pc, #360]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	3318      	adds	r3, #24
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	589b      	ldr	r3, [r3, r2]
 8003774:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2203      	movs	r2, #3
 800377a:	4013      	ands	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	220f      	movs	r2, #15
 8003780:	409a      	lsls	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	23a0      	movs	r3, #160	; 0xa0
 800378c:	05db      	lsls	r3, r3, #23
 800378e:	429a      	cmp	r2, r3
 8003790:	d013      	beq.n	80037ba <HAL_GPIO_DeInit+0x76>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a50      	ldr	r2, [pc, #320]	; (80038d8 <HAL_GPIO_DeInit+0x194>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00d      	beq.n	80037b6 <HAL_GPIO_DeInit+0x72>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a4f      	ldr	r2, [pc, #316]	; (80038dc <HAL_GPIO_DeInit+0x198>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <HAL_GPIO_DeInit+0x6e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a4e      	ldr	r2, [pc, #312]	; (80038e0 <HAL_GPIO_DeInit+0x19c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_GPIO_DeInit+0x6a>
 80037aa:	2303      	movs	r3, #3
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_DeInit+0x78>
 80037ae:	2305      	movs	r3, #5
 80037b0:	e004      	b.n	80037bc <HAL_GPIO_DeInit+0x78>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_DeInit+0x78>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_GPIO_DeInit+0x78>
 80037ba:	2300      	movs	r3, #0
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	2103      	movs	r1, #3
 80037c0:	400a      	ands	r2, r1
 80037c2:	00d2      	lsls	r2, r2, #3
 80037c4:	4093      	lsls	r3, r2
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d136      	bne.n	800383a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80037cc:	4a41      	ldr	r2, [pc, #260]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	58d3      	ldr	r3, [r2, r3]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	43d2      	mvns	r2, r2
 80037d6:	493f      	ldr	r1, [pc, #252]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 80037d8:	4013      	ands	r3, r2
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80037de:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 80037e0:	2384      	movs	r3, #132	; 0x84
 80037e2:	58d3      	ldr	r3, [r2, r3]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	43d2      	mvns	r2, r2
 80037e8:	493a      	ldr	r1, [pc, #232]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	2284      	movs	r2, #132	; 0x84
 80037ee:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80037f0:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 80037fa:	400a      	ands	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80037fe:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43d9      	mvns	r1, r3
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 8003808:	400a      	ands	r2, r1
 800380a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2203      	movs	r2, #3
 8003810:	4013      	ands	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	220f      	movs	r2, #15
 8003816:	409a      	lsls	r2, r3
 8003818:	0013      	movs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800381c:	4a2d      	ldr	r2, [pc, #180]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	3318      	adds	r3, #24
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	589a      	ldr	r2, [r3, r2]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43d9      	mvns	r1, r3
 800382c:	4829      	ldr	r0, [pc, #164]	; (80038d4 <HAL_GPIO_DeInit+0x190>)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	400a      	ands	r2, r1
 8003834:	3318      	adds	r3, #24
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	2103      	movs	r1, #3
 8003844:	4099      	lsls	r1, r3
 8003846:	000b      	movs	r3, r1
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	08da      	lsrs	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3208      	adds	r2, #8
 8003856:	0092      	lsls	r2, r2, #2
 8003858:	58d3      	ldr	r3, [r2, r3]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	2107      	movs	r1, #7
 800385e:	400a      	ands	r2, r1
 8003860:	0092      	lsls	r2, r2, #2
 8003862:	210f      	movs	r1, #15
 8003864:	4091      	lsls	r1, r2
 8003866:	000a      	movs	r2, r1
 8003868:	43d1      	mvns	r1, r2
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	08d2      	lsrs	r2, r2, #3
 800386e:	4019      	ands	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3208      	adds	r2, #8
 8003874:	0092      	lsls	r2, r2, #2
 8003876:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	0052      	lsls	r2, r2, #1
 8003880:	2103      	movs	r1, #3
 8003882:	4091      	lsls	r1, r2
 8003884:	000a      	movs	r2, r1
 8003886:	43d2      	mvns	r2, r2
 8003888:	401a      	ands	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2101      	movs	r1, #1
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4091      	lsls	r1, r2
 8003898:	000a      	movs	r2, r1
 800389a:	43d2      	mvns	r2, r2
 800389c:	401a      	ands	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	0052      	lsls	r2, r2, #1
 80038aa:	2103      	movs	r1, #3
 80038ac:	4091      	lsls	r1, r2
 80038ae:	000a      	movs	r2, r1
 80038b0:	43d2      	mvns	r2, r2
 80038b2:	401a      	ands	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	3301      	adds	r3, #1
 80038bc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	40da      	lsrs	r2, r3
 80038c4:	1e13      	subs	r3, r2, #0
 80038c6:	d000      	beq.n	80038ca <HAL_GPIO_DeInit+0x186>
 80038c8:	e744      	b.n	8003754 <HAL_GPIO_DeInit+0x10>
  }
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b006      	add	sp, #24
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021800 	.word	0x40021800
 80038d8:	50000400 	.word	0x50000400
 80038dc:	50000800 	.word	0x50000800
 80038e0:	50000c00 	.word	0x50000c00

080038e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	0008      	movs	r0, r1
 80038ee:	0011      	movs	r1, r2
 80038f0:	1cbb      	adds	r3, r7, #2
 80038f2:	1c02      	adds	r2, r0, #0
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	1c7b      	adds	r3, r7, #1
 80038f8:	1c0a      	adds	r2, r1, #0
 80038fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038fc:	1c7b      	adds	r3, r7, #1
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003904:	1cbb      	adds	r3, r7, #2
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800390c:	e003      	b.n	8003916 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800390e:	1cbb      	adds	r3, r7, #2
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b002      	add	sp, #8
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e082      	b.n	8003a38 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2241      	movs	r2, #65	; 0x41
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d107      	bne.n	800394e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2240      	movs	r2, #64	; 0x40
 8003942:	2100      	movs	r1, #0
 8003944:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff f965 	bl	8002c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2241      	movs	r2, #65	; 0x41
 8003952:	2124      	movs	r1, #36	; 0x24
 8003954:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2101      	movs	r1, #1
 8003962:	438a      	bics	r2, r1
 8003964:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4934      	ldr	r1, [pc, #208]	; (8003a40 <HAL_I2C_Init+0x120>)
 8003970:	400a      	ands	r2, r1
 8003972:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4931      	ldr	r1, [pc, #196]	; (8003a44 <HAL_I2C_Init+0x124>)
 8003980:	400a      	ands	r2, r1
 8003982:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d108      	bne.n	800399e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	0209      	lsls	r1, r1, #8
 8003998:	430a      	orrs	r2, r1
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	e007      	b.n	80039ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2184      	movs	r1, #132	; 0x84
 80039a8:	0209      	lsls	r1, r1, #8
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d104      	bne.n	80039c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	491f      	ldr	r1, [pc, #124]	; (8003a48 <HAL_I2C_Init+0x128>)
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	491a      	ldr	r1, [pc, #104]	; (8003a44 <HAL_I2C_Init+0x124>)
 80039dc:	400a      	ands	r2, r1
 80039de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69d9      	ldr	r1, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2241      	movs	r2, #65	; 0x41
 8003a24:	2120      	movs	r1, #32
 8003a26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2242      	movs	r2, #66	; 0x42
 8003a32:	2100      	movs	r1, #0
 8003a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	f0ffffff 	.word	0xf0ffffff
 8003a44:	ffff7fff 	.word	0xffff7fff
 8003a48:	02008000 	.word	0x02008000

08003a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2241      	movs	r2, #65	; 0x41
 8003a5a:	5c9b      	ldrb	r3, [r3, r2]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d138      	bne.n	8003ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2240      	movs	r2, #64	; 0x40
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e032      	b.n	8003ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2240      	movs	r2, #64	; 0x40
 8003a74:	2101      	movs	r1, #1
 8003a76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2241      	movs	r2, #65	; 0x41
 8003a7c:	2124      	movs	r1, #36	; 0x24
 8003a7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	438a      	bics	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4911      	ldr	r1, [pc, #68]	; (8003ae0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2101      	movs	r1, #1
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2241      	movs	r2, #65	; 0x41
 8003ac4:	2120      	movs	r1, #32
 8003ac6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	2100      	movs	r1, #0
 8003ace:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	ffffefff 	.word	0xffffefff

08003ae4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2241      	movs	r2, #65	; 0x41
 8003af2:	5c9b      	ldrb	r3, [r3, r2]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d139      	bne.n	8003b6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2240      	movs	r2, #64	; 0x40
 8003afe:	5c9b      	ldrb	r3, [r3, r2]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e033      	b.n	8003b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2240      	movs	r2, #64	; 0x40
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2241      	movs	r2, #65	; 0x41
 8003b14:	2124      	movs	r1, #36	; 0x24
 8003b16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2101      	movs	r1, #1
 8003b24:	438a      	bics	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2241      	movs	r2, #65	; 0x41
 8003b5e:	2120      	movs	r1, #32
 8003b60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2240      	movs	r2, #64	; 0x40
 8003b66:	2100      	movs	r1, #0
 8003b68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
  }
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b004      	add	sp, #16
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	fffff0ff 	.word	0xfffff0ff

08003b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003b84:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d11f      	bne.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	189b      	adds	r3, r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4912      	ldr	r1, [pc, #72]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7fc fac4 	bl	800013c <__udivsi3>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bba:	e008      	b.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e001      	b.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e009      	b.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d0ed      	beq.n	8003bbc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b004      	add	sp, #16
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	fffff9ff 	.word	0xfffff9ff
 8003bf4:	20000010 	.word	0x20000010
 8003bf8:	000f4240 	.word	0x000f4240

08003bfc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	23e0      	movs	r3, #224	; 0xe0
 8003c06:	01db      	lsls	r3, r3, #7
 8003c08:	4013      	ands	r3, r2
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e2fe      	b.n	8004224 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d100      	bne.n	8003c32 <HAL_RCC_OscConfig+0x1e>
 8003c30:	e07c      	b.n	8003d2c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c32:	4bc3      	ldr	r3, [pc, #780]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2238      	movs	r2, #56	; 0x38
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c3c:	4bc0      	ldr	r3, [pc, #768]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2203      	movs	r2, #3
 8003c42:	4013      	ands	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d102      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3e>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d002      	beq.n	8003c58 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4bb9      	ldr	r3, [pc, #740]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	029b      	lsls	r3, r3, #10
 8003c60:	4013      	ands	r3, r2
 8003c62:	d062      	beq.n	8003d2a <HAL_RCC_OscConfig+0x116>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d15e      	bne.n	8003d2a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e2d9      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	025b      	lsls	r3, r3, #9
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_OscConfig+0x78>
 8003c7c:	4bb0      	ldr	r3, [pc, #704]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4baf      	ldr	r3, [pc, #700]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	0249      	lsls	r1, r1, #9
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e020      	b.n	8003cce <HAL_RCC_OscConfig+0xba>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	23a0      	movs	r3, #160	; 0xa0
 8003c92:	02db      	lsls	r3, r3, #11
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d10e      	bne.n	8003cb6 <HAL_RCC_OscConfig+0xa2>
 8003c98:	4ba9      	ldr	r3, [pc, #676]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4ba8      	ldr	r3, [pc, #672]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	02c9      	lsls	r1, r1, #11
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	4ba6      	ldr	r3, [pc, #664]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4ba5      	ldr	r3, [pc, #660]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003cac:	2180      	movs	r1, #128	; 0x80
 8003cae:	0249      	lsls	r1, r1, #9
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e00b      	b.n	8003cce <HAL_RCC_OscConfig+0xba>
 8003cb6:	4ba2      	ldr	r3, [pc, #648]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4ba1      	ldr	r3, [pc, #644]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003cbc:	49a1      	ldr	r1, [pc, #644]	; (8003f44 <HAL_RCC_OscConfig+0x330>)
 8003cbe:	400a      	ands	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	4b9f      	ldr	r3, [pc, #636]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b9e      	ldr	r3, [pc, #632]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003cc8:	499f      	ldr	r1, [pc, #636]	; (8003f48 <HAL_RCC_OscConfig+0x334>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d014      	beq.n	8003d00 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7ff fae9 	bl	80032ac <HAL_GetTick>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7ff fae4 	bl	80032ac <HAL_GetTick>
 8003ce4:	0002      	movs	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e298      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf2:	4b93      	ldr	r3, [pc, #588]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	029b      	lsls	r3, r3, #10
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0xcc>
 8003cfe:	e015      	b.n	8003d2c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7ff fad4 	bl	80032ac <HAL_GetTick>
 8003d04:	0003      	movs	r3, r0
 8003d06:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0a:	f7ff facf 	bl	80032ac <HAL_GetTick>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e283      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d1c:	4b88      	ldr	r3, [pc, #544]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	029b      	lsls	r3, r3, #10
 8003d24:	4013      	ands	r3, r2
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0xf6>
 8003d28:	e000      	b.n	8003d2c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2202      	movs	r2, #2
 8003d32:	4013      	ands	r3, r2
 8003d34:	d100      	bne.n	8003d38 <HAL_RCC_OscConfig+0x124>
 8003d36:	e099      	b.n	8003e6c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d38:	4b81      	ldr	r3, [pc, #516]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2238      	movs	r2, #56	; 0x38
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d42:	4b7f      	ldr	r3, [pc, #508]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4013      	ands	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d102      	bne.n	8003d58 <HAL_RCC_OscConfig+0x144>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d002      	beq.n	8003d5e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d135      	bne.n	8003dca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d5e:	4b78      	ldr	r3, [pc, #480]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4013      	ands	r3, r2
 8003d68:	d005      	beq.n	8003d76 <HAL_RCC_OscConfig+0x162>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e256      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d76:	4b72      	ldr	r3, [pc, #456]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4a74      	ldr	r2, [pc, #464]	; (8003f4c <HAL_RCC_OscConfig+0x338>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	0019      	movs	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	021a      	lsls	r2, r3, #8
 8003d86:	4b6e      	ldr	r3, [pc, #440]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d112      	bne.n	8003db8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d92:	4b6b      	ldr	r3, [pc, #428]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6e      	ldr	r2, [pc, #440]	; (8003f50 <HAL_RCC_OscConfig+0x33c>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	4b67      	ldr	r3, [pc, #412]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003da6:	4b66      	ldr	r3, [pc, #408]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0adb      	lsrs	r3, r3, #11
 8003dac:	2207      	movs	r2, #7
 8003dae:	4013      	ands	r3, r2
 8003db0:	4a68      	ldr	r2, [pc, #416]	; (8003f54 <HAL_RCC_OscConfig+0x340>)
 8003db2:	40da      	lsrs	r2, r3
 8003db4:	4b68      	ldr	r3, [pc, #416]	; (8003f58 <HAL_RCC_OscConfig+0x344>)
 8003db6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003db8:	4b68      	ldr	r3, [pc, #416]	; (8003f5c <HAL_RCC_OscConfig+0x348>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff fa19 	bl	80031f4 <HAL_InitTick>
 8003dc2:	1e03      	subs	r3, r0, #0
 8003dc4:	d051      	beq.n	8003e6a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e22c      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d030      	beq.n	8003e34 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003dd2:	4b5b      	ldr	r3, [pc, #364]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a5e      	ldr	r2, [pc, #376]	; (8003f50 <HAL_RCC_OscConfig+0x33c>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	0019      	movs	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003de6:	4b56      	ldr	r3, [pc, #344]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b55      	ldr	r3, [pc, #340]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	0049      	lsls	r1, r1, #1
 8003df0:	430a      	orrs	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7ff fa5a 	bl	80032ac <HAL_GetTick>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfe:	f7ff fa55 	bl	80032ac <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e209      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e10:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1c:	4b48      	ldr	r3, [pc, #288]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4a4a      	ldr	r2, [pc, #296]	; (8003f4c <HAL_RCC_OscConfig+0x338>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	0019      	movs	r1, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	021a      	lsls	r2, r3, #8
 8003e2c:	4b44      	ldr	r3, [pc, #272]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	e01b      	b.n	8003e6c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003e34:	4b42      	ldr	r3, [pc, #264]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003e3a:	4949      	ldr	r1, [pc, #292]	; (8003f60 <HAL_RCC_OscConfig+0x34c>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7ff fa34 	bl	80032ac <HAL_GetTick>
 8003e44:	0003      	movs	r3, r0
 8003e46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4a:	f7ff fa2f 	bl	80032ac <HAL_GetTick>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e1e3      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e5c:	4b38      	ldr	r3, [pc, #224]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4013      	ands	r3, r2
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x236>
 8003e68:	e000      	b.n	8003e6c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e6a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2208      	movs	r2, #8
 8003e72:	4013      	ands	r3, r2
 8003e74:	d047      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e76:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2238      	movs	r2, #56	; 0x38
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b18      	cmp	r3, #24
 8003e80:	d10a      	bne.n	8003e98 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003e82:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d03c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2f2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d138      	bne.n	8003f06 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e1c5      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d019      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003ea2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ea4:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7ff f9fe 	bl	80032ac <HAL_GetTick>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb6:	f7ff f9f9 	bl	80032ac <HAL_GetTick>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e1ad      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ecc:	2202      	movs	r2, #2
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d0f1      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x2a2>
 8003ed2:	e018      	b.n	8003f06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003ed6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ed8:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003eda:	2101      	movs	r1, #1
 8003edc:	438a      	bics	r2, r1
 8003ede:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7ff f9e4 	bl	80032ac <HAL_GetTick>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eea:	f7ff f9df 	bl	80032ac <HAL_GetTick>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e193      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003efc:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f00:	2202      	movs	r2, #2
 8003f02:	4013      	ands	r3, r2
 8003f04:	d1f1      	bne.n	8003eea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2fe>
 8003f10:	e0c6      	b.n	80040a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f12:	231f      	movs	r3, #31
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2238      	movs	r2, #56	; 0x38
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d11e      	bne.n	8003f64 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_OscConfig+0x32c>)
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d100      	bne.n	8003f32 <HAL_RCC_OscConfig+0x31e>
 8003f30:	e0b6      	b.n	80040a0 <HAL_RCC_OscConfig+0x48c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d000      	beq.n	8003f3c <HAL_RCC_OscConfig+0x328>
 8003f3a:	e0b1      	b.n	80040a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e171      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
 8003f40:	40021000 	.word	0x40021000
 8003f44:	fffeffff 	.word	0xfffeffff
 8003f48:	fffbffff 	.word	0xfffbffff
 8003f4c:	ffff80ff 	.word	0xffff80ff
 8003f50:	ffffc7ff 	.word	0xffffc7ff
 8003f54:	00f42400 	.word	0x00f42400
 8003f58:	20000010 	.word	0x20000010
 8003f5c:	20000014 	.word	0x20000014
 8003f60:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f64:	4bb1      	ldr	r3, [pc, #708]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8003f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	055b      	lsls	r3, r3, #21
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_OscConfig+0x360>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x362>
 8003f74:	2300      	movs	r3, #0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d011      	beq.n	8003f9e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f7a:	4bac      	ldr	r3, [pc, #688]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8003f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7e:	4bab      	ldr	r3, [pc, #684]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8003f80:	2180      	movs	r1, #128	; 0x80
 8003f82:	0549      	lsls	r1, r1, #21
 8003f84:	430a      	orrs	r2, r1
 8003f86:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f88:	4ba8      	ldr	r3, [pc, #672]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8003f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	055b      	lsls	r3, r3, #21
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003f96:	231f      	movs	r3, #31
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f9e:	4ba4      	ldr	r3, [pc, #656]	; (8004230 <HAL_RCC_OscConfig+0x61c>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d11a      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003faa:	4ba1      	ldr	r3, [pc, #644]	; (8004230 <HAL_RCC_OscConfig+0x61c>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4ba0      	ldr	r3, [pc, #640]	; (8004230 <HAL_RCC_OscConfig+0x61c>)
 8003fb0:	2180      	movs	r1, #128	; 0x80
 8003fb2:	0049      	lsls	r1, r1, #1
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003fb8:	f7ff f978 	bl	80032ac <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7ff f973 	bl	80032ac <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e127      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd4:	4b96      	ldr	r3, [pc, #600]	; (8004230 <HAL_RCC_OscConfig+0x61c>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x3e2>
 8003fe8:	4b90      	ldr	r3, [pc, #576]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8003fea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fec:	4b8f      	ldr	r3, [pc, #572]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8003fee:	2101      	movs	r1, #1
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ff4:	e01c      	b.n	8004030 <HAL_RCC_OscConfig+0x41c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x404>
 8003ffe:	4b8b      	ldr	r3, [pc, #556]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004000:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004002:	4b8a      	ldr	r3, [pc, #552]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004004:	2104      	movs	r1, #4
 8004006:	430a      	orrs	r2, r1
 8004008:	65da      	str	r2, [r3, #92]	; 0x5c
 800400a:	4b88      	ldr	r3, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800400c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800400e:	4b87      	ldr	r3, [pc, #540]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004010:	2101      	movs	r1, #1
 8004012:	430a      	orrs	r2, r1
 8004014:	65da      	str	r2, [r3, #92]	; 0x5c
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0x41c>
 8004018:	4b84      	ldr	r3, [pc, #528]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800401a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800401c:	4b83      	ldr	r3, [pc, #524]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800401e:	2101      	movs	r1, #1
 8004020:	438a      	bics	r2, r1
 8004022:	65da      	str	r2, [r3, #92]	; 0x5c
 8004024:	4b81      	ldr	r3, [pc, #516]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004026:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004028:	4b80      	ldr	r3, [pc, #512]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800402a:	2104      	movs	r1, #4
 800402c:	438a      	bics	r2, r1
 800402e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d014      	beq.n	8004062 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7ff f938 	bl	80032ac <HAL_GetTick>
 800403c:	0003      	movs	r3, r0
 800403e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004040:	e009      	b.n	8004056 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7ff f933 	bl	80032ac <HAL_GetTick>
 8004046:	0002      	movs	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	4a79      	ldr	r2, [pc, #484]	; (8004234 <HAL_RCC_OscConfig+0x620>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0e6      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004056:	4b75      	ldr	r3, [pc, #468]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	2202      	movs	r2, #2
 800405c:	4013      	ands	r3, r2
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x42e>
 8004060:	e013      	b.n	800408a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7ff f923 	bl	80032ac <HAL_GetTick>
 8004066:	0003      	movs	r3, r0
 8004068:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800406a:	e009      	b.n	8004080 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7ff f91e 	bl	80032ac <HAL_GetTick>
 8004070:	0002      	movs	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	4a6f      	ldr	r2, [pc, #444]	; (8004234 <HAL_RCC_OscConfig+0x620>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e0d1      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004080:	4b6a      	ldr	r3, [pc, #424]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004084:	2202      	movs	r2, #2
 8004086:	4013      	ands	r3, r2
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800408a:	231f      	movs	r3, #31
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004098:	4b64      	ldr	r3, [pc, #400]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800409a:	4967      	ldr	r1, [pc, #412]	; (8004238 <HAL_RCC_OscConfig+0x624>)
 800409c:	400a      	ands	r2, r1
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d100      	bne.n	80040aa <HAL_RCC_OscConfig+0x496>
 80040a8:	e0bb      	b.n	8004222 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040aa:	4b60      	ldr	r3, [pc, #384]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2238      	movs	r2, #56	; 0x38
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d100      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4a4>
 80040b6:	e07b      	b.n	80041b0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d156      	bne.n	800416e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b5a      	ldr	r3, [pc, #360]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80040c6:	495d      	ldr	r1, [pc, #372]	; (800423c <HAL_RCC_OscConfig+0x628>)
 80040c8:	400a      	ands	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7ff f8ee 	bl	80032ac <HAL_GetTick>
 80040d0:	0003      	movs	r3, r0
 80040d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7ff f8e9 	bl	80032ac <HAL_GetTick>
 80040da:	0002      	movs	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e09d      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e8:	4b50      	ldr	r3, [pc, #320]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	049b      	lsls	r3, r3, #18
 80040f0:	4013      	ands	r3, r2
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f4:	4b4d      	ldr	r3, [pc, #308]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a51      	ldr	r2, [pc, #324]	; (8004240 <HAL_RCC_OscConfig+0x62c>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	0019      	movs	r1, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	431a      	orrs	r2, r3
 8004122:	4b42      	ldr	r3, [pc, #264]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004124:	430a      	orrs	r2, r1
 8004126:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004128:	4b40      	ldr	r3, [pc, #256]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4b3f      	ldr	r3, [pc, #252]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	0449      	lsls	r1, r1, #17
 8004132:	430a      	orrs	r2, r1
 8004134:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	4b3c      	ldr	r3, [pc, #240]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800413c:	2180      	movs	r1, #128	; 0x80
 800413e:	0549      	lsls	r1, r1, #21
 8004140:	430a      	orrs	r2, r1
 8004142:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7ff f8b2 	bl	80032ac <HAL_GetTick>
 8004148:	0003      	movs	r3, r0
 800414a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414e:	f7ff f8ad 	bl	80032ac <HAL_GetTick>
 8004152:	0002      	movs	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e061      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	049b      	lsls	r3, r3, #18
 8004168:	4013      	ands	r3, r2
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x53a>
 800416c:	e059      	b.n	8004222 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4b2f      	ldr	r3, [pc, #188]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b2e      	ldr	r3, [pc, #184]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004174:	4931      	ldr	r1, [pc, #196]	; (800423c <HAL_RCC_OscConfig+0x628>)
 8004176:	400a      	ands	r2, r1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7ff f897 	bl	80032ac <HAL_GetTick>
 800417e:	0003      	movs	r3, r0
 8004180:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004184:	f7ff f892 	bl	80032ac <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e046      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004196:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	049b      	lsls	r3, r3, #18
 800419e:	4013      	ands	r3, r2
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80041a8:	4926      	ldr	r1, [pc, #152]	; (8004244 <HAL_RCC_OscConfig+0x630>)
 80041aa:	400a      	ands	r2, r1
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	e038      	b.n	8004222 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e033      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2203      	movs	r2, #3
 80041c6:	401a      	ands	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d126      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2270      	movs	r2, #112	; 0x70
 80041d4:	401a      	ands	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d11f      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	23fe      	movs	r3, #254	; 0xfe
 80041e2:	01db      	lsls	r3, r3, #7
 80041e4:	401a      	ands	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d116      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	23f8      	movs	r3, #248	; 0xf8
 80041f4:	039b      	lsls	r3, r3, #14
 80041f6:	401a      	ands	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d10e      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	23e0      	movs	r3, #224	; 0xe0
 8004204:	051b      	lsls	r3, r3, #20
 8004206:	401a      	ands	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	0f5b      	lsrs	r3, r3, #29
 8004214:	075a      	lsls	r2, r3, #29
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	b008      	add	sp, #32
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	40007000 	.word	0x40007000
 8004234:	00001388 	.word	0x00001388
 8004238:	efffffff 	.word	0xefffffff
 800423c:	feffffff 	.word	0xfeffffff
 8004240:	11c1808c 	.word	0x11c1808c
 8004244:	eefefffc 	.word	0xeefefffc

08004248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0e9      	b.n	8004430 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800425c:	4b76      	ldr	r3, [pc, #472]	; (8004438 <HAL_RCC_ClockConfig+0x1f0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2207      	movs	r2, #7
 8004262:	4013      	ands	r3, r2
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d91e      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b73      	ldr	r3, [pc, #460]	; (8004438 <HAL_RCC_ClockConfig+0x1f0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2207      	movs	r2, #7
 8004270:	4393      	bics	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	4b70      	ldr	r3, [pc, #448]	; (8004438 <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800427c:	f7ff f816 	bl	80032ac <HAL_GetTick>
 8004280:	0003      	movs	r3, r0
 8004282:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004284:	e009      	b.n	800429a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004286:	f7ff f811 	bl	80032ac <HAL_GetTick>
 800428a:	0002      	movs	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	4a6a      	ldr	r2, [pc, #424]	; (800443c <HAL_RCC_ClockConfig+0x1f4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0ca      	b.n	8004430 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800429a:	4b67      	ldr	r3, [pc, #412]	; (8004438 <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2207      	movs	r2, #7
 80042a0:	4013      	ands	r3, r2
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1ee      	bne.n	8004286 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2202      	movs	r2, #2
 80042ae:	4013      	ands	r3, r2
 80042b0:	d015      	beq.n	80042de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2204      	movs	r2, #4
 80042b8:	4013      	ands	r3, r2
 80042ba:	d006      	beq.n	80042ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042bc:	4b60      	ldr	r3, [pc, #384]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	4b5f      	ldr	r3, [pc, #380]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 80042c2:	21e0      	movs	r1, #224	; 0xe0
 80042c4:	01c9      	lsls	r1, r1, #7
 80042c6:	430a      	orrs	r2, r1
 80042c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ca:	4b5d      	ldr	r3, [pc, #372]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	4a5d      	ldr	r2, [pc, #372]	; (8004444 <HAL_RCC_ClockConfig+0x1fc>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	4b59      	ldr	r3, [pc, #356]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 80042da:	430a      	orrs	r2, r1
 80042dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	d057      	beq.n	8004398 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	4013      	ands	r3, r2
 80042fa:	d12b      	bne.n	8004354 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e097      	b.n	8004430 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d107      	bne.n	8004318 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004308:	4b4d      	ldr	r3, [pc, #308]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	049b      	lsls	r3, r3, #18
 8004310:	4013      	ands	r3, r2
 8004312:	d11f      	bne.n	8004354 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e08b      	b.n	8004430 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004320:	4b47      	ldr	r3, [pc, #284]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4013      	ands	r3, r2
 800432a:	d113      	bne.n	8004354 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e07f      	b.n	8004430 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d106      	bne.n	8004346 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004338:	4b41      	ldr	r3, [pc, #260]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 800433a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433c:	2202      	movs	r2, #2
 800433e:	4013      	ands	r3, r2
 8004340:	d108      	bne.n	8004354 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e074      	b.n	8004430 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004346:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 8004348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434a:	2202      	movs	r2, #2
 800434c:	4013      	ands	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e06d      	b.n	8004430 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004354:	4b3a      	ldr	r3, [pc, #232]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2207      	movs	r2, #7
 800435a:	4393      	bics	r3, r2
 800435c:	0019      	movs	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	4b37      	ldr	r3, [pc, #220]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004368:	f7fe ffa0 	bl	80032ac <HAL_GetTick>
 800436c:	0003      	movs	r3, r0
 800436e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004370:	e009      	b.n	8004386 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004372:	f7fe ff9b 	bl	80032ac <HAL_GetTick>
 8004376:	0002      	movs	r2, r0
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	4a2f      	ldr	r2, [pc, #188]	; (800443c <HAL_RCC_ClockConfig+0x1f4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e054      	b.n	8004430 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2238      	movs	r2, #56	; 0x38
 800438c:	401a      	ands	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	429a      	cmp	r2, r3
 8004396:	d1ec      	bne.n	8004372 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <HAL_RCC_ClockConfig+0x1f0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2207      	movs	r2, #7
 800439e:	4013      	ands	r3, r2
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d21e      	bcs.n	80043e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_RCC_ClockConfig+0x1f0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2207      	movs	r2, #7
 80043ac:	4393      	bics	r3, r2
 80043ae:	0019      	movs	r1, r3
 80043b0:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_RCC_ClockConfig+0x1f0>)
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043b8:	f7fe ff78 	bl	80032ac <HAL_GetTick>
 80043bc:	0003      	movs	r3, r0
 80043be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043c0:	e009      	b.n	80043d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c2:	f7fe ff73 	bl	80032ac <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_RCC_ClockConfig+0x1f4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e02c      	b.n	8004430 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <HAL_RCC_ClockConfig+0x1f0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2207      	movs	r2, #7
 80043dc:	4013      	ands	r3, r2
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d1ee      	bne.n	80043c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2204      	movs	r2, #4
 80043ea:	4013      	ands	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	4a15      	ldr	r2, [pc, #84]	; (8004448 <HAL_RCC_ClockConfig+0x200>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	0019      	movs	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004402:	f000 f829 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8004406:	0001      	movs	r1, r0
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <HAL_RCC_ClockConfig+0x1f8>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	220f      	movs	r2, #15
 8004410:	401a      	ands	r2, r3
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <HAL_RCC_ClockConfig+0x204>)
 8004414:	0092      	lsls	r2, r2, #2
 8004416:	58d3      	ldr	r3, [r2, r3]
 8004418:	221f      	movs	r2, #31
 800441a:	4013      	ands	r3, r2
 800441c:	000a      	movs	r2, r1
 800441e:	40da      	lsrs	r2, r3
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_ClockConfig+0x208>)
 8004422:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_ClockConfig+0x20c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0018      	movs	r0, r3
 800442a:	f7fe fee3 	bl	80031f4 <HAL_InitTick>
 800442e:	0003      	movs	r3, r0
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b004      	add	sp, #16
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40022000 	.word	0x40022000
 800443c:	00001388 	.word	0x00001388
 8004440:	40021000 	.word	0x40021000
 8004444:	fffff0ff 	.word	0xfffff0ff
 8004448:	ffff8fff 	.word	0xffff8fff
 800444c:	0800b8a4 	.word	0x0800b8a4
 8004450:	20000010 	.word	0x20000010
 8004454:	20000014 	.word	0x20000014

08004458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800445e:	4b3c      	ldr	r3, [pc, #240]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2238      	movs	r2, #56	; 0x38
 8004464:	4013      	ands	r3, r2
 8004466:	d10f      	bne.n	8004488 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004468:	4b39      	ldr	r3, [pc, #228]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0adb      	lsrs	r3, r3, #11
 800446e:	2207      	movs	r2, #7
 8004470:	4013      	ands	r3, r2
 8004472:	2201      	movs	r2, #1
 8004474:	409a      	lsls	r2, r3
 8004476:	0013      	movs	r3, r2
 8004478:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800447a:	6839      	ldr	r1, [r7, #0]
 800447c:	4835      	ldr	r0, [pc, #212]	; (8004554 <HAL_RCC_GetSysClockFreq+0xfc>)
 800447e:	f7fb fe5d 	bl	800013c <__udivsi3>
 8004482:	0003      	movs	r3, r0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e05d      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004488:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2238      	movs	r2, #56	; 0x38
 800448e:	4013      	ands	r3, r2
 8004490:	2b08      	cmp	r3, #8
 8004492:	d102      	bne.n	800449a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004494:	4b30      	ldr	r3, [pc, #192]	; (8004558 <HAL_RCC_GetSysClockFreq+0x100>)
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	e054      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800449a:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2238      	movs	r2, #56	; 0x38
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d138      	bne.n	8004518 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80044a6:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2203      	movs	r2, #3
 80044ac:	4013      	ands	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	091b      	lsrs	r3, r3, #4
 80044b6:	2207      	movs	r2, #7
 80044b8:	4013      	ands	r3, r2
 80044ba:	3301      	adds	r3, #1
 80044bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d10d      	bne.n	80044e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	4824      	ldr	r0, [pc, #144]	; (8004558 <HAL_RCC_GetSysClockFreq+0x100>)
 80044c8:	f7fb fe38 	bl	800013c <__udivsi3>
 80044cc:	0003      	movs	r3, r0
 80044ce:	0019      	movs	r1, r3
 80044d0:	4b1f      	ldr	r3, [pc, #124]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	227f      	movs	r2, #127	; 0x7f
 80044d8:	4013      	ands	r3, r2
 80044da:	434b      	muls	r3, r1
 80044dc:	617b      	str	r3, [r7, #20]
        break;
 80044de:	e00d      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	481c      	ldr	r0, [pc, #112]	; (8004554 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044e4:	f7fb fe2a 	bl	800013c <__udivsi3>
 80044e8:	0003      	movs	r3, r0
 80044ea:	0019      	movs	r1, r3
 80044ec:	4b18      	ldr	r3, [pc, #96]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	227f      	movs	r2, #127	; 0x7f
 80044f4:	4013      	ands	r3, r2
 80044f6:	434b      	muls	r3, r1
 80044f8:	617b      	str	r3, [r7, #20]
        break;
 80044fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80044fc:	4b14      	ldr	r3, [pc, #80]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	0f5b      	lsrs	r3, r3, #29
 8004502:	2207      	movs	r2, #7
 8004504:	4013      	ands	r3, r2
 8004506:	3301      	adds	r3, #1
 8004508:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	6978      	ldr	r0, [r7, #20]
 800450e:	f7fb fe15 	bl	800013c <__udivsi3>
 8004512:	0003      	movs	r3, r0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	e015      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004518:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2238      	movs	r2, #56	; 0x38
 800451e:	4013      	ands	r3, r2
 8004520:	2b20      	cmp	r3, #32
 8004522:	d103      	bne.n	800452c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	e00b      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800452c:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCC_GetSysClockFreq+0xf8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2238      	movs	r2, #56	; 0x38
 8004532:	4013      	ands	r3, r2
 8004534:	2b18      	cmp	r3, #24
 8004536:	d103      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004538:	23fa      	movs	r3, #250	; 0xfa
 800453a:	01db      	lsls	r3, r3, #7
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	e001      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004544:	693b      	ldr	r3, [r7, #16]
}
 8004546:	0018      	movs	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	b006      	add	sp, #24
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	40021000 	.word	0x40021000
 8004554:	00f42400 	.word	0x00f42400
 8004558:	007a1200 	.word	0x007a1200

0800455c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004560:	4b02      	ldr	r3, [pc, #8]	; (800456c <HAL_RCC_GetHCLKFreq+0x10>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	0018      	movs	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	20000010 	.word	0x20000010

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b5b0      	push	{r4, r5, r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004574:	f7ff fff2 	bl	800455c <HAL_RCC_GetHCLKFreq>
 8004578:	0004      	movs	r4, r0
 800457a:	f7ff fb3f 	bl	8003bfc <LL_RCC_GetAPB1Prescaler>
 800457e:	0003      	movs	r3, r0
 8004580:	0b1a      	lsrs	r2, r3, #12
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004584:	0092      	lsls	r2, r2, #2
 8004586:	58d3      	ldr	r3, [r2, r3]
 8004588:	221f      	movs	r2, #31
 800458a:	4013      	ands	r3, r2
 800458c:	40dc      	lsrs	r4, r3
 800458e:	0023      	movs	r3, r4
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	bdb0      	pop	{r4, r5, r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	0800b8e4 	.word	0x0800b8e4

0800459c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80045a4:	2313      	movs	r3, #19
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045ac:	2312      	movs	r3, #18
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	029b      	lsls	r3, r3, #10
 80045bc:	4013      	ands	r3, r2
 80045be:	d100      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80045c0:	e0a3      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c2:	2011      	movs	r0, #17
 80045c4:	183b      	adds	r3, r7, r0
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ca:	4bc3      	ldr	r3, [pc, #780]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	055b      	lsls	r3, r3, #21
 80045d2:	4013      	ands	r3, r2
 80045d4:	d110      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	4bc0      	ldr	r3, [pc, #768]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045da:	4bbf      	ldr	r3, [pc, #764]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	0549      	lsls	r1, r1, #21
 80045e0:	430a      	orrs	r2, r1
 80045e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80045e4:	4bbc      	ldr	r3, [pc, #752]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	055b      	lsls	r3, r3, #21
 80045ec:	4013      	ands	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f2:	183b      	adds	r3, r7, r0
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045f8:	4bb8      	ldr	r3, [pc, #736]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4bb7      	ldr	r3, [pc, #732]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	0049      	lsls	r1, r1, #1
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004606:	f7fe fe51 	bl	80032ac <HAL_GetTick>
 800460a:	0003      	movs	r3, r0
 800460c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800460e:	e00b      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004610:	f7fe fe4c 	bl	80032ac <HAL_GetTick>
 8004614:	0002      	movs	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d904      	bls.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800461e:	2313      	movs	r3, #19
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	2203      	movs	r2, #3
 8004624:	701a      	strb	r2, [r3, #0]
        break;
 8004626:	e005      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004628:	4bac      	ldr	r3, [pc, #688]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4013      	ands	r3, r2
 8004632:	d0ed      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004634:	2313      	movs	r3, #19
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d154      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800463e:	4ba6      	ldr	r3, [pc, #664]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004642:	23c0      	movs	r3, #192	; 0xc0
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4013      	ands	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d019      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	429a      	cmp	r2, r3
 8004658:	d014      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800465a:	4b9f      	ldr	r3, [pc, #636]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	4aa0      	ldr	r2, [pc, #640]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004660:	4013      	ands	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004664:	4b9c      	ldr	r3, [pc, #624]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004668:	4b9b      	ldr	r3, [pc, #620]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	0249      	lsls	r1, r1, #9
 800466e:	430a      	orrs	r2, r1
 8004670:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004672:	4b99      	ldr	r3, [pc, #612]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004674:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004676:	4b98      	ldr	r3, [pc, #608]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004678:	499a      	ldr	r1, [pc, #616]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800467a:	400a      	ands	r2, r1
 800467c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800467e:	4b96      	ldr	r3, [pc, #600]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2201      	movs	r2, #1
 8004688:	4013      	ands	r3, r2
 800468a:	d016      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fe fe0e 	bl	80032ac <HAL_GetTick>
 8004690:	0003      	movs	r3, r0
 8004692:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004694:	e00c      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fe fe09 	bl	80032ac <HAL_GetTick>
 800469a:	0002      	movs	r2, r0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	4a91      	ldr	r2, [pc, #580]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d904      	bls.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80046a6:	2313      	movs	r3, #19
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	2203      	movs	r2, #3
 80046ac:	701a      	strb	r2, [r3, #0]
            break;
 80046ae:	e004      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b0:	4b89      	ldr	r3, [pc, #548]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b4:	2202      	movs	r2, #2
 80046b6:	4013      	ands	r3, r2
 80046b8:	d0ed      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80046ba:	2313      	movs	r3, #19
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c4:	4b84      	ldr	r3, [pc, #528]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	4a85      	ldr	r2, [pc, #532]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	0019      	movs	r1, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d2:	4b81      	ldr	r3, [pc, #516]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046d4:	430a      	orrs	r2, r1
 80046d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80046d8:	e00c      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046da:	2312      	movs	r3, #18
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	2213      	movs	r2, #19
 80046e0:	18ba      	adds	r2, r7, r2
 80046e2:	7812      	ldrb	r2, [r2, #0]
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e005      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e8:	2312      	movs	r3, #18
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	2213      	movs	r2, #19
 80046ee:	18ba      	adds	r2, r7, r2
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046f4:	2311      	movs	r3, #17
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fe:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004702:	4b75      	ldr	r3, [pc, #468]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004704:	4979      	ldr	r1, [pc, #484]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004706:	400a      	ands	r2, r1
 8004708:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2201      	movs	r2, #1
 8004710:	4013      	ands	r3, r2
 8004712:	d009      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004714:	4b70      	ldr	r3, [pc, #448]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004718:	2203      	movs	r2, #3
 800471a:	4393      	bics	r3, r2
 800471c:	0019      	movs	r1, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	4b6d      	ldr	r3, [pc, #436]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004724:	430a      	orrs	r2, r1
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2202      	movs	r2, #2
 800472e:	4013      	ands	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004732:	4b69      	ldr	r3, [pc, #420]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	220c      	movs	r2, #12
 8004738:	4393      	bics	r3, r2
 800473a:	0019      	movs	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004742:	430a      	orrs	r2, r1
 8004744:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2210      	movs	r2, #16
 800474c:	4013      	ands	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004750:	4b61      	ldr	r3, [pc, #388]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	4a66      	ldr	r2, [pc, #408]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004756:	4013      	ands	r3, r2
 8004758:	0019      	movs	r1, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	4b5e      	ldr	r3, [pc, #376]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004760:	430a      	orrs	r2, r1
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4013      	ands	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004770:	4b59      	ldr	r3, [pc, #356]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	4a5f      	ldr	r2, [pc, #380]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004776:	4013      	ands	r3, r2
 8004778:	0019      	movs	r1, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	4b56      	ldr	r3, [pc, #344]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004780:	430a      	orrs	r2, r1
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4013      	ands	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004790:	4b51      	ldr	r3, [pc, #324]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	4a58      	ldr	r2, [pc, #352]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004796:	4013      	ands	r3, r2
 8004798:	0019      	movs	r1, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	4b4e      	ldr	r3, [pc, #312]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047a0:	430a      	orrs	r2, r1
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2220      	movs	r2, #32
 80047aa:	4013      	ands	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ae:	4b4a      	ldr	r3, [pc, #296]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	4a52      	ldr	r2, [pc, #328]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	0019      	movs	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	4b46      	ldr	r3, [pc, #280]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047be:	430a      	orrs	r2, r1
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	01db      	lsls	r3, r3, #7
 80047ca:	4013      	ands	r3, r2
 80047cc:	d015      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ce:	4b42      	ldr	r3, [pc, #264]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	0899      	lsrs	r1, r3, #2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	4b3f      	ldr	r3, [pc, #252]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047dc:	430a      	orrs	r2, r1
 80047de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	05db      	lsls	r3, r3, #23
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d106      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047ec:	4b3a      	ldr	r3, [pc, #232]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047f2:	2180      	movs	r1, #128	; 0x80
 80047f4:	0249      	lsls	r1, r1, #9
 80047f6:	430a      	orrs	r2, r1
 80047f8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	031b      	lsls	r3, r3, #12
 8004802:	4013      	ands	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004806:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	4393      	bics	r3, r2
 800480e:	0019      	movs	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004814:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004816:	430a      	orrs	r2, r1
 8004818:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	039b      	lsls	r3, r3, #14
 8004822:	4013      	ands	r3, r2
 8004824:	d016      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004826:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	4a35      	ldr	r2, [pc, #212]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800482c:	4013      	ands	r3, r2
 800482e:	0019      	movs	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004834:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004836:	430a      	orrs	r2, r1
 8004838:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	03db      	lsls	r3, r3, #15
 8004842:	429a      	cmp	r2, r3
 8004844:	d106      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	4b23      	ldr	r3, [pc, #140]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	0449      	lsls	r1, r1, #17
 8004850:	430a      	orrs	r2, r1
 8004852:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	03db      	lsls	r3, r3, #15
 800485c:	4013      	ands	r3, r2
 800485e:	d016      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	4a27      	ldr	r2, [pc, #156]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004866:	4013      	ands	r3, r2
 8004868:	0019      	movs	r1, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004870:	430a      	orrs	r2, r1
 8004872:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	045b      	lsls	r3, r3, #17
 800487c:	429a      	cmp	r2, r3
 800487e:	d106      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004880:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004886:	2180      	movs	r1, #128	; 0x80
 8004888:	0449      	lsls	r1, r1, #17
 800488a:	430a      	orrs	r2, r1
 800488c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	4013      	ands	r3, r2
 8004898:	d016      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800489a:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	4a1a      	ldr	r2, [pc, #104]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	0019      	movs	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048aa:	430a      	orrs	r2, r1
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	01db      	lsls	r3, r3, #7
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d106      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048ba:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	0249      	lsls	r1, r1, #9
 80048c4:	430a      	orrs	r2, r1
 80048c6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80048c8:	2312      	movs	r3, #18
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	781b      	ldrb	r3, [r3, #0]
}
 80048ce:	0018      	movs	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b006      	add	sp, #24
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40007000 	.word	0x40007000
 80048e0:	fffffcff 	.word	0xfffffcff
 80048e4:	fffeffff 	.word	0xfffeffff
 80048e8:	00001388 	.word	0x00001388
 80048ec:	efffffff 	.word	0xefffffff
 80048f0:	fffff3ff 	.word	0xfffff3ff
 80048f4:	fff3ffff 	.word	0xfff3ffff
 80048f8:	ffcfffff 	.word	0xffcfffff
 80048fc:	ffffcfff 	.word	0xffffcfff
 8004900:	ffbfffff 	.word	0xffbfffff
 8004904:	feffffff 	.word	0xfeffffff
 8004908:	ffff3fff 	.word	0xffff3fff

0800490c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e04a      	b.n	80049b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	223d      	movs	r2, #61	; 0x3d
 8004922:	5c9b      	ldrb	r3, [r3, r2]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d107      	bne.n	800493a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	223c      	movs	r2, #60	; 0x3c
 800492e:	2100      	movs	r1, #0
 8004930:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f7fe f9d1 	bl	8002cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	223d      	movs	r2, #61	; 0x3d
 800493e:	2102      	movs	r1, #2
 8004940:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	0019      	movs	r1, r3
 800494c:	0010      	movs	r0, r2
 800494e:	f000 fa11 	bl	8004d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2248      	movs	r2, #72	; 0x48
 8004956:	2101      	movs	r1, #1
 8004958:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	223e      	movs	r2, #62	; 0x3e
 800495e:	2101      	movs	r1, #1
 8004960:	5499      	strb	r1, [r3, r2]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	223f      	movs	r2, #63	; 0x3f
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	2101      	movs	r1, #1
 8004970:	5499      	strb	r1, [r3, r2]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2241      	movs	r2, #65	; 0x41
 8004976:	2101      	movs	r1, #1
 8004978:	5499      	strb	r1, [r3, r2]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2242      	movs	r2, #66	; 0x42
 800497e:	2101      	movs	r1, #1
 8004980:	5499      	strb	r1, [r3, r2]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2243      	movs	r2, #67	; 0x43
 8004986:	2101      	movs	r1, #1
 8004988:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2244      	movs	r2, #68	; 0x44
 800498e:	2101      	movs	r1, #1
 8004990:	5499      	strb	r1, [r3, r2]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2245      	movs	r2, #69	; 0x45
 8004996:	2101      	movs	r1, #1
 8004998:	5499      	strb	r1, [r3, r2]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2246      	movs	r2, #70	; 0x46
 800499e:	2101      	movs	r1, #1
 80049a0:	5499      	strb	r1, [r3, r2]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2247      	movs	r2, #71	; 0x47
 80049a6:	2101      	movs	r1, #1
 80049a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	223d      	movs	r2, #61	; 0x3d
 80049ae:	2101      	movs	r1, #1
 80049b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b002      	add	sp, #8
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	223d      	movs	r2, #61	; 0x3d
 80049c8:	5c9b      	ldrb	r3, [r3, r2]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e042      	b.n	8004a5a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	223d      	movs	r2, #61	; 0x3d
 80049d8:	2102      	movs	r1, #2
 80049da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2101      	movs	r1, #1
 80049e8:	430a      	orrs	r2, r1
 80049ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <HAL_TIM_Base_Start_IT+0xa8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <HAL_TIM_Base_Start_IT+0x5a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	05db      	lsls	r3, r3, #23
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d009      	beq.n	8004a16 <HAL_TIM_Base_Start_IT+0x5a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <HAL_TIM_Base_Start_IT+0xac>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <HAL_TIM_Base_Start_IT+0x5a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <HAL_TIM_Base_Start_IT+0xb0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d116      	bne.n	8004a44 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b06      	cmp	r3, #6
 8004a26:	d016      	beq.n	8004a56 <HAL_TIM_Base_Start_IT+0x9a>
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	025b      	lsls	r3, r3, #9
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d011      	beq.n	8004a56 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	e008      	b.n	8004a56 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2101      	movs	r1, #1
 8004a50:	430a      	orrs	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e000      	b.n	8004a58 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a56:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b004      	add	sp, #16
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	00010007 	.word	0x00010007

08004a74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2101      	movs	r1, #1
 8004a88:	438a      	bics	r2, r1
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	4a0d      	ldr	r2, [pc, #52]	; (8004ac8 <HAL_TIM_Base_Stop_IT+0x54>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	d10d      	bne.n	8004ab4 <HAL_TIM_Base_Stop_IT+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <HAL_TIM_Base_Stop_IT+0x58>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d107      	bne.n	8004ab4 <HAL_TIM_Base_Stop_IT+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	223d      	movs	r2, #61	; 0x3d
 8004ab8:	2101      	movs	r1, #1
 8004aba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b002      	add	sp, #8
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	00001111 	.word	0x00001111
 8004acc:	00000444 	.word	0x00000444

08004ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d124      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2202      	movs	r2, #2
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d11d      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2203      	movs	r2, #3
 8004afa:	4252      	negs	r2, r2
 8004afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d004      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 f916 	bl	8004d44 <HAL_TIM_IC_CaptureCallback>
 8004b18:	e007      	b.n	8004b2a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 f909 	bl	8004d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f915 	bl	8004d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2204      	movs	r2, #4
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d125      	bne.n	8004b8a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2204      	movs	r2, #4
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d11e      	bne.n	8004b8a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2205      	movs	r2, #5
 8004b52:	4252      	negs	r2, r2
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	23c0      	movs	r3, #192	; 0xc0
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4013      	ands	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 f8e9 	bl	8004d44 <HAL_TIM_IC_CaptureCallback>
 8004b72:	e007      	b.n	8004b84 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 f8dc 	bl	8004d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 f8e8 	bl	8004d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2208      	movs	r2, #8
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d124      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d11d      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2209      	movs	r2, #9
 8004bac:	4252      	negs	r2, r2
 8004bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 f8bd 	bl	8004d44 <HAL_TIM_IC_CaptureCallback>
 8004bca:	e007      	b.n	8004bdc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f000 f8b0 	bl	8004d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f8bc 	bl	8004d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2210      	movs	r2, #16
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b10      	cmp	r3, #16
 8004bee:	d125      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d11e      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2211      	movs	r2, #17
 8004c04:	4252      	negs	r2, r2
 8004c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	23c0      	movs	r3, #192	; 0xc0
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 f890 	bl	8004d44 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e007      	b.n	8004c36 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 f883 	bl	8004d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f000 f88f 	bl	8004d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2201      	movs	r2, #1
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10f      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d108      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	4252      	negs	r2, r2
 8004c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fd ff8b 	bl	8002b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	4013      	ands	r3, r2
 8004c74:	2b80      	cmp	r3, #128	; 0x80
 8004c76:	d10f      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	2280      	movs	r2, #128	; 0x80
 8004c80:	4013      	ands	r3, r2
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d108      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2281      	movs	r2, #129	; 0x81
 8004c8c:	4252      	negs	r2, r2
 8004c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	0018      	movs	r0, r3
 8004c94:	f000 f964 	bl	8004f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d10e      	bne.n	8004cca <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b80      	cmp	r3, #128	; 0x80
 8004cb8:	d107      	bne.n	8004cca <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <HAL_TIM_IRQHandler+0x260>)
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f000 f953 	bl	8004f70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2240      	movs	r2, #64	; 0x40
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d10f      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2240      	movs	r2, #64	; 0x40
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d108      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2241      	movs	r2, #65	; 0x41
 8004cec:	4252      	negs	r2, r2
 8004cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 f836 	bl	8004d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d10f      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d108      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2221      	movs	r2, #33	; 0x21
 8004d1a:	4252      	negs	r2, r2
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 f915 	bl	8004f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b002      	add	sp, #8
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	fffffeff 	.word	0xfffffeff

08004d34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b002      	add	sp, #8
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b002      	add	sp, #8
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b002      	add	sp, #8
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d6c:	46c0      	nop			; (mov r8, r8)
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b002      	add	sp, #8
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a34      	ldr	r2, [pc, #208]	; (8004e58 <TIM_Base_SetConfig+0xe4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d008      	beq.n	8004d9e <TIM_Base_SetConfig+0x2a>
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	05db      	lsls	r3, r3, #23
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d003      	beq.n	8004d9e <TIM_Base_SetConfig+0x2a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a30      	ldr	r2, [pc, #192]	; (8004e5c <TIM_Base_SetConfig+0xe8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2270      	movs	r2, #112	; 0x70
 8004da2:	4393      	bics	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a29      	ldr	r2, [pc, #164]	; (8004e58 <TIM_Base_SetConfig+0xe4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d018      	beq.n	8004dea <TIM_Base_SetConfig+0x76>
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	05db      	lsls	r3, r3, #23
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d013      	beq.n	8004dea <TIM_Base_SetConfig+0x76>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a25      	ldr	r2, [pc, #148]	; (8004e5c <TIM_Base_SetConfig+0xe8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_Base_SetConfig+0x76>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <TIM_Base_SetConfig+0xec>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_Base_SetConfig+0x76>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a23      	ldr	r2, [pc, #140]	; (8004e64 <TIM_Base_SetConfig+0xf0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_Base_SetConfig+0x76>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <TIM_Base_SetConfig+0xf4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_Base_SetConfig+0x76>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <TIM_Base_SetConfig+0xf8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d108      	bne.n	8004dfc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a20      	ldr	r2, [pc, #128]	; (8004e70 <TIM_Base_SetConfig+0xfc>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2280      	movs	r2, #128	; 0x80
 8004e00:	4393      	bics	r3, r2
 8004e02:	001a      	movs	r2, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a0c      	ldr	r2, [pc, #48]	; (8004e58 <TIM_Base_SetConfig+0xe4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <TIM_Base_SetConfig+0xce>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <TIM_Base_SetConfig+0xf0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <TIM_Base_SetConfig+0xce>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a0c      	ldr	r2, [pc, #48]	; (8004e68 <TIM_Base_SetConfig+0xf4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_Base_SetConfig+0xce>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a0b      	ldr	r2, [pc, #44]	; (8004e6c <TIM_Base_SetConfig+0xf8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d103      	bne.n	8004e4a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	615a      	str	r2, [r3, #20]
}
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b004      	add	sp, #16
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40002000 	.word	0x40002000
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800
 8004e70:	fffffcff 	.word	0xfffffcff

08004e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	223c      	movs	r2, #60	; 0x3c
 8004e82:	5c9b      	ldrb	r3, [r3, r2]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e055      	b.n	8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	223c      	movs	r2, #60	; 0x3c
 8004e90:	2101      	movs	r1, #1
 8004e92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	223d      	movs	r2, #61	; 0x3d
 8004e98:	2102      	movs	r1, #2
 8004e9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a23      	ldr	r2, [pc, #140]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a22      	ldr	r2, [pc, #136]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2270      	movs	r2, #112	; 0x70
 8004ecc:	4393      	bics	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00f      	beq.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	05db      	lsls	r3, r3, #23
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d009      	beq.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a12      	ldr	r2, [pc, #72]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d10c      	bne.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2280      	movs	r2, #128	; 0x80
 8004f10:	4393      	bics	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	223d      	movs	r2, #61	; 0x3d
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	223c      	movs	r2, #60	; 0x3c
 8004f32:	2100      	movs	r1, #0
 8004f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	0018      	movs	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b004      	add	sp, #16
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	ff0fffff 	.word	0xff0fffff
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40014000 	.word	0x40014000

08004f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b002      	add	sp, #8
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f68:	46c0      	nop			; (mov r8, r8)
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b002      	add	sp, #8
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f78:	46c0      	nop			; (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b002      	add	sp, #8
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e046      	b.n	8005020 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2288      	movs	r2, #136	; 0x88
 8004f96:	589b      	ldr	r3, [r3, r2]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d107      	bne.n	8004fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2284      	movs	r2, #132	; 0x84
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7fd febe 	bl	8002d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2288      	movs	r2, #136	; 0x88
 8004fb0:	2124      	movs	r1, #36	; 0x24
 8004fb2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f000 f9ee 	bl	80053a8 <UART_SetConfig>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e024      	b.n	8005020 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f000 fc9f 	bl	8005924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	490d      	ldr	r1, [pc, #52]	; (8005028 <HAL_UART_Init+0xa8>)
 8004ff2:	400a      	ands	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	212a      	movs	r1, #42	; 0x2a
 8005002:	438a      	bics	r2, r1
 8005004:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2101      	movs	r1, #1
 8005012:	430a      	orrs	r2, r1
 8005014:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	0018      	movs	r0, r3
 800501a:	f000 fd37 	bl	8005a8c <UART_CheckIdleState>
 800501e:	0003      	movs	r3, r0
}
 8005020:	0018      	movs	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	b002      	add	sp, #8
 8005026:	bd80      	pop	{r7, pc}
 8005028:	ffffb7ff 	.word	0xffffb7ff

0800502c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e032      	b.n	80050a4 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2288      	movs	r2, #136	; 0x88
 8005042:	2124      	movs	r1, #36	; 0x24
 8005044:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2101      	movs	r1, #1
 8005052:	438a      	bics	r2, r1
 8005054:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2200      	movs	r2, #0
 8005064:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2200      	movs	r2, #0
 800506c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f7fd ff3d 	bl	8002ef0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2290      	movs	r2, #144	; 0x90
 800507a:	2100      	movs	r1, #0
 800507c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2288      	movs	r2, #136	; 0x88
 8005082:	2100      	movs	r1, #0
 8005084:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	228c      	movs	r2, #140	; 0x8c
 800508a:	2100      	movs	r1, #0
 800508c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2284      	movs	r2, #132	; 0x84
 800509e:	2100      	movs	r1, #0
 80050a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	0018      	movs	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b002      	add	sp, #8
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	1dbb      	adds	r3, r7, #6
 80050ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2288      	movs	r2, #136	; 0x88
 80050c0:	589b      	ldr	r3, [r3, r2]
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d000      	beq.n	80050c8 <HAL_UART_Transmit+0x1c>
 80050c6:	e088      	b.n	80051da <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_UART_Transmit+0x2a>
 80050ce:	1dbb      	adds	r3, r7, #6
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e080      	b.n	80051dc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	015b      	lsls	r3, r3, #5
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d109      	bne.n	80050fa <HAL_UART_Transmit+0x4e>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d105      	bne.n	80050fa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2201      	movs	r2, #1
 80050f2:	4013      	ands	r3, r2
 80050f4:	d001      	beq.n	80050fa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e070      	b.n	80051dc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2290      	movs	r2, #144	; 0x90
 80050fe:	2100      	movs	r1, #0
 8005100:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2288      	movs	r2, #136	; 0x88
 8005106:	2121      	movs	r1, #33	; 0x21
 8005108:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800510a:	f7fe f8cf 	bl	80032ac <HAL_GetTick>
 800510e:	0003      	movs	r3, r0
 8005110:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1dba      	adds	r2, r7, #6
 8005116:	2154      	movs	r1, #84	; 0x54
 8005118:	8812      	ldrh	r2, [r2, #0]
 800511a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1dba      	adds	r2, r7, #6
 8005120:	2156      	movs	r1, #86	; 0x56
 8005122:	8812      	ldrh	r2, [r2, #0]
 8005124:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	015b      	lsls	r3, r3, #5
 800512e:	429a      	cmp	r2, r3
 8005130:	d108      	bne.n	8005144 <HAL_UART_Transmit+0x98>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d104      	bne.n	8005144 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	e003      	b.n	800514c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800514c:	e02c      	b.n	80051a8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	0013      	movs	r3, r2
 8005158:	2200      	movs	r2, #0
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	f000 fce4 	bl	8005b28 <UART_WaitOnFlagUntilTimeout>
 8005160:	1e03      	subs	r3, r0, #0
 8005162:	d001      	beq.n	8005168 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e039      	b.n	80051dc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10b      	bne.n	8005186 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	001a      	movs	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	05d2      	lsls	r2, r2, #23
 800517a:	0dd2      	lsrs	r2, r2, #23
 800517c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	3302      	adds	r3, #2
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	e007      	b.n	8005196 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2256      	movs	r2, #86	; 0x56
 800519a:	5a9b      	ldrh	r3, [r3, r2]
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b299      	uxth	r1, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2256      	movs	r2, #86	; 0x56
 80051a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2256      	movs	r2, #86	; 0x56
 80051ac:	5a9b      	ldrh	r3, [r3, r2]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1cc      	bne.n	800514e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	0013      	movs	r3, r2
 80051be:	2200      	movs	r2, #0
 80051c0:	2140      	movs	r1, #64	; 0x40
 80051c2:	f000 fcb1 	bl	8005b28 <UART_WaitOnFlagUntilTimeout>
 80051c6:	1e03      	subs	r3, r0, #0
 80051c8:	d001      	beq.n	80051ce <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e006      	b.n	80051dc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2288      	movs	r2, #136	; 0x88
 80051d2:	2120      	movs	r1, #32
 80051d4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b008      	add	sp, #32
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	; 0x28
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	1dbb      	adds	r3, r7, #6
 80051f2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	228c      	movs	r2, #140	; 0x8c
 80051f8:	589b      	ldr	r3, [r3, r2]
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d000      	beq.n	8005200 <HAL_UART_Receive+0x1c>
 80051fe:	e0cc      	b.n	800539a <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_UART_Receive+0x2a>
 8005206:	1dbb      	adds	r3, r7, #6
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e0c4      	b.n	800539c <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	015b      	lsls	r3, r3, #5
 800521a:	429a      	cmp	r2, r3
 800521c:	d109      	bne.n	8005232 <HAL_UART_Receive+0x4e>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d105      	bne.n	8005232 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2201      	movs	r2, #1
 800522a:	4013      	ands	r3, r2
 800522c:	d001      	beq.n	8005232 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0b4      	b.n	800539c <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2290      	movs	r2, #144	; 0x90
 8005236:	2100      	movs	r1, #0
 8005238:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	228c      	movs	r2, #140	; 0x8c
 800523e:	2122      	movs	r1, #34	; 0x22
 8005240:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005248:	f7fe f830 	bl	80032ac <HAL_GetTick>
 800524c:	0003      	movs	r3, r0
 800524e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1dba      	adds	r2, r7, #6
 8005254:	215c      	movs	r1, #92	; 0x5c
 8005256:	8812      	ldrh	r2, [r2, #0]
 8005258:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1dba      	adds	r2, r7, #6
 800525e:	215e      	movs	r1, #94	; 0x5e
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	015b      	lsls	r3, r3, #5
 800526c:	429a      	cmp	r2, r3
 800526e:	d10d      	bne.n	800528c <HAL_UART_Receive+0xa8>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_UART_Receive+0x9e>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2260      	movs	r2, #96	; 0x60
 800527c:	4949      	ldr	r1, [pc, #292]	; (80053a4 <HAL_UART_Receive+0x1c0>)
 800527e:	5299      	strh	r1, [r3, r2]
 8005280:	e02e      	b.n	80052e0 <HAL_UART_Receive+0xfc>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2260      	movs	r2, #96	; 0x60
 8005286:	21ff      	movs	r1, #255	; 0xff
 8005288:	5299      	strh	r1, [r3, r2]
 800528a:	e029      	b.n	80052e0 <HAL_UART_Receive+0xfc>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10d      	bne.n	80052b0 <HAL_UART_Receive+0xcc>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <HAL_UART_Receive+0xc2>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2260      	movs	r2, #96	; 0x60
 80052a0:	21ff      	movs	r1, #255	; 0xff
 80052a2:	5299      	strh	r1, [r3, r2]
 80052a4:	e01c      	b.n	80052e0 <HAL_UART_Receive+0xfc>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2260      	movs	r2, #96	; 0x60
 80052aa:	217f      	movs	r1, #127	; 0x7f
 80052ac:	5299      	strh	r1, [r3, r2]
 80052ae:	e017      	b.n	80052e0 <HAL_UART_Receive+0xfc>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	055b      	lsls	r3, r3, #21
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d10d      	bne.n	80052d8 <HAL_UART_Receive+0xf4>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_UART_Receive+0xea>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2260      	movs	r2, #96	; 0x60
 80052c8:	217f      	movs	r1, #127	; 0x7f
 80052ca:	5299      	strh	r1, [r3, r2]
 80052cc:	e008      	b.n	80052e0 <HAL_UART_Receive+0xfc>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2260      	movs	r2, #96	; 0x60
 80052d2:	213f      	movs	r1, #63	; 0x3f
 80052d4:	5299      	strh	r1, [r3, r2]
 80052d6:	e003      	b.n	80052e0 <HAL_UART_Receive+0xfc>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2260      	movs	r2, #96	; 0x60
 80052dc:	2100      	movs	r1, #0
 80052de:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80052e0:	2312      	movs	r3, #18
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	2160      	movs	r1, #96	; 0x60
 80052e8:	5a52      	ldrh	r2, [r2, r1]
 80052ea:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	015b      	lsls	r3, r3, #5
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d108      	bne.n	800530a <HAL_UART_Receive+0x126>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e003      	b.n	8005312 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005312:	e036      	b.n	8005382 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	0013      	movs	r3, r2
 800531e:	2200      	movs	r2, #0
 8005320:	2120      	movs	r1, #32
 8005322:	f000 fc01 	bl	8005b28 <UART_WaitOnFlagUntilTimeout>
 8005326:	1e03      	subs	r3, r0, #0
 8005328:	d001      	beq.n	800532e <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e036      	b.n	800539c <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10e      	bne.n	8005352 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	b29b      	uxth	r3, r3
 800533c:	2212      	movs	r2, #18
 800533e:	18ba      	adds	r2, r7, r2
 8005340:	8812      	ldrh	r2, [r2, #0]
 8005342:	4013      	ands	r3, r2
 8005344:	b29a      	uxth	r2, r3
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	3302      	adds	r3, #2
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	e00e      	b.n	8005370 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2212      	movs	r2, #18
 800535c:	18ba      	adds	r2, r7, r2
 800535e:	8812      	ldrh	r2, [r2, #0]
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	4013      	ands	r3, r2
 8005364:	b2da      	uxtb	r2, r3
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3301      	adds	r3, #1
 800536e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	225e      	movs	r2, #94	; 0x5e
 8005374:	5a9b      	ldrh	r3, [r3, r2]
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b299      	uxth	r1, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	225e      	movs	r2, #94	; 0x5e
 8005380:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	225e      	movs	r2, #94	; 0x5e
 8005386:	5a9b      	ldrh	r3, [r3, r2]
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1c2      	bne.n	8005314 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	228c      	movs	r2, #140	; 0x8c
 8005392:	2120      	movs	r1, #32
 8005394:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e000      	b.n	800539c <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800539a:	2302      	movs	r3, #2
  }
}
 800539c:	0018      	movs	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	b008      	add	sp, #32
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	000001ff 	.word	0x000001ff

080053a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a8:	b5b0      	push	{r4, r5, r7, lr}
 80053aa:	b090      	sub	sp, #64	; 0x40
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b0:	231a      	movs	r3, #26
 80053b2:	2220      	movs	r2, #32
 80053b4:	189b      	adds	r3, r3, r2
 80053b6:	19db      	adds	r3, r3, r7
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4aaf      	ldr	r2, [pc, #700]	; (8005698 <UART_SetConfig+0x2f0>)
 80053dc:	4013      	ands	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e6:	430b      	orrs	r3, r1
 80053e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4aaa      	ldr	r2, [pc, #680]	; (800569c <UART_SetConfig+0x2f4>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	0018      	movs	r0, r3
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	68d9      	ldr	r1, [r3, #12]
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	0003      	movs	r3, r0
 8005400:	430b      	orrs	r3, r1
 8005402:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4aa4      	ldr	r2, [pc, #656]	; (80056a0 <UART_SetConfig+0x2f8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d004      	beq.n	800541e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800541a:	4313      	orrs	r3, r2
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4a9f      	ldr	r2, [pc, #636]	; (80056a4 <UART_SetConfig+0x2fc>)
 8005426:	4013      	ands	r3, r2
 8005428:	0019      	movs	r1, r3
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005430:	430b      	orrs	r3, r1
 8005432:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	220f      	movs	r2, #15
 800543c:	4393      	bics	r3, r2
 800543e:	0018      	movs	r0, r3
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	0003      	movs	r3, r0
 800544a:	430b      	orrs	r3, r1
 800544c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a95      	ldr	r2, [pc, #596]	; (80056a8 <UART_SetConfig+0x300>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d131      	bne.n	80054bc <UART_SetConfig+0x114>
 8005458:	4b94      	ldr	r3, [pc, #592]	; (80056ac <UART_SetConfig+0x304>)
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	2203      	movs	r2, #3
 800545e:	4013      	ands	r3, r2
 8005460:	2b03      	cmp	r3, #3
 8005462:	d01d      	beq.n	80054a0 <UART_SetConfig+0xf8>
 8005464:	d823      	bhi.n	80054ae <UART_SetConfig+0x106>
 8005466:	2b02      	cmp	r3, #2
 8005468:	d00c      	beq.n	8005484 <UART_SetConfig+0xdc>
 800546a:	d820      	bhi.n	80054ae <UART_SetConfig+0x106>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <UART_SetConfig+0xce>
 8005470:	2b01      	cmp	r3, #1
 8005472:	d00e      	beq.n	8005492 <UART_SetConfig+0xea>
 8005474:	e01b      	b.n	80054ae <UART_SetConfig+0x106>
 8005476:	231b      	movs	r3, #27
 8005478:	2220      	movs	r2, #32
 800547a:	189b      	adds	r3, r3, r2
 800547c:	19db      	adds	r3, r3, r7
 800547e:	2200      	movs	r2, #0
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	e0b4      	b.n	80055ee <UART_SetConfig+0x246>
 8005484:	231b      	movs	r3, #27
 8005486:	2220      	movs	r2, #32
 8005488:	189b      	adds	r3, r3, r2
 800548a:	19db      	adds	r3, r3, r7
 800548c:	2202      	movs	r2, #2
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	e0ad      	b.n	80055ee <UART_SetConfig+0x246>
 8005492:	231b      	movs	r3, #27
 8005494:	2220      	movs	r2, #32
 8005496:	189b      	adds	r3, r3, r2
 8005498:	19db      	adds	r3, r3, r7
 800549a:	2204      	movs	r2, #4
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	e0a6      	b.n	80055ee <UART_SetConfig+0x246>
 80054a0:	231b      	movs	r3, #27
 80054a2:	2220      	movs	r2, #32
 80054a4:	189b      	adds	r3, r3, r2
 80054a6:	19db      	adds	r3, r3, r7
 80054a8:	2208      	movs	r2, #8
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	e09f      	b.n	80055ee <UART_SetConfig+0x246>
 80054ae:	231b      	movs	r3, #27
 80054b0:	2220      	movs	r2, #32
 80054b2:	189b      	adds	r3, r3, r2
 80054b4:	19db      	adds	r3, r3, r7
 80054b6:	2210      	movs	r2, #16
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e098      	b.n	80055ee <UART_SetConfig+0x246>
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a7b      	ldr	r2, [pc, #492]	; (80056b0 <UART_SetConfig+0x308>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d131      	bne.n	800552a <UART_SetConfig+0x182>
 80054c6:	4b79      	ldr	r3, [pc, #484]	; (80056ac <UART_SetConfig+0x304>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	220c      	movs	r2, #12
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b0c      	cmp	r3, #12
 80054d0:	d01d      	beq.n	800550e <UART_SetConfig+0x166>
 80054d2:	d823      	bhi.n	800551c <UART_SetConfig+0x174>
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d00c      	beq.n	80054f2 <UART_SetConfig+0x14a>
 80054d8:	d820      	bhi.n	800551c <UART_SetConfig+0x174>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <UART_SetConfig+0x13c>
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d00e      	beq.n	8005500 <UART_SetConfig+0x158>
 80054e2:	e01b      	b.n	800551c <UART_SetConfig+0x174>
 80054e4:	231b      	movs	r3, #27
 80054e6:	2220      	movs	r2, #32
 80054e8:	189b      	adds	r3, r3, r2
 80054ea:	19db      	adds	r3, r3, r7
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e07d      	b.n	80055ee <UART_SetConfig+0x246>
 80054f2:	231b      	movs	r3, #27
 80054f4:	2220      	movs	r2, #32
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	19db      	adds	r3, r3, r7
 80054fa:	2202      	movs	r2, #2
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e076      	b.n	80055ee <UART_SetConfig+0x246>
 8005500:	231b      	movs	r3, #27
 8005502:	2220      	movs	r2, #32
 8005504:	189b      	adds	r3, r3, r2
 8005506:	19db      	adds	r3, r3, r7
 8005508:	2204      	movs	r2, #4
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	e06f      	b.n	80055ee <UART_SetConfig+0x246>
 800550e:	231b      	movs	r3, #27
 8005510:	2220      	movs	r2, #32
 8005512:	189b      	adds	r3, r3, r2
 8005514:	19db      	adds	r3, r3, r7
 8005516:	2208      	movs	r2, #8
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	e068      	b.n	80055ee <UART_SetConfig+0x246>
 800551c:	231b      	movs	r3, #27
 800551e:	2220      	movs	r2, #32
 8005520:	189b      	adds	r3, r3, r2
 8005522:	19db      	adds	r3, r3, r7
 8005524:	2210      	movs	r2, #16
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	e061      	b.n	80055ee <UART_SetConfig+0x246>
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a61      	ldr	r2, [pc, #388]	; (80056b4 <UART_SetConfig+0x30c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d106      	bne.n	8005542 <UART_SetConfig+0x19a>
 8005534:	231b      	movs	r3, #27
 8005536:	2220      	movs	r2, #32
 8005538:	189b      	adds	r3, r3, r2
 800553a:	19db      	adds	r3, r3, r7
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e055      	b.n	80055ee <UART_SetConfig+0x246>
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a5c      	ldr	r2, [pc, #368]	; (80056b8 <UART_SetConfig+0x310>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d106      	bne.n	800555a <UART_SetConfig+0x1b2>
 800554c:	231b      	movs	r3, #27
 800554e:	2220      	movs	r2, #32
 8005550:	189b      	adds	r3, r3, r2
 8005552:	19db      	adds	r3, r3, r7
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e049      	b.n	80055ee <UART_SetConfig+0x246>
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a50      	ldr	r2, [pc, #320]	; (80056a0 <UART_SetConfig+0x2f8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d13e      	bne.n	80055e2 <UART_SetConfig+0x23a>
 8005564:	4b51      	ldr	r3, [pc, #324]	; (80056ac <UART_SetConfig+0x304>)
 8005566:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005568:	23c0      	movs	r3, #192	; 0xc0
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	4013      	ands	r3, r2
 800556e:	22c0      	movs	r2, #192	; 0xc0
 8005570:	0112      	lsls	r2, r2, #4
 8005572:	4293      	cmp	r3, r2
 8005574:	d027      	beq.n	80055c6 <UART_SetConfig+0x21e>
 8005576:	22c0      	movs	r2, #192	; 0xc0
 8005578:	0112      	lsls	r2, r2, #4
 800557a:	4293      	cmp	r3, r2
 800557c:	d82a      	bhi.n	80055d4 <UART_SetConfig+0x22c>
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	0112      	lsls	r2, r2, #4
 8005582:	4293      	cmp	r3, r2
 8005584:	d011      	beq.n	80055aa <UART_SetConfig+0x202>
 8005586:	2280      	movs	r2, #128	; 0x80
 8005588:	0112      	lsls	r2, r2, #4
 800558a:	4293      	cmp	r3, r2
 800558c:	d822      	bhi.n	80055d4 <UART_SetConfig+0x22c>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d004      	beq.n	800559c <UART_SetConfig+0x1f4>
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	00d2      	lsls	r2, r2, #3
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <UART_SetConfig+0x210>
 800559a:	e01b      	b.n	80055d4 <UART_SetConfig+0x22c>
 800559c:	231b      	movs	r3, #27
 800559e:	2220      	movs	r2, #32
 80055a0:	189b      	adds	r3, r3, r2
 80055a2:	19db      	adds	r3, r3, r7
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	e021      	b.n	80055ee <UART_SetConfig+0x246>
 80055aa:	231b      	movs	r3, #27
 80055ac:	2220      	movs	r2, #32
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	19db      	adds	r3, r3, r7
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e01a      	b.n	80055ee <UART_SetConfig+0x246>
 80055b8:	231b      	movs	r3, #27
 80055ba:	2220      	movs	r2, #32
 80055bc:	189b      	adds	r3, r3, r2
 80055be:	19db      	adds	r3, r3, r7
 80055c0:	2204      	movs	r2, #4
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	e013      	b.n	80055ee <UART_SetConfig+0x246>
 80055c6:	231b      	movs	r3, #27
 80055c8:	2220      	movs	r2, #32
 80055ca:	189b      	adds	r3, r3, r2
 80055cc:	19db      	adds	r3, r3, r7
 80055ce:	2208      	movs	r2, #8
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e00c      	b.n	80055ee <UART_SetConfig+0x246>
 80055d4:	231b      	movs	r3, #27
 80055d6:	2220      	movs	r2, #32
 80055d8:	189b      	adds	r3, r3, r2
 80055da:	19db      	adds	r3, r3, r7
 80055dc:	2210      	movs	r2, #16
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e005      	b.n	80055ee <UART_SetConfig+0x246>
 80055e2:	231b      	movs	r3, #27
 80055e4:	2220      	movs	r2, #32
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	19db      	adds	r3, r3, r7
 80055ea:	2210      	movs	r2, #16
 80055ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2b      	ldr	r2, [pc, #172]	; (80056a0 <UART_SetConfig+0x2f8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d000      	beq.n	80055fa <UART_SetConfig+0x252>
 80055f8:	e0a9      	b.n	800574e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055fa:	231b      	movs	r3, #27
 80055fc:	2220      	movs	r2, #32
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	19db      	adds	r3, r3, r7
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d015      	beq.n	8005634 <UART_SetConfig+0x28c>
 8005608:	dc18      	bgt.n	800563c <UART_SetConfig+0x294>
 800560a:	2b04      	cmp	r3, #4
 800560c:	d00d      	beq.n	800562a <UART_SetConfig+0x282>
 800560e:	dc15      	bgt.n	800563c <UART_SetConfig+0x294>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <UART_SetConfig+0x272>
 8005614:	2b02      	cmp	r3, #2
 8005616:	d005      	beq.n	8005624 <UART_SetConfig+0x27c>
 8005618:	e010      	b.n	800563c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800561a:	f7fe ffa9 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 800561e:	0003      	movs	r3, r0
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005622:	e014      	b.n	800564e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005624:	4b25      	ldr	r3, [pc, #148]	; (80056bc <UART_SetConfig+0x314>)
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005628:	e011      	b.n	800564e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562a:	f7fe ff15 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 800562e:	0003      	movs	r3, r0
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005632:	e00c      	b.n	800564e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800563a:	e008      	b.n	800564e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005640:	231a      	movs	r3, #26
 8005642:	2220      	movs	r2, #32
 8005644:	189b      	adds	r3, r3, r2
 8005646:	19db      	adds	r3, r3, r7
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
        break;
 800564c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	2b00      	cmp	r3, #0
 8005652:	d100      	bne.n	8005656 <UART_SetConfig+0x2ae>
 8005654:	e14b      	b.n	80058ee <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800565a:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <UART_SetConfig+0x318>)
 800565c:	0052      	lsls	r2, r2, #1
 800565e:	5ad3      	ldrh	r3, [r2, r3]
 8005660:	0019      	movs	r1, r3
 8005662:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005664:	f7fa fd6a 	bl	800013c <__udivsi3>
 8005668:	0003      	movs	r3, r0
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	0013      	movs	r3, r2
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	189b      	adds	r3, r3, r2
 8005676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005678:	429a      	cmp	r2, r3
 800567a:	d305      	bcc.n	8005688 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005684:	429a      	cmp	r2, r3
 8005686:	d91d      	bls.n	80056c4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005688:	231a      	movs	r3, #26
 800568a:	2220      	movs	r2, #32
 800568c:	189b      	adds	r3, r3, r2
 800568e:	19db      	adds	r3, r3, r7
 8005690:	2201      	movs	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e12b      	b.n	80058ee <UART_SetConfig+0x546>
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	cfff69f3 	.word	0xcfff69f3
 800569c:	ffffcfff 	.word	0xffffcfff
 80056a0:	40008000 	.word	0x40008000
 80056a4:	11fff4ff 	.word	0x11fff4ff
 80056a8:	40013800 	.word	0x40013800
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40004400 	.word	0x40004400
 80056b4:	40004800 	.word	0x40004800
 80056b8:	40004c00 	.word	0x40004c00
 80056bc:	00f42400 	.word	0x00f42400
 80056c0:	0800b904 	.word	0x0800b904
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	2300      	movs	r3, #0
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d0:	4b92      	ldr	r3, [pc, #584]	; (800591c <UART_SetConfig+0x574>)
 80056d2:	0052      	lsls	r2, r2, #1
 80056d4:	5ad3      	ldrh	r3, [r2, r3]
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	69b8      	ldr	r0, [r7, #24]
 80056e2:	69f9      	ldr	r1, [r7, #28]
 80056e4:	f7fa fede 	bl	80004a4 <__aeabi_uldivmod>
 80056e8:	0002      	movs	r2, r0
 80056ea:	000b      	movs	r3, r1
 80056ec:	0e11      	lsrs	r1, r2, #24
 80056ee:	021d      	lsls	r5, r3, #8
 80056f0:	430d      	orrs	r5, r1
 80056f2:	0214      	lsls	r4, r2, #8
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	60bb      	str	r3, [r7, #8]
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68b8      	ldr	r0, [r7, #8]
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	1900      	adds	r0, r0, r4
 8005706:	4169      	adcs	r1, r5
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	2300      	movs	r3, #0
 8005710:	607b      	str	r3, [r7, #4]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f7fa fec5 	bl	80004a4 <__aeabi_uldivmod>
 800571a:	0002      	movs	r2, r0
 800571c:	000b      	movs	r3, r1
 800571e:	0013      	movs	r3, r2
 8005720:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005724:	23c0      	movs	r3, #192	; 0xc0
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	429a      	cmp	r2, r3
 800572a:	d309      	bcc.n	8005740 <UART_SetConfig+0x398>
 800572c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572e:	2380      	movs	r3, #128	; 0x80
 8005730:	035b      	lsls	r3, r3, #13
 8005732:	429a      	cmp	r2, r3
 8005734:	d204      	bcs.n	8005740 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	e0d6      	b.n	80058ee <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005740:	231a      	movs	r3, #26
 8005742:	2220      	movs	r2, #32
 8005744:	189b      	adds	r3, r3, r2
 8005746:	19db      	adds	r3, r3, r7
 8005748:	2201      	movs	r2, #1
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	e0cf      	b.n	80058ee <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	2380      	movs	r3, #128	; 0x80
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	429a      	cmp	r2, r3
 8005758:	d000      	beq.n	800575c <UART_SetConfig+0x3b4>
 800575a:	e070      	b.n	800583e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800575c:	231b      	movs	r3, #27
 800575e:	2220      	movs	r2, #32
 8005760:	189b      	adds	r3, r3, r2
 8005762:	19db      	adds	r3, r3, r7
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b08      	cmp	r3, #8
 8005768:	d015      	beq.n	8005796 <UART_SetConfig+0x3ee>
 800576a:	dc18      	bgt.n	800579e <UART_SetConfig+0x3f6>
 800576c:	2b04      	cmp	r3, #4
 800576e:	d00d      	beq.n	800578c <UART_SetConfig+0x3e4>
 8005770:	dc15      	bgt.n	800579e <UART_SetConfig+0x3f6>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <UART_SetConfig+0x3d4>
 8005776:	2b02      	cmp	r3, #2
 8005778:	d005      	beq.n	8005786 <UART_SetConfig+0x3de>
 800577a:	e010      	b.n	800579e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577c:	f7fe fef8 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8005780:	0003      	movs	r3, r0
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005784:	e014      	b.n	80057b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005786:	4b66      	ldr	r3, [pc, #408]	; (8005920 <UART_SetConfig+0x578>)
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800578a:	e011      	b.n	80057b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578c:	f7fe fe64 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8005790:	0003      	movs	r3, r0
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005794:	e00c      	b.n	80057b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800579c:	e008      	b.n	80057b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80057a2:	231a      	movs	r3, #26
 80057a4:	2220      	movs	r2, #32
 80057a6:	189b      	adds	r3, r3, r2
 80057a8:	19db      	adds	r3, r3, r7
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
        break;
 80057ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d100      	bne.n	80057b8 <UART_SetConfig+0x410>
 80057b6:	e09a      	b.n	80058ee <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057bc:	4b57      	ldr	r3, [pc, #348]	; (800591c <UART_SetConfig+0x574>)
 80057be:	0052      	lsls	r2, r2, #1
 80057c0:	5ad3      	ldrh	r3, [r2, r3]
 80057c2:	0019      	movs	r1, r3
 80057c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057c6:	f7fa fcb9 	bl	800013c <__udivsi3>
 80057ca:	0003      	movs	r3, r0
 80057cc:	005a      	lsls	r2, r3, #1
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	18d2      	adds	r2, r2, r3
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	0019      	movs	r1, r3
 80057dc:	0010      	movs	r0, r2
 80057de:	f7fa fcad 	bl	800013c <__udivsi3>
 80057e2:	0003      	movs	r3, r0
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2b0f      	cmp	r3, #15
 80057ea:	d921      	bls.n	8005830 <UART_SetConfig+0x488>
 80057ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	025b      	lsls	r3, r3, #9
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d21c      	bcs.n	8005830 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	200e      	movs	r0, #14
 80057fc:	2420      	movs	r4, #32
 80057fe:	1903      	adds	r3, r0, r4
 8005800:	19db      	adds	r3, r3, r7
 8005802:	210f      	movs	r1, #15
 8005804:	438a      	bics	r2, r1
 8005806:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	b29b      	uxth	r3, r3
 800580e:	2207      	movs	r2, #7
 8005810:	4013      	ands	r3, r2
 8005812:	b299      	uxth	r1, r3
 8005814:	1903      	adds	r3, r0, r4
 8005816:	19db      	adds	r3, r3, r7
 8005818:	1902      	adds	r2, r0, r4
 800581a:	19d2      	adds	r2, r2, r7
 800581c:	8812      	ldrh	r2, [r2, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	1902      	adds	r2, r0, r4
 8005828:	19d2      	adds	r2, r2, r7
 800582a:	8812      	ldrh	r2, [r2, #0]
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	e05e      	b.n	80058ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005830:	231a      	movs	r3, #26
 8005832:	2220      	movs	r2, #32
 8005834:	189b      	adds	r3, r3, r2
 8005836:	19db      	adds	r3, r3, r7
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	e057      	b.n	80058ee <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800583e:	231b      	movs	r3, #27
 8005840:	2220      	movs	r2, #32
 8005842:	189b      	adds	r3, r3, r2
 8005844:	19db      	adds	r3, r3, r7
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d015      	beq.n	8005878 <UART_SetConfig+0x4d0>
 800584c:	dc18      	bgt.n	8005880 <UART_SetConfig+0x4d8>
 800584e:	2b04      	cmp	r3, #4
 8005850:	d00d      	beq.n	800586e <UART_SetConfig+0x4c6>
 8005852:	dc15      	bgt.n	8005880 <UART_SetConfig+0x4d8>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <UART_SetConfig+0x4b6>
 8005858:	2b02      	cmp	r3, #2
 800585a:	d005      	beq.n	8005868 <UART_SetConfig+0x4c0>
 800585c:	e010      	b.n	8005880 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800585e:	f7fe fe87 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8005862:	0003      	movs	r3, r0
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005866:	e014      	b.n	8005892 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005868:	4b2d      	ldr	r3, [pc, #180]	; (8005920 <UART_SetConfig+0x578>)
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800586c:	e011      	b.n	8005892 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586e:	f7fe fdf3 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8005872:	0003      	movs	r3, r0
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005876:	e00c      	b.n	8005892 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800587e:	e008      	b.n	8005892 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005884:	231a      	movs	r3, #26
 8005886:	2220      	movs	r2, #32
 8005888:	189b      	adds	r3, r3, r2
 800588a:	19db      	adds	r3, r3, r7
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
        break;
 8005890:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	2b00      	cmp	r3, #0
 8005896:	d02a      	beq.n	80058ee <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800589c:	4b1f      	ldr	r3, [pc, #124]	; (800591c <UART_SetConfig+0x574>)
 800589e:	0052      	lsls	r2, r2, #1
 80058a0:	5ad3      	ldrh	r3, [r2, r3]
 80058a2:	0019      	movs	r1, r3
 80058a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80058a6:	f7fa fc49 	bl	800013c <__udivsi3>
 80058aa:	0003      	movs	r3, r0
 80058ac:	001a      	movs	r2, r3
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	18d2      	adds	r2, r2, r3
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	0019      	movs	r1, r3
 80058bc:	0010      	movs	r0, r2
 80058be:	f7fa fc3d 	bl	800013c <__udivsi3>
 80058c2:	0003      	movs	r3, r0
 80058c4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b0f      	cmp	r3, #15
 80058ca:	d90a      	bls.n	80058e2 <UART_SetConfig+0x53a>
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	2380      	movs	r3, #128	; 0x80
 80058d0:	025b      	lsls	r3, r3, #9
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d205      	bcs.n	80058e2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	b29a      	uxth	r2, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60da      	str	r2, [r3, #12]
 80058e0:	e005      	b.n	80058ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80058e2:	231a      	movs	r3, #26
 80058e4:	2220      	movs	r2, #32
 80058e6:	189b      	adds	r3, r3, r2
 80058e8:	19db      	adds	r3, r3, r7
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	226a      	movs	r2, #106	; 0x6a
 80058f2:	2101      	movs	r1, #1
 80058f4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	2268      	movs	r2, #104	; 0x68
 80058fa:	2101      	movs	r1, #1
 80058fc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	2200      	movs	r2, #0
 8005902:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	2200      	movs	r2, #0
 8005908:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800590a:	231a      	movs	r3, #26
 800590c:	2220      	movs	r2, #32
 800590e:	189b      	adds	r3, r3, r2
 8005910:	19db      	adds	r3, r3, r7
 8005912:	781b      	ldrb	r3, [r3, #0]
}
 8005914:	0018      	movs	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	b010      	add	sp, #64	; 0x40
 800591a:	bdb0      	pop	{r4, r5, r7, pc}
 800591c:	0800b904 	.word	0x0800b904
 8005920:	00f42400 	.word	0x00f42400

08005924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	2201      	movs	r2, #1
 8005932:	4013      	ands	r3, r2
 8005934:	d00b      	beq.n	800594e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4a4a      	ldr	r2, [pc, #296]	; (8005a68 <UART_AdvFeatureConfig+0x144>)
 800593e:	4013      	ands	r3, r2
 8005940:	0019      	movs	r1, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	2202      	movs	r2, #2
 8005954:	4013      	ands	r3, r2
 8005956:	d00b      	beq.n	8005970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4a43      	ldr	r2, [pc, #268]	; (8005a6c <UART_AdvFeatureConfig+0x148>)
 8005960:	4013      	ands	r3, r2
 8005962:	0019      	movs	r1, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	2204      	movs	r2, #4
 8005976:	4013      	ands	r3, r2
 8005978:	d00b      	beq.n	8005992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4a3b      	ldr	r2, [pc, #236]	; (8005a70 <UART_AdvFeatureConfig+0x14c>)
 8005982:	4013      	ands	r3, r2
 8005984:	0019      	movs	r1, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	2208      	movs	r2, #8
 8005998:	4013      	ands	r3, r2
 800599a:	d00b      	beq.n	80059b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4a34      	ldr	r2, [pc, #208]	; (8005a74 <UART_AdvFeatureConfig+0x150>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	0019      	movs	r1, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	2210      	movs	r2, #16
 80059ba:	4013      	ands	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <UART_AdvFeatureConfig+0x154>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	0019      	movs	r1, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	2220      	movs	r2, #32
 80059dc:	4013      	ands	r3, r2
 80059de:	d00b      	beq.n	80059f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	4a25      	ldr	r2, [pc, #148]	; (8005a7c <UART_AdvFeatureConfig+0x158>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	0019      	movs	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	2240      	movs	r2, #64	; 0x40
 80059fe:	4013      	ands	r3, r2
 8005a00:	d01d      	beq.n	8005a3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <UART_AdvFeatureConfig+0x15c>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1e:	2380      	movs	r3, #128	; 0x80
 8005a20:	035b      	lsls	r3, r3, #13
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d10b      	bne.n	8005a3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <UART_AdvFeatureConfig+0x160>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	0019      	movs	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	4013      	ands	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4a0e      	ldr	r2, [pc, #56]	; (8005a88 <UART_AdvFeatureConfig+0x164>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	0019      	movs	r1, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	605a      	str	r2, [r3, #4]
  }
}
 8005a60:	46c0      	nop			; (mov r8, r8)
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b002      	add	sp, #8
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	fffdffff 	.word	0xfffdffff
 8005a6c:	fffeffff 	.word	0xfffeffff
 8005a70:	fffbffff 	.word	0xfffbffff
 8005a74:	ffff7fff 	.word	0xffff7fff
 8005a78:	ffffefff 	.word	0xffffefff
 8005a7c:	ffffdfff 	.word	0xffffdfff
 8005a80:	ffefffff 	.word	0xffefffff
 8005a84:	ff9fffff 	.word	0xff9fffff
 8005a88:	fff7ffff 	.word	0xfff7ffff

08005a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2290      	movs	r2, #144	; 0x90
 8005a98:	2100      	movs	r1, #0
 8005a9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a9c:	f7fd fc06 	bl	80032ac <HAL_GetTick>
 8005aa0:	0003      	movs	r3, r0
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2208      	movs	r2, #8
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d10c      	bne.n	8005acc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2280      	movs	r2, #128	; 0x80
 8005ab6:	0391      	lsls	r1, r2, #14
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4a1a      	ldr	r2, [pc, #104]	; (8005b24 <UART_CheckIdleState+0x98>)
 8005abc:	9200      	str	r2, [sp, #0]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f000 f832 	bl	8005b28 <UART_WaitOnFlagUntilTimeout>
 8005ac4:	1e03      	subs	r3, r0, #0
 8005ac6:	d001      	beq.n	8005acc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e026      	b.n	8005b1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d10c      	bne.n	8005af4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2280      	movs	r2, #128	; 0x80
 8005ade:	03d1      	lsls	r1, r2, #15
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4a10      	ldr	r2, [pc, #64]	; (8005b24 <UART_CheckIdleState+0x98>)
 8005ae4:	9200      	str	r2, [sp, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f000 f81e 	bl	8005b28 <UART_WaitOnFlagUntilTimeout>
 8005aec:	1e03      	subs	r3, r0, #0
 8005aee:	d001      	beq.n	8005af4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e012      	b.n	8005b1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2288      	movs	r2, #136	; 0x88
 8005af8:	2120      	movs	r1, #32
 8005afa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	228c      	movs	r2, #140	; 0x8c
 8005b00:	2120      	movs	r1, #32
 8005b02:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2284      	movs	r2, #132	; 0x84
 8005b14:	2100      	movs	r1, #0
 8005b16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b004      	add	sp, #16
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	01ffffff 	.word	0x01ffffff

08005b28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b094      	sub	sp, #80	; 0x50
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	1dfb      	adds	r3, r7, #7
 8005b36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b38:	e0a7      	b.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	d100      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005b40:	e0a3      	b.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b42:	f7fd fbb3 	bl	80032ac <HAL_GetTick>
 8005b46:	0002      	movs	r2, r0
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d302      	bcc.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d13f      	bne.n	8005bd8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b58:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b60:	647b      	str	r3, [r7, #68]	; 0x44
 8005b62:	2301      	movs	r3, #1
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	f383 8810 	msr	PRIMASK, r3
}
 8005b6c:	46c0      	nop			; (mov r8, r8)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	494e      	ldr	r1, [pc, #312]	; (8005cb4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b80:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	f383 8810 	msr	PRIMASK, r3
}
 8005b88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b8e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b92:	643b      	str	r3, [r7, #64]	; 0x40
 8005b94:	2301      	movs	r3, #1
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	f383 8810 	msr	PRIMASK, r3
}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2101      	movs	r1, #1
 8005bac:	438a      	bics	r2, r1
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb6:	f383 8810 	msr	PRIMASK, r3
}
 8005bba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2288      	movs	r2, #136	; 0x88
 8005bc0:	2120      	movs	r1, #32
 8005bc2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	228c      	movs	r2, #140	; 0x8c
 8005bc8:	2120      	movs	r1, #32
 8005bca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2284      	movs	r2, #132	; 0x84
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e069      	b.n	8005cac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2204      	movs	r2, #4
 8005be0:	4013      	ands	r3, r2
 8005be2:	d052      	beq.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69da      	ldr	r2, [r3, #28]
 8005bea:	2380      	movs	r3, #128	; 0x80
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	401a      	ands	r2, r3
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d148      	bne.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2280      	movs	r2, #128	; 0x80
 8005bfe:	0112      	lsls	r2, r2, #4
 8005c00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c02:	f3ef 8310 	mrs	r3, PRIMASK
 8005c06:	613b      	str	r3, [r7, #16]
  return(result);
 8005c08:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f383 8810 	msr	PRIMASK, r3
}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4924      	ldr	r1, [pc, #144]	; (8005cb4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	f383 8810 	msr	PRIMASK, r3
}
 8005c32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c34:	f3ef 8310 	mrs	r3, PRIMASK
 8005c38:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c3a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3e:	2301      	movs	r3, #1
 8005c40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2101      	movs	r1, #1
 8005c56:	438a      	bics	r2, r1
 8005c58:	609a      	str	r2, [r3, #8]
 8005c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	f383 8810 	msr	PRIMASK, r3
}
 8005c64:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2288      	movs	r2, #136	; 0x88
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	228c      	movs	r2, #140	; 0x8c
 8005c72:	2120      	movs	r1, #32
 8005c74:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2290      	movs	r2, #144	; 0x90
 8005c7a:	2120      	movs	r1, #32
 8005c7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2284      	movs	r2, #132	; 0x84
 8005c82:	2100      	movs	r1, #0
 8005c84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e010      	b.n	8005cac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	4013      	ands	r3, r2
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	425a      	negs	r2, r3
 8005c9a:	4153      	adcs	r3, r2
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	001a      	movs	r2, r3
 8005ca0:	1dfb      	adds	r3, r7, #7
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d100      	bne.n	8005caa <UART_WaitOnFlagUntilTimeout+0x182>
 8005ca8:	e747      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b014      	add	sp, #80	; 0x50
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	fffffe5f 	.word	0xfffffe5f

08005cb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2284      	movs	r2, #132	; 0x84
 8005cc4:	5c9b      	ldrb	r3, [r3, r2]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_UARTEx_DisableFifoMode+0x16>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e027      	b.n	8005d1e <HAL_UARTEx_DisableFifoMode+0x66>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2284      	movs	r2, #132	; 0x84
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2288      	movs	r2, #136	; 0x88
 8005cda:	2124      	movs	r1, #36	; 0x24
 8005cdc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	438a      	bics	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a0b      	ldr	r2, [pc, #44]	; (8005d28 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2288      	movs	r2, #136	; 0x88
 8005d10:	2120      	movs	r1, #32
 8005d12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2284      	movs	r2, #132	; 0x84
 8005d18:	2100      	movs	r1, #0
 8005d1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b004      	add	sp, #16
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	dfffffff 	.word	0xdfffffff

08005d2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2284      	movs	r2, #132	; 0x84
 8005d3a:	5c9b      	ldrb	r3, [r3, r2]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e02e      	b.n	8005da2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2284      	movs	r2, #132	; 0x84
 8005d48:	2101      	movs	r1, #1
 8005d4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2288      	movs	r2, #136	; 0x88
 8005d50:	2124      	movs	r1, #36	; 0x24
 8005d52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2101      	movs	r1, #1
 8005d68:	438a      	bics	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	08d9      	lsrs	r1, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	0018      	movs	r0, r3
 8005d84:	f000 f854 	bl	8005e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2288      	movs	r2, #136	; 0x88
 8005d94:	2120      	movs	r1, #32
 8005d96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2284      	movs	r2, #132	; 0x84
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	0018      	movs	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b004      	add	sp, #16
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2284      	movs	r2, #132	; 0x84
 8005dba:	5c9b      	ldrb	r3, [r3, r2]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e02f      	b.n	8005e24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2284      	movs	r2, #132	; 0x84
 8005dc8:	2101      	movs	r1, #1
 8005dca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2288      	movs	r2, #136	; 0x88
 8005dd0:	2124      	movs	r1, #36	; 0x24
 8005dd2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2101      	movs	r1, #1
 8005de8:	438a      	bics	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	4a0e      	ldr	r2, [pc, #56]	; (8005e2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	0019      	movs	r1, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0018      	movs	r0, r3
 8005e06:	f000 f813 	bl	8005e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2288      	movs	r2, #136	; 0x88
 8005e16:	2120      	movs	r1, #32
 8005e18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2284      	movs	r2, #132	; 0x84
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b004      	add	sp, #16
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	f1ffffff 	.word	0xf1ffffff

08005e30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d108      	bne.n	8005e52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	226a      	movs	r2, #106	; 0x6a
 8005e44:	2101      	movs	r1, #1
 8005e46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2268      	movs	r2, #104	; 0x68
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e50:	e043      	b.n	8005eda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e52:	260f      	movs	r6, #15
 8005e54:	19bb      	adds	r3, r7, r6
 8005e56:	2208      	movs	r2, #8
 8005e58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e5a:	200e      	movs	r0, #14
 8005e5c:	183b      	adds	r3, r7, r0
 8005e5e:	2208      	movs	r2, #8
 8005e60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	0e5b      	lsrs	r3, r3, #25
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	240d      	movs	r4, #13
 8005e6e:	193b      	adds	r3, r7, r4
 8005e70:	2107      	movs	r1, #7
 8005e72:	400a      	ands	r2, r1
 8005e74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	0f5b      	lsrs	r3, r3, #29
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	250c      	movs	r5, #12
 8005e82:	197b      	adds	r3, r7, r5
 8005e84:	2107      	movs	r1, #7
 8005e86:	400a      	ands	r2, r1
 8005e88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e8a:	183b      	adds	r3, r7, r0
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	197a      	adds	r2, r7, r5
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	4914      	ldr	r1, [pc, #80]	; (8005ee4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005e94:	5c8a      	ldrb	r2, [r1, r2]
 8005e96:	435a      	muls	r2, r3
 8005e98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e9a:	197b      	adds	r3, r7, r5
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	4a12      	ldr	r2, [pc, #72]	; (8005ee8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ea0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	f7fa f9d4 	bl	8000250 <__divsi3>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	b299      	uxth	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	226a      	movs	r2, #106	; 0x6a
 8005eb0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eb2:	19bb      	adds	r3, r7, r6
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	193a      	adds	r2, r7, r4
 8005eb8:	7812      	ldrb	r2, [r2, #0]
 8005eba:	490a      	ldr	r1, [pc, #40]	; (8005ee4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ebc:	5c8a      	ldrb	r2, [r1, r2]
 8005ebe:	435a      	muls	r2, r3
 8005ec0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ec2:	193b      	adds	r3, r7, r4
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	4a08      	ldr	r2, [pc, #32]	; (8005ee8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ec8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eca:	0019      	movs	r1, r3
 8005ecc:	f7fa f9c0 	bl	8000250 <__divsi3>
 8005ed0:	0003      	movs	r3, r0
 8005ed2:	b299      	uxth	r1, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2268      	movs	r2, #104	; 0x68
 8005ed8:	5299      	strh	r1, [r3, r2]
}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	46bd      	mov	sp, r7
 8005ede:	b005      	add	sp, #20
 8005ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	0800b91c 	.word	0x0800b91c
 8005ee8:	0800b924 	.word	0x0800b924

08005eec <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f001 f99d 	bl	8007238 <strtod>
 8005efe:	0002      	movs	r2, r0
 8005f00:	000b      	movs	r3, r1
 8005f02:	60ba      	str	r2, [r7, #8]
 8005f04:	60fb      	str	r3, [r7, #12]
    return d ;
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	68fb      	ldr	r3, [r7, #12]
}
 8005f0a:	0010      	movs	r0, r2
 8005f0c:	0019      	movs	r1, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b004      	add	sp, #16
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	0008      	movs	r0, r1
 8005f1e:	0011      	movs	r1, r2
 8005f20:	1cfb      	adds	r3, r7, #3
 8005f22:	1c02      	adds	r2, r0, #0
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	1cbb      	adds	r3, r7, #2
 8005f28:	1c0a      	adds	r2, r1, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8005f2c:	230f      	movs	r3, #15
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8005f34:	230e      	movs	r3, #14
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	2200      	movs	r2, #0
 8005f3a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8005f3c:	e01c      	b.n	8005f78 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8005f3e:	230f      	movs	r3, #15
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	18d3      	adds	r3, r2, r3
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	1cfa      	adds	r2, r7, #3
 8005f4c:	7812      	ldrb	r2, [r2, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d105      	bne.n	8005f5e <my_find_char_position+0x4a>
			p++ ;
 8005f52:	210e      	movs	r1, #14
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	781a      	ldrb	r2, [r3, #0]
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	3201      	adds	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8005f5e:	230e      	movs	r3, #14
 8005f60:	18fa      	adds	r2, r7, r3
 8005f62:	1cbb      	adds	r3, r7, #2
 8005f64:	7812      	ldrb	r2, [r2, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d00e      	beq.n	8005f8a <my_find_char_position+0x76>
			break ;
		i++ ;
 8005f6c:	210f      	movs	r1, #15
 8005f6e:	187b      	adds	r3, r7, r1
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	3201      	adds	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8005f78:	230f      	movs	r3, #15
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	18d3      	adds	r3, r2, r3
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1da      	bne.n	8005f3e <my_find_char_position+0x2a>
 8005f88:	e000      	b.n	8005f8c <my_find_char_position+0x78>
			break ;
 8005f8a:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8005f8c:	230f      	movs	r3, #15
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	781b      	ldrb	r3, [r3, #0]
}
 8005f92:	0018      	movs	r0, r3
 8005f94:	46bd      	mov	sp, r7
 8005f96:	b004      	add	sp, #16
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <my_nmea_message>:

#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b24      	cmp	r3, #36	; 0x24
 8005fac:	d117      	bne.n	8005fde <my_nmea_message+0x44>
    {
        *i = 0 ;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	b2d1      	uxtb	r1, r2
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	7011      	strb	r1, [r2, #0]
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	189b      	adds	r3, r3, r2
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	001a      	movs	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	189b      	adds	r3, r3, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e045      	b.n	800606a <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b1f      	cmp	r3, #31
 8005fe4:	d907      	bls.n	8005ff6 <my_nmea_message+0x5c>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b7e      	cmp	r3, #126	; 0x7e
 8005fec:	d803      	bhi.n	8005ff6 <my_nmea_message+0x5c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <my_nmea_message+0x64>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b0d      	cmp	r3, #13
 8005ffc:	d114      	bne.n	8006028 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	b2d1      	uxtb	r1, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	7011      	strb	r1, [r2, #0]
 800600a:	001a      	movs	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	189b      	adds	r3, r3, r2
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	7812      	ldrb	r2, [r2, #0]
 8006014:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	001a      	movs	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	189b      	adds	r3, r3, r2
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8006024:	2301      	movs	r3, #1
 8006026:	e020      	b.n	800606a <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b0a      	cmp	r3, #10
 800602e:	d11a      	bne.n	8006066 <my_nmea_message+0xcc>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d916      	bls.n	8006066 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	3b01      	subs	r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	001a      	movs	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	189b      	adds	r3, r3, r2
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b0d      	cmp	r3, #13
 8006052:	d108      	bne.n	8006066 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	001a      	movs	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	189b      	adds	r3, r3, r2
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8006062:	2302      	movs	r3, #2
 8006064:	e001      	b.n	800606a <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8006066:	2301      	movs	r3, #1
 8006068:	425b      	negs	r3, r3
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b004      	add	sp, #16
 8006070:	bd80      	pop	{r7, pc}

08006072 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3309      	adds	r3, #9
 800607e:	781b      	ldrb	r3, [r3, #0]
}
 8006080:	0018      	movs	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	b002      	add	sp, #8
 8006086:	bd80      	pop	{r7, pc}

08006088 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8006088:	b5b0      	push	{r4, r5, r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	220f      	movs	r2, #15
 8006094:	212c      	movs	r1, #44	; 0x2c
 8006096:	0018      	movs	r0, r3
 8006098:	f7ff ff3c 	bl	8005f14 <my_find_char_position>
 800609c:	0003      	movs	r3, r0
 800609e:	001a      	movs	r2, r3
 80060a0:	2517      	movs	r5, #23
 80060a2:	197b      	adds	r3, r7, r5
 80060a4:	3201      	adds	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2210      	movs	r2, #16
 80060ac:	212c      	movs	r1, #44	; 0x2c
 80060ae:	0018      	movs	r0, r3
 80060b0:	f7ff ff30 	bl	8005f14 <my_find_char_position>
 80060b4:	0003      	movs	r3, r0
 80060b6:	0019      	movs	r1, r3
 80060b8:	2416      	movs	r4, #22
 80060ba:	193b      	adds	r3, r7, r4
 80060bc:	197a      	adds	r2, r7, r5
 80060be:	7812      	ldrb	r2, [r2, #0]
 80060c0:	1a8a      	subs	r2, r1, r2
 80060c2:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 80060c4:	193b      	adds	r3, r7, r4
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	0018      	movs	r0, r3
 80060cc:	f000 f9c2 	bl	8006454 <malloc>
 80060d0:	0003      	movs	r3, r0
 80060d2:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 80060d4:	197b      	adds	r3, r7, r5
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	18d1      	adds	r1, r2, r3
 80060dc:	193b      	adds	r3, r7, r4
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	0018      	movs	r0, r3
 80060e4:	f002 f979 	bl	80083da <strncpy>
	pdop_s[pdop_length] = '\0';
 80060e8:	193b      	adds	r3, r7, r4
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	18d3      	adds	r3, r2, r3
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	0018      	movs	r0, r3
 80060f8:	f7ff fef8 	bl	8005eec <my_string2double_conv>
 80060fc:	0002      	movs	r2, r0
 80060fe:	000b      	movs	r3, r1
 8006100:	60ba      	str	r2, [r7, #8]
 8006102:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	0018      	movs	r0, r3
 8006108:	f000 f9ae 	bl	8006468 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	68fb      	ldr	r3, [r7, #12]
}
 8006110:	0010      	movs	r0, r2
 8006112:	0019      	movs	r1, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	b006      	add	sp, #24
 8006118:	bdb0      	pop	{r4, r5, r7, pc}

0800611a <is_my_nmea_checksum_ok>:

bool is_my_nmea_checksum_ok ( const char* s )
{
 800611a:	b590      	push	{r4, r7, lr}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8006122:	230f      	movs	r3, #15
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800612a:	230e      	movs	r3, #14
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006132:	e00f      	b.n	8006154 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8006134:	220e      	movs	r2, #14
 8006136:	18bb      	adds	r3, r7, r2
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	18ba      	adds	r2, r7, r2
 800613c:	1c59      	adds	r1, r3, #1
 800613e:	7011      	strb	r1, [r2, #0]
 8006140:	001a      	movs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	189b      	adds	r3, r3, r2
 8006146:	7819      	ldrb	r1, [r3, #0]
 8006148:	220f      	movs	r2, #15
 800614a:	18bb      	adds	r3, r7, r2
 800614c:	18ba      	adds	r2, r7, r2
 800614e:	7812      	ldrb	r2, [r2, #0]
 8006150:	404a      	eors	r2, r1
 8006152:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006154:	210e      	movs	r1, #14
 8006156:	187b      	adds	r3, r7, r1
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	18d3      	adds	r3, r2, r3
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b2a      	cmp	r3, #42	; 0x2a
 8006162:	d00a      	beq.n	800617a <is_my_nmea_checksum_ok+0x60>
 8006164:	187b      	adds	r3, r7, r1
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	18d3      	adds	r3, r2, r3
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <is_my_nmea_checksum_ok+0x60>
 8006172:	187b      	adds	r3, r7, r1
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1dc      	bne.n	8006134 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800617a:	230f      	movs	r3, #15
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	781c      	ldrb	r4, [r3, #0]
 8006180:	210e      	movs	r1, #14
 8006182:	187b      	adds	r3, r7, r1
 8006184:	187a      	adds	r2, r7, r1
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	3201      	adds	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	187b      	adds	r3, r7, r1
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	18d3      	adds	r3, r2, r3
 8006194:	2210      	movs	r2, #16
 8006196:	2100      	movs	r1, #0
 8006198:	0018      	movs	r0, r3
 800619a:	f001 f8e5 	bl	8007368 <strtol>
 800619e:	0003      	movs	r3, r0
 80061a0:	1ae3      	subs	r3, r4, r3
 80061a2:	425a      	negs	r2, r3
 80061a4:	4153      	adcs	r3, r2
 80061a6:	b2db      	uxtb	r3, r3
}
 80061a8:	0018      	movs	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b005      	add	sp, #20
 80061ae:	bd90      	pop	{r4, r7, pc}

080061b0 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 80061b0:	b5b0      	push	{r4, r5, r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	000a      	movs	r2, r1
 80061ba:	1cfb      	adds	r3, r7, #3
 80061bc:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 80061be:	2308      	movs	r3, #8
 80061c0:	18fa      	adds	r2, r7, r3
 80061c2:	492f      	ldr	r1, [pc, #188]	; (8006280 <nmea2decimal+0xd0>)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	0018      	movs	r0, r3
 80061c8:	f002 f878 	bl	80082bc <siscanf>
    min = deg / 100 ;
 80061cc:	68b8      	ldr	r0, [r7, #8]
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <nmea2decimal+0xd4>)
 80061d4:	f7fa fe22 	bl	8000e1c <__aeabi_ddiv>
 80061d8:	0002      	movs	r2, r0
 80061da:	000b      	movs	r3, r1
 80061dc:	613a      	str	r2, [r7, #16]
 80061de:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 80061e0:	6938      	ldr	r0, [r7, #16]
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	f7fc f876 	bl	80022d4 <__aeabi_d2iz>
 80061e8:	0003      	movs	r3, r0
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7fc f8a8 	bl	8002340 <__aeabi_i2d>
 80061f0:	0002      	movs	r2, r0
 80061f2:	000b      	movs	r3, r1
 80061f4:	60ba      	str	r2, [r7, #8]
 80061f6:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6938      	ldr	r0, [r7, #16]
 80061fe:	6979      	ldr	r1, [r7, #20]
 8006200:	f7fb fcc8 	bl	8001b94 <__aeabi_dsub>
 8006204:	0002      	movs	r2, r0
 8006206:	000b      	movs	r3, r1
 8006208:	0010      	movs	r0, r2
 800620a:	0019      	movs	r1, r3
 800620c:	2200      	movs	r2, #0
 800620e:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <nmea2decimal+0xd8>)
 8006210:	f7fb f9fe 	bl	8001610 <__aeabi_dmul>
 8006214:	0002      	movs	r2, r0
 8006216:	000b      	movs	r3, r1
 8006218:	613a      	str	r2, [r7, #16]
 800621a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800621c:	2200      	movs	r2, #0
 800621e:	4b1b      	ldr	r3, [pc, #108]	; (800628c <nmea2decimal+0xdc>)
 8006220:	6938      	ldr	r0, [r7, #16]
 8006222:	6979      	ldr	r1, [r7, #20]
 8006224:	f7fa fdfa 	bl	8000e1c <__aeabi_ddiv>
 8006228:	0002      	movs	r2, r0
 800622a:	000b      	movs	r3, r1
 800622c:	613a      	str	r2, [r7, #16]
 800622e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8006230:	1cfb      	adds	r3, r7, #3
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b53      	cmp	r3, #83	; 0x53
 8006236:	d003      	beq.n	8006240 <nmea2decimal+0x90>
 8006238:	1cfb      	adds	r3, r7, #3
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b57      	cmp	r3, #87	; 0x57
 800623e:	d10e      	bne.n	800625e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8006240:	68b8      	ldr	r0, [r7, #8]
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f7fa fa88 	bl	800075c <__aeabi_dadd>
 800624c:	0002      	movs	r2, r0
 800624e:	000b      	movs	r3, r1
 8006250:	0011      	movs	r1, r2
 8006252:	000c      	movs	r4, r1
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	0609      	lsls	r1, r1, #24
 8006258:	4059      	eors	r1, r3
 800625a:	000d      	movs	r5, r1
 800625c:	e009      	b.n	8006272 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800625e:	68b8      	ldr	r0, [r7, #8]
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f7fa fa79 	bl	800075c <__aeabi_dadd>
 800626a:	0002      	movs	r2, r0
 800626c:	000b      	movs	r3, r1
 800626e:	0014      	movs	r4, r2
 8006270:	001d      	movs	r5, r3
}
 8006272:	0022      	movs	r2, r4
 8006274:	002b      	movs	r3, r5
 8006276:	0010      	movs	r0, r2
 8006278:	0019      	movs	r1, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	b006      	add	sp, #24
 800627e:	bdb0      	pop	{r4, r5, r7, pc}
 8006280:	0800b84c 	.word	0x0800b84c
 8006284:	40590000 	.word	0x40590000
 8006288:	40240000 	.word	0x40240000
 800628c:	40180000 	.word	0x40180000

08006290 <get_my_nmea_gngll_coordinates_s>:
    //double c = ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
    //return ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
}
*/
void get_my_nmea_gngll_coordinates_s ( const char* m , char* latitude , char* longitude )
{
 8006290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006292:	b091      	sub	sp, #68	; 0x44
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	212c      	movs	r1, #44	; 0x2c
 80062a2:	0018      	movs	r0, r3
 80062a4:	f7ff fe36 	bl	8005f14 <my_find_char_position>
 80062a8:	0003      	movs	r3, r0
 80062aa:	001a      	movs	r2, r3
 80062ac:	2537      	movs	r5, #55	; 0x37
 80062ae:	197b      	adds	r3, r7, r5
 80062b0:	3201      	adds	r2, #1
 80062b2:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2202      	movs	r2, #2
 80062b8:	212c      	movs	r1, #44	; 0x2c
 80062ba:	0018      	movs	r0, r3
 80062bc:	f7ff fe2a 	bl	8005f14 <my_find_char_position>
 80062c0:	0003      	movs	r3, r0
 80062c2:	0019      	movs	r1, r3
 80062c4:	2436      	movs	r4, #54	; 0x36
 80062c6:	193b      	adds	r3, r7, r4
 80062c8:	197a      	adds	r2, r7, r5
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	1a8a      	subs	r2, r1, r2
 80062ce:	701a      	strb	r2, [r3, #0]

	char* latitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 80062d0:	193b      	adds	r3, r7, r4
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	0018      	movs	r0, r3
 80062d8:	f000 f8bc 	bl	8006454 <malloc>
 80062dc:	0003      	movs	r3, r0
 80062de:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 80062e0:	197b      	adds	r3, r7, r5
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	18d1      	adds	r1, r2, r3
 80062e8:	193b      	adds	r3, r7, r4
 80062ea:	781a      	ldrb	r2, [r3, #0]
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	0018      	movs	r0, r3
 80062f0:	f002 f873 	bl	80083da <strncpy>
	latitude_s[coordinate_length] = '\0';
 80062f4:	193b      	adds	r3, r7, r4
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fa:	18d3      	adds	r3, r2, r3
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8006300:	197b      	adds	r3, r7, r5
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	193b      	adds	r3, r7, r4
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	18d3      	adds	r3, r2, r3
 800630a:	3301      	adds	r3, #1
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	18d2      	adds	r2, r2, r3
 8006310:	262f      	movs	r6, #47	; 0x2f
 8006312:	19bb      	adds	r3, r7, r6
 8006314:	7812      	ldrb	r2, [r2, #0]
 8006316:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s , direction ) ;
 8006318:	19bb      	adds	r3, r7, r6
 800631a:	781a      	ldrb	r2, [r3, #0]
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	0011      	movs	r1, r2
 8006320:	0018      	movs	r0, r3
 8006322:	f7ff ff45 	bl	80061b0 <nmea2decimal>
 8006326:	0002      	movs	r2, r0
 8006328:	000b      	movs	r3, r1
 800632a:	623a      	str	r2, [r7, #32]
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s ) ;
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	0018      	movs	r0, r3
 8006332:	f000 f899 	bl	8006468 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8006336:	2200      	movs	r2, #0
 8006338:	4b44      	ldr	r3, [pc, #272]	; (800644c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 800633a:	6a38      	ldr	r0, [r7, #32]
 800633c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800633e:	f7fb f967 	bl	8001610 <__aeabi_dmul>
 8006342:	0002      	movs	r2, r0
 8006344:	000b      	movs	r3, r1
 8006346:	0010      	movs	r0, r2
 8006348:	0019      	movs	r1, r3
 800634a:	f005 f9e9 	bl	800b720 <round>
 800634e:	2200      	movs	r2, #0
 8006350:	4b3e      	ldr	r3, [pc, #248]	; (800644c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006352:	f7fa fd63 	bl	8000e1c <__aeabi_ddiv>
 8006356:	0002      	movs	r2, r0
 8006358:	000b      	movs	r3, r1
 800635a:	623a      	str	r2, [r7, #32]
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude , 12 , "%.6lf" , latitude_d ) ;
 800635e:	493c      	ldr	r1, [pc, #240]	; (8006450 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	6a3a      	ldr	r2, [r7, #32]
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	9200      	str	r2, [sp, #0]
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	000a      	movs	r2, r1
 800636c:	210c      	movs	r1, #12
 800636e:	f001 ff51 	bl	8008214 <sniprintf>

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2203      	movs	r2, #3
 8006376:	212c      	movs	r1, #44	; 0x2c
 8006378:	0018      	movs	r0, r3
 800637a:	f7ff fdcb 	bl	8005f14 <my_find_char_position>
 800637e:	0003      	movs	r3, r0
 8006380:	001a      	movs	r2, r3
 8006382:	197b      	adds	r3, r7, r5
 8006384:	3201      	adds	r2, #1
 8006386:	701a      	strb	r2, [r3, #0]
	//coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2204      	movs	r2, #4
 800638c:	212c      	movs	r1, #44	; 0x2c
 800638e:	0018      	movs	r0, r3
 8006390:	f7ff fdc0 	bl	8005f14 <my_find_char_position>
 8006394:	0003      	movs	r3, r0
 8006396:	0019      	movs	r1, r3
 8006398:	193b      	adds	r3, r7, r4
 800639a:	197a      	adds	r2, r7, r5
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	1a8a      	subs	r2, r1, r2
 80063a0:	701a      	strb	r2, [r3, #0]

	char* longitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 80063a2:	193b      	adds	r3, r7, r4
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	3301      	adds	r3, #1
 80063a8:	0018      	movs	r0, r3
 80063aa:	f000 f853 	bl	8006454 <malloc>
 80063ae:	0003      	movs	r3, r0
 80063b0:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 80063b2:	197b      	adds	r3, r7, r5
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	18d1      	adds	r1, r2, r3
 80063ba:	193b      	adds	r3, r7, r4
 80063bc:	781a      	ldrb	r2, [r3, #0]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	0018      	movs	r0, r3
 80063c2:	f002 f80a 	bl	80083da <strncpy>
	longitude_s[coordinate_length] = '\0';
 80063c6:	193b      	adds	r3, r7, r4
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	18d3      	adds	r3, r2, r3
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 80063d2:	197b      	adds	r3, r7, r5
 80063d4:	781a      	ldrb	r2, [r3, #0]
 80063d6:	193b      	adds	r3, r7, r4
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	18d3      	adds	r3, r2, r3
 80063dc:	3301      	adds	r3, #1
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	18d2      	adds	r2, r2, r3
 80063e2:	19bb      	adds	r3, r7, r6
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s , direction ) ;
 80063e8:	19bb      	adds	r3, r7, r6
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	0011      	movs	r1, r2
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7ff fedd 	bl	80061b0 <nmea2decimal>
 80063f6:	0002      	movs	r2, r0
 80063f8:	000b      	movs	r3, r1
 80063fa:	613a      	str	r2, [r7, #16]
 80063fc:	617b      	str	r3, [r7, #20]
	free ( longitude_s ) ;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	0018      	movs	r0, r3
 8006402:	f000 f831 	bl	8006468 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 8006406:	2200      	movs	r2, #0
 8006408:	4b10      	ldr	r3, [pc, #64]	; (800644c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 800640a:	6938      	ldr	r0, [r7, #16]
 800640c:	6979      	ldr	r1, [r7, #20]
 800640e:	f7fb f8ff 	bl	8001610 <__aeabi_dmul>
 8006412:	0002      	movs	r2, r0
 8006414:	000b      	movs	r3, r1
 8006416:	0010      	movs	r0, r2
 8006418:	0019      	movs	r1, r3
 800641a:	f005 f981 	bl	800b720 <round>
 800641e:	2200      	movs	r2, #0
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006422:	f7fa fcfb 	bl	8000e1c <__aeabi_ddiv>
 8006426:	0002      	movs	r2, r0
 8006428:	000b      	movs	r3, r1
 800642a:	613a      	str	r2, [r7, #16]
 800642c:	617b      	str	r3, [r7, #20]
	snprintf ( longitude , 12 , "%.6lf" , longitude_d ) ;
 800642e:	4908      	ldr	r1, [pc, #32]	; (8006450 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	9200      	str	r2, [sp, #0]
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	000a      	movs	r2, r1
 800643c:	210c      	movs	r1, #12
 800643e:	f001 fee9 	bl	8008214 <sniprintf>
}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	46bd      	mov	sp, r7
 8006446:	b00f      	add	sp, #60	; 0x3c
 8006448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	412e8480 	.word	0x412e8480
 8006450:	0800b850 	.word	0x0800b850

08006454 <malloc>:
 8006454:	b510      	push	{r4, lr}
 8006456:	4b03      	ldr	r3, [pc, #12]	; (8006464 <malloc+0x10>)
 8006458:	0001      	movs	r1, r0
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	f000 f830 	bl	80064c0 <_malloc_r>
 8006460:	bd10      	pop	{r4, pc}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	200001e0 	.word	0x200001e0

08006468 <free>:
 8006468:	b510      	push	{r4, lr}
 800646a:	4b03      	ldr	r3, [pc, #12]	; (8006478 <free+0x10>)
 800646c:	0001      	movs	r1, r0
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	f002 ff2c 	bl	80092cc <_free_r>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	200001e0 	.word	0x200001e0

0800647c <sbrk_aligned>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	4e0f      	ldr	r6, [pc, #60]	; (80064bc <sbrk_aligned+0x40>)
 8006480:	000d      	movs	r5, r1
 8006482:	6831      	ldr	r1, [r6, #0]
 8006484:	0004      	movs	r4, r0
 8006486:	2900      	cmp	r1, #0
 8006488:	d102      	bne.n	8006490 <sbrk_aligned+0x14>
 800648a:	f002 f80f 	bl	80084ac <_sbrk_r>
 800648e:	6030      	str	r0, [r6, #0]
 8006490:	0029      	movs	r1, r5
 8006492:	0020      	movs	r0, r4
 8006494:	f002 f80a 	bl	80084ac <_sbrk_r>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d00a      	beq.n	80064b2 <sbrk_aligned+0x36>
 800649c:	2303      	movs	r3, #3
 800649e:	1cc5      	adds	r5, r0, #3
 80064a0:	439d      	bics	r5, r3
 80064a2:	42a8      	cmp	r0, r5
 80064a4:	d007      	beq.n	80064b6 <sbrk_aligned+0x3a>
 80064a6:	1a29      	subs	r1, r5, r0
 80064a8:	0020      	movs	r0, r4
 80064aa:	f001 ffff 	bl	80084ac <_sbrk_r>
 80064ae:	3001      	adds	r0, #1
 80064b0:	d101      	bne.n	80064b6 <sbrk_aligned+0x3a>
 80064b2:	2501      	movs	r5, #1
 80064b4:	426d      	negs	r5, r5
 80064b6:	0028      	movs	r0, r5
 80064b8:	bd70      	pop	{r4, r5, r6, pc}
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	20000598 	.word	0x20000598

080064c0 <_malloc_r>:
 80064c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064c2:	2203      	movs	r2, #3
 80064c4:	1ccb      	adds	r3, r1, #3
 80064c6:	4393      	bics	r3, r2
 80064c8:	3308      	adds	r3, #8
 80064ca:	0006      	movs	r6, r0
 80064cc:	001f      	movs	r7, r3
 80064ce:	2b0c      	cmp	r3, #12
 80064d0:	d238      	bcs.n	8006544 <_malloc_r+0x84>
 80064d2:	270c      	movs	r7, #12
 80064d4:	42b9      	cmp	r1, r7
 80064d6:	d837      	bhi.n	8006548 <_malloc_r+0x88>
 80064d8:	0030      	movs	r0, r6
 80064da:	f000 f873 	bl	80065c4 <__malloc_lock>
 80064de:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <_malloc_r+0x100>)
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	001c      	movs	r4, r3
 80064e6:	2c00      	cmp	r4, #0
 80064e8:	d133      	bne.n	8006552 <_malloc_r+0x92>
 80064ea:	0039      	movs	r1, r7
 80064ec:	0030      	movs	r0, r6
 80064ee:	f7ff ffc5 	bl	800647c <sbrk_aligned>
 80064f2:	0004      	movs	r4, r0
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d15e      	bne.n	80065b6 <_malloc_r+0xf6>
 80064f8:	9b00      	ldr	r3, [sp, #0]
 80064fa:	681c      	ldr	r4, [r3, #0]
 80064fc:	0025      	movs	r5, r4
 80064fe:	2d00      	cmp	r5, #0
 8006500:	d14e      	bne.n	80065a0 <_malloc_r+0xe0>
 8006502:	2c00      	cmp	r4, #0
 8006504:	d051      	beq.n	80065aa <_malloc_r+0xea>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	0029      	movs	r1, r5
 800650a:	18e3      	adds	r3, r4, r3
 800650c:	0030      	movs	r0, r6
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	f001 ffcc 	bl	80084ac <_sbrk_r>
 8006514:	9b01      	ldr	r3, [sp, #4]
 8006516:	4283      	cmp	r3, r0
 8006518:	d147      	bne.n	80065aa <_malloc_r+0xea>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	0030      	movs	r0, r6
 800651e:	1aff      	subs	r7, r7, r3
 8006520:	0039      	movs	r1, r7
 8006522:	f7ff ffab 	bl	800647c <sbrk_aligned>
 8006526:	3001      	adds	r0, #1
 8006528:	d03f      	beq.n	80065aa <_malloc_r+0xea>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	19db      	adds	r3, r3, r7
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	9b00      	ldr	r3, [sp, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d040      	beq.n	80065ba <_malloc_r+0xfa>
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	42a2      	cmp	r2, r4
 800653c:	d133      	bne.n	80065a6 <_malloc_r+0xe6>
 800653e:	2200      	movs	r2, #0
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	e014      	b.n	800656e <_malloc_r+0xae>
 8006544:	2b00      	cmp	r3, #0
 8006546:	dac5      	bge.n	80064d4 <_malloc_r+0x14>
 8006548:	230c      	movs	r3, #12
 800654a:	2500      	movs	r5, #0
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	0028      	movs	r0, r5
 8006550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006552:	6821      	ldr	r1, [r4, #0]
 8006554:	1bc9      	subs	r1, r1, r7
 8006556:	d420      	bmi.n	800659a <_malloc_r+0xda>
 8006558:	290b      	cmp	r1, #11
 800655a:	d918      	bls.n	800658e <_malloc_r+0xce>
 800655c:	19e2      	adds	r2, r4, r7
 800655e:	6027      	str	r7, [r4, #0]
 8006560:	42a3      	cmp	r3, r4
 8006562:	d112      	bne.n	800658a <_malloc_r+0xca>
 8006564:	9b00      	ldr	r3, [sp, #0]
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	6863      	ldr	r3, [r4, #4]
 800656a:	6011      	str	r1, [r2, #0]
 800656c:	6053      	str	r3, [r2, #4]
 800656e:	0030      	movs	r0, r6
 8006570:	0025      	movs	r5, r4
 8006572:	f000 f82f 	bl	80065d4 <__malloc_unlock>
 8006576:	2207      	movs	r2, #7
 8006578:	350b      	adds	r5, #11
 800657a:	1d23      	adds	r3, r4, #4
 800657c:	4395      	bics	r5, r2
 800657e:	1aea      	subs	r2, r5, r3
 8006580:	429d      	cmp	r5, r3
 8006582:	d0e4      	beq.n	800654e <_malloc_r+0x8e>
 8006584:	1b5b      	subs	r3, r3, r5
 8006586:	50a3      	str	r3, [r4, r2]
 8006588:	e7e1      	b.n	800654e <_malloc_r+0x8e>
 800658a:	605a      	str	r2, [r3, #4]
 800658c:	e7ec      	b.n	8006568 <_malloc_r+0xa8>
 800658e:	6862      	ldr	r2, [r4, #4]
 8006590:	42a3      	cmp	r3, r4
 8006592:	d1d5      	bne.n	8006540 <_malloc_r+0x80>
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e7e9      	b.n	800656e <_malloc_r+0xae>
 800659a:	0023      	movs	r3, r4
 800659c:	6864      	ldr	r4, [r4, #4]
 800659e:	e7a2      	b.n	80064e6 <_malloc_r+0x26>
 80065a0:	002c      	movs	r4, r5
 80065a2:	686d      	ldr	r5, [r5, #4]
 80065a4:	e7ab      	b.n	80064fe <_malloc_r+0x3e>
 80065a6:	0013      	movs	r3, r2
 80065a8:	e7c4      	b.n	8006534 <_malloc_r+0x74>
 80065aa:	230c      	movs	r3, #12
 80065ac:	0030      	movs	r0, r6
 80065ae:	6033      	str	r3, [r6, #0]
 80065b0:	f000 f810 	bl	80065d4 <__malloc_unlock>
 80065b4:	e7cb      	b.n	800654e <_malloc_r+0x8e>
 80065b6:	6027      	str	r7, [r4, #0]
 80065b8:	e7d9      	b.n	800656e <_malloc_r+0xae>
 80065ba:	605b      	str	r3, [r3, #4]
 80065bc:	deff      	udf	#255	; 0xff
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	20000594 	.word	0x20000594

080065c4 <__malloc_lock>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	4802      	ldr	r0, [pc, #8]	; (80065d0 <__malloc_lock+0xc>)
 80065c8:	f001 ffc1 	bl	800854e <__retarget_lock_acquire_recursive>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	200006dc 	.word	0x200006dc

080065d4 <__malloc_unlock>:
 80065d4:	b510      	push	{r4, lr}
 80065d6:	4802      	ldr	r0, [pc, #8]	; (80065e0 <__malloc_unlock+0xc>)
 80065d8:	f001 ffba 	bl	8008550 <__retarget_lock_release_recursive>
 80065dc:	bd10      	pop	{r4, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	200006dc 	.word	0x200006dc

080065e4 <sulp>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	0016      	movs	r6, r2
 80065e8:	000d      	movs	r5, r1
 80065ea:	f003 fdad 	bl	800a148 <__ulp>
 80065ee:	2e00      	cmp	r6, #0
 80065f0:	d00d      	beq.n	800660e <sulp+0x2a>
 80065f2:	236b      	movs	r3, #107	; 0x6b
 80065f4:	006a      	lsls	r2, r5, #1
 80065f6:	0d52      	lsrs	r2, r2, #21
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dd07      	ble.n	800660e <sulp+0x2a>
 80065fe:	2400      	movs	r4, #0
 8006600:	4a03      	ldr	r2, [pc, #12]	; (8006610 <sulp+0x2c>)
 8006602:	051b      	lsls	r3, r3, #20
 8006604:	189d      	adds	r5, r3, r2
 8006606:	002b      	movs	r3, r5
 8006608:	0022      	movs	r2, r4
 800660a:	f7fb f801 	bl	8001610 <__aeabi_dmul>
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	3ff00000 	.word	0x3ff00000

08006614 <_strtod_l>:
 8006614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006616:	b0a1      	sub	sp, #132	; 0x84
 8006618:	9219      	str	r2, [sp, #100]	; 0x64
 800661a:	2200      	movs	r2, #0
 800661c:	2600      	movs	r6, #0
 800661e:	2700      	movs	r7, #0
 8006620:	9004      	str	r0, [sp, #16]
 8006622:	9107      	str	r1, [sp, #28]
 8006624:	921c      	str	r2, [sp, #112]	; 0x70
 8006626:	911b      	str	r1, [sp, #108]	; 0x6c
 8006628:	780a      	ldrb	r2, [r1, #0]
 800662a:	2a2b      	cmp	r2, #43	; 0x2b
 800662c:	d055      	beq.n	80066da <_strtod_l+0xc6>
 800662e:	d841      	bhi.n	80066b4 <_strtod_l+0xa0>
 8006630:	2a0d      	cmp	r2, #13
 8006632:	d83b      	bhi.n	80066ac <_strtod_l+0x98>
 8006634:	2a08      	cmp	r2, #8
 8006636:	d83b      	bhi.n	80066b0 <_strtod_l+0x9c>
 8006638:	2a00      	cmp	r2, #0
 800663a:	d044      	beq.n	80066c6 <_strtod_l+0xb2>
 800663c:	2200      	movs	r2, #0
 800663e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006640:	2100      	movs	r1, #0
 8006642:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006644:	9109      	str	r1, [sp, #36]	; 0x24
 8006646:	782a      	ldrb	r2, [r5, #0]
 8006648:	2a30      	cmp	r2, #48	; 0x30
 800664a:	d000      	beq.n	800664e <_strtod_l+0x3a>
 800664c:	e085      	b.n	800675a <_strtod_l+0x146>
 800664e:	786a      	ldrb	r2, [r5, #1]
 8006650:	3120      	adds	r1, #32
 8006652:	438a      	bics	r2, r1
 8006654:	2a58      	cmp	r2, #88	; 0x58
 8006656:	d000      	beq.n	800665a <_strtod_l+0x46>
 8006658:	e075      	b.n	8006746 <_strtod_l+0x132>
 800665a:	9302      	str	r3, [sp, #8]
 800665c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800665e:	4a97      	ldr	r2, [pc, #604]	; (80068bc <_strtod_l+0x2a8>)
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	ab1c      	add	r3, sp, #112	; 0x70
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	9804      	ldr	r0, [sp, #16]
 8006668:	ab1d      	add	r3, sp, #116	; 0x74
 800666a:	a91b      	add	r1, sp, #108	; 0x6c
 800666c:	f002 fee2 	bl	8009434 <__gethex>
 8006670:	230f      	movs	r3, #15
 8006672:	0002      	movs	r2, r0
 8006674:	401a      	ands	r2, r3
 8006676:	0004      	movs	r4, r0
 8006678:	9205      	str	r2, [sp, #20]
 800667a:	4218      	tst	r0, r3
 800667c:	d005      	beq.n	800668a <_strtod_l+0x76>
 800667e:	2a06      	cmp	r2, #6
 8006680:	d12d      	bne.n	80066de <_strtod_l+0xca>
 8006682:	1c6b      	adds	r3, r5, #1
 8006684:	931b      	str	r3, [sp, #108]	; 0x6c
 8006686:	2300      	movs	r3, #0
 8006688:	930f      	str	r3, [sp, #60]	; 0x3c
 800668a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <_strtod_l+0x82>
 8006690:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006692:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01b      	beq.n	80066d4 <_strtod_l+0xc0>
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	0032      	movs	r2, r6
 80066a0:	061b      	lsls	r3, r3, #24
 80066a2:	18fb      	adds	r3, r7, r3
 80066a4:	0010      	movs	r0, r2
 80066a6:	0019      	movs	r1, r3
 80066a8:	b021      	add	sp, #132	; 0x84
 80066aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ac:	2a20      	cmp	r2, #32
 80066ae:	d1c5      	bne.n	800663c <_strtod_l+0x28>
 80066b0:	3101      	adds	r1, #1
 80066b2:	e7b8      	b.n	8006626 <_strtod_l+0x12>
 80066b4:	2a2d      	cmp	r2, #45	; 0x2d
 80066b6:	d1c1      	bne.n	800663c <_strtod_l+0x28>
 80066b8:	3a2c      	subs	r2, #44	; 0x2c
 80066ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80066bc:	1c4a      	adds	r2, r1, #1
 80066be:	921b      	str	r2, [sp, #108]	; 0x6c
 80066c0:	784a      	ldrb	r2, [r1, #1]
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	d1bc      	bne.n	8006640 <_strtod_l+0x2c>
 80066c6:	9b07      	ldr	r3, [sp, #28]
 80066c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80066ca:	2300      	movs	r3, #0
 80066cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80066ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1dd      	bne.n	8006690 <_strtod_l+0x7c>
 80066d4:	0032      	movs	r2, r6
 80066d6:	003b      	movs	r3, r7
 80066d8:	e7e4      	b.n	80066a4 <_strtod_l+0x90>
 80066da:	2200      	movs	r2, #0
 80066dc:	e7ed      	b.n	80066ba <_strtod_l+0xa6>
 80066de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80066e0:	2a00      	cmp	r2, #0
 80066e2:	d007      	beq.n	80066f4 <_strtod_l+0xe0>
 80066e4:	2135      	movs	r1, #53	; 0x35
 80066e6:	a81e      	add	r0, sp, #120	; 0x78
 80066e8:	f003 fe1f 	bl	800a32a <__copybits>
 80066ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80066ee:	9804      	ldr	r0, [sp, #16]
 80066f0:	f003 f9e8 	bl	8009ac4 <_Bfree>
 80066f4:	9805      	ldr	r0, [sp, #20]
 80066f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066f8:	3801      	subs	r0, #1
 80066fa:	2804      	cmp	r0, #4
 80066fc:	d806      	bhi.n	800670c <_strtod_l+0xf8>
 80066fe:	f7f9 fd09 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006702:	0312      	.short	0x0312
 8006704:	1e1c      	.short	0x1e1c
 8006706:	12          	.byte	0x12
 8006707:	00          	.byte	0x00
 8006708:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800670a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800670c:	05e4      	lsls	r4, r4, #23
 800670e:	d502      	bpl.n	8006716 <_strtod_l+0x102>
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	061b      	lsls	r3, r3, #24
 8006714:	431f      	orrs	r7, r3
 8006716:	4b6a      	ldr	r3, [pc, #424]	; (80068c0 <_strtod_l+0x2ac>)
 8006718:	423b      	tst	r3, r7
 800671a:	d1b6      	bne.n	800668a <_strtod_l+0x76>
 800671c:	f001 feec 	bl	80084f8 <__errno>
 8006720:	2322      	movs	r3, #34	; 0x22
 8006722:	6003      	str	r3, [r0, #0]
 8006724:	e7b1      	b.n	800668a <_strtod_l+0x76>
 8006726:	4967      	ldr	r1, [pc, #412]	; (80068c4 <_strtod_l+0x2b0>)
 8006728:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800672a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800672c:	400a      	ands	r2, r1
 800672e:	4966      	ldr	r1, [pc, #408]	; (80068c8 <_strtod_l+0x2b4>)
 8006730:	185b      	adds	r3, r3, r1
 8006732:	051b      	lsls	r3, r3, #20
 8006734:	431a      	orrs	r2, r3
 8006736:	0017      	movs	r7, r2
 8006738:	e7e8      	b.n	800670c <_strtod_l+0xf8>
 800673a:	4f61      	ldr	r7, [pc, #388]	; (80068c0 <_strtod_l+0x2ac>)
 800673c:	e7e6      	b.n	800670c <_strtod_l+0xf8>
 800673e:	2601      	movs	r6, #1
 8006740:	4f62      	ldr	r7, [pc, #392]	; (80068cc <_strtod_l+0x2b8>)
 8006742:	4276      	negs	r6, r6
 8006744:	e7e2      	b.n	800670c <_strtod_l+0xf8>
 8006746:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	921b      	str	r2, [sp, #108]	; 0x6c
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b30      	cmp	r3, #48	; 0x30
 8006750:	d0f9      	beq.n	8006746 <_strtod_l+0x132>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d099      	beq.n	800668a <_strtod_l+0x76>
 8006756:	2301      	movs	r3, #1
 8006758:	9309      	str	r3, [sp, #36]	; 0x24
 800675a:	2500      	movs	r5, #0
 800675c:	220a      	movs	r2, #10
 800675e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006760:	950d      	str	r5, [sp, #52]	; 0x34
 8006762:	9310      	str	r3, [sp, #64]	; 0x40
 8006764:	9508      	str	r5, [sp, #32]
 8006766:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006768:	7804      	ldrb	r4, [r0, #0]
 800676a:	0023      	movs	r3, r4
 800676c:	3b30      	subs	r3, #48	; 0x30
 800676e:	b2d9      	uxtb	r1, r3
 8006770:	2909      	cmp	r1, #9
 8006772:	d927      	bls.n	80067c4 <_strtod_l+0x1b0>
 8006774:	2201      	movs	r2, #1
 8006776:	4956      	ldr	r1, [pc, #344]	; (80068d0 <_strtod_l+0x2bc>)
 8006778:	f001 fe1e 	bl	80083b8 <strncmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	d031      	beq.n	80067e4 <_strtod_l+0x1d0>
 8006780:	2000      	movs	r0, #0
 8006782:	0023      	movs	r3, r4
 8006784:	4684      	mov	ip, r0
 8006786:	9a08      	ldr	r2, [sp, #32]
 8006788:	900c      	str	r0, [sp, #48]	; 0x30
 800678a:	9205      	str	r2, [sp, #20]
 800678c:	2220      	movs	r2, #32
 800678e:	0019      	movs	r1, r3
 8006790:	4391      	bics	r1, r2
 8006792:	000a      	movs	r2, r1
 8006794:	2100      	movs	r1, #0
 8006796:	9106      	str	r1, [sp, #24]
 8006798:	2a45      	cmp	r2, #69	; 0x45
 800679a:	d000      	beq.n	800679e <_strtod_l+0x18a>
 800679c:	e0c2      	b.n	8006924 <_strtod_l+0x310>
 800679e:	9b05      	ldr	r3, [sp, #20]
 80067a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a2:	4303      	orrs	r3, r0
 80067a4:	4313      	orrs	r3, r2
 80067a6:	428b      	cmp	r3, r1
 80067a8:	d08d      	beq.n	80066c6 <_strtod_l+0xb2>
 80067aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067ac:	9307      	str	r3, [sp, #28]
 80067ae:	3301      	adds	r3, #1
 80067b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80067b2:	9b07      	ldr	r3, [sp, #28]
 80067b4:	785b      	ldrb	r3, [r3, #1]
 80067b6:	2b2b      	cmp	r3, #43	; 0x2b
 80067b8:	d071      	beq.n	800689e <_strtod_l+0x28a>
 80067ba:	000c      	movs	r4, r1
 80067bc:	2b2d      	cmp	r3, #45	; 0x2d
 80067be:	d174      	bne.n	80068aa <_strtod_l+0x296>
 80067c0:	2401      	movs	r4, #1
 80067c2:	e06d      	b.n	80068a0 <_strtod_l+0x28c>
 80067c4:	9908      	ldr	r1, [sp, #32]
 80067c6:	2908      	cmp	r1, #8
 80067c8:	dc09      	bgt.n	80067de <_strtod_l+0x1ca>
 80067ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067cc:	4351      	muls	r1, r2
 80067ce:	185b      	adds	r3, r3, r1
 80067d0:	930d      	str	r3, [sp, #52]	; 0x34
 80067d2:	9b08      	ldr	r3, [sp, #32]
 80067d4:	3001      	adds	r0, #1
 80067d6:	3301      	adds	r3, #1
 80067d8:	9308      	str	r3, [sp, #32]
 80067da:	901b      	str	r0, [sp, #108]	; 0x6c
 80067dc:	e7c3      	b.n	8006766 <_strtod_l+0x152>
 80067de:	4355      	muls	r5, r2
 80067e0:	195d      	adds	r5, r3, r5
 80067e2:	e7f6      	b.n	80067d2 <_strtod_l+0x1be>
 80067e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80067ea:	9a08      	ldr	r2, [sp, #32]
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d03a      	beq.n	8006868 <_strtod_l+0x254>
 80067f2:	900c      	str	r0, [sp, #48]	; 0x30
 80067f4:	9205      	str	r2, [sp, #20]
 80067f6:	001a      	movs	r2, r3
 80067f8:	3a30      	subs	r2, #48	; 0x30
 80067fa:	2a09      	cmp	r2, #9
 80067fc:	d912      	bls.n	8006824 <_strtod_l+0x210>
 80067fe:	2201      	movs	r2, #1
 8006800:	4694      	mov	ip, r2
 8006802:	e7c3      	b.n	800678c <_strtod_l+0x178>
 8006804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006806:	3001      	adds	r0, #1
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	921b      	str	r2, [sp, #108]	; 0x6c
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b30      	cmp	r3, #48	; 0x30
 8006810:	d0f8      	beq.n	8006804 <_strtod_l+0x1f0>
 8006812:	001a      	movs	r2, r3
 8006814:	3a31      	subs	r2, #49	; 0x31
 8006816:	2a08      	cmp	r2, #8
 8006818:	d83c      	bhi.n	8006894 <_strtod_l+0x280>
 800681a:	900c      	str	r0, [sp, #48]	; 0x30
 800681c:	2000      	movs	r0, #0
 800681e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006820:	9005      	str	r0, [sp, #20]
 8006822:	9210      	str	r2, [sp, #64]	; 0x40
 8006824:	001a      	movs	r2, r3
 8006826:	1c41      	adds	r1, r0, #1
 8006828:	3a30      	subs	r2, #48	; 0x30
 800682a:	2b30      	cmp	r3, #48	; 0x30
 800682c:	d016      	beq.n	800685c <_strtod_l+0x248>
 800682e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006830:	185b      	adds	r3, r3, r1
 8006832:	930c      	str	r3, [sp, #48]	; 0x30
 8006834:	9b05      	ldr	r3, [sp, #20]
 8006836:	210a      	movs	r1, #10
 8006838:	469c      	mov	ip, r3
 800683a:	4484      	add	ip, r0
 800683c:	4563      	cmp	r3, ip
 800683e:	d115      	bne.n	800686c <_strtod_l+0x258>
 8006840:	9905      	ldr	r1, [sp, #20]
 8006842:	9b05      	ldr	r3, [sp, #20]
 8006844:	3101      	adds	r1, #1
 8006846:	1809      	adds	r1, r1, r0
 8006848:	181b      	adds	r3, r3, r0
 800684a:	9105      	str	r1, [sp, #20]
 800684c:	2b08      	cmp	r3, #8
 800684e:	dc19      	bgt.n	8006884 <_strtod_l+0x270>
 8006850:	230a      	movs	r3, #10
 8006852:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006854:	434b      	muls	r3, r1
 8006856:	2100      	movs	r1, #0
 8006858:	18d3      	adds	r3, r2, r3
 800685a:	930d      	str	r3, [sp, #52]	; 0x34
 800685c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800685e:	0008      	movs	r0, r1
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	921b      	str	r2, [sp, #108]	; 0x6c
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	e7c6      	b.n	80067f6 <_strtod_l+0x1e2>
 8006868:	9808      	ldr	r0, [sp, #32]
 800686a:	e7d0      	b.n	800680e <_strtod_l+0x1fa>
 800686c:	1c5c      	adds	r4, r3, #1
 800686e:	2b08      	cmp	r3, #8
 8006870:	dc04      	bgt.n	800687c <_strtod_l+0x268>
 8006872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006874:	434b      	muls	r3, r1
 8006876:	930d      	str	r3, [sp, #52]	; 0x34
 8006878:	0023      	movs	r3, r4
 800687a:	e7df      	b.n	800683c <_strtod_l+0x228>
 800687c:	2c10      	cmp	r4, #16
 800687e:	dcfb      	bgt.n	8006878 <_strtod_l+0x264>
 8006880:	434d      	muls	r5, r1
 8006882:	e7f9      	b.n	8006878 <_strtod_l+0x264>
 8006884:	9b05      	ldr	r3, [sp, #20]
 8006886:	2100      	movs	r1, #0
 8006888:	2b10      	cmp	r3, #16
 800688a:	dce7      	bgt.n	800685c <_strtod_l+0x248>
 800688c:	230a      	movs	r3, #10
 800688e:	435d      	muls	r5, r3
 8006890:	1955      	adds	r5, r2, r5
 8006892:	e7e3      	b.n	800685c <_strtod_l+0x248>
 8006894:	2200      	movs	r2, #0
 8006896:	920c      	str	r2, [sp, #48]	; 0x30
 8006898:	9205      	str	r2, [sp, #20]
 800689a:	3201      	adds	r2, #1
 800689c:	e7b0      	b.n	8006800 <_strtod_l+0x1ec>
 800689e:	2400      	movs	r4, #0
 80068a0:	9b07      	ldr	r3, [sp, #28]
 80068a2:	3302      	adds	r3, #2
 80068a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80068a6:	9b07      	ldr	r3, [sp, #28]
 80068a8:	789b      	ldrb	r3, [r3, #2]
 80068aa:	001a      	movs	r2, r3
 80068ac:	3a30      	subs	r2, #48	; 0x30
 80068ae:	2a09      	cmp	r2, #9
 80068b0:	d914      	bls.n	80068dc <_strtod_l+0x2c8>
 80068b2:	9a07      	ldr	r2, [sp, #28]
 80068b4:	921b      	str	r2, [sp, #108]	; 0x6c
 80068b6:	2200      	movs	r2, #0
 80068b8:	e033      	b.n	8006922 <_strtod_l+0x30e>
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	0800b930 	.word	0x0800b930
 80068c0:	7ff00000 	.word	0x7ff00000
 80068c4:	ffefffff 	.word	0xffefffff
 80068c8:	00000433 	.word	0x00000433
 80068cc:	7fffffff 	.word	0x7fffffff
 80068d0:	0800b92c 	.word	0x0800b92c
 80068d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	2b30      	cmp	r3, #48	; 0x30
 80068de:	d0f9      	beq.n	80068d4 <_strtod_l+0x2c0>
 80068e0:	2200      	movs	r2, #0
 80068e2:	9206      	str	r2, [sp, #24]
 80068e4:	001a      	movs	r2, r3
 80068e6:	3a31      	subs	r2, #49	; 0x31
 80068e8:	2a08      	cmp	r2, #8
 80068ea:	d81b      	bhi.n	8006924 <_strtod_l+0x310>
 80068ec:	3b30      	subs	r3, #48	; 0x30
 80068ee:	930e      	str	r3, [sp, #56]	; 0x38
 80068f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068f2:	9306      	str	r3, [sp, #24]
 80068f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	911b      	str	r1, [sp, #108]	; 0x6c
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	001a      	movs	r2, r3
 80068fe:	3a30      	subs	r2, #48	; 0x30
 8006900:	2a09      	cmp	r2, #9
 8006902:	d93a      	bls.n	800697a <_strtod_l+0x366>
 8006904:	9a06      	ldr	r2, [sp, #24]
 8006906:	1a8a      	subs	r2, r1, r2
 8006908:	49b2      	ldr	r1, [pc, #712]	; (8006bd4 <_strtod_l+0x5c0>)
 800690a:	9106      	str	r1, [sp, #24]
 800690c:	2a08      	cmp	r2, #8
 800690e:	dc04      	bgt.n	800691a <_strtod_l+0x306>
 8006910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006912:	9206      	str	r2, [sp, #24]
 8006914:	428a      	cmp	r2, r1
 8006916:	dd00      	ble.n	800691a <_strtod_l+0x306>
 8006918:	9106      	str	r1, [sp, #24]
 800691a:	2c00      	cmp	r4, #0
 800691c:	d002      	beq.n	8006924 <_strtod_l+0x310>
 800691e:	9a06      	ldr	r2, [sp, #24]
 8006920:	4252      	negs	r2, r2
 8006922:	9206      	str	r2, [sp, #24]
 8006924:	9a05      	ldr	r2, [sp, #20]
 8006926:	2a00      	cmp	r2, #0
 8006928:	d14d      	bne.n	80069c6 <_strtod_l+0x3b2>
 800692a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800692c:	4310      	orrs	r0, r2
 800692e:	d000      	beq.n	8006932 <_strtod_l+0x31e>
 8006930:	e6ab      	b.n	800668a <_strtod_l+0x76>
 8006932:	4662      	mov	r2, ip
 8006934:	2a00      	cmp	r2, #0
 8006936:	d000      	beq.n	800693a <_strtod_l+0x326>
 8006938:	e6c5      	b.n	80066c6 <_strtod_l+0xb2>
 800693a:	2b69      	cmp	r3, #105	; 0x69
 800693c:	d027      	beq.n	800698e <_strtod_l+0x37a>
 800693e:	dc23      	bgt.n	8006988 <_strtod_l+0x374>
 8006940:	2b49      	cmp	r3, #73	; 0x49
 8006942:	d024      	beq.n	800698e <_strtod_l+0x37a>
 8006944:	2b4e      	cmp	r3, #78	; 0x4e
 8006946:	d000      	beq.n	800694a <_strtod_l+0x336>
 8006948:	e6bd      	b.n	80066c6 <_strtod_l+0xb2>
 800694a:	49a3      	ldr	r1, [pc, #652]	; (8006bd8 <_strtod_l+0x5c4>)
 800694c:	a81b      	add	r0, sp, #108	; 0x6c
 800694e:	f002 ffa7 	bl	80098a0 <__match>
 8006952:	2800      	cmp	r0, #0
 8006954:	d100      	bne.n	8006958 <_strtod_l+0x344>
 8006956:	e6b6      	b.n	80066c6 <_strtod_l+0xb2>
 8006958:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b28      	cmp	r3, #40	; 0x28
 800695e:	d12c      	bne.n	80069ba <_strtod_l+0x3a6>
 8006960:	499e      	ldr	r1, [pc, #632]	; (8006bdc <_strtod_l+0x5c8>)
 8006962:	aa1e      	add	r2, sp, #120	; 0x78
 8006964:	a81b      	add	r0, sp, #108	; 0x6c
 8006966:	f002 ffaf 	bl	80098c8 <__hexnan>
 800696a:	2805      	cmp	r0, #5
 800696c:	d125      	bne.n	80069ba <_strtod_l+0x3a6>
 800696e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006970:	4a9b      	ldr	r2, [pc, #620]	; (8006be0 <_strtod_l+0x5cc>)
 8006972:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8006974:	431a      	orrs	r2, r3
 8006976:	0017      	movs	r7, r2
 8006978:	e687      	b.n	800668a <_strtod_l+0x76>
 800697a:	220a      	movs	r2, #10
 800697c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800697e:	434a      	muls	r2, r1
 8006980:	18d2      	adds	r2, r2, r3
 8006982:	3a30      	subs	r2, #48	; 0x30
 8006984:	920e      	str	r2, [sp, #56]	; 0x38
 8006986:	e7b5      	b.n	80068f4 <_strtod_l+0x2e0>
 8006988:	2b6e      	cmp	r3, #110	; 0x6e
 800698a:	d0de      	beq.n	800694a <_strtod_l+0x336>
 800698c:	e69b      	b.n	80066c6 <_strtod_l+0xb2>
 800698e:	4995      	ldr	r1, [pc, #596]	; (8006be4 <_strtod_l+0x5d0>)
 8006990:	a81b      	add	r0, sp, #108	; 0x6c
 8006992:	f002 ff85 	bl	80098a0 <__match>
 8006996:	2800      	cmp	r0, #0
 8006998:	d100      	bne.n	800699c <_strtod_l+0x388>
 800699a:	e694      	b.n	80066c6 <_strtod_l+0xb2>
 800699c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800699e:	4992      	ldr	r1, [pc, #584]	; (8006be8 <_strtod_l+0x5d4>)
 80069a0:	3b01      	subs	r3, #1
 80069a2:	a81b      	add	r0, sp, #108	; 0x6c
 80069a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80069a6:	f002 ff7b 	bl	80098a0 <__match>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d102      	bne.n	80069b4 <_strtod_l+0x3a0>
 80069ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069b0:	3301      	adds	r3, #1
 80069b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80069b4:	2600      	movs	r6, #0
 80069b6:	4f8a      	ldr	r7, [pc, #552]	; (8006be0 <_strtod_l+0x5cc>)
 80069b8:	e667      	b.n	800668a <_strtod_l+0x76>
 80069ba:	488c      	ldr	r0, [pc, #560]	; (8006bec <_strtod_l+0x5d8>)
 80069bc:	f001 fdde 	bl	800857c <nan>
 80069c0:	0006      	movs	r6, r0
 80069c2:	000f      	movs	r7, r1
 80069c4:	e661      	b.n	800668a <_strtod_l+0x76>
 80069c6:	9b06      	ldr	r3, [sp, #24]
 80069c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	9309      	str	r3, [sp, #36]	; 0x24
 80069ce:	9b08      	ldr	r3, [sp, #32]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <_strtod_l+0x3c4>
 80069d4:	9b05      	ldr	r3, [sp, #20]
 80069d6:	9308      	str	r3, [sp, #32]
 80069d8:	9c05      	ldr	r4, [sp, #20]
 80069da:	2c10      	cmp	r4, #16
 80069dc:	dd00      	ble.n	80069e0 <_strtod_l+0x3cc>
 80069de:	2410      	movs	r4, #16
 80069e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80069e2:	f7fb fcdd 	bl	80023a0 <__aeabi_ui2d>
 80069e6:	9b05      	ldr	r3, [sp, #20]
 80069e8:	0006      	movs	r6, r0
 80069ea:	000f      	movs	r7, r1
 80069ec:	2b09      	cmp	r3, #9
 80069ee:	dd15      	ble.n	8006a1c <_strtod_l+0x408>
 80069f0:	0022      	movs	r2, r4
 80069f2:	4b7f      	ldr	r3, [pc, #508]	; (8006bf0 <_strtod_l+0x5dc>)
 80069f4:	3a09      	subs	r2, #9
 80069f6:	00d2      	lsls	r2, r2, #3
 80069f8:	189b      	adds	r3, r3, r2
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f7fa fe07 	bl	8001610 <__aeabi_dmul>
 8006a02:	0006      	movs	r6, r0
 8006a04:	0028      	movs	r0, r5
 8006a06:	000f      	movs	r7, r1
 8006a08:	f7fb fcca 	bl	80023a0 <__aeabi_ui2d>
 8006a0c:	0002      	movs	r2, r0
 8006a0e:	000b      	movs	r3, r1
 8006a10:	0030      	movs	r0, r6
 8006a12:	0039      	movs	r1, r7
 8006a14:	f7f9 fea2 	bl	800075c <__aeabi_dadd>
 8006a18:	0006      	movs	r6, r0
 8006a1a:	000f      	movs	r7, r1
 8006a1c:	9b05      	ldr	r3, [sp, #20]
 8006a1e:	2b0f      	cmp	r3, #15
 8006a20:	dc39      	bgt.n	8006a96 <_strtod_l+0x482>
 8006a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d100      	bne.n	8006a2a <_strtod_l+0x416>
 8006a28:	e62f      	b.n	800668a <_strtod_l+0x76>
 8006a2a:	dd24      	ble.n	8006a76 <_strtod_l+0x462>
 8006a2c:	2b16      	cmp	r3, #22
 8006a2e:	dc09      	bgt.n	8006a44 <_strtod_l+0x430>
 8006a30:	496f      	ldr	r1, [pc, #444]	; (8006bf0 <_strtod_l+0x5dc>)
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	18c9      	adds	r1, r1, r3
 8006a36:	0032      	movs	r2, r6
 8006a38:	6808      	ldr	r0, [r1, #0]
 8006a3a:	6849      	ldr	r1, [r1, #4]
 8006a3c:	003b      	movs	r3, r7
 8006a3e:	f7fa fde7 	bl	8001610 <__aeabi_dmul>
 8006a42:	e7bd      	b.n	80069c0 <_strtod_l+0x3ac>
 8006a44:	2325      	movs	r3, #37	; 0x25
 8006a46:	9a05      	ldr	r2, [sp, #20]
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	db22      	blt.n	8006a96 <_strtod_l+0x482>
 8006a50:	240f      	movs	r4, #15
 8006a52:	9b05      	ldr	r3, [sp, #20]
 8006a54:	4d66      	ldr	r5, [pc, #408]	; (8006bf0 <_strtod_l+0x5dc>)
 8006a56:	1ae4      	subs	r4, r4, r3
 8006a58:	00e1      	lsls	r1, r4, #3
 8006a5a:	1869      	adds	r1, r5, r1
 8006a5c:	0032      	movs	r2, r6
 8006a5e:	6808      	ldr	r0, [r1, #0]
 8006a60:	6849      	ldr	r1, [r1, #4]
 8006a62:	003b      	movs	r3, r7
 8006a64:	f7fa fdd4 	bl	8001610 <__aeabi_dmul>
 8006a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6a:	1b1c      	subs	r4, r3, r4
 8006a6c:	00e4      	lsls	r4, r4, #3
 8006a6e:	192d      	adds	r5, r5, r4
 8006a70:	682a      	ldr	r2, [r5, #0]
 8006a72:	686b      	ldr	r3, [r5, #4]
 8006a74:	e7e3      	b.n	8006a3e <_strtod_l+0x42a>
 8006a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a78:	3316      	adds	r3, #22
 8006a7a:	db0c      	blt.n	8006a96 <_strtod_l+0x482>
 8006a7c:	9906      	ldr	r1, [sp, #24]
 8006a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a80:	4b5b      	ldr	r3, [pc, #364]	; (8006bf0 <_strtod_l+0x5dc>)
 8006a82:	1a52      	subs	r2, r2, r1
 8006a84:	00d2      	lsls	r2, r2, #3
 8006a86:	189b      	adds	r3, r3, r2
 8006a88:	0030      	movs	r0, r6
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	0039      	movs	r1, r7
 8006a90:	f7fa f9c4 	bl	8000e1c <__aeabi_ddiv>
 8006a94:	e794      	b.n	80069c0 <_strtod_l+0x3ac>
 8006a96:	9b05      	ldr	r3, [sp, #20]
 8006a98:	1b1c      	subs	r4, r3, r4
 8006a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9c:	18e4      	adds	r4, r4, r3
 8006a9e:	2c00      	cmp	r4, #0
 8006aa0:	dd72      	ble.n	8006b88 <_strtod_l+0x574>
 8006aa2:	220f      	movs	r2, #15
 8006aa4:	0023      	movs	r3, r4
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	4214      	tst	r4, r2
 8006aaa:	d00a      	beq.n	8006ac2 <_strtod_l+0x4ae>
 8006aac:	4950      	ldr	r1, [pc, #320]	; (8006bf0 <_strtod_l+0x5dc>)
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	18c9      	adds	r1, r1, r3
 8006ab2:	0032      	movs	r2, r6
 8006ab4:	6808      	ldr	r0, [r1, #0]
 8006ab6:	6849      	ldr	r1, [r1, #4]
 8006ab8:	003b      	movs	r3, r7
 8006aba:	f7fa fda9 	bl	8001610 <__aeabi_dmul>
 8006abe:	0006      	movs	r6, r0
 8006ac0:	000f      	movs	r7, r1
 8006ac2:	230f      	movs	r3, #15
 8006ac4:	439c      	bics	r4, r3
 8006ac6:	d04a      	beq.n	8006b5e <_strtod_l+0x54a>
 8006ac8:	3326      	adds	r3, #38	; 0x26
 8006aca:	33ff      	adds	r3, #255	; 0xff
 8006acc:	429c      	cmp	r4, r3
 8006ace:	dd22      	ble.n	8006b16 <_strtod_l+0x502>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9305      	str	r3, [sp, #20]
 8006ad4:	9306      	str	r3, [sp, #24]
 8006ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ad8:	9308      	str	r3, [sp, #32]
 8006ada:	2322      	movs	r3, #34	; 0x22
 8006adc:	2600      	movs	r6, #0
 8006ade:	9a04      	ldr	r2, [sp, #16]
 8006ae0:	4f3f      	ldr	r7, [pc, #252]	; (8006be0 <_strtod_l+0x5cc>)
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ae6:	42b3      	cmp	r3, r6
 8006ae8:	d100      	bne.n	8006aec <_strtod_l+0x4d8>
 8006aea:	e5ce      	b.n	800668a <_strtod_l+0x76>
 8006aec:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006aee:	9804      	ldr	r0, [sp, #16]
 8006af0:	f002 ffe8 	bl	8009ac4 <_Bfree>
 8006af4:	9908      	ldr	r1, [sp, #32]
 8006af6:	9804      	ldr	r0, [sp, #16]
 8006af8:	f002 ffe4 	bl	8009ac4 <_Bfree>
 8006afc:	9906      	ldr	r1, [sp, #24]
 8006afe:	9804      	ldr	r0, [sp, #16]
 8006b00:	f002 ffe0 	bl	8009ac4 <_Bfree>
 8006b04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006b06:	9804      	ldr	r0, [sp, #16]
 8006b08:	f002 ffdc 	bl	8009ac4 <_Bfree>
 8006b0c:	9905      	ldr	r1, [sp, #20]
 8006b0e:	9804      	ldr	r0, [sp, #16]
 8006b10:	f002 ffd8 	bl	8009ac4 <_Bfree>
 8006b14:	e5b9      	b.n	800668a <_strtod_l+0x76>
 8006b16:	2300      	movs	r3, #0
 8006b18:	0030      	movs	r0, r6
 8006b1a:	0039      	movs	r1, r7
 8006b1c:	4d35      	ldr	r5, [pc, #212]	; (8006bf4 <_strtod_l+0x5e0>)
 8006b1e:	1124      	asrs	r4, r4, #4
 8006b20:	9307      	str	r3, [sp, #28]
 8006b22:	2c01      	cmp	r4, #1
 8006b24:	dc1e      	bgt.n	8006b64 <_strtod_l+0x550>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <_strtod_l+0x51a>
 8006b2a:	0006      	movs	r6, r0
 8006b2c:	000f      	movs	r7, r1
 8006b2e:	4b32      	ldr	r3, [pc, #200]	; (8006bf8 <_strtod_l+0x5e4>)
 8006b30:	9a07      	ldr	r2, [sp, #28]
 8006b32:	18ff      	adds	r7, r7, r3
 8006b34:	4b2f      	ldr	r3, [pc, #188]	; (8006bf4 <_strtod_l+0x5e0>)
 8006b36:	00d2      	lsls	r2, r2, #3
 8006b38:	189d      	adds	r5, r3, r2
 8006b3a:	6828      	ldr	r0, [r5, #0]
 8006b3c:	6869      	ldr	r1, [r5, #4]
 8006b3e:	0032      	movs	r2, r6
 8006b40:	003b      	movs	r3, r7
 8006b42:	f7fa fd65 	bl	8001610 <__aeabi_dmul>
 8006b46:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <_strtod_l+0x5cc>)
 8006b48:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <_strtod_l+0x5e8>)
 8006b4a:	0006      	movs	r6, r0
 8006b4c:	400b      	ands	r3, r1
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d8be      	bhi.n	8006ad0 <_strtod_l+0x4bc>
 8006b52:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <_strtod_l+0x5ec>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d913      	bls.n	8006b80 <_strtod_l+0x56c>
 8006b58:	2601      	movs	r6, #1
 8006b5a:	4f2a      	ldr	r7, [pc, #168]	; (8006c04 <_strtod_l+0x5f0>)
 8006b5c:	4276      	negs	r6, r6
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9307      	str	r3, [sp, #28]
 8006b62:	e088      	b.n	8006c76 <_strtod_l+0x662>
 8006b64:	2201      	movs	r2, #1
 8006b66:	4214      	tst	r4, r2
 8006b68:	d004      	beq.n	8006b74 <_strtod_l+0x560>
 8006b6a:	682a      	ldr	r2, [r5, #0]
 8006b6c:	686b      	ldr	r3, [r5, #4]
 8006b6e:	f7fa fd4f 	bl	8001610 <__aeabi_dmul>
 8006b72:	2301      	movs	r3, #1
 8006b74:	9a07      	ldr	r2, [sp, #28]
 8006b76:	1064      	asrs	r4, r4, #1
 8006b78:	3201      	adds	r2, #1
 8006b7a:	9207      	str	r2, [sp, #28]
 8006b7c:	3508      	adds	r5, #8
 8006b7e:	e7d0      	b.n	8006b22 <_strtod_l+0x50e>
 8006b80:	23d4      	movs	r3, #212	; 0xd4
 8006b82:	049b      	lsls	r3, r3, #18
 8006b84:	18cf      	adds	r7, r1, r3
 8006b86:	e7ea      	b.n	8006b5e <_strtod_l+0x54a>
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d0e8      	beq.n	8006b5e <_strtod_l+0x54a>
 8006b8c:	4264      	negs	r4, r4
 8006b8e:	230f      	movs	r3, #15
 8006b90:	0022      	movs	r2, r4
 8006b92:	401a      	ands	r2, r3
 8006b94:	421c      	tst	r4, r3
 8006b96:	d00a      	beq.n	8006bae <_strtod_l+0x59a>
 8006b98:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <_strtod_l+0x5dc>)
 8006b9a:	00d2      	lsls	r2, r2, #3
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	0030      	movs	r0, r6
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	0039      	movs	r1, r7
 8006ba6:	f7fa f939 	bl	8000e1c <__aeabi_ddiv>
 8006baa:	0006      	movs	r6, r0
 8006bac:	000f      	movs	r7, r1
 8006bae:	1124      	asrs	r4, r4, #4
 8006bb0:	d0d5      	beq.n	8006b5e <_strtod_l+0x54a>
 8006bb2:	2c1f      	cmp	r4, #31
 8006bb4:	dd28      	ble.n	8006c08 <_strtod_l+0x5f4>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9305      	str	r3, [sp, #20]
 8006bba:	9306      	str	r3, [sp, #24]
 8006bbc:	930d      	str	r3, [sp, #52]	; 0x34
 8006bbe:	9308      	str	r3, [sp, #32]
 8006bc0:	2322      	movs	r3, #34	; 0x22
 8006bc2:	9a04      	ldr	r2, [sp, #16]
 8006bc4:	2600      	movs	r6, #0
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bca:	2700      	movs	r7, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d18d      	bne.n	8006aec <_strtod_l+0x4d8>
 8006bd0:	e55b      	b.n	800668a <_strtod_l+0x76>
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	00004e1f 	.word	0x00004e1f
 8006bd8:	0800ba8e 	.word	0x0800ba8e
 8006bdc:	0800b944 	.word	0x0800b944
 8006be0:	7ff00000 	.word	0x7ff00000
 8006be4:	0800ba86 	.word	0x0800ba86
 8006be8:	0800bac3 	.word	0x0800bac3
 8006bec:	0800bd6b 	.word	0x0800bd6b
 8006bf0:	0800bc30 	.word	0x0800bc30
 8006bf4:	0800bc08 	.word	0x0800bc08
 8006bf8:	fcb00000 	.word	0xfcb00000
 8006bfc:	7ca00000 	.word	0x7ca00000
 8006c00:	7c900000 	.word	0x7c900000
 8006c04:	7fefffff 	.word	0x7fefffff
 8006c08:	2310      	movs	r3, #16
 8006c0a:	0022      	movs	r2, r4
 8006c0c:	401a      	ands	r2, r3
 8006c0e:	9207      	str	r2, [sp, #28]
 8006c10:	421c      	tst	r4, r3
 8006c12:	d001      	beq.n	8006c18 <_strtod_l+0x604>
 8006c14:	335a      	adds	r3, #90	; 0x5a
 8006c16:	9307      	str	r3, [sp, #28]
 8006c18:	0030      	movs	r0, r6
 8006c1a:	0039      	movs	r1, r7
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4dc4      	ldr	r5, [pc, #784]	; (8006f30 <_strtod_l+0x91c>)
 8006c20:	2201      	movs	r2, #1
 8006c22:	4214      	tst	r4, r2
 8006c24:	d004      	beq.n	8006c30 <_strtod_l+0x61c>
 8006c26:	682a      	ldr	r2, [r5, #0]
 8006c28:	686b      	ldr	r3, [r5, #4]
 8006c2a:	f7fa fcf1 	bl	8001610 <__aeabi_dmul>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	1064      	asrs	r4, r4, #1
 8006c32:	3508      	adds	r5, #8
 8006c34:	2c00      	cmp	r4, #0
 8006c36:	d1f3      	bne.n	8006c20 <_strtod_l+0x60c>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <_strtod_l+0x62c>
 8006c3c:	0006      	movs	r6, r0
 8006c3e:	000f      	movs	r7, r1
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00f      	beq.n	8006c66 <_strtod_l+0x652>
 8006c46:	236b      	movs	r3, #107	; 0x6b
 8006c48:	007a      	lsls	r2, r7, #1
 8006c4a:	0d52      	lsrs	r2, r2, #21
 8006c4c:	0039      	movs	r1, r7
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	dd08      	ble.n	8006c66 <_strtod_l+0x652>
 8006c54:	2b1f      	cmp	r3, #31
 8006c56:	dc00      	bgt.n	8006c5a <_strtod_l+0x646>
 8006c58:	e121      	b.n	8006e9e <_strtod_l+0x88a>
 8006c5a:	2600      	movs	r6, #0
 8006c5c:	2b34      	cmp	r3, #52	; 0x34
 8006c5e:	dc00      	bgt.n	8006c62 <_strtod_l+0x64e>
 8006c60:	e116      	b.n	8006e90 <_strtod_l+0x87c>
 8006c62:	27dc      	movs	r7, #220	; 0xdc
 8006c64:	04bf      	lsls	r7, r7, #18
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	0030      	movs	r0, r6
 8006c6c:	0039      	movs	r1, r7
 8006c6e:	f7f9 fbeb 	bl	8000448 <__aeabi_dcmpeq>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d19f      	bne.n	8006bb6 <_strtod_l+0x5a2>
 8006c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c78:	9a08      	ldr	r2, [sp, #32]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006c7e:	9b05      	ldr	r3, [sp, #20]
 8006c80:	9804      	ldr	r0, [sp, #16]
 8006c82:	f002 ff87 	bl	8009b94 <__s2b>
 8006c86:	900d      	str	r0, [sp, #52]	; 0x34
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d100      	bne.n	8006c8e <_strtod_l+0x67a>
 8006c8c:	e720      	b.n	8006ad0 <_strtod_l+0x4bc>
 8006c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c90:	9906      	ldr	r1, [sp, #24]
 8006c92:	17da      	asrs	r2, r3, #31
 8006c94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c96:	1a5b      	subs	r3, r3, r1
 8006c98:	401a      	ands	r2, r3
 8006c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9c:	9215      	str	r2, [sp, #84]	; 0x54
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca2:	17db      	asrs	r3, r3, #31
 8006ca4:	401a      	ands	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9218      	str	r2, [sp, #96]	; 0x60
 8006caa:	9305      	str	r3, [sp, #20]
 8006cac:	9306      	str	r3, [sp, #24]
 8006cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb0:	9804      	ldr	r0, [sp, #16]
 8006cb2:	6859      	ldr	r1, [r3, #4]
 8006cb4:	f002 fec2 	bl	8009a3c <_Balloc>
 8006cb8:	9008      	str	r0, [sp, #32]
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d100      	bne.n	8006cc0 <_strtod_l+0x6ac>
 8006cbe:	e70c      	b.n	8006ada <_strtod_l+0x4c6>
 8006cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cc2:	300c      	adds	r0, #12
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	310c      	adds	r1, #12
 8006cca:	3202      	adds	r2, #2
 8006ccc:	0092      	lsls	r2, r2, #2
 8006cce:	f001 fc4b 	bl	8008568 <memcpy>
 8006cd2:	ab1e      	add	r3, sp, #120	; 0x78
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	0032      	movs	r2, r6
 8006cdc:	003b      	movs	r3, r7
 8006cde:	9804      	ldr	r0, [sp, #16]
 8006ce0:	9610      	str	r6, [sp, #64]	; 0x40
 8006ce2:	9711      	str	r7, [sp, #68]	; 0x44
 8006ce4:	f003 fa98 	bl	800a218 <__d2b>
 8006ce8:	901c      	str	r0, [sp, #112]	; 0x70
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d100      	bne.n	8006cf0 <_strtod_l+0x6dc>
 8006cee:	e6f4      	b.n	8006ada <_strtod_l+0x4c6>
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	9804      	ldr	r0, [sp, #16]
 8006cf4:	f002 ffe2 	bl	8009cbc <__i2b>
 8006cf8:	9006      	str	r0, [sp, #24]
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d100      	bne.n	8006d00 <_strtod_l+0x6ec>
 8006cfe:	e6ec      	b.n	8006ada <_strtod_l+0x4c6>
 8006d00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d04:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006d06:	1ad4      	subs	r4, r2, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	db01      	blt.n	8006d10 <_strtod_l+0x6fc>
 8006d0c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8006d0e:	195d      	adds	r5, r3, r5
 8006d10:	9907      	ldr	r1, [sp, #28]
 8006d12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d14:	1a5b      	subs	r3, r3, r1
 8006d16:	2136      	movs	r1, #54	; 0x36
 8006d18:	189b      	adds	r3, r3, r2
 8006d1a:	1a8a      	subs	r2, r1, r2
 8006d1c:	4985      	ldr	r1, [pc, #532]	; (8006f34 <_strtod_l+0x920>)
 8006d1e:	2001      	movs	r0, #1
 8006d20:	468c      	mov	ip, r1
 8006d22:	2100      	movs	r1, #0
 8006d24:	3b01      	subs	r3, #1
 8006d26:	9114      	str	r1, [sp, #80]	; 0x50
 8006d28:	9012      	str	r0, [sp, #72]	; 0x48
 8006d2a:	4563      	cmp	r3, ip
 8006d2c:	da07      	bge.n	8006d3e <_strtod_l+0x72a>
 8006d2e:	4661      	mov	r1, ip
 8006d30:	1ac9      	subs	r1, r1, r3
 8006d32:	1a52      	subs	r2, r2, r1
 8006d34:	291f      	cmp	r1, #31
 8006d36:	dd00      	ble.n	8006d3a <_strtod_l+0x726>
 8006d38:	e0b6      	b.n	8006ea8 <_strtod_l+0x894>
 8006d3a:	4088      	lsls	r0, r1
 8006d3c:	9012      	str	r0, [sp, #72]	; 0x48
 8006d3e:	18ab      	adds	r3, r5, r2
 8006d40:	930c      	str	r3, [sp, #48]	; 0x30
 8006d42:	18a4      	adds	r4, r4, r2
 8006d44:	9b07      	ldr	r3, [sp, #28]
 8006d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d48:	191c      	adds	r4, r3, r4
 8006d4a:	002b      	movs	r3, r5
 8006d4c:	4295      	cmp	r5, r2
 8006d4e:	dd00      	ble.n	8006d52 <_strtod_l+0x73e>
 8006d50:	0013      	movs	r3, r2
 8006d52:	42a3      	cmp	r3, r4
 8006d54:	dd00      	ble.n	8006d58 <_strtod_l+0x744>
 8006d56:	0023      	movs	r3, r4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dd04      	ble.n	8006d66 <_strtod_l+0x752>
 8006d5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d5e:	1ae4      	subs	r4, r4, r3
 8006d60:	1ad2      	subs	r2, r2, r3
 8006d62:	920c      	str	r2, [sp, #48]	; 0x30
 8006d64:	1aed      	subs	r5, r5, r3
 8006d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dd17      	ble.n	8006d9c <_strtod_l+0x788>
 8006d6c:	001a      	movs	r2, r3
 8006d6e:	9906      	ldr	r1, [sp, #24]
 8006d70:	9804      	ldr	r0, [sp, #16]
 8006d72:	f003 f86b 	bl	8009e4c <__pow5mult>
 8006d76:	9006      	str	r0, [sp, #24]
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d100      	bne.n	8006d7e <_strtod_l+0x76a>
 8006d7c:	e6ad      	b.n	8006ada <_strtod_l+0x4c6>
 8006d7e:	0001      	movs	r1, r0
 8006d80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006d82:	9804      	ldr	r0, [sp, #16]
 8006d84:	f002 ffb2 	bl	8009cec <__multiply>
 8006d88:	900e      	str	r0, [sp, #56]	; 0x38
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d100      	bne.n	8006d90 <_strtod_l+0x77c>
 8006d8e:	e6a4      	b.n	8006ada <_strtod_l+0x4c6>
 8006d90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d92:	9804      	ldr	r0, [sp, #16]
 8006d94:	f002 fe96 	bl	8009ac4 <_Bfree>
 8006d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d9a:	931c      	str	r3, [sp, #112]	; 0x70
 8006d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dd00      	ble.n	8006da4 <_strtod_l+0x790>
 8006da2:	e087      	b.n	8006eb4 <_strtod_l+0x8a0>
 8006da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	dd08      	ble.n	8006dbc <_strtod_l+0x7a8>
 8006daa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006dac:	9908      	ldr	r1, [sp, #32]
 8006dae:	9804      	ldr	r0, [sp, #16]
 8006db0:	f003 f84c 	bl	8009e4c <__pow5mult>
 8006db4:	9008      	str	r0, [sp, #32]
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d100      	bne.n	8006dbc <_strtod_l+0x7a8>
 8006dba:	e68e      	b.n	8006ada <_strtod_l+0x4c6>
 8006dbc:	2c00      	cmp	r4, #0
 8006dbe:	dd08      	ble.n	8006dd2 <_strtod_l+0x7be>
 8006dc0:	0022      	movs	r2, r4
 8006dc2:	9908      	ldr	r1, [sp, #32]
 8006dc4:	9804      	ldr	r0, [sp, #16]
 8006dc6:	f003 f89d 	bl	8009f04 <__lshift>
 8006dca:	9008      	str	r0, [sp, #32]
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d100      	bne.n	8006dd2 <_strtod_l+0x7be>
 8006dd0:	e683      	b.n	8006ada <_strtod_l+0x4c6>
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	dd08      	ble.n	8006de8 <_strtod_l+0x7d4>
 8006dd6:	002a      	movs	r2, r5
 8006dd8:	9906      	ldr	r1, [sp, #24]
 8006dda:	9804      	ldr	r0, [sp, #16]
 8006ddc:	f003 f892 	bl	8009f04 <__lshift>
 8006de0:	9006      	str	r0, [sp, #24]
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d100      	bne.n	8006de8 <_strtod_l+0x7d4>
 8006de6:	e678      	b.n	8006ada <_strtod_l+0x4c6>
 8006de8:	9a08      	ldr	r2, [sp, #32]
 8006dea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006dec:	9804      	ldr	r0, [sp, #16]
 8006dee:	f003 f913 	bl	800a018 <__mdiff>
 8006df2:	9005      	str	r0, [sp, #20]
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d100      	bne.n	8006dfa <_strtod_l+0x7e6>
 8006df8:	e66f      	b.n	8006ada <_strtod_l+0x4c6>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	68c3      	ldr	r3, [r0, #12]
 8006dfe:	9906      	ldr	r1, [sp, #24]
 8006e00:	60c2      	str	r2, [r0, #12]
 8006e02:	930c      	str	r3, [sp, #48]	; 0x30
 8006e04:	f003 f8ec 	bl	8009fe0 <__mcmp>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	da5d      	bge.n	8006ec8 <_strtod_l+0x8b4>
 8006e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e0e:	4333      	orrs	r3, r6
 8006e10:	d000      	beq.n	8006e14 <_strtod_l+0x800>
 8006e12:	e088      	b.n	8006f26 <_strtod_l+0x912>
 8006e14:	033b      	lsls	r3, r7, #12
 8006e16:	d000      	beq.n	8006e1a <_strtod_l+0x806>
 8006e18:	e085      	b.n	8006f26 <_strtod_l+0x912>
 8006e1a:	22d6      	movs	r2, #214	; 0xd6
 8006e1c:	4b46      	ldr	r3, [pc, #280]	; (8006f38 <_strtod_l+0x924>)
 8006e1e:	04d2      	lsls	r2, r2, #19
 8006e20:	403b      	ands	r3, r7
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d97f      	bls.n	8006f26 <_strtod_l+0x912>
 8006e26:	9b05      	ldr	r3, [sp, #20]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d103      	bne.n	8006e36 <_strtod_l+0x822>
 8006e2e:	9b05      	ldr	r3, [sp, #20]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	dd77      	ble.n	8006f26 <_strtod_l+0x912>
 8006e36:	9905      	ldr	r1, [sp, #20]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	9804      	ldr	r0, [sp, #16]
 8006e3c:	f003 f862 	bl	8009f04 <__lshift>
 8006e40:	9906      	ldr	r1, [sp, #24]
 8006e42:	9005      	str	r0, [sp, #20]
 8006e44:	f003 f8cc 	bl	8009fe0 <__mcmp>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	dd6c      	ble.n	8006f26 <_strtod_l+0x912>
 8006e4c:	9907      	ldr	r1, [sp, #28]
 8006e4e:	003b      	movs	r3, r7
 8006e50:	4a39      	ldr	r2, [pc, #228]	; (8006f38 <_strtod_l+0x924>)
 8006e52:	2900      	cmp	r1, #0
 8006e54:	d100      	bne.n	8006e58 <_strtod_l+0x844>
 8006e56:	e094      	b.n	8006f82 <_strtod_l+0x96e>
 8006e58:	0011      	movs	r1, r2
 8006e5a:	20d6      	movs	r0, #214	; 0xd6
 8006e5c:	4039      	ands	r1, r7
 8006e5e:	04c0      	lsls	r0, r0, #19
 8006e60:	4281      	cmp	r1, r0
 8006e62:	dd00      	ble.n	8006e66 <_strtod_l+0x852>
 8006e64:	e08d      	b.n	8006f82 <_strtod_l+0x96e>
 8006e66:	23dc      	movs	r3, #220	; 0xdc
 8006e68:	049b      	lsls	r3, r3, #18
 8006e6a:	4299      	cmp	r1, r3
 8006e6c:	dc00      	bgt.n	8006e70 <_strtod_l+0x85c>
 8006e6e:	e6a7      	b.n	8006bc0 <_strtod_l+0x5ac>
 8006e70:	0030      	movs	r0, r6
 8006e72:	0039      	movs	r1, r7
 8006e74:	4b31      	ldr	r3, [pc, #196]	; (8006f3c <_strtod_l+0x928>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	f7fa fbca 	bl	8001610 <__aeabi_dmul>
 8006e7c:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <_strtod_l+0x924>)
 8006e7e:	0006      	movs	r6, r0
 8006e80:	000f      	movs	r7, r1
 8006e82:	420b      	tst	r3, r1
 8006e84:	d000      	beq.n	8006e88 <_strtod_l+0x874>
 8006e86:	e631      	b.n	8006aec <_strtod_l+0x4d8>
 8006e88:	2322      	movs	r3, #34	; 0x22
 8006e8a:	9a04      	ldr	r2, [sp, #16]
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	e62d      	b.n	8006aec <_strtod_l+0x4d8>
 8006e90:	234b      	movs	r3, #75	; 0x4b
 8006e92:	1a9a      	subs	r2, r3, r2
 8006e94:	3b4c      	subs	r3, #76	; 0x4c
 8006e96:	4093      	lsls	r3, r2
 8006e98:	4019      	ands	r1, r3
 8006e9a:	000f      	movs	r7, r1
 8006e9c:	e6e3      	b.n	8006c66 <_strtod_l+0x652>
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	4252      	negs	r2, r2
 8006ea2:	409a      	lsls	r2, r3
 8006ea4:	4016      	ands	r6, r2
 8006ea6:	e6de      	b.n	8006c66 <_strtod_l+0x652>
 8006ea8:	4925      	ldr	r1, [pc, #148]	; (8006f40 <_strtod_l+0x92c>)
 8006eaa:	1acb      	subs	r3, r1, r3
 8006eac:	0001      	movs	r1, r0
 8006eae:	4099      	lsls	r1, r3
 8006eb0:	9114      	str	r1, [sp, #80]	; 0x50
 8006eb2:	e743      	b.n	8006d3c <_strtod_l+0x728>
 8006eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006eb8:	9804      	ldr	r0, [sp, #16]
 8006eba:	f003 f823 	bl	8009f04 <__lshift>
 8006ebe:	901c      	str	r0, [sp, #112]	; 0x70
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d000      	beq.n	8006ec6 <_strtod_l+0x8b2>
 8006ec4:	e76e      	b.n	8006da4 <_strtod_l+0x790>
 8006ec6:	e608      	b.n	8006ada <_strtod_l+0x4c6>
 8006ec8:	970e      	str	r7, [sp, #56]	; 0x38
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d177      	bne.n	8006fbe <_strtod_l+0x9aa>
 8006ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ed0:	033b      	lsls	r3, r7, #12
 8006ed2:	0b1b      	lsrs	r3, r3, #12
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	d039      	beq.n	8006f4c <_strtod_l+0x938>
 8006ed8:	4a1a      	ldr	r2, [pc, #104]	; (8006f44 <_strtod_l+0x930>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d139      	bne.n	8006f52 <_strtod_l+0x93e>
 8006ede:	2101      	movs	r1, #1
 8006ee0:	9b07      	ldr	r3, [sp, #28]
 8006ee2:	4249      	negs	r1, r1
 8006ee4:	0032      	movs	r2, r6
 8006ee6:	0008      	movs	r0, r1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <_strtod_l+0x8f0>
 8006eec:	24d4      	movs	r4, #212	; 0xd4
 8006eee:	4b12      	ldr	r3, [pc, #72]	; (8006f38 <_strtod_l+0x924>)
 8006ef0:	0008      	movs	r0, r1
 8006ef2:	403b      	ands	r3, r7
 8006ef4:	04e4      	lsls	r4, r4, #19
 8006ef6:	42a3      	cmp	r3, r4
 8006ef8:	d804      	bhi.n	8006f04 <_strtod_l+0x8f0>
 8006efa:	306c      	adds	r0, #108	; 0x6c
 8006efc:	0d1b      	lsrs	r3, r3, #20
 8006efe:	1ac3      	subs	r3, r0, r3
 8006f00:	4099      	lsls	r1, r3
 8006f02:	0008      	movs	r0, r1
 8006f04:	4282      	cmp	r2, r0
 8006f06:	d124      	bne.n	8006f52 <_strtod_l+0x93e>
 8006f08:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <_strtod_l+0x934>)
 8006f0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	d102      	bne.n	8006f16 <_strtod_l+0x902>
 8006f10:	3201      	adds	r2, #1
 8006f12:	d100      	bne.n	8006f16 <_strtod_l+0x902>
 8006f14:	e5e1      	b.n	8006ada <_strtod_l+0x4c6>
 8006f16:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <_strtod_l+0x924>)
 8006f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f1a:	2600      	movs	r6, #0
 8006f1c:	401a      	ands	r2, r3
 8006f1e:	0013      	movs	r3, r2
 8006f20:	2280      	movs	r2, #128	; 0x80
 8006f22:	0352      	lsls	r2, r2, #13
 8006f24:	189f      	adds	r7, r3, r2
 8006f26:	9b07      	ldr	r3, [sp, #28]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1a1      	bne.n	8006e70 <_strtod_l+0x85c>
 8006f2c:	e5de      	b.n	8006aec <_strtod_l+0x4d8>
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	0800b958 	.word	0x0800b958
 8006f34:	fffffc02 	.word	0xfffffc02
 8006f38:	7ff00000 	.word	0x7ff00000
 8006f3c:	39500000 	.word	0x39500000
 8006f40:	fffffbe2 	.word	0xfffffbe2
 8006f44:	000fffff 	.word	0x000fffff
 8006f48:	7fefffff 	.word	0x7fefffff
 8006f4c:	4333      	orrs	r3, r6
 8006f4e:	d100      	bne.n	8006f52 <_strtod_l+0x93e>
 8006f50:	e77c      	b.n	8006e4c <_strtod_l+0x838>
 8006f52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01d      	beq.n	8006f94 <_strtod_l+0x980>
 8006f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f5c:	4213      	tst	r3, r2
 8006f5e:	d0e2      	beq.n	8006f26 <_strtod_l+0x912>
 8006f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f62:	0030      	movs	r0, r6
 8006f64:	0039      	movs	r1, r7
 8006f66:	9a07      	ldr	r2, [sp, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <_strtod_l+0x988>
 8006f6c:	f7ff fb3a 	bl	80065e4 <sulp>
 8006f70:	0002      	movs	r2, r0
 8006f72:	000b      	movs	r3, r1
 8006f74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006f76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f78:	f7f9 fbf0 	bl	800075c <__aeabi_dadd>
 8006f7c:	0006      	movs	r6, r0
 8006f7e:	000f      	movs	r7, r1
 8006f80:	e7d1      	b.n	8006f26 <_strtod_l+0x912>
 8006f82:	2601      	movs	r6, #1
 8006f84:	4013      	ands	r3, r2
 8006f86:	4a98      	ldr	r2, [pc, #608]	; (80071e8 <_strtod_l+0xbd4>)
 8006f88:	4276      	negs	r6, r6
 8006f8a:	189b      	adds	r3, r3, r2
 8006f8c:	4a97      	ldr	r2, [pc, #604]	; (80071ec <_strtod_l+0xbd8>)
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	0017      	movs	r7, r2
 8006f92:	e7c8      	b.n	8006f26 <_strtod_l+0x912>
 8006f94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f96:	4233      	tst	r3, r6
 8006f98:	d0c5      	beq.n	8006f26 <_strtod_l+0x912>
 8006f9a:	e7e1      	b.n	8006f60 <_strtod_l+0x94c>
 8006f9c:	f7ff fb22 	bl	80065e4 <sulp>
 8006fa0:	0002      	movs	r2, r0
 8006fa2:	000b      	movs	r3, r1
 8006fa4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006fa6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006fa8:	f7fa fdf4 	bl	8001b94 <__aeabi_dsub>
 8006fac:	2200      	movs	r2, #0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	0006      	movs	r6, r0
 8006fb2:	000f      	movs	r7, r1
 8006fb4:	f7f9 fa48 	bl	8000448 <__aeabi_dcmpeq>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d0b4      	beq.n	8006f26 <_strtod_l+0x912>
 8006fbc:	e600      	b.n	8006bc0 <_strtod_l+0x5ac>
 8006fbe:	9906      	ldr	r1, [sp, #24]
 8006fc0:	9805      	ldr	r0, [sp, #20]
 8006fc2:	f003 f989 	bl	800a2d8 <__ratio>
 8006fc6:	2380      	movs	r3, #128	; 0x80
 8006fc8:	2200      	movs	r2, #0
 8006fca:	05db      	lsls	r3, r3, #23
 8006fcc:	0004      	movs	r4, r0
 8006fce:	000d      	movs	r5, r1
 8006fd0:	f7f9 fa4a 	bl	8000468 <__aeabi_dcmple>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d06d      	beq.n	80070b4 <_strtod_l+0xaa0>
 8006fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d000      	beq.n	8006fe0 <_strtod_l+0x9cc>
 8006fde:	e07e      	b.n	80070de <_strtod_l+0xaca>
 8006fe0:	2e00      	cmp	r6, #0
 8006fe2:	d158      	bne.n	8007096 <_strtod_l+0xa82>
 8006fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fe6:	031b      	lsls	r3, r3, #12
 8006fe8:	d000      	beq.n	8006fec <_strtod_l+0x9d8>
 8006fea:	e07f      	b.n	80070ec <_strtod_l+0xad8>
 8006fec:	2200      	movs	r2, #0
 8006fee:	0020      	movs	r0, r4
 8006ff0:	0029      	movs	r1, r5
 8006ff2:	4b7f      	ldr	r3, [pc, #508]	; (80071f0 <_strtod_l+0xbdc>)
 8006ff4:	f7f9 fa2e 	bl	8000454 <__aeabi_dcmplt>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d158      	bne.n	80070ae <_strtod_l+0xa9a>
 8006ffc:	0020      	movs	r0, r4
 8006ffe:	0029      	movs	r1, r5
 8007000:	2200      	movs	r2, #0
 8007002:	4b7c      	ldr	r3, [pc, #496]	; (80071f4 <_strtod_l+0xbe0>)
 8007004:	f7fa fb04 	bl	8001610 <__aeabi_dmul>
 8007008:	0004      	movs	r4, r0
 800700a:	000d      	movs	r5, r1
 800700c:	2380      	movs	r3, #128	; 0x80
 800700e:	061b      	lsls	r3, r3, #24
 8007010:	940a      	str	r4, [sp, #40]	; 0x28
 8007012:	18eb      	adds	r3, r5, r3
 8007014:	930b      	str	r3, [sp, #44]	; 0x2c
 8007016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800701a:	9212      	str	r2, [sp, #72]	; 0x48
 800701c:	9313      	str	r3, [sp, #76]	; 0x4c
 800701e:	4a76      	ldr	r2, [pc, #472]	; (80071f8 <_strtod_l+0xbe4>)
 8007020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007022:	4013      	ands	r3, r2
 8007024:	9314      	str	r3, [sp, #80]	; 0x50
 8007026:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007028:	4b74      	ldr	r3, [pc, #464]	; (80071fc <_strtod_l+0xbe8>)
 800702a:	429a      	cmp	r2, r3
 800702c:	d000      	beq.n	8007030 <_strtod_l+0xa1c>
 800702e:	e091      	b.n	8007154 <_strtod_l+0xb40>
 8007030:	4a73      	ldr	r2, [pc, #460]	; (8007200 <_strtod_l+0xbec>)
 8007032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007034:	4694      	mov	ip, r2
 8007036:	4463      	add	r3, ip
 8007038:	001f      	movs	r7, r3
 800703a:	0030      	movs	r0, r6
 800703c:	0019      	movs	r1, r3
 800703e:	f003 f883 	bl	800a148 <__ulp>
 8007042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007046:	f7fa fae3 	bl	8001610 <__aeabi_dmul>
 800704a:	0032      	movs	r2, r6
 800704c:	003b      	movs	r3, r7
 800704e:	f7f9 fb85 	bl	800075c <__aeabi_dadd>
 8007052:	4a69      	ldr	r2, [pc, #420]	; (80071f8 <_strtod_l+0xbe4>)
 8007054:	4b6b      	ldr	r3, [pc, #428]	; (8007204 <_strtod_l+0xbf0>)
 8007056:	0006      	movs	r6, r0
 8007058:	400a      	ands	r2, r1
 800705a:	429a      	cmp	r2, r3
 800705c:	d949      	bls.n	80070f2 <_strtod_l+0xade>
 800705e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007060:	4b69      	ldr	r3, [pc, #420]	; (8007208 <_strtod_l+0xbf4>)
 8007062:	429a      	cmp	r2, r3
 8007064:	d103      	bne.n	800706e <_strtod_l+0xa5a>
 8007066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007068:	3301      	adds	r3, #1
 800706a:	d100      	bne.n	800706e <_strtod_l+0xa5a>
 800706c:	e535      	b.n	8006ada <_strtod_l+0x4c6>
 800706e:	2601      	movs	r6, #1
 8007070:	4f65      	ldr	r7, [pc, #404]	; (8007208 <_strtod_l+0xbf4>)
 8007072:	4276      	negs	r6, r6
 8007074:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007076:	9804      	ldr	r0, [sp, #16]
 8007078:	f002 fd24 	bl	8009ac4 <_Bfree>
 800707c:	9908      	ldr	r1, [sp, #32]
 800707e:	9804      	ldr	r0, [sp, #16]
 8007080:	f002 fd20 	bl	8009ac4 <_Bfree>
 8007084:	9906      	ldr	r1, [sp, #24]
 8007086:	9804      	ldr	r0, [sp, #16]
 8007088:	f002 fd1c 	bl	8009ac4 <_Bfree>
 800708c:	9905      	ldr	r1, [sp, #20]
 800708e:	9804      	ldr	r0, [sp, #16]
 8007090:	f002 fd18 	bl	8009ac4 <_Bfree>
 8007094:	e60b      	b.n	8006cae <_strtod_l+0x69a>
 8007096:	2e01      	cmp	r6, #1
 8007098:	d103      	bne.n	80070a2 <_strtod_l+0xa8e>
 800709a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d100      	bne.n	80070a2 <_strtod_l+0xa8e>
 80070a0:	e58e      	b.n	8006bc0 <_strtod_l+0x5ac>
 80070a2:	2300      	movs	r3, #0
 80070a4:	4c59      	ldr	r4, [pc, #356]	; (800720c <_strtod_l+0xbf8>)
 80070a6:	930a      	str	r3, [sp, #40]	; 0x28
 80070a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80070aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80070ac:	e01c      	b.n	80070e8 <_strtod_l+0xad4>
 80070ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80070b0:	4d50      	ldr	r5, [pc, #320]	; (80071f4 <_strtod_l+0xbe0>)
 80070b2:	e7ab      	b.n	800700c <_strtod_l+0x9f8>
 80070b4:	2200      	movs	r2, #0
 80070b6:	0020      	movs	r0, r4
 80070b8:	0029      	movs	r1, r5
 80070ba:	4b4e      	ldr	r3, [pc, #312]	; (80071f4 <_strtod_l+0xbe0>)
 80070bc:	f7fa faa8 	bl	8001610 <__aeabi_dmul>
 80070c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070c2:	0004      	movs	r4, r0
 80070c4:	000b      	movs	r3, r1
 80070c6:	000d      	movs	r5, r1
 80070c8:	2a00      	cmp	r2, #0
 80070ca:	d104      	bne.n	80070d6 <_strtod_l+0xac2>
 80070cc:	2280      	movs	r2, #128	; 0x80
 80070ce:	0612      	lsls	r2, r2, #24
 80070d0:	900a      	str	r0, [sp, #40]	; 0x28
 80070d2:	188b      	adds	r3, r1, r2
 80070d4:	e79e      	b.n	8007014 <_strtod_l+0xa00>
 80070d6:	0002      	movs	r2, r0
 80070d8:	920a      	str	r2, [sp, #40]	; 0x28
 80070da:	930b      	str	r3, [sp, #44]	; 0x2c
 80070dc:	e79b      	b.n	8007016 <_strtod_l+0xa02>
 80070de:	2300      	movs	r3, #0
 80070e0:	4c43      	ldr	r4, [pc, #268]	; (80071f0 <_strtod_l+0xbdc>)
 80070e2:	930a      	str	r3, [sp, #40]	; 0x28
 80070e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80070e6:	2400      	movs	r4, #0
 80070e8:	4d41      	ldr	r5, [pc, #260]	; (80071f0 <_strtod_l+0xbdc>)
 80070ea:	e794      	b.n	8007016 <_strtod_l+0xa02>
 80070ec:	2300      	movs	r3, #0
 80070ee:	4c47      	ldr	r4, [pc, #284]	; (800720c <_strtod_l+0xbf8>)
 80070f0:	e7f7      	b.n	80070e2 <_strtod_l+0xace>
 80070f2:	23d4      	movs	r3, #212	; 0xd4
 80070f4:	049b      	lsls	r3, r3, #18
 80070f6:	18cf      	adds	r7, r1, r3
 80070f8:	9b07      	ldr	r3, [sp, #28]
 80070fa:	970e      	str	r7, [sp, #56]	; 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1b9      	bne.n	8007074 <_strtod_l+0xa60>
 8007100:	4b3d      	ldr	r3, [pc, #244]	; (80071f8 <_strtod_l+0xbe4>)
 8007102:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007104:	403b      	ands	r3, r7
 8007106:	429a      	cmp	r2, r3
 8007108:	d1b4      	bne.n	8007074 <_strtod_l+0xa60>
 800710a:	0020      	movs	r0, r4
 800710c:	0029      	movs	r1, r5
 800710e:	f7f9 fa07 	bl	8000520 <__aeabi_d2lz>
 8007112:	f7f9 fa41 	bl	8000598 <__aeabi_l2d>
 8007116:	0002      	movs	r2, r0
 8007118:	000b      	movs	r3, r1
 800711a:	0020      	movs	r0, r4
 800711c:	0029      	movs	r1, r5
 800711e:	f7fa fd39 	bl	8001b94 <__aeabi_dsub>
 8007122:	033b      	lsls	r3, r7, #12
 8007124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007126:	0b1b      	lsrs	r3, r3, #12
 8007128:	4333      	orrs	r3, r6
 800712a:	4313      	orrs	r3, r2
 800712c:	0004      	movs	r4, r0
 800712e:	000d      	movs	r5, r1
 8007130:	4a37      	ldr	r2, [pc, #220]	; (8007210 <_strtod_l+0xbfc>)
 8007132:	2b00      	cmp	r3, #0
 8007134:	d054      	beq.n	80071e0 <_strtod_l+0xbcc>
 8007136:	4b37      	ldr	r3, [pc, #220]	; (8007214 <_strtod_l+0xc00>)
 8007138:	f7f9 f98c 	bl	8000454 <__aeabi_dcmplt>
 800713c:	2800      	cmp	r0, #0
 800713e:	d000      	beq.n	8007142 <_strtod_l+0xb2e>
 8007140:	e4d4      	b.n	8006aec <_strtod_l+0x4d8>
 8007142:	0020      	movs	r0, r4
 8007144:	0029      	movs	r1, r5
 8007146:	4a34      	ldr	r2, [pc, #208]	; (8007218 <_strtod_l+0xc04>)
 8007148:	4b2a      	ldr	r3, [pc, #168]	; (80071f4 <_strtod_l+0xbe0>)
 800714a:	f7f9 f997 	bl	800047c <__aeabi_dcmpgt>
 800714e:	2800      	cmp	r0, #0
 8007150:	d090      	beq.n	8007074 <_strtod_l+0xa60>
 8007152:	e4cb      	b.n	8006aec <_strtod_l+0x4d8>
 8007154:	9b07      	ldr	r3, [sp, #28]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d02b      	beq.n	80071b2 <_strtod_l+0xb9e>
 800715a:	23d4      	movs	r3, #212	; 0xd4
 800715c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800715e:	04db      	lsls	r3, r3, #19
 8007160:	429a      	cmp	r2, r3
 8007162:	d826      	bhi.n	80071b2 <_strtod_l+0xb9e>
 8007164:	0020      	movs	r0, r4
 8007166:	0029      	movs	r1, r5
 8007168:	4a2c      	ldr	r2, [pc, #176]	; (800721c <_strtod_l+0xc08>)
 800716a:	4b2d      	ldr	r3, [pc, #180]	; (8007220 <_strtod_l+0xc0c>)
 800716c:	f7f9 f97c 	bl	8000468 <__aeabi_dcmple>
 8007170:	2800      	cmp	r0, #0
 8007172:	d017      	beq.n	80071a4 <_strtod_l+0xb90>
 8007174:	0020      	movs	r0, r4
 8007176:	0029      	movs	r1, r5
 8007178:	f7f9 f9b4 	bl	80004e4 <__aeabi_d2uiz>
 800717c:	2800      	cmp	r0, #0
 800717e:	d100      	bne.n	8007182 <_strtod_l+0xb6e>
 8007180:	3001      	adds	r0, #1
 8007182:	f7fb f90d 	bl	80023a0 <__aeabi_ui2d>
 8007186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007188:	0004      	movs	r4, r0
 800718a:	000b      	movs	r3, r1
 800718c:	000d      	movs	r5, r1
 800718e:	2a00      	cmp	r2, #0
 8007190:	d122      	bne.n	80071d8 <_strtod_l+0xbc4>
 8007192:	2280      	movs	r2, #128	; 0x80
 8007194:	0612      	lsls	r2, r2, #24
 8007196:	188b      	adds	r3, r1, r2
 8007198:	9016      	str	r0, [sp, #88]	; 0x58
 800719a:	9317      	str	r3, [sp, #92]	; 0x5c
 800719c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800719e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071a0:	9212      	str	r2, [sp, #72]	; 0x48
 80071a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80071a4:	22d6      	movs	r2, #214	; 0xd6
 80071a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071a8:	04d2      	lsls	r2, r2, #19
 80071aa:	189b      	adds	r3, r3, r2
 80071ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80071ae:	1a9b      	subs	r3, r3, r2
 80071b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80071b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80071b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80071b6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80071b8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80071ba:	f002 ffc5 	bl	800a148 <__ulp>
 80071be:	0002      	movs	r2, r0
 80071c0:	000b      	movs	r3, r1
 80071c2:	0030      	movs	r0, r6
 80071c4:	0039      	movs	r1, r7
 80071c6:	f7fa fa23 	bl	8001610 <__aeabi_dmul>
 80071ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071ce:	f7f9 fac5 	bl	800075c <__aeabi_dadd>
 80071d2:	0006      	movs	r6, r0
 80071d4:	000f      	movs	r7, r1
 80071d6:	e78f      	b.n	80070f8 <_strtod_l+0xae4>
 80071d8:	0002      	movs	r2, r0
 80071da:	9216      	str	r2, [sp, #88]	; 0x58
 80071dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80071de:	e7dd      	b.n	800719c <_strtod_l+0xb88>
 80071e0:	4b10      	ldr	r3, [pc, #64]	; (8007224 <_strtod_l+0xc10>)
 80071e2:	f7f9 f937 	bl	8000454 <__aeabi_dcmplt>
 80071e6:	e7b2      	b.n	800714e <_strtod_l+0xb3a>
 80071e8:	fff00000 	.word	0xfff00000
 80071ec:	000fffff 	.word	0x000fffff
 80071f0:	3ff00000 	.word	0x3ff00000
 80071f4:	3fe00000 	.word	0x3fe00000
 80071f8:	7ff00000 	.word	0x7ff00000
 80071fc:	7fe00000 	.word	0x7fe00000
 8007200:	fcb00000 	.word	0xfcb00000
 8007204:	7c9fffff 	.word	0x7c9fffff
 8007208:	7fefffff 	.word	0x7fefffff
 800720c:	bff00000 	.word	0xbff00000
 8007210:	94a03595 	.word	0x94a03595
 8007214:	3fdfffff 	.word	0x3fdfffff
 8007218:	35afe535 	.word	0x35afe535
 800721c:	ffc00000 	.word	0xffc00000
 8007220:	41dfffff 	.word	0x41dfffff
 8007224:	3fcfffff 	.word	0x3fcfffff

08007228 <_strtod_r>:
 8007228:	b510      	push	{r4, lr}
 800722a:	4b02      	ldr	r3, [pc, #8]	; (8007234 <_strtod_r+0xc>)
 800722c:	f7ff f9f2 	bl	8006614 <_strtod_l>
 8007230:	bd10      	pop	{r4, pc}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	20000028 	.word	0x20000028

08007238 <strtod>:
 8007238:	b510      	push	{r4, lr}
 800723a:	4c04      	ldr	r4, [pc, #16]	; (800724c <strtod+0x14>)
 800723c:	000a      	movs	r2, r1
 800723e:	0001      	movs	r1, r0
 8007240:	4b03      	ldr	r3, [pc, #12]	; (8007250 <strtod+0x18>)
 8007242:	6820      	ldr	r0, [r4, #0]
 8007244:	f7ff f9e6 	bl	8006614 <_strtod_l>
 8007248:	bd10      	pop	{r4, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	200001e0 	.word	0x200001e0
 8007250:	20000028 	.word	0x20000028

08007254 <_strtol_l.constprop.0>:
 8007254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007256:	b087      	sub	sp, #28
 8007258:	001e      	movs	r6, r3
 800725a:	9005      	str	r0, [sp, #20]
 800725c:	9101      	str	r1, [sp, #4]
 800725e:	9202      	str	r2, [sp, #8]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d048      	beq.n	80072f6 <_strtol_l.constprop.0+0xa2>
 8007264:	000b      	movs	r3, r1
 8007266:	2e24      	cmp	r6, #36	; 0x24
 8007268:	d845      	bhi.n	80072f6 <_strtol_l.constprop.0+0xa2>
 800726a:	4a3b      	ldr	r2, [pc, #236]	; (8007358 <_strtol_l.constprop.0+0x104>)
 800726c:	2108      	movs	r1, #8
 800726e:	4694      	mov	ip, r2
 8007270:	001a      	movs	r2, r3
 8007272:	4660      	mov	r0, ip
 8007274:	7814      	ldrb	r4, [r2, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	5d00      	ldrb	r0, [r0, r4]
 800727a:	001d      	movs	r5, r3
 800727c:	0007      	movs	r7, r0
 800727e:	400f      	ands	r7, r1
 8007280:	4208      	tst	r0, r1
 8007282:	d1f5      	bne.n	8007270 <_strtol_l.constprop.0+0x1c>
 8007284:	2c2d      	cmp	r4, #45	; 0x2d
 8007286:	d13d      	bne.n	8007304 <_strtol_l.constprop.0+0xb0>
 8007288:	2701      	movs	r7, #1
 800728a:	781c      	ldrb	r4, [r3, #0]
 800728c:	1c95      	adds	r5, r2, #2
 800728e:	2e00      	cmp	r6, #0
 8007290:	d05e      	beq.n	8007350 <_strtol_l.constprop.0+0xfc>
 8007292:	2e10      	cmp	r6, #16
 8007294:	d109      	bne.n	80072aa <_strtol_l.constprop.0+0x56>
 8007296:	2c30      	cmp	r4, #48	; 0x30
 8007298:	d107      	bne.n	80072aa <_strtol_l.constprop.0+0x56>
 800729a:	2220      	movs	r2, #32
 800729c:	782b      	ldrb	r3, [r5, #0]
 800729e:	4393      	bics	r3, r2
 80072a0:	2b58      	cmp	r3, #88	; 0x58
 80072a2:	d150      	bne.n	8007346 <_strtol_l.constprop.0+0xf2>
 80072a4:	2610      	movs	r6, #16
 80072a6:	786c      	ldrb	r4, [r5, #1]
 80072a8:	3502      	adds	r5, #2
 80072aa:	4b2c      	ldr	r3, [pc, #176]	; (800735c <_strtol_l.constprop.0+0x108>)
 80072ac:	0031      	movs	r1, r6
 80072ae:	18fb      	adds	r3, r7, r3
 80072b0:	0018      	movs	r0, r3
 80072b2:	9303      	str	r3, [sp, #12]
 80072b4:	f7f8 ffc8 	bl	8000248 <__aeabi_uidivmod>
 80072b8:	2200      	movs	r2, #0
 80072ba:	9104      	str	r1, [sp, #16]
 80072bc:	2101      	movs	r1, #1
 80072be:	4684      	mov	ip, r0
 80072c0:	0010      	movs	r0, r2
 80072c2:	4249      	negs	r1, r1
 80072c4:	0023      	movs	r3, r4
 80072c6:	3b30      	subs	r3, #48	; 0x30
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d903      	bls.n	80072d4 <_strtol_l.constprop.0+0x80>
 80072cc:	3b11      	subs	r3, #17
 80072ce:	2b19      	cmp	r3, #25
 80072d0:	d81d      	bhi.n	800730e <_strtol_l.constprop.0+0xba>
 80072d2:	330a      	adds	r3, #10
 80072d4:	429e      	cmp	r6, r3
 80072d6:	dd1e      	ble.n	8007316 <_strtol_l.constprop.0+0xc2>
 80072d8:	1c54      	adds	r4, r2, #1
 80072da:	d009      	beq.n	80072f0 <_strtol_l.constprop.0+0x9c>
 80072dc:	000a      	movs	r2, r1
 80072de:	4584      	cmp	ip, r0
 80072e0:	d306      	bcc.n	80072f0 <_strtol_l.constprop.0+0x9c>
 80072e2:	d102      	bne.n	80072ea <_strtol_l.constprop.0+0x96>
 80072e4:	9c04      	ldr	r4, [sp, #16]
 80072e6:	429c      	cmp	r4, r3
 80072e8:	db02      	blt.n	80072f0 <_strtol_l.constprop.0+0x9c>
 80072ea:	2201      	movs	r2, #1
 80072ec:	4370      	muls	r0, r6
 80072ee:	1818      	adds	r0, r3, r0
 80072f0:	782c      	ldrb	r4, [r5, #0]
 80072f2:	3501      	adds	r5, #1
 80072f4:	e7e6      	b.n	80072c4 <_strtol_l.constprop.0+0x70>
 80072f6:	f001 f8ff 	bl	80084f8 <__errno>
 80072fa:	2316      	movs	r3, #22
 80072fc:	6003      	str	r3, [r0, #0]
 80072fe:	2000      	movs	r0, #0
 8007300:	b007      	add	sp, #28
 8007302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007304:	2c2b      	cmp	r4, #43	; 0x2b
 8007306:	d1c2      	bne.n	800728e <_strtol_l.constprop.0+0x3a>
 8007308:	781c      	ldrb	r4, [r3, #0]
 800730a:	1c95      	adds	r5, r2, #2
 800730c:	e7bf      	b.n	800728e <_strtol_l.constprop.0+0x3a>
 800730e:	0023      	movs	r3, r4
 8007310:	3b61      	subs	r3, #97	; 0x61
 8007312:	2b19      	cmp	r3, #25
 8007314:	d9dd      	bls.n	80072d2 <_strtol_l.constprop.0+0x7e>
 8007316:	1c53      	adds	r3, r2, #1
 8007318:	d109      	bne.n	800732e <_strtol_l.constprop.0+0xda>
 800731a:	2322      	movs	r3, #34	; 0x22
 800731c:	9a05      	ldr	r2, [sp, #20]
 800731e:	9803      	ldr	r0, [sp, #12]
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	9b02      	ldr	r3, [sp, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0eb      	beq.n	8007300 <_strtol_l.constprop.0+0xac>
 8007328:	1e6b      	subs	r3, r5, #1
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	e007      	b.n	800733e <_strtol_l.constprop.0+0xea>
 800732e:	2f00      	cmp	r7, #0
 8007330:	d000      	beq.n	8007334 <_strtol_l.constprop.0+0xe0>
 8007332:	4240      	negs	r0, r0
 8007334:	9b02      	ldr	r3, [sp, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0e2      	beq.n	8007300 <_strtol_l.constprop.0+0xac>
 800733a:	2a00      	cmp	r2, #0
 800733c:	d1f4      	bne.n	8007328 <_strtol_l.constprop.0+0xd4>
 800733e:	9b02      	ldr	r3, [sp, #8]
 8007340:	9a01      	ldr	r2, [sp, #4]
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	e7dc      	b.n	8007300 <_strtol_l.constprop.0+0xac>
 8007346:	2430      	movs	r4, #48	; 0x30
 8007348:	2e00      	cmp	r6, #0
 800734a:	d1ae      	bne.n	80072aa <_strtol_l.constprop.0+0x56>
 800734c:	3608      	adds	r6, #8
 800734e:	e7ac      	b.n	80072aa <_strtol_l.constprop.0+0x56>
 8007350:	2c30      	cmp	r4, #48	; 0x30
 8007352:	d0a2      	beq.n	800729a <_strtol_l.constprop.0+0x46>
 8007354:	260a      	movs	r6, #10
 8007356:	e7a8      	b.n	80072aa <_strtol_l.constprop.0+0x56>
 8007358:	0800b981 	.word	0x0800b981
 800735c:	7fffffff 	.word	0x7fffffff

08007360 <_strtol_r>:
 8007360:	b510      	push	{r4, lr}
 8007362:	f7ff ff77 	bl	8007254 <_strtol_l.constprop.0>
 8007366:	bd10      	pop	{r4, pc}

08007368 <strtol>:
 8007368:	b510      	push	{r4, lr}
 800736a:	4c04      	ldr	r4, [pc, #16]	; (800737c <strtol+0x14>)
 800736c:	0013      	movs	r3, r2
 800736e:	000a      	movs	r2, r1
 8007370:	0001      	movs	r1, r0
 8007372:	6820      	ldr	r0, [r4, #0]
 8007374:	f7ff ff6e 	bl	8007254 <_strtol_l.constprop.0>
 8007378:	bd10      	pop	{r4, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	200001e0 	.word	0x200001e0

08007380 <__cvt>:
 8007380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007382:	001e      	movs	r6, r3
 8007384:	2300      	movs	r3, #0
 8007386:	0014      	movs	r4, r2
 8007388:	b08b      	sub	sp, #44	; 0x2c
 800738a:	429e      	cmp	r6, r3
 800738c:	da04      	bge.n	8007398 <__cvt+0x18>
 800738e:	2180      	movs	r1, #128	; 0x80
 8007390:	0609      	lsls	r1, r1, #24
 8007392:	1873      	adds	r3, r6, r1
 8007394:	001e      	movs	r6, r3
 8007396:	232d      	movs	r3, #45	; 0x2d
 8007398:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800739a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800739c:	7013      	strb	r3, [r2, #0]
 800739e:	2320      	movs	r3, #32
 80073a0:	2203      	movs	r2, #3
 80073a2:	439f      	bics	r7, r3
 80073a4:	2f46      	cmp	r7, #70	; 0x46
 80073a6:	d007      	beq.n	80073b8 <__cvt+0x38>
 80073a8:	003b      	movs	r3, r7
 80073aa:	3b45      	subs	r3, #69	; 0x45
 80073ac:	4259      	negs	r1, r3
 80073ae:	414b      	adcs	r3, r1
 80073b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80073b2:	3a01      	subs	r2, #1
 80073b4:	18cb      	adds	r3, r1, r3
 80073b6:	9310      	str	r3, [sp, #64]	; 0x40
 80073b8:	ab09      	add	r3, sp, #36	; 0x24
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	ab08      	add	r3, sp, #32
 80073be:	9303      	str	r3, [sp, #12]
 80073c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073c2:	9200      	str	r2, [sp, #0]
 80073c4:	9302      	str	r3, [sp, #8]
 80073c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073c8:	0022      	movs	r2, r4
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	0033      	movs	r3, r6
 80073ce:	f001 f96f 	bl	80086b0 <_dtoa_r>
 80073d2:	0005      	movs	r5, r0
 80073d4:	2f47      	cmp	r7, #71	; 0x47
 80073d6:	d102      	bne.n	80073de <__cvt+0x5e>
 80073d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073da:	07db      	lsls	r3, r3, #31
 80073dc:	d528      	bpl.n	8007430 <__cvt+0xb0>
 80073de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073e0:	18eb      	adds	r3, r5, r3
 80073e2:	9307      	str	r3, [sp, #28]
 80073e4:	2f46      	cmp	r7, #70	; 0x46
 80073e6:	d114      	bne.n	8007412 <__cvt+0x92>
 80073e8:	782b      	ldrb	r3, [r5, #0]
 80073ea:	2b30      	cmp	r3, #48	; 0x30
 80073ec:	d10c      	bne.n	8007408 <__cvt+0x88>
 80073ee:	2200      	movs	r2, #0
 80073f0:	2300      	movs	r3, #0
 80073f2:	0020      	movs	r0, r4
 80073f4:	0031      	movs	r1, r6
 80073f6:	f7f9 f827 	bl	8000448 <__aeabi_dcmpeq>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d104      	bne.n	8007408 <__cvt+0x88>
 80073fe:	2301      	movs	r3, #1
 8007400:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007402:	1a9b      	subs	r3, r3, r2
 8007404:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800740a:	9a07      	ldr	r2, [sp, #28]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	18d3      	adds	r3, r2, r3
 8007410:	9307      	str	r3, [sp, #28]
 8007412:	2200      	movs	r2, #0
 8007414:	2300      	movs	r3, #0
 8007416:	0020      	movs	r0, r4
 8007418:	0031      	movs	r1, r6
 800741a:	f7f9 f815 	bl	8000448 <__aeabi_dcmpeq>
 800741e:	2800      	cmp	r0, #0
 8007420:	d001      	beq.n	8007426 <__cvt+0xa6>
 8007422:	9b07      	ldr	r3, [sp, #28]
 8007424:	9309      	str	r3, [sp, #36]	; 0x24
 8007426:	2230      	movs	r2, #48	; 0x30
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	9907      	ldr	r1, [sp, #28]
 800742c:	428b      	cmp	r3, r1
 800742e:	d306      	bcc.n	800743e <__cvt+0xbe>
 8007430:	0028      	movs	r0, r5
 8007432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007434:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007436:	1b5b      	subs	r3, r3, r5
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	b00b      	add	sp, #44	; 0x2c
 800743c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743e:	1c59      	adds	r1, r3, #1
 8007440:	9109      	str	r1, [sp, #36]	; 0x24
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	e7f0      	b.n	8007428 <__cvt+0xa8>

08007446 <__exponent>:
 8007446:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007448:	1c83      	adds	r3, r0, #2
 800744a:	b087      	sub	sp, #28
 800744c:	9303      	str	r3, [sp, #12]
 800744e:	0005      	movs	r5, r0
 8007450:	000c      	movs	r4, r1
 8007452:	232b      	movs	r3, #43	; 0x2b
 8007454:	7002      	strb	r2, [r0, #0]
 8007456:	2900      	cmp	r1, #0
 8007458:	da01      	bge.n	800745e <__exponent+0x18>
 800745a:	424c      	negs	r4, r1
 800745c:	3302      	adds	r3, #2
 800745e:	706b      	strb	r3, [r5, #1]
 8007460:	2c09      	cmp	r4, #9
 8007462:	dd2f      	ble.n	80074c4 <__exponent+0x7e>
 8007464:	270a      	movs	r7, #10
 8007466:	ab04      	add	r3, sp, #16
 8007468:	1dde      	adds	r6, r3, #7
 800746a:	0020      	movs	r0, r4
 800746c:	0039      	movs	r1, r7
 800746e:	9601      	str	r6, [sp, #4]
 8007470:	f7f8 ffd4 	bl	800041c <__aeabi_idivmod>
 8007474:	3e01      	subs	r6, #1
 8007476:	3130      	adds	r1, #48	; 0x30
 8007478:	0020      	movs	r0, r4
 800747a:	7031      	strb	r1, [r6, #0]
 800747c:	0039      	movs	r1, r7
 800747e:	9402      	str	r4, [sp, #8]
 8007480:	f7f8 fee6 	bl	8000250 <__divsi3>
 8007484:	9b02      	ldr	r3, [sp, #8]
 8007486:	0004      	movs	r4, r0
 8007488:	2b63      	cmp	r3, #99	; 0x63
 800748a:	dcee      	bgt.n	800746a <__exponent+0x24>
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	3430      	adds	r4, #48	; 0x30
 8007490:	1e9a      	subs	r2, r3, #2
 8007492:	0013      	movs	r3, r2
 8007494:	9903      	ldr	r1, [sp, #12]
 8007496:	7014      	strb	r4, [r2, #0]
 8007498:	a804      	add	r0, sp, #16
 800749a:	3007      	adds	r0, #7
 800749c:	4298      	cmp	r0, r3
 800749e:	d80c      	bhi.n	80074ba <__exponent+0x74>
 80074a0:	2300      	movs	r3, #0
 80074a2:	4282      	cmp	r2, r0
 80074a4:	d804      	bhi.n	80074b0 <__exponent+0x6a>
 80074a6:	aa04      	add	r2, sp, #16
 80074a8:	3309      	adds	r3, #9
 80074aa:	189b      	adds	r3, r3, r2
 80074ac:	9a01      	ldr	r2, [sp, #4]
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	9a03      	ldr	r2, [sp, #12]
 80074b2:	18d3      	adds	r3, r2, r3
 80074b4:	1b58      	subs	r0, r3, r5
 80074b6:	b007      	add	sp, #28
 80074b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ba:	7818      	ldrb	r0, [r3, #0]
 80074bc:	3301      	adds	r3, #1
 80074be:	7008      	strb	r0, [r1, #0]
 80074c0:	3101      	adds	r1, #1
 80074c2:	e7e9      	b.n	8007498 <__exponent+0x52>
 80074c4:	2330      	movs	r3, #48	; 0x30
 80074c6:	3430      	adds	r4, #48	; 0x30
 80074c8:	70ab      	strb	r3, [r5, #2]
 80074ca:	70ec      	strb	r4, [r5, #3]
 80074cc:	1d2b      	adds	r3, r5, #4
 80074ce:	e7f1      	b.n	80074b4 <__exponent+0x6e>

080074d0 <_printf_float>:
 80074d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074d2:	b095      	sub	sp, #84	; 0x54
 80074d4:	000c      	movs	r4, r1
 80074d6:	9208      	str	r2, [sp, #32]
 80074d8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80074da:	9309      	str	r3, [sp, #36]	; 0x24
 80074dc:	0007      	movs	r7, r0
 80074de:	f000 ffa7 	bl	8008430 <_localeconv_r>
 80074e2:	6803      	ldr	r3, [r0, #0]
 80074e4:	0018      	movs	r0, r3
 80074e6:	930c      	str	r3, [sp, #48]	; 0x30
 80074e8:	f7f8 fe0c 	bl	8000104 <strlen>
 80074ec:	2300      	movs	r3, #0
 80074ee:	9312      	str	r3, [sp, #72]	; 0x48
 80074f0:	7e23      	ldrb	r3, [r4, #24]
 80074f2:	2207      	movs	r2, #7
 80074f4:	930a      	str	r3, [sp, #40]	; 0x28
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	900d      	str	r0, [sp, #52]	; 0x34
 80074fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80074fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	05c9      	lsls	r1, r1, #23
 8007502:	d547      	bpl.n	8007594 <_printf_float+0xc4>
 8007504:	189b      	adds	r3, r3, r2
 8007506:	4393      	bics	r3, r2
 8007508:	001a      	movs	r2, r3
 800750a:	3208      	adds	r2, #8
 800750c:	602a      	str	r2, [r5, #0]
 800750e:	681e      	ldr	r6, [r3, #0]
 8007510:	685d      	ldr	r5, [r3, #4]
 8007512:	0032      	movs	r2, r6
 8007514:	002b      	movs	r3, r5
 8007516:	64a2      	str	r2, [r4, #72]	; 0x48
 8007518:	64e3      	str	r3, [r4, #76]	; 0x4c
 800751a:	2201      	movs	r2, #1
 800751c:	006b      	lsls	r3, r5, #1
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	930e      	str	r3, [sp, #56]	; 0x38
 8007522:	0030      	movs	r0, r6
 8007524:	4bab      	ldr	r3, [pc, #684]	; (80077d4 <_printf_float+0x304>)
 8007526:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007528:	4252      	negs	r2, r2
 800752a:	f7fa feb5 	bl	8002298 <__aeabi_dcmpun>
 800752e:	2800      	cmp	r0, #0
 8007530:	d132      	bne.n	8007598 <_printf_float+0xc8>
 8007532:	2201      	movs	r2, #1
 8007534:	0030      	movs	r0, r6
 8007536:	4ba7      	ldr	r3, [pc, #668]	; (80077d4 <_printf_float+0x304>)
 8007538:	990e      	ldr	r1, [sp, #56]	; 0x38
 800753a:	4252      	negs	r2, r2
 800753c:	f7f8 ff94 	bl	8000468 <__aeabi_dcmple>
 8007540:	2800      	cmp	r0, #0
 8007542:	d129      	bne.n	8007598 <_printf_float+0xc8>
 8007544:	2200      	movs	r2, #0
 8007546:	2300      	movs	r3, #0
 8007548:	0030      	movs	r0, r6
 800754a:	0029      	movs	r1, r5
 800754c:	f7f8 ff82 	bl	8000454 <__aeabi_dcmplt>
 8007550:	2800      	cmp	r0, #0
 8007552:	d003      	beq.n	800755c <_printf_float+0x8c>
 8007554:	0023      	movs	r3, r4
 8007556:	222d      	movs	r2, #45	; 0x2d
 8007558:	3343      	adds	r3, #67	; 0x43
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800755e:	4d9e      	ldr	r5, [pc, #632]	; (80077d8 <_printf_float+0x308>)
 8007560:	2b47      	cmp	r3, #71	; 0x47
 8007562:	d900      	bls.n	8007566 <_printf_float+0x96>
 8007564:	4d9d      	ldr	r5, [pc, #628]	; (80077dc <_printf_float+0x30c>)
 8007566:	2303      	movs	r3, #3
 8007568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	3301      	adds	r3, #1
 800756e:	439a      	bics	r2, r3
 8007570:	2300      	movs	r3, #0
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	930b      	str	r3, [sp, #44]	; 0x2c
 8007576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007578:	0021      	movs	r1, r4
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	0038      	movs	r0, r7
 800757e:	9b08      	ldr	r3, [sp, #32]
 8007580:	aa13      	add	r2, sp, #76	; 0x4c
 8007582:	f000 f9fb 	bl	800797c <_printf_common>
 8007586:	3001      	adds	r0, #1
 8007588:	d000      	beq.n	800758c <_printf_float+0xbc>
 800758a:	e0a3      	b.n	80076d4 <_printf_float+0x204>
 800758c:	2001      	movs	r0, #1
 800758e:	4240      	negs	r0, r0
 8007590:	b015      	add	sp, #84	; 0x54
 8007592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007594:	3307      	adds	r3, #7
 8007596:	e7b6      	b.n	8007506 <_printf_float+0x36>
 8007598:	0032      	movs	r2, r6
 800759a:	002b      	movs	r3, r5
 800759c:	0030      	movs	r0, r6
 800759e:	0029      	movs	r1, r5
 80075a0:	f7fa fe7a 	bl	8002298 <__aeabi_dcmpun>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d00b      	beq.n	80075c0 <_printf_float+0xf0>
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	da03      	bge.n	80075b4 <_printf_float+0xe4>
 80075ac:	0023      	movs	r3, r4
 80075ae:	222d      	movs	r2, #45	; 0x2d
 80075b0:	3343      	adds	r3, #67	; 0x43
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b6:	4d8a      	ldr	r5, [pc, #552]	; (80077e0 <_printf_float+0x310>)
 80075b8:	2b47      	cmp	r3, #71	; 0x47
 80075ba:	d9d4      	bls.n	8007566 <_printf_float+0x96>
 80075bc:	4d89      	ldr	r5, [pc, #548]	; (80077e4 <_printf_float+0x314>)
 80075be:	e7d2      	b.n	8007566 <_printf_float+0x96>
 80075c0:	2220      	movs	r2, #32
 80075c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075c4:	6863      	ldr	r3, [r4, #4]
 80075c6:	4391      	bics	r1, r2
 80075c8:	910e      	str	r1, [sp, #56]	; 0x38
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	d14a      	bne.n	8007664 <_printf_float+0x194>
 80075ce:	3307      	adds	r3, #7
 80075d0:	6063      	str	r3, [r4, #4]
 80075d2:	2380      	movs	r3, #128	; 0x80
 80075d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	4313      	orrs	r3, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	9206      	str	r2, [sp, #24]
 80075de:	aa12      	add	r2, sp, #72	; 0x48
 80075e0:	9205      	str	r2, [sp, #20]
 80075e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	9204      	str	r2, [sp, #16]
 80075e8:	aa11      	add	r2, sp, #68	; 0x44
 80075ea:	9203      	str	r2, [sp, #12]
 80075ec:	2223      	movs	r2, #35	; 0x23
 80075ee:	a908      	add	r1, sp, #32
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	1852      	adds	r2, r2, r1
 80075f6:	9202      	str	r2, [sp, #8]
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	0032      	movs	r2, r6
 80075fc:	002b      	movs	r3, r5
 80075fe:	0038      	movs	r0, r7
 8007600:	f7ff febe 	bl	8007380 <__cvt>
 8007604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007606:	0005      	movs	r5, r0
 8007608:	2b47      	cmp	r3, #71	; 0x47
 800760a:	d109      	bne.n	8007620 <_printf_float+0x150>
 800760c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800760e:	1cda      	adds	r2, r3, #3
 8007610:	db02      	blt.n	8007618 <_printf_float+0x148>
 8007612:	6862      	ldr	r2, [r4, #4]
 8007614:	4293      	cmp	r3, r2
 8007616:	dd49      	ble.n	80076ac <_printf_float+0x1dc>
 8007618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761a:	3b02      	subs	r3, #2
 800761c:	b2db      	uxtb	r3, r3
 800761e:	930a      	str	r3, [sp, #40]	; 0x28
 8007620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007622:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007624:	2b65      	cmp	r3, #101	; 0x65
 8007626:	d824      	bhi.n	8007672 <_printf_float+0x1a2>
 8007628:	0020      	movs	r0, r4
 800762a:	001a      	movs	r2, r3
 800762c:	3901      	subs	r1, #1
 800762e:	3050      	adds	r0, #80	; 0x50
 8007630:	9111      	str	r1, [sp, #68]	; 0x44
 8007632:	f7ff ff08 	bl	8007446 <__exponent>
 8007636:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007638:	900b      	str	r0, [sp, #44]	; 0x2c
 800763a:	1813      	adds	r3, r2, r0
 800763c:	6123      	str	r3, [r4, #16]
 800763e:	2a01      	cmp	r2, #1
 8007640:	dc02      	bgt.n	8007648 <_printf_float+0x178>
 8007642:	6822      	ldr	r2, [r4, #0]
 8007644:	07d2      	lsls	r2, r2, #31
 8007646:	d501      	bpl.n	800764c <_printf_float+0x17c>
 8007648:	3301      	adds	r3, #1
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	2323      	movs	r3, #35	; 0x23
 800764e:	aa08      	add	r2, sp, #32
 8007650:	189b      	adds	r3, r3, r2
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d100      	bne.n	800765a <_printf_float+0x18a>
 8007658:	e78d      	b.n	8007576 <_printf_float+0xa6>
 800765a:	0023      	movs	r3, r4
 800765c:	222d      	movs	r2, #45	; 0x2d
 800765e:	3343      	adds	r3, #67	; 0x43
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	e788      	b.n	8007576 <_printf_float+0xa6>
 8007664:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007666:	2a47      	cmp	r2, #71	; 0x47
 8007668:	d1b3      	bne.n	80075d2 <_printf_float+0x102>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1b1      	bne.n	80075d2 <_printf_float+0x102>
 800766e:	3301      	adds	r3, #1
 8007670:	e7ae      	b.n	80075d0 <_printf_float+0x100>
 8007672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007674:	2b66      	cmp	r3, #102	; 0x66
 8007676:	d11b      	bne.n	80076b0 <_printf_float+0x1e0>
 8007678:	6863      	ldr	r3, [r4, #4]
 800767a:	2900      	cmp	r1, #0
 800767c:	dd09      	ble.n	8007692 <_printf_float+0x1c2>
 800767e:	6121      	str	r1, [r4, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <_printf_float+0x1ba>
 8007684:	6822      	ldr	r2, [r4, #0]
 8007686:	07d2      	lsls	r2, r2, #31
 8007688:	d50b      	bpl.n	80076a2 <_printf_float+0x1d2>
 800768a:	3301      	adds	r3, #1
 800768c:	185b      	adds	r3, r3, r1
 800768e:	6123      	str	r3, [r4, #16]
 8007690:	e007      	b.n	80076a2 <_printf_float+0x1d2>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d103      	bne.n	800769e <_printf_float+0x1ce>
 8007696:	2201      	movs	r2, #1
 8007698:	6821      	ldr	r1, [r4, #0]
 800769a:	4211      	tst	r1, r2
 800769c:	d000      	beq.n	80076a0 <_printf_float+0x1d0>
 800769e:	1c9a      	adds	r2, r3, #2
 80076a0:	6122      	str	r2, [r4, #16]
 80076a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80076a6:	2300      	movs	r3, #0
 80076a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80076aa:	e7cf      	b.n	800764c <_printf_float+0x17c>
 80076ac:	2367      	movs	r3, #103	; 0x67
 80076ae:	930a      	str	r3, [sp, #40]	; 0x28
 80076b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80076b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076b4:	4299      	cmp	r1, r3
 80076b6:	db06      	blt.n	80076c6 <_printf_float+0x1f6>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	6121      	str	r1, [r4, #16]
 80076bc:	07db      	lsls	r3, r3, #31
 80076be:	d5f0      	bpl.n	80076a2 <_printf_float+0x1d2>
 80076c0:	3101      	adds	r1, #1
 80076c2:	6121      	str	r1, [r4, #16]
 80076c4:	e7ed      	b.n	80076a2 <_printf_float+0x1d2>
 80076c6:	2201      	movs	r2, #1
 80076c8:	2900      	cmp	r1, #0
 80076ca:	dc01      	bgt.n	80076d0 <_printf_float+0x200>
 80076cc:	1892      	adds	r2, r2, r2
 80076ce:	1a52      	subs	r2, r2, r1
 80076d0:	189b      	adds	r3, r3, r2
 80076d2:	e7dc      	b.n	800768e <_printf_float+0x1be>
 80076d4:	6822      	ldr	r2, [r4, #0]
 80076d6:	0553      	lsls	r3, r2, #21
 80076d8:	d408      	bmi.n	80076ec <_printf_float+0x21c>
 80076da:	6923      	ldr	r3, [r4, #16]
 80076dc:	002a      	movs	r2, r5
 80076de:	0038      	movs	r0, r7
 80076e0:	9908      	ldr	r1, [sp, #32]
 80076e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80076e4:	47a8      	blx	r5
 80076e6:	3001      	adds	r0, #1
 80076e8:	d12a      	bne.n	8007740 <_printf_float+0x270>
 80076ea:	e74f      	b.n	800758c <_printf_float+0xbc>
 80076ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ee:	2b65      	cmp	r3, #101	; 0x65
 80076f0:	d800      	bhi.n	80076f4 <_printf_float+0x224>
 80076f2:	e0ec      	b.n	80078ce <_printf_float+0x3fe>
 80076f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80076f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80076f8:	2200      	movs	r2, #0
 80076fa:	2300      	movs	r3, #0
 80076fc:	f7f8 fea4 	bl	8000448 <__aeabi_dcmpeq>
 8007700:	2800      	cmp	r0, #0
 8007702:	d034      	beq.n	800776e <_printf_float+0x29e>
 8007704:	2301      	movs	r3, #1
 8007706:	0038      	movs	r0, r7
 8007708:	4a37      	ldr	r2, [pc, #220]	; (80077e8 <_printf_float+0x318>)
 800770a:	9908      	ldr	r1, [sp, #32]
 800770c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800770e:	47a8      	blx	r5
 8007710:	3001      	adds	r0, #1
 8007712:	d100      	bne.n	8007716 <_printf_float+0x246>
 8007714:	e73a      	b.n	800758c <_printf_float+0xbc>
 8007716:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800771a:	429a      	cmp	r2, r3
 800771c:	db02      	blt.n	8007724 <_printf_float+0x254>
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	07db      	lsls	r3, r3, #31
 8007722:	d50d      	bpl.n	8007740 <_printf_float+0x270>
 8007724:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007726:	0038      	movs	r0, r7
 8007728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800772a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800772c:	9908      	ldr	r1, [sp, #32]
 800772e:	47a8      	blx	r5
 8007730:	2500      	movs	r5, #0
 8007732:	3001      	adds	r0, #1
 8007734:	d100      	bne.n	8007738 <_printf_float+0x268>
 8007736:	e729      	b.n	800758c <_printf_float+0xbc>
 8007738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800773a:	3b01      	subs	r3, #1
 800773c:	42ab      	cmp	r3, r5
 800773e:	dc0a      	bgt.n	8007756 <_printf_float+0x286>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	079b      	lsls	r3, r3, #30
 8007744:	d500      	bpl.n	8007748 <_printf_float+0x278>
 8007746:	e116      	b.n	8007976 <_printf_float+0x4a6>
 8007748:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800774a:	68e0      	ldr	r0, [r4, #12]
 800774c:	4298      	cmp	r0, r3
 800774e:	db00      	blt.n	8007752 <_printf_float+0x282>
 8007750:	e71e      	b.n	8007590 <_printf_float+0xc0>
 8007752:	0018      	movs	r0, r3
 8007754:	e71c      	b.n	8007590 <_printf_float+0xc0>
 8007756:	0022      	movs	r2, r4
 8007758:	2301      	movs	r3, #1
 800775a:	0038      	movs	r0, r7
 800775c:	9908      	ldr	r1, [sp, #32]
 800775e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007760:	321a      	adds	r2, #26
 8007762:	47b0      	blx	r6
 8007764:	3001      	adds	r0, #1
 8007766:	d100      	bne.n	800776a <_printf_float+0x29a>
 8007768:	e710      	b.n	800758c <_printf_float+0xbc>
 800776a:	3501      	adds	r5, #1
 800776c:	e7e4      	b.n	8007738 <_printf_float+0x268>
 800776e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007770:	2b00      	cmp	r3, #0
 8007772:	dc3b      	bgt.n	80077ec <_printf_float+0x31c>
 8007774:	2301      	movs	r3, #1
 8007776:	0038      	movs	r0, r7
 8007778:	4a1b      	ldr	r2, [pc, #108]	; (80077e8 <_printf_float+0x318>)
 800777a:	9908      	ldr	r1, [sp, #32]
 800777c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800777e:	47b0      	blx	r6
 8007780:	3001      	adds	r0, #1
 8007782:	d100      	bne.n	8007786 <_printf_float+0x2b6>
 8007784:	e702      	b.n	800758c <_printf_float+0xbc>
 8007786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007788:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800778a:	4313      	orrs	r3, r2
 800778c:	d102      	bne.n	8007794 <_printf_float+0x2c4>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	07db      	lsls	r3, r3, #31
 8007792:	d5d5      	bpl.n	8007740 <_printf_float+0x270>
 8007794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007796:	0038      	movs	r0, r7
 8007798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800779a:	9908      	ldr	r1, [sp, #32]
 800779c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800779e:	47b0      	blx	r6
 80077a0:	2300      	movs	r3, #0
 80077a2:	3001      	adds	r0, #1
 80077a4:	d100      	bne.n	80077a8 <_printf_float+0x2d8>
 80077a6:	e6f1      	b.n	800758c <_printf_float+0xbc>
 80077a8:	930a      	str	r3, [sp, #40]	; 0x28
 80077aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ae:	425b      	negs	r3, r3
 80077b0:	4293      	cmp	r3, r2
 80077b2:	dc01      	bgt.n	80077b8 <_printf_float+0x2e8>
 80077b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077b6:	e791      	b.n	80076dc <_printf_float+0x20c>
 80077b8:	0022      	movs	r2, r4
 80077ba:	2301      	movs	r3, #1
 80077bc:	0038      	movs	r0, r7
 80077be:	9908      	ldr	r1, [sp, #32]
 80077c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077c2:	321a      	adds	r2, #26
 80077c4:	47b0      	blx	r6
 80077c6:	3001      	adds	r0, #1
 80077c8:	d100      	bne.n	80077cc <_printf_float+0x2fc>
 80077ca:	e6df      	b.n	800758c <_printf_float+0xbc>
 80077cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ce:	3301      	adds	r3, #1
 80077d0:	e7ea      	b.n	80077a8 <_printf_float+0x2d8>
 80077d2:	46c0      	nop			; (mov r8, r8)
 80077d4:	7fefffff 	.word	0x7fefffff
 80077d8:	0800ba81 	.word	0x0800ba81
 80077dc:	0800ba85 	.word	0x0800ba85
 80077e0:	0800ba89 	.word	0x0800ba89
 80077e4:	0800ba8d 	.word	0x0800ba8d
 80077e8:	0800bd2b 	.word	0x0800bd2b
 80077ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077f0:	920a      	str	r2, [sp, #40]	; 0x28
 80077f2:	429a      	cmp	r2, r3
 80077f4:	dd00      	ble.n	80077f8 <_printf_float+0x328>
 80077f6:	930a      	str	r3, [sp, #40]	; 0x28
 80077f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	dc3d      	bgt.n	800787a <_printf_float+0x3aa>
 80077fe:	2300      	movs	r3, #0
 8007800:	930e      	str	r3, [sp, #56]	; 0x38
 8007802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007804:	43db      	mvns	r3, r3
 8007806:	17db      	asrs	r3, r3, #31
 8007808:	930f      	str	r3, [sp, #60]	; 0x3c
 800780a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800780c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800780e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007812:	4013      	ands	r3, r2
 8007814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800781a:	4293      	cmp	r3, r2
 800781c:	dc36      	bgt.n	800788c <_printf_float+0x3bc>
 800781e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007820:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007822:	429a      	cmp	r2, r3
 8007824:	db40      	blt.n	80078a8 <_printf_float+0x3d8>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	07db      	lsls	r3, r3, #31
 800782a:	d43d      	bmi.n	80078a8 <_printf_float+0x3d8>
 800782c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800782e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007832:	1af3      	subs	r3, r6, r3
 8007834:	1ab6      	subs	r6, r6, r2
 8007836:	429e      	cmp	r6, r3
 8007838:	dd00      	ble.n	800783c <_printf_float+0x36c>
 800783a:	001e      	movs	r6, r3
 800783c:	2e00      	cmp	r6, #0
 800783e:	dc3c      	bgt.n	80078ba <_printf_float+0x3ea>
 8007840:	2300      	movs	r3, #0
 8007842:	930a      	str	r3, [sp, #40]	; 0x28
 8007844:	43f3      	mvns	r3, r6
 8007846:	17db      	asrs	r3, r3, #31
 8007848:	930b      	str	r3, [sp, #44]	; 0x2c
 800784a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800784c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800784e:	1a9b      	subs	r3, r3, r2
 8007850:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007852:	4032      	ands	r2, r6
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007858:	4293      	cmp	r3, r2
 800785a:	dc00      	bgt.n	800785e <_printf_float+0x38e>
 800785c:	e770      	b.n	8007740 <_printf_float+0x270>
 800785e:	0022      	movs	r2, r4
 8007860:	2301      	movs	r3, #1
 8007862:	0038      	movs	r0, r7
 8007864:	9908      	ldr	r1, [sp, #32]
 8007866:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007868:	321a      	adds	r2, #26
 800786a:	47a8      	blx	r5
 800786c:	3001      	adds	r0, #1
 800786e:	d100      	bne.n	8007872 <_printf_float+0x3a2>
 8007870:	e68c      	b.n	800758c <_printf_float+0xbc>
 8007872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007874:	3301      	adds	r3, #1
 8007876:	930a      	str	r3, [sp, #40]	; 0x28
 8007878:	e7e7      	b.n	800784a <_printf_float+0x37a>
 800787a:	002a      	movs	r2, r5
 800787c:	0038      	movs	r0, r7
 800787e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007880:	9908      	ldr	r1, [sp, #32]
 8007882:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007884:	47b0      	blx	r6
 8007886:	3001      	adds	r0, #1
 8007888:	d1b9      	bne.n	80077fe <_printf_float+0x32e>
 800788a:	e67f      	b.n	800758c <_printf_float+0xbc>
 800788c:	0022      	movs	r2, r4
 800788e:	2301      	movs	r3, #1
 8007890:	0038      	movs	r0, r7
 8007892:	9908      	ldr	r1, [sp, #32]
 8007894:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007896:	321a      	adds	r2, #26
 8007898:	47b0      	blx	r6
 800789a:	3001      	adds	r0, #1
 800789c:	d100      	bne.n	80078a0 <_printf_float+0x3d0>
 800789e:	e675      	b.n	800758c <_printf_float+0xbc>
 80078a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a2:	3301      	adds	r3, #1
 80078a4:	930e      	str	r3, [sp, #56]	; 0x38
 80078a6:	e7b0      	b.n	800780a <_printf_float+0x33a>
 80078a8:	0038      	movs	r0, r7
 80078aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ae:	9908      	ldr	r1, [sp, #32]
 80078b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078b2:	47b0      	blx	r6
 80078b4:	3001      	adds	r0, #1
 80078b6:	d1b9      	bne.n	800782c <_printf_float+0x35c>
 80078b8:	e668      	b.n	800758c <_printf_float+0xbc>
 80078ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078bc:	0038      	movs	r0, r7
 80078be:	18ea      	adds	r2, r5, r3
 80078c0:	9908      	ldr	r1, [sp, #32]
 80078c2:	0033      	movs	r3, r6
 80078c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80078c6:	47a8      	blx	r5
 80078c8:	3001      	adds	r0, #1
 80078ca:	d1b9      	bne.n	8007840 <_printf_float+0x370>
 80078cc:	e65e      	b.n	800758c <_printf_float+0xbc>
 80078ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	dc02      	bgt.n	80078da <_printf_float+0x40a>
 80078d4:	2301      	movs	r3, #1
 80078d6:	421a      	tst	r2, r3
 80078d8:	d03a      	beq.n	8007950 <_printf_float+0x480>
 80078da:	2301      	movs	r3, #1
 80078dc:	002a      	movs	r2, r5
 80078de:	0038      	movs	r0, r7
 80078e0:	9908      	ldr	r1, [sp, #32]
 80078e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078e4:	47b0      	blx	r6
 80078e6:	3001      	adds	r0, #1
 80078e8:	d100      	bne.n	80078ec <_printf_float+0x41c>
 80078ea:	e64f      	b.n	800758c <_printf_float+0xbc>
 80078ec:	0038      	movs	r0, r7
 80078ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078f2:	9908      	ldr	r1, [sp, #32]
 80078f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078f6:	47b0      	blx	r6
 80078f8:	3001      	adds	r0, #1
 80078fa:	d100      	bne.n	80078fe <_printf_float+0x42e>
 80078fc:	e646      	b.n	800758c <_printf_float+0xbc>
 80078fe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007900:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007902:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007904:	2200      	movs	r2, #0
 8007906:	001e      	movs	r6, r3
 8007908:	2300      	movs	r3, #0
 800790a:	f7f8 fd9d 	bl	8000448 <__aeabi_dcmpeq>
 800790e:	2800      	cmp	r0, #0
 8007910:	d11c      	bne.n	800794c <_printf_float+0x47c>
 8007912:	0033      	movs	r3, r6
 8007914:	1c6a      	adds	r2, r5, #1
 8007916:	3b01      	subs	r3, #1
 8007918:	0038      	movs	r0, r7
 800791a:	9908      	ldr	r1, [sp, #32]
 800791c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800791e:	47a8      	blx	r5
 8007920:	3001      	adds	r0, #1
 8007922:	d10f      	bne.n	8007944 <_printf_float+0x474>
 8007924:	e632      	b.n	800758c <_printf_float+0xbc>
 8007926:	0022      	movs	r2, r4
 8007928:	2301      	movs	r3, #1
 800792a:	0038      	movs	r0, r7
 800792c:	9908      	ldr	r1, [sp, #32]
 800792e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007930:	321a      	adds	r2, #26
 8007932:	47b0      	blx	r6
 8007934:	3001      	adds	r0, #1
 8007936:	d100      	bne.n	800793a <_printf_float+0x46a>
 8007938:	e628      	b.n	800758c <_printf_float+0xbc>
 800793a:	3501      	adds	r5, #1
 800793c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800793e:	3b01      	subs	r3, #1
 8007940:	42ab      	cmp	r3, r5
 8007942:	dcf0      	bgt.n	8007926 <_printf_float+0x456>
 8007944:	0022      	movs	r2, r4
 8007946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007948:	3250      	adds	r2, #80	; 0x50
 800794a:	e6c8      	b.n	80076de <_printf_float+0x20e>
 800794c:	2500      	movs	r5, #0
 800794e:	e7f5      	b.n	800793c <_printf_float+0x46c>
 8007950:	002a      	movs	r2, r5
 8007952:	e7e1      	b.n	8007918 <_printf_float+0x448>
 8007954:	0022      	movs	r2, r4
 8007956:	2301      	movs	r3, #1
 8007958:	0038      	movs	r0, r7
 800795a:	9908      	ldr	r1, [sp, #32]
 800795c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800795e:	3219      	adds	r2, #25
 8007960:	47b0      	blx	r6
 8007962:	3001      	adds	r0, #1
 8007964:	d100      	bne.n	8007968 <_printf_float+0x498>
 8007966:	e611      	b.n	800758c <_printf_float+0xbc>
 8007968:	3501      	adds	r5, #1
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	42ab      	cmp	r3, r5
 8007972:	dcef      	bgt.n	8007954 <_printf_float+0x484>
 8007974:	e6e8      	b.n	8007748 <_printf_float+0x278>
 8007976:	2500      	movs	r5, #0
 8007978:	e7f7      	b.n	800796a <_printf_float+0x49a>
 800797a:	46c0      	nop			; (mov r8, r8)

0800797c <_printf_common>:
 800797c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800797e:	0016      	movs	r6, r2
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	688a      	ldr	r2, [r1, #8]
 8007984:	690b      	ldr	r3, [r1, #16]
 8007986:	000c      	movs	r4, r1
 8007988:	9000      	str	r0, [sp, #0]
 800798a:	4293      	cmp	r3, r2
 800798c:	da00      	bge.n	8007990 <_printf_common+0x14>
 800798e:	0013      	movs	r3, r2
 8007990:	0022      	movs	r2, r4
 8007992:	6033      	str	r3, [r6, #0]
 8007994:	3243      	adds	r2, #67	; 0x43
 8007996:	7812      	ldrb	r2, [r2, #0]
 8007998:	2a00      	cmp	r2, #0
 800799a:	d001      	beq.n	80079a0 <_printf_common+0x24>
 800799c:	3301      	adds	r3, #1
 800799e:	6033      	str	r3, [r6, #0]
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	069b      	lsls	r3, r3, #26
 80079a4:	d502      	bpl.n	80079ac <_printf_common+0x30>
 80079a6:	6833      	ldr	r3, [r6, #0]
 80079a8:	3302      	adds	r3, #2
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	2306      	movs	r3, #6
 80079b0:	0015      	movs	r5, r2
 80079b2:	401d      	ands	r5, r3
 80079b4:	421a      	tst	r2, r3
 80079b6:	d027      	beq.n	8007a08 <_printf_common+0x8c>
 80079b8:	0023      	movs	r3, r4
 80079ba:	3343      	adds	r3, #67	; 0x43
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	1e5a      	subs	r2, r3, #1
 80079c0:	4193      	sbcs	r3, r2
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	0692      	lsls	r2, r2, #26
 80079c6:	d430      	bmi.n	8007a2a <_printf_common+0xae>
 80079c8:	0022      	movs	r2, r4
 80079ca:	9901      	ldr	r1, [sp, #4]
 80079cc:	9800      	ldr	r0, [sp, #0]
 80079ce:	9d08      	ldr	r5, [sp, #32]
 80079d0:	3243      	adds	r2, #67	; 0x43
 80079d2:	47a8      	blx	r5
 80079d4:	3001      	adds	r0, #1
 80079d6:	d025      	beq.n	8007a24 <_printf_common+0xa8>
 80079d8:	2206      	movs	r2, #6
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	2500      	movs	r5, #0
 80079de:	4013      	ands	r3, r2
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d105      	bne.n	80079f0 <_printf_common+0x74>
 80079e4:	6833      	ldr	r3, [r6, #0]
 80079e6:	68e5      	ldr	r5, [r4, #12]
 80079e8:	1aed      	subs	r5, r5, r3
 80079ea:	43eb      	mvns	r3, r5
 80079ec:	17db      	asrs	r3, r3, #31
 80079ee:	401d      	ands	r5, r3
 80079f0:	68a3      	ldr	r3, [r4, #8]
 80079f2:	6922      	ldr	r2, [r4, #16]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	dd01      	ble.n	80079fc <_printf_common+0x80>
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	18ed      	adds	r5, r5, r3
 80079fc:	2600      	movs	r6, #0
 80079fe:	42b5      	cmp	r5, r6
 8007a00:	d120      	bne.n	8007a44 <_printf_common+0xc8>
 8007a02:	2000      	movs	r0, #0
 8007a04:	e010      	b.n	8007a28 <_printf_common+0xac>
 8007a06:	3501      	adds	r5, #1
 8007a08:	68e3      	ldr	r3, [r4, #12]
 8007a0a:	6832      	ldr	r2, [r6, #0]
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	42ab      	cmp	r3, r5
 8007a10:	ddd2      	ble.n	80079b8 <_printf_common+0x3c>
 8007a12:	0022      	movs	r2, r4
 8007a14:	2301      	movs	r3, #1
 8007a16:	9901      	ldr	r1, [sp, #4]
 8007a18:	9800      	ldr	r0, [sp, #0]
 8007a1a:	9f08      	ldr	r7, [sp, #32]
 8007a1c:	3219      	adds	r2, #25
 8007a1e:	47b8      	blx	r7
 8007a20:	3001      	adds	r0, #1
 8007a22:	d1f0      	bne.n	8007a06 <_printf_common+0x8a>
 8007a24:	2001      	movs	r0, #1
 8007a26:	4240      	negs	r0, r0
 8007a28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a2a:	2030      	movs	r0, #48	; 0x30
 8007a2c:	18e1      	adds	r1, r4, r3
 8007a2e:	3143      	adds	r1, #67	; 0x43
 8007a30:	7008      	strb	r0, [r1, #0]
 8007a32:	0021      	movs	r1, r4
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	3145      	adds	r1, #69	; 0x45
 8007a38:	7809      	ldrb	r1, [r1, #0]
 8007a3a:	18a2      	adds	r2, r4, r2
 8007a3c:	3243      	adds	r2, #67	; 0x43
 8007a3e:	3302      	adds	r3, #2
 8007a40:	7011      	strb	r1, [r2, #0]
 8007a42:	e7c1      	b.n	80079c8 <_printf_common+0x4c>
 8007a44:	0022      	movs	r2, r4
 8007a46:	2301      	movs	r3, #1
 8007a48:	9901      	ldr	r1, [sp, #4]
 8007a4a:	9800      	ldr	r0, [sp, #0]
 8007a4c:	9f08      	ldr	r7, [sp, #32]
 8007a4e:	321a      	adds	r2, #26
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	d0e6      	beq.n	8007a24 <_printf_common+0xa8>
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7d1      	b.n	80079fe <_printf_common+0x82>
	...

08007a5c <_printf_i>:
 8007a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a5e:	b08b      	sub	sp, #44	; 0x2c
 8007a60:	9206      	str	r2, [sp, #24]
 8007a62:	000a      	movs	r2, r1
 8007a64:	3243      	adds	r2, #67	; 0x43
 8007a66:	9307      	str	r3, [sp, #28]
 8007a68:	9005      	str	r0, [sp, #20]
 8007a6a:	9204      	str	r2, [sp, #16]
 8007a6c:	7e0a      	ldrb	r2, [r1, #24]
 8007a6e:	000c      	movs	r4, r1
 8007a70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a72:	2a78      	cmp	r2, #120	; 0x78
 8007a74:	d809      	bhi.n	8007a8a <_printf_i+0x2e>
 8007a76:	2a62      	cmp	r2, #98	; 0x62
 8007a78:	d80b      	bhi.n	8007a92 <_printf_i+0x36>
 8007a7a:	2a00      	cmp	r2, #0
 8007a7c:	d100      	bne.n	8007a80 <_printf_i+0x24>
 8007a7e:	e0be      	b.n	8007bfe <_printf_i+0x1a2>
 8007a80:	497c      	ldr	r1, [pc, #496]	; (8007c74 <_printf_i+0x218>)
 8007a82:	9103      	str	r1, [sp, #12]
 8007a84:	2a58      	cmp	r2, #88	; 0x58
 8007a86:	d100      	bne.n	8007a8a <_printf_i+0x2e>
 8007a88:	e093      	b.n	8007bb2 <_printf_i+0x156>
 8007a8a:	0026      	movs	r6, r4
 8007a8c:	3642      	adds	r6, #66	; 0x42
 8007a8e:	7032      	strb	r2, [r6, #0]
 8007a90:	e022      	b.n	8007ad8 <_printf_i+0x7c>
 8007a92:	0010      	movs	r0, r2
 8007a94:	3863      	subs	r0, #99	; 0x63
 8007a96:	2815      	cmp	r0, #21
 8007a98:	d8f7      	bhi.n	8007a8a <_printf_i+0x2e>
 8007a9a:	f7f8 fb45 	bl	8000128 <__gnu_thumb1_case_shi>
 8007a9e:	0016      	.short	0x0016
 8007aa0:	fff6001f 	.word	0xfff6001f
 8007aa4:	fff6fff6 	.word	0xfff6fff6
 8007aa8:	001ffff6 	.word	0x001ffff6
 8007aac:	fff6fff6 	.word	0xfff6fff6
 8007ab0:	fff6fff6 	.word	0xfff6fff6
 8007ab4:	003600a3 	.word	0x003600a3
 8007ab8:	fff60083 	.word	0xfff60083
 8007abc:	00b4fff6 	.word	0x00b4fff6
 8007ac0:	0036fff6 	.word	0x0036fff6
 8007ac4:	fff6fff6 	.word	0xfff6fff6
 8007ac8:	0087      	.short	0x0087
 8007aca:	0026      	movs	r6, r4
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	3642      	adds	r6, #66	; 0x42
 8007ad0:	1d11      	adds	r1, r2, #4
 8007ad2:	6019      	str	r1, [r3, #0]
 8007ad4:	6813      	ldr	r3, [r2, #0]
 8007ad6:	7033      	strb	r3, [r6, #0]
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e0a2      	b.n	8007c22 <_printf_i+0x1c6>
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	6809      	ldr	r1, [r1, #0]
 8007ae0:	1d02      	adds	r2, r0, #4
 8007ae2:	060d      	lsls	r5, r1, #24
 8007ae4:	d50b      	bpl.n	8007afe <_printf_i+0xa2>
 8007ae6:	6805      	ldr	r5, [r0, #0]
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	2d00      	cmp	r5, #0
 8007aec:	da03      	bge.n	8007af6 <_printf_i+0x9a>
 8007aee:	232d      	movs	r3, #45	; 0x2d
 8007af0:	9a04      	ldr	r2, [sp, #16]
 8007af2:	426d      	negs	r5, r5
 8007af4:	7013      	strb	r3, [r2, #0]
 8007af6:	4b5f      	ldr	r3, [pc, #380]	; (8007c74 <_printf_i+0x218>)
 8007af8:	270a      	movs	r7, #10
 8007afa:	9303      	str	r3, [sp, #12]
 8007afc:	e01b      	b.n	8007b36 <_printf_i+0xda>
 8007afe:	6805      	ldr	r5, [r0, #0]
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	0649      	lsls	r1, r1, #25
 8007b04:	d5f1      	bpl.n	8007aea <_printf_i+0x8e>
 8007b06:	b22d      	sxth	r5, r5
 8007b08:	e7ef      	b.n	8007aea <_printf_i+0x8e>
 8007b0a:	680d      	ldr	r5, [r1, #0]
 8007b0c:	6819      	ldr	r1, [r3, #0]
 8007b0e:	1d08      	adds	r0, r1, #4
 8007b10:	6018      	str	r0, [r3, #0]
 8007b12:	062e      	lsls	r6, r5, #24
 8007b14:	d501      	bpl.n	8007b1a <_printf_i+0xbe>
 8007b16:	680d      	ldr	r5, [r1, #0]
 8007b18:	e003      	b.n	8007b22 <_printf_i+0xc6>
 8007b1a:	066d      	lsls	r5, r5, #25
 8007b1c:	d5fb      	bpl.n	8007b16 <_printf_i+0xba>
 8007b1e:	680d      	ldr	r5, [r1, #0]
 8007b20:	b2ad      	uxth	r5, r5
 8007b22:	4b54      	ldr	r3, [pc, #336]	; (8007c74 <_printf_i+0x218>)
 8007b24:	2708      	movs	r7, #8
 8007b26:	9303      	str	r3, [sp, #12]
 8007b28:	2a6f      	cmp	r2, #111	; 0x6f
 8007b2a:	d000      	beq.n	8007b2e <_printf_i+0xd2>
 8007b2c:	3702      	adds	r7, #2
 8007b2e:	0023      	movs	r3, r4
 8007b30:	2200      	movs	r2, #0
 8007b32:	3343      	adds	r3, #67	; 0x43
 8007b34:	701a      	strb	r2, [r3, #0]
 8007b36:	6863      	ldr	r3, [r4, #4]
 8007b38:	60a3      	str	r3, [r4, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	db03      	blt.n	8007b46 <_printf_i+0xea>
 8007b3e:	2104      	movs	r1, #4
 8007b40:	6822      	ldr	r2, [r4, #0]
 8007b42:	438a      	bics	r2, r1
 8007b44:	6022      	str	r2, [r4, #0]
 8007b46:	2d00      	cmp	r5, #0
 8007b48:	d102      	bne.n	8007b50 <_printf_i+0xf4>
 8007b4a:	9e04      	ldr	r6, [sp, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00c      	beq.n	8007b6a <_printf_i+0x10e>
 8007b50:	9e04      	ldr	r6, [sp, #16]
 8007b52:	0028      	movs	r0, r5
 8007b54:	0039      	movs	r1, r7
 8007b56:	f7f8 fb77 	bl	8000248 <__aeabi_uidivmod>
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	3e01      	subs	r6, #1
 8007b5e:	5c5b      	ldrb	r3, [r3, r1]
 8007b60:	7033      	strb	r3, [r6, #0]
 8007b62:	002b      	movs	r3, r5
 8007b64:	0005      	movs	r5, r0
 8007b66:	429f      	cmp	r7, r3
 8007b68:	d9f3      	bls.n	8007b52 <_printf_i+0xf6>
 8007b6a:	2f08      	cmp	r7, #8
 8007b6c:	d109      	bne.n	8007b82 <_printf_i+0x126>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	07db      	lsls	r3, r3, #31
 8007b72:	d506      	bpl.n	8007b82 <_printf_i+0x126>
 8007b74:	6862      	ldr	r2, [r4, #4]
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	dc02      	bgt.n	8007b82 <_printf_i+0x126>
 8007b7c:	2330      	movs	r3, #48	; 0x30
 8007b7e:	3e01      	subs	r6, #1
 8007b80:	7033      	strb	r3, [r6, #0]
 8007b82:	9b04      	ldr	r3, [sp, #16]
 8007b84:	1b9b      	subs	r3, r3, r6
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	9b07      	ldr	r3, [sp, #28]
 8007b8a:	0021      	movs	r1, r4
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	9805      	ldr	r0, [sp, #20]
 8007b90:	9b06      	ldr	r3, [sp, #24]
 8007b92:	aa09      	add	r2, sp, #36	; 0x24
 8007b94:	f7ff fef2 	bl	800797c <_printf_common>
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d147      	bne.n	8007c2c <_printf_i+0x1d0>
 8007b9c:	2001      	movs	r0, #1
 8007b9e:	4240      	negs	r0, r0
 8007ba0:	b00b      	add	sp, #44	; 0x2c
 8007ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	6809      	ldr	r1, [r1, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	6022      	str	r2, [r4, #0]
 8007bac:	2278      	movs	r2, #120	; 0x78
 8007bae:	4932      	ldr	r1, [pc, #200]	; (8007c78 <_printf_i+0x21c>)
 8007bb0:	9103      	str	r1, [sp, #12]
 8007bb2:	0021      	movs	r1, r4
 8007bb4:	3145      	adds	r1, #69	; 0x45
 8007bb6:	700a      	strb	r2, [r1, #0]
 8007bb8:	6819      	ldr	r1, [r3, #0]
 8007bba:	6822      	ldr	r2, [r4, #0]
 8007bbc:	c920      	ldmia	r1!, {r5}
 8007bbe:	0610      	lsls	r0, r2, #24
 8007bc0:	d402      	bmi.n	8007bc8 <_printf_i+0x16c>
 8007bc2:	0650      	lsls	r0, r2, #25
 8007bc4:	d500      	bpl.n	8007bc8 <_printf_i+0x16c>
 8007bc6:	b2ad      	uxth	r5, r5
 8007bc8:	6019      	str	r1, [r3, #0]
 8007bca:	07d3      	lsls	r3, r2, #31
 8007bcc:	d502      	bpl.n	8007bd4 <_printf_i+0x178>
 8007bce:	2320      	movs	r3, #32
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	2710      	movs	r7, #16
 8007bd6:	2d00      	cmp	r5, #0
 8007bd8:	d1a9      	bne.n	8007b2e <_printf_i+0xd2>
 8007bda:	2220      	movs	r2, #32
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	4393      	bics	r3, r2
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	e7a4      	b.n	8007b2e <_printf_i+0xd2>
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	680d      	ldr	r5, [r1, #0]
 8007be8:	1d10      	adds	r0, r2, #4
 8007bea:	6949      	ldr	r1, [r1, #20]
 8007bec:	6018      	str	r0, [r3, #0]
 8007bee:	6813      	ldr	r3, [r2, #0]
 8007bf0:	062e      	lsls	r6, r5, #24
 8007bf2:	d501      	bpl.n	8007bf8 <_printf_i+0x19c>
 8007bf4:	6019      	str	r1, [r3, #0]
 8007bf6:	e002      	b.n	8007bfe <_printf_i+0x1a2>
 8007bf8:	066d      	lsls	r5, r5, #25
 8007bfa:	d5fb      	bpl.n	8007bf4 <_printf_i+0x198>
 8007bfc:	8019      	strh	r1, [r3, #0]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9e04      	ldr	r6, [sp, #16]
 8007c02:	6123      	str	r3, [r4, #16]
 8007c04:	e7c0      	b.n	8007b88 <_printf_i+0x12c>
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	1d11      	adds	r1, r2, #4
 8007c0a:	6019      	str	r1, [r3, #0]
 8007c0c:	6816      	ldr	r6, [r2, #0]
 8007c0e:	2100      	movs	r1, #0
 8007c10:	0030      	movs	r0, r6
 8007c12:	6862      	ldr	r2, [r4, #4]
 8007c14:	f000 fc9d 	bl	8008552 <memchr>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d001      	beq.n	8007c20 <_printf_i+0x1c4>
 8007c1c:	1b80      	subs	r0, r0, r6
 8007c1e:	6060      	str	r0, [r4, #4]
 8007c20:	6863      	ldr	r3, [r4, #4]
 8007c22:	6123      	str	r3, [r4, #16]
 8007c24:	2300      	movs	r3, #0
 8007c26:	9a04      	ldr	r2, [sp, #16]
 8007c28:	7013      	strb	r3, [r2, #0]
 8007c2a:	e7ad      	b.n	8007b88 <_printf_i+0x12c>
 8007c2c:	0032      	movs	r2, r6
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	9906      	ldr	r1, [sp, #24]
 8007c32:	9805      	ldr	r0, [sp, #20]
 8007c34:	9d07      	ldr	r5, [sp, #28]
 8007c36:	47a8      	blx	r5
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d0af      	beq.n	8007b9c <_printf_i+0x140>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	079b      	lsls	r3, r3, #30
 8007c40:	d415      	bmi.n	8007c6e <_printf_i+0x212>
 8007c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c44:	68e0      	ldr	r0, [r4, #12]
 8007c46:	4298      	cmp	r0, r3
 8007c48:	daaa      	bge.n	8007ba0 <_printf_i+0x144>
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	e7a8      	b.n	8007ba0 <_printf_i+0x144>
 8007c4e:	0022      	movs	r2, r4
 8007c50:	2301      	movs	r3, #1
 8007c52:	9906      	ldr	r1, [sp, #24]
 8007c54:	9805      	ldr	r0, [sp, #20]
 8007c56:	9e07      	ldr	r6, [sp, #28]
 8007c58:	3219      	adds	r2, #25
 8007c5a:	47b0      	blx	r6
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d09d      	beq.n	8007b9c <_printf_i+0x140>
 8007c60:	3501      	adds	r5, #1
 8007c62:	68e3      	ldr	r3, [r4, #12]
 8007c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	dcf0      	bgt.n	8007c4e <_printf_i+0x1f2>
 8007c6c:	e7e9      	b.n	8007c42 <_printf_i+0x1e6>
 8007c6e:	2500      	movs	r5, #0
 8007c70:	e7f7      	b.n	8007c62 <_printf_i+0x206>
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	0800ba91 	.word	0x0800ba91
 8007c78:	0800baa2 	.word	0x0800baa2

08007c7c <_scanf_float>:
 8007c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c7e:	b08b      	sub	sp, #44	; 0x2c
 8007c80:	0016      	movs	r6, r2
 8007c82:	9002      	str	r0, [sp, #8]
 8007c84:	22ae      	movs	r2, #174	; 0xae
 8007c86:	2000      	movs	r0, #0
 8007c88:	9307      	str	r3, [sp, #28]
 8007c8a:	688b      	ldr	r3, [r1, #8]
 8007c8c:	000f      	movs	r7, r1
 8007c8e:	1e59      	subs	r1, r3, #1
 8007c90:	0052      	lsls	r2, r2, #1
 8007c92:	9006      	str	r0, [sp, #24]
 8007c94:	4291      	cmp	r1, r2
 8007c96:	d905      	bls.n	8007ca4 <_scanf_float+0x28>
 8007c98:	3b5e      	subs	r3, #94	; 0x5e
 8007c9a:	3bff      	subs	r3, #255	; 0xff
 8007c9c:	9306      	str	r3, [sp, #24]
 8007c9e:	235e      	movs	r3, #94	; 0x5e
 8007ca0:	33ff      	adds	r3, #255	; 0xff
 8007ca2:	60bb      	str	r3, [r7, #8]
 8007ca4:	23f0      	movs	r3, #240	; 0xf0
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	4313      	orrs	r3, r2
 8007cac:	603b      	str	r3, [r7, #0]
 8007cae:	003b      	movs	r3, r7
 8007cb0:	2400      	movs	r4, #0
 8007cb2:	331c      	adds	r3, #28
 8007cb4:	001d      	movs	r5, r3
 8007cb6:	9304      	str	r3, [sp, #16]
 8007cb8:	9403      	str	r4, [sp, #12]
 8007cba:	9409      	str	r4, [sp, #36]	; 0x24
 8007cbc:	9408      	str	r4, [sp, #32]
 8007cbe:	9401      	str	r4, [sp, #4]
 8007cc0:	9405      	str	r4, [sp, #20]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	2a00      	cmp	r2, #0
 8007cc6:	d00a      	beq.n	8007cde <_scanf_float+0x62>
 8007cc8:	6833      	ldr	r3, [r6, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b4e      	cmp	r3, #78	; 0x4e
 8007cce:	d844      	bhi.n	8007d5a <_scanf_float+0xde>
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d82c      	bhi.n	8007d30 <_scanf_float+0xb4>
 8007cd6:	382b      	subs	r0, #43	; 0x2b
 8007cd8:	b2c1      	uxtb	r1, r0
 8007cda:	290e      	cmp	r1, #14
 8007cdc:	d92a      	bls.n	8007d34 <_scanf_float+0xb8>
 8007cde:	9b01      	ldr	r3, [sp, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <_scanf_float+0x70>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	4aa3      	ldr	r2, [pc, #652]	; (8007f74 <_scanf_float+0x2f8>)
 8007ce8:	4013      	ands	r3, r2
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d900      	bls.n	8007cf6 <_scanf_float+0x7a>
 8007cf4:	e0f9      	b.n	8007eea <_scanf_float+0x26e>
 8007cf6:	24be      	movs	r4, #190	; 0xbe
 8007cf8:	0064      	lsls	r4, r4, #1
 8007cfa:	9b04      	ldr	r3, [sp, #16]
 8007cfc:	429d      	cmp	r5, r3
 8007cfe:	d900      	bls.n	8007d02 <_scanf_float+0x86>
 8007d00:	e0e9      	b.n	8007ed6 <_scanf_float+0x25a>
 8007d02:	2301      	movs	r3, #1
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	e183      	b.n	8008010 <_scanf_float+0x394>
 8007d08:	0018      	movs	r0, r3
 8007d0a:	3861      	subs	r0, #97	; 0x61
 8007d0c:	280d      	cmp	r0, #13
 8007d0e:	d8e6      	bhi.n	8007cde <_scanf_float+0x62>
 8007d10:	f7f8 fa0a 	bl	8000128 <__gnu_thumb1_case_shi>
 8007d14:	ffe50083 	.word	0xffe50083
 8007d18:	ffe5ffe5 	.word	0xffe5ffe5
 8007d1c:	00a200b6 	.word	0x00a200b6
 8007d20:	ffe5ffe5 	.word	0xffe5ffe5
 8007d24:	ffe50089 	.word	0xffe50089
 8007d28:	ffe5ffe5 	.word	0xffe5ffe5
 8007d2c:	0065ffe5 	.word	0x0065ffe5
 8007d30:	3841      	subs	r0, #65	; 0x41
 8007d32:	e7eb      	b.n	8007d0c <_scanf_float+0x90>
 8007d34:	280e      	cmp	r0, #14
 8007d36:	d8d2      	bhi.n	8007cde <_scanf_float+0x62>
 8007d38:	f7f8 f9f6 	bl	8000128 <__gnu_thumb1_case_shi>
 8007d3c:	ffd1004b 	.word	0xffd1004b
 8007d40:	0098004b 	.word	0x0098004b
 8007d44:	0020ffd1 	.word	0x0020ffd1
 8007d48:	00400040 	.word	0x00400040
 8007d4c:	00400040 	.word	0x00400040
 8007d50:	00400040 	.word	0x00400040
 8007d54:	00400040 	.word	0x00400040
 8007d58:	0040      	.short	0x0040
 8007d5a:	2b6e      	cmp	r3, #110	; 0x6e
 8007d5c:	d809      	bhi.n	8007d72 <_scanf_float+0xf6>
 8007d5e:	2b60      	cmp	r3, #96	; 0x60
 8007d60:	d8d2      	bhi.n	8007d08 <_scanf_float+0x8c>
 8007d62:	2b54      	cmp	r3, #84	; 0x54
 8007d64:	d07d      	beq.n	8007e62 <_scanf_float+0x1e6>
 8007d66:	2b59      	cmp	r3, #89	; 0x59
 8007d68:	d1b9      	bne.n	8007cde <_scanf_float+0x62>
 8007d6a:	2c07      	cmp	r4, #7
 8007d6c:	d1b7      	bne.n	8007cde <_scanf_float+0x62>
 8007d6e:	2408      	movs	r4, #8
 8007d70:	e02c      	b.n	8007dcc <_scanf_float+0x150>
 8007d72:	2b74      	cmp	r3, #116	; 0x74
 8007d74:	d075      	beq.n	8007e62 <_scanf_float+0x1e6>
 8007d76:	2b79      	cmp	r3, #121	; 0x79
 8007d78:	d0f7      	beq.n	8007d6a <_scanf_float+0xee>
 8007d7a:	e7b0      	b.n	8007cde <_scanf_float+0x62>
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	05c8      	lsls	r0, r1, #23
 8007d80:	d51c      	bpl.n	8007dbc <_scanf_float+0x140>
 8007d82:	2380      	movs	r3, #128	; 0x80
 8007d84:	4399      	bics	r1, r3
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	6039      	str	r1, [r7, #0]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	9b06      	ldr	r3, [sp, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <_scanf_float+0x120>
 8007d94:	3b01      	subs	r3, #1
 8007d96:	3201      	adds	r2, #1
 8007d98:	9306      	str	r3, [sp, #24]
 8007d9a:	60ba      	str	r2, [r7, #8]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	60bb      	str	r3, [r7, #8]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3301      	adds	r3, #1
 8007da6:	613b      	str	r3, [r7, #16]
 8007da8:	6873      	ldr	r3, [r6, #4]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	6073      	str	r3, [r6, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dc00      	bgt.n	8007db4 <_scanf_float+0x138>
 8007db2:	e086      	b.n	8007ec2 <_scanf_float+0x246>
 8007db4:	6833      	ldr	r3, [r6, #0]
 8007db6:	3301      	adds	r3, #1
 8007db8:	6033      	str	r3, [r6, #0]
 8007dba:	e782      	b.n	8007cc2 <_scanf_float+0x46>
 8007dbc:	9a03      	ldr	r2, [sp, #12]
 8007dbe:	1912      	adds	r2, r2, r4
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	d18c      	bne.n	8007cde <_scanf_float+0x62>
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	496c      	ldr	r1, [pc, #432]	; (8007f78 <_scanf_float+0x2fc>)
 8007dc8:	400a      	ands	r2, r1
 8007dca:	603a      	str	r2, [r7, #0]
 8007dcc:	702b      	strb	r3, [r5, #0]
 8007dce:	3501      	adds	r5, #1
 8007dd0:	e7e4      	b.n	8007d9c <_scanf_float+0x120>
 8007dd2:	2180      	movs	r1, #128	; 0x80
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	420a      	tst	r2, r1
 8007dd8:	d081      	beq.n	8007cde <_scanf_float+0x62>
 8007dda:	438a      	bics	r2, r1
 8007ddc:	e7f5      	b.n	8007dca <_scanf_float+0x14e>
 8007dde:	9a03      	ldr	r2, [sp, #12]
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d10f      	bne.n	8007e04 <_scanf_float+0x188>
 8007de4:	9a01      	ldr	r2, [sp, #4]
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d10f      	bne.n	8007e0a <_scanf_float+0x18e>
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	21e0      	movs	r1, #224	; 0xe0
 8007dee:	0010      	movs	r0, r2
 8007df0:	00c9      	lsls	r1, r1, #3
 8007df2:	4008      	ands	r0, r1
 8007df4:	4288      	cmp	r0, r1
 8007df6:	d108      	bne.n	8007e0a <_scanf_float+0x18e>
 8007df8:	4960      	ldr	r1, [pc, #384]	; (8007f7c <_scanf_float+0x300>)
 8007dfa:	400a      	ands	r2, r1
 8007dfc:	603a      	str	r2, [r7, #0]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	9203      	str	r2, [sp, #12]
 8007e02:	e7e3      	b.n	8007dcc <_scanf_float+0x150>
 8007e04:	9a03      	ldr	r2, [sp, #12]
 8007e06:	2a02      	cmp	r2, #2
 8007e08:	d059      	beq.n	8007ebe <_scanf_float+0x242>
 8007e0a:	2c01      	cmp	r4, #1
 8007e0c:	d002      	beq.n	8007e14 <_scanf_float+0x198>
 8007e0e:	2c04      	cmp	r4, #4
 8007e10:	d000      	beq.n	8007e14 <_scanf_float+0x198>
 8007e12:	e764      	b.n	8007cde <_scanf_float+0x62>
 8007e14:	3401      	adds	r4, #1
 8007e16:	b2e4      	uxtb	r4, r4
 8007e18:	e7d8      	b.n	8007dcc <_scanf_float+0x150>
 8007e1a:	9a03      	ldr	r2, [sp, #12]
 8007e1c:	2a01      	cmp	r2, #1
 8007e1e:	d000      	beq.n	8007e22 <_scanf_float+0x1a6>
 8007e20:	e75d      	b.n	8007cde <_scanf_float+0x62>
 8007e22:	2202      	movs	r2, #2
 8007e24:	e7ec      	b.n	8007e00 <_scanf_float+0x184>
 8007e26:	2c00      	cmp	r4, #0
 8007e28:	d110      	bne.n	8007e4c <_scanf_float+0x1d0>
 8007e2a:	9a01      	ldr	r2, [sp, #4]
 8007e2c:	2a00      	cmp	r2, #0
 8007e2e:	d000      	beq.n	8007e32 <_scanf_float+0x1b6>
 8007e30:	e758      	b.n	8007ce4 <_scanf_float+0x68>
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	21e0      	movs	r1, #224	; 0xe0
 8007e36:	0010      	movs	r0, r2
 8007e38:	00c9      	lsls	r1, r1, #3
 8007e3a:	4008      	ands	r0, r1
 8007e3c:	4288      	cmp	r0, r1
 8007e3e:	d000      	beq.n	8007e42 <_scanf_float+0x1c6>
 8007e40:	e754      	b.n	8007cec <_scanf_float+0x70>
 8007e42:	494e      	ldr	r1, [pc, #312]	; (8007f7c <_scanf_float+0x300>)
 8007e44:	3401      	adds	r4, #1
 8007e46:	400a      	ands	r2, r1
 8007e48:	603a      	str	r2, [r7, #0]
 8007e4a:	e7bf      	b.n	8007dcc <_scanf_float+0x150>
 8007e4c:	21fd      	movs	r1, #253	; 0xfd
 8007e4e:	1ee2      	subs	r2, r4, #3
 8007e50:	420a      	tst	r2, r1
 8007e52:	d000      	beq.n	8007e56 <_scanf_float+0x1da>
 8007e54:	e743      	b.n	8007cde <_scanf_float+0x62>
 8007e56:	e7dd      	b.n	8007e14 <_scanf_float+0x198>
 8007e58:	2c02      	cmp	r4, #2
 8007e5a:	d000      	beq.n	8007e5e <_scanf_float+0x1e2>
 8007e5c:	e73f      	b.n	8007cde <_scanf_float+0x62>
 8007e5e:	2403      	movs	r4, #3
 8007e60:	e7b4      	b.n	8007dcc <_scanf_float+0x150>
 8007e62:	2c06      	cmp	r4, #6
 8007e64:	d000      	beq.n	8007e68 <_scanf_float+0x1ec>
 8007e66:	e73a      	b.n	8007cde <_scanf_float+0x62>
 8007e68:	2407      	movs	r4, #7
 8007e6a:	e7af      	b.n	8007dcc <_scanf_float+0x150>
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	0591      	lsls	r1, r2, #22
 8007e70:	d400      	bmi.n	8007e74 <_scanf_float+0x1f8>
 8007e72:	e734      	b.n	8007cde <_scanf_float+0x62>
 8007e74:	4942      	ldr	r1, [pc, #264]	; (8007f80 <_scanf_float+0x304>)
 8007e76:	400a      	ands	r2, r1
 8007e78:	603a      	str	r2, [r7, #0]
 8007e7a:	9a01      	ldr	r2, [sp, #4]
 8007e7c:	9205      	str	r2, [sp, #20]
 8007e7e:	e7a5      	b.n	8007dcc <_scanf_float+0x150>
 8007e80:	21a0      	movs	r1, #160	; 0xa0
 8007e82:	2080      	movs	r0, #128	; 0x80
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	00c9      	lsls	r1, r1, #3
 8007e88:	4011      	ands	r1, r2
 8007e8a:	00c0      	lsls	r0, r0, #3
 8007e8c:	4281      	cmp	r1, r0
 8007e8e:	d006      	beq.n	8007e9e <_scanf_float+0x222>
 8007e90:	4202      	tst	r2, r0
 8007e92:	d100      	bne.n	8007e96 <_scanf_float+0x21a>
 8007e94:	e723      	b.n	8007cde <_scanf_float+0x62>
 8007e96:	9901      	ldr	r1, [sp, #4]
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	d100      	bne.n	8007e9e <_scanf_float+0x222>
 8007e9c:	e726      	b.n	8007cec <_scanf_float+0x70>
 8007e9e:	0591      	lsls	r1, r2, #22
 8007ea0:	d404      	bmi.n	8007eac <_scanf_float+0x230>
 8007ea2:	9901      	ldr	r1, [sp, #4]
 8007ea4:	9805      	ldr	r0, [sp, #20]
 8007ea6:	9509      	str	r5, [sp, #36]	; 0x24
 8007ea8:	1a09      	subs	r1, r1, r0
 8007eaa:	9108      	str	r1, [sp, #32]
 8007eac:	4933      	ldr	r1, [pc, #204]	; (8007f7c <_scanf_float+0x300>)
 8007eae:	400a      	ands	r2, r1
 8007eb0:	21c0      	movs	r1, #192	; 0xc0
 8007eb2:	0049      	lsls	r1, r1, #1
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	603a      	str	r2, [r7, #0]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	9201      	str	r2, [sp, #4]
 8007ebc:	e786      	b.n	8007dcc <_scanf_float+0x150>
 8007ebe:	2203      	movs	r2, #3
 8007ec0:	e79e      	b.n	8007e00 <_scanf_float+0x184>
 8007ec2:	23c0      	movs	r3, #192	; 0xc0
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	0031      	movs	r1, r6
 8007ec8:	58fb      	ldr	r3, [r7, r3]
 8007eca:	9802      	ldr	r0, [sp, #8]
 8007ecc:	4798      	blx	r3
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d100      	bne.n	8007ed4 <_scanf_float+0x258>
 8007ed2:	e6f6      	b.n	8007cc2 <_scanf_float+0x46>
 8007ed4:	e703      	b.n	8007cde <_scanf_float+0x62>
 8007ed6:	3d01      	subs	r5, #1
 8007ed8:	593b      	ldr	r3, [r7, r4]
 8007eda:	0032      	movs	r2, r6
 8007edc:	7829      	ldrb	r1, [r5, #0]
 8007ede:	9802      	ldr	r0, [sp, #8]
 8007ee0:	4798      	blx	r3
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	613b      	str	r3, [r7, #16]
 8007ee8:	e707      	b.n	8007cfa <_scanf_float+0x7e>
 8007eea:	1e63      	subs	r3, r4, #1
 8007eec:	2b06      	cmp	r3, #6
 8007eee:	d80e      	bhi.n	8007f0e <_scanf_float+0x292>
 8007ef0:	9503      	str	r5, [sp, #12]
 8007ef2:	2c02      	cmp	r4, #2
 8007ef4:	d920      	bls.n	8007f38 <_scanf_float+0x2bc>
 8007ef6:	1b63      	subs	r3, r4, r5
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	9306      	str	r3, [sp, #24]
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	9a06      	ldr	r2, [sp, #24]
 8007f00:	189b      	adds	r3, r3, r2
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d827      	bhi.n	8007f58 <_scanf_float+0x2dc>
 8007f08:	3c03      	subs	r4, #3
 8007f0a:	b2e4      	uxtb	r4, r4
 8007f0c:	1b2d      	subs	r5, r5, r4
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	05da      	lsls	r2, r3, #23
 8007f12:	d552      	bpl.n	8007fba <_scanf_float+0x33e>
 8007f14:	055b      	lsls	r3, r3, #21
 8007f16:	d535      	bpl.n	8007f84 <_scanf_float+0x308>
 8007f18:	24be      	movs	r4, #190	; 0xbe
 8007f1a:	0064      	lsls	r4, r4, #1
 8007f1c:	9b04      	ldr	r3, [sp, #16]
 8007f1e:	429d      	cmp	r5, r3
 8007f20:	d800      	bhi.n	8007f24 <_scanf_float+0x2a8>
 8007f22:	e6ee      	b.n	8007d02 <_scanf_float+0x86>
 8007f24:	3d01      	subs	r5, #1
 8007f26:	593b      	ldr	r3, [r7, r4]
 8007f28:	0032      	movs	r2, r6
 8007f2a:	7829      	ldrb	r1, [r5, #0]
 8007f2c:	9802      	ldr	r0, [sp, #8]
 8007f2e:	4798      	blx	r3
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	613b      	str	r3, [r7, #16]
 8007f36:	e7f1      	b.n	8007f1c <_scanf_float+0x2a0>
 8007f38:	24be      	movs	r4, #190	; 0xbe
 8007f3a:	0064      	lsls	r4, r4, #1
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	429d      	cmp	r5, r3
 8007f40:	d800      	bhi.n	8007f44 <_scanf_float+0x2c8>
 8007f42:	e6de      	b.n	8007d02 <_scanf_float+0x86>
 8007f44:	3d01      	subs	r5, #1
 8007f46:	593b      	ldr	r3, [r7, r4]
 8007f48:	0032      	movs	r2, r6
 8007f4a:	7829      	ldrb	r1, [r5, #0]
 8007f4c:	9802      	ldr	r0, [sp, #8]
 8007f4e:	4798      	blx	r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	613b      	str	r3, [r7, #16]
 8007f56:	e7f1      	b.n	8007f3c <_scanf_float+0x2c0>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	0032      	movs	r2, r6
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	7819      	ldrb	r1, [r3, #0]
 8007f60:	9303      	str	r3, [sp, #12]
 8007f62:	23be      	movs	r3, #190	; 0xbe
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	58fb      	ldr	r3, [r7, r3]
 8007f68:	9802      	ldr	r0, [sp, #8]
 8007f6a:	4798      	blx	r3
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	e7c3      	b.n	8007efc <_scanf_float+0x280>
 8007f74:	fffffeff 	.word	0xfffffeff
 8007f78:	fffffe7f 	.word	0xfffffe7f
 8007f7c:	fffff87f 	.word	0xfffff87f
 8007f80:	fffffd7f 	.word	0xfffffd7f
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	1e6c      	subs	r4, r5, #1
 8007f88:	7821      	ldrb	r1, [r4, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	2965      	cmp	r1, #101	; 0x65
 8007f90:	d00c      	beq.n	8007fac <_scanf_float+0x330>
 8007f92:	2945      	cmp	r1, #69	; 0x45
 8007f94:	d00a      	beq.n	8007fac <_scanf_float+0x330>
 8007f96:	23be      	movs	r3, #190	; 0xbe
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	58fb      	ldr	r3, [r7, r3]
 8007f9c:	0032      	movs	r2, r6
 8007f9e:	9802      	ldr	r0, [sp, #8]
 8007fa0:	4798      	blx	r3
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1eac      	subs	r4, r5, #2
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	7821      	ldrb	r1, [r4, #0]
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	23be      	movs	r3, #190	; 0xbe
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	0032      	movs	r2, r6
 8007fb2:	58fb      	ldr	r3, [r7, r3]
 8007fb4:	9802      	ldr	r0, [sp, #8]
 8007fb6:	4798      	blx	r3
 8007fb8:	0025      	movs	r5, r4
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	0011      	movs	r1, r2
 8007fc0:	4019      	ands	r1, r3
 8007fc2:	9103      	str	r1, [sp, #12]
 8007fc4:	421a      	tst	r2, r3
 8007fc6:	d15b      	bne.n	8008080 <_scanf_float+0x404>
 8007fc8:	22c0      	movs	r2, #192	; 0xc0
 8007fca:	7029      	strb	r1, [r5, #0]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	00d2      	lsls	r2, r2, #3
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	2280      	movs	r2, #128	; 0x80
 8007fd4:	00d2      	lsls	r2, r2, #3
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d11d      	bne.n	8008016 <_scanf_float+0x39a>
 8007fda:	9b05      	ldr	r3, [sp, #20]
 8007fdc:	9a01      	ldr	r2, [sp, #4]
 8007fde:	9901      	ldr	r1, [sp, #4]
 8007fe0:	1a9a      	subs	r2, r3, r2
 8007fe2:	428b      	cmp	r3, r1
 8007fe4:	d124      	bne.n	8008030 <_scanf_float+0x3b4>
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	9904      	ldr	r1, [sp, #16]
 8007fea:	9802      	ldr	r0, [sp, #8]
 8007fec:	f7ff f91c 	bl	8007228 <_strtod_r>
 8007ff0:	9b07      	ldr	r3, [sp, #28]
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	0004      	movs	r4, r0
 8007ff6:	000d      	movs	r5, r1
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	0791      	lsls	r1, r2, #30
 8007ffc:	d525      	bpl.n	800804a <_scanf_float+0x3ce>
 8007ffe:	9907      	ldr	r1, [sp, #28]
 8008000:	1d1a      	adds	r2, r3, #4
 8008002:	600a      	str	r2, [r1, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	601c      	str	r4, [r3, #0]
 8008008:	605d      	str	r5, [r3, #4]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3301      	adds	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	9803      	ldr	r0, [sp, #12]
 8008012:	b00b      	add	sp, #44	; 0x2c
 8008014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008016:	9b08      	ldr	r3, [sp, #32]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0e4      	beq.n	8007fe6 <_scanf_float+0x36a>
 800801c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801e:	9a03      	ldr	r2, [sp, #12]
 8008020:	1c59      	adds	r1, r3, #1
 8008022:	9802      	ldr	r0, [sp, #8]
 8008024:	230a      	movs	r3, #10
 8008026:	f7ff f99b 	bl	8007360 <_strtol_r>
 800802a:	9b08      	ldr	r3, [sp, #32]
 800802c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800802e:	1ac2      	subs	r2, r0, r3
 8008030:	003b      	movs	r3, r7
 8008032:	3370      	adds	r3, #112	; 0x70
 8008034:	33ff      	adds	r3, #255	; 0xff
 8008036:	429d      	cmp	r5, r3
 8008038:	d302      	bcc.n	8008040 <_scanf_float+0x3c4>
 800803a:	003d      	movs	r5, r7
 800803c:	356f      	adds	r5, #111	; 0x6f
 800803e:	35ff      	adds	r5, #255	; 0xff
 8008040:	0028      	movs	r0, r5
 8008042:	4910      	ldr	r1, [pc, #64]	; (8008084 <_scanf_float+0x408>)
 8008044:	f000 f91a 	bl	800827c <siprintf>
 8008048:	e7cd      	b.n	8007fe6 <_scanf_float+0x36a>
 800804a:	1d19      	adds	r1, r3, #4
 800804c:	0752      	lsls	r2, r2, #29
 800804e:	d502      	bpl.n	8008056 <_scanf_float+0x3da>
 8008050:	9a07      	ldr	r2, [sp, #28]
 8008052:	6011      	str	r1, [r2, #0]
 8008054:	e7d6      	b.n	8008004 <_scanf_float+0x388>
 8008056:	9a07      	ldr	r2, [sp, #28]
 8008058:	0020      	movs	r0, r4
 800805a:	6011      	str	r1, [r2, #0]
 800805c:	681e      	ldr	r6, [r3, #0]
 800805e:	0022      	movs	r2, r4
 8008060:	002b      	movs	r3, r5
 8008062:	0029      	movs	r1, r5
 8008064:	f7fa f918 	bl	8002298 <__aeabi_dcmpun>
 8008068:	2800      	cmp	r0, #0
 800806a:	d004      	beq.n	8008076 <_scanf_float+0x3fa>
 800806c:	4806      	ldr	r0, [pc, #24]	; (8008088 <_scanf_float+0x40c>)
 800806e:	f000 fa8b 	bl	8008588 <nanf>
 8008072:	6030      	str	r0, [r6, #0]
 8008074:	e7c9      	b.n	800800a <_scanf_float+0x38e>
 8008076:	0020      	movs	r0, r4
 8008078:	0029      	movs	r1, r5
 800807a:	f7fa f9b7 	bl	80023ec <__aeabi_d2f>
 800807e:	e7f8      	b.n	8008072 <_scanf_float+0x3f6>
 8008080:	2300      	movs	r3, #0
 8008082:	e63f      	b.n	8007d04 <_scanf_float+0x88>
 8008084:	0800bab3 	.word	0x0800bab3
 8008088:	0800bd6b 	.word	0x0800bd6b

0800808c <std>:
 800808c:	2300      	movs	r3, #0
 800808e:	b510      	push	{r4, lr}
 8008090:	0004      	movs	r4, r0
 8008092:	6003      	str	r3, [r0, #0]
 8008094:	6043      	str	r3, [r0, #4]
 8008096:	6083      	str	r3, [r0, #8]
 8008098:	8181      	strh	r1, [r0, #12]
 800809a:	6643      	str	r3, [r0, #100]	; 0x64
 800809c:	81c2      	strh	r2, [r0, #14]
 800809e:	6103      	str	r3, [r0, #16]
 80080a0:	6143      	str	r3, [r0, #20]
 80080a2:	6183      	str	r3, [r0, #24]
 80080a4:	0019      	movs	r1, r3
 80080a6:	2208      	movs	r2, #8
 80080a8:	305c      	adds	r0, #92	; 0x5c
 80080aa:	f000 f97d 	bl	80083a8 <memset>
 80080ae:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <std+0x50>)
 80080b0:	6224      	str	r4, [r4, #32]
 80080b2:	6263      	str	r3, [r4, #36]	; 0x24
 80080b4:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <std+0x54>)
 80080b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <std+0x58>)
 80080ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <std+0x5c>)
 80080be:	6323      	str	r3, [r4, #48]	; 0x30
 80080c0:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <std+0x60>)
 80080c2:	429c      	cmp	r4, r3
 80080c4:	d005      	beq.n	80080d2 <std+0x46>
 80080c6:	4b0a      	ldr	r3, [pc, #40]	; (80080f0 <std+0x64>)
 80080c8:	429c      	cmp	r4, r3
 80080ca:	d002      	beq.n	80080d2 <std+0x46>
 80080cc:	4b09      	ldr	r3, [pc, #36]	; (80080f4 <std+0x68>)
 80080ce:	429c      	cmp	r4, r3
 80080d0:	d103      	bne.n	80080da <std+0x4e>
 80080d2:	0020      	movs	r0, r4
 80080d4:	3058      	adds	r0, #88	; 0x58
 80080d6:	f000 fa39 	bl	800854c <__retarget_lock_init_recursive>
 80080da:	bd10      	pop	{r4, pc}
 80080dc:	0800830d 	.word	0x0800830d
 80080e0:	08008339 	.word	0x08008339
 80080e4:	08008371 	.word	0x08008371
 80080e8:	0800839d 	.word	0x0800839d
 80080ec:	2000059c 	.word	0x2000059c
 80080f0:	20000604 	.word	0x20000604
 80080f4:	2000066c 	.word	0x2000066c

080080f8 <stdio_exit_handler>:
 80080f8:	b510      	push	{r4, lr}
 80080fa:	4a03      	ldr	r2, [pc, #12]	; (8008108 <stdio_exit_handler+0x10>)
 80080fc:	4903      	ldr	r1, [pc, #12]	; (800810c <stdio_exit_handler+0x14>)
 80080fe:	4804      	ldr	r0, [pc, #16]	; (8008110 <stdio_exit_handler+0x18>)
 8008100:	f000 f86c 	bl	80081dc <_fwalk_sglue>
 8008104:	bd10      	pop	{r4, pc}
 8008106:	46c0      	nop			; (mov r8, r8)
 8008108:	2000001c 	.word	0x2000001c
 800810c:	0800adf5 	.word	0x0800adf5
 8008110:	20000194 	.word	0x20000194

08008114 <cleanup_stdio>:
 8008114:	6841      	ldr	r1, [r0, #4]
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <cleanup_stdio+0x30>)
 8008118:	b510      	push	{r4, lr}
 800811a:	0004      	movs	r4, r0
 800811c:	4299      	cmp	r1, r3
 800811e:	d001      	beq.n	8008124 <cleanup_stdio+0x10>
 8008120:	f002 fe68 	bl	800adf4 <_fflush_r>
 8008124:	68a1      	ldr	r1, [r4, #8]
 8008126:	4b08      	ldr	r3, [pc, #32]	; (8008148 <cleanup_stdio+0x34>)
 8008128:	4299      	cmp	r1, r3
 800812a:	d002      	beq.n	8008132 <cleanup_stdio+0x1e>
 800812c:	0020      	movs	r0, r4
 800812e:	f002 fe61 	bl	800adf4 <_fflush_r>
 8008132:	68e1      	ldr	r1, [r4, #12]
 8008134:	4b05      	ldr	r3, [pc, #20]	; (800814c <cleanup_stdio+0x38>)
 8008136:	4299      	cmp	r1, r3
 8008138:	d002      	beq.n	8008140 <cleanup_stdio+0x2c>
 800813a:	0020      	movs	r0, r4
 800813c:	f002 fe5a 	bl	800adf4 <_fflush_r>
 8008140:	bd10      	pop	{r4, pc}
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	2000059c 	.word	0x2000059c
 8008148:	20000604 	.word	0x20000604
 800814c:	2000066c 	.word	0x2000066c

08008150 <global_stdio_init.part.0>:
 8008150:	b510      	push	{r4, lr}
 8008152:	4b09      	ldr	r3, [pc, #36]	; (8008178 <global_stdio_init.part.0+0x28>)
 8008154:	4a09      	ldr	r2, [pc, #36]	; (800817c <global_stdio_init.part.0+0x2c>)
 8008156:	2104      	movs	r1, #4
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	4809      	ldr	r0, [pc, #36]	; (8008180 <global_stdio_init.part.0+0x30>)
 800815c:	2200      	movs	r2, #0
 800815e:	f7ff ff95 	bl	800808c <std>
 8008162:	2201      	movs	r2, #1
 8008164:	2109      	movs	r1, #9
 8008166:	4807      	ldr	r0, [pc, #28]	; (8008184 <global_stdio_init.part.0+0x34>)
 8008168:	f7ff ff90 	bl	800808c <std>
 800816c:	2202      	movs	r2, #2
 800816e:	2112      	movs	r1, #18
 8008170:	4805      	ldr	r0, [pc, #20]	; (8008188 <global_stdio_init.part.0+0x38>)
 8008172:	f7ff ff8b 	bl	800808c <std>
 8008176:	bd10      	pop	{r4, pc}
 8008178:	200006d4 	.word	0x200006d4
 800817c:	080080f9 	.word	0x080080f9
 8008180:	2000059c 	.word	0x2000059c
 8008184:	20000604 	.word	0x20000604
 8008188:	2000066c 	.word	0x2000066c

0800818c <__sfp_lock_acquire>:
 800818c:	b510      	push	{r4, lr}
 800818e:	4802      	ldr	r0, [pc, #8]	; (8008198 <__sfp_lock_acquire+0xc>)
 8008190:	f000 f9dd 	bl	800854e <__retarget_lock_acquire_recursive>
 8008194:	bd10      	pop	{r4, pc}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	200006dd 	.word	0x200006dd

0800819c <__sfp_lock_release>:
 800819c:	b510      	push	{r4, lr}
 800819e:	4802      	ldr	r0, [pc, #8]	; (80081a8 <__sfp_lock_release+0xc>)
 80081a0:	f000 f9d6 	bl	8008550 <__retarget_lock_release_recursive>
 80081a4:	bd10      	pop	{r4, pc}
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	200006dd 	.word	0x200006dd

080081ac <__sinit>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	0004      	movs	r4, r0
 80081b0:	f7ff ffec 	bl	800818c <__sfp_lock_acquire>
 80081b4:	6a23      	ldr	r3, [r4, #32]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <__sinit+0x14>
 80081ba:	f7ff ffef 	bl	800819c <__sfp_lock_release>
 80081be:	bd10      	pop	{r4, pc}
 80081c0:	4b04      	ldr	r3, [pc, #16]	; (80081d4 <__sinit+0x28>)
 80081c2:	6223      	str	r3, [r4, #32]
 80081c4:	4b04      	ldr	r3, [pc, #16]	; (80081d8 <__sinit+0x2c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1f6      	bne.n	80081ba <__sinit+0xe>
 80081cc:	f7ff ffc0 	bl	8008150 <global_stdio_init.part.0>
 80081d0:	e7f3      	b.n	80081ba <__sinit+0xe>
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	08008115 	.word	0x08008115
 80081d8:	200006d4 	.word	0x200006d4

080081dc <_fwalk_sglue>:
 80081dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081de:	0014      	movs	r4, r2
 80081e0:	2600      	movs	r6, #0
 80081e2:	9000      	str	r0, [sp, #0]
 80081e4:	9101      	str	r1, [sp, #4]
 80081e6:	68a5      	ldr	r5, [r4, #8]
 80081e8:	6867      	ldr	r7, [r4, #4]
 80081ea:	3f01      	subs	r7, #1
 80081ec:	d504      	bpl.n	80081f8 <_fwalk_sglue+0x1c>
 80081ee:	6824      	ldr	r4, [r4, #0]
 80081f0:	2c00      	cmp	r4, #0
 80081f2:	d1f8      	bne.n	80081e6 <_fwalk_sglue+0xa>
 80081f4:	0030      	movs	r0, r6
 80081f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081f8:	89ab      	ldrh	r3, [r5, #12]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d908      	bls.n	8008210 <_fwalk_sglue+0x34>
 80081fe:	220e      	movs	r2, #14
 8008200:	5eab      	ldrsh	r3, [r5, r2]
 8008202:	3301      	adds	r3, #1
 8008204:	d004      	beq.n	8008210 <_fwalk_sglue+0x34>
 8008206:	0029      	movs	r1, r5
 8008208:	9800      	ldr	r0, [sp, #0]
 800820a:	9b01      	ldr	r3, [sp, #4]
 800820c:	4798      	blx	r3
 800820e:	4306      	orrs	r6, r0
 8008210:	3568      	adds	r5, #104	; 0x68
 8008212:	e7ea      	b.n	80081ea <_fwalk_sglue+0xe>

08008214 <sniprintf>:
 8008214:	b40c      	push	{r2, r3}
 8008216:	b530      	push	{r4, r5, lr}
 8008218:	4b17      	ldr	r3, [pc, #92]	; (8008278 <sniprintf+0x64>)
 800821a:	000c      	movs	r4, r1
 800821c:	681d      	ldr	r5, [r3, #0]
 800821e:	b09d      	sub	sp, #116	; 0x74
 8008220:	2900      	cmp	r1, #0
 8008222:	da08      	bge.n	8008236 <sniprintf+0x22>
 8008224:	238b      	movs	r3, #139	; 0x8b
 8008226:	2001      	movs	r0, #1
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	4240      	negs	r0, r0
 800822c:	b01d      	add	sp, #116	; 0x74
 800822e:	bc30      	pop	{r4, r5}
 8008230:	bc08      	pop	{r3}
 8008232:	b002      	add	sp, #8
 8008234:	4718      	bx	r3
 8008236:	2382      	movs	r3, #130	; 0x82
 8008238:	466a      	mov	r2, sp
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	8293      	strh	r3, [r2, #20]
 800823e:	2300      	movs	r3, #0
 8008240:	9002      	str	r0, [sp, #8]
 8008242:	9006      	str	r0, [sp, #24]
 8008244:	4299      	cmp	r1, r3
 8008246:	d000      	beq.n	800824a <sniprintf+0x36>
 8008248:	1e4b      	subs	r3, r1, #1
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	9307      	str	r3, [sp, #28]
 800824e:	2301      	movs	r3, #1
 8008250:	466a      	mov	r2, sp
 8008252:	425b      	negs	r3, r3
 8008254:	82d3      	strh	r3, [r2, #22]
 8008256:	0028      	movs	r0, r5
 8008258:	ab21      	add	r3, sp, #132	; 0x84
 800825a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800825c:	a902      	add	r1, sp, #8
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	f002 f916 	bl	800a490 <_svfiprintf_r>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	da01      	bge.n	800826c <sniprintf+0x58>
 8008268:	238b      	movs	r3, #139	; 0x8b
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	2c00      	cmp	r4, #0
 800826e:	d0dd      	beq.n	800822c <sniprintf+0x18>
 8008270:	2200      	movs	r2, #0
 8008272:	9b02      	ldr	r3, [sp, #8]
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	e7d9      	b.n	800822c <sniprintf+0x18>
 8008278:	200001e0 	.word	0x200001e0

0800827c <siprintf>:
 800827c:	b40e      	push	{r1, r2, r3}
 800827e:	b500      	push	{lr}
 8008280:	490b      	ldr	r1, [pc, #44]	; (80082b0 <siprintf+0x34>)
 8008282:	b09c      	sub	sp, #112	; 0x70
 8008284:	ab1d      	add	r3, sp, #116	; 0x74
 8008286:	9002      	str	r0, [sp, #8]
 8008288:	9006      	str	r0, [sp, #24]
 800828a:	9107      	str	r1, [sp, #28]
 800828c:	9104      	str	r1, [sp, #16]
 800828e:	4809      	ldr	r0, [pc, #36]	; (80082b4 <siprintf+0x38>)
 8008290:	4909      	ldr	r1, [pc, #36]	; (80082b8 <siprintf+0x3c>)
 8008292:	cb04      	ldmia	r3!, {r2}
 8008294:	9105      	str	r1, [sp, #20]
 8008296:	6800      	ldr	r0, [r0, #0]
 8008298:	a902      	add	r1, sp, #8
 800829a:	9301      	str	r3, [sp, #4]
 800829c:	f002 f8f8 	bl	800a490 <_svfiprintf_r>
 80082a0:	2200      	movs	r2, #0
 80082a2:	9b02      	ldr	r3, [sp, #8]
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	b01c      	add	sp, #112	; 0x70
 80082a8:	bc08      	pop	{r3}
 80082aa:	b003      	add	sp, #12
 80082ac:	4718      	bx	r3
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	7fffffff 	.word	0x7fffffff
 80082b4:	200001e0 	.word	0x200001e0
 80082b8:	ffff0208 	.word	0xffff0208

080082bc <siscanf>:
 80082bc:	b40e      	push	{r1, r2, r3}
 80082be:	b530      	push	{r4, r5, lr}
 80082c0:	2381      	movs	r3, #129	; 0x81
 80082c2:	b09c      	sub	sp, #112	; 0x70
 80082c4:	466a      	mov	r2, sp
 80082c6:	ac1f      	add	r4, sp, #124	; 0x7c
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	cc20      	ldmia	r4!, {r5}
 80082cc:	8293      	strh	r3, [r2, #20]
 80082ce:	9002      	str	r0, [sp, #8]
 80082d0:	9006      	str	r0, [sp, #24]
 80082d2:	f7f7 ff17 	bl	8000104 <strlen>
 80082d6:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <siscanf+0x48>)
 80082d8:	466a      	mov	r2, sp
 80082da:	930b      	str	r3, [sp, #44]	; 0x2c
 80082dc:	2300      	movs	r3, #0
 80082de:	9003      	str	r0, [sp, #12]
 80082e0:	9007      	str	r0, [sp, #28]
 80082e2:	4809      	ldr	r0, [pc, #36]	; (8008308 <siscanf+0x4c>)
 80082e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80082e6:	9314      	str	r3, [sp, #80]	; 0x50
 80082e8:	3b01      	subs	r3, #1
 80082ea:	82d3      	strh	r3, [r2, #22]
 80082ec:	a902      	add	r1, sp, #8
 80082ee:	0023      	movs	r3, r4
 80082f0:	002a      	movs	r2, r5
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	9401      	str	r4, [sp, #4]
 80082f6:	f002 fa27 	bl	800a748 <__ssvfiscanf_r>
 80082fa:	b01c      	add	sp, #112	; 0x70
 80082fc:	bc30      	pop	{r4, r5}
 80082fe:	bc08      	pop	{r3}
 8008300:	b003      	add	sp, #12
 8008302:	4718      	bx	r3
 8008304:	08008335 	.word	0x08008335
 8008308:	200001e0 	.word	0x200001e0

0800830c <__sread>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	000c      	movs	r4, r1
 8008310:	250e      	movs	r5, #14
 8008312:	5f49      	ldrsh	r1, [r1, r5]
 8008314:	f000 f8b6 	bl	8008484 <_read_r>
 8008318:	2800      	cmp	r0, #0
 800831a:	db03      	blt.n	8008324 <__sread+0x18>
 800831c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800831e:	181b      	adds	r3, r3, r0
 8008320:	6563      	str	r3, [r4, #84]	; 0x54
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	4a02      	ldr	r2, [pc, #8]	; (8008330 <__sread+0x24>)
 8008328:	4013      	ands	r3, r2
 800832a:	81a3      	strh	r3, [r4, #12]
 800832c:	e7f9      	b.n	8008322 <__sread+0x16>
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	ffffefff 	.word	0xffffefff

08008334 <__seofread>:
 8008334:	2000      	movs	r0, #0
 8008336:	4770      	bx	lr

08008338 <__swrite>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	001f      	movs	r7, r3
 800833c:	898b      	ldrh	r3, [r1, #12]
 800833e:	0005      	movs	r5, r0
 8008340:	000c      	movs	r4, r1
 8008342:	0016      	movs	r6, r2
 8008344:	05db      	lsls	r3, r3, #23
 8008346:	d505      	bpl.n	8008354 <__swrite+0x1c>
 8008348:	230e      	movs	r3, #14
 800834a:	5ec9      	ldrsh	r1, [r1, r3]
 800834c:	2200      	movs	r2, #0
 800834e:	2302      	movs	r3, #2
 8008350:	f000 f884 	bl	800845c <_lseek_r>
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	4a05      	ldr	r2, [pc, #20]	; (800836c <__swrite+0x34>)
 8008358:	0028      	movs	r0, r5
 800835a:	4013      	ands	r3, r2
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	0032      	movs	r2, r6
 8008360:	230e      	movs	r3, #14
 8008362:	5ee1      	ldrsh	r1, [r4, r3]
 8008364:	003b      	movs	r3, r7
 8008366:	f000 f8b3 	bl	80084d0 <_write_r>
 800836a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800836c:	ffffefff 	.word	0xffffefff

08008370 <__sseek>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	000c      	movs	r4, r1
 8008374:	250e      	movs	r5, #14
 8008376:	5f49      	ldrsh	r1, [r1, r5]
 8008378:	f000 f870 	bl	800845c <_lseek_r>
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	1c42      	adds	r2, r0, #1
 8008380:	d103      	bne.n	800838a <__sseek+0x1a>
 8008382:	4a05      	ldr	r2, [pc, #20]	; (8008398 <__sseek+0x28>)
 8008384:	4013      	ands	r3, r2
 8008386:	81a3      	strh	r3, [r4, #12]
 8008388:	bd70      	pop	{r4, r5, r6, pc}
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	0152      	lsls	r2, r2, #5
 800838e:	4313      	orrs	r3, r2
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	6560      	str	r0, [r4, #84]	; 0x54
 8008394:	e7f8      	b.n	8008388 <__sseek+0x18>
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	ffffefff 	.word	0xffffefff

0800839c <__sclose>:
 800839c:	b510      	push	{r4, lr}
 800839e:	230e      	movs	r3, #14
 80083a0:	5ec9      	ldrsh	r1, [r1, r3]
 80083a2:	f000 f849 	bl	8008438 <_close_r>
 80083a6:	bd10      	pop	{r4, pc}

080083a8 <memset>:
 80083a8:	0003      	movs	r3, r0
 80083aa:	1882      	adds	r2, r0, r2
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d100      	bne.n	80083b2 <memset+0xa>
 80083b0:	4770      	bx	lr
 80083b2:	7019      	strb	r1, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	e7f9      	b.n	80083ac <memset+0x4>

080083b8 <strncmp>:
 80083b8:	b530      	push	{r4, r5, lr}
 80083ba:	0005      	movs	r5, r0
 80083bc:	1e10      	subs	r0, r2, #0
 80083be:	d00b      	beq.n	80083d8 <strncmp+0x20>
 80083c0:	2400      	movs	r4, #0
 80083c2:	3a01      	subs	r2, #1
 80083c4:	5d2b      	ldrb	r3, [r5, r4]
 80083c6:	5d08      	ldrb	r0, [r1, r4]
 80083c8:	4283      	cmp	r3, r0
 80083ca:	d104      	bne.n	80083d6 <strncmp+0x1e>
 80083cc:	42a2      	cmp	r2, r4
 80083ce:	d002      	beq.n	80083d6 <strncmp+0x1e>
 80083d0:	3401      	adds	r4, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f6      	bne.n	80083c4 <strncmp+0xc>
 80083d6:	1a18      	subs	r0, r3, r0
 80083d8:	bd30      	pop	{r4, r5, pc}

080083da <strncpy>:
 80083da:	0003      	movs	r3, r0
 80083dc:	b530      	push	{r4, r5, lr}
 80083de:	001d      	movs	r5, r3
 80083e0:	2a00      	cmp	r2, #0
 80083e2:	d006      	beq.n	80083f2 <strncpy+0x18>
 80083e4:	780c      	ldrb	r4, [r1, #0]
 80083e6:	3a01      	subs	r2, #1
 80083e8:	3301      	adds	r3, #1
 80083ea:	702c      	strb	r4, [r5, #0]
 80083ec:	3101      	adds	r1, #1
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	d1f5      	bne.n	80083de <strncpy+0x4>
 80083f2:	2100      	movs	r1, #0
 80083f4:	189a      	adds	r2, r3, r2
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d100      	bne.n	80083fc <strncpy+0x22>
 80083fa:	bd30      	pop	{r4, r5, pc}
 80083fc:	7019      	strb	r1, [r3, #0]
 80083fe:	3301      	adds	r3, #1
 8008400:	e7f9      	b.n	80083f6 <strncpy+0x1c>

08008402 <strstr>:
 8008402:	780a      	ldrb	r2, [r1, #0]
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	2a00      	cmp	r2, #0
 8008408:	d10c      	bne.n	8008424 <strstr+0x22>
 800840a:	bd30      	pop	{r4, r5, pc}
 800840c:	429a      	cmp	r2, r3
 800840e:	d108      	bne.n	8008422 <strstr+0x20>
 8008410:	2301      	movs	r3, #1
 8008412:	5ccc      	ldrb	r4, [r1, r3]
 8008414:	2c00      	cmp	r4, #0
 8008416:	d0f8      	beq.n	800840a <strstr+0x8>
 8008418:	5cc5      	ldrb	r5, [r0, r3]
 800841a:	42a5      	cmp	r5, r4
 800841c:	d101      	bne.n	8008422 <strstr+0x20>
 800841e:	3301      	adds	r3, #1
 8008420:	e7f7      	b.n	8008412 <strstr+0x10>
 8008422:	3001      	adds	r0, #1
 8008424:	7803      	ldrb	r3, [r0, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f0      	bne.n	800840c <strstr+0xa>
 800842a:	0018      	movs	r0, r3
 800842c:	e7ed      	b.n	800840a <strstr+0x8>
	...

08008430 <_localeconv_r>:
 8008430:	4800      	ldr	r0, [pc, #0]	; (8008434 <_localeconv_r+0x4>)
 8008432:	4770      	bx	lr
 8008434:	20000118 	.word	0x20000118

08008438 <_close_r>:
 8008438:	2300      	movs	r3, #0
 800843a:	b570      	push	{r4, r5, r6, lr}
 800843c:	4d06      	ldr	r5, [pc, #24]	; (8008458 <_close_r+0x20>)
 800843e:	0004      	movs	r4, r0
 8008440:	0008      	movs	r0, r1
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	f7fa fe23 	bl	800308e <_close>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d103      	bne.n	8008454 <_close_r+0x1c>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d000      	beq.n	8008454 <_close_r+0x1c>
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	bd70      	pop	{r4, r5, r6, pc}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	200006d8 	.word	0x200006d8

0800845c <_lseek_r>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	0004      	movs	r4, r0
 8008460:	0008      	movs	r0, r1
 8008462:	0011      	movs	r1, r2
 8008464:	001a      	movs	r2, r3
 8008466:	2300      	movs	r3, #0
 8008468:	4d05      	ldr	r5, [pc, #20]	; (8008480 <_lseek_r+0x24>)
 800846a:	602b      	str	r3, [r5, #0]
 800846c:	f7fa fe30 	bl	80030d0 <_lseek>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d103      	bne.n	800847c <_lseek_r+0x20>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d000      	beq.n	800847c <_lseek_r+0x20>
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	bd70      	pop	{r4, r5, r6, pc}
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	200006d8 	.word	0x200006d8

08008484 <_read_r>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	0004      	movs	r4, r0
 8008488:	0008      	movs	r0, r1
 800848a:	0011      	movs	r1, r2
 800848c:	001a      	movs	r2, r3
 800848e:	2300      	movs	r3, #0
 8008490:	4d05      	ldr	r5, [pc, #20]	; (80084a8 <_read_r+0x24>)
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7fa fdc2 	bl	800301c <_read>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d103      	bne.n	80084a4 <_read_r+0x20>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d000      	beq.n	80084a4 <_read_r+0x20>
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	46c0      	nop			; (mov r8, r8)
 80084a8:	200006d8 	.word	0x200006d8

080084ac <_sbrk_r>:
 80084ac:	2300      	movs	r3, #0
 80084ae:	b570      	push	{r4, r5, r6, lr}
 80084b0:	4d06      	ldr	r5, [pc, #24]	; (80084cc <_sbrk_r+0x20>)
 80084b2:	0004      	movs	r4, r0
 80084b4:	0008      	movs	r0, r1
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	f7fa fe16 	bl	80030e8 <_sbrk>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d103      	bne.n	80084c8 <_sbrk_r+0x1c>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d000      	beq.n	80084c8 <_sbrk_r+0x1c>
 80084c6:	6023      	str	r3, [r4, #0]
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	200006d8 	.word	0x200006d8

080084d0 <_write_r>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	0004      	movs	r4, r0
 80084d4:	0008      	movs	r0, r1
 80084d6:	0011      	movs	r1, r2
 80084d8:	001a      	movs	r2, r3
 80084da:	2300      	movs	r3, #0
 80084dc:	4d05      	ldr	r5, [pc, #20]	; (80084f4 <_write_r+0x24>)
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7fa fdb9 	bl	8003056 <_write>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d103      	bne.n	80084f0 <_write_r+0x20>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d000      	beq.n	80084f0 <_write_r+0x20>
 80084ee:	6023      	str	r3, [r4, #0]
 80084f0:	bd70      	pop	{r4, r5, r6, pc}
 80084f2:	46c0      	nop			; (mov r8, r8)
 80084f4:	200006d8 	.word	0x200006d8

080084f8 <__errno>:
 80084f8:	4b01      	ldr	r3, [pc, #4]	; (8008500 <__errno+0x8>)
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	4770      	bx	lr
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	200001e0 	.word	0x200001e0

08008504 <__libc_init_array>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	2600      	movs	r6, #0
 8008508:	4c0c      	ldr	r4, [pc, #48]	; (800853c <__libc_init_array+0x38>)
 800850a:	4d0d      	ldr	r5, [pc, #52]	; (8008540 <__libc_init_array+0x3c>)
 800850c:	1b64      	subs	r4, r4, r5
 800850e:	10a4      	asrs	r4, r4, #2
 8008510:	42a6      	cmp	r6, r4
 8008512:	d109      	bne.n	8008528 <__libc_init_array+0x24>
 8008514:	2600      	movs	r6, #0
 8008516:	f003 f94f 	bl	800b7b8 <_init>
 800851a:	4c0a      	ldr	r4, [pc, #40]	; (8008544 <__libc_init_array+0x40>)
 800851c:	4d0a      	ldr	r5, [pc, #40]	; (8008548 <__libc_init_array+0x44>)
 800851e:	1b64      	subs	r4, r4, r5
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	42a6      	cmp	r6, r4
 8008524:	d105      	bne.n	8008532 <__libc_init_array+0x2e>
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	00b3      	lsls	r3, r6, #2
 800852a:	58eb      	ldr	r3, [r5, r3]
 800852c:	4798      	blx	r3
 800852e:	3601      	adds	r6, #1
 8008530:	e7ee      	b.n	8008510 <__libc_init_array+0xc>
 8008532:	00b3      	lsls	r3, r6, #2
 8008534:	58eb      	ldr	r3, [r5, r3]
 8008536:	4798      	blx	r3
 8008538:	3601      	adds	r6, #1
 800853a:	e7f2      	b.n	8008522 <__libc_init_array+0x1e>
 800853c:	0800bd74 	.word	0x0800bd74
 8008540:	0800bd74 	.word	0x0800bd74
 8008544:	0800bd78 	.word	0x0800bd78
 8008548:	0800bd74 	.word	0x0800bd74

0800854c <__retarget_lock_init_recursive>:
 800854c:	4770      	bx	lr

0800854e <__retarget_lock_acquire_recursive>:
 800854e:	4770      	bx	lr

08008550 <__retarget_lock_release_recursive>:
 8008550:	4770      	bx	lr

08008552 <memchr>:
 8008552:	b2c9      	uxtb	r1, r1
 8008554:	1882      	adds	r2, r0, r2
 8008556:	4290      	cmp	r0, r2
 8008558:	d101      	bne.n	800855e <memchr+0xc>
 800855a:	2000      	movs	r0, #0
 800855c:	4770      	bx	lr
 800855e:	7803      	ldrb	r3, [r0, #0]
 8008560:	428b      	cmp	r3, r1
 8008562:	d0fb      	beq.n	800855c <memchr+0xa>
 8008564:	3001      	adds	r0, #1
 8008566:	e7f6      	b.n	8008556 <memchr+0x4>

08008568 <memcpy>:
 8008568:	2300      	movs	r3, #0
 800856a:	b510      	push	{r4, lr}
 800856c:	429a      	cmp	r2, r3
 800856e:	d100      	bne.n	8008572 <memcpy+0xa>
 8008570:	bd10      	pop	{r4, pc}
 8008572:	5ccc      	ldrb	r4, [r1, r3]
 8008574:	54c4      	strb	r4, [r0, r3]
 8008576:	3301      	adds	r3, #1
 8008578:	e7f8      	b.n	800856c <memcpy+0x4>
	...

0800857c <nan>:
 800857c:	2000      	movs	r0, #0
 800857e:	4901      	ldr	r1, [pc, #4]	; (8008584 <nan+0x8>)
 8008580:	4770      	bx	lr
 8008582:	46c0      	nop			; (mov r8, r8)
 8008584:	7ff80000 	.word	0x7ff80000

08008588 <nanf>:
 8008588:	4800      	ldr	r0, [pc, #0]	; (800858c <nanf+0x4>)
 800858a:	4770      	bx	lr
 800858c:	7fc00000 	.word	0x7fc00000

08008590 <quorem>:
 8008590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008592:	6902      	ldr	r2, [r0, #16]
 8008594:	690b      	ldr	r3, [r1, #16]
 8008596:	b089      	sub	sp, #36	; 0x24
 8008598:	0007      	movs	r7, r0
 800859a:	9104      	str	r1, [sp, #16]
 800859c:	2000      	movs	r0, #0
 800859e:	429a      	cmp	r2, r3
 80085a0:	db69      	blt.n	8008676 <quorem+0xe6>
 80085a2:	3b01      	subs	r3, #1
 80085a4:	009c      	lsls	r4, r3, #2
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	000b      	movs	r3, r1
 80085aa:	3314      	adds	r3, #20
 80085ac:	9306      	str	r3, [sp, #24]
 80085ae:	191b      	adds	r3, r3, r4
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	003b      	movs	r3, r7
 80085b4:	3314      	adds	r3, #20
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	191c      	adds	r4, r3, r4
 80085ba:	9b05      	ldr	r3, [sp, #20]
 80085bc:	6826      	ldr	r6, [r4, #0]
 80085be:	681d      	ldr	r5, [r3, #0]
 80085c0:	0030      	movs	r0, r6
 80085c2:	3501      	adds	r5, #1
 80085c4:	0029      	movs	r1, r5
 80085c6:	f7f7 fdb9 	bl	800013c <__udivsi3>
 80085ca:	9002      	str	r0, [sp, #8]
 80085cc:	42ae      	cmp	r6, r5
 80085ce:	d329      	bcc.n	8008624 <quorem+0x94>
 80085d0:	9b06      	ldr	r3, [sp, #24]
 80085d2:	2600      	movs	r6, #0
 80085d4:	469c      	mov	ip, r3
 80085d6:	9d03      	ldr	r5, [sp, #12]
 80085d8:	9606      	str	r6, [sp, #24]
 80085da:	4662      	mov	r2, ip
 80085dc:	ca08      	ldmia	r2!, {r3}
 80085de:	6828      	ldr	r0, [r5, #0]
 80085e0:	4694      	mov	ip, r2
 80085e2:	9a02      	ldr	r2, [sp, #8]
 80085e4:	b299      	uxth	r1, r3
 80085e6:	4351      	muls	r1, r2
 80085e8:	0c1b      	lsrs	r3, r3, #16
 80085ea:	4353      	muls	r3, r2
 80085ec:	1989      	adds	r1, r1, r6
 80085ee:	0c0a      	lsrs	r2, r1, #16
 80085f0:	189b      	adds	r3, r3, r2
 80085f2:	9307      	str	r3, [sp, #28]
 80085f4:	0c1e      	lsrs	r6, r3, #16
 80085f6:	9b06      	ldr	r3, [sp, #24]
 80085f8:	b282      	uxth	r2, r0
 80085fa:	18d2      	adds	r2, r2, r3
 80085fc:	466b      	mov	r3, sp
 80085fe:	b289      	uxth	r1, r1
 8008600:	8b9b      	ldrh	r3, [r3, #28]
 8008602:	1a52      	subs	r2, r2, r1
 8008604:	0c01      	lsrs	r1, r0, #16
 8008606:	1ac9      	subs	r1, r1, r3
 8008608:	1413      	asrs	r3, r2, #16
 800860a:	18cb      	adds	r3, r1, r3
 800860c:	1419      	asrs	r1, r3, #16
 800860e:	b292      	uxth	r2, r2
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	4313      	orrs	r3, r2
 8008614:	c508      	stmia	r5!, {r3}
 8008616:	9b05      	ldr	r3, [sp, #20]
 8008618:	9106      	str	r1, [sp, #24]
 800861a:	4563      	cmp	r3, ip
 800861c:	d2dd      	bcs.n	80085da <quorem+0x4a>
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d030      	beq.n	8008686 <quorem+0xf6>
 8008624:	0038      	movs	r0, r7
 8008626:	9904      	ldr	r1, [sp, #16]
 8008628:	f001 fcda 	bl	8009fe0 <__mcmp>
 800862c:	2800      	cmp	r0, #0
 800862e:	db21      	blt.n	8008674 <quorem+0xe4>
 8008630:	0038      	movs	r0, r7
 8008632:	2600      	movs	r6, #0
 8008634:	9b02      	ldr	r3, [sp, #8]
 8008636:	9c04      	ldr	r4, [sp, #16]
 8008638:	3301      	adds	r3, #1
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	3014      	adds	r0, #20
 800863e:	3414      	adds	r4, #20
 8008640:	6803      	ldr	r3, [r0, #0]
 8008642:	cc02      	ldmia	r4!, {r1}
 8008644:	b29d      	uxth	r5, r3
 8008646:	19ad      	adds	r5, r5, r6
 8008648:	b28a      	uxth	r2, r1
 800864a:	1aaa      	subs	r2, r5, r2
 800864c:	0c09      	lsrs	r1, r1, #16
 800864e:	0c1b      	lsrs	r3, r3, #16
 8008650:	1a5b      	subs	r3, r3, r1
 8008652:	1411      	asrs	r1, r2, #16
 8008654:	185b      	adds	r3, r3, r1
 8008656:	141e      	asrs	r6, r3, #16
 8008658:	b292      	uxth	r2, r2
 800865a:	041b      	lsls	r3, r3, #16
 800865c:	4313      	orrs	r3, r2
 800865e:	c008      	stmia	r0!, {r3}
 8008660:	9b05      	ldr	r3, [sp, #20]
 8008662:	42a3      	cmp	r3, r4
 8008664:	d2ec      	bcs.n	8008640 <quorem+0xb0>
 8008666:	9b01      	ldr	r3, [sp, #4]
 8008668:	9a03      	ldr	r2, [sp, #12]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	18d3      	adds	r3, r2, r3
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	2a00      	cmp	r2, #0
 8008672:	d015      	beq.n	80086a0 <quorem+0x110>
 8008674:	9802      	ldr	r0, [sp, #8]
 8008676:	b009      	add	sp, #36	; 0x24
 8008678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <quorem+0xfe>
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	3b01      	subs	r3, #1
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	3c04      	subs	r4, #4
 800868a:	42a3      	cmp	r3, r4
 800868c:	d3f5      	bcc.n	800867a <quorem+0xea>
 800868e:	9b01      	ldr	r3, [sp, #4]
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	e7c7      	b.n	8008624 <quorem+0x94>
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	2a00      	cmp	r2, #0
 8008698:	d106      	bne.n	80086a8 <quorem+0x118>
 800869a:	9a01      	ldr	r2, [sp, #4]
 800869c:	3a01      	subs	r2, #1
 800869e:	9201      	str	r2, [sp, #4]
 80086a0:	9a03      	ldr	r2, [sp, #12]
 80086a2:	3b04      	subs	r3, #4
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d3f5      	bcc.n	8008694 <quorem+0x104>
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	e7e2      	b.n	8008674 <quorem+0xe4>
	...

080086b0 <_dtoa_r>:
 80086b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086b2:	0014      	movs	r4, r2
 80086b4:	001d      	movs	r5, r3
 80086b6:	69c6      	ldr	r6, [r0, #28]
 80086b8:	b09d      	sub	sp, #116	; 0x74
 80086ba:	9408      	str	r4, [sp, #32]
 80086bc:	9509      	str	r5, [sp, #36]	; 0x24
 80086be:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80086c0:	9004      	str	r0, [sp, #16]
 80086c2:	2e00      	cmp	r6, #0
 80086c4:	d10f      	bne.n	80086e6 <_dtoa_r+0x36>
 80086c6:	2010      	movs	r0, #16
 80086c8:	f7fd fec4 	bl	8006454 <malloc>
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	1e02      	subs	r2, r0, #0
 80086d0:	61d8      	str	r0, [r3, #28]
 80086d2:	d104      	bne.n	80086de <_dtoa_r+0x2e>
 80086d4:	21ef      	movs	r1, #239	; 0xef
 80086d6:	4bc6      	ldr	r3, [pc, #792]	; (80089f0 <_dtoa_r+0x340>)
 80086d8:	48c6      	ldr	r0, [pc, #792]	; (80089f4 <_dtoa_r+0x344>)
 80086da:	f002 fc45 	bl	800af68 <__assert_func>
 80086de:	6046      	str	r6, [r0, #4]
 80086e0:	6086      	str	r6, [r0, #8]
 80086e2:	6006      	str	r6, [r0, #0]
 80086e4:	60c6      	str	r6, [r0, #12]
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	6819      	ldr	r1, [r3, #0]
 80086ec:	2900      	cmp	r1, #0
 80086ee:	d00b      	beq.n	8008708 <_dtoa_r+0x58>
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	2301      	movs	r3, #1
 80086f4:	4093      	lsls	r3, r2
 80086f6:	604a      	str	r2, [r1, #4]
 80086f8:	608b      	str	r3, [r1, #8]
 80086fa:	9804      	ldr	r0, [sp, #16]
 80086fc:	f001 f9e2 	bl	8009ac4 <_Bfree>
 8008700:	2200      	movs	r2, #0
 8008702:	9b04      	ldr	r3, [sp, #16]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	2d00      	cmp	r5, #0
 800870a:	da1e      	bge.n	800874a <_dtoa_r+0x9a>
 800870c:	2301      	movs	r3, #1
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	006b      	lsls	r3, r5, #1
 8008712:	085b      	lsrs	r3, r3, #1
 8008714:	9309      	str	r3, [sp, #36]	; 0x24
 8008716:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008718:	4bb7      	ldr	r3, [pc, #732]	; (80089f8 <_dtoa_r+0x348>)
 800871a:	4ab7      	ldr	r2, [pc, #732]	; (80089f8 <_dtoa_r+0x348>)
 800871c:	403b      	ands	r3, r7
 800871e:	4293      	cmp	r3, r2
 8008720:	d116      	bne.n	8008750 <_dtoa_r+0xa0>
 8008722:	4bb6      	ldr	r3, [pc, #728]	; (80089fc <_dtoa_r+0x34c>)
 8008724:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	033b      	lsls	r3, r7, #12
 800872a:	0b1b      	lsrs	r3, r3, #12
 800872c:	4323      	orrs	r3, r4
 800872e:	d101      	bne.n	8008734 <_dtoa_r+0x84>
 8008730:	f000 fdb5 	bl	800929e <_dtoa_r+0xbee>
 8008734:	4bb2      	ldr	r3, [pc, #712]	; (8008a00 <_dtoa_r+0x350>)
 8008736:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008738:	9306      	str	r3, [sp, #24]
 800873a:	2a00      	cmp	r2, #0
 800873c:	d002      	beq.n	8008744 <_dtoa_r+0x94>
 800873e:	4bb1      	ldr	r3, [pc, #708]	; (8008a04 <_dtoa_r+0x354>)
 8008740:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	9806      	ldr	r0, [sp, #24]
 8008746:	b01d      	add	sp, #116	; 0x74
 8008748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800874a:	2300      	movs	r3, #0
 800874c:	603b      	str	r3, [r7, #0]
 800874e:	e7e2      	b.n	8008716 <_dtoa_r+0x66>
 8008750:	9a08      	ldr	r2, [sp, #32]
 8008752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008754:	9210      	str	r2, [sp, #64]	; 0x40
 8008756:	9311      	str	r3, [sp, #68]	; 0x44
 8008758:	9810      	ldr	r0, [sp, #64]	; 0x40
 800875a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800875c:	2200      	movs	r2, #0
 800875e:	2300      	movs	r3, #0
 8008760:	f7f7 fe72 	bl	8000448 <__aeabi_dcmpeq>
 8008764:	1e06      	subs	r6, r0, #0
 8008766:	d009      	beq.n	800877c <_dtoa_r+0xcc>
 8008768:	2301      	movs	r3, #1
 800876a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	4ba6      	ldr	r3, [pc, #664]	; (8008a08 <_dtoa_r+0x358>)
 8008770:	9306      	str	r3, [sp, #24]
 8008772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0e5      	beq.n	8008744 <_dtoa_r+0x94>
 8008778:	4ba4      	ldr	r3, [pc, #656]	; (8008a0c <_dtoa_r+0x35c>)
 800877a:	e7e1      	b.n	8008740 <_dtoa_r+0x90>
 800877c:	ab1a      	add	r3, sp, #104	; 0x68
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	ab1b      	add	r3, sp, #108	; 0x6c
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	9804      	ldr	r0, [sp, #16]
 8008786:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800878a:	f001 fd45 	bl	800a218 <__d2b>
 800878e:	007a      	lsls	r2, r7, #1
 8008790:	9005      	str	r0, [sp, #20]
 8008792:	0d52      	lsrs	r2, r2, #21
 8008794:	d100      	bne.n	8008798 <_dtoa_r+0xe8>
 8008796:	e07b      	b.n	8008890 <_dtoa_r+0x1e0>
 8008798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800879a:	9617      	str	r6, [sp, #92]	; 0x5c
 800879c:	0319      	lsls	r1, r3, #12
 800879e:	4b9c      	ldr	r3, [pc, #624]	; (8008a10 <_dtoa_r+0x360>)
 80087a0:	0b09      	lsrs	r1, r1, #12
 80087a2:	430b      	orrs	r3, r1
 80087a4:	499b      	ldr	r1, [pc, #620]	; (8008a14 <_dtoa_r+0x364>)
 80087a6:	1857      	adds	r7, r2, r1
 80087a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80087aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087ac:	0019      	movs	r1, r3
 80087ae:	2200      	movs	r2, #0
 80087b0:	4b99      	ldr	r3, [pc, #612]	; (8008a18 <_dtoa_r+0x368>)
 80087b2:	f7f9 f9ef 	bl	8001b94 <__aeabi_dsub>
 80087b6:	4a99      	ldr	r2, [pc, #612]	; (8008a1c <_dtoa_r+0x36c>)
 80087b8:	4b99      	ldr	r3, [pc, #612]	; (8008a20 <_dtoa_r+0x370>)
 80087ba:	f7f8 ff29 	bl	8001610 <__aeabi_dmul>
 80087be:	4a99      	ldr	r2, [pc, #612]	; (8008a24 <_dtoa_r+0x374>)
 80087c0:	4b99      	ldr	r3, [pc, #612]	; (8008a28 <_dtoa_r+0x378>)
 80087c2:	f7f7 ffcb 	bl	800075c <__aeabi_dadd>
 80087c6:	0004      	movs	r4, r0
 80087c8:	0038      	movs	r0, r7
 80087ca:	000d      	movs	r5, r1
 80087cc:	f7f9 fdb8 	bl	8002340 <__aeabi_i2d>
 80087d0:	4a96      	ldr	r2, [pc, #600]	; (8008a2c <_dtoa_r+0x37c>)
 80087d2:	4b97      	ldr	r3, [pc, #604]	; (8008a30 <_dtoa_r+0x380>)
 80087d4:	f7f8 ff1c 	bl	8001610 <__aeabi_dmul>
 80087d8:	0002      	movs	r2, r0
 80087da:	000b      	movs	r3, r1
 80087dc:	0020      	movs	r0, r4
 80087de:	0029      	movs	r1, r5
 80087e0:	f7f7 ffbc 	bl	800075c <__aeabi_dadd>
 80087e4:	0004      	movs	r4, r0
 80087e6:	000d      	movs	r5, r1
 80087e8:	f7f9 fd74 	bl	80022d4 <__aeabi_d2iz>
 80087ec:	2200      	movs	r2, #0
 80087ee:	9003      	str	r0, [sp, #12]
 80087f0:	2300      	movs	r3, #0
 80087f2:	0020      	movs	r0, r4
 80087f4:	0029      	movs	r1, r5
 80087f6:	f7f7 fe2d 	bl	8000454 <__aeabi_dcmplt>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d00b      	beq.n	8008816 <_dtoa_r+0x166>
 80087fe:	9803      	ldr	r0, [sp, #12]
 8008800:	f7f9 fd9e 	bl	8002340 <__aeabi_i2d>
 8008804:	002b      	movs	r3, r5
 8008806:	0022      	movs	r2, r4
 8008808:	f7f7 fe1e 	bl	8000448 <__aeabi_dcmpeq>
 800880c:	4243      	negs	r3, r0
 800880e:	4158      	adcs	r0, r3
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	1a1b      	subs	r3, r3, r0
 8008814:	9303      	str	r3, [sp, #12]
 8008816:	2301      	movs	r3, #1
 8008818:	9316      	str	r3, [sp, #88]	; 0x58
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	2b16      	cmp	r3, #22
 800881e:	d810      	bhi.n	8008842 <_dtoa_r+0x192>
 8008820:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008822:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008824:	9a03      	ldr	r2, [sp, #12]
 8008826:	4b83      	ldr	r3, [pc, #524]	; (8008a34 <_dtoa_r+0x384>)
 8008828:	00d2      	lsls	r2, r2, #3
 800882a:	189b      	adds	r3, r3, r2
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f7f7 fe10 	bl	8000454 <__aeabi_dcmplt>
 8008834:	2800      	cmp	r0, #0
 8008836:	d047      	beq.n	80088c8 <_dtoa_r+0x218>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	3b01      	subs	r3, #1
 800883c:	9303      	str	r3, [sp, #12]
 800883e:	2300      	movs	r3, #0
 8008840:	9316      	str	r3, [sp, #88]	; 0x58
 8008842:	2200      	movs	r2, #0
 8008844:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008846:	920a      	str	r2, [sp, #40]	; 0x28
 8008848:	1bdb      	subs	r3, r3, r7
 800884a:	1e5a      	subs	r2, r3, #1
 800884c:	d53e      	bpl.n	80088cc <_dtoa_r+0x21c>
 800884e:	2201      	movs	r2, #1
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	930a      	str	r3, [sp, #40]	; 0x28
 8008854:	2300      	movs	r3, #0
 8008856:	930c      	str	r3, [sp, #48]	; 0x30
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	db38      	blt.n	80088d0 <_dtoa_r+0x220>
 800885e:	9a03      	ldr	r2, [sp, #12]
 8008860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008862:	4694      	mov	ip, r2
 8008864:	4463      	add	r3, ip
 8008866:	930c      	str	r3, [sp, #48]	; 0x30
 8008868:	2300      	movs	r3, #0
 800886a:	9213      	str	r2, [sp, #76]	; 0x4c
 800886c:	930d      	str	r3, [sp, #52]	; 0x34
 800886e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008870:	2401      	movs	r4, #1
 8008872:	2b09      	cmp	r3, #9
 8008874:	d867      	bhi.n	8008946 <_dtoa_r+0x296>
 8008876:	2b05      	cmp	r3, #5
 8008878:	dd02      	ble.n	8008880 <_dtoa_r+0x1d0>
 800887a:	2400      	movs	r4, #0
 800887c:	3b04      	subs	r3, #4
 800887e:	9322      	str	r3, [sp, #136]	; 0x88
 8008880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008882:	1e98      	subs	r0, r3, #2
 8008884:	2803      	cmp	r0, #3
 8008886:	d867      	bhi.n	8008958 <_dtoa_r+0x2a8>
 8008888:	f7f7 fc44 	bl	8000114 <__gnu_thumb1_case_uqi>
 800888c:	5b383a2b 	.word	0x5b383a2b
 8008890:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008892:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008894:	18f6      	adds	r6, r6, r3
 8008896:	4b68      	ldr	r3, [pc, #416]	; (8008a38 <_dtoa_r+0x388>)
 8008898:	18f2      	adds	r2, r6, r3
 800889a:	2a20      	cmp	r2, #32
 800889c:	dd0f      	ble.n	80088be <_dtoa_r+0x20e>
 800889e:	2340      	movs	r3, #64	; 0x40
 80088a0:	1a9b      	subs	r3, r3, r2
 80088a2:	409f      	lsls	r7, r3
 80088a4:	4b65      	ldr	r3, [pc, #404]	; (8008a3c <_dtoa_r+0x38c>)
 80088a6:	0038      	movs	r0, r7
 80088a8:	18f3      	adds	r3, r6, r3
 80088aa:	40dc      	lsrs	r4, r3
 80088ac:	4320      	orrs	r0, r4
 80088ae:	f7f9 fd77 	bl	80023a0 <__aeabi_ui2d>
 80088b2:	2201      	movs	r2, #1
 80088b4:	4b62      	ldr	r3, [pc, #392]	; (8008a40 <_dtoa_r+0x390>)
 80088b6:	1e77      	subs	r7, r6, #1
 80088b8:	18cb      	adds	r3, r1, r3
 80088ba:	9217      	str	r2, [sp, #92]	; 0x5c
 80088bc:	e776      	b.n	80087ac <_dtoa_r+0xfc>
 80088be:	2320      	movs	r3, #32
 80088c0:	0020      	movs	r0, r4
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	4098      	lsls	r0, r3
 80088c6:	e7f2      	b.n	80088ae <_dtoa_r+0x1fe>
 80088c8:	9016      	str	r0, [sp, #88]	; 0x58
 80088ca:	e7ba      	b.n	8008842 <_dtoa_r+0x192>
 80088cc:	920c      	str	r2, [sp, #48]	; 0x30
 80088ce:	e7c3      	b.n	8008858 <_dtoa_r+0x1a8>
 80088d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d2:	9a03      	ldr	r2, [sp, #12]
 80088d4:	1a9b      	subs	r3, r3, r2
 80088d6:	930a      	str	r3, [sp, #40]	; 0x28
 80088d8:	4253      	negs	r3, r2
 80088da:	930d      	str	r3, [sp, #52]	; 0x34
 80088dc:	2300      	movs	r3, #0
 80088de:	9313      	str	r3, [sp, #76]	; 0x4c
 80088e0:	e7c5      	b.n	800886e <_dtoa_r+0x1be>
 80088e2:	2300      	movs	r3, #0
 80088e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ea:	9307      	str	r3, [sp, #28]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	dc13      	bgt.n	8008918 <_dtoa_r+0x268>
 80088f0:	2301      	movs	r3, #1
 80088f2:	001a      	movs	r2, r3
 80088f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80088f6:	9307      	str	r3, [sp, #28]
 80088f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80088fa:	e00d      	b.n	8008918 <_dtoa_r+0x268>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e7f1      	b.n	80088e4 <_dtoa_r+0x234>
 8008900:	2300      	movs	r3, #0
 8008902:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008904:	930f      	str	r3, [sp, #60]	; 0x3c
 8008906:	4694      	mov	ip, r2
 8008908:	9b03      	ldr	r3, [sp, #12]
 800890a:	4463      	add	r3, ip
 800890c:	930b      	str	r3, [sp, #44]	; 0x2c
 800890e:	3301      	adds	r3, #1
 8008910:	9307      	str	r3, [sp, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	dc00      	bgt.n	8008918 <_dtoa_r+0x268>
 8008916:	2301      	movs	r3, #1
 8008918:	9a04      	ldr	r2, [sp, #16]
 800891a:	2100      	movs	r1, #0
 800891c:	69d0      	ldr	r0, [r2, #28]
 800891e:	2204      	movs	r2, #4
 8008920:	0015      	movs	r5, r2
 8008922:	3514      	adds	r5, #20
 8008924:	429d      	cmp	r5, r3
 8008926:	d91b      	bls.n	8008960 <_dtoa_r+0x2b0>
 8008928:	6041      	str	r1, [r0, #4]
 800892a:	9804      	ldr	r0, [sp, #16]
 800892c:	f001 f886 	bl	8009a3c <_Balloc>
 8008930:	9006      	str	r0, [sp, #24]
 8008932:	2800      	cmp	r0, #0
 8008934:	d117      	bne.n	8008966 <_dtoa_r+0x2b6>
 8008936:	21b0      	movs	r1, #176	; 0xb0
 8008938:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <_dtoa_r+0x394>)
 800893a:	482e      	ldr	r0, [pc, #184]	; (80089f4 <_dtoa_r+0x344>)
 800893c:	9a06      	ldr	r2, [sp, #24]
 800893e:	31ff      	adds	r1, #255	; 0xff
 8008940:	e6cb      	b.n	80086da <_dtoa_r+0x2a>
 8008942:	2301      	movs	r3, #1
 8008944:	e7dd      	b.n	8008902 <_dtoa_r+0x252>
 8008946:	2300      	movs	r3, #0
 8008948:	940f      	str	r4, [sp, #60]	; 0x3c
 800894a:	9322      	str	r3, [sp, #136]	; 0x88
 800894c:	3b01      	subs	r3, #1
 800894e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008950:	9307      	str	r3, [sp, #28]
 8008952:	2200      	movs	r2, #0
 8008954:	3313      	adds	r3, #19
 8008956:	e7cf      	b.n	80088f8 <_dtoa_r+0x248>
 8008958:	2301      	movs	r3, #1
 800895a:	930f      	str	r3, [sp, #60]	; 0x3c
 800895c:	3b02      	subs	r3, #2
 800895e:	e7f6      	b.n	800894e <_dtoa_r+0x29e>
 8008960:	3101      	adds	r1, #1
 8008962:	0052      	lsls	r2, r2, #1
 8008964:	e7dc      	b.n	8008920 <_dtoa_r+0x270>
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	9a06      	ldr	r2, [sp, #24]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	9b07      	ldr	r3, [sp, #28]
 8008970:	2b0e      	cmp	r3, #14
 8008972:	d900      	bls.n	8008976 <_dtoa_r+0x2c6>
 8008974:	e0e5      	b.n	8008b42 <_dtoa_r+0x492>
 8008976:	2c00      	cmp	r4, #0
 8008978:	d100      	bne.n	800897c <_dtoa_r+0x2cc>
 800897a:	e0e2      	b.n	8008b42 <_dtoa_r+0x492>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	dd64      	ble.n	8008a4c <_dtoa_r+0x39c>
 8008982:	210f      	movs	r1, #15
 8008984:	9a03      	ldr	r2, [sp, #12]
 8008986:	4b2b      	ldr	r3, [pc, #172]	; (8008a34 <_dtoa_r+0x384>)
 8008988:	400a      	ands	r2, r1
 800898a:	00d2      	lsls	r2, r2, #3
 800898c:	189b      	adds	r3, r3, r2
 800898e:	681e      	ldr	r6, [r3, #0]
 8008990:	685f      	ldr	r7, [r3, #4]
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	2402      	movs	r4, #2
 8008996:	111d      	asrs	r5, r3, #4
 8008998:	05db      	lsls	r3, r3, #23
 800899a:	d50a      	bpl.n	80089b2 <_dtoa_r+0x302>
 800899c:	4b2a      	ldr	r3, [pc, #168]	; (8008a48 <_dtoa_r+0x398>)
 800899e:	400d      	ands	r5, r1
 80089a0:	6a1a      	ldr	r2, [r3, #32]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80089a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089a8:	f7f8 fa38 	bl	8000e1c <__aeabi_ddiv>
 80089ac:	9008      	str	r0, [sp, #32]
 80089ae:	9109      	str	r1, [sp, #36]	; 0x24
 80089b0:	3401      	adds	r4, #1
 80089b2:	4b25      	ldr	r3, [pc, #148]	; (8008a48 <_dtoa_r+0x398>)
 80089b4:	930e      	str	r3, [sp, #56]	; 0x38
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	d108      	bne.n	80089cc <_dtoa_r+0x31c>
 80089ba:	9808      	ldr	r0, [sp, #32]
 80089bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089be:	0032      	movs	r2, r6
 80089c0:	003b      	movs	r3, r7
 80089c2:	f7f8 fa2b 	bl	8000e1c <__aeabi_ddiv>
 80089c6:	9008      	str	r0, [sp, #32]
 80089c8:	9109      	str	r1, [sp, #36]	; 0x24
 80089ca:	e05a      	b.n	8008a82 <_dtoa_r+0x3d2>
 80089cc:	2301      	movs	r3, #1
 80089ce:	421d      	tst	r5, r3
 80089d0:	d009      	beq.n	80089e6 <_dtoa_r+0x336>
 80089d2:	18e4      	adds	r4, r4, r3
 80089d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d6:	0030      	movs	r0, r6
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	0039      	movs	r1, r7
 80089de:	f7f8 fe17 	bl	8001610 <__aeabi_dmul>
 80089e2:	0006      	movs	r6, r0
 80089e4:	000f      	movs	r7, r1
 80089e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089e8:	106d      	asrs	r5, r5, #1
 80089ea:	3308      	adds	r3, #8
 80089ec:	e7e2      	b.n	80089b4 <_dtoa_r+0x304>
 80089ee:	46c0      	nop			; (mov r8, r8)
 80089f0:	0800bacd 	.word	0x0800bacd
 80089f4:	0800bae4 	.word	0x0800bae4
 80089f8:	7ff00000 	.word	0x7ff00000
 80089fc:	0000270f 	.word	0x0000270f
 8008a00:	0800bac9 	.word	0x0800bac9
 8008a04:	0800bacc 	.word	0x0800bacc
 8008a08:	0800bd2b 	.word	0x0800bd2b
 8008a0c:	0800bd2c 	.word	0x0800bd2c
 8008a10:	3ff00000 	.word	0x3ff00000
 8008a14:	fffffc01 	.word	0xfffffc01
 8008a18:	3ff80000 	.word	0x3ff80000
 8008a1c:	636f4361 	.word	0x636f4361
 8008a20:	3fd287a7 	.word	0x3fd287a7
 8008a24:	8b60c8b3 	.word	0x8b60c8b3
 8008a28:	3fc68a28 	.word	0x3fc68a28
 8008a2c:	509f79fb 	.word	0x509f79fb
 8008a30:	3fd34413 	.word	0x3fd34413
 8008a34:	0800bc30 	.word	0x0800bc30
 8008a38:	00000432 	.word	0x00000432
 8008a3c:	00000412 	.word	0x00000412
 8008a40:	fe100000 	.word	0xfe100000
 8008a44:	0800bb3c 	.word	0x0800bb3c
 8008a48:	0800bc08 	.word	0x0800bc08
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	2402      	movs	r4, #2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d016      	beq.n	8008a82 <_dtoa_r+0x3d2>
 8008a54:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008a56:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a58:	220f      	movs	r2, #15
 8008a5a:	425d      	negs	r5, r3
 8008a5c:	402a      	ands	r2, r5
 8008a5e:	4bdd      	ldr	r3, [pc, #884]	; (8008dd4 <_dtoa_r+0x724>)
 8008a60:	00d2      	lsls	r2, r2, #3
 8008a62:	189b      	adds	r3, r3, r2
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f7f8 fdd2 	bl	8001610 <__aeabi_dmul>
 8008a6c:	2701      	movs	r7, #1
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9008      	str	r0, [sp, #32]
 8008a72:	9109      	str	r1, [sp, #36]	; 0x24
 8008a74:	4ed8      	ldr	r6, [pc, #864]	; (8008dd8 <_dtoa_r+0x728>)
 8008a76:	112d      	asrs	r5, r5, #4
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	d000      	beq.n	8008a7e <_dtoa_r+0x3ce>
 8008a7c:	e091      	b.n	8008ba2 <_dtoa_r+0x4f2>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1a1      	bne.n	80089c6 <_dtoa_r+0x316>
 8008a82:	9e08      	ldr	r6, [sp, #32]
 8008a84:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d100      	bne.n	8008a8e <_dtoa_r+0x3de>
 8008a8c:	e094      	b.n	8008bb8 <_dtoa_r+0x508>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	0030      	movs	r0, r6
 8008a92:	0039      	movs	r1, r7
 8008a94:	4bd1      	ldr	r3, [pc, #836]	; (8008ddc <_dtoa_r+0x72c>)
 8008a96:	f7f7 fcdd 	bl	8000454 <__aeabi_dcmplt>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d100      	bne.n	8008aa0 <_dtoa_r+0x3f0>
 8008a9e:	e08b      	b.n	8008bb8 <_dtoa_r+0x508>
 8008aa0:	9b07      	ldr	r3, [sp, #28]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d100      	bne.n	8008aa8 <_dtoa_r+0x3f8>
 8008aa6:	e087      	b.n	8008bb8 <_dtoa_r+0x508>
 8008aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dd45      	ble.n	8008b3a <_dtoa_r+0x48a>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ab6:	0030      	movs	r0, r6
 8008ab8:	4bc9      	ldr	r3, [pc, #804]	; (8008de0 <_dtoa_r+0x730>)
 8008aba:	0039      	movs	r1, r7
 8008abc:	f7f8 fda8 	bl	8001610 <__aeabi_dmul>
 8008ac0:	9008      	str	r0, [sp, #32]
 8008ac2:	9109      	str	r1, [sp, #36]	; 0x24
 8008ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ac6:	3401      	adds	r4, #1
 8008ac8:	0020      	movs	r0, r4
 8008aca:	9e08      	ldr	r6, [sp, #32]
 8008acc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ace:	9312      	str	r3, [sp, #72]	; 0x48
 8008ad0:	f7f9 fc36 	bl	8002340 <__aeabi_i2d>
 8008ad4:	0032      	movs	r2, r6
 8008ad6:	003b      	movs	r3, r7
 8008ad8:	f7f8 fd9a 	bl	8001610 <__aeabi_dmul>
 8008adc:	2200      	movs	r2, #0
 8008ade:	4bc1      	ldr	r3, [pc, #772]	; (8008de4 <_dtoa_r+0x734>)
 8008ae0:	f7f7 fe3c 	bl	800075c <__aeabi_dadd>
 8008ae4:	4ac0      	ldr	r2, [pc, #768]	; (8008de8 <_dtoa_r+0x738>)
 8008ae6:	9014      	str	r0, [sp, #80]	; 0x50
 8008ae8:	9115      	str	r1, [sp, #84]	; 0x54
 8008aea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008aec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008aee:	4694      	mov	ip, r2
 8008af0:	9308      	str	r3, [sp, #32]
 8008af2:	9409      	str	r4, [sp, #36]	; 0x24
 8008af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008af6:	4463      	add	r3, ip
 8008af8:	9318      	str	r3, [sp, #96]	; 0x60
 8008afa:	9309      	str	r3, [sp, #36]	; 0x24
 8008afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d15e      	bne.n	8008bc0 <_dtoa_r+0x510>
 8008b02:	2200      	movs	r2, #0
 8008b04:	4bb9      	ldr	r3, [pc, #740]	; (8008dec <_dtoa_r+0x73c>)
 8008b06:	0030      	movs	r0, r6
 8008b08:	0039      	movs	r1, r7
 8008b0a:	f7f9 f843 	bl	8001b94 <__aeabi_dsub>
 8008b0e:	9a08      	ldr	r2, [sp, #32]
 8008b10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008b12:	0004      	movs	r4, r0
 8008b14:	000d      	movs	r5, r1
 8008b16:	f7f7 fcb1 	bl	800047c <__aeabi_dcmpgt>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d000      	beq.n	8008b20 <_dtoa_r+0x470>
 8008b1e:	e2b3      	b.n	8009088 <_dtoa_r+0x9d8>
 8008b20:	48b3      	ldr	r0, [pc, #716]	; (8008df0 <_dtoa_r+0x740>)
 8008b22:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008b24:	4684      	mov	ip, r0
 8008b26:	4461      	add	r1, ip
 8008b28:	000b      	movs	r3, r1
 8008b2a:	0020      	movs	r0, r4
 8008b2c:	0029      	movs	r1, r5
 8008b2e:	9a08      	ldr	r2, [sp, #32]
 8008b30:	f7f7 fc90 	bl	8000454 <__aeabi_dcmplt>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d000      	beq.n	8008b3a <_dtoa_r+0x48a>
 8008b38:	e2a3      	b.n	8009082 <_dtoa_r+0x9d2>
 8008b3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008b3e:	9308      	str	r3, [sp, #32]
 8008b40:	9409      	str	r4, [sp, #36]	; 0x24
 8008b42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	da00      	bge.n	8008b4a <_dtoa_r+0x49a>
 8008b48:	e179      	b.n	8008e3e <_dtoa_r+0x78e>
 8008b4a:	9a03      	ldr	r2, [sp, #12]
 8008b4c:	2a0e      	cmp	r2, #14
 8008b4e:	dd00      	ble.n	8008b52 <_dtoa_r+0x4a2>
 8008b50:	e175      	b.n	8008e3e <_dtoa_r+0x78e>
 8008b52:	4ba0      	ldr	r3, [pc, #640]	; (8008dd4 <_dtoa_r+0x724>)
 8008b54:	00d2      	lsls	r2, r2, #3
 8008b56:	189b      	adds	r3, r3, r2
 8008b58:	681e      	ldr	r6, [r3, #0]
 8008b5a:	685f      	ldr	r7, [r3, #4]
 8008b5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	db00      	blt.n	8008b64 <_dtoa_r+0x4b4>
 8008b62:	e0e5      	b.n	8008d30 <_dtoa_r+0x680>
 8008b64:	9b07      	ldr	r3, [sp, #28]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dd00      	ble.n	8008b6c <_dtoa_r+0x4bc>
 8008b6a:	e0e1      	b.n	8008d30 <_dtoa_r+0x680>
 8008b6c:	d000      	beq.n	8008b70 <_dtoa_r+0x4c0>
 8008b6e:	e288      	b.n	8009082 <_dtoa_r+0x9d2>
 8008b70:	2200      	movs	r2, #0
 8008b72:	0030      	movs	r0, r6
 8008b74:	0039      	movs	r1, r7
 8008b76:	4b9d      	ldr	r3, [pc, #628]	; (8008dec <_dtoa_r+0x73c>)
 8008b78:	f7f8 fd4a 	bl	8001610 <__aeabi_dmul>
 8008b7c:	9a08      	ldr	r2, [sp, #32]
 8008b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b80:	f7f7 fc86 	bl	8000490 <__aeabi_dcmpge>
 8008b84:	9e07      	ldr	r6, [sp, #28]
 8008b86:	0037      	movs	r7, r6
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d000      	beq.n	8008b8e <_dtoa_r+0x4de>
 8008b8c:	e25f      	b.n	800904e <_dtoa_r+0x99e>
 8008b8e:	9b06      	ldr	r3, [sp, #24]
 8008b90:	9a06      	ldr	r2, [sp, #24]
 8008b92:	3301      	adds	r3, #1
 8008b94:	9308      	str	r3, [sp, #32]
 8008b96:	2331      	movs	r3, #49	; 0x31
 8008b98:	7013      	strb	r3, [r2, #0]
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	9303      	str	r3, [sp, #12]
 8008ba0:	e25a      	b.n	8009058 <_dtoa_r+0x9a8>
 8008ba2:	423d      	tst	r5, r7
 8008ba4:	d005      	beq.n	8008bb2 <_dtoa_r+0x502>
 8008ba6:	6832      	ldr	r2, [r6, #0]
 8008ba8:	6873      	ldr	r3, [r6, #4]
 8008baa:	f7f8 fd31 	bl	8001610 <__aeabi_dmul>
 8008bae:	003b      	movs	r3, r7
 8008bb0:	3401      	adds	r4, #1
 8008bb2:	106d      	asrs	r5, r5, #1
 8008bb4:	3608      	adds	r6, #8
 8008bb6:	e75f      	b.n	8008a78 <_dtoa_r+0x3c8>
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	930e      	str	r3, [sp, #56]	; 0x38
 8008bbc:	9b07      	ldr	r3, [sp, #28]
 8008bbe:	e783      	b.n	8008ac8 <_dtoa_r+0x418>
 8008bc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bc2:	4b84      	ldr	r3, [pc, #528]	; (8008dd4 <_dtoa_r+0x724>)
 8008bc4:	3a01      	subs	r2, #1
 8008bc6:	00d2      	lsls	r2, r2, #3
 8008bc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008bca:	189b      	adds	r3, r3, r2
 8008bcc:	9c08      	ldr	r4, [sp, #32]
 8008bce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d051      	beq.n	8008c7c <_dtoa_r+0x5cc>
 8008bd8:	2000      	movs	r0, #0
 8008bda:	4986      	ldr	r1, [pc, #536]	; (8008df4 <_dtoa_r+0x744>)
 8008bdc:	f7f8 f91e 	bl	8000e1c <__aeabi_ddiv>
 8008be0:	0022      	movs	r2, r4
 8008be2:	002b      	movs	r3, r5
 8008be4:	f7f8 ffd6 	bl	8001b94 <__aeabi_dsub>
 8008be8:	9a06      	ldr	r2, [sp, #24]
 8008bea:	0004      	movs	r4, r0
 8008bec:	4694      	mov	ip, r2
 8008bee:	000d      	movs	r5, r1
 8008bf0:	9b06      	ldr	r3, [sp, #24]
 8008bf2:	9314      	str	r3, [sp, #80]	; 0x50
 8008bf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bf6:	4463      	add	r3, ip
 8008bf8:	9318      	str	r3, [sp, #96]	; 0x60
 8008bfa:	0039      	movs	r1, r7
 8008bfc:	0030      	movs	r0, r6
 8008bfe:	f7f9 fb69 	bl	80022d4 <__aeabi_d2iz>
 8008c02:	9012      	str	r0, [sp, #72]	; 0x48
 8008c04:	f7f9 fb9c 	bl	8002340 <__aeabi_i2d>
 8008c08:	0002      	movs	r2, r0
 8008c0a:	000b      	movs	r3, r1
 8008c0c:	0030      	movs	r0, r6
 8008c0e:	0039      	movs	r1, r7
 8008c10:	f7f8 ffc0 	bl	8001b94 <__aeabi_dsub>
 8008c14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c18:	3301      	adds	r3, #1
 8008c1a:	9308      	str	r3, [sp, #32]
 8008c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c1e:	0006      	movs	r6, r0
 8008c20:	3330      	adds	r3, #48	; 0x30
 8008c22:	7013      	strb	r3, [r2, #0]
 8008c24:	0022      	movs	r2, r4
 8008c26:	002b      	movs	r3, r5
 8008c28:	000f      	movs	r7, r1
 8008c2a:	f7f7 fc13 	bl	8000454 <__aeabi_dcmplt>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d174      	bne.n	8008d1c <_dtoa_r+0x66c>
 8008c32:	0032      	movs	r2, r6
 8008c34:	003b      	movs	r3, r7
 8008c36:	2000      	movs	r0, #0
 8008c38:	4968      	ldr	r1, [pc, #416]	; (8008ddc <_dtoa_r+0x72c>)
 8008c3a:	f7f8 ffab 	bl	8001b94 <__aeabi_dsub>
 8008c3e:	0022      	movs	r2, r4
 8008c40:	002b      	movs	r3, r5
 8008c42:	f7f7 fc07 	bl	8000454 <__aeabi_dcmplt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d000      	beq.n	8008c4c <_dtoa_r+0x59c>
 8008c4a:	e0d7      	b.n	8008dfc <_dtoa_r+0x74c>
 8008c4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008c4e:	9a08      	ldr	r2, [sp, #32]
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d100      	bne.n	8008c56 <_dtoa_r+0x5a6>
 8008c54:	e771      	b.n	8008b3a <_dtoa_r+0x48a>
 8008c56:	2200      	movs	r2, #0
 8008c58:	0020      	movs	r0, r4
 8008c5a:	0029      	movs	r1, r5
 8008c5c:	4b60      	ldr	r3, [pc, #384]	; (8008de0 <_dtoa_r+0x730>)
 8008c5e:	f7f8 fcd7 	bl	8001610 <__aeabi_dmul>
 8008c62:	4b5f      	ldr	r3, [pc, #380]	; (8008de0 <_dtoa_r+0x730>)
 8008c64:	0004      	movs	r4, r0
 8008c66:	000d      	movs	r5, r1
 8008c68:	0030      	movs	r0, r6
 8008c6a:	0039      	movs	r1, r7
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f7f8 fccf 	bl	8001610 <__aeabi_dmul>
 8008c72:	9b08      	ldr	r3, [sp, #32]
 8008c74:	0006      	movs	r6, r0
 8008c76:	000f      	movs	r7, r1
 8008c78:	9314      	str	r3, [sp, #80]	; 0x50
 8008c7a:	e7be      	b.n	8008bfa <_dtoa_r+0x54a>
 8008c7c:	0020      	movs	r0, r4
 8008c7e:	0029      	movs	r1, r5
 8008c80:	f7f8 fcc6 	bl	8001610 <__aeabi_dmul>
 8008c84:	9a06      	ldr	r2, [sp, #24]
 8008c86:	9b06      	ldr	r3, [sp, #24]
 8008c88:	4694      	mov	ip, r2
 8008c8a:	9308      	str	r3, [sp, #32]
 8008c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c8e:	9014      	str	r0, [sp, #80]	; 0x50
 8008c90:	9115      	str	r1, [sp, #84]	; 0x54
 8008c92:	4463      	add	r3, ip
 8008c94:	9319      	str	r3, [sp, #100]	; 0x64
 8008c96:	0030      	movs	r0, r6
 8008c98:	0039      	movs	r1, r7
 8008c9a:	f7f9 fb1b 	bl	80022d4 <__aeabi_d2iz>
 8008c9e:	9018      	str	r0, [sp, #96]	; 0x60
 8008ca0:	f7f9 fb4e 	bl	8002340 <__aeabi_i2d>
 8008ca4:	0002      	movs	r2, r0
 8008ca6:	000b      	movs	r3, r1
 8008ca8:	0030      	movs	r0, r6
 8008caa:	0039      	movs	r1, r7
 8008cac:	f7f8 ff72 	bl	8001b94 <__aeabi_dsub>
 8008cb0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008cb2:	9b08      	ldr	r3, [sp, #32]
 8008cb4:	3630      	adds	r6, #48	; 0x30
 8008cb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cb8:	701e      	strb	r6, [r3, #0]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	0004      	movs	r4, r0
 8008cbe:	000d      	movs	r5, r1
 8008cc0:	9308      	str	r3, [sp, #32]
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d12d      	bne.n	8008d22 <_dtoa_r+0x672>
 8008cc6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008cc8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008cca:	9a06      	ldr	r2, [sp, #24]
 8008ccc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cce:	4694      	mov	ip, r2
 8008cd0:	4463      	add	r3, ip
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	9308      	str	r3, [sp, #32]
 8008cd6:	4b47      	ldr	r3, [pc, #284]	; (8008df4 <_dtoa_r+0x744>)
 8008cd8:	f7f7 fd40 	bl	800075c <__aeabi_dadd>
 8008cdc:	0002      	movs	r2, r0
 8008cde:	000b      	movs	r3, r1
 8008ce0:	0020      	movs	r0, r4
 8008ce2:	0029      	movs	r1, r5
 8008ce4:	f7f7 fbca 	bl	800047c <__aeabi_dcmpgt>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d000      	beq.n	8008cee <_dtoa_r+0x63e>
 8008cec:	e086      	b.n	8008dfc <_dtoa_r+0x74c>
 8008cee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	493f      	ldr	r1, [pc, #252]	; (8008df4 <_dtoa_r+0x744>)
 8008cf6:	f7f8 ff4d 	bl	8001b94 <__aeabi_dsub>
 8008cfa:	0002      	movs	r2, r0
 8008cfc:	000b      	movs	r3, r1
 8008cfe:	0020      	movs	r0, r4
 8008d00:	0029      	movs	r1, r5
 8008d02:	f7f7 fba7 	bl	8000454 <__aeabi_dcmplt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d100      	bne.n	8008d0c <_dtoa_r+0x65c>
 8008d0a:	e716      	b.n	8008b3a <_dtoa_r+0x48a>
 8008d0c:	9b08      	ldr	r3, [sp, #32]
 8008d0e:	001a      	movs	r2, r3
 8008d10:	3a01      	subs	r2, #1
 8008d12:	9208      	str	r2, [sp, #32]
 8008d14:	7812      	ldrb	r2, [r2, #0]
 8008d16:	2a30      	cmp	r2, #48	; 0x30
 8008d18:	d0f8      	beq.n	8008d0c <_dtoa_r+0x65c>
 8008d1a:	9308      	str	r3, [sp, #32]
 8008d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	e046      	b.n	8008db0 <_dtoa_r+0x700>
 8008d22:	2200      	movs	r2, #0
 8008d24:	4b2e      	ldr	r3, [pc, #184]	; (8008de0 <_dtoa_r+0x730>)
 8008d26:	f7f8 fc73 	bl	8001610 <__aeabi_dmul>
 8008d2a:	0006      	movs	r6, r0
 8008d2c:	000f      	movs	r7, r1
 8008d2e:	e7b2      	b.n	8008c96 <_dtoa_r+0x5e6>
 8008d30:	9b06      	ldr	r3, [sp, #24]
 8008d32:	9a06      	ldr	r2, [sp, #24]
 8008d34:	930a      	str	r3, [sp, #40]	; 0x28
 8008d36:	9b07      	ldr	r3, [sp, #28]
 8008d38:	9c08      	ldr	r4, [sp, #32]
 8008d3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	189b      	adds	r3, r3, r2
 8008d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d42:	0032      	movs	r2, r6
 8008d44:	003b      	movs	r3, r7
 8008d46:	0020      	movs	r0, r4
 8008d48:	0029      	movs	r1, r5
 8008d4a:	f7f8 f867 	bl	8000e1c <__aeabi_ddiv>
 8008d4e:	f7f9 fac1 	bl	80022d4 <__aeabi_d2iz>
 8008d52:	9007      	str	r0, [sp, #28]
 8008d54:	f7f9 faf4 	bl	8002340 <__aeabi_i2d>
 8008d58:	0032      	movs	r2, r6
 8008d5a:	003b      	movs	r3, r7
 8008d5c:	f7f8 fc58 	bl	8001610 <__aeabi_dmul>
 8008d60:	0002      	movs	r2, r0
 8008d62:	000b      	movs	r3, r1
 8008d64:	0020      	movs	r0, r4
 8008d66:	0029      	movs	r1, r5
 8008d68:	f7f8 ff14 	bl	8001b94 <__aeabi_dsub>
 8008d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d6e:	001a      	movs	r2, r3
 8008d70:	3201      	adds	r2, #1
 8008d72:	920a      	str	r2, [sp, #40]	; 0x28
 8008d74:	9208      	str	r2, [sp, #32]
 8008d76:	9a07      	ldr	r2, [sp, #28]
 8008d78:	3230      	adds	r2, #48	; 0x30
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d14f      	bne.n	8008e22 <_dtoa_r+0x772>
 8008d82:	0002      	movs	r2, r0
 8008d84:	000b      	movs	r3, r1
 8008d86:	f7f7 fce9 	bl	800075c <__aeabi_dadd>
 8008d8a:	0032      	movs	r2, r6
 8008d8c:	003b      	movs	r3, r7
 8008d8e:	0004      	movs	r4, r0
 8008d90:	000d      	movs	r5, r1
 8008d92:	f7f7 fb73 	bl	800047c <__aeabi_dcmpgt>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d12e      	bne.n	8008df8 <_dtoa_r+0x748>
 8008d9a:	0032      	movs	r2, r6
 8008d9c:	003b      	movs	r3, r7
 8008d9e:	0020      	movs	r0, r4
 8008da0:	0029      	movs	r1, r5
 8008da2:	f7f7 fb51 	bl	8000448 <__aeabi_dcmpeq>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d002      	beq.n	8008db0 <_dtoa_r+0x700>
 8008daa:	9b07      	ldr	r3, [sp, #28]
 8008dac:	07de      	lsls	r6, r3, #31
 8008dae:	d423      	bmi.n	8008df8 <_dtoa_r+0x748>
 8008db0:	9905      	ldr	r1, [sp, #20]
 8008db2:	9804      	ldr	r0, [sp, #16]
 8008db4:	f000 fe86 	bl	8009ac4 <_Bfree>
 8008db8:	2300      	movs	r3, #0
 8008dba:	9a08      	ldr	r2, [sp, #32]
 8008dbc:	7013      	strb	r3, [r2, #0]
 8008dbe:	9b03      	ldr	r3, [sp, #12]
 8008dc0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d100      	bne.n	8008dce <_dtoa_r+0x71e>
 8008dcc:	e4ba      	b.n	8008744 <_dtoa_r+0x94>
 8008dce:	9a08      	ldr	r2, [sp, #32]
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	e4b7      	b.n	8008744 <_dtoa_r+0x94>
 8008dd4:	0800bc30 	.word	0x0800bc30
 8008dd8:	0800bc08 	.word	0x0800bc08
 8008ddc:	3ff00000 	.word	0x3ff00000
 8008de0:	40240000 	.word	0x40240000
 8008de4:	401c0000 	.word	0x401c0000
 8008de8:	fcc00000 	.word	0xfcc00000
 8008dec:	40140000 	.word	0x40140000
 8008df0:	7cc00000 	.word	0x7cc00000
 8008df4:	3fe00000 	.word	0x3fe00000
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8008dfc:	9b08      	ldr	r3, [sp, #32]
 8008dfe:	9308      	str	r3, [sp, #32]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	781a      	ldrb	r2, [r3, #0]
 8008e04:	2a39      	cmp	r2, #57	; 0x39
 8008e06:	d108      	bne.n	8008e1a <_dtoa_r+0x76a>
 8008e08:	9a06      	ldr	r2, [sp, #24]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d1f7      	bne.n	8008dfe <_dtoa_r+0x74e>
 8008e0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e10:	9906      	ldr	r1, [sp, #24]
 8008e12:	3201      	adds	r2, #1
 8008e14:	920e      	str	r2, [sp, #56]	; 0x38
 8008e16:	2230      	movs	r2, #48	; 0x30
 8008e18:	700a      	strb	r2, [r1, #0]
 8008e1a:	781a      	ldrb	r2, [r3, #0]
 8008e1c:	3201      	adds	r2, #1
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	e77c      	b.n	8008d1c <_dtoa_r+0x66c>
 8008e22:	2200      	movs	r2, #0
 8008e24:	4ba9      	ldr	r3, [pc, #676]	; (80090cc <_dtoa_r+0xa1c>)
 8008e26:	f7f8 fbf3 	bl	8001610 <__aeabi_dmul>
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	0004      	movs	r4, r0
 8008e30:	000d      	movs	r5, r1
 8008e32:	f7f7 fb09 	bl	8000448 <__aeabi_dcmpeq>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d100      	bne.n	8008e3c <_dtoa_r+0x78c>
 8008e3a:	e782      	b.n	8008d42 <_dtoa_r+0x692>
 8008e3c:	e7b8      	b.n	8008db0 <_dtoa_r+0x700>
 8008e3e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008e40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008e42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e44:	2f00      	cmp	r7, #0
 8008e46:	d012      	beq.n	8008e6e <_dtoa_r+0x7be>
 8008e48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e4a:	2a01      	cmp	r2, #1
 8008e4c:	dc6e      	bgt.n	8008f2c <_dtoa_r+0x87c>
 8008e4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e50:	2a00      	cmp	r2, #0
 8008e52:	d065      	beq.n	8008f20 <_dtoa_r+0x870>
 8008e54:	4a9e      	ldr	r2, [pc, #632]	; (80090d0 <_dtoa_r+0xa20>)
 8008e56:	189b      	adds	r3, r3, r2
 8008e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	18d2      	adds	r2, r2, r3
 8008e5e:	920a      	str	r2, [sp, #40]	; 0x28
 8008e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e62:	9804      	ldr	r0, [sp, #16]
 8008e64:	18d3      	adds	r3, r2, r3
 8008e66:	930c      	str	r3, [sp, #48]	; 0x30
 8008e68:	f000 ff28 	bl	8009cbc <__i2b>
 8008e6c:	0007      	movs	r7, r0
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	d00e      	beq.n	8008e90 <_dtoa_r+0x7e0>
 8008e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dd0b      	ble.n	8008e90 <_dtoa_r+0x7e0>
 8008e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e7a:	0023      	movs	r3, r4
 8008e7c:	4294      	cmp	r4, r2
 8008e7e:	dd00      	ble.n	8008e82 <_dtoa_r+0x7d2>
 8008e80:	0013      	movs	r3, r2
 8008e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e84:	1ae4      	subs	r4, r4, r3
 8008e86:	1ad2      	subs	r2, r2, r3
 8008e88:	920a      	str	r2, [sp, #40]	; 0x28
 8008e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d01e      	beq.n	8008ed4 <_dtoa_r+0x824>
 8008e96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d05c      	beq.n	8008f56 <_dtoa_r+0x8a6>
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	dd10      	ble.n	8008ec2 <_dtoa_r+0x812>
 8008ea0:	0039      	movs	r1, r7
 8008ea2:	002a      	movs	r2, r5
 8008ea4:	9804      	ldr	r0, [sp, #16]
 8008ea6:	f000 ffd1 	bl	8009e4c <__pow5mult>
 8008eaa:	9a05      	ldr	r2, [sp, #20]
 8008eac:	0001      	movs	r1, r0
 8008eae:	0007      	movs	r7, r0
 8008eb0:	9804      	ldr	r0, [sp, #16]
 8008eb2:	f000 ff1b 	bl	8009cec <__multiply>
 8008eb6:	0006      	movs	r6, r0
 8008eb8:	9905      	ldr	r1, [sp, #20]
 8008eba:	9804      	ldr	r0, [sp, #16]
 8008ebc:	f000 fe02 	bl	8009ac4 <_Bfree>
 8008ec0:	9605      	str	r6, [sp, #20]
 8008ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ec4:	1b5a      	subs	r2, r3, r5
 8008ec6:	42ab      	cmp	r3, r5
 8008ec8:	d004      	beq.n	8008ed4 <_dtoa_r+0x824>
 8008eca:	9905      	ldr	r1, [sp, #20]
 8008ecc:	9804      	ldr	r0, [sp, #16]
 8008ece:	f000 ffbd 	bl	8009e4c <__pow5mult>
 8008ed2:	9005      	str	r0, [sp, #20]
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	9804      	ldr	r0, [sp, #16]
 8008ed8:	f000 fef0 	bl	8009cbc <__i2b>
 8008edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ede:	0006      	movs	r6, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	dd3a      	ble.n	8008f5a <_dtoa_r+0x8aa>
 8008ee4:	001a      	movs	r2, r3
 8008ee6:	0001      	movs	r1, r0
 8008ee8:	9804      	ldr	r0, [sp, #16]
 8008eea:	f000 ffaf 	bl	8009e4c <__pow5mult>
 8008eee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ef0:	0006      	movs	r6, r0
 8008ef2:	2500      	movs	r5, #0
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	dc38      	bgt.n	8008f6a <_dtoa_r+0x8ba>
 8008ef8:	2500      	movs	r5, #0
 8008efa:	9b08      	ldr	r3, [sp, #32]
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	d130      	bne.n	8008f62 <_dtoa_r+0x8b2>
 8008f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f02:	031b      	lsls	r3, r3, #12
 8008f04:	42ab      	cmp	r3, r5
 8008f06:	d12c      	bne.n	8008f62 <_dtoa_r+0x8b2>
 8008f08:	4b72      	ldr	r3, [pc, #456]	; (80090d4 <_dtoa_r+0xa24>)
 8008f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f0c:	4213      	tst	r3, r2
 8008f0e:	d028      	beq.n	8008f62 <_dtoa_r+0x8b2>
 8008f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f12:	3501      	adds	r5, #1
 8008f14:	3301      	adds	r3, #1
 8008f16:	930a      	str	r3, [sp, #40]	; 0x28
 8008f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	930c      	str	r3, [sp, #48]	; 0x30
 8008f1e:	e020      	b.n	8008f62 <_dtoa_r+0x8b2>
 8008f20:	2336      	movs	r3, #54	; 0x36
 8008f22:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008f26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	e795      	b.n	8008e58 <_dtoa_r+0x7a8>
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	1e5d      	subs	r5, r3, #1
 8008f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f32:	42ab      	cmp	r3, r5
 8008f34:	db07      	blt.n	8008f46 <_dtoa_r+0x896>
 8008f36:	1b5d      	subs	r5, r3, r5
 8008f38:	9b07      	ldr	r3, [sp, #28]
 8008f3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	da8b      	bge.n	8008e58 <_dtoa_r+0x7a8>
 8008f40:	1ae4      	subs	r4, r4, r3
 8008f42:	2300      	movs	r3, #0
 8008f44:	e788      	b.n	8008e58 <_dtoa_r+0x7a8>
 8008f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f4a:	1aeb      	subs	r3, r5, r3
 8008f4c:	18d3      	adds	r3, r2, r3
 8008f4e:	950d      	str	r5, [sp, #52]	; 0x34
 8008f50:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f52:	2500      	movs	r5, #0
 8008f54:	e7f0      	b.n	8008f38 <_dtoa_r+0x888>
 8008f56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f58:	e7b7      	b.n	8008eca <_dtoa_r+0x81a>
 8008f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f5c:	2500      	movs	r5, #0
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	ddca      	ble.n	8008ef8 <_dtoa_r+0x848>
 8008f62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f64:	2001      	movs	r0, #1
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d008      	beq.n	8008f7c <_dtoa_r+0x8cc>
 8008f6a:	6933      	ldr	r3, [r6, #16]
 8008f6c:	3303      	adds	r3, #3
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	18f3      	adds	r3, r6, r3
 8008f72:	6858      	ldr	r0, [r3, #4]
 8008f74:	f000 fe5a 	bl	8009c2c <__hi0bits>
 8008f78:	2320      	movs	r3, #32
 8008f7a:	1a18      	subs	r0, r3, r0
 8008f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f7e:	1818      	adds	r0, r3, r0
 8008f80:	0002      	movs	r2, r0
 8008f82:	231f      	movs	r3, #31
 8008f84:	401a      	ands	r2, r3
 8008f86:	4218      	tst	r0, r3
 8008f88:	d047      	beq.n	800901a <_dtoa_r+0x96a>
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	dd3f      	ble.n	8009012 <_dtoa_r+0x962>
 8008f92:	231c      	movs	r3, #28
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f98:	18e4      	adds	r4, r4, r3
 8008f9a:	18d2      	adds	r2, r2, r3
 8008f9c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fa0:	18d3      	adds	r3, r2, r3
 8008fa2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dd05      	ble.n	8008fb6 <_dtoa_r+0x906>
 8008faa:	001a      	movs	r2, r3
 8008fac:	9905      	ldr	r1, [sp, #20]
 8008fae:	9804      	ldr	r0, [sp, #16]
 8008fb0:	f000 ffa8 	bl	8009f04 <__lshift>
 8008fb4:	9005      	str	r0, [sp, #20]
 8008fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	dd05      	ble.n	8008fc8 <_dtoa_r+0x918>
 8008fbc:	0031      	movs	r1, r6
 8008fbe:	001a      	movs	r2, r3
 8008fc0:	9804      	ldr	r0, [sp, #16]
 8008fc2:	f000 ff9f 	bl	8009f04 <__lshift>
 8008fc6:	0006      	movs	r6, r0
 8008fc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d027      	beq.n	800901e <_dtoa_r+0x96e>
 8008fce:	0031      	movs	r1, r6
 8008fd0:	9805      	ldr	r0, [sp, #20]
 8008fd2:	f001 f805 	bl	8009fe0 <__mcmp>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	da21      	bge.n	800901e <_dtoa_r+0x96e>
 8008fda:	9b03      	ldr	r3, [sp, #12]
 8008fdc:	220a      	movs	r2, #10
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	9303      	str	r3, [sp, #12]
 8008fe2:	9905      	ldr	r1, [sp, #20]
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9804      	ldr	r0, [sp, #16]
 8008fe8:	f000 fd90 	bl	8009b0c <__multadd>
 8008fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fee:	9005      	str	r0, [sp, #20]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d100      	bne.n	8008ff6 <_dtoa_r+0x946>
 8008ff4:	e15d      	b.n	80092b2 <_dtoa_r+0xc02>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	0039      	movs	r1, r7
 8008ffa:	220a      	movs	r2, #10
 8008ffc:	9804      	ldr	r0, [sp, #16]
 8008ffe:	f000 fd85 	bl	8009b0c <__multadd>
 8009002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009004:	0007      	movs	r7, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	dc49      	bgt.n	800909e <_dtoa_r+0x9ee>
 800900a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800900c:	2b02      	cmp	r3, #2
 800900e:	dc0e      	bgt.n	800902e <_dtoa_r+0x97e>
 8009010:	e045      	b.n	800909e <_dtoa_r+0x9ee>
 8009012:	2b04      	cmp	r3, #4
 8009014:	d0c6      	beq.n	8008fa4 <_dtoa_r+0x8f4>
 8009016:	331c      	adds	r3, #28
 8009018:	e7bd      	b.n	8008f96 <_dtoa_r+0x8e6>
 800901a:	0013      	movs	r3, r2
 800901c:	e7fb      	b.n	8009016 <_dtoa_r+0x966>
 800901e:	9b07      	ldr	r3, [sp, #28]
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc36      	bgt.n	8009092 <_dtoa_r+0x9e2>
 8009024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009026:	2b02      	cmp	r3, #2
 8009028:	dd33      	ble.n	8009092 <_dtoa_r+0x9e2>
 800902a:	9b07      	ldr	r3, [sp, #28]
 800902c:	930b      	str	r3, [sp, #44]	; 0x2c
 800902e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10c      	bne.n	800904e <_dtoa_r+0x99e>
 8009034:	0031      	movs	r1, r6
 8009036:	2205      	movs	r2, #5
 8009038:	9804      	ldr	r0, [sp, #16]
 800903a:	f000 fd67 	bl	8009b0c <__multadd>
 800903e:	0006      	movs	r6, r0
 8009040:	0001      	movs	r1, r0
 8009042:	9805      	ldr	r0, [sp, #20]
 8009044:	f000 ffcc 	bl	8009fe0 <__mcmp>
 8009048:	2800      	cmp	r0, #0
 800904a:	dd00      	ble.n	800904e <_dtoa_r+0x99e>
 800904c:	e59f      	b.n	8008b8e <_dtoa_r+0x4de>
 800904e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009050:	43db      	mvns	r3, r3
 8009052:	9303      	str	r3, [sp, #12]
 8009054:	9b06      	ldr	r3, [sp, #24]
 8009056:	9308      	str	r3, [sp, #32]
 8009058:	2500      	movs	r5, #0
 800905a:	0031      	movs	r1, r6
 800905c:	9804      	ldr	r0, [sp, #16]
 800905e:	f000 fd31 	bl	8009ac4 <_Bfree>
 8009062:	2f00      	cmp	r7, #0
 8009064:	d100      	bne.n	8009068 <_dtoa_r+0x9b8>
 8009066:	e6a3      	b.n	8008db0 <_dtoa_r+0x700>
 8009068:	2d00      	cmp	r5, #0
 800906a:	d005      	beq.n	8009078 <_dtoa_r+0x9c8>
 800906c:	42bd      	cmp	r5, r7
 800906e:	d003      	beq.n	8009078 <_dtoa_r+0x9c8>
 8009070:	0029      	movs	r1, r5
 8009072:	9804      	ldr	r0, [sp, #16]
 8009074:	f000 fd26 	bl	8009ac4 <_Bfree>
 8009078:	0039      	movs	r1, r7
 800907a:	9804      	ldr	r0, [sp, #16]
 800907c:	f000 fd22 	bl	8009ac4 <_Bfree>
 8009080:	e696      	b.n	8008db0 <_dtoa_r+0x700>
 8009082:	2600      	movs	r6, #0
 8009084:	0037      	movs	r7, r6
 8009086:	e7e2      	b.n	800904e <_dtoa_r+0x99e>
 8009088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800908a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	0037      	movs	r7, r6
 8009090:	e57d      	b.n	8008b8e <_dtoa_r+0x4de>
 8009092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d100      	bne.n	800909a <_dtoa_r+0x9ea>
 8009098:	e0c3      	b.n	8009222 <_dtoa_r+0xb72>
 800909a:	9b07      	ldr	r3, [sp, #28]
 800909c:	930b      	str	r3, [sp, #44]	; 0x2c
 800909e:	2c00      	cmp	r4, #0
 80090a0:	dd05      	ble.n	80090ae <_dtoa_r+0x9fe>
 80090a2:	0039      	movs	r1, r7
 80090a4:	0022      	movs	r2, r4
 80090a6:	9804      	ldr	r0, [sp, #16]
 80090a8:	f000 ff2c 	bl	8009f04 <__lshift>
 80090ac:	0007      	movs	r7, r0
 80090ae:	0038      	movs	r0, r7
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	d024      	beq.n	80090fe <_dtoa_r+0xa4e>
 80090b4:	6879      	ldr	r1, [r7, #4]
 80090b6:	9804      	ldr	r0, [sp, #16]
 80090b8:	f000 fcc0 	bl	8009a3c <_Balloc>
 80090bc:	1e04      	subs	r4, r0, #0
 80090be:	d111      	bne.n	80090e4 <_dtoa_r+0xa34>
 80090c0:	0022      	movs	r2, r4
 80090c2:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <_dtoa_r+0xa28>)
 80090c4:	4805      	ldr	r0, [pc, #20]	; (80090dc <_dtoa_r+0xa2c>)
 80090c6:	4906      	ldr	r1, [pc, #24]	; (80090e0 <_dtoa_r+0xa30>)
 80090c8:	f7ff fb07 	bl	80086da <_dtoa_r+0x2a>
 80090cc:	40240000 	.word	0x40240000
 80090d0:	00000433 	.word	0x00000433
 80090d4:	7ff00000 	.word	0x7ff00000
 80090d8:	0800bb3c 	.word	0x0800bb3c
 80090dc:	0800bae4 	.word	0x0800bae4
 80090e0:	000002ef 	.word	0x000002ef
 80090e4:	0039      	movs	r1, r7
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	310c      	adds	r1, #12
 80090ea:	3202      	adds	r2, #2
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	300c      	adds	r0, #12
 80090f0:	f7ff fa3a 	bl	8008568 <memcpy>
 80090f4:	2201      	movs	r2, #1
 80090f6:	0021      	movs	r1, r4
 80090f8:	9804      	ldr	r0, [sp, #16]
 80090fa:	f000 ff03 	bl	8009f04 <__lshift>
 80090fe:	9b06      	ldr	r3, [sp, #24]
 8009100:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009102:	9307      	str	r3, [sp, #28]
 8009104:	3b01      	subs	r3, #1
 8009106:	189b      	adds	r3, r3, r2
 8009108:	2201      	movs	r2, #1
 800910a:	003d      	movs	r5, r7
 800910c:	0007      	movs	r7, r0
 800910e:	930e      	str	r3, [sp, #56]	; 0x38
 8009110:	9b08      	ldr	r3, [sp, #32]
 8009112:	4013      	ands	r3, r2
 8009114:	930d      	str	r3, [sp, #52]	; 0x34
 8009116:	0031      	movs	r1, r6
 8009118:	9805      	ldr	r0, [sp, #20]
 800911a:	f7ff fa39 	bl	8008590 <quorem>
 800911e:	0029      	movs	r1, r5
 8009120:	0004      	movs	r4, r0
 8009122:	900b      	str	r0, [sp, #44]	; 0x2c
 8009124:	9805      	ldr	r0, [sp, #20]
 8009126:	f000 ff5b 	bl	8009fe0 <__mcmp>
 800912a:	003a      	movs	r2, r7
 800912c:	900c      	str	r0, [sp, #48]	; 0x30
 800912e:	0031      	movs	r1, r6
 8009130:	9804      	ldr	r0, [sp, #16]
 8009132:	f000 ff71 	bl	800a018 <__mdiff>
 8009136:	2201      	movs	r2, #1
 8009138:	68c3      	ldr	r3, [r0, #12]
 800913a:	3430      	adds	r4, #48	; 0x30
 800913c:	9008      	str	r0, [sp, #32]
 800913e:	920a      	str	r2, [sp, #40]	; 0x28
 8009140:	2b00      	cmp	r3, #0
 8009142:	d104      	bne.n	800914e <_dtoa_r+0xa9e>
 8009144:	0001      	movs	r1, r0
 8009146:	9805      	ldr	r0, [sp, #20]
 8009148:	f000 ff4a 	bl	8009fe0 <__mcmp>
 800914c:	900a      	str	r0, [sp, #40]	; 0x28
 800914e:	9908      	ldr	r1, [sp, #32]
 8009150:	9804      	ldr	r0, [sp, #16]
 8009152:	f000 fcb7 	bl	8009ac4 <_Bfree>
 8009156:	9b07      	ldr	r3, [sp, #28]
 8009158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800915a:	3301      	adds	r3, #1
 800915c:	9308      	str	r3, [sp, #32]
 800915e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009160:	4313      	orrs	r3, r2
 8009162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009164:	4313      	orrs	r3, r2
 8009166:	d109      	bne.n	800917c <_dtoa_r+0xacc>
 8009168:	2c39      	cmp	r4, #57	; 0x39
 800916a:	d022      	beq.n	80091b2 <_dtoa_r+0xb02>
 800916c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800916e:	2b00      	cmp	r3, #0
 8009170:	dd01      	ble.n	8009176 <_dtoa_r+0xac6>
 8009172:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009174:	3431      	adds	r4, #49	; 0x31
 8009176:	9b07      	ldr	r3, [sp, #28]
 8009178:	701c      	strb	r4, [r3, #0]
 800917a:	e76e      	b.n	800905a <_dtoa_r+0x9aa>
 800917c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800917e:	2b00      	cmp	r3, #0
 8009180:	db04      	blt.n	800918c <_dtoa_r+0xadc>
 8009182:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009184:	4313      	orrs	r3, r2
 8009186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009188:	4313      	orrs	r3, r2
 800918a:	d11e      	bne.n	80091ca <_dtoa_r+0xb1a>
 800918c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	ddf1      	ble.n	8009176 <_dtoa_r+0xac6>
 8009192:	9905      	ldr	r1, [sp, #20]
 8009194:	2201      	movs	r2, #1
 8009196:	9804      	ldr	r0, [sp, #16]
 8009198:	f000 feb4 	bl	8009f04 <__lshift>
 800919c:	0031      	movs	r1, r6
 800919e:	9005      	str	r0, [sp, #20]
 80091a0:	f000 ff1e 	bl	8009fe0 <__mcmp>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	dc02      	bgt.n	80091ae <_dtoa_r+0xafe>
 80091a8:	d1e5      	bne.n	8009176 <_dtoa_r+0xac6>
 80091aa:	07e3      	lsls	r3, r4, #31
 80091ac:	d5e3      	bpl.n	8009176 <_dtoa_r+0xac6>
 80091ae:	2c39      	cmp	r4, #57	; 0x39
 80091b0:	d1df      	bne.n	8009172 <_dtoa_r+0xac2>
 80091b2:	2339      	movs	r3, #57	; 0x39
 80091b4:	9a07      	ldr	r2, [sp, #28]
 80091b6:	7013      	strb	r3, [r2, #0]
 80091b8:	9b08      	ldr	r3, [sp, #32]
 80091ba:	9308      	str	r3, [sp, #32]
 80091bc:	3b01      	subs	r3, #1
 80091be:	781a      	ldrb	r2, [r3, #0]
 80091c0:	2a39      	cmp	r2, #57	; 0x39
 80091c2:	d063      	beq.n	800928c <_dtoa_r+0xbdc>
 80091c4:	3201      	adds	r2, #1
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	e747      	b.n	800905a <_dtoa_r+0x9aa>
 80091ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd03      	ble.n	80091d8 <_dtoa_r+0xb28>
 80091d0:	2c39      	cmp	r4, #57	; 0x39
 80091d2:	d0ee      	beq.n	80091b2 <_dtoa_r+0xb02>
 80091d4:	3401      	adds	r4, #1
 80091d6:	e7ce      	b.n	8009176 <_dtoa_r+0xac6>
 80091d8:	9b07      	ldr	r3, [sp, #28]
 80091da:	9a07      	ldr	r2, [sp, #28]
 80091dc:	701c      	strb	r4, [r3, #0]
 80091de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d03e      	beq.n	8009262 <_dtoa_r+0xbb2>
 80091e4:	2300      	movs	r3, #0
 80091e6:	220a      	movs	r2, #10
 80091e8:	9905      	ldr	r1, [sp, #20]
 80091ea:	9804      	ldr	r0, [sp, #16]
 80091ec:	f000 fc8e 	bl	8009b0c <__multadd>
 80091f0:	2300      	movs	r3, #0
 80091f2:	9005      	str	r0, [sp, #20]
 80091f4:	220a      	movs	r2, #10
 80091f6:	0029      	movs	r1, r5
 80091f8:	9804      	ldr	r0, [sp, #16]
 80091fa:	42bd      	cmp	r5, r7
 80091fc:	d106      	bne.n	800920c <_dtoa_r+0xb5c>
 80091fe:	f000 fc85 	bl	8009b0c <__multadd>
 8009202:	0005      	movs	r5, r0
 8009204:	0007      	movs	r7, r0
 8009206:	9b08      	ldr	r3, [sp, #32]
 8009208:	9307      	str	r3, [sp, #28]
 800920a:	e784      	b.n	8009116 <_dtoa_r+0xa66>
 800920c:	f000 fc7e 	bl	8009b0c <__multadd>
 8009210:	0039      	movs	r1, r7
 8009212:	0005      	movs	r5, r0
 8009214:	2300      	movs	r3, #0
 8009216:	220a      	movs	r2, #10
 8009218:	9804      	ldr	r0, [sp, #16]
 800921a:	f000 fc77 	bl	8009b0c <__multadd>
 800921e:	0007      	movs	r7, r0
 8009220:	e7f1      	b.n	8009206 <_dtoa_r+0xb56>
 8009222:	9b07      	ldr	r3, [sp, #28]
 8009224:	930b      	str	r3, [sp, #44]	; 0x2c
 8009226:	2500      	movs	r5, #0
 8009228:	0031      	movs	r1, r6
 800922a:	9805      	ldr	r0, [sp, #20]
 800922c:	f7ff f9b0 	bl	8008590 <quorem>
 8009230:	9b06      	ldr	r3, [sp, #24]
 8009232:	3030      	adds	r0, #48	; 0x30
 8009234:	5558      	strb	r0, [r3, r5]
 8009236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009238:	3501      	adds	r5, #1
 800923a:	0004      	movs	r4, r0
 800923c:	42ab      	cmp	r3, r5
 800923e:	dd07      	ble.n	8009250 <_dtoa_r+0xba0>
 8009240:	2300      	movs	r3, #0
 8009242:	220a      	movs	r2, #10
 8009244:	9905      	ldr	r1, [sp, #20]
 8009246:	9804      	ldr	r0, [sp, #16]
 8009248:	f000 fc60 	bl	8009b0c <__multadd>
 800924c:	9005      	str	r0, [sp, #20]
 800924e:	e7eb      	b.n	8009228 <_dtoa_r+0xb78>
 8009250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009252:	2301      	movs	r3, #1
 8009254:	2a00      	cmp	r2, #0
 8009256:	dd00      	ble.n	800925a <_dtoa_r+0xbaa>
 8009258:	0013      	movs	r3, r2
 800925a:	2500      	movs	r5, #0
 800925c:	9a06      	ldr	r2, [sp, #24]
 800925e:	18d3      	adds	r3, r2, r3
 8009260:	9308      	str	r3, [sp, #32]
 8009262:	9905      	ldr	r1, [sp, #20]
 8009264:	2201      	movs	r2, #1
 8009266:	9804      	ldr	r0, [sp, #16]
 8009268:	f000 fe4c 	bl	8009f04 <__lshift>
 800926c:	0031      	movs	r1, r6
 800926e:	9005      	str	r0, [sp, #20]
 8009270:	f000 feb6 	bl	8009fe0 <__mcmp>
 8009274:	2800      	cmp	r0, #0
 8009276:	dc9f      	bgt.n	80091b8 <_dtoa_r+0xb08>
 8009278:	d101      	bne.n	800927e <_dtoa_r+0xbce>
 800927a:	07e4      	lsls	r4, r4, #31
 800927c:	d49c      	bmi.n	80091b8 <_dtoa_r+0xb08>
 800927e:	9b08      	ldr	r3, [sp, #32]
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	3b01      	subs	r3, #1
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	2a30      	cmp	r2, #48	; 0x30
 8009288:	d0fa      	beq.n	8009280 <_dtoa_r+0xbd0>
 800928a:	e6e6      	b.n	800905a <_dtoa_r+0x9aa>
 800928c:	9a06      	ldr	r2, [sp, #24]
 800928e:	429a      	cmp	r2, r3
 8009290:	d193      	bne.n	80091ba <_dtoa_r+0xb0a>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	3301      	adds	r3, #1
 8009296:	9303      	str	r3, [sp, #12]
 8009298:	2331      	movs	r3, #49	; 0x31
 800929a:	7013      	strb	r3, [r2, #0]
 800929c:	e6dd      	b.n	800905a <_dtoa_r+0x9aa>
 800929e:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <_dtoa_r+0xc14>)
 80092a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80092a2:	9306      	str	r3, [sp, #24]
 80092a4:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <_dtoa_r+0xc18>)
 80092a6:	2a00      	cmp	r2, #0
 80092a8:	d001      	beq.n	80092ae <_dtoa_r+0xbfe>
 80092aa:	f7ff fa49 	bl	8008740 <_dtoa_r+0x90>
 80092ae:	f7ff fa49 	bl	8008744 <_dtoa_r+0x94>
 80092b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dcb6      	bgt.n	8009226 <_dtoa_r+0xb76>
 80092b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	dd00      	ble.n	80092c0 <_dtoa_r+0xc10>
 80092be:	e6b6      	b.n	800902e <_dtoa_r+0x97e>
 80092c0:	e7b1      	b.n	8009226 <_dtoa_r+0xb76>
 80092c2:	46c0      	nop			; (mov r8, r8)
 80092c4:	0800bac0 	.word	0x0800bac0
 80092c8:	0800bac8 	.word	0x0800bac8

080092cc <_free_r>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	0005      	movs	r5, r0
 80092d0:	2900      	cmp	r1, #0
 80092d2:	d010      	beq.n	80092f6 <_free_r+0x2a>
 80092d4:	1f0c      	subs	r4, r1, #4
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	da00      	bge.n	80092de <_free_r+0x12>
 80092dc:	18e4      	adds	r4, r4, r3
 80092de:	0028      	movs	r0, r5
 80092e0:	f7fd f970 	bl	80065c4 <__malloc_lock>
 80092e4:	4a1d      	ldr	r2, [pc, #116]	; (800935c <_free_r+0x90>)
 80092e6:	6813      	ldr	r3, [r2, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d105      	bne.n	80092f8 <_free_r+0x2c>
 80092ec:	6063      	str	r3, [r4, #4]
 80092ee:	6014      	str	r4, [r2, #0]
 80092f0:	0028      	movs	r0, r5
 80092f2:	f7fd f96f 	bl	80065d4 <__malloc_unlock>
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	d908      	bls.n	800930e <_free_r+0x42>
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	1821      	adds	r1, r4, r0
 8009300:	428b      	cmp	r3, r1
 8009302:	d1f3      	bne.n	80092ec <_free_r+0x20>
 8009304:	6819      	ldr	r1, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	1809      	adds	r1, r1, r0
 800930a:	6021      	str	r1, [r4, #0]
 800930c:	e7ee      	b.n	80092ec <_free_r+0x20>
 800930e:	001a      	movs	r2, r3
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <_free_r+0x4e>
 8009316:	42a3      	cmp	r3, r4
 8009318:	d9f9      	bls.n	800930e <_free_r+0x42>
 800931a:	6811      	ldr	r1, [r2, #0]
 800931c:	1850      	adds	r0, r2, r1
 800931e:	42a0      	cmp	r0, r4
 8009320:	d10b      	bne.n	800933a <_free_r+0x6e>
 8009322:	6820      	ldr	r0, [r4, #0]
 8009324:	1809      	adds	r1, r1, r0
 8009326:	1850      	adds	r0, r2, r1
 8009328:	6011      	str	r1, [r2, #0]
 800932a:	4283      	cmp	r3, r0
 800932c:	d1e0      	bne.n	80092f0 <_free_r+0x24>
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	1841      	adds	r1, r0, r1
 8009334:	6011      	str	r1, [r2, #0]
 8009336:	6053      	str	r3, [r2, #4]
 8009338:	e7da      	b.n	80092f0 <_free_r+0x24>
 800933a:	42a0      	cmp	r0, r4
 800933c:	d902      	bls.n	8009344 <_free_r+0x78>
 800933e:	230c      	movs	r3, #12
 8009340:	602b      	str	r3, [r5, #0]
 8009342:	e7d5      	b.n	80092f0 <_free_r+0x24>
 8009344:	6820      	ldr	r0, [r4, #0]
 8009346:	1821      	adds	r1, r4, r0
 8009348:	428b      	cmp	r3, r1
 800934a:	d103      	bne.n	8009354 <_free_r+0x88>
 800934c:	6819      	ldr	r1, [r3, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	1809      	adds	r1, r1, r0
 8009352:	6021      	str	r1, [r4, #0]
 8009354:	6063      	str	r3, [r4, #4]
 8009356:	6054      	str	r4, [r2, #4]
 8009358:	e7ca      	b.n	80092f0 <_free_r+0x24>
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	20000594 	.word	0x20000594

08009360 <rshift>:
 8009360:	0002      	movs	r2, r0
 8009362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009364:	6904      	ldr	r4, [r0, #16]
 8009366:	114b      	asrs	r3, r1, #5
 8009368:	b085      	sub	sp, #20
 800936a:	3214      	adds	r2, #20
 800936c:	9302      	str	r3, [sp, #8]
 800936e:	114d      	asrs	r5, r1, #5
 8009370:	0013      	movs	r3, r2
 8009372:	42ac      	cmp	r4, r5
 8009374:	dd32      	ble.n	80093dc <rshift+0x7c>
 8009376:	261f      	movs	r6, #31
 8009378:	000f      	movs	r7, r1
 800937a:	114b      	asrs	r3, r1, #5
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	00a5      	lsls	r5, r4, #2
 8009380:	18d3      	adds	r3, r2, r3
 8009382:	4037      	ands	r7, r6
 8009384:	1955      	adds	r5, r2, r5
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	9701      	str	r7, [sp, #4]
 800938a:	4231      	tst	r1, r6
 800938c:	d10d      	bne.n	80093aa <rshift+0x4a>
 800938e:	0016      	movs	r6, r2
 8009390:	0019      	movs	r1, r3
 8009392:	428d      	cmp	r5, r1
 8009394:	d836      	bhi.n	8009404 <rshift+0xa4>
 8009396:	9900      	ldr	r1, [sp, #0]
 8009398:	2300      	movs	r3, #0
 800939a:	3903      	subs	r1, #3
 800939c:	428d      	cmp	r5, r1
 800939e:	d302      	bcc.n	80093a6 <rshift+0x46>
 80093a0:	9b02      	ldr	r3, [sp, #8]
 80093a2:	1ae4      	subs	r4, r4, r3
 80093a4:	00a3      	lsls	r3, r4, #2
 80093a6:	18d3      	adds	r3, r2, r3
 80093a8:	e018      	b.n	80093dc <rshift+0x7c>
 80093aa:	2120      	movs	r1, #32
 80093ac:	9e01      	ldr	r6, [sp, #4]
 80093ae:	9f01      	ldr	r7, [sp, #4]
 80093b0:	1b89      	subs	r1, r1, r6
 80093b2:	9e00      	ldr	r6, [sp, #0]
 80093b4:	9103      	str	r1, [sp, #12]
 80093b6:	ce02      	ldmia	r6!, {r1}
 80093b8:	4694      	mov	ip, r2
 80093ba:	40f9      	lsrs	r1, r7
 80093bc:	42b5      	cmp	r5, r6
 80093be:	d816      	bhi.n	80093ee <rshift+0x8e>
 80093c0:	9e00      	ldr	r6, [sp, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	3601      	adds	r6, #1
 80093c6:	42b5      	cmp	r5, r6
 80093c8:	d303      	bcc.n	80093d2 <rshift+0x72>
 80093ca:	9b02      	ldr	r3, [sp, #8]
 80093cc:	1ae3      	subs	r3, r4, r3
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	3b04      	subs	r3, #4
 80093d2:	18d3      	adds	r3, r2, r3
 80093d4:	6019      	str	r1, [r3, #0]
 80093d6:	2900      	cmp	r1, #0
 80093d8:	d000      	beq.n	80093dc <rshift+0x7c>
 80093da:	3304      	adds	r3, #4
 80093dc:	1a99      	subs	r1, r3, r2
 80093de:	1089      	asrs	r1, r1, #2
 80093e0:	6101      	str	r1, [r0, #16]
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d101      	bne.n	80093ea <rshift+0x8a>
 80093e6:	2300      	movs	r3, #0
 80093e8:	6143      	str	r3, [r0, #20]
 80093ea:	b005      	add	sp, #20
 80093ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ee:	6837      	ldr	r7, [r6, #0]
 80093f0:	9b03      	ldr	r3, [sp, #12]
 80093f2:	409f      	lsls	r7, r3
 80093f4:	430f      	orrs	r7, r1
 80093f6:	4661      	mov	r1, ip
 80093f8:	c180      	stmia	r1!, {r7}
 80093fa:	468c      	mov	ip, r1
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	ce02      	ldmia	r6!, {r1}
 8009400:	40d9      	lsrs	r1, r3
 8009402:	e7db      	b.n	80093bc <rshift+0x5c>
 8009404:	c980      	ldmia	r1!, {r7}
 8009406:	c680      	stmia	r6!, {r7}
 8009408:	e7c3      	b.n	8009392 <rshift+0x32>

0800940a <__hexdig_fun>:
 800940a:	0002      	movs	r2, r0
 800940c:	3a30      	subs	r2, #48	; 0x30
 800940e:	0003      	movs	r3, r0
 8009410:	2a09      	cmp	r2, #9
 8009412:	d802      	bhi.n	800941a <__hexdig_fun+0x10>
 8009414:	3b20      	subs	r3, #32
 8009416:	b2d8      	uxtb	r0, r3
 8009418:	4770      	bx	lr
 800941a:	0002      	movs	r2, r0
 800941c:	3a61      	subs	r2, #97	; 0x61
 800941e:	2a05      	cmp	r2, #5
 8009420:	d801      	bhi.n	8009426 <__hexdig_fun+0x1c>
 8009422:	3b47      	subs	r3, #71	; 0x47
 8009424:	e7f7      	b.n	8009416 <__hexdig_fun+0xc>
 8009426:	001a      	movs	r2, r3
 8009428:	3a41      	subs	r2, #65	; 0x41
 800942a:	2000      	movs	r0, #0
 800942c:	2a05      	cmp	r2, #5
 800942e:	d8f3      	bhi.n	8009418 <__hexdig_fun+0xe>
 8009430:	3b27      	subs	r3, #39	; 0x27
 8009432:	e7f0      	b.n	8009416 <__hexdig_fun+0xc>

08009434 <__gethex>:
 8009434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009436:	b089      	sub	sp, #36	; 0x24
 8009438:	9307      	str	r3, [sp, #28]
 800943a:	2302      	movs	r3, #2
 800943c:	9201      	str	r2, [sp, #4]
 800943e:	680a      	ldr	r2, [r1, #0]
 8009440:	425b      	negs	r3, r3
 8009442:	9003      	str	r0, [sp, #12]
 8009444:	9106      	str	r1, [sp, #24]
 8009446:	1c96      	adds	r6, r2, #2
 8009448:	1a9b      	subs	r3, r3, r2
 800944a:	199a      	adds	r2, r3, r6
 800944c:	9600      	str	r6, [sp, #0]
 800944e:	9205      	str	r2, [sp, #20]
 8009450:	9a00      	ldr	r2, [sp, #0]
 8009452:	3601      	adds	r6, #1
 8009454:	7810      	ldrb	r0, [r2, #0]
 8009456:	2830      	cmp	r0, #48	; 0x30
 8009458:	d0f7      	beq.n	800944a <__gethex+0x16>
 800945a:	f7ff ffd6 	bl	800940a <__hexdig_fun>
 800945e:	2300      	movs	r3, #0
 8009460:	001d      	movs	r5, r3
 8009462:	9302      	str	r3, [sp, #8]
 8009464:	4298      	cmp	r0, r3
 8009466:	d11d      	bne.n	80094a4 <__gethex+0x70>
 8009468:	2201      	movs	r2, #1
 800946a:	49a6      	ldr	r1, [pc, #664]	; (8009704 <__gethex+0x2d0>)
 800946c:	9800      	ldr	r0, [sp, #0]
 800946e:	f7fe ffa3 	bl	80083b8 <strncmp>
 8009472:	0007      	movs	r7, r0
 8009474:	42a8      	cmp	r0, r5
 8009476:	d169      	bne.n	800954c <__gethex+0x118>
 8009478:	9b00      	ldr	r3, [sp, #0]
 800947a:	0034      	movs	r4, r6
 800947c:	7858      	ldrb	r0, [r3, #1]
 800947e:	f7ff ffc4 	bl	800940a <__hexdig_fun>
 8009482:	2301      	movs	r3, #1
 8009484:	9302      	str	r3, [sp, #8]
 8009486:	42a8      	cmp	r0, r5
 8009488:	d02f      	beq.n	80094ea <__gethex+0xb6>
 800948a:	9600      	str	r6, [sp, #0]
 800948c:	9b00      	ldr	r3, [sp, #0]
 800948e:	7818      	ldrb	r0, [r3, #0]
 8009490:	2830      	cmp	r0, #48	; 0x30
 8009492:	d009      	beq.n	80094a8 <__gethex+0x74>
 8009494:	f7ff ffb9 	bl	800940a <__hexdig_fun>
 8009498:	4242      	negs	r2, r0
 800949a:	4142      	adcs	r2, r0
 800949c:	2301      	movs	r3, #1
 800949e:	0035      	movs	r5, r6
 80094a0:	9202      	str	r2, [sp, #8]
 80094a2:	9305      	str	r3, [sp, #20]
 80094a4:	9c00      	ldr	r4, [sp, #0]
 80094a6:	e004      	b.n	80094b2 <__gethex+0x7e>
 80094a8:	9b00      	ldr	r3, [sp, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	e7ed      	b.n	800948c <__gethex+0x58>
 80094b0:	3401      	adds	r4, #1
 80094b2:	7820      	ldrb	r0, [r4, #0]
 80094b4:	f7ff ffa9 	bl	800940a <__hexdig_fun>
 80094b8:	1e07      	subs	r7, r0, #0
 80094ba:	d1f9      	bne.n	80094b0 <__gethex+0x7c>
 80094bc:	2201      	movs	r2, #1
 80094be:	0020      	movs	r0, r4
 80094c0:	4990      	ldr	r1, [pc, #576]	; (8009704 <__gethex+0x2d0>)
 80094c2:	f7fe ff79 	bl	80083b8 <strncmp>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d10d      	bne.n	80094e6 <__gethex+0xb2>
 80094ca:	2d00      	cmp	r5, #0
 80094cc:	d106      	bne.n	80094dc <__gethex+0xa8>
 80094ce:	3401      	adds	r4, #1
 80094d0:	0025      	movs	r5, r4
 80094d2:	7820      	ldrb	r0, [r4, #0]
 80094d4:	f7ff ff99 	bl	800940a <__hexdig_fun>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d102      	bne.n	80094e2 <__gethex+0xae>
 80094dc:	1b2d      	subs	r5, r5, r4
 80094de:	00af      	lsls	r7, r5, #2
 80094e0:	e003      	b.n	80094ea <__gethex+0xb6>
 80094e2:	3401      	adds	r4, #1
 80094e4:	e7f5      	b.n	80094d2 <__gethex+0x9e>
 80094e6:	2d00      	cmp	r5, #0
 80094e8:	d1f8      	bne.n	80094dc <__gethex+0xa8>
 80094ea:	2220      	movs	r2, #32
 80094ec:	7823      	ldrb	r3, [r4, #0]
 80094ee:	0026      	movs	r6, r4
 80094f0:	4393      	bics	r3, r2
 80094f2:	2b50      	cmp	r3, #80	; 0x50
 80094f4:	d11d      	bne.n	8009532 <__gethex+0xfe>
 80094f6:	7863      	ldrb	r3, [r4, #1]
 80094f8:	2b2b      	cmp	r3, #43	; 0x2b
 80094fa:	d02c      	beq.n	8009556 <__gethex+0x122>
 80094fc:	2b2d      	cmp	r3, #45	; 0x2d
 80094fe:	d02e      	beq.n	800955e <__gethex+0x12a>
 8009500:	2300      	movs	r3, #0
 8009502:	1c66      	adds	r6, r4, #1
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	7830      	ldrb	r0, [r6, #0]
 8009508:	f7ff ff7f 	bl	800940a <__hexdig_fun>
 800950c:	1e43      	subs	r3, r0, #1
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b18      	cmp	r3, #24
 8009512:	d82b      	bhi.n	800956c <__gethex+0x138>
 8009514:	3810      	subs	r0, #16
 8009516:	0005      	movs	r5, r0
 8009518:	7870      	ldrb	r0, [r6, #1]
 800951a:	f7ff ff76 	bl	800940a <__hexdig_fun>
 800951e:	1e43      	subs	r3, r0, #1
 8009520:	b2db      	uxtb	r3, r3
 8009522:	3601      	adds	r6, #1
 8009524:	2b18      	cmp	r3, #24
 8009526:	d91c      	bls.n	8009562 <__gethex+0x12e>
 8009528:	9b04      	ldr	r3, [sp, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d000      	beq.n	8009530 <__gethex+0xfc>
 800952e:	426d      	negs	r5, r5
 8009530:	197f      	adds	r7, r7, r5
 8009532:	9b06      	ldr	r3, [sp, #24]
 8009534:	601e      	str	r6, [r3, #0]
 8009536:	9b02      	ldr	r3, [sp, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d019      	beq.n	8009570 <__gethex+0x13c>
 800953c:	2600      	movs	r6, #0
 800953e:	9b05      	ldr	r3, [sp, #20]
 8009540:	42b3      	cmp	r3, r6
 8009542:	d100      	bne.n	8009546 <__gethex+0x112>
 8009544:	3606      	adds	r6, #6
 8009546:	0030      	movs	r0, r6
 8009548:	b009      	add	sp, #36	; 0x24
 800954a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800954c:	2301      	movs	r3, #1
 800954e:	2700      	movs	r7, #0
 8009550:	9c00      	ldr	r4, [sp, #0]
 8009552:	9302      	str	r3, [sp, #8]
 8009554:	e7c9      	b.n	80094ea <__gethex+0xb6>
 8009556:	2300      	movs	r3, #0
 8009558:	9304      	str	r3, [sp, #16]
 800955a:	1ca6      	adds	r6, r4, #2
 800955c:	e7d3      	b.n	8009506 <__gethex+0xd2>
 800955e:	2301      	movs	r3, #1
 8009560:	e7fa      	b.n	8009558 <__gethex+0x124>
 8009562:	230a      	movs	r3, #10
 8009564:	435d      	muls	r5, r3
 8009566:	182d      	adds	r5, r5, r0
 8009568:	3d10      	subs	r5, #16
 800956a:	e7d5      	b.n	8009518 <__gethex+0xe4>
 800956c:	0026      	movs	r6, r4
 800956e:	e7e0      	b.n	8009532 <__gethex+0xfe>
 8009570:	9b00      	ldr	r3, [sp, #0]
 8009572:	9902      	ldr	r1, [sp, #8]
 8009574:	1ae3      	subs	r3, r4, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	2b07      	cmp	r3, #7
 800957a:	dc0a      	bgt.n	8009592 <__gethex+0x15e>
 800957c:	9803      	ldr	r0, [sp, #12]
 800957e:	f000 fa5d 	bl	8009a3c <_Balloc>
 8009582:	1e05      	subs	r5, r0, #0
 8009584:	d108      	bne.n	8009598 <__gethex+0x164>
 8009586:	002a      	movs	r2, r5
 8009588:	21e4      	movs	r1, #228	; 0xe4
 800958a:	4b5f      	ldr	r3, [pc, #380]	; (8009708 <__gethex+0x2d4>)
 800958c:	485f      	ldr	r0, [pc, #380]	; (800970c <__gethex+0x2d8>)
 800958e:	f001 fceb 	bl	800af68 <__assert_func>
 8009592:	3101      	adds	r1, #1
 8009594:	105b      	asrs	r3, r3, #1
 8009596:	e7ef      	b.n	8009578 <__gethex+0x144>
 8009598:	0003      	movs	r3, r0
 800959a:	3314      	adds	r3, #20
 800959c:	9302      	str	r3, [sp, #8]
 800959e:	9305      	str	r3, [sp, #20]
 80095a0:	2300      	movs	r3, #0
 80095a2:	001e      	movs	r6, r3
 80095a4:	9304      	str	r3, [sp, #16]
 80095a6:	9b00      	ldr	r3, [sp, #0]
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	d33f      	bcc.n	800962c <__gethex+0x1f8>
 80095ac:	9c05      	ldr	r4, [sp, #20]
 80095ae:	9b02      	ldr	r3, [sp, #8]
 80095b0:	c440      	stmia	r4!, {r6}
 80095b2:	1ae4      	subs	r4, r4, r3
 80095b4:	10a4      	asrs	r4, r4, #2
 80095b6:	0030      	movs	r0, r6
 80095b8:	612c      	str	r4, [r5, #16]
 80095ba:	f000 fb37 	bl	8009c2c <__hi0bits>
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	0164      	lsls	r4, r4, #5
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	1a26      	subs	r6, r4, r0
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	429e      	cmp	r6, r3
 80095ca:	dd51      	ble.n	8009670 <__gethex+0x23c>
 80095cc:	1af6      	subs	r6, r6, r3
 80095ce:	0031      	movs	r1, r6
 80095d0:	0028      	movs	r0, r5
 80095d2:	f000 fecb 	bl	800a36c <__any_on>
 80095d6:	1e04      	subs	r4, r0, #0
 80095d8:	d016      	beq.n	8009608 <__gethex+0x1d4>
 80095da:	2401      	movs	r4, #1
 80095dc:	231f      	movs	r3, #31
 80095de:	0020      	movs	r0, r4
 80095e0:	1e72      	subs	r2, r6, #1
 80095e2:	4013      	ands	r3, r2
 80095e4:	4098      	lsls	r0, r3
 80095e6:	0003      	movs	r3, r0
 80095e8:	1151      	asrs	r1, r2, #5
 80095ea:	9802      	ldr	r0, [sp, #8]
 80095ec:	0089      	lsls	r1, r1, #2
 80095ee:	5809      	ldr	r1, [r1, r0]
 80095f0:	4219      	tst	r1, r3
 80095f2:	d009      	beq.n	8009608 <__gethex+0x1d4>
 80095f4:	42a2      	cmp	r2, r4
 80095f6:	dd06      	ble.n	8009606 <__gethex+0x1d2>
 80095f8:	0028      	movs	r0, r5
 80095fa:	1eb1      	subs	r1, r6, #2
 80095fc:	f000 feb6 	bl	800a36c <__any_on>
 8009600:	3402      	adds	r4, #2
 8009602:	2800      	cmp	r0, #0
 8009604:	d100      	bne.n	8009608 <__gethex+0x1d4>
 8009606:	2402      	movs	r4, #2
 8009608:	0031      	movs	r1, r6
 800960a:	0028      	movs	r0, r5
 800960c:	f7ff fea8 	bl	8009360 <rshift>
 8009610:	19bf      	adds	r7, r7, r6
 8009612:	9b01      	ldr	r3, [sp, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	42bb      	cmp	r3, r7
 8009618:	da3a      	bge.n	8009690 <__gethex+0x25c>
 800961a:	0029      	movs	r1, r5
 800961c:	9803      	ldr	r0, [sp, #12]
 800961e:	f000 fa51 	bl	8009ac4 <_Bfree>
 8009622:	2300      	movs	r3, #0
 8009624:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009626:	26a3      	movs	r6, #163	; 0xa3
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	e78c      	b.n	8009546 <__gethex+0x112>
 800962c:	3c01      	subs	r4, #1
 800962e:	7823      	ldrb	r3, [r4, #0]
 8009630:	2b2e      	cmp	r3, #46	; 0x2e
 8009632:	d012      	beq.n	800965a <__gethex+0x226>
 8009634:	9b04      	ldr	r3, [sp, #16]
 8009636:	2b20      	cmp	r3, #32
 8009638:	d104      	bne.n	8009644 <__gethex+0x210>
 800963a:	9b05      	ldr	r3, [sp, #20]
 800963c:	c340      	stmia	r3!, {r6}
 800963e:	2600      	movs	r6, #0
 8009640:	9305      	str	r3, [sp, #20]
 8009642:	9604      	str	r6, [sp, #16]
 8009644:	7820      	ldrb	r0, [r4, #0]
 8009646:	f7ff fee0 	bl	800940a <__hexdig_fun>
 800964a:	230f      	movs	r3, #15
 800964c:	4018      	ands	r0, r3
 800964e:	9b04      	ldr	r3, [sp, #16]
 8009650:	4098      	lsls	r0, r3
 8009652:	3304      	adds	r3, #4
 8009654:	4306      	orrs	r6, r0
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	e7a5      	b.n	80095a6 <__gethex+0x172>
 800965a:	9b00      	ldr	r3, [sp, #0]
 800965c:	42a3      	cmp	r3, r4
 800965e:	d8e9      	bhi.n	8009634 <__gethex+0x200>
 8009660:	2201      	movs	r2, #1
 8009662:	0020      	movs	r0, r4
 8009664:	4927      	ldr	r1, [pc, #156]	; (8009704 <__gethex+0x2d0>)
 8009666:	f7fe fea7 	bl	80083b8 <strncmp>
 800966a:	2800      	cmp	r0, #0
 800966c:	d1e2      	bne.n	8009634 <__gethex+0x200>
 800966e:	e79a      	b.n	80095a6 <__gethex+0x172>
 8009670:	9b00      	ldr	r3, [sp, #0]
 8009672:	2400      	movs	r4, #0
 8009674:	429e      	cmp	r6, r3
 8009676:	dacc      	bge.n	8009612 <__gethex+0x1de>
 8009678:	1b9e      	subs	r6, r3, r6
 800967a:	0029      	movs	r1, r5
 800967c:	0032      	movs	r2, r6
 800967e:	9803      	ldr	r0, [sp, #12]
 8009680:	f000 fc40 	bl	8009f04 <__lshift>
 8009684:	0003      	movs	r3, r0
 8009686:	3314      	adds	r3, #20
 8009688:	0005      	movs	r5, r0
 800968a:	1bbf      	subs	r7, r7, r6
 800968c:	9302      	str	r3, [sp, #8]
 800968e:	e7c0      	b.n	8009612 <__gethex+0x1de>
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	685e      	ldr	r6, [r3, #4]
 8009694:	42be      	cmp	r6, r7
 8009696:	dd70      	ble.n	800977a <__gethex+0x346>
 8009698:	9b00      	ldr	r3, [sp, #0]
 800969a:	1bf6      	subs	r6, r6, r7
 800969c:	42b3      	cmp	r3, r6
 800969e:	dc37      	bgt.n	8009710 <__gethex+0x2dc>
 80096a0:	9b01      	ldr	r3, [sp, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d024      	beq.n	80096f2 <__gethex+0x2be>
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	d026      	beq.n	80096fa <__gethex+0x2c6>
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d117      	bne.n	80096e0 <__gethex+0x2ac>
 80096b0:	9b00      	ldr	r3, [sp, #0]
 80096b2:	42b3      	cmp	r3, r6
 80096b4:	d114      	bne.n	80096e0 <__gethex+0x2ac>
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d10b      	bne.n	80096d2 <__gethex+0x29e>
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	9a07      	ldr	r2, [sp, #28]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2662      	movs	r6, #98	; 0x62
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	2301      	movs	r3, #1
 80096c6:	9a02      	ldr	r2, [sp, #8]
 80096c8:	612b      	str	r3, [r5, #16]
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096ce:	601d      	str	r5, [r3, #0]
 80096d0:	e739      	b.n	8009546 <__gethex+0x112>
 80096d2:	9900      	ldr	r1, [sp, #0]
 80096d4:	0028      	movs	r0, r5
 80096d6:	3901      	subs	r1, #1
 80096d8:	f000 fe48 	bl	800a36c <__any_on>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d1ec      	bne.n	80096ba <__gethex+0x286>
 80096e0:	0029      	movs	r1, r5
 80096e2:	9803      	ldr	r0, [sp, #12]
 80096e4:	f000 f9ee 	bl	8009ac4 <_Bfree>
 80096e8:	2300      	movs	r3, #0
 80096ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096ec:	2650      	movs	r6, #80	; 0x50
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	e729      	b.n	8009546 <__gethex+0x112>
 80096f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1f3      	bne.n	80096e0 <__gethex+0x2ac>
 80096f8:	e7df      	b.n	80096ba <__gethex+0x286>
 80096fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1dc      	bne.n	80096ba <__gethex+0x286>
 8009700:	e7ee      	b.n	80096e0 <__gethex+0x2ac>
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	0800b92c 	.word	0x0800b92c
 8009708:	0800bb3c 	.word	0x0800bb3c
 800970c:	0800bb4d 	.word	0x0800bb4d
 8009710:	1e77      	subs	r7, r6, #1
 8009712:	2c00      	cmp	r4, #0
 8009714:	d12f      	bne.n	8009776 <__gethex+0x342>
 8009716:	2f00      	cmp	r7, #0
 8009718:	d004      	beq.n	8009724 <__gethex+0x2f0>
 800971a:	0039      	movs	r1, r7
 800971c:	0028      	movs	r0, r5
 800971e:	f000 fe25 	bl	800a36c <__any_on>
 8009722:	0004      	movs	r4, r0
 8009724:	231f      	movs	r3, #31
 8009726:	117a      	asrs	r2, r7, #5
 8009728:	401f      	ands	r7, r3
 800972a:	3b1e      	subs	r3, #30
 800972c:	40bb      	lsls	r3, r7
 800972e:	9902      	ldr	r1, [sp, #8]
 8009730:	0092      	lsls	r2, r2, #2
 8009732:	5852      	ldr	r2, [r2, r1]
 8009734:	421a      	tst	r2, r3
 8009736:	d001      	beq.n	800973c <__gethex+0x308>
 8009738:	2302      	movs	r3, #2
 800973a:	431c      	orrs	r4, r3
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	0031      	movs	r1, r6
 8009740:	1b9b      	subs	r3, r3, r6
 8009742:	2602      	movs	r6, #2
 8009744:	0028      	movs	r0, r5
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	f7ff fe0a 	bl	8009360 <rshift>
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	685f      	ldr	r7, [r3, #4]
 8009750:	2c00      	cmp	r4, #0
 8009752:	d041      	beq.n	80097d8 <__gethex+0x3a4>
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d010      	beq.n	800977e <__gethex+0x34a>
 800975c:	2b03      	cmp	r3, #3
 800975e:	d012      	beq.n	8009786 <__gethex+0x352>
 8009760:	2b01      	cmp	r3, #1
 8009762:	d106      	bne.n	8009772 <__gethex+0x33e>
 8009764:	07a2      	lsls	r2, r4, #30
 8009766:	d504      	bpl.n	8009772 <__gethex+0x33e>
 8009768:	9a02      	ldr	r2, [sp, #8]
 800976a:	6812      	ldr	r2, [r2, #0]
 800976c:	4314      	orrs	r4, r2
 800976e:	421c      	tst	r4, r3
 8009770:	d10c      	bne.n	800978c <__gethex+0x358>
 8009772:	2310      	movs	r3, #16
 8009774:	e02f      	b.n	80097d6 <__gethex+0x3a2>
 8009776:	2401      	movs	r4, #1
 8009778:	e7d4      	b.n	8009724 <__gethex+0x2f0>
 800977a:	2601      	movs	r6, #1
 800977c:	e7e8      	b.n	8009750 <__gethex+0x31c>
 800977e:	2301      	movs	r3, #1
 8009780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009782:	1a9b      	subs	r3, r3, r2
 8009784:	930f      	str	r3, [sp, #60]	; 0x3c
 8009786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0f2      	beq.n	8009772 <__gethex+0x33e>
 800978c:	692b      	ldr	r3, [r5, #16]
 800978e:	2000      	movs	r0, #0
 8009790:	9302      	str	r3, [sp, #8]
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	002b      	movs	r3, r5
 8009798:	9a04      	ldr	r2, [sp, #16]
 800979a:	3314      	adds	r3, #20
 800979c:	1899      	adds	r1, r3, r2
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	1c54      	adds	r4, r2, #1
 80097a2:	d01e      	beq.n	80097e2 <__gethex+0x3ae>
 80097a4:	3201      	adds	r2, #1
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	002b      	movs	r3, r5
 80097aa:	3314      	adds	r3, #20
 80097ac:	2e02      	cmp	r6, #2
 80097ae:	d141      	bne.n	8009834 <__gethex+0x400>
 80097b0:	9a01      	ldr	r2, [sp, #4]
 80097b2:	9900      	ldr	r1, [sp, #0]
 80097b4:	6812      	ldr	r2, [r2, #0]
 80097b6:	3a01      	subs	r2, #1
 80097b8:	428a      	cmp	r2, r1
 80097ba:	d10b      	bne.n	80097d4 <__gethex+0x3a0>
 80097bc:	221f      	movs	r2, #31
 80097be:	9800      	ldr	r0, [sp, #0]
 80097c0:	1149      	asrs	r1, r1, #5
 80097c2:	4002      	ands	r2, r0
 80097c4:	2001      	movs	r0, #1
 80097c6:	0004      	movs	r4, r0
 80097c8:	4094      	lsls	r4, r2
 80097ca:	0089      	lsls	r1, r1, #2
 80097cc:	58cb      	ldr	r3, [r1, r3]
 80097ce:	4223      	tst	r3, r4
 80097d0:	d000      	beq.n	80097d4 <__gethex+0x3a0>
 80097d2:	2601      	movs	r6, #1
 80097d4:	2320      	movs	r3, #32
 80097d6:	431e      	orrs	r6, r3
 80097d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097da:	601d      	str	r5, [r3, #0]
 80097dc:	9b07      	ldr	r3, [sp, #28]
 80097de:	601f      	str	r7, [r3, #0]
 80097e0:	e6b1      	b.n	8009546 <__gethex+0x112>
 80097e2:	c301      	stmia	r3!, {r0}
 80097e4:	4299      	cmp	r1, r3
 80097e6:	d8da      	bhi.n	800979e <__gethex+0x36a>
 80097e8:	68ab      	ldr	r3, [r5, #8]
 80097ea:	9a02      	ldr	r2, [sp, #8]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	db18      	blt.n	8009822 <__gethex+0x3ee>
 80097f0:	6869      	ldr	r1, [r5, #4]
 80097f2:	9803      	ldr	r0, [sp, #12]
 80097f4:	3101      	adds	r1, #1
 80097f6:	f000 f921 	bl	8009a3c <_Balloc>
 80097fa:	1e04      	subs	r4, r0, #0
 80097fc:	d104      	bne.n	8009808 <__gethex+0x3d4>
 80097fe:	0022      	movs	r2, r4
 8009800:	2184      	movs	r1, #132	; 0x84
 8009802:	4b1c      	ldr	r3, [pc, #112]	; (8009874 <__gethex+0x440>)
 8009804:	481c      	ldr	r0, [pc, #112]	; (8009878 <__gethex+0x444>)
 8009806:	e6c2      	b.n	800958e <__gethex+0x15a>
 8009808:	0029      	movs	r1, r5
 800980a:	692a      	ldr	r2, [r5, #16]
 800980c:	310c      	adds	r1, #12
 800980e:	3202      	adds	r2, #2
 8009810:	0092      	lsls	r2, r2, #2
 8009812:	300c      	adds	r0, #12
 8009814:	f7fe fea8 	bl	8008568 <memcpy>
 8009818:	0029      	movs	r1, r5
 800981a:	9803      	ldr	r0, [sp, #12]
 800981c:	f000 f952 	bl	8009ac4 <_Bfree>
 8009820:	0025      	movs	r5, r4
 8009822:	692b      	ldr	r3, [r5, #16]
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	612a      	str	r2, [r5, #16]
 8009828:	2201      	movs	r2, #1
 800982a:	3304      	adds	r3, #4
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	18eb      	adds	r3, r5, r3
 8009830:	605a      	str	r2, [r3, #4]
 8009832:	e7b9      	b.n	80097a8 <__gethex+0x374>
 8009834:	692a      	ldr	r2, [r5, #16]
 8009836:	9902      	ldr	r1, [sp, #8]
 8009838:	428a      	cmp	r2, r1
 800983a:	dd09      	ble.n	8009850 <__gethex+0x41c>
 800983c:	2101      	movs	r1, #1
 800983e:	0028      	movs	r0, r5
 8009840:	f7ff fd8e 	bl	8009360 <rshift>
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	3701      	adds	r7, #1
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	42bb      	cmp	r3, r7
 800984c:	dac1      	bge.n	80097d2 <__gethex+0x39e>
 800984e:	e6e4      	b.n	800961a <__gethex+0x1e6>
 8009850:	221f      	movs	r2, #31
 8009852:	9c00      	ldr	r4, [sp, #0]
 8009854:	9900      	ldr	r1, [sp, #0]
 8009856:	2601      	movs	r6, #1
 8009858:	4014      	ands	r4, r2
 800985a:	4211      	tst	r1, r2
 800985c:	d0ba      	beq.n	80097d4 <__gethex+0x3a0>
 800985e:	9a04      	ldr	r2, [sp, #16]
 8009860:	189b      	adds	r3, r3, r2
 8009862:	3b04      	subs	r3, #4
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	f000 f9e1 	bl	8009c2c <__hi0bits>
 800986a:	2320      	movs	r3, #32
 800986c:	1b1b      	subs	r3, r3, r4
 800986e:	4298      	cmp	r0, r3
 8009870:	dbe4      	blt.n	800983c <__gethex+0x408>
 8009872:	e7af      	b.n	80097d4 <__gethex+0x3a0>
 8009874:	0800bb3c 	.word	0x0800bb3c
 8009878:	0800bb4d 	.word	0x0800bb4d

0800987c <L_shift>:
 800987c:	2308      	movs	r3, #8
 800987e:	b570      	push	{r4, r5, r6, lr}
 8009880:	2520      	movs	r5, #32
 8009882:	1a9a      	subs	r2, r3, r2
 8009884:	0092      	lsls	r2, r2, #2
 8009886:	1aad      	subs	r5, r5, r2
 8009888:	6843      	ldr	r3, [r0, #4]
 800988a:	6804      	ldr	r4, [r0, #0]
 800988c:	001e      	movs	r6, r3
 800988e:	40ae      	lsls	r6, r5
 8009890:	40d3      	lsrs	r3, r2
 8009892:	4334      	orrs	r4, r6
 8009894:	6004      	str	r4, [r0, #0]
 8009896:	6043      	str	r3, [r0, #4]
 8009898:	3004      	adds	r0, #4
 800989a:	4288      	cmp	r0, r1
 800989c:	d3f4      	bcc.n	8009888 <L_shift+0xc>
 800989e:	bd70      	pop	{r4, r5, r6, pc}

080098a0 <__match>:
 80098a0:	b530      	push	{r4, r5, lr}
 80098a2:	6803      	ldr	r3, [r0, #0]
 80098a4:	780c      	ldrb	r4, [r1, #0]
 80098a6:	3301      	adds	r3, #1
 80098a8:	2c00      	cmp	r4, #0
 80098aa:	d102      	bne.n	80098b2 <__match+0x12>
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	2001      	movs	r0, #1
 80098b0:	bd30      	pop	{r4, r5, pc}
 80098b2:	781a      	ldrb	r2, [r3, #0]
 80098b4:	0015      	movs	r5, r2
 80098b6:	3d41      	subs	r5, #65	; 0x41
 80098b8:	2d19      	cmp	r5, #25
 80098ba:	d800      	bhi.n	80098be <__match+0x1e>
 80098bc:	3220      	adds	r2, #32
 80098be:	3101      	adds	r1, #1
 80098c0:	42a2      	cmp	r2, r4
 80098c2:	d0ef      	beq.n	80098a4 <__match+0x4>
 80098c4:	2000      	movs	r0, #0
 80098c6:	e7f3      	b.n	80098b0 <__match+0x10>

080098c8 <__hexnan>:
 80098c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ca:	680b      	ldr	r3, [r1, #0]
 80098cc:	b08b      	sub	sp, #44	; 0x2c
 80098ce:	9201      	str	r2, [sp, #4]
 80098d0:	9901      	ldr	r1, [sp, #4]
 80098d2:	115a      	asrs	r2, r3, #5
 80098d4:	0092      	lsls	r2, r2, #2
 80098d6:	188a      	adds	r2, r1, r2
 80098d8:	9202      	str	r2, [sp, #8]
 80098da:	0019      	movs	r1, r3
 80098dc:	221f      	movs	r2, #31
 80098de:	4011      	ands	r1, r2
 80098e0:	9008      	str	r0, [sp, #32]
 80098e2:	9106      	str	r1, [sp, #24]
 80098e4:	4213      	tst	r3, r2
 80098e6:	d002      	beq.n	80098ee <__hexnan+0x26>
 80098e8:	9b02      	ldr	r3, [sp, #8]
 80098ea:	3304      	adds	r3, #4
 80098ec:	9302      	str	r3, [sp, #8]
 80098ee:	9b02      	ldr	r3, [sp, #8]
 80098f0:	2500      	movs	r5, #0
 80098f2:	1f1f      	subs	r7, r3, #4
 80098f4:	003e      	movs	r6, r7
 80098f6:	003c      	movs	r4, r7
 80098f8:	9b08      	ldr	r3, [sp, #32]
 80098fa:	603d      	str	r5, [r7, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	9507      	str	r5, [sp, #28]
 8009900:	9305      	str	r3, [sp, #20]
 8009902:	9503      	str	r5, [sp, #12]
 8009904:	9b05      	ldr	r3, [sp, #20]
 8009906:	3301      	adds	r3, #1
 8009908:	9309      	str	r3, [sp, #36]	; 0x24
 800990a:	9b05      	ldr	r3, [sp, #20]
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d028      	beq.n	8009966 <__hexnan+0x9e>
 8009914:	9804      	ldr	r0, [sp, #16]
 8009916:	f7ff fd78 	bl	800940a <__hexdig_fun>
 800991a:	2800      	cmp	r0, #0
 800991c:	d154      	bne.n	80099c8 <__hexnan+0x100>
 800991e:	9b04      	ldr	r3, [sp, #16]
 8009920:	2b20      	cmp	r3, #32
 8009922:	d819      	bhi.n	8009958 <__hexnan+0x90>
 8009924:	9b03      	ldr	r3, [sp, #12]
 8009926:	9a07      	ldr	r2, [sp, #28]
 8009928:	4293      	cmp	r3, r2
 800992a:	dd12      	ble.n	8009952 <__hexnan+0x8a>
 800992c:	42b4      	cmp	r4, r6
 800992e:	d206      	bcs.n	800993e <__hexnan+0x76>
 8009930:	2d07      	cmp	r5, #7
 8009932:	dc04      	bgt.n	800993e <__hexnan+0x76>
 8009934:	002a      	movs	r2, r5
 8009936:	0031      	movs	r1, r6
 8009938:	0020      	movs	r0, r4
 800993a:	f7ff ff9f 	bl	800987c <L_shift>
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	2508      	movs	r5, #8
 8009942:	429c      	cmp	r4, r3
 8009944:	d905      	bls.n	8009952 <__hexnan+0x8a>
 8009946:	1f26      	subs	r6, r4, #4
 8009948:	2500      	movs	r5, #0
 800994a:	0034      	movs	r4, r6
 800994c:	9b03      	ldr	r3, [sp, #12]
 800994e:	6035      	str	r5, [r6, #0]
 8009950:	9307      	str	r3, [sp, #28]
 8009952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009954:	9305      	str	r3, [sp, #20]
 8009956:	e7d5      	b.n	8009904 <__hexnan+0x3c>
 8009958:	9b04      	ldr	r3, [sp, #16]
 800995a:	2b29      	cmp	r3, #41	; 0x29
 800995c:	d159      	bne.n	8009a12 <__hexnan+0x14a>
 800995e:	9b05      	ldr	r3, [sp, #20]
 8009960:	9a08      	ldr	r2, [sp, #32]
 8009962:	3302      	adds	r3, #2
 8009964:	6013      	str	r3, [r2, #0]
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d052      	beq.n	8009a12 <__hexnan+0x14a>
 800996c:	42b4      	cmp	r4, r6
 800996e:	d206      	bcs.n	800997e <__hexnan+0xb6>
 8009970:	2d07      	cmp	r5, #7
 8009972:	dc04      	bgt.n	800997e <__hexnan+0xb6>
 8009974:	002a      	movs	r2, r5
 8009976:	0031      	movs	r1, r6
 8009978:	0020      	movs	r0, r4
 800997a:	f7ff ff7f 	bl	800987c <L_shift>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	429c      	cmp	r4, r3
 8009982:	d935      	bls.n	80099f0 <__hexnan+0x128>
 8009984:	001a      	movs	r2, r3
 8009986:	0023      	movs	r3, r4
 8009988:	cb02      	ldmia	r3!, {r1}
 800998a:	c202      	stmia	r2!, {r1}
 800998c:	429f      	cmp	r7, r3
 800998e:	d2fb      	bcs.n	8009988 <__hexnan+0xc0>
 8009990:	9b02      	ldr	r3, [sp, #8]
 8009992:	1c62      	adds	r2, r4, #1
 8009994:	1ed9      	subs	r1, r3, #3
 8009996:	2304      	movs	r3, #4
 8009998:	4291      	cmp	r1, r2
 800999a:	d305      	bcc.n	80099a8 <__hexnan+0xe0>
 800999c:	9b02      	ldr	r3, [sp, #8]
 800999e:	3b04      	subs	r3, #4
 80099a0:	1b1b      	subs	r3, r3, r4
 80099a2:	089b      	lsrs	r3, r3, #2
 80099a4:	3301      	adds	r3, #1
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	9a01      	ldr	r2, [sp, #4]
 80099aa:	18d3      	adds	r3, r2, r3
 80099ac:	2200      	movs	r2, #0
 80099ae:	c304      	stmia	r3!, {r2}
 80099b0:	429f      	cmp	r7, r3
 80099b2:	d2fc      	bcs.n	80099ae <__hexnan+0xe6>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d104      	bne.n	80099c4 <__hexnan+0xfc>
 80099ba:	9b01      	ldr	r3, [sp, #4]
 80099bc:	429f      	cmp	r7, r3
 80099be:	d126      	bne.n	8009a0e <__hexnan+0x146>
 80099c0:	2301      	movs	r3, #1
 80099c2:	603b      	str	r3, [r7, #0]
 80099c4:	2005      	movs	r0, #5
 80099c6:	e025      	b.n	8009a14 <__hexnan+0x14c>
 80099c8:	9b03      	ldr	r3, [sp, #12]
 80099ca:	3501      	adds	r5, #1
 80099cc:	3301      	adds	r3, #1
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	2d08      	cmp	r5, #8
 80099d2:	dd06      	ble.n	80099e2 <__hexnan+0x11a>
 80099d4:	9b01      	ldr	r3, [sp, #4]
 80099d6:	429c      	cmp	r4, r3
 80099d8:	d9bb      	bls.n	8009952 <__hexnan+0x8a>
 80099da:	2300      	movs	r3, #0
 80099dc:	2501      	movs	r5, #1
 80099de:	3c04      	subs	r4, #4
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	220f      	movs	r2, #15
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	4010      	ands	r0, r2
 80099e8:	011b      	lsls	r3, r3, #4
 80099ea:	4303      	orrs	r3, r0
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	e7b0      	b.n	8009952 <__hexnan+0x8a>
 80099f0:	9b06      	ldr	r3, [sp, #24]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0de      	beq.n	80099b4 <__hexnan+0xec>
 80099f6:	2320      	movs	r3, #32
 80099f8:	9a06      	ldr	r2, [sp, #24]
 80099fa:	9902      	ldr	r1, [sp, #8]
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	2201      	movs	r2, #1
 8009a00:	4252      	negs	r2, r2
 8009a02:	40da      	lsrs	r2, r3
 8009a04:	3904      	subs	r1, #4
 8009a06:	680b      	ldr	r3, [r1, #0]
 8009a08:	4013      	ands	r3, r2
 8009a0a:	600b      	str	r3, [r1, #0]
 8009a0c:	e7d2      	b.n	80099b4 <__hexnan+0xec>
 8009a0e:	3f04      	subs	r7, #4
 8009a10:	e7d0      	b.n	80099b4 <__hexnan+0xec>
 8009a12:	2004      	movs	r0, #4
 8009a14:	b00b      	add	sp, #44	; 0x2c
 8009a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a18 <__ascii_mbtowc>:
 8009a18:	b082      	sub	sp, #8
 8009a1a:	2900      	cmp	r1, #0
 8009a1c:	d100      	bne.n	8009a20 <__ascii_mbtowc+0x8>
 8009a1e:	a901      	add	r1, sp, #4
 8009a20:	1e10      	subs	r0, r2, #0
 8009a22:	d006      	beq.n	8009a32 <__ascii_mbtowc+0x1a>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d006      	beq.n	8009a36 <__ascii_mbtowc+0x1e>
 8009a28:	7813      	ldrb	r3, [r2, #0]
 8009a2a:	600b      	str	r3, [r1, #0]
 8009a2c:	7810      	ldrb	r0, [r2, #0]
 8009a2e:	1e43      	subs	r3, r0, #1
 8009a30:	4198      	sbcs	r0, r3
 8009a32:	b002      	add	sp, #8
 8009a34:	4770      	bx	lr
 8009a36:	2002      	movs	r0, #2
 8009a38:	4240      	negs	r0, r0
 8009a3a:	e7fa      	b.n	8009a32 <__ascii_mbtowc+0x1a>

08009a3c <_Balloc>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	69c5      	ldr	r5, [r0, #28]
 8009a40:	0006      	movs	r6, r0
 8009a42:	000c      	movs	r4, r1
 8009a44:	2d00      	cmp	r5, #0
 8009a46:	d10e      	bne.n	8009a66 <_Balloc+0x2a>
 8009a48:	2010      	movs	r0, #16
 8009a4a:	f7fc fd03 	bl	8006454 <malloc>
 8009a4e:	1e02      	subs	r2, r0, #0
 8009a50:	61f0      	str	r0, [r6, #28]
 8009a52:	d104      	bne.n	8009a5e <_Balloc+0x22>
 8009a54:	216b      	movs	r1, #107	; 0x6b
 8009a56:	4b19      	ldr	r3, [pc, #100]	; (8009abc <_Balloc+0x80>)
 8009a58:	4819      	ldr	r0, [pc, #100]	; (8009ac0 <_Balloc+0x84>)
 8009a5a:	f001 fa85 	bl	800af68 <__assert_func>
 8009a5e:	6045      	str	r5, [r0, #4]
 8009a60:	6085      	str	r5, [r0, #8]
 8009a62:	6005      	str	r5, [r0, #0]
 8009a64:	60c5      	str	r5, [r0, #12]
 8009a66:	69f5      	ldr	r5, [r6, #28]
 8009a68:	68eb      	ldr	r3, [r5, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d013      	beq.n	8009a96 <_Balloc+0x5a>
 8009a6e:	69f3      	ldr	r3, [r6, #28]
 8009a70:	00a2      	lsls	r2, r4, #2
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	189b      	adds	r3, r3, r2
 8009a76:	6818      	ldr	r0, [r3, #0]
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d118      	bne.n	8009aae <_Balloc+0x72>
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	000d      	movs	r5, r1
 8009a80:	40a5      	lsls	r5, r4
 8009a82:	1d6a      	adds	r2, r5, #5
 8009a84:	0030      	movs	r0, r6
 8009a86:	0092      	lsls	r2, r2, #2
 8009a88:	f001 fa8c 	bl	800afa4 <_calloc_r>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d00c      	beq.n	8009aaa <_Balloc+0x6e>
 8009a90:	6044      	str	r4, [r0, #4]
 8009a92:	6085      	str	r5, [r0, #8]
 8009a94:	e00d      	b.n	8009ab2 <_Balloc+0x76>
 8009a96:	2221      	movs	r2, #33	; 0x21
 8009a98:	2104      	movs	r1, #4
 8009a9a:	0030      	movs	r0, r6
 8009a9c:	f001 fa82 	bl	800afa4 <_calloc_r>
 8009aa0:	69f3      	ldr	r3, [r6, #28]
 8009aa2:	60e8      	str	r0, [r5, #12]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1e1      	bne.n	8009a6e <_Balloc+0x32>
 8009aaa:	2000      	movs	r0, #0
 8009aac:	bd70      	pop	{r4, r5, r6, pc}
 8009aae:	6802      	ldr	r2, [r0, #0]
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6103      	str	r3, [r0, #16]
 8009ab6:	60c3      	str	r3, [r0, #12]
 8009ab8:	e7f8      	b.n	8009aac <_Balloc+0x70>
 8009aba:	46c0      	nop			; (mov r8, r8)
 8009abc:	0800bacd 	.word	0x0800bacd
 8009ac0:	0800bbad 	.word	0x0800bbad

08009ac4 <_Bfree>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	69c6      	ldr	r6, [r0, #28]
 8009ac8:	0005      	movs	r5, r0
 8009aca:	000c      	movs	r4, r1
 8009acc:	2e00      	cmp	r6, #0
 8009ace:	d10e      	bne.n	8009aee <_Bfree+0x2a>
 8009ad0:	2010      	movs	r0, #16
 8009ad2:	f7fc fcbf 	bl	8006454 <malloc>
 8009ad6:	1e02      	subs	r2, r0, #0
 8009ad8:	61e8      	str	r0, [r5, #28]
 8009ada:	d104      	bne.n	8009ae6 <_Bfree+0x22>
 8009adc:	218f      	movs	r1, #143	; 0x8f
 8009ade:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <_Bfree+0x40>)
 8009ae0:	4809      	ldr	r0, [pc, #36]	; (8009b08 <_Bfree+0x44>)
 8009ae2:	f001 fa41 	bl	800af68 <__assert_func>
 8009ae6:	6046      	str	r6, [r0, #4]
 8009ae8:	6086      	str	r6, [r0, #8]
 8009aea:	6006      	str	r6, [r0, #0]
 8009aec:	60c6      	str	r6, [r0, #12]
 8009aee:	2c00      	cmp	r4, #0
 8009af0:	d007      	beq.n	8009b02 <_Bfree+0x3e>
 8009af2:	69eb      	ldr	r3, [r5, #28]
 8009af4:	6862      	ldr	r2, [r4, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	0092      	lsls	r2, r2, #2
 8009afa:	189b      	adds	r3, r3, r2
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	6022      	str	r2, [r4, #0]
 8009b00:	601c      	str	r4, [r3, #0]
 8009b02:	bd70      	pop	{r4, r5, r6, pc}
 8009b04:	0800bacd 	.word	0x0800bacd
 8009b08:	0800bbad 	.word	0x0800bbad

08009b0c <__multadd>:
 8009b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b0e:	000e      	movs	r6, r1
 8009b10:	9001      	str	r0, [sp, #4]
 8009b12:	000c      	movs	r4, r1
 8009b14:	001d      	movs	r5, r3
 8009b16:	2000      	movs	r0, #0
 8009b18:	690f      	ldr	r7, [r1, #16]
 8009b1a:	3614      	adds	r6, #20
 8009b1c:	6833      	ldr	r3, [r6, #0]
 8009b1e:	3001      	adds	r0, #1
 8009b20:	b299      	uxth	r1, r3
 8009b22:	4351      	muls	r1, r2
 8009b24:	0c1b      	lsrs	r3, r3, #16
 8009b26:	4353      	muls	r3, r2
 8009b28:	1949      	adds	r1, r1, r5
 8009b2a:	0c0d      	lsrs	r5, r1, #16
 8009b2c:	195b      	adds	r3, r3, r5
 8009b2e:	0c1d      	lsrs	r5, r3, #16
 8009b30:	b289      	uxth	r1, r1
 8009b32:	041b      	lsls	r3, r3, #16
 8009b34:	185b      	adds	r3, r3, r1
 8009b36:	c608      	stmia	r6!, {r3}
 8009b38:	4287      	cmp	r7, r0
 8009b3a:	dcef      	bgt.n	8009b1c <__multadd+0x10>
 8009b3c:	2d00      	cmp	r5, #0
 8009b3e:	d022      	beq.n	8009b86 <__multadd+0x7a>
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	42bb      	cmp	r3, r7
 8009b44:	dc19      	bgt.n	8009b7a <__multadd+0x6e>
 8009b46:	6861      	ldr	r1, [r4, #4]
 8009b48:	9801      	ldr	r0, [sp, #4]
 8009b4a:	3101      	adds	r1, #1
 8009b4c:	f7ff ff76 	bl	8009a3c <_Balloc>
 8009b50:	1e06      	subs	r6, r0, #0
 8009b52:	d105      	bne.n	8009b60 <__multadd+0x54>
 8009b54:	0032      	movs	r2, r6
 8009b56:	21ba      	movs	r1, #186	; 0xba
 8009b58:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <__multadd+0x80>)
 8009b5a:	480d      	ldr	r0, [pc, #52]	; (8009b90 <__multadd+0x84>)
 8009b5c:	f001 fa04 	bl	800af68 <__assert_func>
 8009b60:	0021      	movs	r1, r4
 8009b62:	6922      	ldr	r2, [r4, #16]
 8009b64:	310c      	adds	r1, #12
 8009b66:	3202      	adds	r2, #2
 8009b68:	0092      	lsls	r2, r2, #2
 8009b6a:	300c      	adds	r0, #12
 8009b6c:	f7fe fcfc 	bl	8008568 <memcpy>
 8009b70:	0021      	movs	r1, r4
 8009b72:	9801      	ldr	r0, [sp, #4]
 8009b74:	f7ff ffa6 	bl	8009ac4 <_Bfree>
 8009b78:	0034      	movs	r4, r6
 8009b7a:	1d3b      	adds	r3, r7, #4
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	18e3      	adds	r3, r4, r3
 8009b80:	605d      	str	r5, [r3, #4]
 8009b82:	1c7b      	adds	r3, r7, #1
 8009b84:	6123      	str	r3, [r4, #16]
 8009b86:	0020      	movs	r0, r4
 8009b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b8a:	46c0      	nop			; (mov r8, r8)
 8009b8c:	0800bb3c 	.word	0x0800bb3c
 8009b90:	0800bbad 	.word	0x0800bbad

08009b94 <__s2b>:
 8009b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b96:	0006      	movs	r6, r0
 8009b98:	0018      	movs	r0, r3
 8009b9a:	000c      	movs	r4, r1
 8009b9c:	3008      	adds	r0, #8
 8009b9e:	2109      	movs	r1, #9
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	0015      	movs	r5, r2
 8009ba4:	f7f6 fb54 	bl	8000250 <__divsi3>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	2100      	movs	r1, #0
 8009bac:	4283      	cmp	r3, r0
 8009bae:	db0a      	blt.n	8009bc6 <__s2b+0x32>
 8009bb0:	0030      	movs	r0, r6
 8009bb2:	f7ff ff43 	bl	8009a3c <_Balloc>
 8009bb6:	1e01      	subs	r1, r0, #0
 8009bb8:	d108      	bne.n	8009bcc <__s2b+0x38>
 8009bba:	000a      	movs	r2, r1
 8009bbc:	4b19      	ldr	r3, [pc, #100]	; (8009c24 <__s2b+0x90>)
 8009bbe:	481a      	ldr	r0, [pc, #104]	; (8009c28 <__s2b+0x94>)
 8009bc0:	31d3      	adds	r1, #211	; 0xd3
 8009bc2:	f001 f9d1 	bl	800af68 <__assert_func>
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	3101      	adds	r1, #1
 8009bca:	e7ef      	b.n	8009bac <__s2b+0x18>
 8009bcc:	9b08      	ldr	r3, [sp, #32]
 8009bce:	6143      	str	r3, [r0, #20]
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	6103      	str	r3, [r0, #16]
 8009bd4:	2d09      	cmp	r5, #9
 8009bd6:	dd18      	ble.n	8009c0a <__s2b+0x76>
 8009bd8:	0023      	movs	r3, r4
 8009bda:	3309      	adds	r3, #9
 8009bdc:	001f      	movs	r7, r3
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	1964      	adds	r4, r4, r5
 8009be2:	783b      	ldrb	r3, [r7, #0]
 8009be4:	220a      	movs	r2, #10
 8009be6:	0030      	movs	r0, r6
 8009be8:	3b30      	subs	r3, #48	; 0x30
 8009bea:	f7ff ff8f 	bl	8009b0c <__multadd>
 8009bee:	3701      	adds	r7, #1
 8009bf0:	0001      	movs	r1, r0
 8009bf2:	42a7      	cmp	r7, r4
 8009bf4:	d1f5      	bne.n	8009be2 <__s2b+0x4e>
 8009bf6:	002c      	movs	r4, r5
 8009bf8:	9b00      	ldr	r3, [sp, #0]
 8009bfa:	3c08      	subs	r4, #8
 8009bfc:	191c      	adds	r4, r3, r4
 8009bfe:	002f      	movs	r7, r5
 8009c00:	9b01      	ldr	r3, [sp, #4]
 8009c02:	429f      	cmp	r7, r3
 8009c04:	db04      	blt.n	8009c10 <__s2b+0x7c>
 8009c06:	0008      	movs	r0, r1
 8009c08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c0a:	2509      	movs	r5, #9
 8009c0c:	340a      	adds	r4, #10
 8009c0e:	e7f6      	b.n	8009bfe <__s2b+0x6a>
 8009c10:	1b63      	subs	r3, r4, r5
 8009c12:	5ddb      	ldrb	r3, [r3, r7]
 8009c14:	220a      	movs	r2, #10
 8009c16:	0030      	movs	r0, r6
 8009c18:	3b30      	subs	r3, #48	; 0x30
 8009c1a:	f7ff ff77 	bl	8009b0c <__multadd>
 8009c1e:	3701      	adds	r7, #1
 8009c20:	0001      	movs	r1, r0
 8009c22:	e7ed      	b.n	8009c00 <__s2b+0x6c>
 8009c24:	0800bb3c 	.word	0x0800bb3c
 8009c28:	0800bbad 	.word	0x0800bbad

08009c2c <__hi0bits>:
 8009c2c:	0003      	movs	r3, r0
 8009c2e:	0c02      	lsrs	r2, r0, #16
 8009c30:	2000      	movs	r0, #0
 8009c32:	4282      	cmp	r2, r0
 8009c34:	d101      	bne.n	8009c3a <__hi0bits+0xe>
 8009c36:	041b      	lsls	r3, r3, #16
 8009c38:	3010      	adds	r0, #16
 8009c3a:	0e1a      	lsrs	r2, r3, #24
 8009c3c:	d101      	bne.n	8009c42 <__hi0bits+0x16>
 8009c3e:	3008      	adds	r0, #8
 8009c40:	021b      	lsls	r3, r3, #8
 8009c42:	0f1a      	lsrs	r2, r3, #28
 8009c44:	d101      	bne.n	8009c4a <__hi0bits+0x1e>
 8009c46:	3004      	adds	r0, #4
 8009c48:	011b      	lsls	r3, r3, #4
 8009c4a:	0f9a      	lsrs	r2, r3, #30
 8009c4c:	d101      	bne.n	8009c52 <__hi0bits+0x26>
 8009c4e:	3002      	adds	r0, #2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	db03      	blt.n	8009c5e <__hi0bits+0x32>
 8009c56:	3001      	adds	r0, #1
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	d400      	bmi.n	8009c5e <__hi0bits+0x32>
 8009c5c:	2020      	movs	r0, #32
 8009c5e:	4770      	bx	lr

08009c60 <__lo0bits>:
 8009c60:	6803      	ldr	r3, [r0, #0]
 8009c62:	0001      	movs	r1, r0
 8009c64:	2207      	movs	r2, #7
 8009c66:	0018      	movs	r0, r3
 8009c68:	4010      	ands	r0, r2
 8009c6a:	4213      	tst	r3, r2
 8009c6c:	d00d      	beq.n	8009c8a <__lo0bits+0x2a>
 8009c6e:	3a06      	subs	r2, #6
 8009c70:	2000      	movs	r0, #0
 8009c72:	4213      	tst	r3, r2
 8009c74:	d105      	bne.n	8009c82 <__lo0bits+0x22>
 8009c76:	3002      	adds	r0, #2
 8009c78:	4203      	tst	r3, r0
 8009c7a:	d003      	beq.n	8009c84 <__lo0bits+0x24>
 8009c7c:	40d3      	lsrs	r3, r2
 8009c7e:	0010      	movs	r0, r2
 8009c80:	600b      	str	r3, [r1, #0]
 8009c82:	4770      	bx	lr
 8009c84:	089b      	lsrs	r3, r3, #2
 8009c86:	600b      	str	r3, [r1, #0]
 8009c88:	e7fb      	b.n	8009c82 <__lo0bits+0x22>
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d101      	bne.n	8009c94 <__lo0bits+0x34>
 8009c90:	2010      	movs	r0, #16
 8009c92:	0c1b      	lsrs	r3, r3, #16
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	d101      	bne.n	8009c9e <__lo0bits+0x3e>
 8009c9a:	3008      	adds	r0, #8
 8009c9c:	0a1b      	lsrs	r3, r3, #8
 8009c9e:	071a      	lsls	r2, r3, #28
 8009ca0:	d101      	bne.n	8009ca6 <__lo0bits+0x46>
 8009ca2:	3004      	adds	r0, #4
 8009ca4:	091b      	lsrs	r3, r3, #4
 8009ca6:	079a      	lsls	r2, r3, #30
 8009ca8:	d101      	bne.n	8009cae <__lo0bits+0x4e>
 8009caa:	3002      	adds	r0, #2
 8009cac:	089b      	lsrs	r3, r3, #2
 8009cae:	07da      	lsls	r2, r3, #31
 8009cb0:	d4e9      	bmi.n	8009c86 <__lo0bits+0x26>
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	085b      	lsrs	r3, r3, #1
 8009cb6:	d1e6      	bne.n	8009c86 <__lo0bits+0x26>
 8009cb8:	2020      	movs	r0, #32
 8009cba:	e7e2      	b.n	8009c82 <__lo0bits+0x22>

08009cbc <__i2b>:
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	000c      	movs	r4, r1
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	f7ff febb 	bl	8009a3c <_Balloc>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d107      	bne.n	8009cda <__i2b+0x1e>
 8009cca:	2146      	movs	r1, #70	; 0x46
 8009ccc:	4c05      	ldr	r4, [pc, #20]	; (8009ce4 <__i2b+0x28>)
 8009cce:	0002      	movs	r2, r0
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <__i2b+0x2c>)
 8009cd2:	0020      	movs	r0, r4
 8009cd4:	31ff      	adds	r1, #255	; 0xff
 8009cd6:	f001 f947 	bl	800af68 <__assert_func>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	6144      	str	r4, [r0, #20]
 8009cde:	6103      	str	r3, [r0, #16]
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	46c0      	nop			; (mov r8, r8)
 8009ce4:	0800bbad 	.word	0x0800bbad
 8009ce8:	0800bb3c 	.word	0x0800bb3c

08009cec <__multiply>:
 8009cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cee:	0015      	movs	r5, r2
 8009cf0:	690a      	ldr	r2, [r1, #16]
 8009cf2:	692b      	ldr	r3, [r5, #16]
 8009cf4:	000c      	movs	r4, r1
 8009cf6:	b08b      	sub	sp, #44	; 0x2c
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	da01      	bge.n	8009d00 <__multiply+0x14>
 8009cfc:	002c      	movs	r4, r5
 8009cfe:	000d      	movs	r5, r1
 8009d00:	6927      	ldr	r7, [r4, #16]
 8009d02:	692e      	ldr	r6, [r5, #16]
 8009d04:	6861      	ldr	r1, [r4, #4]
 8009d06:	19bb      	adds	r3, r7, r6
 8009d08:	9303      	str	r3, [sp, #12]
 8009d0a:	68a3      	ldr	r3, [r4, #8]
 8009d0c:	19ba      	adds	r2, r7, r6
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	da00      	bge.n	8009d14 <__multiply+0x28>
 8009d12:	3101      	adds	r1, #1
 8009d14:	f7ff fe92 	bl	8009a3c <_Balloc>
 8009d18:	9002      	str	r0, [sp, #8]
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d106      	bne.n	8009d2c <__multiply+0x40>
 8009d1e:	21b1      	movs	r1, #177	; 0xb1
 8009d20:	4b48      	ldr	r3, [pc, #288]	; (8009e44 <__multiply+0x158>)
 8009d22:	4849      	ldr	r0, [pc, #292]	; (8009e48 <__multiply+0x15c>)
 8009d24:	9a02      	ldr	r2, [sp, #8]
 8009d26:	0049      	lsls	r1, r1, #1
 8009d28:	f001 f91e 	bl	800af68 <__assert_func>
 8009d2c:	9b02      	ldr	r3, [sp, #8]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	3314      	adds	r3, #20
 8009d32:	469c      	mov	ip, r3
 8009d34:	19bb      	adds	r3, r7, r6
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4463      	add	r3, ip
 8009d3a:	9304      	str	r3, [sp, #16]
 8009d3c:	4663      	mov	r3, ip
 8009d3e:	9904      	ldr	r1, [sp, #16]
 8009d40:	428b      	cmp	r3, r1
 8009d42:	d32a      	bcc.n	8009d9a <__multiply+0xae>
 8009d44:	0023      	movs	r3, r4
 8009d46:	00bf      	lsls	r7, r7, #2
 8009d48:	3314      	adds	r3, #20
 8009d4a:	3514      	adds	r5, #20
 8009d4c:	9308      	str	r3, [sp, #32]
 8009d4e:	00b6      	lsls	r6, r6, #2
 8009d50:	19db      	adds	r3, r3, r7
 8009d52:	9305      	str	r3, [sp, #20]
 8009d54:	19ab      	adds	r3, r5, r6
 8009d56:	9309      	str	r3, [sp, #36]	; 0x24
 8009d58:	2304      	movs	r3, #4
 8009d5a:	9306      	str	r3, [sp, #24]
 8009d5c:	0023      	movs	r3, r4
 8009d5e:	9a05      	ldr	r2, [sp, #20]
 8009d60:	3315      	adds	r3, #21
 8009d62:	9501      	str	r5, [sp, #4]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d305      	bcc.n	8009d74 <__multiply+0x88>
 8009d68:	1b13      	subs	r3, r2, r4
 8009d6a:	3b15      	subs	r3, #21
 8009d6c:	089b      	lsrs	r3, r3, #2
 8009d6e:	3301      	adds	r3, #1
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	9306      	str	r3, [sp, #24]
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d310      	bcc.n	8009d9e <__multiply+0xb2>
 8009d7c:	9b03      	ldr	r3, [sp, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	dd05      	ble.n	8009d8e <__multiply+0xa2>
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	3b04      	subs	r3, #4
 8009d86:	9304      	str	r3, [sp, #16]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d056      	beq.n	8009e3c <__multiply+0x150>
 8009d8e:	9b02      	ldr	r3, [sp, #8]
 8009d90:	9a03      	ldr	r2, [sp, #12]
 8009d92:	0018      	movs	r0, r3
 8009d94:	611a      	str	r2, [r3, #16]
 8009d96:	b00b      	add	sp, #44	; 0x2c
 8009d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d9a:	c304      	stmia	r3!, {r2}
 8009d9c:	e7cf      	b.n	8009d3e <__multiply+0x52>
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	b280      	uxth	r0, r0
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d01e      	beq.n	8009de6 <__multiply+0xfa>
 8009da8:	4667      	mov	r7, ip
 8009daa:	2500      	movs	r5, #0
 8009dac:	9e08      	ldr	r6, [sp, #32]
 8009dae:	ce02      	ldmia	r6!, {r1}
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	9307      	str	r3, [sp, #28]
 8009db4:	b28b      	uxth	r3, r1
 8009db6:	4343      	muls	r3, r0
 8009db8:	001a      	movs	r2, r3
 8009dba:	466b      	mov	r3, sp
 8009dbc:	8b9b      	ldrh	r3, [r3, #28]
 8009dbe:	18d3      	adds	r3, r2, r3
 8009dc0:	195b      	adds	r3, r3, r5
 8009dc2:	0c0d      	lsrs	r5, r1, #16
 8009dc4:	4345      	muls	r5, r0
 8009dc6:	9a07      	ldr	r2, [sp, #28]
 8009dc8:	0c11      	lsrs	r1, r2, #16
 8009dca:	1869      	adds	r1, r5, r1
 8009dcc:	0c1a      	lsrs	r2, r3, #16
 8009dce:	188a      	adds	r2, r1, r2
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	0c15      	lsrs	r5, r2, #16
 8009dd4:	0412      	lsls	r2, r2, #16
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	9b05      	ldr	r3, [sp, #20]
 8009dda:	c704      	stmia	r7!, {r2}
 8009ddc:	42b3      	cmp	r3, r6
 8009dde:	d8e6      	bhi.n	8009dae <__multiply+0xc2>
 8009de0:	4663      	mov	r3, ip
 8009de2:	9a06      	ldr	r2, [sp, #24]
 8009de4:	509d      	str	r5, [r3, r2]
 8009de6:	9b01      	ldr	r3, [sp, #4]
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	0c00      	lsrs	r0, r0, #16
 8009dec:	d020      	beq.n	8009e30 <__multiply+0x144>
 8009dee:	4663      	mov	r3, ip
 8009df0:	0025      	movs	r5, r4
 8009df2:	4661      	mov	r1, ip
 8009df4:	2700      	movs	r7, #0
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3514      	adds	r5, #20
 8009dfa:	682a      	ldr	r2, [r5, #0]
 8009dfc:	680e      	ldr	r6, [r1, #0]
 8009dfe:	b292      	uxth	r2, r2
 8009e00:	4342      	muls	r2, r0
 8009e02:	0c36      	lsrs	r6, r6, #16
 8009e04:	1992      	adds	r2, r2, r6
 8009e06:	19d2      	adds	r2, r2, r7
 8009e08:	0416      	lsls	r6, r2, #16
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	431e      	orrs	r6, r3
 8009e0e:	600e      	str	r6, [r1, #0]
 8009e10:	cd40      	ldmia	r5!, {r6}
 8009e12:	684b      	ldr	r3, [r1, #4]
 8009e14:	0c36      	lsrs	r6, r6, #16
 8009e16:	4346      	muls	r6, r0
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	0c12      	lsrs	r2, r2, #16
 8009e1c:	18f3      	adds	r3, r6, r3
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	9a05      	ldr	r2, [sp, #20]
 8009e22:	0c1f      	lsrs	r7, r3, #16
 8009e24:	3104      	adds	r1, #4
 8009e26:	42aa      	cmp	r2, r5
 8009e28:	d8e7      	bhi.n	8009dfa <__multiply+0x10e>
 8009e2a:	4662      	mov	r2, ip
 8009e2c:	9906      	ldr	r1, [sp, #24]
 8009e2e:	5053      	str	r3, [r2, r1]
 8009e30:	9b01      	ldr	r3, [sp, #4]
 8009e32:	3304      	adds	r3, #4
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	2304      	movs	r3, #4
 8009e38:	449c      	add	ip, r3
 8009e3a:	e79b      	b.n	8009d74 <__multiply+0x88>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	9303      	str	r3, [sp, #12]
 8009e42:	e79b      	b.n	8009d7c <__multiply+0x90>
 8009e44:	0800bb3c 	.word	0x0800bb3c
 8009e48:	0800bbad 	.word	0x0800bbad

08009e4c <__pow5mult>:
 8009e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e4e:	2303      	movs	r3, #3
 8009e50:	0015      	movs	r5, r2
 8009e52:	0007      	movs	r7, r0
 8009e54:	000e      	movs	r6, r1
 8009e56:	401a      	ands	r2, r3
 8009e58:	421d      	tst	r5, r3
 8009e5a:	d008      	beq.n	8009e6e <__pow5mult+0x22>
 8009e5c:	4925      	ldr	r1, [pc, #148]	; (8009ef4 <__pow5mult+0xa8>)
 8009e5e:	3a01      	subs	r2, #1
 8009e60:	0092      	lsls	r2, r2, #2
 8009e62:	5852      	ldr	r2, [r2, r1]
 8009e64:	2300      	movs	r3, #0
 8009e66:	0031      	movs	r1, r6
 8009e68:	f7ff fe50 	bl	8009b0c <__multadd>
 8009e6c:	0006      	movs	r6, r0
 8009e6e:	10ad      	asrs	r5, r5, #2
 8009e70:	d03d      	beq.n	8009eee <__pow5mult+0xa2>
 8009e72:	69fc      	ldr	r4, [r7, #28]
 8009e74:	2c00      	cmp	r4, #0
 8009e76:	d10f      	bne.n	8009e98 <__pow5mult+0x4c>
 8009e78:	2010      	movs	r0, #16
 8009e7a:	f7fc faeb 	bl	8006454 <malloc>
 8009e7e:	1e02      	subs	r2, r0, #0
 8009e80:	61f8      	str	r0, [r7, #28]
 8009e82:	d105      	bne.n	8009e90 <__pow5mult+0x44>
 8009e84:	21b4      	movs	r1, #180	; 0xb4
 8009e86:	4b1c      	ldr	r3, [pc, #112]	; (8009ef8 <__pow5mult+0xac>)
 8009e88:	481c      	ldr	r0, [pc, #112]	; (8009efc <__pow5mult+0xb0>)
 8009e8a:	31ff      	adds	r1, #255	; 0xff
 8009e8c:	f001 f86c 	bl	800af68 <__assert_func>
 8009e90:	6044      	str	r4, [r0, #4]
 8009e92:	6084      	str	r4, [r0, #8]
 8009e94:	6004      	str	r4, [r0, #0]
 8009e96:	60c4      	str	r4, [r0, #12]
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	689c      	ldr	r4, [r3, #8]
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	2c00      	cmp	r4, #0
 8009ea0:	d108      	bne.n	8009eb4 <__pow5mult+0x68>
 8009ea2:	0038      	movs	r0, r7
 8009ea4:	4916      	ldr	r1, [pc, #88]	; (8009f00 <__pow5mult+0xb4>)
 8009ea6:	f7ff ff09 	bl	8009cbc <__i2b>
 8009eaa:	9b01      	ldr	r3, [sp, #4]
 8009eac:	0004      	movs	r4, r0
 8009eae:	6098      	str	r0, [r3, #8]
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	6003      	str	r3, [r0, #0]
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	421d      	tst	r5, r3
 8009eb8:	d00a      	beq.n	8009ed0 <__pow5mult+0x84>
 8009eba:	0031      	movs	r1, r6
 8009ebc:	0022      	movs	r2, r4
 8009ebe:	0038      	movs	r0, r7
 8009ec0:	f7ff ff14 	bl	8009cec <__multiply>
 8009ec4:	0031      	movs	r1, r6
 8009ec6:	9001      	str	r0, [sp, #4]
 8009ec8:	0038      	movs	r0, r7
 8009eca:	f7ff fdfb 	bl	8009ac4 <_Bfree>
 8009ece:	9e01      	ldr	r6, [sp, #4]
 8009ed0:	106d      	asrs	r5, r5, #1
 8009ed2:	d00c      	beq.n	8009eee <__pow5mult+0xa2>
 8009ed4:	6820      	ldr	r0, [r4, #0]
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d107      	bne.n	8009eea <__pow5mult+0x9e>
 8009eda:	0022      	movs	r2, r4
 8009edc:	0021      	movs	r1, r4
 8009ede:	0038      	movs	r0, r7
 8009ee0:	f7ff ff04 	bl	8009cec <__multiply>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	6020      	str	r0, [r4, #0]
 8009ee8:	6003      	str	r3, [r0, #0]
 8009eea:	0004      	movs	r4, r0
 8009eec:	e7e2      	b.n	8009eb4 <__pow5mult+0x68>
 8009eee:	0030      	movs	r0, r6
 8009ef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ef2:	46c0      	nop			; (mov r8, r8)
 8009ef4:	0800bcf8 	.word	0x0800bcf8
 8009ef8:	0800bacd 	.word	0x0800bacd
 8009efc:	0800bbad 	.word	0x0800bbad
 8009f00:	00000271 	.word	0x00000271

08009f04 <__lshift>:
 8009f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f06:	000c      	movs	r4, r1
 8009f08:	0017      	movs	r7, r2
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	1155      	asrs	r5, r2, #5
 8009f0e:	b087      	sub	sp, #28
 8009f10:	18eb      	adds	r3, r5, r3
 8009f12:	9302      	str	r3, [sp, #8]
 8009f14:	3301      	adds	r3, #1
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	6849      	ldr	r1, [r1, #4]
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	9004      	str	r0, [sp, #16]
 8009f1e:	9a01      	ldr	r2, [sp, #4]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	db10      	blt.n	8009f46 <__lshift+0x42>
 8009f24:	9804      	ldr	r0, [sp, #16]
 8009f26:	f7ff fd89 	bl	8009a3c <_Balloc>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	0002      	movs	r2, r0
 8009f2e:	0006      	movs	r6, r0
 8009f30:	0019      	movs	r1, r3
 8009f32:	3214      	adds	r2, #20
 8009f34:	4298      	cmp	r0, r3
 8009f36:	d10c      	bne.n	8009f52 <__lshift+0x4e>
 8009f38:	31df      	adds	r1, #223	; 0xdf
 8009f3a:	0032      	movs	r2, r6
 8009f3c:	4b26      	ldr	r3, [pc, #152]	; (8009fd8 <__lshift+0xd4>)
 8009f3e:	4827      	ldr	r0, [pc, #156]	; (8009fdc <__lshift+0xd8>)
 8009f40:	31ff      	adds	r1, #255	; 0xff
 8009f42:	f001 f811 	bl	800af68 <__assert_func>
 8009f46:	3101      	adds	r1, #1
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	e7e8      	b.n	8009f1e <__lshift+0x1a>
 8009f4c:	0098      	lsls	r0, r3, #2
 8009f4e:	5011      	str	r1, [r2, r0]
 8009f50:	3301      	adds	r3, #1
 8009f52:	42ab      	cmp	r3, r5
 8009f54:	dbfa      	blt.n	8009f4c <__lshift+0x48>
 8009f56:	43eb      	mvns	r3, r5
 8009f58:	17db      	asrs	r3, r3, #31
 8009f5a:	401d      	ands	r5, r3
 8009f5c:	211f      	movs	r1, #31
 8009f5e:	0023      	movs	r3, r4
 8009f60:	0038      	movs	r0, r7
 8009f62:	00ad      	lsls	r5, r5, #2
 8009f64:	1955      	adds	r5, r2, r5
 8009f66:	6922      	ldr	r2, [r4, #16]
 8009f68:	3314      	adds	r3, #20
 8009f6a:	0092      	lsls	r2, r2, #2
 8009f6c:	4008      	ands	r0, r1
 8009f6e:	4684      	mov	ip, r0
 8009f70:	189a      	adds	r2, r3, r2
 8009f72:	420f      	tst	r7, r1
 8009f74:	d02a      	beq.n	8009fcc <__lshift+0xc8>
 8009f76:	3101      	adds	r1, #1
 8009f78:	1a09      	subs	r1, r1, r0
 8009f7a:	9105      	str	r1, [sp, #20]
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	9503      	str	r5, [sp, #12]
 8009f80:	4667      	mov	r7, ip
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	40b8      	lsls	r0, r7
 8009f86:	4308      	orrs	r0, r1
 8009f88:	9903      	ldr	r1, [sp, #12]
 8009f8a:	c101      	stmia	r1!, {r0}
 8009f8c:	9103      	str	r1, [sp, #12]
 8009f8e:	9805      	ldr	r0, [sp, #20]
 8009f90:	cb02      	ldmia	r3!, {r1}
 8009f92:	40c1      	lsrs	r1, r0
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d8f3      	bhi.n	8009f80 <__lshift+0x7c>
 8009f98:	0020      	movs	r0, r4
 8009f9a:	3015      	adds	r0, #21
 8009f9c:	2304      	movs	r3, #4
 8009f9e:	4282      	cmp	r2, r0
 8009fa0:	d304      	bcc.n	8009fac <__lshift+0xa8>
 8009fa2:	1b13      	subs	r3, r2, r4
 8009fa4:	3b15      	subs	r3, #21
 8009fa6:	089b      	lsrs	r3, r3, #2
 8009fa8:	3301      	adds	r3, #1
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	50e9      	str	r1, [r5, r3]
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	d002      	beq.n	8009fb8 <__lshift+0xb4>
 8009fb2:	9b02      	ldr	r3, [sp, #8]
 8009fb4:	3302      	adds	r3, #2
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	9b01      	ldr	r3, [sp, #4]
 8009fba:	9804      	ldr	r0, [sp, #16]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	0021      	movs	r1, r4
 8009fc0:	6133      	str	r3, [r6, #16]
 8009fc2:	f7ff fd7f 	bl	8009ac4 <_Bfree>
 8009fc6:	0030      	movs	r0, r6
 8009fc8:	b007      	add	sp, #28
 8009fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fcc:	cb02      	ldmia	r3!, {r1}
 8009fce:	c502      	stmia	r5!, {r1}
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d8fb      	bhi.n	8009fcc <__lshift+0xc8>
 8009fd4:	e7f0      	b.n	8009fb8 <__lshift+0xb4>
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	0800bb3c 	.word	0x0800bb3c
 8009fdc:	0800bbad 	.word	0x0800bbad

08009fe0 <__mcmp>:
 8009fe0:	b530      	push	{r4, r5, lr}
 8009fe2:	690b      	ldr	r3, [r1, #16]
 8009fe4:	6904      	ldr	r4, [r0, #16]
 8009fe6:	0002      	movs	r2, r0
 8009fe8:	1ae0      	subs	r0, r4, r3
 8009fea:	429c      	cmp	r4, r3
 8009fec:	d10e      	bne.n	800a00c <__mcmp+0x2c>
 8009fee:	3214      	adds	r2, #20
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	3114      	adds	r1, #20
 8009ff4:	0014      	movs	r4, r2
 8009ff6:	18c9      	adds	r1, r1, r3
 8009ff8:	18d2      	adds	r2, r2, r3
 8009ffa:	3a04      	subs	r2, #4
 8009ffc:	3904      	subs	r1, #4
 8009ffe:	6815      	ldr	r5, [r2, #0]
 800a000:	680b      	ldr	r3, [r1, #0]
 800a002:	429d      	cmp	r5, r3
 800a004:	d003      	beq.n	800a00e <__mcmp+0x2e>
 800a006:	2001      	movs	r0, #1
 800a008:	429d      	cmp	r5, r3
 800a00a:	d303      	bcc.n	800a014 <__mcmp+0x34>
 800a00c:	bd30      	pop	{r4, r5, pc}
 800a00e:	4294      	cmp	r4, r2
 800a010:	d3f3      	bcc.n	8009ffa <__mcmp+0x1a>
 800a012:	e7fb      	b.n	800a00c <__mcmp+0x2c>
 800a014:	4240      	negs	r0, r0
 800a016:	e7f9      	b.n	800a00c <__mcmp+0x2c>

0800a018 <__mdiff>:
 800a018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a01a:	000e      	movs	r6, r1
 800a01c:	0007      	movs	r7, r0
 800a01e:	0011      	movs	r1, r2
 800a020:	0030      	movs	r0, r6
 800a022:	b087      	sub	sp, #28
 800a024:	0014      	movs	r4, r2
 800a026:	f7ff ffdb 	bl	8009fe0 <__mcmp>
 800a02a:	1e05      	subs	r5, r0, #0
 800a02c:	d110      	bne.n	800a050 <__mdiff+0x38>
 800a02e:	0001      	movs	r1, r0
 800a030:	0038      	movs	r0, r7
 800a032:	f7ff fd03 	bl	8009a3c <_Balloc>
 800a036:	1e02      	subs	r2, r0, #0
 800a038:	d104      	bne.n	800a044 <__mdiff+0x2c>
 800a03a:	4b3f      	ldr	r3, [pc, #252]	; (800a138 <__mdiff+0x120>)
 800a03c:	483f      	ldr	r0, [pc, #252]	; (800a13c <__mdiff+0x124>)
 800a03e:	4940      	ldr	r1, [pc, #256]	; (800a140 <__mdiff+0x128>)
 800a040:	f000 ff92 	bl	800af68 <__assert_func>
 800a044:	2301      	movs	r3, #1
 800a046:	6145      	str	r5, [r0, #20]
 800a048:	6103      	str	r3, [r0, #16]
 800a04a:	0010      	movs	r0, r2
 800a04c:	b007      	add	sp, #28
 800a04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a050:	2301      	movs	r3, #1
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	2800      	cmp	r0, #0
 800a056:	db04      	blt.n	800a062 <__mdiff+0x4a>
 800a058:	0023      	movs	r3, r4
 800a05a:	0034      	movs	r4, r6
 800a05c:	001e      	movs	r6, r3
 800a05e:	2300      	movs	r3, #0
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	0038      	movs	r0, r7
 800a064:	6861      	ldr	r1, [r4, #4]
 800a066:	f7ff fce9 	bl	8009a3c <_Balloc>
 800a06a:	1e02      	subs	r2, r0, #0
 800a06c:	d103      	bne.n	800a076 <__mdiff+0x5e>
 800a06e:	4b32      	ldr	r3, [pc, #200]	; (800a138 <__mdiff+0x120>)
 800a070:	4832      	ldr	r0, [pc, #200]	; (800a13c <__mdiff+0x124>)
 800a072:	4934      	ldr	r1, [pc, #208]	; (800a144 <__mdiff+0x12c>)
 800a074:	e7e4      	b.n	800a040 <__mdiff+0x28>
 800a076:	9b01      	ldr	r3, [sp, #4]
 800a078:	2700      	movs	r7, #0
 800a07a:	60c3      	str	r3, [r0, #12]
 800a07c:	6920      	ldr	r0, [r4, #16]
 800a07e:	3414      	adds	r4, #20
 800a080:	0083      	lsls	r3, r0, #2
 800a082:	18e3      	adds	r3, r4, r3
 800a084:	0021      	movs	r1, r4
 800a086:	9401      	str	r4, [sp, #4]
 800a088:	0034      	movs	r4, r6
 800a08a:	9302      	str	r3, [sp, #8]
 800a08c:	6933      	ldr	r3, [r6, #16]
 800a08e:	3414      	adds	r4, #20
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	18e3      	adds	r3, r4, r3
 800a094:	9303      	str	r3, [sp, #12]
 800a096:	0013      	movs	r3, r2
 800a098:	3314      	adds	r3, #20
 800a09a:	469c      	mov	ip, r3
 800a09c:	9305      	str	r3, [sp, #20]
 800a09e:	9104      	str	r1, [sp, #16]
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	cc02      	ldmia	r4!, {r1}
 800a0a4:	cb20      	ldmia	r3!, {r5}
 800a0a6:	9304      	str	r3, [sp, #16]
 800a0a8:	b2ab      	uxth	r3, r5
 800a0aa:	19df      	adds	r7, r3, r7
 800a0ac:	b28b      	uxth	r3, r1
 800a0ae:	1afb      	subs	r3, r7, r3
 800a0b0:	0c09      	lsrs	r1, r1, #16
 800a0b2:	0c2d      	lsrs	r5, r5, #16
 800a0b4:	1a6d      	subs	r5, r5, r1
 800a0b6:	1419      	asrs	r1, r3, #16
 800a0b8:	1869      	adds	r1, r5, r1
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	140f      	asrs	r7, r1, #16
 800a0be:	0409      	lsls	r1, r1, #16
 800a0c0:	4319      	orrs	r1, r3
 800a0c2:	4663      	mov	r3, ip
 800a0c4:	c302      	stmia	r3!, {r1}
 800a0c6:	469c      	mov	ip, r3
 800a0c8:	9b03      	ldr	r3, [sp, #12]
 800a0ca:	42a3      	cmp	r3, r4
 800a0cc:	d8e8      	bhi.n	800a0a0 <__mdiff+0x88>
 800a0ce:	0031      	movs	r1, r6
 800a0d0:	9c03      	ldr	r4, [sp, #12]
 800a0d2:	3115      	adds	r1, #21
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	428c      	cmp	r4, r1
 800a0d8:	d304      	bcc.n	800a0e4 <__mdiff+0xcc>
 800a0da:	1ba3      	subs	r3, r4, r6
 800a0dc:	3b15      	subs	r3, #21
 800a0de:	089b      	lsrs	r3, r3, #2
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	9901      	ldr	r1, [sp, #4]
 800a0e6:	18cd      	adds	r5, r1, r3
 800a0e8:	9905      	ldr	r1, [sp, #20]
 800a0ea:	002e      	movs	r6, r5
 800a0ec:	18cb      	adds	r3, r1, r3
 800a0ee:	469c      	mov	ip, r3
 800a0f0:	9902      	ldr	r1, [sp, #8]
 800a0f2:	428e      	cmp	r6, r1
 800a0f4:	d310      	bcc.n	800a118 <__mdiff+0x100>
 800a0f6:	9e02      	ldr	r6, [sp, #8]
 800a0f8:	1ee9      	subs	r1, r5, #3
 800a0fa:	2400      	movs	r4, #0
 800a0fc:	428e      	cmp	r6, r1
 800a0fe:	d304      	bcc.n	800a10a <__mdiff+0xf2>
 800a100:	0031      	movs	r1, r6
 800a102:	3103      	adds	r1, #3
 800a104:	1b49      	subs	r1, r1, r5
 800a106:	0889      	lsrs	r1, r1, #2
 800a108:	008c      	lsls	r4, r1, #2
 800a10a:	191b      	adds	r3, r3, r4
 800a10c:	3b04      	subs	r3, #4
 800a10e:	6819      	ldr	r1, [r3, #0]
 800a110:	2900      	cmp	r1, #0
 800a112:	d00f      	beq.n	800a134 <__mdiff+0x11c>
 800a114:	6110      	str	r0, [r2, #16]
 800a116:	e798      	b.n	800a04a <__mdiff+0x32>
 800a118:	ce02      	ldmia	r6!, {r1}
 800a11a:	b28c      	uxth	r4, r1
 800a11c:	19e4      	adds	r4, r4, r7
 800a11e:	0c0f      	lsrs	r7, r1, #16
 800a120:	1421      	asrs	r1, r4, #16
 800a122:	1879      	adds	r1, r7, r1
 800a124:	b2a4      	uxth	r4, r4
 800a126:	140f      	asrs	r7, r1, #16
 800a128:	0409      	lsls	r1, r1, #16
 800a12a:	4321      	orrs	r1, r4
 800a12c:	4664      	mov	r4, ip
 800a12e:	c402      	stmia	r4!, {r1}
 800a130:	46a4      	mov	ip, r4
 800a132:	e7dd      	b.n	800a0f0 <__mdiff+0xd8>
 800a134:	3801      	subs	r0, #1
 800a136:	e7e9      	b.n	800a10c <__mdiff+0xf4>
 800a138:	0800bb3c 	.word	0x0800bb3c
 800a13c:	0800bbad 	.word	0x0800bbad
 800a140:	00000237 	.word	0x00000237
 800a144:	00000245 	.word	0x00000245

0800a148 <__ulp>:
 800a148:	2000      	movs	r0, #0
 800a14a:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <__ulp+0x30>)
 800a14c:	4019      	ands	r1, r3
 800a14e:	4b0b      	ldr	r3, [pc, #44]	; (800a17c <__ulp+0x34>)
 800a150:	18c9      	adds	r1, r1, r3
 800a152:	4281      	cmp	r1, r0
 800a154:	dc06      	bgt.n	800a164 <__ulp+0x1c>
 800a156:	4249      	negs	r1, r1
 800a158:	150b      	asrs	r3, r1, #20
 800a15a:	2b13      	cmp	r3, #19
 800a15c:	dc03      	bgt.n	800a166 <__ulp+0x1e>
 800a15e:	2180      	movs	r1, #128	; 0x80
 800a160:	0309      	lsls	r1, r1, #12
 800a162:	4119      	asrs	r1, r3
 800a164:	4770      	bx	lr
 800a166:	3b14      	subs	r3, #20
 800a168:	2001      	movs	r0, #1
 800a16a:	2b1e      	cmp	r3, #30
 800a16c:	dc02      	bgt.n	800a174 <__ulp+0x2c>
 800a16e:	2080      	movs	r0, #128	; 0x80
 800a170:	0600      	lsls	r0, r0, #24
 800a172:	40d8      	lsrs	r0, r3
 800a174:	2100      	movs	r1, #0
 800a176:	e7f5      	b.n	800a164 <__ulp+0x1c>
 800a178:	7ff00000 	.word	0x7ff00000
 800a17c:	fcc00000 	.word	0xfcc00000

0800a180 <__b2d>:
 800a180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a182:	0006      	movs	r6, r0
 800a184:	6903      	ldr	r3, [r0, #16]
 800a186:	3614      	adds	r6, #20
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	18f3      	adds	r3, r6, r3
 800a18c:	1f1d      	subs	r5, r3, #4
 800a18e:	682c      	ldr	r4, [r5, #0]
 800a190:	000f      	movs	r7, r1
 800a192:	0020      	movs	r0, r4
 800a194:	9301      	str	r3, [sp, #4]
 800a196:	f7ff fd49 	bl	8009c2c <__hi0bits>
 800a19a:	2220      	movs	r2, #32
 800a19c:	1a12      	subs	r2, r2, r0
 800a19e:	603a      	str	r2, [r7, #0]
 800a1a0:	0003      	movs	r3, r0
 800a1a2:	4a1c      	ldr	r2, [pc, #112]	; (800a214 <__b2d+0x94>)
 800a1a4:	280a      	cmp	r0, #10
 800a1a6:	dc15      	bgt.n	800a1d4 <__b2d+0x54>
 800a1a8:	210b      	movs	r1, #11
 800a1aa:	0027      	movs	r7, r4
 800a1ac:	1a09      	subs	r1, r1, r0
 800a1ae:	40cf      	lsrs	r7, r1
 800a1b0:	433a      	orrs	r2, r7
 800a1b2:	468c      	mov	ip, r1
 800a1b4:	0011      	movs	r1, r2
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	42ae      	cmp	r6, r5
 800a1ba:	d202      	bcs.n	800a1c2 <__b2d+0x42>
 800a1bc:	9a01      	ldr	r2, [sp, #4]
 800a1be:	3a08      	subs	r2, #8
 800a1c0:	6812      	ldr	r2, [r2, #0]
 800a1c2:	3315      	adds	r3, #21
 800a1c4:	409c      	lsls	r4, r3
 800a1c6:	4663      	mov	r3, ip
 800a1c8:	0027      	movs	r7, r4
 800a1ca:	40da      	lsrs	r2, r3
 800a1cc:	4317      	orrs	r7, r2
 800a1ce:	0038      	movs	r0, r7
 800a1d0:	b003      	add	sp, #12
 800a1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1d4:	2700      	movs	r7, #0
 800a1d6:	42ae      	cmp	r6, r5
 800a1d8:	d202      	bcs.n	800a1e0 <__b2d+0x60>
 800a1da:	9d01      	ldr	r5, [sp, #4]
 800a1dc:	3d08      	subs	r5, #8
 800a1de:	682f      	ldr	r7, [r5, #0]
 800a1e0:	210b      	movs	r1, #11
 800a1e2:	4249      	negs	r1, r1
 800a1e4:	468c      	mov	ip, r1
 800a1e6:	449c      	add	ip, r3
 800a1e8:	2b0b      	cmp	r3, #11
 800a1ea:	d010      	beq.n	800a20e <__b2d+0x8e>
 800a1ec:	4661      	mov	r1, ip
 800a1ee:	2320      	movs	r3, #32
 800a1f0:	408c      	lsls	r4, r1
 800a1f2:	1a5b      	subs	r3, r3, r1
 800a1f4:	0039      	movs	r1, r7
 800a1f6:	40d9      	lsrs	r1, r3
 800a1f8:	430c      	orrs	r4, r1
 800a1fa:	4322      	orrs	r2, r4
 800a1fc:	0011      	movs	r1, r2
 800a1fe:	2200      	movs	r2, #0
 800a200:	42b5      	cmp	r5, r6
 800a202:	d901      	bls.n	800a208 <__b2d+0x88>
 800a204:	3d04      	subs	r5, #4
 800a206:	682a      	ldr	r2, [r5, #0]
 800a208:	4664      	mov	r4, ip
 800a20a:	40a7      	lsls	r7, r4
 800a20c:	e7dd      	b.n	800a1ca <__b2d+0x4a>
 800a20e:	4322      	orrs	r2, r4
 800a210:	0011      	movs	r1, r2
 800a212:	e7dc      	b.n	800a1ce <__b2d+0x4e>
 800a214:	3ff00000 	.word	0x3ff00000

0800a218 <__d2b>:
 800a218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a21a:	2101      	movs	r1, #1
 800a21c:	0014      	movs	r4, r2
 800a21e:	001d      	movs	r5, r3
 800a220:	9f08      	ldr	r7, [sp, #32]
 800a222:	f7ff fc0b 	bl	8009a3c <_Balloc>
 800a226:	1e06      	subs	r6, r0, #0
 800a228:	d105      	bne.n	800a236 <__d2b+0x1e>
 800a22a:	0032      	movs	r2, r6
 800a22c:	4b24      	ldr	r3, [pc, #144]	; (800a2c0 <__d2b+0xa8>)
 800a22e:	4825      	ldr	r0, [pc, #148]	; (800a2c4 <__d2b+0xac>)
 800a230:	4925      	ldr	r1, [pc, #148]	; (800a2c8 <__d2b+0xb0>)
 800a232:	f000 fe99 	bl	800af68 <__assert_func>
 800a236:	032b      	lsls	r3, r5, #12
 800a238:	006d      	lsls	r5, r5, #1
 800a23a:	0b1b      	lsrs	r3, r3, #12
 800a23c:	0d6d      	lsrs	r5, r5, #21
 800a23e:	d125      	bne.n	800a28c <__d2b+0x74>
 800a240:	9301      	str	r3, [sp, #4]
 800a242:	2c00      	cmp	r4, #0
 800a244:	d028      	beq.n	800a298 <__d2b+0x80>
 800a246:	4668      	mov	r0, sp
 800a248:	9400      	str	r4, [sp, #0]
 800a24a:	f7ff fd09 	bl	8009c60 <__lo0bits>
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	9900      	ldr	r1, [sp, #0]
 800a252:	2800      	cmp	r0, #0
 800a254:	d01e      	beq.n	800a294 <__d2b+0x7c>
 800a256:	2220      	movs	r2, #32
 800a258:	001c      	movs	r4, r3
 800a25a:	1a12      	subs	r2, r2, r0
 800a25c:	4094      	lsls	r4, r2
 800a25e:	0022      	movs	r2, r4
 800a260:	40c3      	lsrs	r3, r0
 800a262:	430a      	orrs	r2, r1
 800a264:	6172      	str	r2, [r6, #20]
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	9c01      	ldr	r4, [sp, #4]
 800a26a:	61b4      	str	r4, [r6, #24]
 800a26c:	1e63      	subs	r3, r4, #1
 800a26e:	419c      	sbcs	r4, r3
 800a270:	3401      	adds	r4, #1
 800a272:	6134      	str	r4, [r6, #16]
 800a274:	2d00      	cmp	r5, #0
 800a276:	d017      	beq.n	800a2a8 <__d2b+0x90>
 800a278:	2435      	movs	r4, #53	; 0x35
 800a27a:	4b14      	ldr	r3, [pc, #80]	; (800a2cc <__d2b+0xb4>)
 800a27c:	18ed      	adds	r5, r5, r3
 800a27e:	182d      	adds	r5, r5, r0
 800a280:	603d      	str	r5, [r7, #0]
 800a282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a284:	1a24      	subs	r4, r4, r0
 800a286:	601c      	str	r4, [r3, #0]
 800a288:	0030      	movs	r0, r6
 800a28a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a28c:	2280      	movs	r2, #128	; 0x80
 800a28e:	0352      	lsls	r2, r2, #13
 800a290:	4313      	orrs	r3, r2
 800a292:	e7d5      	b.n	800a240 <__d2b+0x28>
 800a294:	6171      	str	r1, [r6, #20]
 800a296:	e7e7      	b.n	800a268 <__d2b+0x50>
 800a298:	a801      	add	r0, sp, #4
 800a29a:	f7ff fce1 	bl	8009c60 <__lo0bits>
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	2401      	movs	r4, #1
 800a2a2:	6173      	str	r3, [r6, #20]
 800a2a4:	3020      	adds	r0, #32
 800a2a6:	e7e4      	b.n	800a272 <__d2b+0x5a>
 800a2a8:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <__d2b+0xb8>)
 800a2aa:	18c0      	adds	r0, r0, r3
 800a2ac:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <__d2b+0xbc>)
 800a2ae:	6038      	str	r0, [r7, #0]
 800a2b0:	18e3      	adds	r3, r4, r3
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	18f3      	adds	r3, r6, r3
 800a2b6:	6958      	ldr	r0, [r3, #20]
 800a2b8:	f7ff fcb8 	bl	8009c2c <__hi0bits>
 800a2bc:	0164      	lsls	r4, r4, #5
 800a2be:	e7e0      	b.n	800a282 <__d2b+0x6a>
 800a2c0:	0800bb3c 	.word	0x0800bb3c
 800a2c4:	0800bbad 	.word	0x0800bbad
 800a2c8:	0000030f 	.word	0x0000030f
 800a2cc:	fffffbcd 	.word	0xfffffbcd
 800a2d0:	fffffbce 	.word	0xfffffbce
 800a2d4:	3fffffff 	.word	0x3fffffff

0800a2d8 <__ratio>:
 800a2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	000f      	movs	r7, r1
 800a2de:	a904      	add	r1, sp, #16
 800a2e0:	0006      	movs	r6, r0
 800a2e2:	f7ff ff4d 	bl	800a180 <__b2d>
 800a2e6:	9000      	str	r0, [sp, #0]
 800a2e8:	9101      	str	r1, [sp, #4]
 800a2ea:	9c00      	ldr	r4, [sp, #0]
 800a2ec:	9d01      	ldr	r5, [sp, #4]
 800a2ee:	0038      	movs	r0, r7
 800a2f0:	a905      	add	r1, sp, #20
 800a2f2:	f7ff ff45 	bl	800a180 <__b2d>
 800a2f6:	9002      	str	r0, [sp, #8]
 800a2f8:	9103      	str	r1, [sp, #12]
 800a2fa:	9a02      	ldr	r2, [sp, #8]
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	6930      	ldr	r0, [r6, #16]
 800a300:	6939      	ldr	r1, [r7, #16]
 800a302:	9e04      	ldr	r6, [sp, #16]
 800a304:	1a40      	subs	r0, r0, r1
 800a306:	9905      	ldr	r1, [sp, #20]
 800a308:	0140      	lsls	r0, r0, #5
 800a30a:	1a71      	subs	r1, r6, r1
 800a30c:	1841      	adds	r1, r0, r1
 800a30e:	0508      	lsls	r0, r1, #20
 800a310:	2900      	cmp	r1, #0
 800a312:	dd07      	ble.n	800a324 <__ratio+0x4c>
 800a314:	9901      	ldr	r1, [sp, #4]
 800a316:	1845      	adds	r5, r0, r1
 800a318:	0020      	movs	r0, r4
 800a31a:	0029      	movs	r1, r5
 800a31c:	f7f6 fd7e 	bl	8000e1c <__aeabi_ddiv>
 800a320:	b007      	add	sp, #28
 800a322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a324:	9903      	ldr	r1, [sp, #12]
 800a326:	1a0b      	subs	r3, r1, r0
 800a328:	e7f6      	b.n	800a318 <__ratio+0x40>

0800a32a <__copybits>:
 800a32a:	b570      	push	{r4, r5, r6, lr}
 800a32c:	0014      	movs	r4, r2
 800a32e:	0005      	movs	r5, r0
 800a330:	3901      	subs	r1, #1
 800a332:	6913      	ldr	r3, [r2, #16]
 800a334:	1149      	asrs	r1, r1, #5
 800a336:	3101      	adds	r1, #1
 800a338:	0089      	lsls	r1, r1, #2
 800a33a:	3414      	adds	r4, #20
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	1841      	adds	r1, r0, r1
 800a340:	18e3      	adds	r3, r4, r3
 800a342:	42a3      	cmp	r3, r4
 800a344:	d80d      	bhi.n	800a362 <__copybits+0x38>
 800a346:	0014      	movs	r4, r2
 800a348:	3411      	adds	r4, #17
 800a34a:	2500      	movs	r5, #0
 800a34c:	429c      	cmp	r4, r3
 800a34e:	d803      	bhi.n	800a358 <__copybits+0x2e>
 800a350:	1a9b      	subs	r3, r3, r2
 800a352:	3b11      	subs	r3, #17
 800a354:	089b      	lsrs	r3, r3, #2
 800a356:	009d      	lsls	r5, r3, #2
 800a358:	2300      	movs	r3, #0
 800a35a:	1940      	adds	r0, r0, r5
 800a35c:	4281      	cmp	r1, r0
 800a35e:	d803      	bhi.n	800a368 <__copybits+0x3e>
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	cc40      	ldmia	r4!, {r6}
 800a364:	c540      	stmia	r5!, {r6}
 800a366:	e7ec      	b.n	800a342 <__copybits+0x18>
 800a368:	c008      	stmia	r0!, {r3}
 800a36a:	e7f7      	b.n	800a35c <__copybits+0x32>

0800a36c <__any_on>:
 800a36c:	0002      	movs	r2, r0
 800a36e:	6900      	ldr	r0, [r0, #16]
 800a370:	b510      	push	{r4, lr}
 800a372:	3214      	adds	r2, #20
 800a374:	114b      	asrs	r3, r1, #5
 800a376:	4298      	cmp	r0, r3
 800a378:	db13      	blt.n	800a3a2 <__any_on+0x36>
 800a37a:	dd0c      	ble.n	800a396 <__any_on+0x2a>
 800a37c:	241f      	movs	r4, #31
 800a37e:	0008      	movs	r0, r1
 800a380:	4020      	ands	r0, r4
 800a382:	4221      	tst	r1, r4
 800a384:	d007      	beq.n	800a396 <__any_on+0x2a>
 800a386:	0099      	lsls	r1, r3, #2
 800a388:	588c      	ldr	r4, [r1, r2]
 800a38a:	0021      	movs	r1, r4
 800a38c:	40c1      	lsrs	r1, r0
 800a38e:	4081      	lsls	r1, r0
 800a390:	2001      	movs	r0, #1
 800a392:	428c      	cmp	r4, r1
 800a394:	d104      	bne.n	800a3a0 <__any_on+0x34>
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	18d3      	adds	r3, r2, r3
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d803      	bhi.n	800a3a6 <__any_on+0x3a>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	bd10      	pop	{r4, pc}
 800a3a2:	0003      	movs	r3, r0
 800a3a4:	e7f7      	b.n	800a396 <__any_on+0x2a>
 800a3a6:	3b04      	subs	r3, #4
 800a3a8:	6819      	ldr	r1, [r3, #0]
 800a3aa:	2900      	cmp	r1, #0
 800a3ac:	d0f5      	beq.n	800a39a <__any_on+0x2e>
 800a3ae:	2001      	movs	r0, #1
 800a3b0:	e7f6      	b.n	800a3a0 <__any_on+0x34>

0800a3b2 <__ascii_wctomb>:
 800a3b2:	0003      	movs	r3, r0
 800a3b4:	1e08      	subs	r0, r1, #0
 800a3b6:	d005      	beq.n	800a3c4 <__ascii_wctomb+0x12>
 800a3b8:	2aff      	cmp	r2, #255	; 0xff
 800a3ba:	d904      	bls.n	800a3c6 <__ascii_wctomb+0x14>
 800a3bc:	228a      	movs	r2, #138	; 0x8a
 800a3be:	2001      	movs	r0, #1
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	4240      	negs	r0, r0
 800a3c4:	4770      	bx	lr
 800a3c6:	2001      	movs	r0, #1
 800a3c8:	700a      	strb	r2, [r1, #0]
 800a3ca:	e7fb      	b.n	800a3c4 <__ascii_wctomb+0x12>

0800a3cc <__ssputs_r>:
 800a3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	9203      	str	r2, [sp, #12]
 800a3d4:	688e      	ldr	r6, [r1, #8]
 800a3d6:	9a01      	ldr	r2, [sp, #4]
 800a3d8:	0007      	movs	r7, r0
 800a3da:	000c      	movs	r4, r1
 800a3dc:	680b      	ldr	r3, [r1, #0]
 800a3de:	4296      	cmp	r6, r2
 800a3e0:	d831      	bhi.n	800a446 <__ssputs_r+0x7a>
 800a3e2:	898a      	ldrh	r2, [r1, #12]
 800a3e4:	2190      	movs	r1, #144	; 0x90
 800a3e6:	00c9      	lsls	r1, r1, #3
 800a3e8:	420a      	tst	r2, r1
 800a3ea:	d029      	beq.n	800a440 <__ssputs_r+0x74>
 800a3ec:	2003      	movs	r0, #3
 800a3ee:	6921      	ldr	r1, [r4, #16]
 800a3f0:	1a5b      	subs	r3, r3, r1
 800a3f2:	9302      	str	r3, [sp, #8]
 800a3f4:	6963      	ldr	r3, [r4, #20]
 800a3f6:	4343      	muls	r3, r0
 800a3f8:	0fdd      	lsrs	r5, r3, #31
 800a3fa:	18ed      	adds	r5, r5, r3
 800a3fc:	9b01      	ldr	r3, [sp, #4]
 800a3fe:	9802      	ldr	r0, [sp, #8]
 800a400:	3301      	adds	r3, #1
 800a402:	181b      	adds	r3, r3, r0
 800a404:	106d      	asrs	r5, r5, #1
 800a406:	42ab      	cmp	r3, r5
 800a408:	d900      	bls.n	800a40c <__ssputs_r+0x40>
 800a40a:	001d      	movs	r5, r3
 800a40c:	0552      	lsls	r2, r2, #21
 800a40e:	d529      	bpl.n	800a464 <__ssputs_r+0x98>
 800a410:	0029      	movs	r1, r5
 800a412:	0038      	movs	r0, r7
 800a414:	f7fc f854 	bl	80064c0 <_malloc_r>
 800a418:	1e06      	subs	r6, r0, #0
 800a41a:	d02d      	beq.n	800a478 <__ssputs_r+0xac>
 800a41c:	9a02      	ldr	r2, [sp, #8]
 800a41e:	6921      	ldr	r1, [r4, #16]
 800a420:	f7fe f8a2 	bl	8008568 <memcpy>
 800a424:	89a2      	ldrh	r2, [r4, #12]
 800a426:	4b19      	ldr	r3, [pc, #100]	; (800a48c <__ssputs_r+0xc0>)
 800a428:	401a      	ands	r2, r3
 800a42a:	2380      	movs	r3, #128	; 0x80
 800a42c:	4313      	orrs	r3, r2
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	9b02      	ldr	r3, [sp, #8]
 800a432:	6126      	str	r6, [r4, #16]
 800a434:	18f6      	adds	r6, r6, r3
 800a436:	6026      	str	r6, [r4, #0]
 800a438:	6165      	str	r5, [r4, #20]
 800a43a:	9e01      	ldr	r6, [sp, #4]
 800a43c:	1aed      	subs	r5, r5, r3
 800a43e:	60a5      	str	r5, [r4, #8]
 800a440:	9b01      	ldr	r3, [sp, #4]
 800a442:	429e      	cmp	r6, r3
 800a444:	d900      	bls.n	800a448 <__ssputs_r+0x7c>
 800a446:	9e01      	ldr	r6, [sp, #4]
 800a448:	0032      	movs	r2, r6
 800a44a:	9903      	ldr	r1, [sp, #12]
 800a44c:	6820      	ldr	r0, [r4, #0]
 800a44e:	f000 fd77 	bl	800af40 <memmove>
 800a452:	2000      	movs	r0, #0
 800a454:	68a3      	ldr	r3, [r4, #8]
 800a456:	1b9b      	subs	r3, r3, r6
 800a458:	60a3      	str	r3, [r4, #8]
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	199b      	adds	r3, r3, r6
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	b005      	add	sp, #20
 800a462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a464:	002a      	movs	r2, r5
 800a466:	0038      	movs	r0, r7
 800a468:	f000 fdc9 	bl	800affe <_realloc_r>
 800a46c:	1e06      	subs	r6, r0, #0
 800a46e:	d1df      	bne.n	800a430 <__ssputs_r+0x64>
 800a470:	0038      	movs	r0, r7
 800a472:	6921      	ldr	r1, [r4, #16]
 800a474:	f7fe ff2a 	bl	80092cc <_free_r>
 800a478:	230c      	movs	r3, #12
 800a47a:	2001      	movs	r0, #1
 800a47c:	603b      	str	r3, [r7, #0]
 800a47e:	89a2      	ldrh	r2, [r4, #12]
 800a480:	3334      	adds	r3, #52	; 0x34
 800a482:	4313      	orrs	r3, r2
 800a484:	81a3      	strh	r3, [r4, #12]
 800a486:	4240      	negs	r0, r0
 800a488:	e7ea      	b.n	800a460 <__ssputs_r+0x94>
 800a48a:	46c0      	nop			; (mov r8, r8)
 800a48c:	fffffb7f 	.word	0xfffffb7f

0800a490 <_svfiprintf_r>:
 800a490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a492:	b0a1      	sub	sp, #132	; 0x84
 800a494:	9003      	str	r0, [sp, #12]
 800a496:	001d      	movs	r5, r3
 800a498:	898b      	ldrh	r3, [r1, #12]
 800a49a:	000f      	movs	r7, r1
 800a49c:	0016      	movs	r6, r2
 800a49e:	061b      	lsls	r3, r3, #24
 800a4a0:	d511      	bpl.n	800a4c6 <_svfiprintf_r+0x36>
 800a4a2:	690b      	ldr	r3, [r1, #16]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10e      	bne.n	800a4c6 <_svfiprintf_r+0x36>
 800a4a8:	2140      	movs	r1, #64	; 0x40
 800a4aa:	f7fc f809 	bl	80064c0 <_malloc_r>
 800a4ae:	6038      	str	r0, [r7, #0]
 800a4b0:	6138      	str	r0, [r7, #16]
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d105      	bne.n	800a4c2 <_svfiprintf_r+0x32>
 800a4b6:	230c      	movs	r3, #12
 800a4b8:	9a03      	ldr	r2, [sp, #12]
 800a4ba:	3801      	subs	r0, #1
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	b021      	add	sp, #132	; 0x84
 800a4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c2:	2340      	movs	r3, #64	; 0x40
 800a4c4:	617b      	str	r3, [r7, #20]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	ac08      	add	r4, sp, #32
 800a4ca:	6163      	str	r3, [r4, #20]
 800a4cc:	3320      	adds	r3, #32
 800a4ce:	7663      	strb	r3, [r4, #25]
 800a4d0:	3310      	adds	r3, #16
 800a4d2:	76a3      	strb	r3, [r4, #26]
 800a4d4:	9507      	str	r5, [sp, #28]
 800a4d6:	0035      	movs	r5, r6
 800a4d8:	782b      	ldrb	r3, [r5, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <_svfiprintf_r+0x52>
 800a4de:	2b25      	cmp	r3, #37	; 0x25
 800a4e0:	d148      	bne.n	800a574 <_svfiprintf_r+0xe4>
 800a4e2:	1bab      	subs	r3, r5, r6
 800a4e4:	9305      	str	r3, [sp, #20]
 800a4e6:	42b5      	cmp	r5, r6
 800a4e8:	d00b      	beq.n	800a502 <_svfiprintf_r+0x72>
 800a4ea:	0032      	movs	r2, r6
 800a4ec:	0039      	movs	r1, r7
 800a4ee:	9803      	ldr	r0, [sp, #12]
 800a4f0:	f7ff ff6c 	bl	800a3cc <__ssputs_r>
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d100      	bne.n	800a4fa <_svfiprintf_r+0x6a>
 800a4f8:	e0af      	b.n	800a65a <_svfiprintf_r+0x1ca>
 800a4fa:	6963      	ldr	r3, [r4, #20]
 800a4fc:	9a05      	ldr	r2, [sp, #20]
 800a4fe:	189b      	adds	r3, r3, r2
 800a500:	6163      	str	r3, [r4, #20]
 800a502:	782b      	ldrb	r3, [r5, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d100      	bne.n	800a50a <_svfiprintf_r+0x7a>
 800a508:	e0a7      	b.n	800a65a <_svfiprintf_r+0x1ca>
 800a50a:	2201      	movs	r2, #1
 800a50c:	2300      	movs	r3, #0
 800a50e:	4252      	negs	r2, r2
 800a510:	6062      	str	r2, [r4, #4]
 800a512:	a904      	add	r1, sp, #16
 800a514:	3254      	adds	r2, #84	; 0x54
 800a516:	1852      	adds	r2, r2, r1
 800a518:	1c6e      	adds	r6, r5, #1
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	60e3      	str	r3, [r4, #12]
 800a51e:	60a3      	str	r3, [r4, #8]
 800a520:	7013      	strb	r3, [r2, #0]
 800a522:	65a3      	str	r3, [r4, #88]	; 0x58
 800a524:	4b55      	ldr	r3, [pc, #340]	; (800a67c <_svfiprintf_r+0x1ec>)
 800a526:	2205      	movs	r2, #5
 800a528:	0018      	movs	r0, r3
 800a52a:	7831      	ldrb	r1, [r6, #0]
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	f7fe f810 	bl	8008552 <memchr>
 800a532:	1c75      	adds	r5, r6, #1
 800a534:	2800      	cmp	r0, #0
 800a536:	d11f      	bne.n	800a578 <_svfiprintf_r+0xe8>
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	06d3      	lsls	r3, r2, #27
 800a53c:	d504      	bpl.n	800a548 <_svfiprintf_r+0xb8>
 800a53e:	2353      	movs	r3, #83	; 0x53
 800a540:	a904      	add	r1, sp, #16
 800a542:	185b      	adds	r3, r3, r1
 800a544:	2120      	movs	r1, #32
 800a546:	7019      	strb	r1, [r3, #0]
 800a548:	0713      	lsls	r3, r2, #28
 800a54a:	d504      	bpl.n	800a556 <_svfiprintf_r+0xc6>
 800a54c:	2353      	movs	r3, #83	; 0x53
 800a54e:	a904      	add	r1, sp, #16
 800a550:	185b      	adds	r3, r3, r1
 800a552:	212b      	movs	r1, #43	; 0x2b
 800a554:	7019      	strb	r1, [r3, #0]
 800a556:	7833      	ldrb	r3, [r6, #0]
 800a558:	2b2a      	cmp	r3, #42	; 0x2a
 800a55a:	d016      	beq.n	800a58a <_svfiprintf_r+0xfa>
 800a55c:	0035      	movs	r5, r6
 800a55e:	2100      	movs	r1, #0
 800a560:	200a      	movs	r0, #10
 800a562:	68e3      	ldr	r3, [r4, #12]
 800a564:	782a      	ldrb	r2, [r5, #0]
 800a566:	1c6e      	adds	r6, r5, #1
 800a568:	3a30      	subs	r2, #48	; 0x30
 800a56a:	2a09      	cmp	r2, #9
 800a56c:	d94e      	bls.n	800a60c <_svfiprintf_r+0x17c>
 800a56e:	2900      	cmp	r1, #0
 800a570:	d111      	bne.n	800a596 <_svfiprintf_r+0x106>
 800a572:	e017      	b.n	800a5a4 <_svfiprintf_r+0x114>
 800a574:	3501      	adds	r5, #1
 800a576:	e7af      	b.n	800a4d8 <_svfiprintf_r+0x48>
 800a578:	9b05      	ldr	r3, [sp, #20]
 800a57a:	6822      	ldr	r2, [r4, #0]
 800a57c:	1ac0      	subs	r0, r0, r3
 800a57e:	2301      	movs	r3, #1
 800a580:	4083      	lsls	r3, r0
 800a582:	4313      	orrs	r3, r2
 800a584:	002e      	movs	r6, r5
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	e7cc      	b.n	800a524 <_svfiprintf_r+0x94>
 800a58a:	9b07      	ldr	r3, [sp, #28]
 800a58c:	1d19      	adds	r1, r3, #4
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	9107      	str	r1, [sp, #28]
 800a592:	2b00      	cmp	r3, #0
 800a594:	db01      	blt.n	800a59a <_svfiprintf_r+0x10a>
 800a596:	930b      	str	r3, [sp, #44]	; 0x2c
 800a598:	e004      	b.n	800a5a4 <_svfiprintf_r+0x114>
 800a59a:	425b      	negs	r3, r3
 800a59c:	60e3      	str	r3, [r4, #12]
 800a59e:	2302      	movs	r3, #2
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	6023      	str	r3, [r4, #0]
 800a5a4:	782b      	ldrb	r3, [r5, #0]
 800a5a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a5a8:	d10a      	bne.n	800a5c0 <_svfiprintf_r+0x130>
 800a5aa:	786b      	ldrb	r3, [r5, #1]
 800a5ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ae:	d135      	bne.n	800a61c <_svfiprintf_r+0x18c>
 800a5b0:	9b07      	ldr	r3, [sp, #28]
 800a5b2:	3502      	adds	r5, #2
 800a5b4:	1d1a      	adds	r2, r3, #4
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	9207      	str	r2, [sp, #28]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	db2b      	blt.n	800a616 <_svfiprintf_r+0x186>
 800a5be:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c0:	4e2f      	ldr	r6, [pc, #188]	; (800a680 <_svfiprintf_r+0x1f0>)
 800a5c2:	2203      	movs	r2, #3
 800a5c4:	0030      	movs	r0, r6
 800a5c6:	7829      	ldrb	r1, [r5, #0]
 800a5c8:	f7fd ffc3 	bl	8008552 <memchr>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d006      	beq.n	800a5de <_svfiprintf_r+0x14e>
 800a5d0:	2340      	movs	r3, #64	; 0x40
 800a5d2:	1b80      	subs	r0, r0, r6
 800a5d4:	4083      	lsls	r3, r0
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	3501      	adds	r5, #1
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	7829      	ldrb	r1, [r5, #0]
 800a5e0:	2206      	movs	r2, #6
 800a5e2:	4828      	ldr	r0, [pc, #160]	; (800a684 <_svfiprintf_r+0x1f4>)
 800a5e4:	1c6e      	adds	r6, r5, #1
 800a5e6:	7621      	strb	r1, [r4, #24]
 800a5e8:	f7fd ffb3 	bl	8008552 <memchr>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d03c      	beq.n	800a66a <_svfiprintf_r+0x1da>
 800a5f0:	4b25      	ldr	r3, [pc, #148]	; (800a688 <_svfiprintf_r+0x1f8>)
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d125      	bne.n	800a642 <_svfiprintf_r+0x1b2>
 800a5f6:	2207      	movs	r2, #7
 800a5f8:	9b07      	ldr	r3, [sp, #28]
 800a5fa:	3307      	adds	r3, #7
 800a5fc:	4393      	bics	r3, r2
 800a5fe:	3308      	adds	r3, #8
 800a600:	9307      	str	r3, [sp, #28]
 800a602:	6963      	ldr	r3, [r4, #20]
 800a604:	9a04      	ldr	r2, [sp, #16]
 800a606:	189b      	adds	r3, r3, r2
 800a608:	6163      	str	r3, [r4, #20]
 800a60a:	e764      	b.n	800a4d6 <_svfiprintf_r+0x46>
 800a60c:	4343      	muls	r3, r0
 800a60e:	0035      	movs	r5, r6
 800a610:	2101      	movs	r1, #1
 800a612:	189b      	adds	r3, r3, r2
 800a614:	e7a6      	b.n	800a564 <_svfiprintf_r+0xd4>
 800a616:	2301      	movs	r3, #1
 800a618:	425b      	negs	r3, r3
 800a61a:	e7d0      	b.n	800a5be <_svfiprintf_r+0x12e>
 800a61c:	2300      	movs	r3, #0
 800a61e:	200a      	movs	r0, #10
 800a620:	001a      	movs	r2, r3
 800a622:	3501      	adds	r5, #1
 800a624:	6063      	str	r3, [r4, #4]
 800a626:	7829      	ldrb	r1, [r5, #0]
 800a628:	1c6e      	adds	r6, r5, #1
 800a62a:	3930      	subs	r1, #48	; 0x30
 800a62c:	2909      	cmp	r1, #9
 800a62e:	d903      	bls.n	800a638 <_svfiprintf_r+0x1a8>
 800a630:	2b00      	cmp	r3, #0
 800a632:	d0c5      	beq.n	800a5c0 <_svfiprintf_r+0x130>
 800a634:	9209      	str	r2, [sp, #36]	; 0x24
 800a636:	e7c3      	b.n	800a5c0 <_svfiprintf_r+0x130>
 800a638:	4342      	muls	r2, r0
 800a63a:	0035      	movs	r5, r6
 800a63c:	2301      	movs	r3, #1
 800a63e:	1852      	adds	r2, r2, r1
 800a640:	e7f1      	b.n	800a626 <_svfiprintf_r+0x196>
 800a642:	aa07      	add	r2, sp, #28
 800a644:	9200      	str	r2, [sp, #0]
 800a646:	0021      	movs	r1, r4
 800a648:	003a      	movs	r2, r7
 800a64a:	4b10      	ldr	r3, [pc, #64]	; (800a68c <_svfiprintf_r+0x1fc>)
 800a64c:	9803      	ldr	r0, [sp, #12]
 800a64e:	f7fc ff3f 	bl	80074d0 <_printf_float>
 800a652:	9004      	str	r0, [sp, #16]
 800a654:	9b04      	ldr	r3, [sp, #16]
 800a656:	3301      	adds	r3, #1
 800a658:	d1d3      	bne.n	800a602 <_svfiprintf_r+0x172>
 800a65a:	89bb      	ldrh	r3, [r7, #12]
 800a65c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a65e:	065b      	lsls	r3, r3, #25
 800a660:	d400      	bmi.n	800a664 <_svfiprintf_r+0x1d4>
 800a662:	e72c      	b.n	800a4be <_svfiprintf_r+0x2e>
 800a664:	2001      	movs	r0, #1
 800a666:	4240      	negs	r0, r0
 800a668:	e729      	b.n	800a4be <_svfiprintf_r+0x2e>
 800a66a:	aa07      	add	r2, sp, #28
 800a66c:	9200      	str	r2, [sp, #0]
 800a66e:	0021      	movs	r1, r4
 800a670:	003a      	movs	r2, r7
 800a672:	4b06      	ldr	r3, [pc, #24]	; (800a68c <_svfiprintf_r+0x1fc>)
 800a674:	9803      	ldr	r0, [sp, #12]
 800a676:	f7fd f9f1 	bl	8007a5c <_printf_i>
 800a67a:	e7ea      	b.n	800a652 <_svfiprintf_r+0x1c2>
 800a67c:	0800bd04 	.word	0x0800bd04
 800a680:	0800bd0a 	.word	0x0800bd0a
 800a684:	0800bd0e 	.word	0x0800bd0e
 800a688:	080074d1 	.word	0x080074d1
 800a68c:	0800a3cd 	.word	0x0800a3cd

0800a690 <_sungetc_r>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	0014      	movs	r4, r2
 800a694:	1c4b      	adds	r3, r1, #1
 800a696:	d103      	bne.n	800a6a0 <_sungetc_r+0x10>
 800a698:	2501      	movs	r5, #1
 800a69a:	426d      	negs	r5, r5
 800a69c:	0028      	movs	r0, r5
 800a69e:	bd70      	pop	{r4, r5, r6, pc}
 800a6a0:	8993      	ldrh	r3, [r2, #12]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	4393      	bics	r3, r2
 800a6a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	b2ce      	uxtb	r6, r1
 800a6ac:	6863      	ldr	r3, [r4, #4]
 800a6ae:	b2cd      	uxtb	r5, r1
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	d010      	beq.n	800a6d6 <_sungetc_r+0x46>
 800a6b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	dd07      	ble.n	800a6ca <_sungetc_r+0x3a>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	6023      	str	r3, [r4, #0]
 800a6c0:	701e      	strb	r6, [r3, #0]
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	6063      	str	r3, [r4, #4]
 800a6c8:	e7e8      	b.n	800a69c <_sungetc_r+0xc>
 800a6ca:	0021      	movs	r1, r4
 800a6cc:	f000 fbfa 	bl	800aec4 <__submore>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d0f2      	beq.n	800a6ba <_sungetc_r+0x2a>
 800a6d4:	e7e0      	b.n	800a698 <_sungetc_r+0x8>
 800a6d6:	6921      	ldr	r1, [r4, #16]
 800a6d8:	6822      	ldr	r2, [r4, #0]
 800a6da:	2900      	cmp	r1, #0
 800a6dc:	d007      	beq.n	800a6ee <_sungetc_r+0x5e>
 800a6de:	4291      	cmp	r1, r2
 800a6e0:	d205      	bcs.n	800a6ee <_sungetc_r+0x5e>
 800a6e2:	1e51      	subs	r1, r2, #1
 800a6e4:	7808      	ldrb	r0, [r1, #0]
 800a6e6:	42a8      	cmp	r0, r5
 800a6e8:	d101      	bne.n	800a6ee <_sungetc_r+0x5e>
 800a6ea:	6021      	str	r1, [r4, #0]
 800a6ec:	e7ea      	b.n	800a6c4 <_sungetc_r+0x34>
 800a6ee:	6423      	str	r3, [r4, #64]	; 0x40
 800a6f0:	0023      	movs	r3, r4
 800a6f2:	3344      	adds	r3, #68	; 0x44
 800a6f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6fa:	0023      	movs	r3, r4
 800a6fc:	3346      	adds	r3, #70	; 0x46
 800a6fe:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a700:	701e      	strb	r6, [r3, #0]
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	2301      	movs	r3, #1
 800a706:	e7de      	b.n	800a6c6 <_sungetc_r+0x36>

0800a708 <__ssrefill_r>:
 800a708:	b510      	push	{r4, lr}
 800a70a:	000c      	movs	r4, r1
 800a70c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a70e:	2900      	cmp	r1, #0
 800a710:	d00e      	beq.n	800a730 <__ssrefill_r+0x28>
 800a712:	0023      	movs	r3, r4
 800a714:	3344      	adds	r3, #68	; 0x44
 800a716:	4299      	cmp	r1, r3
 800a718:	d001      	beq.n	800a71e <__ssrefill_r+0x16>
 800a71a:	f7fe fdd7 	bl	80092cc <_free_r>
 800a71e:	2000      	movs	r0, #0
 800a720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a722:	6360      	str	r0, [r4, #52]	; 0x34
 800a724:	6063      	str	r3, [r4, #4]
 800a726:	4283      	cmp	r3, r0
 800a728:	d002      	beq.n	800a730 <__ssrefill_r+0x28>
 800a72a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd10      	pop	{r4, pc}
 800a730:	6923      	ldr	r3, [r4, #16]
 800a732:	2001      	movs	r0, #1
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	2300      	movs	r3, #0
 800a738:	89a2      	ldrh	r2, [r4, #12]
 800a73a:	6063      	str	r3, [r4, #4]
 800a73c:	3320      	adds	r3, #32
 800a73e:	4313      	orrs	r3, r2
 800a740:	81a3      	strh	r3, [r4, #12]
 800a742:	4240      	negs	r0, r0
 800a744:	e7f3      	b.n	800a72e <__ssrefill_r+0x26>
	...

0800a748 <__ssvfiscanf_r>:
 800a748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74a:	4cae      	ldr	r4, [pc, #696]	; (800aa04 <__ssvfiscanf_r+0x2bc>)
 800a74c:	0006      	movs	r6, r0
 800a74e:	44a5      	add	sp, r4
 800a750:	000c      	movs	r4, r1
 800a752:	2100      	movs	r1, #0
 800a754:	20be      	movs	r0, #190	; 0xbe
 800a756:	9146      	str	r1, [sp, #280]	; 0x118
 800a758:	9147      	str	r1, [sp, #284]	; 0x11c
 800a75a:	a903      	add	r1, sp, #12
 800a75c:	9148      	str	r1, [sp, #288]	; 0x120
 800a75e:	49aa      	ldr	r1, [pc, #680]	; (800aa08 <__ssvfiscanf_r+0x2c0>)
 800a760:	0040      	lsls	r0, r0, #1
 800a762:	ad43      	add	r5, sp, #268	; 0x10c
 800a764:	5029      	str	r1, [r5, r0]
 800a766:	25c0      	movs	r5, #192	; 0xc0
 800a768:	49a8      	ldr	r1, [pc, #672]	; (800aa0c <__ssvfiscanf_r+0x2c4>)
 800a76a:	006d      	lsls	r5, r5, #1
 800a76c:	a843      	add	r0, sp, #268	; 0x10c
 800a76e:	5141      	str	r1, [r0, r5]
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	7815      	ldrb	r5, [r2, #0]
 800a774:	2d00      	cmp	r5, #0
 800a776:	d100      	bne.n	800a77a <__ssvfiscanf_r+0x32>
 800a778:	e141      	b.n	800a9fe <__ssvfiscanf_r+0x2b6>
 800a77a:	4ba5      	ldr	r3, [pc, #660]	; (800aa10 <__ssvfiscanf_r+0x2c8>)
 800a77c:	2008      	movs	r0, #8
 800a77e:	5d59      	ldrb	r1, [r3, r5]
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	2308      	movs	r3, #8
 800a784:	1c57      	adds	r7, r2, #1
 800a786:	400b      	ands	r3, r1
 800a788:	4201      	tst	r1, r0
 800a78a:	d01e      	beq.n	800a7ca <__ssvfiscanf_r+0x82>
 800a78c:	6863      	ldr	r3, [r4, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	dd11      	ble.n	800a7b6 <__ssvfiscanf_r+0x6e>
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	9900      	ldr	r1, [sp, #0]
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	5c8a      	ldrb	r2, [r1, r2]
 800a79a:	2108      	movs	r1, #8
 800a79c:	420a      	tst	r2, r1
 800a79e:	d101      	bne.n	800a7a4 <__ssvfiscanf_r+0x5c>
 800a7a0:	003a      	movs	r2, r7
 800a7a2:	e7e6      	b.n	800a772 <__ssvfiscanf_r+0x2a>
 800a7a4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	3201      	adds	r2, #1
 800a7aa:	9247      	str	r2, [sp, #284]	; 0x11c
 800a7ac:	6862      	ldr	r2, [r4, #4]
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	3a01      	subs	r2, #1
 800a7b2:	6062      	str	r2, [r4, #4]
 800a7b4:	e7ea      	b.n	800a78c <__ssvfiscanf_r+0x44>
 800a7b6:	22c0      	movs	r2, #192	; 0xc0
 800a7b8:	ab43      	add	r3, sp, #268	; 0x10c
 800a7ba:	0052      	lsls	r2, r2, #1
 800a7bc:	0021      	movs	r1, r4
 800a7be:	0030      	movs	r0, r6
 800a7c0:	589b      	ldr	r3, [r3, r2]
 800a7c2:	4798      	blx	r3
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d0e4      	beq.n	800a792 <__ssvfiscanf_r+0x4a>
 800a7c8:	e7ea      	b.n	800a7a0 <__ssvfiscanf_r+0x58>
 800a7ca:	2d25      	cmp	r5, #37	; 0x25
 800a7cc:	d162      	bne.n	800a894 <__ssvfiscanf_r+0x14c>
 800a7ce:	9345      	str	r3, [sp, #276]	; 0x114
 800a7d0:	9343      	str	r3, [sp, #268]	; 0x10c
 800a7d2:	7853      	ldrb	r3, [r2, #1]
 800a7d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d6:	d102      	bne.n	800a7de <__ssvfiscanf_r+0x96>
 800a7d8:	3b1a      	subs	r3, #26
 800a7da:	9343      	str	r3, [sp, #268]	; 0x10c
 800a7dc:	1c97      	adds	r7, r2, #2
 800a7de:	003d      	movs	r5, r7
 800a7e0:	220a      	movs	r2, #10
 800a7e2:	7829      	ldrb	r1, [r5, #0]
 800a7e4:	1c6b      	adds	r3, r5, #1
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	000b      	movs	r3, r1
 800a7ea:	3b30      	subs	r3, #48	; 0x30
 800a7ec:	2b09      	cmp	r3, #9
 800a7ee:	d91e      	bls.n	800a82e <__ssvfiscanf_r+0xe6>
 800a7f0:	4f88      	ldr	r7, [pc, #544]	; (800aa14 <__ssvfiscanf_r+0x2cc>)
 800a7f2:	2203      	movs	r2, #3
 800a7f4:	0038      	movs	r0, r7
 800a7f6:	f7fd feac 	bl	8008552 <memchr>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d006      	beq.n	800a80c <__ssvfiscanf_r+0xc4>
 800a7fe:	2301      	movs	r3, #1
 800a800:	1bc0      	subs	r0, r0, r7
 800a802:	4083      	lsls	r3, r0
 800a804:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a806:	9d01      	ldr	r5, [sp, #4]
 800a808:	4313      	orrs	r3, r2
 800a80a:	9343      	str	r3, [sp, #268]	; 0x10c
 800a80c:	1c6f      	adds	r7, r5, #1
 800a80e:	782d      	ldrb	r5, [r5, #0]
 800a810:	2d78      	cmp	r5, #120	; 0x78
 800a812:	d807      	bhi.n	800a824 <__ssvfiscanf_r+0xdc>
 800a814:	2d57      	cmp	r5, #87	; 0x57
 800a816:	d811      	bhi.n	800a83c <__ssvfiscanf_r+0xf4>
 800a818:	2d25      	cmp	r5, #37	; 0x25
 800a81a:	d03b      	beq.n	800a894 <__ssvfiscanf_r+0x14c>
 800a81c:	d835      	bhi.n	800a88a <__ssvfiscanf_r+0x142>
 800a81e:	2d00      	cmp	r5, #0
 800a820:	d100      	bne.n	800a824 <__ssvfiscanf_r+0xdc>
 800a822:	e0e9      	b.n	800a9f8 <__ssvfiscanf_r+0x2b0>
 800a824:	2303      	movs	r3, #3
 800a826:	9349      	str	r3, [sp, #292]	; 0x124
 800a828:	3307      	adds	r3, #7
 800a82a:	9344      	str	r3, [sp, #272]	; 0x110
 800a82c:	e06d      	b.n	800a90a <__ssvfiscanf_r+0x1c2>
 800a82e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a830:	9d01      	ldr	r5, [sp, #4]
 800a832:	4353      	muls	r3, r2
 800a834:	3b30      	subs	r3, #48	; 0x30
 800a836:	185b      	adds	r3, r3, r1
 800a838:	9345      	str	r3, [sp, #276]	; 0x114
 800a83a:	e7d2      	b.n	800a7e2 <__ssvfiscanf_r+0x9a>
 800a83c:	0028      	movs	r0, r5
 800a83e:	3858      	subs	r0, #88	; 0x58
 800a840:	2820      	cmp	r0, #32
 800a842:	d8ef      	bhi.n	800a824 <__ssvfiscanf_r+0xdc>
 800a844:	f7f5 fc70 	bl	8000128 <__gnu_thumb1_case_shi>
 800a848:	ffee004d 	.word	0xffee004d
 800a84c:	007fffee 	.word	0x007fffee
 800a850:	ffeeffee 	.word	0xffeeffee
 800a854:	ffeeffee 	.word	0xffeeffee
 800a858:	ffeeffee 	.word	0xffeeffee
 800a85c:	008affee 	.word	0x008affee
 800a860:	0024007d 	.word	0x0024007d
 800a864:	00240024 	.word	0x00240024
 800a868:	0059ffee 	.word	0x0059ffee
 800a86c:	ffeeffee 	.word	0xffeeffee
 800a870:	ffeeffee 	.word	0xffeeffee
 800a874:	005d0092 	.word	0x005d0092
 800a878:	ffee0049 	.word	0xffee0049
 800a87c:	0090ffee 	.word	0x0090ffee
 800a880:	007dffee 	.word	0x007dffee
 800a884:	ffeeffee 	.word	0xffeeffee
 800a888:	004d      	.short	0x004d
 800a88a:	3d45      	subs	r5, #69	; 0x45
 800a88c:	2d02      	cmp	r5, #2
 800a88e:	d8c9      	bhi.n	800a824 <__ssvfiscanf_r+0xdc>
 800a890:	2305      	movs	r3, #5
 800a892:	e039      	b.n	800a908 <__ssvfiscanf_r+0x1c0>
 800a894:	6863      	ldr	r3, [r4, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	dd0d      	ble.n	800a8b6 <__ssvfiscanf_r+0x16e>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	781a      	ldrb	r2, [r3, #0]
 800a89e:	42aa      	cmp	r2, r5
 800a8a0:	d000      	beq.n	800a8a4 <__ssvfiscanf_r+0x15c>
 800a8a2:	e0ac      	b.n	800a9fe <__ssvfiscanf_r+0x2b6>
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	6862      	ldr	r2, [r4, #4]
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a8ac:	3a01      	subs	r2, #1
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	6062      	str	r2, [r4, #4]
 800a8b2:	9347      	str	r3, [sp, #284]	; 0x11c
 800a8b4:	e774      	b.n	800a7a0 <__ssvfiscanf_r+0x58>
 800a8b6:	22c0      	movs	r2, #192	; 0xc0
 800a8b8:	ab43      	add	r3, sp, #268	; 0x10c
 800a8ba:	0052      	lsls	r2, r2, #1
 800a8bc:	0021      	movs	r1, r4
 800a8be:	0030      	movs	r0, r6
 800a8c0:	589b      	ldr	r3, [r3, r2]
 800a8c2:	4798      	blx	r3
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d0e8      	beq.n	800a89a <__ssvfiscanf_r+0x152>
 800a8c8:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d000      	beq.n	800a8d0 <__ssvfiscanf_r+0x188>
 800a8ce:	e08f      	b.n	800a9f0 <__ssvfiscanf_r+0x2a8>
 800a8d0:	3801      	subs	r0, #1
 800a8d2:	23a5      	movs	r3, #165	; 0xa5
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	449d      	add	sp, r3
 800a8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8da:	2320      	movs	r3, #32
 800a8dc:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8e2:	2380      	movs	r3, #128	; 0x80
 800a8e4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8ec:	2310      	movs	r3, #16
 800a8ee:	9344      	str	r3, [sp, #272]	; 0x110
 800a8f0:	236e      	movs	r3, #110	; 0x6e
 800a8f2:	42ab      	cmp	r3, r5
 800a8f4:	419b      	sbcs	r3, r3
 800a8f6:	425b      	negs	r3, r3
 800a8f8:	e001      	b.n	800a8fe <__ssvfiscanf_r+0x1b6>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	9344      	str	r3, [sp, #272]	; 0x110
 800a8fe:	3303      	adds	r3, #3
 800a900:	e002      	b.n	800a908 <__ssvfiscanf_r+0x1c0>
 800a902:	2308      	movs	r3, #8
 800a904:	9344      	str	r3, [sp, #272]	; 0x110
 800a906:	3b04      	subs	r3, #4
 800a908:	9349      	str	r3, [sp, #292]	; 0x124
 800a90a:	6863      	ldr	r3, [r4, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dd3c      	ble.n	800a98a <__ssvfiscanf_r+0x242>
 800a910:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a912:	065b      	lsls	r3, r3, #25
 800a914:	d406      	bmi.n	800a924 <__ssvfiscanf_r+0x1dc>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	9900      	ldr	r1, [sp, #0]
 800a91a:	781a      	ldrb	r2, [r3, #0]
 800a91c:	5c8a      	ldrb	r2, [r1, r2]
 800a91e:	2108      	movs	r1, #8
 800a920:	420a      	tst	r2, r1
 800a922:	d13c      	bne.n	800a99e <__ssvfiscanf_r+0x256>
 800a924:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a926:	2b02      	cmp	r3, #2
 800a928:	dc4e      	bgt.n	800a9c8 <__ssvfiscanf_r+0x280>
 800a92a:	0022      	movs	r2, r4
 800a92c:	0030      	movs	r0, r6
 800a92e:	ab02      	add	r3, sp, #8
 800a930:	a943      	add	r1, sp, #268	; 0x10c
 800a932:	f000 f873 	bl	800aa1c <_scanf_chars>
 800a936:	2801      	cmp	r0, #1
 800a938:	d061      	beq.n	800a9fe <__ssvfiscanf_r+0x2b6>
 800a93a:	2802      	cmp	r0, #2
 800a93c:	d000      	beq.n	800a940 <__ssvfiscanf_r+0x1f8>
 800a93e:	e72f      	b.n	800a7a0 <__ssvfiscanf_r+0x58>
 800a940:	e7c2      	b.n	800a8c8 <__ssvfiscanf_r+0x180>
 800a942:	230a      	movs	r3, #10
 800a944:	e7d3      	b.n	800a8ee <__ssvfiscanf_r+0x1a6>
 800a946:	0039      	movs	r1, r7
 800a948:	a803      	add	r0, sp, #12
 800a94a:	f000 fa7e 	bl	800ae4a <__sccl>
 800a94e:	2340      	movs	r3, #64	; 0x40
 800a950:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a952:	0007      	movs	r7, r0
 800a954:	4313      	orrs	r3, r2
 800a956:	9343      	str	r3, [sp, #268]	; 0x10c
 800a958:	2301      	movs	r3, #1
 800a95a:	e7d5      	b.n	800a908 <__ssvfiscanf_r+0x1c0>
 800a95c:	2340      	movs	r3, #64	; 0x40
 800a95e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a960:	4313      	orrs	r3, r2
 800a962:	9343      	str	r3, [sp, #268]	; 0x10c
 800a964:	2300      	movs	r3, #0
 800a966:	e7cf      	b.n	800a908 <__ssvfiscanf_r+0x1c0>
 800a968:	2302      	movs	r3, #2
 800a96a:	e7cd      	b.n	800a908 <__ssvfiscanf_r+0x1c0>
 800a96c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a96e:	06d3      	lsls	r3, r2, #27
 800a970:	d500      	bpl.n	800a974 <__ssvfiscanf_r+0x22c>
 800a972:	e715      	b.n	800a7a0 <__ssvfiscanf_r+0x58>
 800a974:	9b02      	ldr	r3, [sp, #8]
 800a976:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800a978:	1d18      	adds	r0, r3, #4
 800a97a:	9002      	str	r0, [sp, #8]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	07d5      	lsls	r5, r2, #31
 800a980:	d501      	bpl.n	800a986 <__ssvfiscanf_r+0x23e>
 800a982:	8019      	strh	r1, [r3, #0]
 800a984:	e70c      	b.n	800a7a0 <__ssvfiscanf_r+0x58>
 800a986:	6019      	str	r1, [r3, #0]
 800a988:	e70a      	b.n	800a7a0 <__ssvfiscanf_r+0x58>
 800a98a:	22c0      	movs	r2, #192	; 0xc0
 800a98c:	ab43      	add	r3, sp, #268	; 0x10c
 800a98e:	0052      	lsls	r2, r2, #1
 800a990:	0021      	movs	r1, r4
 800a992:	0030      	movs	r0, r6
 800a994:	589b      	ldr	r3, [r3, r2]
 800a996:	4798      	blx	r3
 800a998:	2800      	cmp	r0, #0
 800a99a:	d0b9      	beq.n	800a910 <__ssvfiscanf_r+0x1c8>
 800a99c:	e794      	b.n	800a8c8 <__ssvfiscanf_r+0x180>
 800a99e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a9a0:	3201      	adds	r2, #1
 800a9a2:	9247      	str	r2, [sp, #284]	; 0x11c
 800a9a4:	6862      	ldr	r2, [r4, #4]
 800a9a6:	3a01      	subs	r2, #1
 800a9a8:	6062      	str	r2, [r4, #4]
 800a9aa:	2a00      	cmp	r2, #0
 800a9ac:	dd02      	ble.n	800a9b4 <__ssvfiscanf_r+0x26c>
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	e7b0      	b.n	800a916 <__ssvfiscanf_r+0x1ce>
 800a9b4:	22c0      	movs	r2, #192	; 0xc0
 800a9b6:	ab43      	add	r3, sp, #268	; 0x10c
 800a9b8:	0052      	lsls	r2, r2, #1
 800a9ba:	0021      	movs	r1, r4
 800a9bc:	0030      	movs	r0, r6
 800a9be:	589b      	ldr	r3, [r3, r2]
 800a9c0:	4798      	blx	r3
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d0a7      	beq.n	800a916 <__ssvfiscanf_r+0x1ce>
 800a9c6:	e77f      	b.n	800a8c8 <__ssvfiscanf_r+0x180>
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	dc06      	bgt.n	800a9da <__ssvfiscanf_r+0x292>
 800a9cc:	0022      	movs	r2, r4
 800a9ce:	0030      	movs	r0, r6
 800a9d0:	ab02      	add	r3, sp, #8
 800a9d2:	a943      	add	r1, sp, #268	; 0x10c
 800a9d4:	f000 f880 	bl	800aad8 <_scanf_i>
 800a9d8:	e7ad      	b.n	800a936 <__ssvfiscanf_r+0x1ee>
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <__ssvfiscanf_r+0x2d0>)
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d100      	bne.n	800a9e2 <__ssvfiscanf_r+0x29a>
 800a9e0:	e6de      	b.n	800a7a0 <__ssvfiscanf_r+0x58>
 800a9e2:	0022      	movs	r2, r4
 800a9e4:	0030      	movs	r0, r6
 800a9e6:	ab02      	add	r3, sp, #8
 800a9e8:	a943      	add	r1, sp, #268	; 0x10c
 800a9ea:	f7fd f947 	bl	8007c7c <_scanf_float>
 800a9ee:	e7a2      	b.n	800a936 <__ssvfiscanf_r+0x1ee>
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	065b      	lsls	r3, r3, #25
 800a9f4:	d400      	bmi.n	800a9f8 <__ssvfiscanf_r+0x2b0>
 800a9f6:	e76c      	b.n	800a8d2 <__ssvfiscanf_r+0x18a>
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	4240      	negs	r0, r0
 800a9fc:	e769      	b.n	800a8d2 <__ssvfiscanf_r+0x18a>
 800a9fe:	9846      	ldr	r0, [sp, #280]	; 0x118
 800aa00:	e767      	b.n	800a8d2 <__ssvfiscanf_r+0x18a>
 800aa02:	46c0      	nop			; (mov r8, r8)
 800aa04:	fffffd6c 	.word	0xfffffd6c
 800aa08:	0800a691 	.word	0x0800a691
 800aa0c:	0800a709 	.word	0x0800a709
 800aa10:	0800b981 	.word	0x0800b981
 800aa14:	0800bd0a 	.word	0x0800bd0a
 800aa18:	08007c7d 	.word	0x08007c7d

0800aa1c <_scanf_chars>:
 800aa1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa1e:	0015      	movs	r5, r2
 800aa20:	688a      	ldr	r2, [r1, #8]
 800aa22:	000c      	movs	r4, r1
 800aa24:	9001      	str	r0, [sp, #4]
 800aa26:	2a00      	cmp	r2, #0
 800aa28:	d105      	bne.n	800aa36 <_scanf_chars+0x1a>
 800aa2a:	6989      	ldr	r1, [r1, #24]
 800aa2c:	3201      	adds	r2, #1
 800aa2e:	2900      	cmp	r1, #0
 800aa30:	d000      	beq.n	800aa34 <_scanf_chars+0x18>
 800aa32:	3a02      	subs	r2, #2
 800aa34:	60a2      	str	r2, [r4, #8]
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	06d2      	lsls	r2, r2, #27
 800aa3a:	d403      	bmi.n	800aa44 <_scanf_chars+0x28>
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	1d11      	adds	r1, r2, #4
 800aa40:	6019      	str	r1, [r3, #0]
 800aa42:	6817      	ldr	r7, [r2, #0]
 800aa44:	2600      	movs	r6, #0
 800aa46:	69a0      	ldr	r0, [r4, #24]
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d013      	beq.n	800aa74 <_scanf_chars+0x58>
 800aa4c:	2801      	cmp	r0, #1
 800aa4e:	d108      	bne.n	800aa62 <_scanf_chars+0x46>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	6962      	ldr	r2, [r4, #20]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	5cd3      	ldrb	r3, [r2, r3]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10b      	bne.n	800aa74 <_scanf_chars+0x58>
 800aa5c:	2e00      	cmp	r6, #0
 800aa5e:	d038      	beq.n	800aad2 <_scanf_chars+0xb6>
 800aa60:	e026      	b.n	800aab0 <_scanf_chars+0x94>
 800aa62:	2802      	cmp	r0, #2
 800aa64:	d124      	bne.n	800aab0 <_scanf_chars+0x94>
 800aa66:	682b      	ldr	r3, [r5, #0]
 800aa68:	4a1a      	ldr	r2, [pc, #104]	; (800aad4 <_scanf_chars+0xb8>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	5cd3      	ldrb	r3, [r2, r3]
 800aa6e:	2208      	movs	r2, #8
 800aa70:	4213      	tst	r3, r2
 800aa72:	d11d      	bne.n	800aab0 <_scanf_chars+0x94>
 800aa74:	2210      	movs	r2, #16
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	3601      	adds	r6, #1
 800aa7a:	4213      	tst	r3, r2
 800aa7c:	d103      	bne.n	800aa86 <_scanf_chars+0x6a>
 800aa7e:	682b      	ldr	r3, [r5, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	703b      	strb	r3, [r7, #0]
 800aa84:	3701      	adds	r7, #1
 800aa86:	682a      	ldr	r2, [r5, #0]
 800aa88:	686b      	ldr	r3, [r5, #4]
 800aa8a:	3201      	adds	r2, #1
 800aa8c:	602a      	str	r2, [r5, #0]
 800aa8e:	68a2      	ldr	r2, [r4, #8]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	3a01      	subs	r2, #1
 800aa94:	606b      	str	r3, [r5, #4]
 800aa96:	60a2      	str	r2, [r4, #8]
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	d009      	beq.n	800aab0 <_scanf_chars+0x94>
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	dcd2      	bgt.n	800aa46 <_scanf_chars+0x2a>
 800aaa0:	23c0      	movs	r3, #192	; 0xc0
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	0029      	movs	r1, r5
 800aaa6:	58e3      	ldr	r3, [r4, r3]
 800aaa8:	9801      	ldr	r0, [sp, #4]
 800aaaa:	4798      	blx	r3
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d0ca      	beq.n	800aa46 <_scanf_chars+0x2a>
 800aab0:	6822      	ldr	r2, [r4, #0]
 800aab2:	2310      	movs	r3, #16
 800aab4:	0011      	movs	r1, r2
 800aab6:	4019      	ands	r1, r3
 800aab8:	421a      	tst	r2, r3
 800aaba:	d106      	bne.n	800aaca <_scanf_chars+0xae>
 800aabc:	68e3      	ldr	r3, [r4, #12]
 800aabe:	3301      	adds	r3, #1
 800aac0:	60e3      	str	r3, [r4, #12]
 800aac2:	69a3      	ldr	r3, [r4, #24]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d000      	beq.n	800aaca <_scanf_chars+0xae>
 800aac8:	7039      	strb	r1, [r7, #0]
 800aaca:	2000      	movs	r0, #0
 800aacc:	6923      	ldr	r3, [r4, #16]
 800aace:	199b      	adds	r3, r3, r6
 800aad0:	6123      	str	r3, [r4, #16]
 800aad2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aad4:	0800b981 	.word	0x0800b981

0800aad8 <_scanf_i>:
 800aad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aada:	b08b      	sub	sp, #44	; 0x2c
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	4b7a      	ldr	r3, [pc, #488]	; (800acc8 <_scanf_i+0x1f0>)
 800aae0:	0016      	movs	r6, r2
 800aae2:	9004      	str	r0, [sp, #16]
 800aae4:	aa07      	add	r2, sp, #28
 800aae6:	cba1      	ldmia	r3!, {r0, r5, r7}
 800aae8:	c2a1      	stmia	r2!, {r0, r5, r7}
 800aaea:	4a78      	ldr	r2, [pc, #480]	; (800accc <_scanf_i+0x1f4>)
 800aaec:	698b      	ldr	r3, [r1, #24]
 800aaee:	000c      	movs	r4, r1
 800aaf0:	9205      	str	r2, [sp, #20]
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d001      	beq.n	800aafa <_scanf_i+0x22>
 800aaf6:	4b76      	ldr	r3, [pc, #472]	; (800acd0 <_scanf_i+0x1f8>)
 800aaf8:	9305      	str	r3, [sp, #20]
 800aafa:	22ae      	movs	r2, #174	; 0xae
 800aafc:	2000      	movs	r0, #0
 800aafe:	68a3      	ldr	r3, [r4, #8]
 800ab00:	0052      	lsls	r2, r2, #1
 800ab02:	1e59      	subs	r1, r3, #1
 800ab04:	9003      	str	r0, [sp, #12]
 800ab06:	4291      	cmp	r1, r2
 800ab08:	d905      	bls.n	800ab16 <_scanf_i+0x3e>
 800ab0a:	3b5e      	subs	r3, #94	; 0x5e
 800ab0c:	3bff      	subs	r3, #255	; 0xff
 800ab0e:	9303      	str	r3, [sp, #12]
 800ab10:	235e      	movs	r3, #94	; 0x5e
 800ab12:	33ff      	adds	r3, #255	; 0xff
 800ab14:	60a3      	str	r3, [r4, #8]
 800ab16:	0023      	movs	r3, r4
 800ab18:	331c      	adds	r3, #28
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	23d0      	movs	r3, #208	; 0xd0
 800ab1e:	2700      	movs	r7, #0
 800ab20:	6822      	ldr	r2, [r4, #0]
 800ab22:	011b      	lsls	r3, r3, #4
 800ab24:	4313      	orrs	r3, r2
 800ab26:	6023      	str	r3, [r4, #0]
 800ab28:	9b00      	ldr	r3, [sp, #0]
 800ab2a:	9302      	str	r3, [sp, #8]
 800ab2c:	6833      	ldr	r3, [r6, #0]
 800ab2e:	a807      	add	r0, sp, #28
 800ab30:	7819      	ldrb	r1, [r3, #0]
 800ab32:	00bb      	lsls	r3, r7, #2
 800ab34:	2202      	movs	r2, #2
 800ab36:	5818      	ldr	r0, [r3, r0]
 800ab38:	f7fd fd0b 	bl	8008552 <memchr>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d02a      	beq.n	800ab96 <_scanf_i+0xbe>
 800ab40:	2f01      	cmp	r7, #1
 800ab42:	d161      	bne.n	800ac08 <_scanf_i+0x130>
 800ab44:	6863      	ldr	r3, [r4, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d106      	bne.n	800ab58 <_scanf_i+0x80>
 800ab4a:	3308      	adds	r3, #8
 800ab4c:	6822      	ldr	r2, [r4, #0]
 800ab4e:	6063      	str	r3, [r4, #4]
 800ab50:	33f9      	adds	r3, #249	; 0xf9
 800ab52:	33ff      	adds	r3, #255	; 0xff
 800ab54:	4313      	orrs	r3, r2
 800ab56:	6023      	str	r3, [r4, #0]
 800ab58:	6823      	ldr	r3, [r4, #0]
 800ab5a:	4a5e      	ldr	r2, [pc, #376]	; (800acd4 <_scanf_i+0x1fc>)
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	1e5a      	subs	r2, r3, #1
 800ab64:	60a2      	str	r2, [r4, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d015      	beq.n	800ab96 <_scanf_i+0xbe>
 800ab6a:	6833      	ldr	r3, [r6, #0]
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	6032      	str	r2, [r6, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	9a02      	ldr	r2, [sp, #8]
 800ab74:	7013      	strb	r3, [r2, #0]
 800ab76:	6873      	ldr	r3, [r6, #4]
 800ab78:	1c55      	adds	r5, r2, #1
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	6073      	str	r3, [r6, #4]
 800ab7e:	9502      	str	r5, [sp, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dc08      	bgt.n	800ab96 <_scanf_i+0xbe>
 800ab84:	23c0      	movs	r3, #192	; 0xc0
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	0031      	movs	r1, r6
 800ab8a:	58e3      	ldr	r3, [r4, r3]
 800ab8c:	9804      	ldr	r0, [sp, #16]
 800ab8e:	4798      	blx	r3
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d000      	beq.n	800ab96 <_scanf_i+0xbe>
 800ab94:	e080      	b.n	800ac98 <_scanf_i+0x1c0>
 800ab96:	3701      	adds	r7, #1
 800ab98:	2f03      	cmp	r7, #3
 800ab9a:	d1c7      	bne.n	800ab2c <_scanf_i+0x54>
 800ab9c:	6863      	ldr	r3, [r4, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <_scanf_i+0xce>
 800aba2:	330a      	adds	r3, #10
 800aba4:	6063      	str	r3, [r4, #4]
 800aba6:	2110      	movs	r1, #16
 800aba8:	2700      	movs	r7, #0
 800abaa:	6863      	ldr	r3, [r4, #4]
 800abac:	6960      	ldr	r0, [r4, #20]
 800abae:	1ac9      	subs	r1, r1, r3
 800abb0:	4b49      	ldr	r3, [pc, #292]	; (800acd8 <_scanf_i+0x200>)
 800abb2:	18c9      	adds	r1, r1, r3
 800abb4:	f000 f949 	bl	800ae4a <__sccl>
 800abb8:	9d02      	ldr	r5, [sp, #8]
 800abba:	68a3      	ldr	r3, [r4, #8]
 800abbc:	6820      	ldr	r0, [r4, #0]
 800abbe:	9302      	str	r3, [sp, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d040      	beq.n	800ac46 <_scanf_i+0x16e>
 800abc4:	6831      	ldr	r1, [r6, #0]
 800abc6:	6963      	ldr	r3, [r4, #20]
 800abc8:	780a      	ldrb	r2, [r1, #0]
 800abca:	5c9b      	ldrb	r3, [r3, r2]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d03a      	beq.n	800ac46 <_scanf_i+0x16e>
 800abd0:	2a30      	cmp	r2, #48	; 0x30
 800abd2:	d129      	bne.n	800ac28 <_scanf_i+0x150>
 800abd4:	2380      	movs	r3, #128	; 0x80
 800abd6:	011b      	lsls	r3, r3, #4
 800abd8:	4218      	tst	r0, r3
 800abda:	d025      	beq.n	800ac28 <_scanf_i+0x150>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	3701      	adds	r7, #1
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d005      	beq.n	800abf0 <_scanf_i+0x118>
 800abe4:	001a      	movs	r2, r3
 800abe6:	9b02      	ldr	r3, [sp, #8]
 800abe8:	3a01      	subs	r2, #1
 800abea:	3301      	adds	r3, #1
 800abec:	9203      	str	r2, [sp, #12]
 800abee:	60a3      	str	r3, [r4, #8]
 800abf0:	6873      	ldr	r3, [r6, #4]
 800abf2:	3b01      	subs	r3, #1
 800abf4:	6073      	str	r3, [r6, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dd1d      	ble.n	800ac36 <_scanf_i+0x15e>
 800abfa:	6833      	ldr	r3, [r6, #0]
 800abfc:	3301      	adds	r3, #1
 800abfe:	6033      	str	r3, [r6, #0]
 800ac00:	68a3      	ldr	r3, [r4, #8]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	60a3      	str	r3, [r4, #8]
 800ac06:	e7d8      	b.n	800abba <_scanf_i+0xe2>
 800ac08:	2f02      	cmp	r7, #2
 800ac0a:	d1a9      	bne.n	800ab60 <_scanf_i+0x88>
 800ac0c:	21c0      	movs	r1, #192	; 0xc0
 800ac0e:	2380      	movs	r3, #128	; 0x80
 800ac10:	6822      	ldr	r2, [r4, #0]
 800ac12:	00c9      	lsls	r1, r1, #3
 800ac14:	4011      	ands	r1, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4299      	cmp	r1, r3
 800ac1a:	d1bf      	bne.n	800ab9c <_scanf_i+0xc4>
 800ac1c:	3bf1      	subs	r3, #241	; 0xf1
 800ac1e:	3bff      	subs	r3, #255	; 0xff
 800ac20:	6063      	str	r3, [r4, #4]
 800ac22:	33f0      	adds	r3, #240	; 0xf0
 800ac24:	4313      	orrs	r3, r2
 800ac26:	e79a      	b.n	800ab5e <_scanf_i+0x86>
 800ac28:	4b2c      	ldr	r3, [pc, #176]	; (800acdc <_scanf_i+0x204>)
 800ac2a:	4003      	ands	r3, r0
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	780b      	ldrb	r3, [r1, #0]
 800ac30:	702b      	strb	r3, [r5, #0]
 800ac32:	3501      	adds	r5, #1
 800ac34:	e7dc      	b.n	800abf0 <_scanf_i+0x118>
 800ac36:	23c0      	movs	r3, #192	; 0xc0
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	0031      	movs	r1, r6
 800ac3c:	58e3      	ldr	r3, [r4, r3]
 800ac3e:	9804      	ldr	r0, [sp, #16]
 800ac40:	4798      	blx	r3
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d0dc      	beq.n	800ac00 <_scanf_i+0x128>
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	05db      	lsls	r3, r3, #23
 800ac4a:	d50e      	bpl.n	800ac6a <_scanf_i+0x192>
 800ac4c:	9b00      	ldr	r3, [sp, #0]
 800ac4e:	429d      	cmp	r5, r3
 800ac50:	d907      	bls.n	800ac62 <_scanf_i+0x18a>
 800ac52:	23be      	movs	r3, #190	; 0xbe
 800ac54:	3d01      	subs	r5, #1
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	0032      	movs	r2, r6
 800ac5a:	7829      	ldrb	r1, [r5, #0]
 800ac5c:	58e3      	ldr	r3, [r4, r3]
 800ac5e:	9804      	ldr	r0, [sp, #16]
 800ac60:	4798      	blx	r3
 800ac62:	9b00      	ldr	r3, [sp, #0]
 800ac64:	2001      	movs	r0, #1
 800ac66:	429d      	cmp	r5, r3
 800ac68:	d029      	beq.n	800acbe <_scanf_i+0x1e6>
 800ac6a:	6821      	ldr	r1, [r4, #0]
 800ac6c:	2310      	movs	r3, #16
 800ac6e:	000a      	movs	r2, r1
 800ac70:	401a      	ands	r2, r3
 800ac72:	4219      	tst	r1, r3
 800ac74:	d11c      	bne.n	800acb0 <_scanf_i+0x1d8>
 800ac76:	702a      	strb	r2, [r5, #0]
 800ac78:	6863      	ldr	r3, [r4, #4]
 800ac7a:	9900      	ldr	r1, [sp, #0]
 800ac7c:	9804      	ldr	r0, [sp, #16]
 800ac7e:	9e05      	ldr	r6, [sp, #20]
 800ac80:	47b0      	blx	r6
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	6822      	ldr	r2, [r4, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	0691      	lsls	r1, r2, #26
 800ac8a:	d507      	bpl.n	800ac9c <_scanf_i+0x1c4>
 800ac8c:	9901      	ldr	r1, [sp, #4]
 800ac8e:	1d1a      	adds	r2, r3, #4
 800ac90:	600a      	str	r2, [r1, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6018      	str	r0, [r3, #0]
 800ac96:	e008      	b.n	800acaa <_scanf_i+0x1d2>
 800ac98:	2700      	movs	r7, #0
 800ac9a:	e7d4      	b.n	800ac46 <_scanf_i+0x16e>
 800ac9c:	1d19      	adds	r1, r3, #4
 800ac9e:	07d6      	lsls	r6, r2, #31
 800aca0:	d50f      	bpl.n	800acc2 <_scanf_i+0x1ea>
 800aca2:	9a01      	ldr	r2, [sp, #4]
 800aca4:	6011      	str	r1, [r2, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	8018      	strh	r0, [r3, #0]
 800acaa:	68e3      	ldr	r3, [r4, #12]
 800acac:	3301      	adds	r3, #1
 800acae:	60e3      	str	r3, [r4, #12]
 800acb0:	2000      	movs	r0, #0
 800acb2:	9b00      	ldr	r3, [sp, #0]
 800acb4:	1aed      	subs	r5, r5, r3
 800acb6:	6923      	ldr	r3, [r4, #16]
 800acb8:	19ed      	adds	r5, r5, r7
 800acba:	195b      	adds	r3, r3, r5
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	b00b      	add	sp, #44	; 0x2c
 800acc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acc2:	9a01      	ldr	r2, [sp, #4]
 800acc4:	6011      	str	r1, [r2, #0]
 800acc6:	e7e4      	b.n	800ac92 <_scanf_i+0x1ba>
 800acc8:	0800b858 	.word	0x0800b858
 800accc:	08007361 	.word	0x08007361
 800acd0:	0800b161 	.word	0x0800b161
 800acd4:	fffffaff 	.word	0xfffffaff
 800acd8:	0800bd15 	.word	0x0800bd15
 800acdc:	fffff6ff 	.word	0xfffff6ff

0800ace0 <__sflush_r>:
 800ace0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ace2:	898b      	ldrh	r3, [r1, #12]
 800ace4:	0005      	movs	r5, r0
 800ace6:	000c      	movs	r4, r1
 800ace8:	071a      	lsls	r2, r3, #28
 800acea:	d45c      	bmi.n	800ada6 <__sflush_r+0xc6>
 800acec:	684a      	ldr	r2, [r1, #4]
 800acee:	2a00      	cmp	r2, #0
 800acf0:	dc04      	bgt.n	800acfc <__sflush_r+0x1c>
 800acf2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	dc01      	bgt.n	800acfc <__sflush_r+0x1c>
 800acf8:	2000      	movs	r0, #0
 800acfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acfc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800acfe:	2f00      	cmp	r7, #0
 800ad00:	d0fa      	beq.n	800acf8 <__sflush_r+0x18>
 800ad02:	2200      	movs	r2, #0
 800ad04:	2080      	movs	r0, #128	; 0x80
 800ad06:	682e      	ldr	r6, [r5, #0]
 800ad08:	602a      	str	r2, [r5, #0]
 800ad0a:	001a      	movs	r2, r3
 800ad0c:	0140      	lsls	r0, r0, #5
 800ad0e:	6a21      	ldr	r1, [r4, #32]
 800ad10:	4002      	ands	r2, r0
 800ad12:	4203      	tst	r3, r0
 800ad14:	d034      	beq.n	800ad80 <__sflush_r+0xa0>
 800ad16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	075b      	lsls	r3, r3, #29
 800ad1c:	d506      	bpl.n	800ad2c <__sflush_r+0x4c>
 800ad1e:	6863      	ldr	r3, [r4, #4]
 800ad20:	1ac0      	subs	r0, r0, r3
 800ad22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d001      	beq.n	800ad2c <__sflush_r+0x4c>
 800ad28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad2a:	1ac0      	subs	r0, r0, r3
 800ad2c:	0002      	movs	r2, r0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	0028      	movs	r0, r5
 800ad32:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad34:	6a21      	ldr	r1, [r4, #32]
 800ad36:	47b8      	blx	r7
 800ad38:	89a2      	ldrh	r2, [r4, #12]
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	d106      	bne.n	800ad4c <__sflush_r+0x6c>
 800ad3e:	6829      	ldr	r1, [r5, #0]
 800ad40:	291d      	cmp	r1, #29
 800ad42:	d82c      	bhi.n	800ad9e <__sflush_r+0xbe>
 800ad44:	4b2a      	ldr	r3, [pc, #168]	; (800adf0 <__sflush_r+0x110>)
 800ad46:	410b      	asrs	r3, r1
 800ad48:	07db      	lsls	r3, r3, #31
 800ad4a:	d428      	bmi.n	800ad9e <__sflush_r+0xbe>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	6063      	str	r3, [r4, #4]
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	04d2      	lsls	r2, r2, #19
 800ad56:	d505      	bpl.n	800ad64 <__sflush_r+0x84>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d102      	bne.n	800ad62 <__sflush_r+0x82>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d100      	bne.n	800ad64 <__sflush_r+0x84>
 800ad62:	6560      	str	r0, [r4, #84]	; 0x54
 800ad64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad66:	602e      	str	r6, [r5, #0]
 800ad68:	2900      	cmp	r1, #0
 800ad6a:	d0c5      	beq.n	800acf8 <__sflush_r+0x18>
 800ad6c:	0023      	movs	r3, r4
 800ad6e:	3344      	adds	r3, #68	; 0x44
 800ad70:	4299      	cmp	r1, r3
 800ad72:	d002      	beq.n	800ad7a <__sflush_r+0x9a>
 800ad74:	0028      	movs	r0, r5
 800ad76:	f7fe faa9 	bl	80092cc <_free_r>
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad7e:	e7bc      	b.n	800acfa <__sflush_r+0x1a>
 800ad80:	2301      	movs	r3, #1
 800ad82:	0028      	movs	r0, r5
 800ad84:	47b8      	blx	r7
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	d1c6      	bne.n	800ad18 <__sflush_r+0x38>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d0c3      	beq.n	800ad18 <__sflush_r+0x38>
 800ad90:	2b1d      	cmp	r3, #29
 800ad92:	d001      	beq.n	800ad98 <__sflush_r+0xb8>
 800ad94:	2b16      	cmp	r3, #22
 800ad96:	d101      	bne.n	800ad9c <__sflush_r+0xbc>
 800ad98:	602e      	str	r6, [r5, #0]
 800ad9a:	e7ad      	b.n	800acf8 <__sflush_r+0x18>
 800ad9c:	89a2      	ldrh	r2, [r4, #12]
 800ad9e:	2340      	movs	r3, #64	; 0x40
 800ada0:	4313      	orrs	r3, r2
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	e7a9      	b.n	800acfa <__sflush_r+0x1a>
 800ada6:	690e      	ldr	r6, [r1, #16]
 800ada8:	2e00      	cmp	r6, #0
 800adaa:	d0a5      	beq.n	800acf8 <__sflush_r+0x18>
 800adac:	680f      	ldr	r7, [r1, #0]
 800adae:	600e      	str	r6, [r1, #0]
 800adb0:	1bba      	subs	r2, r7, r6
 800adb2:	9201      	str	r2, [sp, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	079b      	lsls	r3, r3, #30
 800adb8:	d100      	bne.n	800adbc <__sflush_r+0xdc>
 800adba:	694a      	ldr	r2, [r1, #20]
 800adbc:	60a2      	str	r2, [r4, #8]
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	dd99      	ble.n	800acf8 <__sflush_r+0x18>
 800adc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800adc6:	0032      	movs	r2, r6
 800adc8:	001f      	movs	r7, r3
 800adca:	0028      	movs	r0, r5
 800adcc:	9b01      	ldr	r3, [sp, #4]
 800adce:	6a21      	ldr	r1, [r4, #32]
 800add0:	47b8      	blx	r7
 800add2:	2800      	cmp	r0, #0
 800add4:	dc06      	bgt.n	800ade4 <__sflush_r+0x104>
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	2001      	movs	r0, #1
 800adda:	89a2      	ldrh	r2, [r4, #12]
 800addc:	4240      	negs	r0, r0
 800adde:	4313      	orrs	r3, r2
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	e78a      	b.n	800acfa <__sflush_r+0x1a>
 800ade4:	9b01      	ldr	r3, [sp, #4]
 800ade6:	1836      	adds	r6, r6, r0
 800ade8:	1a1b      	subs	r3, r3, r0
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	e7e7      	b.n	800adbe <__sflush_r+0xde>
 800adee:	46c0      	nop			; (mov r8, r8)
 800adf0:	dfbffffe 	.word	0xdfbffffe

0800adf4 <_fflush_r>:
 800adf4:	690b      	ldr	r3, [r1, #16]
 800adf6:	b570      	push	{r4, r5, r6, lr}
 800adf8:	0005      	movs	r5, r0
 800adfa:	000c      	movs	r4, r1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <_fflush_r+0x12>
 800ae00:	2500      	movs	r5, #0
 800ae02:	0028      	movs	r0, r5
 800ae04:	bd70      	pop	{r4, r5, r6, pc}
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d004      	beq.n	800ae14 <_fflush_r+0x20>
 800ae0a:	6a03      	ldr	r3, [r0, #32]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <_fflush_r+0x20>
 800ae10:	f7fd f9cc 	bl	80081ac <__sinit>
 800ae14:	220c      	movs	r2, #12
 800ae16:	5ea3      	ldrsh	r3, [r4, r2]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0f1      	beq.n	800ae00 <_fflush_r+0xc>
 800ae1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae1e:	07d2      	lsls	r2, r2, #31
 800ae20:	d404      	bmi.n	800ae2c <_fflush_r+0x38>
 800ae22:	059b      	lsls	r3, r3, #22
 800ae24:	d402      	bmi.n	800ae2c <_fflush_r+0x38>
 800ae26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae28:	f7fd fb91 	bl	800854e <__retarget_lock_acquire_recursive>
 800ae2c:	0028      	movs	r0, r5
 800ae2e:	0021      	movs	r1, r4
 800ae30:	f7ff ff56 	bl	800ace0 <__sflush_r>
 800ae34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae36:	0005      	movs	r5, r0
 800ae38:	07db      	lsls	r3, r3, #31
 800ae3a:	d4e2      	bmi.n	800ae02 <_fflush_r+0xe>
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	059b      	lsls	r3, r3, #22
 800ae40:	d4df      	bmi.n	800ae02 <_fflush_r+0xe>
 800ae42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae44:	f7fd fb84 	bl	8008550 <__retarget_lock_release_recursive>
 800ae48:	e7db      	b.n	800ae02 <_fflush_r+0xe>

0800ae4a <__sccl>:
 800ae4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae4c:	780b      	ldrb	r3, [r1, #0]
 800ae4e:	0004      	movs	r4, r0
 800ae50:	2b5e      	cmp	r3, #94	; 0x5e
 800ae52:	d019      	beq.n	800ae88 <__sccl+0x3e>
 800ae54:	2200      	movs	r2, #0
 800ae56:	1c4d      	adds	r5, r1, #1
 800ae58:	0021      	movs	r1, r4
 800ae5a:	1c60      	adds	r0, r4, #1
 800ae5c:	30ff      	adds	r0, #255	; 0xff
 800ae5e:	700a      	strb	r2, [r1, #0]
 800ae60:	3101      	adds	r1, #1
 800ae62:	4281      	cmp	r1, r0
 800ae64:	d1fb      	bne.n	800ae5e <__sccl+0x14>
 800ae66:	1e68      	subs	r0, r5, #1
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00c      	beq.n	800ae86 <__sccl+0x3c>
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	262d      	movs	r6, #45	; 0x2d
 800ae70:	404a      	eors	r2, r1
 800ae72:	0028      	movs	r0, r5
 800ae74:	54e2      	strb	r2, [r4, r3]
 800ae76:	7801      	ldrb	r1, [r0, #0]
 800ae78:	1c45      	adds	r5, r0, #1
 800ae7a:	292d      	cmp	r1, #45	; 0x2d
 800ae7c:	d00c      	beq.n	800ae98 <__sccl+0x4e>
 800ae7e:	295d      	cmp	r1, #93	; 0x5d
 800ae80:	d01d      	beq.n	800aebe <__sccl+0x74>
 800ae82:	2900      	cmp	r1, #0
 800ae84:	d104      	bne.n	800ae90 <__sccl+0x46>
 800ae86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae88:	2201      	movs	r2, #1
 800ae8a:	784b      	ldrb	r3, [r1, #1]
 800ae8c:	1c8d      	adds	r5, r1, #2
 800ae8e:	e7e3      	b.n	800ae58 <__sccl+0xe>
 800ae90:	000b      	movs	r3, r1
 800ae92:	e7ee      	b.n	800ae72 <__sccl+0x28>
 800ae94:	0033      	movs	r3, r6
 800ae96:	e7ec      	b.n	800ae72 <__sccl+0x28>
 800ae98:	7841      	ldrb	r1, [r0, #1]
 800ae9a:	295d      	cmp	r1, #93	; 0x5d
 800ae9c:	d0fa      	beq.n	800ae94 <__sccl+0x4a>
 800ae9e:	428b      	cmp	r3, r1
 800aea0:	dcf8      	bgt.n	800ae94 <__sccl+0x4a>
 800aea2:	001d      	movs	r5, r3
 800aea4:	3002      	adds	r0, #2
 800aea6:	3501      	adds	r5, #1
 800aea8:	5562      	strb	r2, [r4, r5]
 800aeaa:	42a9      	cmp	r1, r5
 800aeac:	dcfb      	bgt.n	800aea6 <__sccl+0x5c>
 800aeae:	2500      	movs	r5, #0
 800aeb0:	1c5f      	adds	r7, r3, #1
 800aeb2:	428b      	cmp	r3, r1
 800aeb4:	da01      	bge.n	800aeba <__sccl+0x70>
 800aeb6:	1acd      	subs	r5, r1, r3
 800aeb8:	3d01      	subs	r5, #1
 800aeba:	197b      	adds	r3, r7, r5
 800aebc:	e7db      	b.n	800ae76 <__sccl+0x2c>
 800aebe:	0028      	movs	r0, r5
 800aec0:	e7e1      	b.n	800ae86 <__sccl+0x3c>
	...

0800aec4 <__submore>:
 800aec4:	000b      	movs	r3, r1
 800aec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aec8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800aeca:	3344      	adds	r3, #68	; 0x44
 800aecc:	000c      	movs	r4, r1
 800aece:	429d      	cmp	r5, r3
 800aed0:	d11c      	bne.n	800af0c <__submore+0x48>
 800aed2:	2680      	movs	r6, #128	; 0x80
 800aed4:	00f6      	lsls	r6, r6, #3
 800aed6:	0031      	movs	r1, r6
 800aed8:	f7fb faf2 	bl	80064c0 <_malloc_r>
 800aedc:	2800      	cmp	r0, #0
 800aede:	d102      	bne.n	800aee6 <__submore+0x22>
 800aee0:	2001      	movs	r0, #1
 800aee2:	4240      	negs	r0, r0
 800aee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aee6:	0023      	movs	r3, r4
 800aee8:	6360      	str	r0, [r4, #52]	; 0x34
 800aeea:	63a6      	str	r6, [r4, #56]	; 0x38
 800aeec:	3346      	adds	r3, #70	; 0x46
 800aeee:	781a      	ldrb	r2, [r3, #0]
 800aef0:	4b10      	ldr	r3, [pc, #64]	; (800af34 <__submore+0x70>)
 800aef2:	54c2      	strb	r2, [r0, r3]
 800aef4:	0023      	movs	r3, r4
 800aef6:	3345      	adds	r3, #69	; 0x45
 800aef8:	781a      	ldrb	r2, [r3, #0]
 800aefa:	4b0f      	ldr	r3, [pc, #60]	; (800af38 <__submore+0x74>)
 800aefc:	54c2      	strb	r2, [r0, r3]
 800aefe:	782a      	ldrb	r2, [r5, #0]
 800af00:	4b0e      	ldr	r3, [pc, #56]	; (800af3c <__submore+0x78>)
 800af02:	54c2      	strb	r2, [r0, r3]
 800af04:	18c0      	adds	r0, r0, r3
 800af06:	6020      	str	r0, [r4, #0]
 800af08:	2000      	movs	r0, #0
 800af0a:	e7eb      	b.n	800aee4 <__submore+0x20>
 800af0c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800af0e:	0029      	movs	r1, r5
 800af10:	0073      	lsls	r3, r6, #1
 800af12:	001a      	movs	r2, r3
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	f000 f872 	bl	800affe <_realloc_r>
 800af1a:	1e05      	subs	r5, r0, #0
 800af1c:	d0e0      	beq.n	800aee0 <__submore+0x1c>
 800af1e:	1987      	adds	r7, r0, r6
 800af20:	0001      	movs	r1, r0
 800af22:	0032      	movs	r2, r6
 800af24:	0038      	movs	r0, r7
 800af26:	f7fd fb1f 	bl	8008568 <memcpy>
 800af2a:	9b01      	ldr	r3, [sp, #4]
 800af2c:	6027      	str	r7, [r4, #0]
 800af2e:	6365      	str	r5, [r4, #52]	; 0x34
 800af30:	63a3      	str	r3, [r4, #56]	; 0x38
 800af32:	e7e9      	b.n	800af08 <__submore+0x44>
 800af34:	000003ff 	.word	0x000003ff
 800af38:	000003fe 	.word	0x000003fe
 800af3c:	000003fd 	.word	0x000003fd

0800af40 <memmove>:
 800af40:	b510      	push	{r4, lr}
 800af42:	4288      	cmp	r0, r1
 800af44:	d902      	bls.n	800af4c <memmove+0xc>
 800af46:	188b      	adds	r3, r1, r2
 800af48:	4298      	cmp	r0, r3
 800af4a:	d303      	bcc.n	800af54 <memmove+0x14>
 800af4c:	2300      	movs	r3, #0
 800af4e:	e007      	b.n	800af60 <memmove+0x20>
 800af50:	5c8b      	ldrb	r3, [r1, r2]
 800af52:	5483      	strb	r3, [r0, r2]
 800af54:	3a01      	subs	r2, #1
 800af56:	d2fb      	bcs.n	800af50 <memmove+0x10>
 800af58:	bd10      	pop	{r4, pc}
 800af5a:	5ccc      	ldrb	r4, [r1, r3]
 800af5c:	54c4      	strb	r4, [r0, r3]
 800af5e:	3301      	adds	r3, #1
 800af60:	429a      	cmp	r2, r3
 800af62:	d1fa      	bne.n	800af5a <memmove+0x1a>
 800af64:	e7f8      	b.n	800af58 <memmove+0x18>
	...

0800af68 <__assert_func>:
 800af68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800af6a:	0014      	movs	r4, r2
 800af6c:	001a      	movs	r2, r3
 800af6e:	4b09      	ldr	r3, [pc, #36]	; (800af94 <__assert_func+0x2c>)
 800af70:	0005      	movs	r5, r0
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	000e      	movs	r6, r1
 800af76:	68d8      	ldr	r0, [r3, #12]
 800af78:	4b07      	ldr	r3, [pc, #28]	; (800af98 <__assert_func+0x30>)
 800af7a:	2c00      	cmp	r4, #0
 800af7c:	d101      	bne.n	800af82 <__assert_func+0x1a>
 800af7e:	4b07      	ldr	r3, [pc, #28]	; (800af9c <__assert_func+0x34>)
 800af80:	001c      	movs	r4, r3
 800af82:	4907      	ldr	r1, [pc, #28]	; (800afa0 <__assert_func+0x38>)
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	9402      	str	r4, [sp, #8]
 800af88:	002b      	movs	r3, r5
 800af8a:	9600      	str	r6, [sp, #0]
 800af8c:	f000 f8ec 	bl	800b168 <fiprintf>
 800af90:	f000 f8fa 	bl	800b188 <abort>
 800af94:	200001e0 	.word	0x200001e0
 800af98:	0800bd30 	.word	0x0800bd30
 800af9c:	0800bd6b 	.word	0x0800bd6b
 800afa0:	0800bd3d 	.word	0x0800bd3d

0800afa4 <_calloc_r>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	0c0b      	lsrs	r3, r1, #16
 800afa8:	0c15      	lsrs	r5, r2, #16
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d11e      	bne.n	800afec <_calloc_r+0x48>
 800afae:	2d00      	cmp	r5, #0
 800afb0:	d10c      	bne.n	800afcc <_calloc_r+0x28>
 800afb2:	b289      	uxth	r1, r1
 800afb4:	b294      	uxth	r4, r2
 800afb6:	434c      	muls	r4, r1
 800afb8:	0021      	movs	r1, r4
 800afba:	f7fb fa81 	bl	80064c0 <_malloc_r>
 800afbe:	1e05      	subs	r5, r0, #0
 800afc0:	d01b      	beq.n	800affa <_calloc_r+0x56>
 800afc2:	0022      	movs	r2, r4
 800afc4:	2100      	movs	r1, #0
 800afc6:	f7fd f9ef 	bl	80083a8 <memset>
 800afca:	e016      	b.n	800affa <_calloc_r+0x56>
 800afcc:	1c2b      	adds	r3, r5, #0
 800afce:	1c0c      	adds	r4, r1, #0
 800afd0:	b289      	uxth	r1, r1
 800afd2:	b292      	uxth	r2, r2
 800afd4:	434a      	muls	r2, r1
 800afd6:	b2a1      	uxth	r1, r4
 800afd8:	b29c      	uxth	r4, r3
 800afda:	434c      	muls	r4, r1
 800afdc:	0c13      	lsrs	r3, r2, #16
 800afde:	18e4      	adds	r4, r4, r3
 800afe0:	0c23      	lsrs	r3, r4, #16
 800afe2:	d107      	bne.n	800aff4 <_calloc_r+0x50>
 800afe4:	0424      	lsls	r4, r4, #16
 800afe6:	b292      	uxth	r2, r2
 800afe8:	4314      	orrs	r4, r2
 800afea:	e7e5      	b.n	800afb8 <_calloc_r+0x14>
 800afec:	2d00      	cmp	r5, #0
 800afee:	d101      	bne.n	800aff4 <_calloc_r+0x50>
 800aff0:	1c14      	adds	r4, r2, #0
 800aff2:	e7ed      	b.n	800afd0 <_calloc_r+0x2c>
 800aff4:	230c      	movs	r3, #12
 800aff6:	2500      	movs	r5, #0
 800aff8:	6003      	str	r3, [r0, #0]
 800affa:	0028      	movs	r0, r5
 800affc:	bd70      	pop	{r4, r5, r6, pc}

0800affe <_realloc_r>:
 800affe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b000:	0007      	movs	r7, r0
 800b002:	000e      	movs	r6, r1
 800b004:	0014      	movs	r4, r2
 800b006:	2900      	cmp	r1, #0
 800b008:	d105      	bne.n	800b016 <_realloc_r+0x18>
 800b00a:	0011      	movs	r1, r2
 800b00c:	f7fb fa58 	bl	80064c0 <_malloc_r>
 800b010:	0005      	movs	r5, r0
 800b012:	0028      	movs	r0, r5
 800b014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b016:	2a00      	cmp	r2, #0
 800b018:	d103      	bne.n	800b022 <_realloc_r+0x24>
 800b01a:	f7fe f957 	bl	80092cc <_free_r>
 800b01e:	0025      	movs	r5, r4
 800b020:	e7f7      	b.n	800b012 <_realloc_r+0x14>
 800b022:	f000 f8b8 	bl	800b196 <_malloc_usable_size_r>
 800b026:	9001      	str	r0, [sp, #4]
 800b028:	4284      	cmp	r4, r0
 800b02a:	d803      	bhi.n	800b034 <_realloc_r+0x36>
 800b02c:	0035      	movs	r5, r6
 800b02e:	0843      	lsrs	r3, r0, #1
 800b030:	42a3      	cmp	r3, r4
 800b032:	d3ee      	bcc.n	800b012 <_realloc_r+0x14>
 800b034:	0021      	movs	r1, r4
 800b036:	0038      	movs	r0, r7
 800b038:	f7fb fa42 	bl	80064c0 <_malloc_r>
 800b03c:	1e05      	subs	r5, r0, #0
 800b03e:	d0e8      	beq.n	800b012 <_realloc_r+0x14>
 800b040:	9b01      	ldr	r3, [sp, #4]
 800b042:	0022      	movs	r2, r4
 800b044:	429c      	cmp	r4, r3
 800b046:	d900      	bls.n	800b04a <_realloc_r+0x4c>
 800b048:	001a      	movs	r2, r3
 800b04a:	0031      	movs	r1, r6
 800b04c:	0028      	movs	r0, r5
 800b04e:	f7fd fa8b 	bl	8008568 <memcpy>
 800b052:	0031      	movs	r1, r6
 800b054:	0038      	movs	r0, r7
 800b056:	f7fe f939 	bl	80092cc <_free_r>
 800b05a:	e7da      	b.n	800b012 <_realloc_r+0x14>

0800b05c <_strtoul_l.constprop.0>:
 800b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05e:	b087      	sub	sp, #28
 800b060:	9202      	str	r2, [sp, #8]
 800b062:	4a3e      	ldr	r2, [pc, #248]	; (800b15c <_strtoul_l.constprop.0+0x100>)
 800b064:	001e      	movs	r6, r3
 800b066:	9101      	str	r1, [sp, #4]
 800b068:	000b      	movs	r3, r1
 800b06a:	4694      	mov	ip, r2
 800b06c:	2108      	movs	r1, #8
 800b06e:	9005      	str	r0, [sp, #20]
 800b070:	001a      	movs	r2, r3
 800b072:	4660      	mov	r0, ip
 800b074:	7814      	ldrb	r4, [r2, #0]
 800b076:	3301      	adds	r3, #1
 800b078:	5d00      	ldrb	r0, [r0, r4]
 800b07a:	001d      	movs	r5, r3
 800b07c:	0007      	movs	r7, r0
 800b07e:	400f      	ands	r7, r1
 800b080:	4208      	tst	r0, r1
 800b082:	d1f5      	bne.n	800b070 <_strtoul_l.constprop.0+0x14>
 800b084:	2c2d      	cmp	r4, #45	; 0x2d
 800b086:	d13d      	bne.n	800b104 <_strtoul_l.constprop.0+0xa8>
 800b088:	2701      	movs	r7, #1
 800b08a:	781c      	ldrb	r4, [r3, #0]
 800b08c:	1c95      	adds	r5, r2, #2
 800b08e:	2e00      	cmp	r6, #0
 800b090:	d05f      	beq.n	800b152 <_strtoul_l.constprop.0+0xf6>
 800b092:	2e10      	cmp	r6, #16
 800b094:	d109      	bne.n	800b0aa <_strtoul_l.constprop.0+0x4e>
 800b096:	2c30      	cmp	r4, #48	; 0x30
 800b098:	d107      	bne.n	800b0aa <_strtoul_l.constprop.0+0x4e>
 800b09a:	2220      	movs	r2, #32
 800b09c:	782b      	ldrb	r3, [r5, #0]
 800b09e:	4393      	bics	r3, r2
 800b0a0:	2b58      	cmp	r3, #88	; 0x58
 800b0a2:	d151      	bne.n	800b148 <_strtoul_l.constprop.0+0xec>
 800b0a4:	2610      	movs	r6, #16
 800b0a6:	786c      	ldrb	r4, [r5, #1]
 800b0a8:	3502      	adds	r5, #2
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	0031      	movs	r1, r6
 800b0ae:	4240      	negs	r0, r0
 800b0b0:	f7f5 f844 	bl	800013c <__udivsi3>
 800b0b4:	9003      	str	r0, [sp, #12]
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	0031      	movs	r1, r6
 800b0ba:	4240      	negs	r0, r0
 800b0bc:	f7f5 f8c4 	bl	8000248 <__aeabi_uidivmod>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	9104      	str	r1, [sp, #16]
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	0018      	movs	r0, r3
 800b0ca:	4694      	mov	ip, r2
 800b0cc:	4249      	negs	r1, r1
 800b0ce:	0022      	movs	r2, r4
 800b0d0:	3a30      	subs	r2, #48	; 0x30
 800b0d2:	2a09      	cmp	r2, #9
 800b0d4:	d903      	bls.n	800b0de <_strtoul_l.constprop.0+0x82>
 800b0d6:	3a11      	subs	r2, #17
 800b0d8:	2a19      	cmp	r2, #25
 800b0da:	d818      	bhi.n	800b10e <_strtoul_l.constprop.0+0xb2>
 800b0dc:	320a      	adds	r2, #10
 800b0de:	4296      	cmp	r6, r2
 800b0e0:	dd19      	ble.n	800b116 <_strtoul_l.constprop.0+0xba>
 800b0e2:	1c5c      	adds	r4, r3, #1
 800b0e4:	d00b      	beq.n	800b0fe <_strtoul_l.constprop.0+0xa2>
 800b0e6:	9c03      	ldr	r4, [sp, #12]
 800b0e8:	000b      	movs	r3, r1
 800b0ea:	4284      	cmp	r4, r0
 800b0ec:	d307      	bcc.n	800b0fe <_strtoul_l.constprop.0+0xa2>
 800b0ee:	d103      	bne.n	800b0f8 <_strtoul_l.constprop.0+0x9c>
 800b0f0:	9c04      	ldr	r4, [sp, #16]
 800b0f2:	000b      	movs	r3, r1
 800b0f4:	4294      	cmp	r4, r2
 800b0f6:	db02      	blt.n	800b0fe <_strtoul_l.constprop.0+0xa2>
 800b0f8:	4663      	mov	r3, ip
 800b0fa:	4370      	muls	r0, r6
 800b0fc:	1810      	adds	r0, r2, r0
 800b0fe:	782c      	ldrb	r4, [r5, #0]
 800b100:	3501      	adds	r5, #1
 800b102:	e7e4      	b.n	800b0ce <_strtoul_l.constprop.0+0x72>
 800b104:	2c2b      	cmp	r4, #43	; 0x2b
 800b106:	d1c2      	bne.n	800b08e <_strtoul_l.constprop.0+0x32>
 800b108:	781c      	ldrb	r4, [r3, #0]
 800b10a:	1c95      	adds	r5, r2, #2
 800b10c:	e7bf      	b.n	800b08e <_strtoul_l.constprop.0+0x32>
 800b10e:	0022      	movs	r2, r4
 800b110:	3a61      	subs	r2, #97	; 0x61
 800b112:	2a19      	cmp	r2, #25
 800b114:	d9e2      	bls.n	800b0dc <_strtoul_l.constprop.0+0x80>
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	d108      	bne.n	800b12c <_strtoul_l.constprop.0+0xd0>
 800b11a:	2222      	movs	r2, #34	; 0x22
 800b11c:	9905      	ldr	r1, [sp, #20]
 800b11e:	0018      	movs	r0, r3
 800b120:	600a      	str	r2, [r1, #0]
 800b122:	9a02      	ldr	r2, [sp, #8]
 800b124:	2a00      	cmp	r2, #0
 800b126:	d109      	bne.n	800b13c <_strtoul_l.constprop.0+0xe0>
 800b128:	b007      	add	sp, #28
 800b12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b12c:	2f00      	cmp	r7, #0
 800b12e:	d000      	beq.n	800b132 <_strtoul_l.constprop.0+0xd6>
 800b130:	4240      	negs	r0, r0
 800b132:	9a02      	ldr	r2, [sp, #8]
 800b134:	2a00      	cmp	r2, #0
 800b136:	d0f7      	beq.n	800b128 <_strtoul_l.constprop.0+0xcc>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <_strtoul_l.constprop.0+0xe4>
 800b13c:	1e6b      	subs	r3, r5, #1
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	9b02      	ldr	r3, [sp, #8]
 800b142:	9a01      	ldr	r2, [sp, #4]
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	e7ef      	b.n	800b128 <_strtoul_l.constprop.0+0xcc>
 800b148:	2430      	movs	r4, #48	; 0x30
 800b14a:	2e00      	cmp	r6, #0
 800b14c:	d1ad      	bne.n	800b0aa <_strtoul_l.constprop.0+0x4e>
 800b14e:	3608      	adds	r6, #8
 800b150:	e7ab      	b.n	800b0aa <_strtoul_l.constprop.0+0x4e>
 800b152:	2c30      	cmp	r4, #48	; 0x30
 800b154:	d0a1      	beq.n	800b09a <_strtoul_l.constprop.0+0x3e>
 800b156:	260a      	movs	r6, #10
 800b158:	e7a7      	b.n	800b0aa <_strtoul_l.constprop.0+0x4e>
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	0800b981 	.word	0x0800b981

0800b160 <_strtoul_r>:
 800b160:	b510      	push	{r4, lr}
 800b162:	f7ff ff7b 	bl	800b05c <_strtoul_l.constprop.0>
 800b166:	bd10      	pop	{r4, pc}

0800b168 <fiprintf>:
 800b168:	b40e      	push	{r1, r2, r3}
 800b16a:	b517      	push	{r0, r1, r2, r4, lr}
 800b16c:	4c05      	ldr	r4, [pc, #20]	; (800b184 <fiprintf+0x1c>)
 800b16e:	ab05      	add	r3, sp, #20
 800b170:	cb04      	ldmia	r3!, {r2}
 800b172:	0001      	movs	r1, r0
 800b174:	6820      	ldr	r0, [r4, #0]
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	f000 f83c 	bl	800b1f4 <_vfiprintf_r>
 800b17c:	bc1e      	pop	{r1, r2, r3, r4}
 800b17e:	bc08      	pop	{r3}
 800b180:	b003      	add	sp, #12
 800b182:	4718      	bx	r3
 800b184:	200001e0 	.word	0x200001e0

0800b188 <abort>:
 800b188:	2006      	movs	r0, #6
 800b18a:	b510      	push	{r4, lr}
 800b18c:	f000 fa1e 	bl	800b5cc <raise>
 800b190:	2001      	movs	r0, #1
 800b192:	f7f7 ff37 	bl	8003004 <_exit>

0800b196 <_malloc_usable_size_r>:
 800b196:	1f0b      	subs	r3, r1, #4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	1f18      	subs	r0, r3, #4
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da01      	bge.n	800b1a4 <_malloc_usable_size_r+0xe>
 800b1a0:	580b      	ldr	r3, [r1, r0]
 800b1a2:	18c0      	adds	r0, r0, r3
 800b1a4:	4770      	bx	lr

0800b1a6 <__sfputc_r>:
 800b1a6:	6893      	ldr	r3, [r2, #8]
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	6093      	str	r3, [r2, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	da04      	bge.n	800b1bc <__sfputc_r+0x16>
 800b1b2:	6994      	ldr	r4, [r2, #24]
 800b1b4:	42a3      	cmp	r3, r4
 800b1b6:	db07      	blt.n	800b1c8 <__sfputc_r+0x22>
 800b1b8:	290a      	cmp	r1, #10
 800b1ba:	d005      	beq.n	800b1c8 <__sfputc_r+0x22>
 800b1bc:	6813      	ldr	r3, [r2, #0]
 800b1be:	1c58      	adds	r0, r3, #1
 800b1c0:	6010      	str	r0, [r2, #0]
 800b1c2:	7019      	strb	r1, [r3, #0]
 800b1c4:	0008      	movs	r0, r1
 800b1c6:	bd10      	pop	{r4, pc}
 800b1c8:	f000 f930 	bl	800b42c <__swbuf_r>
 800b1cc:	0001      	movs	r1, r0
 800b1ce:	e7f9      	b.n	800b1c4 <__sfputc_r+0x1e>

0800b1d0 <__sfputs_r>:
 800b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d2:	0006      	movs	r6, r0
 800b1d4:	000f      	movs	r7, r1
 800b1d6:	0014      	movs	r4, r2
 800b1d8:	18d5      	adds	r5, r2, r3
 800b1da:	42ac      	cmp	r4, r5
 800b1dc:	d101      	bne.n	800b1e2 <__sfputs_r+0x12>
 800b1de:	2000      	movs	r0, #0
 800b1e0:	e007      	b.n	800b1f2 <__sfputs_r+0x22>
 800b1e2:	7821      	ldrb	r1, [r4, #0]
 800b1e4:	003a      	movs	r2, r7
 800b1e6:	0030      	movs	r0, r6
 800b1e8:	f7ff ffdd 	bl	800b1a6 <__sfputc_r>
 800b1ec:	3401      	adds	r4, #1
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	d1f3      	bne.n	800b1da <__sfputs_r+0xa>
 800b1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1f4 <_vfiprintf_r>:
 800b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f6:	b0a1      	sub	sp, #132	; 0x84
 800b1f8:	000f      	movs	r7, r1
 800b1fa:	0015      	movs	r5, r2
 800b1fc:	001e      	movs	r6, r3
 800b1fe:	9003      	str	r0, [sp, #12]
 800b200:	2800      	cmp	r0, #0
 800b202:	d004      	beq.n	800b20e <_vfiprintf_r+0x1a>
 800b204:	6a03      	ldr	r3, [r0, #32]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <_vfiprintf_r+0x1a>
 800b20a:	f7fc ffcf 	bl	80081ac <__sinit>
 800b20e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b210:	07db      	lsls	r3, r3, #31
 800b212:	d405      	bmi.n	800b220 <_vfiprintf_r+0x2c>
 800b214:	89bb      	ldrh	r3, [r7, #12]
 800b216:	059b      	lsls	r3, r3, #22
 800b218:	d402      	bmi.n	800b220 <_vfiprintf_r+0x2c>
 800b21a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b21c:	f7fd f997 	bl	800854e <__retarget_lock_acquire_recursive>
 800b220:	89bb      	ldrh	r3, [r7, #12]
 800b222:	071b      	lsls	r3, r3, #28
 800b224:	d502      	bpl.n	800b22c <_vfiprintf_r+0x38>
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d113      	bne.n	800b254 <_vfiprintf_r+0x60>
 800b22c:	0039      	movs	r1, r7
 800b22e:	9803      	ldr	r0, [sp, #12]
 800b230:	f000 f93e 	bl	800b4b0 <__swsetup_r>
 800b234:	2800      	cmp	r0, #0
 800b236:	d00d      	beq.n	800b254 <_vfiprintf_r+0x60>
 800b238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b23a:	07db      	lsls	r3, r3, #31
 800b23c:	d503      	bpl.n	800b246 <_vfiprintf_r+0x52>
 800b23e:	2001      	movs	r0, #1
 800b240:	4240      	negs	r0, r0
 800b242:	b021      	add	sp, #132	; 0x84
 800b244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b246:	89bb      	ldrh	r3, [r7, #12]
 800b248:	059b      	lsls	r3, r3, #22
 800b24a:	d4f8      	bmi.n	800b23e <_vfiprintf_r+0x4a>
 800b24c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b24e:	f7fd f97f 	bl	8008550 <__retarget_lock_release_recursive>
 800b252:	e7f4      	b.n	800b23e <_vfiprintf_r+0x4a>
 800b254:	2300      	movs	r3, #0
 800b256:	ac08      	add	r4, sp, #32
 800b258:	6163      	str	r3, [r4, #20]
 800b25a:	3320      	adds	r3, #32
 800b25c:	7663      	strb	r3, [r4, #25]
 800b25e:	3310      	adds	r3, #16
 800b260:	76a3      	strb	r3, [r4, #26]
 800b262:	9607      	str	r6, [sp, #28]
 800b264:	002e      	movs	r6, r5
 800b266:	7833      	ldrb	r3, [r6, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <_vfiprintf_r+0x7c>
 800b26c:	2b25      	cmp	r3, #37	; 0x25
 800b26e:	d148      	bne.n	800b302 <_vfiprintf_r+0x10e>
 800b270:	1b73      	subs	r3, r6, r5
 800b272:	9305      	str	r3, [sp, #20]
 800b274:	42ae      	cmp	r6, r5
 800b276:	d00b      	beq.n	800b290 <_vfiprintf_r+0x9c>
 800b278:	002a      	movs	r2, r5
 800b27a:	0039      	movs	r1, r7
 800b27c:	9803      	ldr	r0, [sp, #12]
 800b27e:	f7ff ffa7 	bl	800b1d0 <__sfputs_r>
 800b282:	3001      	adds	r0, #1
 800b284:	d100      	bne.n	800b288 <_vfiprintf_r+0x94>
 800b286:	e0af      	b.n	800b3e8 <_vfiprintf_r+0x1f4>
 800b288:	6963      	ldr	r3, [r4, #20]
 800b28a:	9a05      	ldr	r2, [sp, #20]
 800b28c:	189b      	adds	r3, r3, r2
 800b28e:	6163      	str	r3, [r4, #20]
 800b290:	7833      	ldrb	r3, [r6, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d100      	bne.n	800b298 <_vfiprintf_r+0xa4>
 800b296:	e0a7      	b.n	800b3e8 <_vfiprintf_r+0x1f4>
 800b298:	2201      	movs	r2, #1
 800b29a:	2300      	movs	r3, #0
 800b29c:	4252      	negs	r2, r2
 800b29e:	6062      	str	r2, [r4, #4]
 800b2a0:	a904      	add	r1, sp, #16
 800b2a2:	3254      	adds	r2, #84	; 0x54
 800b2a4:	1852      	adds	r2, r2, r1
 800b2a6:	1c75      	adds	r5, r6, #1
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	60e3      	str	r3, [r4, #12]
 800b2ac:	60a3      	str	r3, [r4, #8]
 800b2ae:	7013      	strb	r3, [r2, #0]
 800b2b0:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2b2:	4b59      	ldr	r3, [pc, #356]	; (800b418 <_vfiprintf_r+0x224>)
 800b2b4:	2205      	movs	r2, #5
 800b2b6:	0018      	movs	r0, r3
 800b2b8:	7829      	ldrb	r1, [r5, #0]
 800b2ba:	9305      	str	r3, [sp, #20]
 800b2bc:	f7fd f949 	bl	8008552 <memchr>
 800b2c0:	1c6e      	adds	r6, r5, #1
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d11f      	bne.n	800b306 <_vfiprintf_r+0x112>
 800b2c6:	6822      	ldr	r2, [r4, #0]
 800b2c8:	06d3      	lsls	r3, r2, #27
 800b2ca:	d504      	bpl.n	800b2d6 <_vfiprintf_r+0xe2>
 800b2cc:	2353      	movs	r3, #83	; 0x53
 800b2ce:	a904      	add	r1, sp, #16
 800b2d0:	185b      	adds	r3, r3, r1
 800b2d2:	2120      	movs	r1, #32
 800b2d4:	7019      	strb	r1, [r3, #0]
 800b2d6:	0713      	lsls	r3, r2, #28
 800b2d8:	d504      	bpl.n	800b2e4 <_vfiprintf_r+0xf0>
 800b2da:	2353      	movs	r3, #83	; 0x53
 800b2dc:	a904      	add	r1, sp, #16
 800b2de:	185b      	adds	r3, r3, r1
 800b2e0:	212b      	movs	r1, #43	; 0x2b
 800b2e2:	7019      	strb	r1, [r3, #0]
 800b2e4:	782b      	ldrb	r3, [r5, #0]
 800b2e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e8:	d016      	beq.n	800b318 <_vfiprintf_r+0x124>
 800b2ea:	002e      	movs	r6, r5
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	200a      	movs	r0, #10
 800b2f0:	68e3      	ldr	r3, [r4, #12]
 800b2f2:	7832      	ldrb	r2, [r6, #0]
 800b2f4:	1c75      	adds	r5, r6, #1
 800b2f6:	3a30      	subs	r2, #48	; 0x30
 800b2f8:	2a09      	cmp	r2, #9
 800b2fa:	d94e      	bls.n	800b39a <_vfiprintf_r+0x1a6>
 800b2fc:	2900      	cmp	r1, #0
 800b2fe:	d111      	bne.n	800b324 <_vfiprintf_r+0x130>
 800b300:	e017      	b.n	800b332 <_vfiprintf_r+0x13e>
 800b302:	3601      	adds	r6, #1
 800b304:	e7af      	b.n	800b266 <_vfiprintf_r+0x72>
 800b306:	9b05      	ldr	r3, [sp, #20]
 800b308:	6822      	ldr	r2, [r4, #0]
 800b30a:	1ac0      	subs	r0, r0, r3
 800b30c:	2301      	movs	r3, #1
 800b30e:	4083      	lsls	r3, r0
 800b310:	4313      	orrs	r3, r2
 800b312:	0035      	movs	r5, r6
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	e7cc      	b.n	800b2b2 <_vfiprintf_r+0xbe>
 800b318:	9b07      	ldr	r3, [sp, #28]
 800b31a:	1d19      	adds	r1, r3, #4
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	9107      	str	r1, [sp, #28]
 800b320:	2b00      	cmp	r3, #0
 800b322:	db01      	blt.n	800b328 <_vfiprintf_r+0x134>
 800b324:	930b      	str	r3, [sp, #44]	; 0x2c
 800b326:	e004      	b.n	800b332 <_vfiprintf_r+0x13e>
 800b328:	425b      	negs	r3, r3
 800b32a:	60e3      	str	r3, [r4, #12]
 800b32c:	2302      	movs	r3, #2
 800b32e:	4313      	orrs	r3, r2
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	7833      	ldrb	r3, [r6, #0]
 800b334:	2b2e      	cmp	r3, #46	; 0x2e
 800b336:	d10a      	bne.n	800b34e <_vfiprintf_r+0x15a>
 800b338:	7873      	ldrb	r3, [r6, #1]
 800b33a:	2b2a      	cmp	r3, #42	; 0x2a
 800b33c:	d135      	bne.n	800b3aa <_vfiprintf_r+0x1b6>
 800b33e:	9b07      	ldr	r3, [sp, #28]
 800b340:	3602      	adds	r6, #2
 800b342:	1d1a      	adds	r2, r3, #4
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	9207      	str	r2, [sp, #28]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	db2b      	blt.n	800b3a4 <_vfiprintf_r+0x1b0>
 800b34c:	9309      	str	r3, [sp, #36]	; 0x24
 800b34e:	4d33      	ldr	r5, [pc, #204]	; (800b41c <_vfiprintf_r+0x228>)
 800b350:	2203      	movs	r2, #3
 800b352:	0028      	movs	r0, r5
 800b354:	7831      	ldrb	r1, [r6, #0]
 800b356:	f7fd f8fc 	bl	8008552 <memchr>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d006      	beq.n	800b36c <_vfiprintf_r+0x178>
 800b35e:	2340      	movs	r3, #64	; 0x40
 800b360:	1b40      	subs	r0, r0, r5
 800b362:	4083      	lsls	r3, r0
 800b364:	6822      	ldr	r2, [r4, #0]
 800b366:	3601      	adds	r6, #1
 800b368:	4313      	orrs	r3, r2
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	7831      	ldrb	r1, [r6, #0]
 800b36e:	2206      	movs	r2, #6
 800b370:	482b      	ldr	r0, [pc, #172]	; (800b420 <_vfiprintf_r+0x22c>)
 800b372:	1c75      	adds	r5, r6, #1
 800b374:	7621      	strb	r1, [r4, #24]
 800b376:	f7fd f8ec 	bl	8008552 <memchr>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d043      	beq.n	800b406 <_vfiprintf_r+0x212>
 800b37e:	4b29      	ldr	r3, [pc, #164]	; (800b424 <_vfiprintf_r+0x230>)
 800b380:	2b00      	cmp	r3, #0
 800b382:	d125      	bne.n	800b3d0 <_vfiprintf_r+0x1dc>
 800b384:	2207      	movs	r2, #7
 800b386:	9b07      	ldr	r3, [sp, #28]
 800b388:	3307      	adds	r3, #7
 800b38a:	4393      	bics	r3, r2
 800b38c:	3308      	adds	r3, #8
 800b38e:	9307      	str	r3, [sp, #28]
 800b390:	6963      	ldr	r3, [r4, #20]
 800b392:	9a04      	ldr	r2, [sp, #16]
 800b394:	189b      	adds	r3, r3, r2
 800b396:	6163      	str	r3, [r4, #20]
 800b398:	e764      	b.n	800b264 <_vfiprintf_r+0x70>
 800b39a:	4343      	muls	r3, r0
 800b39c:	002e      	movs	r6, r5
 800b39e:	2101      	movs	r1, #1
 800b3a0:	189b      	adds	r3, r3, r2
 800b3a2:	e7a6      	b.n	800b2f2 <_vfiprintf_r+0xfe>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	425b      	negs	r3, r3
 800b3a8:	e7d0      	b.n	800b34c <_vfiprintf_r+0x158>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	200a      	movs	r0, #10
 800b3ae:	001a      	movs	r2, r3
 800b3b0:	3601      	adds	r6, #1
 800b3b2:	6063      	str	r3, [r4, #4]
 800b3b4:	7831      	ldrb	r1, [r6, #0]
 800b3b6:	1c75      	adds	r5, r6, #1
 800b3b8:	3930      	subs	r1, #48	; 0x30
 800b3ba:	2909      	cmp	r1, #9
 800b3bc:	d903      	bls.n	800b3c6 <_vfiprintf_r+0x1d2>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0c5      	beq.n	800b34e <_vfiprintf_r+0x15a>
 800b3c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b3c4:	e7c3      	b.n	800b34e <_vfiprintf_r+0x15a>
 800b3c6:	4342      	muls	r2, r0
 800b3c8:	002e      	movs	r6, r5
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	1852      	adds	r2, r2, r1
 800b3ce:	e7f1      	b.n	800b3b4 <_vfiprintf_r+0x1c0>
 800b3d0:	aa07      	add	r2, sp, #28
 800b3d2:	9200      	str	r2, [sp, #0]
 800b3d4:	0021      	movs	r1, r4
 800b3d6:	003a      	movs	r2, r7
 800b3d8:	4b13      	ldr	r3, [pc, #76]	; (800b428 <_vfiprintf_r+0x234>)
 800b3da:	9803      	ldr	r0, [sp, #12]
 800b3dc:	f7fc f878 	bl	80074d0 <_printf_float>
 800b3e0:	9004      	str	r0, [sp, #16]
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	d1d3      	bne.n	800b390 <_vfiprintf_r+0x19c>
 800b3e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ea:	07db      	lsls	r3, r3, #31
 800b3ec:	d405      	bmi.n	800b3fa <_vfiprintf_r+0x206>
 800b3ee:	89bb      	ldrh	r3, [r7, #12]
 800b3f0:	059b      	lsls	r3, r3, #22
 800b3f2:	d402      	bmi.n	800b3fa <_vfiprintf_r+0x206>
 800b3f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b3f6:	f7fd f8ab 	bl	8008550 <__retarget_lock_release_recursive>
 800b3fa:	89bb      	ldrh	r3, [r7, #12]
 800b3fc:	065b      	lsls	r3, r3, #25
 800b3fe:	d500      	bpl.n	800b402 <_vfiprintf_r+0x20e>
 800b400:	e71d      	b.n	800b23e <_vfiprintf_r+0x4a>
 800b402:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b404:	e71d      	b.n	800b242 <_vfiprintf_r+0x4e>
 800b406:	aa07      	add	r2, sp, #28
 800b408:	9200      	str	r2, [sp, #0]
 800b40a:	0021      	movs	r1, r4
 800b40c:	003a      	movs	r2, r7
 800b40e:	4b06      	ldr	r3, [pc, #24]	; (800b428 <_vfiprintf_r+0x234>)
 800b410:	9803      	ldr	r0, [sp, #12]
 800b412:	f7fc fb23 	bl	8007a5c <_printf_i>
 800b416:	e7e3      	b.n	800b3e0 <_vfiprintf_r+0x1ec>
 800b418:	0800bd04 	.word	0x0800bd04
 800b41c:	0800bd0a 	.word	0x0800bd0a
 800b420:	0800bd0e 	.word	0x0800bd0e
 800b424:	080074d1 	.word	0x080074d1
 800b428:	0800b1d1 	.word	0x0800b1d1

0800b42c <__swbuf_r>:
 800b42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42e:	0006      	movs	r6, r0
 800b430:	000d      	movs	r5, r1
 800b432:	0014      	movs	r4, r2
 800b434:	2800      	cmp	r0, #0
 800b436:	d004      	beq.n	800b442 <__swbuf_r+0x16>
 800b438:	6a03      	ldr	r3, [r0, #32]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <__swbuf_r+0x16>
 800b43e:	f7fc feb5 	bl	80081ac <__sinit>
 800b442:	69a3      	ldr	r3, [r4, #24]
 800b444:	60a3      	str	r3, [r4, #8]
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	071b      	lsls	r3, r3, #28
 800b44a:	d528      	bpl.n	800b49e <__swbuf_r+0x72>
 800b44c:	6923      	ldr	r3, [r4, #16]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d025      	beq.n	800b49e <__swbuf_r+0x72>
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	6820      	ldr	r0, [r4, #0]
 800b456:	b2ef      	uxtb	r7, r5
 800b458:	1ac0      	subs	r0, r0, r3
 800b45a:	6963      	ldr	r3, [r4, #20]
 800b45c:	b2ed      	uxtb	r5, r5
 800b45e:	4283      	cmp	r3, r0
 800b460:	dc05      	bgt.n	800b46e <__swbuf_r+0x42>
 800b462:	0021      	movs	r1, r4
 800b464:	0030      	movs	r0, r6
 800b466:	f7ff fcc5 	bl	800adf4 <_fflush_r>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d11d      	bne.n	800b4aa <__swbuf_r+0x7e>
 800b46e:	68a3      	ldr	r3, [r4, #8]
 800b470:	3001      	adds	r0, #1
 800b472:	3b01      	subs	r3, #1
 800b474:	60a3      	str	r3, [r4, #8]
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	1c5a      	adds	r2, r3, #1
 800b47a:	6022      	str	r2, [r4, #0]
 800b47c:	701f      	strb	r7, [r3, #0]
 800b47e:	6963      	ldr	r3, [r4, #20]
 800b480:	4283      	cmp	r3, r0
 800b482:	d004      	beq.n	800b48e <__swbuf_r+0x62>
 800b484:	89a3      	ldrh	r3, [r4, #12]
 800b486:	07db      	lsls	r3, r3, #31
 800b488:	d507      	bpl.n	800b49a <__swbuf_r+0x6e>
 800b48a:	2d0a      	cmp	r5, #10
 800b48c:	d105      	bne.n	800b49a <__swbuf_r+0x6e>
 800b48e:	0021      	movs	r1, r4
 800b490:	0030      	movs	r0, r6
 800b492:	f7ff fcaf 	bl	800adf4 <_fflush_r>
 800b496:	2800      	cmp	r0, #0
 800b498:	d107      	bne.n	800b4aa <__swbuf_r+0x7e>
 800b49a:	0028      	movs	r0, r5
 800b49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b49e:	0021      	movs	r1, r4
 800b4a0:	0030      	movs	r0, r6
 800b4a2:	f000 f805 	bl	800b4b0 <__swsetup_r>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d0d3      	beq.n	800b452 <__swbuf_r+0x26>
 800b4aa:	2501      	movs	r5, #1
 800b4ac:	426d      	negs	r5, r5
 800b4ae:	e7f4      	b.n	800b49a <__swbuf_r+0x6e>

0800b4b0 <__swsetup_r>:
 800b4b0:	4b30      	ldr	r3, [pc, #192]	; (800b574 <__swsetup_r+0xc4>)
 800b4b2:	b570      	push	{r4, r5, r6, lr}
 800b4b4:	0005      	movs	r5, r0
 800b4b6:	6818      	ldr	r0, [r3, #0]
 800b4b8:	000c      	movs	r4, r1
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d004      	beq.n	800b4c8 <__swsetup_r+0x18>
 800b4be:	6a03      	ldr	r3, [r0, #32]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d101      	bne.n	800b4c8 <__swsetup_r+0x18>
 800b4c4:	f7fc fe72 	bl	80081ac <__sinit>
 800b4c8:	230c      	movs	r3, #12
 800b4ca:	5ee2      	ldrsh	r2, [r4, r3]
 800b4cc:	b293      	uxth	r3, r2
 800b4ce:	0711      	lsls	r1, r2, #28
 800b4d0:	d423      	bmi.n	800b51a <__swsetup_r+0x6a>
 800b4d2:	06d9      	lsls	r1, r3, #27
 800b4d4:	d407      	bmi.n	800b4e6 <__swsetup_r+0x36>
 800b4d6:	2309      	movs	r3, #9
 800b4d8:	2001      	movs	r0, #1
 800b4da:	602b      	str	r3, [r5, #0]
 800b4dc:	3337      	adds	r3, #55	; 0x37
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	81a3      	strh	r3, [r4, #12]
 800b4e2:	4240      	negs	r0, r0
 800b4e4:	bd70      	pop	{r4, r5, r6, pc}
 800b4e6:	075b      	lsls	r3, r3, #29
 800b4e8:	d513      	bpl.n	800b512 <__swsetup_r+0x62>
 800b4ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	d008      	beq.n	800b502 <__swsetup_r+0x52>
 800b4f0:	0023      	movs	r3, r4
 800b4f2:	3344      	adds	r3, #68	; 0x44
 800b4f4:	4299      	cmp	r1, r3
 800b4f6:	d002      	beq.n	800b4fe <__swsetup_r+0x4e>
 800b4f8:	0028      	movs	r0, r5
 800b4fa:	f7fd fee7 	bl	80092cc <_free_r>
 800b4fe:	2300      	movs	r3, #0
 800b500:	6363      	str	r3, [r4, #52]	; 0x34
 800b502:	2224      	movs	r2, #36	; 0x24
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	4393      	bics	r3, r2
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	2300      	movs	r3, #0
 800b50c:	6063      	str	r3, [r4, #4]
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	2308      	movs	r3, #8
 800b514:	89a2      	ldrh	r2, [r4, #12]
 800b516:	4313      	orrs	r3, r2
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10b      	bne.n	800b538 <__swsetup_r+0x88>
 800b520:	21a0      	movs	r1, #160	; 0xa0
 800b522:	2280      	movs	r2, #128	; 0x80
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	0089      	lsls	r1, r1, #2
 800b528:	0092      	lsls	r2, r2, #2
 800b52a:	400b      	ands	r3, r1
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d003      	beq.n	800b538 <__swsetup_r+0x88>
 800b530:	0021      	movs	r1, r4
 800b532:	0028      	movs	r0, r5
 800b534:	f000 f892 	bl	800b65c <__smakebuf_r>
 800b538:	220c      	movs	r2, #12
 800b53a:	5ea3      	ldrsh	r3, [r4, r2]
 800b53c:	2001      	movs	r0, #1
 800b53e:	001a      	movs	r2, r3
 800b540:	b299      	uxth	r1, r3
 800b542:	4002      	ands	r2, r0
 800b544:	4203      	tst	r3, r0
 800b546:	d00f      	beq.n	800b568 <__swsetup_r+0xb8>
 800b548:	2200      	movs	r2, #0
 800b54a:	60a2      	str	r2, [r4, #8]
 800b54c:	6962      	ldr	r2, [r4, #20]
 800b54e:	4252      	negs	r2, r2
 800b550:	61a2      	str	r2, [r4, #24]
 800b552:	2000      	movs	r0, #0
 800b554:	6922      	ldr	r2, [r4, #16]
 800b556:	4282      	cmp	r2, r0
 800b558:	d1c4      	bne.n	800b4e4 <__swsetup_r+0x34>
 800b55a:	0609      	lsls	r1, r1, #24
 800b55c:	d5c2      	bpl.n	800b4e4 <__swsetup_r+0x34>
 800b55e:	2240      	movs	r2, #64	; 0x40
 800b560:	4313      	orrs	r3, r2
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	3801      	subs	r0, #1
 800b566:	e7bd      	b.n	800b4e4 <__swsetup_r+0x34>
 800b568:	0788      	lsls	r0, r1, #30
 800b56a:	d400      	bmi.n	800b56e <__swsetup_r+0xbe>
 800b56c:	6962      	ldr	r2, [r4, #20]
 800b56e:	60a2      	str	r2, [r4, #8]
 800b570:	e7ef      	b.n	800b552 <__swsetup_r+0xa2>
 800b572:	46c0      	nop			; (mov r8, r8)
 800b574:	200001e0 	.word	0x200001e0

0800b578 <_raise_r>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	0004      	movs	r4, r0
 800b57c:	000d      	movs	r5, r1
 800b57e:	291f      	cmp	r1, #31
 800b580:	d904      	bls.n	800b58c <_raise_r+0x14>
 800b582:	2316      	movs	r3, #22
 800b584:	6003      	str	r3, [r0, #0]
 800b586:	2001      	movs	r0, #1
 800b588:	4240      	negs	r0, r0
 800b58a:	bd70      	pop	{r4, r5, r6, pc}
 800b58c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d004      	beq.n	800b59c <_raise_r+0x24>
 800b592:	008a      	lsls	r2, r1, #2
 800b594:	189b      	adds	r3, r3, r2
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	2a00      	cmp	r2, #0
 800b59a:	d108      	bne.n	800b5ae <_raise_r+0x36>
 800b59c:	0020      	movs	r0, r4
 800b59e:	f000 f831 	bl	800b604 <_getpid_r>
 800b5a2:	002a      	movs	r2, r5
 800b5a4:	0001      	movs	r1, r0
 800b5a6:	0020      	movs	r0, r4
 800b5a8:	f000 f81a 	bl	800b5e0 <_kill_r>
 800b5ac:	e7ed      	b.n	800b58a <_raise_r+0x12>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	2a01      	cmp	r2, #1
 800b5b2:	d0ea      	beq.n	800b58a <_raise_r+0x12>
 800b5b4:	1c51      	adds	r1, r2, #1
 800b5b6:	d103      	bne.n	800b5c0 <_raise_r+0x48>
 800b5b8:	2316      	movs	r3, #22
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	e7e4      	b.n	800b58a <_raise_r+0x12>
 800b5c0:	2400      	movs	r4, #0
 800b5c2:	0028      	movs	r0, r5
 800b5c4:	601c      	str	r4, [r3, #0]
 800b5c6:	4790      	blx	r2
 800b5c8:	0020      	movs	r0, r4
 800b5ca:	e7de      	b.n	800b58a <_raise_r+0x12>

0800b5cc <raise>:
 800b5cc:	b510      	push	{r4, lr}
 800b5ce:	4b03      	ldr	r3, [pc, #12]	; (800b5dc <raise+0x10>)
 800b5d0:	0001      	movs	r1, r0
 800b5d2:	6818      	ldr	r0, [r3, #0]
 800b5d4:	f7ff ffd0 	bl	800b578 <_raise_r>
 800b5d8:	bd10      	pop	{r4, pc}
 800b5da:	46c0      	nop			; (mov r8, r8)
 800b5dc:	200001e0 	.word	0x200001e0

0800b5e0 <_kill_r>:
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	b570      	push	{r4, r5, r6, lr}
 800b5e4:	4d06      	ldr	r5, [pc, #24]	; (800b600 <_kill_r+0x20>)
 800b5e6:	0004      	movs	r4, r0
 800b5e8:	0008      	movs	r0, r1
 800b5ea:	0011      	movs	r1, r2
 800b5ec:	602b      	str	r3, [r5, #0]
 800b5ee:	f7f7 fcf9 	bl	8002fe4 <_kill>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	d103      	bne.n	800b5fe <_kill_r+0x1e>
 800b5f6:	682b      	ldr	r3, [r5, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d000      	beq.n	800b5fe <_kill_r+0x1e>
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}
 800b600:	200006d8 	.word	0x200006d8

0800b604 <_getpid_r>:
 800b604:	b510      	push	{r4, lr}
 800b606:	f7f7 fce7 	bl	8002fd8 <_getpid>
 800b60a:	bd10      	pop	{r4, pc}

0800b60c <__swhatbuf_r>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	000e      	movs	r6, r1
 800b610:	001d      	movs	r5, r3
 800b612:	230e      	movs	r3, #14
 800b614:	5ec9      	ldrsh	r1, [r1, r3]
 800b616:	0014      	movs	r4, r2
 800b618:	b096      	sub	sp, #88	; 0x58
 800b61a:	2900      	cmp	r1, #0
 800b61c:	da0c      	bge.n	800b638 <__swhatbuf_r+0x2c>
 800b61e:	89b2      	ldrh	r2, [r6, #12]
 800b620:	2380      	movs	r3, #128	; 0x80
 800b622:	0011      	movs	r1, r2
 800b624:	4019      	ands	r1, r3
 800b626:	421a      	tst	r2, r3
 800b628:	d013      	beq.n	800b652 <__swhatbuf_r+0x46>
 800b62a:	2100      	movs	r1, #0
 800b62c:	3b40      	subs	r3, #64	; 0x40
 800b62e:	2000      	movs	r0, #0
 800b630:	6029      	str	r1, [r5, #0]
 800b632:	6023      	str	r3, [r4, #0]
 800b634:	b016      	add	sp, #88	; 0x58
 800b636:	bd70      	pop	{r4, r5, r6, pc}
 800b638:	466a      	mov	r2, sp
 800b63a:	f000 f84d 	bl	800b6d8 <_fstat_r>
 800b63e:	2800      	cmp	r0, #0
 800b640:	dbed      	blt.n	800b61e <__swhatbuf_r+0x12>
 800b642:	23f0      	movs	r3, #240	; 0xf0
 800b644:	9901      	ldr	r1, [sp, #4]
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	4019      	ands	r1, r3
 800b64a:	4b03      	ldr	r3, [pc, #12]	; (800b658 <__swhatbuf_r+0x4c>)
 800b64c:	18c9      	adds	r1, r1, r3
 800b64e:	424b      	negs	r3, r1
 800b650:	4159      	adcs	r1, r3
 800b652:	2380      	movs	r3, #128	; 0x80
 800b654:	00db      	lsls	r3, r3, #3
 800b656:	e7ea      	b.n	800b62e <__swhatbuf_r+0x22>
 800b658:	ffffe000 	.word	0xffffe000

0800b65c <__smakebuf_r>:
 800b65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b65e:	2602      	movs	r6, #2
 800b660:	898b      	ldrh	r3, [r1, #12]
 800b662:	0005      	movs	r5, r0
 800b664:	000c      	movs	r4, r1
 800b666:	4233      	tst	r3, r6
 800b668:	d006      	beq.n	800b678 <__smakebuf_r+0x1c>
 800b66a:	0023      	movs	r3, r4
 800b66c:	3347      	adds	r3, #71	; 0x47
 800b66e:	6023      	str	r3, [r4, #0]
 800b670:	6123      	str	r3, [r4, #16]
 800b672:	2301      	movs	r3, #1
 800b674:	6163      	str	r3, [r4, #20]
 800b676:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b678:	466a      	mov	r2, sp
 800b67a:	ab01      	add	r3, sp, #4
 800b67c:	f7ff ffc6 	bl	800b60c <__swhatbuf_r>
 800b680:	9900      	ldr	r1, [sp, #0]
 800b682:	0007      	movs	r7, r0
 800b684:	0028      	movs	r0, r5
 800b686:	f7fa ff1b 	bl	80064c0 <_malloc_r>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d108      	bne.n	800b6a0 <__smakebuf_r+0x44>
 800b68e:	220c      	movs	r2, #12
 800b690:	5ea3      	ldrsh	r3, [r4, r2]
 800b692:	059a      	lsls	r2, r3, #22
 800b694:	d4ef      	bmi.n	800b676 <__smakebuf_r+0x1a>
 800b696:	2203      	movs	r2, #3
 800b698:	4393      	bics	r3, r2
 800b69a:	431e      	orrs	r6, r3
 800b69c:	81a6      	strh	r6, [r4, #12]
 800b69e:	e7e4      	b.n	800b66a <__smakebuf_r+0xe>
 800b6a0:	2380      	movs	r3, #128	; 0x80
 800b6a2:	89a2      	ldrh	r2, [r4, #12]
 800b6a4:	6020      	str	r0, [r4, #0]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	9b00      	ldr	r3, [sp, #0]
 800b6ac:	6120      	str	r0, [r4, #16]
 800b6ae:	6163      	str	r3, [r4, #20]
 800b6b0:	9b01      	ldr	r3, [sp, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00c      	beq.n	800b6d0 <__smakebuf_r+0x74>
 800b6b6:	0028      	movs	r0, r5
 800b6b8:	230e      	movs	r3, #14
 800b6ba:	5ee1      	ldrsh	r1, [r4, r3]
 800b6bc:	f000 f81e 	bl	800b6fc <_isatty_r>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d005      	beq.n	800b6d0 <__smakebuf_r+0x74>
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	89a2      	ldrh	r2, [r4, #12]
 800b6c8:	439a      	bics	r2, r3
 800b6ca:	3b02      	subs	r3, #2
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	81a3      	strh	r3, [r4, #12]
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	433b      	orrs	r3, r7
 800b6d4:	81a3      	strh	r3, [r4, #12]
 800b6d6:	e7ce      	b.n	800b676 <__smakebuf_r+0x1a>

0800b6d8 <_fstat_r>:
 800b6d8:	2300      	movs	r3, #0
 800b6da:	b570      	push	{r4, r5, r6, lr}
 800b6dc:	4d06      	ldr	r5, [pc, #24]	; (800b6f8 <_fstat_r+0x20>)
 800b6de:	0004      	movs	r4, r0
 800b6e0:	0008      	movs	r0, r1
 800b6e2:	0011      	movs	r1, r2
 800b6e4:	602b      	str	r3, [r5, #0]
 800b6e6:	f7f7 fcdc 	bl	80030a2 <_fstat>
 800b6ea:	1c43      	adds	r3, r0, #1
 800b6ec:	d103      	bne.n	800b6f6 <_fstat_r+0x1e>
 800b6ee:	682b      	ldr	r3, [r5, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d000      	beq.n	800b6f6 <_fstat_r+0x1e>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}
 800b6f8:	200006d8 	.word	0x200006d8

0800b6fc <_isatty_r>:
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	b570      	push	{r4, r5, r6, lr}
 800b700:	4d06      	ldr	r5, [pc, #24]	; (800b71c <_isatty_r+0x20>)
 800b702:	0004      	movs	r4, r0
 800b704:	0008      	movs	r0, r1
 800b706:	602b      	str	r3, [r5, #0]
 800b708:	f7f7 fcd9 	bl	80030be <_isatty>
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	d103      	bne.n	800b718 <_isatty_r+0x1c>
 800b710:	682b      	ldr	r3, [r5, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d000      	beq.n	800b718 <_isatty_r+0x1c>
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	bd70      	pop	{r4, r5, r6, pc}
 800b71a:	46c0      	nop			; (mov r8, r8)
 800b71c:	200006d8 	.word	0x200006d8

0800b720 <round>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	004a      	lsls	r2, r1, #1
 800b724:	000d      	movs	r5, r1
 800b726:	4920      	ldr	r1, [pc, #128]	; (800b7a8 <round+0x88>)
 800b728:	0d52      	lsrs	r2, r2, #21
 800b72a:	1851      	adds	r1, r2, r1
 800b72c:	0006      	movs	r6, r0
 800b72e:	2913      	cmp	r1, #19
 800b730:	dc18      	bgt.n	800b764 <round+0x44>
 800b732:	2900      	cmp	r1, #0
 800b734:	da09      	bge.n	800b74a <round+0x2a>
 800b736:	0feb      	lsrs	r3, r5, #31
 800b738:	2200      	movs	r2, #0
 800b73a:	07db      	lsls	r3, r3, #31
 800b73c:	3101      	adds	r1, #1
 800b73e:	d101      	bne.n	800b744 <round+0x24>
 800b740:	491a      	ldr	r1, [pc, #104]	; (800b7ac <round+0x8c>)
 800b742:	430b      	orrs	r3, r1
 800b744:	0019      	movs	r1, r3
 800b746:	0010      	movs	r0, r2
 800b748:	e017      	b.n	800b77a <round+0x5a>
 800b74a:	4c19      	ldr	r4, [pc, #100]	; (800b7b0 <round+0x90>)
 800b74c:	410c      	asrs	r4, r1
 800b74e:	0022      	movs	r2, r4
 800b750:	402a      	ands	r2, r5
 800b752:	4302      	orrs	r2, r0
 800b754:	d013      	beq.n	800b77e <round+0x5e>
 800b756:	2280      	movs	r2, #128	; 0x80
 800b758:	0312      	lsls	r2, r2, #12
 800b75a:	410a      	asrs	r2, r1
 800b75c:	1953      	adds	r3, r2, r5
 800b75e:	43a3      	bics	r3, r4
 800b760:	2200      	movs	r2, #0
 800b762:	e7ef      	b.n	800b744 <round+0x24>
 800b764:	2933      	cmp	r1, #51	; 0x33
 800b766:	dd0d      	ble.n	800b784 <round+0x64>
 800b768:	2380      	movs	r3, #128	; 0x80
 800b76a:	00db      	lsls	r3, r3, #3
 800b76c:	4299      	cmp	r1, r3
 800b76e:	d106      	bne.n	800b77e <round+0x5e>
 800b770:	0002      	movs	r2, r0
 800b772:	002b      	movs	r3, r5
 800b774:	0029      	movs	r1, r5
 800b776:	f7f4 fff1 	bl	800075c <__aeabi_dadd>
 800b77a:	0006      	movs	r6, r0
 800b77c:	000d      	movs	r5, r1
 800b77e:	0030      	movs	r0, r6
 800b780:	0029      	movs	r1, r5
 800b782:	bd70      	pop	{r4, r5, r6, pc}
 800b784:	4c0b      	ldr	r4, [pc, #44]	; (800b7b4 <round+0x94>)
 800b786:	1912      	adds	r2, r2, r4
 800b788:	2401      	movs	r4, #1
 800b78a:	4264      	negs	r4, r4
 800b78c:	40d4      	lsrs	r4, r2
 800b78e:	4220      	tst	r0, r4
 800b790:	d0f5      	beq.n	800b77e <round+0x5e>
 800b792:	2233      	movs	r2, #51	; 0x33
 800b794:	1a51      	subs	r1, r2, r1
 800b796:	3a32      	subs	r2, #50	; 0x32
 800b798:	408a      	lsls	r2, r1
 800b79a:	1812      	adds	r2, r2, r0
 800b79c:	4282      	cmp	r2, r0
 800b79e:	4180      	sbcs	r0, r0
 800b7a0:	4240      	negs	r0, r0
 800b7a2:	182b      	adds	r3, r5, r0
 800b7a4:	43a2      	bics	r2, r4
 800b7a6:	e7cd      	b.n	800b744 <round+0x24>
 800b7a8:	fffffc01 	.word	0xfffffc01
 800b7ac:	3ff00000 	.word	0x3ff00000
 800b7b0:	000fffff 	.word	0x000fffff
 800b7b4:	fffffbed 	.word	0xfffffbed

0800b7b8 <_init>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	46c0      	nop			; (mov r8, r8)
 800b7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7be:	bc08      	pop	{r3}
 800b7c0:	469e      	mov	lr, r3
 800b7c2:	4770      	bx	lr

0800b7c4 <_fini>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	46c0      	nop			; (mov r8, r8)
 800b7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ca:	bc08      	pop	{r3}
 800b7cc:	469e      	mov	lr, r3
 800b7ce:	4770      	bx	lr
