
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e28  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e9c  08012ee8  08012ee8  00022ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d84  08014d84  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  08014d84  08014d84  00024d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d8c  08014d8c  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014d8c  08014d8c  00024d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d94  08014d94  00024d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  08014d98  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  200006e0  08015478  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ec0  08015478  00030ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d7b3  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d4c  00000000  00000000  0004defe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a70  00000000  00000000  00051c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ae  00000000  00000000  000536c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dea2  00000000  00000000  00054b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e434  00000000  00000000  00072a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b16c8  00000000  00000000  00090e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bc8  00000000  00000000  0014250c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014a0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012ecc 	.word	0x08012ecc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	08012ecc 	.word	0x08012ecc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08014834 	.word	0x08014834
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f99b 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f957 	bl	8002864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fb91 	bl	8002cdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fb0d 	bl	8002bd8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fabd 	bl	8002b3c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 fb57 	bl	8002c74 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c6:	f000 fa7b 	bl	8002ac0 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ca:	f000 f997 	bl	80028fc <MX_RTC_Init>
  MX_SPI1_Init();
 80025ce:	f000 fa39 	bl	8002a44 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4b84      	ldr	r3, [pc, #528]	; (80027e4 <main+0x23c>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4b83      	ldr	r3, [pc, #524]	; (80027e4 <main+0x23c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	487f      	ldr	r0, [pc, #508]	; (80027e8 <main+0x240>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f004 fc5e 	bl	8006eac <HAL_UART_Transmit>

  // Is system initialized?
  if ( ! is_system_initialized () )
 80025f0:	f000 fdde 	bl	80031b0 <is_system_initialized>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	4053      	eors	r3, r2
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01b      	beq.n	800263a <main+0x92>
  {
	  // ASTRO INIT
	  my_astro_on () ;
 8002602:	f000 fcdb 	bl	8002fbc <my_astro_on>
	  if ( !my_astro_init () )
 8002606:	f007 fb27 	bl	8009c58 <my_astro_init>
 800260a:	0003      	movs	r3, r0
 800260c:	001a      	movs	r2, r3
 800260e:	2301      	movs	r3, #1
 8002610:	4053      	eors	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <main+0x74>
	  {
		  HAL_NVIC_SystemReset () ;
 8002618:	f001 faf3 	bl	8003c02 <HAL_NVIC_SystemReset>
	  }
	  my_astro_off () ;
 800261c:	f000 fcf6 	bl	800300c <my_astro_off>

	  // ACC INIT
	  my_lis2dw12_ctx.write_reg = my_lis2dw12_platform_write ;
 8002620:	4b72      	ldr	r3, [pc, #456]	; (80027ec <main+0x244>)
 8002622:	4a73      	ldr	r2, [pc, #460]	; (80027f0 <main+0x248>)
 8002624:	601a      	str	r2, [r3, #0]
	  my_lis2dw12_ctx.read_reg = my_lis2dw12_platform_read ;
 8002626:	4b71      	ldr	r3, [pc, #452]	; (80027ec <main+0x244>)
 8002628:	4a72      	ldr	r2, [pc, #456]	; (80027f4 <main+0x24c>)
 800262a:	605a      	str	r2, [r3, #4]
	  my_lis2dw12_ctx.handle = HSPI1 ;
 800262c:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <main+0x244>)
 800262e:	4a72      	ldr	r2, [pc, #456]	; (80027f8 <main+0x250>)
 8002630:	60da      	str	r2, [r3, #12]
	  my_lis2dw12_init ( &my_lis2dw12_ctx ) ;
 8002632:	4b6e      	ldr	r3, [pc, #440]	; (80027ec <main+0x244>)
 8002634:	0018      	movs	r0, r3
 8002636:	f007 fbdc 	bl	8009df2 <my_lis2dw12_init>
  }

  // GNSS INIT AND ACQ
  astro_geo_wr_latitude = 0 ;
 800263a:	4b70      	ldr	r3, [pc, #448]	; (80027fc <main+0x254>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
  astro_geo_wr_longitude = 0 ;
 8002640:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <main+0x258>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
  if ( my_lx6_get_coordinates ( my_lx6_gnss_max_active_time , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 8002646:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <main+0x25c>)
 8002648:	8818      	ldrh	r0, [r3, #0]
 800264a:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <main+0x260>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	496b      	ldr	r1, [pc, #428]	; (8002800 <main+0x258>)
 8002652:	9102      	str	r1, [sp, #8]
 8002654:	4969      	ldr	r1, [pc, #420]	; (80027fc <main+0x254>)
 8002656:	9101      	str	r1, [sp, #4]
 8002658:	496c      	ldr	r1, [pc, #432]	; (800280c <main+0x264>)
 800265a:	9100      	str	r1, [sp, #0]
 800265c:	f007 fc58 	bl	8009f10 <my_lx6_get_coordinates>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d044      	beq.n	80026ee <main+0x146>
  {
	  my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002664:	4b65      	ldr	r3, [pc, #404]	; (80027fc <main+0x254>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b65      	ldr	r3, [pc, #404]	; (8002800 <main+0x258>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0019      	movs	r1, r3
 800266e:	0010      	movs	r0, r2
 8002670:	f007 fbb0 	bl	8009dd4 <my_astro_write_coordinates>
	  my_rtc_get_time_s ( rtc_dt_s ) ;
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <main+0x268>)
 8002676:	0018      	movs	r0, r3
 8002678:	f007 fea0 	bl	800a3bc <my_rtc_get_time_s>

	  // Update ts of last fix
	  my_rtc_get_dt ( rtc_d , rtc_t ) ;
 800267c:	4b65      	ldr	r3, [pc, #404]	; (8002814 <main+0x26c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b65      	ldr	r3, [pc, #404]	; (8002818 <main+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0019      	movs	r1, r3
 8002686:	0010      	movs	r0, r2
 8002688:	f007 fe80 	bl	800a38c <my_rtc_get_dt>
	  last_fix_ts = my_conv_rtc2timestamp ( rtc_d , rtc_t ) ;
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <main+0x26c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b61      	ldr	r3, [pc, #388]	; (8002818 <main+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0019      	movs	r1, r3
 8002696:	0010      	movs	r0, r2
 8002698:	f007 ff2a 	bl	800a4f0 <my_conv_rtc2timestamp>
 800269c:	0002      	movs	r2, r0
 800269e:	4b5f      	ldr	r3, [pc, #380]	; (800281c <main+0x274>)
 80026a0:	601a      	str	r2, [r3, #0]
	  dbg_buff[0] = 0 ;
 80026a2:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <main+0x278>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
	  sprintf ( dbg_buff , "Last fix timestap: %lu" , last_fix_ts ) ;
 80026a8:	4b5c      	ldr	r3, [pc, #368]	; (800281c <main+0x274>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	495d      	ldr	r1, [pc, #372]	; (8002824 <main+0x27c>)
 80026ae:	4b5c      	ldr	r3, [pc, #368]	; (8002820 <main+0x278>)
 80026b0:	0018      	movs	r0, r3
 80026b2:	f009 fdf3 	bl	800c29c <sprintf>
	  send_debug_logs ( dbg_buff ) ;
 80026b6:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <main+0x278>)
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 fbd1 	bl	8002e60 <send_debug_logs>

	  send_debug_logs ( rtc_dt_s ) ;
 80026be:	4b54      	ldr	r3, [pc, #336]	; (8002810 <main+0x268>)
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 fbcd 	bl	8002e60 <send_debug_logs>
	  if ( nmea_fixed_pdop_d < 100.0 )
 80026c6:	4b51      	ldr	r3, [pc, #324]	; (800280c <main+0x264>)
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	4b56      	ldr	r3, [pc, #344]	; (8002828 <main+0x280>)
 80026d0:	f7fd fec0 	bl	8000454 <__aeabi_dcmplt>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d00a      	beq.n	80026ee <main+0x146>
	  {
		  snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 80026d8:	4b4c      	ldr	r3, [pc, #304]	; (800280c <main+0x264>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4953      	ldr	r1, [pc, #332]	; (800282c <main+0x284>)
 80026e0:	4853      	ldr	r0, [pc, #332]	; (8002830 <main+0x288>)
 80026e2:	9200      	str	r2, [sp, #0]
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	000a      	movs	r2, r1
 80026e8:	2105      	movs	r1, #5
 80026ea:	f009 fda3 	bl	800c234 <snprintf>
	  }
  }

  agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 80026ee:	4b51      	ldr	r3, [pc, #324]	; (8002834 <main+0x28c>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	001a      	movs	r2, r3
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <main+0x290>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	18d2      	adds	r2, r2, r3
 80026fa:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <main+0x290>)
 80026fc:	601a      	str	r2, [r3, #0]
  sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds ) ;
 80026fe:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <main+0x28c>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	001c      	movs	r4, r3
 8002704:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <main+0x290>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a49      	ldr	r2, [pc, #292]	; (8002830 <main+0x288>)
 800270a:	494c      	ldr	r1, [pc, #304]	; (800283c <main+0x294>)
 800270c:	484c      	ldr	r0, [pc, #304]	; (8002840 <main+0x298>)
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	0023      	movs	r3, r4
 8002712:	f009 fdc3 	bl	800c29c <sprintf>
  sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 8002716:	4a4a      	ldr	r2, [pc, #296]	; (8002840 <main+0x298>)
 8002718:	494a      	ldr	r1, [pc, #296]	; (8002844 <main+0x29c>)
 800271a:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <main+0x2a0>)
 800271c:	0018      	movs	r0, r3
 800271e:	f009 fdbd 	bl	800c29c <sprintf>
  send_debug_logs ( astro_payload_log ) ;
 8002722:	4b49      	ldr	r3, [pc, #292]	; (8002848 <main+0x2a0>)
 8002724:	0018      	movs	r0, r3
 8002726:	f000 fb9b 	bl	8002e60 <send_debug_logs>
  my_astro_add_payload_2_queue ( payload ) ;
 800272a:	4b45      	ldr	r3, [pc, #276]	; (8002840 <main+0x298>)
 800272c:	0018      	movs	r0, r3
 800272e:	f007 fae9 	bl	8009d04 <my_astro_add_payload_2_queue>

  // ACC INT1 WAKEUP ENABLE
  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 8002732:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <main+0x244>)
 8002734:	0018      	movs	r0, r3
 8002736:	f007 fbb5 	bl	8009ea4 <my_lis2dw12_int1_wu_enable>
  //my_astro_on () ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 800273a:	f000 fc21 	bl	8002f80 <get_systick>
 800273e:	0002      	movs	r2, r0
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <main+0x2a4>)
 8002742:	601a      	str	r2, [r3, #0]
  // MAIN STATE MACHINE
  while (1)
  {
	  if ( is_evt_pin_high() )
 8002744:	f000 fc0a 	bl	8002f5c <is_evt_pin_high>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <main+0x1a8>
	  {
		  my_astro_read_evt_reg () ;
 800274c:	f007 fb02 	bl	8009d54 <my_astro_read_evt_reg>
	  }
	  if ( get_systick () - astro_log_loop_timer >  ASTRO_LOG_TIMER )
 8002750:	f000 fc16 	bl	8002f80 <get_systick>
 8002754:	0002      	movs	r2, r0
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <main+0x2a4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <main+0x2a8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d913      	bls.n	800278a <main+0x1e2>
	  {
		  my_astro_log ();
 8002762:	f007 fb2d 	bl	8009dc0 <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 8002766:	f000 fc0b 	bl	8002f80 <get_systick>
 800276a:	0002      	movs	r2, r0
 800276c:	4b37      	ldr	r3, [pc, #220]	; (800284c <main+0x2a4>)
 800276e:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 8002770:	4b38      	ldr	r3, [pc, #224]	; (8002854 <main+0x2ac>)
 8002772:	881c      	ldrh	r4, [r3, #0]
 8002774:	4b32      	ldr	r3, [pc, #200]	; (8002840 <main+0x298>)
 8002776:	0018      	movs	r0, r3
 8002778:	f7fd fcc4 	bl	8000104 <strlen>
 800277c:	0003      	movs	r3, r0
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <main+0x298>)
 8002782:	0019      	movs	r1, r3
 8002784:	0020      	movs	r0, r4
 8002786:	f005 fe89 	bl	800849c <astronode_send_pld_er>
	  }
	  if ( is_acc_int1_wkup_flag )
 800278a:	4b33      	ldr	r3, [pc, #204]	; (8002858 <main+0x2b0>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0d8      	beq.n	8002744 <main+0x19c>
	  {
		  my_lis2dw12_int1_wu_disable ( &my_lis2dw12_ctx ) ;
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <main+0x244>)
 8002794:	0018      	movs	r0, r3
 8002796:	f007 fba0 	bl	8009eda <my_lis2dw12_int1_wu_disable>
		  my_rtc_get_dt ( rtc_d , rtc_t ) ;
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <main+0x26c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <main+0x270>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0019      	movs	r1, r3
 80027a4:	0010      	movs	r0, r2
 80027a6:	f007 fdf1 	bl	800a38c <my_rtc_get_dt>
		  current_ts = my_conv_rtc2timestamp ( rtc_d , rtc_t ) ;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <main+0x26c>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <main+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0019      	movs	r1, r3
 80027b4:	0010      	movs	r0, r2
 80027b6:	f007 fe9b 	bl	800a4f0 <my_conv_rtc2timestamp>
 80027ba:	0002      	movs	r2, r0
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <main+0x2b4>)
 80027be:	601a      	str	r2, [r3, #0]
		  dbg_buff[0] = 0 ;
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <main+0x278>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
		  sprintf ( dbg_buff , "Seconds elapsed from last fix: %lu" , current_ts - last_fix_ts ) ;
 80027c6:	4b25      	ldr	r3, [pc, #148]	; (800285c <main+0x2b4>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <main+0x274>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	4923      	ldr	r1, [pc, #140]	; (8002860 <main+0x2b8>)
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <main+0x278>)
 80027d4:	0018      	movs	r0, r3
 80027d6:	f009 fd61 	bl	800c29c <sprintf>
		  send_debug_logs ( dbg_buff ) ;
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <main+0x278>)
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 fb3f 	bl	8002e60 <send_debug_logs>
	  if ( is_evt_pin_high() )
 80027e2:	e7af      	b.n	8002744 <main+0x19c>
 80027e4:	20000000 	.word	0x20000000
 80027e8:	2000086c 	.word	0x2000086c
 80027ec:	20000b8c 	.word	0x20000b8c
 80027f0:	080030c1 	.word	0x080030c1
 80027f4:	08003131 	.word	0x08003131
 80027f8:	20000728 	.word	0x20000728
 80027fc:	20000a10 	.word	0x20000a10
 8002800:	20000a14 	.word	0x20000a14
 8002804:	20000010 	.word	0x20000010
 8002808:	20000008 	.word	0x20000008
 800280c:	20000018 	.word	0x20000018
 8002810:	200009f8 	.word	0x200009f8
 8002814:	20000ba0 	.word	0x20000ba0
 8002818:	20000b9c 	.word	0x20000b9c
 800281c:	20000a20 	.word	0x20000a20
 8002820:	20000994 	.word	0x20000994
 8002824:	08012f00 	.word	0x08012f00
 8002828:	40590000 	.word	0x40590000
 800282c:	08012f18 	.word	0x08012f18
 8002830:	20000a18 	.word	0x20000a18
 8002834:	20000a24 	.word	0x20000a24
 8002838:	20000a28 	.word	0x20000a28
 800283c:	08012f20 	.word	0x08012f20
 8002840:	20000a34 	.word	0x20000a34
 8002844:	08012f2c 	.word	0x08012f2c
 8002848:	20000ad4 	.word	0x20000ad4
 800284c:	20000a2c 	.word	0x20000a2c
 8002850:	0000ea60 	.word	0x0000ea60
 8002854:	20000a30 	.word	0x20000a30
 8002858:	20000ba4 	.word	0x20000ba4
 800285c:	20000a0c 	.word	0x20000a0c
 8002860:	08012f44 	.word	0x08012f44

08002864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b093      	sub	sp, #76	; 0x4c
 8002868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286a:	2410      	movs	r4, #16
 800286c:	193b      	adds	r3, r7, r4
 800286e:	0018      	movs	r0, r3
 8002870:	2338      	movs	r3, #56	; 0x38
 8002872:	001a      	movs	r2, r3
 8002874:	2100      	movs	r1, #0
 8002876:	f009 fda7 	bl	800c3c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800287a:	003b      	movs	r3, r7
 800287c:	0018      	movs	r0, r3
 800287e:	2310      	movs	r3, #16
 8002880:	001a      	movs	r2, r3
 8002882:	2100      	movs	r1, #0
 8002884:	f009 fda0 	bl	800c3c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	0018      	movs	r0, r3
 800288e:	f001 fc6b 	bl	8004168 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002892:	193b      	adds	r3, r7, r4
 8002894:	220a      	movs	r2, #10
 8002896:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002898:	193b      	adds	r3, r7, r4
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	0052      	lsls	r2, r2, #1
 800289e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80028a0:	0021      	movs	r1, r4
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028ae:	187b      	adds	r3, r7, r1
 80028b0:	2201      	movs	r2, #1
 80028b2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	0018      	movs	r0, r3
 80028be:	f001 fc9f 	bl	8004200 <HAL_RCC_OscConfig>
 80028c2:	1e03      	subs	r3, r0, #0
 80028c4:	d001      	beq.n	80028ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80028c6:	f000 fce1 	bl	800328c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ca:	003b      	movs	r3, r7
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80028d0:	003b      	movs	r3, r7
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d6:	003b      	movs	r3, r7
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028dc:	003b      	movs	r3, r7
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028e2:	003b      	movs	r3, r7
 80028e4:	2100      	movs	r1, #0
 80028e6:	0018      	movs	r0, r3
 80028e8:	f001 ffa4 	bl	8004834 <HAL_RCC_ClockConfig>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d001      	beq.n	80028f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80028f0:	f000 fccc 	bl	800328c <Error_Handler>
  }
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b013      	add	sp, #76	; 0x4c
 80028fa:	bd90      	pop	{r4, r7, pc}

080028fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b090      	sub	sp, #64	; 0x40
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002902:	232c      	movs	r3, #44	; 0x2c
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	0018      	movs	r0, r3
 8002908:	2314      	movs	r3, #20
 800290a:	001a      	movs	r2, r3
 800290c:	2100      	movs	r1, #0
 800290e:	f009 fd5b 	bl	800c3c8 <memset>
  RTC_DateTypeDef sDate = {0};
 8002912:	2328      	movs	r3, #40	; 0x28
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800291a:	003b      	movs	r3, r7
 800291c:	0018      	movs	r0, r3
 800291e:	2328      	movs	r3, #40	; 0x28
 8002920:	001a      	movs	r2, r3
 8002922:	2100      	movs	r1, #0
 8002924:	f009 fd50 	bl	800c3c8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002928:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <MX_RTC_Init+0x140>)
 800292a:	4a45      	ldr	r2, [pc, #276]	; (8002a40 <MX_RTC_Init+0x144>)
 800292c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800292e:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <MX_RTC_Init+0x140>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <MX_RTC_Init+0x140>)
 8002936:	227f      	movs	r2, #127	; 0x7f
 8002938:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800293a:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <MX_RTC_Init+0x140>)
 800293c:	22ff      	movs	r2, #255	; 0xff
 800293e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002940:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <MX_RTC_Init+0x140>)
 8002942:	2200      	movs	r2, #0
 8002944:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <MX_RTC_Init+0x140>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <MX_RTC_Init+0x140>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <MX_RTC_Init+0x140>)
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	05d2      	lsls	r2, r2, #23
 8002958:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <MX_RTC_Init+0x140>)
 800295c:	2200      	movs	r2, #0
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002960:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <MX_RTC_Init+0x140>)
 8002962:	0018      	movs	r0, r3
 8002964:	f002 fac8 	bl	8004ef8 <HAL_RTC_Init>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800296c:	f000 fc8e 	bl	800328c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	187b      	adds	r3, r7, r1
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002978:	187b      	adds	r3, r7, r1
 800297a:	2200      	movs	r2, #0
 800297c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800297e:	187b      	adds	r3, r7, r1
 8002980:	2200      	movs	r2, #0
 8002982:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002984:	187b      	adds	r3, r7, r1
 8002986:	2200      	movs	r2, #0
 8002988:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002990:	187b      	adds	r3, r7, r1
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002996:	1879      	adds	r1, r7, r1
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <MX_RTC_Init+0x140>)
 800299a:	2201      	movs	r2, #1
 800299c:	0018      	movs	r0, r3
 800299e:	f002 fb4d 	bl	800503c <HAL_RTC_SetTime>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d001      	beq.n	80029aa <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80029a6:	f000 fc71 	bl	800328c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80029aa:	2128      	movs	r1, #40	; 0x28
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	2206      	movs	r2, #6
 80029b0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	2201      	movs	r2, #1
 80029b6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	2201      	movs	r2, #1
 80029bc:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	2200      	movs	r2, #0
 80029c2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80029c4:	1879      	adds	r1, r7, r1
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <MX_RTC_Init+0x140>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	0018      	movs	r0, r3
 80029cc:	f002 fc3a 	bl	8005244 <HAL_RTC_SetDate>
 80029d0:	1e03      	subs	r3, r0, #0
 80029d2:	d001      	beq.n	80029d8 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80029d4:	f000 fc5a 	bl	800328c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80029d8:	003b      	movs	r3, r7
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80029de:	003b      	movs	r3, r7
 80029e0:	2200      	movs	r2, #0
 80029e2:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80029e4:	003b      	movs	r3, r7
 80029e6:	2200      	movs	r2, #0
 80029e8:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80029ea:	003b      	movs	r3, r7
 80029ec:	2200      	movs	r2, #0
 80029ee:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029f0:	003b      	movs	r3, r7
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029f6:	003b      	movs	r3, r7
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80029fc:	003b      	movs	r3, r7
 80029fe:	2200      	movs	r2, #0
 8002a00:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a02:	003b      	movs	r3, r7
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a08:	003b      	movs	r3, r7
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002a0e:	003b      	movs	r3, r7
 8002a10:	2220      	movs	r2, #32
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a16:	003b      	movs	r3, r7
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	0052      	lsls	r2, r2, #1
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a1e:	0039      	movs	r1, r7
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <MX_RTC_Init+0x140>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	0018      	movs	r0, r3
 8002a26:	f002 fced 	bl	8005404 <HAL_RTC_SetAlarm>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002a2e:	f000 fc2d 	bl	800328c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b010      	add	sp, #64	; 0x40
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	200006fc 	.word	0x200006fc
 8002a40:	40002800 	.word	0x40002800

08002a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a4a:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <MX_SPI1_Init+0x78>)
 8002a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a50:	2282      	movs	r2, #130	; 0x82
 8002a52:	0052      	lsls	r2, r2, #1
 8002a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a5e:	22e0      	movs	r2, #224	; 0xe0
 8002a60:	00d2      	lsls	r2, r2, #3
 8002a62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a92:	2207      	movs	r2, #7
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <MX_SPI1_Init+0x74>)
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f002 ff2f 	bl	8005908 <HAL_SPI_Init>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002aae:	f000 fbed 	bl	800328c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000728 	.word	0x20000728
 8002abc:	40013000 	.word	0x40013000

08002ac0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	0018      	movs	r0, r3
 8002aca:	230c      	movs	r3, #12
 8002acc:	001a      	movs	r2, r3
 8002ace:	2100      	movs	r1, #0
 8002ad0:	f009 fc7a 	bl	800c3c8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ad4:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <MX_TIM6_Init+0x6c>)
 8002ad6:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <MX_TIM6_Init+0x70>)
 8002ad8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <MX_TIM6_Init+0x6c>)
 8002adc:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <MX_TIM6_Init+0x74>)
 8002ade:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <MX_TIM6_Init+0x6c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <MX_TIM6_Init+0x6c>)
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <MX_TIM6_Init+0x78>)
 8002aea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <MX_TIM6_Init+0x6c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <MX_TIM6_Init+0x6c>)
 8002af4:	0018      	movs	r0, r3
 8002af6:	f003 fe09 	bl	800670c <HAL_TIM_Base_Init>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002afe:	f000 fbc5 	bl	800328c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b0e:	1d3a      	adds	r2, r7, #4
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <MX_TIM6_Init+0x6c>)
 8002b12:	0011      	movs	r1, r2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f004 f8ad 	bl	8006c74 <HAL_TIMEx_MasterConfigSynchronization>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002b1e:	f000 fbb5 	bl	800328c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	2000078c 	.word	0x2000078c
 8002b30:	40001000 	.word	0x40001000
 8002b34:	00003e7f 	.word	0x00003e7f
 8002b38:	000003e7 	.word	0x000003e7

08002b3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b42:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <MX_USART1_UART_Init+0x98>)
 8002b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b48:	2296      	movs	r2, #150	; 0x96
 8002b4a:	0192      	lsls	r2, r2, #6
 8002b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b54:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b62:	220c      	movs	r2, #12
 8002b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b86:	0018      	movs	r0, r3
 8002b88:	f004 f8fa 	bl	8006d80 <HAL_UART_Init>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b90:	f000 fb7c 	bl	800328c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002b96:	2100      	movs	r1, #0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f004 ffc7 	bl	8007b2c <HAL_UARTEx_SetTxFifoThreshold>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ba2:	f000 fb73 	bl	800328c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	0018      	movs	r0, r3
 8002bac:	f004 fffe 	bl	8007bac <HAL_UARTEx_SetRxFifoThreshold>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002bb4:	f000 fb6a 	bl	800328c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <MX_USART1_UART_Init+0x94>)
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f004 ff7c 	bl	8007ab8 <HAL_UARTEx_DisableFifoMode>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002bc4:	f000 fb62 	bl	800328c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	200007d8 	.word	0x200007d8
 8002bd4:	40013800 	.word	0x40013800

08002bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bdc:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002bde:	4a24      	ldr	r2, [pc, #144]	; (8002c70 <MX_USART2_UART_Init+0x98>)
 8002be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002be4:	22e1      	movs	r2, #225	; 0xe1
 8002be6:	0252      	lsls	r2, r2, #9
 8002be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002bfe:	220c      	movs	r2, #12
 8002c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c0e:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f004 f8ac 	bl	8006d80 <HAL_UART_Init>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c2c:	f000 fb2e 	bl	800328c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002c32:	2100      	movs	r1, #0
 8002c34:	0018      	movs	r0, r3
 8002c36:	f004 ff79 	bl	8007b2c <HAL_UARTEx_SetTxFifoThreshold>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c3e:	f000 fb25 	bl	800328c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002c44:	2100      	movs	r1, #0
 8002c46:	0018      	movs	r0, r3
 8002c48:	f004 ffb0 	bl	8007bac <HAL_UARTEx_SetRxFifoThreshold>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002c50:	f000 fb1c 	bl	800328c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <MX_USART2_UART_Init+0x94>)
 8002c56:	0018      	movs	r0, r3
 8002c58:	f004 ff2e 	bl	8007ab8 <HAL_UARTEx_DisableFifoMode>
 8002c5c:	1e03      	subs	r3, r0, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002c60:	f000 fb14 	bl	800328c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	2000086c 	.word	0x2000086c
 8002c70:	40004400 	.word	0x40004400

08002c74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002c7a:	4a17      	ldr	r2, [pc, #92]	; (8002cd8 <MX_USART3_UART_Init+0x64>)
 8002c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002c80:	2296      	movs	r2, #150	; 0x96
 8002c82:	0192      	lsls	r2, r2, #6
 8002c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <MX_USART3_UART_Init+0x60>)
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f004 f85e 	bl	8006d80 <HAL_UART_Init>
 8002cc4:	1e03      	subs	r3, r0, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002cc8:	f000 fae0 	bl	800328c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	20000900 	.word	0x20000900
 8002cd8:	40004800 	.word	0x40004800

08002cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b08b      	sub	sp, #44	; 0x2c
 8002ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce2:	2414      	movs	r4, #20
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	2314      	movs	r3, #20
 8002cea:	001a      	movs	r2, r3
 8002cec:	2100      	movs	r1, #0
 8002cee:	f009 fb6b 	bl	800c3c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf2:	4b57      	ldr	r3, [pc, #348]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfe:	4b54      	ldr	r3, [pc, #336]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	2204      	movs	r2, #4
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d0a:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0e:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d10:	2120      	movs	r1, #32
 8002d12:	430a      	orrs	r2, r1
 8002d14:	635a      	str	r2, [r3, #52]	; 0x34
 8002d16:	4b4e      	ldr	r3, [pc, #312]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	4b4b      	ldr	r3, [pc, #300]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d26:	4b4a      	ldr	r3, [pc, #296]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d28:	2101      	movs	r1, #1
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2e:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	2201      	movs	r2, #1
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3e:	4b44      	ldr	r3, [pc, #272]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d40:	2102      	movs	r1, #2
 8002d42:	430a      	orrs	r2, r1
 8002d44:	635a      	str	r2, [r3, #52]	; 0x34
 8002d46:	4b42      	ldr	r3, [pc, #264]	; (8002e50 <MX_GPIO_Init+0x174>)
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002d52:	2388      	movs	r3, #136	; 0x88
 8002d54:	015b      	lsls	r3, r3, #5
 8002d56:	483f      	ldr	r0, [pc, #252]	; (8002e54 <MX_GPIO_Init+0x178>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	f001 f9b3 	bl	80040c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8002d60:	493d      	ldr	r1, [pc, #244]	; (8002e58 <MX_GPIO_Init+0x17c>)
 8002d62:	23a0      	movs	r3, #160	; 0xa0
 8002d64:	05db      	lsls	r3, r3, #23
 8002d66:	2200      	movs	r2, #0
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f001 f9ac 	bl	80040c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI1_CS_GPIO_Port, LIS_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	01db      	lsls	r3, r3, #7
 8002d72:	483a      	ldr	r0, [pc, #232]	; (8002e5c <MX_GPIO_Init+0x180>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	0019      	movs	r1, r3
 8002d78:	f001 f9a5 	bl	80040c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L86_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|L86_PWR_SW_Pin;
 8002d7c:	193b      	adds	r3, r7, r4
 8002d7e:	2288      	movs	r2, #136	; 0x88
 8002d80:	0152      	lsls	r2, r2, #5
 8002d82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	2201      	movs	r2, #1
 8002d88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	193b      	adds	r3, r7, r4
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	193b      	adds	r3, r7, r4
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d96:	193b      	adds	r3, r7, r4
 8002d98:	4a2e      	ldr	r2, [pc, #184]	; (8002e54 <MX_GPIO_Init+0x178>)
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	f000 ff41 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin;
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	4a2c      	ldr	r2, [pc, #176]	; (8002e58 <MX_GPIO_Init+0x17c>)
 8002da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	2201      	movs	r2, #1
 8002dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dba:	193a      	adds	r2, r7, r4
 8002dbc:	23a0      	movs	r3, #160	; 0xa0
 8002dbe:	05db      	lsls	r3, r3, #23
 8002dc0:	0011      	movs	r1, r2
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 ff2e 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LIS_SPI1_CS_Pin;
 8002dc8:	0021      	movs	r1, r4
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	01d2      	lsls	r2, r2, #7
 8002dd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd2:	000c      	movs	r4, r1
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIS_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002de6:	193b      	adds	r3, r7, r4
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <MX_GPIO_Init+0x180>)
 8002dea:	0019      	movs	r1, r3
 8002dec:	0010      	movs	r0, r2
 8002dee:	f000 ff19 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8002df2:	193b      	adds	r3, r7, r4
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	0152      	lsls	r2, r2, #5
 8002df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	193b      	adds	r3, r7, r4
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8002e06:	193a      	adds	r2, r7, r4
 8002e08:	23a0      	movs	r3, #160	; 0xa0
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	0011      	movs	r1, r2
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 ff08 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002e14:	0021      	movs	r1, r4
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	22c0      	movs	r2, #192	; 0xc0
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	2288      	movs	r2, #136	; 0x88
 8002e22:	0352      	lsls	r2, r2, #13
 8002e24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <MX_GPIO_Init+0x180>)
 8002e30:	0019      	movs	r1, r3
 8002e32:	0010      	movs	r0, r2
 8002e34:	f000 fef6 	bl	8003c24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2007      	movs	r0, #7
 8002e3e:	f000 febb 	bl	8003bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e42:	2007      	movs	r0, #7
 8002e44:	f000 fecd 	bl	8003be2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b00b      	add	sp, #44	; 0x2c
 8002e4e:	bd90      	pop	{r4, r7, pc}
 8002e50:	40021000 	.word	0x40021000
 8002e54:	50000800 	.word	0x50000800
 8002e58:	00008860 	.word	0x00008860
 8002e5c:	50000400 	.word	0x50000400

08002e60 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f7fd f94a 	bl	8000104 <strlen>
 8002e70:	0003      	movs	r3, r0
 8002e72:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2bfa      	cmp	r3, #250	; 0xfa
 8002e78:	d908      	bls.n	8002e8c <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002e7a:	23fa      	movs	r3, #250	; 0xfa
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	490d      	ldr	r1, [pc, #52]	; (8002eb4 <send_debug_logs+0x54>)
 8002e80:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <send_debug_logs+0x58>)
 8002e82:	222a      	movs	r2, #42	; 0x2a
 8002e84:	f004 f812 	bl	8006eac <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002e88:	23fa      	movs	r3, #250	; 0xfa
 8002e8a:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	23fa      	movs	r3, #250	; 0xfa
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4808      	ldr	r0, [pc, #32]	; (8002eb8 <send_debug_logs+0x58>)
 8002e98:	f004 f808 	bl	8006eac <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002e9c:	23fa      	movs	r3, #250	; 0xfa
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4906      	ldr	r1, [pc, #24]	; (8002ebc <send_debug_logs+0x5c>)
 8002ea2:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <send_debug_logs+0x58>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f004 f801 	bl	8006eac <HAL_UART_Transmit>
}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b004      	add	sp, #16
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	08012f68 	.word	0x08012f68
 8002eb8:	2000086c 	.word	0x2000086c
 8002ebc:	08012f94 	.word	0x08012f94

08002ec0 <reset_astronode>:
void reset_astronode ( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	0119      	lsls	r1, r3, #4
 8002ec8:	23a0      	movs	r3, #160	; 0xa0
 8002eca:	05db      	lsls	r3, r3, #23
 8002ecc:	2201      	movs	r2, #1
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f001 f8f9 	bl	80040c6 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f000 fd8d 	bl	80039f4 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	0119      	lsls	r1, r3, #4
 8002ede:	23a0      	movs	r3, #160	; 0xa0
 8002ee0:	05db      	lsls	r3, r3, #23
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f001 f8ee 	bl	80040c6 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002eea:	20fa      	movs	r0, #250	; 0xfa
 8002eec:	f000 fd82 	bl	80039f4 <HAL_Delay>
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <send_astronode_request+0x34>)
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7ff ffab 	bl	8002e60 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7ff ffa7 	bl	8002e60 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	23fa      	movs	r3, #250	; 0xfa
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4804      	ldr	r0, [pc, #16]	; (8002f30 <send_astronode_request+0x38>)
 8002f1e:	f003 ffc5 	bl	8006eac <HAL_UART_Transmit>
}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b002      	add	sp, #8
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	08012f98 	.word	0x08012f98
 8002f30:	200007d8 	.word	0x200007d8

08002f34 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4806      	ldr	r0, [pc, #24]	; (8002f58 <is_astronode_character_received+0x24>)
 8002f40:	2364      	movs	r3, #100	; 0x64
 8002f42:	2201      	movs	r2, #1
 8002f44:	f004 f84e 	bl	8006fe4 <HAL_UART_Receive>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	425a      	negs	r2, r3
 8002f4c:	4153      	adcs	r3, r2
 8002f4e:	b2db      	uxtb	r3, r3
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200007d8 	.word	0x200007d8

08002f5c <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	23a0      	movs	r3, #160	; 0xa0
 8002f66:	05db      	lsls	r3, r3, #23
 8002f68:	0011      	movs	r1, r2
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f001 f88e 	bl	800408c <HAL_GPIO_ReadPin>
 8002f70:	0003      	movs	r3, r0
 8002f72:	3b01      	subs	r3, #1
 8002f74:	425a      	negs	r2, r3
 8002f76:	4153      	adcs	r3, r2
 8002f78:	b2db      	uxtb	r3, r3
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002f84:	f000 fd2c 	bl	80039e0 <HAL_GetTick>
 8002f88:	0003      	movs	r3, r0
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	000a      	movs	r2, r1
 8002f9a:	1cbb      	adds	r3, r7, #2
 8002f9c:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002f9e:	f7ff ffef 	bl	8002f80 <get_systick>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	1cba      	adds	r2, r7, #2
 8002faa:	8812      	ldrh	r2, [r2, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	419b      	sbcs	r3, r3
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <my_astro_on+0x4c>)
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f003 ff32 	bl	8006e2c <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	0219      	lsls	r1, r3, #8
 8002fcc:	23a0      	movs	r3, #160	; 0xa0
 8002fce:	05db      	lsls	r3, r3, #23
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f001 f877 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	0119      	lsls	r1, r3, #4
 8002fdc:	23a0      	movs	r3, #160	; 0xa0
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f001 f86f 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002fe8:	23a0      	movs	r3, #160	; 0xa0
 8002fea:	05db      	lsls	r3, r3, #23
 8002fec:	2201      	movs	r2, #1
 8002fee:	2140      	movs	r1, #64	; 0x40
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f001 f868 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f000 fcfc 	bl	80039f4 <HAL_Delay>
	MX_USART1_UART_Init () ;
 8002ffc:	f7ff fd9e 	bl	8002b3c <MX_USART1_UART_Init>
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	200007d8 	.word	0x200007d8

0800300c <my_astro_off>:
void my_astro_off ( void )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <my_astro_off+0x48>)
 8003012:	0018      	movs	r0, r3
 8003014:	f003 ff0a 	bl	8006e2c <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	0219      	lsls	r1, r3, #8
 800301c:	23a0      	movs	r3, #160	; 0xa0
 800301e:	05db      	lsls	r3, r3, #23
 8003020:	2200      	movs	r2, #0
 8003022:	0018      	movs	r0, r3
 8003024:	f001 f84f 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	0119      	lsls	r1, r3, #4
 800302c:	23a0      	movs	r3, #160	; 0xa0
 800302e:	05db      	lsls	r3, r3, #23
 8003030:	2200      	movs	r2, #0
 8003032:	0018      	movs	r0, r3
 8003034:	f001 f847 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8003038:	2001      	movs	r0, #1
 800303a:	f000 fcdb 	bl	80039f4 <HAL_Delay>
	HAL_GPIO_WritePin 	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800303e:	23a0      	movs	r3, #160	; 0xa0
 8003040:	05db      	lsls	r3, r3, #23
 8003042:	2200      	movs	r2, #0
 8003044:	2140      	movs	r1, #64	; 0x40
 8003046:	0018      	movs	r0, r3
 8003048:	f001 f83d 	bl	80040c6 <HAL_GPIO_WritePin>
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	200007d8 	.word	0x200007d8

08003058 <my_lx6_on>:
void my_lx6_on ( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4808      	ldr	r0, [pc, #32]	; (8003084 <my_lx6_on+0x2c>)
 8003062:	2201      	movs	r2, #1
 8003064:	0019      	movs	r1, r3
 8003066:	f001 f82e 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	015b      	lsls	r3, r3, #5
 800306e:	4805      	ldr	r0, [pc, #20]	; (8003084 <my_lx6_on+0x2c>)
 8003070:	2201      	movs	r2, #1
 8003072:	0019      	movs	r1, r3
 8003074:	f001 f827 	bl	80040c6 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8003078:	f7ff fdfc 	bl	8002c74 <MX_USART3_UART_Init>
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	50000800 	.word	0x50000800

08003088 <my_lx6_off>:
void my_lx6_off ( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4809      	ldr	r0, [pc, #36]	; (80030b8 <my_lx6_off+0x30>)
 8003092:	2200      	movs	r2, #0
 8003094:	0019      	movs	r1, r3
 8003096:	f001 f816 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	015b      	lsls	r3, r3, #5
 800309e:	4806      	ldr	r0, [pc, #24]	; (80030b8 <my_lx6_off+0x30>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	0019      	movs	r1, r3
 80030a4:	f001 f80f 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <my_lx6_off+0x34>)
 80030aa:	0018      	movs	r0, r3
 80030ac:	f003 febe 	bl	8006e2c <HAL_UART_DeInit>
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	50000800 	.word	0x50000800
 80030bc:	20000900 	.word	0x20000900

080030c0 <my_lis2dw12_platform_write>:
int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	0008      	movs	r0, r1
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	0019      	movs	r1, r3
 80030ce:	240b      	movs	r4, #11
 80030d0:	193b      	adds	r3, r7, r4
 80030d2:	1c02      	adds	r2, r0, #0
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	2508      	movs	r5, #8
 80030d8:	197b      	adds	r3, r7, r5
 80030da:	1c0a      	adds	r2, r1, #0
 80030dc:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	01db      	lsls	r3, r3, #7
 80030e2:	4812      	ldr	r0, [pc, #72]	; (800312c <my_lis2dw12_platform_write+0x6c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	0019      	movs	r1, r3
 80030e8:	f000 ffed 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80030ec:	2014      	movs	r0, #20
 80030ee:	f000 fc81 	bl	80039f4 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 80030f2:	23fa      	movs	r3, #250	; 0xfa
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	1939      	adds	r1, r7, r4
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f002 fcbc 	bl	8005a78 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8003100:	23fa      	movs	r3, #250	; 0xfa
 8003102:	009c      	lsls	r4, r3, #2
 8003104:	197b      	adds	r3, r7, r5
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	0023      	movs	r3, r4
 800310e:	f002 fcb3 	bl	8005a78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	01db      	lsls	r3, r3, #7
 8003116:	4805      	ldr	r0, [pc, #20]	; (800312c <my_lis2dw12_platform_write+0x6c>)
 8003118:	2201      	movs	r2, #1
 800311a:	0019      	movs	r1, r3
 800311c:	f000 ffd3 	bl	80040c6 <HAL_GPIO_WritePin>

	return 0;
 8003120:	2300      	movs	r3, #0
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	50000400 	.word	0x50000400

08003130 <my_lis2dw12_platform_read>:
int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8003130:	b5b0      	push	{r4, r5, r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	0008      	movs	r0, r1
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	0019      	movs	r1, r3
 800313e:	240b      	movs	r4, #11
 8003140:	193b      	adds	r3, r7, r4
 8003142:	1c02      	adds	r2, r0, #0
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	2508      	movs	r5, #8
 8003148:	197b      	adds	r3, r7, r5
 800314a:	1c0a      	adds	r2, r1, #0
 800314c:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 800314e:	193b      	adds	r3, r7, r4
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	4252      	negs	r2, r2
 8003156:	4313      	orrs	r3, r2
 8003158:	b2da      	uxtb	r2, r3
 800315a:	193b      	adds	r3, r7, r4
 800315c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	01db      	lsls	r3, r3, #7
 8003162:	4812      	ldr	r0, [pc, #72]	; (80031ac <my_lis2dw12_platform_read+0x7c>)
 8003164:	2200      	movs	r2, #0
 8003166:	0019      	movs	r1, r3
 8003168:	f000 ffad 	bl	80040c6 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 800316c:	2014      	movs	r0, #20
 800316e:	f000 fc41 	bl	80039f4 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8003172:	23fa      	movs	r3, #250	; 0xfa
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	1939      	adds	r1, r7, r4
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f002 fc7c 	bl	8005a78 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8003180:	23fa      	movs	r3, #250	; 0xfa
 8003182:	009c      	lsls	r4, r3, #2
 8003184:	197b      	adds	r3, r7, r5
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	0023      	movs	r3, r4
 800318e:	f002 fdcb 	bl	8005d28 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	01db      	lsls	r3, r3, #7
 8003196:	4805      	ldr	r0, [pc, #20]	; (80031ac <my_lis2dw12_platform_read+0x7c>)
 8003198:	2201      	movs	r2, #1
 800319a:	0019      	movs	r1, r3
 800319c:	f000 ff93 	bl	80040c6 <HAL_GPIO_WritePin>

	return 0;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b004      	add	sp, #16
 80031a8:	bdb0      	pop	{r4, r5, r7, pc}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	50000400 	.word	0x50000400

080031b0 <is_system_initialized>:
bool is_system_initialized ( void )
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	uint32_t commn_ts = astronode_send_rtc_rr () ;
 80031b6:	f005 fa91 	bl	80086dc <astronode_send_rtc_rr>
 80031ba:	0003      	movs	r3, r0
 80031bc:	607b      	str	r3, [r7, #4]

	yyyy = my_rtc_get_time_s ( rtc_dt_s ) ;
 80031be:	1cbc      	adds	r4, r7, #2
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <is_system_initialized+0x44>)
 80031c2:	0018      	movs	r0, r3
 80031c4:	f007 f8fa 	bl	800a3bc <my_rtc_get_time_s>
 80031c8:	0003      	movs	r3, r0
 80031ca:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <is_system_initialized+0x44>)
 80031ce:	0018      	movs	r0, r3
 80031d0:	f7ff fe46 	bl	8002e60 <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR || commn_ts != 0 )
 80031d4:	1cbb      	adds	r3, r7, #2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <is_system_initialized+0x48>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d802      	bhi.n	80031e4 <is_system_initialized+0x34>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <is_system_initialized+0x38>
	{
		return true ;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <is_system_initialized+0x3a>
	}
	return false ;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b003      	add	sp, #12
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	200009f8 	.word	0x200009f8
 80031f8:	000007e6 	.word	0x000007e6

080031fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10d      	bne.n	800322a <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003218:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800321c:	881a      	ldrh	r2, [r3, #0]
 800321e:	23e1      	movs	r3, #225	; 0xe1
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	429a      	cmp	r2, r3
 8003224:	d901      	bls.n	800322a <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 8003226:	f000 fcec 	bl	8003c02 <HAL_NVIC_SystemReset>
		  }
	}
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b002      	add	sp, #8
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	40001000 	.word	0x40001000
 8003238:	20000a24 	.word	0x20000a24

0800323c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	0002      	movs	r2, r0
 8003244:	1dbb      	adds	r3, r7, #6
 8003246:	801a      	strh	r2, [r3, #0]
	if ( GPIO_Pin == 0x100 )
 8003248:	1dbb      	adds	r3, r7, #6
 800324a:	881a      	ldrh	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	429a      	cmp	r2, r3
 8003252:	d110      	bne.n	8003276 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
	{
		is_acc_int1_wkup_flag = true ;
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
		dbg_buff[0] = 0 ;
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "INT on GPIO_Pin %04x detected!\n" , GPIO_Pin ) ;
 8003260:	1dbb      	adds	r3, r7, #6
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	4908      	ldr	r1, [pc, #32]	; (8003288 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8003268:	0018      	movs	r0, r3
 800326a:	f009 f817 	bl	800c29c <sprintf>
		send_debug_logs ( dbg_buff ) ;
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff fdf5 	bl	8002e60 <send_debug_logs>
	}
}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b002      	add	sp, #8
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	20000ba4 	.word	0x20000ba4
 8003284:	20000994 	.word	0x20000994
 8003288:	0801302c 	.word	0x0801302c

0800328c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003290:	b672      	cpsid	i
}
 8003292:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003294:	e7fe      	b.n	8003294 <Error_Handler+0x8>
	...

08003298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_MspInit+0x44>)
 80032a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_MspInit+0x44>)
 80032a4:	2101      	movs	r1, #1
 80032a6:	430a      	orrs	r2, r1
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_MspInit+0x44>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2201      	movs	r2, #1
 80032b0:	4013      	ands	r3, r2
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_MspInit+0x44>)
 80032b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_MspInit+0x44>)
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0549      	lsls	r1, r1, #21
 80032c0:	430a      	orrs	r2, r1
 80032c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_MspInit+0x44>)
 80032c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	055b      	lsls	r3, r3, #21
 80032cc:	4013      	ands	r3, r2
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b002      	add	sp, #8
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	40021000 	.word	0x40021000

080032e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b091      	sub	sp, #68	; 0x44
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032e8:	240c      	movs	r4, #12
 80032ea:	193b      	adds	r3, r7, r4
 80032ec:	0018      	movs	r0, r3
 80032ee:	2334      	movs	r3, #52	; 0x34
 80032f0:	001a      	movs	r2, r3
 80032f2:	2100      	movs	r1, #0
 80032f4:	f009 f868 	bl	800c3c8 <memset>
  if(hrtc->Instance==RTC)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a15      	ldr	r2, [pc, #84]	; (8003354 <HAL_RTC_MspInit+0x74>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d124      	bne.n	800334c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003302:	193b      	adds	r3, r7, r4
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	0292      	lsls	r2, r2, #10
 8003308:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	0092      	lsls	r2, r2, #2
 8003310:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003312:	193b      	adds	r3, r7, r4
 8003314:	0018      	movs	r0, r3
 8003316:	f001 fc37 	bl	8004b88 <HAL_RCCEx_PeriphCLKConfig>
 800331a:	1e03      	subs	r3, r0, #0
 800331c:	d001      	beq.n	8003322 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800331e:	f7ff ffb5 	bl	800328c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_RTC_MspInit+0x78>)
 8003324:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_RTC_MspInit+0x78>)
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	0209      	lsls	r1, r1, #8
 800332c:	430a      	orrs	r2, r1
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RTC_MspInit+0x78>)
 8003332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RTC_MspInit+0x78>)
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	00c9      	lsls	r1, r1, #3
 800333a:	430a      	orrs	r2, r1
 800333c:	63da      	str	r2, [r3, #60]	; 0x3c
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RTC_MspInit+0x78>)
 8003340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4013      	ands	r3, r2
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b011      	add	sp, #68	; 0x44
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	40002800 	.word	0x40002800
 8003358:	40021000 	.word	0x40021000

0800335c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b08b      	sub	sp, #44	; 0x2c
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	2414      	movs	r4, #20
 8003366:	193b      	adds	r3, r7, r4
 8003368:	0018      	movs	r0, r3
 800336a:	2314      	movs	r3, #20
 800336c:	001a      	movs	r2, r3
 800336e:	2100      	movs	r1, #0
 8003370:	f009 f82a 	bl	800c3c8 <memset>
  if(hspi->Instance==SPI1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_SPI_MspInit+0x8c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d12f      	bne.n	80033de <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_SPI_MspInit+0x90>)
 8003380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003382:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <HAL_SPI_MspInit+0x90>)
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	0149      	lsls	r1, r1, #5
 8003388:	430a      	orrs	r2, r1
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_SPI_MspInit+0x90>)
 800338e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	015b      	lsls	r3, r3, #5
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_SPI_MspInit+0x90>)
 800339c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_SPI_MspInit+0x90>)
 80033a0:	2102      	movs	r1, #2
 80033a2:	430a      	orrs	r2, r1
 80033a4:	635a      	str	r2, [r3, #52]	; 0x34
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <HAL_SPI_MspInit+0x90>)
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	2202      	movs	r2, #2
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LIS_SPI1_SCK_Pin|LIS_SPI1_MISO_Pin|LIS_SPI1_MOSI_Pin;
 80033b2:	0021      	movs	r1, r4
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	2238      	movs	r2, #56	; 0x38
 80033b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	2202      	movs	r2, #2
 80033be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	4a06      	ldr	r2, [pc, #24]	; (80033f0 <HAL_SPI_MspInit+0x94>)
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f000 fc23 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b00b      	add	sp, #44	; 0x2c
 80033e4:	bd90      	pop	{r4, r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	40013000 	.word	0x40013000
 80033ec:	40021000 	.word	0x40021000
 80033f0:	50000400 	.word	0x50000400

080033f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <HAL_TIM_Base_MspInit+0x44>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d113      	bne.n	800342e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_TIM_Base_MspInit+0x48>)
 8003408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_TIM_Base_MspInit+0x48>)
 800340c:	2110      	movs	r1, #16
 800340e:	430a      	orrs	r2, r1
 8003410:	63da      	str	r2, [r3, #60]	; 0x3c
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_TIM_Base_MspInit+0x48>)
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2210      	movs	r2, #16
 8003418:	4013      	ands	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800341e:	2200      	movs	r2, #0
 8003420:	2100      	movs	r1, #0
 8003422:	2011      	movs	r0, #17
 8003424:	f000 fbc8 	bl	8003bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003428:	2011      	movs	r0, #17
 800342a:	f000 fbda 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	b004      	add	sp, #16
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	40001000 	.word	0x40001000
 800343c:	40021000 	.word	0x40021000

08003440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b09b      	sub	sp, #108	; 0x6c
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	2354      	movs	r3, #84	; 0x54
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	0018      	movs	r0, r3
 800344e:	2314      	movs	r3, #20
 8003450:	001a      	movs	r2, r3
 8003452:	2100      	movs	r1, #0
 8003454:	f008 ffb8 	bl	800c3c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003458:	2420      	movs	r4, #32
 800345a:	193b      	adds	r3, r7, r4
 800345c:	0018      	movs	r0, r3
 800345e:	2334      	movs	r3, #52	; 0x34
 8003460:	001a      	movs	r2, r3
 8003462:	2100      	movs	r1, #0
 8003464:	f008 ffb0 	bl	800c3c8 <memset>
  if(huart->Instance==USART1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a61      	ldr	r2, [pc, #388]	; (80035f4 <HAL_UART_MspInit+0x1b4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d140      	bne.n	80034f4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003472:	193b      	adds	r3, r7, r4
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003478:	193b      	adds	r3, r7, r4
 800347a:	2200      	movs	r2, #0
 800347c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800347e:	193b      	adds	r3, r7, r4
 8003480:	0018      	movs	r0, r3
 8003482:	f001 fb81 	bl	8004b88 <HAL_RCCEx_PeriphCLKConfig>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800348a:	f7ff feff 	bl	800328c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800348e:	4b5a      	ldr	r3, [pc, #360]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 8003490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003492:	4b59      	ldr	r3, [pc, #356]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	01c9      	lsls	r1, r1, #7
 8003498:	430a      	orrs	r2, r1
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
 800349c:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 800349e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	01db      	lsls	r3, r3, #7
 80034a4:	4013      	ands	r3, r2
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 80034ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ae:	4b52      	ldr	r3, [pc, #328]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	430a      	orrs	r2, r1
 80034b4:	635a      	str	r2, [r3, #52]	; 0x34
 80034b6:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	2201      	movs	r2, #1
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 80034c2:	2154      	movs	r1, #84	; 0x54
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	22c0      	movs	r2, #192	; 0xc0
 80034c8:	00d2      	lsls	r2, r2, #3
 80034ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	2202      	movs	r2, #2
 80034d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	2200      	movs	r2, #0
 80034dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2201      	movs	r2, #1
 80034e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	187a      	adds	r2, r7, r1
 80034e6:	23a0      	movs	r3, #160	; 0xa0
 80034e8:	05db      	lsls	r3, r3, #23
 80034ea:	0011      	movs	r1, r2
 80034ec:	0018      	movs	r0, r3
 80034ee:	f000 fb99 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034f2:	e07b      	b.n	80035ec <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a40      	ldr	r2, [pc, #256]	; (80035fc <HAL_UART_MspInit+0x1bc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d140      	bne.n	8003580 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034fe:	2120      	movs	r1, #32
 8003500:	187b      	adds	r3, r7, r1
 8003502:	2202      	movs	r2, #2
 8003504:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2200      	movs	r2, #0
 800350a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800350c:	187b      	adds	r3, r7, r1
 800350e:	0018      	movs	r0, r3
 8003510:	f001 fb3a 	bl	8004b88 <HAL_RCCEx_PeriphCLKConfig>
 8003514:	1e03      	subs	r3, r0, #0
 8003516:	d001      	beq.n	800351c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003518:	f7ff feb8 	bl	800328c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 800351e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	0289      	lsls	r1, r1, #10
 8003526:	430a      	orrs	r2, r1
 8003528:	63da      	str	r2, [r3, #60]	; 0x3c
 800352a:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 800352c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	029b      	lsls	r3, r3, #10
 8003532:	4013      	ands	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003538:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 800353a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353c:	4b2e      	ldr	r3, [pc, #184]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 800353e:	2101      	movs	r1, #1
 8003540:	430a      	orrs	r2, r1
 8003542:	635a      	str	r2, [r3, #52]	; 0x34
 8003544:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	2201      	movs	r2, #1
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8003550:	2154      	movs	r1, #84	; 0x54
 8003552:	187b      	adds	r3, r7, r1
 8003554:	220c      	movs	r2, #12
 8003556:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	187b      	adds	r3, r7, r1
 800355a:	2202      	movs	r2, #2
 800355c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355e:	187b      	adds	r3, r7, r1
 8003560:	2201      	movs	r2, #1
 8003562:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003564:	187b      	adds	r3, r7, r1
 8003566:	2200      	movs	r2, #0
 8003568:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2201      	movs	r2, #1
 800356e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003570:	187a      	adds	r2, r7, r1
 8003572:	23a0      	movs	r3, #160	; 0xa0
 8003574:	05db      	lsls	r3, r3, #23
 8003576:	0011      	movs	r1, r2
 8003578:	0018      	movs	r0, r3
 800357a:	f000 fb53 	bl	8003c24 <HAL_GPIO_Init>
}
 800357e:	e035      	b.n	80035ec <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <HAL_UART_MspInit+0x1c0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d130      	bne.n	80035ec <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 800358c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	02c9      	lsls	r1, r1, #11
 8003594:	430a      	orrs	r2, r1
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	02db      	lsls	r3, r3, #11
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a6:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 80035a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 80035ac:	2104      	movs	r1, #4
 80035ae:	430a      	orrs	r2, r1
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_UART_MspInit+0x1b8>)
 80035b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b6:	2204      	movs	r2, #4
 80035b8:	4013      	ands	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 80035be:	2154      	movs	r1, #84	; 0x54
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	22c0      	movs	r2, #192	; 0xc0
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	187b      	adds	r3, r7, r1
 80035ca:	2202      	movs	r2, #2
 80035cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_UART_MspInit+0x1c4>)
 80035e4:	0019      	movs	r1, r3
 80035e6:	0010      	movs	r0, r2
 80035e8:	f000 fb1c 	bl	8003c24 <HAL_GPIO_Init>
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b01b      	add	sp, #108	; 0x6c
 80035f2:	bd90      	pop	{r4, r7, pc}
 80035f4:	40013800 	.word	0x40013800
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40004400 	.word	0x40004400
 8003600:	40004800 	.word	0x40004800
 8003604:	50000800 	.word	0x50000800

08003608 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <HAL_UART_MspDeInit+0x80>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10e      	bne.n	8003638 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_UART_MspDeInit+0x84>)
 800361c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_UART_MspDeInit+0x84>)
 8003620:	491b      	ldr	r1, [pc, #108]	; (8003690 <HAL_UART_MspDeInit+0x88>)
 8003622:	400a      	ands	r2, r1
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 8003626:	23c0      	movs	r3, #192	; 0xc0
 8003628:	00da      	lsls	r2, r3, #3
 800362a:	23a0      	movs	r3, #160	; 0xa0
 800362c:	05db      	lsls	r3, r3, #23
 800362e:	0011      	movs	r1, r2
 8003630:	0018      	movs	r0, r3
 8003632:	f000 fc5b 	bl	8003eec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003636:	e023      	b.n	8003680 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_UART_MspDeInit+0x8c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10c      	bne.n	800365c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_UART_MspDeInit+0x84>)
 8003644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <HAL_UART_MspDeInit+0x84>)
 8003648:	4913      	ldr	r1, [pc, #76]	; (8003698 <HAL_UART_MspDeInit+0x90>)
 800364a:	400a      	ands	r2, r1
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 800364e:	23a0      	movs	r3, #160	; 0xa0
 8003650:	05db      	lsls	r3, r3, #23
 8003652:	210c      	movs	r1, #12
 8003654:	0018      	movs	r0, r3
 8003656:	f000 fc49 	bl	8003eec <HAL_GPIO_DeInit>
}
 800365a:	e011      	b.n	8003680 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0e      	ldr	r2, [pc, #56]	; (800369c <HAL_UART_MspDeInit+0x94>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10c      	bne.n	8003680 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_UART_MspDeInit+0x84>)
 8003668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_UART_MspDeInit+0x84>)
 800366c:	490c      	ldr	r1, [pc, #48]	; (80036a0 <HAL_UART_MspDeInit+0x98>)
 800366e:	400a      	ands	r2, r1
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 8003672:	23c0      	movs	r3, #192	; 0xc0
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_UART_MspDeInit+0x9c>)
 8003678:	0019      	movs	r1, r3
 800367a:	0010      	movs	r0, r2
 800367c:	f000 fc36 	bl	8003eec <HAL_GPIO_DeInit>
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40013800 	.word	0x40013800
 800368c:	40021000 	.word	0x40021000
 8003690:	ffffbfff 	.word	0xffffbfff
 8003694:	40004400 	.word	0x40004400
 8003698:	fffdffff 	.word	0xfffdffff
 800369c:	40004800 	.word	0x40004800
 80036a0:	fffbffff 	.word	0xfffbffff
 80036a4:	50000800 	.word	0x50000800

080036a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036ac:	e7fe      	b.n	80036ac <NMI_Handler+0x4>

080036ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b2:	e7fe      	b.n	80036b2 <HardFault_Handler+0x4>

080036b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036cc:	f000 f976 	bl	80039bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS_INT1_EXTI8_Pin);
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 fd0e 	bl	8004100 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIS_INT2_EXTI9_Pin);
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	0018      	movs	r0, r3
 80036ea:	f000 fd09 	bl	8004100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80036fa:	0018      	movs	r0, r3
 80036fc:	f003 f8e8 	bl	80068d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	2000078c 	.word	0x2000078c

0800370c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  return 1;
 8003710:	2301      	movs	r3, #1
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_kill>:

int _kill(int pid, int sig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003722:	f008 fefd 	bl	800c520 <__errno>
 8003726:	0003      	movs	r3, r0
 8003728:	2216      	movs	r2, #22
 800372a:	601a      	str	r2, [r3, #0]
  return -1;
 800372c:	2301      	movs	r3, #1
 800372e:	425b      	negs	r3, r3
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}

08003738 <_exit>:

void _exit (int status)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003740:	2301      	movs	r3, #1
 8003742:	425a      	negs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0011      	movs	r1, r2
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff ffe5 	bl	8003718 <_kill>
  while (1) {}    /* Make sure we hang here */
 800374e:	e7fe      	b.n	800374e <_exit+0x16>

08003750 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	e00a      	b.n	8003778 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003762:	e000      	b.n	8003766 <_read+0x16>
 8003764:	bf00      	nop
 8003766:	0001      	movs	r1, r0
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	60ba      	str	r2, [r7, #8]
 800376e:	b2ca      	uxtb	r2, r1
 8003770:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	3301      	adds	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	dbf0      	blt.n	8003762 <_read+0x12>
  }

  return len;
 8003780:	687b      	ldr	r3, [r7, #4]
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b006      	add	sp, #24
 8003788:	bd80      	pop	{r7, pc}

0800378a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e009      	b.n	80037b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	60ba      	str	r2, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	0018      	movs	r0, r3
 80037a6:	e000      	b.n	80037aa <_write+0x20>
 80037a8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3301      	adds	r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	dbf1      	blt.n	800379c <_write+0x12>
  }
  return len;
 80037b8:	687b      	ldr	r3, [r7, #4]
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b006      	add	sp, #24
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <_close>:

int _close(int file)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	425b      	negs	r3, r3
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b002      	add	sp, #8
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	0192      	lsls	r2, r2, #6
 80037e6:	605a      	str	r2, [r3, #4]
  return 0;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b002      	add	sp, #8
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <_isatty>:

int _isatty(int file)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037fa:	2301      	movs	r3, #1
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}

08003804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003810:	2300      	movs	r3, #0
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <_sbrk+0x5c>)
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <_sbrk+0x60>)
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <_sbrk+0x64>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <_sbrk+0x64>)
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <_sbrk+0x68>)
 800383c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <_sbrk+0x64>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	18d3      	adds	r3, r2, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	429a      	cmp	r2, r3
 800384a:	d207      	bcs.n	800385c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800384c:	f008 fe68 	bl	800c520 <__errno>
 8003850:	0003      	movs	r3, r0
 8003852:	220c      	movs	r2, #12
 8003854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003856:	2301      	movs	r3, #1
 8003858:	425b      	negs	r3, r3
 800385a:	e009      	b.n	8003870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <_sbrk+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <_sbrk+0x64>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	18d2      	adds	r2, r2, r3
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <_sbrk+0x64>)
 800386c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b006      	add	sp, #24
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20009000 	.word	0x20009000
 800387c:	00000400 	.word	0x00000400
 8003880:	20000ba8 	.word	0x20000ba8
 8003884:	20000ec0 	.word	0x20000ec0

08003888 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003894:	480d      	ldr	r0, [pc, #52]	; (80038cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003896:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003898:	f7ff fff6 	bl	8003888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800389e:	490d      	ldr	r1, [pc, #52]	; (80038d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038a0:	4a0d      	ldr	r2, [pc, #52]	; (80038d8 <LoopForever+0xe>)
  movs r3, #0
 80038a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038a4:	e002      	b.n	80038ac <LoopCopyDataInit>

080038a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038aa:	3304      	adds	r3, #4

080038ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b0:	d3f9      	bcc.n	80038a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80038b4:	4c0a      	ldr	r4, [pc, #40]	; (80038e0 <LoopForever+0x16>)
  movs r3, #0
 80038b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038b8:	e001      	b.n	80038be <LoopFillZerobss>

080038ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038bc:	3204      	adds	r2, #4

080038be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c0:	d3fb      	bcc.n	80038ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038c2:	f008 fe33 	bl	800c52c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80038c6:	f7fe fe6f 	bl	80025a8 <main>

080038ca <LoopForever>:

LoopForever:
  b LoopForever
 80038ca:	e7fe      	b.n	80038ca <LoopForever>
  ldr   r0, =_estack
 80038cc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80038d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d4:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 80038d8:	08014d98 	.word	0x08014d98
  ldr r2, =_sbss
 80038dc:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 80038e0:	20000ec0 	.word	0x20000ec0

080038e4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038e4:	e7fe      	b.n	80038e4 <ADC1_COMP_IRQHandler>
	...

080038e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038ee:	1dfb      	adds	r3, r7, #7
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_Init+0x3c>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_Init+0x3c>)
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	0049      	lsls	r1, r1, #1
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003902:	2000      	movs	r0, #0
 8003904:	f000 f810 	bl	8003928 <HAL_InitTick>
 8003908:	1e03      	subs	r3, r0, #0
 800390a:	d003      	beq.n	8003914 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800390c:	1dfb      	adds	r3, r7, #7
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	e001      	b.n	8003918 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003914:	f7ff fcc0 	bl	8003298 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003918:	1dfb      	adds	r3, r7, #7
 800391a:	781b      	ldrb	r3, [r3, #0]
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40022000 	.word	0x40022000

08003928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003930:	230f      	movs	r3, #15
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_InitTick+0x88>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02b      	beq.n	8003998 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003940:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <HAL_InitTick+0x8c>)
 8003942:	681c      	ldr	r4, [r3, #0]
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <HAL_InitTick+0x88>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	0019      	movs	r1, r3
 800394a:	23fa      	movs	r3, #250	; 0xfa
 800394c:	0098      	lsls	r0, r3, #2
 800394e:	f7fc fbf5 	bl	800013c <__udivsi3>
 8003952:	0003      	movs	r3, r0
 8003954:	0019      	movs	r1, r3
 8003956:	0020      	movs	r0, r4
 8003958:	f7fc fbf0 	bl	800013c <__udivsi3>
 800395c:	0003      	movs	r3, r0
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f953 	bl	8003c0a <HAL_SYSTICK_Config>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d112      	bne.n	800398e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d80a      	bhi.n	8003984 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	2301      	movs	r3, #1
 8003972:	425b      	negs	r3, r3
 8003974:	2200      	movs	r2, #0
 8003976:	0018      	movs	r0, r3
 8003978:	f000 f91e 	bl	8003bb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <HAL_InitTick+0x90>)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e00d      	b.n	80039a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003984:	230f      	movs	r3, #15
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e008      	b.n	80039a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800398e:	230f      	movs	r3, #15
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e003      	b.n	80039a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003998:	230f      	movs	r3, #15
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80039a0:	230f      	movs	r3, #15
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	781b      	ldrb	r3, [r3, #0]
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b005      	add	sp, #20
 80039ac:	bd90      	pop	{r4, r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	20000028 	.word	0x20000028
 80039b4:	20000020 	.word	0x20000020
 80039b8:	20000024 	.word	0x20000024

080039bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_IncTick+0x1c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	001a      	movs	r2, r3
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_IncTick+0x20>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	18d2      	adds	r2, r2, r3
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_IncTick+0x20>)
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	20000028 	.word	0x20000028
 80039dc:	20000bac 	.word	0x20000bac

080039e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  return uwTick;
 80039e4:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <HAL_GetTick+0x10>)
 80039e6:	681b      	ldr	r3, [r3, #0]
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	20000bac 	.word	0x20000bac

080039f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff fff0 	bl	80039e0 <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	d005      	beq.n	8003a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_Delay+0x44>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	001a      	movs	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	189b      	adds	r3, r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	f7ff ffe0 	bl	80039e0 <HAL_GetTick>
 8003a20:	0002      	movs	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d8f7      	bhi.n	8003a1c <HAL_Delay+0x28>
  {
  }
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	20000028 	.word	0x20000028

08003a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	0002      	movs	r2, r0
 8003a44:	1dfb      	adds	r3, r7, #7
 8003a46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a48:	1dfb      	adds	r3, r7, #7
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4e:	d809      	bhi.n	8003a64 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a50:	1dfb      	adds	r3, r7, #7
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	001a      	movs	r2, r3
 8003a56:	231f      	movs	r3, #31
 8003a58:	401a      	ands	r2, r3
 8003a5a:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <__NVIC_EnableIRQ+0x30>)
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4091      	lsls	r1, r2
 8003a60:	000a      	movs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	0002      	movs	r2, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	1dfb      	adds	r3, r7, #7
 8003a7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b7f      	cmp	r3, #127	; 0x7f
 8003a84:	d828      	bhi.n	8003ad8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a86:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <__NVIC_SetPriority+0xd4>)
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	33c0      	adds	r3, #192	; 0xc0
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	589b      	ldr	r3, [r3, r2]
 8003a96:	1dfa      	adds	r2, r7, #7
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	0011      	movs	r1, r2
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	00d2      	lsls	r2, r2, #3
 8003aa2:	21ff      	movs	r1, #255	; 0xff
 8003aa4:	4091      	lsls	r1, r2
 8003aa6:	000a      	movs	r2, r1
 8003aa8:	43d2      	mvns	r2, r2
 8003aaa:	401a      	ands	r2, r3
 8003aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	019b      	lsls	r3, r3, #6
 8003ab2:	22ff      	movs	r2, #255	; 0xff
 8003ab4:	401a      	ands	r2, r3
 8003ab6:	1dfb      	adds	r3, r7, #7
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	0018      	movs	r0, r3
 8003abc:	2303      	movs	r3, #3
 8003abe:	4003      	ands	r3, r0
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ac4:	481f      	ldr	r0, [pc, #124]	; (8003b44 <__NVIC_SetPriority+0xd4>)
 8003ac6:	1dfb      	adds	r3, r7, #7
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	33c0      	adds	r3, #192	; 0xc0
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ad6:	e031      	b.n	8003b3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <__NVIC_SetPriority+0xd8>)
 8003ada:	1dfb      	adds	r3, r7, #7
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	0019      	movs	r1, r3
 8003ae0:	230f      	movs	r3, #15
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	3b08      	subs	r3, #8
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	3306      	adds	r3, #6
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	18d3      	adds	r3, r2, r3
 8003aee:	3304      	adds	r3, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	1dfa      	adds	r2, r7, #7
 8003af4:	7812      	ldrb	r2, [r2, #0]
 8003af6:	0011      	movs	r1, r2
 8003af8:	2203      	movs	r2, #3
 8003afa:	400a      	ands	r2, r1
 8003afc:	00d2      	lsls	r2, r2, #3
 8003afe:	21ff      	movs	r1, #255	; 0xff
 8003b00:	4091      	lsls	r1, r2
 8003b02:	000a      	movs	r2, r1
 8003b04:	43d2      	mvns	r2, r2
 8003b06:	401a      	ands	r2, r3
 8003b08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	22ff      	movs	r2, #255	; 0xff
 8003b10:	401a      	ands	r2, r3
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	0018      	movs	r0, r3
 8003b18:	2303      	movs	r3, #3
 8003b1a:	4003      	ands	r3, r0
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b20:	4809      	ldr	r0, [pc, #36]	; (8003b48 <__NVIC_SetPriority+0xd8>)
 8003b22:	1dfb      	adds	r3, r7, #7
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	001c      	movs	r4, r3
 8003b28:	230f      	movs	r3, #15
 8003b2a:	4023      	ands	r3, r4
 8003b2c:	3b08      	subs	r3, #8
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	430a      	orrs	r2, r1
 8003b32:	3306      	adds	r3, #6
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	18c3      	adds	r3, r0, r3
 8003b38:	3304      	adds	r3, #4
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b003      	add	sp, #12
 8003b42:	bd90      	pop	{r4, r7, pc}
 8003b44:	e000e100 	.word	0xe000e100
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b50:	f3bf 8f4f 	dsb	sy
}
 8003b54:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <__NVIC_SystemReset+0x1c>)
 8003b58:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <__NVIC_SystemReset+0x20>)
 8003b5a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b5c:	f3bf 8f4f 	dsb	sy
}
 8003b60:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	e7fd      	b.n	8003b62 <__NVIC_SystemReset+0x16>
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	e000ed00 	.word	0xe000ed00
 8003b6c:	05fa0004 	.word	0x05fa0004

08003b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1e5a      	subs	r2, r3, #1
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	045b      	lsls	r3, r3, #17
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d301      	bcc.n	8003b88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b84:	2301      	movs	r3, #1
 8003b86:	e010      	b.n	8003baa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <SysTick_Config+0x44>)
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b90:	2301      	movs	r3, #1
 8003b92:	425b      	negs	r3, r3
 8003b94:	2103      	movs	r1, #3
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7ff ff6a 	bl	8003a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <SysTick_Config+0x44>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <SysTick_Config+0x44>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	210f      	movs	r1, #15
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	1c02      	adds	r2, r0, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b25b      	sxtb	r3, r3
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7ff ff4b 	bl	8003a70 <__NVIC_SetPriority>
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b004      	add	sp, #16
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	0002      	movs	r2, r0
 8003bea:	1dfb      	adds	r3, r7, #7
 8003bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff ff21 	bl	8003a3c <__NVIC_EnableIRQ>
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003c06:	f7ff ffa1 	bl	8003b4c <__NVIC_SystemReset>

08003c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f7ff ffab 	bl	8003b70 <SysTick_Config>
 8003c1a:	0003      	movs	r3, r0
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b002      	add	sp, #8
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c32:	e147      	b.n	8003ec4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4091      	lsls	r1, r2
 8003c3e:	000a      	movs	r2, r1
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d100      	bne.n	8003c4c <HAL_GPIO_Init+0x28>
 8003c4a:	e138      	b.n	8003ebe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2203      	movs	r2, #3
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d005      	beq.n	8003c64 <HAL_GPIO_Init+0x40>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d130      	bne.n	8003cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	409a      	lsls	r2, r3
 8003c72:	0013      	movs	r3, r2
 8003c74:	43da      	mvns	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	409a      	lsls	r2, r3
 8003c86:	0013      	movs	r3, r2
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	0013      	movs	r3, r2
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	0013      	movs	r3, r2
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2203      	movs	r2, #3
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d017      	beq.n	8003d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	2203      	movs	r2, #3
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	0013      	movs	r3, r2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2203      	movs	r2, #3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d123      	bne.n	8003d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	08da      	lsrs	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3208      	adds	r2, #8
 8003d16:	0092      	lsls	r2, r2, #2
 8003d18:	58d3      	ldr	r3, [r2, r3]
 8003d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2207      	movs	r2, #7
 8003d20:	4013      	ands	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	220f      	movs	r2, #15
 8003d26:	409a      	lsls	r2, r3
 8003d28:	0013      	movs	r3, r2
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2107      	movs	r1, #7
 8003d3a:	400b      	ands	r3, r1
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	0013      	movs	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	08da      	lsrs	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3208      	adds	r2, #8
 8003d50:	0092      	lsls	r2, r2, #2
 8003d52:	6939      	ldr	r1, [r7, #16]
 8003d54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2203      	movs	r2, #3
 8003d62:	409a      	lsls	r2, r3
 8003d64:	0013      	movs	r3, r2
 8003d66:	43da      	mvns	r2, r3
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2203      	movs	r2, #3
 8003d74:	401a      	ands	r2, r3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	0013      	movs	r3, r2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	23c0      	movs	r3, #192	; 0xc0
 8003d90:	029b      	lsls	r3, r3, #10
 8003d92:	4013      	ands	r3, r2
 8003d94:	d100      	bne.n	8003d98 <HAL_GPIO_Init+0x174>
 8003d96:	e092      	b.n	8003ebe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d98:	4a50      	ldr	r2, [pc, #320]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	3318      	adds	r3, #24
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	589b      	ldr	r3, [r3, r2]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2203      	movs	r2, #3
 8003daa:	4013      	ands	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	220f      	movs	r2, #15
 8003db0:	409a      	lsls	r2, r3
 8003db2:	0013      	movs	r3, r2
 8003db4:	43da      	mvns	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	23a0      	movs	r3, #160	; 0xa0
 8003dc0:	05db      	lsls	r3, r3, #23
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d013      	beq.n	8003dee <HAL_GPIO_Init+0x1ca>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a45      	ldr	r2, [pc, #276]	; (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00d      	beq.n	8003dea <HAL_GPIO_Init+0x1c6>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a44      	ldr	r2, [pc, #272]	; (8003ee4 <HAL_GPIO_Init+0x2c0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <HAL_GPIO_Init+0x1c2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a43      	ldr	r2, [pc, #268]	; (8003ee8 <HAL_GPIO_Init+0x2c4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_GPIO_Init+0x1be>
 8003dde:	2303      	movs	r3, #3
 8003de0:	e006      	b.n	8003df0 <HAL_GPIO_Init+0x1cc>
 8003de2:	2305      	movs	r3, #5
 8003de4:	e004      	b.n	8003df0 <HAL_GPIO_Init+0x1cc>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e002      	b.n	8003df0 <HAL_GPIO_Init+0x1cc>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_GPIO_Init+0x1cc>
 8003dee:	2300      	movs	r3, #0
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	2103      	movs	r1, #3
 8003df4:	400a      	ands	r2, r1
 8003df6:	00d2      	lsls	r2, r2, #3
 8003df8:	4093      	lsls	r3, r2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003e00:	4936      	ldr	r1, [pc, #216]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	3318      	adds	r3, #24
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	43da      	mvns	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	035b      	lsls	r3, r3, #13
 8003e26:	4013      	ands	r3, r2
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e32:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003e38:	4b28      	ldr	r3, [pc, #160]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43da      	mvns	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	039b      	lsls	r3, r3, #14
 8003e50:	4013      	ands	r3, r2
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e62:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003e64:	2384      	movs	r3, #132	; 0x84
 8003e66:	58d3      	ldr	r3, [r2, r3]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	029b      	lsls	r3, r3, #10
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e88:	4914      	ldr	r1, [pc, #80]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003e8a:	2284      	movs	r2, #132	; 0x84
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e90:	4a12      	ldr	r2, [pc, #72]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	58d3      	ldr	r3, [r2, r3]
 8003e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	025b      	lsls	r3, r3, #9
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eb6:	4909      	ldr	r1, [pc, #36]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	40da      	lsrs	r2, r3
 8003ecc:	1e13      	subs	r3, r2, #0
 8003ece:	d000      	beq.n	8003ed2 <HAL_GPIO_Init+0x2ae>
 8003ed0:	e6b0      	b.n	8003c34 <HAL_GPIO_Init+0x10>
  }
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b006      	add	sp, #24
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021800 	.word	0x40021800
 8003ee0:	50000400 	.word	0x50000400
 8003ee4:	50000800 	.word	0x50000800
 8003ee8:	50000c00 	.word	0x50000c00

08003eec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003efa:	e0b4      	b.n	8004066 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003efc:	2201      	movs	r2, #1
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	409a      	lsls	r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d100      	bne.n	8003f10 <HAL_GPIO_DeInit+0x24>
 8003f0e:	e0a7      	b.n	8004060 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003f10:	4a5a      	ldr	r2, [pc, #360]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	3318      	adds	r3, #24
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	589b      	ldr	r3, [r3, r2]
 8003f1c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2203      	movs	r2, #3
 8003f22:	4013      	ands	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	220f      	movs	r2, #15
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	23a0      	movs	r3, #160	; 0xa0
 8003f34:	05db      	lsls	r3, r3, #23
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d013      	beq.n	8003f62 <HAL_GPIO_DeInit+0x76>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a50      	ldr	r2, [pc, #320]	; (8004080 <HAL_GPIO_DeInit+0x194>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00d      	beq.n	8003f5e <HAL_GPIO_DeInit+0x72>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a4f      	ldr	r2, [pc, #316]	; (8004084 <HAL_GPIO_DeInit+0x198>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <HAL_GPIO_DeInit+0x6e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a4e      	ldr	r2, [pc, #312]	; (8004088 <HAL_GPIO_DeInit+0x19c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_GPIO_DeInit+0x6a>
 8003f52:	2303      	movs	r3, #3
 8003f54:	e006      	b.n	8003f64 <HAL_GPIO_DeInit+0x78>
 8003f56:	2305      	movs	r3, #5
 8003f58:	e004      	b.n	8003f64 <HAL_GPIO_DeInit+0x78>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e002      	b.n	8003f64 <HAL_GPIO_DeInit+0x78>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_GPIO_DeInit+0x78>
 8003f62:	2300      	movs	r3, #0
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	2103      	movs	r1, #3
 8003f68:	400a      	ands	r2, r1
 8003f6a:	00d2      	lsls	r2, r2, #3
 8003f6c:	4093      	lsls	r3, r2
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d136      	bne.n	8003fe2 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f74:	4a41      	ldr	r2, [pc, #260]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	58d3      	ldr	r3, [r2, r3]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	43d2      	mvns	r2, r2
 8003f7e:	493f      	ldr	r1, [pc, #252]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	2280      	movs	r2, #128	; 0x80
 8003f84:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003f86:	4a3d      	ldr	r2, [pc, #244]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003f88:	2384      	movs	r3, #132	; 0x84
 8003f8a:	58d3      	ldr	r3, [r2, r3]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	43d2      	mvns	r2, r2
 8003f90:	493a      	ldr	r1, [pc, #232]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	2284      	movs	r2, #132	; 0x84
 8003f96:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f98:	4b38      	ldr	r3, [pc, #224]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	43d9      	mvns	r1, r3
 8003fa0:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003fa6:	4b35      	ldr	r3, [pc, #212]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	43d9      	mvns	r1, r3
 8003fae:	4b33      	ldr	r3, [pc, #204]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	220f      	movs	r2, #15
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	0013      	movs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	3318      	adds	r3, #24
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	589a      	ldr	r2, [r3, r2]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	43d9      	mvns	r1, r3
 8003fd4:	4829      	ldr	r0, [pc, #164]	; (800407c <HAL_GPIO_DeInit+0x190>)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	400a      	ands	r2, r1
 8003fdc:	3318      	adds	r3, #24
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	2103      	movs	r1, #3
 8003fec:	4099      	lsls	r1, r3
 8003fee:	000b      	movs	r3, r1
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	08da      	lsrs	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3208      	adds	r2, #8
 8003ffe:	0092      	lsls	r2, r2, #2
 8004000:	58d3      	ldr	r3, [r2, r3]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	2107      	movs	r1, #7
 8004006:	400a      	ands	r2, r1
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	210f      	movs	r1, #15
 800400c:	4091      	lsls	r1, r2
 800400e:	000a      	movs	r2, r1
 8004010:	43d1      	mvns	r1, r2
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	08d2      	lsrs	r2, r2, #3
 8004016:	4019      	ands	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3208      	adds	r2, #8
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	0052      	lsls	r2, r2, #1
 8004028:	2103      	movs	r1, #3
 800402a:	4091      	lsls	r1, r2
 800402c:	000a      	movs	r2, r1
 800402e:	43d2      	mvns	r2, r2
 8004030:	401a      	ands	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2101      	movs	r1, #1
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4091      	lsls	r1, r2
 8004040:	000a      	movs	r2, r1
 8004042:	43d2      	mvns	r2, r2
 8004044:	401a      	ands	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	0052      	lsls	r2, r2, #1
 8004052:	2103      	movs	r1, #3
 8004054:	4091      	lsls	r1, r2
 8004056:	000a      	movs	r2, r1
 8004058:	43d2      	mvns	r2, r2
 800405a:	401a      	ands	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3301      	adds	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	40da      	lsrs	r2, r3
 800406c:	1e13      	subs	r3, r2, #0
 800406e:	d000      	beq.n	8004072 <HAL_GPIO_DeInit+0x186>
 8004070:	e744      	b.n	8003efc <HAL_GPIO_DeInit+0x10>
  }
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b006      	add	sp, #24
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021800 	.word	0x40021800
 8004080:	50000400 	.word	0x50000400
 8004084:	50000800 	.word	0x50000800
 8004088:	50000c00 	.word	0x50000c00

0800408c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	000a      	movs	r2, r1
 8004096:	1cbb      	adds	r3, r7, #2
 8004098:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	1cba      	adds	r2, r7, #2
 80040a0:	8812      	ldrh	r2, [r2, #0]
 80040a2:	4013      	ands	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80040a6:	230f      	movs	r3, #15
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e003      	b.n	80040b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040b0:	230f      	movs	r3, #15
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80040b8:	230f      	movs	r3, #15
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	781b      	ldrb	r3, [r3, #0]
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b004      	add	sp, #16
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	0008      	movs	r0, r1
 80040d0:	0011      	movs	r1, r2
 80040d2:	1cbb      	adds	r3, r7, #2
 80040d4:	1c02      	adds	r2, r0, #0
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	1c7b      	adds	r3, r7, #1
 80040da:	1c0a      	adds	r2, r1, #0
 80040dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040de:	1c7b      	adds	r3, r7, #1
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040e6:	1cbb      	adds	r3, r7, #2
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040ee:	e003      	b.n	80040f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040f0:	1cbb      	adds	r3, r7, #2
 80040f2:	881a      	ldrh	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	0002      	movs	r2, r0
 8004108:	1dbb      	adds	r3, r7, #6
 800410a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	1dba      	adds	r2, r7, #6
 8004112:	8812      	ldrh	r2, [r2, #0]
 8004114:	4013      	ands	r3, r2
 8004116:	d008      	beq.n	800412a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800411a:	1dba      	adds	r2, r7, #6
 800411c:	8812      	ldrh	r2, [r2, #0]
 800411e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004120:	1dbb      	adds	r3, r7, #6
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	0018      	movs	r0, r3
 8004126:	f7ff f889 	bl	800323c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	1dba      	adds	r2, r7, #6
 8004130:	8812      	ldrh	r2, [r2, #0]
 8004132:	4013      	ands	r3, r2
 8004134:	d008      	beq.n	8004148 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004138:	1dba      	adds	r2, r7, #6
 800413a:	8812      	ldrh	r2, [r2, #0]
 800413c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800413e:	1dbb      	adds	r3, r7, #6
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	0018      	movs	r0, r3
 8004144:	f000 f806 	bl	8004154 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b002      	add	sp, #8
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021800 	.word	0x40021800

08004154 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	0002      	movs	r2, r0
 800415c:	1dbb      	adds	r3, r7, #6
 800415e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a19      	ldr	r2, [pc, #100]	; (80041dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004176:	4013      	ands	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	430a      	orrs	r2, r1
 8004180:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	429a      	cmp	r2, r3
 800418a:	d11f      	bne.n	80041cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	0013      	movs	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	189b      	adds	r3, r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4912      	ldr	r1, [pc, #72]	; (80041e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800419a:	0018      	movs	r0, r3
 800419c:	f7fb ffce 	bl	800013c <__udivsi3>
 80041a0:	0003      	movs	r3, r0
 80041a2:	3301      	adds	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041a6:	e008      	b.n	80041ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e001      	b.n	80041ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e009      	b.n	80041ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	401a      	ands	r2, r3
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d0ed      	beq.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b004      	add	sp, #16
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	40007000 	.word	0x40007000
 80041dc:	fffff9ff 	.word	0xfffff9ff
 80041e0:	20000020 	.word	0x20000020
 80041e4:	000f4240 	.word	0x000f4240

080041e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	23e0      	movs	r3, #224	; 0xe0
 80041f2:	01db      	lsls	r3, r3, #7
 80041f4:	4013      	ands	r3, r2
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40021000 	.word	0x40021000

08004200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e2fe      	b.n	8004810 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2201      	movs	r2, #1
 8004218:	4013      	ands	r3, r2
 800421a:	d100      	bne.n	800421e <HAL_RCC_OscConfig+0x1e>
 800421c:	e07c      	b.n	8004318 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421e:	4bc3      	ldr	r3, [pc, #780]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2238      	movs	r2, #56	; 0x38
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004228:	4bc0      	ldr	r3, [pc, #768]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2203      	movs	r2, #3
 800422e:	4013      	ands	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b10      	cmp	r3, #16
 8004236:	d102      	bne.n	800423e <HAL_RCC_OscConfig+0x3e>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b03      	cmp	r3, #3
 800423c:	d002      	beq.n	8004244 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b08      	cmp	r3, #8
 8004242:	d10b      	bne.n	800425c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	4bb9      	ldr	r3, [pc, #740]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	029b      	lsls	r3, r3, #10
 800424c:	4013      	ands	r3, r2
 800424e:	d062      	beq.n	8004316 <HAL_RCC_OscConfig+0x116>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d15e      	bne.n	8004316 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e2d9      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	025b      	lsls	r3, r3, #9
 8004264:	429a      	cmp	r2, r3
 8004266:	d107      	bne.n	8004278 <HAL_RCC_OscConfig+0x78>
 8004268:	4bb0      	ldr	r3, [pc, #704]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4baf      	ldr	r3, [pc, #700]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800426e:	2180      	movs	r1, #128	; 0x80
 8004270:	0249      	lsls	r1, r1, #9
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e020      	b.n	80042ba <HAL_RCC_OscConfig+0xba>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	23a0      	movs	r3, #160	; 0xa0
 800427e:	02db      	lsls	r3, r3, #11
 8004280:	429a      	cmp	r2, r3
 8004282:	d10e      	bne.n	80042a2 <HAL_RCC_OscConfig+0xa2>
 8004284:	4ba9      	ldr	r3, [pc, #676]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4ba8      	ldr	r3, [pc, #672]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800428a:	2180      	movs	r1, #128	; 0x80
 800428c:	02c9      	lsls	r1, r1, #11
 800428e:	430a      	orrs	r2, r1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	4ba6      	ldr	r3, [pc, #664]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4ba5      	ldr	r3, [pc, #660]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004298:	2180      	movs	r1, #128	; 0x80
 800429a:	0249      	lsls	r1, r1, #9
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e00b      	b.n	80042ba <HAL_RCC_OscConfig+0xba>
 80042a2:	4ba2      	ldr	r3, [pc, #648]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4ba1      	ldr	r3, [pc, #644]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80042a8:	49a1      	ldr	r1, [pc, #644]	; (8004530 <HAL_RCC_OscConfig+0x330>)
 80042aa:	400a      	ands	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	4b9f      	ldr	r3, [pc, #636]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b9e      	ldr	r3, [pc, #632]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80042b4:	499f      	ldr	r1, [pc, #636]	; (8004534 <HAL_RCC_OscConfig+0x334>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d014      	beq.n	80042ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c2:	f7ff fb8d 	bl	80039e0 <HAL_GetTick>
 80042c6:	0003      	movs	r3, r0
 80042c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7ff fb88 	bl	80039e0 <HAL_GetTick>
 80042d0:	0002      	movs	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e298      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042de:	4b93      	ldr	r3, [pc, #588]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	029b      	lsls	r3, r3, #10
 80042e6:	4013      	ands	r3, r2
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0xcc>
 80042ea:	e015      	b.n	8004318 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7ff fb78 	bl	80039e0 <HAL_GetTick>
 80042f0:	0003      	movs	r3, r0
 80042f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f6:	f7ff fb73 	bl	80039e0 <HAL_GetTick>
 80042fa:	0002      	movs	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b64      	cmp	r3, #100	; 0x64
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e283      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004308:	4b88      	ldr	r3, [pc, #544]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	029b      	lsls	r3, r3, #10
 8004310:	4013      	ands	r3, r2
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0xf6>
 8004314:	e000      	b.n	8004318 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004316:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2202      	movs	r2, #2
 800431e:	4013      	ands	r3, r2
 8004320:	d100      	bne.n	8004324 <HAL_RCC_OscConfig+0x124>
 8004322:	e099      	b.n	8004458 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004324:	4b81      	ldr	r3, [pc, #516]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2238      	movs	r2, #56	; 0x38
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800432e:	4b7f      	ldr	r3, [pc, #508]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2203      	movs	r2, #3
 8004334:	4013      	ands	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b10      	cmp	r3, #16
 800433c:	d102      	bne.n	8004344 <HAL_RCC_OscConfig+0x144>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d002      	beq.n	800434a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d135      	bne.n	80043b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800434a:	4b78      	ldr	r3, [pc, #480]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4013      	ands	r3, r2
 8004354:	d005      	beq.n	8004362 <HAL_RCC_OscConfig+0x162>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e256      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	4b72      	ldr	r3, [pc, #456]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4a74      	ldr	r2, [pc, #464]	; (8004538 <HAL_RCC_OscConfig+0x338>)
 8004368:	4013      	ands	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	021a      	lsls	r2, r3, #8
 8004372:	4b6e      	ldr	r3, [pc, #440]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d112      	bne.n	80043a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800437e:	4b6b      	ldr	r3, [pc, #428]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6e      	ldr	r2, [pc, #440]	; (800453c <HAL_RCC_OscConfig+0x33c>)
 8004384:	4013      	ands	r3, r2
 8004386:	0019      	movs	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	4b67      	ldr	r3, [pc, #412]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800438e:	430a      	orrs	r2, r1
 8004390:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004392:	4b66      	ldr	r3, [pc, #408]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	0adb      	lsrs	r3, r3, #11
 8004398:	2207      	movs	r2, #7
 800439a:	4013      	ands	r3, r2
 800439c:	4a68      	ldr	r2, [pc, #416]	; (8004540 <HAL_RCC_OscConfig+0x340>)
 800439e:	40da      	lsrs	r2, r3
 80043a0:	4b68      	ldr	r3, [pc, #416]	; (8004544 <HAL_RCC_OscConfig+0x344>)
 80043a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043a4:	4b68      	ldr	r3, [pc, #416]	; (8004548 <HAL_RCC_OscConfig+0x348>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7ff fabd 	bl	8003928 <HAL_InitTick>
 80043ae:	1e03      	subs	r3, r0, #0
 80043b0:	d051      	beq.n	8004456 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e22c      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d030      	beq.n	8004420 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043be:	4b5b      	ldr	r3, [pc, #364]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a5e      	ldr	r2, [pc, #376]	; (800453c <HAL_RCC_OscConfig+0x33c>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	4b57      	ldr	r3, [pc, #348]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80043ce:	430a      	orrs	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043d2:	4b56      	ldr	r3, [pc, #344]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b55      	ldr	r3, [pc, #340]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80043d8:	2180      	movs	r1, #128	; 0x80
 80043da:	0049      	lsls	r1, r1, #1
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7ff fafe 	bl	80039e0 <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ea:	f7ff faf9 	bl	80039e0 <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e209      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043fc:	4b4b      	ldr	r3, [pc, #300]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4013      	ands	r3, r2
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004408:	4b48      	ldr	r3, [pc, #288]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4a4a      	ldr	r2, [pc, #296]	; (8004538 <HAL_RCC_OscConfig+0x338>)
 800440e:	4013      	ands	r3, r2
 8004410:	0019      	movs	r1, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	4b44      	ldr	r3, [pc, #272]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	e01b      	b.n	8004458 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004420:	4b42      	ldr	r3, [pc, #264]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b41      	ldr	r3, [pc, #260]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004426:	4949      	ldr	r1, [pc, #292]	; (800454c <HAL_RCC_OscConfig+0x34c>)
 8004428:	400a      	ands	r2, r1
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7ff fad8 	bl	80039e0 <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004436:	f7ff fad3 	bl	80039e0 <HAL_GetTick>
 800443a:	0002      	movs	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e1e3      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004448:	4b38      	ldr	r3, [pc, #224]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4013      	ands	r3, r2
 8004452:	d1f0      	bne.n	8004436 <HAL_RCC_OscConfig+0x236>
 8004454:	e000      	b.n	8004458 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004456:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2208      	movs	r2, #8
 800445e:	4013      	ands	r3, r2
 8004460:	d047      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004462:	4b32      	ldr	r3, [pc, #200]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2238      	movs	r2, #56	; 0x38
 8004468:	4013      	ands	r3, r2
 800446a:	2b18      	cmp	r3, #24
 800446c:	d10a      	bne.n	8004484 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800446e:	4b2f      	ldr	r3, [pc, #188]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004472:	2202      	movs	r2, #2
 8004474:	4013      	ands	r3, r2
 8004476:	d03c      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2f2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d138      	bne.n	80044f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e1c5      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d019      	beq.n	80044c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800448c:	4b27      	ldr	r3, [pc, #156]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 800448e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004490:	4b26      	ldr	r3, [pc, #152]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004492:	2101      	movs	r1, #1
 8004494:	430a      	orrs	r2, r1
 8004496:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7ff faa2 	bl	80039e0 <HAL_GetTick>
 800449c:	0003      	movs	r3, r0
 800449e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a2:	f7ff fa9d 	bl	80039e0 <HAL_GetTick>
 80044a6:	0002      	movs	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1ad      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80044b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b8:	2202      	movs	r2, #2
 80044ba:	4013      	ands	r3, r2
 80044bc:	d0f1      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2a2>
 80044be:	e018      	b.n	80044f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80044c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80044c6:	2101      	movs	r1, #1
 80044c8:	438a      	bics	r2, r1
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7ff fa88 	bl	80039e0 <HAL_GetTick>
 80044d0:	0003      	movs	r3, r0
 80044d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d6:	f7ff fa83 	bl	80039e0 <HAL_GetTick>
 80044da:	0002      	movs	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e193      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e8:	4b10      	ldr	r3, [pc, #64]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 80044ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ec:	2202      	movs	r2, #2
 80044ee:	4013      	ands	r3, r2
 80044f0:	d1f1      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2204      	movs	r2, #4
 80044f8:	4013      	ands	r3, r2
 80044fa:	d100      	bne.n	80044fe <HAL_RCC_OscConfig+0x2fe>
 80044fc:	e0c6      	b.n	800468c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fe:	231f      	movs	r3, #31
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2238      	movs	r2, #56	; 0x38
 800450c:	4013      	ands	r3, r2
 800450e:	2b20      	cmp	r3, #32
 8004510:	d11e      	bne.n	8004550 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCC_OscConfig+0x32c>)
 8004514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004516:	2202      	movs	r2, #2
 8004518:	4013      	ands	r3, r2
 800451a:	d100      	bne.n	800451e <HAL_RCC_OscConfig+0x31e>
 800451c:	e0b6      	b.n	800468c <HAL_RCC_OscConfig+0x48c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d000      	beq.n	8004528 <HAL_RCC_OscConfig+0x328>
 8004526:	e0b1      	b.n	800468c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e171      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
 800452c:	40021000 	.word	0x40021000
 8004530:	fffeffff 	.word	0xfffeffff
 8004534:	fffbffff 	.word	0xfffbffff
 8004538:	ffff80ff 	.word	0xffff80ff
 800453c:	ffffc7ff 	.word	0xffffc7ff
 8004540:	00f42400 	.word	0x00f42400
 8004544:	20000020 	.word	0x20000020
 8004548:	20000024 	.word	0x20000024
 800454c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004550:	4bb1      	ldr	r3, [pc, #708]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	055b      	lsls	r3, r3, #21
 8004558:	4013      	ands	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_RCC_OscConfig+0x360>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x362>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d011      	beq.n	800458a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	4bac      	ldr	r3, [pc, #688]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456a:	4bab      	ldr	r3, [pc, #684]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 800456c:	2180      	movs	r1, #128	; 0x80
 800456e:	0549      	lsls	r1, r1, #21
 8004570:	430a      	orrs	r2, r1
 8004572:	63da      	str	r2, [r3, #60]	; 0x3c
 8004574:	4ba8      	ldr	r3, [pc, #672]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	055b      	lsls	r3, r3, #21
 800457c:	4013      	ands	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004582:	231f      	movs	r3, #31
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	2201      	movs	r2, #1
 8004588:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458a:	4ba4      	ldr	r3, [pc, #656]	; (800481c <HAL_RCC_OscConfig+0x61c>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4013      	ands	r3, r2
 8004594:	d11a      	bne.n	80045cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004596:	4ba1      	ldr	r3, [pc, #644]	; (800481c <HAL_RCC_OscConfig+0x61c>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4ba0      	ldr	r3, [pc, #640]	; (800481c <HAL_RCC_OscConfig+0x61c>)
 800459c:	2180      	movs	r1, #128	; 0x80
 800459e:	0049      	lsls	r1, r1, #1
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80045a4:	f7ff fa1c 	bl	80039e0 <HAL_GetTick>
 80045a8:	0003      	movs	r3, r0
 80045aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ae:	f7ff fa17 	bl	80039e0 <HAL_GetTick>
 80045b2:	0002      	movs	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e127      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c0:	4b96      	ldr	r3, [pc, #600]	; (800481c <HAL_RCC_OscConfig+0x61c>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4013      	ands	r3, r2
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d106      	bne.n	80045e2 <HAL_RCC_OscConfig+0x3e2>
 80045d4:	4b90      	ldr	r3, [pc, #576]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80045d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045d8:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80045da:	2101      	movs	r1, #1
 80045dc:	430a      	orrs	r2, r1
 80045de:	65da      	str	r2, [r3, #92]	; 0x5c
 80045e0:	e01c      	b.n	800461c <HAL_RCC_OscConfig+0x41c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d10c      	bne.n	8004604 <HAL_RCC_OscConfig+0x404>
 80045ea:	4b8b      	ldr	r3, [pc, #556]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80045ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045ee:	4b8a      	ldr	r3, [pc, #552]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80045f0:	2104      	movs	r1, #4
 80045f2:	430a      	orrs	r2, r1
 80045f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80045f6:	4b88      	ldr	r3, [pc, #544]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80045f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045fa:	4b87      	ldr	r3, [pc, #540]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80045fc:	2101      	movs	r1, #1
 80045fe:	430a      	orrs	r2, r1
 8004600:	65da      	str	r2, [r3, #92]	; 0x5c
 8004602:	e00b      	b.n	800461c <HAL_RCC_OscConfig+0x41c>
 8004604:	4b84      	ldr	r3, [pc, #528]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004606:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004608:	4b83      	ldr	r3, [pc, #524]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 800460a:	2101      	movs	r1, #1
 800460c:	438a      	bics	r2, r1
 800460e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004610:	4b81      	ldr	r3, [pc, #516]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004612:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004614:	4b80      	ldr	r3, [pc, #512]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004616:	2104      	movs	r1, #4
 8004618:	438a      	bics	r2, r1
 800461a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d014      	beq.n	800464e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7ff f9dc 	bl	80039e0 <HAL_GetTick>
 8004628:	0003      	movs	r3, r0
 800462a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462c:	e009      	b.n	8004642 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7ff f9d7 	bl	80039e0 <HAL_GetTick>
 8004632:	0002      	movs	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	4a79      	ldr	r2, [pc, #484]	; (8004820 <HAL_RCC_OscConfig+0x620>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e0e6      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004642:	4b75      	ldr	r3, [pc, #468]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x42e>
 800464c:	e013      	b.n	8004676 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7ff f9c7 	bl	80039e0 <HAL_GetTick>
 8004652:	0003      	movs	r3, r0
 8004654:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004656:	e009      	b.n	800466c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7ff f9c2 	bl	80039e0 <HAL_GetTick>
 800465c:	0002      	movs	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	4a6f      	ldr	r2, [pc, #444]	; (8004820 <HAL_RCC_OscConfig+0x620>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0d1      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800466c:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	2202      	movs	r2, #2
 8004672:	4013      	ands	r3, r2
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004676:	231f      	movs	r3, #31
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004680:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004684:	4b64      	ldr	r3, [pc, #400]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004686:	4967      	ldr	r1, [pc, #412]	; (8004824 <HAL_RCC_OscConfig+0x624>)
 8004688:	400a      	ands	r2, r1
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d100      	bne.n	8004696 <HAL_RCC_OscConfig+0x496>
 8004694:	e0bb      	b.n	800480e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004696:	4b60      	ldr	r3, [pc, #384]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2238      	movs	r2, #56	; 0x38
 800469c:	4013      	ands	r3, r2
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d100      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4a4>
 80046a2:	e07b      	b.n	800479c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d156      	bne.n	800475a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ac:	4b5a      	ldr	r3, [pc, #360]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80046b2:	495d      	ldr	r1, [pc, #372]	; (8004828 <HAL_RCC_OscConfig+0x628>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7ff f992 	bl	80039e0 <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c2:	f7ff f98d 	bl	80039e0 <HAL_GetTick>
 80046c6:	0002      	movs	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e09d      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d4:	4b50      	ldr	r3, [pc, #320]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	049b      	lsls	r3, r3, #18
 80046dc:	4013      	ands	r3, r2
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e0:	4b4d      	ldr	r3, [pc, #308]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a51      	ldr	r2, [pc, #324]	; (800482c <HAL_RCC_OscConfig+0x62c>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	0019      	movs	r1, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	431a      	orrs	r2, r3
 800470e:	4b42      	ldr	r3, [pc, #264]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004710:	430a      	orrs	r2, r1
 8004712:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004714:	4b40      	ldr	r3, [pc, #256]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 800471a:	2180      	movs	r1, #128	; 0x80
 800471c:	0449      	lsls	r1, r1, #17
 800471e:	430a      	orrs	r2, r1
 8004720:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004728:	2180      	movs	r1, #128	; 0x80
 800472a:	0549      	lsls	r1, r1, #21
 800472c:	430a      	orrs	r2, r1
 800472e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7ff f956 	bl	80039e0 <HAL_GetTick>
 8004734:	0003      	movs	r3, r0
 8004736:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473a:	f7ff f951 	bl	80039e0 <HAL_GetTick>
 800473e:	0002      	movs	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e061      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	049b      	lsls	r3, r3, #18
 8004754:	4013      	ands	r3, r2
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x53a>
 8004758:	e059      	b.n	800480e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004760:	4931      	ldr	r1, [pc, #196]	; (8004828 <HAL_RCC_OscConfig+0x628>)
 8004762:	400a      	ands	r2, r1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7ff f93b 	bl	80039e0 <HAL_GetTick>
 800476a:	0003      	movs	r3, r0
 800476c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004770:	f7ff f936 	bl	80039e0 <HAL_GetTick>
 8004774:	0002      	movs	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e046      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004782:	4b25      	ldr	r3, [pc, #148]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	049b      	lsls	r3, r3, #18
 800478a:	4013      	ands	r3, r2
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	4b21      	ldr	r3, [pc, #132]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 8004794:	4926      	ldr	r1, [pc, #152]	; (8004830 <HAL_RCC_OscConfig+0x630>)
 8004796:	400a      	ands	r2, r1
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	e038      	b.n	800480e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e033      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x618>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2203      	movs	r2, #3
 80047b2:	401a      	ands	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d126      	bne.n	800480a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2270      	movs	r2, #112	; 0x70
 80047c0:	401a      	ands	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d11f      	bne.n	800480a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	23fe      	movs	r3, #254	; 0xfe
 80047ce:	01db      	lsls	r3, r3, #7
 80047d0:	401a      	ands	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d116      	bne.n	800480a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	23f8      	movs	r3, #248	; 0xf8
 80047e0:	039b      	lsls	r3, r3, #14
 80047e2:	401a      	ands	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d10e      	bne.n	800480a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	23e0      	movs	r3, #224	; 0xe0
 80047f0:	051b      	lsls	r3, r3, #20
 80047f2:	401a      	ands	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d106      	bne.n	800480a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	0f5b      	lsrs	r3, r3, #29
 8004800:	075a      	lsls	r2, r3, #29
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d001      	beq.n	800480e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b008      	add	sp, #32
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	40007000 	.word	0x40007000
 8004820:	00001388 	.word	0x00001388
 8004824:	efffffff 	.word	0xefffffff
 8004828:	feffffff 	.word	0xfeffffff
 800482c:	11c1808c 	.word	0x11c1808c
 8004830:	eefefffc 	.word	0xeefefffc

08004834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0e9      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004848:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <HAL_RCC_ClockConfig+0x1f0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2207      	movs	r2, #7
 800484e:	4013      	ands	r3, r2
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d91e      	bls.n	8004894 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b73      	ldr	r3, [pc, #460]	; (8004a24 <HAL_RCC_ClockConfig+0x1f0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2207      	movs	r2, #7
 800485c:	4393      	bics	r3, r2
 800485e:	0019      	movs	r1, r3
 8004860:	4b70      	ldr	r3, [pc, #448]	; (8004a24 <HAL_RCC_ClockConfig+0x1f0>)
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004868:	f7ff f8ba 	bl	80039e0 <HAL_GetTick>
 800486c:	0003      	movs	r3, r0
 800486e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004870:	e009      	b.n	8004886 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004872:	f7ff f8b5 	bl	80039e0 <HAL_GetTick>
 8004876:	0002      	movs	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	4a6a      	ldr	r2, [pc, #424]	; (8004a28 <HAL_RCC_ClockConfig+0x1f4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0ca      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004886:	4b67      	ldr	r3, [pc, #412]	; (8004a24 <HAL_RCC_ClockConfig+0x1f0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2207      	movs	r2, #7
 800488c:	4013      	ands	r3, r2
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d1ee      	bne.n	8004872 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2202      	movs	r2, #2
 800489a:	4013      	ands	r3, r2
 800489c:	d015      	beq.n	80048ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2204      	movs	r2, #4
 80048a4:	4013      	ands	r3, r2
 80048a6:	d006      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048a8:	4b60      	ldr	r3, [pc, #384]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	4b5f      	ldr	r3, [pc, #380]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 80048ae:	21e0      	movs	r1, #224	; 0xe0
 80048b0:	01c9      	lsls	r1, r1, #7
 80048b2:	430a      	orrs	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b6:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	4a5d      	ldr	r2, [pc, #372]	; (8004a30 <HAL_RCC_ClockConfig+0x1fc>)
 80048bc:	4013      	ands	r3, r2
 80048be:	0019      	movs	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	4b59      	ldr	r3, [pc, #356]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2201      	movs	r2, #1
 80048d0:	4013      	ands	r3, r2
 80048d2:	d057      	beq.n	8004984 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d107      	bne.n	80048ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048dc:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	029b      	lsls	r3, r3, #10
 80048e4:	4013      	ands	r3, r2
 80048e6:	d12b      	bne.n	8004940 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e097      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d107      	bne.n	8004904 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f4:	4b4d      	ldr	r3, [pc, #308]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	049b      	lsls	r3, r3, #18
 80048fc:	4013      	ands	r3, r2
 80048fe:	d11f      	bne.n	8004940 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e08b      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800490c:	4b47      	ldr	r3, [pc, #284]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4013      	ands	r3, r2
 8004916:	d113      	bne.n	8004940 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e07f      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d106      	bne.n	8004932 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004924:	4b41      	ldr	r3, [pc, #260]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 8004926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004928:	2202      	movs	r2, #2
 800492a:	4013      	ands	r3, r2
 800492c:	d108      	bne.n	8004940 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e074      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004932:	4b3e      	ldr	r3, [pc, #248]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	2202      	movs	r2, #2
 8004938:	4013      	ands	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e06d      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004940:	4b3a      	ldr	r3, [pc, #232]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2207      	movs	r2, #7
 8004946:	4393      	bics	r3, r2
 8004948:	0019      	movs	r1, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4b37      	ldr	r3, [pc, #220]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 8004950:	430a      	orrs	r2, r1
 8004952:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004954:	f7ff f844 	bl	80039e0 <HAL_GetTick>
 8004958:	0003      	movs	r3, r0
 800495a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495c:	e009      	b.n	8004972 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495e:	f7ff f83f 	bl	80039e0 <HAL_GetTick>
 8004962:	0002      	movs	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <HAL_RCC_ClockConfig+0x1f4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e054      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2238      	movs	r2, #56	; 0x38
 8004978:	401a      	ands	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	429a      	cmp	r2, r3
 8004982:	d1ec      	bne.n	800495e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_ClockConfig+0x1f0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2207      	movs	r2, #7
 800498a:	4013      	ands	r3, r2
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d21e      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCC_ClockConfig+0x1f0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2207      	movs	r2, #7
 8004998:	4393      	bics	r3, r2
 800499a:	0019      	movs	r1, r3
 800499c:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <HAL_RCC_ClockConfig+0x1f0>)
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049a4:	f7ff f81c 	bl	80039e0 <HAL_GetTick>
 80049a8:	0003      	movs	r3, r0
 80049aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049ac:	e009      	b.n	80049c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ae:	f7ff f817 	bl	80039e0 <HAL_GetTick>
 80049b2:	0002      	movs	r2, r0
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	4a1b      	ldr	r2, [pc, #108]	; (8004a28 <HAL_RCC_ClockConfig+0x1f4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e02c      	b.n	8004a1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049c2:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2207      	movs	r2, #7
 80049c8:	4013      	ands	r3, r2
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d1ee      	bne.n	80049ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2204      	movs	r2, #4
 80049d6:	4013      	ands	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049da:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <HAL_RCC_ClockConfig+0x200>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 80049ea:	430a      	orrs	r2, r1
 80049ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049ee:	f000 f829 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 80049f2:	0001      	movs	r1, r0
 80049f4:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_RCC_ClockConfig+0x1f8>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	220f      	movs	r2, #15
 80049fc:	401a      	ands	r2, r3
 80049fe:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <HAL_RCC_ClockConfig+0x204>)
 8004a00:	0092      	lsls	r2, r2, #2
 8004a02:	58d3      	ldr	r3, [r2, r3]
 8004a04:	221f      	movs	r2, #31
 8004a06:	4013      	ands	r3, r2
 8004a08:	000a      	movs	r2, r1
 8004a0a:	40da      	lsrs	r2, r3
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_RCC_ClockConfig+0x208>)
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_ClockConfig+0x20c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f7fe ff87 	bl	8003928 <HAL_InitTick>
 8004a1a:	0003      	movs	r3, r0
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b004      	add	sp, #16
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40022000 	.word	0x40022000
 8004a28:	00001388 	.word	0x00001388
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	fffff0ff 	.word	0xfffff0ff
 8004a34:	ffff8fff 	.word	0xffff8fff
 8004a38:	08014874 	.word	0x08014874
 8004a3c:	20000020 	.word	0x20000020
 8004a40:	20000024 	.word	0x20000024

08004a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a4a:	4b3c      	ldr	r3, [pc, #240]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2238      	movs	r2, #56	; 0x38
 8004a50:	4013      	ands	r3, r2
 8004a52:	d10f      	bne.n	8004a74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a54:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	0adb      	lsrs	r3, r3, #11
 8004a5a:	2207      	movs	r2, #7
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2201      	movs	r2, #1
 8004a60:	409a      	lsls	r2, r3
 8004a62:	0013      	movs	r3, r2
 8004a64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	4835      	ldr	r0, [pc, #212]	; (8004b40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a6a:	f7fb fb67 	bl	800013c <__udivsi3>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e05d      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a74:	4b31      	ldr	r3, [pc, #196]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2238      	movs	r2, #56	; 0x38
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d102      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a80:	4b30      	ldr	r3, [pc, #192]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e054      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a86:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2238      	movs	r2, #56	; 0x38
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d138      	bne.n	8004b04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a92:	4b2a      	ldr	r3, [pc, #168]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2203      	movs	r2, #3
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a9c:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	2207      	movs	r2, #7
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d10d      	bne.n	8004acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	4824      	ldr	r0, [pc, #144]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ab4:	f7fb fb42 	bl	800013c <__udivsi3>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	0019      	movs	r1, r3
 8004abc:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	0a1b      	lsrs	r3, r3, #8
 8004ac2:	227f      	movs	r2, #127	; 0x7f
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	434b      	muls	r3, r1
 8004ac8:	617b      	str	r3, [r7, #20]
        break;
 8004aca:	e00d      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	481c      	ldr	r0, [pc, #112]	; (8004b40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ad0:	f7fb fb34 	bl	800013c <__udivsi3>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	0a1b      	lsrs	r3, r3, #8
 8004ade:	227f      	movs	r2, #127	; 0x7f
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	434b      	muls	r3, r1
 8004ae4:	617b      	str	r3, [r7, #20]
        break;
 8004ae6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ae8:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	0f5b      	lsrs	r3, r3, #29
 8004aee:	2207      	movs	r2, #7
 8004af0:	4013      	ands	r3, r2
 8004af2:	3301      	adds	r3, #1
 8004af4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	6978      	ldr	r0, [r7, #20]
 8004afa:	f7fb fb1f 	bl	800013c <__udivsi3>
 8004afe:	0003      	movs	r3, r0
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	e015      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b04:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2238      	movs	r2, #56	; 0x38
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d103      	bne.n	8004b18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e00b      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b18:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2238      	movs	r2, #56	; 0x38
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b18      	cmp	r3, #24
 8004b22:	d103      	bne.n	8004b2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b24:	23fa      	movs	r3, #250	; 0xfa
 8004b26:	01db      	lsls	r3, r3, #7
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	e001      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b30:	693b      	ldr	r3, [r7, #16]
}
 8004b32:	0018      	movs	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b006      	add	sp, #24
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	007a1200 	.word	0x007a1200

08004b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b4c:	4b02      	ldr	r3, [pc, #8]	; (8004b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	20000020 	.word	0x20000020

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b5b0      	push	{r4, r5, r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b60:	f7ff fff2 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b64:	0004      	movs	r4, r0
 8004b66:	f7ff fb3f 	bl	80041e8 <LL_RCC_GetAPB1Prescaler>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	0b1a      	lsrs	r2, r3, #12
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b70:	0092      	lsls	r2, r2, #2
 8004b72:	58d3      	ldr	r3, [r2, r3]
 8004b74:	221f      	movs	r2, #31
 8004b76:	4013      	ands	r3, r2
 8004b78:	40dc      	lsrs	r4, r3
 8004b7a:	0023      	movs	r3, r4
}
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bdb0      	pop	{r4, r5, r7, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	080148b4 	.word	0x080148b4

08004b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b90:	2313      	movs	r3, #19
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b98:	2312      	movs	r3, #18
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	029b      	lsls	r3, r3, #10
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d100      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004bac:	e0a3      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bae:	2011      	movs	r0, #17
 8004bb0:	183b      	adds	r3, r7, r0
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb6:	4bc3      	ldr	r3, [pc, #780]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	055b      	lsls	r3, r3, #21
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d110      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	4bc0      	ldr	r3, [pc, #768]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc6:	4bbf      	ldr	r3, [pc, #764]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bc8:	2180      	movs	r1, #128	; 0x80
 8004bca:	0549      	lsls	r1, r1, #21
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bd0:	4bbc      	ldr	r3, [pc, #752]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	055b      	lsls	r3, r3, #21
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bde:	183b      	adds	r3, r7, r0
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004be4:	4bb8      	ldr	r3, [pc, #736]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4bb7      	ldr	r3, [pc, #732]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bea:	2180      	movs	r1, #128	; 0x80
 8004bec:	0049      	lsls	r1, r1, #1
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bf2:	f7fe fef5 	bl	80039e0 <HAL_GetTick>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bfa:	e00b      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfc:	f7fe fef0 	bl	80039e0 <HAL_GetTick>
 8004c00:	0002      	movs	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d904      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c0a:	2313      	movs	r3, #19
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	2203      	movs	r2, #3
 8004c10:	701a      	strb	r2, [r3, #0]
        break;
 8004c12:	e005      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c14:	4bac      	ldr	r3, [pc, #688]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	2380      	movs	r3, #128	; 0x80
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d0ed      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c20:	2313      	movs	r3, #19
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d154      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c2a:	4ba6      	ldr	r3, [pc, #664]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c2e:	23c0      	movs	r3, #192	; 0xc0
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4013      	ands	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d019      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d014      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c46:	4b9f      	ldr	r3, [pc, #636]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	4aa0      	ldr	r2, [pc, #640]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c50:	4b9c      	ldr	r3, [pc, #624]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c54:	4b9b      	ldr	r3, [pc, #620]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	0249      	lsls	r1, r1, #9
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c5e:	4b99      	ldr	r3, [pc, #612]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c62:	4b98      	ldr	r3, [pc, #608]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c64:	499a      	ldr	r1, [pc, #616]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c66:	400a      	ands	r2, r1
 8004c68:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c6a:	4b96      	ldr	r3, [pc, #600]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2201      	movs	r2, #1
 8004c74:	4013      	ands	r3, r2
 8004c76:	d016      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fe feb2 	bl	80039e0 <HAL_GetTick>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c80:	e00c      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c82:	f7fe fead 	bl	80039e0 <HAL_GetTick>
 8004c86:	0002      	movs	r2, r0
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	4a91      	ldr	r2, [pc, #580]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d904      	bls.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c92:	2313      	movs	r3, #19
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	2203      	movs	r2, #3
 8004c98:	701a      	strb	r2, [r3, #0]
            break;
 8004c9a:	e004      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9c:	4b89      	ldr	r3, [pc, #548]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d0ed      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004ca6:	2313      	movs	r3, #19
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb0:	4b84      	ldr	r3, [pc, #528]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	4a85      	ldr	r2, [pc, #532]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	0019      	movs	r1, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbe:	4b81      	ldr	r3, [pc, #516]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cc4:	e00c      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc6:	2312      	movs	r3, #18
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	2213      	movs	r2, #19
 8004ccc:	18ba      	adds	r2, r7, r2
 8004cce:	7812      	ldrb	r2, [r2, #0]
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	2312      	movs	r3, #18
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	2213      	movs	r2, #19
 8004cda:	18ba      	adds	r2, r7, r2
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ce0:	2311      	movs	r3, #17
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cea:	4b76      	ldr	r3, [pc, #472]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cee:	4b75      	ldr	r3, [pc, #468]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf0:	4979      	ldr	r1, [pc, #484]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d00:	4b70      	ldr	r3, [pc, #448]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d04:	2203      	movs	r2, #3
 8004d06:	4393      	bics	r3, r2
 8004d08:	0019      	movs	r1, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	4b6d      	ldr	r3, [pc, #436]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d10:	430a      	orrs	r2, r1
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d1e:	4b69      	ldr	r3, [pc, #420]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	220c      	movs	r2, #12
 8004d24:	4393      	bics	r3, r2
 8004d26:	0019      	movs	r1, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2210      	movs	r2, #16
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d3c:	4b61      	ldr	r3, [pc, #388]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	4a66      	ldr	r2, [pc, #408]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	0019      	movs	r1, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	4b5e      	ldr	r3, [pc, #376]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d5c:	4b59      	ldr	r3, [pc, #356]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d60:	4a5f      	ldr	r2, [pc, #380]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	0019      	movs	r1, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	4b56      	ldr	r3, [pc, #344]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d7c:	4b51      	ldr	r3, [pc, #324]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	4a58      	ldr	r2, [pc, #352]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	0019      	movs	r1, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69da      	ldr	r2, [r3, #28]
 8004d8a:	4b4e      	ldr	r3, [pc, #312]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2220      	movs	r2, #32
 8004d96:	4013      	ands	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d9a:	4b4a      	ldr	r3, [pc, #296]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	4a52      	ldr	r2, [pc, #328]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	0019      	movs	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	4b46      	ldr	r3, [pc, #280]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004daa:	430a      	orrs	r2, r1
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	01db      	lsls	r3, r3, #7
 8004db6:	4013      	ands	r3, r2
 8004db8:	d015      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dba:	4b42      	ldr	r3, [pc, #264]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	0899      	lsrs	r1, r3, #2
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	4b3f      	ldr	r3, [pc, #252]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	05db      	lsls	r3, r3, #23
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d106      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004dd8:	4b3a      	ldr	r3, [pc, #232]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dde:	2180      	movs	r1, #128	; 0x80
 8004de0:	0249      	lsls	r1, r1, #9
 8004de2:	430a      	orrs	r2, r1
 8004de4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	031b      	lsls	r3, r3, #12
 8004dee:	4013      	ands	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004df2:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	4393      	bics	r3, r2
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e00:	4b30      	ldr	r3, [pc, #192]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e02:	430a      	orrs	r2, r1
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	039b      	lsls	r3, r3, #14
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d016      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e12:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	4a35      	ldr	r2, [pc, #212]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e20:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e22:	430a      	orrs	r2, r1
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2a:	2380      	movs	r3, #128	; 0x80
 8004e2c:	03db      	lsls	r3, r3, #15
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d106      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	0449      	lsls	r1, r1, #17
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	03db      	lsls	r3, r3, #15
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d016      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	4a27      	ldr	r2, [pc, #156]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	0019      	movs	r1, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	045b      	lsls	r3, r3, #17
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e6c:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	0449      	lsls	r1, r1, #17
 8004e76:	430a      	orrs	r2, r1
 8004e78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	4013      	ands	r3, r2
 8004e84:	d016      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e86:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	01db      	lsls	r3, r3, #7
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d106      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ea6:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	0249      	lsls	r1, r1, #9
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004eb4:	2312      	movs	r3, #18
 8004eb6:	18fb      	adds	r3, r7, r3
 8004eb8:	781b      	ldrb	r3, [r3, #0]
}
 8004eba:	0018      	movs	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b006      	add	sp, #24
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40007000 	.word	0x40007000
 8004ecc:	fffffcff 	.word	0xfffffcff
 8004ed0:	fffeffff 	.word	0xfffeffff
 8004ed4:	00001388 	.word	0x00001388
 8004ed8:	efffffff 	.word	0xefffffff
 8004edc:	fffff3ff 	.word	0xfffff3ff
 8004ee0:	fff3ffff 	.word	0xfff3ffff
 8004ee4:	ffcfffff 	.word	0xffcfffff
 8004ee8:	ffffcfff 	.word	0xffffcfff
 8004eec:	ffbfffff 	.word	0xffbfffff
 8004ef0:	feffffff 	.word	0xfeffffff
 8004ef4:	ffff3fff 	.word	0xffff3fff

08004ef8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ef8:	b5b0      	push	{r4, r5, r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f00:	230f      	movs	r3, #15
 8004f02:	18fb      	adds	r3, r7, r3
 8004f04:	2201      	movs	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d100      	bne.n	8004f10 <HAL_RTC_Init+0x18>
 8004f0e:	e08c      	b.n	800502a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2229      	movs	r2, #41	; 0x29
 8004f14:	5c9b      	ldrb	r3, [r3, r2]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10b      	bne.n	8004f34 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2228      	movs	r2, #40	; 0x28
 8004f20:	2100      	movs	r1, #0
 8004f22:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2288      	movs	r2, #136	; 0x88
 8004f28:	0212      	lsls	r2, r2, #8
 8004f2a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7fe f9d6 	bl	80032e0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2229      	movs	r2, #41	; 0x29
 8004f38:	2102      	movs	r1, #2
 8004f3a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2210      	movs	r2, #16
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d062      	beq.n	8005010 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	22ca      	movs	r2, #202	; 0xca
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2253      	movs	r2, #83	; 0x53
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004f5a:	250f      	movs	r5, #15
 8004f5c:	197c      	adds	r4, r7, r5
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f000 fb9c 	bl	800569e <RTC_EnterInitMode>
 8004f66:	0003      	movs	r3, r0
 8004f68:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004f6a:	0028      	movs	r0, r5
 8004f6c:	183b      	adds	r3, r7, r0
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d12c      	bne.n	8004fce <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	492e      	ldr	r1, [pc, #184]	; (8005038 <HAL_RTC_Init+0x140>)
 8004f80:	400a      	ands	r2, r1
 8004f82:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6912      	ldr	r2, [r2, #16]
 8004faa:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6919      	ldr	r1, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	041a      	lsls	r2, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004fc0:	183c      	adds	r4, r7, r0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 fbad 	bl	8005724 <RTC_ExitInitMode>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004fce:	230f      	movs	r3, #15
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d116      	bne.n	8005006 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	00d2      	lsls	r2, r2, #3
 8004fe4:	08d2      	lsrs	r2, r2, #3
 8004fe6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6999      	ldr	r1, [r3, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	22ff      	movs	r2, #255	; 0xff
 800500c:	625a      	str	r2, [r3, #36]	; 0x24
 800500e:	e003      	b.n	8005018 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005010:	230f      	movs	r3, #15
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005018:	230f      	movs	r3, #15
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2229      	movs	r2, #41	; 0x29
 8005026:	2101      	movs	r1, #1
 8005028:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800502a:	230f      	movs	r3, #15
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	781b      	ldrb	r3, [r3, #0]
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b004      	add	sp, #16
 8005036:	bdb0      	pop	{r4, r5, r7, pc}
 8005038:	fb8fffbf 	.word	0xfb8fffbf

0800503c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800503c:	b5b0      	push	{r4, r5, r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2228      	movs	r2, #40	; 0x28
 800504c:	5c9b      	ldrb	r3, [r3, r2]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_RTC_SetTime+0x1a>
 8005052:	2302      	movs	r3, #2
 8005054:	e092      	b.n	800517c <HAL_RTC_SetTime+0x140>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2228      	movs	r2, #40	; 0x28
 800505a:	2101      	movs	r1, #1
 800505c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2229      	movs	r2, #41	; 0x29
 8005062:	2102      	movs	r1, #2
 8005064:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	22ca      	movs	r2, #202	; 0xca
 800506c:	625a      	str	r2, [r3, #36]	; 0x24
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2253      	movs	r2, #83	; 0x53
 8005074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005076:	2513      	movs	r5, #19
 8005078:	197c      	adds	r4, r7, r5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	0018      	movs	r0, r3
 800507e:	f000 fb0e 	bl	800569e <RTC_EnterInitMode>
 8005082:	0003      	movs	r3, r0
 8005084:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005086:	197b      	adds	r3, r7, r5
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d162      	bne.n	8005154 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d125      	bne.n	80050e0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2240      	movs	r2, #64	; 0x40
 800509c:	4013      	ands	r3, r2
 800509e:	d102      	bne.n	80050a6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 fb7e 	bl	80057ac <RTC_ByteToBcd2>
 80050b0:	0003      	movs	r3, r0
 80050b2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 fb77 	bl	80057ac <RTC_ByteToBcd2>
 80050be:	0003      	movs	r3, r0
 80050c0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050c2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	789b      	ldrb	r3, [r3, #2]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f000 fb6f 	bl	80057ac <RTC_ByteToBcd2>
 80050ce:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050d0:	0022      	movs	r2, r4
 80050d2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	78db      	ldrb	r3, [r3, #3]
 80050d8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e017      	b.n	8005110 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	2240      	movs	r2, #64	; 0x40
 80050e8:	4013      	ands	r3, r2
 80050ea:	d102      	bne.n	80050f2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050fe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005104:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	78db      	ldrb	r3, [r3, #3]
 800510a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	491b      	ldr	r1, [pc, #108]	; (8005184 <HAL_RTC_SetTime+0x148>)
 8005118:	400a      	ands	r2, r1
 800511a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4918      	ldr	r1, [pc, #96]	; (8005188 <HAL_RTC_SetTime+0x14c>)
 8005128:	400a      	ands	r2, r1
 800512a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	431a      	orrs	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005144:	2313      	movs	r3, #19
 8005146:	18fc      	adds	r4, r7, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	0018      	movs	r0, r3
 800514c:	f000 faea 	bl	8005724 <RTC_ExitInitMode>
 8005150:	0003      	movs	r3, r0
 8005152:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	22ff      	movs	r2, #255	; 0xff
 800515a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800515c:	2313      	movs	r3, #19
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2229      	movs	r2, #41	; 0x29
 800516a:	2101      	movs	r1, #1
 800516c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2228      	movs	r2, #40	; 0x28
 8005172:	2100      	movs	r1, #0
 8005174:	5499      	strb	r1, [r3, r2]

  return status;
 8005176:	2313      	movs	r3, #19
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	781b      	ldrb	r3, [r3, #0]
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b006      	add	sp, #24
 8005182:	bdb0      	pop	{r4, r5, r7, pc}
 8005184:	007f7f7f 	.word	0x007f7f7f
 8005188:	fffbffff 	.word	0xfffbffff

0800518c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	045b      	lsls	r3, r3, #17
 80051aa:	0c5a      	lsrs	r2, r3, #17
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a22      	ldr	r2, [pc, #136]	; (8005240 <HAL_RTC_GetTime+0xb4>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	0c1b      	lsrs	r3, r3, #16
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	223f      	movs	r2, #63	; 0x3f
 80051c4:	4013      	ands	r3, r2
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	227f      	movs	r2, #127	; 0x7f
 80051d4:	4013      	ands	r3, r2
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	227f      	movs	r2, #127	; 0x7f
 80051e2:	4013      	ands	r3, r2
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	0d9b      	lsrs	r3, r3, #22
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2201      	movs	r2, #1
 80051f2:	4013      	ands	r3, r2
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d11a      	bne.n	8005236 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	0018      	movs	r0, r3
 8005206:	f000 faf9 	bl	80057fc <RTC_Bcd2ToByte>
 800520a:	0003      	movs	r3, r0
 800520c:	001a      	movs	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	785b      	ldrb	r3, [r3, #1]
 8005216:	0018      	movs	r0, r3
 8005218:	f000 faf0 	bl	80057fc <RTC_Bcd2ToByte>
 800521c:	0003      	movs	r3, r0
 800521e:	001a      	movs	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	789b      	ldrb	r3, [r3, #2]
 8005228:	0018      	movs	r0, r3
 800522a:	f000 fae7 	bl	80057fc <RTC_Bcd2ToByte>
 800522e:	0003      	movs	r3, r0
 8005230:	001a      	movs	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b006      	add	sp, #24
 800523e:	bd80      	pop	{r7, pc}
 8005240:	007f7f7f 	.word	0x007f7f7f

08005244 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005244:	b5b0      	push	{r4, r5, r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2228      	movs	r2, #40	; 0x28
 8005254:	5c9b      	ldrb	r3, [r3, r2]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_RTC_SetDate+0x1a>
 800525a:	2302      	movs	r3, #2
 800525c:	e07e      	b.n	800535c <HAL_RTC_SetDate+0x118>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2228      	movs	r2, #40	; 0x28
 8005262:	2101      	movs	r1, #1
 8005264:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2229      	movs	r2, #41	; 0x29
 800526a:	2102      	movs	r1, #2
 800526c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10e      	bne.n	8005292 <HAL_RTC_SetDate+0x4e>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	001a      	movs	r2, r3
 800527a:	2310      	movs	r3, #16
 800527c:	4013      	ands	r3, r2
 800527e:	d008      	beq.n	8005292 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	2210      	movs	r2, #16
 8005286:	4393      	bics	r3, r2
 8005288:	b2db      	uxtb	r3, r3
 800528a:	330a      	adds	r3, #10
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d11c      	bne.n	80052d2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	78db      	ldrb	r3, [r3, #3]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fa85 	bl	80057ac <RTC_ByteToBcd2>
 80052a2:	0003      	movs	r3, r0
 80052a4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	0018      	movs	r0, r3
 80052ac:	f000 fa7e 	bl	80057ac <RTC_ByteToBcd2>
 80052b0:	0003      	movs	r3, r0
 80052b2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052b4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	789b      	ldrb	r3, [r3, #2]
 80052ba:	0018      	movs	r0, r3
 80052bc:	f000 fa76 	bl	80057ac <RTC_ByteToBcd2>
 80052c0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052c2:	0022      	movs	r2, r4
 80052c4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e00e      	b.n	80052f0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	78db      	ldrb	r3, [r3, #3]
 80052d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052de:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80052e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	22ca      	movs	r2, #202	; 0xca
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2253      	movs	r2, #83	; 0x53
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005300:	2513      	movs	r5, #19
 8005302:	197c      	adds	r4, r7, r5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	0018      	movs	r0, r3
 8005308:	f000 f9c9 	bl	800569e <RTC_EnterInitMode>
 800530c:	0003      	movs	r3, r0
 800530e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005310:	0028      	movs	r0, r5
 8005312:	183b      	adds	r3, r7, r0
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10c      	bne.n	8005334 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4910      	ldr	r1, [pc, #64]	; (8005364 <HAL_RTC_SetDate+0x120>)
 8005322:	400a      	ands	r2, r1
 8005324:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005326:	183c      	adds	r4, r7, r0
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 f9fa 	bl	8005724 <RTC_ExitInitMode>
 8005330:	0003      	movs	r3, r0
 8005332:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	22ff      	movs	r2, #255	; 0xff
 800533a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800533c:	2313      	movs	r3, #19
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2229      	movs	r2, #41	; 0x29
 800534a:	2101      	movs	r1, #1
 800534c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2228      	movs	r2, #40	; 0x28
 8005352:	2100      	movs	r1, #0
 8005354:	5499      	strb	r1, [r3, r2]

  return status;
 8005356:	2313      	movs	r3, #19
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	781b      	ldrb	r3, [r3, #0]
}
 800535c:	0018      	movs	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	b006      	add	sp, #24
 8005362:	bdb0      	pop	{r4, r5, r7, pc}
 8005364:	00ffff3f 	.word	0x00ffff3f

08005368 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4a21      	ldr	r2, [pc, #132]	; (8005400 <HAL_RTC_GetDate+0x98>)
 800537c:	4013      	ands	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	0c1b      	lsrs	r3, r3, #16
 8005384:	b2da      	uxtb	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	0a1b      	lsrs	r3, r3, #8
 800538e:	b2db      	uxtb	r3, r3
 8005390:	221f      	movs	r2, #31
 8005392:	4013      	ands	r3, r2
 8005394:	b2da      	uxtb	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	223f      	movs	r2, #63	; 0x3f
 80053a0:	4013      	ands	r3, r2
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	0b5b      	lsrs	r3, r3, #13
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2207      	movs	r2, #7
 80053b0:	4013      	ands	r3, r2
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d11a      	bne.n	80053f4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	78db      	ldrb	r3, [r3, #3]
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 fa1a 	bl	80057fc <RTC_Bcd2ToByte>
 80053c8:	0003      	movs	r3, r0
 80053ca:	001a      	movs	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f000 fa11 	bl	80057fc <RTC_Bcd2ToByte>
 80053da:	0003      	movs	r3, r0
 80053dc:	001a      	movs	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	789b      	ldrb	r3, [r3, #2]
 80053e6:	0018      	movs	r0, r3
 80053e8:	f000 fa08 	bl	80057fc <RTC_Bcd2ToByte>
 80053ec:	0003      	movs	r3, r0
 80053ee:	001a      	movs	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b006      	add	sp, #24
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	00ffff3f 	.word	0x00ffff3f

08005404 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005404:	b590      	push	{r4, r7, lr}
 8005406:	b089      	sub	sp, #36	; 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2228      	movs	r2, #40	; 0x28
 8005414:	5c9b      	ldrb	r3, [r3, r2]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_RTC_SetAlarm+0x1a>
 800541a:	2302      	movs	r3, #2
 800541c:	e10c      	b.n	8005638 <HAL_RTC_SetAlarm+0x234>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2228      	movs	r2, #40	; 0x28
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2229      	movs	r2, #41	; 0x29
 800542a:	2102      	movs	r1, #2
 800542c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d136      	bne.n	80054a2 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2240      	movs	r2, #64	; 0x40
 800543c:	4013      	ands	r3, r2
 800543e:	d102      	bne.n	8005446 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2200      	movs	r2, #0
 8005444:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	0018      	movs	r0, r3
 800544c:	f000 f9ae 	bl	80057ac <RTC_ByteToBcd2>
 8005450:	0003      	movs	r3, r0
 8005452:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 f9a7 	bl	80057ac <RTC_ByteToBcd2>
 800545e:	0003      	movs	r3, r0
 8005460:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005462:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	789b      	ldrb	r3, [r3, #2]
 8005468:	0018      	movs	r0, r3
 800546a:	f000 f99f 	bl	80057ac <RTC_ByteToBcd2>
 800546e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005470:	0022      	movs	r2, r4
 8005472:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800547a:	431a      	orrs	r2, r3
 800547c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2220      	movs	r2, #32
 8005482:	5c9b      	ldrb	r3, [r3, r2]
 8005484:	0018      	movs	r0, r3
 8005486:	f000 f991 	bl	80057ac <RTC_ByteToBcd2>
 800548a:	0003      	movs	r3, r0
 800548c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800548e:	0022      	movs	r2, r4
 8005490:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005496:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800549c:	4313      	orrs	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	e022      	b.n	80054e8 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2240      	movs	r2, #64	; 0x40
 80054aa:	4013      	ands	r3, r2
 80054ac:	d102      	bne.n	80054b4 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2200      	movs	r2, #0
 80054b2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054c0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	78db      	ldrb	r3, [r3, #3]
 80054cc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2120      	movs	r1, #32
 80054d4:	5c5b      	ldrb	r3, [r3, r1]
 80054d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054e4:	4313      	orrs	r3, r2
 80054e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	22ca      	movs	r2, #202	; 0xca
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2253      	movs	r2, #83	; 0x53
 8005502:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	429a      	cmp	r2, r3
 800550e:	d143      	bne.n	8005598 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4949      	ldr	r1, [pc, #292]	; (8005640 <HAL_RTC_SetAlarm+0x23c>)
 800551c:	400a      	ands	r2, r1
 800551e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4946      	ldr	r1, [pc, #280]	; (8005644 <HAL_RTC_SetAlarm+0x240>)
 800552c:	400a      	ands	r2, r1
 800552e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005530:	f7fe fa56 	bl	80039e0 <HAL_GetTick>
 8005534:	0003      	movs	r3, r0
 8005536:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005538:	e016      	b.n	8005568 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800553a:	f7fe fa51 	bl	80039e0 <HAL_GetTick>
 800553e:	0002      	movs	r2, r0
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	1ad2      	subs	r2, r2, r3
 8005544:	23fa      	movs	r3, #250	; 0xfa
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	429a      	cmp	r2, r3
 800554a:	d90d      	bls.n	8005568 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	22ff      	movs	r2, #255	; 0xff
 8005552:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2229      	movs	r2, #41	; 0x29
 8005558:	2103      	movs	r1, #3
 800555a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2228      	movs	r2, #40	; 0x28
 8005560:	2100      	movs	r1, #0
 8005562:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e067      	b.n	8005638 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	4013      	ands	r3, r2
 8005572:	d0e2      	beq.n	800553a <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2180      	movs	r1, #128	; 0x80
 8005590:	0049      	lsls	r1, r1, #1
 8005592:	430a      	orrs	r2, r1
 8005594:	619a      	str	r2, [r3, #24]
 8005596:	e042      	b.n	800561e <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4929      	ldr	r1, [pc, #164]	; (8005648 <HAL_RTC_SetAlarm+0x244>)
 80055a4:	400a      	ands	r2, r1
 80055a6:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4926      	ldr	r1, [pc, #152]	; (800564c <HAL_RTC_SetAlarm+0x248>)
 80055b4:	400a      	ands	r2, r1
 80055b6:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80055b8:	f7fe fa12 	bl	80039e0 <HAL_GetTick>
 80055bc:	0003      	movs	r3, r0
 80055be:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80055c0:	e016      	b.n	80055f0 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80055c2:	f7fe fa0d 	bl	80039e0 <HAL_GetTick>
 80055c6:	0002      	movs	r2, r0
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	1ad2      	subs	r2, r2, r3
 80055cc:	23fa      	movs	r3, #250	; 0xfa
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d90d      	bls.n	80055f0 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	22ff      	movs	r2, #255	; 0xff
 80055da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2229      	movs	r2, #41	; 0x29
 80055e0:	2103      	movs	r1, #3
 80055e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2228      	movs	r2, #40	; 0x28
 80055e8:	2100      	movs	r1, #0
 80055ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e023      	b.n	8005638 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2202      	movs	r2, #2
 80055f8:	4013      	ands	r3, r2
 80055fa:	d0e2      	beq.n	80055c2 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2180      	movs	r1, #128	; 0x80
 8005618:	0089      	lsls	r1, r1, #2
 800561a:	430a      	orrs	r2, r1
 800561c:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	22ff      	movs	r2, #255	; 0xff
 8005624:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2229      	movs	r2, #41	; 0x29
 800562a:	2101      	movs	r1, #1
 800562c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2228      	movs	r2, #40	; 0x28
 8005632:	2100      	movs	r1, #0
 8005634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	0018      	movs	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	b009      	add	sp, #36	; 0x24
 800563e:	bd90      	pop	{r4, r7, pc}
 8005640:	fffffeff 	.word	0xfffffeff
 8005644:	ffffefff 	.word	0xffffefff
 8005648:	fffffdff 	.word	0xfffffdff
 800564c:	ffffdfff 	.word	0xffffdfff

08005650 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	21a0      	movs	r1, #160	; 0xa0
 8005664:	438a      	bics	r2, r1
 8005666:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005668:	f7fe f9ba 	bl	80039e0 <HAL_GetTick>
 800566c:	0003      	movs	r3, r0
 800566e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005670:	e00a      	b.n	8005688 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005672:	f7fe f9b5 	bl	80039e0 <HAL_GetTick>
 8005676:	0002      	movs	r2, r0
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1ad2      	subs	r2, r2, r3
 800567c:	23fa      	movs	r3, #250	; 0xfa
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	429a      	cmp	r2, r3
 8005682:	d901      	bls.n	8005688 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e006      	b.n	8005696 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	4013      	ands	r3, r2
 8005692:	d0ee      	beq.n	8005672 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	0018      	movs	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	b004      	add	sp, #16
 800569c:	bd80      	pop	{r7, pc}

0800569e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80056a6:	230f      	movs	r3, #15
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2240      	movs	r2, #64	; 0x40
 80056b6:	4013      	ands	r3, r2
 80056b8:	d12c      	bne.n	8005714 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	430a      	orrs	r2, r1
 80056c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80056ca:	f7fe f989 	bl	80039e0 <HAL_GetTick>
 80056ce:	0003      	movs	r3, r0
 80056d0:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056d2:	e014      	b.n	80056fe <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80056d4:	f7fe f984 	bl	80039e0 <HAL_GetTick>
 80056d8:	0002      	movs	r2, r0
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	1ad2      	subs	r2, r2, r3
 80056de:	200f      	movs	r0, #15
 80056e0:	183b      	adds	r3, r7, r0
 80056e2:	1839      	adds	r1, r7, r0
 80056e4:	7809      	ldrb	r1, [r1, #0]
 80056e6:	7019      	strb	r1, [r3, #0]
 80056e8:	23fa      	movs	r3, #250	; 0xfa
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d906      	bls.n	80056fe <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80056f0:	183b      	adds	r3, r7, r0
 80056f2:	2203      	movs	r2, #3
 80056f4:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2229      	movs	r2, #41	; 0x29
 80056fa:	2103      	movs	r1, #3
 80056fc:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2240      	movs	r2, #64	; 0x40
 8005706:	4013      	ands	r3, r2
 8005708:	d104      	bne.n	8005714 <RTC_EnterInitMode+0x76>
 800570a:	230f      	movs	r3, #15
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d1df      	bne.n	80056d4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005714:	230f      	movs	r3, #15
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	781b      	ldrb	r3, [r3, #0]
}
 800571a:	0018      	movs	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	b004      	add	sp, #16
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572c:	240f      	movs	r4, #15
 800572e:	193b      	adds	r3, r7, r4
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005734:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <RTC_ExitInitMode+0x84>)
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <RTC_ExitInitMode+0x84>)
 800573a:	2180      	movs	r1, #128	; 0x80
 800573c:	438a      	bics	r2, r1
 800573e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005740:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <RTC_ExitInitMode+0x84>)
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2220      	movs	r2, #32
 8005746:	4013      	ands	r3, r2
 8005748:	d10d      	bne.n	8005766 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	0018      	movs	r0, r3
 800574e:	f7ff ff7f 	bl	8005650 <HAL_RTC_WaitForSynchro>
 8005752:	1e03      	subs	r3, r0, #0
 8005754:	d021      	beq.n	800579a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2229      	movs	r2, #41	; 0x29
 800575a:	2103      	movs	r1, #3
 800575c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800575e:	193b      	adds	r3, r7, r4
 8005760:	2203      	movs	r2, #3
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e019      	b.n	800579a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <RTC_ExitInitMode+0x84>)
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <RTC_ExitInitMode+0x84>)
 800576c:	2120      	movs	r1, #32
 800576e:	438a      	bics	r2, r1
 8005770:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0018      	movs	r0, r3
 8005776:	f7ff ff6b 	bl	8005650 <HAL_RTC_WaitForSynchro>
 800577a:	1e03      	subs	r3, r0, #0
 800577c:	d007      	beq.n	800578e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2229      	movs	r2, #41	; 0x29
 8005782:	2103      	movs	r1, #3
 8005784:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005786:	230f      	movs	r3, #15
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	2203      	movs	r2, #3
 800578c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <RTC_ExitInitMode+0x84>)
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <RTC_ExitInitMode+0x84>)
 8005794:	2120      	movs	r1, #32
 8005796:	430a      	orrs	r2, r1
 8005798:	619a      	str	r2, [r3, #24]
  }

  return status;
 800579a:	230f      	movs	r3, #15
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	781b      	ldrb	r3, [r3, #0]
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b005      	add	sp, #20
 80057a6:	bd90      	pop	{r4, r7, pc}
 80057a8:	40002800 	.word	0x40002800

080057ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	0002      	movs	r2, r0
 80057b4:	1dfb      	adds	r3, r7, #7
 80057b6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80057bc:	230b      	movs	r3, #11
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	1dfa      	adds	r2, r7, #7
 80057c2:	7812      	ldrb	r2, [r2, #0]
 80057c4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80057c6:	e008      	b.n	80057da <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80057ce:	220b      	movs	r2, #11
 80057d0:	18bb      	adds	r3, r7, r2
 80057d2:	18ba      	adds	r2, r7, r2
 80057d4:	7812      	ldrb	r2, [r2, #0]
 80057d6:	3a0a      	subs	r2, #10
 80057d8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80057da:	210b      	movs	r1, #11
 80057dc:	187b      	adds	r3, r7, r1
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b09      	cmp	r3, #9
 80057e2:	d8f1      	bhi.n	80057c8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	187b      	adds	r3, r7, r1
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	b2db      	uxtb	r3, r3
}
 80057f4:	0018      	movs	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b004      	add	sp, #16
 80057fa:	bd80      	pop	{r7, pc}

080057fc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	0002      	movs	r2, r0
 8005804:	1dfb      	adds	r3, r7, #7
 8005806:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005808:	1dfb      	adds	r3, r7, #7
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	b2db      	uxtb	r3, r3
 8005810:	001a      	movs	r2, r3
 8005812:	0013      	movs	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	189b      	adds	r3, r3, r2
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	b2da      	uxtb	r2, r3
 8005820:	1dfb      	adds	r3, r7, #7
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	210f      	movs	r1, #15
 8005826:	400b      	ands	r3, r1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	18d3      	adds	r3, r2, r3
 800582c:	b2db      	uxtb	r3, r3
}
 800582e:	0018      	movs	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	b004      	add	sp, #16
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2228      	movs	r2, #40	; 0x28
 8005842:	5c9b      	ldrb	r3, [r3, r2]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_RTCEx_EnableBypassShadow+0x16>
 8005848:	2302      	movs	r3, #2
 800584a:	e024      	b.n	8005896 <HAL_RTCEx_EnableBypassShadow+0x60>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2228      	movs	r2, #40	; 0x28
 8005850:	2101      	movs	r1, #1
 8005852:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2229      	movs	r2, #41	; 0x29
 8005858:	2102      	movs	r1, #2
 800585a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	22ca      	movs	r2, #202	; 0xca
 8005862:	625a      	str	r2, [r3, #36]	; 0x24
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2253      	movs	r2, #83	; 0x53
 800586a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2120      	movs	r1, #32
 8005878:	430a      	orrs	r2, r1
 800587a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	22ff      	movs	r2, #255	; 0xff
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2229      	movs	r2, #41	; 0x29
 8005888:	2101      	movs	r1, #1
 800588a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2228      	movs	r2, #40	; 0x28
 8005890:	2100      	movs	r1, #0
 8005892:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	0018      	movs	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	b002      	add	sp, #8
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2228      	movs	r2, #40	; 0x28
 80058aa:	5c9b      	ldrb	r3, [r3, r2]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_RTCEx_DisableBypassShadow+0x16>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e024      	b.n	80058fe <HAL_RTCEx_DisableBypassShadow+0x60>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2228      	movs	r2, #40	; 0x28
 80058b8:	2101      	movs	r1, #1
 80058ba:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2229      	movs	r2, #41	; 0x29
 80058c0:	2102      	movs	r1, #2
 80058c2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	22ca      	movs	r2, #202	; 0xca
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2253      	movs	r2, #83	; 0x53
 80058d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	21df      	movs	r1, #223	; 0xdf
 80058e0:	400a      	ands	r2, r1
 80058e2:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	22ff      	movs	r2, #255	; 0xff
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2229      	movs	r2, #41	; 0x29
 80058f0:	2101      	movs	r1, #1
 80058f2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2228      	movs	r2, #40	; 0x28
 80058f8:	2100      	movs	r1, #0
 80058fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	0018      	movs	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	b002      	add	sp, #8
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e0a8      	b.n	8005a6c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	2382      	movs	r3, #130	; 0x82
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	429a      	cmp	r2, r3
 800592c:	d009      	beq.n	8005942 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	61da      	str	r2, [r3, #28]
 8005934:	e005      	b.n	8005942 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	225d      	movs	r2, #93	; 0x5d
 800594c:	5c9b      	ldrb	r3, [r3, r2]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	225c      	movs	r2, #92	; 0x5c
 8005958:	2100      	movs	r1, #0
 800595a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	0018      	movs	r0, r3
 8005960:	f7fd fcfc 	bl	800335c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	225d      	movs	r2, #93	; 0x5d
 8005968:	2102      	movs	r1, #2
 800596a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2140      	movs	r1, #64	; 0x40
 8005978:	438a      	bics	r2, r1
 800597a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	23e0      	movs	r3, #224	; 0xe0
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	429a      	cmp	r2, r3
 8005986:	d902      	bls.n	800598e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e002      	b.n	8005994 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	015b      	lsls	r3, r3, #5
 8005992:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	23f0      	movs	r3, #240	; 0xf0
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	429a      	cmp	r2, r3
 800599e:	d008      	beq.n	80059b2 <HAL_SPI_Init+0xaa>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	23e0      	movs	r3, #224	; 0xe0
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d002      	beq.n	80059b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	2382      	movs	r3, #130	; 0x82
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	401a      	ands	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6899      	ldr	r1, [r3, #8]
 80059c0:	2384      	movs	r3, #132	; 0x84
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	400b      	ands	r3, r1
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2102      	movs	r1, #2
 80059ce:	400b      	ands	r3, r1
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2101      	movs	r1, #1
 80059d8:	400b      	ands	r3, r1
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6999      	ldr	r1, [r3, #24]
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	400b      	ands	r3, r1
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	2138      	movs	r1, #56	; 0x38
 80059ee:	400b      	ands	r3, r1
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	400b      	ands	r3, r1
 80059fa:	431a      	orrs	r2, r3
 80059fc:	0011      	movs	r1, r2
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	401a      	ands	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	2204      	movs	r2, #4
 8005a18:	401a      	ands	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	2110      	movs	r1, #16
 8005a20:	400b      	ands	r3, r1
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	2108      	movs	r1, #8
 8005a2a:	400b      	ands	r3, r1
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68d9      	ldr	r1, [r3, #12]
 8005a32:	23f0      	movs	r3, #240	; 0xf0
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	400b      	ands	r3, r1
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	0011      	movs	r1, r2
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	2380      	movs	r3, #128	; 0x80
 8005a40:	015b      	lsls	r3, r3, #5
 8005a42:	401a      	ands	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4907      	ldr	r1, [pc, #28]	; (8005a74 <HAL_SPI_Init+0x16c>)
 8005a58:	400a      	ands	r2, r1
 8005a5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	225d      	movs	r2, #93	; 0x5d
 8005a66:	2101      	movs	r1, #1
 8005a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b004      	add	sp, #16
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	fffff7ff 	.word	0xfffff7ff

08005a78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	1dbb      	adds	r3, r7, #6
 8005a86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a88:	231f      	movs	r3, #31
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	225c      	movs	r2, #92	; 0x5c
 8005a94:	5c9b      	ldrb	r3, [r3, r2]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_SPI_Transmit+0x26>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e140      	b.n	8005d20 <HAL_SPI_Transmit+0x2a8>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	225c      	movs	r2, #92	; 0x5c
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aa6:	f7fd ff9b 	bl	80039e0 <HAL_GetTick>
 8005aaa:	0003      	movs	r3, r0
 8005aac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005aae:	2316      	movs	r3, #22
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	1dba      	adds	r2, r7, #6
 8005ab4:	8812      	ldrh	r2, [r2, #0]
 8005ab6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	225d      	movs	r2, #93	; 0x5d
 8005abc:	5c9b      	ldrb	r3, [r3, r2]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d004      	beq.n	8005ace <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005ac4:	231f      	movs	r3, #31
 8005ac6:	18fb      	adds	r3, r7, r3
 8005ac8:	2202      	movs	r2, #2
 8005aca:	701a      	strb	r2, [r3, #0]
    goto error;
 8005acc:	e11d      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_SPI_Transmit+0x64>
 8005ad4:	1dbb      	adds	r3, r7, #6
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005adc:	231f      	movs	r3, #31
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ae4:	e111      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	225d      	movs	r2, #93	; 0x5d
 8005aea:	2103      	movs	r1, #3
 8005aec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1dba      	adds	r2, r7, #6
 8005afe:	8812      	ldrh	r2, [r2, #0]
 8005b00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1dba      	adds	r2, r7, #6
 8005b06:	8812      	ldrh	r2, [r2, #0]
 8005b08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2244      	movs	r2, #68	; 0x44
 8005b14:	2100      	movs	r1, #0
 8005b16:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2246      	movs	r2, #70	; 0x46
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d110      	bne.n	8005b5a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2140      	movs	r1, #64	; 0x40
 8005b44:	438a      	bics	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2180      	movs	r1, #128	; 0x80
 8005b54:	01c9      	lsls	r1, r1, #7
 8005b56:	430a      	orrs	r2, r1
 8005b58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2240      	movs	r2, #64	; 0x40
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b40      	cmp	r3, #64	; 0x40
 8005b66:	d007      	beq.n	8005b78 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2140      	movs	r1, #64	; 0x40
 8005b74:	430a      	orrs	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	23e0      	movs	r3, #224	; 0xe0
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d94e      	bls.n	8005c22 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <HAL_SPI_Transmit+0x11e>
 8005b8c:	2316      	movs	r3, #22
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d13f      	bne.n	8005c16 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	881a      	ldrh	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	1c9a      	adds	r2, r3, #2
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bba:	e02c      	b.n	8005c16 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d112      	bne.n	8005bf0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	881a      	ldrh	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	1c9a      	adds	r2, r3, #2
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bee:	e012      	b.n	8005c16 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf0:	f7fd fef6 	bl	80039e0 <HAL_GetTick>
 8005bf4:	0002      	movs	r2, r0
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d802      	bhi.n	8005c06 <HAL_SPI_Transmit+0x18e>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	d102      	bne.n	8005c0c <HAL_SPI_Transmit+0x194>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005c0c:	231f      	movs	r3, #31
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	2203      	movs	r2, #3
 8005c12:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c14:	e079      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1cd      	bne.n	8005bbc <HAL_SPI_Transmit+0x144>
 8005c20:	e04f      	b.n	8005cc2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <HAL_SPI_Transmit+0x1bc>
 8005c2a:	2316      	movs	r3, #22
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d141      	bne.n	8005cb8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005c5a:	e02d      	b.n	8005cb8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2202      	movs	r2, #2
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d113      	bne.n	8005c92 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c90:	e012      	b.n	8005cb8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c92:	f7fd fea5 	bl	80039e0 <HAL_GetTick>
 8005c96:	0002      	movs	r2, r0
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d802      	bhi.n	8005ca8 <HAL_SPI_Transmit+0x230>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	d102      	bne.n	8005cae <HAL_SPI_Transmit+0x236>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005cae:	231f      	movs	r3, #31
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	701a      	strb	r2, [r3, #0]
          goto error;
 8005cb6:	e028      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1cc      	bne.n	8005c5c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 fcd9 	bl	8006680 <SPI_EndRxTxTransaction>
 8005cce:	1e03      	subs	r3, r0, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005cfe:	231f      	movs	r3, #31
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e000      	b.n	8005d0a <HAL_SPI_Transmit+0x292>
  }

error:
 8005d08:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	225d      	movs	r2, #93	; 0x5d
 8005d0e:	2101      	movs	r1, #1
 8005d10:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	225c      	movs	r2, #92	; 0x5c
 8005d16:	2100      	movs	r1, #0
 8005d18:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d1a:	231f      	movs	r3, #31
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	781b      	ldrb	r3, [r3, #0]
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b008      	add	sp, #32
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	1dbb      	adds	r3, r7, #6
 8005d36:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d38:	2317      	movs	r3, #23
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	2382      	movs	r3, #130	; 0x82
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d113      	bne.n	8005d74 <HAL_SPI_Receive+0x4c>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10f      	bne.n	8005d74 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	225d      	movs	r2, #93	; 0x5d
 8005d58:	2104      	movs	r1, #4
 8005d5a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d5c:	1dbb      	adds	r3, r7, #6
 8005d5e:	881c      	ldrh	r4, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	0023      	movs	r3, r4
 8005d6c:	f000 f928 	bl	8005fc0 <HAL_SPI_TransmitReceive>
 8005d70:	0003      	movs	r3, r0
 8005d72:	e11c      	b.n	8005fae <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	225c      	movs	r2, #92	; 0x5c
 8005d78:	5c9b      	ldrb	r3, [r3, r2]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_SPI_Receive+0x5a>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e115      	b.n	8005fae <HAL_SPI_Receive+0x286>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	225c      	movs	r2, #92	; 0x5c
 8005d86:	2101      	movs	r1, #1
 8005d88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d8a:	f7fd fe29 	bl	80039e0 <HAL_GetTick>
 8005d8e:	0003      	movs	r3, r0
 8005d90:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	225d      	movs	r2, #93	; 0x5d
 8005d96:	5c9b      	ldrb	r3, [r3, r2]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d004      	beq.n	8005da8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005d9e:	2317      	movs	r3, #23
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	2202      	movs	r2, #2
 8005da4:	701a      	strb	r2, [r3, #0]
    goto error;
 8005da6:	e0f7      	b.n	8005f98 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_SPI_Receive+0x8e>
 8005dae:	1dbb      	adds	r3, r7, #6
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005db6:	2317      	movs	r3, #23
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	2201      	movs	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
    goto error;
 8005dbe:	e0eb      	b.n	8005f98 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	225d      	movs	r2, #93	; 0x5d
 8005dc4:	2104      	movs	r1, #4
 8005dc6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	1dba      	adds	r2, r7, #6
 8005dd8:	2144      	movs	r1, #68	; 0x44
 8005dda:	8812      	ldrh	r2, [r2, #0]
 8005ddc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1dba      	adds	r2, r7, #6
 8005de2:	2146      	movs	r1, #70	; 0x46
 8005de4:	8812      	ldrh	r2, [r2, #0]
 8005de6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	23e0      	movs	r3, #224	; 0xe0
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d908      	bls.n	8005e24 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4966      	ldr	r1, [pc, #408]	; (8005fb8 <HAL_SPI_Receive+0x290>)
 8005e1e:	400a      	ands	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	e008      	b.n	8005e36 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2180      	movs	r1, #128	; 0x80
 8005e30:	0149      	lsls	r1, r1, #5
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d10f      	bne.n	8005e62 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2140      	movs	r1, #64	; 0x40
 8005e4e:	438a      	bics	r2, r1
 8005e50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4957      	ldr	r1, [pc, #348]	; (8005fbc <HAL_SPI_Receive+0x294>)
 8005e5e:	400a      	ands	r2, r1
 8005e60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2240      	movs	r2, #64	; 0x40
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d007      	beq.n	8005e80 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2140      	movs	r1, #64	; 0x40
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	23e0      	movs	r3, #224	; 0xe0
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d900      	bls.n	8005e8e <HAL_SPI_Receive+0x166>
 8005e8c:	e069      	b.n	8005f62 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e8e:	e031      	b.n	8005ef4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2201      	movs	r2, #1
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d117      	bne.n	8005ece <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	001a      	movs	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2246      	movs	r2, #70	; 0x46
 8005ebe:	5a9b      	ldrh	r3, [r3, r2]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b299      	uxth	r1, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2246      	movs	r2, #70	; 0x46
 8005eca:	5299      	strh	r1, [r3, r2]
 8005ecc:	e012      	b.n	8005ef4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ece:	f7fd fd87 	bl	80039e0 <HAL_GetTick>
 8005ed2:	0002      	movs	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d802      	bhi.n	8005ee4 <HAL_SPI_Receive+0x1bc>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	d102      	bne.n	8005eea <HAL_SPI_Receive+0x1c2>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005eea:	2317      	movs	r3, #23
 8005eec:	18fb      	adds	r3, r7, r3
 8005eee:	2203      	movs	r2, #3
 8005ef0:	701a      	strb	r2, [r3, #0]
          goto error;
 8005ef2:	e051      	b.n	8005f98 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2246      	movs	r2, #70	; 0x46
 8005ef8:	5a9b      	ldrh	r3, [r3, r2]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1c7      	bne.n	8005e90 <HAL_SPI_Receive+0x168>
 8005f00:	e035      	b.n	8005f6e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d115      	bne.n	8005f3c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	b292      	uxth	r2, r2
 8005f1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	1c9a      	adds	r2, r3, #2
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2246      	movs	r2, #70	; 0x46
 8005f2c:	5a9b      	ldrh	r3, [r3, r2]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b299      	uxth	r1, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2246      	movs	r2, #70	; 0x46
 8005f38:	5299      	strh	r1, [r3, r2]
 8005f3a:	e012      	b.n	8005f62 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f3c:	f7fd fd50 	bl	80039e0 <HAL_GetTick>
 8005f40:	0002      	movs	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d802      	bhi.n	8005f52 <HAL_SPI_Receive+0x22a>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	d102      	bne.n	8005f58 <HAL_SPI_Receive+0x230>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d104      	bne.n	8005f62 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005f58:	2317      	movs	r3, #23
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005f60:	e01a      	b.n	8005f98 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2246      	movs	r2, #70	; 0x46
 8005f66:	5a9b      	ldrh	r3, [r3, r2]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1c9      	bne.n	8005f02 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f000 fb25 	bl	80065c4 <SPI_EndRxTransaction>
 8005f7a:	1e03      	subs	r3, r0, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005f8c:	2317      	movs	r3, #23
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e000      	b.n	8005f98 <HAL_SPI_Receive+0x270>
  }

error :
 8005f96:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	225d      	movs	r2, #93	; 0x5d
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	225c      	movs	r2, #92	; 0x5c
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005fa8:	2317      	movs	r3, #23
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	781b      	ldrb	r3, [r3, #0]
}
 8005fae:	0018      	movs	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b007      	add	sp, #28
 8005fb4:	bd90      	pop	{r4, r7, pc}
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	ffffefff 	.word	0xffffefff
 8005fbc:	ffffbfff 	.word	0xffffbfff

08005fc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	001a      	movs	r2, r3
 8005fce:	1cbb      	adds	r3, r7, #2
 8005fd0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fd6:	2323      	movs	r3, #35	; 0x23
 8005fd8:	18fb      	adds	r3, r7, r3
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	225c      	movs	r2, #92	; 0x5c
 8005fe2:	5c9b      	ldrb	r3, [r3, r2]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_SPI_TransmitReceive+0x2c>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e1b5      	b.n	8006358 <HAL_SPI_TransmitReceive+0x398>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	225c      	movs	r2, #92	; 0x5c
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ff4:	f7fd fcf4 	bl	80039e0 <HAL_GetTick>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ffc:	201b      	movs	r0, #27
 8005ffe:	183b      	adds	r3, r7, r0
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	215d      	movs	r1, #93	; 0x5d
 8006004:	5c52      	ldrb	r2, [r2, r1]
 8006006:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800600e:	2312      	movs	r3, #18
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	1cba      	adds	r2, r7, #2
 8006014:	8812      	ldrh	r2, [r2, #0]
 8006016:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006018:	183b      	adds	r3, r7, r0
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d011      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x84>
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	2382      	movs	r3, #130	; 0x82
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	429a      	cmp	r2, r3
 8006028:	d107      	bne.n	800603a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <HAL_SPI_TransmitReceive+0x7a>
 8006032:	183b      	adds	r3, r7, r0
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b04      	cmp	r3, #4
 8006038:	d004      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800603a:	2323      	movs	r3, #35	; 0x23
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	2202      	movs	r2, #2
 8006040:	701a      	strb	r2, [r3, #0]
    goto error;
 8006042:	e17e      	b.n	8006342 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d006      	beq.n	8006058 <HAL_SPI_TransmitReceive+0x98>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_SPI_TransmitReceive+0x98>
 8006050:	1cbb      	adds	r3, r7, #2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006058:	2323      	movs	r3, #35	; 0x23
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006060:	e16f      	b.n	8006342 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	225d      	movs	r2, #93	; 0x5d
 8006066:	5c9b      	ldrb	r3, [r3, r2]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b04      	cmp	r3, #4
 800606c:	d003      	beq.n	8006076 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	225d      	movs	r2, #93	; 0x5d
 8006072:	2105      	movs	r1, #5
 8006074:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	1cba      	adds	r2, r7, #2
 8006086:	2146      	movs	r1, #70	; 0x46
 8006088:	8812      	ldrh	r2, [r2, #0]
 800608a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1cba      	adds	r2, r7, #2
 8006090:	2144      	movs	r1, #68	; 0x44
 8006092:	8812      	ldrh	r2, [r2, #0]
 8006094:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	1cba      	adds	r2, r7, #2
 80060a0:	8812      	ldrh	r2, [r2, #0]
 80060a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1cba      	adds	r2, r7, #2
 80060a8:	8812      	ldrh	r2, [r2, #0]
 80060aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	23e0      	movs	r3, #224	; 0xe0
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d908      	bls.n	80060d6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	49a4      	ldr	r1, [pc, #656]	; (8006360 <HAL_SPI_TransmitReceive+0x3a0>)
 80060d0:	400a      	ands	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
 80060d4:	e008      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2180      	movs	r1, #128	; 0x80
 80060e2:	0149      	lsls	r1, r1, #5
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2240      	movs	r2, #64	; 0x40
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d007      	beq.n	8006106 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2140      	movs	r1, #64	; 0x40
 8006102:	430a      	orrs	r2, r1
 8006104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	23e0      	movs	r3, #224	; 0xe0
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	429a      	cmp	r2, r3
 8006110:	d800      	bhi.n	8006114 <HAL_SPI_TransmitReceive+0x154>
 8006112:	e07f      	b.n	8006214 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_SPI_TransmitReceive+0x168>
 800611c:	2312      	movs	r3, #18
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d000      	beq.n	8006128 <HAL_SPI_TransmitReceive+0x168>
 8006126:	e069      	b.n	80061fc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	881a      	ldrh	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	1c9a      	adds	r2, r3, #2
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800614c:	e056      	b.n	80061fc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2202      	movs	r2, #2
 8006156:	4013      	ands	r3, r2
 8006158:	2b02      	cmp	r3, #2
 800615a:	d11b      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x1d4>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <HAL_SPI_TransmitReceive+0x1d4>
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	2b01      	cmp	r3, #1
 800616a:	d113      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	881a      	ldrh	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	1c9a      	adds	r2, r3, #2
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2201      	movs	r2, #1
 800619c:	4013      	ands	r3, r2
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d11c      	bne.n	80061dc <HAL_SPI_TransmitReceive+0x21c>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2246      	movs	r2, #70	; 0x46
 80061a6:	5a9b      	ldrh	r3, [r3, r2]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d016      	beq.n	80061dc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	b292      	uxth	r2, r2
 80061ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	1c9a      	adds	r2, r3, #2
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2246      	movs	r2, #70	; 0x46
 80061ca:	5a9b      	ldrh	r3, [r3, r2]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b299      	uxth	r1, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2246      	movs	r2, #70	; 0x46
 80061d6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061d8:	2301      	movs	r3, #1
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061dc:	f7fd fc00 	bl	80039e0 <HAL_GetTick>
 80061e0:	0002      	movs	r2, r0
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d807      	bhi.n	80061fc <HAL_SPI_TransmitReceive+0x23c>
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	3301      	adds	r3, #1
 80061f0:	d004      	beq.n	80061fc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80061f2:	2323      	movs	r3, #35	; 0x23
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	2203      	movs	r2, #3
 80061f8:	701a      	strb	r2, [r3, #0]
        goto error;
 80061fa:	e0a2      	b.n	8006342 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1a3      	bne.n	800614e <HAL_SPI_TransmitReceive+0x18e>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2246      	movs	r2, #70	; 0x46
 800620a:	5a9b      	ldrh	r3, [r3, r2]
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d19d      	bne.n	800614e <HAL_SPI_TransmitReceive+0x18e>
 8006212:	e085      	b.n	8006320 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x268>
 800621c:	2312      	movs	r3, #18
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d000      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x268>
 8006226:	e070      	b.n	800630a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	7812      	ldrb	r2, [r2, #0]
 8006234:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800624e:	e05c      	b.n	800630a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2202      	movs	r2, #2
 8006258:	4013      	ands	r3, r2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d11c      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x2d8>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d017      	beq.n	8006298 <HAL_SPI_TransmitReceive+0x2d8>
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	2b01      	cmp	r3, #1
 800626c:	d114      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	7812      	ldrb	r2, [r2, #0]
 800627a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2201      	movs	r2, #1
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d11e      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x324>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2246      	movs	r2, #70	; 0x46
 80062aa:	5a9b      	ldrh	r3, [r3, r2]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d018      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	001a      	movs	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	7812      	ldrb	r2, [r2, #0]
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2246      	movs	r2, #70	; 0x46
 80062d2:	5a9b      	ldrh	r3, [r3, r2]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b299      	uxth	r1, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2246      	movs	r2, #70	; 0x46
 80062de:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062e0:	2301      	movs	r3, #1
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062e4:	f7fd fb7c 	bl	80039e0 <HAL_GetTick>
 80062e8:	0002      	movs	r2, r0
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d802      	bhi.n	80062fa <HAL_SPI_TransmitReceive+0x33a>
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	3301      	adds	r3, #1
 80062f8:	d102      	bne.n	8006300 <HAL_SPI_TransmitReceive+0x340>
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006300:	2323      	movs	r3, #35	; 0x23
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	2203      	movs	r2, #3
 8006306:	701a      	strb	r2, [r3, #0]
        goto error;
 8006308:	e01b      	b.n	8006342 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d19d      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x290>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2246      	movs	r2, #70	; 0x46
 8006318:	5a9b      	ldrh	r3, [r3, r2]
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d197      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	0018      	movs	r0, r3
 8006328:	f000 f9aa 	bl	8006680 <SPI_EndRxTxTransaction>
 800632c:	1e03      	subs	r3, r0, #0
 800632e:	d007      	beq.n	8006340 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006330:	2323      	movs	r3, #35	; 0x23
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	2201      	movs	r2, #1
 8006336:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	661a      	str	r2, [r3, #96]	; 0x60
 800633e:	e000      	b.n	8006342 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006340:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	225d      	movs	r2, #93	; 0x5d
 8006346:	2101      	movs	r1, #1
 8006348:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	225c      	movs	r2, #92	; 0x5c
 800634e:	2100      	movs	r1, #0
 8006350:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006352:	2323      	movs	r3, #35	; 0x23
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	781b      	ldrb	r3, [r3, #0]
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b00a      	add	sp, #40	; 0x28
 800635e:	bd80      	pop	{r7, pc}
 8006360:	ffffefff 	.word	0xffffefff

08006364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	1dfb      	adds	r3, r7, #7
 8006372:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006374:	f7fd fb34 	bl	80039e0 <HAL_GetTick>
 8006378:	0002      	movs	r2, r0
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	18d3      	adds	r3, r2, r3
 8006382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006384:	f7fd fb2c 	bl	80039e0 <HAL_GetTick>
 8006388:	0003      	movs	r3, r0
 800638a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800638c:	4b3a      	ldr	r3, [pc, #232]	; (8006478 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	015b      	lsls	r3, r3, #5
 8006392:	0d1b      	lsrs	r3, r3, #20
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	4353      	muls	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800639a:	e058      	b.n	800644e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	3301      	adds	r3, #1
 80063a0:	d055      	beq.n	800644e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063a2:	f7fd fb1d 	bl	80039e0 <HAL_GetTick>
 80063a6:	0002      	movs	r2, r0
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d902      	bls.n	80063b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d142      	bne.n	800643e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	21e0      	movs	r1, #224	; 0xe0
 80063c4:	438a      	bics	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	2382      	movs	r3, #130	; 0x82
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d113      	bne.n	80063fc <SPI_WaitFlagStateUntilTimeout+0x98>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	2380      	movs	r3, #128	; 0x80
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	429a      	cmp	r2, r3
 80063de:	d005      	beq.n	80063ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d107      	bne.n	80063fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2140      	movs	r1, #64	; 0x40
 80063f8:	438a      	bics	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006400:	2380      	movs	r3, #128	; 0x80
 8006402:	019b      	lsls	r3, r3, #6
 8006404:	429a      	cmp	r2, r3
 8006406:	d110      	bne.n	800642a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	491a      	ldr	r1, [pc, #104]	; (800647c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006414:	400a      	ands	r2, r1
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2180      	movs	r1, #128	; 0x80
 8006424:	0189      	lsls	r1, r1, #6
 8006426:	430a      	orrs	r2, r1
 8006428:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	225d      	movs	r2, #93	; 0x5d
 800642e:	2101      	movs	r1, #1
 8006430:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	225c      	movs	r2, #92	; 0x5c
 8006436:	2100      	movs	r1, #0
 8006438:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e017      	b.n	800646e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	3b01      	subs	r3, #1
 800644c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	4013      	ands	r3, r2
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	425a      	negs	r2, r3
 800645e:	4153      	adcs	r3, r2
 8006460:	b2db      	uxtb	r3, r3
 8006462:	001a      	movs	r2, r3
 8006464:	1dfb      	adds	r3, r7, #7
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d197      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	0018      	movs	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	b008      	add	sp, #32
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	20000020 	.word	0x20000020
 800647c:	ffffdfff 	.word	0xffffdfff

08006480 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08a      	sub	sp, #40	; 0x28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800648e:	2317      	movs	r3, #23
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006496:	f7fd faa3 	bl	80039e0 <HAL_GetTick>
 800649a:	0002      	movs	r2, r0
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	18d3      	adds	r3, r2, r3
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80064a6:	f7fd fa9b 	bl	80039e0 <HAL_GetTick>
 80064aa:	0003      	movs	r3, r0
 80064ac:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80064b6:	4b41      	ldr	r3, [pc, #260]	; (80065bc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	0013      	movs	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	189b      	adds	r3, r3, r2
 80064c0:	00da      	lsls	r2, r3, #3
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	0d1b      	lsrs	r3, r3, #20
 80064c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c8:	4353      	muls	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80064cc:	e068      	b.n	80065a0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	23c0      	movs	r3, #192	; 0xc0
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d10a      	bne.n	80064ee <SPI_WaitFifoStateUntilTimeout+0x6e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	2117      	movs	r1, #23
 80064e6:	187b      	adds	r3, r7, r1
 80064e8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064ea:	187b      	adds	r3, r7, r1
 80064ec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	d055      	beq.n	80065a0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064f4:	f7fd fa74 	bl	80039e0 <HAL_GetTick>
 80064f8:	0002      	movs	r2, r0
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006500:	429a      	cmp	r2, r3
 8006502:	d902      	bls.n	800650a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d142      	bne.n	8006590 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	21e0      	movs	r1, #224	; 0xe0
 8006516:	438a      	bics	r2, r1
 8006518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	2382      	movs	r3, #130	; 0x82
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	429a      	cmp	r2, r3
 8006524:	d113      	bne.n	800654e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	2380      	movs	r3, #128	; 0x80
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	429a      	cmp	r2, r3
 8006530:	d005      	beq.n	800653e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	2380      	movs	r3, #128	; 0x80
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	429a      	cmp	r2, r3
 800653c:	d107      	bne.n	800654e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2140      	movs	r1, #64	; 0x40
 800654a:	438a      	bics	r2, r1
 800654c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	019b      	lsls	r3, r3, #6
 8006556:	429a      	cmp	r2, r3
 8006558:	d110      	bne.n	800657c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4916      	ldr	r1, [pc, #88]	; (80065c0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006566:	400a      	ands	r2, r1
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2180      	movs	r1, #128	; 0x80
 8006576:	0189      	lsls	r1, r1, #6
 8006578:	430a      	orrs	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	225d      	movs	r2, #93	; 0x5d
 8006580:	2101      	movs	r1, #1
 8006582:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	225c      	movs	r2, #92	; 0x5c
 8006588:	2100      	movs	r1, #0
 800658a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e010      	b.n	80065b2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	3b01      	subs	r3, #1
 800659e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4013      	ands	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d18e      	bne.n	80064ce <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	0018      	movs	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b00a      	add	sp, #40	; 0x28
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	20000020 	.word	0x20000020
 80065c0:	ffffdfff 	.word	0xffffdfff

080065c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	2382      	movs	r3, #130	; 0x82
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	429a      	cmp	r2, r3
 80065da:	d113      	bne.n	8006604 <SPI_EndRxTransaction+0x40>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d005      	beq.n	80065f4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d107      	bne.n	8006604 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2140      	movs	r1, #64	; 0x40
 8006600:	438a      	bics	r2, r1
 8006602:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	0013      	movs	r3, r2
 800660e:	2200      	movs	r2, #0
 8006610:	2180      	movs	r1, #128	; 0x80
 8006612:	f7ff fea7 	bl	8006364 <SPI_WaitFlagStateUntilTimeout>
 8006616:	1e03      	subs	r3, r0, #0
 8006618:	d007      	beq.n	800662a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661e:	2220      	movs	r2, #32
 8006620:	431a      	orrs	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e026      	b.n	8006678 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	2382      	movs	r3, #130	; 0x82
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	429a      	cmp	r2, r3
 8006634:	d11f      	bne.n	8006676 <SPI_EndRxTransaction+0xb2>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	2380      	movs	r3, #128	; 0x80
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	429a      	cmp	r2, r3
 8006640:	d005      	beq.n	800664e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	429a      	cmp	r2, r3
 800664c:	d113      	bne.n	8006676 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	23c0      	movs	r3, #192	; 0xc0
 8006652:	00d9      	lsls	r1, r3, #3
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	0013      	movs	r3, r2
 800665c:	2200      	movs	r2, #0
 800665e:	f7ff ff0f 	bl	8006480 <SPI_WaitFifoStateUntilTimeout>
 8006662:	1e03      	subs	r3, r0, #0
 8006664:	d007      	beq.n	8006676 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666a:	2220      	movs	r2, #32
 800666c:	431a      	orrs	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e000      	b.n	8006678 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	0018      	movs	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	b004      	add	sp, #16
 800667e:	bd80      	pop	{r7, pc}

08006680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af02      	add	r7, sp, #8
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	23c0      	movs	r3, #192	; 0xc0
 8006690:	0159      	lsls	r1, r3, #5
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	0013      	movs	r3, r2
 800669a:	2200      	movs	r2, #0
 800669c:	f7ff fef0 	bl	8006480 <SPI_WaitFifoStateUntilTimeout>
 80066a0:	1e03      	subs	r3, r0, #0
 80066a2:	d007      	beq.n	80066b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a8:	2220      	movs	r2, #32
 80066aa:	431a      	orrs	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e027      	b.n	8006704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	0013      	movs	r3, r2
 80066be:	2200      	movs	r2, #0
 80066c0:	2180      	movs	r1, #128	; 0x80
 80066c2:	f7ff fe4f 	bl	8006364 <SPI_WaitFlagStateUntilTimeout>
 80066c6:	1e03      	subs	r3, r0, #0
 80066c8:	d007      	beq.n	80066da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ce:	2220      	movs	r2, #32
 80066d0:	431a      	orrs	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e014      	b.n	8006704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	23c0      	movs	r3, #192	; 0xc0
 80066de:	00d9      	lsls	r1, r3, #3
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	0013      	movs	r3, r2
 80066e8:	2200      	movs	r2, #0
 80066ea:	f7ff fec9 	bl	8006480 <SPI_WaitFifoStateUntilTimeout>
 80066ee:	1e03      	subs	r3, r0, #0
 80066f0:	d007      	beq.n	8006702 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f6:	2220      	movs	r2, #32
 80066f8:	431a      	orrs	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e000      	b.n	8006704 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	0018      	movs	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	b004      	add	sp, #16
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e04a      	b.n	80067b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	223d      	movs	r2, #61	; 0x3d
 8006722:	5c9b      	ldrb	r3, [r3, r2]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d107      	bne.n	800673a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	223c      	movs	r2, #60	; 0x3c
 800672e:	2100      	movs	r1, #0
 8006730:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	0018      	movs	r0, r3
 8006736:	f7fc fe5d 	bl	80033f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	223d      	movs	r2, #61	; 0x3d
 800673e:	2102      	movs	r1, #2
 8006740:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3304      	adds	r3, #4
 800674a:	0019      	movs	r1, r3
 800674c:	0010      	movs	r0, r2
 800674e:	f000 fa11 	bl	8006b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2248      	movs	r2, #72	; 0x48
 8006756:	2101      	movs	r1, #1
 8006758:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	223e      	movs	r2, #62	; 0x3e
 800675e:	2101      	movs	r1, #1
 8006760:	5499      	strb	r1, [r3, r2]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	223f      	movs	r2, #63	; 0x3f
 8006766:	2101      	movs	r1, #1
 8006768:	5499      	strb	r1, [r3, r2]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2240      	movs	r2, #64	; 0x40
 800676e:	2101      	movs	r1, #1
 8006770:	5499      	strb	r1, [r3, r2]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2241      	movs	r2, #65	; 0x41
 8006776:	2101      	movs	r1, #1
 8006778:	5499      	strb	r1, [r3, r2]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2242      	movs	r2, #66	; 0x42
 800677e:	2101      	movs	r1, #1
 8006780:	5499      	strb	r1, [r3, r2]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2243      	movs	r2, #67	; 0x43
 8006786:	2101      	movs	r1, #1
 8006788:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2244      	movs	r2, #68	; 0x44
 800678e:	2101      	movs	r1, #1
 8006790:	5499      	strb	r1, [r3, r2]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2245      	movs	r2, #69	; 0x45
 8006796:	2101      	movs	r1, #1
 8006798:	5499      	strb	r1, [r3, r2]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2246      	movs	r2, #70	; 0x46
 800679e:	2101      	movs	r1, #1
 80067a0:	5499      	strb	r1, [r3, r2]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2247      	movs	r2, #71	; 0x47
 80067a6:	2101      	movs	r1, #1
 80067a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	223d      	movs	r2, #61	; 0x3d
 80067ae:	2101      	movs	r1, #1
 80067b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	0018      	movs	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b002      	add	sp, #8
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	223d      	movs	r2, #61	; 0x3d
 80067c8:	5c9b      	ldrb	r3, [r3, r2]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d001      	beq.n	80067d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e042      	b.n	800685a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	223d      	movs	r2, #61	; 0x3d
 80067d8:	2102      	movs	r1, #2
 80067da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2101      	movs	r1, #1
 80067e8:	430a      	orrs	r2, r1
 80067ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1c      	ldr	r2, [pc, #112]	; (8006864 <HAL_TIM_Base_Start_IT+0xa8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00f      	beq.n	8006816 <HAL_TIM_Base_Start_IT+0x5a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	2380      	movs	r3, #128	; 0x80
 80067fc:	05db      	lsls	r3, r3, #23
 80067fe:	429a      	cmp	r2, r3
 8006800:	d009      	beq.n	8006816 <HAL_TIM_Base_Start_IT+0x5a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a18      	ldr	r2, [pc, #96]	; (8006868 <HAL_TIM_Base_Start_IT+0xac>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d004      	beq.n	8006816 <HAL_TIM_Base_Start_IT+0x5a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a16      	ldr	r2, [pc, #88]	; (800686c <HAL_TIM_Base_Start_IT+0xb0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d116      	bne.n	8006844 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	4a14      	ldr	r2, [pc, #80]	; (8006870 <HAL_TIM_Base_Start_IT+0xb4>)
 800681e:	4013      	ands	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b06      	cmp	r3, #6
 8006826:	d016      	beq.n	8006856 <HAL_TIM_Base_Start_IT+0x9a>
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	2380      	movs	r3, #128	; 0x80
 800682c:	025b      	lsls	r3, r3, #9
 800682e:	429a      	cmp	r2, r3
 8006830:	d011      	beq.n	8006856 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2101      	movs	r1, #1
 800683e:	430a      	orrs	r2, r1
 8006840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006842:	e008      	b.n	8006856 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2101      	movs	r1, #1
 8006850:	430a      	orrs	r2, r1
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e000      	b.n	8006858 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006856:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b004      	add	sp, #16
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40000400 	.word	0x40000400
 800686c:	40014000 	.word	0x40014000
 8006870:	00010007 	.word	0x00010007

08006874 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2101      	movs	r1, #1
 8006888:	438a      	bics	r2, r1
 800688a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	4a0d      	ldr	r2, [pc, #52]	; (80068c8 <HAL_TIM_Base_Stop_IT+0x54>)
 8006894:	4013      	ands	r3, r2
 8006896:	d10d      	bne.n	80068b4 <HAL_TIM_Base_Stop_IT+0x40>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	4a0b      	ldr	r2, [pc, #44]	; (80068cc <HAL_TIM_Base_Stop_IT+0x58>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	d107      	bne.n	80068b4 <HAL_TIM_Base_Stop_IT+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2101      	movs	r1, #1
 80068b0:	438a      	bics	r2, r1
 80068b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	223d      	movs	r2, #61	; 0x3d
 80068b8:	2101      	movs	r1, #1
 80068ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	0018      	movs	r0, r3
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b002      	add	sp, #8
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	00001111 	.word	0x00001111
 80068cc:	00000444 	.word	0x00000444

080068d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2202      	movs	r2, #2
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d124      	bne.n	8006930 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2202      	movs	r2, #2
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d11d      	bne.n	8006930 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2203      	movs	r2, #3
 80068fa:	4252      	negs	r2, r2
 80068fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	2203      	movs	r2, #3
 800690c:	4013      	ands	r3, r2
 800690e:	d004      	beq.n	800691a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	0018      	movs	r0, r3
 8006914:	f000 f916 	bl	8006b44 <HAL_TIM_IC_CaptureCallback>
 8006918:	e007      	b.n	800692a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0018      	movs	r0, r3
 800691e:	f000 f909 	bl	8006b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0018      	movs	r0, r3
 8006926:	f000 f915 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2204      	movs	r2, #4
 8006938:	4013      	ands	r3, r2
 800693a:	2b04      	cmp	r3, #4
 800693c:	d125      	bne.n	800698a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2204      	movs	r2, #4
 8006946:	4013      	ands	r3, r2
 8006948:	2b04      	cmp	r3, #4
 800694a:	d11e      	bne.n	800698a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2205      	movs	r2, #5
 8006952:	4252      	negs	r2, r2
 8006954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	23c0      	movs	r3, #192	; 0xc0
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4013      	ands	r3, r2
 8006968:	d004      	beq.n	8006974 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	0018      	movs	r0, r3
 800696e:	f000 f8e9 	bl	8006b44 <HAL_TIM_IC_CaptureCallback>
 8006972:	e007      	b.n	8006984 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	0018      	movs	r0, r3
 8006978:	f000 f8dc 	bl	8006b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	0018      	movs	r0, r3
 8006980:	f000 f8e8 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2208      	movs	r2, #8
 8006992:	4013      	ands	r3, r2
 8006994:	2b08      	cmp	r3, #8
 8006996:	d124      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	2208      	movs	r2, #8
 80069a0:	4013      	ands	r3, r2
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d11d      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2209      	movs	r2, #9
 80069ac:	4252      	negs	r2, r2
 80069ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2204      	movs	r2, #4
 80069b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	2203      	movs	r2, #3
 80069be:	4013      	ands	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	0018      	movs	r0, r3
 80069c6:	f000 f8bd 	bl	8006b44 <HAL_TIM_IC_CaptureCallback>
 80069ca:	e007      	b.n	80069dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	0018      	movs	r0, r3
 80069d0:	f000 f8b0 	bl	8006b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	0018      	movs	r0, r3
 80069d8:	f000 f8bc 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2210      	movs	r2, #16
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d125      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2210      	movs	r2, #16
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b10      	cmp	r3, #16
 80069fc:	d11e      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2211      	movs	r2, #17
 8006a04:	4252      	negs	r2, r2
 8006a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	23c0      	movs	r3, #192	; 0xc0
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d004      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	0018      	movs	r0, r3
 8006a20:	f000 f890 	bl	8006b44 <HAL_TIM_IC_CaptureCallback>
 8006a24:	e007      	b.n	8006a36 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f000 f883 	bl	8006b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	0018      	movs	r0, r3
 8006a32:	f000 f88f 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2201      	movs	r2, #1
 8006a44:	4013      	ands	r3, r2
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d10f      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d108      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	4252      	negs	r2, r2
 8006a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7fc fbc9 	bl	80031fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2280      	movs	r2, #128	; 0x80
 8006a72:	4013      	ands	r3, r2
 8006a74:	2b80      	cmp	r3, #128	; 0x80
 8006a76:	d10f      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	2280      	movs	r2, #128	; 0x80
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b80      	cmp	r3, #128	; 0x80
 8006a84:	d108      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2281      	movs	r2, #129	; 0x81
 8006a8c:	4252      	negs	r2, r2
 8006a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	0018      	movs	r0, r3
 8006a94:	f000 f964 	bl	8006d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	401a      	ands	r2, r3
 8006aa4:	2380      	movs	r3, #128	; 0x80
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d10e      	bne.n	8006aca <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	2280      	movs	r2, #128	; 0x80
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	2b80      	cmp	r3, #128	; 0x80
 8006ab8:	d107      	bne.n	8006aca <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1c      	ldr	r2, [pc, #112]	; (8006b30 <HAL_TIM_IRQHandler+0x260>)
 8006ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 f953 	bl	8006d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2240      	movs	r2, #64	; 0x40
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d10f      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2240      	movs	r2, #64	; 0x40
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d108      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2241      	movs	r2, #65	; 0x41
 8006aec:	4252      	negs	r2, r2
 8006aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	0018      	movs	r0, r3
 8006af4:	f000 f836 	bl	8006b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2220      	movs	r2, #32
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d10f      	bne.n	8006b26 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	4013      	ands	r3, r2
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d108      	bne.n	8006b26 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2221      	movs	r2, #33	; 0x21
 8006b1a:	4252      	negs	r2, r2
 8006b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f000 f915 	bl	8006d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b002      	add	sp, #8
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	fffffeff 	.word	0xfffffeff

08006b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b002      	add	sp, #8
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b4c:	46c0      	nop			; (mov r8, r8)
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	b002      	add	sp, #8
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b5c:	46c0      	nop			; (mov r8, r8)
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	b002      	add	sp, #8
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b6c:	46c0      	nop			; (mov r8, r8)
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	b002      	add	sp, #8
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a34      	ldr	r2, [pc, #208]	; (8006c58 <TIM_Base_SetConfig+0xe4>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d008      	beq.n	8006b9e <TIM_Base_SetConfig+0x2a>
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	2380      	movs	r3, #128	; 0x80
 8006b90:	05db      	lsls	r3, r3, #23
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d003      	beq.n	8006b9e <TIM_Base_SetConfig+0x2a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a30      	ldr	r2, [pc, #192]	; (8006c5c <TIM_Base_SetConfig+0xe8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d108      	bne.n	8006bb0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2270      	movs	r2, #112	; 0x70
 8006ba2:	4393      	bics	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a29      	ldr	r2, [pc, #164]	; (8006c58 <TIM_Base_SetConfig+0xe4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d018      	beq.n	8006bea <TIM_Base_SetConfig+0x76>
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	2380      	movs	r3, #128	; 0x80
 8006bbc:	05db      	lsls	r3, r3, #23
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d013      	beq.n	8006bea <TIM_Base_SetConfig+0x76>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a25      	ldr	r2, [pc, #148]	; (8006c5c <TIM_Base_SetConfig+0xe8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00f      	beq.n	8006bea <TIM_Base_SetConfig+0x76>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a24      	ldr	r2, [pc, #144]	; (8006c60 <TIM_Base_SetConfig+0xec>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <TIM_Base_SetConfig+0x76>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a23      	ldr	r2, [pc, #140]	; (8006c64 <TIM_Base_SetConfig+0xf0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d007      	beq.n	8006bea <TIM_Base_SetConfig+0x76>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a22      	ldr	r2, [pc, #136]	; (8006c68 <TIM_Base_SetConfig+0xf4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_Base_SetConfig+0x76>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a21      	ldr	r2, [pc, #132]	; (8006c6c <TIM_Base_SetConfig+0xf8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d108      	bne.n	8006bfc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <TIM_Base_SetConfig+0xfc>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2280      	movs	r2, #128	; 0x80
 8006c00:	4393      	bics	r3, r2
 8006c02:	001a      	movs	r2, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a0c      	ldr	r2, [pc, #48]	; (8006c58 <TIM_Base_SetConfig+0xe4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00b      	beq.n	8006c42 <TIM_Base_SetConfig+0xce>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a0d      	ldr	r2, [pc, #52]	; (8006c64 <TIM_Base_SetConfig+0xf0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d007      	beq.n	8006c42 <TIM_Base_SetConfig+0xce>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a0c      	ldr	r2, [pc, #48]	; (8006c68 <TIM_Base_SetConfig+0xf4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d003      	beq.n	8006c42 <TIM_Base_SetConfig+0xce>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a0b      	ldr	r2, [pc, #44]	; (8006c6c <TIM_Base_SetConfig+0xf8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d103      	bne.n	8006c4a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	615a      	str	r2, [r3, #20]
}
 8006c50:	46c0      	nop			; (mov r8, r8)
 8006c52:	46bd      	mov	sp, r7
 8006c54:	b004      	add	sp, #16
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40012c00 	.word	0x40012c00
 8006c5c:	40000400 	.word	0x40000400
 8006c60:	40002000 	.word	0x40002000
 8006c64:	40014000 	.word	0x40014000
 8006c68:	40014400 	.word	0x40014400
 8006c6c:	40014800 	.word	0x40014800
 8006c70:	fffffcff 	.word	0xfffffcff

08006c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	223c      	movs	r2, #60	; 0x3c
 8006c82:	5c9b      	ldrb	r3, [r3, r2]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e055      	b.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	223c      	movs	r2, #60	; 0x3c
 8006c90:	2101      	movs	r1, #1
 8006c92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	223d      	movs	r2, #61	; 0x3d
 8006c98:	2102      	movs	r1, #2
 8006c9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a23      	ldr	r2, [pc, #140]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d108      	bne.n	8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4a22      	ldr	r2, [pc, #136]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2270      	movs	r2, #112	; 0x70
 8006ccc:	4393      	bics	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00f      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	05db      	lsls	r3, r3, #23
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d009      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a12      	ldr	r2, [pc, #72]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d004      	beq.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d10c      	bne.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2280      	movs	r2, #128	; 0x80
 8006d10:	4393      	bics	r3, r2
 8006d12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	223d      	movs	r2, #61	; 0x3d
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	223c      	movs	r2, #60	; 0x3c
 8006d32:	2100      	movs	r1, #0
 8006d34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b004      	add	sp, #16
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40012c00 	.word	0x40012c00
 8006d44:	ff0fffff 	.word	0xff0fffff
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40014000 	.word	0x40014000

08006d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d58:	46c0      	nop			; (mov r8, r8)
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b002      	add	sp, #8
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d68:	46c0      	nop			; (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b002      	add	sp, #8
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d78:	46c0      	nop			; (mov r8, r8)
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b002      	add	sp, #8
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e046      	b.n	8006e20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2288      	movs	r2, #136	; 0x88
 8006d96:	589b      	ldr	r3, [r3, r2]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d107      	bne.n	8006dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2284      	movs	r2, #132	; 0x84
 8006da0:	2100      	movs	r1, #0
 8006da2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0018      	movs	r0, r3
 8006da8:	f7fc fb4a 	bl	8003440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2288      	movs	r2, #136	; 0x88
 8006db0:	2124      	movs	r1, #36	; 0x24
 8006db2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	438a      	bics	r2, r1
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f000 f9ee 	bl	80071a8 <UART_SetConfig>
 8006dcc:	0003      	movs	r3, r0
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e024      	b.n	8006e20 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f000 fc9f 	bl	8007724 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	490d      	ldr	r1, [pc, #52]	; (8006e28 <HAL_UART_Init+0xa8>)
 8006df2:	400a      	ands	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	212a      	movs	r1, #42	; 0x2a
 8006e02:	438a      	bics	r2, r1
 8006e04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2101      	movs	r1, #1
 8006e12:	430a      	orrs	r2, r1
 8006e14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f000 fd37 	bl	800788c <UART_CheckIdleState>
 8006e1e:	0003      	movs	r3, r0
}
 8006e20:	0018      	movs	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	b002      	add	sp, #8
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	ffffb7ff 	.word	0xffffb7ff

08006e2c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e032      	b.n	8006ea4 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2288      	movs	r2, #136	; 0x88
 8006e42:	2124      	movs	r1, #36	; 0x24
 8006e44:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2101      	movs	r1, #1
 8006e52:	438a      	bics	r2, r1
 8006e54:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2200      	movs	r2, #0
 8006e64:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f7fc fbc9 	bl	8003608 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2290      	movs	r2, #144	; 0x90
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2288      	movs	r2, #136	; 0x88
 8006e82:	2100      	movs	r1, #0
 8006e84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	228c      	movs	r2, #140	; 0x8c
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2284      	movs	r2, #132	; 0x84
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08a      	sub	sp, #40	; 0x28
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	1dbb      	adds	r3, r7, #6
 8006eba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2288      	movs	r2, #136	; 0x88
 8006ec0:	589b      	ldr	r3, [r3, r2]
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d000      	beq.n	8006ec8 <HAL_UART_Transmit+0x1c>
 8006ec6:	e088      	b.n	8006fda <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_UART_Transmit+0x2a>
 8006ece:	1dbb      	adds	r3, r7, #6
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e080      	b.n	8006fdc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	2380      	movs	r3, #128	; 0x80
 8006ee0:	015b      	lsls	r3, r3, #5
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d109      	bne.n	8006efa <HAL_UART_Transmit+0x4e>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d105      	bne.n	8006efa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d001      	beq.n	8006efa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e070      	b.n	8006fdc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2290      	movs	r2, #144	; 0x90
 8006efe:	2100      	movs	r1, #0
 8006f00:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2288      	movs	r2, #136	; 0x88
 8006f06:	2121      	movs	r1, #33	; 0x21
 8006f08:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f0a:	f7fc fd69 	bl	80039e0 <HAL_GetTick>
 8006f0e:	0003      	movs	r3, r0
 8006f10:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1dba      	adds	r2, r7, #6
 8006f16:	2154      	movs	r1, #84	; 0x54
 8006f18:	8812      	ldrh	r2, [r2, #0]
 8006f1a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	1dba      	adds	r2, r7, #6
 8006f20:	2156      	movs	r1, #86	; 0x56
 8006f22:	8812      	ldrh	r2, [r2, #0]
 8006f24:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	2380      	movs	r3, #128	; 0x80
 8006f2c:	015b      	lsls	r3, r3, #5
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d108      	bne.n	8006f44 <HAL_UART_Transmit+0x98>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d104      	bne.n	8006f44 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	e003      	b.n	8006f4c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f4c:	e02c      	b.n	8006fa8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	0013      	movs	r3, r2
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2180      	movs	r1, #128	; 0x80
 8006f5c:	f000 fce4 	bl	8007928 <UART_WaitOnFlagUntilTimeout>
 8006f60:	1e03      	subs	r3, r0, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e039      	b.n	8006fdc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10b      	bne.n	8006f86 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	001a      	movs	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	05d2      	lsls	r2, r2, #23
 8006f7a:	0dd2      	lsrs	r2, r2, #23
 8006f7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	3302      	adds	r3, #2
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	e007      	b.n	8006f96 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	781a      	ldrb	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	3301      	adds	r3, #1
 8006f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2256      	movs	r2, #86	; 0x56
 8006f9a:	5a9b      	ldrh	r3, [r3, r2]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b299      	uxth	r1, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2256      	movs	r2, #86	; 0x56
 8006fa6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2256      	movs	r2, #86	; 0x56
 8006fac:	5a9b      	ldrh	r3, [r3, r2]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1cc      	bne.n	8006f4e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	0013      	movs	r3, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2140      	movs	r1, #64	; 0x40
 8006fc2:	f000 fcb1 	bl	8007928 <UART_WaitOnFlagUntilTimeout>
 8006fc6:	1e03      	subs	r3, r0, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e006      	b.n	8006fdc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2288      	movs	r2, #136	; 0x88
 8006fd2:	2120      	movs	r1, #32
 8006fd4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e000      	b.n	8006fdc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006fda:	2302      	movs	r3, #2
  }
}
 8006fdc:	0018      	movs	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	b008      	add	sp, #32
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08a      	sub	sp, #40	; 0x28
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	1dbb      	adds	r3, r7, #6
 8006ff2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	228c      	movs	r2, #140	; 0x8c
 8006ff8:	589b      	ldr	r3, [r3, r2]
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d000      	beq.n	8007000 <HAL_UART_Receive+0x1c>
 8006ffe:	e0cc      	b.n	800719a <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_UART_Receive+0x2a>
 8007006:	1dbb      	adds	r3, r7, #6
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e0c4      	b.n	800719c <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	2380      	movs	r3, #128	; 0x80
 8007018:	015b      	lsls	r3, r3, #5
 800701a:	429a      	cmp	r2, r3
 800701c:	d109      	bne.n	8007032 <HAL_UART_Receive+0x4e>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d105      	bne.n	8007032 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2201      	movs	r2, #1
 800702a:	4013      	ands	r3, r2
 800702c:	d001      	beq.n	8007032 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e0b4      	b.n	800719c <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2290      	movs	r2, #144	; 0x90
 8007036:	2100      	movs	r1, #0
 8007038:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	228c      	movs	r2, #140	; 0x8c
 800703e:	2122      	movs	r1, #34	; 0x22
 8007040:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007048:	f7fc fcca 	bl	80039e0 <HAL_GetTick>
 800704c:	0003      	movs	r3, r0
 800704e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	1dba      	adds	r2, r7, #6
 8007054:	215c      	movs	r1, #92	; 0x5c
 8007056:	8812      	ldrh	r2, [r2, #0]
 8007058:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1dba      	adds	r2, r7, #6
 800705e:	215e      	movs	r1, #94	; 0x5e
 8007060:	8812      	ldrh	r2, [r2, #0]
 8007062:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	015b      	lsls	r3, r3, #5
 800706c:	429a      	cmp	r2, r3
 800706e:	d10d      	bne.n	800708c <HAL_UART_Receive+0xa8>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <HAL_UART_Receive+0x9e>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2260      	movs	r2, #96	; 0x60
 800707c:	4949      	ldr	r1, [pc, #292]	; (80071a4 <HAL_UART_Receive+0x1c0>)
 800707e:	5299      	strh	r1, [r3, r2]
 8007080:	e02e      	b.n	80070e0 <HAL_UART_Receive+0xfc>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2260      	movs	r2, #96	; 0x60
 8007086:	21ff      	movs	r1, #255	; 0xff
 8007088:	5299      	strh	r1, [r3, r2]
 800708a:	e029      	b.n	80070e0 <HAL_UART_Receive+0xfc>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10d      	bne.n	80070b0 <HAL_UART_Receive+0xcc>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <HAL_UART_Receive+0xc2>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2260      	movs	r2, #96	; 0x60
 80070a0:	21ff      	movs	r1, #255	; 0xff
 80070a2:	5299      	strh	r1, [r3, r2]
 80070a4:	e01c      	b.n	80070e0 <HAL_UART_Receive+0xfc>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2260      	movs	r2, #96	; 0x60
 80070aa:	217f      	movs	r1, #127	; 0x7f
 80070ac:	5299      	strh	r1, [r3, r2]
 80070ae:	e017      	b.n	80070e0 <HAL_UART_Receive+0xfc>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	2380      	movs	r3, #128	; 0x80
 80070b6:	055b      	lsls	r3, r3, #21
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d10d      	bne.n	80070d8 <HAL_UART_Receive+0xf4>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <HAL_UART_Receive+0xea>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2260      	movs	r2, #96	; 0x60
 80070c8:	217f      	movs	r1, #127	; 0x7f
 80070ca:	5299      	strh	r1, [r3, r2]
 80070cc:	e008      	b.n	80070e0 <HAL_UART_Receive+0xfc>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2260      	movs	r2, #96	; 0x60
 80070d2:	213f      	movs	r1, #63	; 0x3f
 80070d4:	5299      	strh	r1, [r3, r2]
 80070d6:	e003      	b.n	80070e0 <HAL_UART_Receive+0xfc>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2260      	movs	r2, #96	; 0x60
 80070dc:	2100      	movs	r1, #0
 80070de:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80070e0:	2312      	movs	r3, #18
 80070e2:	18fb      	adds	r3, r7, r3
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	2160      	movs	r1, #96	; 0x60
 80070e8:	5a52      	ldrh	r2, [r2, r1]
 80070ea:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	2380      	movs	r3, #128	; 0x80
 80070f2:	015b      	lsls	r3, r3, #5
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d108      	bne.n	800710a <HAL_UART_Receive+0x126>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d104      	bne.n	800710a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	61bb      	str	r3, [r7, #24]
 8007108:	e003      	b.n	8007112 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007112:	e036      	b.n	8007182 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	0013      	movs	r3, r2
 800711e:	2200      	movs	r2, #0
 8007120:	2120      	movs	r1, #32
 8007122:	f000 fc01 	bl	8007928 <UART_WaitOnFlagUntilTimeout>
 8007126:	1e03      	subs	r3, r0, #0
 8007128:	d001      	beq.n	800712e <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e036      	b.n	800719c <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10e      	bne.n	8007152 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	b29b      	uxth	r3, r3
 800713c:	2212      	movs	r2, #18
 800713e:	18ba      	adds	r2, r7, r2
 8007140:	8812      	ldrh	r2, [r2, #0]
 8007142:	4013      	ands	r3, r2
 8007144:	b29a      	uxth	r2, r3
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	3302      	adds	r3, #2
 800714e:	61bb      	str	r3, [r7, #24]
 8007150:	e00e      	b.n	8007170 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2212      	movs	r2, #18
 800715c:	18ba      	adds	r2, r7, r2
 800715e:	8812      	ldrh	r2, [r2, #0]
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	4013      	ands	r3, r2
 8007164:	b2da      	uxtb	r2, r3
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	3301      	adds	r3, #1
 800716e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	225e      	movs	r2, #94	; 0x5e
 8007174:	5a9b      	ldrh	r3, [r3, r2]
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b299      	uxth	r1, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	225e      	movs	r2, #94	; 0x5e
 8007180:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	225e      	movs	r2, #94	; 0x5e
 8007186:	5a9b      	ldrh	r3, [r3, r2]
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1c2      	bne.n	8007114 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	228c      	movs	r2, #140	; 0x8c
 8007192:	2120      	movs	r1, #32
 8007194:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	e000      	b.n	800719c <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800719a:	2302      	movs	r3, #2
  }
}
 800719c:	0018      	movs	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	b008      	add	sp, #32
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	000001ff 	.word	0x000001ff

080071a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a8:	b5b0      	push	{r4, r5, r7, lr}
 80071aa:	b090      	sub	sp, #64	; 0x40
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071b0:	231a      	movs	r3, #26
 80071b2:	2220      	movs	r2, #32
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	19db      	adds	r3, r3, r7
 80071b8:	2200      	movs	r2, #0
 80071ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	431a      	orrs	r2, r3
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4aaf      	ldr	r2, [pc, #700]	; (8007498 <UART_SetConfig+0x2f0>)
 80071dc:	4013      	ands	r3, r2
 80071de:	0019      	movs	r1, r3
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e6:	430b      	orrs	r3, r1
 80071e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4aaa      	ldr	r2, [pc, #680]	; (800749c <UART_SetConfig+0x2f4>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	0018      	movs	r0, r3
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	68d9      	ldr	r1, [r3, #12]
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	0003      	movs	r3, r0
 8007200:	430b      	orrs	r3, r1
 8007202:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4aa4      	ldr	r2, [pc, #656]	; (80074a0 <UART_SetConfig+0x2f8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800721a:	4313      	orrs	r3, r2
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	4a9f      	ldr	r2, [pc, #636]	; (80074a4 <UART_SetConfig+0x2fc>)
 8007226:	4013      	ands	r3, r2
 8007228:	0019      	movs	r1, r3
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007230:	430b      	orrs	r3, r1
 8007232:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	220f      	movs	r2, #15
 800723c:	4393      	bics	r3, r2
 800723e:	0018      	movs	r0, r3
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	0003      	movs	r3, r0
 800724a:	430b      	orrs	r3, r1
 800724c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a95      	ldr	r2, [pc, #596]	; (80074a8 <UART_SetConfig+0x300>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d131      	bne.n	80072bc <UART_SetConfig+0x114>
 8007258:	4b94      	ldr	r3, [pc, #592]	; (80074ac <UART_SetConfig+0x304>)
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	2203      	movs	r2, #3
 800725e:	4013      	ands	r3, r2
 8007260:	2b03      	cmp	r3, #3
 8007262:	d01d      	beq.n	80072a0 <UART_SetConfig+0xf8>
 8007264:	d823      	bhi.n	80072ae <UART_SetConfig+0x106>
 8007266:	2b02      	cmp	r3, #2
 8007268:	d00c      	beq.n	8007284 <UART_SetConfig+0xdc>
 800726a:	d820      	bhi.n	80072ae <UART_SetConfig+0x106>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <UART_SetConfig+0xce>
 8007270:	2b01      	cmp	r3, #1
 8007272:	d00e      	beq.n	8007292 <UART_SetConfig+0xea>
 8007274:	e01b      	b.n	80072ae <UART_SetConfig+0x106>
 8007276:	231b      	movs	r3, #27
 8007278:	2220      	movs	r2, #32
 800727a:	189b      	adds	r3, r3, r2
 800727c:	19db      	adds	r3, r3, r7
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
 8007282:	e0b4      	b.n	80073ee <UART_SetConfig+0x246>
 8007284:	231b      	movs	r3, #27
 8007286:	2220      	movs	r2, #32
 8007288:	189b      	adds	r3, r3, r2
 800728a:	19db      	adds	r3, r3, r7
 800728c:	2202      	movs	r2, #2
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	e0ad      	b.n	80073ee <UART_SetConfig+0x246>
 8007292:	231b      	movs	r3, #27
 8007294:	2220      	movs	r2, #32
 8007296:	189b      	adds	r3, r3, r2
 8007298:	19db      	adds	r3, r3, r7
 800729a:	2204      	movs	r2, #4
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	e0a6      	b.n	80073ee <UART_SetConfig+0x246>
 80072a0:	231b      	movs	r3, #27
 80072a2:	2220      	movs	r2, #32
 80072a4:	189b      	adds	r3, r3, r2
 80072a6:	19db      	adds	r3, r3, r7
 80072a8:	2208      	movs	r2, #8
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	e09f      	b.n	80073ee <UART_SetConfig+0x246>
 80072ae:	231b      	movs	r3, #27
 80072b0:	2220      	movs	r2, #32
 80072b2:	189b      	adds	r3, r3, r2
 80072b4:	19db      	adds	r3, r3, r7
 80072b6:	2210      	movs	r2, #16
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	e098      	b.n	80073ee <UART_SetConfig+0x246>
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a7b      	ldr	r2, [pc, #492]	; (80074b0 <UART_SetConfig+0x308>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d131      	bne.n	800732a <UART_SetConfig+0x182>
 80072c6:	4b79      	ldr	r3, [pc, #484]	; (80074ac <UART_SetConfig+0x304>)
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	220c      	movs	r2, #12
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b0c      	cmp	r3, #12
 80072d0:	d01d      	beq.n	800730e <UART_SetConfig+0x166>
 80072d2:	d823      	bhi.n	800731c <UART_SetConfig+0x174>
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d00c      	beq.n	80072f2 <UART_SetConfig+0x14a>
 80072d8:	d820      	bhi.n	800731c <UART_SetConfig+0x174>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <UART_SetConfig+0x13c>
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d00e      	beq.n	8007300 <UART_SetConfig+0x158>
 80072e2:	e01b      	b.n	800731c <UART_SetConfig+0x174>
 80072e4:	231b      	movs	r3, #27
 80072e6:	2220      	movs	r2, #32
 80072e8:	189b      	adds	r3, r3, r2
 80072ea:	19db      	adds	r3, r3, r7
 80072ec:	2200      	movs	r2, #0
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e07d      	b.n	80073ee <UART_SetConfig+0x246>
 80072f2:	231b      	movs	r3, #27
 80072f4:	2220      	movs	r2, #32
 80072f6:	189b      	adds	r3, r3, r2
 80072f8:	19db      	adds	r3, r3, r7
 80072fa:	2202      	movs	r2, #2
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	e076      	b.n	80073ee <UART_SetConfig+0x246>
 8007300:	231b      	movs	r3, #27
 8007302:	2220      	movs	r2, #32
 8007304:	189b      	adds	r3, r3, r2
 8007306:	19db      	adds	r3, r3, r7
 8007308:	2204      	movs	r2, #4
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	e06f      	b.n	80073ee <UART_SetConfig+0x246>
 800730e:	231b      	movs	r3, #27
 8007310:	2220      	movs	r2, #32
 8007312:	189b      	adds	r3, r3, r2
 8007314:	19db      	adds	r3, r3, r7
 8007316:	2208      	movs	r2, #8
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	e068      	b.n	80073ee <UART_SetConfig+0x246>
 800731c:	231b      	movs	r3, #27
 800731e:	2220      	movs	r2, #32
 8007320:	189b      	adds	r3, r3, r2
 8007322:	19db      	adds	r3, r3, r7
 8007324:	2210      	movs	r2, #16
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	e061      	b.n	80073ee <UART_SetConfig+0x246>
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a61      	ldr	r2, [pc, #388]	; (80074b4 <UART_SetConfig+0x30c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d106      	bne.n	8007342 <UART_SetConfig+0x19a>
 8007334:	231b      	movs	r3, #27
 8007336:	2220      	movs	r2, #32
 8007338:	189b      	adds	r3, r3, r2
 800733a:	19db      	adds	r3, r3, r7
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	e055      	b.n	80073ee <UART_SetConfig+0x246>
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a5c      	ldr	r2, [pc, #368]	; (80074b8 <UART_SetConfig+0x310>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d106      	bne.n	800735a <UART_SetConfig+0x1b2>
 800734c:	231b      	movs	r3, #27
 800734e:	2220      	movs	r2, #32
 8007350:	189b      	adds	r3, r3, r2
 8007352:	19db      	adds	r3, r3, r7
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	e049      	b.n	80073ee <UART_SetConfig+0x246>
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a50      	ldr	r2, [pc, #320]	; (80074a0 <UART_SetConfig+0x2f8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d13e      	bne.n	80073e2 <UART_SetConfig+0x23a>
 8007364:	4b51      	ldr	r3, [pc, #324]	; (80074ac <UART_SetConfig+0x304>)
 8007366:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007368:	23c0      	movs	r3, #192	; 0xc0
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	4013      	ands	r3, r2
 800736e:	22c0      	movs	r2, #192	; 0xc0
 8007370:	0112      	lsls	r2, r2, #4
 8007372:	4293      	cmp	r3, r2
 8007374:	d027      	beq.n	80073c6 <UART_SetConfig+0x21e>
 8007376:	22c0      	movs	r2, #192	; 0xc0
 8007378:	0112      	lsls	r2, r2, #4
 800737a:	4293      	cmp	r3, r2
 800737c:	d82a      	bhi.n	80073d4 <UART_SetConfig+0x22c>
 800737e:	2280      	movs	r2, #128	; 0x80
 8007380:	0112      	lsls	r2, r2, #4
 8007382:	4293      	cmp	r3, r2
 8007384:	d011      	beq.n	80073aa <UART_SetConfig+0x202>
 8007386:	2280      	movs	r2, #128	; 0x80
 8007388:	0112      	lsls	r2, r2, #4
 800738a:	4293      	cmp	r3, r2
 800738c:	d822      	bhi.n	80073d4 <UART_SetConfig+0x22c>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <UART_SetConfig+0x1f4>
 8007392:	2280      	movs	r2, #128	; 0x80
 8007394:	00d2      	lsls	r2, r2, #3
 8007396:	4293      	cmp	r3, r2
 8007398:	d00e      	beq.n	80073b8 <UART_SetConfig+0x210>
 800739a:	e01b      	b.n	80073d4 <UART_SetConfig+0x22c>
 800739c:	231b      	movs	r3, #27
 800739e:	2220      	movs	r2, #32
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	19db      	adds	r3, r3, r7
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e021      	b.n	80073ee <UART_SetConfig+0x246>
 80073aa:	231b      	movs	r3, #27
 80073ac:	2220      	movs	r2, #32
 80073ae:	189b      	adds	r3, r3, r2
 80073b0:	19db      	adds	r3, r3, r7
 80073b2:	2202      	movs	r2, #2
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e01a      	b.n	80073ee <UART_SetConfig+0x246>
 80073b8:	231b      	movs	r3, #27
 80073ba:	2220      	movs	r2, #32
 80073bc:	189b      	adds	r3, r3, r2
 80073be:	19db      	adds	r3, r3, r7
 80073c0:	2204      	movs	r2, #4
 80073c2:	701a      	strb	r2, [r3, #0]
 80073c4:	e013      	b.n	80073ee <UART_SetConfig+0x246>
 80073c6:	231b      	movs	r3, #27
 80073c8:	2220      	movs	r2, #32
 80073ca:	189b      	adds	r3, r3, r2
 80073cc:	19db      	adds	r3, r3, r7
 80073ce:	2208      	movs	r2, #8
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	e00c      	b.n	80073ee <UART_SetConfig+0x246>
 80073d4:	231b      	movs	r3, #27
 80073d6:	2220      	movs	r2, #32
 80073d8:	189b      	adds	r3, r3, r2
 80073da:	19db      	adds	r3, r3, r7
 80073dc:	2210      	movs	r2, #16
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	e005      	b.n	80073ee <UART_SetConfig+0x246>
 80073e2:	231b      	movs	r3, #27
 80073e4:	2220      	movs	r2, #32
 80073e6:	189b      	adds	r3, r3, r2
 80073e8:	19db      	adds	r3, r3, r7
 80073ea:	2210      	movs	r2, #16
 80073ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2b      	ldr	r2, [pc, #172]	; (80074a0 <UART_SetConfig+0x2f8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d000      	beq.n	80073fa <UART_SetConfig+0x252>
 80073f8:	e0a9      	b.n	800754e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073fa:	231b      	movs	r3, #27
 80073fc:	2220      	movs	r2, #32
 80073fe:	189b      	adds	r3, r3, r2
 8007400:	19db      	adds	r3, r3, r7
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b08      	cmp	r3, #8
 8007406:	d015      	beq.n	8007434 <UART_SetConfig+0x28c>
 8007408:	dc18      	bgt.n	800743c <UART_SetConfig+0x294>
 800740a:	2b04      	cmp	r3, #4
 800740c:	d00d      	beq.n	800742a <UART_SetConfig+0x282>
 800740e:	dc15      	bgt.n	800743c <UART_SetConfig+0x294>
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <UART_SetConfig+0x272>
 8007414:	2b02      	cmp	r3, #2
 8007416:	d005      	beq.n	8007424 <UART_SetConfig+0x27c>
 8007418:	e010      	b.n	800743c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800741a:	f7fd fb9f 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 800741e:	0003      	movs	r3, r0
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007422:	e014      	b.n	800744e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007424:	4b25      	ldr	r3, [pc, #148]	; (80074bc <UART_SetConfig+0x314>)
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007428:	e011      	b.n	800744e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800742a:	f7fd fb0b 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 800742e:	0003      	movs	r3, r0
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007432:	e00c      	b.n	800744e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007434:	2380      	movs	r3, #128	; 0x80
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800743a:	e008      	b.n	800744e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007440:	231a      	movs	r3, #26
 8007442:	2220      	movs	r2, #32
 8007444:	189b      	adds	r3, r3, r2
 8007446:	19db      	adds	r3, r3, r7
 8007448:	2201      	movs	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
        break;
 800744c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007450:	2b00      	cmp	r3, #0
 8007452:	d100      	bne.n	8007456 <UART_SetConfig+0x2ae>
 8007454:	e14b      	b.n	80076ee <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800745a:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <UART_SetConfig+0x318>)
 800745c:	0052      	lsls	r2, r2, #1
 800745e:	5ad3      	ldrh	r3, [r2, r3]
 8007460:	0019      	movs	r1, r3
 8007462:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007464:	f7f8 fe6a 	bl	800013c <__udivsi3>
 8007468:	0003      	movs	r3, r0
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	0013      	movs	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	189b      	adds	r3, r3, r2
 8007476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007478:	429a      	cmp	r2, r3
 800747a:	d305      	bcc.n	8007488 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007484:	429a      	cmp	r2, r3
 8007486:	d91d      	bls.n	80074c4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007488:	231a      	movs	r3, #26
 800748a:	2220      	movs	r2, #32
 800748c:	189b      	adds	r3, r3, r2
 800748e:	19db      	adds	r3, r3, r7
 8007490:	2201      	movs	r2, #1
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	e12b      	b.n	80076ee <UART_SetConfig+0x546>
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	cfff69f3 	.word	0xcfff69f3
 800749c:	ffffcfff 	.word	0xffffcfff
 80074a0:	40008000 	.word	0x40008000
 80074a4:	11fff4ff 	.word	0x11fff4ff
 80074a8:	40013800 	.word	0x40013800
 80074ac:	40021000 	.word	0x40021000
 80074b0:	40004400 	.word	0x40004400
 80074b4:	40004800 	.word	0x40004800
 80074b8:	40004c00 	.word	0x40004c00
 80074bc:	00f42400 	.word	0x00f42400
 80074c0:	080148d4 	.word	0x080148d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074d0:	4b92      	ldr	r3, [pc, #584]	; (800771c <UART_SetConfig+0x574>)
 80074d2:	0052      	lsls	r2, r2, #1
 80074d4:	5ad3      	ldrh	r3, [r2, r3]
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	2300      	movs	r3, #0
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	69b8      	ldr	r0, [r7, #24]
 80074e2:	69f9      	ldr	r1, [r7, #28]
 80074e4:	f7f8 ffde 	bl	80004a4 <__aeabi_uldivmod>
 80074e8:	0002      	movs	r2, r0
 80074ea:	000b      	movs	r3, r1
 80074ec:	0e11      	lsrs	r1, r2, #24
 80074ee:	021d      	lsls	r5, r3, #8
 80074f0:	430d      	orrs	r5, r1
 80074f2:	0214      	lsls	r4, r2, #8
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	085b      	lsrs	r3, r3, #1
 80074fa:	60bb      	str	r3, [r7, #8]
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	68b8      	ldr	r0, [r7, #8]
 8007502:	68f9      	ldr	r1, [r7, #12]
 8007504:	1900      	adds	r0, r0, r4
 8007506:	4169      	adcs	r1, r5
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	603b      	str	r3, [r7, #0]
 800750e:	2300      	movs	r3, #0
 8007510:	607b      	str	r3, [r7, #4]
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f7f8 ffc5 	bl	80004a4 <__aeabi_uldivmod>
 800751a:	0002      	movs	r2, r0
 800751c:	000b      	movs	r3, r1
 800751e:	0013      	movs	r3, r2
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007524:	23c0      	movs	r3, #192	; 0xc0
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	429a      	cmp	r2, r3
 800752a:	d309      	bcc.n	8007540 <UART_SetConfig+0x398>
 800752c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752e:	2380      	movs	r3, #128	; 0x80
 8007530:	035b      	lsls	r3, r3, #13
 8007532:	429a      	cmp	r2, r3
 8007534:	d204      	bcs.n	8007540 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753c:	60da      	str	r2, [r3, #12]
 800753e:	e0d6      	b.n	80076ee <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007540:	231a      	movs	r3, #26
 8007542:	2220      	movs	r2, #32
 8007544:	189b      	adds	r3, r3, r2
 8007546:	19db      	adds	r3, r3, r7
 8007548:	2201      	movs	r2, #1
 800754a:	701a      	strb	r2, [r3, #0]
 800754c:	e0cf      	b.n	80076ee <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	69da      	ldr	r2, [r3, #28]
 8007552:	2380      	movs	r3, #128	; 0x80
 8007554:	021b      	lsls	r3, r3, #8
 8007556:	429a      	cmp	r2, r3
 8007558:	d000      	beq.n	800755c <UART_SetConfig+0x3b4>
 800755a:	e070      	b.n	800763e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800755c:	231b      	movs	r3, #27
 800755e:	2220      	movs	r2, #32
 8007560:	189b      	adds	r3, r3, r2
 8007562:	19db      	adds	r3, r3, r7
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b08      	cmp	r3, #8
 8007568:	d015      	beq.n	8007596 <UART_SetConfig+0x3ee>
 800756a:	dc18      	bgt.n	800759e <UART_SetConfig+0x3f6>
 800756c:	2b04      	cmp	r3, #4
 800756e:	d00d      	beq.n	800758c <UART_SetConfig+0x3e4>
 8007570:	dc15      	bgt.n	800759e <UART_SetConfig+0x3f6>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <UART_SetConfig+0x3d4>
 8007576:	2b02      	cmp	r3, #2
 8007578:	d005      	beq.n	8007586 <UART_SetConfig+0x3de>
 800757a:	e010      	b.n	800759e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800757c:	f7fd faee 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8007580:	0003      	movs	r3, r0
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007584:	e014      	b.n	80075b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007586:	4b66      	ldr	r3, [pc, #408]	; (8007720 <UART_SetConfig+0x578>)
 8007588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800758a:	e011      	b.n	80075b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800758c:	f7fd fa5a 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8007590:	0003      	movs	r3, r0
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007594:	e00c      	b.n	80075b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759c:	e008      	b.n	80075b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80075a2:	231a      	movs	r3, #26
 80075a4:	2220      	movs	r2, #32
 80075a6:	189b      	adds	r3, r3, r2
 80075a8:	19db      	adds	r3, r3, r7
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
        break;
 80075ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d100      	bne.n	80075b8 <UART_SetConfig+0x410>
 80075b6:	e09a      	b.n	80076ee <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075bc:	4b57      	ldr	r3, [pc, #348]	; (800771c <UART_SetConfig+0x574>)
 80075be:	0052      	lsls	r2, r2, #1
 80075c0:	5ad3      	ldrh	r3, [r2, r3]
 80075c2:	0019      	movs	r1, r3
 80075c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80075c6:	f7f8 fdb9 	bl	800013c <__udivsi3>
 80075ca:	0003      	movs	r3, r0
 80075cc:	005a      	lsls	r2, r3, #1
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	085b      	lsrs	r3, r3, #1
 80075d4:	18d2      	adds	r2, r2, r3
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	0019      	movs	r1, r3
 80075dc:	0010      	movs	r0, r2
 80075de:	f7f8 fdad 	bl	800013c <__udivsi3>
 80075e2:	0003      	movs	r3, r0
 80075e4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2b0f      	cmp	r3, #15
 80075ea:	d921      	bls.n	8007630 <UART_SetConfig+0x488>
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	2380      	movs	r3, #128	; 0x80
 80075f0:	025b      	lsls	r3, r3, #9
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d21c      	bcs.n	8007630 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	200e      	movs	r0, #14
 80075fc:	2420      	movs	r4, #32
 80075fe:	1903      	adds	r3, r0, r4
 8007600:	19db      	adds	r3, r3, r7
 8007602:	210f      	movs	r1, #15
 8007604:	438a      	bics	r2, r1
 8007606:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	085b      	lsrs	r3, r3, #1
 800760c:	b29b      	uxth	r3, r3
 800760e:	2207      	movs	r2, #7
 8007610:	4013      	ands	r3, r2
 8007612:	b299      	uxth	r1, r3
 8007614:	1903      	adds	r3, r0, r4
 8007616:	19db      	adds	r3, r3, r7
 8007618:	1902      	adds	r2, r0, r4
 800761a:	19d2      	adds	r2, r2, r7
 800761c:	8812      	ldrh	r2, [r2, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	1902      	adds	r2, r0, r4
 8007628:	19d2      	adds	r2, r2, r7
 800762a:	8812      	ldrh	r2, [r2, #0]
 800762c:	60da      	str	r2, [r3, #12]
 800762e:	e05e      	b.n	80076ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007630:	231a      	movs	r3, #26
 8007632:	2220      	movs	r2, #32
 8007634:	189b      	adds	r3, r3, r2
 8007636:	19db      	adds	r3, r3, r7
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	e057      	b.n	80076ee <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800763e:	231b      	movs	r3, #27
 8007640:	2220      	movs	r2, #32
 8007642:	189b      	adds	r3, r3, r2
 8007644:	19db      	adds	r3, r3, r7
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	2b08      	cmp	r3, #8
 800764a:	d015      	beq.n	8007678 <UART_SetConfig+0x4d0>
 800764c:	dc18      	bgt.n	8007680 <UART_SetConfig+0x4d8>
 800764e:	2b04      	cmp	r3, #4
 8007650:	d00d      	beq.n	800766e <UART_SetConfig+0x4c6>
 8007652:	dc15      	bgt.n	8007680 <UART_SetConfig+0x4d8>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <UART_SetConfig+0x4b6>
 8007658:	2b02      	cmp	r3, #2
 800765a:	d005      	beq.n	8007668 <UART_SetConfig+0x4c0>
 800765c:	e010      	b.n	8007680 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800765e:	f7fd fa7d 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8007662:	0003      	movs	r3, r0
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007666:	e014      	b.n	8007692 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007668:	4b2d      	ldr	r3, [pc, #180]	; (8007720 <UART_SetConfig+0x578>)
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800766c:	e011      	b.n	8007692 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800766e:	f7fd f9e9 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8007672:	0003      	movs	r3, r0
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007676:	e00c      	b.n	8007692 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007678:	2380      	movs	r3, #128	; 0x80
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800767e:	e008      	b.n	8007692 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007684:	231a      	movs	r3, #26
 8007686:	2220      	movs	r2, #32
 8007688:	189b      	adds	r3, r3, r2
 800768a:	19db      	adds	r3, r3, r7
 800768c:	2201      	movs	r2, #1
 800768e:	701a      	strb	r2, [r3, #0]
        break;
 8007690:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007694:	2b00      	cmp	r3, #0
 8007696:	d02a      	beq.n	80076ee <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800769c:	4b1f      	ldr	r3, [pc, #124]	; (800771c <UART_SetConfig+0x574>)
 800769e:	0052      	lsls	r2, r2, #1
 80076a0:	5ad3      	ldrh	r3, [r2, r3]
 80076a2:	0019      	movs	r1, r3
 80076a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076a6:	f7f8 fd49 	bl	800013c <__udivsi3>
 80076aa:	0003      	movs	r3, r0
 80076ac:	001a      	movs	r2, r3
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	085b      	lsrs	r3, r3, #1
 80076b4:	18d2      	adds	r2, r2, r3
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	0019      	movs	r1, r3
 80076bc:	0010      	movs	r0, r2
 80076be:	f7f8 fd3d 	bl	800013c <__udivsi3>
 80076c2:	0003      	movs	r3, r0
 80076c4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2b0f      	cmp	r3, #15
 80076ca:	d90a      	bls.n	80076e2 <UART_SetConfig+0x53a>
 80076cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ce:	2380      	movs	r3, #128	; 0x80
 80076d0:	025b      	lsls	r3, r3, #9
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d205      	bcs.n	80076e2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	b29a      	uxth	r2, r3
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60da      	str	r2, [r3, #12]
 80076e0:	e005      	b.n	80076ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80076e2:	231a      	movs	r3, #26
 80076e4:	2220      	movs	r2, #32
 80076e6:	189b      	adds	r3, r3, r2
 80076e8:	19db      	adds	r3, r3, r7
 80076ea:	2201      	movs	r2, #1
 80076ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	226a      	movs	r2, #106	; 0x6a
 80076f2:	2101      	movs	r1, #1
 80076f4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	2268      	movs	r2, #104	; 0x68
 80076fa:	2101      	movs	r1, #1
 80076fc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	2200      	movs	r2, #0
 8007702:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	2200      	movs	r2, #0
 8007708:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800770a:	231a      	movs	r3, #26
 800770c:	2220      	movs	r2, #32
 800770e:	189b      	adds	r3, r3, r2
 8007710:	19db      	adds	r3, r3, r7
 8007712:	781b      	ldrb	r3, [r3, #0]
}
 8007714:	0018      	movs	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	b010      	add	sp, #64	; 0x40
 800771a:	bdb0      	pop	{r4, r5, r7, pc}
 800771c:	080148d4 	.word	0x080148d4
 8007720:	00f42400 	.word	0x00f42400

08007724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007730:	2201      	movs	r2, #1
 8007732:	4013      	ands	r3, r2
 8007734:	d00b      	beq.n	800774e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	4a4a      	ldr	r2, [pc, #296]	; (8007868 <UART_AdvFeatureConfig+0x144>)
 800773e:	4013      	ands	r3, r2
 8007740:	0019      	movs	r1, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	2202      	movs	r2, #2
 8007754:	4013      	ands	r3, r2
 8007756:	d00b      	beq.n	8007770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	4a43      	ldr	r2, [pc, #268]	; (800786c <UART_AdvFeatureConfig+0x148>)
 8007760:	4013      	ands	r3, r2
 8007762:	0019      	movs	r1, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	2204      	movs	r2, #4
 8007776:	4013      	ands	r3, r2
 8007778:	d00b      	beq.n	8007792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4a3b      	ldr	r2, [pc, #236]	; (8007870 <UART_AdvFeatureConfig+0x14c>)
 8007782:	4013      	ands	r3, r2
 8007784:	0019      	movs	r1, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007796:	2208      	movs	r2, #8
 8007798:	4013      	ands	r3, r2
 800779a:	d00b      	beq.n	80077b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	4a34      	ldr	r2, [pc, #208]	; (8007874 <UART_AdvFeatureConfig+0x150>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	0019      	movs	r1, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	2210      	movs	r2, #16
 80077ba:	4013      	ands	r3, r2
 80077bc:	d00b      	beq.n	80077d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	4a2c      	ldr	r2, [pc, #176]	; (8007878 <UART_AdvFeatureConfig+0x154>)
 80077c6:	4013      	ands	r3, r2
 80077c8:	0019      	movs	r1, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	2220      	movs	r2, #32
 80077dc:	4013      	ands	r3, r2
 80077de:	d00b      	beq.n	80077f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	4a25      	ldr	r2, [pc, #148]	; (800787c <UART_AdvFeatureConfig+0x158>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	0019      	movs	r1, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	2240      	movs	r2, #64	; 0x40
 80077fe:	4013      	ands	r3, r2
 8007800:	d01d      	beq.n	800783e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	4a1d      	ldr	r2, [pc, #116]	; (8007880 <UART_AdvFeatureConfig+0x15c>)
 800780a:	4013      	ands	r3, r2
 800780c:	0019      	movs	r1, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800781e:	2380      	movs	r3, #128	; 0x80
 8007820:	035b      	lsls	r3, r3, #13
 8007822:	429a      	cmp	r2, r3
 8007824:	d10b      	bne.n	800783e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	4a15      	ldr	r2, [pc, #84]	; (8007884 <UART_AdvFeatureConfig+0x160>)
 800782e:	4013      	ands	r3, r2
 8007830:	0019      	movs	r1, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	2280      	movs	r2, #128	; 0x80
 8007844:	4013      	ands	r3, r2
 8007846:	d00b      	beq.n	8007860 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	4a0e      	ldr	r2, [pc, #56]	; (8007888 <UART_AdvFeatureConfig+0x164>)
 8007850:	4013      	ands	r3, r2
 8007852:	0019      	movs	r1, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	605a      	str	r2, [r3, #4]
  }
}
 8007860:	46c0      	nop			; (mov r8, r8)
 8007862:	46bd      	mov	sp, r7
 8007864:	b002      	add	sp, #8
 8007866:	bd80      	pop	{r7, pc}
 8007868:	fffdffff 	.word	0xfffdffff
 800786c:	fffeffff 	.word	0xfffeffff
 8007870:	fffbffff 	.word	0xfffbffff
 8007874:	ffff7fff 	.word	0xffff7fff
 8007878:	ffffefff 	.word	0xffffefff
 800787c:	ffffdfff 	.word	0xffffdfff
 8007880:	ffefffff 	.word	0xffefffff
 8007884:	ff9fffff 	.word	0xff9fffff
 8007888:	fff7ffff 	.word	0xfff7ffff

0800788c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af02      	add	r7, sp, #8
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2290      	movs	r2, #144	; 0x90
 8007898:	2100      	movs	r1, #0
 800789a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800789c:	f7fc f8a0 	bl	80039e0 <HAL_GetTick>
 80078a0:	0003      	movs	r3, r0
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2208      	movs	r2, #8
 80078ac:	4013      	ands	r3, r2
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d10c      	bne.n	80078cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2280      	movs	r2, #128	; 0x80
 80078b6:	0391      	lsls	r1, r2, #14
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <UART_CheckIdleState+0x98>)
 80078bc:	9200      	str	r2, [sp, #0]
 80078be:	2200      	movs	r2, #0
 80078c0:	f000 f832 	bl	8007928 <UART_WaitOnFlagUntilTimeout>
 80078c4:	1e03      	subs	r3, r0, #0
 80078c6:	d001      	beq.n	80078cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e026      	b.n	800791a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2204      	movs	r2, #4
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d10c      	bne.n	80078f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2280      	movs	r2, #128	; 0x80
 80078de:	03d1      	lsls	r1, r2, #15
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4a10      	ldr	r2, [pc, #64]	; (8007924 <UART_CheckIdleState+0x98>)
 80078e4:	9200      	str	r2, [sp, #0]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f000 f81e 	bl	8007928 <UART_WaitOnFlagUntilTimeout>
 80078ec:	1e03      	subs	r3, r0, #0
 80078ee:	d001      	beq.n	80078f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e012      	b.n	800791a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2288      	movs	r2, #136	; 0x88
 80078f8:	2120      	movs	r1, #32
 80078fa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	228c      	movs	r2, #140	; 0x8c
 8007900:	2120      	movs	r1, #32
 8007902:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2284      	movs	r2, #132	; 0x84
 8007914:	2100      	movs	r1, #0
 8007916:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	0018      	movs	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	b004      	add	sp, #16
 8007920:	bd80      	pop	{r7, pc}
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	01ffffff 	.word	0x01ffffff

08007928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b094      	sub	sp, #80	; 0x50
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	1dfb      	adds	r3, r7, #7
 8007936:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007938:	e0a7      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800793a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800793c:	3301      	adds	r3, #1
 800793e:	d100      	bne.n	8007942 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007940:	e0a3      	b.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007942:	f7fc f84d 	bl	80039e0 <HAL_GetTick>
 8007946:	0002      	movs	r2, r0
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800794e:	429a      	cmp	r2, r3
 8007950:	d302      	bcc.n	8007958 <UART_WaitOnFlagUntilTimeout+0x30>
 8007952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007954:	2b00      	cmp	r3, #0
 8007956:	d13f      	bne.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007958:	f3ef 8310 	mrs	r3, PRIMASK
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007960:	647b      	str	r3, [r7, #68]	; 0x44
 8007962:	2301      	movs	r3, #1
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	f383 8810 	msr	PRIMASK, r3
}
 800796c:	46c0      	nop			; (mov r8, r8)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	494e      	ldr	r1, [pc, #312]	; (8007ab4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800797a:	400a      	ands	r2, r1
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007980:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	f383 8810 	msr	PRIMASK, r3
}
 8007988:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800798a:	f3ef 8310 	mrs	r3, PRIMASK
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007992:	643b      	str	r3, [r7, #64]	; 0x40
 8007994:	2301      	movs	r3, #1
 8007996:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799a:	f383 8810 	msr	PRIMASK, r3
}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2101      	movs	r1, #1
 80079ac:	438a      	bics	r2, r1
 80079ae:	609a      	str	r2, [r3, #8]
 80079b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b6:	f383 8810 	msr	PRIMASK, r3
}
 80079ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2288      	movs	r2, #136	; 0x88
 80079c0:	2120      	movs	r1, #32
 80079c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	228c      	movs	r2, #140	; 0x8c
 80079c8:	2120      	movs	r1, #32
 80079ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2284      	movs	r2, #132	; 0x84
 80079d0:	2100      	movs	r1, #0
 80079d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e069      	b.n	8007aac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2204      	movs	r2, #4
 80079e0:	4013      	ands	r3, r2
 80079e2:	d052      	beq.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69da      	ldr	r2, [r3, #28]
 80079ea:	2380      	movs	r3, #128	; 0x80
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	401a      	ands	r2, r3
 80079f0:	2380      	movs	r3, #128	; 0x80
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d148      	bne.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2280      	movs	r2, #128	; 0x80
 80079fe:	0112      	lsls	r2, r2, #4
 8007a00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a02:	f3ef 8310 	mrs	r3, PRIMASK
 8007a06:	613b      	str	r3, [r7, #16]
  return(result);
 8007a08:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f383 8810 	msr	PRIMASK, r3
}
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4924      	ldr	r1, [pc, #144]	; (8007ab4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007a24:	400a      	ands	r2, r1
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	f383 8810 	msr	PRIMASK, r3
}
 8007a32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a34:	f3ef 8310 	mrs	r3, PRIMASK
 8007a38:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a3a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a3e:	2301      	movs	r3, #1
 8007a40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	f383 8810 	msr	PRIMASK, r3
}
 8007a48:	46c0      	nop			; (mov r8, r8)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2101      	movs	r1, #1
 8007a56:	438a      	bics	r2, r1
 8007a58:	609a      	str	r2, [r3, #8]
 8007a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	f383 8810 	msr	PRIMASK, r3
}
 8007a64:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2288      	movs	r2, #136	; 0x88
 8007a6a:	2120      	movs	r1, #32
 8007a6c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	228c      	movs	r2, #140	; 0x8c
 8007a72:	2120      	movs	r1, #32
 8007a74:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2290      	movs	r2, #144	; 0x90
 8007a7a:	2120      	movs	r1, #32
 8007a7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2284      	movs	r2, #132	; 0x84
 8007a82:	2100      	movs	r1, #0
 8007a84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e010      	b.n	8007aac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	4013      	ands	r3, r2
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	425a      	negs	r2, r3
 8007a9a:	4153      	adcs	r3, r2
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	001a      	movs	r2, r3
 8007aa0:	1dfb      	adds	r3, r7, #7
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d100      	bne.n	8007aaa <UART_WaitOnFlagUntilTimeout+0x182>
 8007aa8:	e747      	b.n	800793a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	0018      	movs	r0, r3
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	b014      	add	sp, #80	; 0x50
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	fffffe5f 	.word	0xfffffe5f

08007ab8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2284      	movs	r2, #132	; 0x84
 8007ac4:	5c9b      	ldrb	r3, [r3, r2]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_UARTEx_DisableFifoMode+0x16>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e027      	b.n	8007b1e <HAL_UARTEx_DisableFifoMode+0x66>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2284      	movs	r2, #132	; 0x84
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2288      	movs	r2, #136	; 0x88
 8007ada:	2124      	movs	r1, #36	; 0x24
 8007adc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2101      	movs	r1, #1
 8007af2:	438a      	bics	r2, r1
 8007af4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2288      	movs	r2, #136	; 0x88
 8007b10:	2120      	movs	r1, #32
 8007b12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2284      	movs	r2, #132	; 0x84
 8007b18:	2100      	movs	r1, #0
 8007b1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	0018      	movs	r0, r3
 8007b20:	46bd      	mov	sp, r7
 8007b22:	b004      	add	sp, #16
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	dfffffff 	.word	0xdfffffff

08007b2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2284      	movs	r2, #132	; 0x84
 8007b3a:	5c9b      	ldrb	r3, [r3, r2]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e02e      	b.n	8007ba2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2284      	movs	r2, #132	; 0x84
 8007b48:	2101      	movs	r1, #1
 8007b4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2288      	movs	r2, #136	; 0x88
 8007b50:	2124      	movs	r1, #36	; 0x24
 8007b52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2101      	movs	r1, #1
 8007b68:	438a      	bics	r2, r1
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	08d9      	lsrs	r1, r3, #3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	0018      	movs	r0, r3
 8007b84:	f000 f854 	bl	8007c30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2288      	movs	r2, #136	; 0x88
 8007b94:	2120      	movs	r1, #32
 8007b96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2284      	movs	r2, #132	; 0x84
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b004      	add	sp, #16
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2284      	movs	r2, #132	; 0x84
 8007bba:	5c9b      	ldrb	r3, [r3, r2]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e02f      	b.n	8007c24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2284      	movs	r2, #132	; 0x84
 8007bc8:	2101      	movs	r1, #1
 8007bca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2288      	movs	r2, #136	; 0x88
 8007bd0:	2124      	movs	r1, #36	; 0x24
 8007bd2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2101      	movs	r1, #1
 8007be8:	438a      	bics	r2, r1
 8007bea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	4a0e      	ldr	r2, [pc, #56]	; (8007c2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	0019      	movs	r1, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	0018      	movs	r0, r3
 8007c06:	f000 f813 	bl	8007c30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2288      	movs	r2, #136	; 0x88
 8007c16:	2120      	movs	r1, #32
 8007c18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2284      	movs	r2, #132	; 0x84
 8007c1e:	2100      	movs	r1, #0
 8007c20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b004      	add	sp, #16
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	f1ffffff 	.word	0xf1ffffff

08007c30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d108      	bne.n	8007c52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	226a      	movs	r2, #106	; 0x6a
 8007c44:	2101      	movs	r1, #1
 8007c46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2268      	movs	r2, #104	; 0x68
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c50:	e043      	b.n	8007cda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c52:	260f      	movs	r6, #15
 8007c54:	19bb      	adds	r3, r7, r6
 8007c56:	2208      	movs	r2, #8
 8007c58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c5a:	200e      	movs	r0, #14
 8007c5c:	183b      	adds	r3, r7, r0
 8007c5e:	2208      	movs	r2, #8
 8007c60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	0e5b      	lsrs	r3, r3, #25
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	240d      	movs	r4, #13
 8007c6e:	193b      	adds	r3, r7, r4
 8007c70:	2107      	movs	r1, #7
 8007c72:	400a      	ands	r2, r1
 8007c74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	0f5b      	lsrs	r3, r3, #29
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	250c      	movs	r5, #12
 8007c82:	197b      	adds	r3, r7, r5
 8007c84:	2107      	movs	r1, #7
 8007c86:	400a      	ands	r2, r1
 8007c88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c8a:	183b      	adds	r3, r7, r0
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	197a      	adds	r2, r7, r5
 8007c90:	7812      	ldrb	r2, [r2, #0]
 8007c92:	4914      	ldr	r1, [pc, #80]	; (8007ce4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c94:	5c8a      	ldrb	r2, [r1, r2]
 8007c96:	435a      	muls	r2, r3
 8007c98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c9a:	197b      	adds	r3, r7, r5
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	4a12      	ldr	r2, [pc, #72]	; (8007ce8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007ca0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ca2:	0019      	movs	r1, r3
 8007ca4:	f7f8 fad4 	bl	8000250 <__divsi3>
 8007ca8:	0003      	movs	r3, r0
 8007caa:	b299      	uxth	r1, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	226a      	movs	r2, #106	; 0x6a
 8007cb0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cb2:	19bb      	adds	r3, r7, r6
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	193a      	adds	r2, r7, r4
 8007cb8:	7812      	ldrb	r2, [r2, #0]
 8007cba:	490a      	ldr	r1, [pc, #40]	; (8007ce4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007cbc:	5c8a      	ldrb	r2, [r1, r2]
 8007cbe:	435a      	muls	r2, r3
 8007cc0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cc2:	193b      	adds	r3, r7, r4
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007cc8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cca:	0019      	movs	r1, r3
 8007ccc:	f7f8 fac0 	bl	8000250 <__divsi3>
 8007cd0:	0003      	movs	r3, r0
 8007cd2:	b299      	uxth	r1, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2268      	movs	r2, #104	; 0x68
 8007cd8:	5299      	strh	r1, [r3, r2]
}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b005      	add	sp, #20
 8007ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	080148ec 	.word	0x080148ec
 8007ce8:	080148f4 	.word	0x080148f4

08007cec <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007cec:	b5b0      	push	{r4, r5, r7, lr}
 8007cee:	b0e4      	sub	sp, #400	; 0x190
 8007cf0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007cf2:	24c8      	movs	r4, #200	; 0xc8
 8007cf4:	193b      	adds	r3, r7, r4
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	23c6      	movs	r3, #198	; 0xc6
 8007cfa:	001a      	movs	r2, r3
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	f004 fb63 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8007d02:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <astronode_send_cfg_sr+0x64>)
 8007d04:	25c8      	movs	r5, #200	; 0xc8
 8007d06:	006d      	lsls	r5, r5, #1
 8007d08:	195b      	adds	r3, r3, r5
 8007d0a:	19db      	adds	r3, r3, r7
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	23c6      	movs	r3, #198	; 0xc6
 8007d10:	001a      	movs	r2, r3
 8007d12:	2100      	movs	r1, #0
 8007d14:	f004 fb58 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007d18:	193b      	adds	r3, r7, r4
 8007d1a:	2210      	movs	r2, #16
 8007d1c:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007d1e:	003a      	movs	r2, r7
 8007d20:	193b      	adds	r3, r7, r4
 8007d22:	0011      	movs	r1, r2
 8007d24:	0018      	movs	r0, r3
 8007d26:	f001 faad 	bl	8009284 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007d2a:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <astronode_send_cfg_sr+0x64>)
 8007d2c:	195b      	adds	r3, r3, r5
 8007d2e:	19db      	adds	r3, r3, r7
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	2b90      	cmp	r3, #144	; 0x90
 8007d34:	d104      	bne.n	8007d40 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <astronode_send_cfg_sr+0x68>)
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f7fb f891 	bl	8002e60 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007d3e:	e003      	b.n	8007d48 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007d40:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <astronode_send_cfg_sr+0x6c>)
 8007d42:	0018      	movs	r0, r3
 8007d44:	f7fb f88c 	bl	8002e60 <send_debug_logs>
}
 8007d48:	46c0      	nop			; (mov r8, r8)
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b064      	add	sp, #400	; 0x190
 8007d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d50:	fffffe70 	.word	0xfffffe70
 8007d54:	0801345c 	.word	0x0801345c
 8007d58:	08013490 	.word	0x08013490

08007d5c <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d5e:	b0e7      	sub	sp, #412	; 0x19c
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	0005      	movs	r5, r0
 8007d64:	000c      	movs	r4, r1
 8007d66:	0010      	movs	r0, r2
 8007d68:	0019      	movs	r1, r3
 8007d6a:	4b4b      	ldr	r3, [pc, #300]	; (8007e98 <astronode_send_cfg_wr+0x13c>)
 8007d6c:	26cc      	movs	r6, #204	; 0xcc
 8007d6e:	0076      	lsls	r6, r6, #1
 8007d70:	199b      	adds	r3, r3, r6
 8007d72:	19db      	adds	r3, r3, r7
 8007d74:	1c2a      	adds	r2, r5, #0
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	4b48      	ldr	r3, [pc, #288]	; (8007e9c <astronode_send_cfg_wr+0x140>)
 8007d7a:	0035      	movs	r5, r6
 8007d7c:	195b      	adds	r3, r3, r5
 8007d7e:	19db      	adds	r3, r3, r7
 8007d80:	1c22      	adds	r2, r4, #0
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	4b46      	ldr	r3, [pc, #280]	; (8007ea0 <astronode_send_cfg_wr+0x144>)
 8007d86:	002c      	movs	r4, r5
 8007d88:	191b      	adds	r3, r3, r4
 8007d8a:	19db      	adds	r3, r3, r7
 8007d8c:	1c02      	adds	r2, r0, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	4b44      	ldr	r3, [pc, #272]	; (8007ea4 <astronode_send_cfg_wr+0x148>)
 8007d92:	191b      	adds	r3, r3, r4
 8007d94:	19db      	adds	r3, r3, r7
 8007d96:	1c0a      	adds	r2, r1, #0
 8007d98:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007d9a:	25d0      	movs	r5, #208	; 0xd0
 8007d9c:	197b      	adds	r3, r7, r5
 8007d9e:	0018      	movs	r0, r3
 8007da0:	23c6      	movs	r3, #198	; 0xc6
 8007da2:	001a      	movs	r2, r3
 8007da4:	2100      	movs	r1, #0
 8007da6:	f004 fb0f 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8007daa:	4b3f      	ldr	r3, [pc, #252]	; (8007ea8 <astronode_send_cfg_wr+0x14c>)
 8007dac:	191b      	adds	r3, r3, r4
 8007dae:	19db      	adds	r3, r3, r7
 8007db0:	0018      	movs	r0, r3
 8007db2:	23c6      	movs	r3, #198	; 0xc6
 8007db4:	001a      	movs	r2, r3
 8007db6:	2100      	movs	r1, #0
 8007db8:	f004 fb06 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007dbc:	0029      	movs	r1, r5
 8007dbe:	187b      	adds	r3, r7, r1
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007dc4:	4b34      	ldr	r3, [pc, #208]	; (8007e98 <astronode_send_cfg_wr+0x13c>)
 8007dc6:	191b      	adds	r3, r3, r4
 8007dc8:	19db      	adds	r3, r3, r7
 8007dca:	2200      	movs	r2, #0
 8007dcc:	569a      	ldrsb	r2, [r3, r2]
 8007dce:	4b33      	ldr	r3, [pc, #204]	; (8007e9c <astronode_send_cfg_wr+0x140>)
 8007dd0:	191b      	adds	r3, r3, r4
 8007dd2:	19db      	adds	r3, r3, r7
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	b25b      	sxtb	r3, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007dde:	4b30      	ldr	r3, [pc, #192]	; (8007ea0 <astronode_send_cfg_wr+0x144>)
 8007de0:	191b      	adds	r3, r3, r4
 8007de2:	19db      	adds	r3, r3, r7
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	b25b      	sxtb	r3, r3
 8007dea:	4313      	orrs	r3, r2
 8007dec:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007dee:	4b2d      	ldr	r3, [pc, #180]	; (8007ea4 <astronode_send_cfg_wr+0x148>)
 8007df0:	191b      	adds	r3, r3, r4
 8007df2:	19db      	adds	r3, r3, r7
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	b25b      	sxtb	r3, r3
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	b25b      	sxtb	r3, r3
 8007dfe:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007e00:	187b      	adds	r3, r7, r1
 8007e02:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007e04:	23d4      	movs	r3, #212	; 0xd4
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	2508      	movs	r5, #8
 8007e0a:	195b      	adds	r3, r3, r5
 8007e0c:	19db      	adds	r3, r3, r7
 8007e0e:	2200      	movs	r2, #0
 8007e10:	569a      	ldrsb	r2, [r3, r2]
 8007e12:	23d6      	movs	r3, #214	; 0xd6
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	195b      	adds	r3, r3, r5
 8007e18:	19db      	adds	r3, r3, r7
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	4313      	orrs	r3, r2
 8007e22:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007e24:	23d8      	movs	r3, #216	; 0xd8
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	195b      	adds	r3, r3, r5
 8007e2a:	19db      	adds	r3, r3, r7
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	b25b      	sxtb	r3, r3
 8007e32:	4313      	orrs	r3, r2
 8007e34:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007e36:	23da      	movs	r3, #218	; 0xda
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	195b      	adds	r3, r3, r5
 8007e3c:	19db      	adds	r3, r3, r7
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	b25b      	sxtb	r3, r3
 8007e44:	4313      	orrs	r3, r2
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007e4a:	187b      	adds	r3, r7, r1
 8007e4c:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007e4e:	0008      	movs	r0, r1
 8007e50:	187b      	adds	r3, r7, r1
 8007e52:	22c4      	movs	r2, #196	; 0xc4
 8007e54:	2103      	movs	r1, #3
 8007e56:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007e58:	002b      	movs	r3, r5
 8007e5a:	18fa      	adds	r2, r7, r3
 8007e5c:	183b      	adds	r3, r7, r0
 8007e5e:	0011      	movs	r1, r2
 8007e60:	0018      	movs	r0, r3
 8007e62:	f001 fa0f 	bl	8009284 <astronode_transport_send_receive>
 8007e66:	0003      	movs	r3, r0
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d10f      	bne.n	8007e8c <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007e6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ea8 <astronode_send_cfg_wr+0x14c>)
 8007e6e:	191b      	adds	r3, r3, r4
 8007e70:	19db      	adds	r3, r3, r7
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b85      	cmp	r3, #133	; 0x85
 8007e76:	d105      	bne.n	8007e84 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007e78:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <astronode_send_cfg_wr+0x150>)
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f7fa fff0 	bl	8002e60 <send_debug_logs>
            return true ;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e004      	b.n	8007e8e <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007e84:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <astronode_send_cfg_wr+0x154>)
 8007e86:	0018      	movs	r0, r3
 8007e88:	f7fa ffea 	bl	8002e60 <send_debug_logs>
        }
    }
    return false ;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	0018      	movs	r0, r3
 8007e90:	46bd      	mov	sp, r7
 8007e92:	b067      	add	sp, #412	; 0x19c
 8007e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	fffffe6f 	.word	0xfffffe6f
 8007e9c:	fffffe6e 	.word	0xfffffe6e
 8007ea0:	fffffe6d 	.word	0xfffffe6d
 8007ea4:	fffffe6c 	.word	0xfffffe6c
 8007ea8:	fffffe70 	.word	0xfffffe70
 8007eac:	080134c4 	.word	0x080134c4
 8007eb0:	080134f0 	.word	0x080134f0

08007eb4 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb6:	b0ed      	sub	sp, #436	; 0x1b4
 8007eb8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007eba:	21c8      	movs	r1, #200	; 0xc8
 8007ebc:	2318      	movs	r3, #24
 8007ebe:	18cb      	adds	r3, r1, r3
 8007ec0:	19db      	adds	r3, r3, r7
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	23c6      	movs	r3, #198	; 0xc6
 8007ec6:	001a      	movs	r2, r3
 8007ec8:	2100      	movs	r1, #0
 8007eca:	f004 fa7d 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8007ece:	4b4a      	ldr	r3, [pc, #296]	; (8007ff8 <astronode_send_mgi_rr+0x144>)
 8007ed0:	26cc      	movs	r6, #204	; 0xcc
 8007ed2:	0076      	lsls	r6, r6, #1
 8007ed4:	199b      	adds	r3, r3, r6
 8007ed6:	2218      	movs	r2, #24
 8007ed8:	4694      	mov	ip, r2
 8007eda:	44bc      	add	ip, r7
 8007edc:	4463      	add	r3, ip
 8007ede:	0018      	movs	r0, r3
 8007ee0:	23c6      	movs	r3, #198	; 0xc6
 8007ee2:	001a      	movs	r2, r3
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	f004 fa6f 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007eea:	21c8      	movs	r1, #200	; 0xc8
 8007eec:	2318      	movs	r3, #24
 8007eee:	18cb      	adds	r3, r1, r3
 8007ef0:	19db      	adds	r3, r3, r7
 8007ef2:	2219      	movs	r2, #25
 8007ef4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007ef6:	2318      	movs	r3, #24
 8007ef8:	18fa      	adds	r2, r7, r3
 8007efa:	2318      	movs	r3, #24
 8007efc:	18cb      	adds	r3, r1, r3
 8007efe:	19db      	adds	r3, r3, r7
 8007f00:	0011      	movs	r1, r2
 8007f02:	0018      	movs	r0, r3
 8007f04:	f001 f9be 	bl	8009284 <astronode_transport_send_receive>
 8007f08:	0003      	movs	r3, r0
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d16f      	bne.n	8007fee <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007f0e:	4b3a      	ldr	r3, [pc, #232]	; (8007ff8 <astronode_send_mgi_rr+0x144>)
 8007f10:	0032      	movs	r2, r6
 8007f12:	189b      	adds	r3, r3, r2
 8007f14:	2118      	movs	r1, #24
 8007f16:	468c      	mov	ip, r1
 8007f18:	44bc      	add	ip, r7
 8007f1a:	4463      	add	r3, ip
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b99      	cmp	r3, #153	; 0x99
 8007f20:	d161      	bne.n	8007fe6 <astronode_send_mgi_rr+0x132>
        {
 8007f22:	466b      	mov	r3, sp
 8007f24:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007f26:	4b34      	ldr	r3, [pc, #208]	; (8007ff8 <astronode_send_mgi_rr+0x144>)
 8007f28:	189b      	adds	r3, r3, r2
 8007f2a:	2218      	movs	r2, #24
 8007f2c:	4694      	mov	ip, r2
 8007f2e:	44bc      	add	ip, r7
 8007f30:	4463      	add	r3, ip
 8007f32:	22c4      	movs	r2, #196	; 0xc4
 8007f34:	5a9b      	ldrh	r3, [r3, r2]
 8007f36:	001a      	movs	r2, r3
 8007f38:	3a01      	subs	r2, #1
 8007f3a:	21ca      	movs	r1, #202	; 0xca
 8007f3c:	0049      	lsls	r1, r1, #1
 8007f3e:	2018      	movs	r0, #24
 8007f40:	1809      	adds	r1, r1, r0
 8007f42:	19c9      	adds	r1, r1, r7
 8007f44:	600a      	str	r2, [r1, #0]
 8007f46:	001c      	movs	r4, r3
 8007f48:	2200      	movs	r2, #0
 8007f4a:	0015      	movs	r5, r2
 8007f4c:	0020      	movs	r0, r4
 8007f4e:	0029      	movs	r1, r5
 8007f50:	0004      	movs	r4, r0
 8007f52:	0f62      	lsrs	r2, r4, #29
 8007f54:	000c      	movs	r4, r1
 8007f56:	00e4      	lsls	r4, r4, #3
 8007f58:	617c      	str	r4, [r7, #20]
 8007f5a:	697c      	ldr	r4, [r7, #20]
 8007f5c:	4314      	orrs	r4, r2
 8007f5e:	617c      	str	r4, [r7, #20]
 8007f60:	0001      	movs	r1, r0
 8007f62:	00c9      	lsls	r1, r1, #3
 8007f64:	6139      	str	r1, [r7, #16]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	6838      	ldr	r0, [r7, #0]
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	0004      	movs	r4, r0
 8007f72:	0f62      	lsrs	r2, r4, #29
 8007f74:	000c      	movs	r4, r1
 8007f76:	00e4      	lsls	r4, r4, #3
 8007f78:	60fc      	str	r4, [r7, #12]
 8007f7a:	68fc      	ldr	r4, [r7, #12]
 8007f7c:	4314      	orrs	r4, r2
 8007f7e:	60fc      	str	r4, [r7, #12]
 8007f80:	0001      	movs	r1, r0
 8007f82:	00ca      	lsls	r2, r1, #3
 8007f84:	60ba      	str	r2, [r7, #8]
 8007f86:	3307      	adds	r3, #7
 8007f88:	08db      	lsrs	r3, r3, #3
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4669      	mov	r1, sp
 8007f8e:	1acb      	subs	r3, r1, r3
 8007f90:	469d      	mov	sp, r3
 8007f92:	466b      	mov	r3, sp
 8007f94:	3300      	adds	r3, #0
 8007f96:	24c8      	movs	r4, #200	; 0xc8
 8007f98:	0064      	lsls	r4, r4, #1
 8007f9a:	2218      	movs	r2, #24
 8007f9c:	18a2      	adds	r2, r4, r2
 8007f9e:	19d1      	adds	r1, r2, r7
 8007fa0:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007fa2:	4b16      	ldr	r3, [pc, #88]	; (8007ffc <astronode_send_mgi_rr+0x148>)
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f7fa ff5b 	bl	8002e60 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007faa:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <astronode_send_mgi_rr+0x144>)
 8007fac:	22cc      	movs	r2, #204	; 0xcc
 8007fae:	0052      	lsls	r2, r2, #1
 8007fb0:	189b      	adds	r3, r3, r2
 8007fb2:	2218      	movs	r2, #24
 8007fb4:	4694      	mov	ip, r2
 8007fb6:	44bc      	add	ip, r7
 8007fb8:	4463      	add	r3, ip
 8007fba:	22c4      	movs	r2, #196	; 0xc4
 8007fbc:	5a9b      	ldrh	r3, [r3, r2]
 8007fbe:	0019      	movs	r1, r3
 8007fc0:	2318      	movs	r3, #24
 8007fc2:	18fb      	adds	r3, r7, r3
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	4a0e      	ldr	r2, [pc, #56]	; (8008000 <astronode_send_mgi_rr+0x14c>)
 8007fc8:	2018      	movs	r0, #24
 8007fca:	1820      	adds	r0, r4, r0
 8007fcc:	19c0      	adds	r0, r0, r7
 8007fce:	6800      	ldr	r0, [r0, #0]
 8007fd0:	f004 f930 	bl	800c234 <snprintf>
            send_debug_logs(guid);
 8007fd4:	2318      	movs	r3, #24
 8007fd6:	18e3      	adds	r3, r4, r3
 8007fd8:	19db      	adds	r3, r3, r7
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f7fa ff3f 	bl	8002e60 <send_debug_logs>
 8007fe2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007fe4:	e003      	b.n	8007fee <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007fe6:	4b07      	ldr	r3, [pc, #28]	; (8008004 <astronode_send_mgi_rr+0x150>)
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f7fa ff39 	bl	8002e60 <send_debug_logs>
}
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	b06d      	add	sp, #436	; 0x1b4
 8007ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff6:	46c0      	nop			; (mov r8, r8)
 8007ff8:	fffffe68 	.word	0xfffffe68
 8007ffc:	0801357c 	.word	0x0801357c
 8008000:	0801358c 	.word	0x0801358c
 8008004:	08013590 	.word	0x08013590

08008008 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8008008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800800a:	b0ed      	sub	sp, #436	; 0x1b4
 800800c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800800e:	21c8      	movs	r1, #200	; 0xc8
 8008010:	2318      	movs	r3, #24
 8008012:	18cb      	adds	r3, r1, r3
 8008014:	19db      	adds	r3, r3, r7
 8008016:	0018      	movs	r0, r3
 8008018:	23c6      	movs	r3, #198	; 0xc6
 800801a:	001a      	movs	r2, r3
 800801c:	2100      	movs	r1, #0
 800801e:	f004 f9d3 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8008022:	4b4a      	ldr	r3, [pc, #296]	; (800814c <astronode_send_msn_rr+0x144>)
 8008024:	26cc      	movs	r6, #204	; 0xcc
 8008026:	0076      	lsls	r6, r6, #1
 8008028:	199b      	adds	r3, r3, r6
 800802a:	2218      	movs	r2, #24
 800802c:	4694      	mov	ip, r2
 800802e:	44bc      	add	ip, r7
 8008030:	4463      	add	r3, ip
 8008032:	0018      	movs	r0, r3
 8008034:	23c6      	movs	r3, #198	; 0xc6
 8008036:	001a      	movs	r2, r3
 8008038:	2100      	movs	r1, #0
 800803a:	f004 f9c5 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 800803e:	21c8      	movs	r1, #200	; 0xc8
 8008040:	2318      	movs	r3, #24
 8008042:	18cb      	adds	r3, r1, r3
 8008044:	19db      	adds	r3, r3, r7
 8008046:	221a      	movs	r2, #26
 8008048:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800804a:	2318      	movs	r3, #24
 800804c:	18fa      	adds	r2, r7, r3
 800804e:	2318      	movs	r3, #24
 8008050:	18cb      	adds	r3, r1, r3
 8008052:	19db      	adds	r3, r3, r7
 8008054:	0011      	movs	r1, r2
 8008056:	0018      	movs	r0, r3
 8008058:	f001 f914 	bl	8009284 <astronode_transport_send_receive>
 800805c:	0003      	movs	r3, r0
 800805e:	2b01      	cmp	r3, #1
 8008060:	d16f      	bne.n	8008142 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8008062:	4b3a      	ldr	r3, [pc, #232]	; (800814c <astronode_send_msn_rr+0x144>)
 8008064:	0032      	movs	r2, r6
 8008066:	189b      	adds	r3, r3, r2
 8008068:	2118      	movs	r1, #24
 800806a:	468c      	mov	ip, r1
 800806c:	44bc      	add	ip, r7
 800806e:	4463      	add	r3, ip
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b9a      	cmp	r3, #154	; 0x9a
 8008074:	d161      	bne.n	800813a <astronode_send_msn_rr+0x132>
        {
 8008076:	466b      	mov	r3, sp
 8008078:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 800807a:	4b34      	ldr	r3, [pc, #208]	; (800814c <astronode_send_msn_rr+0x144>)
 800807c:	189b      	adds	r3, r3, r2
 800807e:	2218      	movs	r2, #24
 8008080:	4694      	mov	ip, r2
 8008082:	44bc      	add	ip, r7
 8008084:	4463      	add	r3, ip
 8008086:	22c4      	movs	r2, #196	; 0xc4
 8008088:	5a9b      	ldrh	r3, [r3, r2]
 800808a:	001a      	movs	r2, r3
 800808c:	3a01      	subs	r2, #1
 800808e:	21ca      	movs	r1, #202	; 0xca
 8008090:	0049      	lsls	r1, r1, #1
 8008092:	2018      	movs	r0, #24
 8008094:	1809      	adds	r1, r1, r0
 8008096:	19c9      	adds	r1, r1, r7
 8008098:	600a      	str	r2, [r1, #0]
 800809a:	001c      	movs	r4, r3
 800809c:	2200      	movs	r2, #0
 800809e:	0015      	movs	r5, r2
 80080a0:	0020      	movs	r0, r4
 80080a2:	0029      	movs	r1, r5
 80080a4:	0004      	movs	r4, r0
 80080a6:	0f62      	lsrs	r2, r4, #29
 80080a8:	000c      	movs	r4, r1
 80080aa:	00e4      	lsls	r4, r4, #3
 80080ac:	617c      	str	r4, [r7, #20]
 80080ae:	697c      	ldr	r4, [r7, #20]
 80080b0:	4314      	orrs	r4, r2
 80080b2:	617c      	str	r4, [r7, #20]
 80080b4:	0001      	movs	r1, r0
 80080b6:	00c9      	lsls	r1, r1, #3
 80080b8:	6139      	str	r1, [r7, #16]
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	2200      	movs	r2, #0
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	6838      	ldr	r0, [r7, #0]
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	0004      	movs	r4, r0
 80080c6:	0f62      	lsrs	r2, r4, #29
 80080c8:	000c      	movs	r4, r1
 80080ca:	00e4      	lsls	r4, r4, #3
 80080cc:	60fc      	str	r4, [r7, #12]
 80080ce:	68fc      	ldr	r4, [r7, #12]
 80080d0:	4314      	orrs	r4, r2
 80080d2:	60fc      	str	r4, [r7, #12]
 80080d4:	0001      	movs	r1, r0
 80080d6:	00ca      	lsls	r2, r1, #3
 80080d8:	60ba      	str	r2, [r7, #8]
 80080da:	3307      	adds	r3, #7
 80080dc:	08db      	lsrs	r3, r3, #3
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	4669      	mov	r1, sp
 80080e2:	1acb      	subs	r3, r1, r3
 80080e4:	469d      	mov	sp, r3
 80080e6:	466b      	mov	r3, sp
 80080e8:	3300      	adds	r3, #0
 80080ea:	24c8      	movs	r4, #200	; 0xc8
 80080ec:	0064      	lsls	r4, r4, #1
 80080ee:	2218      	movs	r2, #24
 80080f0:	18a2      	adds	r2, r4, r2
 80080f2:	19d1      	adds	r1, r2, r7
 80080f4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 80080f6:	4b16      	ldr	r3, [pc, #88]	; (8008150 <astronode_send_msn_rr+0x148>)
 80080f8:	0018      	movs	r0, r3
 80080fa:	f7fa feb1 	bl	8002e60 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <astronode_send_msn_rr+0x144>)
 8008100:	22cc      	movs	r2, #204	; 0xcc
 8008102:	0052      	lsls	r2, r2, #1
 8008104:	189b      	adds	r3, r3, r2
 8008106:	2218      	movs	r2, #24
 8008108:	4694      	mov	ip, r2
 800810a:	44bc      	add	ip, r7
 800810c:	4463      	add	r3, ip
 800810e:	22c4      	movs	r2, #196	; 0xc4
 8008110:	5a9b      	ldrh	r3, [r3, r2]
 8008112:	0019      	movs	r1, r3
 8008114:	2318      	movs	r3, #24
 8008116:	18fb      	adds	r3, r7, r3
 8008118:	3301      	adds	r3, #1
 800811a:	4a0e      	ldr	r2, [pc, #56]	; (8008154 <astronode_send_msn_rr+0x14c>)
 800811c:	2018      	movs	r0, #24
 800811e:	1820      	adds	r0, r4, r0
 8008120:	19c0      	adds	r0, r0, r7
 8008122:	6800      	ldr	r0, [r0, #0]
 8008124:	f004 f886 	bl	800c234 <snprintf>
            send_debug_logs(serial_number);
 8008128:	2318      	movs	r3, #24
 800812a:	18e3      	adds	r3, r4, r3
 800812c:	19db      	adds	r3, r3, r7
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	0018      	movs	r0, r3
 8008132:	f7fa fe95 	bl	8002e60 <send_debug_logs>
 8008136:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008138:	e003      	b.n	8008142 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <astronode_send_msn_rr+0x150>)
 800813c:	0018      	movs	r0, r3
 800813e:	f7fa fe8f 	bl	8002e60 <send_debug_logs>
}
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	46bd      	mov	sp, r7
 8008146:	b06d      	add	sp, #436	; 0x1b4
 8008148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	fffffe68 	.word	0xfffffe68
 8008150:	080135ac 	.word	0x080135ac
 8008154:	0801358c 	.word	0x0801358c
 8008158:	080135c8 	.word	0x080135c8

0800815c <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 800815c:	b5b0      	push	{r4, r5, r7, lr}
 800815e:	b0fa      	sub	sp, #488	; 0x1e8
 8008160:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008162:	258e      	movs	r5, #142	; 0x8e
 8008164:	006d      	lsls	r5, r5, #1
 8008166:	197b      	adds	r3, r7, r5
 8008168:	0018      	movs	r0, r3
 800816a:	23c6      	movs	r3, #198	; 0xc6
 800816c:	001a      	movs	r2, r3
 800816e:	2100      	movs	r1, #0
 8008170:	f004 f92a 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8008174:	4b26      	ldr	r3, [pc, #152]	; (8008210 <astronode_send_nco_rr+0xb4>)
 8008176:	24f4      	movs	r4, #244	; 0xf4
 8008178:	0064      	lsls	r4, r4, #1
 800817a:	191b      	adds	r3, r3, r4
 800817c:	19db      	adds	r3, r3, r7
 800817e:	0018      	movs	r0, r3
 8008180:	23c6      	movs	r3, #198	; 0xc6
 8008182:	001a      	movs	r2, r3
 8008184:	2100      	movs	r1, #0
 8008186:	f004 f91f 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 800818a:	197b      	adds	r3, r7, r5
 800818c:	2218      	movs	r2, #24
 800818e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008190:	2354      	movs	r3, #84	; 0x54
 8008192:	18fa      	adds	r2, r7, r3
 8008194:	197b      	adds	r3, r7, r5
 8008196:	0011      	movs	r1, r2
 8008198:	0018      	movs	r0, r3
 800819a:	f001 f873 	bl	8009284 <astronode_transport_send_receive>
 800819e:	0003      	movs	r3, r0
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d131      	bne.n	8008208 <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 80081a4:	4b1a      	ldr	r3, [pc, #104]	; (8008210 <astronode_send_nco_rr+0xb4>)
 80081a6:	0021      	movs	r1, r4
 80081a8:	185b      	adds	r3, r3, r1
 80081aa:	19db      	adds	r3, r3, r7
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	2b98      	cmp	r3, #152	; 0x98
 80081b0:	d126      	bne.n	8008200 <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 80081b2:	4b17      	ldr	r3, [pc, #92]	; (8008210 <astronode_send_nco_rr+0xb4>)
 80081b4:	185b      	adds	r3, r3, r1
 80081b6:	19db      	adds	r3, r3, r7
 80081b8:	785b      	ldrb	r3, [r3, #1]
 80081ba:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 80081bc:	4b14      	ldr	r3, [pc, #80]	; (8008210 <astronode_send_nco_rr+0xb4>)
 80081be:	185b      	adds	r3, r3, r1
 80081c0:	19db      	adds	r3, r3, r7
 80081c2:	789b      	ldrb	r3, [r3, #2]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 80081c8:	4b11      	ldr	r3, [pc, #68]	; (8008210 <astronode_send_nco_rr+0xb4>)
 80081ca:	185b      	adds	r3, r3, r1
 80081cc:	19db      	adds	r3, r3, r7
 80081ce:	78db      	ldrb	r3, [r3, #3]
 80081d0:	041b      	lsls	r3, r3, #16
 80081d2:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 80081d4:	4b0e      	ldr	r3, [pc, #56]	; (8008210 <astronode_send_nco_rr+0xb4>)
 80081d6:	185b      	adds	r3, r3, r1
 80081d8:	19db      	adds	r3, r3, r7
 80081da:	791b      	ldrb	r3, [r3, #4]
 80081dc:	061b      	lsls	r3, r3, #24
 80081de:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 80081e0:	22f2      	movs	r2, #242	; 0xf2
 80081e2:	0052      	lsls	r2, r2, #1
 80081e4:	18b9      	adds	r1, r7, r2
 80081e6:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 80081e8:	18bb      	adds	r3, r7, r2
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	4909      	ldr	r1, [pc, #36]	; (8008214 <astronode_send_nco_rr+0xb8>)
 80081ee:	1d3b      	adds	r3, r7, #4
 80081f0:	0018      	movs	r0, r3
 80081f2:	f004 f853 	bl	800c29c <sprintf>
            send_debug_logs(str);
 80081f6:	1d3b      	adds	r3, r7, #4
 80081f8:	0018      	movs	r0, r3
 80081fa:	f7fa fe31 	bl	8002e60 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 80081fe:	e003      	b.n	8008208 <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <astronode_send_nco_rr+0xbc>)
 8008202:	0018      	movs	r0, r3
 8008204:	f7fa fe2c 	bl	8002e60 <send_debug_logs>
}
 8008208:	46c0      	nop			; (mov r8, r8)
 800820a:	46bd      	mov	sp, r7
 800820c:	b07a      	add	sp, #488	; 0x1e8
 800820e:	bdb0      	pop	{r4, r5, r7, pc}
 8008210:	fffffe6c 	.word	0xfffffe6c
 8008214:	080135f0 	.word	0x080135f0
 8008218:	08013638 	.word	0x08013638

0800821c <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 800821c:	b5b0      	push	{r4, r5, r7, lr}
 800821e:	b0e4      	sub	sp, #400	; 0x190
 8008220:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008222:	24c8      	movs	r4, #200	; 0xc8
 8008224:	193b      	adds	r3, r7, r4
 8008226:	0018      	movs	r0, r3
 8008228:	23c6      	movs	r3, #198	; 0xc6
 800822a:	001a      	movs	r2, r3
 800822c:	2100      	movs	r1, #0
 800822e:	f004 f8cb 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8008232:	4b31      	ldr	r3, [pc, #196]	; (80082f8 <astronode_send_evt_rr+0xdc>)
 8008234:	25c8      	movs	r5, #200	; 0xc8
 8008236:	006d      	lsls	r5, r5, #1
 8008238:	195b      	adds	r3, r3, r5
 800823a:	19db      	adds	r3, r3, r7
 800823c:	0018      	movs	r0, r3
 800823e:	23c6      	movs	r3, #198	; 0xc6
 8008240:	001a      	movs	r2, r3
 8008242:	2100      	movs	r1, #0
 8008244:	f004 f8c0 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8008248:	193b      	adds	r3, r7, r4
 800824a:	2265      	movs	r2, #101	; 0x65
 800824c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800824e:	003a      	movs	r2, r7
 8008250:	193b      	adds	r3, r7, r4
 8008252:	0011      	movs	r1, r2
 8008254:	0018      	movs	r0, r3
 8008256:	f001 f815 	bl	8009284 <astronode_transport_send_receive>
 800825a:	0003      	movs	r3, r0
 800825c:	2b01      	cmp	r3, #1
 800825e:	d147      	bne.n	80082f0 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8008260:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <astronode_send_evt_rr+0xdc>)
 8008262:	195b      	adds	r3, r3, r5
 8008264:	19db      	adds	r3, r3, r7
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2be5      	cmp	r3, #229	; 0xe5
 800826a:	d141      	bne.n	80082f0 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 800826c:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <astronode_send_evt_rr+0xdc>)
 800826e:	195b      	adds	r3, r3, r5
 8008270:	19db      	adds	r3, r3, r7
 8008272:	785b      	ldrb	r3, [r3, #1]
 8008274:	001a      	movs	r2, r3
 8008276:	2301      	movs	r3, #1
 8008278:	4013      	ands	r3, r2
 800827a:	d006      	beq.n	800828a <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 800827c:	4b1f      	ldr	r3, [pc, #124]	; (80082fc <astronode_send_evt_rr+0xe0>)
 800827e:	2201      	movs	r2, #1
 8008280:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8008282:	4b1f      	ldr	r3, [pc, #124]	; (8008300 <astronode_send_evt_rr+0xe4>)
 8008284:	0018      	movs	r0, r3
 8008286:	f7fa fdeb 	bl	8002e60 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 800828a:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <astronode_send_evt_rr+0xdc>)
 800828c:	22c8      	movs	r2, #200	; 0xc8
 800828e:	0052      	lsls	r2, r2, #1
 8008290:	189b      	adds	r3, r3, r2
 8008292:	19db      	adds	r3, r3, r7
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	001a      	movs	r2, r3
 8008298:	2302      	movs	r3, #2
 800829a:	4013      	ands	r3, r2
 800829c:	d006      	beq.n	80082ac <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800829e:	4b19      	ldr	r3, [pc, #100]	; (8008304 <astronode_send_evt_rr+0xe8>)
 80082a0:	2201      	movs	r2, #1
 80082a2:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 80082a4:	4b18      	ldr	r3, [pc, #96]	; (8008308 <astronode_send_evt_rr+0xec>)
 80082a6:	0018      	movs	r0, r3
 80082a8:	f7fa fdda 	bl	8002e60 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 80082ac:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <astronode_send_evt_rr+0xdc>)
 80082ae:	22c8      	movs	r2, #200	; 0xc8
 80082b0:	0052      	lsls	r2, r2, #1
 80082b2:	189b      	adds	r3, r3, r2
 80082b4:	19db      	adds	r3, r3, r7
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	001a      	movs	r2, r3
 80082ba:	2304      	movs	r3, #4
 80082bc:	4013      	ands	r3, r2
 80082be:	d006      	beq.n	80082ce <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 80082c0:	4b12      	ldr	r3, [pc, #72]	; (800830c <astronode_send_evt_rr+0xf0>)
 80082c2:	2201      	movs	r2, #1
 80082c4:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 80082c6:	4b12      	ldr	r3, [pc, #72]	; (8008310 <astronode_send_evt_rr+0xf4>)
 80082c8:	0018      	movs	r0, r3
 80082ca:	f7fa fdc9 	bl	8002e60 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 80082ce:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <astronode_send_evt_rr+0xdc>)
 80082d0:	22c8      	movs	r2, #200	; 0xc8
 80082d2:	0052      	lsls	r2, r2, #1
 80082d4:	189b      	adds	r3, r3, r2
 80082d6:	19db      	adds	r3, r3, r7
 80082d8:	785b      	ldrb	r3, [r3, #1]
 80082da:	001a      	movs	r2, r3
 80082dc:	2308      	movs	r3, #8
 80082de:	4013      	ands	r3, r2
 80082e0:	d006      	beq.n	80082f0 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 80082e2:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <astronode_send_evt_rr+0xf8>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 80082e8:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <astronode_send_evt_rr+0xfc>)
 80082ea:	0018      	movs	r0, r3
 80082ec:	f7fa fdb8 	bl	8002e60 <send_debug_logs>
            }

        }
    }
}
 80082f0:	46c0      	nop			; (mov r8, r8)
 80082f2:	46bd      	mov	sp, r7
 80082f4:	b064      	add	sp, #400	; 0x190
 80082f6:	bdb0      	pop	{r4, r5, r7, pc}
 80082f8:	fffffe70 	.word	0xfffffe70
 80082fc:	20000bb0 	.word	0x20000bb0
 8008300:	08013670 	.word	0x08013670
 8008304:	20000bb1 	.word	0x20000bb1
 8008308:	08013694 	.word	0x08013694
 800830c:	20000bb2 	.word	0x20000bb2
 8008310:	080136ac 	.word	0x080136ac
 8008314:	20000bb3 	.word	0x20000bb3
 8008318:	080136c0 	.word	0x080136c0

0800831c <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 800831c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800831e:	b0e7      	sub	sp, #412	; 0x19c
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8008326:	24d0      	movs	r4, #208	; 0xd0
 8008328:	193b      	adds	r3, r7, r4
 800832a:	0018      	movs	r0, r3
 800832c:	23c6      	movs	r3, #198	; 0xc6
 800832e:	001a      	movs	r2, r3
 8008330:	2100      	movs	r1, #0
 8008332:	f004 f849 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8008336:	4b56      	ldr	r3, [pc, #344]	; (8008490 <astronode_send_geo_wr+0x174>)
 8008338:	26cc      	movs	r6, #204	; 0xcc
 800833a:	0076      	lsls	r6, r6, #1
 800833c:	199b      	adds	r3, r3, r6
 800833e:	19db      	adds	r3, r3, r7
 8008340:	0018      	movs	r0, r3
 8008342:	23c6      	movs	r3, #198	; 0xc6
 8008344:	001a      	movs	r2, r3
 8008346:	2100      	movs	r1, #0
 8008348:	f004 f83e 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 800834c:	193b      	adds	r3, r7, r4
 800834e:	2235      	movs	r2, #53	; 0x35
 8008350:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8008352:	193b      	adds	r3, r7, r4
 8008354:	22c4      	movs	r2, #196	; 0xc4
 8008356:	5a9b      	ldrh	r3, [r3, r2]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	b290      	uxth	r0, r2
 800835c:	193a      	adds	r2, r7, r4
 800835e:	21c4      	movs	r1, #196	; 0xc4
 8008360:	5250      	strh	r0, [r2, r1]
 8008362:	0019      	movs	r1, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	b2da      	uxtb	r2, r3
 8008368:	193b      	adds	r3, r7, r4
 800836a:	185b      	adds	r3, r3, r1
 800836c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	1218      	asrs	r0, r3, #8
 8008372:	0025      	movs	r5, r4
 8008374:	197b      	adds	r3, r7, r5
 8008376:	22c4      	movs	r2, #196	; 0xc4
 8008378:	5a9b      	ldrh	r3, [r3, r2]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	b294      	uxth	r4, r2
 800837e:	197a      	adds	r2, r7, r5
 8008380:	21c4      	movs	r1, #196	; 0xc4
 8008382:	5254      	strh	r4, [r2, r1]
 8008384:	0019      	movs	r1, r3
 8008386:	b2c2      	uxtb	r2, r0
 8008388:	002c      	movs	r4, r5
 800838a:	193b      	adds	r3, r7, r4
 800838c:	185b      	adds	r3, r3, r1
 800838e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	1418      	asrs	r0, r3, #16
 8008394:	0025      	movs	r5, r4
 8008396:	197b      	adds	r3, r7, r5
 8008398:	22c4      	movs	r2, #196	; 0xc4
 800839a:	5a9b      	ldrh	r3, [r3, r2]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	b294      	uxth	r4, r2
 80083a0:	197a      	adds	r2, r7, r5
 80083a2:	21c4      	movs	r1, #196	; 0xc4
 80083a4:	5254      	strh	r4, [r2, r1]
 80083a6:	0019      	movs	r1, r3
 80083a8:	b2c2      	uxtb	r2, r0
 80083aa:	002c      	movs	r4, r5
 80083ac:	193b      	adds	r3, r7, r4
 80083ae:	185b      	adds	r3, r3, r1
 80083b0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	1618      	asrs	r0, r3, #24
 80083b6:	0025      	movs	r5, r4
 80083b8:	197b      	adds	r3, r7, r5
 80083ba:	22c4      	movs	r2, #196	; 0xc4
 80083bc:	5a9b      	ldrh	r3, [r3, r2]
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	b294      	uxth	r4, r2
 80083c2:	197a      	adds	r2, r7, r5
 80083c4:	21c4      	movs	r1, #196	; 0xc4
 80083c6:	5254      	strh	r4, [r2, r1]
 80083c8:	0019      	movs	r1, r3
 80083ca:	b2c2      	uxtb	r2, r0
 80083cc:	002c      	movs	r4, r5
 80083ce:	193b      	adds	r3, r7, r4
 80083d0:	185b      	adds	r3, r3, r1
 80083d2:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 80083d4:	193b      	adds	r3, r7, r4
 80083d6:	22c4      	movs	r2, #196	; 0xc4
 80083d8:	5a9b      	ldrh	r3, [r3, r2]
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	b290      	uxth	r0, r2
 80083de:	193a      	adds	r2, r7, r4
 80083e0:	21c4      	movs	r1, #196	; 0xc4
 80083e2:	5250      	strh	r0, [r2, r1]
 80083e4:	0019      	movs	r1, r3
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	193b      	adds	r3, r7, r4
 80083ec:	185b      	adds	r3, r3, r1
 80083ee:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	1218      	asrs	r0, r3, #8
 80083f4:	0025      	movs	r5, r4
 80083f6:	197b      	adds	r3, r7, r5
 80083f8:	22c4      	movs	r2, #196	; 0xc4
 80083fa:	5a9b      	ldrh	r3, [r3, r2]
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	b294      	uxth	r4, r2
 8008400:	197a      	adds	r2, r7, r5
 8008402:	21c4      	movs	r1, #196	; 0xc4
 8008404:	5254      	strh	r4, [r2, r1]
 8008406:	0019      	movs	r1, r3
 8008408:	b2c2      	uxtb	r2, r0
 800840a:	002c      	movs	r4, r5
 800840c:	193b      	adds	r3, r7, r4
 800840e:	185b      	adds	r3, r3, r1
 8008410:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	1418      	asrs	r0, r3, #16
 8008416:	0025      	movs	r5, r4
 8008418:	197b      	adds	r3, r7, r5
 800841a:	22c4      	movs	r2, #196	; 0xc4
 800841c:	5a9b      	ldrh	r3, [r3, r2]
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	b294      	uxth	r4, r2
 8008422:	197a      	adds	r2, r7, r5
 8008424:	21c4      	movs	r1, #196	; 0xc4
 8008426:	5254      	strh	r4, [r2, r1]
 8008428:	0019      	movs	r1, r3
 800842a:	b2c2      	uxtb	r2, r0
 800842c:	002c      	movs	r4, r5
 800842e:	193b      	adds	r3, r7, r4
 8008430:	185b      	adds	r3, r3, r1
 8008432:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	1618      	asrs	r0, r3, #24
 8008438:	0025      	movs	r5, r4
 800843a:	197b      	adds	r3, r7, r5
 800843c:	22c4      	movs	r2, #196	; 0xc4
 800843e:	5a9b      	ldrh	r3, [r3, r2]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	b294      	uxth	r4, r2
 8008444:	197a      	adds	r2, r7, r5
 8008446:	21c4      	movs	r1, #196	; 0xc4
 8008448:	5254      	strh	r4, [r2, r1]
 800844a:	0019      	movs	r1, r3
 800844c:	b2c2      	uxtb	r2, r0
 800844e:	0028      	movs	r0, r5
 8008450:	183b      	adds	r3, r7, r0
 8008452:	185b      	adds	r3, r3, r1
 8008454:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008456:	2308      	movs	r3, #8
 8008458:	18fa      	adds	r2, r7, r3
 800845a:	183b      	adds	r3, r7, r0
 800845c:	0011      	movs	r1, r2
 800845e:	0018      	movs	r0, r3
 8008460:	f000 ff10 	bl	8009284 <astronode_transport_send_receive>
 8008464:	0003      	movs	r3, r0
 8008466:	2b01      	cmp	r3, #1
 8008468:	d10e      	bne.n	8008488 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <astronode_send_geo_wr+0x174>)
 800846c:	199b      	adds	r3, r3, r6
 800846e:	19db      	adds	r3, r3, r7
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2bb5      	cmp	r3, #181	; 0xb5
 8008474:	d104      	bne.n	8008480 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8008476:	4b07      	ldr	r3, [pc, #28]	; (8008494 <astronode_send_geo_wr+0x178>)
 8008478:	0018      	movs	r0, r3
 800847a:	f7fa fcf1 	bl	8002e60 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800847e:	e003      	b.n	8008488 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <astronode_send_geo_wr+0x17c>)
 8008482:	0018      	movs	r0, r3
 8008484:	f7fa fcec 	bl	8002e60 <send_debug_logs>
}
 8008488:	46c0      	nop			; (mov r8, r8)
 800848a:	46bd      	mov	sp, r7
 800848c:	b067      	add	sp, #412	; 0x19c
 800848e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008490:	fffffe70 	.word	0xfffffe70
 8008494:	080136d4 	.word	0x080136d4
 8008498:	08013700 	.word	0x08013700

0800849c <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 800849c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800849e:	b0fb      	sub	sp, #492	; 0x1ec
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6039      	str	r1, [r7, #0]
 80084a4:	0011      	movs	r1, r2
 80084a6:	4b4a      	ldr	r3, [pc, #296]	; (80085d0 <astronode_send_pld_er+0x134>)
 80084a8:	26f4      	movs	r6, #244	; 0xf4
 80084aa:	0076      	lsls	r6, r6, #1
 80084ac:	199b      	adds	r3, r3, r6
 80084ae:	19db      	adds	r3, r3, r7
 80084b0:	1c02      	adds	r2, r0, #0
 80084b2:	801a      	strh	r2, [r3, #0]
 80084b4:	4b47      	ldr	r3, [pc, #284]	; (80085d4 <astronode_send_pld_er+0x138>)
 80084b6:	199b      	adds	r3, r3, r6
 80084b8:	19db      	adds	r3, r3, r7
 80084ba:	1c0a      	adds	r2, r1, #0
 80084bc:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80084be:	2490      	movs	r4, #144	; 0x90
 80084c0:	0064      	lsls	r4, r4, #1
 80084c2:	193b      	adds	r3, r7, r4
 80084c4:	0018      	movs	r0, r3
 80084c6:	23c6      	movs	r3, #198	; 0xc6
 80084c8:	001a      	movs	r2, r3
 80084ca:	2100      	movs	r1, #0
 80084cc:	f003 ff7c 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 80084d0:	4b41      	ldr	r3, [pc, #260]	; (80085d8 <astronode_send_pld_er+0x13c>)
 80084d2:	199b      	adds	r3, r3, r6
 80084d4:	19db      	adds	r3, r3, r7
 80084d6:	0018      	movs	r0, r3
 80084d8:	23c6      	movs	r3, #198	; 0xc6
 80084da:	001a      	movs	r2, r3
 80084dc:	2100      	movs	r1, #0
 80084de:	f003 ff73 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80084e2:	193b      	adds	r3, r7, r4
 80084e4:	2225      	movs	r2, #37	; 0x25
 80084e6:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80084e8:	193b      	adds	r3, r7, r4
 80084ea:	22c4      	movs	r2, #196	; 0xc4
 80084ec:	5a9b      	ldrh	r3, [r3, r2]
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	b290      	uxth	r0, r2
 80084f2:	193a      	adds	r2, r7, r4
 80084f4:	21c4      	movs	r1, #196	; 0xc4
 80084f6:	5250      	strh	r0, [r2, r1]
 80084f8:	0019      	movs	r1, r3
 80084fa:	4b35      	ldr	r3, [pc, #212]	; (80085d0 <astronode_send_pld_er+0x134>)
 80084fc:	199b      	adds	r3, r3, r6
 80084fe:	19db      	adds	r3, r3, r7
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b2da      	uxtb	r2, r3
 8008504:	193b      	adds	r3, r7, r4
 8008506:	185b      	adds	r3, r3, r1
 8008508:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800850a:	4b31      	ldr	r3, [pc, #196]	; (80085d0 <astronode_send_pld_er+0x134>)
 800850c:	199b      	adds	r3, r3, r6
 800850e:	19db      	adds	r3, r3, r7
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	0a1b      	lsrs	r3, r3, #8
 8008514:	b298      	uxth	r0, r3
 8008516:	0025      	movs	r5, r4
 8008518:	197b      	adds	r3, r7, r5
 800851a:	22c4      	movs	r2, #196	; 0xc4
 800851c:	5a9b      	ldrh	r3, [r3, r2]
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	b294      	uxth	r4, r2
 8008522:	197a      	adds	r2, r7, r5
 8008524:	21c4      	movs	r1, #196	; 0xc4
 8008526:	5254      	strh	r4, [r2, r1]
 8008528:	0019      	movs	r1, r3
 800852a:	b2c2      	uxtb	r2, r0
 800852c:	002c      	movs	r4, r5
 800852e:	193b      	adds	r3, r7, r4
 8008530:	185b      	adds	r3, r3, r1
 8008532:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8008534:	193b      	adds	r3, r7, r4
 8008536:	22c4      	movs	r2, #196	; 0xc4
 8008538:	5a9b      	ldrh	r3, [r3, r2]
 800853a:	001a      	movs	r2, r3
 800853c:	193b      	adds	r3, r7, r4
 800853e:	189b      	adds	r3, r3, r2
 8008540:	1c58      	adds	r0, r3, #1
 8008542:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <astronode_send_pld_er+0x138>)
 8008544:	199b      	adds	r3, r3, r6
 8008546:	19db      	adds	r3, r3, r7
 8008548:	881a      	ldrh	r2, [r3, #0]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	0019      	movs	r1, r3
 800854e:	f004 f820 	bl	800c592 <memcpy>
    request.payload_len = 2 + payload_length;
 8008552:	4b20      	ldr	r3, [pc, #128]	; (80085d4 <astronode_send_pld_er+0x138>)
 8008554:	199b      	adds	r3, r3, r6
 8008556:	19db      	adds	r3, r3, r7
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	3302      	adds	r3, #2
 800855c:	b299      	uxth	r1, r3
 800855e:	193b      	adds	r3, r7, r4
 8008560:	22c4      	movs	r2, #196	; 0xc4
 8008562:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008564:	2358      	movs	r3, #88	; 0x58
 8008566:	18fa      	adds	r2, r7, r3
 8008568:	193b      	adds	r3, r7, r4
 800856a:	0011      	movs	r1, r2
 800856c:	0018      	movs	r0, r3
 800856e:	f000 fe89 	bl	8009284 <astronode_transport_send_receive>
 8008572:	0003      	movs	r3, r0
 8008574:	2b01      	cmp	r3, #1
 8008576:	d125      	bne.n	80085c4 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8008578:	4b17      	ldr	r3, [pc, #92]	; (80085d8 <astronode_send_pld_er+0x13c>)
 800857a:	199b      	adds	r3, r3, r6
 800857c:	19db      	adds	r3, r3, r7
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2ba5      	cmp	r3, #165	; 0xa5
 8008582:	d10f      	bne.n	80085a4 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 8008584:	4b12      	ldr	r3, [pc, #72]	; (80085d0 <astronode_send_pld_er+0x134>)
 8008586:	199b      	adds	r3, r3, r6
 8008588:	19db      	adds	r3, r3, r7
 800858a:	881a      	ldrh	r2, [r3, #0]
 800858c:	4913      	ldr	r1, [pc, #76]	; (80085dc <astronode_send_pld_er+0x140>)
 800858e:	2408      	movs	r4, #8
 8008590:	193b      	adds	r3, r7, r4
 8008592:	0018      	movs	r0, r3
 8008594:	f003 fe82 	bl	800c29c <sprintf>
            send_debug_logs ( s ) ;
 8008598:	193b      	adds	r3, r7, r4
 800859a:	0018      	movs	r0, r3
 800859c:	f7fa fc60 	bl	8002e60 <send_debug_logs>
            return true ;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e010      	b.n	80085c6 <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80085a4:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <astronode_send_pld_er+0x134>)
 80085a6:	22f4      	movs	r2, #244	; 0xf4
 80085a8:	0052      	lsls	r2, r2, #1
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	19db      	adds	r3, r3, r7
 80085ae:	881a      	ldrh	r2, [r3, #0]
 80085b0:	490b      	ldr	r1, [pc, #44]	; (80085e0 <astronode_send_pld_er+0x144>)
 80085b2:	2408      	movs	r4, #8
 80085b4:	193b      	adds	r3, r7, r4
 80085b6:	0018      	movs	r0, r3
 80085b8:	f003 fe70 	bl	800c29c <sprintf>
            send_debug_logs ( s ) ;
 80085bc:	193b      	adds	r3, r7, r4
 80085be:	0018      	movs	r0, r3
 80085c0:	f7fa fc4e 	bl	8002e60 <send_debug_logs>
        }
    }
    return false ;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	0018      	movs	r0, r3
 80085c8:	46bd      	mov	sp, r7
 80085ca:	b07b      	add	sp, #492	; 0x1ec
 80085cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	fffffe1e 	.word	0xfffffe1e
 80085d4:	fffffe1c 	.word	0xfffffe1c
 80085d8:	fffffe70 	.word	0xfffffe70
 80085dc:	08013778 	.word	0x08013778
 80085e0:	080137a4 	.word	0x080137a4

080085e4 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80085e4:	b5b0      	push	{r4, r5, r7, lr}
 80085e6:	b0e4      	sub	sp, #400	; 0x190
 80085e8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80085ea:	24c8      	movs	r4, #200	; 0xc8
 80085ec:	193b      	adds	r3, r7, r4
 80085ee:	0018      	movs	r0, r3
 80085f0:	23c6      	movs	r3, #198	; 0xc6
 80085f2:	001a      	movs	r2, r3
 80085f4:	2100      	movs	r1, #0
 80085f6:	f003 fee7 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <astronode_send_pld_fr+0x6c>)
 80085fc:	25c8      	movs	r5, #200	; 0xc8
 80085fe:	006d      	lsls	r5, r5, #1
 8008600:	195b      	adds	r3, r3, r5
 8008602:	19db      	adds	r3, r3, r7
 8008604:	0018      	movs	r0, r3
 8008606:	23c6      	movs	r3, #198	; 0xc6
 8008608:	001a      	movs	r2, r3
 800860a:	2100      	movs	r1, #0
 800860c:	f003 fedc 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8008610:	193b      	adds	r3, r7, r4
 8008612:	2227      	movs	r2, #39	; 0x27
 8008614:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008616:	003a      	movs	r2, r7
 8008618:	193b      	adds	r3, r7, r4
 800861a:	0011      	movs	r1, r2
 800861c:	0018      	movs	r0, r3
 800861e:	f000 fe31 	bl	8009284 <astronode_transport_send_receive>
 8008622:	0003      	movs	r3, r0
 8008624:	2b01      	cmp	r3, #1
 8008626:	d10e      	bne.n	8008646 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8008628:	4b09      	ldr	r3, [pc, #36]	; (8008650 <astronode_send_pld_fr+0x6c>)
 800862a:	195b      	adds	r3, r3, r5
 800862c:	19db      	adds	r3, r3, r7
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2ba7      	cmp	r3, #167	; 0xa7
 8008632:	d104      	bne.n	800863e <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <astronode_send_pld_fr+0x70>)
 8008636:	0018      	movs	r0, r3
 8008638:	f7fa fc12 	bl	8002e60 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 800863c:	e003      	b.n	8008646 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 800863e:	4b06      	ldr	r3, [pc, #24]	; (8008658 <astronode_send_pld_fr+0x74>)
 8008640:	0018      	movs	r0, r3
 8008642:	f7fa fc0d 	bl	8002e60 <send_debug_logs>
}
 8008646:	46c0      	nop			; (mov r8, r8)
 8008648:	46bd      	mov	sp, r7
 800864a:	b064      	add	sp, #400	; 0x190
 800864c:	bdb0      	pop	{r4, r5, r7, pc}
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	fffffe70 	.word	0xfffffe70
 8008654:	080137d4 	.word	0x080137d4
 8008658:	0801380c 	.word	0x0801380c

0800865c <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 800865c:	b5b0      	push	{r4, r5, r7, lr}
 800865e:	b0e4      	sub	sp, #400	; 0x190
 8008660:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008662:	24c8      	movs	r4, #200	; 0xc8
 8008664:	193b      	adds	r3, r7, r4
 8008666:	0018      	movs	r0, r3
 8008668:	23c6      	movs	r3, #198	; 0xc6
 800866a:	001a      	movs	r2, r3
 800866c:	2100      	movs	r1, #0
 800866e:	f003 feab 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8008672:	4b16      	ldr	r3, [pc, #88]	; (80086cc <astronode_send_res_cr+0x70>)
 8008674:	25c8      	movs	r5, #200	; 0xc8
 8008676:	006d      	lsls	r5, r5, #1
 8008678:	195b      	adds	r3, r3, r5
 800867a:	19db      	adds	r3, r3, r7
 800867c:	0018      	movs	r0, r3
 800867e:	23c6      	movs	r3, #198	; 0xc6
 8008680:	001a      	movs	r2, r3
 8008682:	2100      	movs	r1, #0
 8008684:	f003 fea0 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8008688:	193b      	adds	r3, r7, r4
 800868a:	2255      	movs	r2, #85	; 0x55
 800868c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800868e:	003a      	movs	r2, r7
 8008690:	193b      	adds	r3, r7, r4
 8008692:	0011      	movs	r1, r2
 8008694:	0018      	movs	r0, r3
 8008696:	f000 fdf5 	bl	8009284 <astronode_transport_send_receive>
 800869a:	0003      	movs	r3, r0
 800869c:	2b01      	cmp	r3, #1
 800869e:	d111      	bne.n	80086c4 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80086a0:	4b0a      	ldr	r3, [pc, #40]	; (80086cc <astronode_send_res_cr+0x70>)
 80086a2:	195b      	adds	r3, r3, r5
 80086a4:	19db      	adds	r3, r3, r7
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2bd5      	cmp	r3, #213	; 0xd5
 80086aa:	d107      	bne.n	80086bc <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80086ac:	4b08      	ldr	r3, [pc, #32]	; (80086d0 <astronode_send_res_cr+0x74>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80086b2:	4b08      	ldr	r3, [pc, #32]	; (80086d4 <astronode_send_res_cr+0x78>)
 80086b4:	0018      	movs	r0, r3
 80086b6:	f7fa fbd3 	bl	8002e60 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 80086ba:	e003      	b.n	80086c4 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 80086bc:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <astronode_send_res_cr+0x7c>)
 80086be:	0018      	movs	r0, r3
 80086c0:	f7fa fbce 	bl	8002e60 <send_debug_logs>
}
 80086c4:	46c0      	nop			; (mov r8, r8)
 80086c6:	46bd      	mov	sp, r7
 80086c8:	b064      	add	sp, #400	; 0x190
 80086ca:	bdb0      	pop	{r4, r5, r7, pc}
 80086cc:	fffffe70 	.word	0xfffffe70
 80086d0:	20000bb1 	.word	0x20000bb1
 80086d4:	08013848 	.word	0x08013848
 80086d8:	0801387c 	.word	0x0801387c

080086dc <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80086dc:	b5b0      	push	{r4, r5, r7, lr}
 80086de:	b0fa      	sub	sp, #488	; 0x1e8
 80086e0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80086e2:	258e      	movs	r5, #142	; 0x8e
 80086e4:	006d      	lsls	r5, r5, #1
 80086e6:	197b      	adds	r3, r7, r5
 80086e8:	0018      	movs	r0, r3
 80086ea:	23c6      	movs	r3, #198	; 0xc6
 80086ec:	001a      	movs	r2, r3
 80086ee:	2100      	movs	r1, #0
 80086f0:	f003 fe6a 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0} ;
 80086f4:	4b28      	ldr	r3, [pc, #160]	; (8008798 <astronode_send_rtc_rr+0xbc>)
 80086f6:	24f4      	movs	r4, #244	; 0xf4
 80086f8:	0064      	lsls	r4, r4, #1
 80086fa:	191b      	adds	r3, r3, r4
 80086fc:	19db      	adds	r3, r3, r7
 80086fe:	0018      	movs	r0, r3
 8008700:	23c6      	movs	r3, #198	; 0xc6
 8008702:	001a      	movs	r2, r3
 8008704:	2100      	movs	r1, #0
 8008706:	f003 fe5f 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 800870a:	197b      	adds	r3, r7, r5
 800870c:	2217      	movs	r2, #23
 800870e:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008710:	2354      	movs	r3, #84	; 0x54
 8008712:	18fa      	adds	r2, r7, r3
 8008714:	197b      	adds	r3, r7, r5
 8008716:	0011      	movs	r1, r2
 8008718:	0018      	movs	r0, r3
 800871a:	f000 fdb3 	bl	8009284 <astronode_transport_send_receive>
 800871e:	0003      	movs	r3, r0
 8008720:	2b01      	cmp	r3, #1
 8008722:	d133      	bne.n	800878c <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8008724:	4b1c      	ldr	r3, [pc, #112]	; (8008798 <astronode_send_rtc_rr+0xbc>)
 8008726:	0021      	movs	r1, r4
 8008728:	185b      	adds	r3, r3, r1
 800872a:	19db      	adds	r3, r3, r7
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b97      	cmp	r3, #151	; 0x97
 8008730:	d128      	bne.n	8008784 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8008732:	4b19      	ldr	r3, [pc, #100]	; (8008798 <astronode_send_rtc_rr+0xbc>)
 8008734:	185b      	adds	r3, r3, r1
 8008736:	19db      	adds	r3, r3, r7
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 800873c:	4b16      	ldr	r3, [pc, #88]	; (8008798 <astronode_send_rtc_rr+0xbc>)
 800873e:	185b      	adds	r3, r3, r1
 8008740:	19db      	adds	r3, r3, r7
 8008742:	789b      	ldrb	r3, [r3, #2]
 8008744:	021b      	lsls	r3, r3, #8
 8008746:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008748:	4b13      	ldr	r3, [pc, #76]	; (8008798 <astronode_send_rtc_rr+0xbc>)
 800874a:	185b      	adds	r3, r3, r1
 800874c:	19db      	adds	r3, r3, r7
 800874e:	78db      	ldrb	r3, [r3, #3]
 8008750:	041b      	lsls	r3, r3, #16
 8008752:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008754:	4b10      	ldr	r3, [pc, #64]	; (8008798 <astronode_send_rtc_rr+0xbc>)
 8008756:	185b      	adds	r3, r3, r1
 8008758:	19db      	adds	r3, r3, r7
 800875a:	791b      	ldrb	r3, [r3, #4]
 800875c:	061b      	lsls	r3, r3, #24
 800875e:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008760:	24f2      	movs	r4, #242	; 0xf2
 8008762:	0064      	lsls	r4, r4, #1
 8008764:	193a      	adds	r2, r7, r4
 8008766:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8008768:	193b      	adds	r3, r7, r4
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	490b      	ldr	r1, [pc, #44]	; (800879c <astronode_send_rtc_rr+0xc0>)
 800876e:	1d3b      	adds	r3, r7, #4
 8008770:	0018      	movs	r0, r3
 8008772:	f003 fd93 	bl	800c29c <sprintf>
            send_debug_logs ( str ) ;
 8008776:	1d3b      	adds	r3, r7, #4
 8008778:	0018      	movs	r0, r3
 800877a:	f7fa fb71 	bl	8002e60 <send_debug_logs>
            return rtc_time ;
 800877e:	193b      	adds	r3, r7, r4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	e004      	b.n	800878e <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008784:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <astronode_send_rtc_rr+0xc4>)
 8008786:	0018      	movs	r0, r3
 8008788:	f7fa fb6a 	bl	8002e60 <send_debug_logs>
        }
    }
    return 0 ;
 800878c:	2300      	movs	r3, #0
}
 800878e:	0018      	movs	r0, r3
 8008790:	46bd      	mov	sp, r7
 8008792:	b07a      	add	sp, #488	; 0x1e8
 8008794:	bdb0      	pop	{r4, r5, r7, pc}
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	fffffe6c 	.word	0xfffffe6c
 800879c:	080138a8 	.word	0x080138a8
 80087a0:	080138e8 	.word	0x080138e8

080087a4 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80087a4:	b5b0      	push	{r4, r5, r7, lr}
 80087a6:	b0f8      	sub	sp, #480	; 0x1e0
 80087a8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80087aa:	258c      	movs	r5, #140	; 0x8c
 80087ac:	006d      	lsls	r5, r5, #1
 80087ae:	197b      	adds	r3, r7, r5
 80087b0:	0018      	movs	r0, r3
 80087b2:	23c6      	movs	r3, #198	; 0xc6
 80087b4:	001a      	movs	r2, r3
 80087b6:	2100      	movs	r1, #0
 80087b8:	f003 fe06 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 80087bc:	4b21      	ldr	r3, [pc, #132]	; (8008844 <astronode_send_sak_rr+0xa0>)
 80087be:	24f0      	movs	r4, #240	; 0xf0
 80087c0:	0064      	lsls	r4, r4, #1
 80087c2:	191b      	adds	r3, r3, r4
 80087c4:	19db      	adds	r3, r3, r7
 80087c6:	0018      	movs	r0, r3
 80087c8:	23c6      	movs	r3, #198	; 0xc6
 80087ca:	001a      	movs	r2, r3
 80087cc:	2100      	movs	r1, #0
 80087ce:	f003 fdfb 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80087d2:	197b      	adds	r3, r7, r5
 80087d4:	2245      	movs	r2, #69	; 0x45
 80087d6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80087d8:	2350      	movs	r3, #80	; 0x50
 80087da:	18fa      	adds	r2, r7, r3
 80087dc:	197b      	adds	r3, r7, r5
 80087de:	0011      	movs	r1, r2
 80087e0:	0018      	movs	r0, r3
 80087e2:	f000 fd4f 	bl	8009284 <astronode_transport_send_receive>
 80087e6:	0003      	movs	r3, r0
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d126      	bne.n	800883a <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80087ec:	4b15      	ldr	r3, [pc, #84]	; (8008844 <astronode_send_sak_rr+0xa0>)
 80087ee:	191b      	adds	r3, r3, r4
 80087f0:	19db      	adds	r3, r3, r7
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2bc5      	cmp	r3, #197	; 0xc5
 80087f6:	d11c      	bne.n	8008832 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80087f8:	4b12      	ldr	r3, [pc, #72]	; (8008844 <astronode_send_sak_rr+0xa0>)
 80087fa:	191b      	adds	r3, r3, r4
 80087fc:	19db      	adds	r3, r3, r7
 80087fe:	785b      	ldrb	r3, [r3, #1]
 8008800:	b299      	uxth	r1, r3
 8008802:	4b10      	ldr	r3, [pc, #64]	; (8008844 <astronode_send_sak_rr+0xa0>)
 8008804:	191b      	adds	r3, r3, r4
 8008806:	19db      	adds	r3, r3, r7
 8008808:	789b      	ldrb	r3, [r3, #2]
 800880a:	b29b      	uxth	r3, r3
 800880c:	021b      	lsls	r3, r3, #8
 800880e:	b29a      	uxth	r2, r3
 8008810:	20ef      	movs	r0, #239	; 0xef
 8008812:	0040      	lsls	r0, r0, #1
 8008814:	183b      	adds	r3, r7, r0
 8008816:	188a      	adds	r2, r1, r2
 8008818:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 800881a:	183b      	adds	r3, r7, r0
 800881c:	881a      	ldrh	r2, [r3, #0]
 800881e:	490a      	ldr	r1, [pc, #40]	; (8008848 <astronode_send_sak_rr+0xa4>)
 8008820:	003b      	movs	r3, r7
 8008822:	0018      	movs	r0, r3
 8008824:	f003 fd3a 	bl	800c29c <sprintf>
            send_debug_logs(str);
 8008828:	003b      	movs	r3, r7
 800882a:	0018      	movs	r0, r3
 800882c:	f7fa fb18 	bl	8002e60 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8008830:	e003      	b.n	800883a <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8008832:	4b06      	ldr	r3, [pc, #24]	; (800884c <astronode_send_sak_rr+0xa8>)
 8008834:	0018      	movs	r0, r3
 8008836:	f7fa fb13 	bl	8002e60 <send_debug_logs>
}
 800883a:	46c0      	nop			; (mov r8, r8)
 800883c:	46bd      	mov	sp, r7
 800883e:	b078      	add	sp, #480	; 0x1e0
 8008840:	bdb0      	pop	{r4, r5, r7, pc}
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	fffffe70 	.word	0xfffffe70
 8008848:	08013904 	.word	0x08013904
 800884c:	08013930 	.word	0x08013930

08008850 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008850:	b5b0      	push	{r4, r5, r7, lr}
 8008852:	b0e4      	sub	sp, #400	; 0x190
 8008854:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008856:	24c8      	movs	r4, #200	; 0xc8
 8008858:	193b      	adds	r3, r7, r4
 800885a:	0018      	movs	r0, r3
 800885c:	23c6      	movs	r3, #198	; 0xc6
 800885e:	001a      	movs	r2, r3
 8008860:	2100      	movs	r1, #0
 8008862:	f003 fdb1 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8008866:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <astronode_send_sak_cr+0x70>)
 8008868:	25c8      	movs	r5, #200	; 0xc8
 800886a:	006d      	lsls	r5, r5, #1
 800886c:	195b      	adds	r3, r3, r5
 800886e:	19db      	adds	r3, r3, r7
 8008870:	0018      	movs	r0, r3
 8008872:	23c6      	movs	r3, #198	; 0xc6
 8008874:	001a      	movs	r2, r3
 8008876:	2100      	movs	r1, #0
 8008878:	f003 fda6 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 800887c:	193b      	adds	r3, r7, r4
 800887e:	2246      	movs	r2, #70	; 0x46
 8008880:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008882:	003a      	movs	r2, r7
 8008884:	193b      	adds	r3, r7, r4
 8008886:	0011      	movs	r1, r2
 8008888:	0018      	movs	r0, r3
 800888a:	f000 fcfb 	bl	8009284 <astronode_transport_send_receive>
 800888e:	0003      	movs	r3, r0
 8008890:	2b01      	cmp	r3, #1
 8008892:	d111      	bne.n	80088b8 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008894:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <astronode_send_sak_cr+0x70>)
 8008896:	195b      	adds	r3, r3, r5
 8008898:	19db      	adds	r3, r3, r7
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2bc6      	cmp	r3, #198	; 0xc6
 800889e:	d107      	bne.n	80088b0 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80088a0:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <astronode_send_sak_cr+0x74>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80088a6:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <astronode_send_sak_cr+0x78>)
 80088a8:	0018      	movs	r0, r3
 80088aa:	f7fa fad9 	bl	8002e60 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80088ae:	e003      	b.n	80088b8 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80088b0:	4b06      	ldr	r3, [pc, #24]	; (80088cc <astronode_send_sak_cr+0x7c>)
 80088b2:	0018      	movs	r0, r3
 80088b4:	f7fa fad4 	bl	8002e60 <send_debug_logs>
}
 80088b8:	46c0      	nop			; (mov r8, r8)
 80088ba:	46bd      	mov	sp, r7
 80088bc:	b064      	add	sp, #400	; 0x190
 80088be:	bdb0      	pop	{r4, r5, r7, pc}
 80088c0:	fffffe70 	.word	0xfffffe70
 80088c4:	20000bb0 	.word	0x20000bb0
 80088c8:	08013964 	.word	0x08013964
 80088cc:	0801398c 	.word	0x0801398c

080088d0 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80088d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088d2:	b0ed      	sub	sp, #436	; 0x1b4
 80088d4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80088d6:	21c8      	movs	r1, #200	; 0xc8
 80088d8:	2318      	movs	r3, #24
 80088da:	18cb      	adds	r3, r1, r3
 80088dc:	19db      	adds	r3, r3, r7
 80088de:	0018      	movs	r0, r3
 80088e0:	23c6      	movs	r3, #198	; 0xc6
 80088e2:	001a      	movs	r2, r3
 80088e4:	2100      	movs	r1, #0
 80088e6:	f003 fd6f 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 80088ea:	4b4a      	ldr	r3, [pc, #296]	; (8008a14 <astronode_send_mpn_rr+0x144>)
 80088ec:	26cc      	movs	r6, #204	; 0xcc
 80088ee:	0076      	lsls	r6, r6, #1
 80088f0:	199b      	adds	r3, r3, r6
 80088f2:	2218      	movs	r2, #24
 80088f4:	4694      	mov	ip, r2
 80088f6:	44bc      	add	ip, r7
 80088f8:	4463      	add	r3, ip
 80088fa:	0018      	movs	r0, r3
 80088fc:	23c6      	movs	r3, #198	; 0xc6
 80088fe:	001a      	movs	r2, r3
 8008900:	2100      	movs	r1, #0
 8008902:	f003 fd61 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008906:	21c8      	movs	r1, #200	; 0xc8
 8008908:	2318      	movs	r3, #24
 800890a:	18cb      	adds	r3, r1, r3
 800890c:	19db      	adds	r3, r3, r7
 800890e:	221b      	movs	r2, #27
 8008910:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008912:	2318      	movs	r3, #24
 8008914:	18fa      	adds	r2, r7, r3
 8008916:	2318      	movs	r3, #24
 8008918:	18cb      	adds	r3, r1, r3
 800891a:	19db      	adds	r3, r3, r7
 800891c:	0011      	movs	r1, r2
 800891e:	0018      	movs	r0, r3
 8008920:	f000 fcb0 	bl	8009284 <astronode_transport_send_receive>
 8008924:	0003      	movs	r3, r0
 8008926:	2b01      	cmp	r3, #1
 8008928:	d16f      	bne.n	8008a0a <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 800892a:	4b3a      	ldr	r3, [pc, #232]	; (8008a14 <astronode_send_mpn_rr+0x144>)
 800892c:	0032      	movs	r2, r6
 800892e:	189b      	adds	r3, r3, r2
 8008930:	2118      	movs	r1, #24
 8008932:	468c      	mov	ip, r1
 8008934:	44bc      	add	ip, r7
 8008936:	4463      	add	r3, ip
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b9b      	cmp	r3, #155	; 0x9b
 800893c:	d161      	bne.n	8008a02 <astronode_send_mpn_rr+0x132>
        {
 800893e:	466b      	mov	r3, sp
 8008940:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8008942:	4b34      	ldr	r3, [pc, #208]	; (8008a14 <astronode_send_mpn_rr+0x144>)
 8008944:	189b      	adds	r3, r3, r2
 8008946:	2218      	movs	r2, #24
 8008948:	4694      	mov	ip, r2
 800894a:	44bc      	add	ip, r7
 800894c:	4463      	add	r3, ip
 800894e:	22c4      	movs	r2, #196	; 0xc4
 8008950:	5a9b      	ldrh	r3, [r3, r2]
 8008952:	001a      	movs	r2, r3
 8008954:	3a01      	subs	r2, #1
 8008956:	21ca      	movs	r1, #202	; 0xca
 8008958:	0049      	lsls	r1, r1, #1
 800895a:	2018      	movs	r0, #24
 800895c:	1809      	adds	r1, r1, r0
 800895e:	19c9      	adds	r1, r1, r7
 8008960:	600a      	str	r2, [r1, #0]
 8008962:	001c      	movs	r4, r3
 8008964:	2200      	movs	r2, #0
 8008966:	0015      	movs	r5, r2
 8008968:	0020      	movs	r0, r4
 800896a:	0029      	movs	r1, r5
 800896c:	0004      	movs	r4, r0
 800896e:	0f62      	lsrs	r2, r4, #29
 8008970:	000c      	movs	r4, r1
 8008972:	00e4      	lsls	r4, r4, #3
 8008974:	617c      	str	r4, [r7, #20]
 8008976:	697c      	ldr	r4, [r7, #20]
 8008978:	4314      	orrs	r4, r2
 800897a:	617c      	str	r4, [r7, #20]
 800897c:	0001      	movs	r1, r0
 800897e:	00c9      	lsls	r1, r1, #3
 8008980:	6139      	str	r1, [r7, #16]
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	2200      	movs	r2, #0
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	6838      	ldr	r0, [r7, #0]
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	0004      	movs	r4, r0
 800898e:	0f62      	lsrs	r2, r4, #29
 8008990:	000c      	movs	r4, r1
 8008992:	00e4      	lsls	r4, r4, #3
 8008994:	60fc      	str	r4, [r7, #12]
 8008996:	68fc      	ldr	r4, [r7, #12]
 8008998:	4314      	orrs	r4, r2
 800899a:	60fc      	str	r4, [r7, #12]
 800899c:	0001      	movs	r1, r0
 800899e:	00ca      	lsls	r2, r1, #3
 80089a0:	60ba      	str	r2, [r7, #8]
 80089a2:	3307      	adds	r3, #7
 80089a4:	08db      	lsrs	r3, r3, #3
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	4669      	mov	r1, sp
 80089aa:	1acb      	subs	r3, r1, r3
 80089ac:	469d      	mov	sp, r3
 80089ae:	466b      	mov	r3, sp
 80089b0:	3300      	adds	r3, #0
 80089b2:	24c8      	movs	r4, #200	; 0xc8
 80089b4:	0064      	lsls	r4, r4, #1
 80089b6:	2218      	movs	r2, #24
 80089b8:	18a2      	adds	r2, r4, r2
 80089ba:	19d1      	adds	r1, r2, r7
 80089bc:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80089be:	4b16      	ldr	r3, [pc, #88]	; (8008a18 <astronode_send_mpn_rr+0x148>)
 80089c0:	0018      	movs	r0, r3
 80089c2:	f7fa fa4d 	bl	8002e60 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80089c6:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <astronode_send_mpn_rr+0x144>)
 80089c8:	22cc      	movs	r2, #204	; 0xcc
 80089ca:	0052      	lsls	r2, r2, #1
 80089cc:	189b      	adds	r3, r3, r2
 80089ce:	2218      	movs	r2, #24
 80089d0:	4694      	mov	ip, r2
 80089d2:	44bc      	add	ip, r7
 80089d4:	4463      	add	r3, ip
 80089d6:	22c4      	movs	r2, #196	; 0xc4
 80089d8:	5a9b      	ldrh	r3, [r3, r2]
 80089da:	0019      	movs	r1, r3
 80089dc:	2318      	movs	r3, #24
 80089de:	18fb      	adds	r3, r7, r3
 80089e0:	3301      	adds	r3, #1
 80089e2:	4a0e      	ldr	r2, [pc, #56]	; (8008a1c <astronode_send_mpn_rr+0x14c>)
 80089e4:	2018      	movs	r0, #24
 80089e6:	1820      	adds	r0, r4, r0
 80089e8:	19c0      	adds	r0, r0, r7
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	f003 fc22 	bl	800c234 <snprintf>
            send_debug_logs(product_number);
 80089f0:	2318      	movs	r3, #24
 80089f2:	18e3      	adds	r3, r4, r3
 80089f4:	19db      	adds	r3, r3, r7
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7fa fa31 	bl	8002e60 <send_debug_logs>
 80089fe:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008a00:	e003      	b.n	8008a0a <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008a02:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <astronode_send_mpn_rr+0x150>)
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7fa fa2b 	bl	8002e60 <send_debug_logs>
}
 8008a0a:	46c0      	nop			; (mov r8, r8)
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	b06d      	add	sp, #436	; 0x1b4
 8008a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	fffffe68 	.word	0xfffffe68
 8008a18:	08013a54 	.word	0x08013a54
 8008a1c:	0801358c 	.word	0x0801358c
 8008a20:	080135c8 	.word	0x080135c8

08008a24 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008a24:	b5b0      	push	{r4, r5, r7, lr}
 8008a26:	b0e4      	sub	sp, #400	; 0x190
 8008a28:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008a2a:	24c8      	movs	r4, #200	; 0xc8
 8008a2c:	193b      	adds	r3, r7, r4
 8008a2e:	0018      	movs	r0, r3
 8008a30:	23c6      	movs	r3, #198	; 0xc6
 8008a32:	001a      	movs	r2, r3
 8008a34:	2100      	movs	r1, #0
 8008a36:	f003 fcc7 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8008a3a:	4b16      	ldr	r3, [pc, #88]	; (8008a94 <astronode_send_cmd_cr+0x70>)
 8008a3c:	25c8      	movs	r5, #200	; 0xc8
 8008a3e:	006d      	lsls	r5, r5, #1
 8008a40:	195b      	adds	r3, r3, r5
 8008a42:	19db      	adds	r3, r3, r7
 8008a44:	0018      	movs	r0, r3
 8008a46:	23c6      	movs	r3, #198	; 0xc6
 8008a48:	001a      	movs	r2, r3
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	f003 fcbc 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008a50:	193b      	adds	r3, r7, r4
 8008a52:	2248      	movs	r2, #72	; 0x48
 8008a54:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a56:	003a      	movs	r2, r7
 8008a58:	193b      	adds	r3, r7, r4
 8008a5a:	0011      	movs	r1, r2
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f000 fc11 	bl	8009284 <astronode_transport_send_receive>
 8008a62:	0003      	movs	r3, r0
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d111      	bne.n	8008a8c <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <astronode_send_cmd_cr+0x70>)
 8008a6a:	195b      	adds	r3, r3, r5
 8008a6c:	19db      	adds	r3, r3, r7
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2bc8      	cmp	r3, #200	; 0xc8
 8008a72:	d107      	bne.n	8008a84 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008a74:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <astronode_send_cmd_cr+0x74>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008a7a:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <astronode_send_cmd_cr+0x78>)
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f7fa f9ef 	bl	8002e60 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008a82:	e003      	b.n	8008a8c <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008a84:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <astronode_send_cmd_cr+0x7c>)
 8008a86:	0018      	movs	r0, r3
 8008a88:	f7fa f9ea 	bl	8002e60 <send_debug_logs>
}
 8008a8c:	46c0      	nop			; (mov r8, r8)
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b064      	add	sp, #400	; 0x190
 8008a92:	bdb0      	pop	{r4, r5, r7, pc}
 8008a94:	fffffe70 	.word	0xfffffe70
 8008a98:	20000bb2 	.word	0x20000bb2
 8008a9c:	08013ea4 	.word	0x08013ea4
 8008aa0:	08013ec8 	.word	0x08013ec8

08008aa4 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8008aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aa6:	4cac      	ldr	r4, [pc, #688]	; (8008d58 <astronode_send_cmd_rr+0x2b4>)
 8008aa8:	44a5      	add	sp, r4
 8008aaa:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008aac:	218c      	movs	r1, #140	; 0x8c
 8008aae:	0049      	lsls	r1, r1, #1
 8008ab0:	2318      	movs	r3, #24
 8008ab2:	18cb      	adds	r3, r1, r3
 8008ab4:	19db      	adds	r3, r3, r7
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	23c6      	movs	r3, #198	; 0xc6
 8008aba:	001a      	movs	r2, r3
 8008abc:	2100      	movs	r1, #0
 8008abe:	f003 fc83 	bl	800c3c8 <memset>
    astronode_app_msg_t answer = {0};
 8008ac2:	4ba6      	ldr	r3, [pc, #664]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008ac4:	26f8      	movs	r6, #248	; 0xf8
 8008ac6:	0076      	lsls	r6, r6, #1
 8008ac8:	199b      	adds	r3, r3, r6
 8008aca:	2218      	movs	r2, #24
 8008acc:	4694      	mov	ip, r2
 8008ace:	44bc      	add	ip, r7
 8008ad0:	4463      	add	r3, ip
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	23c6      	movs	r3, #198	; 0xc6
 8008ad6:	001a      	movs	r2, r3
 8008ad8:	2100      	movs	r1, #0
 8008ada:	f003 fc75 	bl	800c3c8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008ade:	218c      	movs	r1, #140	; 0x8c
 8008ae0:	0049      	lsls	r1, r1, #1
 8008ae2:	2318      	movs	r3, #24
 8008ae4:	18cb      	adds	r3, r1, r3
 8008ae6:	19db      	adds	r3, r3, r7
 8008ae8:	2247      	movs	r2, #71	; 0x47
 8008aea:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008aec:	2350      	movs	r3, #80	; 0x50
 8008aee:	2218      	movs	r2, #24
 8008af0:	189b      	adds	r3, r3, r2
 8008af2:	19da      	adds	r2, r3, r7
 8008af4:	2318      	movs	r3, #24
 8008af6:	18cb      	adds	r3, r1, r3
 8008af8:	19db      	adds	r3, r3, r7
 8008afa:	0011      	movs	r1, r2
 8008afc:	0018      	movs	r0, r3
 8008afe:	f000 fbc1 	bl	8009284 <astronode_transport_send_receive>
 8008b02:	0003      	movs	r3, r0
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d000      	beq.n	8008b0a <astronode_send_cmd_rr+0x66>
 8008b08:	e121      	b.n	8008d4e <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008b0a:	4b94      	ldr	r3, [pc, #592]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008b0c:	199b      	adds	r3, r3, r6
 8008b0e:	2218      	movs	r2, #24
 8008b10:	4694      	mov	ip, r2
 8008b12:	44bc      	add	ip, r7
 8008b14:	4463      	add	r3, ip
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2bc7      	cmp	r3, #199	; 0xc7
 8008b1a:	d000      	beq.n	8008b1e <astronode_send_cmd_rr+0x7a>
 8008b1c:	e113      	b.n	8008d46 <astronode_send_cmd_rr+0x2a2>
        {
 8008b1e:	466b      	mov	r3, sp
 8008b20:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008b22:	4b8f      	ldr	r3, [pc, #572]	; (8008d60 <astronode_send_cmd_rr+0x2bc>)
 8008b24:	0018      	movs	r0, r3
 8008b26:	f7fa f99b 	bl	8002e60 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008b2a:	4b8c      	ldr	r3, [pc, #560]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008b2c:	21f8      	movs	r1, #248	; 0xf8
 8008b2e:	0049      	lsls	r1, r1, #1
 8008b30:	185b      	adds	r3, r3, r1
 8008b32:	2218      	movs	r2, #24
 8008b34:	4694      	mov	ip, r2
 8008b36:	44bc      	add	ip, r7
 8008b38:	4463      	add	r3, ip
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008b3e:	4b87      	ldr	r3, [pc, #540]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008b40:	185b      	adds	r3, r3, r1
 8008b42:	2018      	movs	r0, #24
 8008b44:	4684      	mov	ip, r0
 8008b46:	44bc      	add	ip, r7
 8008b48:	4463      	add	r3, ip
 8008b4a:	789b      	ldrb	r3, [r3, #2]
 8008b4c:	021b      	lsls	r3, r3, #8
 8008b4e:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008b50:	4b82      	ldr	r3, [pc, #520]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008b52:	185b      	adds	r3, r3, r1
 8008b54:	2018      	movs	r0, #24
 8008b56:	4684      	mov	ip, r0
 8008b58:	44bc      	add	ip, r7
 8008b5a:	4463      	add	r3, ip
 8008b5c:	78db      	ldrb	r3, [r3, #3]
 8008b5e:	041b      	lsls	r3, r3, #16
 8008b60:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008b62:	4b7e      	ldr	r3, [pc, #504]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008b64:	185b      	adds	r3, r3, r1
 8008b66:	2118      	movs	r1, #24
 8008b68:	468c      	mov	ip, r1
 8008b6a:	44bc      	add	ip, r7
 8008b6c:	4463      	add	r3, ip
 8008b6e:	791b      	ldrb	r3, [r3, #4]
 8008b70:	061b      	lsls	r3, r3, #24
 8008b72:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008b74:	22f4      	movs	r2, #244	; 0xf4
 8008b76:	0052      	lsls	r2, r2, #1
 8008b78:	2118      	movs	r1, #24
 8008b7a:	1851      	adds	r1, r2, r1
 8008b7c:	19c8      	adds	r0, r1, r7
 8008b7e:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008b80:	2318      	movs	r3, #24
 8008b82:	18d3      	adds	r3, r2, r3
 8008b84:	19db      	adds	r3, r3, r7
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	4976      	ldr	r1, [pc, #472]	; (8008d64 <astronode_send_cmd_rr+0x2c0>)
 8008b8a:	2318      	movs	r3, #24
 8008b8c:	18fb      	adds	r3, r7, r3
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f003 fb84 	bl	800c29c <sprintf>
            send_debug_logs(str);
 8008b94:	2318      	movs	r3, #24
 8008b96:	18fb      	adds	r3, r7, r3
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7fa f961 	bl	8002e60 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008b9e:	4b6f      	ldr	r3, [pc, #444]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008ba0:	21f8      	movs	r1, #248	; 0xf8
 8008ba2:	0049      	lsls	r1, r1, #1
 8008ba4:	185b      	adds	r3, r3, r1
 8008ba6:	2218      	movs	r2, #24
 8008ba8:	4694      	mov	ip, r2
 8008baa:	44bc      	add	ip, r7
 8008bac:	4463      	add	r3, ip
 8008bae:	22c4      	movs	r2, #196	; 0xc4
 8008bb0:	5a9b      	ldrh	r3, [r3, r2]
 8008bb2:	2b2c      	cmp	r3, #44	; 0x2c
 8008bb4:	d00e      	beq.n	8008bd4 <astronode_send_cmd_rr+0x130>
 8008bb6:	4b69      	ldr	r3, [pc, #420]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008bb8:	185b      	adds	r3, r3, r1
 8008bba:	2218      	movs	r2, #24
 8008bbc:	4694      	mov	ip, r2
 8008bbe:	44bc      	add	ip, r7
 8008bc0:	4463      	add	r3, ip
 8008bc2:	22c4      	movs	r2, #196	; 0xc4
 8008bc4:	5a9b      	ldrh	r3, [r3, r2]
 8008bc6:	2b0c      	cmp	r3, #12
 8008bc8:	d004      	beq.n	8008bd4 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008bca:	4b67      	ldr	r3, [pc, #412]	; (8008d68 <astronode_send_cmd_rr+0x2c4>)
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f7fa f947 	bl	8002e60 <send_debug_logs>
                return;
 8008bd2:	e0b6      	b.n	8008d42 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008bd4:	4b61      	ldr	r3, [pc, #388]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008bd6:	22f8      	movs	r2, #248	; 0xf8
 8008bd8:	0052      	lsls	r2, r2, #1
 8008bda:	189b      	adds	r3, r3, r2
 8008bdc:	2218      	movs	r2, #24
 8008bde:	4694      	mov	ip, r2
 8008be0:	44bc      	add	ip, r7
 8008be2:	4463      	add	r3, ip
 8008be4:	22c4      	movs	r2, #196	; 0xc4
 8008be6:	5a9b      	ldrh	r3, [r3, r2]
 8008be8:	001a      	movs	r2, r3
 8008bea:	3a01      	subs	r2, #1
 8008bec:	21f2      	movs	r1, #242	; 0xf2
 8008bee:	0049      	lsls	r1, r1, #1
 8008bf0:	2018      	movs	r0, #24
 8008bf2:	1809      	adds	r1, r1, r0
 8008bf4:	19c9      	adds	r1, r1, r7
 8008bf6:	600a      	str	r2, [r1, #0]
 8008bf8:	001c      	movs	r4, r3
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	0015      	movs	r5, r2
 8008bfe:	0020      	movs	r0, r4
 8008c00:	0029      	movs	r1, r5
 8008c02:	0004      	movs	r4, r0
 8008c04:	0f62      	lsrs	r2, r4, #29
 8008c06:	000c      	movs	r4, r1
 8008c08:	00e4      	lsls	r4, r4, #3
 8008c0a:	617c      	str	r4, [r7, #20]
 8008c0c:	697c      	ldr	r4, [r7, #20]
 8008c0e:	4314      	orrs	r4, r2
 8008c10:	617c      	str	r4, [r7, #20]
 8008c12:	0001      	movs	r1, r0
 8008c14:	00c9      	lsls	r1, r1, #3
 8008c16:	6139      	str	r1, [r7, #16]
 8008c18:	603b      	str	r3, [r7, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	607a      	str	r2, [r7, #4]
 8008c1e:	6838      	ldr	r0, [r7, #0]
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	0004      	movs	r4, r0
 8008c24:	0f62      	lsrs	r2, r4, #29
 8008c26:	000c      	movs	r4, r1
 8008c28:	00e4      	lsls	r4, r4, #3
 8008c2a:	60fc      	str	r4, [r7, #12]
 8008c2c:	68fc      	ldr	r4, [r7, #12]
 8008c2e:	4314      	orrs	r4, r2
 8008c30:	60fc      	str	r4, [r7, #12]
 8008c32:	0001      	movs	r1, r0
 8008c34:	00ca      	lsls	r2, r1, #3
 8008c36:	60ba      	str	r2, [r7, #8]
 8008c38:	3307      	adds	r3, #7
 8008c3a:	08db      	lsrs	r3, r3, #3
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	4669      	mov	r1, sp
 8008c40:	1acb      	subs	r3, r1, r3
 8008c42:	469d      	mov	sp, r3
 8008c44:	466b      	mov	r3, sp
 8008c46:	3300      	adds	r3, #0
 8008c48:	20f0      	movs	r0, #240	; 0xf0
 8008c4a:	0040      	lsls	r0, r0, #1
 8008c4c:	2218      	movs	r2, #24
 8008c4e:	1882      	adds	r2, r0, r2
 8008c50:	19d1      	adds	r1, r2, r7
 8008c52:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008c54:	4b41      	ldr	r3, [pc, #260]	; (8008d5c <astronode_send_cmd_rr+0x2b8>)
 8008c56:	22f8      	movs	r2, #248	; 0xf8
 8008c58:	0052      	lsls	r2, r2, #1
 8008c5a:	189b      	adds	r3, r3, r2
 8008c5c:	2218      	movs	r2, #24
 8008c5e:	4694      	mov	ip, r2
 8008c60:	44bc      	add	ip, r7
 8008c62:	4463      	add	r3, ip
 8008c64:	22c4      	movs	r2, #196	; 0xc4
 8008c66:	5a9b      	ldrh	r3, [r3, r2]
 8008c68:	3b03      	subs	r3, #3
 8008c6a:	0019      	movs	r1, r3
 8008c6c:	2350      	movs	r3, #80	; 0x50
 8008c6e:	2218      	movs	r2, #24
 8008c70:	189b      	adds	r3, r3, r2
 8008c72:	19db      	adds	r3, r3, r7
 8008c74:	3305      	adds	r3, #5
 8008c76:	4a3d      	ldr	r2, [pc, #244]	; (8008d6c <astronode_send_cmd_rr+0x2c8>)
 8008c78:	2418      	movs	r4, #24
 8008c7a:	1900      	adds	r0, r0, r4
 8008c7c:	19c0      	adds	r0, r0, r7
 8008c7e:	6800      	ldr	r0, [r0, #0]
 8008c80:	f003 fad8 	bl	800c234 <snprintf>
 8008c84:	0002      	movs	r2, r0
 8008c86:	23ef      	movs	r3, #239	; 0xef
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	2118      	movs	r1, #24
 8008c8c:	185b      	adds	r3, r3, r1
 8008c8e:	19db      	adds	r3, r3, r7
 8008c90:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008c92:	23f0      	movs	r3, #240	; 0xf0
 8008c94:	33ff      	adds	r3, #255	; 0xff
 8008c96:	2218      	movs	r2, #24
 8008c98:	189b      	adds	r3, r3, r2
 8008c9a:	19db      	adds	r3, r3, r7
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	701a      	strb	r2, [r3, #0]
 8008ca0:	e024      	b.n	8008cec <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008ca2:	23f0      	movs	r3, #240	; 0xf0
 8008ca4:	33ff      	adds	r3, #255	; 0xff
 8008ca6:	2218      	movs	r2, #24
 8008ca8:	189b      	adds	r3, r3, r2
 8008caa:	19db      	adds	r3, r3, r7
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	22f0      	movs	r2, #240	; 0xf0
 8008cb0:	0052      	lsls	r2, r2, #1
 8008cb2:	2118      	movs	r1, #24
 8008cb4:	1852      	adds	r2, r2, r1
 8008cb6:	19d2      	adds	r2, r2, r7
 8008cb8:	6812      	ldr	r2, [r2, #0]
 8008cba:	5cd3      	ldrb	r3, [r2, r3]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	4b2c      	ldr	r3, [pc, #176]	; (8008d70 <astronode_send_cmd_rr+0x2cc>)
 8008cc0:	18d3      	adds	r3, r2, r3
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	001a      	movs	r2, r3
 8008cc6:	2397      	movs	r3, #151	; 0x97
 8008cc8:	4013      	ands	r3, r2
 8008cca:	d104      	bne.n	8008cd6 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008ccc:	4b29      	ldr	r3, [pc, #164]	; (8008d74 <astronode_send_cmd_rr+0x2d0>)
 8008cce:	0018      	movs	r0, r3
 8008cd0:	f7fa f8c6 	bl	8002e60 <send_debug_logs>
                    return;
 8008cd4:	e035      	b.n	8008d42 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8008cd6:	21f0      	movs	r1, #240	; 0xf0
 8008cd8:	31ff      	adds	r1, #255	; 0xff
 8008cda:	2318      	movs	r3, #24
 8008cdc:	18cb      	adds	r3, r1, r3
 8008cde:	19db      	adds	r3, r3, r7
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	2318      	movs	r3, #24
 8008ce4:	18cb      	adds	r3, r1, r3
 8008ce6:	19db      	adds	r3, r3, r7
 8008ce8:	3201      	adds	r2, #1
 8008cea:	701a      	strb	r2, [r3, #0]
 8008cec:	23f0      	movs	r3, #240	; 0xf0
 8008cee:	33ff      	adds	r3, #255	; 0xff
 8008cf0:	2218      	movs	r2, #24
 8008cf2:	189b      	adds	r3, r3, r2
 8008cf4:	19db      	adds	r3, r3, r7
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	22ef      	movs	r2, #239	; 0xef
 8008cfc:	0052      	lsls	r2, r2, #1
 8008cfe:	2118      	movs	r1, #24
 8008d00:	1852      	adds	r2, r2, r1
 8008d02:	19d2      	adds	r2, r2, r7
 8008d04:	8812      	ldrh	r2, [r2, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d8cb      	bhi.n	8008ca2 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008d0a:	4b1b      	ldr	r3, [pc, #108]	; (8008d78 <astronode_send_cmd_rr+0x2d4>)
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f7fa f8a7 	bl	8002e60 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008d12:	2350      	movs	r3, #80	; 0x50
 8008d14:	2218      	movs	r2, #24
 8008d16:	189b      	adds	r3, r3, r2
 8008d18:	19db      	adds	r3, r3, r7
 8008d1a:	1d5a      	adds	r2, r3, #5
 8008d1c:	4917      	ldr	r1, [pc, #92]	; (8008d7c <astronode_send_cmd_rr+0x2d8>)
 8008d1e:	24f0      	movs	r4, #240	; 0xf0
 8008d20:	0064      	lsls	r4, r4, #1
 8008d22:	2318      	movs	r3, #24
 8008d24:	18e3      	adds	r3, r4, r3
 8008d26:	19db      	adds	r3, r3, r7
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f003 fab6 	bl	800c29c <sprintf>
            send_debug_logs(command_content);
 8008d30:	2318      	movs	r3, #24
 8008d32:	18e3      	adds	r3, r4, r3
 8008d34:	19db      	adds	r3, r3, r7
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f7fa f891 	bl	8002e60 <send_debug_logs>
 8008d3e:	46b5      	mov	sp, r6
 8008d40:	e005      	b.n	8008d4e <astronode_send_cmd_rr+0x2aa>
                return;
 8008d42:	46b5      	mov	sp, r6
 8008d44:	e003      	b.n	8008d4e <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008d46:	4b0e      	ldr	r3, [pc, #56]	; (8008d80 <astronode_send_cmd_rr+0x2dc>)
 8008d48:	0018      	movs	r0, r3
 8008d4a:	f7fa f889 	bl	8002e60 <send_debug_logs>
        }
    }
}
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	2383      	movs	r3, #131	; 0x83
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	449d      	add	sp, r3
 8008d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d58:	fffffdf4 	.word	0xfffffdf4
 8008d5c:	fffffe60 	.word	0xfffffe60
 8008d60:	08013ee0 	.word	0x08013ee0
 8008d64:	08013efc 	.word	0x08013efc
 8008d68:	08013f4c 	.word	0x08013f4c
 8008d6c:	0801358c 	.word	0x0801358c
 8008d70:	08014970 	.word	0x08014970
 8008d74:	08013f60 	.word	0x08013f60
 8008d78:	08013f8c 	.word	0x08013f8c
 8008d7c:	08013fa4 	.word	0x08013fa4
 8008d80:	08013fa8 	.word	0x08013fa8

08008d84 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <is_sak_available+0x10>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
}
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	46c0      	nop			; (mov r8, r8)
 8008d94:	20000bb0 	.word	0x20000bb0

08008d98 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <is_astronode_reset+0x10>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
}
 8008da0:	0018      	movs	r0, r3
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	20000bb1 	.word	0x20000bb1

08008dac <is_command_available>:

bool is_command_available()
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008db0:	4b02      	ldr	r3, [pc, #8]	; (8008dbc <is_command_available+0x10>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
}
 8008db4:	0018      	movs	r0, r3
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	46c0      	nop			; (mov r8, r8)
 8008dbc:	20000bb2 	.word	0x20000bb2

08008dc0 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	0002      	movs	r2, r0
 8008dc8:	6039      	str	r1, [r7, #0]
 8008dca:	1dfb      	adds	r3, r7, #7
 8008dcc:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008dce:	1dfb      	adds	r3, r7, #7
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b2f      	cmp	r3, #47	; 0x2f
 8008dd4:	d90b      	bls.n	8008dee <ascii_to_value+0x2e>
 8008dd6:	1dfb      	adds	r3, r7, #7
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b39      	cmp	r3, #57	; 0x39
 8008ddc:	d807      	bhi.n	8008dee <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008dde:	1dfb      	adds	r3, r7, #7
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	3b30      	subs	r3, #48	; 0x30
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	701a      	strb	r2, [r3, #0]
        return true;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e010      	b.n	8008e10 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008dee:	1dfb      	adds	r3, r7, #7
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b40      	cmp	r3, #64	; 0x40
 8008df4:	d90b      	bls.n	8008e0e <ascii_to_value+0x4e>
 8008df6:	1dfb      	adds	r3, r7, #7
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b46      	cmp	r3, #70	; 0x46
 8008dfc:	d807      	bhi.n	8008e0e <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008dfe:	1dfb      	adds	r3, r7, #7
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	3b37      	subs	r3, #55	; 0x37
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	701a      	strb	r2, [r3, #0]
        return true;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e000      	b.n	8008e10 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008e0e:	2300      	movs	r3, #0
    }
}
 8008e10:	0018      	movs	r0, r3
 8008e12:	46bd      	mov	sp, r7
 8008e14:	b002      	add	sp, #8
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008e22:	250e      	movs	r5, #14
 8008e24:	197b      	adds	r3, r7, r5
 8008e26:	2200      	movs	r2, #0
 8008e28:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008e2a:	197b      	adds	r3, r7, r5
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	197a      	adds	r2, r7, r5
 8008e30:	1c59      	adds	r1, r3, #1
 8008e32:	8011      	strh	r1, [r2, #0]
 8008e34:	001a      	movs	r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	189b      	adds	r3, r3, r2
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	260a      	movs	r6, #10
 8008e42:	19bc      	adds	r4, r7, r6
 8008e44:	4a44      	ldr	r2, [pc, #272]	; (8008f58 <astronode_create_request_transport+0x140>)
 8008e46:	2101      	movs	r1, #1
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f000 fa7d 	bl	8009348 <calculate_crc>
 8008e4e:	0003      	movs	r3, r0
 8008e50:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	1c58      	adds	r0, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	22c4      	movs	r2, #196	; 0xc4
 8008e5a:	5a99      	ldrh	r1, [r3, r2]
 8008e5c:	19bc      	adds	r4, r7, r6
 8008e5e:	19bb      	adds	r3, r7, r6
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	001a      	movs	r2, r3
 8008e64:	f000 fa70 	bl	8009348 <calculate_crc>
 8008e68:	0003      	movs	r3, r0
 8008e6a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008e6c:	19bb      	adds	r3, r7, r6
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	b21a      	sxth	r2, r3
 8008e74:	0031      	movs	r1, r6
 8008e76:	19bb      	adds	r3, r7, r6
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	b21b      	sxth	r3, r3
 8008e80:	4313      	orrs	r3, r2
 8008e82:	b21a      	sxth	r2, r3
 8008e84:	187b      	adds	r3, r7, r1
 8008e86:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7818      	ldrb	r0, [r3, #0]
 8008e8c:	197b      	adds	r3, r7, r5
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	18d3      	adds	r3, r2, r3
 8008e94:	0019      	movs	r1, r3
 8008e96:	f000 fbeb 	bl	8009670 <uint8_to_ascii_buffer>
    index += 2;
 8008e9a:	197b      	adds	r3, r7, r5
 8008e9c:	197a      	adds	r2, r7, r5
 8008e9e:	8812      	ldrh	r2, [r2, #0]
 8008ea0:	3202      	adds	r2, #2
 8008ea2:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008ea4:	230c      	movs	r3, #12
 8008ea6:	18fb      	adds	r3, r7, r3
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	801a      	strh	r2, [r3, #0]
 8008eac:	e017      	b.n	8008ede <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008eae:	240c      	movs	r4, #12
 8008eb0:	193b      	adds	r3, r7, r4
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	18d3      	adds	r3, r2, r3
 8008eb8:	7858      	ldrb	r0, [r3, #1]
 8008eba:	250e      	movs	r5, #14
 8008ebc:	197b      	adds	r3, r7, r5
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	18d3      	adds	r3, r2, r3
 8008ec4:	0019      	movs	r1, r3
 8008ec6:	f000 fbd3 	bl	8009670 <uint8_to_ascii_buffer>
        index += 2;
 8008eca:	197b      	adds	r3, r7, r5
 8008ecc:	197a      	adds	r2, r7, r5
 8008ece:	8812      	ldrh	r2, [r2, #0]
 8008ed0:	3202      	adds	r2, #2
 8008ed2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008ed4:	193b      	adds	r3, r7, r4
 8008ed6:	881a      	ldrh	r2, [r3, #0]
 8008ed8:	193b      	adds	r3, r7, r4
 8008eda:	3201      	adds	r2, #1
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	22c4      	movs	r2, #196	; 0xc4
 8008ee2:	5a9b      	ldrh	r3, [r3, r2]
 8008ee4:	220c      	movs	r2, #12
 8008ee6:	18ba      	adds	r2, r7, r2
 8008ee8:	8812      	ldrh	r2, [r2, #0]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d3df      	bcc.n	8008eae <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008eee:	250a      	movs	r5, #10
 8008ef0:	197b      	adds	r3, r7, r5
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	b2d8      	uxtb	r0, r3
 8008efa:	240e      	movs	r4, #14
 8008efc:	193b      	adds	r3, r7, r4
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	18d3      	adds	r3, r2, r3
 8008f04:	0019      	movs	r1, r3
 8008f06:	f000 fbb3 	bl	8009670 <uint8_to_ascii_buffer>
    index += 2;
 8008f0a:	0021      	movs	r1, r4
 8008f0c:	187b      	adds	r3, r7, r1
 8008f0e:	187a      	adds	r2, r7, r1
 8008f10:	8812      	ldrh	r2, [r2, #0]
 8008f12:	3202      	adds	r2, #2
 8008f14:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008f16:	197b      	adds	r3, r7, r5
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b2d8      	uxtb	r0, r3
 8008f1c:	000c      	movs	r4, r1
 8008f1e:	187b      	adds	r3, r7, r1
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	18d3      	adds	r3, r2, r3
 8008f26:	0019      	movs	r1, r3
 8008f28:	f000 fba2 	bl	8009670 <uint8_to_ascii_buffer>
    index += 2;
 8008f2c:	0020      	movs	r0, r4
 8008f2e:	183b      	adds	r3, r7, r0
 8008f30:	183a      	adds	r2, r7, r0
 8008f32:	8812      	ldrh	r2, [r2, #0]
 8008f34:	3202      	adds	r2, #2
 8008f36:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008f38:	183b      	adds	r3, r7, r0
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	183a      	adds	r2, r7, r0
 8008f3e:	1c59      	adds	r1, r3, #1
 8008f40:	8011      	strh	r1, [r2, #0]
 8008f42:	001a      	movs	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	189b      	adds	r3, r3, r2
 8008f48:	2203      	movs	r2, #3
 8008f4a:	701a      	strb	r2, [r3, #0]

    return index;
 8008f4c:	183b      	adds	r3, r7, r0
 8008f4e:	881b      	ldrh	r3, [r3, #0]
}
 8008f50:	0018      	movs	r0, r3
 8008f52:	46bd      	mov	sp, r7
 8008f54:	b005      	add	sp, #20
 8008f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f58:	0000ffff 	.word	0x0000ffff

08008f5c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f5e:	b089      	sub	sp, #36	; 0x24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	607a      	str	r2, [r7, #4]
 8008f66:	230a      	movs	r3, #10
 8008f68:	18fb      	adds	r3, r7, r3
 8008f6a:	1c0a      	adds	r2, r1, #0
 8008f6c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d005      	beq.n	8008f82 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008f76:	4bbd      	ldr	r3, [pc, #756]	; (800926c <astronode_decode_answer_transport+0x310>)
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f7f9 ff71 	bl	8002e60 <send_debug_logs>
        return RS_FAILURE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e170      	b.n	8009264 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008f82:	210a      	movs	r1, #10
 8008f84:	187b      	adds	r3, r7, r1
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d103      	bne.n	8008f9a <astronode_decode_answer_transport+0x3e>
 8008f92:	187b      	adds	r3, r7, r1
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	2b07      	cmp	r3, #7
 8008f98:	d805      	bhi.n	8008fa6 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008f9a:	4bb5      	ldr	r3, [pc, #724]	; (8009270 <astronode_decode_answer_transport+0x314>)
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f7f9 ff5f 	bl	8002e60 <send_debug_logs>
        return RS_FAILURE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e15e      	b.n	8009264 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	18fb      	adds	r3, r7, r3
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	3b08      	subs	r3, #8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	da00      	bge.n	8008fb4 <astronode_decode_answer_transport+0x58>
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	105b      	asrs	r3, r3, #1
 8008fb6:	b299      	uxth	r1, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	22c4      	movs	r2, #196	; 0xc4
 8008fbc:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008fbe:	230a      	movs	r3, #10
 8008fc0:	18fb      	adds	r3, r7, r3
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	18d3      	adds	r3, r2, r3
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d005      	beq.n	8008fdc <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008fd0:	4ba8      	ldr	r3, [pc, #672]	; (8009274 <astronode_decode_answer_transport+0x318>)
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f7f9 ff44 	bl	8002e60 <send_debug_logs>
        return RS_FAILURE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e143      	b.n	8009264 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008fdc:	2117      	movs	r1, #23
 8008fde:	187b      	adds	r3, r7, r1
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008fe4:	2416      	movs	r4, #22
 8008fe6:	193b      	adds	r3, r7, r4
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	187a      	adds	r2, r7, r1
 8008ff4:	0011      	movs	r1, r2
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f7ff fee2 	bl	8008dc0 <ascii_to_value>
 8008ffc:	0003      	movs	r3, r0
 8008ffe:	001a      	movs	r2, r3
 8009000:	2301      	movs	r3, #1
 8009002:	4053      	eors	r3, r2
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10e      	bne.n	8009028 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3302      	adds	r3, #2
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	193a      	adds	r2, r7, r4
 8009012:	0011      	movs	r1, r2
 8009014:	0018      	movs	r0, r3
 8009016:	f7ff fed3 	bl	8008dc0 <ascii_to_value>
 800901a:	0003      	movs	r3, r0
 800901c:	001a      	movs	r2, r3
 800901e:	2301      	movs	r3, #1
 8009020:	4053      	eors	r3, r2
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009028:	4b93      	ldr	r3, [pc, #588]	; (8009278 <astronode_decode_answer_transport+0x31c>)
 800902a:	0018      	movs	r0, r3
 800902c:	f7f9 ff18 	bl	8002e60 <send_debug_logs>
        return RS_FAILURE;
 8009030:	2300      	movs	r3, #0
 8009032:	e117      	b.n	8009264 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8009034:	2317      	movs	r3, #23
 8009036:	18fb      	adds	r3, r7, r3
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	b2da      	uxtb	r2, r3
 800903e:	2316      	movs	r3, #22
 8009040:	18fb      	adds	r3, r7, r3
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	18d3      	adds	r3, r2, r3
 8009046:	b2da      	uxtb	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800904c:	231e      	movs	r3, #30
 800904e:	18fb      	adds	r3, r7, r3
 8009050:	2203      	movs	r2, #3
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	231c      	movs	r3, #28
 8009056:	18fb      	adds	r3, r7, r3
 8009058:	2200      	movs	r2, #0
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	e045      	b.n	80090ea <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800905e:	241e      	movs	r4, #30
 8009060:	193b      	adds	r3, r7, r4
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	18d3      	adds	r3, r2, r3
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2217      	movs	r2, #23
 800906c:	18ba      	adds	r2, r7, r2
 800906e:	0011      	movs	r1, r2
 8009070:	0018      	movs	r0, r3
 8009072:	f7ff fea5 	bl	8008dc0 <ascii_to_value>
 8009076:	0003      	movs	r3, r0
 8009078:	001a      	movs	r2, r3
 800907a:	2301      	movs	r3, #1
 800907c:	4053      	eors	r3, r2
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d112      	bne.n	80090aa <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8009084:	193b      	adds	r3, r7, r4
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	3301      	adds	r3, #1
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	18d3      	adds	r3, r2, r3
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2216      	movs	r2, #22
 8009092:	18ba      	adds	r2, r7, r2
 8009094:	0011      	movs	r1, r2
 8009096:	0018      	movs	r0, r3
 8009098:	f7ff fe92 	bl	8008dc0 <ascii_to_value>
 800909c:	0003      	movs	r3, r0
 800909e:	001a      	movs	r2, r3
 80090a0:	2301      	movs	r3, #1
 80090a2:	4053      	eors	r3, r2
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80090aa:	4b73      	ldr	r3, [pc, #460]	; (8009278 <astronode_decode_answer_transport+0x31c>)
 80090ac:	0018      	movs	r0, r3
 80090ae:	f7f9 fed7 	bl	8002e60 <send_debug_logs>
            return RS_FAILURE;
 80090b2:	2300      	movs	r3, #0
 80090b4:	e0d6      	b.n	8009264 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80090b6:	2317      	movs	r3, #23
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	011b      	lsls	r3, r3, #4
 80090be:	b2d9      	uxtb	r1, r3
 80090c0:	2316      	movs	r3, #22
 80090c2:	18fb      	adds	r3, r7, r3
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	201c      	movs	r0, #28
 80090c8:	183b      	adds	r3, r7, r0
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	1838      	adds	r0, r7, r0
 80090ce:	1c5c      	adds	r4, r3, #1
 80090d0:	8004      	strh	r4, [r0, #0]
 80090d2:	0018      	movs	r0, r3
 80090d4:	188b      	adds	r3, r1, r2
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	181b      	adds	r3, r3, r0
 80090dc:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80090de:	221e      	movs	r2, #30
 80090e0:	18bb      	adds	r3, r7, r2
 80090e2:	18ba      	adds	r2, r7, r2
 80090e4:	8812      	ldrh	r2, [r2, #0]
 80090e6:	3202      	adds	r2, #2
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	231e      	movs	r3, #30
 80090ec:	18fb      	adds	r3, r7, r3
 80090ee:	881a      	ldrh	r2, [r3, #0]
 80090f0:	260a      	movs	r6, #10
 80090f2:	19bb      	adds	r3, r7, r6
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	3b05      	subs	r3, #5
 80090f8:	429a      	cmp	r2, r3
 80090fa:	dbb0      	blt.n	800905e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	251a      	movs	r5, #26
 8009100:	197c      	adds	r4, r7, r5
 8009102:	4a5e      	ldr	r2, [pc, #376]	; (800927c <astronode_decode_answer_transport+0x320>)
 8009104:	2101      	movs	r1, #1
 8009106:	0018      	movs	r0, r3
 8009108:	f000 f91e 	bl	8009348 <calculate_crc>
 800910c:	0003      	movs	r3, r0
 800910e:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	1c58      	adds	r0, r3, #1
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	22c4      	movs	r2, #196	; 0xc4
 8009118:	5a99      	ldrh	r1, [r3, r2]
 800911a:	197c      	adds	r4, r7, r5
 800911c:	197b      	adds	r3, r7, r5
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	001a      	movs	r2, r3
 8009122:	f000 f911 	bl	8009348 <calculate_crc>
 8009126:	0003      	movs	r3, r0
 8009128:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800912a:	197b      	adds	r3, r7, r5
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	021b      	lsls	r3, r3, #8
 8009130:	b21a      	sxth	r2, r3
 8009132:	0029      	movs	r1, r5
 8009134:	197b      	adds	r3, r7, r5
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	0a1b      	lsrs	r3, r3, #8
 800913a:	b29b      	uxth	r3, r3
 800913c:	b21b      	sxth	r3, r3
 800913e:	4313      	orrs	r3, r2
 8009140:	b21a      	sxth	r2, r3
 8009142:	187b      	adds	r3, r7, r1
 8009144:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8009146:	19bb      	adds	r3, r7, r6
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	3b05      	subs	r3, #5
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	18d3      	adds	r3, r2, r3
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2217      	movs	r2, #23
 8009154:	18ba      	adds	r2, r7, r2
 8009156:	0011      	movs	r1, r2
 8009158:	0018      	movs	r0, r3
 800915a:	f7ff fe31 	bl	8008dc0 <ascii_to_value>
 800915e:	0003      	movs	r3, r0
 8009160:	001a      	movs	r2, r3
 8009162:	2301      	movs	r3, #1
 8009164:	4053      	eors	r3, r2
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d112      	bne.n	8009192 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800916c:	19bb      	adds	r3, r7, r6
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	3b04      	subs	r3, #4
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	18d3      	adds	r3, r2, r3
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2216      	movs	r2, #22
 800917a:	18ba      	adds	r2, r7, r2
 800917c:	0011      	movs	r1, r2
 800917e:	0018      	movs	r0, r3
 8009180:	f7ff fe1e 	bl	8008dc0 <ascii_to_value>
 8009184:	0003      	movs	r3, r0
 8009186:	001a      	movs	r2, r3
 8009188:	2301      	movs	r3, #1
 800918a:	4053      	eors	r3, r2
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009192:	4b39      	ldr	r3, [pc, #228]	; (8009278 <astronode_decode_answer_transport+0x31c>)
 8009194:	0018      	movs	r0, r3
 8009196:	f7f9 fe63 	bl	8002e60 <send_debug_logs>
        return RS_FAILURE;
 800919a:	2300      	movs	r3, #0
 800919c:	e062      	b.n	8009264 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800919e:	2017      	movs	r0, #23
 80091a0:	183b      	adds	r3, r7, r0
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	031b      	lsls	r3, r3, #12
 80091a8:	b299      	uxth	r1, r3
 80091aa:	2416      	movs	r4, #22
 80091ac:	193b      	adds	r3, r7, r4
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	2318      	movs	r3, #24
 80091b8:	18fb      	adds	r3, r7, r3
 80091ba:	188a      	adds	r2, r1, r2
 80091bc:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80091be:	250a      	movs	r5, #10
 80091c0:	197b      	adds	r3, r7, r5
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	3b03      	subs	r3, #3
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	18d3      	adds	r3, r2, r3
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	183a      	adds	r2, r7, r0
 80091ce:	0011      	movs	r1, r2
 80091d0:	0018      	movs	r0, r3
 80091d2:	f7ff fdf5 	bl	8008dc0 <ascii_to_value>
 80091d6:	0003      	movs	r3, r0
 80091d8:	001a      	movs	r2, r3
 80091da:	2301      	movs	r3, #1
 80091dc:	4053      	eors	r3, r2
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d111      	bne.n	8009208 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80091e4:	197b      	adds	r3, r7, r5
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	3b02      	subs	r3, #2
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	18d3      	adds	r3, r2, r3
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	193a      	adds	r2, r7, r4
 80091f2:	0011      	movs	r1, r2
 80091f4:	0018      	movs	r0, r3
 80091f6:	f7ff fde3 	bl	8008dc0 <ascii_to_value>
 80091fa:	0003      	movs	r3, r0
 80091fc:	001a      	movs	r2, r3
 80091fe:	2301      	movs	r3, #1
 8009200:	4053      	eors	r3, r2
 8009202:	b2db      	uxtb	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009208:	4b1b      	ldr	r3, [pc, #108]	; (8009278 <astronode_decode_answer_transport+0x31c>)
 800920a:	0018      	movs	r0, r3
 800920c:	f7f9 fe28 	bl	8002e60 <send_debug_logs>
        return RS_FAILURE;
 8009210:	2300      	movs	r3, #0
 8009212:	e027      	b.n	8009264 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8009214:	2317      	movs	r3, #23
 8009216:	18fb      	adds	r3, r7, r3
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	b29a      	uxth	r2, r3
 8009220:	2316      	movs	r3, #22
 8009222:	18fb      	adds	r3, r7, r3
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	18d3      	adds	r3, r2, r3
 800922a:	b299      	uxth	r1, r3
 800922c:	2018      	movs	r0, #24
 800922e:	183b      	adds	r3, r7, r0
 8009230:	183a      	adds	r2, r7, r0
 8009232:	8812      	ldrh	r2, [r2, #0]
 8009234:	188a      	adds	r2, r1, r2
 8009236:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8009238:	183a      	adds	r2, r7, r0
 800923a:	231a      	movs	r3, #26
 800923c:	18fb      	adds	r3, r7, r3
 800923e:	8812      	ldrh	r2, [r2, #0]
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d005      	beq.n	8009252 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8009246:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <astronode_decode_answer_transport+0x324>)
 8009248:	0018      	movs	r0, r3
 800924a:	f7f9 fe09 	bl	8002e60 <send_debug_logs>
        return RS_FAILURE;
 800924e:	2300      	movs	r3, #0
 8009250:	e008      	b.n	8009264 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2bff      	cmp	r3, #255	; 0xff
 8009258:	d103      	bne.n	8009262 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	0018      	movs	r0, r3
 800925e:	f000 f8c3 	bl	80093e8 <check_for_error>
    }

    return RS_SUCCESS;
 8009262:	2301      	movs	r3, #1
}
 8009264:	0018      	movs	r0, r3
 8009266:	46bd      	mov	sp, r7
 8009268:	b009      	add	sp, #36	; 0x24
 800926a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926c:	08014038 	.word	0x08014038
 8009270:	08014088 	.word	0x08014088
 8009274:	080140d8 	.word	0x080140d8
 8009278:	08014128 	.word	0x08014128
 800927c:	0000ffff 	.word	0x0000ffff
 8009280:	08014174 	.word	0x08014174

08009284 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8009284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009286:	4c2b      	ldr	r4, [pc, #172]	; (8009334 <astronode_transport_send_receive+0xb0>)
 8009288:	44a5      	add	sp, r4
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009290:	4b29      	ldr	r3, [pc, #164]	; (8009338 <astronode_transport_send_receive+0xb4>)
 8009292:	25ca      	movs	r5, #202	; 0xca
 8009294:	00ad      	lsls	r5, r5, #2
 8009296:	195b      	adds	r3, r3, r5
 8009298:	19db      	adds	r3, r3, r7
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	3304      	adds	r3, #4
 80092a0:	22c4      	movs	r2, #196	; 0xc4
 80092a2:	0052      	lsls	r2, r2, #1
 80092a4:	2100      	movs	r1, #0
 80092a6:	0018      	movs	r0, r3
 80092a8:	f003 f88e 	bl	800c3c8 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80092ac:	4b23      	ldr	r3, [pc, #140]	; (800933c <astronode_transport_send_receive+0xb8>)
 80092ae:	195b      	adds	r3, r3, r5
 80092b0:	19db      	adds	r3, r3, r7
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	3304      	adds	r3, #4
 80092b8:	22c4      	movs	r2, #196	; 0xc4
 80092ba:	0052      	lsls	r2, r2, #1
 80092bc:	2100      	movs	r1, #0
 80092be:	0018      	movs	r0, r3
 80092c0:	f003 f882 	bl	800c3c8 <memset>
    uint16_t answer_length =  0;
 80092c4:	4b1e      	ldr	r3, [pc, #120]	; (8009340 <astronode_transport_send_receive+0xbc>)
 80092c6:	195b      	adds	r3, r3, r5
 80092c8:	19db      	adds	r3, r3, r7
 80092ca:	2200      	movs	r2, #0
 80092cc:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80092ce:	4e1d      	ldr	r6, [pc, #116]	; (8009344 <astronode_transport_send_receive+0xc0>)
 80092d0:	19bc      	adds	r4, r7, r6
 80092d2:	23cc      	movs	r3, #204	; 0xcc
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	18fa      	adds	r2, r7, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	0011      	movs	r1, r2
 80092dc:	0018      	movs	r0, r3
 80092de:	f7ff fd9b 	bl	8008e18 <astronode_create_request_transport>
 80092e2:	0003      	movs	r3, r0
 80092e4:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80092e6:	19bb      	adds	r3, r7, r6
 80092e8:	881a      	ldrh	r2, [r3, #0]
 80092ea:	23cc      	movs	r3, #204	; 0xcc
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	18fb      	adds	r3, r7, r3
 80092f0:	0011      	movs	r1, r2
 80092f2:	0018      	movs	r0, r3
 80092f4:	f7f9 fe00 	bl	8002ef8 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80092f8:	230a      	movs	r3, #10
 80092fa:	18fa      	adds	r2, r7, r3
 80092fc:	240c      	movs	r4, #12
 80092fe:	193b      	adds	r3, r7, r4
 8009300:	0011      	movs	r1, r2
 8009302:	0018      	movs	r0, r3
 8009304:	f000 f92c 	bl	8009560 <receive_astronode_answer>
 8009308:	0003      	movs	r3, r0
 800930a:	2b01      	cmp	r3, #1
 800930c:	d10a      	bne.n	8009324 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800930e:	4b0c      	ldr	r3, [pc, #48]	; (8009340 <astronode_transport_send_receive+0xbc>)
 8009310:	195b      	adds	r3, r3, r5
 8009312:	19db      	adds	r3, r3, r7
 8009314:	8819      	ldrh	r1, [r3, #0]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	193b      	adds	r3, r7, r4
 800931a:	0018      	movs	r0, r3
 800931c:	f7ff fe1e 	bl	8008f5c <astronode_decode_answer_transport>
 8009320:	0003      	movs	r3, r0
 8009322:	e000      	b.n	8009326 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009324:	2300      	movs	r3, #0
    }
}
 8009326:	0018      	movs	r0, r3
 8009328:	46bd      	mov	sp, r7
 800932a:	23cb      	movs	r3, #203	; 0xcb
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	449d      	add	sp, r3
 8009330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009332:	46c0      	nop			; (mov r8, r8)
 8009334:	fffffcd4 	.word	0xfffffcd4
 8009338:	fffffe70 	.word	0xfffffe70
 800933c:	fffffce4 	.word	0xfffffce4
 8009340:	fffffce2 	.word	0xfffffce2
 8009344:	00000326 	.word	0x00000326

08009348 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8009348:	b590      	push	{r4, r7, lr}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	0008      	movs	r0, r1
 8009352:	0011      	movs	r1, r2
 8009354:	1cbb      	adds	r3, r7, #2
 8009356:	1c02      	adds	r2, r0, #0
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	003b      	movs	r3, r7
 800935c:	1c0a      	adds	r2, r1, #0
 800935e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8009360:	230e      	movs	r3, #14
 8009362:	18fb      	adds	r3, r7, r3
 8009364:	003a      	movs	r2, r7
 8009366:	8812      	ldrh	r2, [r2, #0]
 8009368:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800936a:	e02e      	b.n	80093ca <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800936c:	240e      	movs	r4, #14
 800936e:	193b      	adds	r3, r7, r4
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	0a1b      	lsrs	r3, r3, #8
 8009374:	b299      	uxth	r1, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	b29a      	uxth	r2, r3
 8009380:	200c      	movs	r0, #12
 8009382:	183b      	adds	r3, r7, r0
 8009384:	404a      	eors	r2, r1
 8009386:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8009388:	183b      	adds	r3, r7, r0
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	091b      	lsrs	r3, r3, #4
 800938e:	b299      	uxth	r1, r3
 8009390:	183b      	adds	r3, r7, r0
 8009392:	183a      	adds	r2, r7, r0
 8009394:	8812      	ldrh	r2, [r2, #0]
 8009396:	404a      	eors	r2, r1
 8009398:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800939a:	0021      	movs	r1, r4
 800939c:	187b      	adds	r3, r7, r1
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	b21a      	sxth	r2, r3
 80093a4:	183b      	adds	r3, r7, r0
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	031b      	lsls	r3, r3, #12
 80093aa:	b21b      	sxth	r3, r3
 80093ac:	4053      	eors	r3, r2
 80093ae:	b21a      	sxth	r2, r3
 80093b0:	183b      	adds	r3, r7, r0
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	015b      	lsls	r3, r3, #5
 80093b6:	b21b      	sxth	r3, r3
 80093b8:	4053      	eors	r3, r2
 80093ba:	b21a      	sxth	r2, r3
 80093bc:	183b      	adds	r3, r7, r0
 80093be:	2000      	movs	r0, #0
 80093c0:	5e1b      	ldrsh	r3, [r3, r0]
 80093c2:	4053      	eors	r3, r2
 80093c4:	b21a      	sxth	r2, r3
 80093c6:	187b      	adds	r3, r7, r1
 80093c8:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80093ca:	1cbb      	adds	r3, r7, #2
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	1cba      	adds	r2, r7, #2
 80093d0:	1e59      	subs	r1, r3, #1
 80093d2:	8011      	strh	r1, [r2, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1c9      	bne.n	800936c <calculate_crc+0x24>
    }
    return crc;
 80093d8:	230e      	movs	r3, #14
 80093da:	18fb      	adds	r3, r7, r3
 80093dc:	881b      	ldrh	r3, [r3, #0]
}
 80093de:	0018      	movs	r0, r3
 80093e0:	46bd      	mov	sp, r7
 80093e2:	b005      	add	sp, #20
 80093e4:	bd90      	pop	{r4, r7, pc}
	...

080093e8 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	785b      	ldrb	r3, [r3, #1]
 80093f4:	b299      	uxth	r1, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	789b      	ldrb	r3, [r3, #2]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	021b      	lsls	r3, r3, #8
 80093fe:	b29a      	uxth	r2, r3
 8009400:	200e      	movs	r0, #14
 8009402:	183b      	adds	r3, r7, r0
 8009404:	188a      	adds	r2, r1, r2
 8009406:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8009408:	183b      	adds	r3, r7, r0
 800940a:	881b      	ldrh	r3, [r3, #0]
 800940c:	4a40      	ldr	r2, [pc, #256]	; (8009510 <check_for_error+0x128>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d100      	bne.n	8009414 <check_for_error+0x2c>
 8009412:	e06f      	b.n	80094f4 <check_for_error+0x10c>
 8009414:	4a3e      	ldr	r2, [pc, #248]	; (8009510 <check_for_error+0x128>)
 8009416:	4293      	cmp	r3, r2
 8009418:	dd00      	ble.n	800941c <check_for_error+0x34>
 800941a:	e070      	b.n	80094fe <check_for_error+0x116>
 800941c:	4a3d      	ldr	r2, [pc, #244]	; (8009514 <check_for_error+0x12c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d100      	bne.n	8009424 <check_for_error+0x3c>
 8009422:	e062      	b.n	80094ea <check_for_error+0x102>
 8009424:	4a3b      	ldr	r2, [pc, #236]	; (8009514 <check_for_error+0x12c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	dd00      	ble.n	800942c <check_for_error+0x44>
 800942a:	e068      	b.n	80094fe <check_for_error+0x116>
 800942c:	4a3a      	ldr	r2, [pc, #232]	; (8009518 <check_for_error+0x130>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d056      	beq.n	80094e0 <check_for_error+0xf8>
 8009432:	4a39      	ldr	r2, [pc, #228]	; (8009518 <check_for_error+0x130>)
 8009434:	4293      	cmp	r3, r2
 8009436:	dd00      	ble.n	800943a <check_for_error+0x52>
 8009438:	e061      	b.n	80094fe <check_for_error+0x116>
 800943a:	4a38      	ldr	r2, [pc, #224]	; (800951c <check_for_error+0x134>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d04a      	beq.n	80094d6 <check_for_error+0xee>
 8009440:	4a36      	ldr	r2, [pc, #216]	; (800951c <check_for_error+0x134>)
 8009442:	4293      	cmp	r3, r2
 8009444:	dc5b      	bgt.n	80094fe <check_for_error+0x116>
 8009446:	4a36      	ldr	r2, [pc, #216]	; (8009520 <check_for_error+0x138>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d03f      	beq.n	80094cc <check_for_error+0xe4>
 800944c:	4a34      	ldr	r2, [pc, #208]	; (8009520 <check_for_error+0x138>)
 800944e:	4293      	cmp	r3, r2
 8009450:	dc55      	bgt.n	80094fe <check_for_error+0x116>
 8009452:	4a34      	ldr	r2, [pc, #208]	; (8009524 <check_for_error+0x13c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d034      	beq.n	80094c2 <check_for_error+0xda>
 8009458:	4a32      	ldr	r2, [pc, #200]	; (8009524 <check_for_error+0x13c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	dc4f      	bgt.n	80094fe <check_for_error+0x116>
 800945e:	4a32      	ldr	r2, [pc, #200]	; (8009528 <check_for_error+0x140>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d029      	beq.n	80094b8 <check_for_error+0xd0>
 8009464:	4a30      	ldr	r2, [pc, #192]	; (8009528 <check_for_error+0x140>)
 8009466:	4293      	cmp	r3, r2
 8009468:	dc49      	bgt.n	80094fe <check_for_error+0x116>
 800946a:	4a30      	ldr	r2, [pc, #192]	; (800952c <check_for_error+0x144>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d01e      	beq.n	80094ae <check_for_error+0xc6>
 8009470:	4a2e      	ldr	r2, [pc, #184]	; (800952c <check_for_error+0x144>)
 8009472:	4293      	cmp	r3, r2
 8009474:	dc43      	bgt.n	80094fe <check_for_error+0x116>
 8009476:	2222      	movs	r2, #34	; 0x22
 8009478:	32ff      	adds	r2, #255	; 0xff
 800947a:	4293      	cmp	r3, r2
 800947c:	d012      	beq.n	80094a4 <check_for_error+0xbc>
 800947e:	2291      	movs	r2, #145	; 0x91
 8009480:	0052      	lsls	r2, r2, #1
 8009482:	4293      	cmp	r3, r2
 8009484:	da3b      	bge.n	80094fe <check_for_error+0x116>
 8009486:	2b01      	cmp	r3, #1
 8009488:	d002      	beq.n	8009490 <check_for_error+0xa8>
 800948a:	2b11      	cmp	r3, #17
 800948c:	d005      	beq.n	800949a <check_for_error+0xb2>
 800948e:	e036      	b.n	80094fe <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8009490:	4b27      	ldr	r3, [pc, #156]	; (8009530 <check_for_error+0x148>)
 8009492:	0018      	movs	r0, r3
 8009494:	f7f9 fce4 	bl	8002e60 <send_debug_logs>
            break;
 8009498:	e036      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800949a:	4b26      	ldr	r3, [pc, #152]	; (8009534 <check_for_error+0x14c>)
 800949c:	0018      	movs	r0, r3
 800949e:	f7f9 fcdf 	bl	8002e60 <send_debug_logs>
            break;
 80094a2:	e031      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80094a4:	4b24      	ldr	r3, [pc, #144]	; (8009538 <check_for_error+0x150>)
 80094a6:	0018      	movs	r0, r3
 80094a8:	f7f9 fcda 	bl	8002e60 <send_debug_logs>
            break;
 80094ac:	e02c      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80094ae:	4b23      	ldr	r3, [pc, #140]	; (800953c <check_for_error+0x154>)
 80094b0:	0018      	movs	r0, r3
 80094b2:	f7f9 fcd5 	bl	8002e60 <send_debug_logs>
            break;
 80094b6:	e027      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80094b8:	4b21      	ldr	r3, [pc, #132]	; (8009540 <check_for_error+0x158>)
 80094ba:	0018      	movs	r0, r3
 80094bc:	f7f9 fcd0 	bl	8002e60 <send_debug_logs>
            break;
 80094c0:	e022      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80094c2:	4b20      	ldr	r3, [pc, #128]	; (8009544 <check_for_error+0x15c>)
 80094c4:	0018      	movs	r0, r3
 80094c6:	f7f9 fccb 	bl	8002e60 <send_debug_logs>
            break;
 80094ca:	e01d      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80094cc:	4b1e      	ldr	r3, [pc, #120]	; (8009548 <check_for_error+0x160>)
 80094ce:	0018      	movs	r0, r3
 80094d0:	f7f9 fcc6 	bl	8002e60 <send_debug_logs>
            break;
 80094d4:	e018      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80094d6:	4b1d      	ldr	r3, [pc, #116]	; (800954c <check_for_error+0x164>)
 80094d8:	0018      	movs	r0, r3
 80094da:	f7f9 fcc1 	bl	8002e60 <send_debug_logs>
            break;
 80094de:	e013      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80094e0:	4b1b      	ldr	r3, [pc, #108]	; (8009550 <check_for_error+0x168>)
 80094e2:	0018      	movs	r0, r3
 80094e4:	f7f9 fcbc 	bl	8002e60 <send_debug_logs>
            break;
 80094e8:	e00e      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80094ea:	4b1a      	ldr	r3, [pc, #104]	; (8009554 <check_for_error+0x16c>)
 80094ec:	0018      	movs	r0, r3
 80094ee:	f7f9 fcb7 	bl	8002e60 <send_debug_logs>
            break;
 80094f2:	e009      	b.n	8009508 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80094f4:	4b18      	ldr	r3, [pc, #96]	; (8009558 <check_for_error+0x170>)
 80094f6:	0018      	movs	r0, r3
 80094f8:	f7f9 fcb2 	bl	8002e60 <send_debug_logs>
            break;
 80094fc:	e004      	b.n	8009508 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80094fe:	4b17      	ldr	r3, [pc, #92]	; (800955c <check_for_error+0x174>)
 8009500:	0018      	movs	r0, r3
 8009502:	f7f9 fcad 	bl	8002e60 <send_debug_logs>
            break;
 8009506:	46c0      	nop			; (mov r8, r8)
    }
}
 8009508:	46c0      	nop			; (mov r8, r8)
 800950a:	46bd      	mov	sp, r7
 800950c:	b004      	add	sp, #16
 800950e:	bd80      	pop	{r7, pc}
 8009510:	00004601 	.word	0x00004601
 8009514:	00004501 	.word	0x00004501
 8009518:	00003501 	.word	0x00003501
 800951c:	00002601 	.word	0x00002601
 8009520:	00002511 	.word	0x00002511
 8009524:	00002501 	.word	0x00002501
 8009528:	00000611 	.word	0x00000611
 800952c:	00000601 	.word	0x00000601
 8009530:	080141b8 	.word	0x080141b8
 8009534:	08014204 	.word	0x08014204
 8009538:	08014268 	.word	0x08014268
 800953c:	080142a0 	.word	0x080142a0
 8009540:	08014344 	.word	0x08014344
 8009544:	080143ac 	.word	0x080143ac
 8009548:	0801440c 	.word	0x0801440c
 800954c:	08014498 	.word	0x08014498
 8009550:	080144f8 	.word	0x080144f8
 8009554:	080145a4 	.word	0x080145a4
 8009558:	080145f0 	.word	0x080145f0
 800955c:	08014638 	.word	0x08014638

08009560 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8009560:	b5b0      	push	{r4, r5, r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800956a:	230f      	movs	r3, #15
 800956c:	18fb      	adds	r3, r7, r3
 800956e:	2200      	movs	r2, #0
 8009570:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8009572:	2316      	movs	r3, #22
 8009574:	18fb      	adds	r3, r7, r3
 8009576:	2200      	movs	r2, #0
 8009578:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800957a:	f7f9 fd01 	bl	8002f80 <get_systick>
 800957e:	0003      	movs	r3, r0
 8009580:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8009582:	2315      	movs	r3, #21
 8009584:	18fb      	adds	r3, r7, r3
 8009586:	2200      	movs	r2, #0
 8009588:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800958a:	e054      	b.n	8009636 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800958c:	4a34      	ldr	r2, [pc, #208]	; (8009660 <receive_astronode_answer+0x100>)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	0011      	movs	r1, r2
 8009592:	0018      	movs	r0, r3
 8009594:	f7f9 fcfc 	bl	8002f90 <is_systick_timeout_over>
 8009598:	1e03      	subs	r3, r0, #0
 800959a:	d005      	beq.n	80095a8 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800959c:	4b31      	ldr	r3, [pc, #196]	; (8009664 <receive_astronode_answer+0x104>)
 800959e:	0018      	movs	r0, r3
 80095a0:	f7f9 fc5e 	bl	8002e60 <send_debug_logs>
            return RS_FAILURE;
 80095a4:	2300      	movs	r3, #0
 80095a6:	e057      	b.n	8009658 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80095a8:	250f      	movs	r5, #15
 80095aa:	197b      	adds	r3, r7, r5
 80095ac:	0018      	movs	r0, r3
 80095ae:	f7f9 fcc1 	bl	8002f34 <is_astronode_character_received>
 80095b2:	0003      	movs	r3, r0
 80095b4:	0019      	movs	r1, r3
 80095b6:	2016      	movs	r0, #22
 80095b8:	183b      	adds	r3, r7, r0
 80095ba:	183a      	adds	r2, r7, r0
 80095bc:	8812      	ldrh	r2, [r2, #0]
 80095be:	801a      	strh	r2, [r3, #0]
 80095c0:	2415      	movs	r4, #21
 80095c2:	193b      	adds	r3, r7, r4
 80095c4:	193a      	adds	r2, r7, r4
 80095c6:	7812      	ldrb	r2, [r2, #0]
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	2900      	cmp	r1, #0
 80095cc:	d033      	beq.n	8009636 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80095ce:	197b      	adds	r3, r7, r5
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d105      	bne.n	80095e2 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80095d6:	193b      	adds	r3, r7, r4
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
                length = 0;
 80095dc:	183b      	adds	r3, r7, r0
 80095de:	2200      	movs	r2, #0
 80095e0:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80095e2:	2116      	movs	r1, #22
 80095e4:	187b      	adds	r3, r7, r1
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	18d3      	adds	r3, r2, r3
 80095ec:	220f      	movs	r2, #15
 80095ee:	18ba      	adds	r2, r7, r2
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	701a      	strb	r2, [r3, #0]
            length++;
 80095f4:	187b      	adds	r3, r7, r1
 80095f6:	881a      	ldrh	r2, [r3, #0]
 80095f8:	187b      	adds	r3, r7, r1
 80095fa:	3201      	adds	r2, #1
 80095fc:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80095fe:	187b      	adds	r3, r7, r1
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	2bb2      	cmp	r3, #178	; 0xb2
 8009604:	d905      	bls.n	8009612 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8009606:	4b18      	ldr	r3, [pc, #96]	; (8009668 <receive_astronode_answer+0x108>)
 8009608:	0018      	movs	r0, r3
 800960a:	f7f9 fc29 	bl	8002e60 <send_debug_logs>
                return RS_FAILURE;
 800960e:	2300      	movs	r3, #0
 8009610:	e022      	b.n	8009658 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8009612:	230f      	movs	r3, #15
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	2b03      	cmp	r3, #3
 800961a:	d10c      	bne.n	8009636 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800961c:	2216      	movs	r2, #22
 800961e:	18bb      	adds	r3, r7, r2
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d907      	bls.n	8009636 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	18ba      	adds	r2, r7, r2
 800962a:	8812      	ldrh	r2, [r2, #0]
 800962c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800962e:	2315      	movs	r3, #21
 8009630:	18fb      	adds	r3, r7, r3
 8009632:	2201      	movs	r2, #1
 8009634:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8009636:	2315      	movs	r3, #21
 8009638:	18fb      	adds	r3, r7, r3
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2201      	movs	r2, #1
 800963e:	4053      	eors	r3, r2
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1a2      	bne.n	800958c <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009646:	4b09      	ldr	r3, [pc, #36]	; (800966c <receive_astronode_answer+0x10c>)
 8009648:	0018      	movs	r0, r3
 800964a:	f7f9 fc09 	bl	8002e60 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	0018      	movs	r0, r3
 8009652:	f7f9 fc05 	bl	8002e60 <send_debug_logs>

    return RS_SUCCESS;
 8009656:	2301      	movs	r3, #1
}
 8009658:	0018      	movs	r0, r3
 800965a:	46bd      	mov	sp, r7
 800965c:	b006      	add	sp, #24
 800965e:	bdb0      	pop	{r4, r5, r7, pc}
 8009660:	000005dc 	.word	0x000005dc
 8009664:	0801465c 	.word	0x0801465c
 8009668:	08014680 	.word	0x08014680
 800966c:	080146cc 	.word	0x080146cc

08009670 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	0002      	movs	r2, r0
 8009678:	6039      	str	r1, [r7, #0]
 800967a:	1dfb      	adds	r3, r7, #7
 800967c:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800967e:	1dfb      	adds	r3, r7, #7
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	091b      	lsrs	r3, r3, #4
 8009684:	b2db      	uxtb	r3, r3
 8009686:	001a      	movs	r2, r3
 8009688:	4b08      	ldr	r3, [pc, #32]	; (80096ac <uint8_to_ascii_buffer+0x3c>)
 800968a:	5c9a      	ldrb	r2, [r3, r2]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8009690:	1dfb      	adds	r3, r7, #7
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	220f      	movs	r2, #15
 8009696:	401a      	ands	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	3301      	adds	r3, #1
 800969c:	4903      	ldr	r1, [pc, #12]	; (80096ac <uint8_to_ascii_buffer+0x3c>)
 800969e:	5c8a      	ldrb	r2, [r1, r2]
 80096a0:	701a      	strb	r2, [r3, #0]
}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	46bd      	mov	sp, r7
 80096a6:	b002      	add	sp, #8
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	46c0      	nop			; (mov r8, r8)
 80096ac:	080148fc 	.word	0x080148fc

080096b0 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80096b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	0008      	movs	r0, r1
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	0019      	movs	r1, r3
 80096be:	260b      	movs	r6, #11
 80096c0:	19bb      	adds	r3, r7, r6
 80096c2:	1c02      	adds	r2, r0, #0
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	2508      	movs	r5, #8
 80096c8:	197b      	adds	r3, r7, r5
 80096ca:	1c0a      	adds	r2, r1, #0
 80096cc:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	685c      	ldr	r4, [r3, #4]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	68d8      	ldr	r0, [r3, #12]
 80096d6:	197b      	adds	r3, r7, r5
 80096d8:	881d      	ldrh	r5, [r3, #0]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	19bb      	adds	r3, r7, r6
 80096de:	7819      	ldrb	r1, [r3, #0]
 80096e0:	002b      	movs	r3, r5
 80096e2:	47a0      	blx	r4
 80096e4:	0003      	movs	r3, r0
 80096e6:	617b      	str	r3, [r7, #20]

  return ret;
 80096e8:	697b      	ldr	r3, [r7, #20]
}
 80096ea:	0018      	movs	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b007      	add	sp, #28
 80096f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096f2 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80096f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096f4:	b087      	sub	sp, #28
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	0008      	movs	r0, r1
 80096fc:	607a      	str	r2, [r7, #4]
 80096fe:	0019      	movs	r1, r3
 8009700:	260b      	movs	r6, #11
 8009702:	19bb      	adds	r3, r7, r6
 8009704:	1c02      	adds	r2, r0, #0
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	2508      	movs	r5, #8
 800970a:	197b      	adds	r3, r7, r5
 800970c:	1c0a      	adds	r2, r1, #0
 800970e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681c      	ldr	r4, [r3, #0]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	68d8      	ldr	r0, [r3, #12]
 8009718:	197b      	adds	r3, r7, r5
 800971a:	881d      	ldrh	r5, [r3, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	19bb      	adds	r3, r7, r6
 8009720:	7819      	ldrb	r1, [r3, #0]
 8009722:	002b      	movs	r3, r5
 8009724:	47a0      	blx	r4
 8009726:	0003      	movs	r3, r0
 8009728:	617b      	str	r3, [r7, #20]

  return ret;
 800972a:	697b      	ldr	r3, [r7, #20]
}
 800972c:	0018      	movs	r0, r3
 800972e:	46bd      	mov	sp, r7
 8009730:	b007      	add	sp, #28
 8009732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009734 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8009734:	b590      	push	{r4, r7, lr}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	000a      	movs	r2, r1
 800973e:	1cfb      	adds	r3, r7, #3
 8009740:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8009742:	2410      	movs	r4, #16
 8009744:	193a      	adds	r2, r7, r4
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	2301      	movs	r3, #1
 800974a:	2120      	movs	r1, #32
 800974c:	f7ff ffb0 	bl	80096b0 <lis2dw12_read_reg>
 8009750:	0003      	movs	r3, r0
 8009752:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d129      	bne.n	80097ae <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800975a:	1cfb      	adds	r3, r7, #3
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	089b      	lsrs	r3, r3, #2
 8009760:	1c1a      	adds	r2, r3, #0
 8009762:	2303      	movs	r3, #3
 8009764:	4013      	ands	r3, r2
 8009766:	b2da      	uxtb	r2, r3
 8009768:	193b      	adds	r3, r7, r4
 800976a:	2103      	movs	r1, #3
 800976c:	400a      	ands	r2, r1
 800976e:	0090      	lsls	r0, r2, #2
 8009770:	781a      	ldrb	r2, [r3, #0]
 8009772:	210c      	movs	r1, #12
 8009774:	438a      	bics	r2, r1
 8009776:	1c11      	adds	r1, r2, #0
 8009778:	1c02      	adds	r2, r0, #0
 800977a:	430a      	orrs	r2, r1
 800977c:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800977e:	1cfb      	adds	r3, r7, #3
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2203      	movs	r2, #3
 8009784:	4013      	ands	r3, r2
 8009786:	b2da      	uxtb	r2, r3
 8009788:	193b      	adds	r3, r7, r4
 800978a:	2103      	movs	r1, #3
 800978c:	400a      	ands	r2, r1
 800978e:	0010      	movs	r0, r2
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	2103      	movs	r1, #3
 8009794:	438a      	bics	r2, r1
 8009796:	1c11      	adds	r1, r2, #0
 8009798:	1c02      	adds	r2, r0, #0
 800979a:	430a      	orrs	r2, r1
 800979c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800979e:	193a      	adds	r2, r7, r4
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	2301      	movs	r3, #1
 80097a4:	2120      	movs	r1, #32
 80097a6:	f7ff ffa4 	bl	80096f2 <lis2dw12_write_reg>
 80097aa:	0003      	movs	r3, r0
 80097ac:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d108      	bne.n	80097c6 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80097b4:	230c      	movs	r3, #12
 80097b6:	18fa      	adds	r2, r7, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	2301      	movs	r3, #1
 80097bc:	2125      	movs	r1, #37	; 0x25
 80097be:	f7ff ff77 	bl	80096b0 <lis2dw12_read_reg>
 80097c2:	0003      	movs	r3, r0
 80097c4:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d11a      	bne.n	8009802 <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80097cc:	1cfb      	adds	r3, r7, #3
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	091b      	lsrs	r3, r3, #4
 80097d2:	1c1a      	adds	r2, r3, #0
 80097d4:	2301      	movs	r3, #1
 80097d6:	4013      	ands	r3, r2
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	240c      	movs	r4, #12
 80097dc:	193b      	adds	r3, r7, r4
 80097de:	2101      	movs	r1, #1
 80097e0:	400a      	ands	r2, r1
 80097e2:	0090      	lsls	r0, r2, #2
 80097e4:	781a      	ldrb	r2, [r3, #0]
 80097e6:	2104      	movs	r1, #4
 80097e8:	438a      	bics	r2, r1
 80097ea:	1c11      	adds	r1, r2, #0
 80097ec:	1c02      	adds	r2, r0, #0
 80097ee:	430a      	orrs	r2, r1
 80097f0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80097f2:	193a      	adds	r2, r7, r4
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	2301      	movs	r3, #1
 80097f8:	2125      	movs	r1, #37	; 0x25
 80097fa:	f7ff ff7a 	bl	80096f2 <lis2dw12_write_reg>
 80097fe:	0003      	movs	r3, r0
 8009800:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009802:	697b      	ldr	r3, [r7, #20]
}
 8009804:	0018      	movs	r0, r3
 8009806:	46bd      	mov	sp, r7
 8009808:	b007      	add	sp, #28
 800980a:	bd90      	pop	{r4, r7, pc}

0800980c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 800980c:	b590      	push	{r4, r7, lr}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	000a      	movs	r2, r1
 8009816:	1cfb      	adds	r3, r7, #3
 8009818:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800981a:	2410      	movs	r4, #16
 800981c:	193a      	adds	r2, r7, r4
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	2301      	movs	r3, #1
 8009822:	2120      	movs	r1, #32
 8009824:	f7ff ff44 	bl	80096b0 <lis2dw12_read_reg>
 8009828:	0003      	movs	r3, r0
 800982a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d115      	bne.n	800985e <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8009832:	1cfb      	adds	r3, r7, #3
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	220f      	movs	r2, #15
 8009838:	4013      	ands	r3, r2
 800983a:	b2da      	uxtb	r2, r3
 800983c:	193b      	adds	r3, r7, r4
 800983e:	0110      	lsls	r0, r2, #4
 8009840:	781a      	ldrb	r2, [r3, #0]
 8009842:	210f      	movs	r1, #15
 8009844:	400a      	ands	r2, r1
 8009846:	1c11      	adds	r1, r2, #0
 8009848:	1c02      	adds	r2, r0, #0
 800984a:	430a      	orrs	r2, r1
 800984c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800984e:	193a      	adds	r2, r7, r4
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	2301      	movs	r3, #1
 8009854:	2120      	movs	r1, #32
 8009856:	f7ff ff4c 	bl	80096f2 <lis2dw12_write_reg>
 800985a:	0003      	movs	r3, r0
 800985c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d108      	bne.n	8009876 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8009864:	230c      	movs	r3, #12
 8009866:	18fa      	adds	r2, r7, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	2301      	movs	r3, #1
 800986c:	2122      	movs	r1, #34	; 0x22
 800986e:	f7ff ff1f 	bl	80096b0 <lis2dw12_read_reg>
 8009872:	0003      	movs	r3, r0
 8009874:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d11a      	bne.n	80098b2 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800987c:	1cfb      	adds	r3, r7, #3
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	091b      	lsrs	r3, r3, #4
 8009882:	1c1a      	adds	r2, r3, #0
 8009884:	2303      	movs	r3, #3
 8009886:	4013      	ands	r3, r2
 8009888:	b2da      	uxtb	r2, r3
 800988a:	240c      	movs	r4, #12
 800988c:	193b      	adds	r3, r7, r4
 800988e:	2103      	movs	r1, #3
 8009890:	400a      	ands	r2, r1
 8009892:	0010      	movs	r0, r2
 8009894:	781a      	ldrb	r2, [r3, #0]
 8009896:	2103      	movs	r1, #3
 8009898:	438a      	bics	r2, r1
 800989a:	1c11      	adds	r1, r2, #0
 800989c:	1c02      	adds	r2, r0, #0
 800989e:	430a      	orrs	r2, r1
 80098a0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80098a2:	193a      	adds	r2, r7, r4
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	2301      	movs	r3, #1
 80098a8:	2122      	movs	r1, #34	; 0x22
 80098aa:	f7ff ff22 	bl	80096f2 <lis2dw12_write_reg>
 80098ae:	0003      	movs	r3, r0
 80098b0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80098b2:	697b      	ldr	r3, [r7, #20]
}
 80098b4:	0018      	movs	r0, r3
 80098b6:	46bd      	mov	sp, r7
 80098b8:	b007      	add	sp, #28
 80098ba:	bd90      	pop	{r4, r7, pc}

080098bc <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80098bc:	b590      	push	{r4, r7, lr}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	000a      	movs	r2, r1
 80098c6:	1cfb      	adds	r3, r7, #3
 80098c8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80098ca:	2408      	movs	r4, #8
 80098cc:	193a      	adds	r2, r7, r4
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	2301      	movs	r3, #1
 80098d2:	2125      	movs	r1, #37	; 0x25
 80098d4:	f7ff feec 	bl	80096b0 <lis2dw12_read_reg>
 80098d8:	0003      	movs	r3, r0
 80098da:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d117      	bne.n	8009912 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 80098e2:	1cfb      	adds	r3, r7, #3
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2203      	movs	r2, #3
 80098e8:	4013      	ands	r3, r2
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	193b      	adds	r3, r7, r4
 80098ee:	2103      	movs	r1, #3
 80098f0:	400a      	ands	r2, r1
 80098f2:	0110      	lsls	r0, r2, #4
 80098f4:	781a      	ldrb	r2, [r3, #0]
 80098f6:	2130      	movs	r1, #48	; 0x30
 80098f8:	438a      	bics	r2, r1
 80098fa:	1c11      	adds	r1, r2, #0
 80098fc:	1c02      	adds	r2, r0, #0
 80098fe:	430a      	orrs	r2, r1
 8009900:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8009902:	193a      	adds	r2, r7, r4
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	2301      	movs	r3, #1
 8009908:	2125      	movs	r1, #37	; 0x25
 800990a:	f7ff fef2 	bl	80096f2 <lis2dw12_write_reg>
 800990e:	0003      	movs	r3, r0
 8009910:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	0018      	movs	r0, r3
 8009916:	46bd      	mov	sp, r7
 8009918:	b005      	add	sp, #20
 800991a:	bd90      	pop	{r4, r7, pc}

0800991c <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	2301      	movs	r3, #1
 800992c:	210f      	movs	r1, #15
 800992e:	f7ff febf 	bl	80096b0 <lis2dw12_read_reg>
 8009932:	0003      	movs	r3, r0
 8009934:	60fb      	str	r3, [r7, #12]

  return ret;
 8009936:	68fb      	ldr	r3, [r7, #12]
}
 8009938:	0018      	movs	r0, r3
 800993a:	46bd      	mov	sp, r7
 800993c:	b004      	add	sp, #16
 800993e:	bd80      	pop	{r7, pc}

08009940 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009940:	b590      	push	{r4, r7, lr}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	000a      	movs	r2, r1
 800994a:	1cfb      	adds	r3, r7, #3
 800994c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800994e:	2408      	movs	r4, #8
 8009950:	193a      	adds	r2, r7, r4
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	2301      	movs	r3, #1
 8009956:	2121      	movs	r1, #33	; 0x21
 8009958:	f7ff feaa 	bl	80096b0 <lis2dw12_read_reg>
 800995c:	0003      	movs	r3, r0
 800995e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d117      	bne.n	8009996 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8009966:	1cfb      	adds	r3, r7, #3
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2201      	movs	r2, #1
 800996c:	4013      	ands	r3, r2
 800996e:	b2da      	uxtb	r2, r3
 8009970:	193b      	adds	r3, r7, r4
 8009972:	2101      	movs	r1, #1
 8009974:	400a      	ands	r2, r1
 8009976:	0190      	lsls	r0, r2, #6
 8009978:	781a      	ldrb	r2, [r3, #0]
 800997a:	2140      	movs	r1, #64	; 0x40
 800997c:	438a      	bics	r2, r1
 800997e:	1c11      	adds	r1, r2, #0
 8009980:	1c02      	adds	r2, r0, #0
 8009982:	430a      	orrs	r2, r1
 8009984:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009986:	193a      	adds	r2, r7, r4
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	2301      	movs	r3, #1
 800998c:	2121      	movs	r1, #33	; 0x21
 800998e:	f7ff feb0 	bl	80096f2 <lis2dw12_write_reg>
 8009992:	0003      	movs	r3, r0
 8009994:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009996:	68fb      	ldr	r3, [r7, #12]
}
 8009998:	0018      	movs	r0, r3
 800999a:	46bd      	mov	sp, r7
 800999c:	b005      	add	sp, #20
 800999e:	bd90      	pop	{r4, r7, pc}

080099a0 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80099aa:	2408      	movs	r4, #8
 80099ac:	193a      	adds	r2, r7, r4
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	2301      	movs	r3, #1
 80099b2:	2121      	movs	r1, #33	; 0x21
 80099b4:	f7ff fe7c 	bl	80096b0 <lis2dw12_read_reg>
 80099b8:	0003      	movs	r3, r0
 80099ba:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 80099bc:	193b      	adds	r3, r7, r4
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	065b      	lsls	r3, r3, #25
 80099c2:	0fdb      	lsrs	r3, r3, #31
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	001a      	movs	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	701a      	strb	r2, [r3, #0]

  return ret;
 80099cc:	68fb      	ldr	r3, [r7, #12]
}
 80099ce:	0018      	movs	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	b005      	add	sp, #20
 80099d4:	bd90      	pop	{r4, r7, pc}

080099d6 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 80099d6:	b590      	push	{r4, r7, lr}
 80099d8:	b087      	sub	sp, #28
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	000a      	movs	r2, r1
 80099e0:	1cfb      	adds	r3, r7, #3
 80099e2:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80099e4:	2410      	movs	r4, #16
 80099e6:	193a      	adds	r2, r7, r4
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	2301      	movs	r3, #1
 80099ec:	2125      	movs	r1, #37	; 0x25
 80099ee:	f7ff fe5f 	bl	80096b0 <lis2dw12_read_reg>
 80099f2:	0003      	movs	r3, r0
 80099f4:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d119      	bne.n	8009a30 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 80099fc:	1cfb      	adds	r3, r7, #3
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	091b      	lsrs	r3, r3, #4
 8009a02:	1c1a      	adds	r2, r3, #0
 8009a04:	2301      	movs	r3, #1
 8009a06:	4013      	ands	r3, r2
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	193b      	adds	r3, r7, r4
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	400a      	ands	r2, r1
 8009a10:	00d0      	lsls	r0, r2, #3
 8009a12:	781a      	ldrb	r2, [r3, #0]
 8009a14:	2108      	movs	r1, #8
 8009a16:	438a      	bics	r2, r1
 8009a18:	1c11      	adds	r1, r2, #0
 8009a1a:	1c02      	adds	r2, r0, #0
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009a20:	193a      	adds	r2, r7, r4
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	2301      	movs	r3, #1
 8009a26:	2125      	movs	r1, #37	; 0x25
 8009a28:	f7ff fe63 	bl	80096f2 <lis2dw12_write_reg>
 8009a2c:	0003      	movs	r3, r0
 8009a2e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d108      	bne.n	8009a48 <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 8009a36:	230c      	movs	r3, #12
 8009a38:	18fa      	adds	r2, r7, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	213f      	movs	r1, #63	; 0x3f
 8009a40:	f7ff fe36 	bl	80096b0 <lis2dw12_read_reg>
 8009a44:	0003      	movs	r3, r0
 8009a46:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d118      	bne.n	8009a80 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8009a4e:	1cfb      	adds	r3, r7, #3
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2201      	movs	r2, #1
 8009a54:	4013      	ands	r3, r2
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	240c      	movs	r4, #12
 8009a5a:	193b      	adds	r3, r7, r4
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	400a      	ands	r2, r1
 8009a60:	0110      	lsls	r0, r2, #4
 8009a62:	781a      	ldrb	r2, [r3, #0]
 8009a64:	2110      	movs	r1, #16
 8009a66:	438a      	bics	r2, r1
 8009a68:	1c11      	adds	r1, r2, #0
 8009a6a:	1c02      	adds	r2, r0, #0
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8009a70:	193a      	adds	r2, r7, r4
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	2301      	movs	r3, #1
 8009a76:	213f      	movs	r1, #63	; 0x3f
 8009a78:	f7ff fe3b 	bl	80096f2 <lis2dw12_write_reg>
 8009a7c:	0003      	movs	r3, r0
 8009a7e:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8009a80:	697b      	ldr	r3, [r7, #20]
}
 8009a82:	0018      	movs	r0, r3
 8009a84:	46bd      	mov	sp, r7
 8009a86:	b007      	add	sp, #28
 8009a88:	bd90      	pop	{r4, r7, pc}

08009a8a <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b086      	sub	sp, #24
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8009a94:	2310      	movs	r3, #16
 8009a96:	18fa      	adds	r2, r7, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	2124      	movs	r1, #36	; 0x24
 8009a9e:	f7ff fe07 	bl	80096b0 <lis2dw12_read_reg>
 8009aa2:	0003      	movs	r3, r0
 8009aa4:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d108      	bne.n	8009abe <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009aac:	230c      	movs	r3, #12
 8009aae:	18fa      	adds	r2, r7, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	213f      	movs	r1, #63	; 0x3f
 8009ab6:	f7ff fdfb 	bl	80096b0 <lis2dw12_read_reg>
 8009aba:	0003      	movs	r3, r0
 8009abc:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d146      	bne.n	8009b52 <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	071b      	lsls	r3, r3, #28
 8009aca:	0fdb      	lsrs	r3, r3, #31
 8009acc:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	06db      	lsls	r3, r3, #27
 8009ad4:	0fdb      	lsrs	r3, r3, #31
 8009ad6:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	069b      	lsls	r3, r3, #26
 8009ae2:	0fdb      	lsrs	r3, r3, #31
 8009ae4:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	065b      	lsls	r3, r3, #25
 8009af0:	0fdb      	lsrs	r3, r3, #31
 8009af2:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8009af4:	4313      	orrs	r3, r2
 8009af6:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	061b      	lsls	r3, r3, #24
 8009afe:	0fdb      	lsrs	r3, r3, #31
 8009b00:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8009b02:	4313      	orrs	r3, r2
 8009b04:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009b06:	2110      	movs	r1, #16
 8009b08:	187b      	adds	r3, r7, r1
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	061b      	lsls	r3, r3, #24
 8009b0e:	0fdb      	lsrs	r3, r3, #31
 8009b10:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8009b12:	4313      	orrs	r3, r2
 8009b14:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8009b16:	187b      	adds	r3, r7, r1
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	065b      	lsls	r3, r3, #25
 8009b1c:	0fdb      	lsrs	r3, r3, #31
 8009b1e:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009b20:	4313      	orrs	r3, r2
 8009b22:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d006      	beq.n	8009b36 <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8009b28:	230c      	movs	r3, #12
 8009b2a:	18fb      	adds	r3, r7, r3
 8009b2c:	781a      	ldrb	r2, [r3, #0]
 8009b2e:	2120      	movs	r1, #32
 8009b30:	430a      	orrs	r2, r1
 8009b32:	701a      	strb	r2, [r3, #0]
 8009b34:	e005      	b.n	8009b42 <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8009b36:	230c      	movs	r3, #12
 8009b38:	18fb      	adds	r3, r7, r3
 8009b3a:	781a      	ldrb	r2, [r3, #0]
 8009b3c:	2120      	movs	r1, #32
 8009b3e:	438a      	bics	r2, r1
 8009b40:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	2301      	movs	r3, #1
 8009b48:	2123      	movs	r1, #35	; 0x23
 8009b4a:	f7ff fdd2 	bl	80096f2 <lis2dw12_write_reg>
 8009b4e:	0003      	movs	r3, r0
 8009b50:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d108      	bne.n	8009b6a <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009b58:	230c      	movs	r3, #12
 8009b5a:	18fa      	adds	r2, r7, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	2301      	movs	r3, #1
 8009b60:	213f      	movs	r1, #63	; 0x3f
 8009b62:	f7ff fdc6 	bl	80096f2 <lis2dw12_write_reg>
 8009b66:	0003      	movs	r3, r0
 8009b68:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009b6a:	697b      	ldr	r3, [r7, #20]
}
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	b006      	add	sp, #24
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	2301      	movs	r3, #1
 8009b84:	2123      	movs	r1, #35	; 0x23
 8009b86:	f7ff fd93 	bl	80096b0 <lis2dw12_read_reg>
 8009b8a:	0003      	movs	r3, r0
 8009b8c:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
}
 8009b90:	0018      	movs	r0, r3
 8009b92:	46bd      	mov	sp, r7
 8009b94:	b004      	add	sp, #16
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	000a      	movs	r2, r1
 8009ba2:	1cfb      	adds	r3, r7, #3
 8009ba4:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009ba6:	2408      	movs	r4, #8
 8009ba8:	193a      	adds	r2, r7, r4
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	2301      	movs	r3, #1
 8009bae:	2134      	movs	r1, #52	; 0x34
 8009bb0:	f7ff fd7e 	bl	80096b0 <lis2dw12_read_reg>
 8009bb4:	0003      	movs	r3, r0
 8009bb6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d117      	bne.n	8009bee <lis2dw12_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8009bbe:	1cfb      	adds	r3, r7, #3
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	223f      	movs	r2, #63	; 0x3f
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	193b      	adds	r3, r7, r4
 8009bca:	213f      	movs	r1, #63	; 0x3f
 8009bcc:	400a      	ands	r2, r1
 8009bce:	0010      	movs	r0, r2
 8009bd0:	781a      	ldrb	r2, [r3, #0]
 8009bd2:	213f      	movs	r1, #63	; 0x3f
 8009bd4:	438a      	bics	r2, r1
 8009bd6:	1c11      	adds	r1, r2, #0
 8009bd8:	1c02      	adds	r2, r0, #0
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009bde:	193a      	adds	r2, r7, r4
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	2301      	movs	r3, #1
 8009be4:	2134      	movs	r1, #52	; 0x34
 8009be6:	f7ff fd84 	bl	80096f2 <lis2dw12_write_reg>
 8009bea:	0003      	movs	r3, r0
 8009bec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009bee:	68fb      	ldr	r3, [r7, #12]
}
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	b005      	add	sp, #20
 8009bf6:	bd90      	pop	{r4, r7, pc}

08009bf8 <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009bf8:	b590      	push	{r4, r7, lr}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	000a      	movs	r2, r1
 8009c02:	1cfb      	adds	r3, r7, #3
 8009c04:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009c06:	2408      	movs	r4, #8
 8009c08:	193a      	adds	r2, r7, r4
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	2135      	movs	r1, #53	; 0x35
 8009c10:	f7ff fd4e 	bl	80096b0 <lis2dw12_read_reg>
 8009c14:	0003      	movs	r3, r0
 8009c16:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d117      	bne.n	8009c4e <lis2dw12_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8009c1e:	1cfb      	adds	r3, r7, #3
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2203      	movs	r2, #3
 8009c24:	4013      	ands	r3, r2
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	193b      	adds	r3, r7, r4
 8009c2a:	2103      	movs	r1, #3
 8009c2c:	400a      	ands	r2, r1
 8009c2e:	0150      	lsls	r0, r2, #5
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	2160      	movs	r1, #96	; 0x60
 8009c34:	438a      	bics	r2, r1
 8009c36:	1c11      	adds	r1, r2, #0
 8009c38:	1c02      	adds	r2, r0, #0
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009c3e:	193a      	adds	r2, r7, r4
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	2301      	movs	r3, #1
 8009c44:	2135      	movs	r1, #53	; 0x35
 8009c46:	f7ff fd54 	bl	80096f2 <lis2dw12_write_reg>
 8009c4a:	0003      	movs	r3, r0
 8009c4c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
}
 8009c50:	0018      	movs	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b005      	add	sp, #20
 8009c56:	bd90      	pop	{r4, r7, pc}

08009c58 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ( void )
{
 8009c58:	b590      	push	{r4, r7, lr}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009c5e:	1dfb      	adds	r3, r7, #7
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8009c64:	4b25      	ldr	r3, [pc, #148]	; (8009cfc <my_astro_init+0xa4>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 8009c6a:	4b25      	ldr	r3, [pc, #148]	; (8009d00 <my_astro_init+0xa8>)
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f7fc fda5 	bl	80067bc <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009c72:	e019      	b.n	8009ca8 <my_astro_init+0x50>
	{
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 8009c74:	1dfc      	adds	r4, r7, #7
 8009c76:	2300      	movs	r3, #0
 8009c78:	9303      	str	r3, [sp, #12]
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	9302      	str	r3, [sp, #8]
 8009c7e:	2301      	movs	r3, #1
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	2301      	movs	r3, #1
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	2300      	movs	r3, #0
 8009c88:	2201      	movs	r2, #1
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	f7fe f865 	bl	8007d5c <astronode_send_cfg_wr>
 8009c92:	0003      	movs	r3, r0
 8009c94:	7023      	strb	r3, [r4, #0]
		my_astro_off () ;
 8009c96:	f7f9 f9b9 	bl	800300c <my_astro_off>
		HAL_Delay ( 100 ) ;
 8009c9a:	2064      	movs	r0, #100	; 0x64
 8009c9c:	f7f9 feaa 	bl	80039f4 <HAL_Delay>
		my_astro_on () ;
 8009ca0:	f7f9 f98c 	bl	8002fbc <my_astro_on>
		reset_astronode () ;
 8009ca4:	f7f9 f90c 	bl	8002ec0 <reset_astronode>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009ca8:	4b14      	ldr	r3, [pc, #80]	; (8009cfc <my_astro_init+0xa4>)
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	2b3b      	cmp	r3, #59	; 0x3b
 8009cae:	d806      	bhi.n	8009cbe <my_astro_init+0x66>
 8009cb0:	1dfb      	adds	r3, r7, #7
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	4053      	eors	r3, r2
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1da      	bne.n	8009c74 <my_astro_init+0x1c>
	}
	tim_seconds = 0 ;
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <my_astro_init+0xa4>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	; (8009d00 <my_astro_init+0xa8>)
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	f7fc fdd4 	bl	8006874 <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 8009ccc:	1dfb      	adds	r3, r7, #7
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00d      	beq.n	8009cf0 <my_astro_init+0x98>
	{
		astronode_send_rtc_rr () ;
 8009cd4:	f7fe fd02 	bl	80086dc <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8009cd8:	f7fe f808 	bl	8007cec <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8009cdc:	f7fe fdf8 	bl	80088d0 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8009ce0:	f7fe f992 	bl	8008008 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8009ce4:	f7fe f8e6 	bl	8007eb4 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8009ce8:	f7fe fc7c 	bl	80085e4 <astronode_send_pld_fr>
		return true ;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <my_astro_init+0x9a>
	}
	else
	{
		return false ;
 8009cf0:	2300      	movs	r3, #0
	}
}
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	b003      	add	sp, #12
 8009cf8:	bd90      	pop	{r4, r7, pc}
 8009cfa:	46c0      	nop			; (mov r8, r8)
 8009cfc:	20000a24 	.word	0x20000a24
 8009d00:	2000078c 	.word	0x2000078c

08009d04 <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( char* payload )
{
 8009d04:	b590      	push	{r4, r7, lr}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	uint16_t id = 0 ;
 8009d0c:	240e      	movs	r4, #14
 8009d0e:	193b      	adds	r3, r7, r4
 8009d10:	2200      	movs	r2, #0
 8009d12:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	0018      	movs	r0, r3
 8009d18:	f7f6 f9f4 	bl	8000104 <strlen>
 8009d1c:	0003      	movs	r3, r0
 8009d1e:	60bb      	str	r3, [r7, #8]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2ba0      	cmp	r3, #160	; 0xa0
 8009d24:	d80b      	bhi.n	8009d3e <my_astro_add_payload_2_queue+0x3a>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	6879      	ldr	r1, [r7, #4]
 8009d2c:	193b      	adds	r3, r7, r4
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	0018      	movs	r0, r3
 8009d32:	f7fe fbb3 	bl	800849c <astronode_send_pld_er>
 8009d36:	1e03      	subs	r3, r0, #0
 8009d38:	d005      	beq.n	8009d46 <my_astro_add_payload_2_queue+0x42>
		{
			return true ;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e004      	b.n	8009d48 <my_astro_add_payload_2_queue+0x44>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009d3e:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <my_astro_add_payload_2_queue+0x4c>)
 8009d40:	0018      	movs	r0, r3
 8009d42:	f7f9 f88d 	bl	8002e60 <send_debug_logs>
	}
	return false ;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	0018      	movs	r0, r3
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	b005      	add	sp, #20
 8009d4e:	bd90      	pop	{r4, r7, pc}
 8009d50:	080146f8 	.word	0x080146f8

08009d54 <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8009d58:	4b15      	ldr	r3, [pc, #84]	; (8009db0 <my_astro_read_evt_reg+0x5c>)
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f7f9 f880 	bl	8002e60 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009d60:	f7fe fa5c 	bl	800821c <astronode_send_evt_rr>
	if (is_sak_available () )
 8009d64:	f7ff f80e 	bl	8008d84 <is_sak_available>
 8009d68:	1e03      	subs	r3, r0, #0
 8009d6a:	d007      	beq.n	8009d7c <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8009d6c:	f7fe fd1a 	bl	80087a4 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009d70:	f7fe fd6e 	bl	8008850 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8009d74:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <my_astro_read_evt_reg+0x60>)
 8009d76:	0018      	movs	r0, r3
 8009d78:	f7f9 f872 	bl	8002e60 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009d7c:	f7ff f80c 	bl	8008d98 <is_astronode_reset>
 8009d80:	1e03      	subs	r3, r0, #0
 8009d82:	d005      	beq.n	8009d90 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8009d84:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <my_astro_read_evt_reg+0x64>)
 8009d86:	0018      	movs	r0, r3
 8009d88:	f7f9 f86a 	bl	8002e60 <send_debug_logs>
	  astronode_send_res_cr () ;
 8009d8c:	f7fe fc66 	bl	800865c <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009d90:	f7ff f80c 	bl	8008dac <is_command_available>
 8009d94:	1e03      	subs	r3, r0, #0
 8009d96:	d007      	beq.n	8009da8 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 8009d98:	4b08      	ldr	r3, [pc, #32]	; (8009dbc <my_astro_read_evt_reg+0x68>)
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	f7f9 f860 	bl	8002e60 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8009da0:	f7fe fe80 	bl	8008aa4 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 8009da4:	f7fe fe3e 	bl	8008a24 <astronode_send_cmd_cr>
	}
	return true ;
 8009da8:	2301      	movs	r3, #1
}
 8009daa:	0018      	movs	r0, r3
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	0801473c 	.word	0x0801473c
 8009db4:	08014758 	.word	0x08014758
 8009db8:	08014784 	.word	0x08014784
 8009dbc:	080147a8 	.word	0x080147a8

08009dc0 <my_astro_log>:
bool my_astro_log ( void )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 8009dc4:	f7fe fc8a 	bl	80086dc <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 8009dc8:	f7fe f9c8 	bl	800815c <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 8009dcc:	2301      	movs	r3, #1
}
 8009dce:	0018      	movs	r0, r3
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	0011      	movs	r1, r2
 8009de4:	0018      	movs	r0, r3
 8009de6:	f7fe fa99 	bl	800831c <astronode_send_geo_wr>
}
 8009dea:	46c0      	nop			; (mov r8, r8)
 8009dec:	46bd      	mov	sp, r7
 8009dee:	b002      	add	sp, #8
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 8009df2:	b590      	push	{r4, r7, lr}
 8009df4:	b085      	sub	sp, #20
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 8009dfa:	230f      	movs	r3, #15
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	2201      	movs	r2, #1
 8009e00:	701a      	strb	r2, [r3, #0]

	/*Restore default configuration */
	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2101      	movs	r1, #1
 8009e06:	0018      	movs	r0, r3
 8009e08:	f7ff fd9a 	bl	8009940 <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( ctx, &rst ) ;
 8009e0c:	240f      	movs	r4, #15
 8009e0e:	193a      	adds	r2, r7, r4
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	0011      	movs	r1, r2
 8009e14:	0018      	movs	r0, r3
 8009e16:	f7ff fdc3 	bl	80099a0 <lis2dw12_reset_get>
	} while ( rst ) ;
 8009e1a:	193b      	adds	r3, r7, r4
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1f4      	bne.n	8009e0c <my_lis2dw12_init+0x1a>

	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	0018      	movs	r0, r3
 8009e26:	f000 f828 	bl	8009e7a <my_lis2dw12_get_id>
 8009e2a:	0003      	movs	r3, r0
 8009e2c:	2b44      	cmp	r3, #68	; 0x44
 8009e2e:	d11f      	bne.n	8009e70 <my_lis2dw12_init+0x7e>
	{
		lis2dw12_full_scale_set 	( ctx , LIS2DW12_2g ) ;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2100      	movs	r1, #0
 8009e34:	0018      	movs	r0, r3
 8009e36:	f7ff fd41 	bl	80098bc <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2110      	movs	r1, #16
 8009e3e:	0018      	movs	r0, r3
 8009e40:	f7ff fc78 	bl	8009734 <lis2dw12_power_mode_set>
		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2106      	movs	r1, #6
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f7ff fcdf 	bl	800980c <lis2dw12_data_rate_set>
		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2110      	movs	r1, #16
 8009e52:	0018      	movs	r0, r3
 8009e54:	f7ff fdbf 	bl	80099d6 <lis2dw12_filter_path_set>
		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	f7ff fecb 	bl	8009bf8 <lis2dw12_wkup_dur_set>
		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2102      	movs	r1, #2
 8009e66:	0018      	movs	r0, r3
 8009e68:	f7ff fe96 	bl	8009b98 <lis2dw12_wkup_threshold_set>
		return true ;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <my_lis2dw12_init+0x80>
	}

	return false ;
 8009e70:	2300      	movs	r3, #0

}
 8009e72:	0018      	movs	r0, r3
 8009e74:	46bd      	mov	sp, r7
 8009e76:	b005      	add	sp, #20
 8009e78:	bd90      	pop	{r4, r7, pc}

08009e7a <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 8009e7a:	b590      	push	{r4, r7, lr}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 8009e82:	210f      	movs	r1, #15
 8009e84:	187b      	adds	r3, r7, r1
 8009e86:	2200      	movs	r2, #0
 8009e88:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 8009e8a:	000c      	movs	r4, r1
 8009e8c:	187a      	adds	r2, r7, r1
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	0011      	movs	r1, r2
 8009e92:	0018      	movs	r0, r3
 8009e94:	f7ff fd42 	bl	800991c <lis2dw12_device_id_get>
	return id ;
 8009e98:	193b      	adds	r3, r7, r4
 8009e9a:	781b      	ldrb	r3, [r3, #0]
}
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	b005      	add	sp, #20
 8009ea2:	bd90      	pop	{r4, r7, pc}

08009ea4 <my_lis2dw12_int1_wu_enable>:

void my_lis2dw12_int1_wu_enable ( stmdev_ctx_t* ctx )
{
 8009ea4:	b590      	push	{r4, r7, lr}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8009eac:	240c      	movs	r4, #12
 8009eae:	193a      	adds	r2, r7, r4
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	0011      	movs	r1, r2
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f7ff fe5d 	bl	8009b74 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 8009eba:	0020      	movs	r0, r4
 8009ebc:	183b      	adds	r3, r7, r0
 8009ebe:	781a      	ldrb	r2, [r3, #0]
 8009ec0:	2120      	movs	r1, #32
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8009ec6:	183a      	adds	r2, r7, r0
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	0011      	movs	r1, r2
 8009ecc:	0018      	movs	r0, r3
 8009ece:	f7ff fddc 	bl	8009a8a <lis2dw12_pin_int1_route_set>
}
 8009ed2:	46c0      	nop			; (mov r8, r8)
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	b005      	add	sp, #20
 8009ed8:	bd90      	pop	{r4, r7, pc}

08009eda <my_lis2dw12_int1_wu_disable>:
void my_lis2dw12_int1_wu_disable ( stmdev_ctx_t* ctx )
{
 8009eda:	b590      	push	{r4, r7, lr}
 8009edc:	b085      	sub	sp, #20
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 8009ee2:	240c      	movs	r4, #12
 8009ee4:	193a      	adds	r2, r7, r4
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	0011      	movs	r1, r2
 8009eea:	0018      	movs	r0, r3
 8009eec:	f7ff fe42 	bl	8009b74 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_DISABLE ;
 8009ef0:	0020      	movs	r0, r4
 8009ef2:	183b      	adds	r3, r7, r0
 8009ef4:	781a      	ldrb	r2, [r3, #0]
 8009ef6:	2120      	movs	r1, #32
 8009ef8:	438a      	bics	r2, r1
 8009efa:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8009efc:	183a      	adds	r2, r7, r0
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	0011      	movs	r1, r2
 8009f02:	0018      	movs	r0, r3
 8009f04:	f7ff fdc1 	bl	8009a8a <lis2dw12_pin_int1_route_set>
}
 8009f08:	46c0      	nop			; (mov r8, r8)
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	b005      	add	sp, #20
 8009f0e:	bd90      	pop	{r4, r7, pc}

08009f10 <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 8009f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f12:	4cde      	ldr	r4, [pc, #888]	; (800a28c <my_lx6_get_coordinates+0x37c>)
 8009f14:	44a5      	add	sp, r4
 8009f16:	af02      	add	r7, sp, #8
 8009f18:	0001      	movs	r1, r0
 8009f1a:	603a      	str	r2, [r7, #0]
 8009f1c:	607b      	str	r3, [r7, #4]
 8009f1e:	4bdc      	ldr	r3, [pc, #880]	; (800a290 <my_lx6_get_coordinates+0x380>)
 8009f20:	20da      	movs	r0, #218	; 0xda
 8009f22:	0080      	lsls	r0, r0, #2
 8009f24:	181b      	adds	r3, r3, r0
 8009f26:	19db      	adds	r3, r3, r7
 8009f28:	1c0a      	adds	r2, r1, #0
 8009f2a:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 8009f2c:	4bd9      	ldr	r3, [pc, #868]	; (800a294 <my_lx6_get_coordinates+0x384>)
 8009f2e:	18fb      	adds	r3, r7, r3
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 8009f34:	4bd8      	ldr	r3, [pc, #864]	; (800a298 <my_lx6_get_coordinates+0x388>)
 8009f36:	18fb      	adds	r3, r7, r3
 8009f38:	2200      	movs	r2, #0
 8009f3a:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f3c:	4bd7      	ldr	r3, [pc, #860]	; (800a29c <my_lx6_get_coordinates+0x38c>)
 8009f3e:	0004      	movs	r4, r0
 8009f40:	191b      	adds	r3, r3, r4
 8009f42:	19db      	adds	r3, r3, r7
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	22f6      	movs	r2, #246	; 0xf6
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	0018      	movs	r0, r3
 8009f50:	f002 fa3a 	bl	800c3c8 <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f54:	4bd2      	ldr	r3, [pc, #840]	; (800a2a0 <my_lx6_get_coordinates+0x390>)
 8009f56:	191b      	adds	r3, r3, r4
 8009f58:	19db      	adds	r3, r3, r7
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	22f6      	movs	r2, #246	; 0xf6
 8009f62:	2100      	movs	r1, #0
 8009f64:	0018      	movs	r0, r3
 8009f66:	f002 fa2f 	bl	800c3c8 <memset>
	uint8_t		rmc_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009f6a:	4bce      	ldr	r3, [pc, #824]	; (800a2a4 <my_lx6_get_coordinates+0x394>)
 8009f6c:	191b      	adds	r3, r3, r4
 8009f6e:	19db      	adds	r3, r3, r7
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	3304      	adds	r3, #4
 8009f76:	22f6      	movs	r2, #246	; 0xf6
 8009f78:	2100      	movs	r1, #0
 8009f7a:	0018      	movs	r0, r3
 8009f7c:	f002 fa24 	bl	800c3c8 <memset>
	uint8_t		i_nmea = 0 ;
 8009f80:	4bc9      	ldr	r3, [pc, #804]	; (800a2a8 <my_lx6_get_coordinates+0x398>)
 8009f82:	0021      	movs	r1, r4
 8009f84:	185b      	adds	r3, r3, r1
 8009f86:	19db      	adds	r3, r3, r7
 8009f88:	2200      	movs	r2, #0
 8009f8a:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009f8c:	4bc7      	ldr	r3, [pc, #796]	; (800a2ac <my_lx6_get_coordinates+0x39c>)
 8009f8e:	18fb      	adds	r3, r7, r3
 8009f90:	2200      	movs	r2, #0
 8009f92:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009f94:	4bc6      	ldr	r3, [pc, #792]	; (800a2b0 <my_lx6_get_coordinates+0x3a0>)
 8009f96:	000c      	movs	r4, r1
 8009f98:	185b      	adds	r3, r3, r1
 8009f9a:	19db      	adds	r3, r3, r7
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	2208      	movs	r2, #8
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	f002 fa0e 	bl	800c3c8 <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009fac:	4bc1      	ldr	r3, [pc, #772]	; (800a2b4 <my_lx6_get_coordinates+0x3a4>)
 8009fae:	191b      	adds	r3, r3, r4
 8009fb0:	19db      	adds	r3, r3, r7
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	2208      	movs	r2, #8
 8009fba:	2100      	movs	r1, #0
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	f002 fa03 	bl	800c3c8 <memset>
	char 		nmea_coordinates_log[52] ; // Nagłowek + 12 + ew. znak minus + '\0'
	char* 		nmea_gngsa_label = "GNGSA" ;
 8009fc2:	4bbd      	ldr	r3, [pc, #756]	; (800a2b8 <my_lx6_get_coordinates+0x3a8>)
 8009fc4:	22d8      	movs	r2, #216	; 0xd8
 8009fc6:	0092      	lsls	r2, r2, #2
 8009fc8:	18ba      	adds	r2, r7, r2
 8009fca:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009fcc:	4bbb      	ldr	r3, [pc, #748]	; (800a2bc <my_lx6_get_coordinates+0x3ac>)
 8009fce:	22d7      	movs	r2, #215	; 0xd7
 8009fd0:	0092      	lsls	r2, r2, #2
 8009fd2:	18ba      	adds	r2, r7, r2
 8009fd4:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 8009fd6:	4bba      	ldr	r3, [pc, #744]	; (800a2c0 <my_lx6_get_coordinates+0x3b0>)
 8009fd8:	22d6      	movs	r2, #214	; 0xd6
 8009fda:	0092      	lsls	r2, r2, #2
 8009fdc:	18ba      	adds	r2, r7, r2
 8009fde:	6013      	str	r3, [r2, #0]
	char* 		nmea_gsv_label = "GSV" ;
 8009fe0:	4bb8      	ldr	r3, [pc, #736]	; (800a2c4 <my_lx6_get_coordinates+0x3b4>)
 8009fe2:	22d5      	movs	r2, #213	; 0xd5
 8009fe4:	0092      	lsls	r2, r2, #2
 8009fe6:	18ba      	adds	r2, r7, r2
 8009fe8:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 8009fea:	4bb7      	ldr	r3, [pc, #732]	; (800a2c8 <my_lx6_get_coordinates+0x3b8>)
 8009fec:	18fb      	adds	r3, r7, r3
 8009fee:	2200      	movs	r2, #0
 8009ff0:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 8009ff2:	4bb6      	ldr	r3, [pc, #728]	; (800a2cc <my_lx6_get_coordinates+0x3bc>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8009ff8:	4bb5      	ldr	r3, [pc, #724]	; (800a2d0 <my_lx6_get_coordinates+0x3c0>)
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f7fc fbde 	bl	80067bc <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 800a000:	f7f9 f82a 	bl	8003058 <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a004:	e0ea      	b.n	800a1dc <my_lx6_get_coordinates+0x2cc>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 800a006:	23fa      	movs	r3, #250	; 0xfa
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4ca3      	ldr	r4, [pc, #652]	; (800a298 <my_lx6_get_coordinates+0x388>)
 800a00c:	1939      	adds	r1, r7, r4
 800a00e:	48b1      	ldr	r0, [pc, #708]	; (800a2d4 <my_lx6_get_coordinates+0x3c4>)
 800a010:	2201      	movs	r2, #1
 800a012:	f7fc ffe7 	bl	8006fe4 <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 800a016:	23fa      	movs	r3, #250	; 0xfa
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	1939      	adds	r1, r7, r4
 800a01c:	48ae      	ldr	r0, [pc, #696]	; (800a2d8 <my_lx6_get_coordinates+0x3c8>)
 800a01e:	2201      	movs	r2, #1
 800a020:	f7fc ff44 	bl	8006eac <HAL_UART_Transmit>
		if ( rxd_byte )
 800a024:	0020      	movs	r0, r4
 800a026:	193b      	adds	r3, r7, r4
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	4ca0      	ldr	r4, [pc, #640]	; (800a2ac <my_lx6_get_coordinates+0x39c>)
 800a02c:	193a      	adds	r2, r7, r4
 800a02e:	1939      	adds	r1, r7, r4
 800a030:	7809      	ldrb	r1, [r1, #0]
 800a032:	7011      	strb	r1, [r2, #0]
 800a034:	4da4      	ldr	r5, [pc, #656]	; (800a2c8 <my_lx6_get_coordinates+0x3b8>)
 800a036:	197a      	adds	r2, r7, r5
 800a038:	1979      	adds	r1, r7, r5
 800a03a:	7809      	ldrb	r1, [r1, #0]
 800a03c:	7011      	strb	r1, [r2, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d100      	bne.n	800a044 <my_lx6_get_coordinates+0x134>
 800a042:	e0cb      	b.n	800a1dc <my_lx6_get_coordinates+0x2cc>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 800a044:	235f      	movs	r3, #95	; 0x5f
 800a046:	18fa      	adds	r2, r7, r3
 800a048:	2696      	movs	r6, #150	; 0x96
 800a04a:	00b6      	lsls	r6, r6, #2
 800a04c:	19b9      	adds	r1, r7, r6
 800a04e:	183b      	adds	r3, r7, r0
 800a050:	0018      	movs	r0, r3
 800a052:	f000 fadf 	bl	800a614 <my_nmea_message>
 800a056:	0001      	movs	r1, r0
 800a058:	193b      	adds	r3, r7, r4
 800a05a:	193a      	adds	r2, r7, r4
 800a05c:	7812      	ldrb	r2, [r2, #0]
 800a05e:	701a      	strb	r2, [r3, #0]
 800a060:	197b      	adds	r3, r7, r5
 800a062:	197a      	adds	r2, r7, r5
 800a064:	7812      	ldrb	r2, [r2, #0]
 800a066:	701a      	strb	r2, [r3, #0]
 800a068:	2902      	cmp	r1, #2
 800a06a:	d000      	beq.n	800a06e <my_lx6_get_coordinates+0x15e>
 800a06c:	e0b6      	b.n	800a1dc <my_lx6_get_coordinates+0x2cc>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800a06e:	19bb      	adds	r3, r7, r6
 800a070:	0018      	movs	r0, r3
 800a072:	f000 fb8f 	bl	800a794 <is_my_nmea_checksum_ok>
 800a076:	0003      	movs	r3, r0
 800a078:	0019      	movs	r1, r3
 800a07a:	193b      	adds	r3, r7, r4
 800a07c:	193a      	adds	r2, r7, r4
 800a07e:	7812      	ldrb	r2, [r2, #0]
 800a080:	701a      	strb	r2, [r3, #0]
 800a082:	197b      	adds	r3, r7, r5
 800a084:	197a      	adds	r2, r7, r5
 800a086:	7812      	ldrb	r2, [r2, #0]
 800a088:	701a      	strb	r2, [r3, #0]
 800a08a:	2900      	cmp	r1, #0
 800a08c:	d100      	bne.n	800a090 <my_lx6_get_coordinates+0x180>
 800a08e:	e0a5      	b.n	800a1dc <my_lx6_get_coordinates+0x2cc>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800a090:	23d6      	movs	r3, #214	; 0xd6
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	18fb      	adds	r3, r7, r3
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	19bb      	adds	r3, r7, r6
 800a09a:	0011      	movs	r1, r2
 800a09c:	0018      	movs	r0, r3
 800a09e:	f002 f9c0 	bl	800c422 <strstr>
 800a0a2:	1e03      	subs	r3, r0, #0
 800a0a4:	d00d      	beq.n	800a0c2 <my_lx6_get_coordinates+0x1b2>
					{
						memcpy ( rmc_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby skorzystać z czasu jak najdokładniejszego, bo przed fix ten czas jest fake.
 800a0a6:	4b7f      	ldr	r3, [pc, #508]	; (800a2a4 <my_lx6_get_coordinates+0x394>)
 800a0a8:	21da      	movs	r1, #218	; 0xda
 800a0aa:	0089      	lsls	r1, r1, #2
 800a0ac:	185b      	adds	r3, r3, r1
 800a0ae:	19da      	adds	r2, r3, r7
 800a0b0:	4b7a      	ldr	r3, [pc, #488]	; (800a29c <my_lx6_get_coordinates+0x38c>)
 800a0b2:	185b      	adds	r3, r3, r1
 800a0b4:	19db      	adds	r3, r3, r7
 800a0b6:	0010      	movs	r0, r2
 800a0b8:	0019      	movs	r1, r3
 800a0ba:	23fa      	movs	r3, #250	; 0xfa
 800a0bc:	001a      	movs	r2, r3
 800a0be:	f002 fa68 	bl	800c592 <memcpy>
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MY_GNSS_MIN_TNS )
 800a0c2:	23d5      	movs	r3, #213	; 0xd5
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	18fb      	adds	r3, r7, r3
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	2496      	movs	r4, #150	; 0x96
 800a0cc:	00a4      	lsls	r4, r4, #2
 800a0ce:	193b      	adds	r3, r7, r4
 800a0d0:	0011      	movs	r1, r2
 800a0d2:	0018      	movs	r0, r3
 800a0d4:	f002 f9a5 	bl	800c422 <strstr>
 800a0d8:	1e03      	subs	r3, r0, #0
 800a0da:	d011      	beq.n	800a100 <my_lx6_get_coordinates+0x1f0>
 800a0dc:	4d73      	ldr	r5, [pc, #460]	; (800a2ac <my_lx6_get_coordinates+0x39c>)
 800a0de:	197b      	adds	r3, r7, r5
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d80c      	bhi.n	800a100 <my_lx6_get_coordinates+0x1f0>
					{
						if ( tim_seconds > MY_GNSS_MIN_TNS_TIME_THS )
 800a0e6:	4b79      	ldr	r3, [pc, #484]	; (800a2cc <my_lx6_get_coordinates+0x3bc>)
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	2b0a      	cmp	r3, #10
 800a0ec:	d900      	bls.n	800a0f0 <my_lx6_get_coordinates+0x1e0>
 800a0ee:	e081      	b.n	800a1f4 <my_lx6_get_coordinates+0x2e4>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800a0f0:	193b      	adds	r3, r7, r4
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f000 fd0c 	bl	800ab10 <my_nmea_get_gsv_tns>
 800a0f8:	0003      	movs	r3, r0
 800a0fa:	001a      	movs	r2, r3
 800a0fc:	197b      	adds	r3, r7, r5
 800a0fe:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 800a100:	23d8      	movs	r3, #216	; 0xd8
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	18fb      	adds	r3, r7, r3
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	2596      	movs	r5, #150	; 0x96
 800a10a:	00ad      	lsls	r5, r5, #2
 800a10c:	197b      	adds	r3, r7, r5
 800a10e:	0011      	movs	r1, r2
 800a110:	0018      	movs	r0, r3
 800a112:	f002 f986 	bl	800c422 <strstr>
 800a116:	1e03      	subs	r3, r0, #0
 800a118:	d015      	beq.n	800a146 <my_lx6_get_coordinates+0x236>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800a11a:	4b6b      	ldr	r3, [pc, #428]	; (800a2c8 <my_lx6_get_coordinates+0x3b8>)
 800a11c:	18fc      	adds	r4, r7, r3
 800a11e:	197b      	adds	r3, r7, r5
 800a120:	0018      	movs	r0, r3
 800a122:	f000 fae3 	bl	800a6ec <get_my_nmea_gngsa_fixed_mode_s>
 800a126:	0003      	movs	r3, r0
 800a128:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800a12a:	197b      	adds	r3, r7, r5
 800a12c:	0018      	movs	r0, r3
 800a12e:	f000 fae8 	bl	800a702 <get_my_nmea_gngsa_pdop_d>
 800a132:	0002      	movs	r2, r0
 800a134:	000b      	movs	r3, r1
 800a136:	21de      	movs	r1, #222	; 0xde
 800a138:	0089      	lsls	r1, r1, #2
 800a13a:	2008      	movs	r0, #8
 800a13c:	1809      	adds	r1, r1, r0
 800a13e:	19c9      	adds	r1, r1, r7
 800a140:	6809      	ldr	r1, [r1, #0]
 800a142:	600a      	str	r2, [r1, #0]
 800a144:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 800a146:	23d7      	movs	r3, #215	; 0xd7
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	18fb      	adds	r3, r7, r3
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	2596      	movs	r5, #150	; 0x96
 800a150:	00ad      	lsls	r5, r5, #2
 800a152:	197b      	adds	r3, r7, r5
 800a154:	0011      	movs	r1, r2
 800a156:	0018      	movs	r0, r3
 800a158:	f002 f963 	bl	800c422 <strstr>
 800a15c:	1e03      	subs	r3, r0, #0
 800a15e:	d03d      	beq.n	800a1dc <my_lx6_get_coordinates+0x2cc>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths && nmea_fixed_mode_s == NMEA_3D_FIX )
 800a160:	23de      	movs	r3, #222	; 0xde
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	2408      	movs	r4, #8
 800a166:	191b      	adds	r3, r3, r4
 800a168:	19db      	adds	r3, r3, r7
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	6838      	ldr	r0, [r7, #0]
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	f7f6 f98c 	bl	8000490 <__aeabi_dcmpge>
 800a178:	1e03      	subs	r3, r0, #0
 800a17a:	d021      	beq.n	800a1c0 <my_lx6_get_coordinates+0x2b0>
 800a17c:	4b52      	ldr	r3, [pc, #328]	; (800a2c8 <my_lx6_get_coordinates+0x3b8>)
 800a17e:	18fb      	adds	r3, r7, r3
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b33      	cmp	r3, #51	; 0x33
 800a184:	d11c      	bne.n	800a1c0 <my_lx6_get_coordinates+0x2b0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 800a186:	23df      	movs	r3, #223	; 0xdf
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	0026      	movs	r6, r4
 800a18c:	191b      	adds	r3, r3, r4
 800a18e:	19db      	adds	r3, r3, r7
 800a190:	681c      	ldr	r4, [r3, #0]
 800a192:	2344      	movs	r3, #68	; 0x44
 800a194:	18fa      	adds	r2, r7, r3
 800a196:	2350      	movs	r3, #80	; 0x50
 800a198:	18f9      	adds	r1, r7, r3
 800a19a:	1978      	adds	r0, r7, r5
 800a19c:	23e0      	movs	r3, #224	; 0xe0
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	199b      	adds	r3, r3, r6
 800a1a2:	19db      	adds	r3, r3, r7
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	0023      	movs	r3, r4
 800a1aa:	f000 fbaf 	bl	800a90c <get_my_nmea_gngll_coordinates>
							my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a1ae:	197b      	adds	r3, r7, r5
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	f000 f895 	bl	800a2e0 <my_rtc_set_dt_from_nmea_rmc>
							r = true ;
 800a1b6:	4b37      	ldr	r3, [pc, #220]	; (800a294 <my_lx6_get_coordinates+0x384>)
 800a1b8:	18fb      	adds	r3, r7, r3
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	701a      	strb	r2, [r3, #0]
							break ;
 800a1be:	e01a      	b.n	800a1f6 <my_lx6_get_coordinates+0x2e6>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 800a1c0:	4b37      	ldr	r3, [pc, #220]	; (800a2a0 <my_lx6_get_coordinates+0x390>)
 800a1c2:	21da      	movs	r1, #218	; 0xda
 800a1c4:	0089      	lsls	r1, r1, #2
 800a1c6:	185b      	adds	r3, r3, r1
 800a1c8:	19da      	adds	r2, r3, r7
 800a1ca:	4b34      	ldr	r3, [pc, #208]	; (800a29c <my_lx6_get_coordinates+0x38c>)
 800a1cc:	185b      	adds	r3, r3, r1
 800a1ce:	19db      	adds	r3, r3, r7
 800a1d0:	0010      	movs	r0, r2
 800a1d2:	0019      	movs	r1, r3
 800a1d4:	23fa      	movs	r3, #250	; 0xfa
 800a1d6:	001a      	movs	r2, r3
 800a1d8:	f002 f9db 	bl	800c592 <memcpy>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a1dc:	4b3b      	ldr	r3, [pc, #236]	; (800a2cc <my_lx6_get_coordinates+0x3bc>)
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	4a2b      	ldr	r2, [pc, #172]	; (800a290 <my_lx6_get_coordinates+0x380>)
 800a1e2:	21da      	movs	r1, #218	; 0xda
 800a1e4:	0089      	lsls	r1, r1, #2
 800a1e6:	1852      	adds	r2, r2, r1
 800a1e8:	19d2      	adds	r2, r2, r7
 800a1ea:	8812      	ldrh	r2, [r2, #0]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d900      	bls.n	800a1f2 <my_lx6_get_coordinates+0x2e2>
 800a1f0:	e709      	b.n	800a006 <my_lx6_get_coordinates+0xf6>
 800a1f2:	e000      	b.n	800a1f6 <my_lx6_get_coordinates+0x2e6>
							break ;
 800a1f4:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 800a1f6:	4b36      	ldr	r3, [pc, #216]	; (800a2d0 <my_lx6_get_coordinates+0x3c0>)
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f7fc fb3b 	bl	8006874 <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 800a1fe:	f7f8 ff43 	bl	8003088 <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 800a202:	4b2b      	ldr	r3, [pc, #172]	; (800a2b0 <my_lx6_get_coordinates+0x3a0>)
 800a204:	22da      	movs	r2, #218	; 0xda
 800a206:	0092      	lsls	r2, r2, #2
 800a208:	189b      	adds	r3, r3, r2
 800a20a:	19db      	adds	r3, r3, r7
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d125      	bne.n	800a25e <my_lx6_get_coordinates+0x34e>
 800a212:	4b23      	ldr	r3, [pc, #140]	; (800a2a0 <my_lx6_get_coordinates+0x390>)
 800a214:	189b      	adds	r3, r3, r2
 800a216:	19db      	adds	r3, r3, r7
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d01f      	beq.n	800a25e <my_lx6_get_coordinates+0x34e>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800a21e:	23df      	movs	r3, #223	; 0xdf
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	2508      	movs	r5, #8
 800a224:	195b      	adds	r3, r3, r5
 800a226:	19db      	adds	r3, r3, r7
 800a228:	681c      	ldr	r4, [r3, #0]
 800a22a:	2344      	movs	r3, #68	; 0x44
 800a22c:	18fa      	adds	r2, r7, r3
 800a22e:	2350      	movs	r3, #80	; 0x50
 800a230:	18f9      	adds	r1, r7, r3
 800a232:	23ae      	movs	r3, #174	; 0xae
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	18f8      	adds	r0, r7, r3
 800a238:	23e0      	movs	r3, #224	; 0xe0
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	195b      	adds	r3, r3, r5
 800a23e:	19db      	adds	r3, r3, r7
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	0023      	movs	r3, r4
 800a246:	f000 fb61 	bl	800a90c <get_my_nmea_gngll_coordinates>
		my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a24a:	2396      	movs	r3, #150	; 0x96
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	18fb      	adds	r3, r7, r3
 800a250:	0018      	movs	r0, r3
 800a252:	f000 f845 	bl	800a2e0 <my_rtc_set_dt_from_nmea_rmc>
		r = true ;
 800a256:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <my_lx6_get_coordinates+0x384>)
 800a258:	18fb      	adds	r3, r7, r3
 800a25a:	2201      	movs	r2, #1
 800a25c:	701a      	strb	r2, [r3, #0]
	}
	sprintf ( nmea_coordinates_log , "NMEA coordinates: %s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 800a25e:	2344      	movs	r3, #68	; 0x44
 800a260:	18fb      	adds	r3, r7, r3
 800a262:	2250      	movs	r2, #80	; 0x50
 800a264:	18ba      	adds	r2, r7, r2
 800a266:	491d      	ldr	r1, [pc, #116]	; (800a2dc <my_lx6_get_coordinates+0x3cc>)
 800a268:	2410      	movs	r4, #16
 800a26a:	1938      	adds	r0, r7, r4
 800a26c:	f002 f816 	bl	800c29c <sprintf>
	send_debug_logs ( nmea_coordinates_log ) ;
 800a270:	193b      	adds	r3, r7, r4
 800a272:	0018      	movs	r0, r3
 800a274:	f7f8 fdf4 	bl	8002e60 <send_debug_logs>
	return r ;
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <my_lx6_get_coordinates+0x384>)
 800a27a:	18fb      	adds	r3, r7, r3
 800a27c:	781b      	ldrb	r3, [r3, #0]
}
 800a27e:	0018      	movs	r0, r3
 800a280:	46bd      	mov	sp, r7
 800a282:	23db      	movs	r3, #219	; 0xdb
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	449d      	add	sp, r3
 800a288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a28a:	46c0      	nop			; (mov r8, r8)
 800a28c:	fffffc8c 	.word	0xfffffc8c
 800a290:	fffffca6 	.word	0xfffffca6
 800a294:	00000367 	.word	0x00000367
 800a298:	00000353 	.word	0x00000353
 800a29c:	fffffef0 	.word	0xfffffef0
 800a2a0:	fffffdf4 	.word	0xfffffdf4
 800a2a4:	fffffcf8 	.word	0xfffffcf8
 800a2a8:	fffffcf7 	.word	0xfffffcf7
 800a2ac:	00000366 	.word	0x00000366
 800a2b0:	fffffce8 	.word	0xfffffce8
 800a2b4:	fffffcdc 	.word	0xfffffcdc
 800a2b8:	080147d0 	.word	0x080147d0
 800a2bc:	080147d8 	.word	0x080147d8
 800a2c0:	080147e0 	.word	0x080147e0
 800a2c4:	080147e4 	.word	0x080147e4
 800a2c8:	00000365 	.word	0x00000365
 800a2cc:	20000a24 	.word	0x20000a24
 800a2d0:	2000078c 	.word	0x2000078c
 800a2d4:	20000900 	.word	0x20000900
 800a2d8:	2000086c 	.word	0x2000086c
 800a2dc:	080147e8 	.word	0x080147e8

0800a2e0 <my_rtc_set_dt_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800a2e0:	b5b0      	push	{r4, r5, r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800a2e8:	2508      	movs	r5, #8
 800a2ea:	197b      	adds	r3, r7, r5
 800a2ec:	1cda      	adds	r2, r3, #3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	0011      	movs	r1, r2
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f000 fc44 	bl	800ab80 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800a2f8:	197b      	adds	r3, r7, r5
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	0011      	movs	r1, r2
 800a300:	0018      	movs	r0, r3
 800a302:	f000 fc77 	bl	800abf4 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800a306:	197b      	adds	r3, r7, r5
 800a308:	1c9a      	adds	r2, r3, #2
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	0011      	movs	r1, r2
 800a30e:	0018      	movs	r0, r3
 800a310:	f000 fcaa 	bl	800ac68 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800a314:	240c      	movs	r4, #12
 800a316:	193a      	adds	r2, r7, r4
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	0011      	movs	r1, r2
 800a31c:	0018      	movs	r0, r3
 800a31e:	f000 fcdd 	bl	800acdc <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800a322:	193b      	adds	r3, r7, r4
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	0011      	movs	r1, r2
 800a32a:	0018      	movs	r0, r3
 800a32c:	f000 fd10 	bl	800ad50 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800a330:	193b      	adds	r3, r7, r4
 800a332:	1c9a      	adds	r2, r3, #2
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	0011      	movs	r1, r2
 800a338:	0018      	movs	r0, r3
 800a33a:	f000 fd43 	bl	800adc4 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800a33e:	193b      	adds	r3, r7, r4
 800a340:	1d1a      	adds	r2, r3, #4
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	0011      	movs	r1, r2
 800a346:	0018      	movs	r0, r3
 800a348:	f000 fd76 	bl	800ae38 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a34c:	193b      	adds	r3, r7, r4
 800a34e:	2200      	movs	r2, #0
 800a350:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a352:	193b      	adds	r3, r7, r4
 800a354:	2200      	movs	r2, #0
 800a356:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800a358:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a35a:	0018      	movs	r0, r3
 800a35c:	f7fb fa6b 	bl	8005836 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800a360:	1939      	adds	r1, r7, r4
 800a362:	4b09      	ldr	r3, [pc, #36]	; (800a388 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a364:	2200      	movs	r2, #0
 800a366:	0018      	movs	r0, r3
 800a368:	f7fa fe68 	bl	800503c <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800a36c:	1979      	adds	r1, r7, r5
 800a36e:	4b06      	ldr	r3, [pc, #24]	; (800a388 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a370:	2200      	movs	r2, #0
 800a372:	0018      	movs	r0, r3
 800a374:	f7fa ff66 	bl	8005244 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800a378:	4b03      	ldr	r3, [pc, #12]	; (800a388 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a37a:	0018      	movs	r0, r3
 800a37c:	f7fb fa8f 	bl	800589e <HAL_RTCEx_DisableBypassShadow>
}
 800a380:	46c0      	nop			; (mov r8, r8)
 800a382:	46bd      	mov	sp, r7
 800a384:	b008      	add	sp, #32
 800a386:	bdb0      	pop	{r4, r5, r7, pc}
 800a388:	200006fc 	.word	0x200006fc

0800a38c <my_rtc_get_dt>:
void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	4b07      	ldr	r3, [pc, #28]	; (800a3b8 <my_rtc_get_dt+0x2c>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	0018      	movs	r0, r3
 800a39e:	f7fa ffe3 	bl	8005368 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	4b04      	ldr	r3, [pc, #16]	; (800a3b8 <my_rtc_get_dt+0x2c>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f7fa feef 	bl	800518c <HAL_RTC_GetTime>
}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	b002      	add	sp, #8
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	46c0      	nop			; (mov r8, r8)
 800a3b8:	200006fc 	.word	0x200006fc

0800a3bc <my_rtc_get_time_s>:
uint16_t my_rtc_get_time_s ( char* dt_s )
{
 800a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3be:	b08d      	sub	sp, #52	; 0x34
 800a3c0:	af04      	add	r7, sp, #16
 800a3c2:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800a3c4:	2508      	movs	r5, #8
 800a3c6:	1979      	adds	r1, r7, r5
 800a3c8:	4b1b      	ldr	r3, [pc, #108]	; (800a438 <my_rtc_get_time_s+0x7c>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f7fa fedd 	bl	800518c <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800a3d2:	241c      	movs	r4, #28
 800a3d4:	1939      	adds	r1, r7, r4
 800a3d6:	4b18      	ldr	r3, [pc, #96]	; (800a438 <my_rtc_get_time_s+0x7c>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f7fa ffc4 	bl	8005368 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 800a3e0:	0021      	movs	r1, r4
 800a3e2:	187b      	adds	r3, r7, r1
 800a3e4:	78db      	ldrb	r3, [r3, #3]
 800a3e6:	22fa      	movs	r2, #250	; 0xfa
 800a3e8:	00d2      	lsls	r2, r2, #3
 800a3ea:	189a      	adds	r2, r3, r2
 800a3ec:	187b      	adds	r3, r7, r1
 800a3ee:	785b      	ldrb	r3, [r3, #1]
 800a3f0:	469c      	mov	ip, r3
 800a3f2:	187b      	adds	r3, r7, r1
 800a3f4:	789b      	ldrb	r3, [r3, #2]
 800a3f6:	001c      	movs	r4, r3
 800a3f8:	0028      	movs	r0, r5
 800a3fa:	183b      	adds	r3, r7, r0
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	001d      	movs	r5, r3
 800a400:	183b      	adds	r3, r7, r0
 800a402:	785b      	ldrb	r3, [r3, #1]
 800a404:	001e      	movs	r6, r3
 800a406:	183b      	adds	r3, r7, r0
 800a408:	789b      	ldrb	r3, [r3, #2]
 800a40a:	490c      	ldr	r1, [pc, #48]	; (800a43c <my_rtc_get_time_s+0x80>)
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	9303      	str	r3, [sp, #12]
 800a410:	9602      	str	r6, [sp, #8]
 800a412:	9501      	str	r5, [sp, #4]
 800a414:	9400      	str	r4, [sp, #0]
 800a416:	4663      	mov	r3, ip
 800a418:	f001 ff40 	bl	800c29c <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800a41c:	211c      	movs	r1, #28
 800a41e:	187b      	adds	r3, r7, r1
 800a420:	78db      	ldrb	r3, [r3, #3]
 800a422:	b29b      	uxth	r3, r3
 800a424:	22fa      	movs	r2, #250	; 0xfa
 800a426:	00d2      	lsls	r2, r2, #3
 800a428:	4694      	mov	ip, r2
 800a42a:	4463      	add	r3, ip
 800a42c:	b29b      	uxth	r3, r3
}
 800a42e:	0018      	movs	r0, r3
 800a430:	46bd      	mov	sp, r7
 800a432:	b009      	add	sp, #36	; 0x24
 800a434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a436:	46c0      	nop			; (mov r8, r8)
 800a438:	200006fc 	.word	0x200006fc
 800a43c:	08014800 	.word	0x08014800

0800a440 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2100      	movs	r1, #0
 800a44c:	0018      	movs	r0, r3
 800a44e:	f001 fd89 	bl	800bf64 <strtod>
 800a452:	0002      	movs	r2, r0
 800a454:	000b      	movs	r3, r1
 800a456:	60ba      	str	r2, [r7, #8]
 800a458:	60fb      	str	r3, [r7, #12]
    return d ;
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	68fb      	ldr	r3, [r7, #12]
}
 800a45e:	0010      	movs	r0, r2
 800a460:	0019      	movs	r1, r3
 800a462:	46bd      	mov	sp, r7
 800a464:	b004      	add	sp, #16
 800a466:	bd80      	pop	{r7, pc}

0800a468 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	0008      	movs	r0, r1
 800a472:	0011      	movs	r1, r2
 800a474:	1cfb      	adds	r3, r7, #3
 800a476:	1c02      	adds	r2, r0, #0
 800a478:	701a      	strb	r2, [r3, #0]
 800a47a:	1cbb      	adds	r3, r7, #2
 800a47c:	1c0a      	adds	r2, r1, #0
 800a47e:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800a480:	230f      	movs	r3, #15
 800a482:	18fb      	adds	r3, r7, r3
 800a484:	2200      	movs	r2, #0
 800a486:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800a488:	230e      	movs	r3, #14
 800a48a:	18fb      	adds	r3, r7, r3
 800a48c:	2200      	movs	r2, #0
 800a48e:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800a490:	e01c      	b.n	800a4cc <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800a492:	230f      	movs	r3, #15
 800a494:	18fb      	adds	r3, r7, r3
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	18d3      	adds	r3, r2, r3
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	1cfa      	adds	r2, r7, #3
 800a4a0:	7812      	ldrb	r2, [r2, #0]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d105      	bne.n	800a4b2 <my_find_char_position+0x4a>
			p++ ;
 800a4a6:	210e      	movs	r1, #14
 800a4a8:	187b      	adds	r3, r7, r1
 800a4aa:	781a      	ldrb	r2, [r3, #0]
 800a4ac:	187b      	adds	r3, r7, r1
 800a4ae:	3201      	adds	r2, #1
 800a4b0:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800a4b2:	230e      	movs	r3, #14
 800a4b4:	18fa      	adds	r2, r7, r3
 800a4b6:	1cbb      	adds	r3, r7, #2
 800a4b8:	7812      	ldrb	r2, [r2, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d00e      	beq.n	800a4de <my_find_char_position+0x76>
			break ;
		i++ ;
 800a4c0:	210f      	movs	r1, #15
 800a4c2:	187b      	adds	r3, r7, r1
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	187b      	adds	r3, r7, r1
 800a4c8:	3201      	adds	r2, #1
 800a4ca:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800a4cc:	230f      	movs	r3, #15
 800a4ce:	18fb      	adds	r3, r7, r3
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	18d3      	adds	r3, r2, r3
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1da      	bne.n	800a492 <my_find_char_position+0x2a>
 800a4dc:	e000      	b.n	800a4e0 <my_find_char_position+0x78>
			break ;
 800a4de:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800a4e0:	230f      	movs	r3, #15
 800a4e2:	18fb      	adds	r3, r7, r3
 800a4e4:	781b      	ldrb	r3, [r3, #0]
}
 800a4e6:	0018      	movs	r0, r3
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	b004      	add	sp, #16
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	78db      	ldrb	r3, [r3, #3]
 800a4fe:	22fa      	movs	r2, #250	; 0xfa
 800a500:	00d2      	lsls	r2, r2, #3
 800a502:	4694      	mov	ip, r2
 800a504:	4463      	add	r3, ip
 800a506:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	0013      	movs	r3, r2
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	189b      	adds	r3, r3, r2
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	189b      	adds	r3, r3, r2
 800a514:	009a      	lsls	r2, r3, #2
 800a516:	189a      	adds	r2, r3, r2
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	492c      	ldr	r1, [pc, #176]	; (800a5cc <my_conv_rtc2timestamp+0xdc>)
 800a51c:	468c      	mov	ip, r1
 800a51e:	4463      	add	r3, ip
 800a520:	089b      	lsrs	r3, r3, #2
 800a522:	18d3      	adds	r3, r2, r3
 800a524:	4a2a      	ldr	r2, [pc, #168]	; (800a5d0 <my_conv_rtc2timestamp+0xe0>)
 800a526:	4694      	mov	ip, r2
 800a528:	4463      	add	r3, ip
 800a52a:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a52c:	2300      	movs	r3, #0
 800a52e:	613b      	str	r3, [r7, #16]
 800a530:	e00a      	b.n	800a548 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800a532:	4a28      	ldr	r2, [pc, #160]	; (800a5d4 <my_conv_rtc2timestamp+0xe4>)
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	18d3      	adds	r3, r2, r3
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	001a      	movs	r2, r3
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	189b      	adds	r3, r3, r2
 800a540:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	3301      	adds	r3, #1
 800a546:	613b      	str	r3, [r7, #16]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	785b      	ldrb	r3, [r3, #1]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	429a      	cmp	r2, r3
 800a552:	dbee      	blt.n	800a532 <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d908      	bls.n	800a56e <my_conv_rtc2timestamp+0x7e>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	0018      	movs	r0, r3
 800a560:	f000 f83a 	bl	800a5d8 <my_conv_is_leap_year>
 800a564:	1e03      	subs	r3, r0, #0
 800a566:	d002      	beq.n	800a56e <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	3301      	adds	r3, #1
 800a56c:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	789b      	ldrb	r3, [r3, #2]
 800a572:	001a      	movs	r2, r3
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	18d3      	adds	r3, r2, r3
 800a578:	3b01      	subs	r3, #1
 800a57a:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	0013      	movs	r3, r2
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	189b      	adds	r3, r3, r2
 800a584:	011a      	lsls	r2, r3, #4
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	0113      	lsls	r3, r2, #4
 800a58a:	1a9b      	subs	r3, r3, r2
 800a58c:	01db      	lsls	r3, r3, #7
 800a58e:	0019      	movs	r1, r3
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	001a      	movs	r2, r3
 800a596:	0013      	movs	r3, r2
 800a598:	011b      	lsls	r3, r3, #4
 800a59a:	1a9b      	subs	r3, r3, r2
 800a59c:	011a      	lsls	r2, r3, #4
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	0113      	lsls	r3, r2, #4
 800a5a2:	001a      	movs	r2, r3
 800a5a4:	0013      	movs	r3, r2
 800a5a6:	18ca      	adds	r2, r1, r3
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	785b      	ldrb	r3, [r3, #1]
 800a5ac:	0019      	movs	r1, r3
 800a5ae:	000b      	movs	r3, r1
 800a5b0:	011b      	lsls	r3, r3, #4
 800a5b2:	1a5b      	subs	r3, r3, r1
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	18d3      	adds	r3, r2, r3
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	7892      	ldrb	r2, [r2, #2]
 800a5bc:	189b      	adds	r3, r3, r2
 800a5be:	60bb      	str	r3, [r7, #8]

    return ts ;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
}
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	b006      	add	sp, #24
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	fffff84f 	.word	0xfffff84f
 800a5d0:	fff50736 	.word	0xfff50736
 800a5d4:	0801490c 	.word	0x0801490c

0800a5d8 <my_conv_is_leap_year>:
	t->Seconds = seconds ;
}

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2203      	movs	r2, #3
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	d106      	bne.n	800a5f6 <my_conv_is_leap_year+0x1e>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2164      	movs	r1, #100	; 0x64
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	f7f5 ff15 	bl	800041c <__aeabi_idivmod>
 800a5f2:	1e0b      	subs	r3, r1, #0
 800a5f4:	d107      	bne.n	800a606 <my_conv_is_leap_year+0x2e>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	22c8      	movs	r2, #200	; 0xc8
 800a5fa:	0051      	lsls	r1, r2, #1
 800a5fc:	0018      	movs	r0, r3
 800a5fe:	f7f5 ff0d 	bl	800041c <__aeabi_idivmod>
 800a602:	1e0b      	subs	r3, r1, #0
 800a604:	d101      	bne.n	800a60a <my_conv_is_leap_year+0x32>
 800a606:	2301      	movs	r3, #1
 800a608:	e000      	b.n	800a60c <my_conv_is_leap_year+0x34>
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	0018      	movs	r0, r3
 800a60e:	46bd      	mov	sp, r7
 800a610:	b002      	add	sp, #8
 800a612:	bd80      	pop	{r7, pc}

0800a614 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b24      	cmp	r3, #36	; 0x24
 800a626:	d117      	bne.n	800a658 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	b2d1      	uxtb	r1, r2
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	7011      	strb	r1, [r2, #0]
 800a63a:	001a      	movs	r2, r3
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	189b      	adds	r3, r3, r2
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	7812      	ldrb	r2, [r2, #0]
 800a644:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	001a      	movs	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	189b      	adds	r3, r3, r2
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800a654:	2300      	movs	r3, #0
 800a656:	e045      	b.n	800a6e4 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	2b1f      	cmp	r3, #31
 800a65e:	d907      	bls.n	800a670 <my_nmea_message+0x5c>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	2b7e      	cmp	r3, #126	; 0x7e
 800a666:	d803      	bhi.n	800a670 <my_nmea_message+0x5c>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d103      	bne.n	800a678 <my_nmea_message+0x64>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b0d      	cmp	r3, #13
 800a676:	d114      	bne.n	800a6a2 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	b2d1      	uxtb	r1, r2
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	7011      	strb	r1, [r2, #0]
 800a684:	001a      	movs	r2, r3
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	189b      	adds	r3, r3, r2
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	7812      	ldrb	r2, [r2, #0]
 800a68e:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	001a      	movs	r2, r3
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	189b      	adds	r3, r3, r2
 800a69a:	2200      	movs	r2, #0
 800a69c:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e020      	b.n	800a6e4 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	2b0a      	cmp	r3, #10
 800a6a8:	d11a      	bne.n	800a6e0 <my_nmea_message+0xcc>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d916      	bls.n	800a6e0 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	701a      	strb	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	001a      	movs	r2, r3
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	189b      	adds	r3, r3, r2
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	2b0d      	cmp	r3, #13
 800a6cc:	d108      	bne.n	800a6e0 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	001a      	movs	r2, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	189b      	adds	r3, r3, r2
 800a6d8:	2200      	movs	r2, #0
 800a6da:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800a6dc:	2302      	movs	r3, #2
 800a6de:	e001      	b.n	800a6e4 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	425b      	negs	r3, r3
}
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	b004      	add	sp, #16
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3309      	adds	r3, #9
 800a6f8:	781b      	ldrb	r3, [r3, #0]
}
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	b002      	add	sp, #8
 800a700:	bd80      	pop	{r7, pc}

0800a702 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800a702:	b5b0      	push	{r4, r5, r7, lr}
 800a704:	b086      	sub	sp, #24
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	220f      	movs	r2, #15
 800a70e:	212c      	movs	r1, #44	; 0x2c
 800a710:	0018      	movs	r0, r3
 800a712:	f7ff fea9 	bl	800a468 <my_find_char_position>
 800a716:	0003      	movs	r3, r0
 800a718:	001a      	movs	r2, r3
 800a71a:	2517      	movs	r5, #23
 800a71c:	197b      	adds	r3, r7, r5
 800a71e:	3201      	adds	r2, #1
 800a720:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2210      	movs	r2, #16
 800a726:	212c      	movs	r1, #44	; 0x2c
 800a728:	0018      	movs	r0, r3
 800a72a:	f7ff fe9d 	bl	800a468 <my_find_char_position>
 800a72e:	0003      	movs	r3, r0
 800a730:	0019      	movs	r1, r3
 800a732:	2416      	movs	r4, #22
 800a734:	193b      	adds	r3, r7, r4
 800a736:	197a      	adds	r2, r7, r5
 800a738:	7812      	ldrb	r2, [r2, #0]
 800a73a:	1a8a      	subs	r2, r1, r2
 800a73c:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800a73e:	193b      	adds	r3, r7, r4
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	3301      	adds	r3, #1
 800a744:	0018      	movs	r0, r3
 800a746:	f000 fbab 	bl	800aea0 <malloc>
 800a74a:	0003      	movs	r3, r0
 800a74c:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800a74e:	197b      	adds	r3, r7, r5
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	18d1      	adds	r1, r2, r3
 800a756:	193b      	adds	r3, r7, r4
 800a758:	781a      	ldrb	r2, [r3, #0]
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	0018      	movs	r0, r3
 800a75e:	f001 fe4c 	bl	800c3fa <strncpy>
	pdop_s[pdop_length] = '\0';
 800a762:	193b      	adds	r3, r7, r4
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	18d3      	adds	r3, r2, r3
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	0018      	movs	r0, r3
 800a772:	f7ff fe65 	bl	800a440 <my_string2double_conv>
 800a776:	0002      	movs	r2, r0
 800a778:	000b      	movs	r3, r1
 800a77a:	60ba      	str	r2, [r7, #8]
 800a77c:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	0018      	movs	r0, r3
 800a782:	f000 fb97 	bl	800aeb4 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	68fb      	ldr	r3, [r7, #12]
}
 800a78a:	0010      	movs	r0, r2
 800a78c:	0019      	movs	r1, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	b006      	add	sp, #24
 800a792:	bdb0      	pop	{r4, r5, r7, pc}

0800a794 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a794:	b590      	push	{r4, r7, lr}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a79c:	230f      	movs	r3, #15
 800a79e:	18fb      	adds	r3, r7, r3
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a7a4:	230e      	movs	r3, #14
 800a7a6:	18fb      	adds	r3, r7, r3
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a7ac:	e00f      	b.n	800a7ce <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a7ae:	220e      	movs	r2, #14
 800a7b0:	18bb      	adds	r3, r7, r2
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	18ba      	adds	r2, r7, r2
 800a7b6:	1c59      	adds	r1, r3, #1
 800a7b8:	7011      	strb	r1, [r2, #0]
 800a7ba:	001a      	movs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	189b      	adds	r3, r3, r2
 800a7c0:	7819      	ldrb	r1, [r3, #0]
 800a7c2:	220f      	movs	r2, #15
 800a7c4:	18bb      	adds	r3, r7, r2
 800a7c6:	18ba      	adds	r2, r7, r2
 800a7c8:	7812      	ldrb	r2, [r2, #0]
 800a7ca:	404a      	eors	r2, r1
 800a7cc:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a7ce:	210e      	movs	r1, #14
 800a7d0:	187b      	adds	r3, r7, r1
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	18d3      	adds	r3, r2, r3
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b2a      	cmp	r3, #42	; 0x2a
 800a7dc:	d00a      	beq.n	800a7f4 <is_my_nmea_checksum_ok+0x60>
 800a7de:	187b      	adds	r3, r7, r1
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	18d3      	adds	r3, r2, r3
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <is_my_nmea_checksum_ok+0x60>
 800a7ec:	187b      	adds	r3, r7, r1
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1dc      	bne.n	800a7ae <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a7f4:	230f      	movs	r3, #15
 800a7f6:	18fb      	adds	r3, r7, r3
 800a7f8:	781c      	ldrb	r4, [r3, #0]
 800a7fa:	210e      	movs	r1, #14
 800a7fc:	187b      	adds	r3, r7, r1
 800a7fe:	187a      	adds	r2, r7, r1
 800a800:	7812      	ldrb	r2, [r2, #0]
 800a802:	3201      	adds	r2, #1
 800a804:	701a      	strb	r2, [r3, #0]
 800a806:	187b      	adds	r3, r7, r1
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	18d3      	adds	r3, r2, r3
 800a80e:	2210      	movs	r2, #16
 800a810:	2100      	movs	r1, #0
 800a812:	0018      	movs	r0, r3
 800a814:	f001 fc3e 	bl	800c094 <strtol>
 800a818:	0003      	movs	r3, r0
 800a81a:	1ae3      	subs	r3, r4, r3
 800a81c:	425a      	negs	r2, r3
 800a81e:	4153      	adcs	r3, r2
 800a820:	b2db      	uxtb	r3, r3
}
 800a822:	0018      	movs	r0, r3
 800a824:	46bd      	mov	sp, r7
 800a826:	b005      	add	sp, #20
 800a828:	bd90      	pop	{r4, r7, pc}
	...

0800a82c <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a82c:	b5b0      	push	{r4, r5, r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	000a      	movs	r2, r1
 800a836:	1cfb      	adds	r3, r7, #3
 800a838:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a83a:	2308      	movs	r3, #8
 800a83c:	18fa      	adds	r2, r7, r3
 800a83e:	492f      	ldr	r1, [pc, #188]	; (800a8fc <nmea2decimal+0xd0>)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	0018      	movs	r0, r3
 800a844:	f001 fd4a 	bl	800c2dc <sscanf>
    min = deg / 100 ;
 800a848:	68b8      	ldr	r0, [r7, #8]
 800a84a:	68f9      	ldr	r1, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	4b2c      	ldr	r3, [pc, #176]	; (800a900 <nmea2decimal+0xd4>)
 800a850:	f7f6 fb12 	bl	8000e78 <__aeabi_ddiv>
 800a854:	0002      	movs	r2, r0
 800a856:	000b      	movs	r3, r1
 800a858:	613a      	str	r2, [r7, #16]
 800a85a:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a85c:	6938      	ldr	r0, [r7, #16]
 800a85e:	6979      	ldr	r1, [r7, #20]
 800a860:	f7f7 fd66 	bl	8002330 <__aeabi_d2iz>
 800a864:	0003      	movs	r3, r0
 800a866:	0018      	movs	r0, r3
 800a868:	f7f7 fd98 	bl	800239c <__aeabi_i2d>
 800a86c:	0002      	movs	r2, r0
 800a86e:	000b      	movs	r3, r1
 800a870:	60ba      	str	r2, [r7, #8]
 800a872:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a874:	68ba      	ldr	r2, [r7, #8]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6938      	ldr	r0, [r7, #16]
 800a87a:	6979      	ldr	r1, [r7, #20]
 800a87c:	f7f7 f9b8 	bl	8001bf0 <__aeabi_dsub>
 800a880:	0002      	movs	r2, r0
 800a882:	000b      	movs	r3, r1
 800a884:	0010      	movs	r0, r2
 800a886:	0019      	movs	r1, r3
 800a888:	2200      	movs	r2, #0
 800a88a:	4b1e      	ldr	r3, [pc, #120]	; (800a904 <nmea2decimal+0xd8>)
 800a88c:	f7f6 feee 	bl	800166c <__aeabi_dmul>
 800a890:	0002      	movs	r2, r0
 800a892:	000b      	movs	r3, r1
 800a894:	613a      	str	r2, [r7, #16]
 800a896:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a898:	2200      	movs	r2, #0
 800a89a:	4b1b      	ldr	r3, [pc, #108]	; (800a908 <nmea2decimal+0xdc>)
 800a89c:	6938      	ldr	r0, [r7, #16]
 800a89e:	6979      	ldr	r1, [r7, #20]
 800a8a0:	f7f6 faea 	bl	8000e78 <__aeabi_ddiv>
 800a8a4:	0002      	movs	r2, r0
 800a8a6:	000b      	movs	r3, r1
 800a8a8:	613a      	str	r2, [r7, #16]
 800a8aa:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a8ac:	1cfb      	adds	r3, r7, #3
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b53      	cmp	r3, #83	; 0x53
 800a8b2:	d003      	beq.n	800a8bc <nmea2decimal+0x90>
 800a8b4:	1cfb      	adds	r3, r7, #3
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b57      	cmp	r3, #87	; 0x57
 800a8ba:	d10e      	bne.n	800a8da <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a8bc:	68b8      	ldr	r0, [r7, #8]
 800a8be:	68f9      	ldr	r1, [r7, #12]
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f7f5 ff78 	bl	80007b8 <__aeabi_dadd>
 800a8c8:	0002      	movs	r2, r0
 800a8ca:	000b      	movs	r3, r1
 800a8cc:	0011      	movs	r1, r2
 800a8ce:	000c      	movs	r4, r1
 800a8d0:	2180      	movs	r1, #128	; 0x80
 800a8d2:	0609      	lsls	r1, r1, #24
 800a8d4:	4059      	eors	r1, r3
 800a8d6:	000d      	movs	r5, r1
 800a8d8:	e009      	b.n	800a8ee <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a8da:	68b8      	ldr	r0, [r7, #8]
 800a8dc:	68f9      	ldr	r1, [r7, #12]
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f7f5 ff69 	bl	80007b8 <__aeabi_dadd>
 800a8e6:	0002      	movs	r2, r0
 800a8e8:	000b      	movs	r3, r1
 800a8ea:	0014      	movs	r4, r2
 800a8ec:	001d      	movs	r5, r3
}
 800a8ee:	0022      	movs	r2, r4
 800a8f0:	002b      	movs	r3, r5
 800a8f2:	0010      	movs	r0, r2
 800a8f4:	0019      	movs	r1, r3
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	b006      	add	sp, #24
 800a8fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a8fc:	08014820 	.word	0x08014820
 800a900:	40590000 	.word	0x40590000
 800a904:	40240000 	.word	0x40240000
 800a908:	40180000 	.word	0x40180000

0800a90c <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 800a90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a90e:	b091      	sub	sp, #68	; 0x44
 800a910:	af02      	add	r7, sp, #8
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2201      	movs	r2, #1
 800a91e:	212c      	movs	r1, #44	; 0x2c
 800a920:	0018      	movs	r0, r3
 800a922:	f7ff fda1 	bl	800a468 <my_find_char_position>
 800a926:	0003      	movs	r3, r0
 800a928:	001a      	movs	r2, r3
 800a92a:	2537      	movs	r5, #55	; 0x37
 800a92c:	197b      	adds	r3, r7, r5
 800a92e:	3201      	adds	r2, #1
 800a930:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2202      	movs	r2, #2
 800a936:	212c      	movs	r1, #44	; 0x2c
 800a938:	0018      	movs	r0, r3
 800a93a:	f7ff fd95 	bl	800a468 <my_find_char_position>
 800a93e:	0003      	movs	r3, r0
 800a940:	0019      	movs	r1, r3
 800a942:	2436      	movs	r4, #54	; 0x36
 800a944:	193b      	adds	r3, r7, r4
 800a946:	197a      	adds	r2, r7, r5
 800a948:	7812      	ldrb	r2, [r2, #0]
 800a94a:	1a8a      	subs	r2, r1, r2
 800a94c:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a94e:	193b      	adds	r3, r7, r4
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	0018      	movs	r0, r3
 800a956:	f000 faa3 	bl	800aea0 <malloc>
 800a95a:	0003      	movs	r3, r0
 800a95c:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a95e:	197b      	adds	r3, r7, r5
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	18d1      	adds	r1, r2, r3
 800a966:	193b      	adds	r3, r7, r4
 800a968:	781a      	ldrb	r2, [r3, #0]
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	0018      	movs	r0, r3
 800a96e:	f001 fd44 	bl	800c3fa <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a972:	193b      	adds	r3, r7, r4
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a978:	18d3      	adds	r3, r2, r3
 800a97a:	2200      	movs	r2, #0
 800a97c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a97e:	197b      	adds	r3, r7, r5
 800a980:	781a      	ldrb	r2, [r3, #0]
 800a982:	193b      	adds	r3, r7, r4
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	18d3      	adds	r3, r2, r3
 800a988:	3301      	adds	r3, #1
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	18d2      	adds	r2, r2, r3
 800a98e:	262f      	movs	r6, #47	; 0x2f
 800a990:	19bb      	adds	r3, r7, r6
 800a992:	7812      	ldrb	r2, [r2, #0]
 800a994:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a996:	19bb      	adds	r3, r7, r6
 800a998:	781a      	ldrb	r2, [r3, #0]
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	0011      	movs	r1, r2
 800a99e:	0018      	movs	r0, r3
 800a9a0:	f7ff ff44 	bl	800a82c <nmea2decimal>
 800a9a4:	0002      	movs	r2, r0
 800a9a6:	000b      	movs	r3, r1
 800a9a8:	623a      	str	r2, [r7, #32]
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	0018      	movs	r0, r3
 800a9b0:	f000 fa80 	bl	800aeb4 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	4b53      	ldr	r3, [pc, #332]	; (800ab04 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a9b8:	6a38      	ldr	r0, [r7, #32]
 800a9ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9bc:	f7f6 fe56 	bl	800166c <__aeabi_dmul>
 800a9c0:	0002      	movs	r2, r0
 800a9c2:	000b      	movs	r3, r1
 800a9c4:	0010      	movs	r0, r2
 800a9c6:	0019      	movs	r1, r3
 800a9c8:	f008 fa34 	bl	8012e34 <round>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4b4d      	ldr	r3, [pc, #308]	; (800ab04 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a9d0:	f7f6 fa52 	bl	8000e78 <__aeabi_ddiv>
 800a9d4:	0002      	movs	r2, r0
 800a9d6:	000b      	movs	r3, r1
 800a9d8:	623a      	str	r2, [r7, #32]
 800a9da:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 800a9dc:	494a      	ldr	r1, [pc, #296]	; (800ab08 <get_my_nmea_gngll_coordinates+0x1fc>)
 800a9de:	68b8      	ldr	r0, [r7, #8]
 800a9e0:	6a3a      	ldr	r2, [r7, #32]
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	9200      	str	r2, [sp, #0]
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	000a      	movs	r2, r1
 800a9ea:	210c      	movs	r1, #12
 800a9ec:	f001 fc22 	bl	800c234 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4b46      	ldr	r3, [pc, #280]	; (800ab0c <get_my_nmea_gngll_coordinates+0x200>)
 800a9f4:	6a38      	ldr	r0, [r7, #32]
 800a9f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9f8:	f7f6 fe38 	bl	800166c <__aeabi_dmul>
 800a9fc:	0002      	movs	r2, r0
 800a9fe:	000b      	movs	r3, r1
 800aa00:	0010      	movs	r0, r2
 800aa02:	0019      	movs	r1, r3
 800aa04:	f7f7 fc94 	bl	8002330 <__aeabi_d2iz>
 800aa08:	0002      	movs	r2, r0
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2203      	movs	r2, #3
 800aa12:	212c      	movs	r1, #44	; 0x2c
 800aa14:	0018      	movs	r0, r3
 800aa16:	f7ff fd27 	bl	800a468 <my_find_char_position>
 800aa1a:	0003      	movs	r3, r0
 800aa1c:	001a      	movs	r2, r3
 800aa1e:	197b      	adds	r3, r7, r5
 800aa20:	3201      	adds	r2, #1
 800aa22:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2204      	movs	r2, #4
 800aa28:	212c      	movs	r1, #44	; 0x2c
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	f7ff fd1c 	bl	800a468 <my_find_char_position>
 800aa30:	0003      	movs	r3, r0
 800aa32:	0019      	movs	r1, r3
 800aa34:	193b      	adds	r3, r7, r4
 800aa36:	197a      	adds	r2, r7, r5
 800aa38:	7812      	ldrb	r2, [r2, #0]
 800aa3a:	1a8a      	subs	r2, r1, r2
 800aa3c:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800aa3e:	193b      	adds	r3, r7, r4
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	3301      	adds	r3, #1
 800aa44:	0018      	movs	r0, r3
 800aa46:	f000 fa2b 	bl	800aea0 <malloc>
 800aa4a:	0003      	movs	r3, r0
 800aa4c:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800aa4e:	197b      	adds	r3, r7, r5
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	18d1      	adds	r1, r2, r3
 800aa56:	193b      	adds	r3, r7, r4
 800aa58:	781a      	ldrb	r2, [r3, #0]
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f001 fccc 	bl	800c3fa <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800aa62:	193b      	adds	r3, r7, r4
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	69fa      	ldr	r2, [r7, #28]
 800aa68:	18d3      	adds	r3, r2, r3
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800aa6e:	197b      	adds	r3, r7, r5
 800aa70:	781a      	ldrb	r2, [r3, #0]
 800aa72:	193b      	adds	r3, r7, r4
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	18d3      	adds	r3, r2, r3
 800aa78:	3301      	adds	r3, #1
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	18d2      	adds	r2, r2, r3
 800aa7e:	19bb      	adds	r3, r7, r6
 800aa80:	7812      	ldrb	r2, [r2, #0]
 800aa82:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800aa84:	19bb      	adds	r3, r7, r6
 800aa86:	781a      	ldrb	r2, [r3, #0]
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	0011      	movs	r1, r2
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	f7ff fecd 	bl	800a82c <nmea2decimal>
 800aa92:	0002      	movs	r2, r0
 800aa94:	000b      	movs	r3, r1
 800aa96:	613a      	str	r2, [r7, #16]
 800aa98:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	0018      	movs	r0, r3
 800aa9e:	f000 fa09 	bl	800aeb4 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4b17      	ldr	r3, [pc, #92]	; (800ab04 <get_my_nmea_gngll_coordinates+0x1f8>)
 800aaa6:	6938      	ldr	r0, [r7, #16]
 800aaa8:	6979      	ldr	r1, [r7, #20]
 800aaaa:	f7f6 fddf 	bl	800166c <__aeabi_dmul>
 800aaae:	0002      	movs	r2, r0
 800aab0:	000b      	movs	r3, r1
 800aab2:	0010      	movs	r0, r2
 800aab4:	0019      	movs	r1, r3
 800aab6:	f008 f9bd 	bl	8012e34 <round>
 800aaba:	2200      	movs	r2, #0
 800aabc:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <get_my_nmea_gngll_coordinates+0x1f8>)
 800aabe:	f7f6 f9db 	bl	8000e78 <__aeabi_ddiv>
 800aac2:	0002      	movs	r2, r0
 800aac4:	000b      	movs	r3, r1
 800aac6:	613a      	str	r2, [r7, #16]
 800aac8:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 800aaca:	490f      	ldr	r1, [pc, #60]	; (800ab08 <get_my_nmea_gngll_coordinates+0x1fc>)
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	9200      	str	r2, [sp, #0]
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	000a      	movs	r2, r1
 800aad8:	210c      	movs	r1, #12
 800aada:	f001 fbab 	bl	800c234 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800aade:	2200      	movs	r2, #0
 800aae0:	4b0a      	ldr	r3, [pc, #40]	; (800ab0c <get_my_nmea_gngll_coordinates+0x200>)
 800aae2:	6938      	ldr	r0, [r7, #16]
 800aae4:	6979      	ldr	r1, [r7, #20]
 800aae6:	f7f6 fdc1 	bl	800166c <__aeabi_dmul>
 800aaea:	0002      	movs	r2, r0
 800aaec:	000b      	movs	r3, r1
 800aaee:	0010      	movs	r0, r2
 800aaf0:	0019      	movs	r1, r3
 800aaf2:	f7f7 fc1d 	bl	8002330 <__aeabi_d2iz>
 800aaf6:	0002      	movs	r2, r0
 800aaf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aafa:	601a      	str	r2, [r3, #0]
}
 800aafc:	46c0      	nop			; (mov r8, r8)
 800aafe:	46bd      	mov	sp, r7
 800ab00:	b00f      	add	sp, #60	; 0x3c
 800ab02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab04:	412e8480 	.word	0x412e8480
 800ab08:	08014824 	.word	0x08014824
 800ab0c:	416312d0 	.word	0x416312d0

0800ab10 <my_nmea_get_gsv_tns>:
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800ab10:	b5b0      	push	{r4, r5, r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800ab18:	240e      	movs	r4, #14
 800ab1a:	193b      	adds	r3, r7, r4
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2203      	movs	r2, #3
 800ab24:	212c      	movs	r1, #44	; 0x2c
 800ab26:	0018      	movs	r0, r3
 800ab28:	f7ff fc9e 	bl	800a468 <my_find_char_position>
 800ab2c:	0003      	movs	r3, r0
 800ab2e:	001a      	movs	r2, r3
 800ab30:	2517      	movs	r5, #23
 800ab32:	197b      	adds	r3, r7, r5
 800ab34:	3201      	adds	r2, #1
 800ab36:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ab38:	2003      	movs	r0, #3
 800ab3a:	f000 f9b1 	bl	800aea0 <malloc>
 800ab3e:	0003      	movs	r3, r0
 800ab40:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ab42:	197b      	adds	r3, r7, r5
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	18d1      	adds	r1, r2, r3
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	0018      	movs	r0, r3
 800ab50:	f001 fc53 	bl	800c3fa <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	3302      	adds	r3, #2
 800ab58:	2200      	movs	r2, #0
 800ab5a:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800ab5c:	193a      	adds	r2, r7, r4
 800ab5e:	4907      	ldr	r1, [pc, #28]	; (800ab7c <my_nmea_get_gsv_tns+0x6c>)
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	0018      	movs	r0, r3
 800ab64:	f001 fbba 	bl	800c2dc <sscanf>
	free ( s ) ;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	f000 f9a2 	bl	800aeb4 <free>
	return tns ;
 800ab70:	193b      	adds	r3, r7, r4
 800ab72:	881b      	ldrh	r3, [r3, #0]
}
 800ab74:	0018      	movs	r0, r3
 800ab76:	46bd      	mov	sp, r7
 800ab78:	b006      	add	sp, #24
 800ab7a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab7c:	0801482c 	.word	0x0801482c

0800ab80 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800ab80:	b590      	push	{r4, r7, lr}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2209      	movs	r2, #9
 800ab8e:	212c      	movs	r1, #44	; 0x2c
 800ab90:	0018      	movs	r0, r3
 800ab92:	f7ff fc69 	bl	800a468 <my_find_char_position>
 800ab96:	0003      	movs	r3, r0
 800ab98:	001a      	movs	r2, r3
 800ab9a:	2417      	movs	r4, #23
 800ab9c:	193b      	adds	r3, r7, r4
 800ab9e:	3205      	adds	r2, #5
 800aba0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800aba2:	2003      	movs	r0, #3
 800aba4:	f000 f97c 	bl	800aea0 <malloc>
 800aba8:	0003      	movs	r3, r0
 800abaa:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800abac:	193b      	adds	r3, r7, r4
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	18d1      	adds	r1, r2, r3
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	2202      	movs	r2, #2
 800abb8:	0018      	movs	r0, r3
 800abba:	f001 fc1e 	bl	800c3fa <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	3302      	adds	r3, #2
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800abc6:	240e      	movs	r4, #14
 800abc8:	193a      	adds	r2, r7, r4
 800abca:	4909      	ldr	r1, [pc, #36]	; (800abf0 <my_nmea_get_rmc_date_yy+0x70>)
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	0018      	movs	r0, r3
 800abd0:	f001 fb84 	bl	800c2dc <sscanf>
	free ( s ) ;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	0018      	movs	r0, r3
 800abd8:	f000 f96c 	bl	800aeb4 <free>
	*yy = (uint8_t) temp ;
 800abdc:	193b      	adds	r3, r7, r4
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	701a      	strb	r2, [r3, #0]

}
 800abe6:	46c0      	nop			; (mov r8, r8)
 800abe8:	46bd      	mov	sp, r7
 800abea:	b007      	add	sp, #28
 800abec:	bd90      	pop	{r4, r7, pc}
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	0801482c 	.word	0x0801482c

0800abf4 <my_nmea_get_rmc_date_mm>:
void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800abf4:	b590      	push	{r4, r7, lr}
 800abf6:	b087      	sub	sp, #28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2209      	movs	r2, #9
 800ac02:	212c      	movs	r1, #44	; 0x2c
 800ac04:	0018      	movs	r0, r3
 800ac06:	f7ff fc2f 	bl	800a468 <my_find_char_position>
 800ac0a:	0003      	movs	r3, r0
 800ac0c:	001a      	movs	r2, r3
 800ac0e:	2417      	movs	r4, #23
 800ac10:	193b      	adds	r3, r7, r4
 800ac12:	3203      	adds	r2, #3
 800ac14:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ac16:	2003      	movs	r0, #3
 800ac18:	f000 f942 	bl	800aea0 <malloc>
 800ac1c:	0003      	movs	r3, r0
 800ac1e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ac20:	193b      	adds	r3, r7, r4
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	18d1      	adds	r1, r2, r3
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	0018      	movs	r0, r3
 800ac2e:	f001 fbe4 	bl	800c3fa <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	3302      	adds	r3, #2
 800ac36:	2200      	movs	r2, #0
 800ac38:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ac3a:	240e      	movs	r4, #14
 800ac3c:	193a      	adds	r2, r7, r4
 800ac3e:	4909      	ldr	r1, [pc, #36]	; (800ac64 <my_nmea_get_rmc_date_mm+0x70>)
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	0018      	movs	r0, r3
 800ac44:	f001 fb4a 	bl	800c2dc <sscanf>
	free ( s ) ;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f000 f932 	bl	800aeb4 <free>
	*mm = (uint8_t) temp ;
 800ac50:	193b      	adds	r3, r7, r4
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	701a      	strb	r2, [r3, #0]

}
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	b007      	add	sp, #28
 800ac60:	bd90      	pop	{r4, r7, pc}
 800ac62:	46c0      	nop			; (mov r8, r8)
 800ac64:	0801482c 	.word	0x0801482c

0800ac68 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800ac68:	b590      	push	{r4, r7, lr}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2209      	movs	r2, #9
 800ac76:	212c      	movs	r1, #44	; 0x2c
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f7ff fbf5 	bl	800a468 <my_find_char_position>
 800ac7e:	0003      	movs	r3, r0
 800ac80:	001a      	movs	r2, r3
 800ac82:	2417      	movs	r4, #23
 800ac84:	193b      	adds	r3, r7, r4
 800ac86:	3201      	adds	r2, #1
 800ac88:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ac8a:	2003      	movs	r0, #3
 800ac8c:	f000 f908 	bl	800aea0 <malloc>
 800ac90:	0003      	movs	r3, r0
 800ac92:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ac94:	193b      	adds	r3, r7, r4
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	18d1      	adds	r1, r2, r3
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	2202      	movs	r2, #2
 800aca0:	0018      	movs	r0, r3
 800aca2:	f001 fbaa 	bl	800c3fa <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	3302      	adds	r3, #2
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800acae:	240e      	movs	r4, #14
 800acb0:	193a      	adds	r2, r7, r4
 800acb2:	4909      	ldr	r1, [pc, #36]	; (800acd8 <my_nmea_get_rmc_date_dd+0x70>)
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	0018      	movs	r0, r3
 800acb8:	f001 fb10 	bl	800c2dc <sscanf>
	free ( s ) ;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	0018      	movs	r0, r3
 800acc0:	f000 f8f8 	bl	800aeb4 <free>
	*dd = (uint8_t) temp ;
 800acc4:	193b      	adds	r3, r7, r4
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	701a      	strb	r2, [r3, #0]

}
 800acce:	46c0      	nop			; (mov r8, r8)
 800acd0:	46bd      	mov	sp, r7
 800acd2:	b007      	add	sp, #28
 800acd4:	bd90      	pop	{r4, r7, pc}
 800acd6:	46c0      	nop			; (mov r8, r8)
 800acd8:	0801482c 	.word	0x0801482c

0800acdc <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800acdc:	b590      	push	{r4, r7, lr}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	212c      	movs	r1, #44	; 0x2c
 800acec:	0018      	movs	r0, r3
 800acee:	f7ff fbbb 	bl	800a468 <my_find_char_position>
 800acf2:	0003      	movs	r3, r0
 800acf4:	001a      	movs	r2, r3
 800acf6:	2417      	movs	r4, #23
 800acf8:	193b      	adds	r3, r7, r4
 800acfa:	3201      	adds	r2, #1
 800acfc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800acfe:	2003      	movs	r0, #3
 800ad00:	f000 f8ce 	bl	800aea0 <malloc>
 800ad04:	0003      	movs	r3, r0
 800ad06:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ad08:	193b      	adds	r3, r7, r4
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	18d1      	adds	r1, r2, r3
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2202      	movs	r2, #2
 800ad14:	0018      	movs	r0, r3
 800ad16:	f001 fb70 	bl	800c3fa <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	3302      	adds	r3, #2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ad22:	240e      	movs	r4, #14
 800ad24:	193a      	adds	r2, r7, r4
 800ad26:	4909      	ldr	r1, [pc, #36]	; (800ad4c <my_nmea_get_rmc_utc_hh+0x70>)
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	0018      	movs	r0, r3
 800ad2c:	f001 fad6 	bl	800c2dc <sscanf>
	free ( s ) ;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	0018      	movs	r0, r3
 800ad34:	f000 f8be 	bl	800aeb4 <free>
	*hh = (uint8_t) temp ;
 800ad38:	193b      	adds	r3, r7, r4
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	701a      	strb	r2, [r3, #0]

}
 800ad42:	46c0      	nop			; (mov r8, r8)
 800ad44:	46bd      	mov	sp, r7
 800ad46:	b007      	add	sp, #28
 800ad48:	bd90      	pop	{r4, r7, pc}
 800ad4a:	46c0      	nop			; (mov r8, r8)
 800ad4c:	0801482c 	.word	0x0801482c

0800ad50 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800ad50:	b590      	push	{r4, r7, lr}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	212c      	movs	r1, #44	; 0x2c
 800ad60:	0018      	movs	r0, r3
 800ad62:	f7ff fb81 	bl	800a468 <my_find_char_position>
 800ad66:	0003      	movs	r3, r0
 800ad68:	001a      	movs	r2, r3
 800ad6a:	2417      	movs	r4, #23
 800ad6c:	193b      	adds	r3, r7, r4
 800ad6e:	3203      	adds	r2, #3
 800ad70:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ad72:	2003      	movs	r0, #3
 800ad74:	f000 f894 	bl	800aea0 <malloc>
 800ad78:	0003      	movs	r3, r0
 800ad7a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ad7c:	193b      	adds	r3, r7, r4
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	18d1      	adds	r1, r2, r3
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2202      	movs	r2, #2
 800ad88:	0018      	movs	r0, r3
 800ad8a:	f001 fb36 	bl	800c3fa <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	3302      	adds	r3, #2
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ad96:	240e      	movs	r4, #14
 800ad98:	193a      	adds	r2, r7, r4
 800ad9a:	4909      	ldr	r1, [pc, #36]	; (800adc0 <my_nmea_get_rmc_utc_mm+0x70>)
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	0018      	movs	r0, r3
 800ada0:	f001 fa9c 	bl	800c2dc <sscanf>
	free ( s ) ;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	0018      	movs	r0, r3
 800ada8:	f000 f884 	bl	800aeb4 <free>
	*mm = (uint8_t) temp ;
 800adac:	193b      	adds	r3, r7, r4
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	701a      	strb	r2, [r3, #0]

}
 800adb6:	46c0      	nop			; (mov r8, r8)
 800adb8:	46bd      	mov	sp, r7
 800adba:	b007      	add	sp, #28
 800adbc:	bd90      	pop	{r4, r7, pc}
 800adbe:	46c0      	nop			; (mov r8, r8)
 800adc0:	0801482c 	.word	0x0801482c

0800adc4 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800adc4:	b590      	push	{r4, r7, lr}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	212c      	movs	r1, #44	; 0x2c
 800add4:	0018      	movs	r0, r3
 800add6:	f7ff fb47 	bl	800a468 <my_find_char_position>
 800adda:	0003      	movs	r3, r0
 800addc:	001a      	movs	r2, r3
 800adde:	2417      	movs	r4, #23
 800ade0:	193b      	adds	r3, r7, r4
 800ade2:	3205      	adds	r2, #5
 800ade4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ade6:	2003      	movs	r0, #3
 800ade8:	f000 f85a 	bl	800aea0 <malloc>
 800adec:	0003      	movs	r3, r0
 800adee:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800adf0:	193b      	adds	r3, r7, r4
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	18d1      	adds	r1, r2, r3
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	2202      	movs	r2, #2
 800adfc:	0018      	movs	r0, r3
 800adfe:	f001 fafc 	bl	800c3fa <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	3302      	adds	r3, #2
 800ae06:	2200      	movs	r2, #0
 800ae08:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ae0a:	240e      	movs	r4, #14
 800ae0c:	193a      	adds	r2, r7, r4
 800ae0e:	4909      	ldr	r1, [pc, #36]	; (800ae34 <my_nmea_get_rmc_utc_ss+0x70>)
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	0018      	movs	r0, r3
 800ae14:	f001 fa62 	bl	800c2dc <sscanf>
	free ( s ) ;
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	f000 f84a 	bl	800aeb4 <free>
	*ss = (uint8_t) temp ;
 800ae20:	193b      	adds	r3, r7, r4
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	701a      	strb	r2, [r3, #0]

}
 800ae2a:	46c0      	nop			; (mov r8, r8)
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	b007      	add	sp, #28
 800ae30:	bd90      	pop	{r4, r7, pc}
 800ae32:	46c0      	nop			; (mov r8, r8)
 800ae34:	0801482c 	.word	0x0801482c

0800ae38 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800ae38:	b590      	push	{r4, r7, lr}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	212c      	movs	r1, #44	; 0x2c
 800ae48:	0018      	movs	r0, r3
 800ae4a:	f7ff fb0d 	bl	800a468 <my_find_char_position>
 800ae4e:	0003      	movs	r3, r0
 800ae50:	001a      	movs	r2, r3
 800ae52:	240f      	movs	r4, #15
 800ae54:	193b      	adds	r3, r7, r4
 800ae56:	3208      	adds	r2, #8
 800ae58:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ae5a:	2004      	movs	r0, #4
 800ae5c:	f000 f820 	bl	800aea0 <malloc>
 800ae60:	0003      	movs	r3, r0
 800ae62:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ae64:	193b      	adds	r3, r7, r4
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	18d1      	adds	r1, r2, r3
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2203      	movs	r2, #3
 800ae70:	0018      	movs	r0, r3
 800ae72:	f001 fac2 	bl	800c3fa <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	3303      	adds	r3, #3
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	4906      	ldr	r1, [pc, #24]	; (800ae9c <my_nmea_get_rmc_utc_sss+0x64>)
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	0018      	movs	r0, r3
 800ae86:	f001 fa29 	bl	800c2dc <sscanf>
	free ( s ) ;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	0018      	movs	r0, r3
 800ae8e:	f000 f811 	bl	800aeb4 <free>
}
 800ae92:	46c0      	nop			; (mov r8, r8)
 800ae94:	46bd      	mov	sp, r7
 800ae96:	b005      	add	sp, #20
 800ae98:	bd90      	pop	{r4, r7, pc}
 800ae9a:	46c0      	nop			; (mov r8, r8)
 800ae9c:	08014830 	.word	0x08014830

0800aea0 <malloc>:
 800aea0:	b510      	push	{r4, lr}
 800aea2:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <malloc+0x10>)
 800aea4:	0001      	movs	r1, r0
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	f000 f80e 	bl	800aec8 <_malloc_r>
 800aeac:	bd10      	pop	{r4, pc}
 800aeae:	46c0      	nop			; (mov r8, r8)
 800aeb0:	200006d8 	.word	0x200006d8

0800aeb4 <free>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	4b03      	ldr	r3, [pc, #12]	; (800aec4 <free+0x10>)
 800aeb8:	0001      	movs	r1, r0
 800aeba:	6818      	ldr	r0, [r3, #0]
 800aebc:	f001 fbe4 	bl	800c688 <_free_r>
 800aec0:	bd10      	pop	{r4, pc}
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	200006d8 	.word	0x200006d8

0800aec8 <_malloc_r>:
 800aec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeca:	000d      	movs	r5, r1
 800aecc:	b087      	sub	sp, #28
 800aece:	350b      	adds	r5, #11
 800aed0:	9001      	str	r0, [sp, #4]
 800aed2:	2d16      	cmp	r5, #22
 800aed4:	d908      	bls.n	800aee8 <_malloc_r+0x20>
 800aed6:	2207      	movs	r2, #7
 800aed8:	4395      	bics	r5, r2
 800aeda:	d506      	bpl.n	800aeea <_malloc_r+0x22>
 800aedc:	230c      	movs	r3, #12
 800aede:	9a01      	ldr	r2, [sp, #4]
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	2000      	movs	r0, #0
 800aee4:	b007      	add	sp, #28
 800aee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee8:	2510      	movs	r5, #16
 800aeea:	42a9      	cmp	r1, r5
 800aeec:	d8f6      	bhi.n	800aedc <_malloc_r+0x14>
 800aeee:	9801      	ldr	r0, [sp, #4]
 800aef0:	f000 f9fe 	bl	800b2f0 <__malloc_lock>
 800aef4:	23fc      	movs	r3, #252	; 0xfc
 800aef6:	4ebe      	ldr	r6, [pc, #760]	; (800b1f0 <_malloc_r+0x328>)
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	429d      	cmp	r5, r3
 800aefc:	d219      	bcs.n	800af32 <_malloc_r+0x6a>
 800aefe:	002a      	movs	r2, r5
 800af00:	3208      	adds	r2, #8
 800af02:	18b2      	adds	r2, r6, r2
 800af04:	0011      	movs	r1, r2
 800af06:	6854      	ldr	r4, [r2, #4]
 800af08:	3908      	subs	r1, #8
 800af0a:	08eb      	lsrs	r3, r5, #3
 800af0c:	428c      	cmp	r4, r1
 800af0e:	d103      	bne.n	800af18 <_malloc_r+0x50>
 800af10:	68d4      	ldr	r4, [r2, #12]
 800af12:	3302      	adds	r3, #2
 800af14:	42a2      	cmp	r2, r4
 800af16:	d022      	beq.n	800af5e <_malloc_r+0x96>
 800af18:	2203      	movs	r2, #3
 800af1a:	6863      	ldr	r3, [r4, #4]
 800af1c:	68a1      	ldr	r1, [r4, #8]
 800af1e:	4393      	bics	r3, r2
 800af20:	68e2      	ldr	r2, [r4, #12]
 800af22:	18e3      	adds	r3, r4, r3
 800af24:	60ca      	str	r2, [r1, #12]
 800af26:	6091      	str	r1, [r2, #8]
 800af28:	2201      	movs	r2, #1
 800af2a:	6859      	ldr	r1, [r3, #4]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	605a      	str	r2, [r3, #4]
 800af30:	e02a      	b.n	800af88 <_malloc_r+0xc0>
 800af32:	233f      	movs	r3, #63	; 0x3f
 800af34:	0a6a      	lsrs	r2, r5, #9
 800af36:	d003      	beq.n	800af40 <_malloc_r+0x78>
 800af38:	2a04      	cmp	r2, #4
 800af3a:	d82b      	bhi.n	800af94 <_malloc_r+0xcc>
 800af3c:	09ab      	lsrs	r3, r5, #6
 800af3e:	3338      	adds	r3, #56	; 0x38
 800af40:	2203      	movs	r2, #3
 800af42:	4694      	mov	ip, r2
 800af44:	00d9      	lsls	r1, r3, #3
 800af46:	1989      	adds	r1, r1, r6
 800af48:	68cc      	ldr	r4, [r1, #12]
 800af4a:	428c      	cmp	r4, r1
 800af4c:	d006      	beq.n	800af5c <_malloc_r+0x94>
 800af4e:	4660      	mov	r0, ip
 800af50:	6862      	ldr	r2, [r4, #4]
 800af52:	4382      	bics	r2, r0
 800af54:	1b57      	subs	r7, r2, r5
 800af56:	2f0f      	cmp	r7, #15
 800af58:	dd34      	ble.n	800afc4 <_malloc_r+0xfc>
 800af5a:	3b01      	subs	r3, #1
 800af5c:	3301      	adds	r3, #1
 800af5e:	6934      	ldr	r4, [r6, #16]
 800af60:	49a4      	ldr	r1, [pc, #656]	; (800b1f4 <_malloc_r+0x32c>)
 800af62:	428c      	cmp	r4, r1
 800af64:	d055      	beq.n	800b012 <_malloc_r+0x14a>
 800af66:	2003      	movs	r0, #3
 800af68:	6862      	ldr	r2, [r4, #4]
 800af6a:	4382      	bics	r2, r0
 800af6c:	1b50      	subs	r0, r2, r5
 800af6e:	280f      	cmp	r0, #15
 800af70:	dd36      	ble.n	800afe0 <_malloc_r+0x118>
 800af72:	2301      	movs	r3, #1
 800af74:	1967      	adds	r7, r4, r5
 800af76:	431d      	orrs	r5, r3
 800af78:	4303      	orrs	r3, r0
 800af7a:	6065      	str	r5, [r4, #4]
 800af7c:	6177      	str	r7, [r6, #20]
 800af7e:	6137      	str	r7, [r6, #16]
 800af80:	60f9      	str	r1, [r7, #12]
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	607b      	str	r3, [r7, #4]
 800af86:	50a0      	str	r0, [r4, r2]
 800af88:	9801      	ldr	r0, [sp, #4]
 800af8a:	f000 f9b9 	bl	800b300 <__malloc_unlock>
 800af8e:	0020      	movs	r0, r4
 800af90:	3008      	adds	r0, #8
 800af92:	e7a7      	b.n	800aee4 <_malloc_r+0x1c>
 800af94:	2a14      	cmp	r2, #20
 800af96:	d802      	bhi.n	800af9e <_malloc_r+0xd6>
 800af98:	0013      	movs	r3, r2
 800af9a:	335b      	adds	r3, #91	; 0x5b
 800af9c:	e7d0      	b.n	800af40 <_malloc_r+0x78>
 800af9e:	2a54      	cmp	r2, #84	; 0x54
 800afa0:	d802      	bhi.n	800afa8 <_malloc_r+0xe0>
 800afa2:	0b2b      	lsrs	r3, r5, #12
 800afa4:	336e      	adds	r3, #110	; 0x6e
 800afa6:	e7cb      	b.n	800af40 <_malloc_r+0x78>
 800afa8:	23aa      	movs	r3, #170	; 0xaa
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	429a      	cmp	r2, r3
 800afae:	d802      	bhi.n	800afb6 <_malloc_r+0xee>
 800afb0:	0beb      	lsrs	r3, r5, #15
 800afb2:	3377      	adds	r3, #119	; 0x77
 800afb4:	e7c4      	b.n	800af40 <_malloc_r+0x78>
 800afb6:	4990      	ldr	r1, [pc, #576]	; (800b1f8 <_malloc_r+0x330>)
 800afb8:	237e      	movs	r3, #126	; 0x7e
 800afba:	428a      	cmp	r2, r1
 800afbc:	d8c0      	bhi.n	800af40 <_malloc_r+0x78>
 800afbe:	0cab      	lsrs	r3, r5, #18
 800afc0:	337c      	adds	r3, #124	; 0x7c
 800afc2:	e7bd      	b.n	800af40 <_malloc_r+0x78>
 800afc4:	68e0      	ldr	r0, [r4, #12]
 800afc6:	2f00      	cmp	r7, #0
 800afc8:	db08      	blt.n	800afdc <_malloc_r+0x114>
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	60d8      	str	r0, [r3, #12]
 800afce:	6083      	str	r3, [r0, #8]
 800afd0:	2301      	movs	r3, #1
 800afd2:	18a2      	adds	r2, r4, r2
 800afd4:	6851      	ldr	r1, [r2, #4]
 800afd6:	430b      	orrs	r3, r1
 800afd8:	6053      	str	r3, [r2, #4]
 800afda:	e7d5      	b.n	800af88 <_malloc_r+0xc0>
 800afdc:	0004      	movs	r4, r0
 800afde:	e7b4      	b.n	800af4a <_malloc_r+0x82>
 800afe0:	6171      	str	r1, [r6, #20]
 800afe2:	6131      	str	r1, [r6, #16]
 800afe4:	2800      	cmp	r0, #0
 800afe6:	daf3      	bge.n	800afd0 <_malloc_r+0x108>
 800afe8:	6871      	ldr	r1, [r6, #4]
 800afea:	468c      	mov	ip, r1
 800afec:	2180      	movs	r1, #128	; 0x80
 800afee:	0089      	lsls	r1, r1, #2
 800aff0:	428a      	cmp	r2, r1
 800aff2:	d300      	bcc.n	800aff6 <_malloc_r+0x12e>
 800aff4:	e08c      	b.n	800b110 <_malloc_r+0x248>
 800aff6:	08d1      	lsrs	r1, r2, #3
 800aff8:	0950      	lsrs	r0, r2, #5
 800affa:	2201      	movs	r2, #1
 800affc:	4082      	lsls	r2, r0
 800affe:	4660      	mov	r0, ip
 800b000:	4302      	orrs	r2, r0
 800b002:	6072      	str	r2, [r6, #4]
 800b004:	00ca      	lsls	r2, r1, #3
 800b006:	1992      	adds	r2, r2, r6
 800b008:	6891      	ldr	r1, [r2, #8]
 800b00a:	60e2      	str	r2, [r4, #12]
 800b00c:	60a1      	str	r1, [r4, #8]
 800b00e:	6094      	str	r4, [r2, #8]
 800b010:	60cc      	str	r4, [r1, #12]
 800b012:	2201      	movs	r2, #1
 800b014:	4876      	ldr	r0, [pc, #472]	; (800b1f0 <_malloc_r+0x328>)
 800b016:	1099      	asrs	r1, r3, #2
 800b018:	408a      	lsls	r2, r1
 800b01a:	6841      	ldr	r1, [r0, #4]
 800b01c:	4291      	cmp	r1, r2
 800b01e:	d328      	bcc.n	800b072 <_malloc_r+0x1aa>
 800b020:	420a      	tst	r2, r1
 800b022:	d105      	bne.n	800b030 <_malloc_r+0x168>
 800b024:	2403      	movs	r4, #3
 800b026:	43a3      	bics	r3, r4
 800b028:	0052      	lsls	r2, r2, #1
 800b02a:	3304      	adds	r3, #4
 800b02c:	420a      	tst	r2, r1
 800b02e:	d0fb      	beq.n	800b028 <_malloc_r+0x160>
 800b030:	496f      	ldr	r1, [pc, #444]	; (800b1f0 <_malloc_r+0x328>)
 800b032:	9104      	str	r1, [sp, #16]
 800b034:	00d9      	lsls	r1, r3, #3
 800b036:	1841      	adds	r1, r0, r1
 800b038:	468c      	mov	ip, r1
 800b03a:	000f      	movs	r7, r1
 800b03c:	9302      	str	r3, [sp, #8]
 800b03e:	68fc      	ldr	r4, [r7, #12]
 800b040:	42bc      	cmp	r4, r7
 800b042:	d000      	beq.n	800b046 <_malloc_r+0x17e>
 800b044:	e09b      	b.n	800b17e <_malloc_r+0x2b6>
 800b046:	2403      	movs	r4, #3
 800b048:	9902      	ldr	r1, [sp, #8]
 800b04a:	3708      	adds	r7, #8
 800b04c:	3101      	adds	r1, #1
 800b04e:	9102      	str	r1, [sp, #8]
 800b050:	4221      	tst	r1, r4
 800b052:	d1f4      	bne.n	800b03e <_malloc_r+0x176>
 800b054:	2103      	movs	r1, #3
 800b056:	420b      	tst	r3, r1
 800b058:	d000      	beq.n	800b05c <_malloc_r+0x194>
 800b05a:	e0b7      	b.n	800b1cc <_malloc_r+0x304>
 800b05c:	6843      	ldr	r3, [r0, #4]
 800b05e:	4393      	bics	r3, r2
 800b060:	6043      	str	r3, [r0, #4]
 800b062:	9b04      	ldr	r3, [sp, #16]
 800b064:	0052      	lsls	r2, r2, #1
 800b066:	6859      	ldr	r1, [r3, #4]
 800b068:	4291      	cmp	r1, r2
 800b06a:	d302      	bcc.n	800b072 <_malloc_r+0x1aa>
 800b06c:	2a00      	cmp	r2, #0
 800b06e:	d000      	beq.n	800b072 <_malloc_r+0x1aa>
 800b070:	e0bb      	b.n	800b1ea <_malloc_r+0x322>
 800b072:	2203      	movs	r2, #3
 800b074:	6883      	ldr	r3, [r0, #8]
 800b076:	9302      	str	r3, [sp, #8]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	4393      	bics	r3, r2
 800b07c:	9303      	str	r3, [sp, #12]
 800b07e:	42ab      	cmp	r3, r5
 800b080:	d303      	bcc.n	800b08a <_malloc_r+0x1c2>
 800b082:	1b59      	subs	r1, r3, r5
 800b084:	290f      	cmp	r1, #15
 800b086:	dd00      	ble.n	800b08a <_malloc_r+0x1c2>
 800b088:	e123      	b.n	800b2d2 <_malloc_r+0x40a>
 800b08a:	9b02      	ldr	r3, [sp, #8]
 800b08c:	9a03      	ldr	r2, [sp, #12]
 800b08e:	2008      	movs	r0, #8
 800b090:	189e      	adds	r6, r3, r2
 800b092:	4b5a      	ldr	r3, [pc, #360]	; (800b1fc <_malloc_r+0x334>)
 800b094:	681f      	ldr	r7, [r3, #0]
 800b096:	f001 fa71 	bl	800c57c <sysconf>
 800b09a:	4b59      	ldr	r3, [pc, #356]	; (800b200 <_malloc_r+0x338>)
 800b09c:	3710      	adds	r7, #16
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	197f      	adds	r7, r7, r5
 800b0a2:	9004      	str	r0, [sp, #16]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	d003      	beq.n	800b0b0 <_malloc_r+0x1e8>
 800b0a8:	1e7b      	subs	r3, r7, #1
 800b0aa:	181b      	adds	r3, r3, r0
 800b0ac:	4247      	negs	r7, r0
 800b0ae:	401f      	ands	r7, r3
 800b0b0:	0039      	movs	r1, r7
 800b0b2:	9801      	ldr	r0, [sp, #4]
 800b0b4:	f001 fa0e 	bl	800c4d4 <_sbrk_r>
 800b0b8:	0004      	movs	r4, r0
 800b0ba:	1c43      	adds	r3, r0, #1
 800b0bc:	d100      	bne.n	800b0c0 <_malloc_r+0x1f8>
 800b0be:	e0de      	b.n	800b27e <_malloc_r+0x3b6>
 800b0c0:	4286      	cmp	r6, r0
 800b0c2:	d904      	bls.n	800b0ce <_malloc_r+0x206>
 800b0c4:	4b4a      	ldr	r3, [pc, #296]	; (800b1f0 <_malloc_r+0x328>)
 800b0c6:	9a02      	ldr	r2, [sp, #8]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d000      	beq.n	800b0ce <_malloc_r+0x206>
 800b0cc:	e0d7      	b.n	800b27e <_malloc_r+0x3b6>
 800b0ce:	4a4d      	ldr	r2, [pc, #308]	; (800b204 <_malloc_r+0x33c>)
 800b0d0:	6813      	ldr	r3, [r2, #0]
 800b0d2:	18fb      	adds	r3, r7, r3
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	9a04      	ldr	r2, [sp, #16]
 800b0d8:	3a01      	subs	r2, #1
 800b0da:	42a6      	cmp	r6, r4
 800b0dc:	d000      	beq.n	800b0e0 <_malloc_r+0x218>
 800b0de:	e097      	b.n	800b210 <_malloc_r+0x348>
 800b0e0:	4216      	tst	r6, r2
 800b0e2:	d000      	beq.n	800b0e6 <_malloc_r+0x21e>
 800b0e4:	e094      	b.n	800b210 <_malloc_r+0x348>
 800b0e6:	4b42      	ldr	r3, [pc, #264]	; (800b1f0 <_malloc_r+0x328>)
 800b0e8:	689a      	ldr	r2, [r3, #8]
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	19df      	adds	r7, r3, r7
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	433b      	orrs	r3, r7
 800b0f2:	6053      	str	r3, [r2, #4]
 800b0f4:	4b43      	ldr	r3, [pc, #268]	; (800b204 <_malloc_r+0x33c>)
 800b0f6:	4a44      	ldr	r2, [pc, #272]	; (800b208 <_malloc_r+0x340>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	6811      	ldr	r1, [r2, #0]
 800b0fc:	428b      	cmp	r3, r1
 800b0fe:	d900      	bls.n	800b102 <_malloc_r+0x23a>
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	4a42      	ldr	r2, [pc, #264]	; (800b20c <_malloc_r+0x344>)
 800b104:	6811      	ldr	r1, [r2, #0]
 800b106:	428b      	cmp	r3, r1
 800b108:	d800      	bhi.n	800b10c <_malloc_r+0x244>
 800b10a:	e0b8      	b.n	800b27e <_malloc_r+0x3b6>
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	e0b6      	b.n	800b27e <_malloc_r+0x3b6>
 800b110:	0a50      	lsrs	r0, r2, #9
 800b112:	2804      	cmp	r0, #4
 800b114:	d811      	bhi.n	800b13a <_malloc_r+0x272>
 800b116:	0991      	lsrs	r1, r2, #6
 800b118:	3138      	adds	r1, #56	; 0x38
 800b11a:	00cf      	lsls	r7, r1, #3
 800b11c:	19bf      	adds	r7, r7, r6
 800b11e:	68b8      	ldr	r0, [r7, #8]
 800b120:	4287      	cmp	r7, r0
 800b122:	d125      	bne.n	800b170 <_malloc_r+0x2a8>
 800b124:	2201      	movs	r2, #1
 800b126:	1089      	asrs	r1, r1, #2
 800b128:	408a      	lsls	r2, r1
 800b12a:	4661      	mov	r1, ip
 800b12c:	430a      	orrs	r2, r1
 800b12e:	6072      	str	r2, [r6, #4]
 800b130:	60e7      	str	r7, [r4, #12]
 800b132:	60a0      	str	r0, [r4, #8]
 800b134:	60bc      	str	r4, [r7, #8]
 800b136:	60c4      	str	r4, [r0, #12]
 800b138:	e76b      	b.n	800b012 <_malloc_r+0x14a>
 800b13a:	2814      	cmp	r0, #20
 800b13c:	d802      	bhi.n	800b144 <_malloc_r+0x27c>
 800b13e:	0001      	movs	r1, r0
 800b140:	315b      	adds	r1, #91	; 0x5b
 800b142:	e7ea      	b.n	800b11a <_malloc_r+0x252>
 800b144:	2854      	cmp	r0, #84	; 0x54
 800b146:	d802      	bhi.n	800b14e <_malloc_r+0x286>
 800b148:	0b11      	lsrs	r1, r2, #12
 800b14a:	316e      	adds	r1, #110	; 0x6e
 800b14c:	e7e5      	b.n	800b11a <_malloc_r+0x252>
 800b14e:	21aa      	movs	r1, #170	; 0xaa
 800b150:	0049      	lsls	r1, r1, #1
 800b152:	4288      	cmp	r0, r1
 800b154:	d802      	bhi.n	800b15c <_malloc_r+0x294>
 800b156:	0bd1      	lsrs	r1, r2, #15
 800b158:	3177      	adds	r1, #119	; 0x77
 800b15a:	e7de      	b.n	800b11a <_malloc_r+0x252>
 800b15c:	4f26      	ldr	r7, [pc, #152]	; (800b1f8 <_malloc_r+0x330>)
 800b15e:	217e      	movs	r1, #126	; 0x7e
 800b160:	42b8      	cmp	r0, r7
 800b162:	d8da      	bhi.n	800b11a <_malloc_r+0x252>
 800b164:	0c91      	lsrs	r1, r2, #18
 800b166:	317c      	adds	r1, #124	; 0x7c
 800b168:	e7d7      	b.n	800b11a <_malloc_r+0x252>
 800b16a:	6880      	ldr	r0, [r0, #8]
 800b16c:	4287      	cmp	r7, r0
 800b16e:	d004      	beq.n	800b17a <_malloc_r+0x2b2>
 800b170:	2603      	movs	r6, #3
 800b172:	6841      	ldr	r1, [r0, #4]
 800b174:	43b1      	bics	r1, r6
 800b176:	4291      	cmp	r1, r2
 800b178:	d8f7      	bhi.n	800b16a <_malloc_r+0x2a2>
 800b17a:	68c7      	ldr	r7, [r0, #12]
 800b17c:	e7d8      	b.n	800b130 <_malloc_r+0x268>
 800b17e:	2603      	movs	r6, #3
 800b180:	6861      	ldr	r1, [r4, #4]
 800b182:	43b1      	bics	r1, r6
 800b184:	9103      	str	r1, [sp, #12]
 800b186:	68e6      	ldr	r6, [r4, #12]
 800b188:	1b49      	subs	r1, r1, r5
 800b18a:	290f      	cmp	r1, #15
 800b18c:	dd10      	ble.n	800b1b0 <_malloc_r+0x2e8>
 800b18e:	2201      	movs	r2, #1
 800b190:	1963      	adds	r3, r4, r5
 800b192:	4315      	orrs	r5, r2
 800b194:	6065      	str	r5, [r4, #4]
 800b196:	68a5      	ldr	r5, [r4, #8]
 800b198:	430a      	orrs	r2, r1
 800b19a:	60ee      	str	r6, [r5, #12]
 800b19c:	60b5      	str	r5, [r6, #8]
 800b19e:	6143      	str	r3, [r0, #20]
 800b1a0:	6103      	str	r3, [r0, #16]
 800b1a2:	4814      	ldr	r0, [pc, #80]	; (800b1f4 <_malloc_r+0x32c>)
 800b1a4:	605a      	str	r2, [r3, #4]
 800b1a6:	60d8      	str	r0, [r3, #12]
 800b1a8:	6098      	str	r0, [r3, #8]
 800b1aa:	9b03      	ldr	r3, [sp, #12]
 800b1ac:	50e1      	str	r1, [r4, r3]
 800b1ae:	e6eb      	b.n	800af88 <_malloc_r+0xc0>
 800b1b0:	2900      	cmp	r1, #0
 800b1b2:	db09      	blt.n	800b1c8 <_malloc_r+0x300>
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	18e1      	adds	r1, r4, r3
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	684a      	ldr	r2, [r1, #4]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	604b      	str	r3, [r1, #4]
 800b1c0:	68a3      	ldr	r3, [r4, #8]
 800b1c2:	60de      	str	r6, [r3, #12]
 800b1c4:	60b3      	str	r3, [r6, #8]
 800b1c6:	e6df      	b.n	800af88 <_malloc_r+0xc0>
 800b1c8:	0034      	movs	r4, r6
 800b1ca:	e739      	b.n	800b040 <_malloc_r+0x178>
 800b1cc:	2108      	movs	r1, #8
 800b1ce:	4249      	negs	r1, r1
 800b1d0:	448c      	add	ip, r1
 800b1d2:	4661      	mov	r1, ip
 800b1d4:	6889      	ldr	r1, [r1, #8]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	4561      	cmp	r1, ip
 800b1da:	d100      	bne.n	800b1de <_malloc_r+0x316>
 800b1dc:	e73a      	b.n	800b054 <_malloc_r+0x18c>
 800b1de:	e740      	b.n	800b062 <_malloc_r+0x19a>
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	0052      	lsls	r2, r2, #1
 800b1e4:	420a      	tst	r2, r1
 800b1e6:	d0fb      	beq.n	800b1e0 <_malloc_r+0x318>
 800b1e8:	e724      	b.n	800b034 <_malloc_r+0x16c>
 800b1ea:	9b02      	ldr	r3, [sp, #8]
 800b1ec:	e7fa      	b.n	800b1e4 <_malloc_r+0x31c>
 800b1ee:	46c0      	nop			; (mov r8, r8)
 800b1f0:	2000002c 	.word	0x2000002c
 800b1f4:	20000034 	.word	0x20000034
 800b1f8:	00000554 	.word	0x00000554
 800b1fc:	20000be4 	.word	0x20000be4
 800b200:	20000434 	.word	0x20000434
 800b204:	20000bb4 	.word	0x20000bb4
 800b208:	20000bdc 	.word	0x20000bdc
 800b20c:	20000be0 	.word	0x20000be0
 800b210:	4934      	ldr	r1, [pc, #208]	; (800b2e4 <_malloc_r+0x41c>)
 800b212:	6808      	ldr	r0, [r1, #0]
 800b214:	3001      	adds	r0, #1
 800b216:	d140      	bne.n	800b29a <_malloc_r+0x3d2>
 800b218:	600c      	str	r4, [r1, #0]
 800b21a:	2107      	movs	r1, #7
 800b21c:	0026      	movs	r6, r4
 800b21e:	2300      	movs	r3, #0
 800b220:	400e      	ands	r6, r1
 800b222:	420c      	tst	r4, r1
 800b224:	d002      	beq.n	800b22c <_malloc_r+0x364>
 800b226:	3308      	adds	r3, #8
 800b228:	1b9b      	subs	r3, r3, r6
 800b22a:	18e4      	adds	r4, r4, r3
 800b22c:	19e1      	adds	r1, r4, r7
 800b22e:	9105      	str	r1, [sp, #20]
 800b230:	9f05      	ldr	r7, [sp, #20]
 800b232:	9904      	ldr	r1, [sp, #16]
 800b234:	4017      	ands	r7, r2
 800b236:	18cb      	adds	r3, r1, r3
 800b238:	1bdf      	subs	r7, r3, r7
 800b23a:	4017      	ands	r7, r2
 800b23c:	0039      	movs	r1, r7
 800b23e:	9801      	ldr	r0, [sp, #4]
 800b240:	f001 f948 	bl	800c4d4 <_sbrk_r>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d107      	bne.n	800b258 <_malloc_r+0x390>
 800b248:	1e37      	subs	r7, r6, #0
 800b24a:	9805      	ldr	r0, [sp, #20]
 800b24c:	d004      	beq.n	800b258 <_malloc_r+0x390>
 800b24e:	0030      	movs	r0, r6
 800b250:	2700      	movs	r7, #0
 800b252:	9b05      	ldr	r3, [sp, #20]
 800b254:	3808      	subs	r0, #8
 800b256:	1818      	adds	r0, r3, r0
 800b258:	4a23      	ldr	r2, [pc, #140]	; (800b2e8 <_malloc_r+0x420>)
 800b25a:	1b00      	subs	r0, r0, r4
 800b25c:	6813      	ldr	r3, [r2, #0]
 800b25e:	19c0      	adds	r0, r0, r7
 800b260:	19db      	adds	r3, r3, r7
 800b262:	6013      	str	r3, [r2, #0]
 800b264:	2201      	movs	r2, #1
 800b266:	4b21      	ldr	r3, [pc, #132]	; (800b2ec <_malloc_r+0x424>)
 800b268:	9902      	ldr	r1, [sp, #8]
 800b26a:	4310      	orrs	r0, r2
 800b26c:	609c      	str	r4, [r3, #8]
 800b26e:	6060      	str	r0, [r4, #4]
 800b270:	4299      	cmp	r1, r3
 800b272:	d100      	bne.n	800b276 <_malloc_r+0x3ae>
 800b274:	e73e      	b.n	800b0f4 <_malloc_r+0x22c>
 800b276:	9b03      	ldr	r3, [sp, #12]
 800b278:	2b0f      	cmp	r3, #15
 800b27a:	d813      	bhi.n	800b2a4 <_malloc_r+0x3dc>
 800b27c:	6062      	str	r2, [r4, #4]
 800b27e:	2203      	movs	r2, #3
 800b280:	4b1a      	ldr	r3, [pc, #104]	; (800b2ec <_malloc_r+0x424>)
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	4393      	bics	r3, r2
 800b288:	1b59      	subs	r1, r3, r5
 800b28a:	42ab      	cmp	r3, r5
 800b28c:	d301      	bcc.n	800b292 <_malloc_r+0x3ca>
 800b28e:	290f      	cmp	r1, #15
 800b290:	dc1f      	bgt.n	800b2d2 <_malloc_r+0x40a>
 800b292:	9801      	ldr	r0, [sp, #4]
 800b294:	f000 f834 	bl	800b300 <__malloc_unlock>
 800b298:	e623      	b.n	800aee2 <_malloc_r+0x1a>
 800b29a:	4913      	ldr	r1, [pc, #76]	; (800b2e8 <_malloc_r+0x420>)
 800b29c:	1ba6      	subs	r6, r4, r6
 800b29e:	18f6      	adds	r6, r6, r3
 800b2a0:	600e      	str	r6, [r1, #0]
 800b2a2:	e7ba      	b.n	800b21a <_malloc_r+0x352>
 800b2a4:	2107      	movs	r1, #7
 800b2a6:	9b03      	ldr	r3, [sp, #12]
 800b2a8:	3b0c      	subs	r3, #12
 800b2aa:	438b      	bics	r3, r1
 800b2ac:	9902      	ldr	r1, [sp, #8]
 800b2ae:	6849      	ldr	r1, [r1, #4]
 800b2b0:	400a      	ands	r2, r1
 800b2b2:	9902      	ldr	r1, [sp, #8]
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	604a      	str	r2, [r1, #4]
 800b2b8:	18ca      	adds	r2, r1, r3
 800b2ba:	2105      	movs	r1, #5
 800b2bc:	6051      	str	r1, [r2, #4]
 800b2be:	6091      	str	r1, [r2, #8]
 800b2c0:	2b0f      	cmp	r3, #15
 800b2c2:	d800      	bhi.n	800b2c6 <_malloc_r+0x3fe>
 800b2c4:	e716      	b.n	800b0f4 <_malloc_r+0x22c>
 800b2c6:	9902      	ldr	r1, [sp, #8]
 800b2c8:	9801      	ldr	r0, [sp, #4]
 800b2ca:	3108      	adds	r1, #8
 800b2cc:	f001 f9dc 	bl	800c688 <_free_r>
 800b2d0:	e710      	b.n	800b0f4 <_malloc_r+0x22c>
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	0013      	movs	r3, r2
 800b2d6:	4805      	ldr	r0, [pc, #20]	; (800b2ec <_malloc_r+0x424>)
 800b2d8:	432b      	orrs	r3, r5
 800b2da:	6884      	ldr	r4, [r0, #8]
 800b2dc:	6063      	str	r3, [r4, #4]
 800b2de:	1963      	adds	r3, r4, r5
 800b2e0:	6083      	str	r3, [r0, #8]
 800b2e2:	e623      	b.n	800af2c <_malloc_r+0x64>
 800b2e4:	20000434 	.word	0x20000434
 800b2e8:	20000bb4 	.word	0x20000bb4
 800b2ec:	2000002c 	.word	0x2000002c

0800b2f0 <__malloc_lock>:
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	4802      	ldr	r0, [pc, #8]	; (800b2fc <__malloc_lock+0xc>)
 800b2f4:	f001 f940 	bl	800c578 <__retarget_lock_acquire_recursive>
 800b2f8:	bd10      	pop	{r4, pc}
 800b2fa:	46c0      	nop			; (mov r8, r8)
 800b2fc:	20000d29 	.word	0x20000d29

0800b300 <__malloc_unlock>:
 800b300:	b510      	push	{r4, lr}
 800b302:	4802      	ldr	r0, [pc, #8]	; (800b30c <__malloc_unlock+0xc>)
 800b304:	f001 f939 	bl	800c57a <__retarget_lock_release_recursive>
 800b308:	bd10      	pop	{r4, pc}
 800b30a:	46c0      	nop			; (mov r8, r8)
 800b30c:	20000d29 	.word	0x20000d29

0800b310 <sulp>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	0016      	movs	r6, r2
 800b314:	000d      	movs	r5, r1
 800b316:	f002 f90d 	bl	800d534 <__ulp>
 800b31a:	2e00      	cmp	r6, #0
 800b31c:	d00d      	beq.n	800b33a <sulp+0x2a>
 800b31e:	236b      	movs	r3, #107	; 0x6b
 800b320:	006a      	lsls	r2, r5, #1
 800b322:	0d52      	lsrs	r2, r2, #21
 800b324:	1a9b      	subs	r3, r3, r2
 800b326:	2b00      	cmp	r3, #0
 800b328:	dd07      	ble.n	800b33a <sulp+0x2a>
 800b32a:	2400      	movs	r4, #0
 800b32c:	4a03      	ldr	r2, [pc, #12]	; (800b33c <sulp+0x2c>)
 800b32e:	051b      	lsls	r3, r3, #20
 800b330:	189d      	adds	r5, r3, r2
 800b332:	002b      	movs	r3, r5
 800b334:	0022      	movs	r2, r4
 800b336:	f7f6 f999 	bl	800166c <__aeabi_dmul>
 800b33a:	bd70      	pop	{r4, r5, r6, pc}
 800b33c:	3ff00000 	.word	0x3ff00000

0800b340 <_strtod_l>:
 800b340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b342:	b0a1      	sub	sp, #132	; 0x84
 800b344:	9219      	str	r2, [sp, #100]	; 0x64
 800b346:	2200      	movs	r2, #0
 800b348:	2600      	movs	r6, #0
 800b34a:	2700      	movs	r7, #0
 800b34c:	9004      	str	r0, [sp, #16]
 800b34e:	9107      	str	r1, [sp, #28]
 800b350:	921c      	str	r2, [sp, #112]	; 0x70
 800b352:	911b      	str	r1, [sp, #108]	; 0x6c
 800b354:	780a      	ldrb	r2, [r1, #0]
 800b356:	2a2b      	cmp	r2, #43	; 0x2b
 800b358:	d055      	beq.n	800b406 <_strtod_l+0xc6>
 800b35a:	d841      	bhi.n	800b3e0 <_strtod_l+0xa0>
 800b35c:	2a0d      	cmp	r2, #13
 800b35e:	d83b      	bhi.n	800b3d8 <_strtod_l+0x98>
 800b360:	2a08      	cmp	r2, #8
 800b362:	d83b      	bhi.n	800b3dc <_strtod_l+0x9c>
 800b364:	2a00      	cmp	r2, #0
 800b366:	d044      	beq.n	800b3f2 <_strtod_l+0xb2>
 800b368:	2200      	movs	r2, #0
 800b36a:	920f      	str	r2, [sp, #60]	; 0x3c
 800b36c:	2100      	movs	r1, #0
 800b36e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b370:	9109      	str	r1, [sp, #36]	; 0x24
 800b372:	782a      	ldrb	r2, [r5, #0]
 800b374:	2a30      	cmp	r2, #48	; 0x30
 800b376:	d000      	beq.n	800b37a <_strtod_l+0x3a>
 800b378:	e085      	b.n	800b486 <_strtod_l+0x146>
 800b37a:	786a      	ldrb	r2, [r5, #1]
 800b37c:	3120      	adds	r1, #32
 800b37e:	438a      	bics	r2, r1
 800b380:	2a58      	cmp	r2, #88	; 0x58
 800b382:	d000      	beq.n	800b386 <_strtod_l+0x46>
 800b384:	e075      	b.n	800b472 <_strtod_l+0x132>
 800b386:	9302      	str	r3, [sp, #8]
 800b388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b38a:	4a97      	ldr	r2, [pc, #604]	; (800b5e8 <_strtod_l+0x2a8>)
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	ab1c      	add	r3, sp, #112	; 0x70
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	9804      	ldr	r0, [sp, #16]
 800b394:	ab1d      	add	r3, sp, #116	; 0x74
 800b396:	a91b      	add	r1, sp, #108	; 0x6c
 800b398:	f001 fa92 	bl	800c8c0 <__gethex>
 800b39c:	230f      	movs	r3, #15
 800b39e:	0002      	movs	r2, r0
 800b3a0:	401a      	ands	r2, r3
 800b3a2:	0004      	movs	r4, r0
 800b3a4:	9205      	str	r2, [sp, #20]
 800b3a6:	4218      	tst	r0, r3
 800b3a8:	d005      	beq.n	800b3b6 <_strtod_l+0x76>
 800b3aa:	2a06      	cmp	r2, #6
 800b3ac:	d12d      	bne.n	800b40a <_strtod_l+0xca>
 800b3ae:	1c6b      	adds	r3, r5, #1
 800b3b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <_strtod_l+0x82>
 800b3bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d01b      	beq.n	800b400 <_strtod_l+0xc0>
 800b3c8:	2380      	movs	r3, #128	; 0x80
 800b3ca:	0032      	movs	r2, r6
 800b3cc:	061b      	lsls	r3, r3, #24
 800b3ce:	18fb      	adds	r3, r7, r3
 800b3d0:	0010      	movs	r0, r2
 800b3d2:	0019      	movs	r1, r3
 800b3d4:	b021      	add	sp, #132	; 0x84
 800b3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3d8:	2a20      	cmp	r2, #32
 800b3da:	d1c5      	bne.n	800b368 <_strtod_l+0x28>
 800b3dc:	3101      	adds	r1, #1
 800b3de:	e7b8      	b.n	800b352 <_strtod_l+0x12>
 800b3e0:	2a2d      	cmp	r2, #45	; 0x2d
 800b3e2:	d1c1      	bne.n	800b368 <_strtod_l+0x28>
 800b3e4:	3a2c      	subs	r2, #44	; 0x2c
 800b3e6:	920f      	str	r2, [sp, #60]	; 0x3c
 800b3e8:	1c4a      	adds	r2, r1, #1
 800b3ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3ec:	784a      	ldrb	r2, [r1, #1]
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	d1bc      	bne.n	800b36c <_strtod_l+0x2c>
 800b3f2:	9b07      	ldr	r3, [sp, #28]
 800b3f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1dd      	bne.n	800b3bc <_strtod_l+0x7c>
 800b400:	0032      	movs	r2, r6
 800b402:	003b      	movs	r3, r7
 800b404:	e7e4      	b.n	800b3d0 <_strtod_l+0x90>
 800b406:	2200      	movs	r2, #0
 800b408:	e7ed      	b.n	800b3e6 <_strtod_l+0xa6>
 800b40a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b40c:	2a00      	cmp	r2, #0
 800b40e:	d007      	beq.n	800b420 <_strtod_l+0xe0>
 800b410:	2135      	movs	r1, #53	; 0x35
 800b412:	a81e      	add	r0, sp, #120	; 0x78
 800b414:	f002 f97f 	bl	800d716 <__copybits>
 800b418:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b41a:	9804      	ldr	r0, [sp, #16]
 800b41c:	f001 fd7c 	bl	800cf18 <_Bfree>
 800b420:	9805      	ldr	r0, [sp, #20]
 800b422:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b424:	3801      	subs	r0, #1
 800b426:	2804      	cmp	r0, #4
 800b428:	d806      	bhi.n	800b438 <_strtod_l+0xf8>
 800b42a:	f7f4 fe73 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b42e:	0312      	.short	0x0312
 800b430:	1e1c      	.short	0x1e1c
 800b432:	12          	.byte	0x12
 800b433:	00          	.byte	0x00
 800b434:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b436:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b438:	05e4      	lsls	r4, r4, #23
 800b43a:	d502      	bpl.n	800b442 <_strtod_l+0x102>
 800b43c:	2380      	movs	r3, #128	; 0x80
 800b43e:	061b      	lsls	r3, r3, #24
 800b440:	431f      	orrs	r7, r3
 800b442:	4b6a      	ldr	r3, [pc, #424]	; (800b5ec <_strtod_l+0x2ac>)
 800b444:	423b      	tst	r3, r7
 800b446:	d1b6      	bne.n	800b3b6 <_strtod_l+0x76>
 800b448:	f001 f86a 	bl	800c520 <__errno>
 800b44c:	2322      	movs	r3, #34	; 0x22
 800b44e:	6003      	str	r3, [r0, #0]
 800b450:	e7b1      	b.n	800b3b6 <_strtod_l+0x76>
 800b452:	4967      	ldr	r1, [pc, #412]	; (800b5f0 <_strtod_l+0x2b0>)
 800b454:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b456:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b458:	400a      	ands	r2, r1
 800b45a:	4966      	ldr	r1, [pc, #408]	; (800b5f4 <_strtod_l+0x2b4>)
 800b45c:	185b      	adds	r3, r3, r1
 800b45e:	051b      	lsls	r3, r3, #20
 800b460:	431a      	orrs	r2, r3
 800b462:	0017      	movs	r7, r2
 800b464:	e7e8      	b.n	800b438 <_strtod_l+0xf8>
 800b466:	4f61      	ldr	r7, [pc, #388]	; (800b5ec <_strtod_l+0x2ac>)
 800b468:	e7e6      	b.n	800b438 <_strtod_l+0xf8>
 800b46a:	2601      	movs	r6, #1
 800b46c:	4f62      	ldr	r7, [pc, #392]	; (800b5f8 <_strtod_l+0x2b8>)
 800b46e:	4276      	negs	r6, r6
 800b470:	e7e2      	b.n	800b438 <_strtod_l+0xf8>
 800b472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	921b      	str	r2, [sp, #108]	; 0x6c
 800b478:	785b      	ldrb	r3, [r3, #1]
 800b47a:	2b30      	cmp	r3, #48	; 0x30
 800b47c:	d0f9      	beq.n	800b472 <_strtod_l+0x132>
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d099      	beq.n	800b3b6 <_strtod_l+0x76>
 800b482:	2301      	movs	r3, #1
 800b484:	9309      	str	r3, [sp, #36]	; 0x24
 800b486:	2500      	movs	r5, #0
 800b488:	220a      	movs	r2, #10
 800b48a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b48c:	950d      	str	r5, [sp, #52]	; 0x34
 800b48e:	9310      	str	r3, [sp, #64]	; 0x40
 800b490:	9508      	str	r5, [sp, #32]
 800b492:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b494:	7804      	ldrb	r4, [r0, #0]
 800b496:	0023      	movs	r3, r4
 800b498:	3b30      	subs	r3, #48	; 0x30
 800b49a:	b2d9      	uxtb	r1, r3
 800b49c:	2909      	cmp	r1, #9
 800b49e:	d927      	bls.n	800b4f0 <_strtod_l+0x1b0>
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	4956      	ldr	r1, [pc, #344]	; (800b5fc <_strtod_l+0x2bc>)
 800b4a4:	f000 ff98 	bl	800c3d8 <strncmp>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d031      	beq.n	800b510 <_strtod_l+0x1d0>
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	0023      	movs	r3, r4
 800b4b0:	4684      	mov	ip, r0
 800b4b2:	9a08      	ldr	r2, [sp, #32]
 800b4b4:	900c      	str	r0, [sp, #48]	; 0x30
 800b4b6:	9205      	str	r2, [sp, #20]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	0019      	movs	r1, r3
 800b4bc:	4391      	bics	r1, r2
 800b4be:	000a      	movs	r2, r1
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	9106      	str	r1, [sp, #24]
 800b4c4:	2a45      	cmp	r2, #69	; 0x45
 800b4c6:	d000      	beq.n	800b4ca <_strtod_l+0x18a>
 800b4c8:	e0c2      	b.n	800b650 <_strtod_l+0x310>
 800b4ca:	9b05      	ldr	r3, [sp, #20]
 800b4cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ce:	4303      	orrs	r3, r0
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	428b      	cmp	r3, r1
 800b4d4:	d08d      	beq.n	800b3f2 <_strtod_l+0xb2>
 800b4d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4d8:	9307      	str	r3, [sp, #28]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800b4de:	9b07      	ldr	r3, [sp, #28]
 800b4e0:	785b      	ldrb	r3, [r3, #1]
 800b4e2:	2b2b      	cmp	r3, #43	; 0x2b
 800b4e4:	d071      	beq.n	800b5ca <_strtod_l+0x28a>
 800b4e6:	000c      	movs	r4, r1
 800b4e8:	2b2d      	cmp	r3, #45	; 0x2d
 800b4ea:	d174      	bne.n	800b5d6 <_strtod_l+0x296>
 800b4ec:	2401      	movs	r4, #1
 800b4ee:	e06d      	b.n	800b5cc <_strtod_l+0x28c>
 800b4f0:	9908      	ldr	r1, [sp, #32]
 800b4f2:	2908      	cmp	r1, #8
 800b4f4:	dc09      	bgt.n	800b50a <_strtod_l+0x1ca>
 800b4f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b4f8:	4351      	muls	r1, r2
 800b4fa:	185b      	adds	r3, r3, r1
 800b4fc:	930d      	str	r3, [sp, #52]	; 0x34
 800b4fe:	9b08      	ldr	r3, [sp, #32]
 800b500:	3001      	adds	r0, #1
 800b502:	3301      	adds	r3, #1
 800b504:	9308      	str	r3, [sp, #32]
 800b506:	901b      	str	r0, [sp, #108]	; 0x6c
 800b508:	e7c3      	b.n	800b492 <_strtod_l+0x152>
 800b50a:	4355      	muls	r5, r2
 800b50c:	195d      	adds	r5, r3, r5
 800b50e:	e7f6      	b.n	800b4fe <_strtod_l+0x1be>
 800b510:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	921b      	str	r2, [sp, #108]	; 0x6c
 800b516:	9a08      	ldr	r2, [sp, #32]
 800b518:	785b      	ldrb	r3, [r3, #1]
 800b51a:	2a00      	cmp	r2, #0
 800b51c:	d03a      	beq.n	800b594 <_strtod_l+0x254>
 800b51e:	900c      	str	r0, [sp, #48]	; 0x30
 800b520:	9205      	str	r2, [sp, #20]
 800b522:	001a      	movs	r2, r3
 800b524:	3a30      	subs	r2, #48	; 0x30
 800b526:	2a09      	cmp	r2, #9
 800b528:	d912      	bls.n	800b550 <_strtod_l+0x210>
 800b52a:	2201      	movs	r2, #1
 800b52c:	4694      	mov	ip, r2
 800b52e:	e7c3      	b.n	800b4b8 <_strtod_l+0x178>
 800b530:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b532:	3001      	adds	r0, #1
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	921b      	str	r2, [sp, #108]	; 0x6c
 800b538:	785b      	ldrb	r3, [r3, #1]
 800b53a:	2b30      	cmp	r3, #48	; 0x30
 800b53c:	d0f8      	beq.n	800b530 <_strtod_l+0x1f0>
 800b53e:	001a      	movs	r2, r3
 800b540:	3a31      	subs	r2, #49	; 0x31
 800b542:	2a08      	cmp	r2, #8
 800b544:	d83c      	bhi.n	800b5c0 <_strtod_l+0x280>
 800b546:	900c      	str	r0, [sp, #48]	; 0x30
 800b548:	2000      	movs	r0, #0
 800b54a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b54c:	9005      	str	r0, [sp, #20]
 800b54e:	9210      	str	r2, [sp, #64]	; 0x40
 800b550:	001a      	movs	r2, r3
 800b552:	1c41      	adds	r1, r0, #1
 800b554:	3a30      	subs	r2, #48	; 0x30
 800b556:	2b30      	cmp	r3, #48	; 0x30
 800b558:	d016      	beq.n	800b588 <_strtod_l+0x248>
 800b55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b55c:	185b      	adds	r3, r3, r1
 800b55e:	930c      	str	r3, [sp, #48]	; 0x30
 800b560:	9b05      	ldr	r3, [sp, #20]
 800b562:	210a      	movs	r1, #10
 800b564:	469c      	mov	ip, r3
 800b566:	4484      	add	ip, r0
 800b568:	4563      	cmp	r3, ip
 800b56a:	d115      	bne.n	800b598 <_strtod_l+0x258>
 800b56c:	9905      	ldr	r1, [sp, #20]
 800b56e:	9b05      	ldr	r3, [sp, #20]
 800b570:	3101      	adds	r1, #1
 800b572:	1809      	adds	r1, r1, r0
 800b574:	181b      	adds	r3, r3, r0
 800b576:	9105      	str	r1, [sp, #20]
 800b578:	2b08      	cmp	r3, #8
 800b57a:	dc19      	bgt.n	800b5b0 <_strtod_l+0x270>
 800b57c:	230a      	movs	r3, #10
 800b57e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b580:	434b      	muls	r3, r1
 800b582:	2100      	movs	r1, #0
 800b584:	18d3      	adds	r3, r2, r3
 800b586:	930d      	str	r3, [sp, #52]	; 0x34
 800b588:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b58a:	0008      	movs	r0, r1
 800b58c:	1c5a      	adds	r2, r3, #1
 800b58e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	e7c6      	b.n	800b522 <_strtod_l+0x1e2>
 800b594:	9808      	ldr	r0, [sp, #32]
 800b596:	e7d0      	b.n	800b53a <_strtod_l+0x1fa>
 800b598:	1c5c      	adds	r4, r3, #1
 800b59a:	2b08      	cmp	r3, #8
 800b59c:	dc04      	bgt.n	800b5a8 <_strtod_l+0x268>
 800b59e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5a0:	434b      	muls	r3, r1
 800b5a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b5a4:	0023      	movs	r3, r4
 800b5a6:	e7df      	b.n	800b568 <_strtod_l+0x228>
 800b5a8:	2c10      	cmp	r4, #16
 800b5aa:	dcfb      	bgt.n	800b5a4 <_strtod_l+0x264>
 800b5ac:	434d      	muls	r5, r1
 800b5ae:	e7f9      	b.n	800b5a4 <_strtod_l+0x264>
 800b5b0:	9b05      	ldr	r3, [sp, #20]
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	2b10      	cmp	r3, #16
 800b5b6:	dce7      	bgt.n	800b588 <_strtod_l+0x248>
 800b5b8:	230a      	movs	r3, #10
 800b5ba:	435d      	muls	r5, r3
 800b5bc:	1955      	adds	r5, r2, r5
 800b5be:	e7e3      	b.n	800b588 <_strtod_l+0x248>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	920c      	str	r2, [sp, #48]	; 0x30
 800b5c4:	9205      	str	r2, [sp, #20]
 800b5c6:	3201      	adds	r2, #1
 800b5c8:	e7b0      	b.n	800b52c <_strtod_l+0x1ec>
 800b5ca:	2400      	movs	r4, #0
 800b5cc:	9b07      	ldr	r3, [sp, #28]
 800b5ce:	3302      	adds	r3, #2
 800b5d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b5d2:	9b07      	ldr	r3, [sp, #28]
 800b5d4:	789b      	ldrb	r3, [r3, #2]
 800b5d6:	001a      	movs	r2, r3
 800b5d8:	3a30      	subs	r2, #48	; 0x30
 800b5da:	2a09      	cmp	r2, #9
 800b5dc:	d914      	bls.n	800b608 <_strtod_l+0x2c8>
 800b5de:	9a07      	ldr	r2, [sp, #28]
 800b5e0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	e033      	b.n	800b64e <_strtod_l+0x30e>
 800b5e6:	46c0      	nop			; (mov r8, r8)
 800b5e8:	0801491c 	.word	0x0801491c
 800b5ec:	7ff00000 	.word	0x7ff00000
 800b5f0:	ffefffff 	.word	0xffefffff
 800b5f4:	00000433 	.word	0x00000433
 800b5f8:	7fffffff 	.word	0x7fffffff
 800b5fc:	08014918 	.word	0x08014918
 800b600:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	921b      	str	r2, [sp, #108]	; 0x6c
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	2b30      	cmp	r3, #48	; 0x30
 800b60a:	d0f9      	beq.n	800b600 <_strtod_l+0x2c0>
 800b60c:	2200      	movs	r2, #0
 800b60e:	9206      	str	r2, [sp, #24]
 800b610:	001a      	movs	r2, r3
 800b612:	3a31      	subs	r2, #49	; 0x31
 800b614:	2a08      	cmp	r2, #8
 800b616:	d81b      	bhi.n	800b650 <_strtod_l+0x310>
 800b618:	3b30      	subs	r3, #48	; 0x30
 800b61a:	930e      	str	r3, [sp, #56]	; 0x38
 800b61c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b61e:	9306      	str	r3, [sp, #24]
 800b620:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b622:	1c59      	adds	r1, r3, #1
 800b624:	911b      	str	r1, [sp, #108]	; 0x6c
 800b626:	785b      	ldrb	r3, [r3, #1]
 800b628:	001a      	movs	r2, r3
 800b62a:	3a30      	subs	r2, #48	; 0x30
 800b62c:	2a09      	cmp	r2, #9
 800b62e:	d93a      	bls.n	800b6a6 <_strtod_l+0x366>
 800b630:	9a06      	ldr	r2, [sp, #24]
 800b632:	1a8a      	subs	r2, r1, r2
 800b634:	49b2      	ldr	r1, [pc, #712]	; (800b900 <_strtod_l+0x5c0>)
 800b636:	9106      	str	r1, [sp, #24]
 800b638:	2a08      	cmp	r2, #8
 800b63a:	dc04      	bgt.n	800b646 <_strtod_l+0x306>
 800b63c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b63e:	9206      	str	r2, [sp, #24]
 800b640:	428a      	cmp	r2, r1
 800b642:	dd00      	ble.n	800b646 <_strtod_l+0x306>
 800b644:	9106      	str	r1, [sp, #24]
 800b646:	2c00      	cmp	r4, #0
 800b648:	d002      	beq.n	800b650 <_strtod_l+0x310>
 800b64a:	9a06      	ldr	r2, [sp, #24]
 800b64c:	4252      	negs	r2, r2
 800b64e:	9206      	str	r2, [sp, #24]
 800b650:	9a05      	ldr	r2, [sp, #20]
 800b652:	2a00      	cmp	r2, #0
 800b654:	d14d      	bne.n	800b6f2 <_strtod_l+0x3b2>
 800b656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b658:	4310      	orrs	r0, r2
 800b65a:	d000      	beq.n	800b65e <_strtod_l+0x31e>
 800b65c:	e6ab      	b.n	800b3b6 <_strtod_l+0x76>
 800b65e:	4662      	mov	r2, ip
 800b660:	2a00      	cmp	r2, #0
 800b662:	d000      	beq.n	800b666 <_strtod_l+0x326>
 800b664:	e6c5      	b.n	800b3f2 <_strtod_l+0xb2>
 800b666:	2b69      	cmp	r3, #105	; 0x69
 800b668:	d027      	beq.n	800b6ba <_strtod_l+0x37a>
 800b66a:	dc23      	bgt.n	800b6b4 <_strtod_l+0x374>
 800b66c:	2b49      	cmp	r3, #73	; 0x49
 800b66e:	d024      	beq.n	800b6ba <_strtod_l+0x37a>
 800b670:	2b4e      	cmp	r3, #78	; 0x4e
 800b672:	d000      	beq.n	800b676 <_strtod_l+0x336>
 800b674:	e6bd      	b.n	800b3f2 <_strtod_l+0xb2>
 800b676:	49a3      	ldr	r1, [pc, #652]	; (800b904 <_strtod_l+0x5c4>)
 800b678:	a81b      	add	r0, sp, #108	; 0x6c
 800b67a:	f001 fb57 	bl	800cd2c <__match>
 800b67e:	2800      	cmp	r0, #0
 800b680:	d100      	bne.n	800b684 <_strtod_l+0x344>
 800b682:	e6b6      	b.n	800b3f2 <_strtod_l+0xb2>
 800b684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b28      	cmp	r3, #40	; 0x28
 800b68a:	d12c      	bne.n	800b6e6 <_strtod_l+0x3a6>
 800b68c:	499e      	ldr	r1, [pc, #632]	; (800b908 <_strtod_l+0x5c8>)
 800b68e:	aa1e      	add	r2, sp, #120	; 0x78
 800b690:	a81b      	add	r0, sp, #108	; 0x6c
 800b692:	f001 fb5f 	bl	800cd54 <__hexnan>
 800b696:	2805      	cmp	r0, #5
 800b698:	d125      	bne.n	800b6e6 <_strtod_l+0x3a6>
 800b69a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b69c:	4a9b      	ldr	r2, [pc, #620]	; (800b90c <_strtod_l+0x5cc>)
 800b69e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b6a0:	431a      	orrs	r2, r3
 800b6a2:	0017      	movs	r7, r2
 800b6a4:	e687      	b.n	800b3b6 <_strtod_l+0x76>
 800b6a6:	220a      	movs	r2, #10
 800b6a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b6aa:	434a      	muls	r2, r1
 800b6ac:	18d2      	adds	r2, r2, r3
 800b6ae:	3a30      	subs	r2, #48	; 0x30
 800b6b0:	920e      	str	r2, [sp, #56]	; 0x38
 800b6b2:	e7b5      	b.n	800b620 <_strtod_l+0x2e0>
 800b6b4:	2b6e      	cmp	r3, #110	; 0x6e
 800b6b6:	d0de      	beq.n	800b676 <_strtod_l+0x336>
 800b6b8:	e69b      	b.n	800b3f2 <_strtod_l+0xb2>
 800b6ba:	4995      	ldr	r1, [pc, #596]	; (800b910 <_strtod_l+0x5d0>)
 800b6bc:	a81b      	add	r0, sp, #108	; 0x6c
 800b6be:	f001 fb35 	bl	800cd2c <__match>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d100      	bne.n	800b6c8 <_strtod_l+0x388>
 800b6c6:	e694      	b.n	800b3f2 <_strtod_l+0xb2>
 800b6c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6ca:	4992      	ldr	r1, [pc, #584]	; (800b914 <_strtod_l+0x5d4>)
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	a81b      	add	r0, sp, #108	; 0x6c
 800b6d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b6d2:	f001 fb2b 	bl	800cd2c <__match>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d102      	bne.n	800b6e0 <_strtod_l+0x3a0>
 800b6da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6dc:	3301      	adds	r3, #1
 800b6de:	931b      	str	r3, [sp, #108]	; 0x6c
 800b6e0:	2600      	movs	r6, #0
 800b6e2:	4f8a      	ldr	r7, [pc, #552]	; (800b90c <_strtod_l+0x5cc>)
 800b6e4:	e667      	b.n	800b3b6 <_strtod_l+0x76>
 800b6e6:	488c      	ldr	r0, [pc, #560]	; (800b918 <_strtod_l+0x5d8>)
 800b6e8:	f000 ff5c 	bl	800c5a4 <nan>
 800b6ec:	0006      	movs	r6, r0
 800b6ee:	000f      	movs	r7, r1
 800b6f0:	e661      	b.n	800b3b6 <_strtod_l+0x76>
 800b6f2:	9b06      	ldr	r3, [sp, #24]
 800b6f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6f6:	1a9b      	subs	r3, r3, r2
 800b6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fa:	9b08      	ldr	r3, [sp, #32]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <_strtod_l+0x3c4>
 800b700:	9b05      	ldr	r3, [sp, #20]
 800b702:	9308      	str	r3, [sp, #32]
 800b704:	9c05      	ldr	r4, [sp, #20]
 800b706:	2c10      	cmp	r4, #16
 800b708:	dd00      	ble.n	800b70c <_strtod_l+0x3cc>
 800b70a:	2410      	movs	r4, #16
 800b70c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b70e:	f7f6 fe75 	bl	80023fc <__aeabi_ui2d>
 800b712:	9b05      	ldr	r3, [sp, #20]
 800b714:	0006      	movs	r6, r0
 800b716:	000f      	movs	r7, r1
 800b718:	2b09      	cmp	r3, #9
 800b71a:	dd15      	ble.n	800b748 <_strtod_l+0x408>
 800b71c:	0022      	movs	r2, r4
 800b71e:	4b7f      	ldr	r3, [pc, #508]	; (800b91c <_strtod_l+0x5dc>)
 800b720:	3a09      	subs	r2, #9
 800b722:	00d2      	lsls	r2, r2, #3
 800b724:	189b      	adds	r3, r3, r2
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	f7f5 ff9f 	bl	800166c <__aeabi_dmul>
 800b72e:	0006      	movs	r6, r0
 800b730:	0028      	movs	r0, r5
 800b732:	000f      	movs	r7, r1
 800b734:	f7f6 fe62 	bl	80023fc <__aeabi_ui2d>
 800b738:	0002      	movs	r2, r0
 800b73a:	000b      	movs	r3, r1
 800b73c:	0030      	movs	r0, r6
 800b73e:	0039      	movs	r1, r7
 800b740:	f7f5 f83a 	bl	80007b8 <__aeabi_dadd>
 800b744:	0006      	movs	r6, r0
 800b746:	000f      	movs	r7, r1
 800b748:	9b05      	ldr	r3, [sp, #20]
 800b74a:	2b0f      	cmp	r3, #15
 800b74c:	dc39      	bgt.n	800b7c2 <_strtod_l+0x482>
 800b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b750:	2b00      	cmp	r3, #0
 800b752:	d100      	bne.n	800b756 <_strtod_l+0x416>
 800b754:	e62f      	b.n	800b3b6 <_strtod_l+0x76>
 800b756:	dd24      	ble.n	800b7a2 <_strtod_l+0x462>
 800b758:	2b16      	cmp	r3, #22
 800b75a:	dc09      	bgt.n	800b770 <_strtod_l+0x430>
 800b75c:	496f      	ldr	r1, [pc, #444]	; (800b91c <_strtod_l+0x5dc>)
 800b75e:	00db      	lsls	r3, r3, #3
 800b760:	18c9      	adds	r1, r1, r3
 800b762:	0032      	movs	r2, r6
 800b764:	6808      	ldr	r0, [r1, #0]
 800b766:	6849      	ldr	r1, [r1, #4]
 800b768:	003b      	movs	r3, r7
 800b76a:	f7f5 ff7f 	bl	800166c <__aeabi_dmul>
 800b76e:	e7bd      	b.n	800b6ec <_strtod_l+0x3ac>
 800b770:	2325      	movs	r3, #37	; 0x25
 800b772:	9a05      	ldr	r2, [sp, #20]
 800b774:	1a9b      	subs	r3, r3, r2
 800b776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b778:	4293      	cmp	r3, r2
 800b77a:	db22      	blt.n	800b7c2 <_strtod_l+0x482>
 800b77c:	240f      	movs	r4, #15
 800b77e:	9b05      	ldr	r3, [sp, #20]
 800b780:	4d66      	ldr	r5, [pc, #408]	; (800b91c <_strtod_l+0x5dc>)
 800b782:	1ae4      	subs	r4, r4, r3
 800b784:	00e1      	lsls	r1, r4, #3
 800b786:	1869      	adds	r1, r5, r1
 800b788:	0032      	movs	r2, r6
 800b78a:	6808      	ldr	r0, [r1, #0]
 800b78c:	6849      	ldr	r1, [r1, #4]
 800b78e:	003b      	movs	r3, r7
 800b790:	f7f5 ff6c 	bl	800166c <__aeabi_dmul>
 800b794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b796:	1b1c      	subs	r4, r3, r4
 800b798:	00e4      	lsls	r4, r4, #3
 800b79a:	192d      	adds	r5, r5, r4
 800b79c:	682a      	ldr	r2, [r5, #0]
 800b79e:	686b      	ldr	r3, [r5, #4]
 800b7a0:	e7e3      	b.n	800b76a <_strtod_l+0x42a>
 800b7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a4:	3316      	adds	r3, #22
 800b7a6:	db0c      	blt.n	800b7c2 <_strtod_l+0x482>
 800b7a8:	9906      	ldr	r1, [sp, #24]
 800b7aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7ac:	4b5b      	ldr	r3, [pc, #364]	; (800b91c <_strtod_l+0x5dc>)
 800b7ae:	1a52      	subs	r2, r2, r1
 800b7b0:	00d2      	lsls	r2, r2, #3
 800b7b2:	189b      	adds	r3, r3, r2
 800b7b4:	0030      	movs	r0, r6
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	0039      	movs	r1, r7
 800b7bc:	f7f5 fb5c 	bl	8000e78 <__aeabi_ddiv>
 800b7c0:	e794      	b.n	800b6ec <_strtod_l+0x3ac>
 800b7c2:	9b05      	ldr	r3, [sp, #20]
 800b7c4:	1b1c      	subs	r4, r3, r4
 800b7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c8:	18e4      	adds	r4, r4, r3
 800b7ca:	2c00      	cmp	r4, #0
 800b7cc:	dd72      	ble.n	800b8b4 <_strtod_l+0x574>
 800b7ce:	220f      	movs	r2, #15
 800b7d0:	0023      	movs	r3, r4
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	4214      	tst	r4, r2
 800b7d6:	d00a      	beq.n	800b7ee <_strtod_l+0x4ae>
 800b7d8:	4950      	ldr	r1, [pc, #320]	; (800b91c <_strtod_l+0x5dc>)
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	18c9      	adds	r1, r1, r3
 800b7de:	0032      	movs	r2, r6
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	6849      	ldr	r1, [r1, #4]
 800b7e4:	003b      	movs	r3, r7
 800b7e6:	f7f5 ff41 	bl	800166c <__aeabi_dmul>
 800b7ea:	0006      	movs	r6, r0
 800b7ec:	000f      	movs	r7, r1
 800b7ee:	230f      	movs	r3, #15
 800b7f0:	439c      	bics	r4, r3
 800b7f2:	d04a      	beq.n	800b88a <_strtod_l+0x54a>
 800b7f4:	3326      	adds	r3, #38	; 0x26
 800b7f6:	33ff      	adds	r3, #255	; 0xff
 800b7f8:	429c      	cmp	r4, r3
 800b7fa:	dd22      	ble.n	800b842 <_strtod_l+0x502>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9305      	str	r3, [sp, #20]
 800b800:	9306      	str	r3, [sp, #24]
 800b802:	930d      	str	r3, [sp, #52]	; 0x34
 800b804:	9308      	str	r3, [sp, #32]
 800b806:	2322      	movs	r3, #34	; 0x22
 800b808:	2600      	movs	r6, #0
 800b80a:	9a04      	ldr	r2, [sp, #16]
 800b80c:	4f3f      	ldr	r7, [pc, #252]	; (800b90c <_strtod_l+0x5cc>)
 800b80e:	6013      	str	r3, [r2, #0]
 800b810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b812:	42b3      	cmp	r3, r6
 800b814:	d100      	bne.n	800b818 <_strtod_l+0x4d8>
 800b816:	e5ce      	b.n	800b3b6 <_strtod_l+0x76>
 800b818:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b81a:	9804      	ldr	r0, [sp, #16]
 800b81c:	f001 fb7c 	bl	800cf18 <_Bfree>
 800b820:	9908      	ldr	r1, [sp, #32]
 800b822:	9804      	ldr	r0, [sp, #16]
 800b824:	f001 fb78 	bl	800cf18 <_Bfree>
 800b828:	9906      	ldr	r1, [sp, #24]
 800b82a:	9804      	ldr	r0, [sp, #16]
 800b82c:	f001 fb74 	bl	800cf18 <_Bfree>
 800b830:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b832:	9804      	ldr	r0, [sp, #16]
 800b834:	f001 fb70 	bl	800cf18 <_Bfree>
 800b838:	9905      	ldr	r1, [sp, #20]
 800b83a:	9804      	ldr	r0, [sp, #16]
 800b83c:	f001 fb6c 	bl	800cf18 <_Bfree>
 800b840:	e5b9      	b.n	800b3b6 <_strtod_l+0x76>
 800b842:	2300      	movs	r3, #0
 800b844:	0030      	movs	r0, r6
 800b846:	0039      	movs	r1, r7
 800b848:	4d35      	ldr	r5, [pc, #212]	; (800b920 <_strtod_l+0x5e0>)
 800b84a:	1124      	asrs	r4, r4, #4
 800b84c:	9307      	str	r3, [sp, #28]
 800b84e:	2c01      	cmp	r4, #1
 800b850:	dc1e      	bgt.n	800b890 <_strtod_l+0x550>
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <_strtod_l+0x51a>
 800b856:	0006      	movs	r6, r0
 800b858:	000f      	movs	r7, r1
 800b85a:	4b32      	ldr	r3, [pc, #200]	; (800b924 <_strtod_l+0x5e4>)
 800b85c:	9a07      	ldr	r2, [sp, #28]
 800b85e:	18ff      	adds	r7, r7, r3
 800b860:	4b2f      	ldr	r3, [pc, #188]	; (800b920 <_strtod_l+0x5e0>)
 800b862:	00d2      	lsls	r2, r2, #3
 800b864:	189d      	adds	r5, r3, r2
 800b866:	6828      	ldr	r0, [r5, #0]
 800b868:	6869      	ldr	r1, [r5, #4]
 800b86a:	0032      	movs	r2, r6
 800b86c:	003b      	movs	r3, r7
 800b86e:	f7f5 fefd 	bl	800166c <__aeabi_dmul>
 800b872:	4b26      	ldr	r3, [pc, #152]	; (800b90c <_strtod_l+0x5cc>)
 800b874:	4a2c      	ldr	r2, [pc, #176]	; (800b928 <_strtod_l+0x5e8>)
 800b876:	0006      	movs	r6, r0
 800b878:	400b      	ands	r3, r1
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d8be      	bhi.n	800b7fc <_strtod_l+0x4bc>
 800b87e:	4a2b      	ldr	r2, [pc, #172]	; (800b92c <_strtod_l+0x5ec>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d913      	bls.n	800b8ac <_strtod_l+0x56c>
 800b884:	2601      	movs	r6, #1
 800b886:	4f2a      	ldr	r7, [pc, #168]	; (800b930 <_strtod_l+0x5f0>)
 800b888:	4276      	negs	r6, r6
 800b88a:	2300      	movs	r3, #0
 800b88c:	9307      	str	r3, [sp, #28]
 800b88e:	e088      	b.n	800b9a2 <_strtod_l+0x662>
 800b890:	2201      	movs	r2, #1
 800b892:	4214      	tst	r4, r2
 800b894:	d004      	beq.n	800b8a0 <_strtod_l+0x560>
 800b896:	682a      	ldr	r2, [r5, #0]
 800b898:	686b      	ldr	r3, [r5, #4]
 800b89a:	f7f5 fee7 	bl	800166c <__aeabi_dmul>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	9a07      	ldr	r2, [sp, #28]
 800b8a2:	1064      	asrs	r4, r4, #1
 800b8a4:	3201      	adds	r2, #1
 800b8a6:	9207      	str	r2, [sp, #28]
 800b8a8:	3508      	adds	r5, #8
 800b8aa:	e7d0      	b.n	800b84e <_strtod_l+0x50e>
 800b8ac:	23d4      	movs	r3, #212	; 0xd4
 800b8ae:	049b      	lsls	r3, r3, #18
 800b8b0:	18cf      	adds	r7, r1, r3
 800b8b2:	e7ea      	b.n	800b88a <_strtod_l+0x54a>
 800b8b4:	2c00      	cmp	r4, #0
 800b8b6:	d0e8      	beq.n	800b88a <_strtod_l+0x54a>
 800b8b8:	4264      	negs	r4, r4
 800b8ba:	230f      	movs	r3, #15
 800b8bc:	0022      	movs	r2, r4
 800b8be:	401a      	ands	r2, r3
 800b8c0:	421c      	tst	r4, r3
 800b8c2:	d00a      	beq.n	800b8da <_strtod_l+0x59a>
 800b8c4:	4b15      	ldr	r3, [pc, #84]	; (800b91c <_strtod_l+0x5dc>)
 800b8c6:	00d2      	lsls	r2, r2, #3
 800b8c8:	189b      	adds	r3, r3, r2
 800b8ca:	0030      	movs	r0, r6
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	0039      	movs	r1, r7
 800b8d2:	f7f5 fad1 	bl	8000e78 <__aeabi_ddiv>
 800b8d6:	0006      	movs	r6, r0
 800b8d8:	000f      	movs	r7, r1
 800b8da:	1124      	asrs	r4, r4, #4
 800b8dc:	d0d5      	beq.n	800b88a <_strtod_l+0x54a>
 800b8de:	2c1f      	cmp	r4, #31
 800b8e0:	dd28      	ble.n	800b934 <_strtod_l+0x5f4>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9305      	str	r3, [sp, #20]
 800b8e6:	9306      	str	r3, [sp, #24]
 800b8e8:	930d      	str	r3, [sp, #52]	; 0x34
 800b8ea:	9308      	str	r3, [sp, #32]
 800b8ec:	2322      	movs	r3, #34	; 0x22
 800b8ee:	9a04      	ldr	r2, [sp, #16]
 800b8f0:	2600      	movs	r6, #0
 800b8f2:	6013      	str	r3, [r2, #0]
 800b8f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8f6:	2700      	movs	r7, #0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d18d      	bne.n	800b818 <_strtod_l+0x4d8>
 800b8fc:	e55b      	b.n	800b3b6 <_strtod_l+0x76>
 800b8fe:	46c0      	nop			; (mov r8, r8)
 800b900:	00004e1f 	.word	0x00004e1f
 800b904:	08014c51 	.word	0x08014c51
 800b908:	08014930 	.word	0x08014930
 800b90c:	7ff00000 	.word	0x7ff00000
 800b910:	08014c49 	.word	0x08014c49
 800b914:	08014cff 	.word	0x08014cff
 800b918:	08014cfb 	.word	0x08014cfb
 800b91c:	08014b70 	.word	0x08014b70
 800b920:	08014b48 	.word	0x08014b48
 800b924:	fcb00000 	.word	0xfcb00000
 800b928:	7ca00000 	.word	0x7ca00000
 800b92c:	7c900000 	.word	0x7c900000
 800b930:	7fefffff 	.word	0x7fefffff
 800b934:	2310      	movs	r3, #16
 800b936:	0022      	movs	r2, r4
 800b938:	401a      	ands	r2, r3
 800b93a:	9207      	str	r2, [sp, #28]
 800b93c:	421c      	tst	r4, r3
 800b93e:	d001      	beq.n	800b944 <_strtod_l+0x604>
 800b940:	335a      	adds	r3, #90	; 0x5a
 800b942:	9307      	str	r3, [sp, #28]
 800b944:	0030      	movs	r0, r6
 800b946:	0039      	movs	r1, r7
 800b948:	2300      	movs	r3, #0
 800b94a:	4dc4      	ldr	r5, [pc, #784]	; (800bc5c <_strtod_l+0x91c>)
 800b94c:	2201      	movs	r2, #1
 800b94e:	4214      	tst	r4, r2
 800b950:	d004      	beq.n	800b95c <_strtod_l+0x61c>
 800b952:	682a      	ldr	r2, [r5, #0]
 800b954:	686b      	ldr	r3, [r5, #4]
 800b956:	f7f5 fe89 	bl	800166c <__aeabi_dmul>
 800b95a:	2301      	movs	r3, #1
 800b95c:	1064      	asrs	r4, r4, #1
 800b95e:	3508      	adds	r5, #8
 800b960:	2c00      	cmp	r4, #0
 800b962:	d1f3      	bne.n	800b94c <_strtod_l+0x60c>
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <_strtod_l+0x62c>
 800b968:	0006      	movs	r6, r0
 800b96a:	000f      	movs	r7, r1
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00f      	beq.n	800b992 <_strtod_l+0x652>
 800b972:	236b      	movs	r3, #107	; 0x6b
 800b974:	007a      	lsls	r2, r7, #1
 800b976:	0d52      	lsrs	r2, r2, #21
 800b978:	0039      	movs	r1, r7
 800b97a:	1a9b      	subs	r3, r3, r2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	dd08      	ble.n	800b992 <_strtod_l+0x652>
 800b980:	2b1f      	cmp	r3, #31
 800b982:	dc00      	bgt.n	800b986 <_strtod_l+0x646>
 800b984:	e121      	b.n	800bbca <_strtod_l+0x88a>
 800b986:	2600      	movs	r6, #0
 800b988:	2b34      	cmp	r3, #52	; 0x34
 800b98a:	dc00      	bgt.n	800b98e <_strtod_l+0x64e>
 800b98c:	e116      	b.n	800bbbc <_strtod_l+0x87c>
 800b98e:	27dc      	movs	r7, #220	; 0xdc
 800b990:	04bf      	lsls	r7, r7, #18
 800b992:	2200      	movs	r2, #0
 800b994:	2300      	movs	r3, #0
 800b996:	0030      	movs	r0, r6
 800b998:	0039      	movs	r1, r7
 800b99a:	f7f4 fd55 	bl	8000448 <__aeabi_dcmpeq>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d19f      	bne.n	800b8e2 <_strtod_l+0x5a2>
 800b9a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9a4:	9a08      	ldr	r2, [sp, #32]
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b9aa:	9b05      	ldr	r3, [sp, #20]
 800b9ac:	9804      	ldr	r0, [sp, #16]
 800b9ae:	f001 fb01 	bl	800cfb4 <__s2b>
 800b9b2:	900d      	str	r0, [sp, #52]	; 0x34
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d100      	bne.n	800b9ba <_strtod_l+0x67a>
 800b9b8:	e720      	b.n	800b7fc <_strtod_l+0x4bc>
 800b9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9bc:	9906      	ldr	r1, [sp, #24]
 800b9be:	17da      	asrs	r2, r3, #31
 800b9c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9c2:	1a5b      	subs	r3, r3, r1
 800b9c4:	401a      	ands	r2, r3
 800b9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c8:	9215      	str	r2, [sp, #84]	; 0x54
 800b9ca:	43db      	mvns	r3, r3
 800b9cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9ce:	17db      	asrs	r3, r3, #31
 800b9d0:	401a      	ands	r2, r3
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	9218      	str	r2, [sp, #96]	; 0x60
 800b9d6:	9305      	str	r3, [sp, #20]
 800b9d8:	9306      	str	r3, [sp, #24]
 800b9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9dc:	9804      	ldr	r0, [sp, #16]
 800b9de:	6859      	ldr	r1, [r3, #4]
 800b9e0:	f001 fa72 	bl	800cec8 <_Balloc>
 800b9e4:	9008      	str	r0, [sp, #32]
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d100      	bne.n	800b9ec <_strtod_l+0x6ac>
 800b9ea:	e70c      	b.n	800b806 <_strtod_l+0x4c6>
 800b9ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9ee:	300c      	adds	r0, #12
 800b9f0:	0019      	movs	r1, r3
 800b9f2:	691a      	ldr	r2, [r3, #16]
 800b9f4:	310c      	adds	r1, #12
 800b9f6:	3202      	adds	r2, #2
 800b9f8:	0092      	lsls	r2, r2, #2
 800b9fa:	f000 fdca 	bl	800c592 <memcpy>
 800b9fe:	ab1e      	add	r3, sp, #120	; 0x78
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	ab1d      	add	r3, sp, #116	; 0x74
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	0032      	movs	r2, r6
 800ba08:	003b      	movs	r3, r7
 800ba0a:	9804      	ldr	r0, [sp, #16]
 800ba0c:	9610      	str	r6, [sp, #64]	; 0x40
 800ba0e:	9711      	str	r7, [sp, #68]	; 0x44
 800ba10:	f001 fdf8 	bl	800d604 <__d2b>
 800ba14:	901c      	str	r0, [sp, #112]	; 0x70
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d100      	bne.n	800ba1c <_strtod_l+0x6dc>
 800ba1a:	e6f4      	b.n	800b806 <_strtod_l+0x4c6>
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	9804      	ldr	r0, [sp, #16]
 800ba20:	f001 fb5c 	bl	800d0dc <__i2b>
 800ba24:	9006      	str	r0, [sp, #24]
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d100      	bne.n	800ba2c <_strtod_l+0x6ec>
 800ba2a:	e6ec      	b.n	800b806 <_strtod_l+0x4c6>
 800ba2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ba30:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ba32:	1ad4      	subs	r4, r2, r3
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	db01      	blt.n	800ba3c <_strtod_l+0x6fc>
 800ba38:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ba3a:	195d      	adds	r5, r3, r5
 800ba3c:	9907      	ldr	r1, [sp, #28]
 800ba3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ba40:	1a5b      	subs	r3, r3, r1
 800ba42:	2136      	movs	r1, #54	; 0x36
 800ba44:	189b      	adds	r3, r3, r2
 800ba46:	1a8a      	subs	r2, r1, r2
 800ba48:	4985      	ldr	r1, [pc, #532]	; (800bc60 <_strtod_l+0x920>)
 800ba4a:	2001      	movs	r0, #1
 800ba4c:	468c      	mov	ip, r1
 800ba4e:	2100      	movs	r1, #0
 800ba50:	3b01      	subs	r3, #1
 800ba52:	9114      	str	r1, [sp, #80]	; 0x50
 800ba54:	9012      	str	r0, [sp, #72]	; 0x48
 800ba56:	4563      	cmp	r3, ip
 800ba58:	da07      	bge.n	800ba6a <_strtod_l+0x72a>
 800ba5a:	4661      	mov	r1, ip
 800ba5c:	1ac9      	subs	r1, r1, r3
 800ba5e:	1a52      	subs	r2, r2, r1
 800ba60:	291f      	cmp	r1, #31
 800ba62:	dd00      	ble.n	800ba66 <_strtod_l+0x726>
 800ba64:	e0b6      	b.n	800bbd4 <_strtod_l+0x894>
 800ba66:	4088      	lsls	r0, r1
 800ba68:	9012      	str	r0, [sp, #72]	; 0x48
 800ba6a:	18ab      	adds	r3, r5, r2
 800ba6c:	930c      	str	r3, [sp, #48]	; 0x30
 800ba6e:	18a4      	adds	r4, r4, r2
 800ba70:	9b07      	ldr	r3, [sp, #28]
 800ba72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba74:	191c      	adds	r4, r3, r4
 800ba76:	002b      	movs	r3, r5
 800ba78:	4295      	cmp	r5, r2
 800ba7a:	dd00      	ble.n	800ba7e <_strtod_l+0x73e>
 800ba7c:	0013      	movs	r3, r2
 800ba7e:	42a3      	cmp	r3, r4
 800ba80:	dd00      	ble.n	800ba84 <_strtod_l+0x744>
 800ba82:	0023      	movs	r3, r4
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dd04      	ble.n	800ba92 <_strtod_l+0x752>
 800ba88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba8a:	1ae4      	subs	r4, r4, r3
 800ba8c:	1ad2      	subs	r2, r2, r3
 800ba8e:	920c      	str	r2, [sp, #48]	; 0x30
 800ba90:	1aed      	subs	r5, r5, r3
 800ba92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	dd17      	ble.n	800bac8 <_strtod_l+0x788>
 800ba98:	001a      	movs	r2, r3
 800ba9a:	9906      	ldr	r1, [sp, #24]
 800ba9c:	9804      	ldr	r0, [sp, #16]
 800ba9e:	f001 fbe5 	bl	800d26c <__pow5mult>
 800baa2:	9006      	str	r0, [sp, #24]
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d100      	bne.n	800baaa <_strtod_l+0x76a>
 800baa8:	e6ad      	b.n	800b806 <_strtod_l+0x4c6>
 800baaa:	0001      	movs	r1, r0
 800baac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800baae:	9804      	ldr	r0, [sp, #16]
 800bab0:	f001 fb2c 	bl	800d10c <__multiply>
 800bab4:	900e      	str	r0, [sp, #56]	; 0x38
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d100      	bne.n	800babc <_strtod_l+0x77c>
 800baba:	e6a4      	b.n	800b806 <_strtod_l+0x4c6>
 800babc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800babe:	9804      	ldr	r0, [sp, #16]
 800bac0:	f001 fa2a 	bl	800cf18 <_Bfree>
 800bac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bac6:	931c      	str	r3, [sp, #112]	; 0x70
 800bac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dd00      	ble.n	800bad0 <_strtod_l+0x790>
 800bace:	e087      	b.n	800bbe0 <_strtod_l+0x8a0>
 800bad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	dd08      	ble.n	800bae8 <_strtod_l+0x7a8>
 800bad6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bad8:	9908      	ldr	r1, [sp, #32]
 800bada:	9804      	ldr	r0, [sp, #16]
 800badc:	f001 fbc6 	bl	800d26c <__pow5mult>
 800bae0:	9008      	str	r0, [sp, #32]
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d100      	bne.n	800bae8 <_strtod_l+0x7a8>
 800bae6:	e68e      	b.n	800b806 <_strtod_l+0x4c6>
 800bae8:	2c00      	cmp	r4, #0
 800baea:	dd08      	ble.n	800bafe <_strtod_l+0x7be>
 800baec:	0022      	movs	r2, r4
 800baee:	9908      	ldr	r1, [sp, #32]
 800baf0:	9804      	ldr	r0, [sp, #16]
 800baf2:	f001 fbfd 	bl	800d2f0 <__lshift>
 800baf6:	9008      	str	r0, [sp, #32]
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d100      	bne.n	800bafe <_strtod_l+0x7be>
 800bafc:	e683      	b.n	800b806 <_strtod_l+0x4c6>
 800bafe:	2d00      	cmp	r5, #0
 800bb00:	dd08      	ble.n	800bb14 <_strtod_l+0x7d4>
 800bb02:	002a      	movs	r2, r5
 800bb04:	9906      	ldr	r1, [sp, #24]
 800bb06:	9804      	ldr	r0, [sp, #16]
 800bb08:	f001 fbf2 	bl	800d2f0 <__lshift>
 800bb0c:	9006      	str	r0, [sp, #24]
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d100      	bne.n	800bb14 <_strtod_l+0x7d4>
 800bb12:	e678      	b.n	800b806 <_strtod_l+0x4c6>
 800bb14:	9a08      	ldr	r2, [sp, #32]
 800bb16:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb18:	9804      	ldr	r0, [sp, #16]
 800bb1a:	f001 fc73 	bl	800d404 <__mdiff>
 800bb1e:	9005      	str	r0, [sp, #20]
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d100      	bne.n	800bb26 <_strtod_l+0x7e6>
 800bb24:	e66f      	b.n	800b806 <_strtod_l+0x4c6>
 800bb26:	2200      	movs	r2, #0
 800bb28:	68c3      	ldr	r3, [r0, #12]
 800bb2a:	9906      	ldr	r1, [sp, #24]
 800bb2c:	60c2      	str	r2, [r0, #12]
 800bb2e:	930c      	str	r3, [sp, #48]	; 0x30
 800bb30:	f001 fc4c 	bl	800d3cc <__mcmp>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	da5d      	bge.n	800bbf4 <_strtod_l+0x8b4>
 800bb38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb3a:	4333      	orrs	r3, r6
 800bb3c:	d000      	beq.n	800bb40 <_strtod_l+0x800>
 800bb3e:	e088      	b.n	800bc52 <_strtod_l+0x912>
 800bb40:	033b      	lsls	r3, r7, #12
 800bb42:	d000      	beq.n	800bb46 <_strtod_l+0x806>
 800bb44:	e085      	b.n	800bc52 <_strtod_l+0x912>
 800bb46:	22d6      	movs	r2, #214	; 0xd6
 800bb48:	4b46      	ldr	r3, [pc, #280]	; (800bc64 <_strtod_l+0x924>)
 800bb4a:	04d2      	lsls	r2, r2, #19
 800bb4c:	403b      	ands	r3, r7
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d97f      	bls.n	800bc52 <_strtod_l+0x912>
 800bb52:	9b05      	ldr	r3, [sp, #20]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d103      	bne.n	800bb62 <_strtod_l+0x822>
 800bb5a:	9b05      	ldr	r3, [sp, #20]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	dd77      	ble.n	800bc52 <_strtod_l+0x912>
 800bb62:	9905      	ldr	r1, [sp, #20]
 800bb64:	2201      	movs	r2, #1
 800bb66:	9804      	ldr	r0, [sp, #16]
 800bb68:	f001 fbc2 	bl	800d2f0 <__lshift>
 800bb6c:	9906      	ldr	r1, [sp, #24]
 800bb6e:	9005      	str	r0, [sp, #20]
 800bb70:	f001 fc2c 	bl	800d3cc <__mcmp>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	dd6c      	ble.n	800bc52 <_strtod_l+0x912>
 800bb78:	9907      	ldr	r1, [sp, #28]
 800bb7a:	003b      	movs	r3, r7
 800bb7c:	4a39      	ldr	r2, [pc, #228]	; (800bc64 <_strtod_l+0x924>)
 800bb7e:	2900      	cmp	r1, #0
 800bb80:	d100      	bne.n	800bb84 <_strtod_l+0x844>
 800bb82:	e094      	b.n	800bcae <_strtod_l+0x96e>
 800bb84:	0011      	movs	r1, r2
 800bb86:	20d6      	movs	r0, #214	; 0xd6
 800bb88:	4039      	ands	r1, r7
 800bb8a:	04c0      	lsls	r0, r0, #19
 800bb8c:	4281      	cmp	r1, r0
 800bb8e:	dd00      	ble.n	800bb92 <_strtod_l+0x852>
 800bb90:	e08d      	b.n	800bcae <_strtod_l+0x96e>
 800bb92:	23dc      	movs	r3, #220	; 0xdc
 800bb94:	049b      	lsls	r3, r3, #18
 800bb96:	4299      	cmp	r1, r3
 800bb98:	dc00      	bgt.n	800bb9c <_strtod_l+0x85c>
 800bb9a:	e6a7      	b.n	800b8ec <_strtod_l+0x5ac>
 800bb9c:	0030      	movs	r0, r6
 800bb9e:	0039      	movs	r1, r7
 800bba0:	4b31      	ldr	r3, [pc, #196]	; (800bc68 <_strtod_l+0x928>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	f7f5 fd62 	bl	800166c <__aeabi_dmul>
 800bba8:	4b2e      	ldr	r3, [pc, #184]	; (800bc64 <_strtod_l+0x924>)
 800bbaa:	0006      	movs	r6, r0
 800bbac:	000f      	movs	r7, r1
 800bbae:	420b      	tst	r3, r1
 800bbb0:	d000      	beq.n	800bbb4 <_strtod_l+0x874>
 800bbb2:	e631      	b.n	800b818 <_strtod_l+0x4d8>
 800bbb4:	2322      	movs	r3, #34	; 0x22
 800bbb6:	9a04      	ldr	r2, [sp, #16]
 800bbb8:	6013      	str	r3, [r2, #0]
 800bbba:	e62d      	b.n	800b818 <_strtod_l+0x4d8>
 800bbbc:	234b      	movs	r3, #75	; 0x4b
 800bbbe:	1a9a      	subs	r2, r3, r2
 800bbc0:	3b4c      	subs	r3, #76	; 0x4c
 800bbc2:	4093      	lsls	r3, r2
 800bbc4:	4019      	ands	r1, r3
 800bbc6:	000f      	movs	r7, r1
 800bbc8:	e6e3      	b.n	800b992 <_strtod_l+0x652>
 800bbca:	2201      	movs	r2, #1
 800bbcc:	4252      	negs	r2, r2
 800bbce:	409a      	lsls	r2, r3
 800bbd0:	4016      	ands	r6, r2
 800bbd2:	e6de      	b.n	800b992 <_strtod_l+0x652>
 800bbd4:	4925      	ldr	r1, [pc, #148]	; (800bc6c <_strtod_l+0x92c>)
 800bbd6:	1acb      	subs	r3, r1, r3
 800bbd8:	0001      	movs	r1, r0
 800bbda:	4099      	lsls	r1, r3
 800bbdc:	9114      	str	r1, [sp, #80]	; 0x50
 800bbde:	e743      	b.n	800ba68 <_strtod_l+0x728>
 800bbe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbe2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbe4:	9804      	ldr	r0, [sp, #16]
 800bbe6:	f001 fb83 	bl	800d2f0 <__lshift>
 800bbea:	901c      	str	r0, [sp, #112]	; 0x70
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d000      	beq.n	800bbf2 <_strtod_l+0x8b2>
 800bbf0:	e76e      	b.n	800bad0 <_strtod_l+0x790>
 800bbf2:	e608      	b.n	800b806 <_strtod_l+0x4c6>
 800bbf4:	970e      	str	r7, [sp, #56]	; 0x38
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d177      	bne.n	800bcea <_strtod_l+0x9aa>
 800bbfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbfc:	033b      	lsls	r3, r7, #12
 800bbfe:	0b1b      	lsrs	r3, r3, #12
 800bc00:	2a00      	cmp	r2, #0
 800bc02:	d039      	beq.n	800bc78 <_strtod_l+0x938>
 800bc04:	4a1a      	ldr	r2, [pc, #104]	; (800bc70 <_strtod_l+0x930>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d139      	bne.n	800bc7e <_strtod_l+0x93e>
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	9b07      	ldr	r3, [sp, #28]
 800bc0e:	4249      	negs	r1, r1
 800bc10:	0032      	movs	r2, r6
 800bc12:	0008      	movs	r0, r1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <_strtod_l+0x8f0>
 800bc18:	24d4      	movs	r4, #212	; 0xd4
 800bc1a:	4b12      	ldr	r3, [pc, #72]	; (800bc64 <_strtod_l+0x924>)
 800bc1c:	0008      	movs	r0, r1
 800bc1e:	403b      	ands	r3, r7
 800bc20:	04e4      	lsls	r4, r4, #19
 800bc22:	42a3      	cmp	r3, r4
 800bc24:	d804      	bhi.n	800bc30 <_strtod_l+0x8f0>
 800bc26:	306c      	adds	r0, #108	; 0x6c
 800bc28:	0d1b      	lsrs	r3, r3, #20
 800bc2a:	1ac3      	subs	r3, r0, r3
 800bc2c:	4099      	lsls	r1, r3
 800bc2e:	0008      	movs	r0, r1
 800bc30:	4282      	cmp	r2, r0
 800bc32:	d124      	bne.n	800bc7e <_strtod_l+0x93e>
 800bc34:	4b0f      	ldr	r3, [pc, #60]	; (800bc74 <_strtod_l+0x934>)
 800bc36:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bc38:	4299      	cmp	r1, r3
 800bc3a:	d102      	bne.n	800bc42 <_strtod_l+0x902>
 800bc3c:	3201      	adds	r2, #1
 800bc3e:	d100      	bne.n	800bc42 <_strtod_l+0x902>
 800bc40:	e5e1      	b.n	800b806 <_strtod_l+0x4c6>
 800bc42:	4b08      	ldr	r3, [pc, #32]	; (800bc64 <_strtod_l+0x924>)
 800bc44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc46:	2600      	movs	r6, #0
 800bc48:	401a      	ands	r2, r3
 800bc4a:	0013      	movs	r3, r2
 800bc4c:	2280      	movs	r2, #128	; 0x80
 800bc4e:	0352      	lsls	r2, r2, #13
 800bc50:	189f      	adds	r7, r3, r2
 800bc52:	9b07      	ldr	r3, [sp, #28]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1a1      	bne.n	800bb9c <_strtod_l+0x85c>
 800bc58:	e5de      	b.n	800b818 <_strtod_l+0x4d8>
 800bc5a:	46c0      	nop			; (mov r8, r8)
 800bc5c:	08014948 	.word	0x08014948
 800bc60:	fffffc02 	.word	0xfffffc02
 800bc64:	7ff00000 	.word	0x7ff00000
 800bc68:	39500000 	.word	0x39500000
 800bc6c:	fffffbe2 	.word	0xfffffbe2
 800bc70:	000fffff 	.word	0x000fffff
 800bc74:	7fefffff 	.word	0x7fefffff
 800bc78:	4333      	orrs	r3, r6
 800bc7a:	d100      	bne.n	800bc7e <_strtod_l+0x93e>
 800bc7c:	e77c      	b.n	800bb78 <_strtod_l+0x838>
 800bc7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d01d      	beq.n	800bcc0 <_strtod_l+0x980>
 800bc84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc88:	4213      	tst	r3, r2
 800bc8a:	d0e2      	beq.n	800bc52 <_strtod_l+0x912>
 800bc8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc8e:	0030      	movs	r0, r6
 800bc90:	0039      	movs	r1, r7
 800bc92:	9a07      	ldr	r2, [sp, #28]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d017      	beq.n	800bcc8 <_strtod_l+0x988>
 800bc98:	f7ff fb3a 	bl	800b310 <sulp>
 800bc9c:	0002      	movs	r2, r0
 800bc9e:	000b      	movs	r3, r1
 800bca0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bca2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bca4:	f7f4 fd88 	bl	80007b8 <__aeabi_dadd>
 800bca8:	0006      	movs	r6, r0
 800bcaa:	000f      	movs	r7, r1
 800bcac:	e7d1      	b.n	800bc52 <_strtod_l+0x912>
 800bcae:	2601      	movs	r6, #1
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	4a98      	ldr	r2, [pc, #608]	; (800bf14 <_strtod_l+0xbd4>)
 800bcb4:	4276      	negs	r6, r6
 800bcb6:	189b      	adds	r3, r3, r2
 800bcb8:	4a97      	ldr	r2, [pc, #604]	; (800bf18 <_strtod_l+0xbd8>)
 800bcba:	431a      	orrs	r2, r3
 800bcbc:	0017      	movs	r7, r2
 800bcbe:	e7c8      	b.n	800bc52 <_strtod_l+0x912>
 800bcc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcc2:	4233      	tst	r3, r6
 800bcc4:	d0c5      	beq.n	800bc52 <_strtod_l+0x912>
 800bcc6:	e7e1      	b.n	800bc8c <_strtod_l+0x94c>
 800bcc8:	f7ff fb22 	bl	800b310 <sulp>
 800bccc:	0002      	movs	r2, r0
 800bcce:	000b      	movs	r3, r1
 800bcd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bcd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bcd4:	f7f5 ff8c 	bl	8001bf0 <__aeabi_dsub>
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2300      	movs	r3, #0
 800bcdc:	0006      	movs	r6, r0
 800bcde:	000f      	movs	r7, r1
 800bce0:	f7f4 fbb2 	bl	8000448 <__aeabi_dcmpeq>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d0b4      	beq.n	800bc52 <_strtod_l+0x912>
 800bce8:	e600      	b.n	800b8ec <_strtod_l+0x5ac>
 800bcea:	9906      	ldr	r1, [sp, #24]
 800bcec:	9805      	ldr	r0, [sp, #20]
 800bcee:	f001 fce9 	bl	800d6c4 <__ratio>
 800bcf2:	2380      	movs	r3, #128	; 0x80
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	05db      	lsls	r3, r3, #23
 800bcf8:	0004      	movs	r4, r0
 800bcfa:	000d      	movs	r5, r1
 800bcfc:	f7f4 fbb4 	bl	8000468 <__aeabi_dcmple>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d06d      	beq.n	800bde0 <_strtod_l+0xaa0>
 800bd04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d000      	beq.n	800bd0c <_strtod_l+0x9cc>
 800bd0a:	e07e      	b.n	800be0a <_strtod_l+0xaca>
 800bd0c:	2e00      	cmp	r6, #0
 800bd0e:	d158      	bne.n	800bdc2 <_strtod_l+0xa82>
 800bd10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd12:	031b      	lsls	r3, r3, #12
 800bd14:	d000      	beq.n	800bd18 <_strtod_l+0x9d8>
 800bd16:	e07f      	b.n	800be18 <_strtod_l+0xad8>
 800bd18:	2200      	movs	r2, #0
 800bd1a:	0020      	movs	r0, r4
 800bd1c:	0029      	movs	r1, r5
 800bd1e:	4b7f      	ldr	r3, [pc, #508]	; (800bf1c <_strtod_l+0xbdc>)
 800bd20:	f7f4 fb98 	bl	8000454 <__aeabi_dcmplt>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d158      	bne.n	800bdda <_strtod_l+0xa9a>
 800bd28:	0020      	movs	r0, r4
 800bd2a:	0029      	movs	r1, r5
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	4b7c      	ldr	r3, [pc, #496]	; (800bf20 <_strtod_l+0xbe0>)
 800bd30:	f7f5 fc9c 	bl	800166c <__aeabi_dmul>
 800bd34:	0004      	movs	r4, r0
 800bd36:	000d      	movs	r5, r1
 800bd38:	2380      	movs	r3, #128	; 0x80
 800bd3a:	061b      	lsls	r3, r3, #24
 800bd3c:	940a      	str	r4, [sp, #40]	; 0x28
 800bd3e:	18eb      	adds	r3, r5, r3
 800bd40:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd46:	9212      	str	r2, [sp, #72]	; 0x48
 800bd48:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd4a:	4a76      	ldr	r2, [pc, #472]	; (800bf24 <_strtod_l+0xbe4>)
 800bd4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd4e:	4013      	ands	r3, r2
 800bd50:	9314      	str	r3, [sp, #80]	; 0x50
 800bd52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd54:	4b74      	ldr	r3, [pc, #464]	; (800bf28 <_strtod_l+0xbe8>)
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d000      	beq.n	800bd5c <_strtod_l+0xa1c>
 800bd5a:	e091      	b.n	800be80 <_strtod_l+0xb40>
 800bd5c:	4a73      	ldr	r2, [pc, #460]	; (800bf2c <_strtod_l+0xbec>)
 800bd5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd60:	4694      	mov	ip, r2
 800bd62:	4463      	add	r3, ip
 800bd64:	001f      	movs	r7, r3
 800bd66:	0030      	movs	r0, r6
 800bd68:	0019      	movs	r1, r3
 800bd6a:	f001 fbe3 	bl	800d534 <__ulp>
 800bd6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd72:	f7f5 fc7b 	bl	800166c <__aeabi_dmul>
 800bd76:	0032      	movs	r2, r6
 800bd78:	003b      	movs	r3, r7
 800bd7a:	f7f4 fd1d 	bl	80007b8 <__aeabi_dadd>
 800bd7e:	4a69      	ldr	r2, [pc, #420]	; (800bf24 <_strtod_l+0xbe4>)
 800bd80:	4b6b      	ldr	r3, [pc, #428]	; (800bf30 <_strtod_l+0xbf0>)
 800bd82:	0006      	movs	r6, r0
 800bd84:	400a      	ands	r2, r1
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d949      	bls.n	800be1e <_strtod_l+0xade>
 800bd8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd8c:	4b69      	ldr	r3, [pc, #420]	; (800bf34 <_strtod_l+0xbf4>)
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d103      	bne.n	800bd9a <_strtod_l+0xa5a>
 800bd92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd94:	3301      	adds	r3, #1
 800bd96:	d100      	bne.n	800bd9a <_strtod_l+0xa5a>
 800bd98:	e535      	b.n	800b806 <_strtod_l+0x4c6>
 800bd9a:	2601      	movs	r6, #1
 800bd9c:	4f65      	ldr	r7, [pc, #404]	; (800bf34 <_strtod_l+0xbf4>)
 800bd9e:	4276      	negs	r6, r6
 800bda0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bda2:	9804      	ldr	r0, [sp, #16]
 800bda4:	f001 f8b8 	bl	800cf18 <_Bfree>
 800bda8:	9908      	ldr	r1, [sp, #32]
 800bdaa:	9804      	ldr	r0, [sp, #16]
 800bdac:	f001 f8b4 	bl	800cf18 <_Bfree>
 800bdb0:	9906      	ldr	r1, [sp, #24]
 800bdb2:	9804      	ldr	r0, [sp, #16]
 800bdb4:	f001 f8b0 	bl	800cf18 <_Bfree>
 800bdb8:	9905      	ldr	r1, [sp, #20]
 800bdba:	9804      	ldr	r0, [sp, #16]
 800bdbc:	f001 f8ac 	bl	800cf18 <_Bfree>
 800bdc0:	e60b      	b.n	800b9da <_strtod_l+0x69a>
 800bdc2:	2e01      	cmp	r6, #1
 800bdc4:	d103      	bne.n	800bdce <_strtod_l+0xa8e>
 800bdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d100      	bne.n	800bdce <_strtod_l+0xa8e>
 800bdcc:	e58e      	b.n	800b8ec <_strtod_l+0x5ac>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	4c59      	ldr	r4, [pc, #356]	; (800bf38 <_strtod_l+0xbf8>)
 800bdd2:	930a      	str	r3, [sp, #40]	; 0x28
 800bdd4:	940b      	str	r4, [sp, #44]	; 0x2c
 800bdd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bdd8:	e01c      	b.n	800be14 <_strtod_l+0xad4>
 800bdda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bddc:	4d50      	ldr	r5, [pc, #320]	; (800bf20 <_strtod_l+0xbe0>)
 800bdde:	e7ab      	b.n	800bd38 <_strtod_l+0x9f8>
 800bde0:	2200      	movs	r2, #0
 800bde2:	0020      	movs	r0, r4
 800bde4:	0029      	movs	r1, r5
 800bde6:	4b4e      	ldr	r3, [pc, #312]	; (800bf20 <_strtod_l+0xbe0>)
 800bde8:	f7f5 fc40 	bl	800166c <__aeabi_dmul>
 800bdec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdee:	0004      	movs	r4, r0
 800bdf0:	000b      	movs	r3, r1
 800bdf2:	000d      	movs	r5, r1
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	d104      	bne.n	800be02 <_strtod_l+0xac2>
 800bdf8:	2280      	movs	r2, #128	; 0x80
 800bdfa:	0612      	lsls	r2, r2, #24
 800bdfc:	900a      	str	r0, [sp, #40]	; 0x28
 800bdfe:	188b      	adds	r3, r1, r2
 800be00:	e79e      	b.n	800bd40 <_strtod_l+0xa00>
 800be02:	0002      	movs	r2, r0
 800be04:	920a      	str	r2, [sp, #40]	; 0x28
 800be06:	930b      	str	r3, [sp, #44]	; 0x2c
 800be08:	e79b      	b.n	800bd42 <_strtod_l+0xa02>
 800be0a:	2300      	movs	r3, #0
 800be0c:	4c43      	ldr	r4, [pc, #268]	; (800bf1c <_strtod_l+0xbdc>)
 800be0e:	930a      	str	r3, [sp, #40]	; 0x28
 800be10:	940b      	str	r4, [sp, #44]	; 0x2c
 800be12:	2400      	movs	r4, #0
 800be14:	4d41      	ldr	r5, [pc, #260]	; (800bf1c <_strtod_l+0xbdc>)
 800be16:	e794      	b.n	800bd42 <_strtod_l+0xa02>
 800be18:	2300      	movs	r3, #0
 800be1a:	4c47      	ldr	r4, [pc, #284]	; (800bf38 <_strtod_l+0xbf8>)
 800be1c:	e7f7      	b.n	800be0e <_strtod_l+0xace>
 800be1e:	23d4      	movs	r3, #212	; 0xd4
 800be20:	049b      	lsls	r3, r3, #18
 800be22:	18cf      	adds	r7, r1, r3
 800be24:	9b07      	ldr	r3, [sp, #28]
 800be26:	970e      	str	r7, [sp, #56]	; 0x38
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1b9      	bne.n	800bda0 <_strtod_l+0xa60>
 800be2c:	4b3d      	ldr	r3, [pc, #244]	; (800bf24 <_strtod_l+0xbe4>)
 800be2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be30:	403b      	ands	r3, r7
 800be32:	429a      	cmp	r2, r3
 800be34:	d1b4      	bne.n	800bda0 <_strtod_l+0xa60>
 800be36:	0020      	movs	r0, r4
 800be38:	0029      	movs	r1, r5
 800be3a:	f7f4 fb9f 	bl	800057c <__aeabi_d2lz>
 800be3e:	f7f4 fbd9 	bl	80005f4 <__aeabi_l2d>
 800be42:	0002      	movs	r2, r0
 800be44:	000b      	movs	r3, r1
 800be46:	0020      	movs	r0, r4
 800be48:	0029      	movs	r1, r5
 800be4a:	f7f5 fed1 	bl	8001bf0 <__aeabi_dsub>
 800be4e:	033b      	lsls	r3, r7, #12
 800be50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be52:	0b1b      	lsrs	r3, r3, #12
 800be54:	4333      	orrs	r3, r6
 800be56:	4313      	orrs	r3, r2
 800be58:	0004      	movs	r4, r0
 800be5a:	000d      	movs	r5, r1
 800be5c:	4a37      	ldr	r2, [pc, #220]	; (800bf3c <_strtod_l+0xbfc>)
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d054      	beq.n	800bf0c <_strtod_l+0xbcc>
 800be62:	4b37      	ldr	r3, [pc, #220]	; (800bf40 <_strtod_l+0xc00>)
 800be64:	f7f4 faf6 	bl	8000454 <__aeabi_dcmplt>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d000      	beq.n	800be6e <_strtod_l+0xb2e>
 800be6c:	e4d4      	b.n	800b818 <_strtod_l+0x4d8>
 800be6e:	0020      	movs	r0, r4
 800be70:	0029      	movs	r1, r5
 800be72:	4a34      	ldr	r2, [pc, #208]	; (800bf44 <_strtod_l+0xc04>)
 800be74:	4b2a      	ldr	r3, [pc, #168]	; (800bf20 <_strtod_l+0xbe0>)
 800be76:	f7f4 fb01 	bl	800047c <__aeabi_dcmpgt>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d090      	beq.n	800bda0 <_strtod_l+0xa60>
 800be7e:	e4cb      	b.n	800b818 <_strtod_l+0x4d8>
 800be80:	9b07      	ldr	r3, [sp, #28]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d02b      	beq.n	800bede <_strtod_l+0xb9e>
 800be86:	23d4      	movs	r3, #212	; 0xd4
 800be88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be8a:	04db      	lsls	r3, r3, #19
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d826      	bhi.n	800bede <_strtod_l+0xb9e>
 800be90:	0020      	movs	r0, r4
 800be92:	0029      	movs	r1, r5
 800be94:	4a2c      	ldr	r2, [pc, #176]	; (800bf48 <_strtod_l+0xc08>)
 800be96:	4b2d      	ldr	r3, [pc, #180]	; (800bf4c <_strtod_l+0xc0c>)
 800be98:	f7f4 fae6 	bl	8000468 <__aeabi_dcmple>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d017      	beq.n	800bed0 <_strtod_l+0xb90>
 800bea0:	0020      	movs	r0, r4
 800bea2:	0029      	movs	r1, r5
 800bea4:	f7f4 fb4c 	bl	8000540 <__aeabi_d2uiz>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d100      	bne.n	800beae <_strtod_l+0xb6e>
 800beac:	3001      	adds	r0, #1
 800beae:	f7f6 faa5 	bl	80023fc <__aeabi_ui2d>
 800beb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beb4:	0004      	movs	r4, r0
 800beb6:	000b      	movs	r3, r1
 800beb8:	000d      	movs	r5, r1
 800beba:	2a00      	cmp	r2, #0
 800bebc:	d122      	bne.n	800bf04 <_strtod_l+0xbc4>
 800bebe:	2280      	movs	r2, #128	; 0x80
 800bec0:	0612      	lsls	r2, r2, #24
 800bec2:	188b      	adds	r3, r1, r2
 800bec4:	9016      	str	r0, [sp, #88]	; 0x58
 800bec6:	9317      	str	r3, [sp, #92]	; 0x5c
 800bec8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800beca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800becc:	9212      	str	r2, [sp, #72]	; 0x48
 800bece:	9313      	str	r3, [sp, #76]	; 0x4c
 800bed0:	22d6      	movs	r2, #214	; 0xd6
 800bed2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bed4:	04d2      	lsls	r2, r2, #19
 800bed6:	189b      	adds	r3, r3, r2
 800bed8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800beda:	1a9b      	subs	r3, r3, r2
 800bedc:	9313      	str	r3, [sp, #76]	; 0x4c
 800bede:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bee0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bee2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bee4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bee6:	f001 fb25 	bl	800d534 <__ulp>
 800beea:	0002      	movs	r2, r0
 800beec:	000b      	movs	r3, r1
 800beee:	0030      	movs	r0, r6
 800bef0:	0039      	movs	r1, r7
 800bef2:	f7f5 fbbb 	bl	800166c <__aeabi_dmul>
 800bef6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800befa:	f7f4 fc5d 	bl	80007b8 <__aeabi_dadd>
 800befe:	0006      	movs	r6, r0
 800bf00:	000f      	movs	r7, r1
 800bf02:	e78f      	b.n	800be24 <_strtod_l+0xae4>
 800bf04:	0002      	movs	r2, r0
 800bf06:	9216      	str	r2, [sp, #88]	; 0x58
 800bf08:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf0a:	e7dd      	b.n	800bec8 <_strtod_l+0xb88>
 800bf0c:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <_strtod_l+0xc10>)
 800bf0e:	f7f4 faa1 	bl	8000454 <__aeabi_dcmplt>
 800bf12:	e7b2      	b.n	800be7a <_strtod_l+0xb3a>
 800bf14:	fff00000 	.word	0xfff00000
 800bf18:	000fffff 	.word	0x000fffff
 800bf1c:	3ff00000 	.word	0x3ff00000
 800bf20:	3fe00000 	.word	0x3fe00000
 800bf24:	7ff00000 	.word	0x7ff00000
 800bf28:	7fe00000 	.word	0x7fe00000
 800bf2c:	fcb00000 	.word	0xfcb00000
 800bf30:	7c9fffff 	.word	0x7c9fffff
 800bf34:	7fefffff 	.word	0x7fefffff
 800bf38:	bff00000 	.word	0xbff00000
 800bf3c:	94a03595 	.word	0x94a03595
 800bf40:	3fdfffff 	.word	0x3fdfffff
 800bf44:	35afe535 	.word	0x35afe535
 800bf48:	ffc00000 	.word	0xffc00000
 800bf4c:	41dfffff 	.word	0x41dfffff
 800bf50:	3fcfffff 	.word	0x3fcfffff

0800bf54 <_strtod_r>:
 800bf54:	b510      	push	{r4, lr}
 800bf56:	4b02      	ldr	r3, [pc, #8]	; (800bf60 <_strtod_r+0xc>)
 800bf58:	f7ff f9f2 	bl	800b340 <_strtod_l>
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	46c0      	nop			; (mov r8, r8)
 800bf60:	20000448 	.word	0x20000448

0800bf64 <strtod>:
 800bf64:	b510      	push	{r4, lr}
 800bf66:	4c04      	ldr	r4, [pc, #16]	; (800bf78 <strtod+0x14>)
 800bf68:	000a      	movs	r2, r1
 800bf6a:	0001      	movs	r1, r0
 800bf6c:	4b03      	ldr	r3, [pc, #12]	; (800bf7c <strtod+0x18>)
 800bf6e:	6820      	ldr	r0, [r4, #0]
 800bf70:	f7ff f9e6 	bl	800b340 <_strtod_l>
 800bf74:	bd10      	pop	{r4, pc}
 800bf76:	46c0      	nop			; (mov r8, r8)
 800bf78:	200006d8 	.word	0x200006d8
 800bf7c:	20000448 	.word	0x20000448

0800bf80 <_strtol_l.constprop.0>:
 800bf80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf82:	b087      	sub	sp, #28
 800bf84:	001e      	movs	r6, r3
 800bf86:	9005      	str	r0, [sp, #20]
 800bf88:	9101      	str	r1, [sp, #4]
 800bf8a:	9202      	str	r2, [sp, #8]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d048      	beq.n	800c022 <_strtol_l.constprop.0+0xa2>
 800bf90:	000b      	movs	r3, r1
 800bf92:	2e24      	cmp	r6, #36	; 0x24
 800bf94:	d845      	bhi.n	800c022 <_strtol_l.constprop.0+0xa2>
 800bf96:	4a3b      	ldr	r2, [pc, #236]	; (800c084 <_strtol_l.constprop.0+0x104>)
 800bf98:	2108      	movs	r1, #8
 800bf9a:	4694      	mov	ip, r2
 800bf9c:	001a      	movs	r2, r3
 800bf9e:	4660      	mov	r0, ip
 800bfa0:	7814      	ldrb	r4, [r2, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	5d00      	ldrb	r0, [r0, r4]
 800bfa6:	001d      	movs	r5, r3
 800bfa8:	0007      	movs	r7, r0
 800bfaa:	400f      	ands	r7, r1
 800bfac:	4208      	tst	r0, r1
 800bfae:	d1f5      	bne.n	800bf9c <_strtol_l.constprop.0+0x1c>
 800bfb0:	2c2d      	cmp	r4, #45	; 0x2d
 800bfb2:	d13d      	bne.n	800c030 <_strtol_l.constprop.0+0xb0>
 800bfb4:	2701      	movs	r7, #1
 800bfb6:	781c      	ldrb	r4, [r3, #0]
 800bfb8:	1c95      	adds	r5, r2, #2
 800bfba:	2e00      	cmp	r6, #0
 800bfbc:	d05e      	beq.n	800c07c <_strtol_l.constprop.0+0xfc>
 800bfbe:	2e10      	cmp	r6, #16
 800bfc0:	d109      	bne.n	800bfd6 <_strtol_l.constprop.0+0x56>
 800bfc2:	2c30      	cmp	r4, #48	; 0x30
 800bfc4:	d107      	bne.n	800bfd6 <_strtol_l.constprop.0+0x56>
 800bfc6:	2220      	movs	r2, #32
 800bfc8:	782b      	ldrb	r3, [r5, #0]
 800bfca:	4393      	bics	r3, r2
 800bfcc:	2b58      	cmp	r3, #88	; 0x58
 800bfce:	d150      	bne.n	800c072 <_strtol_l.constprop.0+0xf2>
 800bfd0:	2610      	movs	r6, #16
 800bfd2:	786c      	ldrb	r4, [r5, #1]
 800bfd4:	3502      	adds	r5, #2
 800bfd6:	4b2c      	ldr	r3, [pc, #176]	; (800c088 <_strtol_l.constprop.0+0x108>)
 800bfd8:	0031      	movs	r1, r6
 800bfda:	18fb      	adds	r3, r7, r3
 800bfdc:	0018      	movs	r0, r3
 800bfde:	9303      	str	r3, [sp, #12]
 800bfe0:	f7f4 f932 	bl	8000248 <__aeabi_uidivmod>
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	9104      	str	r1, [sp, #16]
 800bfe8:	2101      	movs	r1, #1
 800bfea:	4684      	mov	ip, r0
 800bfec:	0010      	movs	r0, r2
 800bfee:	4249      	negs	r1, r1
 800bff0:	0023      	movs	r3, r4
 800bff2:	3b30      	subs	r3, #48	; 0x30
 800bff4:	2b09      	cmp	r3, #9
 800bff6:	d903      	bls.n	800c000 <_strtol_l.constprop.0+0x80>
 800bff8:	3b11      	subs	r3, #17
 800bffa:	2b19      	cmp	r3, #25
 800bffc:	d81d      	bhi.n	800c03a <_strtol_l.constprop.0+0xba>
 800bffe:	330a      	adds	r3, #10
 800c000:	429e      	cmp	r6, r3
 800c002:	dd1e      	ble.n	800c042 <_strtol_l.constprop.0+0xc2>
 800c004:	1c54      	adds	r4, r2, #1
 800c006:	d009      	beq.n	800c01c <_strtol_l.constprop.0+0x9c>
 800c008:	000a      	movs	r2, r1
 800c00a:	4584      	cmp	ip, r0
 800c00c:	d306      	bcc.n	800c01c <_strtol_l.constprop.0+0x9c>
 800c00e:	d102      	bne.n	800c016 <_strtol_l.constprop.0+0x96>
 800c010:	9c04      	ldr	r4, [sp, #16]
 800c012:	429c      	cmp	r4, r3
 800c014:	db02      	blt.n	800c01c <_strtol_l.constprop.0+0x9c>
 800c016:	2201      	movs	r2, #1
 800c018:	4370      	muls	r0, r6
 800c01a:	1818      	adds	r0, r3, r0
 800c01c:	782c      	ldrb	r4, [r5, #0]
 800c01e:	3501      	adds	r5, #1
 800c020:	e7e6      	b.n	800bff0 <_strtol_l.constprop.0+0x70>
 800c022:	f000 fa7d 	bl	800c520 <__errno>
 800c026:	2316      	movs	r3, #22
 800c028:	6003      	str	r3, [r0, #0]
 800c02a:	2000      	movs	r0, #0
 800c02c:	b007      	add	sp, #28
 800c02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c030:	2c2b      	cmp	r4, #43	; 0x2b
 800c032:	d1c2      	bne.n	800bfba <_strtol_l.constprop.0+0x3a>
 800c034:	781c      	ldrb	r4, [r3, #0]
 800c036:	1c95      	adds	r5, r2, #2
 800c038:	e7bf      	b.n	800bfba <_strtol_l.constprop.0+0x3a>
 800c03a:	0023      	movs	r3, r4
 800c03c:	3b61      	subs	r3, #97	; 0x61
 800c03e:	2b19      	cmp	r3, #25
 800c040:	d9dd      	bls.n	800bffe <_strtol_l.constprop.0+0x7e>
 800c042:	1c53      	adds	r3, r2, #1
 800c044:	d109      	bne.n	800c05a <_strtol_l.constprop.0+0xda>
 800c046:	2322      	movs	r3, #34	; 0x22
 800c048:	9a05      	ldr	r2, [sp, #20]
 800c04a:	9803      	ldr	r0, [sp, #12]
 800c04c:	6013      	str	r3, [r2, #0]
 800c04e:	9b02      	ldr	r3, [sp, #8]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d0eb      	beq.n	800c02c <_strtol_l.constprop.0+0xac>
 800c054:	1e6b      	subs	r3, r5, #1
 800c056:	9301      	str	r3, [sp, #4]
 800c058:	e007      	b.n	800c06a <_strtol_l.constprop.0+0xea>
 800c05a:	2f00      	cmp	r7, #0
 800c05c:	d000      	beq.n	800c060 <_strtol_l.constprop.0+0xe0>
 800c05e:	4240      	negs	r0, r0
 800c060:	9b02      	ldr	r3, [sp, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0e2      	beq.n	800c02c <_strtol_l.constprop.0+0xac>
 800c066:	2a00      	cmp	r2, #0
 800c068:	d1f4      	bne.n	800c054 <_strtol_l.constprop.0+0xd4>
 800c06a:	9b02      	ldr	r3, [sp, #8]
 800c06c:	9a01      	ldr	r2, [sp, #4]
 800c06e:	601a      	str	r2, [r3, #0]
 800c070:	e7dc      	b.n	800c02c <_strtol_l.constprop.0+0xac>
 800c072:	2430      	movs	r4, #48	; 0x30
 800c074:	2e00      	cmp	r6, #0
 800c076:	d1ae      	bne.n	800bfd6 <_strtol_l.constprop.0+0x56>
 800c078:	3608      	adds	r6, #8
 800c07a:	e7ac      	b.n	800bfd6 <_strtol_l.constprop.0+0x56>
 800c07c:	2c30      	cmp	r4, #48	; 0x30
 800c07e:	d0a2      	beq.n	800bfc6 <_strtol_l.constprop.0+0x46>
 800c080:	260a      	movs	r6, #10
 800c082:	e7a8      	b.n	800bfd6 <_strtol_l.constprop.0+0x56>
 800c084:	08014971 	.word	0x08014971
 800c088:	7fffffff 	.word	0x7fffffff

0800c08c <_strtol_r>:
 800c08c:	b510      	push	{r4, lr}
 800c08e:	f7ff ff77 	bl	800bf80 <_strtol_l.constprop.0>
 800c092:	bd10      	pop	{r4, pc}

0800c094 <strtol>:
 800c094:	b510      	push	{r4, lr}
 800c096:	4c04      	ldr	r4, [pc, #16]	; (800c0a8 <strtol+0x14>)
 800c098:	0013      	movs	r3, r2
 800c09a:	000a      	movs	r2, r1
 800c09c:	0001      	movs	r1, r0
 800c09e:	6820      	ldr	r0, [r4, #0]
 800c0a0:	f7ff ff6e 	bl	800bf80 <_strtol_l.constprop.0>
 800c0a4:	bd10      	pop	{r4, pc}
 800c0a6:	46c0      	nop			; (mov r8, r8)
 800c0a8:	200006d8 	.word	0x200006d8

0800c0ac <std>:
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	b510      	push	{r4, lr}
 800c0b0:	0004      	movs	r4, r0
 800c0b2:	6003      	str	r3, [r0, #0]
 800c0b4:	6043      	str	r3, [r0, #4]
 800c0b6:	6083      	str	r3, [r0, #8]
 800c0b8:	8181      	strh	r1, [r0, #12]
 800c0ba:	6643      	str	r3, [r0, #100]	; 0x64
 800c0bc:	81c2      	strh	r2, [r0, #14]
 800c0be:	6103      	str	r3, [r0, #16]
 800c0c0:	6143      	str	r3, [r0, #20]
 800c0c2:	6183      	str	r3, [r0, #24]
 800c0c4:	0019      	movs	r1, r3
 800c0c6:	2208      	movs	r2, #8
 800c0c8:	305c      	adds	r0, #92	; 0x5c
 800c0ca:	f000 f97d 	bl	800c3c8 <memset>
 800c0ce:	4b0b      	ldr	r3, [pc, #44]	; (800c0fc <std+0x50>)
 800c0d0:	61e4      	str	r4, [r4, #28]
 800c0d2:	6223      	str	r3, [r4, #32]
 800c0d4:	4b0a      	ldr	r3, [pc, #40]	; (800c100 <std+0x54>)
 800c0d6:	6263      	str	r3, [r4, #36]	; 0x24
 800c0d8:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <std+0x58>)
 800c0da:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	; (800c108 <std+0x5c>)
 800c0de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0e0:	4b0a      	ldr	r3, [pc, #40]	; (800c10c <std+0x60>)
 800c0e2:	429c      	cmp	r4, r3
 800c0e4:	d005      	beq.n	800c0f2 <std+0x46>
 800c0e6:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <std+0x64>)
 800c0e8:	429c      	cmp	r4, r3
 800c0ea:	d002      	beq.n	800c0f2 <std+0x46>
 800c0ec:	4b09      	ldr	r3, [pc, #36]	; (800c114 <std+0x68>)
 800c0ee:	429c      	cmp	r4, r3
 800c0f0:	d103      	bne.n	800c0fa <std+0x4e>
 800c0f2:	0020      	movs	r0, r4
 800c0f4:	3058      	adds	r0, #88	; 0x58
 800c0f6:	f000 fa3d 	bl	800c574 <__retarget_lock_init_recursive>
 800c0fa:	bd10      	pop	{r4, pc}
 800c0fc:	0800c32d 	.word	0x0800c32d
 800c100:	0800c359 	.word	0x0800c359
 800c104:	0800c391 	.word	0x0800c391
 800c108:	0800c3bd 	.word	0x0800c3bd
 800c10c:	20000be8 	.word	0x20000be8
 800c110:	20000c50 	.word	0x20000c50
 800c114:	20000cb8 	.word	0x20000cb8

0800c118 <stdio_exit_handler>:
 800c118:	b510      	push	{r4, lr}
 800c11a:	4a03      	ldr	r2, [pc, #12]	; (800c128 <stdio_exit_handler+0x10>)
 800c11c:	4903      	ldr	r1, [pc, #12]	; (800c12c <stdio_exit_handler+0x14>)
 800c11e:	4804      	ldr	r0, [pc, #16]	; (800c130 <stdio_exit_handler+0x18>)
 800c120:	f000 f86c 	bl	800c1fc <_fwalk_sglue>
 800c124:	bd10      	pop	{r4, pc}
 800c126:	46c0      	nop			; (mov r8, r8)
 800c128:	2000043c 	.word	0x2000043c
 800c12c:	08010075 	.word	0x08010075
 800c130:	200005b8 	.word	0x200005b8

0800c134 <cleanup_stdio>:
 800c134:	6841      	ldr	r1, [r0, #4]
 800c136:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <cleanup_stdio+0x30>)
 800c138:	b510      	push	{r4, lr}
 800c13a:	0004      	movs	r4, r0
 800c13c:	4299      	cmp	r1, r3
 800c13e:	d001      	beq.n	800c144 <cleanup_stdio+0x10>
 800c140:	f003 ff98 	bl	8010074 <_fclose_r>
 800c144:	68a1      	ldr	r1, [r4, #8]
 800c146:	4b08      	ldr	r3, [pc, #32]	; (800c168 <cleanup_stdio+0x34>)
 800c148:	4299      	cmp	r1, r3
 800c14a:	d002      	beq.n	800c152 <cleanup_stdio+0x1e>
 800c14c:	0020      	movs	r0, r4
 800c14e:	f003 ff91 	bl	8010074 <_fclose_r>
 800c152:	68e1      	ldr	r1, [r4, #12]
 800c154:	4b05      	ldr	r3, [pc, #20]	; (800c16c <cleanup_stdio+0x38>)
 800c156:	4299      	cmp	r1, r3
 800c158:	d002      	beq.n	800c160 <cleanup_stdio+0x2c>
 800c15a:	0020      	movs	r0, r4
 800c15c:	f003 ff8a 	bl	8010074 <_fclose_r>
 800c160:	bd10      	pop	{r4, pc}
 800c162:	46c0      	nop			; (mov r8, r8)
 800c164:	20000be8 	.word	0x20000be8
 800c168:	20000c50 	.word	0x20000c50
 800c16c:	20000cb8 	.word	0x20000cb8

0800c170 <global_stdio_init.part.0>:
 800c170:	b510      	push	{r4, lr}
 800c172:	4b09      	ldr	r3, [pc, #36]	; (800c198 <global_stdio_init.part.0+0x28>)
 800c174:	4a09      	ldr	r2, [pc, #36]	; (800c19c <global_stdio_init.part.0+0x2c>)
 800c176:	2104      	movs	r1, #4
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	4809      	ldr	r0, [pc, #36]	; (800c1a0 <global_stdio_init.part.0+0x30>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	f7ff ff95 	bl	800c0ac <std>
 800c182:	2201      	movs	r2, #1
 800c184:	2109      	movs	r1, #9
 800c186:	4807      	ldr	r0, [pc, #28]	; (800c1a4 <global_stdio_init.part.0+0x34>)
 800c188:	f7ff ff90 	bl	800c0ac <std>
 800c18c:	2202      	movs	r2, #2
 800c18e:	2112      	movs	r1, #18
 800c190:	4805      	ldr	r0, [pc, #20]	; (800c1a8 <global_stdio_init.part.0+0x38>)
 800c192:	f7ff ff8b 	bl	800c0ac <std>
 800c196:	bd10      	pop	{r4, pc}
 800c198:	20000d20 	.word	0x20000d20
 800c19c:	0800c119 	.word	0x0800c119
 800c1a0:	20000be8 	.word	0x20000be8
 800c1a4:	20000c50 	.word	0x20000c50
 800c1a8:	20000cb8 	.word	0x20000cb8

0800c1ac <__sfp_lock_acquire>:
 800c1ac:	b510      	push	{r4, lr}
 800c1ae:	4802      	ldr	r0, [pc, #8]	; (800c1b8 <__sfp_lock_acquire+0xc>)
 800c1b0:	f000 f9e2 	bl	800c578 <__retarget_lock_acquire_recursive>
 800c1b4:	bd10      	pop	{r4, pc}
 800c1b6:	46c0      	nop			; (mov r8, r8)
 800c1b8:	20000d2a 	.word	0x20000d2a

0800c1bc <__sfp_lock_release>:
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	4802      	ldr	r0, [pc, #8]	; (800c1c8 <__sfp_lock_release+0xc>)
 800c1c0:	f000 f9db 	bl	800c57a <__retarget_lock_release_recursive>
 800c1c4:	bd10      	pop	{r4, pc}
 800c1c6:	46c0      	nop			; (mov r8, r8)
 800c1c8:	20000d2a 	.word	0x20000d2a

0800c1cc <__sinit>:
 800c1cc:	b510      	push	{r4, lr}
 800c1ce:	0004      	movs	r4, r0
 800c1d0:	f7ff ffec 	bl	800c1ac <__sfp_lock_acquire>
 800c1d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <__sinit+0x14>
 800c1da:	f7ff ffef 	bl	800c1bc <__sfp_lock_release>
 800c1de:	bd10      	pop	{r4, pc}
 800c1e0:	4b04      	ldr	r3, [pc, #16]	; (800c1f4 <__sinit+0x28>)
 800c1e2:	6363      	str	r3, [r4, #52]	; 0x34
 800c1e4:	4b04      	ldr	r3, [pc, #16]	; (800c1f8 <__sinit+0x2c>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1f6      	bne.n	800c1da <__sinit+0xe>
 800c1ec:	f7ff ffc0 	bl	800c170 <global_stdio_init.part.0>
 800c1f0:	e7f3      	b.n	800c1da <__sinit+0xe>
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	0800c135 	.word	0x0800c135
 800c1f8:	20000d20 	.word	0x20000d20

0800c1fc <_fwalk_sglue>:
 800c1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1fe:	0014      	movs	r4, r2
 800c200:	2600      	movs	r6, #0
 800c202:	9000      	str	r0, [sp, #0]
 800c204:	9101      	str	r1, [sp, #4]
 800c206:	68a5      	ldr	r5, [r4, #8]
 800c208:	6867      	ldr	r7, [r4, #4]
 800c20a:	3f01      	subs	r7, #1
 800c20c:	d504      	bpl.n	800c218 <_fwalk_sglue+0x1c>
 800c20e:	6824      	ldr	r4, [r4, #0]
 800c210:	2c00      	cmp	r4, #0
 800c212:	d1f8      	bne.n	800c206 <_fwalk_sglue+0xa>
 800c214:	0030      	movs	r0, r6
 800c216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c218:	89ab      	ldrh	r3, [r5, #12]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d908      	bls.n	800c230 <_fwalk_sglue+0x34>
 800c21e:	220e      	movs	r2, #14
 800c220:	5eab      	ldrsh	r3, [r5, r2]
 800c222:	3301      	adds	r3, #1
 800c224:	d004      	beq.n	800c230 <_fwalk_sglue+0x34>
 800c226:	0029      	movs	r1, r5
 800c228:	9800      	ldr	r0, [sp, #0]
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	4798      	blx	r3
 800c22e:	4306      	orrs	r6, r0
 800c230:	3568      	adds	r5, #104	; 0x68
 800c232:	e7ea      	b.n	800c20a <_fwalk_sglue+0xe>

0800c234 <snprintf>:
 800c234:	b40c      	push	{r2, r3}
 800c236:	b530      	push	{r4, r5, lr}
 800c238:	4b17      	ldr	r3, [pc, #92]	; (800c298 <snprintf+0x64>)
 800c23a:	000c      	movs	r4, r1
 800c23c:	681d      	ldr	r5, [r3, #0]
 800c23e:	b09d      	sub	sp, #116	; 0x74
 800c240:	2900      	cmp	r1, #0
 800c242:	da08      	bge.n	800c256 <snprintf+0x22>
 800c244:	238b      	movs	r3, #139	; 0x8b
 800c246:	2001      	movs	r0, #1
 800c248:	602b      	str	r3, [r5, #0]
 800c24a:	4240      	negs	r0, r0
 800c24c:	b01d      	add	sp, #116	; 0x74
 800c24e:	bc30      	pop	{r4, r5}
 800c250:	bc08      	pop	{r3}
 800c252:	b002      	add	sp, #8
 800c254:	4718      	bx	r3
 800c256:	2382      	movs	r3, #130	; 0x82
 800c258:	466a      	mov	r2, sp
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	8293      	strh	r3, [r2, #20]
 800c25e:	2300      	movs	r3, #0
 800c260:	9002      	str	r0, [sp, #8]
 800c262:	9006      	str	r0, [sp, #24]
 800c264:	4299      	cmp	r1, r3
 800c266:	d000      	beq.n	800c26a <snprintf+0x36>
 800c268:	1e4b      	subs	r3, r1, #1
 800c26a:	9304      	str	r3, [sp, #16]
 800c26c:	9307      	str	r3, [sp, #28]
 800c26e:	2301      	movs	r3, #1
 800c270:	466a      	mov	r2, sp
 800c272:	425b      	negs	r3, r3
 800c274:	82d3      	strh	r3, [r2, #22]
 800c276:	0028      	movs	r0, r5
 800c278:	ab21      	add	r3, sp, #132	; 0x84
 800c27a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c27c:	a902      	add	r1, sp, #8
 800c27e:	9301      	str	r3, [sp, #4]
 800c280:	f001 fa9a 	bl	800d7b8 <_svfprintf_r>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	da01      	bge.n	800c28c <snprintf+0x58>
 800c288:	238b      	movs	r3, #139	; 0x8b
 800c28a:	602b      	str	r3, [r5, #0]
 800c28c:	2c00      	cmp	r4, #0
 800c28e:	d0dd      	beq.n	800c24c <snprintf+0x18>
 800c290:	2200      	movs	r2, #0
 800c292:	9b02      	ldr	r3, [sp, #8]
 800c294:	701a      	strb	r2, [r3, #0]
 800c296:	e7d9      	b.n	800c24c <snprintf+0x18>
 800c298:	200006d8 	.word	0x200006d8

0800c29c <sprintf>:
 800c29c:	b40e      	push	{r1, r2, r3}
 800c29e:	b500      	push	{lr}
 800c2a0:	490b      	ldr	r1, [pc, #44]	; (800c2d0 <sprintf+0x34>)
 800c2a2:	b09c      	sub	sp, #112	; 0x70
 800c2a4:	ab1d      	add	r3, sp, #116	; 0x74
 800c2a6:	9002      	str	r0, [sp, #8]
 800c2a8:	9006      	str	r0, [sp, #24]
 800c2aa:	9107      	str	r1, [sp, #28]
 800c2ac:	9104      	str	r1, [sp, #16]
 800c2ae:	4809      	ldr	r0, [pc, #36]	; (800c2d4 <sprintf+0x38>)
 800c2b0:	4909      	ldr	r1, [pc, #36]	; (800c2d8 <sprintf+0x3c>)
 800c2b2:	cb04      	ldmia	r3!, {r2}
 800c2b4:	9105      	str	r1, [sp, #20]
 800c2b6:	6800      	ldr	r0, [r0, #0]
 800c2b8:	a902      	add	r1, sp, #8
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	f001 fa7c 	bl	800d7b8 <_svfprintf_r>
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	9b02      	ldr	r3, [sp, #8]
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	b01c      	add	sp, #112	; 0x70
 800c2c8:	bc08      	pop	{r3}
 800c2ca:	b003      	add	sp, #12
 800c2cc:	4718      	bx	r3
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	7fffffff 	.word	0x7fffffff
 800c2d4:	200006d8 	.word	0x200006d8
 800c2d8:	ffff0208 	.word	0xffff0208

0800c2dc <sscanf>:
 800c2dc:	b40e      	push	{r1, r2, r3}
 800c2de:	b530      	push	{r4, r5, lr}
 800c2e0:	2381      	movs	r3, #129	; 0x81
 800c2e2:	b09c      	sub	sp, #112	; 0x70
 800c2e4:	466a      	mov	r2, sp
 800c2e6:	ac1f      	add	r4, sp, #124	; 0x7c
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	cc20      	ldmia	r4!, {r5}
 800c2ec:	8293      	strh	r3, [r2, #20]
 800c2ee:	9002      	str	r0, [sp, #8]
 800c2f0:	9006      	str	r0, [sp, #24]
 800c2f2:	f7f3 ff07 	bl	8000104 <strlen>
 800c2f6:	4b0b      	ldr	r3, [pc, #44]	; (800c324 <sscanf+0x48>)
 800c2f8:	466a      	mov	r2, sp
 800c2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9003      	str	r0, [sp, #12]
 800c300:	9007      	str	r0, [sp, #28]
 800c302:	4809      	ldr	r0, [pc, #36]	; (800c328 <sscanf+0x4c>)
 800c304:	930e      	str	r3, [sp, #56]	; 0x38
 800c306:	9313      	str	r3, [sp, #76]	; 0x4c
 800c308:	3b01      	subs	r3, #1
 800c30a:	82d3      	strh	r3, [r2, #22]
 800c30c:	a902      	add	r1, sp, #8
 800c30e:	0023      	movs	r3, r4
 800c310:	002a      	movs	r2, r5
 800c312:	6800      	ldr	r0, [r0, #0]
 800c314:	9401      	str	r4, [sp, #4]
 800c316:	f002 fc91 	bl	800ec3c <__ssvfscanf_r>
 800c31a:	b01c      	add	sp, #112	; 0x70
 800c31c:	bc30      	pop	{r4, r5}
 800c31e:	bc08      	pop	{r3}
 800c320:	b003      	add	sp, #12
 800c322:	4718      	bx	r3
 800c324:	0800c355 	.word	0x0800c355
 800c328:	200006d8 	.word	0x200006d8

0800c32c <__sread>:
 800c32c:	b570      	push	{r4, r5, r6, lr}
 800c32e:	000c      	movs	r4, r1
 800c330:	250e      	movs	r5, #14
 800c332:	5f49      	ldrsh	r1, [r1, r5]
 800c334:	f000 f8ba 	bl	800c4ac <_read_r>
 800c338:	2800      	cmp	r0, #0
 800c33a:	db03      	blt.n	800c344 <__sread+0x18>
 800c33c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c33e:	181b      	adds	r3, r3, r0
 800c340:	6523      	str	r3, [r4, #80]	; 0x50
 800c342:	bd70      	pop	{r4, r5, r6, pc}
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	4a02      	ldr	r2, [pc, #8]	; (800c350 <__sread+0x24>)
 800c348:	4013      	ands	r3, r2
 800c34a:	81a3      	strh	r3, [r4, #12]
 800c34c:	e7f9      	b.n	800c342 <__sread+0x16>
 800c34e:	46c0      	nop			; (mov r8, r8)
 800c350:	ffffefff 	.word	0xffffefff

0800c354 <__seofread>:
 800c354:	2000      	movs	r0, #0
 800c356:	4770      	bx	lr

0800c358 <__swrite>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	001f      	movs	r7, r3
 800c35c:	898b      	ldrh	r3, [r1, #12]
 800c35e:	0005      	movs	r5, r0
 800c360:	000c      	movs	r4, r1
 800c362:	0016      	movs	r6, r2
 800c364:	05db      	lsls	r3, r3, #23
 800c366:	d505      	bpl.n	800c374 <__swrite+0x1c>
 800c368:	230e      	movs	r3, #14
 800c36a:	5ec9      	ldrsh	r1, [r1, r3]
 800c36c:	2200      	movs	r2, #0
 800c36e:	2302      	movs	r3, #2
 800c370:	f000 f888 	bl	800c484 <_lseek_r>
 800c374:	89a3      	ldrh	r3, [r4, #12]
 800c376:	4a05      	ldr	r2, [pc, #20]	; (800c38c <__swrite+0x34>)
 800c378:	0028      	movs	r0, r5
 800c37a:	4013      	ands	r3, r2
 800c37c:	81a3      	strh	r3, [r4, #12]
 800c37e:	0032      	movs	r2, r6
 800c380:	230e      	movs	r3, #14
 800c382:	5ee1      	ldrsh	r1, [r4, r3]
 800c384:	003b      	movs	r3, r7
 800c386:	f000 f8b7 	bl	800c4f8 <_write_r>
 800c38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c38c:	ffffefff 	.word	0xffffefff

0800c390 <__sseek>:
 800c390:	b570      	push	{r4, r5, r6, lr}
 800c392:	000c      	movs	r4, r1
 800c394:	250e      	movs	r5, #14
 800c396:	5f49      	ldrsh	r1, [r1, r5]
 800c398:	f000 f874 	bl	800c484 <_lseek_r>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	1c42      	adds	r2, r0, #1
 800c3a0:	d103      	bne.n	800c3aa <__sseek+0x1a>
 800c3a2:	4a05      	ldr	r2, [pc, #20]	; (800c3b8 <__sseek+0x28>)
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	81a3      	strh	r3, [r4, #12]
 800c3a8:	bd70      	pop	{r4, r5, r6, pc}
 800c3aa:	2280      	movs	r2, #128	; 0x80
 800c3ac:	0152      	lsls	r2, r2, #5
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	81a3      	strh	r3, [r4, #12]
 800c3b2:	6520      	str	r0, [r4, #80]	; 0x50
 800c3b4:	e7f8      	b.n	800c3a8 <__sseek+0x18>
 800c3b6:	46c0      	nop			; (mov r8, r8)
 800c3b8:	ffffefff 	.word	0xffffefff

0800c3bc <__sclose>:
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	230e      	movs	r3, #14
 800c3c0:	5ec9      	ldrsh	r1, [r1, r3]
 800c3c2:	f000 f84d 	bl	800c460 <_close_r>
 800c3c6:	bd10      	pop	{r4, pc}

0800c3c8 <memset>:
 800c3c8:	0003      	movs	r3, r0
 800c3ca:	1882      	adds	r2, r0, r2
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d100      	bne.n	800c3d2 <memset+0xa>
 800c3d0:	4770      	bx	lr
 800c3d2:	7019      	strb	r1, [r3, #0]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	e7f9      	b.n	800c3cc <memset+0x4>

0800c3d8 <strncmp>:
 800c3d8:	b530      	push	{r4, r5, lr}
 800c3da:	0005      	movs	r5, r0
 800c3dc:	1e10      	subs	r0, r2, #0
 800c3de:	d00b      	beq.n	800c3f8 <strncmp+0x20>
 800c3e0:	2400      	movs	r4, #0
 800c3e2:	3a01      	subs	r2, #1
 800c3e4:	5d2b      	ldrb	r3, [r5, r4]
 800c3e6:	5d08      	ldrb	r0, [r1, r4]
 800c3e8:	4283      	cmp	r3, r0
 800c3ea:	d104      	bne.n	800c3f6 <strncmp+0x1e>
 800c3ec:	42a2      	cmp	r2, r4
 800c3ee:	d002      	beq.n	800c3f6 <strncmp+0x1e>
 800c3f0:	3401      	adds	r4, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1f6      	bne.n	800c3e4 <strncmp+0xc>
 800c3f6:	1a18      	subs	r0, r3, r0
 800c3f8:	bd30      	pop	{r4, r5, pc}

0800c3fa <strncpy>:
 800c3fa:	0003      	movs	r3, r0
 800c3fc:	b530      	push	{r4, r5, lr}
 800c3fe:	001d      	movs	r5, r3
 800c400:	2a00      	cmp	r2, #0
 800c402:	d006      	beq.n	800c412 <strncpy+0x18>
 800c404:	780c      	ldrb	r4, [r1, #0]
 800c406:	3a01      	subs	r2, #1
 800c408:	3301      	adds	r3, #1
 800c40a:	702c      	strb	r4, [r5, #0]
 800c40c:	3101      	adds	r1, #1
 800c40e:	2c00      	cmp	r4, #0
 800c410:	d1f5      	bne.n	800c3fe <strncpy+0x4>
 800c412:	2100      	movs	r1, #0
 800c414:	189a      	adds	r2, r3, r2
 800c416:	4293      	cmp	r3, r2
 800c418:	d100      	bne.n	800c41c <strncpy+0x22>
 800c41a:	bd30      	pop	{r4, r5, pc}
 800c41c:	7019      	strb	r1, [r3, #0]
 800c41e:	3301      	adds	r3, #1
 800c420:	e7f9      	b.n	800c416 <strncpy+0x1c>

0800c422 <strstr>:
 800c422:	780a      	ldrb	r2, [r1, #0]
 800c424:	b530      	push	{r4, r5, lr}
 800c426:	2a00      	cmp	r2, #0
 800c428:	d10c      	bne.n	800c444 <strstr+0x22>
 800c42a:	bd30      	pop	{r4, r5, pc}
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d108      	bne.n	800c442 <strstr+0x20>
 800c430:	2301      	movs	r3, #1
 800c432:	5ccc      	ldrb	r4, [r1, r3]
 800c434:	2c00      	cmp	r4, #0
 800c436:	d0f8      	beq.n	800c42a <strstr+0x8>
 800c438:	5cc5      	ldrb	r5, [r0, r3]
 800c43a:	42a5      	cmp	r5, r4
 800c43c:	d101      	bne.n	800c442 <strstr+0x20>
 800c43e:	3301      	adds	r3, #1
 800c440:	e7f7      	b.n	800c432 <strstr+0x10>
 800c442:	3001      	adds	r0, #1
 800c444:	7803      	ldrb	r3, [r0, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1f0      	bne.n	800c42c <strstr+0xa>
 800c44a:	0018      	movs	r0, r3
 800c44c:	e7ed      	b.n	800c42a <strstr+0x8>
	...

0800c450 <__locale_mb_cur_max>:
 800c450:	2294      	movs	r2, #148	; 0x94
 800c452:	4b02      	ldr	r3, [pc, #8]	; (800c45c <__locale_mb_cur_max+0xc>)
 800c454:	0052      	lsls	r2, r2, #1
 800c456:	5c98      	ldrb	r0, [r3, r2]
 800c458:	4770      	bx	lr
 800c45a:	46c0      	nop			; (mov r8, r8)
 800c45c:	20000448 	.word	0x20000448

0800c460 <_close_r>:
 800c460:	2300      	movs	r3, #0
 800c462:	b570      	push	{r4, r5, r6, lr}
 800c464:	4d06      	ldr	r5, [pc, #24]	; (800c480 <_close_r+0x20>)
 800c466:	0004      	movs	r4, r0
 800c468:	0008      	movs	r0, r1
 800c46a:	602b      	str	r3, [r5, #0]
 800c46c:	f7f7 f9a9 	bl	80037c2 <_close>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d103      	bne.n	800c47c <_close_r+0x1c>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d000      	beq.n	800c47c <_close_r+0x1c>
 800c47a:	6023      	str	r3, [r4, #0]
 800c47c:	bd70      	pop	{r4, r5, r6, pc}
 800c47e:	46c0      	nop			; (mov r8, r8)
 800c480:	20000d24 	.word	0x20000d24

0800c484 <_lseek_r>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	0004      	movs	r4, r0
 800c488:	0008      	movs	r0, r1
 800c48a:	0011      	movs	r1, r2
 800c48c:	001a      	movs	r2, r3
 800c48e:	2300      	movs	r3, #0
 800c490:	4d05      	ldr	r5, [pc, #20]	; (800c4a8 <_lseek_r+0x24>)
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	f7f7 f9b6 	bl	8003804 <_lseek>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d103      	bne.n	800c4a4 <_lseek_r+0x20>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d000      	beq.n	800c4a4 <_lseek_r+0x20>
 800c4a2:	6023      	str	r3, [r4, #0]
 800c4a4:	bd70      	pop	{r4, r5, r6, pc}
 800c4a6:	46c0      	nop			; (mov r8, r8)
 800c4a8:	20000d24 	.word	0x20000d24

0800c4ac <_read_r>:
 800c4ac:	b570      	push	{r4, r5, r6, lr}
 800c4ae:	0004      	movs	r4, r0
 800c4b0:	0008      	movs	r0, r1
 800c4b2:	0011      	movs	r1, r2
 800c4b4:	001a      	movs	r2, r3
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	4d05      	ldr	r5, [pc, #20]	; (800c4d0 <_read_r+0x24>)
 800c4ba:	602b      	str	r3, [r5, #0]
 800c4bc:	f7f7 f948 	bl	8003750 <_read>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d103      	bne.n	800c4cc <_read_r+0x20>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d000      	beq.n	800c4cc <_read_r+0x20>
 800c4ca:	6023      	str	r3, [r4, #0]
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
 800c4ce:	46c0      	nop			; (mov r8, r8)
 800c4d0:	20000d24 	.word	0x20000d24

0800c4d4 <_sbrk_r>:
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	b570      	push	{r4, r5, r6, lr}
 800c4d8:	4d06      	ldr	r5, [pc, #24]	; (800c4f4 <_sbrk_r+0x20>)
 800c4da:	0004      	movs	r4, r0
 800c4dc:	0008      	movs	r0, r1
 800c4de:	602b      	str	r3, [r5, #0]
 800c4e0:	f7f7 f99c 	bl	800381c <_sbrk>
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	d103      	bne.n	800c4f0 <_sbrk_r+0x1c>
 800c4e8:	682b      	ldr	r3, [r5, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d000      	beq.n	800c4f0 <_sbrk_r+0x1c>
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	bd70      	pop	{r4, r5, r6, pc}
 800c4f2:	46c0      	nop			; (mov r8, r8)
 800c4f4:	20000d24 	.word	0x20000d24

0800c4f8 <_write_r>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	0004      	movs	r4, r0
 800c4fc:	0008      	movs	r0, r1
 800c4fe:	0011      	movs	r1, r2
 800c500:	001a      	movs	r2, r3
 800c502:	2300      	movs	r3, #0
 800c504:	4d05      	ldr	r5, [pc, #20]	; (800c51c <_write_r+0x24>)
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	f7f7 f93f 	bl	800378a <_write>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d103      	bne.n	800c518 <_write_r+0x20>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d000      	beq.n	800c518 <_write_r+0x20>
 800c516:	6023      	str	r3, [r4, #0]
 800c518:	bd70      	pop	{r4, r5, r6, pc}
 800c51a:	46c0      	nop			; (mov r8, r8)
 800c51c:	20000d24 	.word	0x20000d24

0800c520 <__errno>:
 800c520:	4b01      	ldr	r3, [pc, #4]	; (800c528 <__errno+0x8>)
 800c522:	6818      	ldr	r0, [r3, #0]
 800c524:	4770      	bx	lr
 800c526:	46c0      	nop			; (mov r8, r8)
 800c528:	200006d8 	.word	0x200006d8

0800c52c <__libc_init_array>:
 800c52c:	b570      	push	{r4, r5, r6, lr}
 800c52e:	2600      	movs	r6, #0
 800c530:	4c0c      	ldr	r4, [pc, #48]	; (800c564 <__libc_init_array+0x38>)
 800c532:	4d0d      	ldr	r5, [pc, #52]	; (800c568 <__libc_init_array+0x3c>)
 800c534:	1b64      	subs	r4, r4, r5
 800c536:	10a4      	asrs	r4, r4, #2
 800c538:	42a6      	cmp	r6, r4
 800c53a:	d109      	bne.n	800c550 <__libc_init_array+0x24>
 800c53c:	2600      	movs	r6, #0
 800c53e:	f006 fcc5 	bl	8012ecc <_init>
 800c542:	4c0a      	ldr	r4, [pc, #40]	; (800c56c <__libc_init_array+0x40>)
 800c544:	4d0a      	ldr	r5, [pc, #40]	; (800c570 <__libc_init_array+0x44>)
 800c546:	1b64      	subs	r4, r4, r5
 800c548:	10a4      	asrs	r4, r4, #2
 800c54a:	42a6      	cmp	r6, r4
 800c54c:	d105      	bne.n	800c55a <__libc_init_array+0x2e>
 800c54e:	bd70      	pop	{r4, r5, r6, pc}
 800c550:	00b3      	lsls	r3, r6, #2
 800c552:	58eb      	ldr	r3, [r5, r3]
 800c554:	4798      	blx	r3
 800c556:	3601      	adds	r6, #1
 800c558:	e7ee      	b.n	800c538 <__libc_init_array+0xc>
 800c55a:	00b3      	lsls	r3, r6, #2
 800c55c:	58eb      	ldr	r3, [r5, r3]
 800c55e:	4798      	blx	r3
 800c560:	3601      	adds	r6, #1
 800c562:	e7f2      	b.n	800c54a <__libc_init_array+0x1e>
 800c564:	08014d8c 	.word	0x08014d8c
 800c568:	08014d8c 	.word	0x08014d8c
 800c56c:	08014d94 	.word	0x08014d94
 800c570:	08014d8c 	.word	0x08014d8c

0800c574 <__retarget_lock_init_recursive>:
 800c574:	4770      	bx	lr

0800c576 <__retarget_lock_close_recursive>:
 800c576:	4770      	bx	lr

0800c578 <__retarget_lock_acquire_recursive>:
 800c578:	4770      	bx	lr

0800c57a <__retarget_lock_release_recursive>:
 800c57a:	4770      	bx	lr

0800c57c <sysconf>:
 800c57c:	2380      	movs	r3, #128	; 0x80
 800c57e:	b510      	push	{r4, lr}
 800c580:	2808      	cmp	r0, #8
 800c582:	d004      	beq.n	800c58e <sysconf+0x12>
 800c584:	f7ff ffcc 	bl	800c520 <__errno>
 800c588:	2316      	movs	r3, #22
 800c58a:	6003      	str	r3, [r0, #0]
 800c58c:	3b17      	subs	r3, #23
 800c58e:	0018      	movs	r0, r3
 800c590:	bd10      	pop	{r4, pc}

0800c592 <memcpy>:
 800c592:	2300      	movs	r3, #0
 800c594:	b510      	push	{r4, lr}
 800c596:	429a      	cmp	r2, r3
 800c598:	d100      	bne.n	800c59c <memcpy+0xa>
 800c59a:	bd10      	pop	{r4, pc}
 800c59c:	5ccc      	ldrb	r4, [r1, r3]
 800c59e:	54c4      	strb	r4, [r0, r3]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	e7f8      	b.n	800c596 <memcpy+0x4>

0800c5a4 <nan>:
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	4901      	ldr	r1, [pc, #4]	; (800c5ac <nan+0x8>)
 800c5a8:	4770      	bx	lr
 800c5aa:	46c0      	nop			; (mov r8, r8)
 800c5ac:	7ff80000 	.word	0x7ff80000

0800c5b0 <nanf>:
 800c5b0:	4800      	ldr	r0, [pc, #0]	; (800c5b4 <nanf+0x4>)
 800c5b2:	4770      	bx	lr
 800c5b4:	7fc00000 	.word	0x7fc00000

0800c5b8 <register_fini>:
 800c5b8:	4b03      	ldr	r3, [pc, #12]	; (800c5c8 <register_fini+0x10>)
 800c5ba:	b510      	push	{r4, lr}
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <register_fini+0xe>
 800c5c0:	4802      	ldr	r0, [pc, #8]	; (800c5cc <register_fini+0x14>)
 800c5c2:	f000 f805 	bl	800c5d0 <atexit>
 800c5c6:	bd10      	pop	{r4, pc}
 800c5c8:	00000000 	.word	0x00000000
 800c5cc:	0801032d 	.word	0x0801032d

0800c5d0 <atexit>:
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	b510      	push	{r4, lr}
 800c5d4:	0001      	movs	r1, r0
 800c5d6:	001a      	movs	r2, r3
 800c5d8:	0018      	movs	r0, r3
 800c5da:	f003 fef9 	bl	80103d0 <__register_exitproc>
 800c5de:	bd10      	pop	{r4, pc}

0800c5e0 <_malloc_trim_r>:
 800c5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5e2:	0004      	movs	r4, r0
 800c5e4:	2008      	movs	r0, #8
 800c5e6:	000d      	movs	r5, r1
 800c5e8:	f7ff ffc8 	bl	800c57c <sysconf>
 800c5ec:	0006      	movs	r6, r0
 800c5ee:	0020      	movs	r0, r4
 800c5f0:	f7fe fe7e 	bl	800b2f0 <__malloc_lock>
 800c5f4:	2203      	movs	r2, #3
 800c5f6:	4f21      	ldr	r7, [pc, #132]	; (800c67c <_malloc_trim_r+0x9c>)
 800c5f8:	0031      	movs	r1, r6
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	4393      	bics	r3, r2
 800c600:	1b58      	subs	r0, r3, r5
 800c602:	3811      	subs	r0, #17
 800c604:	1980      	adds	r0, r0, r6
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	f7f3 fd98 	bl	800013c <__udivsi3>
 800c60c:	1e45      	subs	r5, r0, #1
 800c60e:	4375      	muls	r5, r6
 800c610:	42ae      	cmp	r6, r5
 800c612:	dd04      	ble.n	800c61e <_malloc_trim_r+0x3e>
 800c614:	0020      	movs	r0, r4
 800c616:	f7fe fe73 	bl	800b300 <__malloc_unlock>
 800c61a:	2000      	movs	r0, #0
 800c61c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c61e:	2100      	movs	r1, #0
 800c620:	0020      	movs	r0, r4
 800c622:	f7ff ff57 	bl	800c4d4 <_sbrk_r>
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	9a01      	ldr	r2, [sp, #4]
 800c62a:	189b      	adds	r3, r3, r2
 800c62c:	4298      	cmp	r0, r3
 800c62e:	d1f1      	bne.n	800c614 <_malloc_trim_r+0x34>
 800c630:	0020      	movs	r0, r4
 800c632:	4269      	negs	r1, r5
 800c634:	f7ff ff4e 	bl	800c4d4 <_sbrk_r>
 800c638:	3001      	adds	r0, #1
 800c63a:	d110      	bne.n	800c65e <_malloc_trim_r+0x7e>
 800c63c:	2100      	movs	r1, #0
 800c63e:	0020      	movs	r0, r4
 800c640:	f7ff ff48 	bl	800c4d4 <_sbrk_r>
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	1a81      	subs	r1, r0, r2
 800c648:	290f      	cmp	r1, #15
 800c64a:	dde3      	ble.n	800c614 <_malloc_trim_r+0x34>
 800c64c:	4d0c      	ldr	r5, [pc, #48]	; (800c680 <_malloc_trim_r+0xa0>)
 800c64e:	4b0d      	ldr	r3, [pc, #52]	; (800c684 <_malloc_trim_r+0xa4>)
 800c650:	682d      	ldr	r5, [r5, #0]
 800c652:	1b40      	subs	r0, r0, r5
 800c654:	6018      	str	r0, [r3, #0]
 800c656:	2301      	movs	r3, #1
 800c658:	430b      	orrs	r3, r1
 800c65a:	6053      	str	r3, [r2, #4]
 800c65c:	e7da      	b.n	800c614 <_malloc_trim_r+0x34>
 800c65e:	2601      	movs	r6, #1
 800c660:	9b01      	ldr	r3, [sp, #4]
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	1b5b      	subs	r3, r3, r5
 800c666:	4333      	orrs	r3, r6
 800c668:	6053      	str	r3, [r2, #4]
 800c66a:	4a06      	ldr	r2, [pc, #24]	; (800c684 <_malloc_trim_r+0xa4>)
 800c66c:	0020      	movs	r0, r4
 800c66e:	6813      	ldr	r3, [r2, #0]
 800c670:	1b5b      	subs	r3, r3, r5
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	f7fe fe44 	bl	800b300 <__malloc_unlock>
 800c678:	0030      	movs	r0, r6
 800c67a:	e7cf      	b.n	800c61c <_malloc_trim_r+0x3c>
 800c67c:	2000002c 	.word	0x2000002c
 800c680:	20000434 	.word	0x20000434
 800c684:	20000bb4 	.word	0x20000bb4

0800c688 <_free_r>:
 800c688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c68a:	1e0d      	subs	r5, r1, #0
 800c68c:	9001      	str	r0, [sp, #4]
 800c68e:	d02d      	beq.n	800c6ec <_free_r+0x64>
 800c690:	f7fe fe2e 	bl	800b2f0 <__malloc_lock>
 800c694:	2301      	movs	r3, #1
 800c696:	0029      	movs	r1, r5
 800c698:	469c      	mov	ip, r3
 800c69a:	3908      	subs	r1, #8
 800c69c:	684f      	ldr	r7, [r1, #4]
 800c69e:	4662      	mov	r2, ip
 800c6a0:	003b      	movs	r3, r7
 800c6a2:	4664      	mov	r4, ip
 800c6a4:	4393      	bics	r3, r2
 800c6a6:	18c8      	adds	r0, r1, r3
 800c6a8:	6845      	ldr	r5, [r0, #4]
 800c6aa:	3202      	adds	r2, #2
 800c6ac:	4395      	bics	r5, r2
 800c6ae:	4a4a      	ldr	r2, [pc, #296]	; (800c7d8 <_free_r+0x150>)
 800c6b0:	4027      	ands	r7, r4
 800c6b2:	6896      	ldr	r6, [r2, #8]
 800c6b4:	4286      	cmp	r6, r0
 800c6b6:	d11a      	bne.n	800c6ee <_free_r+0x66>
 800c6b8:	195b      	adds	r3, r3, r5
 800c6ba:	2f00      	cmp	r7, #0
 800c6bc:	d106      	bne.n	800c6cc <_free_r+0x44>
 800c6be:	6808      	ldr	r0, [r1, #0]
 800c6c0:	1a09      	subs	r1, r1, r0
 800c6c2:	688d      	ldr	r5, [r1, #8]
 800c6c4:	181b      	adds	r3, r3, r0
 800c6c6:	68c8      	ldr	r0, [r1, #12]
 800c6c8:	60e8      	str	r0, [r5, #12]
 800c6ca:	6085      	str	r5, [r0, #8]
 800c6cc:	2001      	movs	r0, #1
 800c6ce:	4318      	orrs	r0, r3
 800c6d0:	6048      	str	r0, [r1, #4]
 800c6d2:	6091      	str	r1, [r2, #8]
 800c6d4:	4a41      	ldr	r2, [pc, #260]	; (800c7dc <_free_r+0x154>)
 800c6d6:	6812      	ldr	r2, [r2, #0]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d804      	bhi.n	800c6e6 <_free_r+0x5e>
 800c6dc:	4b40      	ldr	r3, [pc, #256]	; (800c7e0 <_free_r+0x158>)
 800c6de:	9801      	ldr	r0, [sp, #4]
 800c6e0:	6819      	ldr	r1, [r3, #0]
 800c6e2:	f7ff ff7d 	bl	800c5e0 <_malloc_trim_r>
 800c6e6:	9801      	ldr	r0, [sp, #4]
 800c6e8:	f7fe fe0a 	bl	800b300 <__malloc_unlock>
 800c6ec:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c6ee:	2600      	movs	r6, #0
 800c6f0:	6045      	str	r5, [r0, #4]
 800c6f2:	42b7      	cmp	r7, r6
 800c6f4:	d109      	bne.n	800c70a <_free_r+0x82>
 800c6f6:	680f      	ldr	r7, [r1, #0]
 800c6f8:	4c3a      	ldr	r4, [pc, #232]	; (800c7e4 <_free_r+0x15c>)
 800c6fa:	1bc9      	subs	r1, r1, r7
 800c6fc:	19db      	adds	r3, r3, r7
 800c6fe:	688f      	ldr	r7, [r1, #8]
 800c700:	42a7      	cmp	r7, r4
 800c702:	d02c      	beq.n	800c75e <_free_r+0xd6>
 800c704:	68cc      	ldr	r4, [r1, #12]
 800c706:	60fc      	str	r4, [r7, #12]
 800c708:	60a7      	str	r7, [r4, #8]
 800c70a:	1947      	adds	r7, r0, r5
 800c70c:	687c      	ldr	r4, [r7, #4]
 800c70e:	2701      	movs	r7, #1
 800c710:	423c      	tst	r4, r7
 800c712:	d10b      	bne.n	800c72c <_free_r+0xa4>
 800c714:	195b      	adds	r3, r3, r5
 800c716:	6885      	ldr	r5, [r0, #8]
 800c718:	2e00      	cmp	r6, #0
 800c71a:	d122      	bne.n	800c762 <_free_r+0xda>
 800c71c:	4c31      	ldr	r4, [pc, #196]	; (800c7e4 <_free_r+0x15c>)
 800c71e:	42a5      	cmp	r5, r4
 800c720:	d11f      	bne.n	800c762 <_free_r+0xda>
 800c722:	003e      	movs	r6, r7
 800c724:	6151      	str	r1, [r2, #20]
 800c726:	6111      	str	r1, [r2, #16]
 800c728:	60cd      	str	r5, [r1, #12]
 800c72a:	608d      	str	r5, [r1, #8]
 800c72c:	2501      	movs	r5, #1
 800c72e:	0028      	movs	r0, r5
 800c730:	4318      	orrs	r0, r3
 800c732:	6048      	str	r0, [r1, #4]
 800c734:	50cb      	str	r3, [r1, r3]
 800c736:	2e00      	cmp	r6, #0
 800c738:	d1d5      	bne.n	800c6e6 <_free_r+0x5e>
 800c73a:	2080      	movs	r0, #128	; 0x80
 800c73c:	0080      	lsls	r0, r0, #2
 800c73e:	4283      	cmp	r3, r0
 800c740:	d213      	bcs.n	800c76a <_free_r+0xe2>
 800c742:	08d8      	lsrs	r0, r3, #3
 800c744:	095b      	lsrs	r3, r3, #5
 800c746:	409d      	lsls	r5, r3
 800c748:	6853      	ldr	r3, [r2, #4]
 800c74a:	431d      	orrs	r5, r3
 800c74c:	00c3      	lsls	r3, r0, #3
 800c74e:	189b      	adds	r3, r3, r2
 800c750:	6055      	str	r5, [r2, #4]
 800c752:	689a      	ldr	r2, [r3, #8]
 800c754:	60cb      	str	r3, [r1, #12]
 800c756:	608a      	str	r2, [r1, #8]
 800c758:	6099      	str	r1, [r3, #8]
 800c75a:	60d1      	str	r1, [r2, #12]
 800c75c:	e7c3      	b.n	800c6e6 <_free_r+0x5e>
 800c75e:	4666      	mov	r6, ip
 800c760:	e7d3      	b.n	800c70a <_free_r+0x82>
 800c762:	68c0      	ldr	r0, [r0, #12]
 800c764:	60e8      	str	r0, [r5, #12]
 800c766:	6085      	str	r5, [r0, #8]
 800c768:	e7e0      	b.n	800c72c <_free_r+0xa4>
 800c76a:	0a5d      	lsrs	r5, r3, #9
 800c76c:	2d04      	cmp	r5, #4
 800c76e:	d812      	bhi.n	800c796 <_free_r+0x10e>
 800c770:	0998      	lsrs	r0, r3, #6
 800c772:	3038      	adds	r0, #56	; 0x38
 800c774:	00c6      	lsls	r6, r0, #3
 800c776:	18b6      	adds	r6, r6, r2
 800c778:	68b5      	ldr	r5, [r6, #8]
 800c77a:	2703      	movs	r7, #3
 800c77c:	42ae      	cmp	r6, r5
 800c77e:	d125      	bne.n	800c7cc <_free_r+0x144>
 800c780:	2301      	movs	r3, #1
 800c782:	1080      	asrs	r0, r0, #2
 800c784:	4083      	lsls	r3, r0
 800c786:	6850      	ldr	r0, [r2, #4]
 800c788:	4303      	orrs	r3, r0
 800c78a:	6053      	str	r3, [r2, #4]
 800c78c:	60ce      	str	r6, [r1, #12]
 800c78e:	608d      	str	r5, [r1, #8]
 800c790:	60b1      	str	r1, [r6, #8]
 800c792:	60e9      	str	r1, [r5, #12]
 800c794:	e7a7      	b.n	800c6e6 <_free_r+0x5e>
 800c796:	2d14      	cmp	r5, #20
 800c798:	d802      	bhi.n	800c7a0 <_free_r+0x118>
 800c79a:	0028      	movs	r0, r5
 800c79c:	305b      	adds	r0, #91	; 0x5b
 800c79e:	e7e9      	b.n	800c774 <_free_r+0xec>
 800c7a0:	2d54      	cmp	r5, #84	; 0x54
 800c7a2:	d802      	bhi.n	800c7aa <_free_r+0x122>
 800c7a4:	0b18      	lsrs	r0, r3, #12
 800c7a6:	306e      	adds	r0, #110	; 0x6e
 800c7a8:	e7e4      	b.n	800c774 <_free_r+0xec>
 800c7aa:	20aa      	movs	r0, #170	; 0xaa
 800c7ac:	0040      	lsls	r0, r0, #1
 800c7ae:	4285      	cmp	r5, r0
 800c7b0:	d802      	bhi.n	800c7b8 <_free_r+0x130>
 800c7b2:	0bd8      	lsrs	r0, r3, #15
 800c7b4:	3077      	adds	r0, #119	; 0x77
 800c7b6:	e7dd      	b.n	800c774 <_free_r+0xec>
 800c7b8:	4e0b      	ldr	r6, [pc, #44]	; (800c7e8 <_free_r+0x160>)
 800c7ba:	207e      	movs	r0, #126	; 0x7e
 800c7bc:	42b5      	cmp	r5, r6
 800c7be:	d8d9      	bhi.n	800c774 <_free_r+0xec>
 800c7c0:	0c98      	lsrs	r0, r3, #18
 800c7c2:	307c      	adds	r0, #124	; 0x7c
 800c7c4:	e7d6      	b.n	800c774 <_free_r+0xec>
 800c7c6:	68ad      	ldr	r5, [r5, #8]
 800c7c8:	42ae      	cmp	r6, r5
 800c7ca:	d003      	beq.n	800c7d4 <_free_r+0x14c>
 800c7cc:	686a      	ldr	r2, [r5, #4]
 800c7ce:	43ba      	bics	r2, r7
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d8f8      	bhi.n	800c7c6 <_free_r+0x13e>
 800c7d4:	68ee      	ldr	r6, [r5, #12]
 800c7d6:	e7d9      	b.n	800c78c <_free_r+0x104>
 800c7d8:	2000002c 	.word	0x2000002c
 800c7dc:	20000438 	.word	0x20000438
 800c7e0:	20000be4 	.word	0x20000be4
 800c7e4:	20000034 	.word	0x20000034
 800c7e8:	00000554 	.word	0x00000554

0800c7ec <rshift>:
 800c7ec:	0002      	movs	r2, r0
 800c7ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7f0:	6904      	ldr	r4, [r0, #16]
 800c7f2:	114b      	asrs	r3, r1, #5
 800c7f4:	b085      	sub	sp, #20
 800c7f6:	3214      	adds	r2, #20
 800c7f8:	9302      	str	r3, [sp, #8]
 800c7fa:	114d      	asrs	r5, r1, #5
 800c7fc:	0013      	movs	r3, r2
 800c7fe:	42ac      	cmp	r4, r5
 800c800:	dd32      	ble.n	800c868 <rshift+0x7c>
 800c802:	261f      	movs	r6, #31
 800c804:	000f      	movs	r7, r1
 800c806:	114b      	asrs	r3, r1, #5
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	00a5      	lsls	r5, r4, #2
 800c80c:	18d3      	adds	r3, r2, r3
 800c80e:	4037      	ands	r7, r6
 800c810:	1955      	adds	r5, r2, r5
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	9701      	str	r7, [sp, #4]
 800c816:	4231      	tst	r1, r6
 800c818:	d10d      	bne.n	800c836 <rshift+0x4a>
 800c81a:	0016      	movs	r6, r2
 800c81c:	0019      	movs	r1, r3
 800c81e:	428d      	cmp	r5, r1
 800c820:	d836      	bhi.n	800c890 <rshift+0xa4>
 800c822:	9900      	ldr	r1, [sp, #0]
 800c824:	2300      	movs	r3, #0
 800c826:	3903      	subs	r1, #3
 800c828:	428d      	cmp	r5, r1
 800c82a:	d302      	bcc.n	800c832 <rshift+0x46>
 800c82c:	9b02      	ldr	r3, [sp, #8]
 800c82e:	1ae4      	subs	r4, r4, r3
 800c830:	00a3      	lsls	r3, r4, #2
 800c832:	18d3      	adds	r3, r2, r3
 800c834:	e018      	b.n	800c868 <rshift+0x7c>
 800c836:	2120      	movs	r1, #32
 800c838:	9e01      	ldr	r6, [sp, #4]
 800c83a:	9f01      	ldr	r7, [sp, #4]
 800c83c:	1b89      	subs	r1, r1, r6
 800c83e:	9e00      	ldr	r6, [sp, #0]
 800c840:	9103      	str	r1, [sp, #12]
 800c842:	ce02      	ldmia	r6!, {r1}
 800c844:	4694      	mov	ip, r2
 800c846:	40f9      	lsrs	r1, r7
 800c848:	42b5      	cmp	r5, r6
 800c84a:	d816      	bhi.n	800c87a <rshift+0x8e>
 800c84c:	9e00      	ldr	r6, [sp, #0]
 800c84e:	2300      	movs	r3, #0
 800c850:	3601      	adds	r6, #1
 800c852:	42b5      	cmp	r5, r6
 800c854:	d303      	bcc.n	800c85e <rshift+0x72>
 800c856:	9b02      	ldr	r3, [sp, #8]
 800c858:	1ae3      	subs	r3, r4, r3
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	3b04      	subs	r3, #4
 800c85e:	18d3      	adds	r3, r2, r3
 800c860:	6019      	str	r1, [r3, #0]
 800c862:	2900      	cmp	r1, #0
 800c864:	d000      	beq.n	800c868 <rshift+0x7c>
 800c866:	3304      	adds	r3, #4
 800c868:	1a99      	subs	r1, r3, r2
 800c86a:	1089      	asrs	r1, r1, #2
 800c86c:	6101      	str	r1, [r0, #16]
 800c86e:	4293      	cmp	r3, r2
 800c870:	d101      	bne.n	800c876 <rshift+0x8a>
 800c872:	2300      	movs	r3, #0
 800c874:	6143      	str	r3, [r0, #20]
 800c876:	b005      	add	sp, #20
 800c878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c87a:	6837      	ldr	r7, [r6, #0]
 800c87c:	9b03      	ldr	r3, [sp, #12]
 800c87e:	409f      	lsls	r7, r3
 800c880:	430f      	orrs	r7, r1
 800c882:	4661      	mov	r1, ip
 800c884:	c180      	stmia	r1!, {r7}
 800c886:	468c      	mov	ip, r1
 800c888:	9b01      	ldr	r3, [sp, #4]
 800c88a:	ce02      	ldmia	r6!, {r1}
 800c88c:	40d9      	lsrs	r1, r3
 800c88e:	e7db      	b.n	800c848 <rshift+0x5c>
 800c890:	c980      	ldmia	r1!, {r7}
 800c892:	c680      	stmia	r6!, {r7}
 800c894:	e7c3      	b.n	800c81e <rshift+0x32>

0800c896 <__hexdig_fun>:
 800c896:	0002      	movs	r2, r0
 800c898:	3a30      	subs	r2, #48	; 0x30
 800c89a:	0003      	movs	r3, r0
 800c89c:	2a09      	cmp	r2, #9
 800c89e:	d802      	bhi.n	800c8a6 <__hexdig_fun+0x10>
 800c8a0:	3b20      	subs	r3, #32
 800c8a2:	b2d8      	uxtb	r0, r3
 800c8a4:	4770      	bx	lr
 800c8a6:	0002      	movs	r2, r0
 800c8a8:	3a61      	subs	r2, #97	; 0x61
 800c8aa:	2a05      	cmp	r2, #5
 800c8ac:	d801      	bhi.n	800c8b2 <__hexdig_fun+0x1c>
 800c8ae:	3b47      	subs	r3, #71	; 0x47
 800c8b0:	e7f7      	b.n	800c8a2 <__hexdig_fun+0xc>
 800c8b2:	001a      	movs	r2, r3
 800c8b4:	3a41      	subs	r2, #65	; 0x41
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	2a05      	cmp	r2, #5
 800c8ba:	d8f3      	bhi.n	800c8a4 <__hexdig_fun+0xe>
 800c8bc:	3b27      	subs	r3, #39	; 0x27
 800c8be:	e7f0      	b.n	800c8a2 <__hexdig_fun+0xc>

0800c8c0 <__gethex>:
 800c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8c2:	b089      	sub	sp, #36	; 0x24
 800c8c4:	9307      	str	r3, [sp, #28]
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	9201      	str	r2, [sp, #4]
 800c8ca:	680a      	ldr	r2, [r1, #0]
 800c8cc:	425b      	negs	r3, r3
 800c8ce:	9003      	str	r0, [sp, #12]
 800c8d0:	9106      	str	r1, [sp, #24]
 800c8d2:	1c96      	adds	r6, r2, #2
 800c8d4:	1a9b      	subs	r3, r3, r2
 800c8d6:	199a      	adds	r2, r3, r6
 800c8d8:	9600      	str	r6, [sp, #0]
 800c8da:	9205      	str	r2, [sp, #20]
 800c8dc:	9a00      	ldr	r2, [sp, #0]
 800c8de:	3601      	adds	r6, #1
 800c8e0:	7810      	ldrb	r0, [r2, #0]
 800c8e2:	2830      	cmp	r0, #48	; 0x30
 800c8e4:	d0f7      	beq.n	800c8d6 <__gethex+0x16>
 800c8e6:	f7ff ffd6 	bl	800c896 <__hexdig_fun>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	001d      	movs	r5, r3
 800c8ee:	9302      	str	r3, [sp, #8]
 800c8f0:	4298      	cmp	r0, r3
 800c8f2:	d11d      	bne.n	800c930 <__gethex+0x70>
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	49a6      	ldr	r1, [pc, #664]	; (800cb90 <__gethex+0x2d0>)
 800c8f8:	9800      	ldr	r0, [sp, #0]
 800c8fa:	f7ff fd6d 	bl	800c3d8 <strncmp>
 800c8fe:	0007      	movs	r7, r0
 800c900:	42a8      	cmp	r0, r5
 800c902:	d169      	bne.n	800c9d8 <__gethex+0x118>
 800c904:	9b00      	ldr	r3, [sp, #0]
 800c906:	0034      	movs	r4, r6
 800c908:	7858      	ldrb	r0, [r3, #1]
 800c90a:	f7ff ffc4 	bl	800c896 <__hexdig_fun>
 800c90e:	2301      	movs	r3, #1
 800c910:	9302      	str	r3, [sp, #8]
 800c912:	42a8      	cmp	r0, r5
 800c914:	d02f      	beq.n	800c976 <__gethex+0xb6>
 800c916:	9600      	str	r6, [sp, #0]
 800c918:	9b00      	ldr	r3, [sp, #0]
 800c91a:	7818      	ldrb	r0, [r3, #0]
 800c91c:	2830      	cmp	r0, #48	; 0x30
 800c91e:	d009      	beq.n	800c934 <__gethex+0x74>
 800c920:	f7ff ffb9 	bl	800c896 <__hexdig_fun>
 800c924:	4242      	negs	r2, r0
 800c926:	4142      	adcs	r2, r0
 800c928:	2301      	movs	r3, #1
 800c92a:	0035      	movs	r5, r6
 800c92c:	9202      	str	r2, [sp, #8]
 800c92e:	9305      	str	r3, [sp, #20]
 800c930:	9c00      	ldr	r4, [sp, #0]
 800c932:	e004      	b.n	800c93e <__gethex+0x7e>
 800c934:	9b00      	ldr	r3, [sp, #0]
 800c936:	3301      	adds	r3, #1
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	e7ed      	b.n	800c918 <__gethex+0x58>
 800c93c:	3401      	adds	r4, #1
 800c93e:	7820      	ldrb	r0, [r4, #0]
 800c940:	f7ff ffa9 	bl	800c896 <__hexdig_fun>
 800c944:	1e07      	subs	r7, r0, #0
 800c946:	d1f9      	bne.n	800c93c <__gethex+0x7c>
 800c948:	2201      	movs	r2, #1
 800c94a:	0020      	movs	r0, r4
 800c94c:	4990      	ldr	r1, [pc, #576]	; (800cb90 <__gethex+0x2d0>)
 800c94e:	f7ff fd43 	bl	800c3d8 <strncmp>
 800c952:	2800      	cmp	r0, #0
 800c954:	d10d      	bne.n	800c972 <__gethex+0xb2>
 800c956:	2d00      	cmp	r5, #0
 800c958:	d106      	bne.n	800c968 <__gethex+0xa8>
 800c95a:	3401      	adds	r4, #1
 800c95c:	0025      	movs	r5, r4
 800c95e:	7820      	ldrb	r0, [r4, #0]
 800c960:	f7ff ff99 	bl	800c896 <__hexdig_fun>
 800c964:	2800      	cmp	r0, #0
 800c966:	d102      	bne.n	800c96e <__gethex+0xae>
 800c968:	1b2d      	subs	r5, r5, r4
 800c96a:	00af      	lsls	r7, r5, #2
 800c96c:	e003      	b.n	800c976 <__gethex+0xb6>
 800c96e:	3401      	adds	r4, #1
 800c970:	e7f5      	b.n	800c95e <__gethex+0x9e>
 800c972:	2d00      	cmp	r5, #0
 800c974:	d1f8      	bne.n	800c968 <__gethex+0xa8>
 800c976:	2220      	movs	r2, #32
 800c978:	7823      	ldrb	r3, [r4, #0]
 800c97a:	0026      	movs	r6, r4
 800c97c:	4393      	bics	r3, r2
 800c97e:	2b50      	cmp	r3, #80	; 0x50
 800c980:	d11d      	bne.n	800c9be <__gethex+0xfe>
 800c982:	7863      	ldrb	r3, [r4, #1]
 800c984:	2b2b      	cmp	r3, #43	; 0x2b
 800c986:	d02c      	beq.n	800c9e2 <__gethex+0x122>
 800c988:	2b2d      	cmp	r3, #45	; 0x2d
 800c98a:	d02e      	beq.n	800c9ea <__gethex+0x12a>
 800c98c:	2300      	movs	r3, #0
 800c98e:	1c66      	adds	r6, r4, #1
 800c990:	9304      	str	r3, [sp, #16]
 800c992:	7830      	ldrb	r0, [r6, #0]
 800c994:	f7ff ff7f 	bl	800c896 <__hexdig_fun>
 800c998:	1e43      	subs	r3, r0, #1
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b18      	cmp	r3, #24
 800c99e:	d82b      	bhi.n	800c9f8 <__gethex+0x138>
 800c9a0:	3810      	subs	r0, #16
 800c9a2:	0005      	movs	r5, r0
 800c9a4:	7870      	ldrb	r0, [r6, #1]
 800c9a6:	f7ff ff76 	bl	800c896 <__hexdig_fun>
 800c9aa:	1e43      	subs	r3, r0, #1
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	3601      	adds	r6, #1
 800c9b0:	2b18      	cmp	r3, #24
 800c9b2:	d91c      	bls.n	800c9ee <__gethex+0x12e>
 800c9b4:	9b04      	ldr	r3, [sp, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d000      	beq.n	800c9bc <__gethex+0xfc>
 800c9ba:	426d      	negs	r5, r5
 800c9bc:	197f      	adds	r7, r7, r5
 800c9be:	9b06      	ldr	r3, [sp, #24]
 800c9c0:	601e      	str	r6, [r3, #0]
 800c9c2:	9b02      	ldr	r3, [sp, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d019      	beq.n	800c9fc <__gethex+0x13c>
 800c9c8:	2600      	movs	r6, #0
 800c9ca:	9b05      	ldr	r3, [sp, #20]
 800c9cc:	42b3      	cmp	r3, r6
 800c9ce:	d100      	bne.n	800c9d2 <__gethex+0x112>
 800c9d0:	3606      	adds	r6, #6
 800c9d2:	0030      	movs	r0, r6
 800c9d4:	b009      	add	sp, #36	; 0x24
 800c9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9d8:	2301      	movs	r3, #1
 800c9da:	2700      	movs	r7, #0
 800c9dc:	9c00      	ldr	r4, [sp, #0]
 800c9de:	9302      	str	r3, [sp, #8]
 800c9e0:	e7c9      	b.n	800c976 <__gethex+0xb6>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	9304      	str	r3, [sp, #16]
 800c9e6:	1ca6      	adds	r6, r4, #2
 800c9e8:	e7d3      	b.n	800c992 <__gethex+0xd2>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e7fa      	b.n	800c9e4 <__gethex+0x124>
 800c9ee:	230a      	movs	r3, #10
 800c9f0:	435d      	muls	r5, r3
 800c9f2:	182d      	adds	r5, r5, r0
 800c9f4:	3d10      	subs	r5, #16
 800c9f6:	e7d5      	b.n	800c9a4 <__gethex+0xe4>
 800c9f8:	0026      	movs	r6, r4
 800c9fa:	e7e0      	b.n	800c9be <__gethex+0xfe>
 800c9fc:	9b00      	ldr	r3, [sp, #0]
 800c9fe:	9902      	ldr	r1, [sp, #8]
 800ca00:	1ae3      	subs	r3, r4, r3
 800ca02:	3b01      	subs	r3, #1
 800ca04:	2b07      	cmp	r3, #7
 800ca06:	dc0a      	bgt.n	800ca1e <__gethex+0x15e>
 800ca08:	9803      	ldr	r0, [sp, #12]
 800ca0a:	f000 fa5d 	bl	800cec8 <_Balloc>
 800ca0e:	1e05      	subs	r5, r0, #0
 800ca10:	d108      	bne.n	800ca24 <__gethex+0x164>
 800ca12:	002a      	movs	r2, r5
 800ca14:	21e4      	movs	r1, #228	; 0xe4
 800ca16:	4b5f      	ldr	r3, [pc, #380]	; (800cb94 <__gethex+0x2d4>)
 800ca18:	485f      	ldr	r0, [pc, #380]	; (800cb98 <__gethex+0x2d8>)
 800ca1a:	f003 fd19 	bl	8010450 <__assert_func>
 800ca1e:	3101      	adds	r1, #1
 800ca20:	105b      	asrs	r3, r3, #1
 800ca22:	e7ef      	b.n	800ca04 <__gethex+0x144>
 800ca24:	0003      	movs	r3, r0
 800ca26:	3314      	adds	r3, #20
 800ca28:	9302      	str	r3, [sp, #8]
 800ca2a:	9305      	str	r3, [sp, #20]
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	001e      	movs	r6, r3
 800ca30:	9304      	str	r3, [sp, #16]
 800ca32:	9b00      	ldr	r3, [sp, #0]
 800ca34:	42a3      	cmp	r3, r4
 800ca36:	d33f      	bcc.n	800cab8 <__gethex+0x1f8>
 800ca38:	9c05      	ldr	r4, [sp, #20]
 800ca3a:	9b02      	ldr	r3, [sp, #8]
 800ca3c:	c440      	stmia	r4!, {r6}
 800ca3e:	1ae4      	subs	r4, r4, r3
 800ca40:	10a4      	asrs	r4, r4, #2
 800ca42:	0030      	movs	r0, r6
 800ca44:	612c      	str	r4, [r5, #16]
 800ca46:	f000 fb01 	bl	800d04c <__hi0bits>
 800ca4a:	9b01      	ldr	r3, [sp, #4]
 800ca4c:	0164      	lsls	r4, r4, #5
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	1a26      	subs	r6, r4, r0
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	429e      	cmp	r6, r3
 800ca56:	dd51      	ble.n	800cafc <__gethex+0x23c>
 800ca58:	1af6      	subs	r6, r6, r3
 800ca5a:	0031      	movs	r1, r6
 800ca5c:	0028      	movs	r0, r5
 800ca5e:	f000 fe7b 	bl	800d758 <__any_on>
 800ca62:	1e04      	subs	r4, r0, #0
 800ca64:	d016      	beq.n	800ca94 <__gethex+0x1d4>
 800ca66:	2401      	movs	r4, #1
 800ca68:	231f      	movs	r3, #31
 800ca6a:	0020      	movs	r0, r4
 800ca6c:	1e72      	subs	r2, r6, #1
 800ca6e:	4013      	ands	r3, r2
 800ca70:	4098      	lsls	r0, r3
 800ca72:	0003      	movs	r3, r0
 800ca74:	1151      	asrs	r1, r2, #5
 800ca76:	9802      	ldr	r0, [sp, #8]
 800ca78:	0089      	lsls	r1, r1, #2
 800ca7a:	5809      	ldr	r1, [r1, r0]
 800ca7c:	4219      	tst	r1, r3
 800ca7e:	d009      	beq.n	800ca94 <__gethex+0x1d4>
 800ca80:	42a2      	cmp	r2, r4
 800ca82:	dd06      	ble.n	800ca92 <__gethex+0x1d2>
 800ca84:	0028      	movs	r0, r5
 800ca86:	1eb1      	subs	r1, r6, #2
 800ca88:	f000 fe66 	bl	800d758 <__any_on>
 800ca8c:	3402      	adds	r4, #2
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d100      	bne.n	800ca94 <__gethex+0x1d4>
 800ca92:	2402      	movs	r4, #2
 800ca94:	0031      	movs	r1, r6
 800ca96:	0028      	movs	r0, r5
 800ca98:	f7ff fea8 	bl	800c7ec <rshift>
 800ca9c:	19bf      	adds	r7, r7, r6
 800ca9e:	9b01      	ldr	r3, [sp, #4]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	42bb      	cmp	r3, r7
 800caa4:	da3a      	bge.n	800cb1c <__gethex+0x25c>
 800caa6:	0029      	movs	r1, r5
 800caa8:	9803      	ldr	r0, [sp, #12]
 800caaa:	f000 fa35 	bl	800cf18 <_Bfree>
 800caae:	2300      	movs	r3, #0
 800cab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cab2:	26a3      	movs	r6, #163	; 0xa3
 800cab4:	6013      	str	r3, [r2, #0]
 800cab6:	e78c      	b.n	800c9d2 <__gethex+0x112>
 800cab8:	3c01      	subs	r4, #1
 800caba:	7823      	ldrb	r3, [r4, #0]
 800cabc:	2b2e      	cmp	r3, #46	; 0x2e
 800cabe:	d012      	beq.n	800cae6 <__gethex+0x226>
 800cac0:	9b04      	ldr	r3, [sp, #16]
 800cac2:	2b20      	cmp	r3, #32
 800cac4:	d104      	bne.n	800cad0 <__gethex+0x210>
 800cac6:	9b05      	ldr	r3, [sp, #20]
 800cac8:	c340      	stmia	r3!, {r6}
 800caca:	2600      	movs	r6, #0
 800cacc:	9305      	str	r3, [sp, #20]
 800cace:	9604      	str	r6, [sp, #16]
 800cad0:	7820      	ldrb	r0, [r4, #0]
 800cad2:	f7ff fee0 	bl	800c896 <__hexdig_fun>
 800cad6:	230f      	movs	r3, #15
 800cad8:	4018      	ands	r0, r3
 800cada:	9b04      	ldr	r3, [sp, #16]
 800cadc:	4098      	lsls	r0, r3
 800cade:	3304      	adds	r3, #4
 800cae0:	4306      	orrs	r6, r0
 800cae2:	9304      	str	r3, [sp, #16]
 800cae4:	e7a5      	b.n	800ca32 <__gethex+0x172>
 800cae6:	9b00      	ldr	r3, [sp, #0]
 800cae8:	42a3      	cmp	r3, r4
 800caea:	d8e9      	bhi.n	800cac0 <__gethex+0x200>
 800caec:	2201      	movs	r2, #1
 800caee:	0020      	movs	r0, r4
 800caf0:	4927      	ldr	r1, [pc, #156]	; (800cb90 <__gethex+0x2d0>)
 800caf2:	f7ff fc71 	bl	800c3d8 <strncmp>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d1e2      	bne.n	800cac0 <__gethex+0x200>
 800cafa:	e79a      	b.n	800ca32 <__gethex+0x172>
 800cafc:	9b00      	ldr	r3, [sp, #0]
 800cafe:	2400      	movs	r4, #0
 800cb00:	429e      	cmp	r6, r3
 800cb02:	dacc      	bge.n	800ca9e <__gethex+0x1de>
 800cb04:	1b9e      	subs	r6, r3, r6
 800cb06:	0029      	movs	r1, r5
 800cb08:	0032      	movs	r2, r6
 800cb0a:	9803      	ldr	r0, [sp, #12]
 800cb0c:	f000 fbf0 	bl	800d2f0 <__lshift>
 800cb10:	0003      	movs	r3, r0
 800cb12:	3314      	adds	r3, #20
 800cb14:	0005      	movs	r5, r0
 800cb16:	1bbf      	subs	r7, r7, r6
 800cb18:	9302      	str	r3, [sp, #8]
 800cb1a:	e7c0      	b.n	800ca9e <__gethex+0x1de>
 800cb1c:	9b01      	ldr	r3, [sp, #4]
 800cb1e:	685e      	ldr	r6, [r3, #4]
 800cb20:	42be      	cmp	r6, r7
 800cb22:	dd70      	ble.n	800cc06 <__gethex+0x346>
 800cb24:	9b00      	ldr	r3, [sp, #0]
 800cb26:	1bf6      	subs	r6, r6, r7
 800cb28:	42b3      	cmp	r3, r6
 800cb2a:	dc37      	bgt.n	800cb9c <__gethex+0x2dc>
 800cb2c:	9b01      	ldr	r3, [sp, #4]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d024      	beq.n	800cb7e <__gethex+0x2be>
 800cb34:	2b03      	cmp	r3, #3
 800cb36:	d026      	beq.n	800cb86 <__gethex+0x2c6>
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d117      	bne.n	800cb6c <__gethex+0x2ac>
 800cb3c:	9b00      	ldr	r3, [sp, #0]
 800cb3e:	42b3      	cmp	r3, r6
 800cb40:	d114      	bne.n	800cb6c <__gethex+0x2ac>
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d10b      	bne.n	800cb5e <__gethex+0x29e>
 800cb46:	9b01      	ldr	r3, [sp, #4]
 800cb48:	9a07      	ldr	r2, [sp, #28]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	2662      	movs	r6, #98	; 0x62
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	2301      	movs	r3, #1
 800cb52:	9a02      	ldr	r2, [sp, #8]
 800cb54:	612b      	str	r3, [r5, #16]
 800cb56:	6013      	str	r3, [r2, #0]
 800cb58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb5a:	601d      	str	r5, [r3, #0]
 800cb5c:	e739      	b.n	800c9d2 <__gethex+0x112>
 800cb5e:	9900      	ldr	r1, [sp, #0]
 800cb60:	0028      	movs	r0, r5
 800cb62:	3901      	subs	r1, #1
 800cb64:	f000 fdf8 	bl	800d758 <__any_on>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d1ec      	bne.n	800cb46 <__gethex+0x286>
 800cb6c:	0029      	movs	r1, r5
 800cb6e:	9803      	ldr	r0, [sp, #12]
 800cb70:	f000 f9d2 	bl	800cf18 <_Bfree>
 800cb74:	2300      	movs	r3, #0
 800cb76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb78:	2650      	movs	r6, #80	; 0x50
 800cb7a:	6013      	str	r3, [r2, #0]
 800cb7c:	e729      	b.n	800c9d2 <__gethex+0x112>
 800cb7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1f3      	bne.n	800cb6c <__gethex+0x2ac>
 800cb84:	e7df      	b.n	800cb46 <__gethex+0x286>
 800cb86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1dc      	bne.n	800cb46 <__gethex+0x286>
 800cb8c:	e7ee      	b.n	800cb6c <__gethex+0x2ac>
 800cb8e:	46c0      	nop			; (mov r8, r8)
 800cb90:	08014918 	.word	0x08014918
 800cb94:	08014a79 	.word	0x08014a79
 800cb98:	08014a8a 	.word	0x08014a8a
 800cb9c:	1e77      	subs	r7, r6, #1
 800cb9e:	2c00      	cmp	r4, #0
 800cba0:	d12f      	bne.n	800cc02 <__gethex+0x342>
 800cba2:	2f00      	cmp	r7, #0
 800cba4:	d004      	beq.n	800cbb0 <__gethex+0x2f0>
 800cba6:	0039      	movs	r1, r7
 800cba8:	0028      	movs	r0, r5
 800cbaa:	f000 fdd5 	bl	800d758 <__any_on>
 800cbae:	0004      	movs	r4, r0
 800cbb0:	231f      	movs	r3, #31
 800cbb2:	117a      	asrs	r2, r7, #5
 800cbb4:	401f      	ands	r7, r3
 800cbb6:	3b1e      	subs	r3, #30
 800cbb8:	40bb      	lsls	r3, r7
 800cbba:	9902      	ldr	r1, [sp, #8]
 800cbbc:	0092      	lsls	r2, r2, #2
 800cbbe:	5852      	ldr	r2, [r2, r1]
 800cbc0:	421a      	tst	r2, r3
 800cbc2:	d001      	beq.n	800cbc8 <__gethex+0x308>
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	431c      	orrs	r4, r3
 800cbc8:	9b00      	ldr	r3, [sp, #0]
 800cbca:	0031      	movs	r1, r6
 800cbcc:	1b9b      	subs	r3, r3, r6
 800cbce:	2602      	movs	r6, #2
 800cbd0:	0028      	movs	r0, r5
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	f7ff fe0a 	bl	800c7ec <rshift>
 800cbd8:	9b01      	ldr	r3, [sp, #4]
 800cbda:	685f      	ldr	r7, [r3, #4]
 800cbdc:	2c00      	cmp	r4, #0
 800cbde:	d041      	beq.n	800cc64 <__gethex+0x3a4>
 800cbe0:	9b01      	ldr	r3, [sp, #4]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d010      	beq.n	800cc0a <__gethex+0x34a>
 800cbe8:	2b03      	cmp	r3, #3
 800cbea:	d012      	beq.n	800cc12 <__gethex+0x352>
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d106      	bne.n	800cbfe <__gethex+0x33e>
 800cbf0:	07a2      	lsls	r2, r4, #30
 800cbf2:	d504      	bpl.n	800cbfe <__gethex+0x33e>
 800cbf4:	9a02      	ldr	r2, [sp, #8]
 800cbf6:	6812      	ldr	r2, [r2, #0]
 800cbf8:	4314      	orrs	r4, r2
 800cbfa:	421c      	tst	r4, r3
 800cbfc:	d10c      	bne.n	800cc18 <__gethex+0x358>
 800cbfe:	2310      	movs	r3, #16
 800cc00:	e02f      	b.n	800cc62 <__gethex+0x3a2>
 800cc02:	2401      	movs	r4, #1
 800cc04:	e7d4      	b.n	800cbb0 <__gethex+0x2f0>
 800cc06:	2601      	movs	r6, #1
 800cc08:	e7e8      	b.n	800cbdc <__gethex+0x31c>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc0e:	1a9b      	subs	r3, r3, r2
 800cc10:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d0f2      	beq.n	800cbfe <__gethex+0x33e>
 800cc18:	692b      	ldr	r3, [r5, #16]
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	9302      	str	r3, [sp, #8]
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	9304      	str	r3, [sp, #16]
 800cc22:	002b      	movs	r3, r5
 800cc24:	9a04      	ldr	r2, [sp, #16]
 800cc26:	3314      	adds	r3, #20
 800cc28:	1899      	adds	r1, r3, r2
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	1c54      	adds	r4, r2, #1
 800cc2e:	d01e      	beq.n	800cc6e <__gethex+0x3ae>
 800cc30:	3201      	adds	r2, #1
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	002b      	movs	r3, r5
 800cc36:	3314      	adds	r3, #20
 800cc38:	2e02      	cmp	r6, #2
 800cc3a:	d141      	bne.n	800ccc0 <__gethex+0x400>
 800cc3c:	9a01      	ldr	r2, [sp, #4]
 800cc3e:	9900      	ldr	r1, [sp, #0]
 800cc40:	6812      	ldr	r2, [r2, #0]
 800cc42:	3a01      	subs	r2, #1
 800cc44:	428a      	cmp	r2, r1
 800cc46:	d10b      	bne.n	800cc60 <__gethex+0x3a0>
 800cc48:	221f      	movs	r2, #31
 800cc4a:	9800      	ldr	r0, [sp, #0]
 800cc4c:	1149      	asrs	r1, r1, #5
 800cc4e:	4002      	ands	r2, r0
 800cc50:	2001      	movs	r0, #1
 800cc52:	0004      	movs	r4, r0
 800cc54:	4094      	lsls	r4, r2
 800cc56:	0089      	lsls	r1, r1, #2
 800cc58:	58cb      	ldr	r3, [r1, r3]
 800cc5a:	4223      	tst	r3, r4
 800cc5c:	d000      	beq.n	800cc60 <__gethex+0x3a0>
 800cc5e:	2601      	movs	r6, #1
 800cc60:	2320      	movs	r3, #32
 800cc62:	431e      	orrs	r6, r3
 800cc64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc66:	601d      	str	r5, [r3, #0]
 800cc68:	9b07      	ldr	r3, [sp, #28]
 800cc6a:	601f      	str	r7, [r3, #0]
 800cc6c:	e6b1      	b.n	800c9d2 <__gethex+0x112>
 800cc6e:	c301      	stmia	r3!, {r0}
 800cc70:	4299      	cmp	r1, r3
 800cc72:	d8da      	bhi.n	800cc2a <__gethex+0x36a>
 800cc74:	68ab      	ldr	r3, [r5, #8]
 800cc76:	9a02      	ldr	r2, [sp, #8]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	db18      	blt.n	800ccae <__gethex+0x3ee>
 800cc7c:	6869      	ldr	r1, [r5, #4]
 800cc7e:	9803      	ldr	r0, [sp, #12]
 800cc80:	3101      	adds	r1, #1
 800cc82:	f000 f921 	bl	800cec8 <_Balloc>
 800cc86:	1e04      	subs	r4, r0, #0
 800cc88:	d104      	bne.n	800cc94 <__gethex+0x3d4>
 800cc8a:	0022      	movs	r2, r4
 800cc8c:	2184      	movs	r1, #132	; 0x84
 800cc8e:	4b1c      	ldr	r3, [pc, #112]	; (800cd00 <__gethex+0x440>)
 800cc90:	481c      	ldr	r0, [pc, #112]	; (800cd04 <__gethex+0x444>)
 800cc92:	e6c2      	b.n	800ca1a <__gethex+0x15a>
 800cc94:	0029      	movs	r1, r5
 800cc96:	692a      	ldr	r2, [r5, #16]
 800cc98:	310c      	adds	r1, #12
 800cc9a:	3202      	adds	r2, #2
 800cc9c:	0092      	lsls	r2, r2, #2
 800cc9e:	300c      	adds	r0, #12
 800cca0:	f7ff fc77 	bl	800c592 <memcpy>
 800cca4:	0029      	movs	r1, r5
 800cca6:	9803      	ldr	r0, [sp, #12]
 800cca8:	f000 f936 	bl	800cf18 <_Bfree>
 800ccac:	0025      	movs	r5, r4
 800ccae:	692b      	ldr	r3, [r5, #16]
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	612a      	str	r2, [r5, #16]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	18eb      	adds	r3, r5, r3
 800ccbc:	605a      	str	r2, [r3, #4]
 800ccbe:	e7b9      	b.n	800cc34 <__gethex+0x374>
 800ccc0:	692a      	ldr	r2, [r5, #16]
 800ccc2:	9902      	ldr	r1, [sp, #8]
 800ccc4:	428a      	cmp	r2, r1
 800ccc6:	dd09      	ble.n	800ccdc <__gethex+0x41c>
 800ccc8:	2101      	movs	r1, #1
 800ccca:	0028      	movs	r0, r5
 800cccc:	f7ff fd8e 	bl	800c7ec <rshift>
 800ccd0:	9b01      	ldr	r3, [sp, #4]
 800ccd2:	3701      	adds	r7, #1
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	42bb      	cmp	r3, r7
 800ccd8:	dac1      	bge.n	800cc5e <__gethex+0x39e>
 800ccda:	e6e4      	b.n	800caa6 <__gethex+0x1e6>
 800ccdc:	221f      	movs	r2, #31
 800ccde:	9c00      	ldr	r4, [sp, #0]
 800cce0:	9900      	ldr	r1, [sp, #0]
 800cce2:	2601      	movs	r6, #1
 800cce4:	4014      	ands	r4, r2
 800cce6:	4211      	tst	r1, r2
 800cce8:	d0ba      	beq.n	800cc60 <__gethex+0x3a0>
 800ccea:	9a04      	ldr	r2, [sp, #16]
 800ccec:	189b      	adds	r3, r3, r2
 800ccee:	3b04      	subs	r3, #4
 800ccf0:	6818      	ldr	r0, [r3, #0]
 800ccf2:	f000 f9ab 	bl	800d04c <__hi0bits>
 800ccf6:	2320      	movs	r3, #32
 800ccf8:	1b1b      	subs	r3, r3, r4
 800ccfa:	4298      	cmp	r0, r3
 800ccfc:	dbe4      	blt.n	800ccc8 <__gethex+0x408>
 800ccfe:	e7af      	b.n	800cc60 <__gethex+0x3a0>
 800cd00:	08014a79 	.word	0x08014a79
 800cd04:	08014a8a 	.word	0x08014a8a

0800cd08 <L_shift>:
 800cd08:	2308      	movs	r3, #8
 800cd0a:	b570      	push	{r4, r5, r6, lr}
 800cd0c:	2520      	movs	r5, #32
 800cd0e:	1a9a      	subs	r2, r3, r2
 800cd10:	0092      	lsls	r2, r2, #2
 800cd12:	1aad      	subs	r5, r5, r2
 800cd14:	6843      	ldr	r3, [r0, #4]
 800cd16:	6804      	ldr	r4, [r0, #0]
 800cd18:	001e      	movs	r6, r3
 800cd1a:	40ae      	lsls	r6, r5
 800cd1c:	40d3      	lsrs	r3, r2
 800cd1e:	4334      	orrs	r4, r6
 800cd20:	6004      	str	r4, [r0, #0]
 800cd22:	6043      	str	r3, [r0, #4]
 800cd24:	3004      	adds	r0, #4
 800cd26:	4288      	cmp	r0, r1
 800cd28:	d3f4      	bcc.n	800cd14 <L_shift+0xc>
 800cd2a:	bd70      	pop	{r4, r5, r6, pc}

0800cd2c <__match>:
 800cd2c:	b530      	push	{r4, r5, lr}
 800cd2e:	6803      	ldr	r3, [r0, #0]
 800cd30:	780c      	ldrb	r4, [r1, #0]
 800cd32:	3301      	adds	r3, #1
 800cd34:	2c00      	cmp	r4, #0
 800cd36:	d102      	bne.n	800cd3e <__match+0x12>
 800cd38:	6003      	str	r3, [r0, #0]
 800cd3a:	2001      	movs	r0, #1
 800cd3c:	bd30      	pop	{r4, r5, pc}
 800cd3e:	781a      	ldrb	r2, [r3, #0]
 800cd40:	0015      	movs	r5, r2
 800cd42:	3d41      	subs	r5, #65	; 0x41
 800cd44:	2d19      	cmp	r5, #25
 800cd46:	d800      	bhi.n	800cd4a <__match+0x1e>
 800cd48:	3220      	adds	r2, #32
 800cd4a:	3101      	adds	r1, #1
 800cd4c:	42a2      	cmp	r2, r4
 800cd4e:	d0ef      	beq.n	800cd30 <__match+0x4>
 800cd50:	2000      	movs	r0, #0
 800cd52:	e7f3      	b.n	800cd3c <__match+0x10>

0800cd54 <__hexnan>:
 800cd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd56:	680b      	ldr	r3, [r1, #0]
 800cd58:	b08b      	sub	sp, #44	; 0x2c
 800cd5a:	9201      	str	r2, [sp, #4]
 800cd5c:	9901      	ldr	r1, [sp, #4]
 800cd5e:	115a      	asrs	r2, r3, #5
 800cd60:	0092      	lsls	r2, r2, #2
 800cd62:	188a      	adds	r2, r1, r2
 800cd64:	9202      	str	r2, [sp, #8]
 800cd66:	0019      	movs	r1, r3
 800cd68:	221f      	movs	r2, #31
 800cd6a:	4011      	ands	r1, r2
 800cd6c:	9008      	str	r0, [sp, #32]
 800cd6e:	9106      	str	r1, [sp, #24]
 800cd70:	4213      	tst	r3, r2
 800cd72:	d002      	beq.n	800cd7a <__hexnan+0x26>
 800cd74:	9b02      	ldr	r3, [sp, #8]
 800cd76:	3304      	adds	r3, #4
 800cd78:	9302      	str	r3, [sp, #8]
 800cd7a:	9b02      	ldr	r3, [sp, #8]
 800cd7c:	2500      	movs	r5, #0
 800cd7e:	1f1f      	subs	r7, r3, #4
 800cd80:	003e      	movs	r6, r7
 800cd82:	003c      	movs	r4, r7
 800cd84:	9b08      	ldr	r3, [sp, #32]
 800cd86:	603d      	str	r5, [r7, #0]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	9507      	str	r5, [sp, #28]
 800cd8c:	9305      	str	r3, [sp, #20]
 800cd8e:	9503      	str	r5, [sp, #12]
 800cd90:	9b05      	ldr	r3, [sp, #20]
 800cd92:	3301      	adds	r3, #1
 800cd94:	9309      	str	r3, [sp, #36]	; 0x24
 800cd96:	9b05      	ldr	r3, [sp, #20]
 800cd98:	785b      	ldrb	r3, [r3, #1]
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d028      	beq.n	800cdf2 <__hexnan+0x9e>
 800cda0:	9804      	ldr	r0, [sp, #16]
 800cda2:	f7ff fd78 	bl	800c896 <__hexdig_fun>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d154      	bne.n	800ce54 <__hexnan+0x100>
 800cdaa:	9b04      	ldr	r3, [sp, #16]
 800cdac:	2b20      	cmp	r3, #32
 800cdae:	d819      	bhi.n	800cde4 <__hexnan+0x90>
 800cdb0:	9b03      	ldr	r3, [sp, #12]
 800cdb2:	9a07      	ldr	r2, [sp, #28]
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	dd12      	ble.n	800cdde <__hexnan+0x8a>
 800cdb8:	42b4      	cmp	r4, r6
 800cdba:	d206      	bcs.n	800cdca <__hexnan+0x76>
 800cdbc:	2d07      	cmp	r5, #7
 800cdbe:	dc04      	bgt.n	800cdca <__hexnan+0x76>
 800cdc0:	002a      	movs	r2, r5
 800cdc2:	0031      	movs	r1, r6
 800cdc4:	0020      	movs	r0, r4
 800cdc6:	f7ff ff9f 	bl	800cd08 <L_shift>
 800cdca:	9b01      	ldr	r3, [sp, #4]
 800cdcc:	2508      	movs	r5, #8
 800cdce:	429c      	cmp	r4, r3
 800cdd0:	d905      	bls.n	800cdde <__hexnan+0x8a>
 800cdd2:	1f26      	subs	r6, r4, #4
 800cdd4:	2500      	movs	r5, #0
 800cdd6:	0034      	movs	r4, r6
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	6035      	str	r5, [r6, #0]
 800cddc:	9307      	str	r3, [sp, #28]
 800cdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde0:	9305      	str	r3, [sp, #20]
 800cde2:	e7d5      	b.n	800cd90 <__hexnan+0x3c>
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	2b29      	cmp	r3, #41	; 0x29
 800cde8:	d159      	bne.n	800ce9e <__hexnan+0x14a>
 800cdea:	9b05      	ldr	r3, [sp, #20]
 800cdec:	9a08      	ldr	r2, [sp, #32]
 800cdee:	3302      	adds	r3, #2
 800cdf0:	6013      	str	r3, [r2, #0]
 800cdf2:	9b03      	ldr	r3, [sp, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d052      	beq.n	800ce9e <__hexnan+0x14a>
 800cdf8:	42b4      	cmp	r4, r6
 800cdfa:	d206      	bcs.n	800ce0a <__hexnan+0xb6>
 800cdfc:	2d07      	cmp	r5, #7
 800cdfe:	dc04      	bgt.n	800ce0a <__hexnan+0xb6>
 800ce00:	002a      	movs	r2, r5
 800ce02:	0031      	movs	r1, r6
 800ce04:	0020      	movs	r0, r4
 800ce06:	f7ff ff7f 	bl	800cd08 <L_shift>
 800ce0a:	9b01      	ldr	r3, [sp, #4]
 800ce0c:	429c      	cmp	r4, r3
 800ce0e:	d935      	bls.n	800ce7c <__hexnan+0x128>
 800ce10:	001a      	movs	r2, r3
 800ce12:	0023      	movs	r3, r4
 800ce14:	cb02      	ldmia	r3!, {r1}
 800ce16:	c202      	stmia	r2!, {r1}
 800ce18:	429f      	cmp	r7, r3
 800ce1a:	d2fb      	bcs.n	800ce14 <__hexnan+0xc0>
 800ce1c:	9b02      	ldr	r3, [sp, #8]
 800ce1e:	1c62      	adds	r2, r4, #1
 800ce20:	1ed9      	subs	r1, r3, #3
 800ce22:	2304      	movs	r3, #4
 800ce24:	4291      	cmp	r1, r2
 800ce26:	d305      	bcc.n	800ce34 <__hexnan+0xe0>
 800ce28:	9b02      	ldr	r3, [sp, #8]
 800ce2a:	3b04      	subs	r3, #4
 800ce2c:	1b1b      	subs	r3, r3, r4
 800ce2e:	089b      	lsrs	r3, r3, #2
 800ce30:	3301      	adds	r3, #1
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	9a01      	ldr	r2, [sp, #4]
 800ce36:	18d3      	adds	r3, r2, r3
 800ce38:	2200      	movs	r2, #0
 800ce3a:	c304      	stmia	r3!, {r2}
 800ce3c:	429f      	cmp	r7, r3
 800ce3e:	d2fc      	bcs.n	800ce3a <__hexnan+0xe6>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d104      	bne.n	800ce50 <__hexnan+0xfc>
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	429f      	cmp	r7, r3
 800ce4a:	d126      	bne.n	800ce9a <__hexnan+0x146>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	603b      	str	r3, [r7, #0]
 800ce50:	2005      	movs	r0, #5
 800ce52:	e025      	b.n	800cea0 <__hexnan+0x14c>
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	3501      	adds	r5, #1
 800ce58:	3301      	adds	r3, #1
 800ce5a:	9303      	str	r3, [sp, #12]
 800ce5c:	2d08      	cmp	r5, #8
 800ce5e:	dd06      	ble.n	800ce6e <__hexnan+0x11a>
 800ce60:	9b01      	ldr	r3, [sp, #4]
 800ce62:	429c      	cmp	r4, r3
 800ce64:	d9bb      	bls.n	800cdde <__hexnan+0x8a>
 800ce66:	2300      	movs	r3, #0
 800ce68:	2501      	movs	r5, #1
 800ce6a:	3c04      	subs	r4, #4
 800ce6c:	6023      	str	r3, [r4, #0]
 800ce6e:	220f      	movs	r2, #15
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	4010      	ands	r0, r2
 800ce74:	011b      	lsls	r3, r3, #4
 800ce76:	4303      	orrs	r3, r0
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	e7b0      	b.n	800cdde <__hexnan+0x8a>
 800ce7c:	9b06      	ldr	r3, [sp, #24]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d0de      	beq.n	800ce40 <__hexnan+0xec>
 800ce82:	2320      	movs	r3, #32
 800ce84:	9a06      	ldr	r2, [sp, #24]
 800ce86:	9902      	ldr	r1, [sp, #8]
 800ce88:	1a9b      	subs	r3, r3, r2
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	4252      	negs	r2, r2
 800ce8e:	40da      	lsrs	r2, r3
 800ce90:	3904      	subs	r1, #4
 800ce92:	680b      	ldr	r3, [r1, #0]
 800ce94:	4013      	ands	r3, r2
 800ce96:	600b      	str	r3, [r1, #0]
 800ce98:	e7d2      	b.n	800ce40 <__hexnan+0xec>
 800ce9a:	3f04      	subs	r7, #4
 800ce9c:	e7d0      	b.n	800ce40 <__hexnan+0xec>
 800ce9e:	2004      	movs	r0, #4
 800cea0:	b00b      	add	sp, #44	; 0x2c
 800cea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cea4 <__ascii_mbtowc>:
 800cea4:	b082      	sub	sp, #8
 800cea6:	2900      	cmp	r1, #0
 800cea8:	d100      	bne.n	800ceac <__ascii_mbtowc+0x8>
 800ceaa:	a901      	add	r1, sp, #4
 800ceac:	1e10      	subs	r0, r2, #0
 800ceae:	d006      	beq.n	800cebe <__ascii_mbtowc+0x1a>
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d006      	beq.n	800cec2 <__ascii_mbtowc+0x1e>
 800ceb4:	7813      	ldrb	r3, [r2, #0]
 800ceb6:	600b      	str	r3, [r1, #0]
 800ceb8:	7810      	ldrb	r0, [r2, #0]
 800ceba:	1e43      	subs	r3, r0, #1
 800cebc:	4198      	sbcs	r0, r3
 800cebe:	b002      	add	sp, #8
 800cec0:	4770      	bx	lr
 800cec2:	2002      	movs	r0, #2
 800cec4:	4240      	negs	r0, r0
 800cec6:	e7fa      	b.n	800cebe <__ascii_mbtowc+0x1a>

0800cec8 <_Balloc>:
 800cec8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ceca:	b570      	push	{r4, r5, r6, lr}
 800cecc:	0006      	movs	r6, r0
 800cece:	000c      	movs	r4, r1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d012      	beq.n	800cefa <_Balloc+0x32>
 800ced4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ced6:	00a2      	lsls	r2, r4, #2
 800ced8:	189b      	adds	r3, r3, r2
 800ceda:	6818      	ldr	r0, [r3, #0]
 800cedc:	2800      	cmp	r0, #0
 800cede:	d115      	bne.n	800cf0c <_Balloc+0x44>
 800cee0:	2101      	movs	r1, #1
 800cee2:	000d      	movs	r5, r1
 800cee4:	40a5      	lsls	r5, r4
 800cee6:	1d6a      	adds	r2, r5, #5
 800cee8:	0030      	movs	r0, r6
 800ceea:	0092      	lsls	r2, r2, #2
 800ceec:	f003 face 	bl	801048c <_calloc_r>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d009      	beq.n	800cf08 <_Balloc+0x40>
 800cef4:	6044      	str	r4, [r0, #4]
 800cef6:	6085      	str	r5, [r0, #8]
 800cef8:	e00a      	b.n	800cf10 <_Balloc+0x48>
 800cefa:	2221      	movs	r2, #33	; 0x21
 800cefc:	2104      	movs	r1, #4
 800cefe:	f003 fac5 	bl	801048c <_calloc_r>
 800cf02:	6470      	str	r0, [r6, #68]	; 0x44
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d1e5      	bne.n	800ced4 <_Balloc+0xc>
 800cf08:	2000      	movs	r0, #0
 800cf0a:	bd70      	pop	{r4, r5, r6, pc}
 800cf0c:	6802      	ldr	r2, [r0, #0]
 800cf0e:	601a      	str	r2, [r3, #0]
 800cf10:	2300      	movs	r3, #0
 800cf12:	6103      	str	r3, [r0, #16]
 800cf14:	60c3      	str	r3, [r0, #12]
 800cf16:	e7f8      	b.n	800cf0a <_Balloc+0x42>

0800cf18 <_Bfree>:
 800cf18:	2900      	cmp	r1, #0
 800cf1a:	d006      	beq.n	800cf2a <_Bfree+0x12>
 800cf1c:	684a      	ldr	r2, [r1, #4]
 800cf1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cf20:	0092      	lsls	r2, r2, #2
 800cf22:	189b      	adds	r3, r3, r2
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	600a      	str	r2, [r1, #0]
 800cf28:	6019      	str	r1, [r3, #0]
 800cf2a:	4770      	bx	lr

0800cf2c <__multadd>:
 800cf2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf2e:	000e      	movs	r6, r1
 800cf30:	9001      	str	r0, [sp, #4]
 800cf32:	000c      	movs	r4, r1
 800cf34:	001d      	movs	r5, r3
 800cf36:	2000      	movs	r0, #0
 800cf38:	690f      	ldr	r7, [r1, #16]
 800cf3a:	3614      	adds	r6, #20
 800cf3c:	6833      	ldr	r3, [r6, #0]
 800cf3e:	3001      	adds	r0, #1
 800cf40:	b299      	uxth	r1, r3
 800cf42:	4351      	muls	r1, r2
 800cf44:	0c1b      	lsrs	r3, r3, #16
 800cf46:	4353      	muls	r3, r2
 800cf48:	1949      	adds	r1, r1, r5
 800cf4a:	0c0d      	lsrs	r5, r1, #16
 800cf4c:	195b      	adds	r3, r3, r5
 800cf4e:	0c1d      	lsrs	r5, r3, #16
 800cf50:	b289      	uxth	r1, r1
 800cf52:	041b      	lsls	r3, r3, #16
 800cf54:	185b      	adds	r3, r3, r1
 800cf56:	c608      	stmia	r6!, {r3}
 800cf58:	4287      	cmp	r7, r0
 800cf5a:	dcef      	bgt.n	800cf3c <__multadd+0x10>
 800cf5c:	2d00      	cmp	r5, #0
 800cf5e:	d022      	beq.n	800cfa6 <__multadd+0x7a>
 800cf60:	68a3      	ldr	r3, [r4, #8]
 800cf62:	42bb      	cmp	r3, r7
 800cf64:	dc19      	bgt.n	800cf9a <__multadd+0x6e>
 800cf66:	6861      	ldr	r1, [r4, #4]
 800cf68:	9801      	ldr	r0, [sp, #4]
 800cf6a:	3101      	adds	r1, #1
 800cf6c:	f7ff ffac 	bl	800cec8 <_Balloc>
 800cf70:	1e06      	subs	r6, r0, #0
 800cf72:	d105      	bne.n	800cf80 <__multadd+0x54>
 800cf74:	0032      	movs	r2, r6
 800cf76:	21ba      	movs	r1, #186	; 0xba
 800cf78:	4b0c      	ldr	r3, [pc, #48]	; (800cfac <__multadd+0x80>)
 800cf7a:	480d      	ldr	r0, [pc, #52]	; (800cfb0 <__multadd+0x84>)
 800cf7c:	f003 fa68 	bl	8010450 <__assert_func>
 800cf80:	0021      	movs	r1, r4
 800cf82:	6922      	ldr	r2, [r4, #16]
 800cf84:	310c      	adds	r1, #12
 800cf86:	3202      	adds	r2, #2
 800cf88:	0092      	lsls	r2, r2, #2
 800cf8a:	300c      	adds	r0, #12
 800cf8c:	f7ff fb01 	bl	800c592 <memcpy>
 800cf90:	0021      	movs	r1, r4
 800cf92:	9801      	ldr	r0, [sp, #4]
 800cf94:	f7ff ffc0 	bl	800cf18 <_Bfree>
 800cf98:	0034      	movs	r4, r6
 800cf9a:	1d3b      	adds	r3, r7, #4
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	18e3      	adds	r3, r4, r3
 800cfa0:	605d      	str	r5, [r3, #4]
 800cfa2:	1c7b      	adds	r3, r7, #1
 800cfa4:	6123      	str	r3, [r4, #16]
 800cfa6:	0020      	movs	r0, r4
 800cfa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cfaa:	46c0      	nop			; (mov r8, r8)
 800cfac:	08014a79 	.word	0x08014a79
 800cfb0:	08014aea 	.word	0x08014aea

0800cfb4 <__s2b>:
 800cfb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfb6:	0006      	movs	r6, r0
 800cfb8:	0018      	movs	r0, r3
 800cfba:	000c      	movs	r4, r1
 800cfbc:	3008      	adds	r0, #8
 800cfbe:	2109      	movs	r1, #9
 800cfc0:	9301      	str	r3, [sp, #4]
 800cfc2:	0015      	movs	r5, r2
 800cfc4:	f7f3 f944 	bl	8000250 <__divsi3>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	2100      	movs	r1, #0
 800cfcc:	4283      	cmp	r3, r0
 800cfce:	db0a      	blt.n	800cfe6 <__s2b+0x32>
 800cfd0:	0030      	movs	r0, r6
 800cfd2:	f7ff ff79 	bl	800cec8 <_Balloc>
 800cfd6:	1e01      	subs	r1, r0, #0
 800cfd8:	d108      	bne.n	800cfec <__s2b+0x38>
 800cfda:	000a      	movs	r2, r1
 800cfdc:	4b19      	ldr	r3, [pc, #100]	; (800d044 <__s2b+0x90>)
 800cfde:	481a      	ldr	r0, [pc, #104]	; (800d048 <__s2b+0x94>)
 800cfe0:	31d3      	adds	r1, #211	; 0xd3
 800cfe2:	f003 fa35 	bl	8010450 <__assert_func>
 800cfe6:	005b      	lsls	r3, r3, #1
 800cfe8:	3101      	adds	r1, #1
 800cfea:	e7ef      	b.n	800cfcc <__s2b+0x18>
 800cfec:	9b08      	ldr	r3, [sp, #32]
 800cfee:	6143      	str	r3, [r0, #20]
 800cff0:	2301      	movs	r3, #1
 800cff2:	6103      	str	r3, [r0, #16]
 800cff4:	2d09      	cmp	r5, #9
 800cff6:	dd18      	ble.n	800d02a <__s2b+0x76>
 800cff8:	0023      	movs	r3, r4
 800cffa:	3309      	adds	r3, #9
 800cffc:	001f      	movs	r7, r3
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	1964      	adds	r4, r4, r5
 800d002:	783b      	ldrb	r3, [r7, #0]
 800d004:	220a      	movs	r2, #10
 800d006:	0030      	movs	r0, r6
 800d008:	3b30      	subs	r3, #48	; 0x30
 800d00a:	f7ff ff8f 	bl	800cf2c <__multadd>
 800d00e:	3701      	adds	r7, #1
 800d010:	0001      	movs	r1, r0
 800d012:	42a7      	cmp	r7, r4
 800d014:	d1f5      	bne.n	800d002 <__s2b+0x4e>
 800d016:	002c      	movs	r4, r5
 800d018:	9b00      	ldr	r3, [sp, #0]
 800d01a:	3c08      	subs	r4, #8
 800d01c:	191c      	adds	r4, r3, r4
 800d01e:	002f      	movs	r7, r5
 800d020:	9b01      	ldr	r3, [sp, #4]
 800d022:	429f      	cmp	r7, r3
 800d024:	db04      	blt.n	800d030 <__s2b+0x7c>
 800d026:	0008      	movs	r0, r1
 800d028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d02a:	2509      	movs	r5, #9
 800d02c:	340a      	adds	r4, #10
 800d02e:	e7f6      	b.n	800d01e <__s2b+0x6a>
 800d030:	1b63      	subs	r3, r4, r5
 800d032:	5ddb      	ldrb	r3, [r3, r7]
 800d034:	220a      	movs	r2, #10
 800d036:	0030      	movs	r0, r6
 800d038:	3b30      	subs	r3, #48	; 0x30
 800d03a:	f7ff ff77 	bl	800cf2c <__multadd>
 800d03e:	3701      	adds	r7, #1
 800d040:	0001      	movs	r1, r0
 800d042:	e7ed      	b.n	800d020 <__s2b+0x6c>
 800d044:	08014a79 	.word	0x08014a79
 800d048:	08014aea 	.word	0x08014aea

0800d04c <__hi0bits>:
 800d04c:	0003      	movs	r3, r0
 800d04e:	0c02      	lsrs	r2, r0, #16
 800d050:	2000      	movs	r0, #0
 800d052:	4282      	cmp	r2, r0
 800d054:	d101      	bne.n	800d05a <__hi0bits+0xe>
 800d056:	041b      	lsls	r3, r3, #16
 800d058:	3010      	adds	r0, #16
 800d05a:	0e1a      	lsrs	r2, r3, #24
 800d05c:	d101      	bne.n	800d062 <__hi0bits+0x16>
 800d05e:	3008      	adds	r0, #8
 800d060:	021b      	lsls	r3, r3, #8
 800d062:	0f1a      	lsrs	r2, r3, #28
 800d064:	d101      	bne.n	800d06a <__hi0bits+0x1e>
 800d066:	3004      	adds	r0, #4
 800d068:	011b      	lsls	r3, r3, #4
 800d06a:	0f9a      	lsrs	r2, r3, #30
 800d06c:	d101      	bne.n	800d072 <__hi0bits+0x26>
 800d06e:	3002      	adds	r0, #2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	2b00      	cmp	r3, #0
 800d074:	db03      	blt.n	800d07e <__hi0bits+0x32>
 800d076:	3001      	adds	r0, #1
 800d078:	005b      	lsls	r3, r3, #1
 800d07a:	d400      	bmi.n	800d07e <__hi0bits+0x32>
 800d07c:	2020      	movs	r0, #32
 800d07e:	4770      	bx	lr

0800d080 <__lo0bits>:
 800d080:	6803      	ldr	r3, [r0, #0]
 800d082:	0001      	movs	r1, r0
 800d084:	2207      	movs	r2, #7
 800d086:	0018      	movs	r0, r3
 800d088:	4010      	ands	r0, r2
 800d08a:	4213      	tst	r3, r2
 800d08c:	d00d      	beq.n	800d0aa <__lo0bits+0x2a>
 800d08e:	3a06      	subs	r2, #6
 800d090:	2000      	movs	r0, #0
 800d092:	4213      	tst	r3, r2
 800d094:	d105      	bne.n	800d0a2 <__lo0bits+0x22>
 800d096:	3002      	adds	r0, #2
 800d098:	4203      	tst	r3, r0
 800d09a:	d003      	beq.n	800d0a4 <__lo0bits+0x24>
 800d09c:	40d3      	lsrs	r3, r2
 800d09e:	0010      	movs	r0, r2
 800d0a0:	600b      	str	r3, [r1, #0]
 800d0a2:	4770      	bx	lr
 800d0a4:	089b      	lsrs	r3, r3, #2
 800d0a6:	600b      	str	r3, [r1, #0]
 800d0a8:	e7fb      	b.n	800d0a2 <__lo0bits+0x22>
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	2a00      	cmp	r2, #0
 800d0ae:	d101      	bne.n	800d0b4 <__lo0bits+0x34>
 800d0b0:	2010      	movs	r0, #16
 800d0b2:	0c1b      	lsrs	r3, r3, #16
 800d0b4:	b2da      	uxtb	r2, r3
 800d0b6:	2a00      	cmp	r2, #0
 800d0b8:	d101      	bne.n	800d0be <__lo0bits+0x3e>
 800d0ba:	3008      	adds	r0, #8
 800d0bc:	0a1b      	lsrs	r3, r3, #8
 800d0be:	071a      	lsls	r2, r3, #28
 800d0c0:	d101      	bne.n	800d0c6 <__lo0bits+0x46>
 800d0c2:	3004      	adds	r0, #4
 800d0c4:	091b      	lsrs	r3, r3, #4
 800d0c6:	079a      	lsls	r2, r3, #30
 800d0c8:	d101      	bne.n	800d0ce <__lo0bits+0x4e>
 800d0ca:	3002      	adds	r0, #2
 800d0cc:	089b      	lsrs	r3, r3, #2
 800d0ce:	07da      	lsls	r2, r3, #31
 800d0d0:	d4e9      	bmi.n	800d0a6 <__lo0bits+0x26>
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	085b      	lsrs	r3, r3, #1
 800d0d6:	d1e6      	bne.n	800d0a6 <__lo0bits+0x26>
 800d0d8:	2020      	movs	r0, #32
 800d0da:	e7e2      	b.n	800d0a2 <__lo0bits+0x22>

0800d0dc <__i2b>:
 800d0dc:	b510      	push	{r4, lr}
 800d0de:	000c      	movs	r4, r1
 800d0e0:	2101      	movs	r1, #1
 800d0e2:	f7ff fef1 	bl	800cec8 <_Balloc>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d107      	bne.n	800d0fa <__i2b+0x1e>
 800d0ea:	2146      	movs	r1, #70	; 0x46
 800d0ec:	4c05      	ldr	r4, [pc, #20]	; (800d104 <__i2b+0x28>)
 800d0ee:	0002      	movs	r2, r0
 800d0f0:	4b05      	ldr	r3, [pc, #20]	; (800d108 <__i2b+0x2c>)
 800d0f2:	0020      	movs	r0, r4
 800d0f4:	31ff      	adds	r1, #255	; 0xff
 800d0f6:	f003 f9ab 	bl	8010450 <__assert_func>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	6144      	str	r4, [r0, #20]
 800d0fe:	6103      	str	r3, [r0, #16]
 800d100:	bd10      	pop	{r4, pc}
 800d102:	46c0      	nop			; (mov r8, r8)
 800d104:	08014aea 	.word	0x08014aea
 800d108:	08014a79 	.word	0x08014a79

0800d10c <__multiply>:
 800d10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d10e:	0015      	movs	r5, r2
 800d110:	690a      	ldr	r2, [r1, #16]
 800d112:	692b      	ldr	r3, [r5, #16]
 800d114:	000c      	movs	r4, r1
 800d116:	b08b      	sub	sp, #44	; 0x2c
 800d118:	429a      	cmp	r2, r3
 800d11a:	da01      	bge.n	800d120 <__multiply+0x14>
 800d11c:	002c      	movs	r4, r5
 800d11e:	000d      	movs	r5, r1
 800d120:	6927      	ldr	r7, [r4, #16]
 800d122:	692e      	ldr	r6, [r5, #16]
 800d124:	6861      	ldr	r1, [r4, #4]
 800d126:	19bb      	adds	r3, r7, r6
 800d128:	9303      	str	r3, [sp, #12]
 800d12a:	68a3      	ldr	r3, [r4, #8]
 800d12c:	19ba      	adds	r2, r7, r6
 800d12e:	4293      	cmp	r3, r2
 800d130:	da00      	bge.n	800d134 <__multiply+0x28>
 800d132:	3101      	adds	r1, #1
 800d134:	f7ff fec8 	bl	800cec8 <_Balloc>
 800d138:	9002      	str	r0, [sp, #8]
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d106      	bne.n	800d14c <__multiply+0x40>
 800d13e:	21b1      	movs	r1, #177	; 0xb1
 800d140:	4b48      	ldr	r3, [pc, #288]	; (800d264 <__multiply+0x158>)
 800d142:	4849      	ldr	r0, [pc, #292]	; (800d268 <__multiply+0x15c>)
 800d144:	9a02      	ldr	r2, [sp, #8]
 800d146:	0049      	lsls	r1, r1, #1
 800d148:	f003 f982 	bl	8010450 <__assert_func>
 800d14c:	9b02      	ldr	r3, [sp, #8]
 800d14e:	2200      	movs	r2, #0
 800d150:	3314      	adds	r3, #20
 800d152:	469c      	mov	ip, r3
 800d154:	19bb      	adds	r3, r7, r6
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4463      	add	r3, ip
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	4663      	mov	r3, ip
 800d15e:	9904      	ldr	r1, [sp, #16]
 800d160:	428b      	cmp	r3, r1
 800d162:	d32a      	bcc.n	800d1ba <__multiply+0xae>
 800d164:	0023      	movs	r3, r4
 800d166:	00bf      	lsls	r7, r7, #2
 800d168:	3314      	adds	r3, #20
 800d16a:	3514      	adds	r5, #20
 800d16c:	9308      	str	r3, [sp, #32]
 800d16e:	00b6      	lsls	r6, r6, #2
 800d170:	19db      	adds	r3, r3, r7
 800d172:	9305      	str	r3, [sp, #20]
 800d174:	19ab      	adds	r3, r5, r6
 800d176:	9309      	str	r3, [sp, #36]	; 0x24
 800d178:	2304      	movs	r3, #4
 800d17a:	9306      	str	r3, [sp, #24]
 800d17c:	0023      	movs	r3, r4
 800d17e:	9a05      	ldr	r2, [sp, #20]
 800d180:	3315      	adds	r3, #21
 800d182:	9501      	str	r5, [sp, #4]
 800d184:	429a      	cmp	r2, r3
 800d186:	d305      	bcc.n	800d194 <__multiply+0x88>
 800d188:	1b13      	subs	r3, r2, r4
 800d18a:	3b15      	subs	r3, #21
 800d18c:	089b      	lsrs	r3, r3, #2
 800d18e:	3301      	adds	r3, #1
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	9306      	str	r3, [sp, #24]
 800d194:	9b01      	ldr	r3, [sp, #4]
 800d196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d198:	4293      	cmp	r3, r2
 800d19a:	d310      	bcc.n	800d1be <__multiply+0xb2>
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	dd05      	ble.n	800d1ae <__multiply+0xa2>
 800d1a2:	9b04      	ldr	r3, [sp, #16]
 800d1a4:	3b04      	subs	r3, #4
 800d1a6:	9304      	str	r3, [sp, #16]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d056      	beq.n	800d25c <__multiply+0x150>
 800d1ae:	9b02      	ldr	r3, [sp, #8]
 800d1b0:	9a03      	ldr	r2, [sp, #12]
 800d1b2:	0018      	movs	r0, r3
 800d1b4:	611a      	str	r2, [r3, #16]
 800d1b6:	b00b      	add	sp, #44	; 0x2c
 800d1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ba:	c304      	stmia	r3!, {r2}
 800d1bc:	e7cf      	b.n	800d15e <__multiply+0x52>
 800d1be:	9b01      	ldr	r3, [sp, #4]
 800d1c0:	6818      	ldr	r0, [r3, #0]
 800d1c2:	b280      	uxth	r0, r0
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d01e      	beq.n	800d206 <__multiply+0xfa>
 800d1c8:	4667      	mov	r7, ip
 800d1ca:	2500      	movs	r5, #0
 800d1cc:	9e08      	ldr	r6, [sp, #32]
 800d1ce:	ce02      	ldmia	r6!, {r1}
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	9307      	str	r3, [sp, #28]
 800d1d4:	b28b      	uxth	r3, r1
 800d1d6:	4343      	muls	r3, r0
 800d1d8:	001a      	movs	r2, r3
 800d1da:	466b      	mov	r3, sp
 800d1dc:	8b9b      	ldrh	r3, [r3, #28]
 800d1de:	18d3      	adds	r3, r2, r3
 800d1e0:	195b      	adds	r3, r3, r5
 800d1e2:	0c0d      	lsrs	r5, r1, #16
 800d1e4:	4345      	muls	r5, r0
 800d1e6:	9a07      	ldr	r2, [sp, #28]
 800d1e8:	0c11      	lsrs	r1, r2, #16
 800d1ea:	1869      	adds	r1, r5, r1
 800d1ec:	0c1a      	lsrs	r2, r3, #16
 800d1ee:	188a      	adds	r2, r1, r2
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	0c15      	lsrs	r5, r2, #16
 800d1f4:	0412      	lsls	r2, r2, #16
 800d1f6:	431a      	orrs	r2, r3
 800d1f8:	9b05      	ldr	r3, [sp, #20]
 800d1fa:	c704      	stmia	r7!, {r2}
 800d1fc:	42b3      	cmp	r3, r6
 800d1fe:	d8e6      	bhi.n	800d1ce <__multiply+0xc2>
 800d200:	4663      	mov	r3, ip
 800d202:	9a06      	ldr	r2, [sp, #24]
 800d204:	509d      	str	r5, [r3, r2]
 800d206:	9b01      	ldr	r3, [sp, #4]
 800d208:	6818      	ldr	r0, [r3, #0]
 800d20a:	0c00      	lsrs	r0, r0, #16
 800d20c:	d020      	beq.n	800d250 <__multiply+0x144>
 800d20e:	4663      	mov	r3, ip
 800d210:	0025      	movs	r5, r4
 800d212:	4661      	mov	r1, ip
 800d214:	2700      	movs	r7, #0
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	3514      	adds	r5, #20
 800d21a:	682a      	ldr	r2, [r5, #0]
 800d21c:	680e      	ldr	r6, [r1, #0]
 800d21e:	b292      	uxth	r2, r2
 800d220:	4342      	muls	r2, r0
 800d222:	0c36      	lsrs	r6, r6, #16
 800d224:	1992      	adds	r2, r2, r6
 800d226:	19d2      	adds	r2, r2, r7
 800d228:	0416      	lsls	r6, r2, #16
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	431e      	orrs	r6, r3
 800d22e:	600e      	str	r6, [r1, #0]
 800d230:	cd40      	ldmia	r5!, {r6}
 800d232:	684b      	ldr	r3, [r1, #4]
 800d234:	0c36      	lsrs	r6, r6, #16
 800d236:	4346      	muls	r6, r0
 800d238:	b29b      	uxth	r3, r3
 800d23a:	0c12      	lsrs	r2, r2, #16
 800d23c:	18f3      	adds	r3, r6, r3
 800d23e:	189b      	adds	r3, r3, r2
 800d240:	9a05      	ldr	r2, [sp, #20]
 800d242:	0c1f      	lsrs	r7, r3, #16
 800d244:	3104      	adds	r1, #4
 800d246:	42aa      	cmp	r2, r5
 800d248:	d8e7      	bhi.n	800d21a <__multiply+0x10e>
 800d24a:	4662      	mov	r2, ip
 800d24c:	9906      	ldr	r1, [sp, #24]
 800d24e:	5053      	str	r3, [r2, r1]
 800d250:	9b01      	ldr	r3, [sp, #4]
 800d252:	3304      	adds	r3, #4
 800d254:	9301      	str	r3, [sp, #4]
 800d256:	2304      	movs	r3, #4
 800d258:	449c      	add	ip, r3
 800d25a:	e79b      	b.n	800d194 <__multiply+0x88>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	3b01      	subs	r3, #1
 800d260:	9303      	str	r3, [sp, #12]
 800d262:	e79b      	b.n	800d19c <__multiply+0x90>
 800d264:	08014a79 	.word	0x08014a79
 800d268:	08014aea 	.word	0x08014aea

0800d26c <__pow5mult>:
 800d26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d26e:	2303      	movs	r3, #3
 800d270:	0015      	movs	r5, r2
 800d272:	0007      	movs	r7, r0
 800d274:	000e      	movs	r6, r1
 800d276:	401a      	ands	r2, r3
 800d278:	421d      	tst	r5, r3
 800d27a:	d008      	beq.n	800d28e <__pow5mult+0x22>
 800d27c:	491a      	ldr	r1, [pc, #104]	; (800d2e8 <__pow5mult+0x7c>)
 800d27e:	3a01      	subs	r2, #1
 800d280:	0092      	lsls	r2, r2, #2
 800d282:	5852      	ldr	r2, [r2, r1]
 800d284:	2300      	movs	r3, #0
 800d286:	0031      	movs	r1, r6
 800d288:	f7ff fe50 	bl	800cf2c <__multadd>
 800d28c:	0006      	movs	r6, r0
 800d28e:	10ad      	asrs	r5, r5, #2
 800d290:	d027      	beq.n	800d2e2 <__pow5mult+0x76>
 800d292:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d294:	2c00      	cmp	r4, #0
 800d296:	d107      	bne.n	800d2a8 <__pow5mult+0x3c>
 800d298:	0038      	movs	r0, r7
 800d29a:	4914      	ldr	r1, [pc, #80]	; (800d2ec <__pow5mult+0x80>)
 800d29c:	f7ff ff1e 	bl	800d0dc <__i2b>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	0004      	movs	r4, r0
 800d2a4:	6438      	str	r0, [r7, #64]	; 0x40
 800d2a6:	6003      	str	r3, [r0, #0]
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	421d      	tst	r5, r3
 800d2ac:	d00a      	beq.n	800d2c4 <__pow5mult+0x58>
 800d2ae:	0031      	movs	r1, r6
 800d2b0:	0022      	movs	r2, r4
 800d2b2:	0038      	movs	r0, r7
 800d2b4:	f7ff ff2a 	bl	800d10c <__multiply>
 800d2b8:	0031      	movs	r1, r6
 800d2ba:	9001      	str	r0, [sp, #4]
 800d2bc:	0038      	movs	r0, r7
 800d2be:	f7ff fe2b 	bl	800cf18 <_Bfree>
 800d2c2:	9e01      	ldr	r6, [sp, #4]
 800d2c4:	106d      	asrs	r5, r5, #1
 800d2c6:	d00c      	beq.n	800d2e2 <__pow5mult+0x76>
 800d2c8:	6820      	ldr	r0, [r4, #0]
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d107      	bne.n	800d2de <__pow5mult+0x72>
 800d2ce:	0022      	movs	r2, r4
 800d2d0:	0021      	movs	r1, r4
 800d2d2:	0038      	movs	r0, r7
 800d2d4:	f7ff ff1a 	bl	800d10c <__multiply>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	6020      	str	r0, [r4, #0]
 800d2dc:	6003      	str	r3, [r0, #0]
 800d2de:	0004      	movs	r4, r0
 800d2e0:	e7e2      	b.n	800d2a8 <__pow5mult+0x3c>
 800d2e2:	0030      	movs	r0, r6
 800d2e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d2e6:	46c0      	nop			; (mov r8, r8)
 800d2e8:	08014c38 	.word	0x08014c38
 800d2ec:	00000271 	.word	0x00000271

0800d2f0 <__lshift>:
 800d2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2f2:	000c      	movs	r4, r1
 800d2f4:	0017      	movs	r7, r2
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	1155      	asrs	r5, r2, #5
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	18eb      	adds	r3, r5, r3
 800d2fe:	9302      	str	r3, [sp, #8]
 800d300:	3301      	adds	r3, #1
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	6849      	ldr	r1, [r1, #4]
 800d306:	68a3      	ldr	r3, [r4, #8]
 800d308:	9004      	str	r0, [sp, #16]
 800d30a:	9a01      	ldr	r2, [sp, #4]
 800d30c:	4293      	cmp	r3, r2
 800d30e:	db10      	blt.n	800d332 <__lshift+0x42>
 800d310:	9804      	ldr	r0, [sp, #16]
 800d312:	f7ff fdd9 	bl	800cec8 <_Balloc>
 800d316:	2300      	movs	r3, #0
 800d318:	0002      	movs	r2, r0
 800d31a:	0006      	movs	r6, r0
 800d31c:	0019      	movs	r1, r3
 800d31e:	3214      	adds	r2, #20
 800d320:	4298      	cmp	r0, r3
 800d322:	d10c      	bne.n	800d33e <__lshift+0x4e>
 800d324:	31df      	adds	r1, #223	; 0xdf
 800d326:	0032      	movs	r2, r6
 800d328:	4b26      	ldr	r3, [pc, #152]	; (800d3c4 <__lshift+0xd4>)
 800d32a:	4827      	ldr	r0, [pc, #156]	; (800d3c8 <__lshift+0xd8>)
 800d32c:	31ff      	adds	r1, #255	; 0xff
 800d32e:	f003 f88f 	bl	8010450 <__assert_func>
 800d332:	3101      	adds	r1, #1
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	e7e8      	b.n	800d30a <__lshift+0x1a>
 800d338:	0098      	lsls	r0, r3, #2
 800d33a:	5011      	str	r1, [r2, r0]
 800d33c:	3301      	adds	r3, #1
 800d33e:	42ab      	cmp	r3, r5
 800d340:	dbfa      	blt.n	800d338 <__lshift+0x48>
 800d342:	43eb      	mvns	r3, r5
 800d344:	17db      	asrs	r3, r3, #31
 800d346:	401d      	ands	r5, r3
 800d348:	211f      	movs	r1, #31
 800d34a:	0023      	movs	r3, r4
 800d34c:	0038      	movs	r0, r7
 800d34e:	00ad      	lsls	r5, r5, #2
 800d350:	1955      	adds	r5, r2, r5
 800d352:	6922      	ldr	r2, [r4, #16]
 800d354:	3314      	adds	r3, #20
 800d356:	0092      	lsls	r2, r2, #2
 800d358:	4008      	ands	r0, r1
 800d35a:	4684      	mov	ip, r0
 800d35c:	189a      	adds	r2, r3, r2
 800d35e:	420f      	tst	r7, r1
 800d360:	d02a      	beq.n	800d3b8 <__lshift+0xc8>
 800d362:	3101      	adds	r1, #1
 800d364:	1a09      	subs	r1, r1, r0
 800d366:	9105      	str	r1, [sp, #20]
 800d368:	2100      	movs	r1, #0
 800d36a:	9503      	str	r5, [sp, #12]
 800d36c:	4667      	mov	r7, ip
 800d36e:	6818      	ldr	r0, [r3, #0]
 800d370:	40b8      	lsls	r0, r7
 800d372:	4308      	orrs	r0, r1
 800d374:	9903      	ldr	r1, [sp, #12]
 800d376:	c101      	stmia	r1!, {r0}
 800d378:	9103      	str	r1, [sp, #12]
 800d37a:	9805      	ldr	r0, [sp, #20]
 800d37c:	cb02      	ldmia	r3!, {r1}
 800d37e:	40c1      	lsrs	r1, r0
 800d380:	429a      	cmp	r2, r3
 800d382:	d8f3      	bhi.n	800d36c <__lshift+0x7c>
 800d384:	0020      	movs	r0, r4
 800d386:	3015      	adds	r0, #21
 800d388:	2304      	movs	r3, #4
 800d38a:	4282      	cmp	r2, r0
 800d38c:	d304      	bcc.n	800d398 <__lshift+0xa8>
 800d38e:	1b13      	subs	r3, r2, r4
 800d390:	3b15      	subs	r3, #21
 800d392:	089b      	lsrs	r3, r3, #2
 800d394:	3301      	adds	r3, #1
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	50e9      	str	r1, [r5, r3]
 800d39a:	2900      	cmp	r1, #0
 800d39c:	d002      	beq.n	800d3a4 <__lshift+0xb4>
 800d39e:	9b02      	ldr	r3, [sp, #8]
 800d3a0:	3302      	adds	r3, #2
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	9b01      	ldr	r3, [sp, #4]
 800d3a6:	9804      	ldr	r0, [sp, #16]
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	0021      	movs	r1, r4
 800d3ac:	6133      	str	r3, [r6, #16]
 800d3ae:	f7ff fdb3 	bl	800cf18 <_Bfree>
 800d3b2:	0030      	movs	r0, r6
 800d3b4:	b007      	add	sp, #28
 800d3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b8:	cb02      	ldmia	r3!, {r1}
 800d3ba:	c502      	stmia	r5!, {r1}
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d8fb      	bhi.n	800d3b8 <__lshift+0xc8>
 800d3c0:	e7f0      	b.n	800d3a4 <__lshift+0xb4>
 800d3c2:	46c0      	nop			; (mov r8, r8)
 800d3c4:	08014a79 	.word	0x08014a79
 800d3c8:	08014aea 	.word	0x08014aea

0800d3cc <__mcmp>:
 800d3cc:	b530      	push	{r4, r5, lr}
 800d3ce:	690b      	ldr	r3, [r1, #16]
 800d3d0:	6904      	ldr	r4, [r0, #16]
 800d3d2:	0002      	movs	r2, r0
 800d3d4:	1ae0      	subs	r0, r4, r3
 800d3d6:	429c      	cmp	r4, r3
 800d3d8:	d10e      	bne.n	800d3f8 <__mcmp+0x2c>
 800d3da:	3214      	adds	r2, #20
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	3114      	adds	r1, #20
 800d3e0:	0014      	movs	r4, r2
 800d3e2:	18c9      	adds	r1, r1, r3
 800d3e4:	18d2      	adds	r2, r2, r3
 800d3e6:	3a04      	subs	r2, #4
 800d3e8:	3904      	subs	r1, #4
 800d3ea:	6815      	ldr	r5, [r2, #0]
 800d3ec:	680b      	ldr	r3, [r1, #0]
 800d3ee:	429d      	cmp	r5, r3
 800d3f0:	d003      	beq.n	800d3fa <__mcmp+0x2e>
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	429d      	cmp	r5, r3
 800d3f6:	d303      	bcc.n	800d400 <__mcmp+0x34>
 800d3f8:	bd30      	pop	{r4, r5, pc}
 800d3fa:	4294      	cmp	r4, r2
 800d3fc:	d3f3      	bcc.n	800d3e6 <__mcmp+0x1a>
 800d3fe:	e7fb      	b.n	800d3f8 <__mcmp+0x2c>
 800d400:	4240      	negs	r0, r0
 800d402:	e7f9      	b.n	800d3f8 <__mcmp+0x2c>

0800d404 <__mdiff>:
 800d404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d406:	000e      	movs	r6, r1
 800d408:	0007      	movs	r7, r0
 800d40a:	0011      	movs	r1, r2
 800d40c:	0030      	movs	r0, r6
 800d40e:	b087      	sub	sp, #28
 800d410:	0014      	movs	r4, r2
 800d412:	f7ff ffdb 	bl	800d3cc <__mcmp>
 800d416:	1e05      	subs	r5, r0, #0
 800d418:	d110      	bne.n	800d43c <__mdiff+0x38>
 800d41a:	0001      	movs	r1, r0
 800d41c:	0038      	movs	r0, r7
 800d41e:	f7ff fd53 	bl	800cec8 <_Balloc>
 800d422:	1e02      	subs	r2, r0, #0
 800d424:	d104      	bne.n	800d430 <__mdiff+0x2c>
 800d426:	4b3f      	ldr	r3, [pc, #252]	; (800d524 <__mdiff+0x120>)
 800d428:	483f      	ldr	r0, [pc, #252]	; (800d528 <__mdiff+0x124>)
 800d42a:	4940      	ldr	r1, [pc, #256]	; (800d52c <__mdiff+0x128>)
 800d42c:	f003 f810 	bl	8010450 <__assert_func>
 800d430:	2301      	movs	r3, #1
 800d432:	6145      	str	r5, [r0, #20]
 800d434:	6103      	str	r3, [r0, #16]
 800d436:	0010      	movs	r0, r2
 800d438:	b007      	add	sp, #28
 800d43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d43c:	2301      	movs	r3, #1
 800d43e:	9301      	str	r3, [sp, #4]
 800d440:	2800      	cmp	r0, #0
 800d442:	db04      	blt.n	800d44e <__mdiff+0x4a>
 800d444:	0023      	movs	r3, r4
 800d446:	0034      	movs	r4, r6
 800d448:	001e      	movs	r6, r3
 800d44a:	2300      	movs	r3, #0
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	0038      	movs	r0, r7
 800d450:	6861      	ldr	r1, [r4, #4]
 800d452:	f7ff fd39 	bl	800cec8 <_Balloc>
 800d456:	1e02      	subs	r2, r0, #0
 800d458:	d103      	bne.n	800d462 <__mdiff+0x5e>
 800d45a:	4b32      	ldr	r3, [pc, #200]	; (800d524 <__mdiff+0x120>)
 800d45c:	4832      	ldr	r0, [pc, #200]	; (800d528 <__mdiff+0x124>)
 800d45e:	4934      	ldr	r1, [pc, #208]	; (800d530 <__mdiff+0x12c>)
 800d460:	e7e4      	b.n	800d42c <__mdiff+0x28>
 800d462:	9b01      	ldr	r3, [sp, #4]
 800d464:	2700      	movs	r7, #0
 800d466:	60c3      	str	r3, [r0, #12]
 800d468:	6920      	ldr	r0, [r4, #16]
 800d46a:	3414      	adds	r4, #20
 800d46c:	0083      	lsls	r3, r0, #2
 800d46e:	18e3      	adds	r3, r4, r3
 800d470:	0021      	movs	r1, r4
 800d472:	9401      	str	r4, [sp, #4]
 800d474:	0034      	movs	r4, r6
 800d476:	9302      	str	r3, [sp, #8]
 800d478:	6933      	ldr	r3, [r6, #16]
 800d47a:	3414      	adds	r4, #20
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	18e3      	adds	r3, r4, r3
 800d480:	9303      	str	r3, [sp, #12]
 800d482:	0013      	movs	r3, r2
 800d484:	3314      	adds	r3, #20
 800d486:	469c      	mov	ip, r3
 800d488:	9305      	str	r3, [sp, #20]
 800d48a:	9104      	str	r1, [sp, #16]
 800d48c:	9b04      	ldr	r3, [sp, #16]
 800d48e:	cc02      	ldmia	r4!, {r1}
 800d490:	cb20      	ldmia	r3!, {r5}
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	b2ab      	uxth	r3, r5
 800d496:	19df      	adds	r7, r3, r7
 800d498:	b28b      	uxth	r3, r1
 800d49a:	1afb      	subs	r3, r7, r3
 800d49c:	0c09      	lsrs	r1, r1, #16
 800d49e:	0c2d      	lsrs	r5, r5, #16
 800d4a0:	1a6d      	subs	r5, r5, r1
 800d4a2:	1419      	asrs	r1, r3, #16
 800d4a4:	1869      	adds	r1, r5, r1
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	140f      	asrs	r7, r1, #16
 800d4aa:	0409      	lsls	r1, r1, #16
 800d4ac:	4319      	orrs	r1, r3
 800d4ae:	4663      	mov	r3, ip
 800d4b0:	c302      	stmia	r3!, {r1}
 800d4b2:	469c      	mov	ip, r3
 800d4b4:	9b03      	ldr	r3, [sp, #12]
 800d4b6:	42a3      	cmp	r3, r4
 800d4b8:	d8e8      	bhi.n	800d48c <__mdiff+0x88>
 800d4ba:	0031      	movs	r1, r6
 800d4bc:	9c03      	ldr	r4, [sp, #12]
 800d4be:	3115      	adds	r1, #21
 800d4c0:	2304      	movs	r3, #4
 800d4c2:	428c      	cmp	r4, r1
 800d4c4:	d304      	bcc.n	800d4d0 <__mdiff+0xcc>
 800d4c6:	1ba3      	subs	r3, r4, r6
 800d4c8:	3b15      	subs	r3, #21
 800d4ca:	089b      	lsrs	r3, r3, #2
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	9901      	ldr	r1, [sp, #4]
 800d4d2:	18cd      	adds	r5, r1, r3
 800d4d4:	9905      	ldr	r1, [sp, #20]
 800d4d6:	002e      	movs	r6, r5
 800d4d8:	18cb      	adds	r3, r1, r3
 800d4da:	469c      	mov	ip, r3
 800d4dc:	9902      	ldr	r1, [sp, #8]
 800d4de:	428e      	cmp	r6, r1
 800d4e0:	d310      	bcc.n	800d504 <__mdiff+0x100>
 800d4e2:	9e02      	ldr	r6, [sp, #8]
 800d4e4:	1ee9      	subs	r1, r5, #3
 800d4e6:	2400      	movs	r4, #0
 800d4e8:	428e      	cmp	r6, r1
 800d4ea:	d304      	bcc.n	800d4f6 <__mdiff+0xf2>
 800d4ec:	0031      	movs	r1, r6
 800d4ee:	3103      	adds	r1, #3
 800d4f0:	1b49      	subs	r1, r1, r5
 800d4f2:	0889      	lsrs	r1, r1, #2
 800d4f4:	008c      	lsls	r4, r1, #2
 800d4f6:	191b      	adds	r3, r3, r4
 800d4f8:	3b04      	subs	r3, #4
 800d4fa:	6819      	ldr	r1, [r3, #0]
 800d4fc:	2900      	cmp	r1, #0
 800d4fe:	d00f      	beq.n	800d520 <__mdiff+0x11c>
 800d500:	6110      	str	r0, [r2, #16]
 800d502:	e798      	b.n	800d436 <__mdiff+0x32>
 800d504:	ce02      	ldmia	r6!, {r1}
 800d506:	b28c      	uxth	r4, r1
 800d508:	19e4      	adds	r4, r4, r7
 800d50a:	0c0f      	lsrs	r7, r1, #16
 800d50c:	1421      	asrs	r1, r4, #16
 800d50e:	1879      	adds	r1, r7, r1
 800d510:	b2a4      	uxth	r4, r4
 800d512:	140f      	asrs	r7, r1, #16
 800d514:	0409      	lsls	r1, r1, #16
 800d516:	4321      	orrs	r1, r4
 800d518:	4664      	mov	r4, ip
 800d51a:	c402      	stmia	r4!, {r1}
 800d51c:	46a4      	mov	ip, r4
 800d51e:	e7dd      	b.n	800d4dc <__mdiff+0xd8>
 800d520:	3801      	subs	r0, #1
 800d522:	e7e9      	b.n	800d4f8 <__mdiff+0xf4>
 800d524:	08014a79 	.word	0x08014a79
 800d528:	08014aea 	.word	0x08014aea
 800d52c:	00000237 	.word	0x00000237
 800d530:	00000245 	.word	0x00000245

0800d534 <__ulp>:
 800d534:	2000      	movs	r0, #0
 800d536:	4b0b      	ldr	r3, [pc, #44]	; (800d564 <__ulp+0x30>)
 800d538:	4019      	ands	r1, r3
 800d53a:	4b0b      	ldr	r3, [pc, #44]	; (800d568 <__ulp+0x34>)
 800d53c:	18c9      	adds	r1, r1, r3
 800d53e:	4281      	cmp	r1, r0
 800d540:	dc06      	bgt.n	800d550 <__ulp+0x1c>
 800d542:	4249      	negs	r1, r1
 800d544:	150b      	asrs	r3, r1, #20
 800d546:	2b13      	cmp	r3, #19
 800d548:	dc03      	bgt.n	800d552 <__ulp+0x1e>
 800d54a:	2180      	movs	r1, #128	; 0x80
 800d54c:	0309      	lsls	r1, r1, #12
 800d54e:	4119      	asrs	r1, r3
 800d550:	4770      	bx	lr
 800d552:	3b14      	subs	r3, #20
 800d554:	2001      	movs	r0, #1
 800d556:	2b1e      	cmp	r3, #30
 800d558:	dc02      	bgt.n	800d560 <__ulp+0x2c>
 800d55a:	2080      	movs	r0, #128	; 0x80
 800d55c:	0600      	lsls	r0, r0, #24
 800d55e:	40d8      	lsrs	r0, r3
 800d560:	2100      	movs	r1, #0
 800d562:	e7f5      	b.n	800d550 <__ulp+0x1c>
 800d564:	7ff00000 	.word	0x7ff00000
 800d568:	fcc00000 	.word	0xfcc00000

0800d56c <__b2d>:
 800d56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d56e:	0006      	movs	r6, r0
 800d570:	6903      	ldr	r3, [r0, #16]
 800d572:	3614      	adds	r6, #20
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	18f3      	adds	r3, r6, r3
 800d578:	1f1d      	subs	r5, r3, #4
 800d57a:	682c      	ldr	r4, [r5, #0]
 800d57c:	000f      	movs	r7, r1
 800d57e:	0020      	movs	r0, r4
 800d580:	9301      	str	r3, [sp, #4]
 800d582:	f7ff fd63 	bl	800d04c <__hi0bits>
 800d586:	2220      	movs	r2, #32
 800d588:	1a12      	subs	r2, r2, r0
 800d58a:	603a      	str	r2, [r7, #0]
 800d58c:	0003      	movs	r3, r0
 800d58e:	4a1c      	ldr	r2, [pc, #112]	; (800d600 <__b2d+0x94>)
 800d590:	280a      	cmp	r0, #10
 800d592:	dc15      	bgt.n	800d5c0 <__b2d+0x54>
 800d594:	210b      	movs	r1, #11
 800d596:	0027      	movs	r7, r4
 800d598:	1a09      	subs	r1, r1, r0
 800d59a:	40cf      	lsrs	r7, r1
 800d59c:	433a      	orrs	r2, r7
 800d59e:	468c      	mov	ip, r1
 800d5a0:	0011      	movs	r1, r2
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	42ae      	cmp	r6, r5
 800d5a6:	d202      	bcs.n	800d5ae <__b2d+0x42>
 800d5a8:	9a01      	ldr	r2, [sp, #4]
 800d5aa:	3a08      	subs	r2, #8
 800d5ac:	6812      	ldr	r2, [r2, #0]
 800d5ae:	3315      	adds	r3, #21
 800d5b0:	409c      	lsls	r4, r3
 800d5b2:	4663      	mov	r3, ip
 800d5b4:	0027      	movs	r7, r4
 800d5b6:	40da      	lsrs	r2, r3
 800d5b8:	4317      	orrs	r7, r2
 800d5ba:	0038      	movs	r0, r7
 800d5bc:	b003      	add	sp, #12
 800d5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5c0:	2700      	movs	r7, #0
 800d5c2:	42ae      	cmp	r6, r5
 800d5c4:	d202      	bcs.n	800d5cc <__b2d+0x60>
 800d5c6:	9d01      	ldr	r5, [sp, #4]
 800d5c8:	3d08      	subs	r5, #8
 800d5ca:	682f      	ldr	r7, [r5, #0]
 800d5cc:	210b      	movs	r1, #11
 800d5ce:	4249      	negs	r1, r1
 800d5d0:	468c      	mov	ip, r1
 800d5d2:	449c      	add	ip, r3
 800d5d4:	2b0b      	cmp	r3, #11
 800d5d6:	d010      	beq.n	800d5fa <__b2d+0x8e>
 800d5d8:	4661      	mov	r1, ip
 800d5da:	2320      	movs	r3, #32
 800d5dc:	408c      	lsls	r4, r1
 800d5de:	1a5b      	subs	r3, r3, r1
 800d5e0:	0039      	movs	r1, r7
 800d5e2:	40d9      	lsrs	r1, r3
 800d5e4:	430c      	orrs	r4, r1
 800d5e6:	4322      	orrs	r2, r4
 800d5e8:	0011      	movs	r1, r2
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	42b5      	cmp	r5, r6
 800d5ee:	d901      	bls.n	800d5f4 <__b2d+0x88>
 800d5f0:	3d04      	subs	r5, #4
 800d5f2:	682a      	ldr	r2, [r5, #0]
 800d5f4:	4664      	mov	r4, ip
 800d5f6:	40a7      	lsls	r7, r4
 800d5f8:	e7dd      	b.n	800d5b6 <__b2d+0x4a>
 800d5fa:	4322      	orrs	r2, r4
 800d5fc:	0011      	movs	r1, r2
 800d5fe:	e7dc      	b.n	800d5ba <__b2d+0x4e>
 800d600:	3ff00000 	.word	0x3ff00000

0800d604 <__d2b>:
 800d604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d606:	2101      	movs	r1, #1
 800d608:	0014      	movs	r4, r2
 800d60a:	001d      	movs	r5, r3
 800d60c:	9f08      	ldr	r7, [sp, #32]
 800d60e:	f7ff fc5b 	bl	800cec8 <_Balloc>
 800d612:	1e06      	subs	r6, r0, #0
 800d614:	d105      	bne.n	800d622 <__d2b+0x1e>
 800d616:	0032      	movs	r2, r6
 800d618:	4b24      	ldr	r3, [pc, #144]	; (800d6ac <__d2b+0xa8>)
 800d61a:	4825      	ldr	r0, [pc, #148]	; (800d6b0 <__d2b+0xac>)
 800d61c:	4925      	ldr	r1, [pc, #148]	; (800d6b4 <__d2b+0xb0>)
 800d61e:	f002 ff17 	bl	8010450 <__assert_func>
 800d622:	032b      	lsls	r3, r5, #12
 800d624:	006d      	lsls	r5, r5, #1
 800d626:	0b1b      	lsrs	r3, r3, #12
 800d628:	0d6d      	lsrs	r5, r5, #21
 800d62a:	d125      	bne.n	800d678 <__d2b+0x74>
 800d62c:	9301      	str	r3, [sp, #4]
 800d62e:	2c00      	cmp	r4, #0
 800d630:	d028      	beq.n	800d684 <__d2b+0x80>
 800d632:	4668      	mov	r0, sp
 800d634:	9400      	str	r4, [sp, #0]
 800d636:	f7ff fd23 	bl	800d080 <__lo0bits>
 800d63a:	9b01      	ldr	r3, [sp, #4]
 800d63c:	9900      	ldr	r1, [sp, #0]
 800d63e:	2800      	cmp	r0, #0
 800d640:	d01e      	beq.n	800d680 <__d2b+0x7c>
 800d642:	2220      	movs	r2, #32
 800d644:	001c      	movs	r4, r3
 800d646:	1a12      	subs	r2, r2, r0
 800d648:	4094      	lsls	r4, r2
 800d64a:	0022      	movs	r2, r4
 800d64c:	40c3      	lsrs	r3, r0
 800d64e:	430a      	orrs	r2, r1
 800d650:	6172      	str	r2, [r6, #20]
 800d652:	9301      	str	r3, [sp, #4]
 800d654:	9c01      	ldr	r4, [sp, #4]
 800d656:	61b4      	str	r4, [r6, #24]
 800d658:	1e63      	subs	r3, r4, #1
 800d65a:	419c      	sbcs	r4, r3
 800d65c:	3401      	adds	r4, #1
 800d65e:	6134      	str	r4, [r6, #16]
 800d660:	2d00      	cmp	r5, #0
 800d662:	d017      	beq.n	800d694 <__d2b+0x90>
 800d664:	2435      	movs	r4, #53	; 0x35
 800d666:	4b14      	ldr	r3, [pc, #80]	; (800d6b8 <__d2b+0xb4>)
 800d668:	18ed      	adds	r5, r5, r3
 800d66a:	182d      	adds	r5, r5, r0
 800d66c:	603d      	str	r5, [r7, #0]
 800d66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d670:	1a24      	subs	r4, r4, r0
 800d672:	601c      	str	r4, [r3, #0]
 800d674:	0030      	movs	r0, r6
 800d676:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d678:	2280      	movs	r2, #128	; 0x80
 800d67a:	0352      	lsls	r2, r2, #13
 800d67c:	4313      	orrs	r3, r2
 800d67e:	e7d5      	b.n	800d62c <__d2b+0x28>
 800d680:	6171      	str	r1, [r6, #20]
 800d682:	e7e7      	b.n	800d654 <__d2b+0x50>
 800d684:	a801      	add	r0, sp, #4
 800d686:	f7ff fcfb 	bl	800d080 <__lo0bits>
 800d68a:	9b01      	ldr	r3, [sp, #4]
 800d68c:	2401      	movs	r4, #1
 800d68e:	6173      	str	r3, [r6, #20]
 800d690:	3020      	adds	r0, #32
 800d692:	e7e4      	b.n	800d65e <__d2b+0x5a>
 800d694:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <__d2b+0xb8>)
 800d696:	18c0      	adds	r0, r0, r3
 800d698:	4b09      	ldr	r3, [pc, #36]	; (800d6c0 <__d2b+0xbc>)
 800d69a:	6038      	str	r0, [r7, #0]
 800d69c:	18e3      	adds	r3, r4, r3
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	18f3      	adds	r3, r6, r3
 800d6a2:	6958      	ldr	r0, [r3, #20]
 800d6a4:	f7ff fcd2 	bl	800d04c <__hi0bits>
 800d6a8:	0164      	lsls	r4, r4, #5
 800d6aa:	e7e0      	b.n	800d66e <__d2b+0x6a>
 800d6ac:	08014a79 	.word	0x08014a79
 800d6b0:	08014aea 	.word	0x08014aea
 800d6b4:	0000030f 	.word	0x0000030f
 800d6b8:	fffffbcd 	.word	0xfffffbcd
 800d6bc:	fffffbce 	.word	0xfffffbce
 800d6c0:	3fffffff 	.word	0x3fffffff

0800d6c4 <__ratio>:
 800d6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6c6:	b087      	sub	sp, #28
 800d6c8:	000f      	movs	r7, r1
 800d6ca:	a904      	add	r1, sp, #16
 800d6cc:	0006      	movs	r6, r0
 800d6ce:	f7ff ff4d 	bl	800d56c <__b2d>
 800d6d2:	9000      	str	r0, [sp, #0]
 800d6d4:	9101      	str	r1, [sp, #4]
 800d6d6:	9c00      	ldr	r4, [sp, #0]
 800d6d8:	9d01      	ldr	r5, [sp, #4]
 800d6da:	0038      	movs	r0, r7
 800d6dc:	a905      	add	r1, sp, #20
 800d6de:	f7ff ff45 	bl	800d56c <__b2d>
 800d6e2:	9002      	str	r0, [sp, #8]
 800d6e4:	9103      	str	r1, [sp, #12]
 800d6e6:	9a02      	ldr	r2, [sp, #8]
 800d6e8:	9b03      	ldr	r3, [sp, #12]
 800d6ea:	6930      	ldr	r0, [r6, #16]
 800d6ec:	6939      	ldr	r1, [r7, #16]
 800d6ee:	9e04      	ldr	r6, [sp, #16]
 800d6f0:	1a40      	subs	r0, r0, r1
 800d6f2:	9905      	ldr	r1, [sp, #20]
 800d6f4:	0140      	lsls	r0, r0, #5
 800d6f6:	1a71      	subs	r1, r6, r1
 800d6f8:	1841      	adds	r1, r0, r1
 800d6fa:	0508      	lsls	r0, r1, #20
 800d6fc:	2900      	cmp	r1, #0
 800d6fe:	dd07      	ble.n	800d710 <__ratio+0x4c>
 800d700:	9901      	ldr	r1, [sp, #4]
 800d702:	1845      	adds	r5, r0, r1
 800d704:	0020      	movs	r0, r4
 800d706:	0029      	movs	r1, r5
 800d708:	f7f3 fbb6 	bl	8000e78 <__aeabi_ddiv>
 800d70c:	b007      	add	sp, #28
 800d70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d710:	9903      	ldr	r1, [sp, #12]
 800d712:	1a0b      	subs	r3, r1, r0
 800d714:	e7f6      	b.n	800d704 <__ratio+0x40>

0800d716 <__copybits>:
 800d716:	b570      	push	{r4, r5, r6, lr}
 800d718:	0014      	movs	r4, r2
 800d71a:	0005      	movs	r5, r0
 800d71c:	3901      	subs	r1, #1
 800d71e:	6913      	ldr	r3, [r2, #16]
 800d720:	1149      	asrs	r1, r1, #5
 800d722:	3101      	adds	r1, #1
 800d724:	0089      	lsls	r1, r1, #2
 800d726:	3414      	adds	r4, #20
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	1841      	adds	r1, r0, r1
 800d72c:	18e3      	adds	r3, r4, r3
 800d72e:	42a3      	cmp	r3, r4
 800d730:	d80d      	bhi.n	800d74e <__copybits+0x38>
 800d732:	0014      	movs	r4, r2
 800d734:	3411      	adds	r4, #17
 800d736:	2500      	movs	r5, #0
 800d738:	429c      	cmp	r4, r3
 800d73a:	d803      	bhi.n	800d744 <__copybits+0x2e>
 800d73c:	1a9b      	subs	r3, r3, r2
 800d73e:	3b11      	subs	r3, #17
 800d740:	089b      	lsrs	r3, r3, #2
 800d742:	009d      	lsls	r5, r3, #2
 800d744:	2300      	movs	r3, #0
 800d746:	1940      	adds	r0, r0, r5
 800d748:	4281      	cmp	r1, r0
 800d74a:	d803      	bhi.n	800d754 <__copybits+0x3e>
 800d74c:	bd70      	pop	{r4, r5, r6, pc}
 800d74e:	cc40      	ldmia	r4!, {r6}
 800d750:	c540      	stmia	r5!, {r6}
 800d752:	e7ec      	b.n	800d72e <__copybits+0x18>
 800d754:	c008      	stmia	r0!, {r3}
 800d756:	e7f7      	b.n	800d748 <__copybits+0x32>

0800d758 <__any_on>:
 800d758:	0002      	movs	r2, r0
 800d75a:	6900      	ldr	r0, [r0, #16]
 800d75c:	b510      	push	{r4, lr}
 800d75e:	3214      	adds	r2, #20
 800d760:	114b      	asrs	r3, r1, #5
 800d762:	4298      	cmp	r0, r3
 800d764:	db13      	blt.n	800d78e <__any_on+0x36>
 800d766:	dd0c      	ble.n	800d782 <__any_on+0x2a>
 800d768:	241f      	movs	r4, #31
 800d76a:	0008      	movs	r0, r1
 800d76c:	4020      	ands	r0, r4
 800d76e:	4221      	tst	r1, r4
 800d770:	d007      	beq.n	800d782 <__any_on+0x2a>
 800d772:	0099      	lsls	r1, r3, #2
 800d774:	588c      	ldr	r4, [r1, r2]
 800d776:	0021      	movs	r1, r4
 800d778:	40c1      	lsrs	r1, r0
 800d77a:	4081      	lsls	r1, r0
 800d77c:	2001      	movs	r0, #1
 800d77e:	428c      	cmp	r4, r1
 800d780:	d104      	bne.n	800d78c <__any_on+0x34>
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	18d3      	adds	r3, r2, r3
 800d786:	4293      	cmp	r3, r2
 800d788:	d803      	bhi.n	800d792 <__any_on+0x3a>
 800d78a:	2000      	movs	r0, #0
 800d78c:	bd10      	pop	{r4, pc}
 800d78e:	0003      	movs	r3, r0
 800d790:	e7f7      	b.n	800d782 <__any_on+0x2a>
 800d792:	3b04      	subs	r3, #4
 800d794:	6819      	ldr	r1, [r3, #0]
 800d796:	2900      	cmp	r1, #0
 800d798:	d0f5      	beq.n	800d786 <__any_on+0x2e>
 800d79a:	2001      	movs	r0, #1
 800d79c:	e7f6      	b.n	800d78c <__any_on+0x34>

0800d79e <__ascii_wctomb>:
 800d79e:	0003      	movs	r3, r0
 800d7a0:	1e08      	subs	r0, r1, #0
 800d7a2:	d005      	beq.n	800d7b0 <__ascii_wctomb+0x12>
 800d7a4:	2aff      	cmp	r2, #255	; 0xff
 800d7a6:	d904      	bls.n	800d7b2 <__ascii_wctomb+0x14>
 800d7a8:	228a      	movs	r2, #138	; 0x8a
 800d7aa:	2001      	movs	r0, #1
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	4240      	negs	r0, r0
 800d7b0:	4770      	bx	lr
 800d7b2:	2001      	movs	r0, #1
 800d7b4:	700a      	strb	r2, [r1, #0]
 800d7b6:	e7fb      	b.n	800d7b0 <__ascii_wctomb+0x12>

0800d7b8 <_svfprintf_r>:
 800d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ba:	b0d9      	sub	sp, #356	; 0x164
 800d7bc:	001c      	movs	r4, r3
 800d7be:	910b      	str	r1, [sp, #44]	; 0x2c
 800d7c0:	9208      	str	r2, [sp, #32]
 800d7c2:	900a      	str	r0, [sp, #40]	; 0x28
 800d7c4:	f002 fdae 	bl	8010324 <_localeconv_r>
 800d7c8:	6803      	ldr	r3, [r0, #0]
 800d7ca:	0018      	movs	r0, r3
 800d7cc:	931c      	str	r3, [sp, #112]	; 0x70
 800d7ce:	f7f2 fc99 	bl	8000104 <strlen>
 800d7d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7d4:	9016      	str	r0, [sp, #88]	; 0x58
 800d7d6:	899b      	ldrh	r3, [r3, #12]
 800d7d8:	061b      	lsls	r3, r3, #24
 800d7da:	d517      	bpl.n	800d80c <_svfprintf_r+0x54>
 800d7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d113      	bne.n	800d80c <_svfprintf_r+0x54>
 800d7e4:	2140      	movs	r1, #64	; 0x40
 800d7e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d7e8:	f7fd fb6e 	bl	800aec8 <_malloc_r>
 800d7ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7ee:	6018      	str	r0, [r3, #0]
 800d7f0:	6118      	str	r0, [r3, #16]
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d107      	bne.n	800d806 <_svfprintf_r+0x4e>
 800d7f6:	230c      	movs	r3, #12
 800d7f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7fa:	6013      	str	r3, [r2, #0]
 800d7fc:	3b0d      	subs	r3, #13
 800d7fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800d800:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d802:	b059      	add	sp, #356	; 0x164
 800d804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d806:	2340      	movs	r3, #64	; 0x40
 800d808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d80a:	6153      	str	r3, [r2, #20]
 800d80c:	2300      	movs	r3, #0
 800d80e:	2200      	movs	r2, #0
 800d810:	932e      	str	r3, [sp, #184]	; 0xb8
 800d812:	932d      	str	r3, [sp, #180]	; 0xb4
 800d814:	930e      	str	r3, [sp, #56]	; 0x38
 800d816:	2300      	movs	r3, #0
 800d818:	9214      	str	r2, [sp, #80]	; 0x50
 800d81a:	9315      	str	r3, [sp, #84]	; 0x54
 800d81c:	2300      	movs	r3, #0
 800d81e:	af2f      	add	r7, sp, #188	; 0xbc
 800d820:	972c      	str	r7, [sp, #176]	; 0xb0
 800d822:	931f      	str	r3, [sp, #124]	; 0x7c
 800d824:	931e      	str	r3, [sp, #120]	; 0x78
 800d826:	9312      	str	r3, [sp, #72]	; 0x48
 800d828:	931b      	str	r3, [sp, #108]	; 0x6c
 800d82a:	931d      	str	r3, [sp, #116]	; 0x74
 800d82c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d82e:	9d08      	ldr	r5, [sp, #32]
 800d830:	782b      	ldrb	r3, [r5, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d002      	beq.n	800d83c <_svfprintf_r+0x84>
 800d836:	2b25      	cmp	r3, #37	; 0x25
 800d838:	d000      	beq.n	800d83c <_svfprintf_r+0x84>
 800d83a:	e091      	b.n	800d960 <_svfprintf_r+0x1a8>
 800d83c:	9b08      	ldr	r3, [sp, #32]
 800d83e:	1aee      	subs	r6, r5, r3
 800d840:	429d      	cmp	r5, r3
 800d842:	d016      	beq.n	800d872 <_svfprintf_r+0xba>
 800d844:	603b      	str	r3, [r7, #0]
 800d846:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d848:	607e      	str	r6, [r7, #4]
 800d84a:	199b      	adds	r3, r3, r6
 800d84c:	932e      	str	r3, [sp, #184]	; 0xb8
 800d84e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d850:	3708      	adds	r7, #8
 800d852:	3301      	adds	r3, #1
 800d854:	932d      	str	r3, [sp, #180]	; 0xb4
 800d856:	2b07      	cmp	r3, #7
 800d858:	dd08      	ble.n	800d86c <_svfprintf_r+0xb4>
 800d85a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d85c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d85e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d860:	f004 f8c0 	bl	80119e4 <__ssprint_r>
 800d864:	2800      	cmp	r0, #0
 800d866:	d000      	beq.n	800d86a <_svfprintf_r+0xb2>
 800d868:	e1cf      	b.n	800dc0a <_svfprintf_r+0x452>
 800d86a:	af2f      	add	r7, sp, #188	; 0xbc
 800d86c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d86e:	199b      	adds	r3, r3, r6
 800d870:	9317      	str	r3, [sp, #92]	; 0x5c
 800d872:	782b      	ldrb	r3, [r5, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d101      	bne.n	800d87c <_svfprintf_r+0xc4>
 800d878:	f001 f99e 	bl	800ebb8 <_svfprintf_r+0x1400>
 800d87c:	221b      	movs	r2, #27
 800d87e:	2300      	movs	r3, #0
 800d880:	a91e      	add	r1, sp, #120	; 0x78
 800d882:	1852      	adds	r2, r2, r1
 800d884:	7013      	strb	r3, [r2, #0]
 800d886:	2201      	movs	r2, #1
 800d888:	001e      	movs	r6, r3
 800d88a:	4252      	negs	r2, r2
 800d88c:	3501      	adds	r5, #1
 800d88e:	9209      	str	r2, [sp, #36]	; 0x24
 800d890:	9318      	str	r3, [sp, #96]	; 0x60
 800d892:	1c6b      	adds	r3, r5, #1
 800d894:	9313      	str	r3, [sp, #76]	; 0x4c
 800d896:	782b      	ldrb	r3, [r5, #0]
 800d898:	930f      	str	r3, [sp, #60]	; 0x3c
 800d89a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d89c:	3820      	subs	r0, #32
 800d89e:	285a      	cmp	r0, #90	; 0x5a
 800d8a0:	d901      	bls.n	800d8a6 <_svfprintf_r+0xee>
 800d8a2:	f000 fe20 	bl	800e4e6 <_svfprintf_r+0xd2e>
 800d8a6:	f7f2 fc3f 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d8aa:	0078      	.short	0x0078
 800d8ac:	061e061e 	.word	0x061e061e
 800d8b0:	061e0082 	.word	0x061e0082
 800d8b4:	061e061e 	.word	0x061e061e
 800d8b8:	061e005d 	.word	0x061e005d
 800d8bc:	0084061e 	.word	0x0084061e
 800d8c0:	061e008c 	.word	0x061e008c
 800d8c4:	0091008a 	.word	0x0091008a
 800d8c8:	00b2061e 	.word	0x00b2061e
 800d8cc:	00b400b4 	.word	0x00b400b4
 800d8d0:	00b400b4 	.word	0x00b400b4
 800d8d4:	00b400b4 	.word	0x00b400b4
 800d8d8:	00b400b4 	.word	0x00b400b4
 800d8dc:	061e00b4 	.word	0x061e00b4
 800d8e0:	061e061e 	.word	0x061e061e
 800d8e4:	061e061e 	.word	0x061e061e
 800d8e8:	061e061e 	.word	0x061e061e
 800d8ec:	061e013b 	.word	0x061e013b
 800d8f0:	00f400e0 	.word	0x00f400e0
 800d8f4:	013b013b 	.word	0x013b013b
 800d8f8:	061e013b 	.word	0x061e013b
 800d8fc:	061e061e 	.word	0x061e061e
 800d900:	00c7061e 	.word	0x00c7061e
 800d904:	061e061e 	.word	0x061e061e
 800d908:	061e04c7 	.word	0x061e04c7
 800d90c:	061e061e 	.word	0x061e061e
 800d910:	061e050a 	.word	0x061e050a
 800d914:	061e052a 	.word	0x061e052a
 800d918:	055c061e 	.word	0x055c061e
 800d91c:	061e061e 	.word	0x061e061e
 800d920:	061e061e 	.word	0x061e061e
 800d924:	061e061e 	.word	0x061e061e
 800d928:	061e061e 	.word	0x061e061e
 800d92c:	061e013b 	.word	0x061e013b
 800d930:	00f600e0 	.word	0x00f600e0
 800d934:	013b013b 	.word	0x013b013b
 800d938:	00c9013b 	.word	0x00c9013b
 800d93c:	00dc00f6 	.word	0x00dc00f6
 800d940:	00d5061e 	.word	0x00d5061e
 800d944:	04a7061e 	.word	0x04a7061e
 800d948:	04fa04c9 	.word	0x04fa04c9
 800d94c:	061e00dc 	.word	0x061e00dc
 800d950:	0080050a 	.word	0x0080050a
 800d954:	061e052c 	.word	0x061e052c
 800d958:	057c061e 	.word	0x057c061e
 800d95c:	0080061e 	.word	0x0080061e
 800d960:	3501      	adds	r5, #1
 800d962:	e765      	b.n	800d830 <_svfprintf_r+0x78>
 800d964:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d966:	f002 fcdd 	bl	8010324 <_localeconv_r>
 800d96a:	6843      	ldr	r3, [r0, #4]
 800d96c:	0018      	movs	r0, r3
 800d96e:	931d      	str	r3, [sp, #116]	; 0x74
 800d970:	f7f2 fbc8 	bl	8000104 <strlen>
 800d974:	901b      	str	r0, [sp, #108]	; 0x6c
 800d976:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d978:	f002 fcd4 	bl	8010324 <_localeconv_r>
 800d97c:	6883      	ldr	r3, [r0, #8]
 800d97e:	9312      	str	r3, [sp, #72]	; 0x48
 800d980:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d982:	2b00      	cmp	r3, #0
 800d984:	d011      	beq.n	800d9aa <_svfprintf_r+0x1f2>
 800d986:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00e      	beq.n	800d9aa <_svfprintf_r+0x1f2>
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00b      	beq.n	800d9aa <_svfprintf_r+0x1f2>
 800d992:	2380      	movs	r3, #128	; 0x80
 800d994:	00db      	lsls	r3, r3, #3
 800d996:	431e      	orrs	r6, r3
 800d998:	e007      	b.n	800d9aa <_svfprintf_r+0x1f2>
 800d99a:	231b      	movs	r3, #27
 800d99c:	aa1e      	add	r2, sp, #120	; 0x78
 800d99e:	189b      	adds	r3, r3, r2
 800d9a0:	781a      	ldrb	r2, [r3, #0]
 800d9a2:	2a00      	cmp	r2, #0
 800d9a4:	d101      	bne.n	800d9aa <_svfprintf_r+0x1f2>
 800d9a6:	3220      	adds	r2, #32
 800d9a8:	701a      	strb	r2, [r3, #0]
 800d9aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d9ac:	e771      	b.n	800d892 <_svfprintf_r+0xda>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e7f1      	b.n	800d996 <_svfprintf_r+0x1de>
 800d9b2:	cc08      	ldmia	r4!, {r3}
 800d9b4:	9318      	str	r3, [sp, #96]	; 0x60
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	daf7      	bge.n	800d9aa <_svfprintf_r+0x1f2>
 800d9ba:	425b      	negs	r3, r3
 800d9bc:	9318      	str	r3, [sp, #96]	; 0x60
 800d9be:	2304      	movs	r3, #4
 800d9c0:	e7e9      	b.n	800d996 <_svfprintf_r+0x1de>
 800d9c2:	231b      	movs	r3, #27
 800d9c4:	aa1e      	add	r2, sp, #120	; 0x78
 800d9c6:	189b      	adds	r3, r3, r2
 800d9c8:	222b      	movs	r2, #43	; 0x2b
 800d9ca:	e7ed      	b.n	800d9a8 <_svfprintf_r+0x1f0>
 800d9cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d9ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9d0:	7812      	ldrb	r2, [r2, #0]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9d6:	2a2a      	cmp	r2, #42	; 0x2a
 800d9d8:	d010      	beq.n	800d9fc <_svfprintf_r+0x244>
 800d9da:	2200      	movs	r2, #0
 800d9dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d9de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d9e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9e2:	3a30      	subs	r2, #48	; 0x30
 800d9e4:	2a09      	cmp	r2, #9
 800d9e6:	d900      	bls.n	800d9ea <_svfprintf_r+0x232>
 800d9e8:	e757      	b.n	800d89a <_svfprintf_r+0xe2>
 800d9ea:	200a      	movs	r0, #10
 800d9ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9ee:	4341      	muls	r1, r0
 800d9f0:	188a      	adds	r2, r1, r2
 800d9f2:	9209      	str	r2, [sp, #36]	; 0x24
 800d9f4:	781a      	ldrb	r2, [r3, #0]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9fa:	e7f0      	b.n	800d9de <_svfprintf_r+0x226>
 800d9fc:	cc04      	ldmia	r4!, {r2}
 800d9fe:	9209      	str	r2, [sp, #36]	; 0x24
 800da00:	2a00      	cmp	r2, #0
 800da02:	da02      	bge.n	800da0a <_svfprintf_r+0x252>
 800da04:	2201      	movs	r2, #1
 800da06:	4252      	negs	r2, r2
 800da08:	9209      	str	r2, [sp, #36]	; 0x24
 800da0a:	9313      	str	r3, [sp, #76]	; 0x4c
 800da0c:	e7cd      	b.n	800d9aa <_svfprintf_r+0x1f2>
 800da0e:	2380      	movs	r3, #128	; 0x80
 800da10:	e7c1      	b.n	800d996 <_svfprintf_r+0x1de>
 800da12:	2200      	movs	r2, #0
 800da14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da16:	9218      	str	r2, [sp, #96]	; 0x60
 800da18:	210a      	movs	r1, #10
 800da1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da1c:	434a      	muls	r2, r1
 800da1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da20:	3930      	subs	r1, #48	; 0x30
 800da22:	188a      	adds	r2, r1, r2
 800da24:	9218      	str	r2, [sp, #96]	; 0x60
 800da26:	001a      	movs	r2, r3
 800da28:	7812      	ldrb	r2, [r2, #0]
 800da2a:	3301      	adds	r3, #1
 800da2c:	920f      	str	r2, [sp, #60]	; 0x3c
 800da2e:	3a30      	subs	r2, #48	; 0x30
 800da30:	9313      	str	r3, [sp, #76]	; 0x4c
 800da32:	2a09      	cmp	r2, #9
 800da34:	d9f0      	bls.n	800da18 <_svfprintf_r+0x260>
 800da36:	e730      	b.n	800d89a <_svfprintf_r+0xe2>
 800da38:	2308      	movs	r3, #8
 800da3a:	e7ac      	b.n	800d996 <_svfprintf_r+0x1de>
 800da3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	2b68      	cmp	r3, #104	; 0x68
 800da42:	d105      	bne.n	800da50 <_svfprintf_r+0x298>
 800da44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da46:	3301      	adds	r3, #1
 800da48:	9313      	str	r3, [sp, #76]	; 0x4c
 800da4a:	2380      	movs	r3, #128	; 0x80
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	e7a2      	b.n	800d996 <_svfprintf_r+0x1de>
 800da50:	2340      	movs	r3, #64	; 0x40
 800da52:	e7a0      	b.n	800d996 <_svfprintf_r+0x1de>
 800da54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	2b6c      	cmp	r3, #108	; 0x6c
 800da5a:	d104      	bne.n	800da66 <_svfprintf_r+0x2ae>
 800da5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da5e:	3301      	adds	r3, #1
 800da60:	9313      	str	r3, [sp, #76]	; 0x4c
 800da62:	2320      	movs	r3, #32
 800da64:	e797      	b.n	800d996 <_svfprintf_r+0x1de>
 800da66:	2310      	movs	r3, #16
 800da68:	e795      	b.n	800d996 <_svfprintf_r+0x1de>
 800da6a:	0021      	movs	r1, r4
 800da6c:	c904      	ldmia	r1!, {r2}
 800da6e:	ab3f      	add	r3, sp, #252	; 0xfc
 800da70:	910d      	str	r1, [sp, #52]	; 0x34
 800da72:	211b      	movs	r1, #27
 800da74:	701a      	strb	r2, [r3, #0]
 800da76:	2200      	movs	r2, #0
 800da78:	a81e      	add	r0, sp, #120	; 0x78
 800da7a:	1809      	adds	r1, r1, r0
 800da7c:	700a      	strb	r2, [r1, #0]
 800da7e:	920c      	str	r2, [sp, #48]	; 0x30
 800da80:	3201      	adds	r2, #1
 800da82:	9209      	str	r2, [sp, #36]	; 0x24
 800da84:	2200      	movs	r2, #0
 800da86:	9308      	str	r3, [sp, #32]
 800da88:	0015      	movs	r5, r2
 800da8a:	9219      	str	r2, [sp, #100]	; 0x64
 800da8c:	9210      	str	r2, [sp, #64]	; 0x40
 800da8e:	9211      	str	r2, [sp, #68]	; 0x44
 800da90:	e1f1      	b.n	800de76 <_svfprintf_r+0x6be>
 800da92:	2310      	movs	r3, #16
 800da94:	431e      	orrs	r6, r3
 800da96:	06b3      	lsls	r3, r6, #26
 800da98:	d531      	bpl.n	800dafe <_svfprintf_r+0x346>
 800da9a:	2307      	movs	r3, #7
 800da9c:	3407      	adds	r4, #7
 800da9e:	439c      	bics	r4, r3
 800daa0:	0022      	movs	r2, r4
 800daa2:	ca18      	ldmia	r2!, {r3, r4}
 800daa4:	9306      	str	r3, [sp, #24]
 800daa6:	9407      	str	r4, [sp, #28]
 800daa8:	920d      	str	r2, [sp, #52]	; 0x34
 800daaa:	9a07      	ldr	r2, [sp, #28]
 800daac:	2301      	movs	r3, #1
 800daae:	2a00      	cmp	r2, #0
 800dab0:	da0b      	bge.n	800daca <_svfprintf_r+0x312>
 800dab2:	9c06      	ldr	r4, [sp, #24]
 800dab4:	9d07      	ldr	r5, [sp, #28]
 800dab6:	2200      	movs	r2, #0
 800dab8:	4261      	negs	r1, r4
 800daba:	41aa      	sbcs	r2, r5
 800dabc:	9106      	str	r1, [sp, #24]
 800dabe:	9207      	str	r2, [sp, #28]
 800dac0:	221b      	movs	r2, #27
 800dac2:	a91e      	add	r1, sp, #120	; 0x78
 800dac4:	1852      	adds	r2, r2, r1
 800dac6:	212d      	movs	r1, #45	; 0x2d
 800dac8:	7011      	strb	r1, [r2, #0]
 800daca:	9907      	ldr	r1, [sp, #28]
 800dacc:	9a06      	ldr	r2, [sp, #24]
 800dace:	430a      	orrs	r2, r1
 800dad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dad2:	3101      	adds	r1, #1
 800dad4:	d101      	bne.n	800dada <_svfprintf_r+0x322>
 800dad6:	f001 f87b 	bl	800ebd0 <_svfprintf_r+0x1418>
 800dada:	2180      	movs	r1, #128	; 0x80
 800dadc:	0034      	movs	r4, r6
 800dade:	438c      	bics	r4, r1
 800dae0:	2a00      	cmp	r2, #0
 800dae2:	d001      	beq.n	800dae8 <_svfprintf_r+0x330>
 800dae4:	f001 f879 	bl	800ebda <_svfprintf_r+0x1422>
 800dae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daea:	2a00      	cmp	r2, #0
 800daec:	d101      	bne.n	800daf2 <_svfprintf_r+0x33a>
 800daee:	f000 fcef 	bl	800e4d0 <_svfprintf_r+0xd18>
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d001      	beq.n	800dafa <_svfprintf_r+0x342>
 800daf6:	f001 f874 	bl	800ebe2 <_svfprintf_r+0x142a>
 800dafa:	f000 fc79 	bl	800e3f0 <_svfprintf_r+0xc38>
 800dafe:	0022      	movs	r2, r4
 800db00:	ca08      	ldmia	r2!, {r3}
 800db02:	920d      	str	r2, [sp, #52]	; 0x34
 800db04:	06f2      	lsls	r2, r6, #27
 800db06:	d503      	bpl.n	800db10 <_svfprintf_r+0x358>
 800db08:	9306      	str	r3, [sp, #24]
 800db0a:	17db      	asrs	r3, r3, #31
 800db0c:	9307      	str	r3, [sp, #28]
 800db0e:	e7cc      	b.n	800daaa <_svfprintf_r+0x2f2>
 800db10:	0672      	lsls	r2, r6, #25
 800db12:	d501      	bpl.n	800db18 <_svfprintf_r+0x360>
 800db14:	b21b      	sxth	r3, r3
 800db16:	e7f7      	b.n	800db08 <_svfprintf_r+0x350>
 800db18:	05b2      	lsls	r2, r6, #22
 800db1a:	d5f5      	bpl.n	800db08 <_svfprintf_r+0x350>
 800db1c:	b25b      	sxtb	r3, r3
 800db1e:	e7f3      	b.n	800db08 <_svfprintf_r+0x350>
 800db20:	2307      	movs	r3, #7
 800db22:	3407      	adds	r4, #7
 800db24:	439c      	bics	r4, r3
 800db26:	0022      	movs	r2, r4
 800db28:	ca18      	ldmia	r2!, {r3, r4}
 800db2a:	920d      	str	r2, [sp, #52]	; 0x34
 800db2c:	2201      	movs	r2, #1
 800db2e:	9314      	str	r3, [sp, #80]	; 0x50
 800db30:	9415      	str	r4, [sp, #84]	; 0x54
 800db32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db34:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800db36:	005c      	lsls	r4, r3, #1
 800db38:	0864      	lsrs	r4, r4, #1
 800db3a:	0028      	movs	r0, r5
 800db3c:	0021      	movs	r1, r4
 800db3e:	4b3e      	ldr	r3, [pc, #248]	; (800dc38 <_svfprintf_r+0x480>)
 800db40:	4252      	negs	r2, r2
 800db42:	f7f4 fbd7 	bl	80022f4 <__aeabi_dcmpun>
 800db46:	2800      	cmp	r0, #0
 800db48:	d126      	bne.n	800db98 <_svfprintf_r+0x3e0>
 800db4a:	2201      	movs	r2, #1
 800db4c:	0028      	movs	r0, r5
 800db4e:	0021      	movs	r1, r4
 800db50:	4b39      	ldr	r3, [pc, #228]	; (800dc38 <_svfprintf_r+0x480>)
 800db52:	4252      	negs	r2, r2
 800db54:	f7f2 fc88 	bl	8000468 <__aeabi_dcmple>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d11d      	bne.n	800db98 <_svfprintf_r+0x3e0>
 800db5c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800db5e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800db60:	2200      	movs	r2, #0
 800db62:	2300      	movs	r3, #0
 800db64:	f7f2 fc76 	bl	8000454 <__aeabi_dcmplt>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d004      	beq.n	800db76 <_svfprintf_r+0x3be>
 800db6c:	231b      	movs	r3, #27
 800db6e:	aa1e      	add	r2, sp, #120	; 0x78
 800db70:	189b      	adds	r3, r3, r2
 800db72:	222d      	movs	r2, #45	; 0x2d
 800db74:	701a      	strb	r2, [r3, #0]
 800db76:	4b31      	ldr	r3, [pc, #196]	; (800dc3c <_svfprintf_r+0x484>)
 800db78:	9308      	str	r3, [sp, #32]
 800db7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db7c:	2b47      	cmp	r3, #71	; 0x47
 800db7e:	dd01      	ble.n	800db84 <_svfprintf_r+0x3cc>
 800db80:	4b2f      	ldr	r3, [pc, #188]	; (800dc40 <_svfprintf_r+0x488>)
 800db82:	9308      	str	r3, [sp, #32]
 800db84:	2380      	movs	r3, #128	; 0x80
 800db86:	439e      	bics	r6, r3
 800db88:	2300      	movs	r3, #0
 800db8a:	930c      	str	r3, [sp, #48]	; 0x30
 800db8c:	3303      	adds	r3, #3
 800db8e:	9309      	str	r3, [sp, #36]	; 0x24
 800db90:	2300      	movs	r3, #0
 800db92:	9319      	str	r3, [sp, #100]	; 0x64
 800db94:	f000 fc78 	bl	800e488 <_svfprintf_r+0xcd0>
 800db98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db9c:	0010      	movs	r0, r2
 800db9e:	0019      	movs	r1, r3
 800dba0:	f7f4 fba8 	bl	80022f4 <__aeabi_dcmpun>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d00e      	beq.n	800dbc6 <_svfprintf_r+0x40e>
 800dba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	da04      	bge.n	800dbb8 <_svfprintf_r+0x400>
 800dbae:	231b      	movs	r3, #27
 800dbb0:	aa1e      	add	r2, sp, #120	; 0x78
 800dbb2:	189b      	adds	r3, r3, r2
 800dbb4:	222d      	movs	r2, #45	; 0x2d
 800dbb6:	701a      	strb	r2, [r3, #0]
 800dbb8:	4b22      	ldr	r3, [pc, #136]	; (800dc44 <_svfprintf_r+0x48c>)
 800dbba:	9308      	str	r3, [sp, #32]
 800dbbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbbe:	2b47      	cmp	r3, #71	; 0x47
 800dbc0:	dde0      	ble.n	800db84 <_svfprintf_r+0x3cc>
 800dbc2:	4b21      	ldr	r3, [pc, #132]	; (800dc48 <_svfprintf_r+0x490>)
 800dbc4:	e7dd      	b.n	800db82 <_svfprintf_r+0x3ca>
 800dbc6:	2320      	movs	r3, #32
 800dbc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dbca:	439a      	bics	r2, r3
 800dbcc:	9210      	str	r2, [sp, #64]	; 0x40
 800dbce:	2a41      	cmp	r2, #65	; 0x41
 800dbd0:	d123      	bne.n	800dc1a <_svfprintf_r+0x462>
 800dbd2:	2230      	movs	r2, #48	; 0x30
 800dbd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dbd6:	ab25      	add	r3, sp, #148	; 0x94
 800dbd8:	701a      	strb	r2, [r3, #0]
 800dbda:	3248      	adds	r2, #72	; 0x48
 800dbdc:	2961      	cmp	r1, #97	; 0x61
 800dbde:	d000      	beq.n	800dbe2 <_svfprintf_r+0x42a>
 800dbe0:	3a20      	subs	r2, #32
 800dbe2:	705a      	strb	r2, [r3, #1]
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	431e      	orrs	r6, r3
 800dbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbea:	2b63      	cmp	r3, #99	; 0x63
 800dbec:	dd2e      	ble.n	800dc4c <_svfprintf_r+0x494>
 800dbee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbf0:	1c59      	adds	r1, r3, #1
 800dbf2:	f7fd f969 	bl	800aec8 <_malloc_r>
 800dbf6:	9008      	str	r0, [sp, #32]
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	d000      	beq.n	800dbfe <_svfprintf_r+0x446>
 800dbfc:	e216      	b.n	800e02c <_svfprintf_r+0x874>
 800dbfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc00:	899a      	ldrh	r2, [r3, #12]
 800dc02:	2340      	movs	r3, #64	; 0x40
 800dc04:	4313      	orrs	r3, r2
 800dc06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc08:	8193      	strh	r3, [r2, #12]
 800dc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc0c:	899b      	ldrh	r3, [r3, #12]
 800dc0e:	065b      	lsls	r3, r3, #25
 800dc10:	d400      	bmi.n	800dc14 <_svfprintf_r+0x45c>
 800dc12:	e5f5      	b.n	800d800 <_svfprintf_r+0x48>
 800dc14:	2301      	movs	r3, #1
 800dc16:	425b      	negs	r3, r3
 800dc18:	e5f1      	b.n	800d7fe <_svfprintf_r+0x46>
 800dc1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc1c:	900c      	str	r0, [sp, #48]	; 0x30
 800dc1e:	3301      	adds	r3, #1
 800dc20:	d100      	bne.n	800dc24 <_svfprintf_r+0x46c>
 800dc22:	e206      	b.n	800e032 <_svfprintf_r+0x87a>
 800dc24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc26:	2b47      	cmp	r3, #71	; 0x47
 800dc28:	d114      	bne.n	800dc54 <_svfprintf_r+0x49c>
 800dc2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d111      	bne.n	800dc54 <_svfprintf_r+0x49c>
 800dc30:	3301      	adds	r3, #1
 800dc32:	9309      	str	r3, [sp, #36]	; 0x24
 800dc34:	e00e      	b.n	800dc54 <_svfprintf_r+0x49c>
 800dc36:	46c0      	nop			; (mov r8, r8)
 800dc38:	7fefffff 	.word	0x7fefffff
 800dc3c:	08014c44 	.word	0x08014c44
 800dc40:	08014c48 	.word	0x08014c48
 800dc44:	08014c4c 	.word	0x08014c4c
 800dc48:	08014c50 	.word	0x08014c50
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	930c      	str	r3, [sp, #48]	; 0x30
 800dc50:	ab3f      	add	r3, sp, #252	; 0xfc
 800dc52:	9308      	str	r3, [sp, #32]
 800dc54:	2380      	movs	r3, #128	; 0x80
 800dc56:	005b      	lsls	r3, r3, #1
 800dc58:	4333      	orrs	r3, r6
 800dc5a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc5e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	db00      	blt.n	800dc66 <_svfprintf_r+0x4ae>
 800dc64:	e1e7      	b.n	800e036 <_svfprintf_r+0x87e>
 800dc66:	2280      	movs	r2, #128	; 0x80
 800dc68:	0612      	lsls	r2, r2, #24
 800dc6a:	4694      	mov	ip, r2
 800dc6c:	4463      	add	r3, ip
 800dc6e:	930e      	str	r3, [sp, #56]	; 0x38
 800dc70:	232d      	movs	r3, #45	; 0x2d
 800dc72:	9322      	str	r3, [sp, #136]	; 0x88
 800dc74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc76:	2b41      	cmp	r3, #65	; 0x41
 800dc78:	d000      	beq.n	800dc7c <_svfprintf_r+0x4c4>
 800dc7a:	e1f5      	b.n	800e068 <_svfprintf_r+0x8b0>
 800dc7c:	0028      	movs	r0, r5
 800dc7e:	aa26      	add	r2, sp, #152	; 0x98
 800dc80:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dc82:	f002 fb73 	bl	801036c <frexp>
 800dc86:	23ff      	movs	r3, #255	; 0xff
 800dc88:	2200      	movs	r2, #0
 800dc8a:	059b      	lsls	r3, r3, #22
 800dc8c:	f7f3 fcee 	bl	800166c <__aeabi_dmul>
 800dc90:	2200      	movs	r2, #0
 800dc92:	2300      	movs	r3, #0
 800dc94:	0004      	movs	r4, r0
 800dc96:	000d      	movs	r5, r1
 800dc98:	f7f2 fbd6 	bl	8000448 <__aeabi_dcmpeq>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d001      	beq.n	800dca4 <_svfprintf_r+0x4ec>
 800dca0:	2301      	movs	r3, #1
 800dca2:	9326      	str	r3, [sp, #152]	; 0x98
 800dca4:	4bda      	ldr	r3, [pc, #872]	; (800e010 <_svfprintf_r+0x858>)
 800dca6:	9319      	str	r3, [sp, #100]	; 0x64
 800dca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcaa:	2b61      	cmp	r3, #97	; 0x61
 800dcac:	d001      	beq.n	800dcb2 <_svfprintf_r+0x4fa>
 800dcae:	4bd9      	ldr	r3, [pc, #868]	; (800e014 <_svfprintf_r+0x85c>)
 800dcb0:	9319      	str	r3, [sp, #100]	; 0x64
 800dcb2:	9b08      	ldr	r3, [sp, #32]
 800dcb4:	930e      	str	r3, [sp, #56]	; 0x38
 800dcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	9311      	str	r3, [sp, #68]	; 0x44
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	4bd6      	ldr	r3, [pc, #856]	; (800e018 <_svfprintf_r+0x860>)
 800dcc0:	0020      	movs	r0, r4
 800dcc2:	0029      	movs	r1, r5
 800dcc4:	f7f3 fcd2 	bl	800166c <__aeabi_dmul>
 800dcc8:	000d      	movs	r5, r1
 800dcca:	0004      	movs	r4, r0
 800dccc:	f7f4 fb30 	bl	8002330 <__aeabi_d2iz>
 800dcd0:	9021      	str	r0, [sp, #132]	; 0x84
 800dcd2:	f7f4 fb63 	bl	800239c <__aeabi_i2d>
 800dcd6:	0002      	movs	r2, r0
 800dcd8:	000b      	movs	r3, r1
 800dcda:	0020      	movs	r0, r4
 800dcdc:	0029      	movs	r1, r5
 800dcde:	f7f3 ff87 	bl	8001bf0 <__aeabi_dsub>
 800dce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dce4:	000d      	movs	r5, r1
 800dce6:	001a      	movs	r2, r3
 800dce8:	3201      	adds	r2, #1
 800dcea:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dcec:	920e      	str	r2, [sp, #56]	; 0x38
 800dcee:	9223      	str	r2, [sp, #140]	; 0x8c
 800dcf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dcf2:	0004      	movs	r4, r0
 800dcf4:	5c52      	ldrb	r2, [r2, r1]
 800dcf6:	701a      	strb	r2, [r3, #0]
 800dcf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcfa:	9320      	str	r3, [sp, #128]	; 0x80
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	d00a      	beq.n	800dd16 <_svfprintf_r+0x55e>
 800dd00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd02:	2200      	movs	r2, #0
 800dd04:	3b01      	subs	r3, #1
 800dd06:	9311      	str	r3, [sp, #68]	; 0x44
 800dd08:	0020      	movs	r0, r4
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	0029      	movs	r1, r5
 800dd0e:	f7f2 fb9b 	bl	8000448 <__aeabi_dcmpeq>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d0d2      	beq.n	800dcbc <_svfprintf_r+0x504>
 800dd16:	2200      	movs	r2, #0
 800dd18:	0020      	movs	r0, r4
 800dd1a:	0029      	movs	r1, r5
 800dd1c:	4bbf      	ldr	r3, [pc, #764]	; (800e01c <_svfprintf_r+0x864>)
 800dd1e:	f7f2 fbad 	bl	800047c <__aeabi_dcmpgt>
 800dd22:	2800      	cmp	r0, #0
 800dd24:	d10c      	bne.n	800dd40 <_svfprintf_r+0x588>
 800dd26:	2200      	movs	r2, #0
 800dd28:	0020      	movs	r0, r4
 800dd2a:	0029      	movs	r1, r5
 800dd2c:	4bbb      	ldr	r3, [pc, #748]	; (800e01c <_svfprintf_r+0x864>)
 800dd2e:	f7f2 fb8b 	bl	8000448 <__aeabi_dcmpeq>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d100      	bne.n	800dd38 <_svfprintf_r+0x580>
 800dd36:	e191      	b.n	800e05c <_svfprintf_r+0x8a4>
 800dd38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd3a:	07db      	lsls	r3, r3, #31
 800dd3c:	d400      	bmi.n	800dd40 <_svfprintf_r+0x588>
 800dd3e:	e18d      	b.n	800e05c <_svfprintf_r+0x8a4>
 800dd40:	2030      	movs	r0, #48	; 0x30
 800dd42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd44:	932a      	str	r3, [sp, #168]	; 0xa8
 800dd46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd48:	7bdb      	ldrb	r3, [r3, #15]
 800dd4a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800dd4c:	3a01      	subs	r2, #1
 800dd4e:	922a      	str	r2, [sp, #168]	; 0xa8
 800dd50:	7811      	ldrb	r1, [r2, #0]
 800dd52:	4299      	cmp	r1, r3
 800dd54:	d100      	bne.n	800dd58 <_svfprintf_r+0x5a0>
 800dd56:	e171      	b.n	800e03c <_svfprintf_r+0x884>
 800dd58:	1c4b      	adds	r3, r1, #1
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	2939      	cmp	r1, #57	; 0x39
 800dd5e:	d101      	bne.n	800dd64 <_svfprintf_r+0x5ac>
 800dd60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd62:	7a9b      	ldrb	r3, [r3, #10]
 800dd64:	7013      	strb	r3, [r2, #0]
 800dd66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd68:	9a08      	ldr	r2, [sp, #32]
 800dd6a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800dd6c:	1a9b      	subs	r3, r3, r2
 800dd6e:	930e      	str	r3, [sp, #56]	; 0x38
 800dd70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd72:	2b47      	cmp	r3, #71	; 0x47
 800dd74:	d000      	beq.n	800dd78 <_svfprintf_r+0x5c0>
 800dd76:	e1c4      	b.n	800e102 <_svfprintf_r+0x94a>
 800dd78:	1ceb      	adds	r3, r5, #3
 800dd7a:	db03      	blt.n	800dd84 <_svfprintf_r+0x5cc>
 800dd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd7e:	42ab      	cmp	r3, r5
 800dd80:	db00      	blt.n	800dd84 <_svfprintf_r+0x5cc>
 800dd82:	e1e6      	b.n	800e152 <_svfprintf_r+0x99a>
 800dd84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd86:	3b02      	subs	r3, #2
 800dd88:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd8a:	223c      	movs	r2, #60	; 0x3c
 800dd8c:	466b      	mov	r3, sp
 800dd8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dd90:	189b      	adds	r3, r3, r2
 800dd92:	1e6c      	subs	r4, r5, #1
 800dd94:	3a1c      	subs	r2, #28
 800dd96:	2000      	movs	r0, #0
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	9426      	str	r4, [sp, #152]	; 0x98
 800dd9c:	4391      	bics	r1, r2
 800dd9e:	2941      	cmp	r1, #65	; 0x41
 800dda0:	d102      	bne.n	800dda8 <_svfprintf_r+0x5f0>
 800dda2:	330f      	adds	r3, #15
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	3001      	adds	r0, #1
 800dda8:	a928      	add	r1, sp, #160	; 0xa0
 800ddaa:	700b      	strb	r3, [r1, #0]
 800ddac:	232b      	movs	r3, #43	; 0x2b
 800ddae:	2c00      	cmp	r4, #0
 800ddb0:	da02      	bge.n	800ddb8 <_svfprintf_r+0x600>
 800ddb2:	2401      	movs	r4, #1
 800ddb4:	3302      	adds	r3, #2
 800ddb6:	1b64      	subs	r4, r4, r5
 800ddb8:	704b      	strb	r3, [r1, #1]
 800ddba:	2c09      	cmp	r4, #9
 800ddbc:	dc00      	bgt.n	800ddc0 <_svfprintf_r+0x608>
 800ddbe:	e1ba      	b.n	800e136 <_svfprintf_r+0x97e>
 800ddc0:	2337      	movs	r3, #55	; 0x37
 800ddc2:	250a      	movs	r5, #10
 800ddc4:	aa1e      	add	r2, sp, #120	; 0x78
 800ddc6:	189b      	adds	r3, r3, r2
 800ddc8:	9310      	str	r3, [sp, #64]	; 0x40
 800ddca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ddcc:	0020      	movs	r0, r4
 800ddce:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd0:	0029      	movs	r1, r5
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	9310      	str	r3, [sp, #64]	; 0x40
 800ddd6:	f7f2 fb21 	bl	800041c <__aeabi_idivmod>
 800ddda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dddc:	3130      	adds	r1, #48	; 0x30
 800ddde:	7019      	strb	r1, [r3, #0]
 800dde0:	0020      	movs	r0, r4
 800dde2:	0029      	movs	r1, r5
 800dde4:	9411      	str	r4, [sp, #68]	; 0x44
 800dde6:	f7f2 fa33 	bl	8000250 <__divsi3>
 800ddea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddec:	0004      	movs	r4, r0
 800ddee:	2b63      	cmp	r3, #99	; 0x63
 800ddf0:	dceb      	bgt.n	800ddca <_svfprintf_r+0x612>
 800ddf2:	222a      	movs	r2, #42	; 0x2a
 800ddf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf6:	a81e      	add	r0, sp, #120	; 0x78
 800ddf8:	1e99      	subs	r1, r3, #2
 800ddfa:	1812      	adds	r2, r2, r0
 800ddfc:	2037      	movs	r0, #55	; 0x37
 800ddfe:	000b      	movs	r3, r1
 800de00:	3430      	adds	r4, #48	; 0x30
 800de02:	700c      	strb	r4, [r1, #0]
 800de04:	ac1e      	add	r4, sp, #120	; 0x78
 800de06:	1900      	adds	r0, r0, r4
 800de08:	4283      	cmp	r3, r0
 800de0a:	d200      	bcs.n	800de0e <_svfprintf_r+0x656>
 800de0c:	e18e      	b.n	800e12c <_svfprintf_r+0x974>
 800de0e:	2300      	movs	r3, #0
 800de10:	4281      	cmp	r1, r0
 800de12:	d804      	bhi.n	800de1e <_svfprintf_r+0x666>
 800de14:	aa1e      	add	r2, sp, #120	; 0x78
 800de16:	3339      	adds	r3, #57	; 0x39
 800de18:	189b      	adds	r3, r3, r2
 800de1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de1c:	1a9b      	subs	r3, r3, r2
 800de1e:	222a      	movs	r2, #42	; 0x2a
 800de20:	a91e      	add	r1, sp, #120	; 0x78
 800de22:	1852      	adds	r2, r2, r1
 800de24:	18d3      	adds	r3, r2, r3
 800de26:	aa28      	add	r2, sp, #160	; 0xa0
 800de28:	1a9b      	subs	r3, r3, r2
 800de2a:	931e      	str	r3, [sp, #120]	; 0x78
 800de2c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800de2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de30:	4694      	mov	ip, r2
 800de32:	4463      	add	r3, ip
 800de34:	9309      	str	r3, [sp, #36]	; 0x24
 800de36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de38:	2b01      	cmp	r3, #1
 800de3a:	dc01      	bgt.n	800de40 <_svfprintf_r+0x688>
 800de3c:	07f3      	lsls	r3, r6, #31
 800de3e:	d504      	bpl.n	800de4a <_svfprintf_r+0x692>
 800de40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800de42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de44:	4694      	mov	ip, r2
 800de46:	4463      	add	r3, ip
 800de48:	9309      	str	r3, [sp, #36]	; 0x24
 800de4a:	2280      	movs	r2, #128	; 0x80
 800de4c:	4b74      	ldr	r3, [pc, #464]	; (800e020 <_svfprintf_r+0x868>)
 800de4e:	0052      	lsls	r2, r2, #1
 800de50:	4033      	ands	r3, r6
 800de52:	431a      	orrs	r2, r3
 800de54:	2300      	movs	r3, #0
 800de56:	001d      	movs	r5, r3
 800de58:	921a      	str	r2, [sp, #104]	; 0x68
 800de5a:	9310      	str	r3, [sp, #64]	; 0x40
 800de5c:	9311      	str	r3, [sp, #68]	; 0x44
 800de5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de60:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800de62:	9319      	str	r3, [sp, #100]	; 0x64
 800de64:	2b00      	cmp	r3, #0
 800de66:	d006      	beq.n	800de76 <_svfprintf_r+0x6be>
 800de68:	231b      	movs	r3, #27
 800de6a:	aa1e      	add	r2, sp, #120	; 0x78
 800de6c:	189b      	adds	r3, r3, r2
 800de6e:	222d      	movs	r2, #45	; 0x2d
 800de70:	701a      	strb	r2, [r3, #0]
 800de72:	2300      	movs	r3, #0
 800de74:	9319      	str	r3, [sp, #100]	; 0x64
 800de76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de7a:	931a      	str	r3, [sp, #104]	; 0x68
 800de7c:	4293      	cmp	r3, r2
 800de7e:	da00      	bge.n	800de82 <_svfprintf_r+0x6ca>
 800de80:	921a      	str	r2, [sp, #104]	; 0x68
 800de82:	231b      	movs	r3, #27
 800de84:	aa1e      	add	r2, sp, #120	; 0x78
 800de86:	189b      	adds	r3, r3, r2
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	1e5a      	subs	r2, r3, #1
 800de8c:	4193      	sbcs	r3, r2
 800de8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de90:	18d3      	adds	r3, r2, r3
 800de92:	931a      	str	r3, [sp, #104]	; 0x68
 800de94:	0032      	movs	r2, r6
 800de96:	2302      	movs	r3, #2
 800de98:	401a      	ands	r2, r3
 800de9a:	9220      	str	r2, [sp, #128]	; 0x80
 800de9c:	421e      	tst	r6, r3
 800de9e:	d002      	beq.n	800dea6 <_svfprintf_r+0x6ee>
 800dea0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dea2:	3302      	adds	r3, #2
 800dea4:	931a      	str	r3, [sp, #104]	; 0x68
 800dea6:	2384      	movs	r3, #132	; 0x84
 800dea8:	0032      	movs	r2, r6
 800deaa:	401a      	ands	r2, r3
 800deac:	9221      	str	r2, [sp, #132]	; 0x84
 800deae:	421e      	tst	r6, r3
 800deb0:	d11f      	bne.n	800def2 <_svfprintf_r+0x73a>
 800deb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800deb4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800deb6:	1a9c      	subs	r4, r3, r2
 800deb8:	2c00      	cmp	r4, #0
 800deba:	dd1a      	ble.n	800def2 <_svfprintf_r+0x73a>
 800debc:	0039      	movs	r1, r7
 800debe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dec0:	4858      	ldr	r0, [pc, #352]	; (800e024 <_svfprintf_r+0x86c>)
 800dec2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dec4:	3301      	adds	r3, #1
 800dec6:	3108      	adds	r1, #8
 800dec8:	6038      	str	r0, [r7, #0]
 800deca:	2c10      	cmp	r4, #16
 800decc:	dd00      	ble.n	800ded0 <_svfprintf_r+0x718>
 800dece:	e31c      	b.n	800e50a <_svfprintf_r+0xd52>
 800ded0:	607c      	str	r4, [r7, #4]
 800ded2:	18a4      	adds	r4, r4, r2
 800ded4:	000f      	movs	r7, r1
 800ded6:	942e      	str	r4, [sp, #184]	; 0xb8
 800ded8:	932d      	str	r3, [sp, #180]	; 0xb4
 800deda:	2b07      	cmp	r3, #7
 800dedc:	dd09      	ble.n	800def2 <_svfprintf_r+0x73a>
 800dede:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dee0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dee2:	aa2c      	add	r2, sp, #176	; 0xb0
 800dee4:	f003 fd7e 	bl	80119e4 <__ssprint_r>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d001      	beq.n	800def0 <_svfprintf_r+0x738>
 800deec:	f000 fe43 	bl	800eb76 <_svfprintf_r+0x13be>
 800def0:	af2f      	add	r7, sp, #188	; 0xbc
 800def2:	221b      	movs	r2, #27
 800def4:	a91e      	add	r1, sp, #120	; 0x78
 800def6:	1852      	adds	r2, r2, r1
 800def8:	7811      	ldrb	r1, [r2, #0]
 800defa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800defc:	2900      	cmp	r1, #0
 800defe:	d014      	beq.n	800df2a <_svfprintf_r+0x772>
 800df00:	603a      	str	r2, [r7, #0]
 800df02:	2201      	movs	r2, #1
 800df04:	189b      	adds	r3, r3, r2
 800df06:	932e      	str	r3, [sp, #184]	; 0xb8
 800df08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df0a:	607a      	str	r2, [r7, #4]
 800df0c:	189b      	adds	r3, r3, r2
 800df0e:	932d      	str	r3, [sp, #180]	; 0xb4
 800df10:	3708      	adds	r7, #8
 800df12:	2b07      	cmp	r3, #7
 800df14:	dd09      	ble.n	800df2a <_svfprintf_r+0x772>
 800df16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df1a:	aa2c      	add	r2, sp, #176	; 0xb0
 800df1c:	f003 fd62 	bl	80119e4 <__ssprint_r>
 800df20:	2800      	cmp	r0, #0
 800df22:	d001      	beq.n	800df28 <_svfprintf_r+0x770>
 800df24:	f000 fe27 	bl	800eb76 <_svfprintf_r+0x13be>
 800df28:	af2f      	add	r7, sp, #188	; 0xbc
 800df2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800df2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df2e:	2a00      	cmp	r2, #0
 800df30:	d015      	beq.n	800df5e <_svfprintf_r+0x7a6>
 800df32:	aa25      	add	r2, sp, #148	; 0x94
 800df34:	603a      	str	r2, [r7, #0]
 800df36:	2202      	movs	r2, #2
 800df38:	189b      	adds	r3, r3, r2
 800df3a:	932e      	str	r3, [sp, #184]	; 0xb8
 800df3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df3e:	607a      	str	r2, [r7, #4]
 800df40:	3301      	adds	r3, #1
 800df42:	932d      	str	r3, [sp, #180]	; 0xb4
 800df44:	3708      	adds	r7, #8
 800df46:	2b07      	cmp	r3, #7
 800df48:	dd09      	ble.n	800df5e <_svfprintf_r+0x7a6>
 800df4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df4e:	aa2c      	add	r2, sp, #176	; 0xb0
 800df50:	f003 fd48 	bl	80119e4 <__ssprint_r>
 800df54:	2800      	cmp	r0, #0
 800df56:	d001      	beq.n	800df5c <_svfprintf_r+0x7a4>
 800df58:	f000 fe0d 	bl	800eb76 <_svfprintf_r+0x13be>
 800df5c:	af2f      	add	r7, sp, #188	; 0xbc
 800df5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df60:	2b80      	cmp	r3, #128	; 0x80
 800df62:	d11f      	bne.n	800dfa4 <_svfprintf_r+0x7ec>
 800df64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800df68:	1a9c      	subs	r4, r3, r2
 800df6a:	2c00      	cmp	r4, #0
 800df6c:	dd1a      	ble.n	800dfa4 <_svfprintf_r+0x7ec>
 800df6e:	0039      	movs	r1, r7
 800df70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df72:	482d      	ldr	r0, [pc, #180]	; (800e028 <_svfprintf_r+0x870>)
 800df74:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df76:	3301      	adds	r3, #1
 800df78:	3108      	adds	r1, #8
 800df7a:	6038      	str	r0, [r7, #0]
 800df7c:	2c10      	cmp	r4, #16
 800df7e:	dd00      	ble.n	800df82 <_svfprintf_r+0x7ca>
 800df80:	e2d6      	b.n	800e530 <_svfprintf_r+0xd78>
 800df82:	607c      	str	r4, [r7, #4]
 800df84:	18a4      	adds	r4, r4, r2
 800df86:	000f      	movs	r7, r1
 800df88:	942e      	str	r4, [sp, #184]	; 0xb8
 800df8a:	932d      	str	r3, [sp, #180]	; 0xb4
 800df8c:	2b07      	cmp	r3, #7
 800df8e:	dd09      	ble.n	800dfa4 <_svfprintf_r+0x7ec>
 800df90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df94:	aa2c      	add	r2, sp, #176	; 0xb0
 800df96:	f003 fd25 	bl	80119e4 <__ssprint_r>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d001      	beq.n	800dfa2 <_svfprintf_r+0x7ea>
 800df9e:	f000 fdea 	bl	800eb76 <_svfprintf_r+0x13be>
 800dfa2:	af2f      	add	r7, sp, #188	; 0xbc
 800dfa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dfa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfa8:	1a9c      	subs	r4, r3, r2
 800dfaa:	2c00      	cmp	r4, #0
 800dfac:	dd1a      	ble.n	800dfe4 <_svfprintf_r+0x82c>
 800dfae:	0039      	movs	r1, r7
 800dfb0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfb2:	481d      	ldr	r0, [pc, #116]	; (800e028 <_svfprintf_r+0x870>)
 800dfb4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	3108      	adds	r1, #8
 800dfba:	6038      	str	r0, [r7, #0]
 800dfbc:	2c10      	cmp	r4, #16
 800dfbe:	dd00      	ble.n	800dfc2 <_svfprintf_r+0x80a>
 800dfc0:	e2c9      	b.n	800e556 <_svfprintf_r+0xd9e>
 800dfc2:	18a2      	adds	r2, r4, r2
 800dfc4:	607c      	str	r4, [r7, #4]
 800dfc6:	922e      	str	r2, [sp, #184]	; 0xb8
 800dfc8:	000f      	movs	r7, r1
 800dfca:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfcc:	2b07      	cmp	r3, #7
 800dfce:	dd09      	ble.n	800dfe4 <_svfprintf_r+0x82c>
 800dfd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfd4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfd6:	f003 fd05 	bl	80119e4 <__ssprint_r>
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d001      	beq.n	800dfe2 <_svfprintf_r+0x82a>
 800dfde:	f000 fdca 	bl	800eb76 <_svfprintf_r+0x13be>
 800dfe2:	af2f      	add	r7, sp, #188	; 0xbc
 800dfe4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dfe6:	9319      	str	r3, [sp, #100]	; 0x64
 800dfe8:	05f3      	lsls	r3, r6, #23
 800dfea:	d500      	bpl.n	800dfee <_svfprintf_r+0x836>
 800dfec:	e2ce      	b.n	800e58c <_svfprintf_r+0xdd4>
 800dfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dff0:	9b08      	ldr	r3, [sp, #32]
 800dff2:	4694      	mov	ip, r2
 800dff4:	603b      	str	r3, [r7, #0]
 800dff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dff8:	607b      	str	r3, [r7, #4]
 800dffa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dffc:	4463      	add	r3, ip
 800dffe:	932e      	str	r3, [sp, #184]	; 0xb8
 800e000:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e002:	3301      	adds	r3, #1
 800e004:	932d      	str	r3, [sp, #180]	; 0xb4
 800e006:	2b07      	cmp	r3, #7
 800e008:	dd00      	ble.n	800e00c <_svfprintf_r+0x854>
 800e00a:	e3a3      	b.n	800e754 <_svfprintf_r+0xf9c>
 800e00c:	3708      	adds	r7, #8
 800e00e:	e301      	b.n	800e614 <_svfprintf_r+0xe5c>
 800e010:	08014c54 	.word	0x08014c54
 800e014:	08014c65 	.word	0x08014c65
 800e018:	40300000 	.word	0x40300000
 800e01c:	3fe00000 	.word	0x3fe00000
 800e020:	fffffbff 	.word	0xfffffbff
 800e024:	08014c78 	.word	0x08014c78
 800e028:	08014c88 	.word	0x08014c88
 800e02c:	9b08      	ldr	r3, [sp, #32]
 800e02e:	930c      	str	r3, [sp, #48]	; 0x30
 800e030:	e610      	b.n	800dc54 <_svfprintf_r+0x49c>
 800e032:	2306      	movs	r3, #6
 800e034:	e5fd      	b.n	800dc32 <_svfprintf_r+0x47a>
 800e036:	930e      	str	r3, [sp, #56]	; 0x38
 800e038:	2300      	movs	r3, #0
 800e03a:	e61a      	b.n	800dc72 <_svfprintf_r+0x4ba>
 800e03c:	7010      	strb	r0, [r2, #0]
 800e03e:	e684      	b.n	800dd4a <_svfprintf_r+0x592>
 800e040:	7018      	strb	r0, [r3, #0]
 800e042:	3301      	adds	r3, #1
 800e044:	1aca      	subs	r2, r1, r3
 800e046:	d5fb      	bpl.n	800e040 <_svfprintf_r+0x888>
 800e048:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e04a:	2300      	movs	r3, #0
 800e04c:	3201      	adds	r2, #1
 800e04e:	db01      	blt.n	800e054 <_svfprintf_r+0x89c>
 800e050:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e052:	3301      	adds	r3, #1
 800e054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e056:	18d3      	adds	r3, r2, r3
 800e058:	9323      	str	r3, [sp, #140]	; 0x8c
 800e05a:	e684      	b.n	800dd66 <_svfprintf_r+0x5ae>
 800e05c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e05e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e060:	2030      	movs	r0, #48	; 0x30
 800e062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e064:	1851      	adds	r1, r2, r1
 800e066:	e7ed      	b.n	800e044 <_svfprintf_r+0x88c>
 800e068:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e06a:	2303      	movs	r3, #3
 800e06c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e06e:	2a46      	cmp	r2, #70	; 0x46
 800e070:	d006      	beq.n	800e080 <_svfprintf_r+0x8c8>
 800e072:	0014      	movs	r4, r2
 800e074:	3c45      	subs	r4, #69	; 0x45
 800e076:	4262      	negs	r2, r4
 800e078:	4154      	adcs	r4, r2
 800e07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e07c:	3b01      	subs	r3, #1
 800e07e:	1914      	adds	r4, r2, r4
 800e080:	aa2a      	add	r2, sp, #168	; 0xa8
 800e082:	9204      	str	r2, [sp, #16]
 800e084:	aa27      	add	r2, sp, #156	; 0x9c
 800e086:	9203      	str	r2, [sp, #12]
 800e088:	aa26      	add	r2, sp, #152	; 0x98
 800e08a:	9202      	str	r2, [sp, #8]
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	002a      	movs	r2, r5
 800e090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e092:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e094:	9401      	str	r4, [sp, #4]
 800e096:	f002 fad7 	bl	8010648 <_dtoa_r>
 800e09a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e09c:	9008      	str	r0, [sp, #32]
 800e09e:	2b47      	cmp	r3, #71	; 0x47
 800e0a0:	d103      	bne.n	800e0aa <_svfprintf_r+0x8f2>
 800e0a2:	07f3      	lsls	r3, r6, #31
 800e0a4:	d401      	bmi.n	800e0aa <_svfprintf_r+0x8f2>
 800e0a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e0a8:	e65e      	b.n	800dd68 <_svfprintf_r+0x5b0>
 800e0aa:	9b08      	ldr	r3, [sp, #32]
 800e0ac:	191b      	adds	r3, r3, r4
 800e0ae:	9311      	str	r3, [sp, #68]	; 0x44
 800e0b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0b2:	2b46      	cmp	r3, #70	; 0x46
 800e0b4:	d112      	bne.n	800e0dc <_svfprintf_r+0x924>
 800e0b6:	9b08      	ldr	r3, [sp, #32]
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	2b30      	cmp	r3, #48	; 0x30
 800e0bc:	d10a      	bne.n	800e0d4 <_svfprintf_r+0x91c>
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	0028      	movs	r0, r5
 800e0c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e0c6:	f7f2 f9bf 	bl	8000448 <__aeabi_dcmpeq>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d102      	bne.n	800e0d4 <_svfprintf_r+0x91c>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	1b1b      	subs	r3, r3, r4
 800e0d2:	9326      	str	r3, [sp, #152]	; 0x98
 800e0d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e0d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e0d8:	18d3      	adds	r3, r2, r3
 800e0da:	9311      	str	r3, [sp, #68]	; 0x44
 800e0dc:	2200      	movs	r2, #0
 800e0de:	2300      	movs	r3, #0
 800e0e0:	0028      	movs	r0, r5
 800e0e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e0e4:	f7f2 f9b0 	bl	8000448 <__aeabi_dcmpeq>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d001      	beq.n	800e0f0 <_svfprintf_r+0x938>
 800e0ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0ee:	932a      	str	r3, [sp, #168]	; 0xa8
 800e0f0:	2230      	movs	r2, #48	; 0x30
 800e0f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e0f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e0f6:	4299      	cmp	r1, r3
 800e0f8:	d9d5      	bls.n	800e0a6 <_svfprintf_r+0x8ee>
 800e0fa:	1c59      	adds	r1, r3, #1
 800e0fc:	912a      	str	r1, [sp, #168]	; 0xa8
 800e0fe:	701a      	strb	r2, [r3, #0]
 800e100:	e7f7      	b.n	800e0f2 <_svfprintf_r+0x93a>
 800e102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e104:	2b46      	cmp	r3, #70	; 0x46
 800e106:	d000      	beq.n	800e10a <_svfprintf_r+0x952>
 800e108:	e63f      	b.n	800dd8a <_svfprintf_r+0x5d2>
 800e10a:	2201      	movs	r2, #1
 800e10c:	0033      	movs	r3, r6
 800e10e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e110:	4013      	ands	r3, r2
 800e112:	430b      	orrs	r3, r1
 800e114:	2d00      	cmp	r5, #0
 800e116:	dd2c      	ble.n	800e172 <_svfprintf_r+0x9ba>
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d046      	beq.n	800e1aa <_svfprintf_r+0x9f2>
 800e11c:	000a      	movs	r2, r1
 800e11e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e120:	18eb      	adds	r3, r5, r3
 800e122:	18d3      	adds	r3, r2, r3
 800e124:	9309      	str	r3, [sp, #36]	; 0x24
 800e126:	2366      	movs	r3, #102	; 0x66
 800e128:	930f      	str	r3, [sp, #60]	; 0x3c
 800e12a:	e030      	b.n	800e18e <_svfprintf_r+0x9d6>
 800e12c:	781c      	ldrb	r4, [r3, #0]
 800e12e:	3301      	adds	r3, #1
 800e130:	7014      	strb	r4, [r2, #0]
 800e132:	3201      	adds	r2, #1
 800e134:	e668      	b.n	800de08 <_svfprintf_r+0x650>
 800e136:	222a      	movs	r2, #42	; 0x2a
 800e138:	ab1e      	add	r3, sp, #120	; 0x78
 800e13a:	18d2      	adds	r2, r2, r3
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d104      	bne.n	800e14a <_svfprintf_r+0x992>
 800e140:	2330      	movs	r3, #48	; 0x30
 800e142:	222b      	movs	r2, #43	; 0x2b
 800e144:	708b      	strb	r3, [r1, #2]
 800e146:	ab1e      	add	r3, sp, #120	; 0x78
 800e148:	18d2      	adds	r2, r2, r3
 800e14a:	3430      	adds	r4, #48	; 0x30
 800e14c:	1c53      	adds	r3, r2, #1
 800e14e:	7014      	strb	r4, [r2, #0]
 800e150:	e669      	b.n	800de26 <_svfprintf_r+0x66e>
 800e152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e154:	42ab      	cmp	r3, r5
 800e156:	dd12      	ble.n	800e17e <_svfprintf_r+0x9c6>
 800e158:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e15c:	4694      	mov	ip, r2
 800e15e:	4463      	add	r3, ip
 800e160:	9309      	str	r3, [sp, #36]	; 0x24
 800e162:	2367      	movs	r3, #103	; 0x67
 800e164:	930f      	str	r3, [sp, #60]	; 0x3c
 800e166:	2d00      	cmp	r5, #0
 800e168:	dc11      	bgt.n	800e18e <_svfprintf_r+0x9d6>
 800e16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e16c:	1b5b      	subs	r3, r3, r5
 800e16e:	3301      	adds	r3, #1
 800e170:	e00c      	b.n	800e18c <_svfprintf_r+0x9d4>
 800e172:	2b00      	cmp	r3, #0
 800e174:	d01b      	beq.n	800e1ae <_svfprintf_r+0x9f6>
 800e176:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e17a:	3301      	adds	r3, #1
 800e17c:	e7d1      	b.n	800e122 <_svfprintf_r+0x96a>
 800e17e:	2367      	movs	r3, #103	; 0x67
 800e180:	9509      	str	r5, [sp, #36]	; 0x24
 800e182:	930f      	str	r3, [sp, #60]	; 0x3c
 800e184:	07f3      	lsls	r3, r6, #31
 800e186:	d502      	bpl.n	800e18e <_svfprintf_r+0x9d6>
 800e188:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e18a:	18eb      	adds	r3, r5, r3
 800e18c:	9309      	str	r3, [sp, #36]	; 0x24
 800e18e:	2380      	movs	r3, #128	; 0x80
 800e190:	0032      	movs	r2, r6
 800e192:	00db      	lsls	r3, r3, #3
 800e194:	401a      	ands	r2, r3
 800e196:	9211      	str	r2, [sp, #68]	; 0x44
 800e198:	2200      	movs	r2, #0
 800e19a:	9210      	str	r2, [sp, #64]	; 0x40
 800e19c:	421e      	tst	r6, r3
 800e19e:	d100      	bne.n	800e1a2 <_svfprintf_r+0x9ea>
 800e1a0:	e65d      	b.n	800de5e <_svfprintf_r+0x6a6>
 800e1a2:	4295      	cmp	r5, r2
 800e1a4:	dc25      	bgt.n	800e1f2 <_svfprintf_r+0xa3a>
 800e1a6:	9211      	str	r2, [sp, #68]	; 0x44
 800e1a8:	e659      	b.n	800de5e <_svfprintf_r+0x6a6>
 800e1aa:	9509      	str	r5, [sp, #36]	; 0x24
 800e1ac:	e7bb      	b.n	800e126 <_svfprintf_r+0x96e>
 800e1ae:	2366      	movs	r3, #102	; 0x66
 800e1b0:	9209      	str	r2, [sp, #36]	; 0x24
 800e1b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1b4:	e7eb      	b.n	800e18e <_svfprintf_r+0x9d6>
 800e1b6:	42ab      	cmp	r3, r5
 800e1b8:	da0e      	bge.n	800e1d8 <_svfprintf_r+0xa20>
 800e1ba:	1aed      	subs	r5, r5, r3
 800e1bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e1be:	785b      	ldrb	r3, [r3, #1]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d012      	beq.n	800e1ea <_svfprintf_r+0xa32>
 800e1c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	9311      	str	r3, [sp, #68]	; 0x44
 800e1ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	9312      	str	r3, [sp, #72]	; 0x48
 800e1d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	2bff      	cmp	r3, #255	; 0xff
 800e1d6:	d1ee      	bne.n	800e1b6 <_svfprintf_r+0x9fe>
 800e1d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e1da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1dc:	189b      	adds	r3, r3, r2
 800e1de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e1e0:	4353      	muls	r3, r2
 800e1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1e4:	189b      	adds	r3, r3, r2
 800e1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e1e8:	e639      	b.n	800de5e <_svfprintf_r+0x6a6>
 800e1ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	9310      	str	r3, [sp, #64]	; 0x40
 800e1f0:	e7ee      	b.n	800e1d0 <_svfprintf_r+0xa18>
 800e1f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1f4:	9311      	str	r3, [sp, #68]	; 0x44
 800e1f6:	e7eb      	b.n	800e1d0 <_svfprintf_r+0xa18>
 800e1f8:	1d23      	adds	r3, r4, #4
 800e1fa:	930d      	str	r3, [sp, #52]	; 0x34
 800e1fc:	06b3      	lsls	r3, r6, #26
 800e1fe:	d509      	bpl.n	800e214 <_svfprintf_r+0xa5c>
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e204:	601a      	str	r2, [r3, #0]
 800e206:	17d2      	asrs	r2, r2, #31
 800e208:	605a      	str	r2, [r3, #4]
 800e20a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e20c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e20e:	9308      	str	r3, [sp, #32]
 800e210:	f7ff fb0d 	bl	800d82e <_svfprintf_r+0x76>
 800e214:	06f3      	lsls	r3, r6, #27
 800e216:	d503      	bpl.n	800e220 <_svfprintf_r+0xa68>
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e21c:	601a      	str	r2, [r3, #0]
 800e21e:	e7f4      	b.n	800e20a <_svfprintf_r+0xa52>
 800e220:	0673      	lsls	r3, r6, #25
 800e222:	d503      	bpl.n	800e22c <_svfprintf_r+0xa74>
 800e224:	6823      	ldr	r3, [r4, #0]
 800e226:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e228:	801a      	strh	r2, [r3, #0]
 800e22a:	e7ee      	b.n	800e20a <_svfprintf_r+0xa52>
 800e22c:	05b6      	lsls	r6, r6, #22
 800e22e:	d5f3      	bpl.n	800e218 <_svfprintf_r+0xa60>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e234:	701a      	strb	r2, [r3, #0]
 800e236:	e7e8      	b.n	800e20a <_svfprintf_r+0xa52>
 800e238:	2310      	movs	r3, #16
 800e23a:	431e      	orrs	r6, r3
 800e23c:	2320      	movs	r3, #32
 800e23e:	0030      	movs	r0, r6
 800e240:	4018      	ands	r0, r3
 800e242:	421e      	tst	r6, r3
 800e244:	d00f      	beq.n	800e266 <_svfprintf_r+0xaae>
 800e246:	3b19      	subs	r3, #25
 800e248:	3407      	adds	r4, #7
 800e24a:	439c      	bics	r4, r3
 800e24c:	0022      	movs	r2, r4
 800e24e:	ca18      	ldmia	r2!, {r3, r4}
 800e250:	9306      	str	r3, [sp, #24]
 800e252:	9407      	str	r4, [sp, #28]
 800e254:	920d      	str	r2, [sp, #52]	; 0x34
 800e256:	4bc9      	ldr	r3, [pc, #804]	; (800e57c <_svfprintf_r+0xdc4>)
 800e258:	401e      	ands	r6, r3
 800e25a:	2300      	movs	r3, #0
 800e25c:	221b      	movs	r2, #27
 800e25e:	a91e      	add	r1, sp, #120	; 0x78
 800e260:	1852      	adds	r2, r2, r1
 800e262:	2100      	movs	r1, #0
 800e264:	e430      	b.n	800dac8 <_svfprintf_r+0x310>
 800e266:	0022      	movs	r2, r4
 800e268:	ca08      	ldmia	r2!, {r3}
 800e26a:	0031      	movs	r1, r6
 800e26c:	920d      	str	r2, [sp, #52]	; 0x34
 800e26e:	2210      	movs	r2, #16
 800e270:	4011      	ands	r1, r2
 800e272:	4216      	tst	r6, r2
 800e274:	d002      	beq.n	800e27c <_svfprintf_r+0xac4>
 800e276:	9306      	str	r3, [sp, #24]
 800e278:	9007      	str	r0, [sp, #28]
 800e27a:	e7ec      	b.n	800e256 <_svfprintf_r+0xa9e>
 800e27c:	2240      	movs	r2, #64	; 0x40
 800e27e:	0030      	movs	r0, r6
 800e280:	4010      	ands	r0, r2
 800e282:	4216      	tst	r6, r2
 800e284:	d003      	beq.n	800e28e <_svfprintf_r+0xad6>
 800e286:	b29b      	uxth	r3, r3
 800e288:	9306      	str	r3, [sp, #24]
 800e28a:	9107      	str	r1, [sp, #28]
 800e28c:	e7e3      	b.n	800e256 <_svfprintf_r+0xa9e>
 800e28e:	2280      	movs	r2, #128	; 0x80
 800e290:	0031      	movs	r1, r6
 800e292:	0092      	lsls	r2, r2, #2
 800e294:	4011      	ands	r1, r2
 800e296:	4216      	tst	r6, r2
 800e298:	d0f6      	beq.n	800e288 <_svfprintf_r+0xad0>
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	e7eb      	b.n	800e276 <_svfprintf_r+0xabe>
 800e29e:	0023      	movs	r3, r4
 800e2a0:	cb04      	ldmia	r3!, {r2}
 800e2a2:	49b7      	ldr	r1, [pc, #732]	; (800e580 <_svfprintf_r+0xdc8>)
 800e2a4:	9206      	str	r2, [sp, #24]
 800e2a6:	aa25      	add	r2, sp, #148	; 0x94
 800e2a8:	8011      	strh	r1, [r2, #0]
 800e2aa:	4ab6      	ldr	r2, [pc, #728]	; (800e584 <_svfprintf_r+0xdcc>)
 800e2ac:	930d      	str	r3, [sp, #52]	; 0x34
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	921f      	str	r2, [sp, #124]	; 0x7c
 800e2b2:	2278      	movs	r2, #120	; 0x78
 800e2b4:	9307      	str	r3, [sp, #28]
 800e2b6:	3302      	adds	r3, #2
 800e2b8:	431e      	orrs	r6, r3
 800e2ba:	920f      	str	r2, [sp, #60]	; 0x3c
 800e2bc:	e7ce      	b.n	800e25c <_svfprintf_r+0xaa4>
 800e2be:	0023      	movs	r3, r4
 800e2c0:	cb04      	ldmia	r3!, {r2}
 800e2c2:	2400      	movs	r4, #0
 800e2c4:	930d      	str	r3, [sp, #52]	; 0x34
 800e2c6:	231b      	movs	r3, #27
 800e2c8:	9208      	str	r2, [sp, #32]
 800e2ca:	aa1e      	add	r2, sp, #120	; 0x78
 800e2cc:	189b      	adds	r3, r3, r2
 800e2ce:	701c      	strb	r4, [r3, #0]
 800e2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	d00e      	beq.n	800e2f4 <_svfprintf_r+0xb3c>
 800e2d6:	0021      	movs	r1, r4
 800e2d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2da:	9808      	ldr	r0, [sp, #32]
 800e2dc:	f002 f83a 	bl	8010354 <memchr>
 800e2e0:	900c      	str	r0, [sp, #48]	; 0x30
 800e2e2:	42a0      	cmp	r0, r4
 800e2e4:	d100      	bne.n	800e2e8 <_svfprintf_r+0xb30>
 800e2e6:	e10d      	b.n	800e504 <_svfprintf_r+0xd4c>
 800e2e8:	9a08      	ldr	r2, [sp, #32]
 800e2ea:	1a83      	subs	r3, r0, r2
 800e2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ee:	0023      	movs	r3, r4
 800e2f0:	940c      	str	r4, [sp, #48]	; 0x30
 800e2f2:	e44e      	b.n	800db92 <_svfprintf_r+0x3da>
 800e2f4:	9808      	ldr	r0, [sp, #32]
 800e2f6:	f7f1 ff05 	bl	8000104 <strlen>
 800e2fa:	9009      	str	r0, [sp, #36]	; 0x24
 800e2fc:	e7f7      	b.n	800e2ee <_svfprintf_r+0xb36>
 800e2fe:	2310      	movs	r3, #16
 800e300:	431e      	orrs	r6, r3
 800e302:	2320      	movs	r3, #32
 800e304:	0030      	movs	r0, r6
 800e306:	4018      	ands	r0, r3
 800e308:	421e      	tst	r6, r3
 800e30a:	d009      	beq.n	800e320 <_svfprintf_r+0xb68>
 800e30c:	3b19      	subs	r3, #25
 800e30e:	3407      	adds	r4, #7
 800e310:	439c      	bics	r4, r3
 800e312:	0022      	movs	r2, r4
 800e314:	ca18      	ldmia	r2!, {r3, r4}
 800e316:	9306      	str	r3, [sp, #24]
 800e318:	9407      	str	r4, [sp, #28]
 800e31a:	920d      	str	r2, [sp, #52]	; 0x34
 800e31c:	2301      	movs	r3, #1
 800e31e:	e79d      	b.n	800e25c <_svfprintf_r+0xaa4>
 800e320:	0023      	movs	r3, r4
 800e322:	cb04      	ldmia	r3!, {r2}
 800e324:	0031      	movs	r1, r6
 800e326:	930d      	str	r3, [sp, #52]	; 0x34
 800e328:	2310      	movs	r3, #16
 800e32a:	4019      	ands	r1, r3
 800e32c:	421e      	tst	r6, r3
 800e32e:	d003      	beq.n	800e338 <_svfprintf_r+0xb80>
 800e330:	9206      	str	r2, [sp, #24]
 800e332:	9007      	str	r0, [sp, #28]
 800e334:	3b0f      	subs	r3, #15
 800e336:	e791      	b.n	800e25c <_svfprintf_r+0xaa4>
 800e338:	2340      	movs	r3, #64	; 0x40
 800e33a:	0030      	movs	r0, r6
 800e33c:	4018      	ands	r0, r3
 800e33e:	421e      	tst	r6, r3
 800e340:	d003      	beq.n	800e34a <_svfprintf_r+0xb92>
 800e342:	b293      	uxth	r3, r2
 800e344:	9306      	str	r3, [sp, #24]
 800e346:	9107      	str	r1, [sp, #28]
 800e348:	e7e8      	b.n	800e31c <_svfprintf_r+0xb64>
 800e34a:	2380      	movs	r3, #128	; 0x80
 800e34c:	0031      	movs	r1, r6
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4019      	ands	r1, r3
 800e352:	421e      	tst	r6, r3
 800e354:	d003      	beq.n	800e35e <_svfprintf_r+0xba6>
 800e356:	b2d3      	uxtb	r3, r2
 800e358:	9306      	str	r3, [sp, #24]
 800e35a:	9007      	str	r0, [sp, #28]
 800e35c:	e7de      	b.n	800e31c <_svfprintf_r+0xb64>
 800e35e:	9206      	str	r2, [sp, #24]
 800e360:	e7f1      	b.n	800e346 <_svfprintf_r+0xb8e>
 800e362:	4b89      	ldr	r3, [pc, #548]	; (800e588 <_svfprintf_r+0xdd0>)
 800e364:	0030      	movs	r0, r6
 800e366:	931f      	str	r3, [sp, #124]	; 0x7c
 800e368:	2320      	movs	r3, #32
 800e36a:	4018      	ands	r0, r3
 800e36c:	421e      	tst	r6, r3
 800e36e:	d01a      	beq.n	800e3a6 <_svfprintf_r+0xbee>
 800e370:	3b19      	subs	r3, #25
 800e372:	3407      	adds	r4, #7
 800e374:	439c      	bics	r4, r3
 800e376:	0022      	movs	r2, r4
 800e378:	ca18      	ldmia	r2!, {r3, r4}
 800e37a:	9306      	str	r3, [sp, #24]
 800e37c:	9407      	str	r4, [sp, #28]
 800e37e:	920d      	str	r2, [sp, #52]	; 0x34
 800e380:	07f3      	lsls	r3, r6, #31
 800e382:	d50a      	bpl.n	800e39a <_svfprintf_r+0xbe2>
 800e384:	9b06      	ldr	r3, [sp, #24]
 800e386:	9a07      	ldr	r2, [sp, #28]
 800e388:	4313      	orrs	r3, r2
 800e38a:	d006      	beq.n	800e39a <_svfprintf_r+0xbe2>
 800e38c:	2230      	movs	r2, #48	; 0x30
 800e38e:	ab25      	add	r3, sp, #148	; 0x94
 800e390:	701a      	strb	r2, [r3, #0]
 800e392:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e394:	705a      	strb	r2, [r3, #1]
 800e396:	2302      	movs	r3, #2
 800e398:	431e      	orrs	r6, r3
 800e39a:	4b78      	ldr	r3, [pc, #480]	; (800e57c <_svfprintf_r+0xdc4>)
 800e39c:	401e      	ands	r6, r3
 800e39e:	2302      	movs	r3, #2
 800e3a0:	e75c      	b.n	800e25c <_svfprintf_r+0xaa4>
 800e3a2:	4b78      	ldr	r3, [pc, #480]	; (800e584 <_svfprintf_r+0xdcc>)
 800e3a4:	e7de      	b.n	800e364 <_svfprintf_r+0xbac>
 800e3a6:	0023      	movs	r3, r4
 800e3a8:	cb04      	ldmia	r3!, {r2}
 800e3aa:	0031      	movs	r1, r6
 800e3ac:	930d      	str	r3, [sp, #52]	; 0x34
 800e3ae:	2310      	movs	r3, #16
 800e3b0:	4019      	ands	r1, r3
 800e3b2:	421e      	tst	r6, r3
 800e3b4:	d002      	beq.n	800e3bc <_svfprintf_r+0xc04>
 800e3b6:	9206      	str	r2, [sp, #24]
 800e3b8:	9007      	str	r0, [sp, #28]
 800e3ba:	e7e1      	b.n	800e380 <_svfprintf_r+0xbc8>
 800e3bc:	2340      	movs	r3, #64	; 0x40
 800e3be:	0030      	movs	r0, r6
 800e3c0:	4018      	ands	r0, r3
 800e3c2:	421e      	tst	r6, r3
 800e3c4:	d003      	beq.n	800e3ce <_svfprintf_r+0xc16>
 800e3c6:	b293      	uxth	r3, r2
 800e3c8:	9306      	str	r3, [sp, #24]
 800e3ca:	9107      	str	r1, [sp, #28]
 800e3cc:	e7d8      	b.n	800e380 <_svfprintf_r+0xbc8>
 800e3ce:	2380      	movs	r3, #128	; 0x80
 800e3d0:	0031      	movs	r1, r6
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4019      	ands	r1, r3
 800e3d6:	421e      	tst	r6, r3
 800e3d8:	d002      	beq.n	800e3e0 <_svfprintf_r+0xc28>
 800e3da:	b2d3      	uxtb	r3, r2
 800e3dc:	9306      	str	r3, [sp, #24]
 800e3de:	e7eb      	b.n	800e3b8 <_svfprintf_r+0xc00>
 800e3e0:	9206      	str	r2, [sp, #24]
 800e3e2:	e7f2      	b.n	800e3ca <_svfprintf_r+0xc12>
 800e3e4:	9b07      	ldr	r3, [sp, #28]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d10a      	bne.n	800e400 <_svfprintf_r+0xc48>
 800e3ea:	9b06      	ldr	r3, [sp, #24]
 800e3ec:	2b09      	cmp	r3, #9
 800e3ee:	d807      	bhi.n	800e400 <_svfprintf_r+0xc48>
 800e3f0:	23e7      	movs	r3, #231	; 0xe7
 800e3f2:	aa1e      	add	r2, sp, #120	; 0x78
 800e3f4:	189b      	adds	r3, r3, r2
 800e3f6:	9a06      	ldr	r2, [sp, #24]
 800e3f8:	3230      	adds	r2, #48	; 0x30
 800e3fa:	701a      	strb	r2, [r3, #0]
 800e3fc:	f000 fc18 	bl	800ec30 <_svfprintf_r+0x1478>
 800e400:	2680      	movs	r6, #128	; 0x80
 800e402:	2300      	movs	r3, #0
 800e404:	00f6      	lsls	r6, r6, #3
 800e406:	930e      	str	r3, [sp, #56]	; 0x38
 800e408:	ad58      	add	r5, sp, #352	; 0x160
 800e40a:	4026      	ands	r6, r4
 800e40c:	220a      	movs	r2, #10
 800e40e:	9806      	ldr	r0, [sp, #24]
 800e410:	9907      	ldr	r1, [sp, #28]
 800e412:	2300      	movs	r3, #0
 800e414:	f7f2 f846 	bl	80004a4 <__aeabi_uldivmod>
 800e418:	1e6b      	subs	r3, r5, #1
 800e41a:	3230      	adds	r2, #48	; 0x30
 800e41c:	9308      	str	r3, [sp, #32]
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e422:	900c      	str	r0, [sp, #48]	; 0x30
 800e424:	3301      	adds	r3, #1
 800e426:	9110      	str	r1, [sp, #64]	; 0x40
 800e428:	930e      	str	r3, [sp, #56]	; 0x38
 800e42a:	2e00      	cmp	r6, #0
 800e42c:	d01d      	beq.n	800e46a <_svfprintf_r+0xcb2>
 800e42e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	429a      	cmp	r2, r3
 800e436:	d118      	bne.n	800e46a <_svfprintf_r+0xcb2>
 800e438:	2aff      	cmp	r2, #255	; 0xff
 800e43a:	d016      	beq.n	800e46a <_svfprintf_r+0xcb2>
 800e43c:	9b07      	ldr	r3, [sp, #28]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d102      	bne.n	800e448 <_svfprintf_r+0xc90>
 800e442:	9b06      	ldr	r3, [sp, #24]
 800e444:	2b09      	cmp	r3, #9
 800e446:	d910      	bls.n	800e46a <_svfprintf_r+0xcb2>
 800e448:	9b08      	ldr	r3, [sp, #32]
 800e44a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e44c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e44e:	1a9b      	subs	r3, r3, r2
 800e450:	0018      	movs	r0, r3
 800e452:	9308      	str	r3, [sp, #32]
 800e454:	f7fd ffd1 	bl	800c3fa <strncpy>
 800e458:	2200      	movs	r2, #0
 800e45a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e45c:	920e      	str	r2, [sp, #56]	; 0x38
 800e45e:	785b      	ldrb	r3, [r3, #1]
 800e460:	1e5a      	subs	r2, r3, #1
 800e462:	4193      	sbcs	r3, r2
 800e464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e466:	18d3      	adds	r3, r2, r3
 800e468:	9312      	str	r3, [sp, #72]	; 0x48
 800e46a:	9b07      	ldr	r3, [sp, #28]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d10f      	bne.n	800e490 <_svfprintf_r+0xcd8>
 800e470:	9b06      	ldr	r3, [sp, #24]
 800e472:	2b09      	cmp	r3, #9
 800e474:	d80c      	bhi.n	800e490 <_svfprintf_r+0xcd8>
 800e476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e478:	9a08      	ldr	r2, [sp, #32]
 800e47a:	9319      	str	r3, [sp, #100]	; 0x64
 800e47c:	ab58      	add	r3, sp, #352	; 0x160
 800e47e:	1a9b      	subs	r3, r3, r2
 800e480:	9309      	str	r3, [sp, #36]	; 0x24
 800e482:	2300      	movs	r3, #0
 800e484:	0026      	movs	r6, r4
 800e486:	930c      	str	r3, [sp, #48]	; 0x30
 800e488:	001d      	movs	r5, r3
 800e48a:	9310      	str	r3, [sp, #64]	; 0x40
 800e48c:	9311      	str	r3, [sp, #68]	; 0x44
 800e48e:	e4f2      	b.n	800de76 <_svfprintf_r+0x6be>
 800e490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e492:	9d08      	ldr	r5, [sp, #32]
 800e494:	9306      	str	r3, [sp, #24]
 800e496:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e498:	9307      	str	r3, [sp, #28]
 800e49a:	e7b7      	b.n	800e40c <_svfprintf_r+0xc54>
 800e49c:	200f      	movs	r0, #15
 800e49e:	ab58      	add	r3, sp, #352	; 0x160
 800e4a0:	9308      	str	r3, [sp, #32]
 800e4a2:	9b08      	ldr	r3, [sp, #32]
 800e4a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	9308      	str	r3, [sp, #32]
 800e4aa:	9b06      	ldr	r3, [sp, #24]
 800e4ac:	4003      	ands	r3, r0
 800e4ae:	5cd3      	ldrb	r3, [r2, r3]
 800e4b0:	9a08      	ldr	r2, [sp, #32]
 800e4b2:	7013      	strb	r3, [r2, #0]
 800e4b4:	9b07      	ldr	r3, [sp, #28]
 800e4b6:	0719      	lsls	r1, r3, #28
 800e4b8:	9b06      	ldr	r3, [sp, #24]
 800e4ba:	091a      	lsrs	r2, r3, #4
 800e4bc:	9b07      	ldr	r3, [sp, #28]
 800e4be:	4311      	orrs	r1, r2
 800e4c0:	091b      	lsrs	r3, r3, #4
 800e4c2:	9307      	str	r3, [sp, #28]
 800e4c4:	000b      	movs	r3, r1
 800e4c6:	9a07      	ldr	r2, [sp, #28]
 800e4c8:	9106      	str	r1, [sp, #24]
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	d1e9      	bne.n	800e4a2 <_svfprintf_r+0xcea>
 800e4ce:	e7d2      	b.n	800e476 <_svfprintf_r+0xcbe>
 800e4d0:	aa58      	add	r2, sp, #352	; 0x160
 800e4d2:	9208      	str	r2, [sp, #32]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1ce      	bne.n	800e476 <_svfprintf_r+0xcbe>
 800e4d8:	07f6      	lsls	r6, r6, #31
 800e4da:	d5cc      	bpl.n	800e476 <_svfprintf_r+0xcbe>
 800e4dc:	aa1e      	add	r2, sp, #120	; 0x78
 800e4de:	33e7      	adds	r3, #231	; 0xe7
 800e4e0:	189b      	adds	r3, r3, r2
 800e4e2:	2230      	movs	r2, #48	; 0x30
 800e4e4:	e789      	b.n	800e3fa <_svfprintf_r+0xc42>
 800e4e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d100      	bne.n	800e4ee <_svfprintf_r+0xd36>
 800e4ec:	e364      	b.n	800ebb8 <_svfprintf_r+0x1400>
 800e4ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4f0:	211b      	movs	r1, #27
 800e4f2:	ab3f      	add	r3, sp, #252	; 0xfc
 800e4f4:	701a      	strb	r2, [r3, #0]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	a81e      	add	r0, sp, #120	; 0x78
 800e4fa:	1809      	adds	r1, r1, r0
 800e4fc:	700a      	strb	r2, [r1, #0]
 800e4fe:	940d      	str	r4, [sp, #52]	; 0x34
 800e500:	f7ff fabd 	bl	800da7e <_svfprintf_r+0x2c6>
 800e504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e506:	f7ff fb44 	bl	800db92 <_svfprintf_r+0x3da>
 800e50a:	2010      	movs	r0, #16
 800e50c:	1812      	adds	r2, r2, r0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	922e      	str	r2, [sp, #184]	; 0xb8
 800e512:	932d      	str	r3, [sp, #180]	; 0xb4
 800e514:	2b07      	cmp	r3, #7
 800e516:	dd08      	ble.n	800e52a <_svfprintf_r+0xd72>
 800e518:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e51a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e51c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e51e:	f003 fa61 	bl	80119e4 <__ssprint_r>
 800e522:	2800      	cmp	r0, #0
 800e524:	d000      	beq.n	800e528 <_svfprintf_r+0xd70>
 800e526:	e326      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e528:	a92f      	add	r1, sp, #188	; 0xbc
 800e52a:	000f      	movs	r7, r1
 800e52c:	3c10      	subs	r4, #16
 800e52e:	e4c5      	b.n	800debc <_svfprintf_r+0x704>
 800e530:	2010      	movs	r0, #16
 800e532:	1812      	adds	r2, r2, r0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	922e      	str	r2, [sp, #184]	; 0xb8
 800e538:	932d      	str	r3, [sp, #180]	; 0xb4
 800e53a:	2b07      	cmp	r3, #7
 800e53c:	dd08      	ble.n	800e550 <_svfprintf_r+0xd98>
 800e53e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e540:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e542:	aa2c      	add	r2, sp, #176	; 0xb0
 800e544:	f003 fa4e 	bl	80119e4 <__ssprint_r>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d000      	beq.n	800e54e <_svfprintf_r+0xd96>
 800e54c:	e313      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e54e:	a92f      	add	r1, sp, #188	; 0xbc
 800e550:	000f      	movs	r7, r1
 800e552:	3c10      	subs	r4, #16
 800e554:	e50b      	b.n	800df6e <_svfprintf_r+0x7b6>
 800e556:	2010      	movs	r0, #16
 800e558:	1812      	adds	r2, r2, r0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e55e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e560:	2b07      	cmp	r3, #7
 800e562:	dd08      	ble.n	800e576 <_svfprintf_r+0xdbe>
 800e564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e566:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e568:	aa2c      	add	r2, sp, #176	; 0xb0
 800e56a:	f003 fa3b 	bl	80119e4 <__ssprint_r>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d000      	beq.n	800e574 <_svfprintf_r+0xdbc>
 800e572:	e300      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e574:	a92f      	add	r1, sp, #188	; 0xbc
 800e576:	000f      	movs	r7, r1
 800e578:	3c10      	subs	r4, #16
 800e57a:	e518      	b.n	800dfae <_svfprintf_r+0x7f6>
 800e57c:	fffffbff 	.word	0xfffffbff
 800e580:	00007830 	.word	0x00007830
 800e584:	08014c54 	.word	0x08014c54
 800e588:	08014c65 	.word	0x08014c65
 800e58c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e58e:	2b65      	cmp	r3, #101	; 0x65
 800e590:	dc00      	bgt.n	800e594 <_svfprintf_r+0xddc>
 800e592:	e241      	b.n	800ea18 <_svfprintf_r+0x1260>
 800e594:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e596:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e598:	2200      	movs	r2, #0
 800e59a:	2300      	movs	r3, #0
 800e59c:	f7f1 ff54 	bl	8000448 <__aeabi_dcmpeq>
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d077      	beq.n	800e694 <_svfprintf_r+0xedc>
 800e5a4:	4bca      	ldr	r3, [pc, #808]	; (800e8d0 <_svfprintf_r+0x1118>)
 800e5a6:	603b      	str	r3, [r7, #0]
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	607b      	str	r3, [r7, #4]
 800e5ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	932e      	str	r3, [sp, #184]	; 0xb8
 800e5b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5ba:	2b07      	cmp	r3, #7
 800e5bc:	dd08      	ble.n	800e5d0 <_svfprintf_r+0xe18>
 800e5be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5c2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5c4:	f003 fa0e 	bl	80119e4 <__ssprint_r>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d000      	beq.n	800e5ce <_svfprintf_r+0xe16>
 800e5cc:	e2d3      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e5ce:	af2f      	add	r7, sp, #188	; 0xbc
 800e5d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e5d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	db01      	blt.n	800e5dc <_svfprintf_r+0xe24>
 800e5d8:	07f3      	lsls	r3, r6, #31
 800e5da:	d51b      	bpl.n	800e614 <_svfprintf_r+0xe5c>
 800e5dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e5de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e5e0:	603b      	str	r3, [r7, #0]
 800e5e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e5e4:	607b      	str	r3, [r7, #4]
 800e5e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	189b      	adds	r3, r3, r2
 800e5ec:	932e      	str	r3, [sp, #184]	; 0xb8
 800e5ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5f4:	2b07      	cmp	r3, #7
 800e5f6:	dd08      	ble.n	800e60a <_svfprintf_r+0xe52>
 800e5f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5fc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5fe:	f003 f9f1 	bl	80119e4 <__ssprint_r>
 800e602:	2800      	cmp	r0, #0
 800e604:	d000      	beq.n	800e608 <_svfprintf_r+0xe50>
 800e606:	e2b6      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e608:	af2f      	add	r7, sp, #188	; 0xbc
 800e60a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e60c:	2510      	movs	r5, #16
 800e60e:	1e5c      	subs	r4, r3, #1
 800e610:	2c00      	cmp	r4, #0
 800e612:	dc2e      	bgt.n	800e672 <_svfprintf_r+0xeba>
 800e614:	0776      	lsls	r6, r6, #29
 800e616:	d500      	bpl.n	800e61a <_svfprintf_r+0xe62>
 800e618:	e290      	b.n	800eb3c <_svfprintf_r+0x1384>
 800e61a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e61c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e61e:	4293      	cmp	r3, r2
 800e620:	da00      	bge.n	800e624 <_svfprintf_r+0xe6c>
 800e622:	0013      	movs	r3, r2
 800e624:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e626:	18d3      	adds	r3, r2, r3
 800e628:	9317      	str	r3, [sp, #92]	; 0x5c
 800e62a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d007      	beq.n	800e640 <_svfprintf_r+0xe88>
 800e630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e632:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e634:	aa2c      	add	r2, sp, #176	; 0xb0
 800e636:	f003 f9d5 	bl	80119e4 <__ssprint_r>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d000      	beq.n	800e640 <_svfprintf_r+0xe88>
 800e63e:	e29a      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e640:	2300      	movs	r3, #0
 800e642:	932d      	str	r3, [sp, #180]	; 0xb4
 800e644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e646:	2b00      	cmp	r3, #0
 800e648:	d000      	beq.n	800e64c <_svfprintf_r+0xe94>
 800e64a:	e2b0      	b.n	800ebae <_svfprintf_r+0x13f6>
 800e64c:	af2f      	add	r7, sp, #188	; 0xbc
 800e64e:	e5dc      	b.n	800e20a <_svfprintf_r+0xa52>
 800e650:	3210      	adds	r2, #16
 800e652:	607d      	str	r5, [r7, #4]
 800e654:	922e      	str	r2, [sp, #184]	; 0xb8
 800e656:	932d      	str	r3, [sp, #180]	; 0xb4
 800e658:	2b07      	cmp	r3, #7
 800e65a:	dd08      	ble.n	800e66e <_svfprintf_r+0xeb6>
 800e65c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e65e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e660:	aa2c      	add	r2, sp, #176	; 0xb0
 800e662:	f003 f9bf 	bl	80119e4 <__ssprint_r>
 800e666:	2800      	cmp	r0, #0
 800e668:	d000      	beq.n	800e66c <_svfprintf_r+0xeb4>
 800e66a:	e284      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e66c:	a92f      	add	r1, sp, #188	; 0xbc
 800e66e:	000f      	movs	r7, r1
 800e670:	3c10      	subs	r4, #16
 800e672:	0039      	movs	r1, r7
 800e674:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e676:	4897      	ldr	r0, [pc, #604]	; (800e8d4 <_svfprintf_r+0x111c>)
 800e678:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e67a:	3301      	adds	r3, #1
 800e67c:	3108      	adds	r1, #8
 800e67e:	6038      	str	r0, [r7, #0]
 800e680:	2c10      	cmp	r4, #16
 800e682:	dce5      	bgt.n	800e650 <_svfprintf_r+0xe98>
 800e684:	607c      	str	r4, [r7, #4]
 800e686:	18a4      	adds	r4, r4, r2
 800e688:	942e      	str	r4, [sp, #184]	; 0xb8
 800e68a:	000f      	movs	r7, r1
 800e68c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e68e:	2b07      	cmp	r3, #7
 800e690:	ddc0      	ble.n	800e614 <_svfprintf_r+0xe5c>
 800e692:	e05f      	b.n	800e754 <_svfprintf_r+0xf9c>
 800e694:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e696:	2b00      	cmp	r3, #0
 800e698:	dc78      	bgt.n	800e78c <_svfprintf_r+0xfd4>
 800e69a:	4b8d      	ldr	r3, [pc, #564]	; (800e8d0 <_svfprintf_r+0x1118>)
 800e69c:	603b      	str	r3, [r7, #0]
 800e69e:	2301      	movs	r3, #1
 800e6a0:	607b      	str	r3, [r7, #4]
 800e6a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e6a4:	3708      	adds	r7, #8
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	932e      	str	r3, [sp, #184]	; 0xb8
 800e6aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6b0:	2b07      	cmp	r3, #7
 800e6b2:	dd08      	ble.n	800e6c6 <_svfprintf_r+0xf0e>
 800e6b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6ba:	f003 f993 	bl	80119e4 <__ssprint_r>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d000      	beq.n	800e6c4 <_svfprintf_r+0xf0c>
 800e6c2:	e258      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e6c4:	af2f      	add	r7, sp, #188	; 0xbc
 800e6c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e6c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e6ca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e6cc:	430b      	orrs	r3, r1
 800e6ce:	2101      	movs	r1, #1
 800e6d0:	4031      	ands	r1, r6
 800e6d2:	430b      	orrs	r3, r1
 800e6d4:	d09e      	beq.n	800e614 <_svfprintf_r+0xe5c>
 800e6d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e6d8:	603b      	str	r3, [r7, #0]
 800e6da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e6dc:	607b      	str	r3, [r7, #4]
 800e6de:	189a      	adds	r2, r3, r2
 800e6e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e6e2:	922e      	str	r2, [sp, #184]	; 0xb8
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	2b07      	cmp	r3, #7
 800e6ec:	dd08      	ble.n	800e700 <_svfprintf_r+0xf48>
 800e6ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6f2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6f4:	f003 f976 	bl	80119e4 <__ssprint_r>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d000      	beq.n	800e6fe <_svfprintf_r+0xf46>
 800e6fc:	e23b      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e6fe:	af2f      	add	r7, sp, #188	; 0xbc
 800e700:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e702:	2c00      	cmp	r4, #0
 800e704:	da19      	bge.n	800e73a <_svfprintf_r+0xf82>
 800e706:	0038      	movs	r0, r7
 800e708:	2510      	movs	r5, #16
 800e70a:	4264      	negs	r4, r4
 800e70c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e70e:	4a71      	ldr	r2, [pc, #452]	; (800e8d4 <_svfprintf_r+0x111c>)
 800e710:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e712:	3101      	adds	r1, #1
 800e714:	3708      	adds	r7, #8
 800e716:	6002      	str	r2, [r0, #0]
 800e718:	2c10      	cmp	r4, #16
 800e71a:	dc25      	bgt.n	800e768 <_svfprintf_r+0xfb0>
 800e71c:	6044      	str	r4, [r0, #4]
 800e71e:	18e4      	adds	r4, r4, r3
 800e720:	942e      	str	r4, [sp, #184]	; 0xb8
 800e722:	912d      	str	r1, [sp, #180]	; 0xb4
 800e724:	2907      	cmp	r1, #7
 800e726:	dd08      	ble.n	800e73a <_svfprintf_r+0xf82>
 800e728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e72a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e72c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e72e:	f003 f959 	bl	80119e4 <__ssprint_r>
 800e732:	2800      	cmp	r0, #0
 800e734:	d000      	beq.n	800e738 <_svfprintf_r+0xf80>
 800e736:	e21e      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e738:	af2f      	add	r7, sp, #188	; 0xbc
 800e73a:	9b08      	ldr	r3, [sp, #32]
 800e73c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e73e:	603b      	str	r3, [r7, #0]
 800e740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e742:	18d2      	adds	r2, r2, r3
 800e744:	922e      	str	r2, [sp, #184]	; 0xb8
 800e746:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e748:	607b      	str	r3, [r7, #4]
 800e74a:	3201      	adds	r2, #1
 800e74c:	922d      	str	r2, [sp, #180]	; 0xb4
 800e74e:	2a07      	cmp	r2, #7
 800e750:	dc00      	bgt.n	800e754 <_svfprintf_r+0xf9c>
 800e752:	e45b      	b.n	800e00c <_svfprintf_r+0x854>
 800e754:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e756:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e758:	aa2c      	add	r2, sp, #176	; 0xb0
 800e75a:	f003 f943 	bl	80119e4 <__ssprint_r>
 800e75e:	2800      	cmp	r0, #0
 800e760:	d000      	beq.n	800e764 <_svfprintf_r+0xfac>
 800e762:	e208      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e764:	af2f      	add	r7, sp, #188	; 0xbc
 800e766:	e755      	b.n	800e614 <_svfprintf_r+0xe5c>
 800e768:	3310      	adds	r3, #16
 800e76a:	6045      	str	r5, [r0, #4]
 800e76c:	932e      	str	r3, [sp, #184]	; 0xb8
 800e76e:	912d      	str	r1, [sp, #180]	; 0xb4
 800e770:	2907      	cmp	r1, #7
 800e772:	dd08      	ble.n	800e786 <_svfprintf_r+0xfce>
 800e774:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e776:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e778:	aa2c      	add	r2, sp, #176	; 0xb0
 800e77a:	f003 f933 	bl	80119e4 <__ssprint_r>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d000      	beq.n	800e784 <_svfprintf_r+0xfcc>
 800e782:	e1f8      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e784:	af2f      	add	r7, sp, #188	; 0xbc
 800e786:	0038      	movs	r0, r7
 800e788:	3c10      	subs	r4, #16
 800e78a:	e7bf      	b.n	800e70c <_svfprintf_r+0xf54>
 800e78c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e78e:	002c      	movs	r4, r5
 800e790:	429d      	cmp	r5, r3
 800e792:	dd00      	ble.n	800e796 <_svfprintf_r+0xfde>
 800e794:	001c      	movs	r4, r3
 800e796:	2c00      	cmp	r4, #0
 800e798:	dd14      	ble.n	800e7c4 <_svfprintf_r+0x100c>
 800e79a:	9b08      	ldr	r3, [sp, #32]
 800e79c:	607c      	str	r4, [r7, #4]
 800e79e:	603b      	str	r3, [r7, #0]
 800e7a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	18e3      	adds	r3, r4, r3
 800e7a6:	932e      	str	r3, [sp, #184]	; 0xb8
 800e7a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7ae:	2b07      	cmp	r3, #7
 800e7b0:	dd08      	ble.n	800e7c4 <_svfprintf_r+0x100c>
 800e7b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7b6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7b8:	f003 f914 	bl	80119e4 <__ssprint_r>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d000      	beq.n	800e7c2 <_svfprintf_r+0x100a>
 800e7c0:	e1d9      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e7c2:	af2f      	add	r7, sp, #188	; 0xbc
 800e7c4:	43e3      	mvns	r3, r4
 800e7c6:	17db      	asrs	r3, r3, #31
 800e7c8:	401c      	ands	r4, r3
 800e7ca:	1b2c      	subs	r4, r5, r4
 800e7cc:	2c00      	cmp	r4, #0
 800e7ce:	dd18      	ble.n	800e802 <_svfprintf_r+0x104a>
 800e7d0:	0039      	movs	r1, r7
 800e7d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7d4:	483f      	ldr	r0, [pc, #252]	; (800e8d4 <_svfprintf_r+0x111c>)
 800e7d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e7d8:	3301      	adds	r3, #1
 800e7da:	3108      	adds	r1, #8
 800e7dc:	6038      	str	r0, [r7, #0]
 800e7de:	2c10      	cmp	r4, #16
 800e7e0:	dc7a      	bgt.n	800e8d8 <_svfprintf_r+0x1120>
 800e7e2:	607c      	str	r4, [r7, #4]
 800e7e4:	18a4      	adds	r4, r4, r2
 800e7e6:	000f      	movs	r7, r1
 800e7e8:	942e      	str	r4, [sp, #184]	; 0xb8
 800e7ea:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7ec:	2b07      	cmp	r3, #7
 800e7ee:	dd08      	ble.n	800e802 <_svfprintf_r+0x104a>
 800e7f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7f4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7f6:	f003 f8f5 	bl	80119e4 <__ssprint_r>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d000      	beq.n	800e800 <_svfprintf_r+0x1048>
 800e7fe:	e1ba      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e800:	af2f      	add	r7, sp, #188	; 0xbc
 800e802:	9b08      	ldr	r3, [sp, #32]
 800e804:	195d      	adds	r5, r3, r5
 800e806:	0573      	lsls	r3, r6, #21
 800e808:	d50b      	bpl.n	800e822 <_svfprintf_r+0x106a>
 800e80a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d176      	bne.n	800e8fe <_svfprintf_r+0x1146>
 800e810:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e812:	2b00      	cmp	r3, #0
 800e814:	d176      	bne.n	800e904 <_svfprintf_r+0x114c>
 800e816:	9b08      	ldr	r3, [sp, #32]
 800e818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e81a:	189b      	adds	r3, r3, r2
 800e81c:	429d      	cmp	r5, r3
 800e81e:	d900      	bls.n	800e822 <_svfprintf_r+0x106a>
 800e820:	001d      	movs	r5, r3
 800e822:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e824:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e826:	4293      	cmp	r3, r2
 800e828:	db01      	blt.n	800e82e <_svfprintf_r+0x1076>
 800e82a:	07f3      	lsls	r3, r6, #31
 800e82c:	d516      	bpl.n	800e85c <_svfprintf_r+0x10a4>
 800e82e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e830:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e832:	603b      	str	r3, [r7, #0]
 800e834:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e836:	607b      	str	r3, [r7, #4]
 800e838:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e83a:	3708      	adds	r7, #8
 800e83c:	189b      	adds	r3, r3, r2
 800e83e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e840:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e842:	3301      	adds	r3, #1
 800e844:	932d      	str	r3, [sp, #180]	; 0xb4
 800e846:	2b07      	cmp	r3, #7
 800e848:	dd08      	ble.n	800e85c <_svfprintf_r+0x10a4>
 800e84a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e84c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e84e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e850:	f003 f8c8 	bl	80119e4 <__ssprint_r>
 800e854:	2800      	cmp	r0, #0
 800e856:	d000      	beq.n	800e85a <_svfprintf_r+0x10a2>
 800e858:	e18d      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e85a:	af2f      	add	r7, sp, #188	; 0xbc
 800e85c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e85e:	9b08      	ldr	r3, [sp, #32]
 800e860:	4694      	mov	ip, r2
 800e862:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e864:	4463      	add	r3, ip
 800e866:	1b5b      	subs	r3, r3, r5
 800e868:	1b14      	subs	r4, r2, r4
 800e86a:	429c      	cmp	r4, r3
 800e86c:	dd00      	ble.n	800e870 <_svfprintf_r+0x10b8>
 800e86e:	001c      	movs	r4, r3
 800e870:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e872:	2c00      	cmp	r4, #0
 800e874:	dd12      	ble.n	800e89c <_svfprintf_r+0x10e4>
 800e876:	18e3      	adds	r3, r4, r3
 800e878:	932e      	str	r3, [sp, #184]	; 0xb8
 800e87a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e87c:	603d      	str	r5, [r7, #0]
 800e87e:	3301      	adds	r3, #1
 800e880:	607c      	str	r4, [r7, #4]
 800e882:	932d      	str	r3, [sp, #180]	; 0xb4
 800e884:	3708      	adds	r7, #8
 800e886:	2b07      	cmp	r3, #7
 800e888:	dd08      	ble.n	800e89c <_svfprintf_r+0x10e4>
 800e88a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e88c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e88e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e890:	f003 f8a8 	bl	80119e4 <__ssprint_r>
 800e894:	2800      	cmp	r0, #0
 800e896:	d000      	beq.n	800e89a <_svfprintf_r+0x10e2>
 800e898:	e16d      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e89a:	af2f      	add	r7, sp, #188	; 0xbc
 800e89c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e89e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e8a0:	2510      	movs	r5, #16
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	43e2      	mvns	r2, r4
 800e8a6:	17d2      	asrs	r2, r2, #31
 800e8a8:	4014      	ands	r4, r2
 800e8aa:	1b1c      	subs	r4, r3, r4
 800e8ac:	2c00      	cmp	r4, #0
 800e8ae:	dc00      	bgt.n	800e8b2 <_svfprintf_r+0x10fa>
 800e8b0:	e6b0      	b.n	800e614 <_svfprintf_r+0xe5c>
 800e8b2:	0039      	movs	r1, r7
 800e8b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8b6:	4807      	ldr	r0, [pc, #28]	; (800e8d4 <_svfprintf_r+0x111c>)
 800e8b8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	3108      	adds	r1, #8
 800e8be:	6038      	str	r0, [r7, #0]
 800e8c0:	2c10      	cmp	r4, #16
 800e8c2:	dd00      	ble.n	800e8c6 <_svfprintf_r+0x110e>
 800e8c4:	e096      	b.n	800e9f4 <_svfprintf_r+0x123c>
 800e8c6:	1912      	adds	r2, r2, r4
 800e8c8:	607c      	str	r4, [r7, #4]
 800e8ca:	922e      	str	r2, [sp, #184]	; 0xb8
 800e8cc:	e6dd      	b.n	800e68a <_svfprintf_r+0xed2>
 800e8ce:	46c0      	nop			; (mov r8, r8)
 800e8d0:	08014c76 	.word	0x08014c76
 800e8d4:	08014c88 	.word	0x08014c88
 800e8d8:	2010      	movs	r0, #16
 800e8da:	1812      	adds	r2, r2, r0
 800e8dc:	6078      	str	r0, [r7, #4]
 800e8de:	922e      	str	r2, [sp, #184]	; 0xb8
 800e8e0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8e2:	2b07      	cmp	r3, #7
 800e8e4:	dd08      	ble.n	800e8f8 <_svfprintf_r+0x1140>
 800e8e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8ea:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8ec:	f003 f87a 	bl	80119e4 <__ssprint_r>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d000      	beq.n	800e8f6 <_svfprintf_r+0x113e>
 800e8f4:	e13f      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e8f6:	a92f      	add	r1, sp, #188	; 0xbc
 800e8f8:	000f      	movs	r7, r1
 800e8fa:	3c10      	subs	r4, #16
 800e8fc:	e768      	b.n	800e7d0 <_svfprintf_r+0x1018>
 800e8fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e900:	2b00      	cmp	r3, #0
 800e902:	d05d      	beq.n	800e9c0 <_svfprintf_r+0x1208>
 800e904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e906:	3b01      	subs	r3, #1
 800e908:	9310      	str	r3, [sp, #64]	; 0x40
 800e90a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e90c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e90e:	603b      	str	r3, [r7, #0]
 800e910:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e912:	607b      	str	r3, [r7, #4]
 800e914:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e916:	3708      	adds	r7, #8
 800e918:	189b      	adds	r3, r3, r2
 800e91a:	932e      	str	r3, [sp, #184]	; 0xb8
 800e91c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e91e:	3301      	adds	r3, #1
 800e920:	932d      	str	r3, [sp, #180]	; 0xb4
 800e922:	2b07      	cmp	r3, #7
 800e924:	dd08      	ble.n	800e938 <_svfprintf_r+0x1180>
 800e926:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e928:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e92a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e92c:	f003 f85a 	bl	80119e4 <__ssprint_r>
 800e930:	2800      	cmp	r0, #0
 800e932:	d000      	beq.n	800e936 <_svfprintf_r+0x117e>
 800e934:	e11f      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e936:	af2f      	add	r7, sp, #188	; 0xbc
 800e938:	9b08      	ldr	r3, [sp, #32]
 800e93a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e93c:	189c      	adds	r4, r3, r2
 800e93e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e940:	1b64      	subs	r4, r4, r5
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	429c      	cmp	r4, r3
 800e946:	dd00      	ble.n	800e94a <_svfprintf_r+0x1192>
 800e948:	001c      	movs	r4, r3
 800e94a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e94c:	2c00      	cmp	r4, #0
 800e94e:	dd12      	ble.n	800e976 <_svfprintf_r+0x11be>
 800e950:	18e3      	adds	r3, r4, r3
 800e952:	932e      	str	r3, [sp, #184]	; 0xb8
 800e954:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e956:	603d      	str	r5, [r7, #0]
 800e958:	3301      	adds	r3, #1
 800e95a:	607c      	str	r4, [r7, #4]
 800e95c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e95e:	3708      	adds	r7, #8
 800e960:	2b07      	cmp	r3, #7
 800e962:	dd08      	ble.n	800e976 <_svfprintf_r+0x11be>
 800e964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e966:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e968:	aa2c      	add	r2, sp, #176	; 0xb0
 800e96a:	f003 f83b 	bl	80119e4 <__ssprint_r>
 800e96e:	2800      	cmp	r0, #0
 800e970:	d000      	beq.n	800e974 <_svfprintf_r+0x11bc>
 800e972:	e100      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e974:	af2f      	add	r7, sp, #188	; 0xbc
 800e976:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e978:	781a      	ldrb	r2, [r3, #0]
 800e97a:	43e3      	mvns	r3, r4
 800e97c:	17db      	asrs	r3, r3, #31
 800e97e:	401c      	ands	r4, r3
 800e980:	1b14      	subs	r4, r2, r4
 800e982:	2c00      	cmp	r4, #0
 800e984:	dd18      	ble.n	800e9b8 <_svfprintf_r+0x1200>
 800e986:	0039      	movs	r1, r7
 800e988:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e98a:	48aa      	ldr	r0, [pc, #680]	; (800ec34 <_svfprintf_r+0x147c>)
 800e98c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e98e:	3301      	adds	r3, #1
 800e990:	3108      	adds	r1, #8
 800e992:	6038      	str	r0, [r7, #0]
 800e994:	2c10      	cmp	r4, #16
 800e996:	dc1a      	bgt.n	800e9ce <_svfprintf_r+0x1216>
 800e998:	1912      	adds	r2, r2, r4
 800e99a:	607c      	str	r4, [r7, #4]
 800e99c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e99e:	000f      	movs	r7, r1
 800e9a0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9a2:	2b07      	cmp	r3, #7
 800e9a4:	dd08      	ble.n	800e9b8 <_svfprintf_r+0x1200>
 800e9a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9ac:	f003 f81a 	bl	80119e4 <__ssprint_r>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d000      	beq.n	800e9b6 <_svfprintf_r+0x11fe>
 800e9b4:	e0df      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e9b6:	af2f      	add	r7, sp, #188	; 0xbc
 800e9b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	18ed      	adds	r5, r5, r3
 800e9be:	e724      	b.n	800e80a <_svfprintf_r+0x1052>
 800e9c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	9312      	str	r3, [sp, #72]	; 0x48
 800e9c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	9311      	str	r3, [sp, #68]	; 0x44
 800e9cc:	e79d      	b.n	800e90a <_svfprintf_r+0x1152>
 800e9ce:	2010      	movs	r0, #16
 800e9d0:	1812      	adds	r2, r2, r0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9d8:	2b07      	cmp	r3, #7
 800e9da:	dd08      	ble.n	800e9ee <_svfprintf_r+0x1236>
 800e9dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9e0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9e2:	f002 ffff 	bl	80119e4 <__ssprint_r>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	d000      	beq.n	800e9ec <_svfprintf_r+0x1234>
 800e9ea:	e0c4      	b.n	800eb76 <_svfprintf_r+0x13be>
 800e9ec:	a92f      	add	r1, sp, #188	; 0xbc
 800e9ee:	000f      	movs	r7, r1
 800e9f0:	3c10      	subs	r4, #16
 800e9f2:	e7c8      	b.n	800e986 <_svfprintf_r+0x11ce>
 800e9f4:	3210      	adds	r2, #16
 800e9f6:	607d      	str	r5, [r7, #4]
 800e9f8:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9fc:	2b07      	cmp	r3, #7
 800e9fe:	dd08      	ble.n	800ea12 <_svfprintf_r+0x125a>
 800ea00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea04:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea06:	f002 ffed 	bl	80119e4 <__ssprint_r>
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	d000      	beq.n	800ea10 <_svfprintf_r+0x1258>
 800ea0e:	e0b2      	b.n	800eb76 <_svfprintf_r+0x13be>
 800ea10:	a92f      	add	r1, sp, #188	; 0xbc
 800ea12:	000f      	movs	r7, r1
 800ea14:	3c10      	subs	r4, #16
 800ea16:	e74c      	b.n	800e8b2 <_svfprintf_r+0x10fa>
 800ea18:	003c      	movs	r4, r7
 800ea1a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ea1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea20:	3101      	adds	r1, #1
 800ea22:	3301      	adds	r3, #1
 800ea24:	3408      	adds	r4, #8
 800ea26:	2a01      	cmp	r2, #1
 800ea28:	dc03      	bgt.n	800ea32 <_svfprintf_r+0x127a>
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	4216      	tst	r6, r2
 800ea2e:	d100      	bne.n	800ea32 <_svfprintf_r+0x127a>
 800ea30:	e07f      	b.n	800eb32 <_svfprintf_r+0x137a>
 800ea32:	9a08      	ldr	r2, [sp, #32]
 800ea34:	912e      	str	r1, [sp, #184]	; 0xb8
 800ea36:	603a      	str	r2, [r7, #0]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea3c:	607a      	str	r2, [r7, #4]
 800ea3e:	2b07      	cmp	r3, #7
 800ea40:	dd08      	ble.n	800ea54 <_svfprintf_r+0x129c>
 800ea42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea44:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea46:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea48:	f002 ffcc 	bl	80119e4 <__ssprint_r>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d000      	beq.n	800ea52 <_svfprintf_r+0x129a>
 800ea50:	e091      	b.n	800eb76 <_svfprintf_r+0x13be>
 800ea52:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea54:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ea56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea58:	6023      	str	r3, [r4, #0]
 800ea5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea5c:	6063      	str	r3, [r4, #4]
 800ea5e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea60:	3408      	adds	r4, #8
 800ea62:	189b      	adds	r3, r3, r2
 800ea64:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea68:	3301      	adds	r3, #1
 800ea6a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea6c:	2b07      	cmp	r3, #7
 800ea6e:	dd07      	ble.n	800ea80 <_svfprintf_r+0x12c8>
 800ea70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea74:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea76:	f002 ffb5 	bl	80119e4 <__ssprint_r>
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	d17b      	bne.n	800eb76 <_svfprintf_r+0x13be>
 800ea7e:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea82:	2200      	movs	r2, #0
 800ea84:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ea86:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ea88:	9309      	str	r3, [sp, #36]	; 0x24
 800ea8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea8c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800ea8e:	1e5d      	subs	r5, r3, #1
 800ea90:	2300      	movs	r3, #0
 800ea92:	f7f1 fcd9 	bl	8000448 <__aeabi_dcmpeq>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	d126      	bne.n	800eae8 <_svfprintf_r+0x1330>
 800ea9a:	9b08      	ldr	r3, [sp, #32]
 800ea9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eaa2:	6023      	str	r3, [r4, #0]
 800eaa4:	1e7b      	subs	r3, r7, #1
 800eaa6:	3201      	adds	r2, #1
 800eaa8:	185b      	adds	r3, r3, r1
 800eaaa:	6065      	str	r5, [r4, #4]
 800eaac:	932e      	str	r3, [sp, #184]	; 0xb8
 800eaae:	922d      	str	r2, [sp, #180]	; 0xb4
 800eab0:	3408      	adds	r4, #8
 800eab2:	2a07      	cmp	r2, #7
 800eab4:	dd07      	ble.n	800eac6 <_svfprintf_r+0x130e>
 800eab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eab8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eaba:	aa2c      	add	r2, sp, #176	; 0xb0
 800eabc:	f002 ff92 	bl	80119e4 <__ssprint_r>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d158      	bne.n	800eb76 <_svfprintf_r+0x13be>
 800eac4:	ac2f      	add	r4, sp, #188	; 0xbc
 800eac6:	ab28      	add	r3, sp, #160	; 0xa0
 800eac8:	6023      	str	r3, [r4, #0]
 800eaca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eacc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eace:	6063      	str	r3, [r4, #4]
 800ead0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ead2:	189b      	adds	r3, r3, r2
 800ead4:	932e      	str	r3, [sp, #184]	; 0xb8
 800ead6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ead8:	3301      	adds	r3, #1
 800eada:	932d      	str	r3, [sp, #180]	; 0xb4
 800eadc:	2b07      	cmp	r3, #7
 800eade:	dd00      	ble.n	800eae2 <_svfprintf_r+0x132a>
 800eae0:	e638      	b.n	800e754 <_svfprintf_r+0xf9c>
 800eae2:	3408      	adds	r4, #8
 800eae4:	0027      	movs	r7, r4
 800eae6:	e595      	b.n	800e614 <_svfprintf_r+0xe5c>
 800eae8:	2710      	movs	r7, #16
 800eaea:	2d00      	cmp	r5, #0
 800eaec:	ddeb      	ble.n	800eac6 <_svfprintf_r+0x130e>
 800eaee:	0021      	movs	r1, r4
 800eaf0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eaf2:	4850      	ldr	r0, [pc, #320]	; (800ec34 <_svfprintf_r+0x147c>)
 800eaf4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	3108      	adds	r1, #8
 800eafa:	6020      	str	r0, [r4, #0]
 800eafc:	2d10      	cmp	r5, #16
 800eafe:	dc07      	bgt.n	800eb10 <_svfprintf_r+0x1358>
 800eb00:	6065      	str	r5, [r4, #4]
 800eb02:	000c      	movs	r4, r1
 800eb04:	18ad      	adds	r5, r5, r2
 800eb06:	952e      	str	r5, [sp, #184]	; 0xb8
 800eb08:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb0a:	2b07      	cmp	r3, #7
 800eb0c:	dddb      	ble.n	800eac6 <_svfprintf_r+0x130e>
 800eb0e:	e7d2      	b.n	800eab6 <_svfprintf_r+0x12fe>
 800eb10:	3210      	adds	r2, #16
 800eb12:	6067      	str	r7, [r4, #4]
 800eb14:	922e      	str	r2, [sp, #184]	; 0xb8
 800eb16:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb18:	2b07      	cmp	r3, #7
 800eb1a:	dd07      	ble.n	800eb2c <_svfprintf_r+0x1374>
 800eb1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb20:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb22:	f002 ff5f 	bl	80119e4 <__ssprint_r>
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d125      	bne.n	800eb76 <_svfprintf_r+0x13be>
 800eb2a:	a92f      	add	r1, sp, #188	; 0xbc
 800eb2c:	000c      	movs	r4, r1
 800eb2e:	3d10      	subs	r5, #16
 800eb30:	e7dd      	b.n	800eaee <_svfprintf_r+0x1336>
 800eb32:	9808      	ldr	r0, [sp, #32]
 800eb34:	912e      	str	r1, [sp, #184]	; 0xb8
 800eb36:	c705      	stmia	r7!, {r0, r2}
 800eb38:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb3a:	e7e6      	b.n	800eb0a <_svfprintf_r+0x1352>
 800eb3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eb3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eb40:	2510      	movs	r5, #16
 800eb42:	1a9c      	subs	r4, r3, r2
 800eb44:	2c00      	cmp	r4, #0
 800eb46:	dc00      	bgt.n	800eb4a <_svfprintf_r+0x1392>
 800eb48:	e567      	b.n	800e61a <_svfprintf_r+0xe62>
 800eb4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb4c:	493a      	ldr	r1, [pc, #232]	; (800ec38 <_svfprintf_r+0x1480>)
 800eb4e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eb50:	3301      	adds	r3, #1
 800eb52:	6039      	str	r1, [r7, #0]
 800eb54:	2c10      	cmp	r4, #16
 800eb56:	dc19      	bgt.n	800eb8c <_svfprintf_r+0x13d4>
 800eb58:	607c      	str	r4, [r7, #4]
 800eb5a:	18a4      	adds	r4, r4, r2
 800eb5c:	942e      	str	r4, [sp, #184]	; 0xb8
 800eb5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb60:	2b07      	cmp	r3, #7
 800eb62:	dc00      	bgt.n	800eb66 <_svfprintf_r+0x13ae>
 800eb64:	e559      	b.n	800e61a <_svfprintf_r+0xe62>
 800eb66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb6a:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb6c:	f002 ff3a 	bl	80119e4 <__ssprint_r>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	d100      	bne.n	800eb76 <_svfprintf_r+0x13be>
 800eb74:	e551      	b.n	800e61a <_svfprintf_r+0xe62>
 800eb76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d101      	bne.n	800eb80 <_svfprintf_r+0x13c8>
 800eb7c:	f7ff f845 	bl	800dc0a <_svfprintf_r+0x452>
 800eb80:	0019      	movs	r1, r3
 800eb82:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb84:	f7fd fd80 	bl	800c688 <_free_r>
 800eb88:	f7ff f83f 	bl	800dc0a <_svfprintf_r+0x452>
 800eb8c:	3210      	adds	r2, #16
 800eb8e:	607d      	str	r5, [r7, #4]
 800eb90:	922e      	str	r2, [sp, #184]	; 0xb8
 800eb92:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb94:	3708      	adds	r7, #8
 800eb96:	2b07      	cmp	r3, #7
 800eb98:	dd07      	ble.n	800ebaa <_svfprintf_r+0x13f2>
 800eb9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb9e:	aa2c      	add	r2, sp, #176	; 0xb0
 800eba0:	f002 ff20 	bl	80119e4 <__ssprint_r>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d1e6      	bne.n	800eb76 <_svfprintf_r+0x13be>
 800eba8:	af2f      	add	r7, sp, #188	; 0xbc
 800ebaa:	3c10      	subs	r4, #16
 800ebac:	e7cd      	b.n	800eb4a <_svfprintf_r+0x1392>
 800ebae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ebb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ebb2:	f7fd fd69 	bl	800c688 <_free_r>
 800ebb6:	e549      	b.n	800e64c <_svfprintf_r+0xe94>
 800ebb8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d101      	bne.n	800ebc2 <_svfprintf_r+0x140a>
 800ebbe:	f7ff f824 	bl	800dc0a <_svfprintf_r+0x452>
 800ebc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ebc6:	aa2c      	add	r2, sp, #176	; 0xb0
 800ebc8:	f002 ff0c 	bl	80119e4 <__ssprint_r>
 800ebcc:	f7ff f81d 	bl	800dc0a <_svfprintf_r+0x452>
 800ebd0:	0034      	movs	r4, r6
 800ebd2:	2a00      	cmp	r2, #0
 800ebd4:	d101      	bne.n	800ebda <_svfprintf_r+0x1422>
 800ebd6:	f7fe ff8c 	bl	800daf2 <_svfprintf_r+0x33a>
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d101      	bne.n	800ebe2 <_svfprintf_r+0x142a>
 800ebde:	f7ff fc01 	bl	800e3e4 <_svfprintf_r+0xc2c>
 800ebe2:	2b02      	cmp	r3, #2
 800ebe4:	d100      	bne.n	800ebe8 <_svfprintf_r+0x1430>
 800ebe6:	e459      	b.n	800e49c <_svfprintf_r+0xce4>
 800ebe8:	2507      	movs	r5, #7
 800ebea:	ab58      	add	r3, sp, #352	; 0x160
 800ebec:	9308      	str	r3, [sp, #32]
 800ebee:	9a08      	ldr	r2, [sp, #32]
 800ebf0:	0013      	movs	r3, r2
 800ebf2:	3b01      	subs	r3, #1
 800ebf4:	9308      	str	r3, [sp, #32]
 800ebf6:	9b06      	ldr	r3, [sp, #24]
 800ebf8:	9908      	ldr	r1, [sp, #32]
 800ebfa:	402b      	ands	r3, r5
 800ebfc:	3330      	adds	r3, #48	; 0x30
 800ebfe:	700b      	strb	r3, [r1, #0]
 800ec00:	9907      	ldr	r1, [sp, #28]
 800ec02:	074e      	lsls	r6, r1, #29
 800ec04:	9906      	ldr	r1, [sp, #24]
 800ec06:	08c8      	lsrs	r0, r1, #3
 800ec08:	9907      	ldr	r1, [sp, #28]
 800ec0a:	4306      	orrs	r6, r0
 800ec0c:	08c9      	lsrs	r1, r1, #3
 800ec0e:	9107      	str	r1, [sp, #28]
 800ec10:	0031      	movs	r1, r6
 800ec12:	9807      	ldr	r0, [sp, #28]
 800ec14:	9606      	str	r6, [sp, #24]
 800ec16:	4301      	orrs	r1, r0
 800ec18:	d1e9      	bne.n	800ebee <_svfprintf_r+0x1436>
 800ec1a:	07e1      	lsls	r1, r4, #31
 800ec1c:	d400      	bmi.n	800ec20 <_svfprintf_r+0x1468>
 800ec1e:	e42a      	b.n	800e476 <_svfprintf_r+0xcbe>
 800ec20:	2b30      	cmp	r3, #48	; 0x30
 800ec22:	d100      	bne.n	800ec26 <_svfprintf_r+0x146e>
 800ec24:	e427      	b.n	800e476 <_svfprintf_r+0xcbe>
 800ec26:	2130      	movs	r1, #48	; 0x30
 800ec28:	9b08      	ldr	r3, [sp, #32]
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	7019      	strb	r1, [r3, #0]
 800ec2e:	1e93      	subs	r3, r2, #2
 800ec30:	9308      	str	r3, [sp, #32]
 800ec32:	e420      	b.n	800e476 <_svfprintf_r+0xcbe>
 800ec34:	08014c88 	.word	0x08014c88
 800ec38:	08014c78 	.word	0x08014c78

0800ec3c <__ssvfscanf_r>:
 800ec3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec3e:	4ca7      	ldr	r4, [pc, #668]	; (800eedc <__ssvfscanf_r+0x2a0>)
 800ec40:	44a5      	add	sp, r4
 800ec42:	af02      	add	r7, sp, #8
 800ec44:	633b      	str	r3, [r7, #48]	; 0x30
 800ec46:	000b      	movs	r3, r1
 800ec48:	6378      	str	r0, [r7, #52]	; 0x34
 800ec4a:	6479      	str	r1, [r7, #68]	; 0x44
 800ec4c:	61ba      	str	r2, [r7, #24]
 800ec4e:	220c      	movs	r2, #12
 800ec50:	5e9a      	ldrsh	r2, [r3, r2]
 800ec52:	2380      	movs	r3, #128	; 0x80
 800ec54:	019b      	lsls	r3, r3, #6
 800ec56:	421a      	tst	r2, r3
 800ec58:	d105      	bne.n	800ec66 <__ssvfscanf_r+0x2a>
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	818b      	strh	r3, [r1, #12]
 800ec5e:	4aa0      	ldr	r2, [pc, #640]	; (800eee0 <__ssvfscanf_r+0x2a4>)
 800ec60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ec62:	4013      	ands	r3, r2
 800ec64:	664b      	str	r3, [r1, #100]	; 0x64
 800ec66:	2300      	movs	r3, #0
 800ec68:	617b      	str	r3, [r7, #20]
 800ec6a:	643b      	str	r3, [r7, #64]	; 0x40
 800ec6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec70:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	69ba      	ldr	r2, [r7, #24]
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	3201      	adds	r2, #1
 800ec7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec7e:	61ba      	str	r2, [r7, #24]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d100      	bne.n	800ec86 <__ssvfscanf_r+0x4a>
 800ec84:	e0d7      	b.n	800ee36 <__ssvfscanf_r+0x1fa>
 800ec86:	2608      	movs	r6, #8
 800ec88:	2108      	movs	r1, #8
 800ec8a:	4a96      	ldr	r2, [pc, #600]	; (800eee4 <__ssvfscanf_r+0x2a8>)
 800ec8c:	5cd2      	ldrb	r2, [r2, r3]
 800ec8e:	4016      	ands	r6, r2
 800ec90:	420a      	tst	r2, r1
 800ec92:	d01d      	beq.n	800ecd0 <__ssvfscanf_r+0x94>
 800ec94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	dd12      	ble.n	800ecc2 <__ssvfscanf_r+0x86>
 800ec9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec9e:	4991      	ldr	r1, [pc, #580]	; (800eee4 <__ssvfscanf_r+0x2a8>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	781a      	ldrb	r2, [r3, #0]
 800eca4:	5c8a      	ldrb	r2, [r1, r2]
 800eca6:	2108      	movs	r1, #8
 800eca8:	420a      	tst	r2, r1
 800ecaa:	d0e3      	beq.n	800ec74 <__ssvfscanf_r+0x38>
 800ecac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecb0:	3201      	adds	r2, #1
 800ecb2:	63ba      	str	r2, [r7, #56]	; 0x38
 800ecb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	6852      	ldr	r2, [r2, #4]
 800ecba:	600b      	str	r3, [r1, #0]
 800ecbc:	3a01      	subs	r2, #1
 800ecbe:	604a      	str	r2, [r1, #4]
 800ecc0:	e7e8      	b.n	800ec94 <__ssvfscanf_r+0x58>
 800ecc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecc6:	f002 ff4d 	bl	8011b64 <__ssrefill_r>
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d0e6      	beq.n	800ec9c <__ssvfscanf_r+0x60>
 800ecce:	e7d1      	b.n	800ec74 <__ssvfscanf_r+0x38>
 800ecd0:	2b25      	cmp	r3, #37	; 0x25
 800ecd2:	d165      	bne.n	800eda0 <__ssvfscanf_r+0x164>
 800ecd4:	250a      	movs	r5, #10
 800ecd6:	2480      	movs	r4, #128	; 0x80
 800ecd8:	69ba      	ldr	r2, [r7, #24]
 800ecda:	63fe      	str	r6, [r7, #60]	; 0x3c
 800ecdc:	3b16      	subs	r3, #22
 800ecde:	69b9      	ldr	r1, [r7, #24]
 800ece0:	3101      	adds	r1, #1
 800ece2:	61b9      	str	r1, [r7, #24]
 800ece4:	7811      	ldrb	r1, [r2, #0]
 800ece6:	0008      	movs	r0, r1
 800ece8:	3825      	subs	r0, #37	; 0x25
 800ecea:	2855      	cmp	r0, #85	; 0x55
 800ecec:	d900      	bls.n	800ecf0 <__ssvfscanf_r+0xb4>
 800ecee:	e170      	b.n	800efd2 <__ssvfscanf_r+0x396>
 800ecf0:	f7f1 fa1a 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ecf4:	016f0056 	.word	0x016f0056
 800ecf8:	016f016f 	.word	0x016f016f
 800ecfc:	0081016f 	.word	0x0081016f
 800ed00:	016f016f 	.word	0x016f016f
 800ed04:	016f016f 	.word	0x016f016f
 800ed08:	00b8016f 	.word	0x00b8016f
 800ed0c:	00b800b8 	.word	0x00b800b8
 800ed10:	00b800b8 	.word	0x00b800b8
 800ed14:	00b800b8 	.word	0x00b800b8
 800ed18:	00b800b8 	.word	0x00b800b8
 800ed1c:	016f00b8 	.word	0x016f00b8
 800ed20:	016f016f 	.word	0x016f016f
 800ed24:	016f016f 	.word	0x016f016f
 800ed28:	016f016f 	.word	0x016f016f
 800ed2c:	016f00d8 	.word	0x016f00d8
 800ed30:	00c1010a 	.word	0x00c1010a
 800ed34:	00d800d8 	.word	0x00d800d8
 800ed38:	016f00d8 	.word	0x016f00d8
 800ed3c:	016f016f 	.word	0x016f016f
 800ed40:	009f016f 	.word	0x009f016f
 800ed44:	016f016f 	.word	0x016f016f
 800ed48:	016f00c9 	.word	0x016f00c9
 800ed4c:	016f016f 	.word	0x016f016f
 800ed50:	016f00f0 	.word	0x016f00f0
 800ed54:	016f016f 	.word	0x016f016f
 800ed58:	00d1016f 	.word	0x00d1016f
 800ed5c:	016f016f 	.word	0x016f016f
 800ed60:	016f00fe 	.word	0x016f00fe
 800ed64:	016f016f 	.word	0x016f016f
 800ed68:	016f016f 	.word	0x016f016f
 800ed6c:	016f00d8 	.word	0x016f00d8
 800ed70:	00c3010c 	.word	0x00c3010c
 800ed74:	00d800d8 	.word	0x00d800d8
 800ed78:	009400d8 	.word	0x009400d8
 800ed7c:	009f012f 	.word	0x009f012f
 800ed80:	0088016f 	.word	0x0088016f
 800ed84:	011200a9 	.word	0x011200a9
 800ed88:	011000cb 	.word	0x011000cb
 800ed8c:	016f016f 	.word	0x016f016f
 800ed90:	00a600f2 	.word	0x00a600f2
 800ed94:	016f00cf 	.word	0x016f00cf
 800ed98:	00d1016f 	.word	0x00d1016f
 800ed9c:	00a6016f 	.word	0x00a6016f
 800eda0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	dd12      	ble.n	800edce <__ssvfscanf_r+0x192>
 800eda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edaa:	69ba      	ldr	r2, [r7, #24]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	3a01      	subs	r2, #1
 800edb0:	7819      	ldrb	r1, [r3, #0]
 800edb2:	7812      	ldrb	r2, [r2, #0]
 800edb4:	4291      	cmp	r1, r2
 800edb6:	d13e      	bne.n	800ee36 <__ssvfscanf_r+0x1fa>
 800edb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edbc:	6852      	ldr	r2, [r2, #4]
 800edbe:	3301      	adds	r3, #1
 800edc0:	600b      	str	r3, [r1, #0]
 800edc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc4:	3a01      	subs	r2, #1
 800edc6:	604a      	str	r2, [r1, #4]
 800edc8:	3301      	adds	r3, #1
 800edca:	63bb      	str	r3, [r7, #56]	; 0x38
 800edcc:	e752      	b.n	800ec74 <__ssvfscanf_r+0x38>
 800edce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edd2:	f002 fec7 	bl	8011b64 <__ssrefill_r>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d0e6      	beq.n	800eda8 <__ssvfscanf_r+0x16c>
 800edda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d003      	beq.n	800ede8 <__ssvfscanf_r+0x1ac>
 800ede0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ede2:	899b      	ldrh	r3, [r3, #12]
 800ede4:	065b      	lsls	r3, r3, #25
 800ede6:	d526      	bpl.n	800ee36 <__ssvfscanf_r+0x1fa>
 800ede8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edea:	2b00      	cmp	r3, #0
 800edec:	d000      	beq.n	800edf0 <__ssvfscanf_r+0x1b4>
 800edee:	e0f6      	b.n	800efde <__ssvfscanf_r+0x3a2>
 800edf0:	3b01      	subs	r3, #1
 800edf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edf4:	e104      	b.n	800f000 <__ssvfscanf_r+0x3c4>
 800edf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edf8:	4332      	orrs	r2, r6
 800edfa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800edfc:	d11b      	bne.n	800ee36 <__ssvfscanf_r+0x1fa>
 800edfe:	2610      	movs	r6, #16
 800ee00:	69ba      	ldr	r2, [r7, #24]
 800ee02:	e76c      	b.n	800ecde <__ssvfscanf_r+0xa2>
 800ee04:	421e      	tst	r6, r3
 800ee06:	d116      	bne.n	800ee36 <__ssvfscanf_r+0x1fa>
 800ee08:	7851      	ldrb	r1, [r2, #1]
 800ee0a:	296c      	cmp	r1, #108	; 0x6c
 800ee0c:	d103      	bne.n	800ee16 <__ssvfscanf_r+0x1da>
 800ee0e:	3202      	adds	r2, #2
 800ee10:	61ba      	str	r2, [r7, #24]
 800ee12:	2202      	movs	r2, #2
 800ee14:	e000      	b.n	800ee18 <__ssvfscanf_r+0x1dc>
 800ee16:	2201      	movs	r2, #1
 800ee18:	4316      	orrs	r6, r2
 800ee1a:	e7f1      	b.n	800ee00 <__ssvfscanf_r+0x1c4>
 800ee1c:	421e      	tst	r6, r3
 800ee1e:	d10a      	bne.n	800ee36 <__ssvfscanf_r+0x1fa>
 800ee20:	7851      	ldrb	r1, [r2, #1]
 800ee22:	2968      	cmp	r1, #104	; 0x68
 800ee24:	d103      	bne.n	800ee2e <__ssvfscanf_r+0x1f2>
 800ee26:	3202      	adds	r2, #2
 800ee28:	61ba      	str	r2, [r7, #24]
 800ee2a:	2208      	movs	r2, #8
 800ee2c:	e7f4      	b.n	800ee18 <__ssvfscanf_r+0x1dc>
 800ee2e:	2204      	movs	r2, #4
 800ee30:	e7f2      	b.n	800ee18 <__ssvfscanf_r+0x1dc>
 800ee32:	421e      	tst	r6, r3
 800ee34:	d0ed      	beq.n	800ee12 <__ssvfscanf_r+0x1d6>
 800ee36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d000      	beq.n	800ee3e <__ssvfscanf_r+0x202>
 800ee3c:	e0da      	b.n	800eff4 <__ssvfscanf_r+0x3b8>
 800ee3e:	e0df      	b.n	800f000 <__ssvfscanf_r+0x3c4>
 800ee40:	421e      	tst	r6, r3
 800ee42:	d0dd      	beq.n	800ee00 <__ssvfscanf_r+0x1c4>
 800ee44:	e7f7      	b.n	800ee36 <__ssvfscanf_r+0x1fa>
 800ee46:	228f      	movs	r2, #143	; 0x8f
 800ee48:	218f      	movs	r1, #143	; 0x8f
 800ee4a:	4032      	ands	r2, r6
 800ee4c:	420e      	tst	r6, r1
 800ee4e:	d1f2      	bne.n	800ee36 <__ssvfscanf_r+0x1fa>
 800ee50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee52:	2900      	cmp	r1, #0
 800ee54:	d104      	bne.n	800ee60 <__ssvfscanf_r+0x224>
 800ee56:	b082      	sub	sp, #8
 800ee58:	a902      	add	r1, sp, #8
 800ee5a:	6439      	str	r1, [r7, #64]	; 0x40
 800ee5c:	600a      	str	r2, [r1, #0]
 800ee5e:	604a      	str	r2, [r1, #4]
 800ee60:	4326      	orrs	r6, r4
 800ee62:	e7cd      	b.n	800ee00 <__ssvfscanf_r+0x1c4>
 800ee64:	228f      	movs	r2, #143	; 0x8f
 800ee66:	4216      	tst	r6, r2
 800ee68:	d1e5      	bne.n	800ee36 <__ssvfscanf_r+0x1fa>
 800ee6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee6c:	436a      	muls	r2, r5
 800ee6e:	3a30      	subs	r2, #48	; 0x30
 800ee70:	188a      	adds	r2, r1, r2
 800ee72:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ee74:	e7c4      	b.n	800ee00 <__ssvfscanf_r+0x1c4>
 800ee76:	2301      	movs	r3, #1
 800ee78:	431e      	orrs	r6, r3
 800ee7a:	4b1b      	ldr	r3, [pc, #108]	; (800eee8 <__ssvfscanf_r+0x2ac>)
 800ee7c:	617b      	str	r3, [r7, #20]
 800ee7e:	230a      	movs	r3, #10
 800ee80:	2403      	movs	r4, #3
 800ee82:	627b      	str	r3, [r7, #36]	; 0x24
 800ee84:	e00f      	b.n	800eea6 <__ssvfscanf_r+0x26a>
 800ee86:	2301      	movs	r3, #1
 800ee88:	431e      	orrs	r6, r3
 800ee8a:	4b18      	ldr	r3, [pc, #96]	; (800eeec <__ssvfscanf_r+0x2b0>)
 800ee8c:	617b      	str	r3, [r7, #20]
 800ee8e:	2308      	movs	r3, #8
 800ee90:	e7f6      	b.n	800ee80 <__ssvfscanf_r+0x244>
 800ee92:	4b16      	ldr	r3, [pc, #88]	; (800eeec <__ssvfscanf_r+0x2b0>)
 800ee94:	e7f2      	b.n	800ee7c <__ssvfscanf_r+0x240>
 800ee96:	2380      	movs	r3, #128	; 0x80
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	431e      	orrs	r6, r3
 800ee9c:	4b13      	ldr	r3, [pc, #76]	; (800eeec <__ssvfscanf_r+0x2b0>)
 800ee9e:	617b      	str	r3, [r7, #20]
 800eea0:	2310      	movs	r3, #16
 800eea2:	e7ed      	b.n	800ee80 <__ssvfscanf_r+0x244>
 800eea4:	2404      	movs	r4, #4
 800eea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	dd55      	ble.n	800ef5a <__ssvfscanf_r+0x31e>
 800eeae:	0673      	lsls	r3, r6, #25
 800eeb0:	d407      	bmi.n	800eec2 <__ssvfscanf_r+0x286>
 800eeb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeb4:	490b      	ldr	r1, [pc, #44]	; (800eee4 <__ssvfscanf_r+0x2a8>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	781a      	ldrb	r2, [r3, #0]
 800eeba:	5c8a      	ldrb	r2, [r1, r2]
 800eebc:	2108      	movs	r1, #8
 800eebe:	420a      	tst	r2, r1
 800eec0:	d152      	bne.n	800ef68 <__ssvfscanf_r+0x32c>
 800eec2:	1e60      	subs	r0, r4, #1
 800eec4:	2803      	cmp	r0, #3
 800eec6:	d863      	bhi.n	800ef90 <__ssvfscanf_r+0x354>
 800eec8:	f7f1 f92e 	bl	8000128 <__gnu_thumb1_case_uhi>
 800eecc:	03bd01da 	.word	0x03bd01da
 800eed0:	068a0579 	.word	0x068a0579
 800eed4:	2301      	movs	r3, #1
 800eed6:	431e      	orrs	r6, r3
 800eed8:	2402      	movs	r4, #2
 800eeda:	e7e4      	b.n	800eea6 <__ssvfscanf_r+0x26a>
 800eedc:	fffffd34 	.word	0xfffffd34
 800eee0:	ffffdfff 	.word	0xffffdfff
 800eee4:	08014971 	.word	0x08014971
 800eee8:	0800c08d 	.word	0x0800c08d
 800eeec:	08011695 	.word	0x08011695
 800eef0:	2248      	movs	r2, #72	; 0x48
 800eef2:	2318      	movs	r3, #24
 800eef4:	189b      	adds	r3, r3, r2
 800eef6:	19d8      	adds	r0, r3, r7
 800eef8:	69b9      	ldr	r1, [r7, #24]
 800eefa:	f001 f9d7 	bl	80102ac <__sccl>
 800eefe:	2340      	movs	r3, #64	; 0x40
 800ef00:	2401      	movs	r4, #1
 800ef02:	61b8      	str	r0, [r7, #24]
 800ef04:	431e      	orrs	r6, r3
 800ef06:	e7ce      	b.n	800eea6 <__ssvfscanf_r+0x26a>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	431e      	orrs	r6, r3
 800ef0c:	2340      	movs	r3, #64	; 0x40
 800ef0e:	2400      	movs	r4, #0
 800ef10:	431e      	orrs	r6, r3
 800ef12:	e7c8      	b.n	800eea6 <__ssvfscanf_r+0x26a>
 800ef14:	2388      	movs	r3, #136	; 0x88
 800ef16:	e7bf      	b.n	800ee98 <__ssvfscanf_r+0x25c>
 800ef18:	06f3      	lsls	r3, r6, #27
 800ef1a:	d500      	bpl.n	800ef1e <__ssvfscanf_r+0x2e2>
 800ef1c:	e6aa      	b.n	800ec74 <__ssvfscanf_r+0x38>
 800ef1e:	2108      	movs	r1, #8
 800ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef22:	cb04      	ldmia	r3!, {r2}
 800ef24:	420e      	tst	r6, r1
 800ef26:	d003      	beq.n	800ef30 <__ssvfscanf_r+0x2f4>
 800ef28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef2a:	7011      	strb	r1, [r2, #0]
 800ef2c:	633b      	str	r3, [r7, #48]	; 0x30
 800ef2e:	e6a1      	b.n	800ec74 <__ssvfscanf_r+0x38>
 800ef30:	0771      	lsls	r1, r6, #29
 800ef32:	d502      	bpl.n	800ef3a <__ssvfscanf_r+0x2fe>
 800ef34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef36:	8011      	strh	r1, [r2, #0]
 800ef38:	e7f8      	b.n	800ef2c <__ssvfscanf_r+0x2f0>
 800ef3a:	07f1      	lsls	r1, r6, #31
 800ef3c:	d502      	bpl.n	800ef44 <__ssvfscanf_r+0x308>
 800ef3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef40:	6011      	str	r1, [r2, #0]
 800ef42:	e7f3      	b.n	800ef2c <__ssvfscanf_r+0x2f0>
 800ef44:	07b6      	lsls	r6, r6, #30
 800ef46:	d5fa      	bpl.n	800ef3e <__ssvfscanf_r+0x302>
 800ef48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef4a:	6011      	str	r1, [r2, #0]
 800ef4c:	17c9      	asrs	r1, r1, #31
 800ef4e:	6051      	str	r1, [r2, #4]
 800ef50:	e7ec      	b.n	800ef2c <__ssvfscanf_r+0x2f0>
 800ef52:	4ba2      	ldr	r3, [pc, #648]	; (800f1dc <__ssvfscanf_r+0x5a0>)
 800ef54:	617b      	str	r3, [r7, #20]
 800ef56:	2300      	movs	r3, #0
 800ef58:	e792      	b.n	800ee80 <__ssvfscanf_r+0x244>
 800ef5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef5e:	f002 fe01 	bl	8011b64 <__ssrefill_r>
 800ef62:	2800      	cmp	r0, #0
 800ef64:	d0a3      	beq.n	800eeae <__ssvfscanf_r+0x272>
 800ef66:	e738      	b.n	800edda <__ssvfscanf_r+0x19e>
 800ef68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef6c:	3201      	adds	r2, #1
 800ef6e:	63ba      	str	r2, [r7, #56]	; 0x38
 800ef70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef72:	6852      	ldr	r2, [r2, #4]
 800ef74:	3a01      	subs	r2, #1
 800ef76:	604a      	str	r2, [r1, #4]
 800ef78:	2a00      	cmp	r2, #0
 800ef7a:	dd02      	ble.n	800ef82 <__ssvfscanf_r+0x346>
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	600b      	str	r3, [r1, #0]
 800ef80:	e797      	b.n	800eeb2 <__ssvfscanf_r+0x276>
 800ef82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef86:	f002 fded 	bl	8011b64 <__ssrefill_r>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	d091      	beq.n	800eeb2 <__ssvfscanf_r+0x276>
 800ef8e:	e724      	b.n	800edda <__ssvfscanf_r+0x19e>
 800ef90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef92:	2301      	movs	r3, #1
 800ef94:	2a00      	cmp	r2, #0
 800ef96:	d100      	bne.n	800ef9a <__ssvfscanf_r+0x35e>
 800ef98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef9a:	2210      	movs	r2, #16
 800ef9c:	0034      	movs	r4, r6
 800ef9e:	4032      	ands	r2, r6
 800efa0:	623a      	str	r2, [r7, #32]
 800efa2:	401c      	ands	r4, r3
 800efa4:	421e      	tst	r6, r3
 800efa6:	d100      	bne.n	800efaa <__ssvfscanf_r+0x36e>
 800efa8:	e0f3      	b.n	800f192 <__ssvfscanf_r+0x556>
 800efaa:	2a00      	cmp	r2, #0
 800efac:	d000      	beq.n	800efb0 <__ssvfscanf_r+0x374>
 800efae:	e0b6      	b.n	800f11e <__ssvfscanf_r+0x4e2>
 800efb0:	2080      	movs	r0, #128	; 0x80
 800efb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb4:	cb10      	ldmia	r3!, {r4}
 800efb6:	613b      	str	r3, [r7, #16]
 800efb8:	4206      	tst	r6, r0
 800efba:	d100      	bne.n	800efbe <__ssvfscanf_r+0x382>
 800efbc:	e0b7      	b.n	800f12e <__ssvfscanf_r+0x4f2>
 800efbe:	2c00      	cmp	r4, #0
 800efc0:	d007      	beq.n	800efd2 <__ssvfscanf_r+0x396>
 800efc2:	f7fb ff6d 	bl	800aea0 <malloc>
 800efc6:	6338      	str	r0, [r7, #48]	; 0x30
 800efc8:	2800      	cmp	r0, #0
 800efca:	d11f      	bne.n	800f00c <__ssvfscanf_r+0x3d0>
 800efcc:	2301      	movs	r3, #1
 800efce:	425b      	negs	r3, r3
 800efd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d013      	beq.n	800f000 <__ssvfscanf_r+0x3c4>
 800efd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efda:	3301      	adds	r3, #1
 800efdc:	d10a      	bne.n	800eff4 <__ssvfscanf_r+0x3b8>
 800efde:	2400      	movs	r4, #0
 800efe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efe2:	681d      	ldr	r5, [r3, #0]
 800efe4:	88db      	ldrh	r3, [r3, #6]
 800efe6:	42a3      	cmp	r3, r4
 800efe8:	dd01      	ble.n	800efee <__ssvfscanf_r+0x3b2>
 800efea:	f001 f82a 	bl	8010042 <__ssvfscanf_r+0x1406>
 800efee:	2301      	movs	r3, #1
 800eff0:	425b      	negs	r3, r3
 800eff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff6:	6818      	ldr	r0, [r3, #0]
 800eff8:	2800      	cmp	r0, #0
 800effa:	d001      	beq.n	800f000 <__ssvfscanf_r+0x3c4>
 800effc:	f7fb ff5a 	bl	800aeb4 <free>
 800f000:	46bd      	mov	sp, r7
 800f002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f004:	23b1      	movs	r3, #177	; 0xb1
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	449d      	add	sp, r3
 800f00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f012:	88de      	ldrh	r6, [r3, #6]
 800f014:	889d      	ldrh	r5, [r3, #4]
 800f016:	42ae      	cmp	r6, r5
 800f018:	d30e      	bcc.n	800f038 <__ssvfscanf_r+0x3fc>
 800f01a:	4b71      	ldr	r3, [pc, #452]	; (800f1e0 <__ssvfscanf_r+0x5a4>)
 800f01c:	429d      	cmp	r5, r3
 800f01e:	d8d5      	bhi.n	800efcc <__ssvfscanf_r+0x390>
 800f020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f022:	3508      	adds	r5, #8
 800f024:	b2ad      	uxth	r5, r5
 800f026:	6818      	ldr	r0, [r3, #0]
 800f028:	00a9      	lsls	r1, r5, #2
 800f02a:	f002 f901 	bl	8011230 <realloc>
 800f02e:	2800      	cmp	r0, #0
 800f030:	d0cc      	beq.n	800efcc <__ssvfscanf_r+0x390>
 800f032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f034:	6018      	str	r0, [r3, #0]
 800f036:	809d      	strh	r5, [r3, #4]
 800f038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f03a:	1c72      	adds	r2, r6, #1
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	00b6      	lsls	r6, r6, #2
 800f040:	50f4      	str	r4, [r6, r3]
 800f042:	2320      	movs	r3, #32
 800f044:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f046:	0026      	movs	r6, r4
 800f048:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f04a:	80ca      	strh	r2, [r1, #6]
 800f04c:	61fb      	str	r3, [r7, #28]
 800f04e:	2500      	movs	r5, #0
 800f050:	f7fd f9fe 	bl	800c450 <__locale_mb_cur_max>
 800f054:	42a8      	cmp	r0, r5
 800f056:	d100      	bne.n	800f05a <__ssvfscanf_r+0x41e>
 800f058:	e6bf      	b.n	800edda <__ssvfscanf_r+0x19e>
 800f05a:	1c6a      	adds	r2, r5, #1
 800f05c:	60fa      	str	r2, [r7, #12]
 800f05e:	228c      	movs	r2, #140	; 0x8c
 800f060:	2048      	movs	r0, #72	; 0x48
 800f062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f064:	0052      	lsls	r2, r2, #1
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	1812      	adds	r2, r2, r0
 800f06a:	7819      	ldrb	r1, [r3, #0]
 800f06c:	19d2      	adds	r2, r2, r7
 800f06e:	5551      	strb	r1, [r2, r5]
 800f070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f074:	6852      	ldr	r2, [r2, #4]
 800f076:	3301      	adds	r3, #1
 800f078:	600b      	str	r3, [r1, #0]
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	3a01      	subs	r2, #1
 800f07e:	604a      	str	r2, [r1, #4]
 800f080:	2b03      	cmp	r3, #3
 800f082:	d102      	bne.n	800f08a <__ssvfscanf_r+0x44e>
 800f084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f086:	2b04      	cmp	r3, #4
 800f088:	d007      	beq.n	800f09a <__ssvfscanf_r+0x45e>
 800f08a:	2048      	movs	r0, #72	; 0x48
 800f08c:	2310      	movs	r3, #16
 800f08e:	181b      	adds	r3, r3, r0
 800f090:	2208      	movs	r2, #8
 800f092:	2100      	movs	r1, #0
 800f094:	19d8      	adds	r0, r3, r7
 800f096:	f7fd f997 	bl	800c3c8 <memset>
 800f09a:	2148      	movs	r1, #72	; 0x48
 800f09c:	2310      	movs	r3, #16
 800f09e:	228c      	movs	r2, #140	; 0x8c
 800f0a0:	185b      	adds	r3, r3, r1
 800f0a2:	0052      	lsls	r2, r2, #1
 800f0a4:	19db      	adds	r3, r3, r7
 800f0a6:	1852      	adds	r2, r2, r1
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	0021      	movs	r1, r4
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0b0:	19d2      	adds	r2, r2, r7
 800f0b2:	f002 fc57 	bl	8011964 <_mbrtowc_r>
 800f0b6:	0003      	movs	r3, r0
 800f0b8:	62b8      	str	r0, [r7, #40]	; 0x28
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	d100      	bne.n	800f0c0 <__ssvfscanf_r+0x484>
 800f0be:	e68c      	b.n	800edda <__ssvfscanf_r+0x19e>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d139      	bne.n	800f138 <__ssvfscanf_r+0x4fc>
 800f0c4:	6a3b      	ldr	r3, [r7, #32]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d100      	bne.n	800f0cc <__ssvfscanf_r+0x490>
 800f0ca:	6023      	str	r3, [r4, #0]
 800f0cc:	68fa      	ldr	r2, [r7, #12]
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d0:	4694      	mov	ip, r2
 800f0d2:	4463      	add	r3, ip
 800f0d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d8:	2b03      	cmp	r3, #3
 800f0da:	d102      	bne.n	800f0e2 <__ssvfscanf_r+0x4a6>
 800f0dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0de:	2b04      	cmp	r3, #4
 800f0e0:	d002      	beq.n	800f0e8 <__ssvfscanf_r+0x4ac>
 800f0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0e8:	6a3b      	ldr	r3, [r7, #32]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d115      	bne.n	800f11a <__ssvfscanf_r+0x4de>
 800f0ee:	2e00      	cmp	r6, #0
 800f0f0:	d012      	beq.n	800f118 <__ssvfscanf_r+0x4dc>
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f4:	69fa      	ldr	r2, [r7, #28]
 800f0f6:	1ae5      	subs	r5, r4, r3
 800f0f8:	10ab      	asrs	r3, r5, #2
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d30c      	bcc.n	800f118 <__ssvfscanf_r+0x4dc>
 800f0fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f100:	00d1      	lsls	r1, r2, #3
 800f102:	f002 f895 	bl	8011230 <realloc>
 800f106:	6338      	str	r0, [r7, #48]	; 0x30
 800f108:	2800      	cmp	r0, #0
 800f10a:	d100      	bne.n	800f10e <__ssvfscanf_r+0x4d2>
 800f10c:	e75e      	b.n	800efcc <__ssvfscanf_r+0x390>
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	1944      	adds	r4, r0, r5
 800f112:	005b      	lsls	r3, r3, #1
 800f114:	6030      	str	r0, [r6, #0]
 800f116:	61fb      	str	r3, [r7, #28]
 800f118:	3404      	adds	r4, #4
 800f11a:	2500      	movs	r5, #0
 800f11c:	e010      	b.n	800f140 <__ssvfscanf_r+0x504>
 800f11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f120:	613b      	str	r3, [r7, #16]
 800f122:	2300      	movs	r3, #0
 800f124:	001e      	movs	r6, r3
 800f126:	001c      	movs	r4, r3
 800f128:	61fb      	str	r3, [r7, #28]
 800f12a:	633b      	str	r3, [r7, #48]	; 0x30
 800f12c:	e78f      	b.n	800f04e <__ssvfscanf_r+0x412>
 800f12e:	6a3b      	ldr	r3, [r7, #32]
 800f130:	001e      	movs	r6, r3
 800f132:	61fb      	str	r3, [r7, #28]
 800f134:	633b      	str	r3, [r7, #48]	; 0x30
 800f136:	e78a      	b.n	800f04e <__ssvfscanf_r+0x412>
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	68fd      	ldr	r5, [r7, #12]
 800f13c:	3302      	adds	r3, #2
 800f13e:	d1c5      	bne.n	800f0cc <__ssvfscanf_r+0x490>
 800f140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	dc12      	bgt.n	800f16e <__ssvfscanf_r+0x532>
 800f148:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f14a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f14c:	f002 fd0a 	bl	8011b64 <__ssrefill_r>
 800f150:	2800      	cmp	r0, #0
 800f152:	d00c      	beq.n	800f16e <__ssvfscanf_r+0x532>
 800f154:	2d00      	cmp	r5, #0
 800f156:	d000      	beq.n	800f15a <__ssvfscanf_r+0x51e>
 800f158:	e63f      	b.n	800edda <__ssvfscanf_r+0x19e>
 800f15a:	2e00      	cmp	r6, #0
 800f15c:	d10c      	bne.n	800f178 <__ssvfscanf_r+0x53c>
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	425a      	negs	r2, r3
 800f162:	4153      	adcs	r3, r2
 800f164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f166:	18d3      	adds	r3, r2, r3
 800f168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	e6de      	b.n	800ef2c <__ssvfscanf_r+0x2f0>
 800f16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f170:	2b00      	cmp	r3, #0
 800f172:	d000      	beq.n	800f176 <__ssvfscanf_r+0x53a>
 800f174:	e76c      	b.n	800f050 <__ssvfscanf_r+0x414>
 800f176:	e7f0      	b.n	800f15a <__ssvfscanf_r+0x51e>
 800f178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17a:	69fa      	ldr	r2, [r7, #28]
 800f17c:	1ae1      	subs	r1, r4, r3
 800f17e:	108b      	asrs	r3, r1, #2
 800f180:	429a      	cmp	r2, r3
 800f182:	d9ec      	bls.n	800f15e <__ssvfscanf_r+0x522>
 800f184:	6830      	ldr	r0, [r6, #0]
 800f186:	f002 f853 	bl	8011230 <realloc>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	d0e7      	beq.n	800f15e <__ssvfscanf_r+0x522>
 800f18e:	6030      	str	r0, [r6, #0]
 800f190:	e7e5      	b.n	800f15e <__ssvfscanf_r+0x522>
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d025      	beq.n	800f1e4 <__ssvfscanf_r+0x5a8>
 800f198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f19a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f1a0:	6812      	ldr	r2, [r2, #0]
 800f1a2:	4299      	cmp	r1, r3
 800f1a4:	dd11      	ble.n	800f1ca <__ssvfscanf_r+0x58e>
 800f1a6:	1ac9      	subs	r1, r1, r3
 800f1a8:	18d2      	adds	r2, r2, r3
 800f1aa:	18e4      	adds	r4, r4, r3
 800f1ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f1b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1b2:	0019      	movs	r1, r3
 800f1b4:	601a      	str	r2, [r3, #0]
 800f1b6:	f002 fcd5 	bl	8011b64 <__ssrefill_r>
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d0ec      	beq.n	800f198 <__ssvfscanf_r+0x55c>
 800f1be:	2c00      	cmp	r4, #0
 800f1c0:	d100      	bne.n	800f1c4 <__ssvfscanf_r+0x588>
 800f1c2:	e60a      	b.n	800edda <__ssvfscanf_r+0x19e>
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c6:	191b      	adds	r3, r3, r4
 800f1c8:	e5ff      	b.n	800edca <__ssvfscanf_r+0x18e>
 800f1ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f1cc:	1a5b      	subs	r3, r3, r1
 800f1ce:	1864      	adds	r4, r4, r1
 800f1d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1d2:	604b      	str	r3, [r1, #4]
 800f1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1d6:	18d2      	adds	r2, r2, r3
 800f1d8:	600a      	str	r2, [r1, #0]
 800f1da:	e7f3      	b.n	800f1c4 <__ssvfscanf_r+0x588>
 800f1dc:	0800c08d 	.word	0x0800c08d
 800f1e0:	0000fff6 	.word	0x0000fff6
 800f1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e6:	0034      	movs	r4, r6
 800f1e8:	cb20      	ldmia	r3!, {r5}
 800f1ea:	633b      	str	r3, [r7, #48]	; 0x30
 800f1ec:	2380      	movs	r3, #128	; 0x80
 800f1ee:	401c      	ands	r4, r3
 800f1f0:	421e      	tst	r6, r3
 800f1f2:	d028      	beq.n	800f246 <__ssvfscanf_r+0x60a>
 800f1f4:	2d00      	cmp	r5, #0
 800f1f6:	d100      	bne.n	800f1fa <__ssvfscanf_r+0x5be>
 800f1f8:	e61d      	b.n	800ee36 <__ssvfscanf_r+0x1fa>
 800f1fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1fc:	f7fb fe50 	bl	800aea0 <malloc>
 800f200:	6238      	str	r0, [r7, #32]
 800f202:	2800      	cmp	r0, #0
 800f204:	d100      	bne.n	800f208 <__ssvfscanf_r+0x5cc>
 800f206:	e5ef      	b.n	800ede8 <__ssvfscanf_r+0x1ac>
 800f208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f20a:	6028      	str	r0, [r5, #0]
 800f20c:	88de      	ldrh	r6, [r3, #6]
 800f20e:	889c      	ldrh	r4, [r3, #4]
 800f210:	6818      	ldr	r0, [r3, #0]
 800f212:	42a6      	cmp	r6, r4
 800f214:	d30e      	bcc.n	800f234 <__ssvfscanf_r+0x5f8>
 800f216:	4bbf      	ldr	r3, [pc, #764]	; (800f514 <__ssvfscanf_r+0x8d8>)
 800f218:	429c      	cmp	r4, r3
 800f21a:	d900      	bls.n	800f21e <__ssvfscanf_r+0x5e2>
 800f21c:	e6df      	b.n	800efde <__ssvfscanf_r+0x3a2>
 800f21e:	3408      	adds	r4, #8
 800f220:	b2a4      	uxth	r4, r4
 800f222:	00a1      	lsls	r1, r4, #2
 800f224:	f002 f804 	bl	8011230 <realloc>
 800f228:	2800      	cmp	r0, #0
 800f22a:	d100      	bne.n	800f22e <__ssvfscanf_r+0x5f2>
 800f22c:	e6d7      	b.n	800efde <__ssvfscanf_r+0x3a2>
 800f22e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f230:	6018      	str	r0, [r3, #0]
 800f232:	809c      	strh	r4, [r3, #4]
 800f234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f236:	1c72      	adds	r2, r6, #1
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f23c:	00b6      	lsls	r6, r6, #2
 800f23e:	002c      	movs	r4, r5
 800f240:	50f5      	str	r5, [r6, r3]
 800f242:	6a3d      	ldr	r5, [r7, #32]
 800f244:	80ca      	strh	r2, [r1, #6]
 800f246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f248:	0029      	movs	r1, r5
 800f24a:	9300      	str	r3, [sp, #0]
 800f24c:	2201      	movs	r2, #1
 800f24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f250:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f252:	f002 fca6 	bl	8011ba2 <_sfread_r>
 800f256:	1e05      	subs	r5, r0, #0
 800f258:	d100      	bne.n	800f25c <__ssvfscanf_r+0x620>
 800f25a:	e5be      	b.n	800edda <__ssvfscanf_r+0x19e>
 800f25c:	2c00      	cmp	r4, #0
 800f25e:	d009      	beq.n	800f274 <__ssvfscanf_r+0x638>
 800f260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f262:	4283      	cmp	r3, r0
 800f264:	d906      	bls.n	800f274 <__ssvfscanf_r+0x638>
 800f266:	0001      	movs	r1, r0
 800f268:	6820      	ldr	r0, [r4, #0]
 800f26a:	f001 ffe1 	bl	8011230 <realloc>
 800f26e:	2800      	cmp	r0, #0
 800f270:	d000      	beq.n	800f274 <__ssvfscanf_r+0x638>
 800f272:	6020      	str	r0, [r4, #0]
 800f274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f276:	195b      	adds	r3, r3, r5
 800f278:	63bb      	str	r3, [r7, #56]	; 0x38
 800f27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27c:	3301      	adds	r3, #1
 800f27e:	e4f8      	b.n	800ec72 <__ssvfscanf_r+0x36>
 800f280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f282:	2b00      	cmp	r3, #0
 800f284:	d101      	bne.n	800f28a <__ssvfscanf_r+0x64e>
 800f286:	3b01      	subs	r3, #1
 800f288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f28a:	2210      	movs	r2, #16
 800f28c:	2301      	movs	r3, #1
 800f28e:	0034      	movs	r4, r6
 800f290:	4032      	ands	r2, r6
 800f292:	401c      	ands	r4, r3
 800f294:	623a      	str	r2, [r7, #32]
 800f296:	421e      	tst	r6, r3
 800f298:	d100      	bne.n	800f29c <__ssvfscanf_r+0x660>
 800f29a:	e116      	b.n	800f4ca <__ssvfscanf_r+0x88e>
 800f29c:	2a00      	cmp	r2, #0
 800f29e:	d000      	beq.n	800f2a2 <__ssvfscanf_r+0x666>
 800f2a0:	e0b0      	b.n	800f404 <__ssvfscanf_r+0x7c8>
 800f2a2:	2080      	movs	r0, #128	; 0x80
 800f2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a6:	cb10      	ldmia	r3!, {r4}
 800f2a8:	60fb      	str	r3, [r7, #12]
 800f2aa:	4206      	tst	r6, r0
 800f2ac:	d100      	bne.n	800f2b0 <__ssvfscanf_r+0x674>
 800f2ae:	e0b2      	b.n	800f416 <__ssvfscanf_r+0x7da>
 800f2b0:	2c00      	cmp	r4, #0
 800f2b2:	d100      	bne.n	800f2b6 <__ssvfscanf_r+0x67a>
 800f2b4:	e68d      	b.n	800efd2 <__ssvfscanf_r+0x396>
 800f2b6:	f7fb fdf3 	bl	800aea0 <malloc>
 800f2ba:	6338      	str	r0, [r7, #48]	; 0x30
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	d100      	bne.n	800f2c2 <__ssvfscanf_r+0x686>
 800f2c0:	e684      	b.n	800efcc <__ssvfscanf_r+0x390>
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c4:	6023      	str	r3, [r4, #0]
 800f2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c8:	88de      	ldrh	r6, [r3, #6]
 800f2ca:	889d      	ldrh	r5, [r3, #4]
 800f2cc:	42ae      	cmp	r6, r5
 800f2ce:	d310      	bcc.n	800f2f2 <__ssvfscanf_r+0x6b6>
 800f2d0:	4b90      	ldr	r3, [pc, #576]	; (800f514 <__ssvfscanf_r+0x8d8>)
 800f2d2:	429d      	cmp	r5, r3
 800f2d4:	d900      	bls.n	800f2d8 <__ssvfscanf_r+0x69c>
 800f2d6:	e679      	b.n	800efcc <__ssvfscanf_r+0x390>
 800f2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2da:	3508      	adds	r5, #8
 800f2dc:	b2ad      	uxth	r5, r5
 800f2de:	6818      	ldr	r0, [r3, #0]
 800f2e0:	00a9      	lsls	r1, r5, #2
 800f2e2:	f001 ffa5 	bl	8011230 <realloc>
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d100      	bne.n	800f2ec <__ssvfscanf_r+0x6b0>
 800f2ea:	e66f      	b.n	800efcc <__ssvfscanf_r+0x390>
 800f2ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2ee:	6018      	str	r0, [r3, #0]
 800f2f0:	809d      	strh	r5, [r3, #4]
 800f2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2f4:	1c72      	adds	r2, r6, #1
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	00b6      	lsls	r6, r6, #2
 800f2fa:	50f4      	str	r4, [r6, r3]
 800f2fc:	2320      	movs	r3, #32
 800f2fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f300:	0026      	movs	r6, r4
 800f302:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f304:	80ca      	strh	r2, [r1, #6]
 800f306:	613b      	str	r3, [r7, #16]
 800f308:	2500      	movs	r5, #0
 800f30a:	f7fd f8a1 	bl	800c450 <__locale_mb_cur_max>
 800f30e:	42a8      	cmp	r0, r5
 800f310:	d100      	bne.n	800f314 <__ssvfscanf_r+0x6d8>
 800f312:	e562      	b.n	800edda <__ssvfscanf_r+0x19e>
 800f314:	1c6a      	adds	r2, r5, #1
 800f316:	61fa      	str	r2, [r7, #28]
 800f318:	228c      	movs	r2, #140	; 0x8c
 800f31a:	2048      	movs	r0, #72	; 0x48
 800f31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f31e:	0052      	lsls	r2, r2, #1
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	1812      	adds	r2, r2, r0
 800f324:	7819      	ldrb	r1, [r3, #0]
 800f326:	19d2      	adds	r2, r2, r7
 800f328:	5551      	strb	r1, [r2, r5]
 800f32a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f32c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f32e:	6852      	ldr	r2, [r2, #4]
 800f330:	3301      	adds	r3, #1
 800f332:	600b      	str	r3, [r1, #0]
 800f334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f336:	3a01      	subs	r2, #1
 800f338:	604a      	str	r2, [r1, #4]
 800f33a:	2b03      	cmp	r3, #3
 800f33c:	d102      	bne.n	800f344 <__ssvfscanf_r+0x708>
 800f33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f340:	2b04      	cmp	r3, #4
 800f342:	d006      	beq.n	800f352 <__ssvfscanf_r+0x716>
 800f344:	2048      	movs	r0, #72	; 0x48
 800f346:	2208      	movs	r2, #8
 800f348:	1813      	adds	r3, r2, r0
 800f34a:	2100      	movs	r1, #0
 800f34c:	19d8      	adds	r0, r3, r7
 800f34e:	f7fd f83b 	bl	800c3c8 <memset>
 800f352:	2148      	movs	r1, #72	; 0x48
 800f354:	2308      	movs	r3, #8
 800f356:	228c      	movs	r2, #140	; 0x8c
 800f358:	185b      	adds	r3, r3, r1
 800f35a:	0052      	lsls	r2, r2, #1
 800f35c:	19db      	adds	r3, r3, r7
 800f35e:	1852      	adds	r2, r2, r1
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	0021      	movs	r1, r4
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f368:	19d2      	adds	r2, r2, r7
 800f36a:	f002 fafb 	bl	8011964 <_mbrtowc_r>
 800f36e:	0003      	movs	r3, r0
 800f370:	62b8      	str	r0, [r7, #40]	; 0x28
 800f372:	3301      	adds	r3, #1
 800f374:	d100      	bne.n	800f378 <__ssvfscanf_r+0x73c>
 800f376:	e530      	b.n	800edda <__ssvfscanf_r+0x19e>
 800f378:	2800      	cmp	r0, #0
 800f37a:	d151      	bne.n	800f420 <__ssvfscanf_r+0x7e4>
 800f37c:	6020      	str	r0, [r4, #0]
 800f37e:	2301      	movs	r3, #1
 800f380:	6825      	ldr	r5, [r4, #0]
 800f382:	425b      	negs	r3, r3
 800f384:	1c6a      	adds	r2, r5, #1
 800f386:	d01a      	beq.n	800f3be <__ssvfscanf_r+0x782>
 800f388:	2048      	movs	r0, #72	; 0x48
 800f38a:	3311      	adds	r3, #17
 800f38c:	181b      	adds	r3, r3, r0
 800f38e:	2208      	movs	r2, #8
 800f390:	2100      	movs	r1, #0
 800f392:	19d8      	adds	r0, r3, r7
 800f394:	f7fd f818 	bl	800c3c8 <memset>
 800f398:	4b5f      	ldr	r3, [pc, #380]	; (800f518 <__ssvfscanf_r+0x8dc>)
 800f39a:	2148      	movs	r1, #72	; 0x48
 800f39c:	33e0      	adds	r3, #224	; 0xe0
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	2310      	movs	r3, #16
 800f3a2:	4694      	mov	ip, r2
 800f3a4:	185b      	adds	r3, r3, r1
 800f3a6:	002a      	movs	r2, r5
 800f3a8:	19db      	adds	r3, r3, r7
 800f3aa:	4665      	mov	r5, ip
 800f3ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3ae:	1879      	adds	r1, r7, r1
 800f3b0:	47a8      	blx	r5
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	2801      	cmp	r0, #1
 800f3b6:	d102      	bne.n	800f3be <__ssvfscanf_r+0x782>
 800f3b8:	3348      	adds	r3, #72	; 0x48
 800f3ba:	18fb      	adds	r3, r7, r3
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	2218      	movs	r2, #24
 800f3c0:	2148      	movs	r1, #72	; 0x48
 800f3c2:	1852      	adds	r2, r2, r1
 800f3c4:	19d2      	adds	r2, r2, r7
 800f3c6:	5cd3      	ldrb	r3, [r2, r3]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d149      	bne.n	800f460 <__ssvfscanf_r+0x824>
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d137      	bne.n	800f442 <__ssvfscanf_r+0x806>
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d113      	bne.n	800f400 <__ssvfscanf_r+0x7c4>
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	2e00      	cmp	r6, #0
 800f3dc:	d00d      	beq.n	800f3fa <__ssvfscanf_r+0x7be>
 800f3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e0:	693a      	ldr	r2, [r7, #16]
 800f3e2:	1ae4      	subs	r4, r4, r3
 800f3e4:	10a3      	asrs	r3, r4, #2
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d906      	bls.n	800f3fa <__ssvfscanf_r+0x7be>
 800f3ec:	6830      	ldr	r0, [r6, #0]
 800f3ee:	1d21      	adds	r1, r4, #4
 800f3f0:	f001 ff1e 	bl	8011230 <realloc>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d000      	beq.n	800f3fa <__ssvfscanf_r+0x7be>
 800f3f8:	6030      	str	r0, [r6, #0]
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	e593      	b.n	800ef2c <__ssvfscanf_r+0x2f0>
 800f404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f406:	60fb      	str	r3, [r7, #12]
 800f408:	2300      	movs	r3, #0
 800f40a:	001e      	movs	r6, r3
 800f40c:	613b      	str	r3, [r7, #16]
 800f40e:	633b      	str	r3, [r7, #48]	; 0x30
 800f410:	334c      	adds	r3, #76	; 0x4c
 800f412:	18fc      	adds	r4, r7, r3
 800f414:	e778      	b.n	800f308 <__ssvfscanf_r+0x6cc>
 800f416:	6a3b      	ldr	r3, [r7, #32]
 800f418:	001e      	movs	r6, r3
 800f41a:	613b      	str	r3, [r7, #16]
 800f41c:	633b      	str	r3, [r7, #48]	; 0x30
 800f41e:	e773      	b.n	800f308 <__ssvfscanf_r+0x6cc>
 800f420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f422:	69fd      	ldr	r5, [r7, #28]
 800f424:	3302      	adds	r3, #2
 800f426:	d1aa      	bne.n	800f37e <__ssvfscanf_r+0x742>
 800f428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	dc47      	bgt.n	800f4c0 <__ssvfscanf_r+0x884>
 800f430:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f432:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f434:	f002 fb96 	bl	8011b64 <__ssrefill_r>
 800f438:	2800      	cmp	r0, #0
 800f43a:	d041      	beq.n	800f4c0 <__ssvfscanf_r+0x884>
 800f43c:	2d00      	cmp	r5, #0
 800f43e:	d0c8      	beq.n	800f3d2 <__ssvfscanf_r+0x796>
 800f440:	e4cb      	b.n	800edda <__ssvfscanf_r+0x19e>
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	2248      	movs	r2, #72	; 0x48
 800f446:	3b01      	subs	r3, #1
 800f448:	61fb      	str	r3, [r7, #28]
 800f44a:	238c      	movs	r3, #140	; 0x8c
 800f44c:	005b      	lsls	r3, r3, #1
 800f44e:	189b      	adds	r3, r3, r2
 800f450:	69fa      	ldr	r2, [r7, #28]
 800f452:	19db      	adds	r3, r3, r7
 800f454:	5cd1      	ldrb	r1, [r2, r3]
 800f456:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f45a:	f002 fb47 	bl	8011aec <_sungetc_r>
 800f45e:	e7b5      	b.n	800f3cc <__ssvfscanf_r+0x790>
 800f460:	69fa      	ldr	r2, [r7, #28]
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	4694      	mov	ip, r2
 800f466:	4463      	add	r3, ip
 800f468:	63bb      	str	r3, [r7, #56]	; 0x38
 800f46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46c:	2b03      	cmp	r3, #3
 800f46e:	d102      	bne.n	800f476 <__ssvfscanf_r+0x83a>
 800f470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f472:	2b04      	cmp	r3, #4
 800f474:	d002      	beq.n	800f47c <__ssvfscanf_r+0x840>
 800f476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f478:	3b01      	subs	r3, #1
 800f47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f47c:	6a3b      	ldr	r3, [r7, #32]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d11a      	bne.n	800f4b8 <__ssvfscanf_r+0x87c>
 800f482:	3404      	adds	r4, #4
 800f484:	2e00      	cmp	r6, #0
 800f486:	d019      	beq.n	800f4bc <__ssvfscanf_r+0x880>
 800f488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48a:	693a      	ldr	r2, [r7, #16]
 800f48c:	1ae3      	subs	r3, r4, r3
 800f48e:	61fb      	str	r3, [r7, #28]
 800f490:	6a3d      	ldr	r5, [r7, #32]
 800f492:	109b      	asrs	r3, r3, #2
 800f494:	4293      	cmp	r3, r2
 800f496:	d3c7      	bcc.n	800f428 <__ssvfscanf_r+0x7ec>
 800f498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f49a:	00d1      	lsls	r1, r2, #3
 800f49c:	f001 fec8 	bl	8011230 <realloc>
 800f4a0:	6338      	str	r0, [r7, #48]	; 0x30
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d100      	bne.n	800f4a8 <__ssvfscanf_r+0x86c>
 800f4a6:	e591      	b.n	800efcc <__ssvfscanf_r+0x390>
 800f4a8:	4684      	mov	ip, r0
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	69fc      	ldr	r4, [r7, #28]
 800f4ae:	005b      	lsls	r3, r3, #1
 800f4b0:	4464      	add	r4, ip
 800f4b2:	6030      	str	r0, [r6, #0]
 800f4b4:	613b      	str	r3, [r7, #16]
 800f4b6:	e7b7      	b.n	800f428 <__ssvfscanf_r+0x7ec>
 800f4b8:	2500      	movs	r5, #0
 800f4ba:	e7b5      	b.n	800f428 <__ssvfscanf_r+0x7ec>
 800f4bc:	0035      	movs	r5, r6
 800f4be:	e7b3      	b.n	800f428 <__ssvfscanf_r+0x7ec>
 800f4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d000      	beq.n	800f4c8 <__ssvfscanf_r+0x88c>
 800f4c6:	e720      	b.n	800f30a <__ssvfscanf_r+0x6ce>
 800f4c8:	e783      	b.n	800f3d2 <__ssvfscanf_r+0x796>
 800f4ca:	6a3b      	ldr	r3, [r7, #32]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d025      	beq.n	800f51c <__ssvfscanf_r+0x8e0>
 800f4d0:	2118      	movs	r1, #24
 800f4d2:	2048      	movs	r0, #72	; 0x48
 800f4d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4d6:	1809      	adds	r1, r1, r0
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	19c9      	adds	r1, r1, r7
 800f4dc:	781a      	ldrb	r2, [r3, #0]
 800f4de:	5c8a      	ldrb	r2, [r1, r2]
 800f4e0:	2a00      	cmp	r2, #0
 800f4e2:	d103      	bne.n	800f4ec <__ssvfscanf_r+0x8b0>
 800f4e4:	2c00      	cmp	r4, #0
 800f4e6:	d000      	beq.n	800f4ea <__ssvfscanf_r+0x8ae>
 800f4e8:	e66c      	b.n	800f1c4 <__ssvfscanf_r+0x588>
 800f4ea:	e4a4      	b.n	800ee36 <__ssvfscanf_r+0x1fa>
 800f4ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4f0:	6852      	ldr	r2, [r2, #4]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	600b      	str	r3, [r1, #0]
 800f4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f8:	3a01      	subs	r2, #1
 800f4fa:	3401      	adds	r4, #1
 800f4fc:	604a      	str	r2, [r1, #4]
 800f4fe:	429c      	cmp	r4, r3
 800f500:	d100      	bne.n	800f504 <__ssvfscanf_r+0x8c8>
 800f502:	e65f      	b.n	800f1c4 <__ssvfscanf_r+0x588>
 800f504:	2a00      	cmp	r2, #0
 800f506:	dce3      	bgt.n	800f4d0 <__ssvfscanf_r+0x894>
 800f508:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f50a:	f002 fb2b 	bl	8011b64 <__ssrefill_r>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d0de      	beq.n	800f4d0 <__ssvfscanf_r+0x894>
 800f512:	e657      	b.n	800f1c4 <__ssvfscanf_r+0x588>
 800f514:	0000fff6 	.word	0x0000fff6
 800f518:	20000448 	.word	0x20000448
 800f51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51e:	0032      	movs	r2, r6
 800f520:	cb20      	ldmia	r3!, {r5}
 800f522:	61fb      	str	r3, [r7, #28]
 800f524:	2380      	movs	r3, #128	; 0x80
 800f526:	401a      	ands	r2, r3
 800f528:	421e      	tst	r6, r3
 800f52a:	d100      	bne.n	800f52e <__ssvfscanf_r+0x8f2>
 800f52c:	e086      	b.n	800f63c <__ssvfscanf_r+0xa00>
 800f52e:	2d00      	cmp	r5, #0
 800f530:	d100      	bne.n	800f534 <__ssvfscanf_r+0x8f8>
 800f532:	e480      	b.n	800ee36 <__ssvfscanf_r+0x1fa>
 800f534:	2020      	movs	r0, #32
 800f536:	f7fb fcb3 	bl	800aea0 <malloc>
 800f53a:	6338      	str	r0, [r7, #48]	; 0x30
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d100      	bne.n	800f542 <__ssvfscanf_r+0x906>
 800f540:	e452      	b.n	800ede8 <__ssvfscanf_r+0x1ac>
 800f542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f544:	6028      	str	r0, [r5, #0]
 800f546:	88de      	ldrh	r6, [r3, #6]
 800f548:	889c      	ldrh	r4, [r3, #4]
 800f54a:	6818      	ldr	r0, [r3, #0]
 800f54c:	42a6      	cmp	r6, r4
 800f54e:	d30e      	bcc.n	800f56e <__ssvfscanf_r+0x932>
 800f550:	4bc3      	ldr	r3, [pc, #780]	; (800f860 <__ssvfscanf_r+0xc24>)
 800f552:	429c      	cmp	r4, r3
 800f554:	d900      	bls.n	800f558 <__ssvfscanf_r+0x91c>
 800f556:	e542      	b.n	800efde <__ssvfscanf_r+0x3a2>
 800f558:	3408      	adds	r4, #8
 800f55a:	b2a4      	uxth	r4, r4
 800f55c:	00a1      	lsls	r1, r4, #2
 800f55e:	f001 fe67 	bl	8011230 <realloc>
 800f562:	2800      	cmp	r0, #0
 800f564:	d100      	bne.n	800f568 <__ssvfscanf_r+0x92c>
 800f566:	e53a      	b.n	800efde <__ssvfscanf_r+0x3a2>
 800f568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f56a:	6018      	str	r0, [r3, #0]
 800f56c:	809c      	strh	r4, [r3, #4]
 800f56e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f570:	1c72      	adds	r2, r6, #1
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	00b6      	lsls	r6, r6, #2
 800f576:	50f5      	str	r5, [r6, r3]
 800f578:	2320      	movs	r3, #32
 800f57a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f57c:	002e      	movs	r6, r5
 800f57e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f580:	80ca      	strh	r2, [r1, #6]
 800f582:	623b      	str	r3, [r7, #32]
 800f584:	002c      	movs	r4, r5
 800f586:	2118      	movs	r1, #24
 800f588:	2048      	movs	r0, #72	; 0x48
 800f58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f58c:	1809      	adds	r1, r1, r0
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	19c9      	adds	r1, r1, r7
 800f592:	781a      	ldrb	r2, [r3, #0]
 800f594:	5c8a      	ldrb	r2, [r1, r2]
 800f596:	2a00      	cmp	r2, #0
 800f598:	d101      	bne.n	800f59e <__ssvfscanf_r+0x962>
 800f59a:	633d      	str	r5, [r7, #48]	; 0x30
 800f59c:	e031      	b.n	800f602 <__ssvfscanf_r+0x9c6>
 800f59e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5a2:	6852      	ldr	r2, [r2, #4]
 800f5a4:	3a01      	subs	r2, #1
 800f5a6:	604a      	str	r2, [r1, #4]
 800f5a8:	1c5a      	adds	r2, r3, #1
 800f5aa:	600a      	str	r2, [r1, #0]
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	1c6a      	adds	r2, r5, #1
 800f5b0:	633a      	str	r2, [r7, #48]	; 0x30
 800f5b2:	702b      	strb	r3, [r5, #0]
 800f5b4:	2e00      	cmp	r6, #0
 800f5b6:	d010      	beq.n	800f5da <__ssvfscanf_r+0x99e>
 800f5b8:	6a3b      	ldr	r3, [r7, #32]
 800f5ba:	1b15      	subs	r5, r2, r4
 800f5bc:	429d      	cmp	r5, r3
 800f5be:	d30c      	bcc.n	800f5da <__ssvfscanf_r+0x99e>
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	0020      	movs	r0, r4
 800f5c4:	0019      	movs	r1, r3
 800f5c6:	623b      	str	r3, [r7, #32]
 800f5c8:	f001 fe32 	bl	8011230 <realloc>
 800f5cc:	1e04      	subs	r4, r0, #0
 800f5ce:	d101      	bne.n	800f5d4 <__ssvfscanf_r+0x998>
 800f5d0:	f7ff fc0a 	bl	800ede8 <__ssvfscanf_r+0x1ac>
 800f5d4:	1943      	adds	r3, r0, r5
 800f5d6:	633b      	str	r3, [r7, #48]	; 0x30
 800f5d8:	6030      	str	r0, [r6, #0]
 800f5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00e      	beq.n	800f602 <__ssvfscanf_r+0x9c6>
 800f5e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	dc2a      	bgt.n	800f642 <__ssvfscanf_r+0xa06>
 800f5ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5f0:	f002 fab8 	bl	8011b64 <__ssrefill_r>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d024      	beq.n	800f642 <__ssvfscanf_r+0xa06>
 800f5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fa:	42a3      	cmp	r3, r4
 800f5fc:	d101      	bne.n	800f602 <__ssvfscanf_r+0x9c6>
 800f5fe:	f7ff fbec 	bl	800edda <__ssvfscanf_r+0x19e>
 800f602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f604:	1b1d      	subs	r5, r3, r4
 800f606:	42a3      	cmp	r3, r4
 800f608:	d101      	bne.n	800f60e <__ssvfscanf_r+0x9d2>
 800f60a:	f7ff fc14 	bl	800ee36 <__ssvfscanf_r+0x1fa>
 800f60e:	2300      	movs	r3, #0
 800f610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f612:	7013      	strb	r3, [r2, #0]
 800f614:	429e      	cmp	r6, r3
 800f616:	d009      	beq.n	800f62c <__ssvfscanf_r+0x9f0>
 800f618:	6a3b      	ldr	r3, [r7, #32]
 800f61a:	1c69      	adds	r1, r5, #1
 800f61c:	428b      	cmp	r3, r1
 800f61e:	d905      	bls.n	800f62c <__ssvfscanf_r+0x9f0>
 800f620:	6830      	ldr	r0, [r6, #0]
 800f622:	f001 fe05 	bl	8011230 <realloc>
 800f626:	2800      	cmp	r0, #0
 800f628:	d000      	beq.n	800f62c <__ssvfscanf_r+0x9f0>
 800f62a:	6030      	str	r0, [r6, #0]
 800f62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62e:	3301      	adds	r3, #1
 800f630:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f634:	195b      	adds	r3, r3, r5
 800f636:	63bb      	str	r3, [r7, #56]	; 0x38
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	e477      	b.n	800ef2c <__ssvfscanf_r+0x2f0>
 800f63c:	0016      	movs	r6, r2
 800f63e:	623a      	str	r2, [r7, #32]
 800f640:	e7a0      	b.n	800f584 <__ssvfscanf_r+0x948>
 800f642:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f644:	e79f      	b.n	800f586 <__ssvfscanf_r+0x94a>
 800f646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d101      	bne.n	800f650 <__ssvfscanf_r+0xa14>
 800f64c:	3b01      	subs	r3, #1
 800f64e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f650:	2210      	movs	r2, #16
 800f652:	2301      	movs	r3, #1
 800f654:	0034      	movs	r4, r6
 800f656:	4032      	ands	r2, r6
 800f658:	401c      	ands	r4, r3
 800f65a:	61fa      	str	r2, [r7, #28]
 800f65c:	421e      	tst	r6, r3
 800f65e:	d100      	bne.n	800f662 <__ssvfscanf_r+0xa26>
 800f660:	e102      	b.n	800f868 <__ssvfscanf_r+0xc2c>
 800f662:	2a00      	cmp	r2, #0
 800f664:	d000      	beq.n	800f668 <__ssvfscanf_r+0xa2c>
 800f666:	e09f      	b.n	800f7a8 <__ssvfscanf_r+0xb6c>
 800f668:	2080      	movs	r0, #128	; 0x80
 800f66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66c:	cb10      	ldmia	r3!, {r4}
 800f66e:	60fb      	str	r3, [r7, #12]
 800f670:	4206      	tst	r6, r0
 800f672:	d100      	bne.n	800f676 <__ssvfscanf_r+0xa3a>
 800f674:	e0a1      	b.n	800f7ba <__ssvfscanf_r+0xb7e>
 800f676:	2c00      	cmp	r4, #0
 800f678:	d100      	bne.n	800f67c <__ssvfscanf_r+0xa40>
 800f67a:	e4aa      	b.n	800efd2 <__ssvfscanf_r+0x396>
 800f67c:	f7fb fc10 	bl	800aea0 <malloc>
 800f680:	6338      	str	r0, [r7, #48]	; 0x30
 800f682:	2800      	cmp	r0, #0
 800f684:	d100      	bne.n	800f688 <__ssvfscanf_r+0xa4c>
 800f686:	e4a1      	b.n	800efcc <__ssvfscanf_r+0x390>
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	6023      	str	r3, [r4, #0]
 800f68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f68e:	88de      	ldrh	r6, [r3, #6]
 800f690:	889d      	ldrh	r5, [r3, #4]
 800f692:	42ae      	cmp	r6, r5
 800f694:	d310      	bcc.n	800f6b8 <__ssvfscanf_r+0xa7c>
 800f696:	4b72      	ldr	r3, [pc, #456]	; (800f860 <__ssvfscanf_r+0xc24>)
 800f698:	429d      	cmp	r5, r3
 800f69a:	d900      	bls.n	800f69e <__ssvfscanf_r+0xa62>
 800f69c:	e496      	b.n	800efcc <__ssvfscanf_r+0x390>
 800f69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6a0:	3508      	adds	r5, #8
 800f6a2:	b2ad      	uxth	r5, r5
 800f6a4:	6818      	ldr	r0, [r3, #0]
 800f6a6:	00a9      	lsls	r1, r5, #2
 800f6a8:	f001 fdc2 	bl	8011230 <realloc>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d100      	bne.n	800f6b2 <__ssvfscanf_r+0xa76>
 800f6b0:	e48c      	b.n	800efcc <__ssvfscanf_r+0x390>
 800f6b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6b4:	6018      	str	r0, [r3, #0]
 800f6b6:	809d      	strh	r5, [r3, #4]
 800f6b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ba:	1c72      	adds	r2, r6, #1
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	00b6      	lsls	r6, r6, #2
 800f6c0:	50f4      	str	r4, [r6, r3]
 800f6c2:	2320      	movs	r3, #32
 800f6c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f6c6:	0025      	movs	r5, r4
 800f6c8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f6ca:	80ca      	strh	r2, [r1, #6]
 800f6cc:	613b      	str	r3, [r7, #16]
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	623b      	str	r3, [r7, #32]
 800f6d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6d4:	4a63      	ldr	r2, [pc, #396]	; (800f864 <__ssvfscanf_r+0xc28>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	5cd3      	ldrb	r3, [r2, r3]
 800f6dc:	2208      	movs	r2, #8
 800f6de:	4213      	tst	r3, r2
 800f6e0:	d149      	bne.n	800f776 <__ssvfscanf_r+0xb3a>
 800f6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d046      	beq.n	800f776 <__ssvfscanf_r+0xb3a>
 800f6e8:	f7fc feb2 	bl	800c450 <__locale_mb_cur_max>
 800f6ec:	6a3b      	ldr	r3, [r7, #32]
 800f6ee:	4298      	cmp	r0, r3
 800f6f0:	d101      	bne.n	800f6f6 <__ssvfscanf_r+0xaba>
 800f6f2:	f7ff fb72 	bl	800edda <__ssvfscanf_r+0x19e>
 800f6f6:	6a3a      	ldr	r2, [r7, #32]
 800f6f8:	2048      	movs	r0, #72	; 0x48
 800f6fa:	1c56      	adds	r6, r2, #1
 800f6fc:	228c      	movs	r2, #140	; 0x8c
 800f6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f700:	0052      	lsls	r2, r2, #1
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	1812      	adds	r2, r2, r0
 800f706:	7819      	ldrb	r1, [r3, #0]
 800f708:	6a38      	ldr	r0, [r7, #32]
 800f70a:	19d2      	adds	r2, r2, r7
 800f70c:	5411      	strb	r1, [r2, r0]
 800f70e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f710:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f712:	6852      	ldr	r2, [r2, #4]
 800f714:	3301      	adds	r3, #1
 800f716:	600b      	str	r3, [r1, #0]
 800f718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71a:	3a01      	subs	r2, #1
 800f71c:	604a      	str	r2, [r1, #4]
 800f71e:	2b03      	cmp	r3, #3
 800f720:	d102      	bne.n	800f728 <__ssvfscanf_r+0xaec>
 800f722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f724:	2b04      	cmp	r3, #4
 800f726:	d007      	beq.n	800f738 <__ssvfscanf_r+0xafc>
 800f728:	2048      	movs	r0, #72	; 0x48
 800f72a:	2310      	movs	r3, #16
 800f72c:	181b      	adds	r3, r3, r0
 800f72e:	2208      	movs	r2, #8
 800f730:	2100      	movs	r1, #0
 800f732:	19d8      	adds	r0, r3, r7
 800f734:	f7fc fe48 	bl	800c3c8 <memset>
 800f738:	2148      	movs	r1, #72	; 0x48
 800f73a:	2310      	movs	r3, #16
 800f73c:	228c      	movs	r2, #140	; 0x8c
 800f73e:	185b      	adds	r3, r3, r1
 800f740:	0052      	lsls	r2, r2, #1
 800f742:	19db      	adds	r3, r3, r7
 800f744:	1852      	adds	r2, r2, r1
 800f746:	9300      	str	r3, [sp, #0]
 800f748:	0021      	movs	r1, r4
 800f74a:	0033      	movs	r3, r6
 800f74c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f74e:	19d2      	adds	r2, r2, r7
 800f750:	f002 f908 	bl	8011964 <_mbrtowc_r>
 800f754:	0003      	movs	r3, r0
 800f756:	62b8      	str	r0, [r7, #40]	; 0x28
 800f758:	3301      	adds	r3, #1
 800f75a:	d101      	bne.n	800f760 <__ssvfscanf_r+0xb24>
 800f75c:	f7ff fb3d 	bl	800edda <__ssvfscanf_r+0x19e>
 800f760:	2800      	cmp	r0, #0
 800f762:	d12f      	bne.n	800f7c4 <__ssvfscanf_r+0xb88>
 800f764:	6020      	str	r0, [r4, #0]
 800f766:	6820      	ldr	r0, [r4, #0]
 800f768:	f002 f91a 	bl	80119a0 <iswspace>
 800f76c:	6238      	str	r0, [r7, #32]
 800f76e:	2800      	cmp	r0, #0
 800f770:	d04a      	beq.n	800f808 <__ssvfscanf_r+0xbcc>
 800f772:	2e00      	cmp	r6, #0
 800f774:	d13c      	bne.n	800f7f0 <__ssvfscanf_r+0xbb4>
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d000      	beq.n	800f77e <__ssvfscanf_r+0xb42>
 800f77c:	e640      	b.n	800f400 <__ssvfscanf_r+0x7c4>
 800f77e:	6023      	str	r3, [r4, #0]
 800f780:	2d00      	cmp	r5, #0
 800f782:	d100      	bne.n	800f786 <__ssvfscanf_r+0xb4a>
 800f784:	e639      	b.n	800f3fa <__ssvfscanf_r+0x7be>
 800f786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	1ae4      	subs	r4, r4, r3
 800f78c:	10a3      	asrs	r3, r4, #2
 800f78e:	3301      	adds	r3, #1
 800f790:	429a      	cmp	r2, r3
 800f792:	d800      	bhi.n	800f796 <__ssvfscanf_r+0xb5a>
 800f794:	e631      	b.n	800f3fa <__ssvfscanf_r+0x7be>
 800f796:	6828      	ldr	r0, [r5, #0]
 800f798:	1d21      	adds	r1, r4, #4
 800f79a:	f001 fd49 	bl	8011230 <realloc>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d100      	bne.n	800f7a4 <__ssvfscanf_r+0xb68>
 800f7a2:	e62a      	b.n	800f3fa <__ssvfscanf_r+0x7be>
 800f7a4:	6028      	str	r0, [r5, #0]
 800f7a6:	e628      	b.n	800f3fa <__ssvfscanf_r+0x7be>
 800f7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7aa:	60fb      	str	r3, [r7, #12]
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	001d      	movs	r5, r3
 800f7b0:	613b      	str	r3, [r7, #16]
 800f7b2:	633b      	str	r3, [r7, #48]	; 0x30
 800f7b4:	334c      	adds	r3, #76	; 0x4c
 800f7b6:	18fc      	adds	r4, r7, r3
 800f7b8:	e789      	b.n	800f6ce <__ssvfscanf_r+0xa92>
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	001d      	movs	r5, r3
 800f7be:	613b      	str	r3, [r7, #16]
 800f7c0:	633b      	str	r3, [r7, #48]	; 0x30
 800f7c2:	e784      	b.n	800f6ce <__ssvfscanf_r+0xa92>
 800f7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c6:	623e      	str	r6, [r7, #32]
 800f7c8:	3302      	adds	r3, #2
 800f7ca:	d1cc      	bne.n	800f766 <__ssvfscanf_r+0xb2a>
 800f7cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	dd00      	ble.n	800f7d6 <__ssvfscanf_r+0xb9a>
 800f7d4:	e77d      	b.n	800f6d2 <__ssvfscanf_r+0xa96>
 800f7d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7da:	f002 f9c3 	bl	8011b64 <__ssrefill_r>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d100      	bne.n	800f7e4 <__ssvfscanf_r+0xba8>
 800f7e2:	e776      	b.n	800f6d2 <__ssvfscanf_r+0xa96>
 800f7e4:	6a3b      	ldr	r3, [r7, #32]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d001      	beq.n	800f7ee <__ssvfscanf_r+0xbb2>
 800f7ea:	f7ff faf6 	bl	800edda <__ssvfscanf_r+0x19e>
 800f7ee:	e7c2      	b.n	800f776 <__ssvfscanf_r+0xb3a>
 800f7f0:	238c      	movs	r3, #140	; 0x8c
 800f7f2:	2248      	movs	r2, #72	; 0x48
 800f7f4:	005b      	lsls	r3, r3, #1
 800f7f6:	189b      	adds	r3, r3, r2
 800f7f8:	3e01      	subs	r6, #1
 800f7fa:	19db      	adds	r3, r3, r7
 800f7fc:	5cf1      	ldrb	r1, [r6, r3]
 800f7fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f800:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f802:	f002 f973 	bl	8011aec <_sungetc_r>
 800f806:	e7b4      	b.n	800f772 <__ssvfscanf_r+0xb36>
 800f808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80a:	199b      	adds	r3, r3, r6
 800f80c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f810:	2b03      	cmp	r3, #3
 800f812:	d102      	bne.n	800f81a <__ssvfscanf_r+0xbde>
 800f814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f816:	2b04      	cmp	r3, #4
 800f818:	d002      	beq.n	800f820 <__ssvfscanf_r+0xbe4>
 800f81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f81c:	3b01      	subs	r3, #1
 800f81e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1d2      	bne.n	800f7cc <__ssvfscanf_r+0xb90>
 800f826:	3404      	adds	r4, #4
 800f828:	2d00      	cmp	r5, #0
 800f82a:	d016      	beq.n	800f85a <__ssvfscanf_r+0xc1e>
 800f82c:	69fa      	ldr	r2, [r7, #28]
 800f82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f830:	623a      	str	r2, [r7, #32]
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	1ae6      	subs	r6, r4, r3
 800f836:	10b3      	asrs	r3, r6, #2
 800f838:	4293      	cmp	r3, r2
 800f83a:	d3c7      	bcc.n	800f7cc <__ssvfscanf_r+0xb90>
 800f83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f83e:	00d1      	lsls	r1, r2, #3
 800f840:	f001 fcf6 	bl	8011230 <realloc>
 800f844:	6338      	str	r0, [r7, #48]	; 0x30
 800f846:	2800      	cmp	r0, #0
 800f848:	d101      	bne.n	800f84e <__ssvfscanf_r+0xc12>
 800f84a:	f7ff fbbf 	bl	800efcc <__ssvfscanf_r+0x390>
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	1984      	adds	r4, r0, r6
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	6028      	str	r0, [r5, #0]
 800f856:	613b      	str	r3, [r7, #16]
 800f858:	e7b8      	b.n	800f7cc <__ssvfscanf_r+0xb90>
 800f85a:	623d      	str	r5, [r7, #32]
 800f85c:	e7b6      	b.n	800f7cc <__ssvfscanf_r+0xb90>
 800f85e:	46c0      	nop			; (mov r8, r8)
 800f860:	0000fff6 	.word	0x0000fff6
 800f864:	08014971 	.word	0x08014971
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d01c      	beq.n	800f8a8 <__ssvfscanf_r+0xc6c>
 800f86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f870:	49bf      	ldr	r1, [pc, #764]	; (800fb70 <__ssvfscanf_r+0xf34>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	781a      	ldrb	r2, [r3, #0]
 800f876:	5c8a      	ldrb	r2, [r1, r2]
 800f878:	2108      	movs	r1, #8
 800f87a:	420a      	tst	r2, r1
 800f87c:	d000      	beq.n	800f880 <__ssvfscanf_r+0xc44>
 800f87e:	e4a1      	b.n	800f1c4 <__ssvfscanf_r+0x588>
 800f880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f884:	6852      	ldr	r2, [r2, #4]
 800f886:	3301      	adds	r3, #1
 800f888:	600b      	str	r3, [r1, #0]
 800f88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f88c:	3a01      	subs	r2, #1
 800f88e:	3401      	adds	r4, #1
 800f890:	604a      	str	r2, [r1, #4]
 800f892:	429c      	cmp	r4, r3
 800f894:	d100      	bne.n	800f898 <__ssvfscanf_r+0xc5c>
 800f896:	e495      	b.n	800f1c4 <__ssvfscanf_r+0x588>
 800f898:	2a00      	cmp	r2, #0
 800f89a:	dce8      	bgt.n	800f86e <__ssvfscanf_r+0xc32>
 800f89c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f89e:	f002 f961 	bl	8011b64 <__ssrefill_r>
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	d0e3      	beq.n	800f86e <__ssvfscanf_r+0xc32>
 800f8a6:	e48d      	b.n	800f1c4 <__ssvfscanf_r+0x588>
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8aa:	0032      	movs	r2, r6
 800f8ac:	cb10      	ldmia	r3!, {r4}
 800f8ae:	61fb      	str	r3, [r7, #28]
 800f8b0:	2380      	movs	r3, #128	; 0x80
 800f8b2:	401a      	ands	r2, r3
 800f8b4:	421e      	tst	r6, r3
 800f8b6:	d039      	beq.n	800f92c <__ssvfscanf_r+0xcf0>
 800f8b8:	2c00      	cmp	r4, #0
 800f8ba:	d101      	bne.n	800f8c0 <__ssvfscanf_r+0xc84>
 800f8bc:	f7ff fabb 	bl	800ee36 <__ssvfscanf_r+0x1fa>
 800f8c0:	2020      	movs	r0, #32
 800f8c2:	f7fb faed 	bl	800aea0 <malloc>
 800f8c6:	6338      	str	r0, [r7, #48]	; 0x30
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d101      	bne.n	800f8d0 <__ssvfscanf_r+0xc94>
 800f8cc:	f7ff fa8c 	bl	800ede8 <__ssvfscanf_r+0x1ac>
 800f8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8d2:	6020      	str	r0, [r4, #0]
 800f8d4:	88de      	ldrh	r6, [r3, #6]
 800f8d6:	889d      	ldrh	r5, [r3, #4]
 800f8d8:	6818      	ldr	r0, [r3, #0]
 800f8da:	42ae      	cmp	r6, r5
 800f8dc:	d310      	bcc.n	800f900 <__ssvfscanf_r+0xcc4>
 800f8de:	4ba5      	ldr	r3, [pc, #660]	; (800fb74 <__ssvfscanf_r+0xf38>)
 800f8e0:	429d      	cmp	r5, r3
 800f8e2:	d901      	bls.n	800f8e8 <__ssvfscanf_r+0xcac>
 800f8e4:	f7ff fb7b 	bl	800efde <__ssvfscanf_r+0x3a2>
 800f8e8:	3508      	adds	r5, #8
 800f8ea:	b2ad      	uxth	r5, r5
 800f8ec:	00a9      	lsls	r1, r5, #2
 800f8ee:	f001 fc9f 	bl	8011230 <realloc>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d101      	bne.n	800f8fa <__ssvfscanf_r+0xcbe>
 800f8f6:	f7ff fb72 	bl	800efde <__ssvfscanf_r+0x3a2>
 800f8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8fc:	6018      	str	r0, [r3, #0]
 800f8fe:	809d      	strh	r5, [r3, #4]
 800f900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f902:	1c72      	adds	r2, r6, #1
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	00b6      	lsls	r6, r6, #2
 800f908:	50f4      	str	r4, [r6, r3]
 800f90a:	2320      	movs	r3, #32
 800f90c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f90e:	0026      	movs	r6, r4
 800f910:	80ca      	strh	r2, [r1, #6]
 800f912:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f914:	633b      	str	r3, [r7, #48]	; 0x30
 800f916:	0025      	movs	r5, r4
 800f918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f91a:	4995      	ldr	r1, [pc, #596]	; (800fb70 <__ssvfscanf_r+0xf34>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	781a      	ldrb	r2, [r3, #0]
 800f920:	5c8a      	ldrb	r2, [r1, r2]
 800f922:	2108      	movs	r1, #8
 800f924:	420a      	tst	r2, r1
 800f926:	d004      	beq.n	800f932 <__ssvfscanf_r+0xcf6>
 800f928:	623c      	str	r4, [r7, #32]
 800f92a:	e031      	b.n	800f990 <__ssvfscanf_r+0xd54>
 800f92c:	0016      	movs	r6, r2
 800f92e:	633a      	str	r2, [r7, #48]	; 0x30
 800f930:	e7f1      	b.n	800f916 <__ssvfscanf_r+0xcda>
 800f932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f934:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f936:	6852      	ldr	r2, [r2, #4]
 800f938:	3a01      	subs	r2, #1
 800f93a:	604a      	str	r2, [r1, #4]
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	600a      	str	r2, [r1, #0]
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	1c62      	adds	r2, r4, #1
 800f944:	623a      	str	r2, [r7, #32]
 800f946:	7023      	strb	r3, [r4, #0]
 800f948:	2e00      	cmp	r6, #0
 800f94a:	d010      	beq.n	800f96e <__ssvfscanf_r+0xd32>
 800f94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94e:	1b54      	subs	r4, r2, r5
 800f950:	429c      	cmp	r4, r3
 800f952:	d30c      	bcc.n	800f96e <__ssvfscanf_r+0xd32>
 800f954:	005b      	lsls	r3, r3, #1
 800f956:	0028      	movs	r0, r5
 800f958:	0019      	movs	r1, r3
 800f95a:	633b      	str	r3, [r7, #48]	; 0x30
 800f95c:	f001 fc68 	bl	8011230 <realloc>
 800f960:	1e05      	subs	r5, r0, #0
 800f962:	d101      	bne.n	800f968 <__ssvfscanf_r+0xd2c>
 800f964:	f7ff fa40 	bl	800ede8 <__ssvfscanf_r+0x1ac>
 800f968:	1903      	adds	r3, r0, r4
 800f96a:	623b      	str	r3, [r7, #32]
 800f96c:	6030      	str	r0, [r6, #0]
 800f96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f970:	3b01      	subs	r3, #1
 800f972:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f974:	2b00      	cmp	r3, #0
 800f976:	d00b      	beq.n	800f990 <__ssvfscanf_r+0xd54>
 800f978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	dd01      	ble.n	800f984 <__ssvfscanf_r+0xd48>
 800f980:	6a3c      	ldr	r4, [r7, #32]
 800f982:	e7c9      	b.n	800f918 <__ssvfscanf_r+0xcdc>
 800f984:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f986:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f988:	f002 f8ec 	bl	8011b64 <__ssrefill_r>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d0f7      	beq.n	800f980 <__ssvfscanf_r+0xd44>
 800f990:	2300      	movs	r3, #0
 800f992:	6a3a      	ldr	r2, [r7, #32]
 800f994:	7013      	strb	r3, [r2, #0]
 800f996:	1b55      	subs	r5, r2, r5
 800f998:	2e00      	cmp	r6, #0
 800f99a:	d009      	beq.n	800f9b0 <__ssvfscanf_r+0xd74>
 800f99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99e:	1c69      	adds	r1, r5, #1
 800f9a0:	428b      	cmp	r3, r1
 800f9a2:	d905      	bls.n	800f9b0 <__ssvfscanf_r+0xd74>
 800f9a4:	6830      	ldr	r0, [r6, #0]
 800f9a6:	f001 fc43 	bl	8011230 <realloc>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d000      	beq.n	800f9b0 <__ssvfscanf_r+0xd74>
 800f9ae:	6030      	str	r0, [r6, #0]
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b2:	195b      	adds	r3, r3, r5
 800f9b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9bc:	e63c      	b.n	800f638 <__ssvfscanf_r+0x9fc>
 800f9be:	22ae      	movs	r2, #174	; 0xae
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9c4:	0052      	lsls	r2, r2, #1
 800f9c6:	3b01      	subs	r3, #1
 800f9c8:	6239      	str	r1, [r7, #32]
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d906      	bls.n	800f9dc <__ssvfscanf_r+0xda0>
 800f9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d0:	3b5e      	subs	r3, #94	; 0x5e
 800f9d2:	3bff      	subs	r3, #255	; 0xff
 800f9d4:	623b      	str	r3, [r7, #32]
 800f9d6:	235e      	movs	r3, #94	; 0x5e
 800f9d8:	33ff      	adds	r3, #255	; 0xff
 800f9da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9dc:	24d8      	movs	r4, #216	; 0xd8
 800f9de:	2300      	movs	r3, #0
 800f9e0:	2248      	movs	r2, #72	; 0x48
 800f9e2:	0124      	lsls	r4, r4, #4
 800f9e4:	4334      	orrs	r4, r6
 800f9e6:	2680      	movs	r6, #128	; 0x80
 800f9e8:	61fb      	str	r3, [r7, #28]
 800f9ea:	3319      	adds	r3, #25
 800f9ec:	33ff      	adds	r3, #255	; 0xff
 800f9ee:	189b      	adds	r3, r3, r2
 800f9f0:	19dd      	adds	r5, r3, r7
 800f9f2:	00b6      	lsls	r6, r6, #2
 800f9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	7813      	ldrb	r3, [r2, #0]
 800f9fa:	2b39      	cmp	r3, #57	; 0x39
 800f9fc:	d80f      	bhi.n	800fa1e <__ssvfscanf_r+0xde2>
 800f9fe:	2b2a      	cmp	r3, #42	; 0x2a
 800fa00:	d91b      	bls.n	800fa3a <__ssvfscanf_r+0xdfe>
 800fa02:	0018      	movs	r0, r3
 800fa04:	382b      	subs	r0, #43	; 0x2b
 800fa06:	280e      	cmp	r0, #14
 800fa08:	d817      	bhi.n	800fa3a <__ssvfscanf_r+0xdfe>
 800fa0a:	f7f0 fb83 	bl	8000114 <__gnu_thumb1_case_uqi>
 800fa0e:	168f      	.short	0x168f
 800fa10:	5416168f 	.word	0x5416168f
 800fa14:	80808080 	.word	0x80808080
 800fa18:	87808080 	.word	0x87808080
 800fa1c:	87          	.byte	0x87
 800fa1d:	00          	.byte	0x00
 800fa1e:	2b66      	cmp	r3, #102	; 0x66
 800fa20:	d83a      	bhi.n	800fa98 <__ssvfscanf_r+0xe5c>
 800fa22:	2b60      	cmp	r3, #96	; 0x60
 800fa24:	d803      	bhi.n	800fa2e <__ssvfscanf_r+0xdf2>
 800fa26:	2b46      	cmp	r3, #70	; 0x46
 800fa28:	d805      	bhi.n	800fa36 <__ssvfscanf_r+0xdfa>
 800fa2a:	2b40      	cmp	r3, #64	; 0x40
 800fa2c:	d905      	bls.n	800fa3a <__ssvfscanf_r+0xdfe>
 800fa2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa30:	290a      	cmp	r1, #10
 800fa32:	dc71      	bgt.n	800fb18 <__ssvfscanf_r+0xedc>
 800fa34:	e001      	b.n	800fa3a <__ssvfscanf_r+0xdfe>
 800fa36:	2b58      	cmp	r3, #88	; 0x58
 800fa38:	d030      	beq.n	800fa9c <__ssvfscanf_r+0xe60>
 800fa3a:	05e3      	lsls	r3, r4, #23
 800fa3c:	d515      	bpl.n	800fa6a <__ssvfscanf_r+0xe2e>
 800fa3e:	238c      	movs	r3, #140	; 0x8c
 800fa40:	2248      	movs	r2, #72	; 0x48
 800fa42:	005b      	lsls	r3, r3, #1
 800fa44:	189b      	adds	r3, r3, r2
 800fa46:	19db      	adds	r3, r3, r7
 800fa48:	429d      	cmp	r5, r3
 800fa4a:	d905      	bls.n	800fa58 <__ssvfscanf_r+0xe1c>
 800fa4c:	3d01      	subs	r5, #1
 800fa4e:	7829      	ldrb	r1, [r5, #0]
 800fa50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa54:	f002 f84a 	bl	8011aec <_sungetc_r>
 800fa58:	238c      	movs	r3, #140	; 0x8c
 800fa5a:	2248      	movs	r2, #72	; 0x48
 800fa5c:	005b      	lsls	r3, r3, #1
 800fa5e:	189b      	adds	r3, r3, r2
 800fa60:	19db      	adds	r3, r3, r7
 800fa62:	429d      	cmp	r5, r3
 800fa64:	d101      	bne.n	800fa6a <__ssvfscanf_r+0xe2e>
 800fa66:	f7ff f9e6 	bl	800ee36 <__ssvfscanf_r+0x1fa>
 800fa6a:	2310      	movs	r3, #16
 800fa6c:	0022      	movs	r2, r4
 800fa6e:	401a      	ands	r2, r3
 800fa70:	421c      	tst	r4, r3
 800fa72:	d171      	bne.n	800fb58 <__ssvfscanf_r+0xf1c>
 800fa74:	218c      	movs	r1, #140	; 0x8c
 800fa76:	2048      	movs	r0, #72	; 0x48
 800fa78:	0049      	lsls	r1, r1, #1
 800fa7a:	1809      	adds	r1, r1, r0
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	697e      	ldr	r6, [r7, #20]
 800fa80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa82:	19c9      	adds	r1, r1, r7
 800fa84:	702a      	strb	r2, [r5, #0]
 800fa86:	47b0      	blx	r6
 800fa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8a:	1d1e      	adds	r6, r3, #4
 800fa8c:	06a3      	lsls	r3, r4, #26
 800fa8e:	d559      	bpl.n	800fb44 <__ssvfscanf_r+0xf08>
 800fa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	6018      	str	r0, [r3, #0]
 800fa96:	e05b      	b.n	800fb50 <__ssvfscanf_r+0xf14>
 800fa98:	2b78      	cmp	r3, #120	; 0x78
 800fa9a:	d1ce      	bne.n	800fa3a <__ssvfscanf_r+0xdfe>
 800fa9c:	21c0      	movs	r1, #192	; 0xc0
 800fa9e:	00c9      	lsls	r1, r1, #3
 800faa0:	4021      	ands	r1, r4
 800faa2:	42b1      	cmp	r1, r6
 800faa4:	d1c9      	bne.n	800fa3a <__ssvfscanf_r+0xdfe>
 800faa6:	4934      	ldr	r1, [pc, #208]	; (800fb78 <__ssvfscanf_r+0xf3c>)
 800faa8:	4021      	ands	r1, r4
 800faaa:	24a0      	movs	r4, #160	; 0xa0
 800faac:	00e4      	lsls	r4, r4, #3
 800faae:	430c      	orrs	r4, r1
 800fab0:	2110      	movs	r1, #16
 800fab2:	6279      	str	r1, [r7, #36]	; 0x24
 800fab4:	e00b      	b.n	800face <__ssvfscanf_r+0xe92>
 800fab6:	0521      	lsls	r1, r4, #20
 800fab8:	d509      	bpl.n	800face <__ssvfscanf_r+0xe92>
 800faba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fabc:	2900      	cmp	r1, #0
 800fabe:	d102      	bne.n	800fac6 <__ssvfscanf_r+0xe8a>
 800fac0:	3108      	adds	r1, #8
 800fac2:	4334      	orrs	r4, r6
 800fac4:	6279      	str	r1, [r7, #36]	; 0x24
 800fac6:	0561      	lsls	r1, r4, #21
 800fac8:	d504      	bpl.n	800fad4 <__ssvfscanf_r+0xe98>
 800faca:	492c      	ldr	r1, [pc, #176]	; (800fb7c <__ssvfscanf_r+0xf40>)
 800facc:	400c      	ands	r4, r1
 800face:	702b      	strb	r3, [r5, #0]
 800fad0:	3501      	adds	r5, #1
 800fad2:	e00c      	b.n	800faee <__ssvfscanf_r+0xeb2>
 800fad4:	4b2a      	ldr	r3, [pc, #168]	; (800fb80 <__ssvfscanf_r+0xf44>)
 800fad6:	401c      	ands	r4, r3
 800fad8:	6a3b      	ldr	r3, [r7, #32]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d004      	beq.n	800fae8 <__ssvfscanf_r+0xeac>
 800fade:	3b01      	subs	r3, #1
 800fae0:	623b      	str	r3, [r7, #32]
 800fae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fae4:	3301      	adds	r3, #1
 800fae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	3301      	adds	r3, #1
 800faec:	61fb      	str	r3, [r7, #28]
 800faee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faf0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	604b      	str	r3, [r1, #4]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	dd1c      	ble.n	800fb36 <__ssvfscanf_r+0xefa>
 800fafc:	3201      	adds	r2, #1
 800fafe:	600a      	str	r2, [r1, #0]
 800fb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb02:	3b01      	subs	r3, #1
 800fb04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d000      	beq.n	800fb0c <__ssvfscanf_r+0xed0>
 800fb0a:	e773      	b.n	800f9f4 <__ssvfscanf_r+0xdb8>
 800fb0c:	e795      	b.n	800fa3a <__ssvfscanf_r+0xdfe>
 800fb0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb10:	491c      	ldr	r1, [pc, #112]	; (800fb84 <__ssvfscanf_r+0xf48>)
 800fb12:	0040      	lsls	r0, r0, #1
 800fb14:	5e41      	ldrsh	r1, [r0, r1]
 800fb16:	6279      	str	r1, [r7, #36]	; 0x24
 800fb18:	491b      	ldr	r1, [pc, #108]	; (800fb88 <__ssvfscanf_r+0xf4c>)
 800fb1a:	e7d7      	b.n	800facc <__ssvfscanf_r+0xe90>
 800fb1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb1e:	4919      	ldr	r1, [pc, #100]	; (800fb84 <__ssvfscanf_r+0xf48>)
 800fb20:	0040      	lsls	r0, r0, #1
 800fb22:	5e41      	ldrsh	r1, [r0, r1]
 800fb24:	6279      	str	r1, [r7, #36]	; 0x24
 800fb26:	2908      	cmp	r1, #8
 800fb28:	dcf6      	bgt.n	800fb18 <__ssvfscanf_r+0xedc>
 800fb2a:	e786      	b.n	800fa3a <__ssvfscanf_r+0xdfe>
 800fb2c:	2180      	movs	r1, #128	; 0x80
 800fb2e:	420c      	tst	r4, r1
 800fb30:	d083      	beq.n	800fa3a <__ssvfscanf_r+0xdfe>
 800fb32:	438c      	bics	r4, r1
 800fb34:	e7cb      	b.n	800face <__ssvfscanf_r+0xe92>
 800fb36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb3a:	f002 f813 	bl	8011b64 <__ssrefill_r>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d0de      	beq.n	800fb00 <__ssvfscanf_r+0xec4>
 800fb42:	e77a      	b.n	800fa3a <__ssvfscanf_r+0xdfe>
 800fb44:	2308      	movs	r3, #8
 800fb46:	421c      	tst	r4, r3
 800fb48:	d020      	beq.n	800fb8c <__ssvfscanf_r+0xf50>
 800fb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	7018      	strb	r0, [r3, #0]
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	633e      	str	r6, [r7, #48]	; 0x30
 800fb54:	3301      	adds	r3, #1
 800fb56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb58:	238c      	movs	r3, #140	; 0x8c
 800fb5a:	2248      	movs	r2, #72	; 0x48
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	189b      	adds	r3, r3, r2
 800fb60:	19db      	adds	r3, r3, r7
 800fb62:	1aed      	subs	r5, r5, r3
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	18ed      	adds	r5, r5, r3
 800fb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6a:	195b      	adds	r3, r3, r5
 800fb6c:	f7ff f92d 	bl	800edca <__ssvfscanf_r+0x18e>
 800fb70:	08014971 	.word	0x08014971
 800fb74:	0000fff6 	.word	0x0000fff6
 800fb78:	fffffdff 	.word	0xfffffdff
 800fb7c:	fffffa7f 	.word	0xfffffa7f
 800fb80:	fffffc7f 	.word	0xfffffc7f
 800fb84:	08014c9e 	.word	0x08014c9e
 800fb88:	fffff47f 	.word	0xfffff47f
 800fb8c:	0763      	lsls	r3, r4, #29
 800fb8e:	d503      	bpl.n	800fb98 <__ssvfscanf_r+0xf5c>
 800fb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	8018      	strh	r0, [r3, #0]
 800fb96:	e7db      	b.n	800fb50 <__ssvfscanf_r+0xf14>
 800fb98:	2301      	movs	r3, #1
 800fb9a:	0022      	movs	r2, r4
 800fb9c:	401a      	ands	r2, r3
 800fb9e:	421c      	tst	r4, r3
 800fba0:	d000      	beq.n	800fba4 <__ssvfscanf_r+0xf68>
 800fba2:	e775      	b.n	800fa90 <__ssvfscanf_r+0xe54>
 800fba4:	07a4      	lsls	r4, r4, #30
 800fba6:	d400      	bmi.n	800fbaa <__ssvfscanf_r+0xf6e>
 800fba8:	e772      	b.n	800fa90 <__ssvfscanf_r+0xe54>
 800fbaa:	4ba8      	ldr	r3, [pc, #672]	; (800fe4c <__ssvfscanf_r+0x1210>)
 800fbac:	6979      	ldr	r1, [r7, #20]
 800fbae:	4299      	cmp	r1, r3
 800fbb0:	d10c      	bne.n	800fbcc <__ssvfscanf_r+0xf90>
 800fbb2:	218c      	movs	r1, #140	; 0x8c
 800fbb4:	2048      	movs	r0, #72	; 0x48
 800fbb6:	0049      	lsls	r1, r1, #1
 800fbb8:	1809      	adds	r1, r1, r0
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fbbe:	19c9      	adds	r1, r1, r7
 800fbc0:	f001 fecc 	bl	801195c <_strtoull_r>
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	c303      	stmia	r3!, {r0, r1}
 800fbca:	e7c1      	b.n	800fb50 <__ssvfscanf_r+0xf14>
 800fbcc:	218c      	movs	r1, #140	; 0x8c
 800fbce:	2048      	movs	r0, #72	; 0x48
 800fbd0:	0049      	lsls	r1, r1, #1
 800fbd2:	1809      	adds	r1, r1, r0
 800fbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fbd8:	19c9      	adds	r1, r1, r7
 800fbda:	f001 fe0d 	bl	80117f8 <_strtoll_r>
 800fbde:	e7f1      	b.n	800fbc4 <__ssvfscanf_r+0xf88>
 800fbe0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fbe2:	f000 fb9f 	bl	8010324 <_localeconv_r>
 800fbe6:	22ae      	movs	r2, #174	; 0xae
 800fbe8:	2100      	movs	r1, #0
 800fbea:	6803      	ldr	r3, [r0, #0]
 800fbec:	0052      	lsls	r2, r2, #1
 800fbee:	603b      	str	r3, [r7, #0]
 800fbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf2:	60f9      	str	r1, [r7, #12]
 800fbf4:	3b01      	subs	r3, #1
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d906      	bls.n	800fc08 <__ssvfscanf_r+0xfcc>
 800fbfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbfc:	3b5e      	subs	r3, #94	; 0x5e
 800fbfe:	3bff      	subs	r3, #255	; 0xff
 800fc00:	60fb      	str	r3, [r7, #12]
 800fc02:	235e      	movs	r3, #94	; 0x5e
 800fc04:	33ff      	adds	r3, #255	; 0xff
 800fc06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc08:	23f0      	movs	r3, #240	; 0xf0
 800fc0a:	00db      	lsls	r3, r3, #3
 800fc0c:	431e      	orrs	r6, r3
 800fc0e:	238c      	movs	r3, #140	; 0x8c
 800fc10:	2248      	movs	r2, #72	; 0x48
 800fc12:	2400      	movs	r4, #0
 800fc14:	005b      	lsls	r3, r3, #1
 800fc16:	189b      	adds	r3, r3, r2
 800fc18:	623c      	str	r4, [r7, #32]
 800fc1a:	607c      	str	r4, [r7, #4]
 800fc1c:	60bc      	str	r4, [r7, #8]
 800fc1e:	61fc      	str	r4, [r7, #28]
 800fc20:	613c      	str	r4, [r7, #16]
 800fc22:	19dd      	adds	r5, r3, r7
 800fc24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	781a      	ldrb	r2, [r3, #0]
 800fc2a:	0010      	movs	r0, r2
 800fc2c:	382b      	subs	r0, #43	; 0x2b
 800fc2e:	284e      	cmp	r0, #78	; 0x4e
 800fc30:	d900      	bls.n	800fc34 <__ssvfscanf_r+0xff8>
 800fc32:	e133      	b.n	800fe9c <__ssvfscanf_r+0x1260>
 800fc34:	f7f0 fa78 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fc38:	0132009b 	.word	0x0132009b
 800fc3c:	0132009b 	.word	0x0132009b
 800fc40:	004f0132 	.word	0x004f0132
 800fc44:	00720072 	.word	0x00720072
 800fc48:	00720072 	.word	0x00720072
 800fc4c:	00720072 	.word	0x00720072
 800fc50:	00720072 	.word	0x00720072
 800fc54:	01320072 	.word	0x01320072
 800fc58:	01320132 	.word	0x01320132
 800fc5c:	01320132 	.word	0x01320132
 800fc60:	01320132 	.word	0x01320132
 800fc64:	007b00bc 	.word	0x007b00bc
 800fc68:	007b007b 	.word	0x007b007b
 800fc6c:	00f7012f 	.word	0x00f7012f
 800fc70:	01320132 	.word	0x01320132
 800fc74:	013200e3 	.word	0x013200e3
 800fc78:	01320132 	.word	0x01320132
 800fc7c:	00a00132 	.word	0x00a00132
 800fc80:	01120132 	.word	0x01120132
 800fc84:	01320132 	.word	0x01320132
 800fc88:	01010132 	.word	0x01010132
 800fc8c:	01320132 	.word	0x01320132
 800fc90:	00820132 	.word	0x00820132
 800fc94:	01320105 	.word	0x01320105
 800fc98:	01320132 	.word	0x01320132
 800fc9c:	01320132 	.word	0x01320132
 800fca0:	01320132 	.word	0x01320132
 800fca4:	007b00bc 	.word	0x007b00bc
 800fca8:	007b007b 	.word	0x007b007b
 800fcac:	00f7012f 	.word	0x00f7012f
 800fcb0:	01320132 	.word	0x01320132
 800fcb4:	013200e3 	.word	0x013200e3
 800fcb8:	01320132 	.word	0x01320132
 800fcbc:	00a00132 	.word	0x00a00132
 800fcc0:	01120132 	.word	0x01120132
 800fcc4:	01320132 	.word	0x01320132
 800fcc8:	01010132 	.word	0x01010132
 800fccc:	01320132 	.word	0x01320132
 800fcd0:	00820132 	.word	0x00820132
 800fcd4:	0105      	.short	0x0105
 800fcd6:	05f1      	lsls	r1, r6, #23
 800fcd8:	d520      	bpl.n	800fd1c <__ssvfscanf_r+0x10e0>
 800fcda:	2280      	movs	r2, #128	; 0x80
 800fcdc:	4396      	bics	r6, r2
 800fcde:	69fa      	ldr	r2, [r7, #28]
 800fce0:	3201      	adds	r2, #1
 800fce2:	61fa      	str	r2, [r7, #28]
 800fce4:	68fa      	ldr	r2, [r7, #12]
 800fce6:	2a00      	cmp	r2, #0
 800fce8:	d004      	beq.n	800fcf4 <__ssvfscanf_r+0x10b8>
 800fcea:	3a01      	subs	r2, #1
 800fcec:	60fa      	str	r2, [r7, #12]
 800fcee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcf0:	3201      	adds	r2, #1
 800fcf2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fcf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fcf8:	3a01      	subs	r2, #1
 800fcfa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fcfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcfe:	3201      	adds	r2, #1
 800fd00:	63ba      	str	r2, [r7, #56]	; 0x38
 800fd02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd04:	6852      	ldr	r2, [r2, #4]
 800fd06:	3a01      	subs	r2, #1
 800fd08:	604a      	str	r2, [r1, #4]
 800fd0a:	2a00      	cmp	r2, #0
 800fd0c:	dc00      	bgt.n	800fd10 <__ssvfscanf_r+0x10d4>
 800fd0e:	e0d6      	b.n	800febe <__ssvfscanf_r+0x1282>
 800fd10:	3301      	adds	r3, #1
 800fd12:	600b      	str	r3, [r1, #0]
 800fd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d184      	bne.n	800fc24 <__ssvfscanf_r+0xfe8>
 800fd1a:	e057      	b.n	800fdcc <__ssvfscanf_r+0x1190>
 800fd1c:	6a39      	ldr	r1, [r7, #32]
 800fd1e:	1909      	adds	r1, r1, r4
 800fd20:	2900      	cmp	r1, #0
 800fd22:	d153      	bne.n	800fdcc <__ssvfscanf_r+0x1190>
 800fd24:	494a      	ldr	r1, [pc, #296]	; (800fe50 <__ssvfscanf_r+0x1214>)
 800fd26:	400e      	ands	r6, r1
 800fd28:	702a      	strb	r2, [r5, #0]
 800fd2a:	3501      	adds	r5, #1
 800fd2c:	e7e2      	b.n	800fcf4 <__ssvfscanf_r+0x10b8>
 800fd2e:	0531      	lsls	r1, r6, #20
 800fd30:	d54c      	bpl.n	800fdcc <__ssvfscanf_r+0x1190>
 800fd32:	6a39      	ldr	r1, [r7, #32]
 800fd34:	1909      	adds	r1, r1, r4
 800fd36:	2900      	cmp	r1, #0
 800fd38:	d040      	beq.n	800fdbc <__ssvfscanf_r+0x1180>
 800fd3a:	e047      	b.n	800fdcc <__ssvfscanf_r+0x1190>
 800fd3c:	2198      	movs	r1, #152	; 0x98
 800fd3e:	2080      	movs	r0, #128	; 0x80
 800fd40:	0109      	lsls	r1, r1, #4
 800fd42:	4031      	ands	r1, r6
 800fd44:	0040      	lsls	r0, r0, #1
 800fd46:	4281      	cmp	r1, r0
 800fd48:	d140      	bne.n	800fdcc <__ssvfscanf_r+0x1190>
 800fd4a:	69f9      	ldr	r1, [r7, #28]
 800fd4c:	2901      	cmp	r1, #1
 800fd4e:	d13d      	bne.n	800fdcc <__ssvfscanf_r+0x1190>
 800fd50:	2080      	movs	r0, #128	; 0x80
 800fd52:	4940      	ldr	r1, [pc, #256]	; (800fe54 <__ssvfscanf_r+0x1218>)
 800fd54:	0100      	lsls	r0, r0, #4
 800fd56:	400e      	ands	r6, r1
 800fd58:	3132      	adds	r1, #50	; 0x32
 800fd5a:	31ff      	adds	r1, #255	; 0xff
 800fd5c:	7029      	strb	r1, [r5, #0]
 800fd5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd60:	4306      	orrs	r6, r0
 800fd62:	3901      	subs	r1, #1
 800fd64:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fd66:	3501      	adds	r5, #1
 800fd68:	2100      	movs	r1, #0
 800fd6a:	61f9      	str	r1, [r7, #28]
 800fd6c:	e7dc      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800fd6e:	2180      	movs	r1, #128	; 0x80
 800fd70:	420e      	tst	r6, r1
 800fd72:	d02b      	beq.n	800fdcc <__ssvfscanf_r+0x1190>
 800fd74:	438e      	bics	r6, r1
 800fd76:	e7d7      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800fd78:	6a39      	ldr	r1, [r7, #32]
 800fd7a:	2900      	cmp	r1, #0
 800fd7c:	d10d      	bne.n	800fd9a <__ssvfscanf_r+0x115e>
 800fd7e:	69f9      	ldr	r1, [r7, #28]
 800fd80:	2900      	cmp	r1, #0
 800fd82:	d10e      	bne.n	800fda2 <__ssvfscanf_r+0x1166>
 800fd84:	21e0      	movs	r1, #224	; 0xe0
 800fd86:	0030      	movs	r0, r6
 800fd88:	00c9      	lsls	r1, r1, #3
 800fd8a:	4008      	ands	r0, r1
 800fd8c:	4288      	cmp	r0, r1
 800fd8e:	d108      	bne.n	800fda2 <__ssvfscanf_r+0x1166>
 800fd90:	4931      	ldr	r1, [pc, #196]	; (800fe58 <__ssvfscanf_r+0x121c>)
 800fd92:	400e      	ands	r6, r1
 800fd94:	2101      	movs	r1, #1
 800fd96:	6239      	str	r1, [r7, #32]
 800fd98:	e7c6      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800fd9a:	6a39      	ldr	r1, [r7, #32]
 800fd9c:	2902      	cmp	r1, #2
 800fd9e:	d100      	bne.n	800fda2 <__ssvfscanf_r+0x1166>
 800fda0:	e089      	b.n	800feb6 <__ssvfscanf_r+0x127a>
 800fda2:	2c01      	cmp	r4, #1
 800fda4:	d001      	beq.n	800fdaa <__ssvfscanf_r+0x116e>
 800fda6:	2c04      	cmp	r4, #4
 800fda8:	d110      	bne.n	800fdcc <__ssvfscanf_r+0x1190>
 800fdaa:	3401      	adds	r4, #1
 800fdac:	b2e4      	uxtb	r4, r4
 800fdae:	e7bb      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800fdb0:	0531      	lsls	r1, r6, #20
 800fdb2:	d508      	bpl.n	800fdc6 <__ssvfscanf_r+0x118a>
 800fdb4:	6a39      	ldr	r1, [r7, #32]
 800fdb6:	1909      	adds	r1, r1, r4
 800fdb8:	2900      	cmp	r1, #0
 800fdba:	d104      	bne.n	800fdc6 <__ssvfscanf_r+0x118a>
 800fdbc:	4824      	ldr	r0, [pc, #144]	; (800fe50 <__ssvfscanf_r+0x1214>)
 800fdbe:	000c      	movs	r4, r1
 800fdc0:	4006      	ands	r6, r0
 800fdc2:	6239      	str	r1, [r7, #32]
 800fdc4:	e7b0      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800fdc6:	6a39      	ldr	r1, [r7, #32]
 800fdc8:	2901      	cmp	r1, #1
 800fdca:	d076      	beq.n	800feba <__ssvfscanf_r+0x127e>
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d001      	beq.n	800fdd6 <__ssvfscanf_r+0x119a>
 800fdd2:	4b20      	ldr	r3, [pc, #128]	; (800fe54 <__ssvfscanf_r+0x1218>)
 800fdd4:	401e      	ands	r6, r3
 800fdd6:	6a3b      	ldr	r3, [r7, #32]
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d877      	bhi.n	800fece <__ssvfscanf_r+0x1292>
 800fdde:	238c      	movs	r3, #140	; 0x8c
 800fde0:	2248      	movs	r2, #72	; 0x48
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	189b      	adds	r3, r3, r2
 800fde6:	19db      	adds	r3, r3, r7
 800fde8:	429d      	cmp	r5, r3
 800fdea:	d801      	bhi.n	800fdf0 <__ssvfscanf_r+0x11b4>
 800fdec:	f7ff f823 	bl	800ee36 <__ssvfscanf_r+0x1fa>
 800fdf0:	3d01      	subs	r5, #1
 800fdf2:	7829      	ldrb	r1, [r5, #0]
 800fdf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fdf8:	f001 fe78 	bl	8011aec <_sungetc_r>
 800fdfc:	e7ef      	b.n	800fdde <__ssvfscanf_r+0x11a2>
 800fdfe:	2c00      	cmp	r4, #0
 800fe00:	d10c      	bne.n	800fe1c <__ssvfscanf_r+0x11e0>
 800fe02:	69f9      	ldr	r1, [r7, #28]
 800fe04:	2900      	cmp	r1, #0
 800fe06:	d1e4      	bne.n	800fdd2 <__ssvfscanf_r+0x1196>
 800fe08:	21e0      	movs	r1, #224	; 0xe0
 800fe0a:	0030      	movs	r0, r6
 800fe0c:	00c9      	lsls	r1, r1, #3
 800fe0e:	4008      	ands	r0, r1
 800fe10:	4288      	cmp	r0, r1
 800fe12:	d1e0      	bne.n	800fdd6 <__ssvfscanf_r+0x119a>
 800fe14:	4910      	ldr	r1, [pc, #64]	; (800fe58 <__ssvfscanf_r+0x121c>)
 800fe16:	3401      	adds	r4, #1
 800fe18:	400e      	ands	r6, r1
 800fe1a:	e785      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800fe1c:	20fd      	movs	r0, #253	; 0xfd
 800fe1e:	1ee1      	subs	r1, r4, #3
 800fe20:	4201      	tst	r1, r0
 800fe22:	d1d3      	bne.n	800fdcc <__ssvfscanf_r+0x1190>
 800fe24:	e7c1      	b.n	800fdaa <__ssvfscanf_r+0x116e>
 800fe26:	0531      	lsls	r1, r6, #20
 800fe28:	d503      	bpl.n	800fe32 <__ssvfscanf_r+0x11f6>
 800fe2a:	6a39      	ldr	r1, [r7, #32]
 800fe2c:	1909      	adds	r1, r1, r4
 800fe2e:	2900      	cmp	r1, #0
 800fe30:	d0c4      	beq.n	800fdbc <__ssvfscanf_r+0x1180>
 800fe32:	2c02      	cmp	r4, #2
 800fe34:	d1ca      	bne.n	800fdcc <__ssvfscanf_r+0x1190>
 800fe36:	2403      	movs	r4, #3
 800fe38:	e776      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800fe3a:	2c06      	cmp	r4, #6
 800fe3c:	d1c6      	bne.n	800fdcc <__ssvfscanf_r+0x1190>
 800fe3e:	2407      	movs	r4, #7
 800fe40:	e772      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800fe42:	2c07      	cmp	r4, #7
 800fe44:	d1c2      	bne.n	800fdcc <__ssvfscanf_r+0x1190>
 800fe46:	2408      	movs	r4, #8
 800fe48:	e76e      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800fe4a:	46c0      	nop			; (mov r8, r8)
 800fe4c:	08011695 	.word	0x08011695
 800fe50:	fffffe7f 	.word	0xfffffe7f
 800fe54:	fffffeff 	.word	0xfffffeff
 800fe58:	fffff87f 	.word	0xfffff87f
 800fe5c:	0531      	lsls	r1, r6, #20
 800fe5e:	d5b5      	bpl.n	800fdcc <__ssvfscanf_r+0x1190>
 800fe60:	21a0      	movs	r1, #160	; 0xa0
 800fe62:	2080      	movs	r0, #128	; 0x80
 800fe64:	00c9      	lsls	r1, r1, #3
 800fe66:	00c0      	lsls	r0, r0, #3
 800fe68:	4031      	ands	r1, r6
 800fe6a:	4281      	cmp	r1, r0
 800fe6c:	d004      	beq.n	800fe78 <__ssvfscanf_r+0x123c>
 800fe6e:	4206      	tst	r6, r0
 800fe70:	d0ac      	beq.n	800fdcc <__ssvfscanf_r+0x1190>
 800fe72:	69f9      	ldr	r1, [r7, #28]
 800fe74:	2900      	cmp	r1, #0
 800fe76:	d0ae      	beq.n	800fdd6 <__ssvfscanf_r+0x119a>
 800fe78:	2180      	movs	r1, #128	; 0x80
 800fe7a:	0089      	lsls	r1, r1, #2
 800fe7c:	420e      	tst	r6, r1
 800fe7e:	d104      	bne.n	800fe8a <__ssvfscanf_r+0x124e>
 800fe80:	69f9      	ldr	r1, [r7, #28]
 800fe82:	6938      	ldr	r0, [r7, #16]
 800fe84:	607d      	str	r5, [r7, #4]
 800fe86:	1a09      	subs	r1, r1, r0
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	20c0      	movs	r0, #192	; 0xc0
 800fe8c:	4973      	ldr	r1, [pc, #460]	; (801005c <__ssvfscanf_r+0x1420>)
 800fe8e:	0040      	lsls	r0, r0, #1
 800fe90:	400e      	ands	r6, r1
 800fe92:	4306      	orrs	r6, r0
 800fe94:	e768      	b.n	800fd68 <__ssvfscanf_r+0x112c>
 800fe96:	0531      	lsls	r1, r6, #20
 800fe98:	d5e2      	bpl.n	800fe60 <__ssvfscanf_r+0x1224>
 800fe9a:	e74a      	b.n	800fd32 <__ssvfscanf_r+0x10f6>
 800fe9c:	6839      	ldr	r1, [r7, #0]
 800fe9e:	7809      	ldrb	r1, [r1, #0]
 800fea0:	4291      	cmp	r1, r2
 800fea2:	d193      	bne.n	800fdcc <__ssvfscanf_r+0x1190>
 800fea4:	2180      	movs	r1, #128	; 0x80
 800fea6:	0089      	lsls	r1, r1, #2
 800fea8:	420e      	tst	r6, r1
 800feaa:	d08f      	beq.n	800fdcc <__ssvfscanf_r+0x1190>
 800feac:	496c      	ldr	r1, [pc, #432]	; (8010060 <__ssvfscanf_r+0x1424>)
 800feae:	400e      	ands	r6, r1
 800feb0:	69f9      	ldr	r1, [r7, #28]
 800feb2:	6139      	str	r1, [r7, #16]
 800feb4:	e738      	b.n	800fd28 <__ssvfscanf_r+0x10ec>
 800feb6:	2103      	movs	r1, #3
 800feb8:	e76d      	b.n	800fd96 <__ssvfscanf_r+0x115a>
 800feba:	2102      	movs	r1, #2
 800febc:	e76b      	b.n	800fd96 <__ssvfscanf_r+0x115a>
 800febe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fec0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fec2:	f001 fe4f 	bl	8011b64 <__ssrefill_r>
 800fec6:	2800      	cmp	r0, #0
 800fec8:	d100      	bne.n	800fecc <__ssvfscanf_r+0x1290>
 800feca:	e723      	b.n	800fd14 <__ssvfscanf_r+0x10d8>
 800fecc:	e77e      	b.n	800fdcc <__ssvfscanf_r+0x1190>
 800fece:	1e63      	subs	r3, r4, #1
 800fed0:	2b06      	cmp	r3, #6
 800fed2:	d825      	bhi.n	800ff20 <__ssvfscanf_r+0x12e4>
 800fed4:	2c02      	cmp	r4, #2
 800fed6:	d837      	bhi.n	800ff48 <__ssvfscanf_r+0x130c>
 800fed8:	238c      	movs	r3, #140	; 0x8c
 800feda:	2248      	movs	r2, #72	; 0x48
 800fedc:	005b      	lsls	r3, r3, #1
 800fede:	189b      	adds	r3, r3, r2
 800fee0:	19db      	adds	r3, r3, r7
 800fee2:	429d      	cmp	r5, r3
 800fee4:	d801      	bhi.n	800feea <__ssvfscanf_r+0x12ae>
 800fee6:	f7fe ffa6 	bl	800ee36 <__ssvfscanf_r+0x1fa>
 800feea:	3d01      	subs	r5, #1
 800feec:	7829      	ldrb	r1, [r5, #0]
 800feee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fef0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fef2:	f001 fdfb 	bl	8011aec <_sungetc_r>
 800fef6:	e7ef      	b.n	800fed8 <__ssvfscanf_r+0x129c>
 800fef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fefa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fefc:	3b01      	subs	r3, #1
 800fefe:	7819      	ldrb	r1, [r3, #0]
 800ff00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff04:	f001 fdf2 	bl	8011aec <_sungetc_r>
 800ff08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff0a:	6a3a      	ldr	r2, [r7, #32]
 800ff0c:	189b      	adds	r3, r3, r2
 800ff0e:	b2db      	uxtb	r3, r3
 800ff10:	2b03      	cmp	r3, #3
 800ff12:	d8f1      	bhi.n	800fef8 <__ssvfscanf_r+0x12bc>
 800ff14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff16:	3c03      	subs	r4, #3
 800ff18:	b2e4      	uxtb	r4, r4
 800ff1a:	1b1b      	subs	r3, r3, r4
 800ff1c:	1b2d      	subs	r5, r5, r4
 800ff1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff20:	05f3      	lsls	r3, r6, #23
 800ff22:	d52f      	bpl.n	800ff84 <__ssvfscanf_r+0x1348>
 800ff24:	0573      	lsls	r3, r6, #21
 800ff26:	d514      	bpl.n	800ff52 <__ssvfscanf_r+0x1316>
 800ff28:	238c      	movs	r3, #140	; 0x8c
 800ff2a:	2248      	movs	r2, #72	; 0x48
 800ff2c:	005b      	lsls	r3, r3, #1
 800ff2e:	189b      	adds	r3, r3, r2
 800ff30:	19db      	adds	r3, r3, r7
 800ff32:	429d      	cmp	r5, r3
 800ff34:	d801      	bhi.n	800ff3a <__ssvfscanf_r+0x12fe>
 800ff36:	f7fe ff7e 	bl	800ee36 <__ssvfscanf_r+0x1fa>
 800ff3a:	3d01      	subs	r5, #1
 800ff3c:	7829      	ldrb	r1, [r5, #0]
 800ff3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff42:	f001 fdd3 	bl	8011aec <_sungetc_r>
 800ff46:	e7ef      	b.n	800ff28 <__ssvfscanf_r+0x12ec>
 800ff48:	1b63      	subs	r3, r4, r5
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	63fd      	str	r5, [r7, #60]	; 0x3c
 800ff4e:	623b      	str	r3, [r7, #32]
 800ff50:	e7da      	b.n	800ff08 <__ssvfscanf_r+0x12cc>
 800ff52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff54:	1e6c      	subs	r4, r5, #1
 800ff56:	7821      	ldrb	r1, [r4, #0]
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff5c:	2965      	cmp	r1, #101	; 0x65
 800ff5e:	d00a      	beq.n	800ff76 <__ssvfscanf_r+0x133a>
 800ff60:	2945      	cmp	r1, #69	; 0x45
 800ff62:	d008      	beq.n	800ff76 <__ssvfscanf_r+0x133a>
 800ff64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff68:	f001 fdc0 	bl	8011aec <_sungetc_r>
 800ff6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6e:	1eac      	subs	r4, r5, #2
 800ff70:	3b02      	subs	r3, #2
 800ff72:	7821      	ldrb	r1, [r4, #0]
 800ff74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff76:	0025      	movs	r5, r4
 800ff78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff7c:	f001 fdb6 	bl	8011aec <_sungetc_r>
 800ff80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff82:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff84:	2310      	movs	r3, #16
 800ff86:	0032      	movs	r2, r6
 800ff88:	401a      	ands	r2, r3
 800ff8a:	421e      	tst	r6, r3
 800ff8c:	d001      	beq.n	800ff92 <__ssvfscanf_r+0x1356>
 800ff8e:	f7fe fe71 	bl	800ec74 <__ssvfscanf_r+0x38>
 800ff92:	23c0      	movs	r3, #192	; 0xc0
 800ff94:	2180      	movs	r1, #128	; 0x80
 800ff96:	00db      	lsls	r3, r3, #3
 800ff98:	702a      	strb	r2, [r5, #0]
 800ff9a:	4033      	ands	r3, r6
 800ff9c:	00c9      	lsls	r1, r1, #3
 800ff9e:	428b      	cmp	r3, r1
 800ffa0:	d11f      	bne.n	800ffe2 <__ssvfscanf_r+0x13a6>
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	69fa      	ldr	r2, [r7, #28]
 800ffa6:	69f9      	ldr	r1, [r7, #28]
 800ffa8:	1a9a      	subs	r2, r3, r2
 800ffaa:	428b      	cmp	r3, r1
 800ffac:	d125      	bne.n	800fffa <__ssvfscanf_r+0x13be>
 800ffae:	238c      	movs	r3, #140	; 0x8c
 800ffb0:	2148      	movs	r1, #72	; 0x48
 800ffb2:	005b      	lsls	r3, r3, #1
 800ffb4:	185b      	adds	r3, r3, r1
 800ffb6:	19d9      	adds	r1, r3, r7
 800ffb8:	2200      	movs	r2, #0
 800ffba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffbc:	f7fb ffca 	bl	800bf54 <_strtod_r>
 800ffc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc2:	0004      	movs	r4, r0
 800ffc4:	3304      	adds	r3, #4
 800ffc6:	000d      	movs	r5, r1
 800ffc8:	623b      	str	r3, [r7, #32]
 800ffca:	07f3      	lsls	r3, r6, #31
 800ffcc:	d523      	bpl.n	8010016 <__ssvfscanf_r+0x13da>
 800ffce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	601c      	str	r4, [r3, #0]
 800ffd4:	605d      	str	r5, [r3, #4]
 800ffd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd8:	3301      	adds	r3, #1
 800ffda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffdc:	6a3b      	ldr	r3, [r7, #32]
 800ffde:	f7fe ffa5 	bl	800ef2c <__ssvfscanf_r+0x2f0>
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d0e2      	beq.n	800ffae <__ssvfscanf_r+0x1372>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffec:	1c59      	adds	r1, r3, #1
 800ffee:	230a      	movs	r3, #10
 800fff0:	f7fc f84c 	bl	800c08c <_strtol_r>
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	687d      	ldr	r5, [r7, #4]
 800fff8:	1ac2      	subs	r2, r0, r3
 800fffa:	2148      	movs	r1, #72	; 0x48
 800fffc:	4b19      	ldr	r3, [pc, #100]	; (8010064 <__ssvfscanf_r+0x1428>)
 800fffe:	185b      	adds	r3, r3, r1
 8010000:	19db      	adds	r3, r3, r7
 8010002:	429d      	cmp	r5, r3
 8010004:	d302      	bcc.n	801000c <__ssvfscanf_r+0x13d0>
 8010006:	4b18      	ldr	r3, [pc, #96]	; (8010068 <__ssvfscanf_r+0x142c>)
 8010008:	185b      	adds	r3, r3, r1
 801000a:	19dd      	adds	r5, r3, r7
 801000c:	0028      	movs	r0, r5
 801000e:	4917      	ldr	r1, [pc, #92]	; (801006c <__ssvfscanf_r+0x1430>)
 8010010:	f7fc f944 	bl	800c29c <sprintf>
 8010014:	e7cb      	b.n	800ffae <__ssvfscanf_r+0x1372>
 8010016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801001c:	07b6      	lsls	r6, r6, #30
 801001e:	d4d8      	bmi.n	800ffd2 <__ssvfscanf_r+0x1396>
 8010020:	0002      	movs	r2, r0
 8010022:	000b      	movs	r3, r1
 8010024:	f7f2 f966 	bl	80022f4 <__aeabi_dcmpun>
 8010028:	2800      	cmp	r0, #0
 801002a:	d005      	beq.n	8010038 <__ssvfscanf_r+0x13fc>
 801002c:	4810      	ldr	r0, [pc, #64]	; (8010070 <__ssvfscanf_r+0x1434>)
 801002e:	f7fc fabf 	bl	800c5b0 <nanf>
 8010032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010034:	6018      	str	r0, [r3, #0]
 8010036:	e7ce      	b.n	800ffd6 <__ssvfscanf_r+0x139a>
 8010038:	0020      	movs	r0, r4
 801003a:	0029      	movs	r1, r5
 801003c:	f7f2 fa04 	bl	8002448 <__aeabi_d2f>
 8010040:	e7f7      	b.n	8010032 <__ssvfscanf_r+0x13f6>
 8010042:	00a3      	lsls	r3, r4, #2
 8010044:	18ed      	adds	r5, r5, r3
 8010046:	682b      	ldr	r3, [r5, #0]
 8010048:	3401      	adds	r4, #1
 801004a:	6818      	ldr	r0, [r3, #0]
 801004c:	f7fa ff32 	bl	800aeb4 <free>
 8010050:	2200      	movs	r2, #0
 8010052:	682b      	ldr	r3, [r5, #0]
 8010054:	601a      	str	r2, [r3, #0]
 8010056:	f7fe ffc3 	bl	800efe0 <__ssvfscanf_r+0x3a4>
 801005a:	46c0      	nop			; (mov r8, r8)
 801005c:	fffff07f 	.word	0xfffff07f
 8010060:	fffffd7f 	.word	0xfffffd7f
 8010064:	0000026b 	.word	0x0000026b
 8010068:	0000026a 	.word	0x0000026a
 801006c:	08014c98 	.word	0x08014c98
 8010070:	08014cfb 	.word	0x08014cfb

08010074 <_fclose_r>:
 8010074:	b570      	push	{r4, r5, r6, lr}
 8010076:	0005      	movs	r5, r0
 8010078:	1e0c      	subs	r4, r1, #0
 801007a:	d102      	bne.n	8010082 <_fclose_r+0xe>
 801007c:	2600      	movs	r6, #0
 801007e:	0030      	movs	r0, r6
 8010080:	bd70      	pop	{r4, r5, r6, pc}
 8010082:	2800      	cmp	r0, #0
 8010084:	d004      	beq.n	8010090 <_fclose_r+0x1c>
 8010086:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <_fclose_r+0x1c>
 801008c:	f7fc f89e 	bl	800c1cc <__sinit>
 8010090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010092:	07db      	lsls	r3, r3, #31
 8010094:	d405      	bmi.n	80100a2 <_fclose_r+0x2e>
 8010096:	89a3      	ldrh	r3, [r4, #12]
 8010098:	059b      	lsls	r3, r3, #22
 801009a:	d402      	bmi.n	80100a2 <_fclose_r+0x2e>
 801009c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801009e:	f7fc fa6b 	bl	800c578 <__retarget_lock_acquire_recursive>
 80100a2:	220c      	movs	r2, #12
 80100a4:	5ea3      	ldrsh	r3, [r4, r2]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d109      	bne.n	80100be <_fclose_r+0x4a>
 80100aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80100ac:	3301      	adds	r3, #1
 80100ae:	0016      	movs	r6, r2
 80100b0:	401e      	ands	r6, r3
 80100b2:	421a      	tst	r2, r3
 80100b4:	d1e2      	bne.n	801007c <_fclose_r+0x8>
 80100b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100b8:	f7fc fa5f 	bl	800c57a <__retarget_lock_release_recursive>
 80100bc:	e7df      	b.n	801007e <_fclose_r+0xa>
 80100be:	0021      	movs	r1, r4
 80100c0:	0028      	movs	r0, r5
 80100c2:	f000 f837 	bl	8010134 <__sflush_r>
 80100c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80100c8:	0006      	movs	r6, r0
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d006      	beq.n	80100dc <_fclose_r+0x68>
 80100ce:	0028      	movs	r0, r5
 80100d0:	69e1      	ldr	r1, [r4, #28]
 80100d2:	4798      	blx	r3
 80100d4:	2800      	cmp	r0, #0
 80100d6:	da01      	bge.n	80100dc <_fclose_r+0x68>
 80100d8:	2601      	movs	r6, #1
 80100da:	4276      	negs	r6, r6
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	061b      	lsls	r3, r3, #24
 80100e0:	d503      	bpl.n	80100ea <_fclose_r+0x76>
 80100e2:	0028      	movs	r0, r5
 80100e4:	6921      	ldr	r1, [r4, #16]
 80100e6:	f7fc facf 	bl	800c688 <_free_r>
 80100ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80100ec:	2900      	cmp	r1, #0
 80100ee:	d008      	beq.n	8010102 <_fclose_r+0x8e>
 80100f0:	0023      	movs	r3, r4
 80100f2:	3340      	adds	r3, #64	; 0x40
 80100f4:	4299      	cmp	r1, r3
 80100f6:	d002      	beq.n	80100fe <_fclose_r+0x8a>
 80100f8:	0028      	movs	r0, r5
 80100fa:	f7fc fac5 	bl	800c688 <_free_r>
 80100fe:	2300      	movs	r3, #0
 8010100:	6323      	str	r3, [r4, #48]	; 0x30
 8010102:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010104:	2900      	cmp	r1, #0
 8010106:	d004      	beq.n	8010112 <_fclose_r+0x9e>
 8010108:	0028      	movs	r0, r5
 801010a:	f7fc fabd 	bl	800c688 <_free_r>
 801010e:	2300      	movs	r3, #0
 8010110:	6463      	str	r3, [r4, #68]	; 0x44
 8010112:	f7fc f84b 	bl	800c1ac <__sfp_lock_acquire>
 8010116:	2300      	movs	r3, #0
 8010118:	81a3      	strh	r3, [r4, #12]
 801011a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801011c:	07db      	lsls	r3, r3, #31
 801011e:	d402      	bmi.n	8010126 <_fclose_r+0xb2>
 8010120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010122:	f7fc fa2a 	bl	800c57a <__retarget_lock_release_recursive>
 8010126:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010128:	f7fc fa25 	bl	800c576 <__retarget_lock_close_recursive>
 801012c:	f7fc f846 	bl	800c1bc <__sfp_lock_release>
 8010130:	e7a5      	b.n	801007e <_fclose_r+0xa>
	...

08010134 <__sflush_r>:
 8010134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010136:	230c      	movs	r3, #12
 8010138:	5eca      	ldrsh	r2, [r1, r3]
 801013a:	000c      	movs	r4, r1
 801013c:	0005      	movs	r5, r0
 801013e:	b291      	uxth	r1, r2
 8010140:	0713      	lsls	r3, r2, #28
 8010142:	d464      	bmi.n	801020e <__sflush_r+0xda>
 8010144:	2380      	movs	r3, #128	; 0x80
 8010146:	011b      	lsls	r3, r3, #4
 8010148:	4313      	orrs	r3, r2
 801014a:	6862      	ldr	r2, [r4, #4]
 801014c:	81a3      	strh	r3, [r4, #12]
 801014e:	2a00      	cmp	r2, #0
 8010150:	dc04      	bgt.n	801015c <__sflush_r+0x28>
 8010152:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010154:	2a00      	cmp	r2, #0
 8010156:	dc01      	bgt.n	801015c <__sflush_r+0x28>
 8010158:	2000      	movs	r0, #0
 801015a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801015c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801015e:	2f00      	cmp	r7, #0
 8010160:	d0fa      	beq.n	8010158 <__sflush_r+0x24>
 8010162:	2200      	movs	r2, #0
 8010164:	2080      	movs	r0, #128	; 0x80
 8010166:	682e      	ldr	r6, [r5, #0]
 8010168:	602a      	str	r2, [r5, #0]
 801016a:	001a      	movs	r2, r3
 801016c:	0140      	lsls	r0, r0, #5
 801016e:	69e1      	ldr	r1, [r4, #28]
 8010170:	4002      	ands	r2, r0
 8010172:	4203      	tst	r3, r0
 8010174:	d038      	beq.n	80101e8 <__sflush_r+0xb4>
 8010176:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010178:	89a3      	ldrh	r3, [r4, #12]
 801017a:	075b      	lsls	r3, r3, #29
 801017c:	d506      	bpl.n	801018c <__sflush_r+0x58>
 801017e:	6863      	ldr	r3, [r4, #4]
 8010180:	1ac0      	subs	r0, r0, r3
 8010182:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <__sflush_r+0x58>
 8010188:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801018a:	1ac0      	subs	r0, r0, r3
 801018c:	0002      	movs	r2, r0
 801018e:	2300      	movs	r3, #0
 8010190:	0028      	movs	r0, r5
 8010192:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010194:	69e1      	ldr	r1, [r4, #28]
 8010196:	47b8      	blx	r7
 8010198:	89a2      	ldrh	r2, [r4, #12]
 801019a:	1c43      	adds	r3, r0, #1
 801019c:	d106      	bne.n	80101ac <__sflush_r+0x78>
 801019e:	6829      	ldr	r1, [r5, #0]
 80101a0:	291d      	cmp	r1, #29
 80101a2:	d830      	bhi.n	8010206 <__sflush_r+0xd2>
 80101a4:	4b2c      	ldr	r3, [pc, #176]	; (8010258 <__sflush_r+0x124>)
 80101a6:	410b      	asrs	r3, r1
 80101a8:	07db      	lsls	r3, r3, #31
 80101aa:	d42c      	bmi.n	8010206 <__sflush_r+0xd2>
 80101ac:	4b2b      	ldr	r3, [pc, #172]	; (801025c <__sflush_r+0x128>)
 80101ae:	4013      	ands	r3, r2
 80101b0:	2200      	movs	r2, #0
 80101b2:	6062      	str	r2, [r4, #4]
 80101b4:	6922      	ldr	r2, [r4, #16]
 80101b6:	b21b      	sxth	r3, r3
 80101b8:	81a3      	strh	r3, [r4, #12]
 80101ba:	6022      	str	r2, [r4, #0]
 80101bc:	04db      	lsls	r3, r3, #19
 80101be:	d505      	bpl.n	80101cc <__sflush_r+0x98>
 80101c0:	1c43      	adds	r3, r0, #1
 80101c2:	d102      	bne.n	80101ca <__sflush_r+0x96>
 80101c4:	682b      	ldr	r3, [r5, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d100      	bne.n	80101cc <__sflush_r+0x98>
 80101ca:	6520      	str	r0, [r4, #80]	; 0x50
 80101cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80101ce:	602e      	str	r6, [r5, #0]
 80101d0:	2900      	cmp	r1, #0
 80101d2:	d0c1      	beq.n	8010158 <__sflush_r+0x24>
 80101d4:	0023      	movs	r3, r4
 80101d6:	3340      	adds	r3, #64	; 0x40
 80101d8:	4299      	cmp	r1, r3
 80101da:	d002      	beq.n	80101e2 <__sflush_r+0xae>
 80101dc:	0028      	movs	r0, r5
 80101de:	f7fc fa53 	bl	800c688 <_free_r>
 80101e2:	2000      	movs	r0, #0
 80101e4:	6320      	str	r0, [r4, #48]	; 0x30
 80101e6:	e7b8      	b.n	801015a <__sflush_r+0x26>
 80101e8:	2301      	movs	r3, #1
 80101ea:	0028      	movs	r0, r5
 80101ec:	47b8      	blx	r7
 80101ee:	1c43      	adds	r3, r0, #1
 80101f0:	d1c2      	bne.n	8010178 <__sflush_r+0x44>
 80101f2:	682b      	ldr	r3, [r5, #0]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d0bf      	beq.n	8010178 <__sflush_r+0x44>
 80101f8:	2b1d      	cmp	r3, #29
 80101fa:	d001      	beq.n	8010200 <__sflush_r+0xcc>
 80101fc:	2b16      	cmp	r3, #22
 80101fe:	d101      	bne.n	8010204 <__sflush_r+0xd0>
 8010200:	602e      	str	r6, [r5, #0]
 8010202:	e7a9      	b.n	8010158 <__sflush_r+0x24>
 8010204:	89a2      	ldrh	r2, [r4, #12]
 8010206:	2340      	movs	r3, #64	; 0x40
 8010208:	4313      	orrs	r3, r2
 801020a:	81a3      	strh	r3, [r4, #12]
 801020c:	e7a5      	b.n	801015a <__sflush_r+0x26>
 801020e:	6926      	ldr	r6, [r4, #16]
 8010210:	2e00      	cmp	r6, #0
 8010212:	d0a1      	beq.n	8010158 <__sflush_r+0x24>
 8010214:	6827      	ldr	r7, [r4, #0]
 8010216:	6026      	str	r6, [r4, #0]
 8010218:	1bbb      	subs	r3, r7, r6
 801021a:	9301      	str	r3, [sp, #4]
 801021c:	2300      	movs	r3, #0
 801021e:	0789      	lsls	r1, r1, #30
 8010220:	d100      	bne.n	8010224 <__sflush_r+0xf0>
 8010222:	6963      	ldr	r3, [r4, #20]
 8010224:	60a3      	str	r3, [r4, #8]
 8010226:	9b01      	ldr	r3, [sp, #4]
 8010228:	2b00      	cmp	r3, #0
 801022a:	dc00      	bgt.n	801022e <__sflush_r+0xfa>
 801022c:	e794      	b.n	8010158 <__sflush_r+0x24>
 801022e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010230:	0032      	movs	r2, r6
 8010232:	001f      	movs	r7, r3
 8010234:	0028      	movs	r0, r5
 8010236:	9b01      	ldr	r3, [sp, #4]
 8010238:	69e1      	ldr	r1, [r4, #28]
 801023a:	47b8      	blx	r7
 801023c:	2800      	cmp	r0, #0
 801023e:	dc06      	bgt.n	801024e <__sflush_r+0x11a>
 8010240:	2340      	movs	r3, #64	; 0x40
 8010242:	2001      	movs	r0, #1
 8010244:	89a2      	ldrh	r2, [r4, #12]
 8010246:	4240      	negs	r0, r0
 8010248:	4313      	orrs	r3, r2
 801024a:	81a3      	strh	r3, [r4, #12]
 801024c:	e785      	b.n	801015a <__sflush_r+0x26>
 801024e:	9b01      	ldr	r3, [sp, #4]
 8010250:	1836      	adds	r6, r6, r0
 8010252:	1a1b      	subs	r3, r3, r0
 8010254:	9301      	str	r3, [sp, #4]
 8010256:	e7e6      	b.n	8010226 <__sflush_r+0xf2>
 8010258:	dfbffffe 	.word	0xdfbffffe
 801025c:	fffff7ff 	.word	0xfffff7ff

08010260 <_fflush_r>:
 8010260:	b570      	push	{r4, r5, r6, lr}
 8010262:	0005      	movs	r5, r0
 8010264:	000c      	movs	r4, r1
 8010266:	2800      	cmp	r0, #0
 8010268:	d004      	beq.n	8010274 <_fflush_r+0x14>
 801026a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801026c:	2b00      	cmp	r3, #0
 801026e:	d101      	bne.n	8010274 <_fflush_r+0x14>
 8010270:	f7fb ffac 	bl	800c1cc <__sinit>
 8010274:	220c      	movs	r2, #12
 8010276:	5ea3      	ldrsh	r3, [r4, r2]
 8010278:	1e1e      	subs	r6, r3, #0
 801027a:	d015      	beq.n	80102a8 <_fflush_r+0x48>
 801027c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801027e:	07d2      	lsls	r2, r2, #31
 8010280:	d404      	bmi.n	801028c <_fflush_r+0x2c>
 8010282:	059b      	lsls	r3, r3, #22
 8010284:	d402      	bmi.n	801028c <_fflush_r+0x2c>
 8010286:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010288:	f7fc f976 	bl	800c578 <__retarget_lock_acquire_recursive>
 801028c:	0021      	movs	r1, r4
 801028e:	0028      	movs	r0, r5
 8010290:	f7ff ff50 	bl	8010134 <__sflush_r>
 8010294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010296:	0006      	movs	r6, r0
 8010298:	07db      	lsls	r3, r3, #31
 801029a:	d405      	bmi.n	80102a8 <_fflush_r+0x48>
 801029c:	89a3      	ldrh	r3, [r4, #12]
 801029e:	059b      	lsls	r3, r3, #22
 80102a0:	d402      	bmi.n	80102a8 <_fflush_r+0x48>
 80102a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102a4:	f7fc f969 	bl	800c57a <__retarget_lock_release_recursive>
 80102a8:	0030      	movs	r0, r6
 80102aa:	bd70      	pop	{r4, r5, r6, pc}

080102ac <__sccl>:
 80102ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ae:	780b      	ldrb	r3, [r1, #0]
 80102b0:	0004      	movs	r4, r0
 80102b2:	2b5e      	cmp	r3, #94	; 0x5e
 80102b4:	d019      	beq.n	80102ea <__sccl+0x3e>
 80102b6:	2200      	movs	r2, #0
 80102b8:	1c4d      	adds	r5, r1, #1
 80102ba:	0021      	movs	r1, r4
 80102bc:	1c60      	adds	r0, r4, #1
 80102be:	30ff      	adds	r0, #255	; 0xff
 80102c0:	700a      	strb	r2, [r1, #0]
 80102c2:	3101      	adds	r1, #1
 80102c4:	4281      	cmp	r1, r0
 80102c6:	d1fb      	bne.n	80102c0 <__sccl+0x14>
 80102c8:	1e68      	subs	r0, r5, #1
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00c      	beq.n	80102e8 <__sccl+0x3c>
 80102ce:	2101      	movs	r1, #1
 80102d0:	262d      	movs	r6, #45	; 0x2d
 80102d2:	404a      	eors	r2, r1
 80102d4:	0028      	movs	r0, r5
 80102d6:	54e2      	strb	r2, [r4, r3]
 80102d8:	7801      	ldrb	r1, [r0, #0]
 80102da:	1c45      	adds	r5, r0, #1
 80102dc:	292d      	cmp	r1, #45	; 0x2d
 80102de:	d00c      	beq.n	80102fa <__sccl+0x4e>
 80102e0:	295d      	cmp	r1, #93	; 0x5d
 80102e2:	d01d      	beq.n	8010320 <__sccl+0x74>
 80102e4:	2900      	cmp	r1, #0
 80102e6:	d104      	bne.n	80102f2 <__sccl+0x46>
 80102e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102ea:	2201      	movs	r2, #1
 80102ec:	784b      	ldrb	r3, [r1, #1]
 80102ee:	1c8d      	adds	r5, r1, #2
 80102f0:	e7e3      	b.n	80102ba <__sccl+0xe>
 80102f2:	000b      	movs	r3, r1
 80102f4:	e7ee      	b.n	80102d4 <__sccl+0x28>
 80102f6:	0033      	movs	r3, r6
 80102f8:	e7ec      	b.n	80102d4 <__sccl+0x28>
 80102fa:	7841      	ldrb	r1, [r0, #1]
 80102fc:	295d      	cmp	r1, #93	; 0x5d
 80102fe:	d0fa      	beq.n	80102f6 <__sccl+0x4a>
 8010300:	428b      	cmp	r3, r1
 8010302:	dcf8      	bgt.n	80102f6 <__sccl+0x4a>
 8010304:	001d      	movs	r5, r3
 8010306:	3002      	adds	r0, #2
 8010308:	3501      	adds	r5, #1
 801030a:	5562      	strb	r2, [r4, r5]
 801030c:	42a9      	cmp	r1, r5
 801030e:	dcfb      	bgt.n	8010308 <__sccl+0x5c>
 8010310:	2500      	movs	r5, #0
 8010312:	1c5f      	adds	r7, r3, #1
 8010314:	428b      	cmp	r3, r1
 8010316:	da01      	bge.n	801031c <__sccl+0x70>
 8010318:	1acd      	subs	r5, r1, r3
 801031a:	3d01      	subs	r5, #1
 801031c:	197b      	adds	r3, r7, r5
 801031e:	e7db      	b.n	80102d8 <__sccl+0x2c>
 8010320:	0028      	movs	r0, r5
 8010322:	e7e1      	b.n	80102e8 <__sccl+0x3c>

08010324 <_localeconv_r>:
 8010324:	4800      	ldr	r0, [pc, #0]	; (8010328 <_localeconv_r+0x4>)
 8010326:	4770      	bx	lr
 8010328:	20000538 	.word	0x20000538

0801032c <__libc_fini_array>:
 801032c:	b570      	push	{r4, r5, r6, lr}
 801032e:	4c07      	ldr	r4, [pc, #28]	; (801034c <__libc_fini_array+0x20>)
 8010330:	4d07      	ldr	r5, [pc, #28]	; (8010350 <__libc_fini_array+0x24>)
 8010332:	1b64      	subs	r4, r4, r5
 8010334:	10a4      	asrs	r4, r4, #2
 8010336:	2c00      	cmp	r4, #0
 8010338:	d102      	bne.n	8010340 <__libc_fini_array+0x14>
 801033a:	f002 fdcd 	bl	8012ed8 <_fini>
 801033e:	bd70      	pop	{r4, r5, r6, pc}
 8010340:	3c01      	subs	r4, #1
 8010342:	00a3      	lsls	r3, r4, #2
 8010344:	58eb      	ldr	r3, [r5, r3]
 8010346:	4798      	blx	r3
 8010348:	e7f5      	b.n	8010336 <__libc_fini_array+0xa>
 801034a:	46c0      	nop			; (mov r8, r8)
 801034c:	08014d98 	.word	0x08014d98
 8010350:	08014d94 	.word	0x08014d94

08010354 <memchr>:
 8010354:	b2c9      	uxtb	r1, r1
 8010356:	1882      	adds	r2, r0, r2
 8010358:	4290      	cmp	r0, r2
 801035a:	d101      	bne.n	8010360 <memchr+0xc>
 801035c:	2000      	movs	r0, #0
 801035e:	4770      	bx	lr
 8010360:	7803      	ldrb	r3, [r0, #0]
 8010362:	428b      	cmp	r3, r1
 8010364:	d0fb      	beq.n	801035e <memchr+0xa>
 8010366:	3001      	adds	r0, #1
 8010368:	e7f6      	b.n	8010358 <memchr+0x4>
	...

0801036c <frexp>:
 801036c:	b570      	push	{r4, r5, r6, lr}
 801036e:	0014      	movs	r4, r2
 8010370:	2500      	movs	r5, #0
 8010372:	6025      	str	r5, [r4, #0]
 8010374:	4d10      	ldr	r5, [pc, #64]	; (80103b8 <frexp+0x4c>)
 8010376:	004b      	lsls	r3, r1, #1
 8010378:	000a      	movs	r2, r1
 801037a:	085b      	lsrs	r3, r3, #1
 801037c:	42ab      	cmp	r3, r5
 801037e:	dc1a      	bgt.n	80103b6 <frexp+0x4a>
 8010380:	001d      	movs	r5, r3
 8010382:	4305      	orrs	r5, r0
 8010384:	d017      	beq.n	80103b6 <frexp+0x4a>
 8010386:	4d0d      	ldr	r5, [pc, #52]	; (80103bc <frexp+0x50>)
 8010388:	4229      	tst	r1, r5
 801038a:	d109      	bne.n	80103a0 <frexp+0x34>
 801038c:	2200      	movs	r2, #0
 801038e:	4b0c      	ldr	r3, [pc, #48]	; (80103c0 <frexp+0x54>)
 8010390:	f7f1 f96c 	bl	800166c <__aeabi_dmul>
 8010394:	2536      	movs	r5, #54	; 0x36
 8010396:	000a      	movs	r2, r1
 8010398:	004b      	lsls	r3, r1, #1
 801039a:	426d      	negs	r5, r5
 801039c:	085b      	lsrs	r3, r3, #1
 801039e:	6025      	str	r5, [r4, #0]
 80103a0:	4d08      	ldr	r5, [pc, #32]	; (80103c4 <frexp+0x58>)
 80103a2:	151b      	asrs	r3, r3, #20
 80103a4:	195b      	adds	r3, r3, r5
 80103a6:	6825      	ldr	r5, [r4, #0]
 80103a8:	18eb      	adds	r3, r5, r3
 80103aa:	6023      	str	r3, [r4, #0]
 80103ac:	4b06      	ldr	r3, [pc, #24]	; (80103c8 <frexp+0x5c>)
 80103ae:	401a      	ands	r2, r3
 80103b0:	4b06      	ldr	r3, [pc, #24]	; (80103cc <frexp+0x60>)
 80103b2:	4313      	orrs	r3, r2
 80103b4:	0019      	movs	r1, r3
 80103b6:	bd70      	pop	{r4, r5, r6, pc}
 80103b8:	7fefffff 	.word	0x7fefffff
 80103bc:	7ff00000 	.word	0x7ff00000
 80103c0:	43500000 	.word	0x43500000
 80103c4:	fffffc02 	.word	0xfffffc02
 80103c8:	800fffff 	.word	0x800fffff
 80103cc:	3fe00000 	.word	0x3fe00000

080103d0 <__register_exitproc>:
 80103d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103d2:	4f1c      	ldr	r7, [pc, #112]	; (8010444 <__register_exitproc+0x74>)
 80103d4:	0004      	movs	r4, r0
 80103d6:	6838      	ldr	r0, [r7, #0]
 80103d8:	0016      	movs	r6, r2
 80103da:	9301      	str	r3, [sp, #4]
 80103dc:	9100      	str	r1, [sp, #0]
 80103de:	f7fc f8cb 	bl	800c578 <__retarget_lock_acquire_recursive>
 80103e2:	4a19      	ldr	r2, [pc, #100]	; (8010448 <__register_exitproc+0x78>)
 80103e4:	6813      	ldr	r3, [r2, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d101      	bne.n	80103ee <__register_exitproc+0x1e>
 80103ea:	4b18      	ldr	r3, [pc, #96]	; (801044c <__register_exitproc+0x7c>)
 80103ec:	6013      	str	r3, [r2, #0]
 80103ee:	685a      	ldr	r2, [r3, #4]
 80103f0:	6838      	ldr	r0, [r7, #0]
 80103f2:	2a1f      	cmp	r2, #31
 80103f4:	dd04      	ble.n	8010400 <__register_exitproc+0x30>
 80103f6:	f7fc f8c0 	bl	800c57a <__retarget_lock_release_recursive>
 80103fa:	2001      	movs	r0, #1
 80103fc:	4240      	negs	r0, r0
 80103fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010400:	2c00      	cmp	r4, #0
 8010402:	d014      	beq.n	801042e <__register_exitproc+0x5e>
 8010404:	0091      	lsls	r1, r2, #2
 8010406:	1859      	adds	r1, r3, r1
 8010408:	000f      	movs	r7, r1
 801040a:	3788      	adds	r7, #136	; 0x88
 801040c:	603e      	str	r6, [r7, #0]
 801040e:	2701      	movs	r7, #1
 8010410:	001e      	movs	r6, r3
 8010412:	4097      	lsls	r7, r2
 8010414:	3685      	adds	r6, #133	; 0x85
 8010416:	36ff      	adds	r6, #255	; 0xff
 8010418:	6875      	ldr	r5, [r6, #4]
 801041a:	31fc      	adds	r1, #252	; 0xfc
 801041c:	433d      	orrs	r5, r7
 801041e:	6075      	str	r5, [r6, #4]
 8010420:	9d01      	ldr	r5, [sp, #4]
 8010422:	60cd      	str	r5, [r1, #12]
 8010424:	2c02      	cmp	r4, #2
 8010426:	d102      	bne.n	801042e <__register_exitproc+0x5e>
 8010428:	68b1      	ldr	r1, [r6, #8]
 801042a:	4339      	orrs	r1, r7
 801042c:	60b1      	str	r1, [r6, #8]
 801042e:	1c51      	adds	r1, r2, #1
 8010430:	6059      	str	r1, [r3, #4]
 8010432:	3202      	adds	r2, #2
 8010434:	9900      	ldr	r1, [sp, #0]
 8010436:	0092      	lsls	r2, r2, #2
 8010438:	50d1      	str	r1, [r2, r3]
 801043a:	f7fc f89e 	bl	800c57a <__retarget_lock_release_recursive>
 801043e:	2000      	movs	r0, #0
 8010440:	e7dd      	b.n	80103fe <__register_exitproc+0x2e>
 8010442:	46c0      	nop			; (mov r8, r8)
 8010444:	200006dc 	.word	0x200006dc
 8010448:	20000d2c 	.word	0x20000d2c
 801044c:	20000d30 	.word	0x20000d30

08010450 <__assert_func>:
 8010450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010452:	0014      	movs	r4, r2
 8010454:	001a      	movs	r2, r3
 8010456:	4b09      	ldr	r3, [pc, #36]	; (801047c <__assert_func+0x2c>)
 8010458:	0005      	movs	r5, r0
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	000e      	movs	r6, r1
 801045e:	68d8      	ldr	r0, [r3, #12]
 8010460:	4b07      	ldr	r3, [pc, #28]	; (8010480 <__assert_func+0x30>)
 8010462:	2c00      	cmp	r4, #0
 8010464:	d101      	bne.n	801046a <__assert_func+0x1a>
 8010466:	4b07      	ldr	r3, [pc, #28]	; (8010484 <__assert_func+0x34>)
 8010468:	001c      	movs	r4, r3
 801046a:	4907      	ldr	r1, [pc, #28]	; (8010488 <__assert_func+0x38>)
 801046c:	9301      	str	r3, [sp, #4]
 801046e:	9402      	str	r4, [sp, #8]
 8010470:	002b      	movs	r3, r5
 8010472:	9600      	str	r6, [sp, #0]
 8010474:	f001 faa6 	bl	80119c4 <fiprintf>
 8010478:	f002 fb8e 	bl	8012b98 <abort>
 801047c:	200006d8 	.word	0x200006d8
 8010480:	08014cc0 	.word	0x08014cc0
 8010484:	08014cfb 	.word	0x08014cfb
 8010488:	08014ccd 	.word	0x08014ccd

0801048c <_calloc_r>:
 801048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801048e:	2400      	movs	r4, #0
 8010490:	0c0b      	lsrs	r3, r1, #16
 8010492:	0c16      	lsrs	r6, r2, #16
 8010494:	42a3      	cmp	r3, r4
 8010496:	d133      	bne.n	8010500 <_calloc_r+0x74>
 8010498:	42a6      	cmp	r6, r4
 801049a:	d121      	bne.n	80104e0 <_calloc_r+0x54>
 801049c:	b28b      	uxth	r3, r1
 801049e:	b291      	uxth	r1, r2
 80104a0:	4359      	muls	r1, r3
 80104a2:	f7fa fd11 	bl	800aec8 <_malloc_r>
 80104a6:	1e05      	subs	r5, r0, #0
 80104a8:	d033      	beq.n	8010512 <_calloc_r+0x86>
 80104aa:	0003      	movs	r3, r0
 80104ac:	3b08      	subs	r3, #8
 80104ae:	685a      	ldr	r2, [r3, #4]
 80104b0:	2303      	movs	r3, #3
 80104b2:	439a      	bics	r2, r3
 80104b4:	3a04      	subs	r2, #4
 80104b6:	2a24      	cmp	r2, #36	; 0x24
 80104b8:	d832      	bhi.n	8010520 <_calloc_r+0x94>
 80104ba:	0003      	movs	r3, r0
 80104bc:	2a13      	cmp	r2, #19
 80104be:	d90a      	bls.n	80104d6 <_calloc_r+0x4a>
 80104c0:	6004      	str	r4, [r0, #0]
 80104c2:	6044      	str	r4, [r0, #4]
 80104c4:	3308      	adds	r3, #8
 80104c6:	2a1b      	cmp	r2, #27
 80104c8:	d905      	bls.n	80104d6 <_calloc_r+0x4a>
 80104ca:	6084      	str	r4, [r0, #8]
 80104cc:	60c4      	str	r4, [r0, #12]
 80104ce:	2a24      	cmp	r2, #36	; 0x24
 80104d0:	d021      	beq.n	8010516 <_calloc_r+0x8a>
 80104d2:	0003      	movs	r3, r0
 80104d4:	3310      	adds	r3, #16
 80104d6:	2200      	movs	r2, #0
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	605a      	str	r2, [r3, #4]
 80104dc:	609a      	str	r2, [r3, #8]
 80104de:	e018      	b.n	8010512 <_calloc_r+0x86>
 80104e0:	1c33      	adds	r3, r6, #0
 80104e2:	1c0d      	adds	r5, r1, #0
 80104e4:	b289      	uxth	r1, r1
 80104e6:	b292      	uxth	r2, r2
 80104e8:	434a      	muls	r2, r1
 80104ea:	b2ad      	uxth	r5, r5
 80104ec:	b299      	uxth	r1, r3
 80104ee:	4369      	muls	r1, r5
 80104f0:	0c13      	lsrs	r3, r2, #16
 80104f2:	18c9      	adds	r1, r1, r3
 80104f4:	0c0b      	lsrs	r3, r1, #16
 80104f6:	d107      	bne.n	8010508 <_calloc_r+0x7c>
 80104f8:	0409      	lsls	r1, r1, #16
 80104fa:	b292      	uxth	r2, r2
 80104fc:	4311      	orrs	r1, r2
 80104fe:	e7d0      	b.n	80104a2 <_calloc_r+0x16>
 8010500:	2e00      	cmp	r6, #0
 8010502:	d101      	bne.n	8010508 <_calloc_r+0x7c>
 8010504:	1c15      	adds	r5, r2, #0
 8010506:	e7ed      	b.n	80104e4 <_calloc_r+0x58>
 8010508:	f7fc f80a 	bl	800c520 <__errno>
 801050c:	230c      	movs	r3, #12
 801050e:	2500      	movs	r5, #0
 8010510:	6003      	str	r3, [r0, #0]
 8010512:	0028      	movs	r0, r5
 8010514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010516:	0003      	movs	r3, r0
 8010518:	6104      	str	r4, [r0, #16]
 801051a:	3318      	adds	r3, #24
 801051c:	6144      	str	r4, [r0, #20]
 801051e:	e7da      	b.n	80104d6 <_calloc_r+0x4a>
 8010520:	2100      	movs	r1, #0
 8010522:	f7fb ff51 	bl	800c3c8 <memset>
 8010526:	e7f4      	b.n	8010512 <_calloc_r+0x86>

08010528 <quorem>:
 8010528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801052a:	6902      	ldr	r2, [r0, #16]
 801052c:	690b      	ldr	r3, [r1, #16]
 801052e:	b089      	sub	sp, #36	; 0x24
 8010530:	0007      	movs	r7, r0
 8010532:	9104      	str	r1, [sp, #16]
 8010534:	2000      	movs	r0, #0
 8010536:	429a      	cmp	r2, r3
 8010538:	db69      	blt.n	801060e <quorem+0xe6>
 801053a:	3b01      	subs	r3, #1
 801053c:	009c      	lsls	r4, r3, #2
 801053e:	9301      	str	r3, [sp, #4]
 8010540:	000b      	movs	r3, r1
 8010542:	3314      	adds	r3, #20
 8010544:	9306      	str	r3, [sp, #24]
 8010546:	191b      	adds	r3, r3, r4
 8010548:	9305      	str	r3, [sp, #20]
 801054a:	003b      	movs	r3, r7
 801054c:	3314      	adds	r3, #20
 801054e:	9303      	str	r3, [sp, #12]
 8010550:	191c      	adds	r4, r3, r4
 8010552:	9b05      	ldr	r3, [sp, #20]
 8010554:	6826      	ldr	r6, [r4, #0]
 8010556:	681d      	ldr	r5, [r3, #0]
 8010558:	0030      	movs	r0, r6
 801055a:	3501      	adds	r5, #1
 801055c:	0029      	movs	r1, r5
 801055e:	f7ef fded 	bl	800013c <__udivsi3>
 8010562:	9002      	str	r0, [sp, #8]
 8010564:	42ae      	cmp	r6, r5
 8010566:	d329      	bcc.n	80105bc <quorem+0x94>
 8010568:	9b06      	ldr	r3, [sp, #24]
 801056a:	2600      	movs	r6, #0
 801056c:	469c      	mov	ip, r3
 801056e:	9d03      	ldr	r5, [sp, #12]
 8010570:	9606      	str	r6, [sp, #24]
 8010572:	4662      	mov	r2, ip
 8010574:	ca08      	ldmia	r2!, {r3}
 8010576:	6828      	ldr	r0, [r5, #0]
 8010578:	4694      	mov	ip, r2
 801057a:	9a02      	ldr	r2, [sp, #8]
 801057c:	b299      	uxth	r1, r3
 801057e:	4351      	muls	r1, r2
 8010580:	0c1b      	lsrs	r3, r3, #16
 8010582:	4353      	muls	r3, r2
 8010584:	1989      	adds	r1, r1, r6
 8010586:	0c0a      	lsrs	r2, r1, #16
 8010588:	189b      	adds	r3, r3, r2
 801058a:	9307      	str	r3, [sp, #28]
 801058c:	0c1e      	lsrs	r6, r3, #16
 801058e:	9b06      	ldr	r3, [sp, #24]
 8010590:	b282      	uxth	r2, r0
 8010592:	18d2      	adds	r2, r2, r3
 8010594:	466b      	mov	r3, sp
 8010596:	b289      	uxth	r1, r1
 8010598:	8b9b      	ldrh	r3, [r3, #28]
 801059a:	1a52      	subs	r2, r2, r1
 801059c:	0c01      	lsrs	r1, r0, #16
 801059e:	1ac9      	subs	r1, r1, r3
 80105a0:	1413      	asrs	r3, r2, #16
 80105a2:	18cb      	adds	r3, r1, r3
 80105a4:	1419      	asrs	r1, r3, #16
 80105a6:	b292      	uxth	r2, r2
 80105a8:	041b      	lsls	r3, r3, #16
 80105aa:	4313      	orrs	r3, r2
 80105ac:	c508      	stmia	r5!, {r3}
 80105ae:	9b05      	ldr	r3, [sp, #20]
 80105b0:	9106      	str	r1, [sp, #24]
 80105b2:	4563      	cmp	r3, ip
 80105b4:	d2dd      	bcs.n	8010572 <quorem+0x4a>
 80105b6:	6823      	ldr	r3, [r4, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d030      	beq.n	801061e <quorem+0xf6>
 80105bc:	0038      	movs	r0, r7
 80105be:	9904      	ldr	r1, [sp, #16]
 80105c0:	f7fc ff04 	bl	800d3cc <__mcmp>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	db21      	blt.n	801060c <quorem+0xe4>
 80105c8:	0038      	movs	r0, r7
 80105ca:	2600      	movs	r6, #0
 80105cc:	9b02      	ldr	r3, [sp, #8]
 80105ce:	9c04      	ldr	r4, [sp, #16]
 80105d0:	3301      	adds	r3, #1
 80105d2:	9302      	str	r3, [sp, #8]
 80105d4:	3014      	adds	r0, #20
 80105d6:	3414      	adds	r4, #20
 80105d8:	6803      	ldr	r3, [r0, #0]
 80105da:	cc02      	ldmia	r4!, {r1}
 80105dc:	b29d      	uxth	r5, r3
 80105de:	19ad      	adds	r5, r5, r6
 80105e0:	b28a      	uxth	r2, r1
 80105e2:	1aaa      	subs	r2, r5, r2
 80105e4:	0c09      	lsrs	r1, r1, #16
 80105e6:	0c1b      	lsrs	r3, r3, #16
 80105e8:	1a5b      	subs	r3, r3, r1
 80105ea:	1411      	asrs	r1, r2, #16
 80105ec:	185b      	adds	r3, r3, r1
 80105ee:	141e      	asrs	r6, r3, #16
 80105f0:	b292      	uxth	r2, r2
 80105f2:	041b      	lsls	r3, r3, #16
 80105f4:	4313      	orrs	r3, r2
 80105f6:	c008      	stmia	r0!, {r3}
 80105f8:	9b05      	ldr	r3, [sp, #20]
 80105fa:	42a3      	cmp	r3, r4
 80105fc:	d2ec      	bcs.n	80105d8 <quorem+0xb0>
 80105fe:	9b01      	ldr	r3, [sp, #4]
 8010600:	9a03      	ldr	r2, [sp, #12]
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	18d3      	adds	r3, r2, r3
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	2a00      	cmp	r2, #0
 801060a:	d015      	beq.n	8010638 <quorem+0x110>
 801060c:	9802      	ldr	r0, [sp, #8]
 801060e:	b009      	add	sp, #36	; 0x24
 8010610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010612:	6823      	ldr	r3, [r4, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d106      	bne.n	8010626 <quorem+0xfe>
 8010618:	9b01      	ldr	r3, [sp, #4]
 801061a:	3b01      	subs	r3, #1
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	9b03      	ldr	r3, [sp, #12]
 8010620:	3c04      	subs	r4, #4
 8010622:	42a3      	cmp	r3, r4
 8010624:	d3f5      	bcc.n	8010612 <quorem+0xea>
 8010626:	9b01      	ldr	r3, [sp, #4]
 8010628:	613b      	str	r3, [r7, #16]
 801062a:	e7c7      	b.n	80105bc <quorem+0x94>
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	2a00      	cmp	r2, #0
 8010630:	d106      	bne.n	8010640 <quorem+0x118>
 8010632:	9a01      	ldr	r2, [sp, #4]
 8010634:	3a01      	subs	r2, #1
 8010636:	9201      	str	r2, [sp, #4]
 8010638:	9a03      	ldr	r2, [sp, #12]
 801063a:	3b04      	subs	r3, #4
 801063c:	429a      	cmp	r2, r3
 801063e:	d3f5      	bcc.n	801062c <quorem+0x104>
 8010640:	9b01      	ldr	r3, [sp, #4]
 8010642:	613b      	str	r3, [r7, #16]
 8010644:	e7e2      	b.n	801060c <quorem+0xe4>
	...

08010648 <_dtoa_r>:
 8010648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801064a:	0014      	movs	r4, r2
 801064c:	001d      	movs	r5, r3
 801064e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8010650:	b09d      	sub	sp, #116	; 0x74
 8010652:	9408      	str	r4, [sp, #32]
 8010654:	9509      	str	r5, [sp, #36]	; 0x24
 8010656:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8010658:	9004      	str	r0, [sp, #16]
 801065a:	2900      	cmp	r1, #0
 801065c:	d009      	beq.n	8010672 <_dtoa_r+0x2a>
 801065e:	2301      	movs	r3, #1
 8010660:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010662:	4093      	lsls	r3, r2
 8010664:	604a      	str	r2, [r1, #4]
 8010666:	608b      	str	r3, [r1, #8]
 8010668:	f7fc fc56 	bl	800cf18 <_Bfree>
 801066c:	2300      	movs	r3, #0
 801066e:	9a04      	ldr	r2, [sp, #16]
 8010670:	6393      	str	r3, [r2, #56]	; 0x38
 8010672:	2d00      	cmp	r5, #0
 8010674:	da1e      	bge.n	80106b4 <_dtoa_r+0x6c>
 8010676:	2301      	movs	r3, #1
 8010678:	6033      	str	r3, [r6, #0]
 801067a:	006b      	lsls	r3, r5, #1
 801067c:	085b      	lsrs	r3, r3, #1
 801067e:	9309      	str	r3, [sp, #36]	; 0x24
 8010680:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010682:	4bb5      	ldr	r3, [pc, #724]	; (8010958 <_dtoa_r+0x310>)
 8010684:	4ab4      	ldr	r2, [pc, #720]	; (8010958 <_dtoa_r+0x310>)
 8010686:	403b      	ands	r3, r7
 8010688:	4293      	cmp	r3, r2
 801068a:	d116      	bne.n	80106ba <_dtoa_r+0x72>
 801068c:	4bb3      	ldr	r3, [pc, #716]	; (801095c <_dtoa_r+0x314>)
 801068e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010690:	6013      	str	r3, [r2, #0]
 8010692:	033b      	lsls	r3, r7, #12
 8010694:	0b1b      	lsrs	r3, r3, #12
 8010696:	4323      	orrs	r3, r4
 8010698:	d101      	bne.n	801069e <_dtoa_r+0x56>
 801069a:	f000 fdb2 	bl	8011202 <_dtoa_r+0xbba>
 801069e:	4bb0      	ldr	r3, [pc, #704]	; (8010960 <_dtoa_r+0x318>)
 80106a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80106a2:	9306      	str	r3, [sp, #24]
 80106a4:	2a00      	cmp	r2, #0
 80106a6:	d002      	beq.n	80106ae <_dtoa_r+0x66>
 80106a8:	4bae      	ldr	r3, [pc, #696]	; (8010964 <_dtoa_r+0x31c>)
 80106aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80106ac:	6013      	str	r3, [r2, #0]
 80106ae:	9806      	ldr	r0, [sp, #24]
 80106b0:	b01d      	add	sp, #116	; 0x74
 80106b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106b4:	2300      	movs	r3, #0
 80106b6:	6033      	str	r3, [r6, #0]
 80106b8:	e7e2      	b.n	8010680 <_dtoa_r+0x38>
 80106ba:	9a08      	ldr	r2, [sp, #32]
 80106bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106be:	9210      	str	r2, [sp, #64]	; 0x40
 80106c0:	9311      	str	r3, [sp, #68]	; 0x44
 80106c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80106c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80106c6:	2200      	movs	r2, #0
 80106c8:	2300      	movs	r3, #0
 80106ca:	f7ef febd 	bl	8000448 <__aeabi_dcmpeq>
 80106ce:	1e06      	subs	r6, r0, #0
 80106d0:	d009      	beq.n	80106e6 <_dtoa_r+0x9e>
 80106d2:	2301      	movs	r3, #1
 80106d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80106d6:	6013      	str	r3, [r2, #0]
 80106d8:	4ba3      	ldr	r3, [pc, #652]	; (8010968 <_dtoa_r+0x320>)
 80106da:	9306      	str	r3, [sp, #24]
 80106dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d0e5      	beq.n	80106ae <_dtoa_r+0x66>
 80106e2:	4ba2      	ldr	r3, [pc, #648]	; (801096c <_dtoa_r+0x324>)
 80106e4:	e7e1      	b.n	80106aa <_dtoa_r+0x62>
 80106e6:	ab1a      	add	r3, sp, #104	; 0x68
 80106e8:	9301      	str	r3, [sp, #4]
 80106ea:	ab1b      	add	r3, sp, #108	; 0x6c
 80106ec:	9300      	str	r3, [sp, #0]
 80106ee:	9804      	ldr	r0, [sp, #16]
 80106f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80106f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106f4:	f7fc ff86 	bl	800d604 <__d2b>
 80106f8:	007a      	lsls	r2, r7, #1
 80106fa:	9005      	str	r0, [sp, #20]
 80106fc:	0d52      	lsrs	r2, r2, #21
 80106fe:	d100      	bne.n	8010702 <_dtoa_r+0xba>
 8010700:	e07b      	b.n	80107fa <_dtoa_r+0x1b2>
 8010702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010704:	9617      	str	r6, [sp, #92]	; 0x5c
 8010706:	0319      	lsls	r1, r3, #12
 8010708:	4b99      	ldr	r3, [pc, #612]	; (8010970 <_dtoa_r+0x328>)
 801070a:	0b09      	lsrs	r1, r1, #12
 801070c:	430b      	orrs	r3, r1
 801070e:	4999      	ldr	r1, [pc, #612]	; (8010974 <_dtoa_r+0x32c>)
 8010710:	1857      	adds	r7, r2, r1
 8010712:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010714:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010716:	0019      	movs	r1, r3
 8010718:	2200      	movs	r2, #0
 801071a:	4b97      	ldr	r3, [pc, #604]	; (8010978 <_dtoa_r+0x330>)
 801071c:	f7f1 fa68 	bl	8001bf0 <__aeabi_dsub>
 8010720:	4a96      	ldr	r2, [pc, #600]	; (801097c <_dtoa_r+0x334>)
 8010722:	4b97      	ldr	r3, [pc, #604]	; (8010980 <_dtoa_r+0x338>)
 8010724:	f7f0 ffa2 	bl	800166c <__aeabi_dmul>
 8010728:	4a96      	ldr	r2, [pc, #600]	; (8010984 <_dtoa_r+0x33c>)
 801072a:	4b97      	ldr	r3, [pc, #604]	; (8010988 <_dtoa_r+0x340>)
 801072c:	f7f0 f844 	bl	80007b8 <__aeabi_dadd>
 8010730:	0004      	movs	r4, r0
 8010732:	0038      	movs	r0, r7
 8010734:	000d      	movs	r5, r1
 8010736:	f7f1 fe31 	bl	800239c <__aeabi_i2d>
 801073a:	4a94      	ldr	r2, [pc, #592]	; (801098c <_dtoa_r+0x344>)
 801073c:	4b94      	ldr	r3, [pc, #592]	; (8010990 <_dtoa_r+0x348>)
 801073e:	f7f0 ff95 	bl	800166c <__aeabi_dmul>
 8010742:	0002      	movs	r2, r0
 8010744:	000b      	movs	r3, r1
 8010746:	0020      	movs	r0, r4
 8010748:	0029      	movs	r1, r5
 801074a:	f7f0 f835 	bl	80007b8 <__aeabi_dadd>
 801074e:	0004      	movs	r4, r0
 8010750:	000d      	movs	r5, r1
 8010752:	f7f1 fded 	bl	8002330 <__aeabi_d2iz>
 8010756:	2200      	movs	r2, #0
 8010758:	9003      	str	r0, [sp, #12]
 801075a:	2300      	movs	r3, #0
 801075c:	0020      	movs	r0, r4
 801075e:	0029      	movs	r1, r5
 8010760:	f7ef fe78 	bl	8000454 <__aeabi_dcmplt>
 8010764:	2800      	cmp	r0, #0
 8010766:	d00b      	beq.n	8010780 <_dtoa_r+0x138>
 8010768:	9803      	ldr	r0, [sp, #12]
 801076a:	f7f1 fe17 	bl	800239c <__aeabi_i2d>
 801076e:	002b      	movs	r3, r5
 8010770:	0022      	movs	r2, r4
 8010772:	f7ef fe69 	bl	8000448 <__aeabi_dcmpeq>
 8010776:	4243      	negs	r3, r0
 8010778:	4158      	adcs	r0, r3
 801077a:	9b03      	ldr	r3, [sp, #12]
 801077c:	1a1b      	subs	r3, r3, r0
 801077e:	9303      	str	r3, [sp, #12]
 8010780:	2301      	movs	r3, #1
 8010782:	9316      	str	r3, [sp, #88]	; 0x58
 8010784:	9b03      	ldr	r3, [sp, #12]
 8010786:	2b16      	cmp	r3, #22
 8010788:	d810      	bhi.n	80107ac <_dtoa_r+0x164>
 801078a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801078c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801078e:	9a03      	ldr	r2, [sp, #12]
 8010790:	4b80      	ldr	r3, [pc, #512]	; (8010994 <_dtoa_r+0x34c>)
 8010792:	00d2      	lsls	r2, r2, #3
 8010794:	189b      	adds	r3, r3, r2
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	f7ef fe5b 	bl	8000454 <__aeabi_dcmplt>
 801079e:	2800      	cmp	r0, #0
 80107a0:	d047      	beq.n	8010832 <_dtoa_r+0x1ea>
 80107a2:	9b03      	ldr	r3, [sp, #12]
 80107a4:	3b01      	subs	r3, #1
 80107a6:	9303      	str	r3, [sp, #12]
 80107a8:	2300      	movs	r3, #0
 80107aa:	9316      	str	r3, [sp, #88]	; 0x58
 80107ac:	2200      	movs	r2, #0
 80107ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80107b0:	920a      	str	r2, [sp, #40]	; 0x28
 80107b2:	1bdb      	subs	r3, r3, r7
 80107b4:	1e5a      	subs	r2, r3, #1
 80107b6:	d53e      	bpl.n	8010836 <_dtoa_r+0x1ee>
 80107b8:	2201      	movs	r2, #1
 80107ba:	1ad3      	subs	r3, r2, r3
 80107bc:	930a      	str	r3, [sp, #40]	; 0x28
 80107be:	2300      	movs	r3, #0
 80107c0:	930c      	str	r3, [sp, #48]	; 0x30
 80107c2:	9b03      	ldr	r3, [sp, #12]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	db38      	blt.n	801083a <_dtoa_r+0x1f2>
 80107c8:	9a03      	ldr	r2, [sp, #12]
 80107ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80107cc:	4694      	mov	ip, r2
 80107ce:	4463      	add	r3, ip
 80107d0:	930c      	str	r3, [sp, #48]	; 0x30
 80107d2:	2300      	movs	r3, #0
 80107d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80107d6:	930d      	str	r3, [sp, #52]	; 0x34
 80107d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107da:	2401      	movs	r4, #1
 80107dc:	2b09      	cmp	r3, #9
 80107de:	d867      	bhi.n	80108b0 <_dtoa_r+0x268>
 80107e0:	2b05      	cmp	r3, #5
 80107e2:	dd02      	ble.n	80107ea <_dtoa_r+0x1a2>
 80107e4:	2400      	movs	r4, #0
 80107e6:	3b04      	subs	r3, #4
 80107e8:	9322      	str	r3, [sp, #136]	; 0x88
 80107ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107ec:	1e98      	subs	r0, r3, #2
 80107ee:	2803      	cmp	r0, #3
 80107f0:	d867      	bhi.n	80108c2 <_dtoa_r+0x27a>
 80107f2:	f7ef fc8f 	bl	8000114 <__gnu_thumb1_case_uqi>
 80107f6:	3a2b      	.short	0x3a2b
 80107f8:	5b38      	.short	0x5b38
 80107fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80107fc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80107fe:	18f6      	adds	r6, r6, r3
 8010800:	4b65      	ldr	r3, [pc, #404]	; (8010998 <_dtoa_r+0x350>)
 8010802:	18f2      	adds	r2, r6, r3
 8010804:	2a20      	cmp	r2, #32
 8010806:	dd0f      	ble.n	8010828 <_dtoa_r+0x1e0>
 8010808:	2340      	movs	r3, #64	; 0x40
 801080a:	1a9b      	subs	r3, r3, r2
 801080c:	409f      	lsls	r7, r3
 801080e:	4b63      	ldr	r3, [pc, #396]	; (801099c <_dtoa_r+0x354>)
 8010810:	0038      	movs	r0, r7
 8010812:	18f3      	adds	r3, r6, r3
 8010814:	40dc      	lsrs	r4, r3
 8010816:	4320      	orrs	r0, r4
 8010818:	f7f1 fdf0 	bl	80023fc <__aeabi_ui2d>
 801081c:	2201      	movs	r2, #1
 801081e:	4b60      	ldr	r3, [pc, #384]	; (80109a0 <_dtoa_r+0x358>)
 8010820:	1e77      	subs	r7, r6, #1
 8010822:	18cb      	adds	r3, r1, r3
 8010824:	9217      	str	r2, [sp, #92]	; 0x5c
 8010826:	e776      	b.n	8010716 <_dtoa_r+0xce>
 8010828:	2320      	movs	r3, #32
 801082a:	0020      	movs	r0, r4
 801082c:	1a9b      	subs	r3, r3, r2
 801082e:	4098      	lsls	r0, r3
 8010830:	e7f2      	b.n	8010818 <_dtoa_r+0x1d0>
 8010832:	9016      	str	r0, [sp, #88]	; 0x58
 8010834:	e7ba      	b.n	80107ac <_dtoa_r+0x164>
 8010836:	920c      	str	r2, [sp, #48]	; 0x30
 8010838:	e7c3      	b.n	80107c2 <_dtoa_r+0x17a>
 801083a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801083c:	9a03      	ldr	r2, [sp, #12]
 801083e:	1a9b      	subs	r3, r3, r2
 8010840:	930a      	str	r3, [sp, #40]	; 0x28
 8010842:	4253      	negs	r3, r2
 8010844:	930d      	str	r3, [sp, #52]	; 0x34
 8010846:	2300      	movs	r3, #0
 8010848:	9313      	str	r3, [sp, #76]	; 0x4c
 801084a:	e7c5      	b.n	80107d8 <_dtoa_r+0x190>
 801084c:	2300      	movs	r3, #0
 801084e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010850:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010852:	930b      	str	r3, [sp, #44]	; 0x2c
 8010854:	9307      	str	r3, [sp, #28]
 8010856:	2b00      	cmp	r3, #0
 8010858:	dc13      	bgt.n	8010882 <_dtoa_r+0x23a>
 801085a:	2301      	movs	r3, #1
 801085c:	001a      	movs	r2, r3
 801085e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010860:	9307      	str	r3, [sp, #28]
 8010862:	9223      	str	r2, [sp, #140]	; 0x8c
 8010864:	e00d      	b.n	8010882 <_dtoa_r+0x23a>
 8010866:	2301      	movs	r3, #1
 8010868:	e7f1      	b.n	801084e <_dtoa_r+0x206>
 801086a:	2300      	movs	r3, #0
 801086c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801086e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010870:	4694      	mov	ip, r2
 8010872:	9b03      	ldr	r3, [sp, #12]
 8010874:	4463      	add	r3, ip
 8010876:	930b      	str	r3, [sp, #44]	; 0x2c
 8010878:	3301      	adds	r3, #1
 801087a:	9307      	str	r3, [sp, #28]
 801087c:	2b00      	cmp	r3, #0
 801087e:	dc00      	bgt.n	8010882 <_dtoa_r+0x23a>
 8010880:	2301      	movs	r3, #1
 8010882:	2100      	movs	r1, #0
 8010884:	2204      	movs	r2, #4
 8010886:	0010      	movs	r0, r2
 8010888:	3014      	adds	r0, #20
 801088a:	4298      	cmp	r0, r3
 801088c:	d91d      	bls.n	80108ca <_dtoa_r+0x282>
 801088e:	9b04      	ldr	r3, [sp, #16]
 8010890:	0018      	movs	r0, r3
 8010892:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010894:	f7fc fb18 	bl	800cec8 <_Balloc>
 8010898:	9006      	str	r0, [sp, #24]
 801089a:	2800      	cmp	r0, #0
 801089c:	d118      	bne.n	80108d0 <_dtoa_r+0x288>
 801089e:	21b0      	movs	r1, #176	; 0xb0
 80108a0:	4b40      	ldr	r3, [pc, #256]	; (80109a4 <_dtoa_r+0x35c>)
 80108a2:	4841      	ldr	r0, [pc, #260]	; (80109a8 <_dtoa_r+0x360>)
 80108a4:	9a06      	ldr	r2, [sp, #24]
 80108a6:	31ff      	adds	r1, #255	; 0xff
 80108a8:	f7ff fdd2 	bl	8010450 <__assert_func>
 80108ac:	2301      	movs	r3, #1
 80108ae:	e7dd      	b.n	801086c <_dtoa_r+0x224>
 80108b0:	2300      	movs	r3, #0
 80108b2:	940f      	str	r4, [sp, #60]	; 0x3c
 80108b4:	9322      	str	r3, [sp, #136]	; 0x88
 80108b6:	3b01      	subs	r3, #1
 80108b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80108ba:	9307      	str	r3, [sp, #28]
 80108bc:	2200      	movs	r2, #0
 80108be:	3313      	adds	r3, #19
 80108c0:	e7cf      	b.n	8010862 <_dtoa_r+0x21a>
 80108c2:	2301      	movs	r3, #1
 80108c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80108c6:	3b02      	subs	r3, #2
 80108c8:	e7f6      	b.n	80108b8 <_dtoa_r+0x270>
 80108ca:	3101      	adds	r1, #1
 80108cc:	0052      	lsls	r2, r2, #1
 80108ce:	e7da      	b.n	8010886 <_dtoa_r+0x23e>
 80108d0:	9b04      	ldr	r3, [sp, #16]
 80108d2:	9a06      	ldr	r2, [sp, #24]
 80108d4:	639a      	str	r2, [r3, #56]	; 0x38
 80108d6:	9b07      	ldr	r3, [sp, #28]
 80108d8:	2b0e      	cmp	r3, #14
 80108da:	d900      	bls.n	80108de <_dtoa_r+0x296>
 80108dc:	e0e3      	b.n	8010aa6 <_dtoa_r+0x45e>
 80108de:	2c00      	cmp	r4, #0
 80108e0:	d100      	bne.n	80108e4 <_dtoa_r+0x29c>
 80108e2:	e0e0      	b.n	8010aa6 <_dtoa_r+0x45e>
 80108e4:	9b03      	ldr	r3, [sp, #12]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	dd62      	ble.n	80109b0 <_dtoa_r+0x368>
 80108ea:	210f      	movs	r1, #15
 80108ec:	9a03      	ldr	r2, [sp, #12]
 80108ee:	4b29      	ldr	r3, [pc, #164]	; (8010994 <_dtoa_r+0x34c>)
 80108f0:	400a      	ands	r2, r1
 80108f2:	00d2      	lsls	r2, r2, #3
 80108f4:	189b      	adds	r3, r3, r2
 80108f6:	681e      	ldr	r6, [r3, #0]
 80108f8:	685f      	ldr	r7, [r3, #4]
 80108fa:	9b03      	ldr	r3, [sp, #12]
 80108fc:	2402      	movs	r4, #2
 80108fe:	111d      	asrs	r5, r3, #4
 8010900:	05db      	lsls	r3, r3, #23
 8010902:	d50a      	bpl.n	801091a <_dtoa_r+0x2d2>
 8010904:	4b29      	ldr	r3, [pc, #164]	; (80109ac <_dtoa_r+0x364>)
 8010906:	400d      	ands	r5, r1
 8010908:	6a1a      	ldr	r2, [r3, #32]
 801090a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801090c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801090e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010910:	f7f0 fab2 	bl	8000e78 <__aeabi_ddiv>
 8010914:	9008      	str	r0, [sp, #32]
 8010916:	9109      	str	r1, [sp, #36]	; 0x24
 8010918:	3401      	adds	r4, #1
 801091a:	4b24      	ldr	r3, [pc, #144]	; (80109ac <_dtoa_r+0x364>)
 801091c:	930e      	str	r3, [sp, #56]	; 0x38
 801091e:	2d00      	cmp	r5, #0
 8010920:	d108      	bne.n	8010934 <_dtoa_r+0x2ec>
 8010922:	9808      	ldr	r0, [sp, #32]
 8010924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010926:	0032      	movs	r2, r6
 8010928:	003b      	movs	r3, r7
 801092a:	f7f0 faa5 	bl	8000e78 <__aeabi_ddiv>
 801092e:	9008      	str	r0, [sp, #32]
 8010930:	9109      	str	r1, [sp, #36]	; 0x24
 8010932:	e058      	b.n	80109e6 <_dtoa_r+0x39e>
 8010934:	2301      	movs	r3, #1
 8010936:	421d      	tst	r5, r3
 8010938:	d009      	beq.n	801094e <_dtoa_r+0x306>
 801093a:	18e4      	adds	r4, r4, r3
 801093c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801093e:	0030      	movs	r0, r6
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	0039      	movs	r1, r7
 8010946:	f7f0 fe91 	bl	800166c <__aeabi_dmul>
 801094a:	0006      	movs	r6, r0
 801094c:	000f      	movs	r7, r1
 801094e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010950:	106d      	asrs	r5, r5, #1
 8010952:	3308      	adds	r3, #8
 8010954:	e7e2      	b.n	801091c <_dtoa_r+0x2d4>
 8010956:	46c0      	nop			; (mov r8, r8)
 8010958:	7ff00000 	.word	0x7ff00000
 801095c:	0000270f 	.word	0x0000270f
 8010960:	08014d05 	.word	0x08014d05
 8010964:	08014d08 	.word	0x08014d08
 8010968:	08014c76 	.word	0x08014c76
 801096c:	08014c77 	.word	0x08014c77
 8010970:	3ff00000 	.word	0x3ff00000
 8010974:	fffffc01 	.word	0xfffffc01
 8010978:	3ff80000 	.word	0x3ff80000
 801097c:	636f4361 	.word	0x636f4361
 8010980:	3fd287a7 	.word	0x3fd287a7
 8010984:	8b60c8b3 	.word	0x8b60c8b3
 8010988:	3fc68a28 	.word	0x3fc68a28
 801098c:	509f79fb 	.word	0x509f79fb
 8010990:	3fd34413 	.word	0x3fd34413
 8010994:	08014b70 	.word	0x08014b70
 8010998:	00000432 	.word	0x00000432
 801099c:	00000412 	.word	0x00000412
 80109a0:	fe100000 	.word	0xfe100000
 80109a4:	08014a79 	.word	0x08014a79
 80109a8:	08014d09 	.word	0x08014d09
 80109ac:	08014b48 	.word	0x08014b48
 80109b0:	9b03      	ldr	r3, [sp, #12]
 80109b2:	2402      	movs	r4, #2
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d016      	beq.n	80109e6 <_dtoa_r+0x39e>
 80109b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80109ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80109bc:	220f      	movs	r2, #15
 80109be:	425d      	negs	r5, r3
 80109c0:	402a      	ands	r2, r5
 80109c2:	4bdd      	ldr	r3, [pc, #884]	; (8010d38 <_dtoa_r+0x6f0>)
 80109c4:	00d2      	lsls	r2, r2, #3
 80109c6:	189b      	adds	r3, r3, r2
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	f7f0 fe4e 	bl	800166c <__aeabi_dmul>
 80109d0:	2701      	movs	r7, #1
 80109d2:	2300      	movs	r3, #0
 80109d4:	9008      	str	r0, [sp, #32]
 80109d6:	9109      	str	r1, [sp, #36]	; 0x24
 80109d8:	4ed8      	ldr	r6, [pc, #864]	; (8010d3c <_dtoa_r+0x6f4>)
 80109da:	112d      	asrs	r5, r5, #4
 80109dc:	2d00      	cmp	r5, #0
 80109de:	d000      	beq.n	80109e2 <_dtoa_r+0x39a>
 80109e0:	e091      	b.n	8010b06 <_dtoa_r+0x4be>
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d1a3      	bne.n	801092e <_dtoa_r+0x2e6>
 80109e6:	9e08      	ldr	r6, [sp, #32]
 80109e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80109ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d100      	bne.n	80109f2 <_dtoa_r+0x3aa>
 80109f0:	e094      	b.n	8010b1c <_dtoa_r+0x4d4>
 80109f2:	2200      	movs	r2, #0
 80109f4:	0030      	movs	r0, r6
 80109f6:	0039      	movs	r1, r7
 80109f8:	4bd1      	ldr	r3, [pc, #836]	; (8010d40 <_dtoa_r+0x6f8>)
 80109fa:	f7ef fd2b 	bl	8000454 <__aeabi_dcmplt>
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d100      	bne.n	8010a04 <_dtoa_r+0x3bc>
 8010a02:	e08b      	b.n	8010b1c <_dtoa_r+0x4d4>
 8010a04:	9b07      	ldr	r3, [sp, #28]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d100      	bne.n	8010a0c <_dtoa_r+0x3c4>
 8010a0a:	e087      	b.n	8010b1c <_dtoa_r+0x4d4>
 8010a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	dd45      	ble.n	8010a9e <_dtoa_r+0x456>
 8010a12:	9b03      	ldr	r3, [sp, #12]
 8010a14:	2200      	movs	r2, #0
 8010a16:	3b01      	subs	r3, #1
 8010a18:	930e      	str	r3, [sp, #56]	; 0x38
 8010a1a:	0030      	movs	r0, r6
 8010a1c:	4bc9      	ldr	r3, [pc, #804]	; (8010d44 <_dtoa_r+0x6fc>)
 8010a1e:	0039      	movs	r1, r7
 8010a20:	f7f0 fe24 	bl	800166c <__aeabi_dmul>
 8010a24:	9008      	str	r0, [sp, #32]
 8010a26:	9109      	str	r1, [sp, #36]	; 0x24
 8010a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a2a:	3401      	adds	r4, #1
 8010a2c:	0020      	movs	r0, r4
 8010a2e:	9e08      	ldr	r6, [sp, #32]
 8010a30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010a32:	9312      	str	r3, [sp, #72]	; 0x48
 8010a34:	f7f1 fcb2 	bl	800239c <__aeabi_i2d>
 8010a38:	0032      	movs	r2, r6
 8010a3a:	003b      	movs	r3, r7
 8010a3c:	f7f0 fe16 	bl	800166c <__aeabi_dmul>
 8010a40:	2200      	movs	r2, #0
 8010a42:	4bc1      	ldr	r3, [pc, #772]	; (8010d48 <_dtoa_r+0x700>)
 8010a44:	f7ef feb8 	bl	80007b8 <__aeabi_dadd>
 8010a48:	4ac0      	ldr	r2, [pc, #768]	; (8010d4c <_dtoa_r+0x704>)
 8010a4a:	9014      	str	r0, [sp, #80]	; 0x50
 8010a4c:	9115      	str	r1, [sp, #84]	; 0x54
 8010a4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a50:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010a52:	4694      	mov	ip, r2
 8010a54:	9308      	str	r3, [sp, #32]
 8010a56:	9409      	str	r4, [sp, #36]	; 0x24
 8010a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a5a:	4463      	add	r3, ip
 8010a5c:	9318      	str	r3, [sp, #96]	; 0x60
 8010a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8010a60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d15e      	bne.n	8010b24 <_dtoa_r+0x4dc>
 8010a66:	2200      	movs	r2, #0
 8010a68:	4bb9      	ldr	r3, [pc, #740]	; (8010d50 <_dtoa_r+0x708>)
 8010a6a:	0030      	movs	r0, r6
 8010a6c:	0039      	movs	r1, r7
 8010a6e:	f7f1 f8bf 	bl	8001bf0 <__aeabi_dsub>
 8010a72:	9a08      	ldr	r2, [sp, #32]
 8010a74:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010a76:	0004      	movs	r4, r0
 8010a78:	000d      	movs	r5, r1
 8010a7a:	f7ef fcff 	bl	800047c <__aeabi_dcmpgt>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d000      	beq.n	8010a84 <_dtoa_r+0x43c>
 8010a82:	e2b3      	b.n	8010fec <_dtoa_r+0x9a4>
 8010a84:	48b3      	ldr	r0, [pc, #716]	; (8010d54 <_dtoa_r+0x70c>)
 8010a86:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010a88:	4684      	mov	ip, r0
 8010a8a:	4461      	add	r1, ip
 8010a8c:	000b      	movs	r3, r1
 8010a8e:	0020      	movs	r0, r4
 8010a90:	0029      	movs	r1, r5
 8010a92:	9a08      	ldr	r2, [sp, #32]
 8010a94:	f7ef fcde 	bl	8000454 <__aeabi_dcmplt>
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	d000      	beq.n	8010a9e <_dtoa_r+0x456>
 8010a9c:	e2a3      	b.n	8010fe6 <_dtoa_r+0x99e>
 8010a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010aa0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010aa2:	9308      	str	r3, [sp, #32]
 8010aa4:	9409      	str	r4, [sp, #36]	; 0x24
 8010aa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	da00      	bge.n	8010aae <_dtoa_r+0x466>
 8010aac:	e179      	b.n	8010da2 <_dtoa_r+0x75a>
 8010aae:	9a03      	ldr	r2, [sp, #12]
 8010ab0:	2a0e      	cmp	r2, #14
 8010ab2:	dd00      	ble.n	8010ab6 <_dtoa_r+0x46e>
 8010ab4:	e175      	b.n	8010da2 <_dtoa_r+0x75a>
 8010ab6:	4ba0      	ldr	r3, [pc, #640]	; (8010d38 <_dtoa_r+0x6f0>)
 8010ab8:	00d2      	lsls	r2, r2, #3
 8010aba:	189b      	adds	r3, r3, r2
 8010abc:	681e      	ldr	r6, [r3, #0]
 8010abe:	685f      	ldr	r7, [r3, #4]
 8010ac0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	db00      	blt.n	8010ac8 <_dtoa_r+0x480>
 8010ac6:	e0e5      	b.n	8010c94 <_dtoa_r+0x64c>
 8010ac8:	9b07      	ldr	r3, [sp, #28]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	dd00      	ble.n	8010ad0 <_dtoa_r+0x488>
 8010ace:	e0e1      	b.n	8010c94 <_dtoa_r+0x64c>
 8010ad0:	d000      	beq.n	8010ad4 <_dtoa_r+0x48c>
 8010ad2:	e288      	b.n	8010fe6 <_dtoa_r+0x99e>
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	0030      	movs	r0, r6
 8010ad8:	0039      	movs	r1, r7
 8010ada:	4b9d      	ldr	r3, [pc, #628]	; (8010d50 <_dtoa_r+0x708>)
 8010adc:	f7f0 fdc6 	bl	800166c <__aeabi_dmul>
 8010ae0:	9a08      	ldr	r2, [sp, #32]
 8010ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ae4:	f7ef fcd4 	bl	8000490 <__aeabi_dcmpge>
 8010ae8:	9e07      	ldr	r6, [sp, #28]
 8010aea:	0037      	movs	r7, r6
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d000      	beq.n	8010af2 <_dtoa_r+0x4aa>
 8010af0:	e25f      	b.n	8010fb2 <_dtoa_r+0x96a>
 8010af2:	9b06      	ldr	r3, [sp, #24]
 8010af4:	9a06      	ldr	r2, [sp, #24]
 8010af6:	3301      	adds	r3, #1
 8010af8:	9308      	str	r3, [sp, #32]
 8010afa:	2331      	movs	r3, #49	; 0x31
 8010afc:	7013      	strb	r3, [r2, #0]
 8010afe:	9b03      	ldr	r3, [sp, #12]
 8010b00:	3301      	adds	r3, #1
 8010b02:	9303      	str	r3, [sp, #12]
 8010b04:	e25a      	b.n	8010fbc <_dtoa_r+0x974>
 8010b06:	423d      	tst	r5, r7
 8010b08:	d005      	beq.n	8010b16 <_dtoa_r+0x4ce>
 8010b0a:	6832      	ldr	r2, [r6, #0]
 8010b0c:	6873      	ldr	r3, [r6, #4]
 8010b0e:	f7f0 fdad 	bl	800166c <__aeabi_dmul>
 8010b12:	003b      	movs	r3, r7
 8010b14:	3401      	adds	r4, #1
 8010b16:	106d      	asrs	r5, r5, #1
 8010b18:	3608      	adds	r6, #8
 8010b1a:	e75f      	b.n	80109dc <_dtoa_r+0x394>
 8010b1c:	9b03      	ldr	r3, [sp, #12]
 8010b1e:	930e      	str	r3, [sp, #56]	; 0x38
 8010b20:	9b07      	ldr	r3, [sp, #28]
 8010b22:	e783      	b.n	8010a2c <_dtoa_r+0x3e4>
 8010b24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010b26:	4b84      	ldr	r3, [pc, #528]	; (8010d38 <_dtoa_r+0x6f0>)
 8010b28:	3a01      	subs	r2, #1
 8010b2a:	00d2      	lsls	r2, r2, #3
 8010b2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010b2e:	189b      	adds	r3, r3, r2
 8010b30:	9c08      	ldr	r4, [sp, #32]
 8010b32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010b34:	681a      	ldr	r2, [r3, #0]
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	2900      	cmp	r1, #0
 8010b3a:	d051      	beq.n	8010be0 <_dtoa_r+0x598>
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	4986      	ldr	r1, [pc, #536]	; (8010d58 <_dtoa_r+0x710>)
 8010b40:	f7f0 f99a 	bl	8000e78 <__aeabi_ddiv>
 8010b44:	0022      	movs	r2, r4
 8010b46:	002b      	movs	r3, r5
 8010b48:	f7f1 f852 	bl	8001bf0 <__aeabi_dsub>
 8010b4c:	9a06      	ldr	r2, [sp, #24]
 8010b4e:	0004      	movs	r4, r0
 8010b50:	4694      	mov	ip, r2
 8010b52:	000d      	movs	r5, r1
 8010b54:	9b06      	ldr	r3, [sp, #24]
 8010b56:	9314      	str	r3, [sp, #80]	; 0x50
 8010b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b5a:	4463      	add	r3, ip
 8010b5c:	9318      	str	r3, [sp, #96]	; 0x60
 8010b5e:	0039      	movs	r1, r7
 8010b60:	0030      	movs	r0, r6
 8010b62:	f7f1 fbe5 	bl	8002330 <__aeabi_d2iz>
 8010b66:	9012      	str	r0, [sp, #72]	; 0x48
 8010b68:	f7f1 fc18 	bl	800239c <__aeabi_i2d>
 8010b6c:	0002      	movs	r2, r0
 8010b6e:	000b      	movs	r3, r1
 8010b70:	0030      	movs	r0, r6
 8010b72:	0039      	movs	r1, r7
 8010b74:	f7f1 f83c 	bl	8001bf0 <__aeabi_dsub>
 8010b78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	9308      	str	r3, [sp, #32]
 8010b80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b82:	0006      	movs	r6, r0
 8010b84:	3330      	adds	r3, #48	; 0x30
 8010b86:	7013      	strb	r3, [r2, #0]
 8010b88:	0022      	movs	r2, r4
 8010b8a:	002b      	movs	r3, r5
 8010b8c:	000f      	movs	r7, r1
 8010b8e:	f7ef fc61 	bl	8000454 <__aeabi_dcmplt>
 8010b92:	2800      	cmp	r0, #0
 8010b94:	d174      	bne.n	8010c80 <_dtoa_r+0x638>
 8010b96:	0032      	movs	r2, r6
 8010b98:	003b      	movs	r3, r7
 8010b9a:	2000      	movs	r0, #0
 8010b9c:	4968      	ldr	r1, [pc, #416]	; (8010d40 <_dtoa_r+0x6f8>)
 8010b9e:	f7f1 f827 	bl	8001bf0 <__aeabi_dsub>
 8010ba2:	0022      	movs	r2, r4
 8010ba4:	002b      	movs	r3, r5
 8010ba6:	f7ef fc55 	bl	8000454 <__aeabi_dcmplt>
 8010baa:	2800      	cmp	r0, #0
 8010bac:	d000      	beq.n	8010bb0 <_dtoa_r+0x568>
 8010bae:	e0d7      	b.n	8010d60 <_dtoa_r+0x718>
 8010bb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010bb2:	9a08      	ldr	r2, [sp, #32]
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d100      	bne.n	8010bba <_dtoa_r+0x572>
 8010bb8:	e771      	b.n	8010a9e <_dtoa_r+0x456>
 8010bba:	2200      	movs	r2, #0
 8010bbc:	0020      	movs	r0, r4
 8010bbe:	0029      	movs	r1, r5
 8010bc0:	4b60      	ldr	r3, [pc, #384]	; (8010d44 <_dtoa_r+0x6fc>)
 8010bc2:	f7f0 fd53 	bl	800166c <__aeabi_dmul>
 8010bc6:	4b5f      	ldr	r3, [pc, #380]	; (8010d44 <_dtoa_r+0x6fc>)
 8010bc8:	0004      	movs	r4, r0
 8010bca:	000d      	movs	r5, r1
 8010bcc:	0030      	movs	r0, r6
 8010bce:	0039      	movs	r1, r7
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f7f0 fd4b 	bl	800166c <__aeabi_dmul>
 8010bd6:	9b08      	ldr	r3, [sp, #32]
 8010bd8:	0006      	movs	r6, r0
 8010bda:	000f      	movs	r7, r1
 8010bdc:	9314      	str	r3, [sp, #80]	; 0x50
 8010bde:	e7be      	b.n	8010b5e <_dtoa_r+0x516>
 8010be0:	0020      	movs	r0, r4
 8010be2:	0029      	movs	r1, r5
 8010be4:	f7f0 fd42 	bl	800166c <__aeabi_dmul>
 8010be8:	9a06      	ldr	r2, [sp, #24]
 8010bea:	9b06      	ldr	r3, [sp, #24]
 8010bec:	4694      	mov	ip, r2
 8010bee:	9308      	str	r3, [sp, #32]
 8010bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bf2:	9014      	str	r0, [sp, #80]	; 0x50
 8010bf4:	9115      	str	r1, [sp, #84]	; 0x54
 8010bf6:	4463      	add	r3, ip
 8010bf8:	9319      	str	r3, [sp, #100]	; 0x64
 8010bfa:	0030      	movs	r0, r6
 8010bfc:	0039      	movs	r1, r7
 8010bfe:	f7f1 fb97 	bl	8002330 <__aeabi_d2iz>
 8010c02:	9018      	str	r0, [sp, #96]	; 0x60
 8010c04:	f7f1 fbca 	bl	800239c <__aeabi_i2d>
 8010c08:	0002      	movs	r2, r0
 8010c0a:	000b      	movs	r3, r1
 8010c0c:	0030      	movs	r0, r6
 8010c0e:	0039      	movs	r1, r7
 8010c10:	f7f0 ffee 	bl	8001bf0 <__aeabi_dsub>
 8010c14:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010c16:	9b08      	ldr	r3, [sp, #32]
 8010c18:	3630      	adds	r6, #48	; 0x30
 8010c1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010c1c:	701e      	strb	r6, [r3, #0]
 8010c1e:	3301      	adds	r3, #1
 8010c20:	0004      	movs	r4, r0
 8010c22:	000d      	movs	r5, r1
 8010c24:	9308      	str	r3, [sp, #32]
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d12d      	bne.n	8010c86 <_dtoa_r+0x63e>
 8010c2a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010c2c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010c2e:	9a06      	ldr	r2, [sp, #24]
 8010c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c32:	4694      	mov	ip, r2
 8010c34:	4463      	add	r3, ip
 8010c36:	2200      	movs	r2, #0
 8010c38:	9308      	str	r3, [sp, #32]
 8010c3a:	4b47      	ldr	r3, [pc, #284]	; (8010d58 <_dtoa_r+0x710>)
 8010c3c:	f7ef fdbc 	bl	80007b8 <__aeabi_dadd>
 8010c40:	0002      	movs	r2, r0
 8010c42:	000b      	movs	r3, r1
 8010c44:	0020      	movs	r0, r4
 8010c46:	0029      	movs	r1, r5
 8010c48:	f7ef fc18 	bl	800047c <__aeabi_dcmpgt>
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	d000      	beq.n	8010c52 <_dtoa_r+0x60a>
 8010c50:	e086      	b.n	8010d60 <_dtoa_r+0x718>
 8010c52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c56:	2000      	movs	r0, #0
 8010c58:	493f      	ldr	r1, [pc, #252]	; (8010d58 <_dtoa_r+0x710>)
 8010c5a:	f7f0 ffc9 	bl	8001bf0 <__aeabi_dsub>
 8010c5e:	0002      	movs	r2, r0
 8010c60:	000b      	movs	r3, r1
 8010c62:	0020      	movs	r0, r4
 8010c64:	0029      	movs	r1, r5
 8010c66:	f7ef fbf5 	bl	8000454 <__aeabi_dcmplt>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	d100      	bne.n	8010c70 <_dtoa_r+0x628>
 8010c6e:	e716      	b.n	8010a9e <_dtoa_r+0x456>
 8010c70:	9b08      	ldr	r3, [sp, #32]
 8010c72:	001a      	movs	r2, r3
 8010c74:	3a01      	subs	r2, #1
 8010c76:	9208      	str	r2, [sp, #32]
 8010c78:	7812      	ldrb	r2, [r2, #0]
 8010c7a:	2a30      	cmp	r2, #48	; 0x30
 8010c7c:	d0f8      	beq.n	8010c70 <_dtoa_r+0x628>
 8010c7e:	9308      	str	r3, [sp, #32]
 8010c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c82:	9303      	str	r3, [sp, #12]
 8010c84:	e046      	b.n	8010d14 <_dtoa_r+0x6cc>
 8010c86:	2200      	movs	r2, #0
 8010c88:	4b2e      	ldr	r3, [pc, #184]	; (8010d44 <_dtoa_r+0x6fc>)
 8010c8a:	f7f0 fcef 	bl	800166c <__aeabi_dmul>
 8010c8e:	0006      	movs	r6, r0
 8010c90:	000f      	movs	r7, r1
 8010c92:	e7b2      	b.n	8010bfa <_dtoa_r+0x5b2>
 8010c94:	9b06      	ldr	r3, [sp, #24]
 8010c96:	9a06      	ldr	r2, [sp, #24]
 8010c98:	930a      	str	r3, [sp, #40]	; 0x28
 8010c9a:	9b07      	ldr	r3, [sp, #28]
 8010c9c:	9c08      	ldr	r4, [sp, #32]
 8010c9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010ca0:	3b01      	subs	r3, #1
 8010ca2:	189b      	adds	r3, r3, r2
 8010ca4:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ca6:	0032      	movs	r2, r6
 8010ca8:	003b      	movs	r3, r7
 8010caa:	0020      	movs	r0, r4
 8010cac:	0029      	movs	r1, r5
 8010cae:	f7f0 f8e3 	bl	8000e78 <__aeabi_ddiv>
 8010cb2:	f7f1 fb3d 	bl	8002330 <__aeabi_d2iz>
 8010cb6:	9007      	str	r0, [sp, #28]
 8010cb8:	f7f1 fb70 	bl	800239c <__aeabi_i2d>
 8010cbc:	0032      	movs	r2, r6
 8010cbe:	003b      	movs	r3, r7
 8010cc0:	f7f0 fcd4 	bl	800166c <__aeabi_dmul>
 8010cc4:	0002      	movs	r2, r0
 8010cc6:	000b      	movs	r3, r1
 8010cc8:	0020      	movs	r0, r4
 8010cca:	0029      	movs	r1, r5
 8010ccc:	f7f0 ff90 	bl	8001bf0 <__aeabi_dsub>
 8010cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd2:	001a      	movs	r2, r3
 8010cd4:	3201      	adds	r2, #1
 8010cd6:	920a      	str	r2, [sp, #40]	; 0x28
 8010cd8:	9208      	str	r2, [sp, #32]
 8010cda:	9a07      	ldr	r2, [sp, #28]
 8010cdc:	3230      	adds	r2, #48	; 0x30
 8010cde:	701a      	strb	r2, [r3, #0]
 8010ce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d14f      	bne.n	8010d86 <_dtoa_r+0x73e>
 8010ce6:	0002      	movs	r2, r0
 8010ce8:	000b      	movs	r3, r1
 8010cea:	f7ef fd65 	bl	80007b8 <__aeabi_dadd>
 8010cee:	0032      	movs	r2, r6
 8010cf0:	003b      	movs	r3, r7
 8010cf2:	0004      	movs	r4, r0
 8010cf4:	000d      	movs	r5, r1
 8010cf6:	f7ef fbc1 	bl	800047c <__aeabi_dcmpgt>
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	d12e      	bne.n	8010d5c <_dtoa_r+0x714>
 8010cfe:	0032      	movs	r2, r6
 8010d00:	003b      	movs	r3, r7
 8010d02:	0020      	movs	r0, r4
 8010d04:	0029      	movs	r1, r5
 8010d06:	f7ef fb9f 	bl	8000448 <__aeabi_dcmpeq>
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	d002      	beq.n	8010d14 <_dtoa_r+0x6cc>
 8010d0e:	9b07      	ldr	r3, [sp, #28]
 8010d10:	07de      	lsls	r6, r3, #31
 8010d12:	d423      	bmi.n	8010d5c <_dtoa_r+0x714>
 8010d14:	9905      	ldr	r1, [sp, #20]
 8010d16:	9804      	ldr	r0, [sp, #16]
 8010d18:	f7fc f8fe 	bl	800cf18 <_Bfree>
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	9a08      	ldr	r2, [sp, #32]
 8010d20:	7013      	strb	r3, [r2, #0]
 8010d22:	9b03      	ldr	r3, [sp, #12]
 8010d24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010d26:	3301      	adds	r3, #1
 8010d28:	6013      	str	r3, [r2, #0]
 8010d2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d100      	bne.n	8010d32 <_dtoa_r+0x6ea>
 8010d30:	e4bd      	b.n	80106ae <_dtoa_r+0x66>
 8010d32:	9a08      	ldr	r2, [sp, #32]
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	e4ba      	b.n	80106ae <_dtoa_r+0x66>
 8010d38:	08014b70 	.word	0x08014b70
 8010d3c:	08014b48 	.word	0x08014b48
 8010d40:	3ff00000 	.word	0x3ff00000
 8010d44:	40240000 	.word	0x40240000
 8010d48:	401c0000 	.word	0x401c0000
 8010d4c:	fcc00000 	.word	0xfcc00000
 8010d50:	40140000 	.word	0x40140000
 8010d54:	7cc00000 	.word	0x7cc00000
 8010d58:	3fe00000 	.word	0x3fe00000
 8010d5c:	9b03      	ldr	r3, [sp, #12]
 8010d5e:	930e      	str	r3, [sp, #56]	; 0x38
 8010d60:	9b08      	ldr	r3, [sp, #32]
 8010d62:	9308      	str	r3, [sp, #32]
 8010d64:	3b01      	subs	r3, #1
 8010d66:	781a      	ldrb	r2, [r3, #0]
 8010d68:	2a39      	cmp	r2, #57	; 0x39
 8010d6a:	d108      	bne.n	8010d7e <_dtoa_r+0x736>
 8010d6c:	9a06      	ldr	r2, [sp, #24]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d1f7      	bne.n	8010d62 <_dtoa_r+0x71a>
 8010d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d74:	9906      	ldr	r1, [sp, #24]
 8010d76:	3201      	adds	r2, #1
 8010d78:	920e      	str	r2, [sp, #56]	; 0x38
 8010d7a:	2230      	movs	r2, #48	; 0x30
 8010d7c:	700a      	strb	r2, [r1, #0]
 8010d7e:	781a      	ldrb	r2, [r3, #0]
 8010d80:	3201      	adds	r2, #1
 8010d82:	701a      	strb	r2, [r3, #0]
 8010d84:	e77c      	b.n	8010c80 <_dtoa_r+0x638>
 8010d86:	2200      	movs	r2, #0
 8010d88:	4ba9      	ldr	r3, [pc, #676]	; (8011030 <_dtoa_r+0x9e8>)
 8010d8a:	f7f0 fc6f 	bl	800166c <__aeabi_dmul>
 8010d8e:	2200      	movs	r2, #0
 8010d90:	2300      	movs	r3, #0
 8010d92:	0004      	movs	r4, r0
 8010d94:	000d      	movs	r5, r1
 8010d96:	f7ef fb57 	bl	8000448 <__aeabi_dcmpeq>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d100      	bne.n	8010da0 <_dtoa_r+0x758>
 8010d9e:	e782      	b.n	8010ca6 <_dtoa_r+0x65e>
 8010da0:	e7b8      	b.n	8010d14 <_dtoa_r+0x6cc>
 8010da2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010da4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010da6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010da8:	2f00      	cmp	r7, #0
 8010daa:	d012      	beq.n	8010dd2 <_dtoa_r+0x78a>
 8010dac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010dae:	2a01      	cmp	r2, #1
 8010db0:	dc6e      	bgt.n	8010e90 <_dtoa_r+0x848>
 8010db2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010db4:	2a00      	cmp	r2, #0
 8010db6:	d065      	beq.n	8010e84 <_dtoa_r+0x83c>
 8010db8:	4a9e      	ldr	r2, [pc, #632]	; (8011034 <_dtoa_r+0x9ec>)
 8010dba:	189b      	adds	r3, r3, r2
 8010dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010dbe:	2101      	movs	r1, #1
 8010dc0:	18d2      	adds	r2, r2, r3
 8010dc2:	920a      	str	r2, [sp, #40]	; 0x28
 8010dc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010dc6:	9804      	ldr	r0, [sp, #16]
 8010dc8:	18d3      	adds	r3, r2, r3
 8010dca:	930c      	str	r3, [sp, #48]	; 0x30
 8010dcc:	f7fc f986 	bl	800d0dc <__i2b>
 8010dd0:	0007      	movs	r7, r0
 8010dd2:	2c00      	cmp	r4, #0
 8010dd4:	d00e      	beq.n	8010df4 <_dtoa_r+0x7ac>
 8010dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	dd0b      	ble.n	8010df4 <_dtoa_r+0x7ac>
 8010ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010dde:	0023      	movs	r3, r4
 8010de0:	4294      	cmp	r4, r2
 8010de2:	dd00      	ble.n	8010de6 <_dtoa_r+0x79e>
 8010de4:	0013      	movs	r3, r2
 8010de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010de8:	1ae4      	subs	r4, r4, r3
 8010dea:	1ad2      	subs	r2, r2, r3
 8010dec:	920a      	str	r2, [sp, #40]	; 0x28
 8010dee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010df0:	1ad3      	subs	r3, r2, r3
 8010df2:	930c      	str	r3, [sp, #48]	; 0x30
 8010df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d01e      	beq.n	8010e38 <_dtoa_r+0x7f0>
 8010dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d05c      	beq.n	8010eba <_dtoa_r+0x872>
 8010e00:	2d00      	cmp	r5, #0
 8010e02:	dd10      	ble.n	8010e26 <_dtoa_r+0x7de>
 8010e04:	0039      	movs	r1, r7
 8010e06:	002a      	movs	r2, r5
 8010e08:	9804      	ldr	r0, [sp, #16]
 8010e0a:	f7fc fa2f 	bl	800d26c <__pow5mult>
 8010e0e:	9a05      	ldr	r2, [sp, #20]
 8010e10:	0001      	movs	r1, r0
 8010e12:	0007      	movs	r7, r0
 8010e14:	9804      	ldr	r0, [sp, #16]
 8010e16:	f7fc f979 	bl	800d10c <__multiply>
 8010e1a:	0006      	movs	r6, r0
 8010e1c:	9905      	ldr	r1, [sp, #20]
 8010e1e:	9804      	ldr	r0, [sp, #16]
 8010e20:	f7fc f87a 	bl	800cf18 <_Bfree>
 8010e24:	9605      	str	r6, [sp, #20]
 8010e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e28:	1b5a      	subs	r2, r3, r5
 8010e2a:	42ab      	cmp	r3, r5
 8010e2c:	d004      	beq.n	8010e38 <_dtoa_r+0x7f0>
 8010e2e:	9905      	ldr	r1, [sp, #20]
 8010e30:	9804      	ldr	r0, [sp, #16]
 8010e32:	f7fc fa1b 	bl	800d26c <__pow5mult>
 8010e36:	9005      	str	r0, [sp, #20]
 8010e38:	2101      	movs	r1, #1
 8010e3a:	9804      	ldr	r0, [sp, #16]
 8010e3c:	f7fc f94e 	bl	800d0dc <__i2b>
 8010e40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e42:	0006      	movs	r6, r0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	dd3a      	ble.n	8010ebe <_dtoa_r+0x876>
 8010e48:	001a      	movs	r2, r3
 8010e4a:	0001      	movs	r1, r0
 8010e4c:	9804      	ldr	r0, [sp, #16]
 8010e4e:	f7fc fa0d 	bl	800d26c <__pow5mult>
 8010e52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e54:	0006      	movs	r6, r0
 8010e56:	2500      	movs	r5, #0
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	dc38      	bgt.n	8010ece <_dtoa_r+0x886>
 8010e5c:	2500      	movs	r5, #0
 8010e5e:	9b08      	ldr	r3, [sp, #32]
 8010e60:	42ab      	cmp	r3, r5
 8010e62:	d130      	bne.n	8010ec6 <_dtoa_r+0x87e>
 8010e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e66:	031b      	lsls	r3, r3, #12
 8010e68:	42ab      	cmp	r3, r5
 8010e6a:	d12c      	bne.n	8010ec6 <_dtoa_r+0x87e>
 8010e6c:	4b72      	ldr	r3, [pc, #456]	; (8011038 <_dtoa_r+0x9f0>)
 8010e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e70:	4213      	tst	r3, r2
 8010e72:	d028      	beq.n	8010ec6 <_dtoa_r+0x87e>
 8010e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e76:	3501      	adds	r5, #1
 8010e78:	3301      	adds	r3, #1
 8010e7a:	930a      	str	r3, [sp, #40]	; 0x28
 8010e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e7e:	3301      	adds	r3, #1
 8010e80:	930c      	str	r3, [sp, #48]	; 0x30
 8010e82:	e020      	b.n	8010ec6 <_dtoa_r+0x87e>
 8010e84:	2336      	movs	r3, #54	; 0x36
 8010e86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010e88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010e8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e8c:	1a9b      	subs	r3, r3, r2
 8010e8e:	e795      	b.n	8010dbc <_dtoa_r+0x774>
 8010e90:	9b07      	ldr	r3, [sp, #28]
 8010e92:	1e5d      	subs	r5, r3, #1
 8010e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e96:	42ab      	cmp	r3, r5
 8010e98:	db07      	blt.n	8010eaa <_dtoa_r+0x862>
 8010e9a:	1b5d      	subs	r5, r3, r5
 8010e9c:	9b07      	ldr	r3, [sp, #28]
 8010e9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	da8b      	bge.n	8010dbc <_dtoa_r+0x774>
 8010ea4:	1ae4      	subs	r4, r4, r3
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	e788      	b.n	8010dbc <_dtoa_r+0x774>
 8010eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010eac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010eae:	1aeb      	subs	r3, r5, r3
 8010eb0:	18d3      	adds	r3, r2, r3
 8010eb2:	950d      	str	r5, [sp, #52]	; 0x34
 8010eb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8010eb6:	2500      	movs	r5, #0
 8010eb8:	e7f0      	b.n	8010e9c <_dtoa_r+0x854>
 8010eba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ebc:	e7b7      	b.n	8010e2e <_dtoa_r+0x7e6>
 8010ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ec0:	2500      	movs	r5, #0
 8010ec2:	2b01      	cmp	r3, #1
 8010ec4:	ddca      	ble.n	8010e5c <_dtoa_r+0x814>
 8010ec6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010ec8:	2001      	movs	r0, #1
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d008      	beq.n	8010ee0 <_dtoa_r+0x898>
 8010ece:	6933      	ldr	r3, [r6, #16]
 8010ed0:	3303      	adds	r3, #3
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	18f3      	adds	r3, r6, r3
 8010ed6:	6858      	ldr	r0, [r3, #4]
 8010ed8:	f7fc f8b8 	bl	800d04c <__hi0bits>
 8010edc:	2320      	movs	r3, #32
 8010ede:	1a18      	subs	r0, r3, r0
 8010ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ee2:	1818      	adds	r0, r3, r0
 8010ee4:	0002      	movs	r2, r0
 8010ee6:	231f      	movs	r3, #31
 8010ee8:	401a      	ands	r2, r3
 8010eea:	4218      	tst	r0, r3
 8010eec:	d047      	beq.n	8010f7e <_dtoa_r+0x936>
 8010eee:	3301      	adds	r3, #1
 8010ef0:	1a9b      	subs	r3, r3, r2
 8010ef2:	2b04      	cmp	r3, #4
 8010ef4:	dd3f      	ble.n	8010f76 <_dtoa_r+0x92e>
 8010ef6:	231c      	movs	r3, #28
 8010ef8:	1a9b      	subs	r3, r3, r2
 8010efa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010efc:	18e4      	adds	r4, r4, r3
 8010efe:	18d2      	adds	r2, r2, r3
 8010f00:	920a      	str	r2, [sp, #40]	; 0x28
 8010f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f04:	18d3      	adds	r3, r2, r3
 8010f06:	930c      	str	r3, [sp, #48]	; 0x30
 8010f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	dd05      	ble.n	8010f1a <_dtoa_r+0x8d2>
 8010f0e:	001a      	movs	r2, r3
 8010f10:	9905      	ldr	r1, [sp, #20]
 8010f12:	9804      	ldr	r0, [sp, #16]
 8010f14:	f7fc f9ec 	bl	800d2f0 <__lshift>
 8010f18:	9005      	str	r0, [sp, #20]
 8010f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	dd05      	ble.n	8010f2c <_dtoa_r+0x8e4>
 8010f20:	0031      	movs	r1, r6
 8010f22:	001a      	movs	r2, r3
 8010f24:	9804      	ldr	r0, [sp, #16]
 8010f26:	f7fc f9e3 	bl	800d2f0 <__lshift>
 8010f2a:	0006      	movs	r6, r0
 8010f2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d027      	beq.n	8010f82 <_dtoa_r+0x93a>
 8010f32:	0031      	movs	r1, r6
 8010f34:	9805      	ldr	r0, [sp, #20]
 8010f36:	f7fc fa49 	bl	800d3cc <__mcmp>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	da21      	bge.n	8010f82 <_dtoa_r+0x93a>
 8010f3e:	9b03      	ldr	r3, [sp, #12]
 8010f40:	220a      	movs	r2, #10
 8010f42:	3b01      	subs	r3, #1
 8010f44:	9303      	str	r3, [sp, #12]
 8010f46:	9905      	ldr	r1, [sp, #20]
 8010f48:	2300      	movs	r3, #0
 8010f4a:	9804      	ldr	r0, [sp, #16]
 8010f4c:	f7fb ffee 	bl	800cf2c <__multadd>
 8010f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f52:	9005      	str	r0, [sp, #20]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d100      	bne.n	8010f5a <_dtoa_r+0x912>
 8010f58:	e15d      	b.n	8011216 <_dtoa_r+0xbce>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	0039      	movs	r1, r7
 8010f5e:	220a      	movs	r2, #10
 8010f60:	9804      	ldr	r0, [sp, #16]
 8010f62:	f7fb ffe3 	bl	800cf2c <__multadd>
 8010f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f68:	0007      	movs	r7, r0
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	dc49      	bgt.n	8011002 <_dtoa_r+0x9ba>
 8010f6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f70:	2b02      	cmp	r3, #2
 8010f72:	dc0e      	bgt.n	8010f92 <_dtoa_r+0x94a>
 8010f74:	e045      	b.n	8011002 <_dtoa_r+0x9ba>
 8010f76:	2b04      	cmp	r3, #4
 8010f78:	d0c6      	beq.n	8010f08 <_dtoa_r+0x8c0>
 8010f7a:	331c      	adds	r3, #28
 8010f7c:	e7bd      	b.n	8010efa <_dtoa_r+0x8b2>
 8010f7e:	0013      	movs	r3, r2
 8010f80:	e7fb      	b.n	8010f7a <_dtoa_r+0x932>
 8010f82:	9b07      	ldr	r3, [sp, #28]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	dc36      	bgt.n	8010ff6 <_dtoa_r+0x9ae>
 8010f88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f8a:	2b02      	cmp	r3, #2
 8010f8c:	dd33      	ble.n	8010ff6 <_dtoa_r+0x9ae>
 8010f8e:	9b07      	ldr	r3, [sp, #28]
 8010f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d10c      	bne.n	8010fb2 <_dtoa_r+0x96a>
 8010f98:	0031      	movs	r1, r6
 8010f9a:	2205      	movs	r2, #5
 8010f9c:	9804      	ldr	r0, [sp, #16]
 8010f9e:	f7fb ffc5 	bl	800cf2c <__multadd>
 8010fa2:	0006      	movs	r6, r0
 8010fa4:	0001      	movs	r1, r0
 8010fa6:	9805      	ldr	r0, [sp, #20]
 8010fa8:	f7fc fa10 	bl	800d3cc <__mcmp>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	dd00      	ble.n	8010fb2 <_dtoa_r+0x96a>
 8010fb0:	e59f      	b.n	8010af2 <_dtoa_r+0x4aa>
 8010fb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010fb4:	43db      	mvns	r3, r3
 8010fb6:	9303      	str	r3, [sp, #12]
 8010fb8:	9b06      	ldr	r3, [sp, #24]
 8010fba:	9308      	str	r3, [sp, #32]
 8010fbc:	2500      	movs	r5, #0
 8010fbe:	0031      	movs	r1, r6
 8010fc0:	9804      	ldr	r0, [sp, #16]
 8010fc2:	f7fb ffa9 	bl	800cf18 <_Bfree>
 8010fc6:	2f00      	cmp	r7, #0
 8010fc8:	d100      	bne.n	8010fcc <_dtoa_r+0x984>
 8010fca:	e6a3      	b.n	8010d14 <_dtoa_r+0x6cc>
 8010fcc:	2d00      	cmp	r5, #0
 8010fce:	d005      	beq.n	8010fdc <_dtoa_r+0x994>
 8010fd0:	42bd      	cmp	r5, r7
 8010fd2:	d003      	beq.n	8010fdc <_dtoa_r+0x994>
 8010fd4:	0029      	movs	r1, r5
 8010fd6:	9804      	ldr	r0, [sp, #16]
 8010fd8:	f7fb ff9e 	bl	800cf18 <_Bfree>
 8010fdc:	0039      	movs	r1, r7
 8010fde:	9804      	ldr	r0, [sp, #16]
 8010fe0:	f7fb ff9a 	bl	800cf18 <_Bfree>
 8010fe4:	e696      	b.n	8010d14 <_dtoa_r+0x6cc>
 8010fe6:	2600      	movs	r6, #0
 8010fe8:	0037      	movs	r7, r6
 8010fea:	e7e2      	b.n	8010fb2 <_dtoa_r+0x96a>
 8010fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010ff0:	9303      	str	r3, [sp, #12]
 8010ff2:	0037      	movs	r7, r6
 8010ff4:	e57d      	b.n	8010af2 <_dtoa_r+0x4aa>
 8010ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d100      	bne.n	8010ffe <_dtoa_r+0x9b6>
 8010ffc:	e0c3      	b.n	8011186 <_dtoa_r+0xb3e>
 8010ffe:	9b07      	ldr	r3, [sp, #28]
 8011000:	930b      	str	r3, [sp, #44]	; 0x2c
 8011002:	2c00      	cmp	r4, #0
 8011004:	dd05      	ble.n	8011012 <_dtoa_r+0x9ca>
 8011006:	0039      	movs	r1, r7
 8011008:	0022      	movs	r2, r4
 801100a:	9804      	ldr	r0, [sp, #16]
 801100c:	f7fc f970 	bl	800d2f0 <__lshift>
 8011010:	0007      	movs	r7, r0
 8011012:	0038      	movs	r0, r7
 8011014:	2d00      	cmp	r5, #0
 8011016:	d024      	beq.n	8011062 <_dtoa_r+0xa1a>
 8011018:	6879      	ldr	r1, [r7, #4]
 801101a:	9804      	ldr	r0, [sp, #16]
 801101c:	f7fb ff54 	bl	800cec8 <_Balloc>
 8011020:	1e04      	subs	r4, r0, #0
 8011022:	d111      	bne.n	8011048 <_dtoa_r+0xa00>
 8011024:	0022      	movs	r2, r4
 8011026:	4b05      	ldr	r3, [pc, #20]	; (801103c <_dtoa_r+0x9f4>)
 8011028:	4805      	ldr	r0, [pc, #20]	; (8011040 <_dtoa_r+0x9f8>)
 801102a:	4906      	ldr	r1, [pc, #24]	; (8011044 <_dtoa_r+0x9fc>)
 801102c:	e43c      	b.n	80108a8 <_dtoa_r+0x260>
 801102e:	46c0      	nop			; (mov r8, r8)
 8011030:	40240000 	.word	0x40240000
 8011034:	00000433 	.word	0x00000433
 8011038:	7ff00000 	.word	0x7ff00000
 801103c:	08014a79 	.word	0x08014a79
 8011040:	08014d09 	.word	0x08014d09
 8011044:	000002ef 	.word	0x000002ef
 8011048:	0039      	movs	r1, r7
 801104a:	693a      	ldr	r2, [r7, #16]
 801104c:	310c      	adds	r1, #12
 801104e:	3202      	adds	r2, #2
 8011050:	0092      	lsls	r2, r2, #2
 8011052:	300c      	adds	r0, #12
 8011054:	f7fb fa9d 	bl	800c592 <memcpy>
 8011058:	2201      	movs	r2, #1
 801105a:	0021      	movs	r1, r4
 801105c:	9804      	ldr	r0, [sp, #16]
 801105e:	f7fc f947 	bl	800d2f0 <__lshift>
 8011062:	9b06      	ldr	r3, [sp, #24]
 8011064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011066:	9307      	str	r3, [sp, #28]
 8011068:	3b01      	subs	r3, #1
 801106a:	189b      	adds	r3, r3, r2
 801106c:	2201      	movs	r2, #1
 801106e:	003d      	movs	r5, r7
 8011070:	0007      	movs	r7, r0
 8011072:	930e      	str	r3, [sp, #56]	; 0x38
 8011074:	9b08      	ldr	r3, [sp, #32]
 8011076:	4013      	ands	r3, r2
 8011078:	930d      	str	r3, [sp, #52]	; 0x34
 801107a:	0031      	movs	r1, r6
 801107c:	9805      	ldr	r0, [sp, #20]
 801107e:	f7ff fa53 	bl	8010528 <quorem>
 8011082:	0029      	movs	r1, r5
 8011084:	0004      	movs	r4, r0
 8011086:	900b      	str	r0, [sp, #44]	; 0x2c
 8011088:	9805      	ldr	r0, [sp, #20]
 801108a:	f7fc f99f 	bl	800d3cc <__mcmp>
 801108e:	003a      	movs	r2, r7
 8011090:	900c      	str	r0, [sp, #48]	; 0x30
 8011092:	0031      	movs	r1, r6
 8011094:	9804      	ldr	r0, [sp, #16]
 8011096:	f7fc f9b5 	bl	800d404 <__mdiff>
 801109a:	2201      	movs	r2, #1
 801109c:	68c3      	ldr	r3, [r0, #12]
 801109e:	3430      	adds	r4, #48	; 0x30
 80110a0:	9008      	str	r0, [sp, #32]
 80110a2:	920a      	str	r2, [sp, #40]	; 0x28
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d104      	bne.n	80110b2 <_dtoa_r+0xa6a>
 80110a8:	0001      	movs	r1, r0
 80110aa:	9805      	ldr	r0, [sp, #20]
 80110ac:	f7fc f98e 	bl	800d3cc <__mcmp>
 80110b0:	900a      	str	r0, [sp, #40]	; 0x28
 80110b2:	9908      	ldr	r1, [sp, #32]
 80110b4:	9804      	ldr	r0, [sp, #16]
 80110b6:	f7fb ff2f 	bl	800cf18 <_Bfree>
 80110ba:	9b07      	ldr	r3, [sp, #28]
 80110bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110be:	3301      	adds	r3, #1
 80110c0:	9308      	str	r3, [sp, #32]
 80110c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80110c4:	4313      	orrs	r3, r2
 80110c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110c8:	4313      	orrs	r3, r2
 80110ca:	d109      	bne.n	80110e0 <_dtoa_r+0xa98>
 80110cc:	2c39      	cmp	r4, #57	; 0x39
 80110ce:	d022      	beq.n	8011116 <_dtoa_r+0xace>
 80110d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	dd01      	ble.n	80110da <_dtoa_r+0xa92>
 80110d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80110d8:	3431      	adds	r4, #49	; 0x31
 80110da:	9b07      	ldr	r3, [sp, #28]
 80110dc:	701c      	strb	r4, [r3, #0]
 80110de:	e76e      	b.n	8010fbe <_dtoa_r+0x976>
 80110e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	db04      	blt.n	80110f0 <_dtoa_r+0xaa8>
 80110e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80110e8:	4313      	orrs	r3, r2
 80110ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110ec:	4313      	orrs	r3, r2
 80110ee:	d11e      	bne.n	801112e <_dtoa_r+0xae6>
 80110f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	ddf1      	ble.n	80110da <_dtoa_r+0xa92>
 80110f6:	9905      	ldr	r1, [sp, #20]
 80110f8:	2201      	movs	r2, #1
 80110fa:	9804      	ldr	r0, [sp, #16]
 80110fc:	f7fc f8f8 	bl	800d2f0 <__lshift>
 8011100:	0031      	movs	r1, r6
 8011102:	9005      	str	r0, [sp, #20]
 8011104:	f7fc f962 	bl	800d3cc <__mcmp>
 8011108:	2800      	cmp	r0, #0
 801110a:	dc02      	bgt.n	8011112 <_dtoa_r+0xaca>
 801110c:	d1e5      	bne.n	80110da <_dtoa_r+0xa92>
 801110e:	07e3      	lsls	r3, r4, #31
 8011110:	d5e3      	bpl.n	80110da <_dtoa_r+0xa92>
 8011112:	2c39      	cmp	r4, #57	; 0x39
 8011114:	d1df      	bne.n	80110d6 <_dtoa_r+0xa8e>
 8011116:	2339      	movs	r3, #57	; 0x39
 8011118:	9a07      	ldr	r2, [sp, #28]
 801111a:	7013      	strb	r3, [r2, #0]
 801111c:	9b08      	ldr	r3, [sp, #32]
 801111e:	9308      	str	r3, [sp, #32]
 8011120:	3b01      	subs	r3, #1
 8011122:	781a      	ldrb	r2, [r3, #0]
 8011124:	2a39      	cmp	r2, #57	; 0x39
 8011126:	d063      	beq.n	80111f0 <_dtoa_r+0xba8>
 8011128:	3201      	adds	r2, #1
 801112a:	701a      	strb	r2, [r3, #0]
 801112c:	e747      	b.n	8010fbe <_dtoa_r+0x976>
 801112e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011130:	2b00      	cmp	r3, #0
 8011132:	dd03      	ble.n	801113c <_dtoa_r+0xaf4>
 8011134:	2c39      	cmp	r4, #57	; 0x39
 8011136:	d0ee      	beq.n	8011116 <_dtoa_r+0xace>
 8011138:	3401      	adds	r4, #1
 801113a:	e7ce      	b.n	80110da <_dtoa_r+0xa92>
 801113c:	9b07      	ldr	r3, [sp, #28]
 801113e:	9a07      	ldr	r2, [sp, #28]
 8011140:	701c      	strb	r4, [r3, #0]
 8011142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011144:	4293      	cmp	r3, r2
 8011146:	d03e      	beq.n	80111c6 <_dtoa_r+0xb7e>
 8011148:	2300      	movs	r3, #0
 801114a:	220a      	movs	r2, #10
 801114c:	9905      	ldr	r1, [sp, #20]
 801114e:	9804      	ldr	r0, [sp, #16]
 8011150:	f7fb feec 	bl	800cf2c <__multadd>
 8011154:	2300      	movs	r3, #0
 8011156:	9005      	str	r0, [sp, #20]
 8011158:	220a      	movs	r2, #10
 801115a:	0029      	movs	r1, r5
 801115c:	9804      	ldr	r0, [sp, #16]
 801115e:	42bd      	cmp	r5, r7
 8011160:	d106      	bne.n	8011170 <_dtoa_r+0xb28>
 8011162:	f7fb fee3 	bl	800cf2c <__multadd>
 8011166:	0005      	movs	r5, r0
 8011168:	0007      	movs	r7, r0
 801116a:	9b08      	ldr	r3, [sp, #32]
 801116c:	9307      	str	r3, [sp, #28]
 801116e:	e784      	b.n	801107a <_dtoa_r+0xa32>
 8011170:	f7fb fedc 	bl	800cf2c <__multadd>
 8011174:	0039      	movs	r1, r7
 8011176:	0005      	movs	r5, r0
 8011178:	2300      	movs	r3, #0
 801117a:	220a      	movs	r2, #10
 801117c:	9804      	ldr	r0, [sp, #16]
 801117e:	f7fb fed5 	bl	800cf2c <__multadd>
 8011182:	0007      	movs	r7, r0
 8011184:	e7f1      	b.n	801116a <_dtoa_r+0xb22>
 8011186:	9b07      	ldr	r3, [sp, #28]
 8011188:	930b      	str	r3, [sp, #44]	; 0x2c
 801118a:	2500      	movs	r5, #0
 801118c:	0031      	movs	r1, r6
 801118e:	9805      	ldr	r0, [sp, #20]
 8011190:	f7ff f9ca 	bl	8010528 <quorem>
 8011194:	9b06      	ldr	r3, [sp, #24]
 8011196:	3030      	adds	r0, #48	; 0x30
 8011198:	5558      	strb	r0, [r3, r5]
 801119a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801119c:	3501      	adds	r5, #1
 801119e:	0004      	movs	r4, r0
 80111a0:	42ab      	cmp	r3, r5
 80111a2:	dd07      	ble.n	80111b4 <_dtoa_r+0xb6c>
 80111a4:	2300      	movs	r3, #0
 80111a6:	220a      	movs	r2, #10
 80111a8:	9905      	ldr	r1, [sp, #20]
 80111aa:	9804      	ldr	r0, [sp, #16]
 80111ac:	f7fb febe 	bl	800cf2c <__multadd>
 80111b0:	9005      	str	r0, [sp, #20]
 80111b2:	e7eb      	b.n	801118c <_dtoa_r+0xb44>
 80111b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111b6:	2301      	movs	r3, #1
 80111b8:	2a00      	cmp	r2, #0
 80111ba:	dd00      	ble.n	80111be <_dtoa_r+0xb76>
 80111bc:	0013      	movs	r3, r2
 80111be:	2500      	movs	r5, #0
 80111c0:	9a06      	ldr	r2, [sp, #24]
 80111c2:	18d3      	adds	r3, r2, r3
 80111c4:	9308      	str	r3, [sp, #32]
 80111c6:	9905      	ldr	r1, [sp, #20]
 80111c8:	2201      	movs	r2, #1
 80111ca:	9804      	ldr	r0, [sp, #16]
 80111cc:	f7fc f890 	bl	800d2f0 <__lshift>
 80111d0:	0031      	movs	r1, r6
 80111d2:	9005      	str	r0, [sp, #20]
 80111d4:	f7fc f8fa 	bl	800d3cc <__mcmp>
 80111d8:	2800      	cmp	r0, #0
 80111da:	dc9f      	bgt.n	801111c <_dtoa_r+0xad4>
 80111dc:	d101      	bne.n	80111e2 <_dtoa_r+0xb9a>
 80111de:	07e4      	lsls	r4, r4, #31
 80111e0:	d49c      	bmi.n	801111c <_dtoa_r+0xad4>
 80111e2:	9b08      	ldr	r3, [sp, #32]
 80111e4:	9308      	str	r3, [sp, #32]
 80111e6:	3b01      	subs	r3, #1
 80111e8:	781a      	ldrb	r2, [r3, #0]
 80111ea:	2a30      	cmp	r2, #48	; 0x30
 80111ec:	d0fa      	beq.n	80111e4 <_dtoa_r+0xb9c>
 80111ee:	e6e6      	b.n	8010fbe <_dtoa_r+0x976>
 80111f0:	9a06      	ldr	r2, [sp, #24]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d193      	bne.n	801111e <_dtoa_r+0xad6>
 80111f6:	9b03      	ldr	r3, [sp, #12]
 80111f8:	3301      	adds	r3, #1
 80111fa:	9303      	str	r3, [sp, #12]
 80111fc:	2331      	movs	r3, #49	; 0x31
 80111fe:	7013      	strb	r3, [r2, #0]
 8011200:	e6dd      	b.n	8010fbe <_dtoa_r+0x976>
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <_dtoa_r+0xbe0>)
 8011204:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011206:	9306      	str	r3, [sp, #24]
 8011208:	4b08      	ldr	r3, [pc, #32]	; (801122c <_dtoa_r+0xbe4>)
 801120a:	2a00      	cmp	r2, #0
 801120c:	d001      	beq.n	8011212 <_dtoa_r+0xbca>
 801120e:	f7ff fa4c 	bl	80106aa <_dtoa_r+0x62>
 8011212:	f7ff fa4c 	bl	80106ae <_dtoa_r+0x66>
 8011216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011218:	2b00      	cmp	r3, #0
 801121a:	dcb6      	bgt.n	801118a <_dtoa_r+0xb42>
 801121c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801121e:	2b02      	cmp	r3, #2
 8011220:	dd00      	ble.n	8011224 <_dtoa_r+0xbdc>
 8011222:	e6b6      	b.n	8010f92 <_dtoa_r+0x94a>
 8011224:	e7b1      	b.n	801118a <_dtoa_r+0xb42>
 8011226:	46c0      	nop			; (mov r8, r8)
 8011228:	08014cfc 	.word	0x08014cfc
 801122c:	08014d04 	.word	0x08014d04

08011230 <realloc>:
 8011230:	b510      	push	{r4, lr}
 8011232:	4b03      	ldr	r3, [pc, #12]	; (8011240 <realloc+0x10>)
 8011234:	000a      	movs	r2, r1
 8011236:	0001      	movs	r1, r0
 8011238:	6818      	ldr	r0, [r3, #0]
 801123a:	f000 f803 	bl	8011244 <_realloc_r>
 801123e:	bd10      	pop	{r4, pc}
 8011240:	200006d8 	.word	0x200006d8

08011244 <_realloc_r>:
 8011244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011246:	b087      	sub	sp, #28
 8011248:	1e0c      	subs	r4, r1, #0
 801124a:	9001      	str	r0, [sp, #4]
 801124c:	9205      	str	r2, [sp, #20]
 801124e:	d106      	bne.n	801125e <_realloc_r+0x1a>
 8011250:	0011      	movs	r1, r2
 8011252:	f7f9 fe39 	bl	800aec8 <_malloc_r>
 8011256:	0007      	movs	r7, r0
 8011258:	0038      	movs	r0, r7
 801125a:	b007      	add	sp, #28
 801125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801125e:	9801      	ldr	r0, [sp, #4]
 8011260:	f7fa f846 	bl	800b2f0 <__malloc_lock>
 8011264:	0023      	movs	r3, r4
 8011266:	3b08      	subs	r3, #8
 8011268:	685f      	ldr	r7, [r3, #4]
 801126a:	9304      	str	r3, [sp, #16]
 801126c:	9b05      	ldr	r3, [sp, #20]
 801126e:	330b      	adds	r3, #11
 8011270:	2b16      	cmp	r3, #22
 8011272:	d908      	bls.n	8011286 <_realloc_r+0x42>
 8011274:	2207      	movs	r2, #7
 8011276:	4393      	bics	r3, r2
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	d506      	bpl.n	801128a <_realloc_r+0x46>
 801127c:	230c      	movs	r3, #12
 801127e:	9a01      	ldr	r2, [sp, #4]
 8011280:	2700      	movs	r7, #0
 8011282:	6013      	str	r3, [r2, #0]
 8011284:	e7e8      	b.n	8011258 <_realloc_r+0x14>
 8011286:	2310      	movs	r3, #16
 8011288:	9300      	str	r3, [sp, #0]
 801128a:	9b00      	ldr	r3, [sp, #0]
 801128c:	9a05      	ldr	r2, [sp, #20]
 801128e:	4293      	cmp	r3, r2
 8011290:	d3f4      	bcc.n	801127c <_realloc_r+0x38>
 8011292:	9b04      	ldr	r3, [sp, #16]
 8011294:	003a      	movs	r2, r7
 8011296:	9302      	str	r3, [sp, #8]
 8011298:	2303      	movs	r3, #3
 801129a:	439a      	bics	r2, r3
 801129c:	9b00      	ldr	r3, [sp, #0]
 801129e:	9203      	str	r2, [sp, #12]
 80112a0:	4293      	cmp	r3, r2
 80112a2:	dc00      	bgt.n	80112a6 <_realloc_r+0x62>
 80112a4:	e169      	b.n	801157a <_realloc_r+0x336>
 80112a6:	9b04      	ldr	r3, [sp, #16]
 80112a8:	48b8      	ldr	r0, [pc, #736]	; (801158c <_realloc_r+0x348>)
 80112aa:	189b      	adds	r3, r3, r2
 80112ac:	6882      	ldr	r2, [r0, #8]
 80112ae:	4694      	mov	ip, r2
 80112b0:	685a      	ldr	r2, [r3, #4]
 80112b2:	459c      	cmp	ip, r3
 80112b4:	d006      	beq.n	80112c4 <_realloc_r+0x80>
 80112b6:	2501      	movs	r5, #1
 80112b8:	0011      	movs	r1, r2
 80112ba:	43a9      	bics	r1, r5
 80112bc:	1859      	adds	r1, r3, r1
 80112be:	6849      	ldr	r1, [r1, #4]
 80112c0:	4229      	tst	r1, r5
 80112c2:	d144      	bne.n	801134e <_realloc_r+0x10a>
 80112c4:	2103      	movs	r1, #3
 80112c6:	438a      	bics	r2, r1
 80112c8:	9903      	ldr	r1, [sp, #12]
 80112ca:	188e      	adds	r6, r1, r2
 80112cc:	9900      	ldr	r1, [sp, #0]
 80112ce:	459c      	cmp	ip, r3
 80112d0:	d117      	bne.n	8011302 <_realloc_r+0xbe>
 80112d2:	3110      	adds	r1, #16
 80112d4:	42b1      	cmp	r1, r6
 80112d6:	dc3c      	bgt.n	8011352 <_realloc_r+0x10e>
 80112d8:	9a00      	ldr	r2, [sp, #0]
 80112da:	2101      	movs	r1, #1
 80112dc:	4694      	mov	ip, r2
 80112de:	1ab6      	subs	r6, r6, r2
 80112e0:	0022      	movs	r2, r4
 80112e2:	9b04      	ldr	r3, [sp, #16]
 80112e4:	430e      	orrs	r6, r1
 80112e6:	4463      	add	r3, ip
 80112e8:	6083      	str	r3, [r0, #8]
 80112ea:	3a08      	subs	r2, #8
 80112ec:	605e      	str	r6, [r3, #4]
 80112ee:	6853      	ldr	r3, [r2, #4]
 80112f0:	9801      	ldr	r0, [sp, #4]
 80112f2:	400b      	ands	r3, r1
 80112f4:	4661      	mov	r1, ip
 80112f6:	430b      	orrs	r3, r1
 80112f8:	6053      	str	r3, [r2, #4]
 80112fa:	f7fa f801 	bl	800b300 <__malloc_unlock>
 80112fe:	0027      	movs	r7, r4
 8011300:	e7aa      	b.n	8011258 <_realloc_r+0x14>
 8011302:	42b1      	cmp	r1, r6
 8011304:	dc25      	bgt.n	8011352 <_realloc_r+0x10e>
 8011306:	68da      	ldr	r2, [r3, #12]
 8011308:	689b      	ldr	r3, [r3, #8]
 801130a:	60da      	str	r2, [r3, #12]
 801130c:	6093      	str	r3, [r2, #8]
 801130e:	9b00      	ldr	r3, [sp, #0]
 8011310:	9a02      	ldr	r2, [sp, #8]
 8011312:	1af4      	subs	r4, r6, r3
 8011314:	9b02      	ldr	r3, [sp, #8]
 8011316:	1992      	adds	r2, r2, r6
 8011318:	6858      	ldr	r0, [r3, #4]
 801131a:	2301      	movs	r3, #1
 801131c:	4018      	ands	r0, r3
 801131e:	2c0f      	cmp	r4, #15
 8011320:	d800      	bhi.n	8011324 <_realloc_r+0xe0>
 8011322:	e12c      	b.n	801157e <_realloc_r+0x33a>
 8011324:	9d00      	ldr	r5, [sp, #0]
 8011326:	9902      	ldr	r1, [sp, #8]
 8011328:	4328      	orrs	r0, r5
 801132a:	1949      	adds	r1, r1, r5
 801132c:	9d02      	ldr	r5, [sp, #8]
 801132e:	431c      	orrs	r4, r3
 8011330:	6068      	str	r0, [r5, #4]
 8011332:	604c      	str	r4, [r1, #4]
 8011334:	6850      	ldr	r0, [r2, #4]
 8011336:	3108      	adds	r1, #8
 8011338:	4303      	orrs	r3, r0
 801133a:	6053      	str	r3, [r2, #4]
 801133c:	9801      	ldr	r0, [sp, #4]
 801133e:	f7fb f9a3 	bl	800c688 <_free_r>
 8011342:	9801      	ldr	r0, [sp, #4]
 8011344:	f7f9 ffdc 	bl	800b300 <__malloc_unlock>
 8011348:	9f02      	ldr	r7, [sp, #8]
 801134a:	3708      	adds	r7, #8
 801134c:	e784      	b.n	8011258 <_realloc_r+0x14>
 801134e:	2200      	movs	r2, #0
 8011350:	0013      	movs	r3, r2
 8011352:	07ff      	lsls	r7, r7, #31
 8011354:	d500      	bpl.n	8011358 <_realloc_r+0x114>
 8011356:	e0c6      	b.n	80114e6 <_realloc_r+0x2a2>
 8011358:	0021      	movs	r1, r4
 801135a:	2003      	movs	r0, #3
 801135c:	3908      	subs	r1, #8
 801135e:	680d      	ldr	r5, [r1, #0]
 8011360:	9904      	ldr	r1, [sp, #16]
 8011362:	1b4d      	subs	r5, r1, r5
 8011364:	6869      	ldr	r1, [r5, #4]
 8011366:	4381      	bics	r1, r0
 8011368:	9803      	ldr	r0, [sp, #12]
 801136a:	180f      	adds	r7, r1, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d100      	bne.n	8011372 <_realloc_r+0x12e>
 8011370:	e084      	b.n	801147c <_realloc_r+0x238>
 8011372:	19d6      	adds	r6, r2, r7
 8011374:	459c      	cmp	ip, r3
 8011376:	d148      	bne.n	801140a <_realloc_r+0x1c6>
 8011378:	9b00      	ldr	r3, [sp, #0]
 801137a:	3310      	adds	r3, #16
 801137c:	42b3      	cmp	r3, r6
 801137e:	dc7d      	bgt.n	801147c <_realloc_r+0x238>
 8011380:	68aa      	ldr	r2, [r5, #8]
 8011382:	68eb      	ldr	r3, [r5, #12]
 8011384:	002f      	movs	r7, r5
 8011386:	60d3      	str	r3, [r2, #12]
 8011388:	609a      	str	r2, [r3, #8]
 801138a:	0002      	movs	r2, r0
 801138c:	3a04      	subs	r2, #4
 801138e:	3708      	adds	r7, #8
 8011390:	2a24      	cmp	r2, #36	; 0x24
 8011392:	d835      	bhi.n	8011400 <_realloc_r+0x1bc>
 8011394:	003b      	movs	r3, r7
 8011396:	2a13      	cmp	r2, #19
 8011398:	d908      	bls.n	80113ac <_realloc_r+0x168>
 801139a:	6823      	ldr	r3, [r4, #0]
 801139c:	60ab      	str	r3, [r5, #8]
 801139e:	6863      	ldr	r3, [r4, #4]
 80113a0:	60eb      	str	r3, [r5, #12]
 80113a2:	2a1b      	cmp	r2, #27
 80113a4:	d81a      	bhi.n	80113dc <_realloc_r+0x198>
 80113a6:	002b      	movs	r3, r5
 80113a8:	3408      	adds	r4, #8
 80113aa:	3310      	adds	r3, #16
 80113ac:	6822      	ldr	r2, [r4, #0]
 80113ae:	601a      	str	r2, [r3, #0]
 80113b0:	6862      	ldr	r2, [r4, #4]
 80113b2:	605a      	str	r2, [r3, #4]
 80113b4:	68a2      	ldr	r2, [r4, #8]
 80113b6:	609a      	str	r2, [r3, #8]
 80113b8:	9b00      	ldr	r3, [sp, #0]
 80113ba:	4a74      	ldr	r2, [pc, #464]	; (801158c <_realloc_r+0x348>)
 80113bc:	18eb      	adds	r3, r5, r3
 80113be:	6093      	str	r3, [r2, #8]
 80113c0:	9a00      	ldr	r2, [sp, #0]
 80113c2:	1ab6      	subs	r6, r6, r2
 80113c4:	2201      	movs	r2, #1
 80113c6:	4316      	orrs	r6, r2
 80113c8:	605e      	str	r6, [r3, #4]
 80113ca:	686b      	ldr	r3, [r5, #4]
 80113cc:	4013      	ands	r3, r2
 80113ce:	9a00      	ldr	r2, [sp, #0]
 80113d0:	4313      	orrs	r3, r2
 80113d2:	606b      	str	r3, [r5, #4]
 80113d4:	9801      	ldr	r0, [sp, #4]
 80113d6:	f7f9 ff93 	bl	800b300 <__malloc_unlock>
 80113da:	e73d      	b.n	8011258 <_realloc_r+0x14>
 80113dc:	68a3      	ldr	r3, [r4, #8]
 80113de:	612b      	str	r3, [r5, #16]
 80113e0:	68e3      	ldr	r3, [r4, #12]
 80113e2:	616b      	str	r3, [r5, #20]
 80113e4:	2a24      	cmp	r2, #36	; 0x24
 80113e6:	d003      	beq.n	80113f0 <_realloc_r+0x1ac>
 80113e8:	002b      	movs	r3, r5
 80113ea:	3410      	adds	r4, #16
 80113ec:	3318      	adds	r3, #24
 80113ee:	e7dd      	b.n	80113ac <_realloc_r+0x168>
 80113f0:	6923      	ldr	r3, [r4, #16]
 80113f2:	61ab      	str	r3, [r5, #24]
 80113f4:	002b      	movs	r3, r5
 80113f6:	6962      	ldr	r2, [r4, #20]
 80113f8:	3320      	adds	r3, #32
 80113fa:	61ea      	str	r2, [r5, #28]
 80113fc:	3418      	adds	r4, #24
 80113fe:	e7d5      	b.n	80113ac <_realloc_r+0x168>
 8011400:	0021      	movs	r1, r4
 8011402:	0038      	movs	r0, r7
 8011404:	f001 fbb5 	bl	8012b72 <memmove>
 8011408:	e7d6      	b.n	80113b8 <_realloc_r+0x174>
 801140a:	9a00      	ldr	r2, [sp, #0]
 801140c:	42b2      	cmp	r2, r6
 801140e:	dc35      	bgt.n	801147c <_realloc_r+0x238>
 8011410:	0028      	movs	r0, r5
 8011412:	68da      	ldr	r2, [r3, #12]
 8011414:	689b      	ldr	r3, [r3, #8]
 8011416:	3008      	adds	r0, #8
 8011418:	60da      	str	r2, [r3, #12]
 801141a:	6093      	str	r3, [r2, #8]
 801141c:	68aa      	ldr	r2, [r5, #8]
 801141e:	68eb      	ldr	r3, [r5, #12]
 8011420:	60d3      	str	r3, [r2, #12]
 8011422:	609a      	str	r2, [r3, #8]
 8011424:	9a03      	ldr	r2, [sp, #12]
 8011426:	3a04      	subs	r2, #4
 8011428:	2a24      	cmp	r2, #36	; 0x24
 801142a:	d823      	bhi.n	8011474 <_realloc_r+0x230>
 801142c:	2a13      	cmp	r2, #19
 801142e:	d907      	bls.n	8011440 <_realloc_r+0x1fc>
 8011430:	6823      	ldr	r3, [r4, #0]
 8011432:	60ab      	str	r3, [r5, #8]
 8011434:	6863      	ldr	r3, [r4, #4]
 8011436:	60eb      	str	r3, [r5, #12]
 8011438:	2a1b      	cmp	r2, #27
 801143a:	d809      	bhi.n	8011450 <_realloc_r+0x20c>
 801143c:	3408      	adds	r4, #8
 801143e:	3008      	adds	r0, #8
 8011440:	6823      	ldr	r3, [r4, #0]
 8011442:	6003      	str	r3, [r0, #0]
 8011444:	6863      	ldr	r3, [r4, #4]
 8011446:	6043      	str	r3, [r0, #4]
 8011448:	68a3      	ldr	r3, [r4, #8]
 801144a:	6083      	str	r3, [r0, #8]
 801144c:	9502      	str	r5, [sp, #8]
 801144e:	e75e      	b.n	801130e <_realloc_r+0xca>
 8011450:	68a3      	ldr	r3, [r4, #8]
 8011452:	612b      	str	r3, [r5, #16]
 8011454:	68e3      	ldr	r3, [r4, #12]
 8011456:	616b      	str	r3, [r5, #20]
 8011458:	2a24      	cmp	r2, #36	; 0x24
 801145a:	d003      	beq.n	8011464 <_realloc_r+0x220>
 801145c:	0028      	movs	r0, r5
 801145e:	3410      	adds	r4, #16
 8011460:	3018      	adds	r0, #24
 8011462:	e7ed      	b.n	8011440 <_realloc_r+0x1fc>
 8011464:	0028      	movs	r0, r5
 8011466:	6923      	ldr	r3, [r4, #16]
 8011468:	3020      	adds	r0, #32
 801146a:	61ab      	str	r3, [r5, #24]
 801146c:	6963      	ldr	r3, [r4, #20]
 801146e:	3418      	adds	r4, #24
 8011470:	61eb      	str	r3, [r5, #28]
 8011472:	e7e5      	b.n	8011440 <_realloc_r+0x1fc>
 8011474:	0021      	movs	r1, r4
 8011476:	f001 fb7c 	bl	8012b72 <memmove>
 801147a:	e7e7      	b.n	801144c <_realloc_r+0x208>
 801147c:	9b00      	ldr	r3, [sp, #0]
 801147e:	42bb      	cmp	r3, r7
 8011480:	dc31      	bgt.n	80114e6 <_realloc_r+0x2a2>
 8011482:	0028      	movs	r0, r5
 8011484:	68aa      	ldr	r2, [r5, #8]
 8011486:	68eb      	ldr	r3, [r5, #12]
 8011488:	3008      	adds	r0, #8
 801148a:	60d3      	str	r3, [r2, #12]
 801148c:	609a      	str	r2, [r3, #8]
 801148e:	9a03      	ldr	r2, [sp, #12]
 8011490:	3a04      	subs	r2, #4
 8011492:	2a24      	cmp	r2, #36	; 0x24
 8011494:	d823      	bhi.n	80114de <_realloc_r+0x29a>
 8011496:	2a13      	cmp	r2, #19
 8011498:	d907      	bls.n	80114aa <_realloc_r+0x266>
 801149a:	6823      	ldr	r3, [r4, #0]
 801149c:	60ab      	str	r3, [r5, #8]
 801149e:	6863      	ldr	r3, [r4, #4]
 80114a0:	60eb      	str	r3, [r5, #12]
 80114a2:	2a1b      	cmp	r2, #27
 80114a4:	d809      	bhi.n	80114ba <_realloc_r+0x276>
 80114a6:	3408      	adds	r4, #8
 80114a8:	3008      	adds	r0, #8
 80114aa:	6823      	ldr	r3, [r4, #0]
 80114ac:	6003      	str	r3, [r0, #0]
 80114ae:	6863      	ldr	r3, [r4, #4]
 80114b0:	6043      	str	r3, [r0, #4]
 80114b2:	68a3      	ldr	r3, [r4, #8]
 80114b4:	6083      	str	r3, [r0, #8]
 80114b6:	003e      	movs	r6, r7
 80114b8:	e7c8      	b.n	801144c <_realloc_r+0x208>
 80114ba:	68a3      	ldr	r3, [r4, #8]
 80114bc:	612b      	str	r3, [r5, #16]
 80114be:	68e3      	ldr	r3, [r4, #12]
 80114c0:	616b      	str	r3, [r5, #20]
 80114c2:	2a24      	cmp	r2, #36	; 0x24
 80114c4:	d003      	beq.n	80114ce <_realloc_r+0x28a>
 80114c6:	0028      	movs	r0, r5
 80114c8:	3410      	adds	r4, #16
 80114ca:	3018      	adds	r0, #24
 80114cc:	e7ed      	b.n	80114aa <_realloc_r+0x266>
 80114ce:	0028      	movs	r0, r5
 80114d0:	6923      	ldr	r3, [r4, #16]
 80114d2:	3020      	adds	r0, #32
 80114d4:	61ab      	str	r3, [r5, #24]
 80114d6:	6963      	ldr	r3, [r4, #20]
 80114d8:	3418      	adds	r4, #24
 80114da:	61eb      	str	r3, [r5, #28]
 80114dc:	e7e5      	b.n	80114aa <_realloc_r+0x266>
 80114de:	0021      	movs	r1, r4
 80114e0:	f001 fb47 	bl	8012b72 <memmove>
 80114e4:	e7e7      	b.n	80114b6 <_realloc_r+0x272>
 80114e6:	9905      	ldr	r1, [sp, #20]
 80114e8:	9801      	ldr	r0, [sp, #4]
 80114ea:	f7f9 fced 	bl	800aec8 <_malloc_r>
 80114ee:	1e07      	subs	r7, r0, #0
 80114f0:	d100      	bne.n	80114f4 <_realloc_r+0x2b0>
 80114f2:	e76f      	b.n	80113d4 <_realloc_r+0x190>
 80114f4:	0023      	movs	r3, r4
 80114f6:	2201      	movs	r2, #1
 80114f8:	3b08      	subs	r3, #8
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	4393      	bics	r3, r2
 80114fe:	9a04      	ldr	r2, [sp, #16]
 8011500:	18d3      	adds	r3, r2, r3
 8011502:	0002      	movs	r2, r0
 8011504:	3a08      	subs	r2, #8
 8011506:	4293      	cmp	r3, r2
 8011508:	d105      	bne.n	8011516 <_realloc_r+0x2d2>
 801150a:	685e      	ldr	r6, [r3, #4]
 801150c:	2303      	movs	r3, #3
 801150e:	439e      	bics	r6, r3
 8011510:	9b03      	ldr	r3, [sp, #12]
 8011512:	18f6      	adds	r6, r6, r3
 8011514:	e6fb      	b.n	801130e <_realloc_r+0xca>
 8011516:	9a03      	ldr	r2, [sp, #12]
 8011518:	3a04      	subs	r2, #4
 801151a:	2a24      	cmp	r2, #36	; 0x24
 801151c:	d829      	bhi.n	8011572 <_realloc_r+0x32e>
 801151e:	0003      	movs	r3, r0
 8011520:	0021      	movs	r1, r4
 8011522:	2a13      	cmp	r2, #19
 8011524:	d908      	bls.n	8011538 <_realloc_r+0x2f4>
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	6003      	str	r3, [r0, #0]
 801152a:	6863      	ldr	r3, [r4, #4]
 801152c:	6043      	str	r3, [r0, #4]
 801152e:	2a1b      	cmp	r2, #27
 8011530:	d80d      	bhi.n	801154e <_realloc_r+0x30a>
 8011532:	0003      	movs	r3, r0
 8011534:	3108      	adds	r1, #8
 8011536:	3308      	adds	r3, #8
 8011538:	680a      	ldr	r2, [r1, #0]
 801153a:	601a      	str	r2, [r3, #0]
 801153c:	684a      	ldr	r2, [r1, #4]
 801153e:	605a      	str	r2, [r3, #4]
 8011540:	688a      	ldr	r2, [r1, #8]
 8011542:	609a      	str	r2, [r3, #8]
 8011544:	0021      	movs	r1, r4
 8011546:	9801      	ldr	r0, [sp, #4]
 8011548:	f7fb f89e 	bl	800c688 <_free_r>
 801154c:	e742      	b.n	80113d4 <_realloc_r+0x190>
 801154e:	68a3      	ldr	r3, [r4, #8]
 8011550:	6083      	str	r3, [r0, #8]
 8011552:	68e3      	ldr	r3, [r4, #12]
 8011554:	60c3      	str	r3, [r0, #12]
 8011556:	2a24      	cmp	r2, #36	; 0x24
 8011558:	d003      	beq.n	8011562 <_realloc_r+0x31e>
 801155a:	0003      	movs	r3, r0
 801155c:	3110      	adds	r1, #16
 801155e:	3310      	adds	r3, #16
 8011560:	e7ea      	b.n	8011538 <_realloc_r+0x2f4>
 8011562:	6923      	ldr	r3, [r4, #16]
 8011564:	3118      	adds	r1, #24
 8011566:	6103      	str	r3, [r0, #16]
 8011568:	0003      	movs	r3, r0
 801156a:	6962      	ldr	r2, [r4, #20]
 801156c:	3318      	adds	r3, #24
 801156e:	6142      	str	r2, [r0, #20]
 8011570:	e7e2      	b.n	8011538 <_realloc_r+0x2f4>
 8011572:	0021      	movs	r1, r4
 8011574:	f001 fafd 	bl	8012b72 <memmove>
 8011578:	e7e4      	b.n	8011544 <_realloc_r+0x300>
 801157a:	9e03      	ldr	r6, [sp, #12]
 801157c:	e6c7      	b.n	801130e <_realloc_r+0xca>
 801157e:	9902      	ldr	r1, [sp, #8]
 8011580:	4306      	orrs	r6, r0
 8011582:	604e      	str	r6, [r1, #4]
 8011584:	6851      	ldr	r1, [r2, #4]
 8011586:	430b      	orrs	r3, r1
 8011588:	6053      	str	r3, [r2, #4]
 801158a:	e6da      	b.n	8011342 <_realloc_r+0xfe>
 801158c:	2000002c 	.word	0x2000002c

08011590 <_strtoul_l.constprop.0>:
 8011590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011592:	b087      	sub	sp, #28
 8011594:	9202      	str	r2, [sp, #8]
 8011596:	4a3e      	ldr	r2, [pc, #248]	; (8011690 <_strtoul_l.constprop.0+0x100>)
 8011598:	001e      	movs	r6, r3
 801159a:	9101      	str	r1, [sp, #4]
 801159c:	000b      	movs	r3, r1
 801159e:	4694      	mov	ip, r2
 80115a0:	2108      	movs	r1, #8
 80115a2:	9005      	str	r0, [sp, #20]
 80115a4:	001a      	movs	r2, r3
 80115a6:	4660      	mov	r0, ip
 80115a8:	7814      	ldrb	r4, [r2, #0]
 80115aa:	3301      	adds	r3, #1
 80115ac:	5d00      	ldrb	r0, [r0, r4]
 80115ae:	001d      	movs	r5, r3
 80115b0:	0007      	movs	r7, r0
 80115b2:	400f      	ands	r7, r1
 80115b4:	4208      	tst	r0, r1
 80115b6:	d1f5      	bne.n	80115a4 <_strtoul_l.constprop.0+0x14>
 80115b8:	2c2d      	cmp	r4, #45	; 0x2d
 80115ba:	d13d      	bne.n	8011638 <_strtoul_l.constprop.0+0xa8>
 80115bc:	2701      	movs	r7, #1
 80115be:	781c      	ldrb	r4, [r3, #0]
 80115c0:	1c95      	adds	r5, r2, #2
 80115c2:	2e00      	cmp	r6, #0
 80115c4:	d05f      	beq.n	8011686 <_strtoul_l.constprop.0+0xf6>
 80115c6:	2e10      	cmp	r6, #16
 80115c8:	d109      	bne.n	80115de <_strtoul_l.constprop.0+0x4e>
 80115ca:	2c30      	cmp	r4, #48	; 0x30
 80115cc:	d107      	bne.n	80115de <_strtoul_l.constprop.0+0x4e>
 80115ce:	2220      	movs	r2, #32
 80115d0:	782b      	ldrb	r3, [r5, #0]
 80115d2:	4393      	bics	r3, r2
 80115d4:	2b58      	cmp	r3, #88	; 0x58
 80115d6:	d151      	bne.n	801167c <_strtoul_l.constprop.0+0xec>
 80115d8:	2610      	movs	r6, #16
 80115da:	786c      	ldrb	r4, [r5, #1]
 80115dc:	3502      	adds	r5, #2
 80115de:	2001      	movs	r0, #1
 80115e0:	0031      	movs	r1, r6
 80115e2:	4240      	negs	r0, r0
 80115e4:	f7ee fdaa 	bl	800013c <__udivsi3>
 80115e8:	9003      	str	r0, [sp, #12]
 80115ea:	2001      	movs	r0, #1
 80115ec:	0031      	movs	r1, r6
 80115ee:	4240      	negs	r0, r0
 80115f0:	f7ee fe2a 	bl	8000248 <__aeabi_uidivmod>
 80115f4:	2300      	movs	r3, #0
 80115f6:	2201      	movs	r2, #1
 80115f8:	9104      	str	r1, [sp, #16]
 80115fa:	2101      	movs	r1, #1
 80115fc:	0018      	movs	r0, r3
 80115fe:	4694      	mov	ip, r2
 8011600:	4249      	negs	r1, r1
 8011602:	0022      	movs	r2, r4
 8011604:	3a30      	subs	r2, #48	; 0x30
 8011606:	2a09      	cmp	r2, #9
 8011608:	d903      	bls.n	8011612 <_strtoul_l.constprop.0+0x82>
 801160a:	3a11      	subs	r2, #17
 801160c:	2a19      	cmp	r2, #25
 801160e:	d818      	bhi.n	8011642 <_strtoul_l.constprop.0+0xb2>
 8011610:	320a      	adds	r2, #10
 8011612:	4296      	cmp	r6, r2
 8011614:	dd19      	ble.n	801164a <_strtoul_l.constprop.0+0xba>
 8011616:	1c5c      	adds	r4, r3, #1
 8011618:	d00b      	beq.n	8011632 <_strtoul_l.constprop.0+0xa2>
 801161a:	9c03      	ldr	r4, [sp, #12]
 801161c:	000b      	movs	r3, r1
 801161e:	4284      	cmp	r4, r0
 8011620:	d307      	bcc.n	8011632 <_strtoul_l.constprop.0+0xa2>
 8011622:	d103      	bne.n	801162c <_strtoul_l.constprop.0+0x9c>
 8011624:	9c04      	ldr	r4, [sp, #16]
 8011626:	000b      	movs	r3, r1
 8011628:	4294      	cmp	r4, r2
 801162a:	db02      	blt.n	8011632 <_strtoul_l.constprop.0+0xa2>
 801162c:	4663      	mov	r3, ip
 801162e:	4370      	muls	r0, r6
 8011630:	1810      	adds	r0, r2, r0
 8011632:	782c      	ldrb	r4, [r5, #0]
 8011634:	3501      	adds	r5, #1
 8011636:	e7e4      	b.n	8011602 <_strtoul_l.constprop.0+0x72>
 8011638:	2c2b      	cmp	r4, #43	; 0x2b
 801163a:	d1c2      	bne.n	80115c2 <_strtoul_l.constprop.0+0x32>
 801163c:	781c      	ldrb	r4, [r3, #0]
 801163e:	1c95      	adds	r5, r2, #2
 8011640:	e7bf      	b.n	80115c2 <_strtoul_l.constprop.0+0x32>
 8011642:	0022      	movs	r2, r4
 8011644:	3a61      	subs	r2, #97	; 0x61
 8011646:	2a19      	cmp	r2, #25
 8011648:	d9e2      	bls.n	8011610 <_strtoul_l.constprop.0+0x80>
 801164a:	1c5a      	adds	r2, r3, #1
 801164c:	d108      	bne.n	8011660 <_strtoul_l.constprop.0+0xd0>
 801164e:	2222      	movs	r2, #34	; 0x22
 8011650:	9905      	ldr	r1, [sp, #20]
 8011652:	0018      	movs	r0, r3
 8011654:	600a      	str	r2, [r1, #0]
 8011656:	9a02      	ldr	r2, [sp, #8]
 8011658:	2a00      	cmp	r2, #0
 801165a:	d109      	bne.n	8011670 <_strtoul_l.constprop.0+0xe0>
 801165c:	b007      	add	sp, #28
 801165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011660:	2f00      	cmp	r7, #0
 8011662:	d000      	beq.n	8011666 <_strtoul_l.constprop.0+0xd6>
 8011664:	4240      	negs	r0, r0
 8011666:	9a02      	ldr	r2, [sp, #8]
 8011668:	2a00      	cmp	r2, #0
 801166a:	d0f7      	beq.n	801165c <_strtoul_l.constprop.0+0xcc>
 801166c:	2b00      	cmp	r3, #0
 801166e:	d001      	beq.n	8011674 <_strtoul_l.constprop.0+0xe4>
 8011670:	1e6b      	subs	r3, r5, #1
 8011672:	9301      	str	r3, [sp, #4]
 8011674:	9b02      	ldr	r3, [sp, #8]
 8011676:	9a01      	ldr	r2, [sp, #4]
 8011678:	601a      	str	r2, [r3, #0]
 801167a:	e7ef      	b.n	801165c <_strtoul_l.constprop.0+0xcc>
 801167c:	2430      	movs	r4, #48	; 0x30
 801167e:	2e00      	cmp	r6, #0
 8011680:	d1ad      	bne.n	80115de <_strtoul_l.constprop.0+0x4e>
 8011682:	3608      	adds	r6, #8
 8011684:	e7ab      	b.n	80115de <_strtoul_l.constprop.0+0x4e>
 8011686:	2c30      	cmp	r4, #48	; 0x30
 8011688:	d0a1      	beq.n	80115ce <_strtoul_l.constprop.0+0x3e>
 801168a:	260a      	movs	r6, #10
 801168c:	e7a7      	b.n	80115de <_strtoul_l.constprop.0+0x4e>
 801168e:	46c0      	nop			; (mov r8, r8)
 8011690:	08014971 	.word	0x08014971

08011694 <_strtoul_r>:
 8011694:	b510      	push	{r4, lr}
 8011696:	f7ff ff7b 	bl	8011590 <_strtoul_l.constprop.0>
 801169a:	bd10      	pop	{r4, pc}

0801169c <_strtoll_l.constprop.0>:
 801169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801169e:	b08d      	sub	sp, #52	; 0x34
 80116a0:	9203      	str	r2, [sp, #12]
 80116a2:	4a53      	ldr	r2, [pc, #332]	; (80117f0 <_strtoll_l.constprop.0+0x154>)
 80116a4:	001e      	movs	r6, r3
 80116a6:	9102      	str	r1, [sp, #8]
 80116a8:	000b      	movs	r3, r1
 80116aa:	4694      	mov	ip, r2
 80116ac:	2108      	movs	r1, #8
 80116ae:	900a      	str	r0, [sp, #40]	; 0x28
 80116b0:	001a      	movs	r2, r3
 80116b2:	4660      	mov	r0, ip
 80116b4:	7814      	ldrb	r4, [r2, #0]
 80116b6:	3301      	adds	r3, #1
 80116b8:	5d00      	ldrb	r0, [r0, r4]
 80116ba:	001d      	movs	r5, r3
 80116bc:	0007      	movs	r7, r0
 80116be:	400f      	ands	r7, r1
 80116c0:	4208      	tst	r0, r1
 80116c2:	d1f5      	bne.n	80116b0 <_strtoll_l.constprop.0+0x14>
 80116c4:	2c2d      	cmp	r4, #45	; 0x2d
 80116c6:	d153      	bne.n	8011770 <_strtoll_l.constprop.0+0xd4>
 80116c8:	781c      	ldrb	r4, [r3, #0]
 80116ca:	2301      	movs	r3, #1
 80116cc:	1c95      	adds	r5, r2, #2
 80116ce:	9301      	str	r3, [sp, #4]
 80116d0:	2e00      	cmp	r6, #0
 80116d2:	d100      	bne.n	80116d6 <_strtoll_l.constprop.0+0x3a>
 80116d4:	e086      	b.n	80117e4 <_strtoll_l.constprop.0+0x148>
 80116d6:	2e10      	cmp	r6, #16
 80116d8:	d10a      	bne.n	80116f0 <_strtoll_l.constprop.0+0x54>
 80116da:	2c30      	cmp	r4, #48	; 0x30
 80116dc:	d108      	bne.n	80116f0 <_strtoll_l.constprop.0+0x54>
 80116de:	2220      	movs	r2, #32
 80116e0:	782b      	ldrb	r3, [r5, #0]
 80116e2:	4393      	bics	r3, r2
 80116e4:	2b58      	cmp	r3, #88	; 0x58
 80116e6:	d000      	beq.n	80116ea <_strtoll_l.constprop.0+0x4e>
 80116e8:	e076      	b.n	80117d8 <_strtoll_l.constprop.0+0x13c>
 80116ea:	2610      	movs	r6, #16
 80116ec:	786c      	ldrb	r4, [r5, #1]
 80116ee:	3502      	adds	r5, #2
 80116f0:	2001      	movs	r0, #1
 80116f2:	2300      	movs	r3, #0
 80116f4:	493f      	ldr	r1, [pc, #252]	; (80117f4 <_strtoll_l.constprop.0+0x158>)
 80116f6:	9a01      	ldr	r2, [sp, #4]
 80116f8:	4240      	negs	r0, r0
 80116fa:	1812      	adds	r2, r2, r0
 80116fc:	414b      	adcs	r3, r1
 80116fe:	9204      	str	r2, [sp, #16]
 8011700:	9305      	str	r3, [sp, #20]
 8011702:	9804      	ldr	r0, [sp, #16]
 8011704:	9905      	ldr	r1, [sp, #20]
 8011706:	17f3      	asrs	r3, r6, #31
 8011708:	0032      	movs	r2, r6
 801170a:	930b      	str	r3, [sp, #44]	; 0x2c
 801170c:	f7ee feca 	bl	80004a4 <__aeabi_uldivmod>
 8011710:	2300      	movs	r3, #0
 8011712:	000f      	movs	r7, r1
 8011714:	9008      	str	r0, [sp, #32]
 8011716:	2100      	movs	r1, #0
 8011718:	2000      	movs	r0, #0
 801171a:	9209      	str	r2, [sp, #36]	; 0x24
 801171c:	0022      	movs	r2, r4
 801171e:	3a30      	subs	r2, #48	; 0x30
 8011720:	2a09      	cmp	r2, #9
 8011722:	d82b      	bhi.n	801177c <_strtoll_l.constprop.0+0xe0>
 8011724:	0014      	movs	r4, r2
 8011726:	42a6      	cmp	r6, r4
 8011728:	dd37      	ble.n	801179a <_strtoll_l.constprop.0+0xfe>
 801172a:	1c5a      	adds	r2, r3, #1
 801172c:	d01d      	beq.n	801176a <_strtoll_l.constprop.0+0xce>
 801172e:	42b9      	cmp	r1, r7
 8011730:	d830      	bhi.n	8011794 <_strtoll_l.constprop.0+0xf8>
 8011732:	d102      	bne.n	801173a <_strtoll_l.constprop.0+0x9e>
 8011734:	9b08      	ldr	r3, [sp, #32]
 8011736:	4298      	cmp	r0, r3
 8011738:	d82c      	bhi.n	8011794 <_strtoll_l.constprop.0+0xf8>
 801173a:	9b08      	ldr	r3, [sp, #32]
 801173c:	4283      	cmp	r3, r0
 801173e:	d106      	bne.n	801174e <_strtoll_l.constprop.0+0xb2>
 8011740:	428f      	cmp	r7, r1
 8011742:	d104      	bne.n	801174e <_strtoll_l.constprop.0+0xb2>
 8011744:	2301      	movs	r3, #1
 8011746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011748:	425b      	negs	r3, r3
 801174a:	42a2      	cmp	r2, r4
 801174c:	db0d      	blt.n	801176a <_strtoll_l.constprop.0+0xce>
 801174e:	000b      	movs	r3, r1
 8011750:	0002      	movs	r2, r0
 8011752:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011754:	0030      	movs	r0, r6
 8011756:	f7ee fec5 	bl	80004e4 <__aeabi_lmul>
 801175a:	17e3      	asrs	r3, r4, #31
 801175c:	9406      	str	r4, [sp, #24]
 801175e:	9307      	str	r3, [sp, #28]
 8011760:	9b06      	ldr	r3, [sp, #24]
 8011762:	9c07      	ldr	r4, [sp, #28]
 8011764:	18c0      	adds	r0, r0, r3
 8011766:	4161      	adcs	r1, r4
 8011768:	2301      	movs	r3, #1
 801176a:	782c      	ldrb	r4, [r5, #0]
 801176c:	3501      	adds	r5, #1
 801176e:	e7d5      	b.n	801171c <_strtoll_l.constprop.0+0x80>
 8011770:	9701      	str	r7, [sp, #4]
 8011772:	2c2b      	cmp	r4, #43	; 0x2b
 8011774:	d1ac      	bne.n	80116d0 <_strtoll_l.constprop.0+0x34>
 8011776:	781c      	ldrb	r4, [r3, #0]
 8011778:	1c95      	adds	r5, r2, #2
 801177a:	e7a9      	b.n	80116d0 <_strtoll_l.constprop.0+0x34>
 801177c:	0022      	movs	r2, r4
 801177e:	3a41      	subs	r2, #65	; 0x41
 8011780:	2a19      	cmp	r2, #25
 8011782:	d801      	bhi.n	8011788 <_strtoll_l.constprop.0+0xec>
 8011784:	3c37      	subs	r4, #55	; 0x37
 8011786:	e7ce      	b.n	8011726 <_strtoll_l.constprop.0+0x8a>
 8011788:	0022      	movs	r2, r4
 801178a:	3a61      	subs	r2, #97	; 0x61
 801178c:	2a19      	cmp	r2, #25
 801178e:	d804      	bhi.n	801179a <_strtoll_l.constprop.0+0xfe>
 8011790:	3c57      	subs	r4, #87	; 0x57
 8011792:	e7c8      	b.n	8011726 <_strtoll_l.constprop.0+0x8a>
 8011794:	2301      	movs	r3, #1
 8011796:	425b      	negs	r3, r3
 8011798:	e7e7      	b.n	801176a <_strtoll_l.constprop.0+0xce>
 801179a:	1c5a      	adds	r2, r3, #1
 801179c:	d109      	bne.n	80117b2 <_strtoll_l.constprop.0+0x116>
 801179e:	9804      	ldr	r0, [sp, #16]
 80117a0:	9905      	ldr	r1, [sp, #20]
 80117a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117a4:	3323      	adds	r3, #35	; 0x23
 80117a6:	6013      	str	r3, [r2, #0]
 80117a8:	9b03      	ldr	r3, [sp, #12]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d10e      	bne.n	80117cc <_strtoll_l.constprop.0+0x130>
 80117ae:	b00d      	add	sp, #52	; 0x34
 80117b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b2:	9a01      	ldr	r2, [sp, #4]
 80117b4:	2a00      	cmp	r2, #0
 80117b6:	d004      	beq.n	80117c2 <_strtoll_l.constprop.0+0x126>
 80117b8:	0006      	movs	r6, r0
 80117ba:	000f      	movs	r7, r1
 80117bc:	2100      	movs	r1, #0
 80117be:	4270      	negs	r0, r6
 80117c0:	41b9      	sbcs	r1, r7
 80117c2:	9a03      	ldr	r2, [sp, #12]
 80117c4:	2a00      	cmp	r2, #0
 80117c6:	d0f2      	beq.n	80117ae <_strtoll_l.constprop.0+0x112>
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d001      	beq.n	80117d0 <_strtoll_l.constprop.0+0x134>
 80117cc:	1e6b      	subs	r3, r5, #1
 80117ce:	9302      	str	r3, [sp, #8]
 80117d0:	9b03      	ldr	r3, [sp, #12]
 80117d2:	9a02      	ldr	r2, [sp, #8]
 80117d4:	601a      	str	r2, [r3, #0]
 80117d6:	e7ea      	b.n	80117ae <_strtoll_l.constprop.0+0x112>
 80117d8:	2430      	movs	r4, #48	; 0x30
 80117da:	2e00      	cmp	r6, #0
 80117dc:	d000      	beq.n	80117e0 <_strtoll_l.constprop.0+0x144>
 80117de:	e787      	b.n	80116f0 <_strtoll_l.constprop.0+0x54>
 80117e0:	3608      	adds	r6, #8
 80117e2:	e785      	b.n	80116f0 <_strtoll_l.constprop.0+0x54>
 80117e4:	2c30      	cmp	r4, #48	; 0x30
 80117e6:	d100      	bne.n	80117ea <_strtoll_l.constprop.0+0x14e>
 80117e8:	e779      	b.n	80116de <_strtoll_l.constprop.0+0x42>
 80117ea:	260a      	movs	r6, #10
 80117ec:	e780      	b.n	80116f0 <_strtoll_l.constprop.0+0x54>
 80117ee:	46c0      	nop			; (mov r8, r8)
 80117f0:	08014971 	.word	0x08014971
 80117f4:	7fffffff 	.word	0x7fffffff

080117f8 <_strtoll_r>:
 80117f8:	b510      	push	{r4, lr}
 80117fa:	f7ff ff4f 	bl	801169c <_strtoll_l.constprop.0>
 80117fe:	bd10      	pop	{r4, pc}

08011800 <_strtoull_l.constprop.0>:
 8011800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011802:	b08b      	sub	sp, #44	; 0x2c
 8011804:	9202      	str	r2, [sp, #8]
 8011806:	4a54      	ldr	r2, [pc, #336]	; (8011958 <_strtoull_l.constprop.0+0x158>)
 8011808:	001e      	movs	r6, r3
 801180a:	9101      	str	r1, [sp, #4]
 801180c:	000b      	movs	r3, r1
 801180e:	4694      	mov	ip, r2
 8011810:	2108      	movs	r1, #8
 8011812:	9009      	str	r0, [sp, #36]	; 0x24
 8011814:	001a      	movs	r2, r3
 8011816:	4660      	mov	r0, ip
 8011818:	7814      	ldrb	r4, [r2, #0]
 801181a:	3301      	adds	r3, #1
 801181c:	5d00      	ldrb	r0, [r0, r4]
 801181e:	001d      	movs	r5, r3
 8011820:	0007      	movs	r7, r0
 8011822:	400f      	ands	r7, r1
 8011824:	4208      	tst	r0, r1
 8011826:	d1f5      	bne.n	8011814 <_strtoull_l.constprop.0+0x14>
 8011828:	2c2d      	cmp	r4, #45	; 0x2d
 801182a:	d154      	bne.n	80118d6 <_strtoull_l.constprop.0+0xd6>
 801182c:	781c      	ldrb	r4, [r3, #0]
 801182e:	2301      	movs	r3, #1
 8011830:	1c95      	adds	r5, r2, #2
 8011832:	9306      	str	r3, [sp, #24]
 8011834:	2e00      	cmp	r6, #0
 8011836:	d100      	bne.n	801183a <_strtoull_l.constprop.0+0x3a>
 8011838:	e088      	b.n	801194c <_strtoull_l.constprop.0+0x14c>
 801183a:	2e10      	cmp	r6, #16
 801183c:	d10a      	bne.n	8011854 <_strtoull_l.constprop.0+0x54>
 801183e:	2c30      	cmp	r4, #48	; 0x30
 8011840:	d108      	bne.n	8011854 <_strtoull_l.constprop.0+0x54>
 8011842:	2220      	movs	r2, #32
 8011844:	782b      	ldrb	r3, [r5, #0]
 8011846:	4393      	bics	r3, r2
 8011848:	2b58      	cmp	r3, #88	; 0x58
 801184a:	d000      	beq.n	801184e <_strtoull_l.constprop.0+0x4e>
 801184c:	e078      	b.n	8011940 <_strtoull_l.constprop.0+0x140>
 801184e:	2610      	movs	r6, #16
 8011850:	786c      	ldrb	r4, [r5, #1]
 8011852:	3502      	adds	r5, #2
 8011854:	17f7      	asrs	r7, r6, #31
 8011856:	0032      	movs	r2, r6
 8011858:	003b      	movs	r3, r7
 801185a:	2001      	movs	r0, #1
 801185c:	4240      	negs	r0, r0
 801185e:	17c1      	asrs	r1, r0, #31
 8011860:	f7ee fe20 	bl	80004a4 <__aeabi_uldivmod>
 8011864:	0032      	movs	r2, r6
 8011866:	9007      	str	r0, [sp, #28]
 8011868:	9103      	str	r1, [sp, #12]
 801186a:	003b      	movs	r3, r7
 801186c:	2001      	movs	r0, #1
 801186e:	4240      	negs	r0, r0
 8011870:	17c1      	asrs	r1, r0, #31
 8011872:	f7ee fe17 	bl	80004a4 <__aeabi_uldivmod>
 8011876:	2300      	movs	r3, #0
 8011878:	2000      	movs	r0, #0
 801187a:	2100      	movs	r1, #0
 801187c:	9208      	str	r2, [sp, #32]
 801187e:	0022      	movs	r2, r4
 8011880:	3a30      	subs	r2, #48	; 0x30
 8011882:	2a09      	cmp	r2, #9
 8011884:	d82d      	bhi.n	80118e2 <_strtoull_l.constprop.0+0xe2>
 8011886:	0014      	movs	r4, r2
 8011888:	42a6      	cmp	r6, r4
 801188a:	dd39      	ble.n	8011900 <_strtoull_l.constprop.0+0x100>
 801188c:	1c5a      	adds	r2, r3, #1
 801188e:	d01f      	beq.n	80118d0 <_strtoull_l.constprop.0+0xd0>
 8011890:	9b03      	ldr	r3, [sp, #12]
 8011892:	4299      	cmp	r1, r3
 8011894:	d831      	bhi.n	80118fa <_strtoull_l.constprop.0+0xfa>
 8011896:	d102      	bne.n	801189e <_strtoull_l.constprop.0+0x9e>
 8011898:	9b07      	ldr	r3, [sp, #28]
 801189a:	4298      	cmp	r0, r3
 801189c:	d82d      	bhi.n	80118fa <_strtoull_l.constprop.0+0xfa>
 801189e:	9b07      	ldr	r3, [sp, #28]
 80118a0:	4283      	cmp	r3, r0
 80118a2:	d107      	bne.n	80118b4 <_strtoull_l.constprop.0+0xb4>
 80118a4:	9b03      	ldr	r3, [sp, #12]
 80118a6:	428b      	cmp	r3, r1
 80118a8:	d104      	bne.n	80118b4 <_strtoull_l.constprop.0+0xb4>
 80118aa:	2301      	movs	r3, #1
 80118ac:	9a08      	ldr	r2, [sp, #32]
 80118ae:	425b      	negs	r3, r3
 80118b0:	42a2      	cmp	r2, r4
 80118b2:	db0d      	blt.n	80118d0 <_strtoull_l.constprop.0+0xd0>
 80118b4:	000b      	movs	r3, r1
 80118b6:	0002      	movs	r2, r0
 80118b8:	0039      	movs	r1, r7
 80118ba:	0030      	movs	r0, r6
 80118bc:	f7ee fe12 	bl	80004e4 <__aeabi_lmul>
 80118c0:	17e3      	asrs	r3, r4, #31
 80118c2:	9404      	str	r4, [sp, #16]
 80118c4:	9305      	str	r3, [sp, #20]
 80118c6:	9b04      	ldr	r3, [sp, #16]
 80118c8:	9c05      	ldr	r4, [sp, #20]
 80118ca:	18c0      	adds	r0, r0, r3
 80118cc:	4161      	adcs	r1, r4
 80118ce:	2301      	movs	r3, #1
 80118d0:	782c      	ldrb	r4, [r5, #0]
 80118d2:	3501      	adds	r5, #1
 80118d4:	e7d3      	b.n	801187e <_strtoull_l.constprop.0+0x7e>
 80118d6:	9706      	str	r7, [sp, #24]
 80118d8:	2c2b      	cmp	r4, #43	; 0x2b
 80118da:	d1ab      	bne.n	8011834 <_strtoull_l.constprop.0+0x34>
 80118dc:	781c      	ldrb	r4, [r3, #0]
 80118de:	1c95      	adds	r5, r2, #2
 80118e0:	e7a8      	b.n	8011834 <_strtoull_l.constprop.0+0x34>
 80118e2:	0022      	movs	r2, r4
 80118e4:	3a41      	subs	r2, #65	; 0x41
 80118e6:	2a19      	cmp	r2, #25
 80118e8:	d801      	bhi.n	80118ee <_strtoull_l.constprop.0+0xee>
 80118ea:	3c37      	subs	r4, #55	; 0x37
 80118ec:	e7cc      	b.n	8011888 <_strtoull_l.constprop.0+0x88>
 80118ee:	0022      	movs	r2, r4
 80118f0:	3a61      	subs	r2, #97	; 0x61
 80118f2:	2a19      	cmp	r2, #25
 80118f4:	d804      	bhi.n	8011900 <_strtoull_l.constprop.0+0x100>
 80118f6:	3c57      	subs	r4, #87	; 0x57
 80118f8:	e7c6      	b.n	8011888 <_strtoull_l.constprop.0+0x88>
 80118fa:	2301      	movs	r3, #1
 80118fc:	425b      	negs	r3, r3
 80118fe:	e7e7      	b.n	80118d0 <_strtoull_l.constprop.0+0xd0>
 8011900:	1c5a      	adds	r2, r3, #1
 8011902:	d10a      	bne.n	801191a <_strtoull_l.constprop.0+0x11a>
 8011904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011906:	3323      	adds	r3, #35	; 0x23
 8011908:	6013      	str	r3, [r2, #0]
 801190a:	9b02      	ldr	r3, [sp, #8]
 801190c:	2001      	movs	r0, #1
 801190e:	4240      	negs	r0, r0
 8011910:	17c1      	asrs	r1, r0, #31
 8011912:	2b00      	cmp	r3, #0
 8011914:	d10e      	bne.n	8011934 <_strtoull_l.constprop.0+0x134>
 8011916:	b00b      	add	sp, #44	; 0x2c
 8011918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801191a:	9a06      	ldr	r2, [sp, #24]
 801191c:	2a00      	cmp	r2, #0
 801191e:	d004      	beq.n	801192a <_strtoull_l.constprop.0+0x12a>
 8011920:	0006      	movs	r6, r0
 8011922:	000f      	movs	r7, r1
 8011924:	2100      	movs	r1, #0
 8011926:	4270      	negs	r0, r6
 8011928:	41b9      	sbcs	r1, r7
 801192a:	9a02      	ldr	r2, [sp, #8]
 801192c:	2a00      	cmp	r2, #0
 801192e:	d0f2      	beq.n	8011916 <_strtoull_l.constprop.0+0x116>
 8011930:	2b00      	cmp	r3, #0
 8011932:	d001      	beq.n	8011938 <_strtoull_l.constprop.0+0x138>
 8011934:	1e6b      	subs	r3, r5, #1
 8011936:	9301      	str	r3, [sp, #4]
 8011938:	9b02      	ldr	r3, [sp, #8]
 801193a:	9a01      	ldr	r2, [sp, #4]
 801193c:	601a      	str	r2, [r3, #0]
 801193e:	e7ea      	b.n	8011916 <_strtoull_l.constprop.0+0x116>
 8011940:	2430      	movs	r4, #48	; 0x30
 8011942:	2e00      	cmp	r6, #0
 8011944:	d000      	beq.n	8011948 <_strtoull_l.constprop.0+0x148>
 8011946:	e785      	b.n	8011854 <_strtoull_l.constprop.0+0x54>
 8011948:	3608      	adds	r6, #8
 801194a:	e783      	b.n	8011854 <_strtoull_l.constprop.0+0x54>
 801194c:	2c30      	cmp	r4, #48	; 0x30
 801194e:	d100      	bne.n	8011952 <_strtoull_l.constprop.0+0x152>
 8011950:	e777      	b.n	8011842 <_strtoull_l.constprop.0+0x42>
 8011952:	260a      	movs	r6, #10
 8011954:	e77e      	b.n	8011854 <_strtoull_l.constprop.0+0x54>
 8011956:	46c0      	nop			; (mov r8, r8)
 8011958:	08014971 	.word	0x08014971

0801195c <_strtoull_r>:
 801195c:	b510      	push	{r4, lr}
 801195e:	f7ff ff4f 	bl	8011800 <_strtoull_l.constprop.0>
 8011962:	bd10      	pop	{r4, pc}

08011964 <_mbrtowc_r>:
 8011964:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011966:	0004      	movs	r4, r0
 8011968:	0010      	movs	r0, r2
 801196a:	4a0b      	ldr	r2, [pc, #44]	; (8011998 <_mbrtowc_r+0x34>)
 801196c:	9d06      	ldr	r5, [sp, #24]
 801196e:	32e4      	adds	r2, #228	; 0xe4
 8011970:	6816      	ldr	r6, [r2, #0]
 8011972:	2800      	cmp	r0, #0
 8011974:	d10c      	bne.n	8011990 <_mbrtowc_r+0x2c>
 8011976:	2301      	movs	r3, #1
 8011978:	0001      	movs	r1, r0
 801197a:	4a08      	ldr	r2, [pc, #32]	; (801199c <_mbrtowc_r+0x38>)
 801197c:	9500      	str	r5, [sp, #0]
 801197e:	0020      	movs	r0, r4
 8011980:	47b0      	blx	r6
 8011982:	1c43      	adds	r3, r0, #1
 8011984:	d103      	bne.n	801198e <_mbrtowc_r+0x2a>
 8011986:	2300      	movs	r3, #0
 8011988:	602b      	str	r3, [r5, #0]
 801198a:	338a      	adds	r3, #138	; 0x8a
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011990:	0002      	movs	r2, r0
 8011992:	9500      	str	r5, [sp, #0]
 8011994:	e7f3      	b.n	801197e <_mbrtowc_r+0x1a>
 8011996:	46c0      	nop			; (mov r8, r8)
 8011998:	20000448 	.word	0x20000448
 801199c:	08014cfb 	.word	0x08014cfb

080119a0 <iswspace>:
 80119a0:	b510      	push	{r4, lr}
 80119a2:	2100      	movs	r1, #0
 80119a4:	f000 f802 	bl	80119ac <iswspace_l>
 80119a8:	bd10      	pop	{r4, pc}
	...

080119ac <iswspace_l>:
 80119ac:	0003      	movs	r3, r0
 80119ae:	2000      	movs	r0, #0
 80119b0:	2bff      	cmp	r3, #255	; 0xff
 80119b2:	d803      	bhi.n	80119bc <iswspace_l+0x10>
 80119b4:	4a02      	ldr	r2, [pc, #8]	; (80119c0 <iswspace_l+0x14>)
 80119b6:	5cd0      	ldrb	r0, [r2, r3]
 80119b8:	2308      	movs	r3, #8
 80119ba:	4018      	ands	r0, r3
 80119bc:	4770      	bx	lr
 80119be:	46c0      	nop			; (mov r8, r8)
 80119c0:	08014971 	.word	0x08014971

080119c4 <fiprintf>:
 80119c4:	b40e      	push	{r1, r2, r3}
 80119c6:	b517      	push	{r0, r1, r2, r4, lr}
 80119c8:	4c05      	ldr	r4, [pc, #20]	; (80119e0 <fiprintf+0x1c>)
 80119ca:	ab05      	add	r3, sp, #20
 80119cc:	cb04      	ldmia	r3!, {r2}
 80119ce:	0001      	movs	r1, r0
 80119d0:	6820      	ldr	r0, [r4, #0]
 80119d2:	9301      	str	r3, [sp, #4]
 80119d4:	f000 f954 	bl	8011c80 <_vfiprintf_r>
 80119d8:	bc1e      	pop	{r1, r2, r3, r4}
 80119da:	bc08      	pop	{r3}
 80119dc:	b003      	add	sp, #12
 80119de:	4718      	bx	r3
 80119e0:	200006d8 	.word	0x200006d8

080119e4 <__ssprint_r>:
 80119e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119e6:	6813      	ldr	r3, [r2, #0]
 80119e8:	b087      	sub	sp, #28
 80119ea:	0017      	movs	r7, r2
 80119ec:	9303      	str	r3, [sp, #12]
 80119ee:	6893      	ldr	r3, [r2, #8]
 80119f0:	2200      	movs	r2, #0
 80119f2:	000c      	movs	r4, r1
 80119f4:	9005      	str	r0, [sp, #20]
 80119f6:	9202      	str	r2, [sp, #8]
 80119f8:	9201      	str	r2, [sp, #4]
 80119fa:	4293      	cmp	r3, r2
 80119fc:	d10d      	bne.n	8011a1a <__ssprint_r+0x36>
 80119fe:	2000      	movs	r0, #0
 8011a00:	2300      	movs	r3, #0
 8011a02:	607b      	str	r3, [r7, #4]
 8011a04:	b007      	add	sp, #28
 8011a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a08:	9b03      	ldr	r3, [sp, #12]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	9302      	str	r3, [sp, #8]
 8011a0e:	9b03      	ldr	r3, [sp, #12]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	9301      	str	r3, [sp, #4]
 8011a14:	9b03      	ldr	r3, [sp, #12]
 8011a16:	3308      	adds	r3, #8
 8011a18:	9303      	str	r3, [sp, #12]
 8011a1a:	9a01      	ldr	r2, [sp, #4]
 8011a1c:	68a6      	ldr	r6, [r4, #8]
 8011a1e:	6823      	ldr	r3, [r4, #0]
 8011a20:	2a00      	cmp	r2, #0
 8011a22:	d0f1      	beq.n	8011a08 <__ssprint_r+0x24>
 8011a24:	42b2      	cmp	r2, r6
 8011a26:	d32e      	bcc.n	8011a86 <__ssprint_r+0xa2>
 8011a28:	2190      	movs	r1, #144	; 0x90
 8011a2a:	89a2      	ldrh	r2, [r4, #12]
 8011a2c:	00c9      	lsls	r1, r1, #3
 8011a2e:	420a      	tst	r2, r1
 8011a30:	d029      	beq.n	8011a86 <__ssprint_r+0xa2>
 8011a32:	2003      	movs	r0, #3
 8011a34:	6921      	ldr	r1, [r4, #16]
 8011a36:	1a5b      	subs	r3, r3, r1
 8011a38:	9304      	str	r3, [sp, #16]
 8011a3a:	6963      	ldr	r3, [r4, #20]
 8011a3c:	4343      	muls	r3, r0
 8011a3e:	0fdd      	lsrs	r5, r3, #31
 8011a40:	18ed      	adds	r5, r5, r3
 8011a42:	9b04      	ldr	r3, [sp, #16]
 8011a44:	9801      	ldr	r0, [sp, #4]
 8011a46:	3301      	adds	r3, #1
 8011a48:	181b      	adds	r3, r3, r0
 8011a4a:	106d      	asrs	r5, r5, #1
 8011a4c:	42ab      	cmp	r3, r5
 8011a4e:	d900      	bls.n	8011a52 <__ssprint_r+0x6e>
 8011a50:	001d      	movs	r5, r3
 8011a52:	0552      	lsls	r2, r2, #21
 8011a54:	d532      	bpl.n	8011abc <__ssprint_r+0xd8>
 8011a56:	0029      	movs	r1, r5
 8011a58:	9805      	ldr	r0, [sp, #20]
 8011a5a:	f7f9 fa35 	bl	800aec8 <_malloc_r>
 8011a5e:	1e06      	subs	r6, r0, #0
 8011a60:	d036      	beq.n	8011ad0 <__ssprint_r+0xec>
 8011a62:	9a04      	ldr	r2, [sp, #16]
 8011a64:	6921      	ldr	r1, [r4, #16]
 8011a66:	f7fa fd94 	bl	800c592 <memcpy>
 8011a6a:	89a2      	ldrh	r2, [r4, #12]
 8011a6c:	4b1e      	ldr	r3, [pc, #120]	; (8011ae8 <__ssprint_r+0x104>)
 8011a6e:	401a      	ands	r2, r3
 8011a70:	2380      	movs	r3, #128	; 0x80
 8011a72:	4313      	orrs	r3, r2
 8011a74:	81a3      	strh	r3, [r4, #12]
 8011a76:	9b04      	ldr	r3, [sp, #16]
 8011a78:	6126      	str	r6, [r4, #16]
 8011a7a:	18f6      	adds	r6, r6, r3
 8011a7c:	6026      	str	r6, [r4, #0]
 8011a7e:	6165      	str	r5, [r4, #20]
 8011a80:	9e01      	ldr	r6, [sp, #4]
 8011a82:	1aed      	subs	r5, r5, r3
 8011a84:	60a5      	str	r5, [r4, #8]
 8011a86:	9b01      	ldr	r3, [sp, #4]
 8011a88:	429e      	cmp	r6, r3
 8011a8a:	d900      	bls.n	8011a8e <__ssprint_r+0xaa>
 8011a8c:	001e      	movs	r6, r3
 8011a8e:	0032      	movs	r2, r6
 8011a90:	9902      	ldr	r1, [sp, #8]
 8011a92:	6820      	ldr	r0, [r4, #0]
 8011a94:	f001 f86d 	bl	8012b72 <memmove>
 8011a98:	9a01      	ldr	r2, [sp, #4]
 8011a9a:	68a3      	ldr	r3, [r4, #8]
 8011a9c:	4694      	mov	ip, r2
 8011a9e:	1b9b      	subs	r3, r3, r6
 8011aa0:	60a3      	str	r3, [r4, #8]
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	199b      	adds	r3, r3, r6
 8011aa6:	6023      	str	r3, [r4, #0]
 8011aa8:	9b02      	ldr	r3, [sp, #8]
 8011aaa:	4463      	add	r3, ip
 8011aac:	9302      	str	r3, [sp, #8]
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	1a9b      	subs	r3, r3, r2
 8011ab2:	60bb      	str	r3, [r7, #8]
 8011ab4:	d0a3      	beq.n	80119fe <__ssprint_r+0x1a>
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	9301      	str	r3, [sp, #4]
 8011aba:	e7ae      	b.n	8011a1a <__ssprint_r+0x36>
 8011abc:	002a      	movs	r2, r5
 8011abe:	9805      	ldr	r0, [sp, #20]
 8011ac0:	f7ff fbc0 	bl	8011244 <_realloc_r>
 8011ac4:	1e06      	subs	r6, r0, #0
 8011ac6:	d1d6      	bne.n	8011a76 <__ssprint_r+0x92>
 8011ac8:	6921      	ldr	r1, [r4, #16]
 8011aca:	9805      	ldr	r0, [sp, #20]
 8011acc:	f7fa fddc 	bl	800c688 <_free_r>
 8011ad0:	230c      	movs	r3, #12
 8011ad2:	9a05      	ldr	r2, [sp, #20]
 8011ad4:	2001      	movs	r0, #1
 8011ad6:	6013      	str	r3, [r2, #0]
 8011ad8:	89a2      	ldrh	r2, [r4, #12]
 8011ada:	3334      	adds	r3, #52	; 0x34
 8011adc:	4313      	orrs	r3, r2
 8011ade:	81a3      	strh	r3, [r4, #12]
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	4240      	negs	r0, r0
 8011ae4:	60bb      	str	r3, [r7, #8]
 8011ae6:	e78b      	b.n	8011a00 <__ssprint_r+0x1c>
 8011ae8:	fffffb7f 	.word	0xfffffb7f

08011aec <_sungetc_r>:
 8011aec:	b570      	push	{r4, r5, r6, lr}
 8011aee:	0014      	movs	r4, r2
 8011af0:	1c4b      	adds	r3, r1, #1
 8011af2:	d103      	bne.n	8011afc <_sungetc_r+0x10>
 8011af4:	2501      	movs	r5, #1
 8011af6:	426d      	negs	r5, r5
 8011af8:	0028      	movs	r0, r5
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
 8011afc:	8993      	ldrh	r3, [r2, #12]
 8011afe:	2220      	movs	r2, #32
 8011b00:	4393      	bics	r3, r2
 8011b02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011b04:	81a3      	strh	r3, [r4, #12]
 8011b06:	b2ce      	uxtb	r6, r1
 8011b08:	6863      	ldr	r3, [r4, #4]
 8011b0a:	b2cd      	uxtb	r5, r1
 8011b0c:	2a00      	cmp	r2, #0
 8011b0e:	d010      	beq.n	8011b32 <_sungetc_r+0x46>
 8011b10:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011b12:	429a      	cmp	r2, r3
 8011b14:	dd07      	ble.n	8011b26 <_sungetc_r+0x3a>
 8011b16:	6823      	ldr	r3, [r4, #0]
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	6023      	str	r3, [r4, #0]
 8011b1c:	701e      	strb	r6, [r3, #0]
 8011b1e:	6863      	ldr	r3, [r4, #4]
 8011b20:	3301      	adds	r3, #1
 8011b22:	6063      	str	r3, [r4, #4]
 8011b24:	e7e8      	b.n	8011af8 <_sungetc_r+0xc>
 8011b26:	0021      	movs	r1, r4
 8011b28:	f000 ff1a 	bl	8012960 <__submore>
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	d0f2      	beq.n	8011b16 <_sungetc_r+0x2a>
 8011b30:	e7e0      	b.n	8011af4 <_sungetc_r+0x8>
 8011b32:	6921      	ldr	r1, [r4, #16]
 8011b34:	6822      	ldr	r2, [r4, #0]
 8011b36:	2900      	cmp	r1, #0
 8011b38:	d007      	beq.n	8011b4a <_sungetc_r+0x5e>
 8011b3a:	4291      	cmp	r1, r2
 8011b3c:	d205      	bcs.n	8011b4a <_sungetc_r+0x5e>
 8011b3e:	1e51      	subs	r1, r2, #1
 8011b40:	7808      	ldrb	r0, [r1, #0]
 8011b42:	42a8      	cmp	r0, r5
 8011b44:	d101      	bne.n	8011b4a <_sungetc_r+0x5e>
 8011b46:	6021      	str	r1, [r4, #0]
 8011b48:	e7ea      	b.n	8011b20 <_sungetc_r+0x34>
 8011b4a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011b4c:	0023      	movs	r3, r4
 8011b4e:	3340      	adds	r3, #64	; 0x40
 8011b50:	6323      	str	r3, [r4, #48]	; 0x30
 8011b52:	2303      	movs	r3, #3
 8011b54:	6363      	str	r3, [r4, #52]	; 0x34
 8011b56:	0023      	movs	r3, r4
 8011b58:	3342      	adds	r3, #66	; 0x42
 8011b5a:	63a2      	str	r2, [r4, #56]	; 0x38
 8011b5c:	701e      	strb	r6, [r3, #0]
 8011b5e:	6023      	str	r3, [r4, #0]
 8011b60:	2301      	movs	r3, #1
 8011b62:	e7de      	b.n	8011b22 <_sungetc_r+0x36>

08011b64 <__ssrefill_r>:
 8011b64:	b510      	push	{r4, lr}
 8011b66:	000c      	movs	r4, r1
 8011b68:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8011b6a:	2900      	cmp	r1, #0
 8011b6c:	d00e      	beq.n	8011b8c <__ssrefill_r+0x28>
 8011b6e:	0023      	movs	r3, r4
 8011b70:	3340      	adds	r3, #64	; 0x40
 8011b72:	4299      	cmp	r1, r3
 8011b74:	d001      	beq.n	8011b7a <__ssrefill_r+0x16>
 8011b76:	f7fa fd87 	bl	800c688 <_free_r>
 8011b7a:	2000      	movs	r0, #0
 8011b7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011b7e:	6320      	str	r0, [r4, #48]	; 0x30
 8011b80:	6063      	str	r3, [r4, #4]
 8011b82:	4283      	cmp	r3, r0
 8011b84:	d002      	beq.n	8011b8c <__ssrefill_r+0x28>
 8011b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b88:	6023      	str	r3, [r4, #0]
 8011b8a:	bd10      	pop	{r4, pc}
 8011b8c:	6923      	ldr	r3, [r4, #16]
 8011b8e:	2001      	movs	r0, #1
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	2300      	movs	r3, #0
 8011b94:	89a2      	ldrh	r2, [r4, #12]
 8011b96:	6063      	str	r3, [r4, #4]
 8011b98:	3320      	adds	r3, #32
 8011b9a:	4313      	orrs	r3, r2
 8011b9c:	81a3      	strh	r3, [r4, #12]
 8011b9e:	4240      	negs	r0, r0
 8011ba0:	e7f3      	b.n	8011b8a <__ssrefill_r+0x26>

08011ba2 <_sfread_r>:
 8011ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ba4:	0014      	movs	r4, r2
 8011ba6:	435c      	muls	r4, r3
 8011ba8:	b087      	sub	sp, #28
 8011baa:	1e26      	subs	r6, r4, #0
 8011bac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011bae:	9005      	str	r0, [sp, #20]
 8011bb0:	9101      	str	r1, [sp, #4]
 8011bb2:	9202      	str	r2, [sp, #8]
 8011bb4:	9303      	str	r3, [sp, #12]
 8011bb6:	d11e      	bne.n	8011bf6 <_sfread_r+0x54>
 8011bb8:	0020      	movs	r0, r4
 8011bba:	b007      	add	sp, #28
 8011bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bbe:	003a      	movs	r2, r7
 8011bc0:	9801      	ldr	r0, [sp, #4]
 8011bc2:	f7fa fce6 	bl	800c592 <memcpy>
 8011bc6:	682b      	ldr	r3, [r5, #0]
 8011bc8:	0029      	movs	r1, r5
 8011bca:	19db      	adds	r3, r3, r7
 8011bcc:	602b      	str	r3, [r5, #0]
 8011bce:	2300      	movs	r3, #0
 8011bd0:	606b      	str	r3, [r5, #4]
 8011bd2:	9b01      	ldr	r3, [sp, #4]
 8011bd4:	9805      	ldr	r0, [sp, #20]
 8011bd6:	19db      	adds	r3, r3, r7
 8011bd8:	9301      	str	r3, [sp, #4]
 8011bda:	1bf3      	subs	r3, r6, r7
 8011bdc:	9304      	str	r3, [sp, #16]
 8011bde:	f7ff ffc1 	bl	8011b64 <__ssrefill_r>
 8011be2:	2800      	cmp	r0, #0
 8011be4:	d006      	beq.n	8011bf4 <_sfread_r+0x52>
 8011be6:	193c      	adds	r4, r7, r4
 8011be8:	1ba0      	subs	r0, r4, r6
 8011bea:	9902      	ldr	r1, [sp, #8]
 8011bec:	f7ee faa6 	bl	800013c <__udivsi3>
 8011bf0:	0004      	movs	r4, r0
 8011bf2:	e7e1      	b.n	8011bb8 <_sfread_r+0x16>
 8011bf4:	9e04      	ldr	r6, [sp, #16]
 8011bf6:	686f      	ldr	r7, [r5, #4]
 8011bf8:	6829      	ldr	r1, [r5, #0]
 8011bfa:	42b7      	cmp	r7, r6
 8011bfc:	d3df      	bcc.n	8011bbe <_sfread_r+0x1c>
 8011bfe:	0032      	movs	r2, r6
 8011c00:	9801      	ldr	r0, [sp, #4]
 8011c02:	f7fa fcc6 	bl	800c592 <memcpy>
 8011c06:	686b      	ldr	r3, [r5, #4]
 8011c08:	9c03      	ldr	r4, [sp, #12]
 8011c0a:	1b9b      	subs	r3, r3, r6
 8011c0c:	606b      	str	r3, [r5, #4]
 8011c0e:	682b      	ldr	r3, [r5, #0]
 8011c10:	199b      	adds	r3, r3, r6
 8011c12:	602b      	str	r3, [r5, #0]
 8011c14:	e7d0      	b.n	8011bb8 <_sfread_r+0x16>

08011c16 <__sprint_r>:
 8011c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c18:	6893      	ldr	r3, [r2, #8]
 8011c1a:	b085      	sub	sp, #20
 8011c1c:	9001      	str	r0, [sp, #4]
 8011c1e:	000d      	movs	r5, r1
 8011c20:	0014      	movs	r4, r2
 8011c22:	1e18      	subs	r0, r3, #0
 8011c24:	d018      	beq.n	8011c58 <__sprint_r+0x42>
 8011c26:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011c28:	049b      	lsls	r3, r3, #18
 8011c2a:	d524      	bpl.n	8011c76 <__sprint_r+0x60>
 8011c2c:	6817      	ldr	r7, [r2, #0]
 8011c2e:	2600      	movs	r6, #0
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	9302      	str	r3, [sp, #8]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	9300      	str	r3, [sp, #0]
 8011c38:	089b      	lsrs	r3, r3, #2
 8011c3a:	9303      	str	r3, [sp, #12]
 8011c3c:	9b03      	ldr	r3, [sp, #12]
 8011c3e:	42b3      	cmp	r3, r6
 8011c40:	dc0e      	bgt.n	8011c60 <__sprint_r+0x4a>
 8011c42:	2203      	movs	r2, #3
 8011c44:	9b00      	ldr	r3, [sp, #0]
 8011c46:	68a0      	ldr	r0, [r4, #8]
 8011c48:	4393      	bics	r3, r2
 8011c4a:	1ac0      	subs	r0, r0, r3
 8011c4c:	60a0      	str	r0, [r4, #8]
 8011c4e:	3708      	adds	r7, #8
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d1ec      	bne.n	8011c2e <__sprint_r+0x18>
 8011c54:	2300      	movs	r3, #0
 8011c56:	60a3      	str	r3, [r4, #8]
 8011c58:	2300      	movs	r3, #0
 8011c5a:	6063      	str	r3, [r4, #4]
 8011c5c:	b005      	add	sp, #20
 8011c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c60:	9902      	ldr	r1, [sp, #8]
 8011c62:	00b3      	lsls	r3, r6, #2
 8011c64:	58c9      	ldr	r1, [r1, r3]
 8011c66:	002a      	movs	r2, r5
 8011c68:	9801      	ldr	r0, [sp, #4]
 8011c6a:	f000 ff59 	bl	8012b20 <_fputwc_r>
 8011c6e:	1c43      	adds	r3, r0, #1
 8011c70:	d0f0      	beq.n	8011c54 <__sprint_r+0x3e>
 8011c72:	3601      	adds	r6, #1
 8011c74:	e7e2      	b.n	8011c3c <__sprint_r+0x26>
 8011c76:	9801      	ldr	r0, [sp, #4]
 8011c78:	f000 fd14 	bl	80126a4 <__sfvwrite_r>
 8011c7c:	e7ea      	b.n	8011c54 <__sprint_r+0x3e>
	...

08011c80 <_vfiprintf_r>:
 8011c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c82:	b0c1      	sub	sp, #260	; 0x104
 8011c84:	001c      	movs	r4, r3
 8011c86:	001f      	movs	r7, r3
 8011c88:	9006      	str	r0, [sp, #24]
 8011c8a:	9103      	str	r1, [sp, #12]
 8011c8c:	9207      	str	r2, [sp, #28]
 8011c8e:	2800      	cmp	r0, #0
 8011c90:	d004      	beq.n	8011c9c <_vfiprintf_r+0x1c>
 8011c92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d101      	bne.n	8011c9c <_vfiprintf_r+0x1c>
 8011c98:	f7fa fa98 	bl	800c1cc <__sinit>
 8011c9c:	9b03      	ldr	r3, [sp, #12]
 8011c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ca0:	07db      	lsls	r3, r3, #31
 8011ca2:	d407      	bmi.n	8011cb4 <_vfiprintf_r+0x34>
 8011ca4:	9b03      	ldr	r3, [sp, #12]
 8011ca6:	899b      	ldrh	r3, [r3, #12]
 8011ca8:	059b      	lsls	r3, r3, #22
 8011caa:	d403      	bmi.n	8011cb4 <_vfiprintf_r+0x34>
 8011cac:	9b03      	ldr	r3, [sp, #12]
 8011cae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011cb0:	f7fa fc62 	bl	800c578 <__retarget_lock_acquire_recursive>
 8011cb4:	9b03      	ldr	r3, [sp, #12]
 8011cb6:	220c      	movs	r2, #12
 8011cb8:	5e9a      	ldrsh	r2, [r3, r2]
 8011cba:	2380      	movs	r3, #128	; 0x80
 8011cbc:	019b      	lsls	r3, r3, #6
 8011cbe:	421a      	tst	r2, r3
 8011cc0:	d107      	bne.n	8011cd2 <_vfiprintf_r+0x52>
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	9a03      	ldr	r2, [sp, #12]
 8011cc6:	8193      	strh	r3, [r2, #12]
 8011cc8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011cca:	4aa3      	ldr	r2, [pc, #652]	; (8011f58 <_vfiprintf_r+0x2d8>)
 8011ccc:	4013      	ands	r3, r2
 8011cce:	9a03      	ldr	r2, [sp, #12]
 8011cd0:	6653      	str	r3, [r2, #100]	; 0x64
 8011cd2:	9b03      	ldr	r3, [sp, #12]
 8011cd4:	899b      	ldrh	r3, [r3, #12]
 8011cd6:	071b      	lsls	r3, r3, #28
 8011cd8:	d503      	bpl.n	8011ce2 <_vfiprintf_r+0x62>
 8011cda:	9b03      	ldr	r3, [sp, #12]
 8011cdc:	691b      	ldr	r3, [r3, #16]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d118      	bne.n	8011d14 <_vfiprintf_r+0x94>
 8011ce2:	9903      	ldr	r1, [sp, #12]
 8011ce4:	9806      	ldr	r0, [sp, #24]
 8011ce6:	f000 fe79 	bl	80129dc <__swsetup_r>
 8011cea:	2800      	cmp	r0, #0
 8011cec:	d012      	beq.n	8011d14 <_vfiprintf_r+0x94>
 8011cee:	9b03      	ldr	r3, [sp, #12]
 8011cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cf2:	07db      	lsls	r3, r3, #31
 8011cf4:	d505      	bpl.n	8011d02 <_vfiprintf_r+0x82>
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	425b      	negs	r3, r3
 8011cfa:	9308      	str	r3, [sp, #32]
 8011cfc:	9808      	ldr	r0, [sp, #32]
 8011cfe:	b041      	add	sp, #260	; 0x104
 8011d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d02:	9b03      	ldr	r3, [sp, #12]
 8011d04:	899b      	ldrh	r3, [r3, #12]
 8011d06:	059b      	lsls	r3, r3, #22
 8011d08:	d4f5      	bmi.n	8011cf6 <_vfiprintf_r+0x76>
 8011d0a:	9b03      	ldr	r3, [sp, #12]
 8011d0c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011d0e:	f7fa fc34 	bl	800c57a <__retarget_lock_release_recursive>
 8011d12:	e7f0      	b.n	8011cf6 <_vfiprintf_r+0x76>
 8011d14:	221a      	movs	r2, #26
 8011d16:	9b03      	ldr	r3, [sp, #12]
 8011d18:	899b      	ldrh	r3, [r3, #12]
 8011d1a:	401a      	ands	r2, r3
 8011d1c:	2a0a      	cmp	r2, #10
 8011d1e:	d116      	bne.n	8011d4e <_vfiprintf_r+0xce>
 8011d20:	9a03      	ldr	r2, [sp, #12]
 8011d22:	210e      	movs	r1, #14
 8011d24:	5e52      	ldrsh	r2, [r2, r1]
 8011d26:	2a00      	cmp	r2, #0
 8011d28:	db11      	blt.n	8011d4e <_vfiprintf_r+0xce>
 8011d2a:	9a03      	ldr	r2, [sp, #12]
 8011d2c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011d2e:	07d2      	lsls	r2, r2, #31
 8011d30:	d405      	bmi.n	8011d3e <_vfiprintf_r+0xbe>
 8011d32:	059b      	lsls	r3, r3, #22
 8011d34:	d403      	bmi.n	8011d3e <_vfiprintf_r+0xbe>
 8011d36:	9b03      	ldr	r3, [sp, #12]
 8011d38:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011d3a:	f7fa fc1e 	bl	800c57a <__retarget_lock_release_recursive>
 8011d3e:	0023      	movs	r3, r4
 8011d40:	9a07      	ldr	r2, [sp, #28]
 8011d42:	9903      	ldr	r1, [sp, #12]
 8011d44:	9806      	ldr	r0, [sp, #24]
 8011d46:	f000 fc69 	bl	801261c <__sbprintf>
 8011d4a:	9008      	str	r0, [sp, #32]
 8011d4c:	e7d6      	b.n	8011cfc <_vfiprintf_r+0x7c>
 8011d4e:	2300      	movs	r3, #0
 8011d50:	ad17      	add	r5, sp, #92	; 0x5c
 8011d52:	9514      	str	r5, [sp, #80]	; 0x50
 8011d54:	9316      	str	r3, [sp, #88]	; 0x58
 8011d56:	9315      	str	r3, [sp, #84]	; 0x54
 8011d58:	930c      	str	r3, [sp, #48]	; 0x30
 8011d5a:	930d      	str	r3, [sp, #52]	; 0x34
 8011d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8011d5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d60:	9308      	str	r3, [sp, #32]
 8011d62:	9c07      	ldr	r4, [sp, #28]
 8011d64:	7823      	ldrb	r3, [r4, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d002      	beq.n	8011d70 <_vfiprintf_r+0xf0>
 8011d6a:	2b25      	cmp	r3, #37	; 0x25
 8011d6c:	d000      	beq.n	8011d70 <_vfiprintf_r+0xf0>
 8011d6e:	e08d      	b.n	8011e8c <_vfiprintf_r+0x20c>
 8011d70:	9b07      	ldr	r3, [sp, #28]
 8011d72:	1ae6      	subs	r6, r4, r3
 8011d74:	429c      	cmp	r4, r3
 8011d76:	d016      	beq.n	8011da6 <_vfiprintf_r+0x126>
 8011d78:	602b      	str	r3, [r5, #0]
 8011d7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011d7c:	606e      	str	r6, [r5, #4]
 8011d7e:	199b      	adds	r3, r3, r6
 8011d80:	9316      	str	r3, [sp, #88]	; 0x58
 8011d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d84:	3508      	adds	r5, #8
 8011d86:	3301      	adds	r3, #1
 8011d88:	9315      	str	r3, [sp, #84]	; 0x54
 8011d8a:	2b07      	cmp	r3, #7
 8011d8c:	dd08      	ble.n	8011da0 <_vfiprintf_r+0x120>
 8011d8e:	9903      	ldr	r1, [sp, #12]
 8011d90:	9806      	ldr	r0, [sp, #24]
 8011d92:	aa14      	add	r2, sp, #80	; 0x50
 8011d94:	f7ff ff3f 	bl	8011c16 <__sprint_r>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d000      	beq.n	8011d9e <_vfiprintf_r+0x11e>
 8011d9c:	e3d9      	b.n	8012552 <_vfiprintf_r+0x8d2>
 8011d9e:	ad17      	add	r5, sp, #92	; 0x5c
 8011da0:	9b08      	ldr	r3, [sp, #32]
 8011da2:	199b      	adds	r3, r3, r6
 8011da4:	9308      	str	r3, [sp, #32]
 8011da6:	7823      	ldrb	r3, [r4, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d101      	bne.n	8011db0 <_vfiprintf_r+0x130>
 8011dac:	f000 fbf6 	bl	801259c <_vfiprintf_r+0x91c>
 8011db0:	2200      	movs	r2, #0
 8011db2:	a912      	add	r1, sp, #72	; 0x48
 8011db4:	70ca      	strb	r2, [r1, #3]
 8011db6:	2101      	movs	r1, #1
 8011db8:	1c63      	adds	r3, r4, #1
 8011dba:	0014      	movs	r4, r2
 8011dbc:	4249      	negs	r1, r1
 8011dbe:	9105      	str	r1, [sp, #20]
 8011dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8011dc2:	1c5a      	adds	r2, r3, #1
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	9207      	str	r2, [sp, #28]
 8011dc8:	0018      	movs	r0, r3
 8011dca:	3820      	subs	r0, #32
 8011dcc:	285a      	cmp	r0, #90	; 0x5a
 8011dce:	d900      	bls.n	8011dd2 <_vfiprintf_r+0x152>
 8011dd0:	e362      	b.n	8012498 <_vfiprintf_r+0x818>
 8011dd2:	f7ee f9a9 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011dd6:	0078      	.short	0x0078
 8011dd8:	03610361 	.word	0x03610361
 8011ddc:	03610081 	.word	0x03610081
 8011de0:	03610361 	.word	0x03610361
 8011de4:	0361005d 	.word	0x0361005d
 8011de8:	00830361 	.word	0x00830361
 8011dec:	0361008b 	.word	0x0361008b
 8011df0:	008f0089 	.word	0x008f0089
 8011df4:	00ad0361 	.word	0x00ad0361
 8011df8:	00af00af 	.word	0x00af00af
 8011dfc:	00af00af 	.word	0x00af00af
 8011e00:	00af00af 	.word	0x00af00af
 8011e04:	00af00af 	.word	0x00af00af
 8011e08:	036100af 	.word	0x036100af
 8011e0c:	03610361 	.word	0x03610361
 8011e10:	03610361 	.word	0x03610361
 8011e14:	03610361 	.word	0x03610361
 8011e18:	03610361 	.word	0x03610361
 8011e1c:	00e600da 	.word	0x00e600da
 8011e20:	03610361 	.word	0x03610361
 8011e24:	03610361 	.word	0x03610361
 8011e28:	03610361 	.word	0x03610361
 8011e2c:	03610361 	.word	0x03610361
 8011e30:	03610361 	.word	0x03610361
 8011e34:	03610143 	.word	0x03610143
 8011e38:	03610361 	.word	0x03610361
 8011e3c:	03610182 	.word	0x03610182
 8011e40:	0361027c 	.word	0x0361027c
 8011e44:	02ae0361 	.word	0x02ae0361
 8011e48:	03610361 	.word	0x03610361
 8011e4c:	03610361 	.word	0x03610361
 8011e50:	03610361 	.word	0x03610361
 8011e54:	03610361 	.word	0x03610361
 8011e58:	03610361 	.word	0x03610361
 8011e5c:	00e800da 	.word	0x00e800da
 8011e60:	03610361 	.word	0x03610361
 8011e64:	00c30361 	.word	0x00c30361
 8011e68:	00d600e8 	.word	0x00d600e8
 8011e6c:	00cf0361 	.word	0x00cf0361
 8011e70:	01260361 	.word	0x01260361
 8011e74:	01740145 	.word	0x01740145
 8011e78:	036100d6 	.word	0x036100d6
 8011e7c:	007f0182 	.word	0x007f0182
 8011e80:	0361027e 	.word	0x0361027e
 8011e84:	02cd0361 	.word	0x02cd0361
 8011e88:	007f0361 	.word	0x007f0361
 8011e8c:	3401      	adds	r4, #1
 8011e8e:	e769      	b.n	8011d64 <_vfiprintf_r+0xe4>
 8011e90:	9806      	ldr	r0, [sp, #24]
 8011e92:	f7fe fa47 	bl	8010324 <_localeconv_r>
 8011e96:	6843      	ldr	r3, [r0, #4]
 8011e98:	0018      	movs	r0, r3
 8011e9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e9c:	f7ee f932 	bl	8000104 <strlen>
 8011ea0:	900e      	str	r0, [sp, #56]	; 0x38
 8011ea2:	9806      	ldr	r0, [sp, #24]
 8011ea4:	f7fe fa3e 	bl	8010324 <_localeconv_r>
 8011ea8:	6883      	ldr	r3, [r0, #8]
 8011eaa:	930d      	str	r3, [sp, #52]	; 0x34
 8011eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d010      	beq.n	8011ed4 <_vfiprintf_r+0x254>
 8011eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00d      	beq.n	8011ed4 <_vfiprintf_r+0x254>
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00a      	beq.n	8011ed4 <_vfiprintf_r+0x254>
 8011ebe:	2380      	movs	r3, #128	; 0x80
 8011ec0:	00db      	lsls	r3, r3, #3
 8011ec2:	431c      	orrs	r4, r3
 8011ec4:	e006      	b.n	8011ed4 <_vfiprintf_r+0x254>
 8011ec6:	ab12      	add	r3, sp, #72	; 0x48
 8011ec8:	78da      	ldrb	r2, [r3, #3]
 8011eca:	3303      	adds	r3, #3
 8011ecc:	2a00      	cmp	r2, #0
 8011ece:	d101      	bne.n	8011ed4 <_vfiprintf_r+0x254>
 8011ed0:	3220      	adds	r2, #32
 8011ed2:	701a      	strb	r2, [r3, #0]
 8011ed4:	9b07      	ldr	r3, [sp, #28]
 8011ed6:	e774      	b.n	8011dc2 <_vfiprintf_r+0x142>
 8011ed8:	2301      	movs	r3, #1
 8011eda:	e7f2      	b.n	8011ec2 <_vfiprintf_r+0x242>
 8011edc:	cf08      	ldmia	r7!, {r3}
 8011ede:	9309      	str	r3, [sp, #36]	; 0x24
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	daf7      	bge.n	8011ed4 <_vfiprintf_r+0x254>
 8011ee4:	425b      	negs	r3, r3
 8011ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ee8:	2304      	movs	r3, #4
 8011eea:	e7ea      	b.n	8011ec2 <_vfiprintf_r+0x242>
 8011eec:	222b      	movs	r2, #43	; 0x2b
 8011eee:	ab12      	add	r3, sp, #72	; 0x48
 8011ef0:	70da      	strb	r2, [r3, #3]
 8011ef2:	e7ef      	b.n	8011ed4 <_vfiprintf_r+0x254>
 8011ef4:	9b07      	ldr	r3, [sp, #28]
 8011ef6:	1c5a      	adds	r2, r3, #1
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	2b2a      	cmp	r3, #42	; 0x2a
 8011efc:	d00f      	beq.n	8011f1e <_vfiprintf_r+0x29e>
 8011efe:	2100      	movs	r1, #0
 8011f00:	9105      	str	r1, [sp, #20]
 8011f02:	0019      	movs	r1, r3
 8011f04:	3930      	subs	r1, #48	; 0x30
 8011f06:	9207      	str	r2, [sp, #28]
 8011f08:	2909      	cmp	r1, #9
 8011f0a:	d900      	bls.n	8011f0e <_vfiprintf_r+0x28e>
 8011f0c:	e75c      	b.n	8011dc8 <_vfiprintf_r+0x148>
 8011f0e:	200a      	movs	r0, #10
 8011f10:	9b05      	ldr	r3, [sp, #20]
 8011f12:	4343      	muls	r3, r0
 8011f14:	185b      	adds	r3, r3, r1
 8011f16:	9305      	str	r3, [sp, #20]
 8011f18:	7813      	ldrb	r3, [r2, #0]
 8011f1a:	3201      	adds	r2, #1
 8011f1c:	e7f1      	b.n	8011f02 <_vfiprintf_r+0x282>
 8011f1e:	cf08      	ldmia	r7!, {r3}
 8011f20:	9305      	str	r3, [sp, #20]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	da02      	bge.n	8011f2c <_vfiprintf_r+0x2ac>
 8011f26:	2301      	movs	r3, #1
 8011f28:	425b      	negs	r3, r3
 8011f2a:	9305      	str	r3, [sp, #20]
 8011f2c:	9207      	str	r2, [sp, #28]
 8011f2e:	e7d1      	b.n	8011ed4 <_vfiprintf_r+0x254>
 8011f30:	2380      	movs	r3, #128	; 0x80
 8011f32:	e7c6      	b.n	8011ec2 <_vfiprintf_r+0x242>
 8011f34:	2100      	movs	r1, #0
 8011f36:	9a07      	ldr	r2, [sp, #28]
 8011f38:	9109      	str	r1, [sp, #36]	; 0x24
 8011f3a:	200a      	movs	r0, #10
 8011f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f3e:	3b30      	subs	r3, #48	; 0x30
 8011f40:	4341      	muls	r1, r0
 8011f42:	185b      	adds	r3, r3, r1
 8011f44:	9309      	str	r3, [sp, #36]	; 0x24
 8011f46:	0013      	movs	r3, r2
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	3201      	adds	r2, #1
 8011f4c:	0019      	movs	r1, r3
 8011f4e:	3930      	subs	r1, #48	; 0x30
 8011f50:	9207      	str	r2, [sp, #28]
 8011f52:	2909      	cmp	r1, #9
 8011f54:	d9f1      	bls.n	8011f3a <_vfiprintf_r+0x2ba>
 8011f56:	e737      	b.n	8011dc8 <_vfiprintf_r+0x148>
 8011f58:	ffffdfff 	.word	0xffffdfff
 8011f5c:	9b07      	ldr	r3, [sp, #28]
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	2b68      	cmp	r3, #104	; 0x68
 8011f62:	d105      	bne.n	8011f70 <_vfiprintf_r+0x2f0>
 8011f64:	9b07      	ldr	r3, [sp, #28]
 8011f66:	3301      	adds	r3, #1
 8011f68:	9307      	str	r3, [sp, #28]
 8011f6a:	2380      	movs	r3, #128	; 0x80
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	e7a8      	b.n	8011ec2 <_vfiprintf_r+0x242>
 8011f70:	2340      	movs	r3, #64	; 0x40
 8011f72:	e7a6      	b.n	8011ec2 <_vfiprintf_r+0x242>
 8011f74:	9b07      	ldr	r3, [sp, #28]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	2b6c      	cmp	r3, #108	; 0x6c
 8011f7a:	d104      	bne.n	8011f86 <_vfiprintf_r+0x306>
 8011f7c:	9b07      	ldr	r3, [sp, #28]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	9307      	str	r3, [sp, #28]
 8011f82:	2320      	movs	r3, #32
 8011f84:	e79d      	b.n	8011ec2 <_vfiprintf_r+0x242>
 8011f86:	2310      	movs	r3, #16
 8011f88:	e79b      	b.n	8011ec2 <_vfiprintf_r+0x242>
 8011f8a:	003a      	movs	r2, r7
 8011f8c:	ca08      	ldmia	r2!, {r3}
 8011f8e:	ae27      	add	r6, sp, #156	; 0x9c
 8011f90:	7033      	strb	r3, [r6, #0]
 8011f92:	2300      	movs	r3, #0
 8011f94:	9204      	str	r2, [sp, #16]
 8011f96:	aa12      	add	r2, sp, #72	; 0x48
 8011f98:	70d3      	strb	r3, [r2, #3]
 8011f9a:	2201      	movs	r2, #1
 8011f9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f9e:	9205      	str	r2, [sp, #20]
 8011fa0:	e0b0      	b.n	8012104 <_vfiprintf_r+0x484>
 8011fa2:	2310      	movs	r3, #16
 8011fa4:	431c      	orrs	r4, r3
 8011fa6:	06a3      	lsls	r3, r4, #26
 8011fa8:	d52a      	bpl.n	8012000 <_vfiprintf_r+0x380>
 8011faa:	2307      	movs	r3, #7
 8011fac:	3707      	adds	r7, #7
 8011fae:	439f      	bics	r7, r3
 8011fb0:	0039      	movs	r1, r7
 8011fb2:	c90c      	ldmia	r1!, {r2, r3}
 8011fb4:	9200      	str	r2, [sp, #0]
 8011fb6:	9301      	str	r3, [sp, #4]
 8011fb8:	9104      	str	r1, [sp, #16]
 8011fba:	9a01      	ldr	r2, [sp, #4]
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	2a00      	cmp	r2, #0
 8011fc0:	da09      	bge.n	8011fd6 <_vfiprintf_r+0x356>
 8011fc2:	9e00      	ldr	r6, [sp, #0]
 8011fc4:	9f01      	ldr	r7, [sp, #4]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	4271      	negs	r1, r6
 8011fca:	41ba      	sbcs	r2, r7
 8011fcc:	9100      	str	r1, [sp, #0]
 8011fce:	9201      	str	r2, [sp, #4]
 8011fd0:	212d      	movs	r1, #45	; 0x2d
 8011fd2:	aa12      	add	r2, sp, #72	; 0x48
 8011fd4:	70d1      	strb	r1, [r2, #3]
 8011fd6:	9901      	ldr	r1, [sp, #4]
 8011fd8:	9a00      	ldr	r2, [sp, #0]
 8011fda:	430a      	orrs	r2, r1
 8011fdc:	9905      	ldr	r1, [sp, #20]
 8011fde:	3101      	adds	r1, #1
 8011fe0:	d100      	bne.n	8011fe4 <_vfiprintf_r+0x364>
 8011fe2:	e2e9      	b.n	80125b8 <_vfiprintf_r+0x938>
 8011fe4:	2180      	movs	r1, #128	; 0x80
 8011fe6:	0027      	movs	r7, r4
 8011fe8:	438f      	bics	r7, r1
 8011fea:	2a00      	cmp	r2, #0
 8011fec:	d000      	beq.n	8011ff0 <_vfiprintf_r+0x370>
 8011fee:	e2e7      	b.n	80125c0 <_vfiprintf_r+0x940>
 8011ff0:	9a05      	ldr	r2, [sp, #20]
 8011ff2:	2a00      	cmp	r2, #0
 8011ff4:	d100      	bne.n	8011ff8 <_vfiprintf_r+0x378>
 8011ff6:	e243      	b.n	8012480 <_vfiprintf_r+0x800>
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d000      	beq.n	8011ffe <_vfiprintf_r+0x37e>
 8011ffc:	e2e3      	b.n	80125c6 <_vfiprintf_r+0x946>
 8011ffe:	e1e7      	b.n	80123d0 <_vfiprintf_r+0x750>
 8012000:	003a      	movs	r2, r7
 8012002:	ca08      	ldmia	r2!, {r3}
 8012004:	9204      	str	r2, [sp, #16]
 8012006:	06e2      	lsls	r2, r4, #27
 8012008:	d503      	bpl.n	8012012 <_vfiprintf_r+0x392>
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	17db      	asrs	r3, r3, #31
 801200e:	9301      	str	r3, [sp, #4]
 8012010:	e7d3      	b.n	8011fba <_vfiprintf_r+0x33a>
 8012012:	0662      	lsls	r2, r4, #25
 8012014:	d501      	bpl.n	801201a <_vfiprintf_r+0x39a>
 8012016:	b21b      	sxth	r3, r3
 8012018:	e7f7      	b.n	801200a <_vfiprintf_r+0x38a>
 801201a:	05a2      	lsls	r2, r4, #22
 801201c:	d5f5      	bpl.n	801200a <_vfiprintf_r+0x38a>
 801201e:	b25b      	sxtb	r3, r3
 8012020:	e7f3      	b.n	801200a <_vfiprintf_r+0x38a>
 8012022:	1d3b      	adds	r3, r7, #4
 8012024:	9304      	str	r3, [sp, #16]
 8012026:	06a3      	lsls	r3, r4, #26
 8012028:	d506      	bpl.n	8012038 <_vfiprintf_r+0x3b8>
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	9a08      	ldr	r2, [sp, #32]
 801202e:	601a      	str	r2, [r3, #0]
 8012030:	17d2      	asrs	r2, r2, #31
 8012032:	605a      	str	r2, [r3, #4]
 8012034:	9f04      	ldr	r7, [sp, #16]
 8012036:	e694      	b.n	8011d62 <_vfiprintf_r+0xe2>
 8012038:	06e3      	lsls	r3, r4, #27
 801203a:	d503      	bpl.n	8012044 <_vfiprintf_r+0x3c4>
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	9a08      	ldr	r2, [sp, #32]
 8012040:	601a      	str	r2, [r3, #0]
 8012042:	e7f7      	b.n	8012034 <_vfiprintf_r+0x3b4>
 8012044:	0663      	lsls	r3, r4, #25
 8012046:	d503      	bpl.n	8012050 <_vfiprintf_r+0x3d0>
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	9a08      	ldr	r2, [sp, #32]
 801204c:	801a      	strh	r2, [r3, #0]
 801204e:	e7f1      	b.n	8012034 <_vfiprintf_r+0x3b4>
 8012050:	05a4      	lsls	r4, r4, #22
 8012052:	d5f3      	bpl.n	801203c <_vfiprintf_r+0x3bc>
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	9a08      	ldr	r2, [sp, #32]
 8012058:	701a      	strb	r2, [r3, #0]
 801205a:	e7eb      	b.n	8012034 <_vfiprintf_r+0x3b4>
 801205c:	2310      	movs	r3, #16
 801205e:	431c      	orrs	r4, r3
 8012060:	2320      	movs	r3, #32
 8012062:	0020      	movs	r0, r4
 8012064:	4018      	ands	r0, r3
 8012066:	421c      	tst	r4, r3
 8012068:	d00d      	beq.n	8012086 <_vfiprintf_r+0x406>
 801206a:	3b19      	subs	r3, #25
 801206c:	3707      	adds	r7, #7
 801206e:	439f      	bics	r7, r3
 8012070:	0039      	movs	r1, r7
 8012072:	c90c      	ldmia	r1!, {r2, r3}
 8012074:	9200      	str	r2, [sp, #0]
 8012076:	9301      	str	r3, [sp, #4]
 8012078:	9104      	str	r1, [sp, #16]
 801207a:	4bcc      	ldr	r3, [pc, #816]	; (80123ac <_vfiprintf_r+0x72c>)
 801207c:	401c      	ands	r4, r3
 801207e:	2300      	movs	r3, #0
 8012080:	2100      	movs	r1, #0
 8012082:	aa12      	add	r2, sp, #72	; 0x48
 8012084:	e7a6      	b.n	8011fd4 <_vfiprintf_r+0x354>
 8012086:	003a      	movs	r2, r7
 8012088:	ca08      	ldmia	r2!, {r3}
 801208a:	0021      	movs	r1, r4
 801208c:	9204      	str	r2, [sp, #16]
 801208e:	2210      	movs	r2, #16
 8012090:	4011      	ands	r1, r2
 8012092:	4214      	tst	r4, r2
 8012094:	d002      	beq.n	801209c <_vfiprintf_r+0x41c>
 8012096:	9300      	str	r3, [sp, #0]
 8012098:	9001      	str	r0, [sp, #4]
 801209a:	e7ee      	b.n	801207a <_vfiprintf_r+0x3fa>
 801209c:	2240      	movs	r2, #64	; 0x40
 801209e:	0020      	movs	r0, r4
 80120a0:	4010      	ands	r0, r2
 80120a2:	4214      	tst	r4, r2
 80120a4:	d003      	beq.n	80120ae <_vfiprintf_r+0x42e>
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	9300      	str	r3, [sp, #0]
 80120aa:	9101      	str	r1, [sp, #4]
 80120ac:	e7e5      	b.n	801207a <_vfiprintf_r+0x3fa>
 80120ae:	2280      	movs	r2, #128	; 0x80
 80120b0:	0021      	movs	r1, r4
 80120b2:	0092      	lsls	r2, r2, #2
 80120b4:	4011      	ands	r1, r2
 80120b6:	4214      	tst	r4, r2
 80120b8:	d0f6      	beq.n	80120a8 <_vfiprintf_r+0x428>
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	e7eb      	b.n	8012096 <_vfiprintf_r+0x416>
 80120be:	003b      	movs	r3, r7
 80120c0:	cb04      	ldmia	r3!, {r2}
 80120c2:	49bb      	ldr	r1, [pc, #748]	; (80123b0 <_vfiprintf_r+0x730>)
 80120c4:	9304      	str	r3, [sp, #16]
 80120c6:	2300      	movs	r3, #0
 80120c8:	9200      	str	r2, [sp, #0]
 80120ca:	aa13      	add	r2, sp, #76	; 0x4c
 80120cc:	8011      	strh	r1, [r2, #0]
 80120ce:	4ab9      	ldr	r2, [pc, #740]	; (80123b4 <_vfiprintf_r+0x734>)
 80120d0:	9301      	str	r3, [sp, #4]
 80120d2:	3302      	adds	r3, #2
 80120d4:	431c      	orrs	r4, r3
 80120d6:	920c      	str	r2, [sp, #48]	; 0x30
 80120d8:	e7d2      	b.n	8012080 <_vfiprintf_r+0x400>
 80120da:	003b      	movs	r3, r7
 80120dc:	2700      	movs	r7, #0
 80120de:	cb40      	ldmia	r3!, {r6}
 80120e0:	9304      	str	r3, [sp, #16]
 80120e2:	ab12      	add	r3, sp, #72	; 0x48
 80120e4:	70df      	strb	r7, [r3, #3]
 80120e6:	9b05      	ldr	r3, [sp, #20]
 80120e8:	3301      	adds	r3, #1
 80120ea:	d100      	bne.n	80120ee <_vfiprintf_r+0x46e>
 80120ec:	e0ea      	b.n	80122c4 <_vfiprintf_r+0x644>
 80120ee:	0039      	movs	r1, r7
 80120f0:	0030      	movs	r0, r6
 80120f2:	9a05      	ldr	r2, [sp, #20]
 80120f4:	f7fe f92e 	bl	8010354 <memchr>
 80120f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80120fa:	42b8      	cmp	r0, r7
 80120fc:	d002      	beq.n	8012104 <_vfiprintf_r+0x484>
 80120fe:	1b83      	subs	r3, r0, r6
 8012100:	9305      	str	r3, [sp, #20]
 8012102:	970b      	str	r7, [sp, #44]	; 0x2c
 8012104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012106:	9a05      	ldr	r2, [sp, #20]
 8012108:	930a      	str	r3, [sp, #40]	; 0x28
 801210a:	4293      	cmp	r3, r2
 801210c:	da00      	bge.n	8012110 <_vfiprintf_r+0x490>
 801210e:	920a      	str	r2, [sp, #40]	; 0x28
 8012110:	ab12      	add	r3, sp, #72	; 0x48
 8012112:	3303      	adds	r3, #3
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	1e5a      	subs	r2, r3, #1
 8012118:	4193      	sbcs	r3, r2
 801211a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801211c:	18d3      	adds	r3, r2, r3
 801211e:	930a      	str	r3, [sp, #40]	; 0x28
 8012120:	0022      	movs	r2, r4
 8012122:	2302      	movs	r3, #2
 8012124:	401a      	ands	r2, r3
 8012126:	9210      	str	r2, [sp, #64]	; 0x40
 8012128:	421c      	tst	r4, r3
 801212a:	d002      	beq.n	8012132 <_vfiprintf_r+0x4b2>
 801212c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801212e:	3302      	adds	r3, #2
 8012130:	930a      	str	r3, [sp, #40]	; 0x28
 8012132:	2384      	movs	r3, #132	; 0x84
 8012134:	0022      	movs	r2, r4
 8012136:	401a      	ands	r2, r3
 8012138:	9211      	str	r2, [sp, #68]	; 0x44
 801213a:	421c      	tst	r4, r3
 801213c:	d11e      	bne.n	801217c <_vfiprintf_r+0x4fc>
 801213e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012142:	1a9f      	subs	r7, r3, r2
 8012144:	2f00      	cmp	r7, #0
 8012146:	dd19      	ble.n	801217c <_vfiprintf_r+0x4fc>
 8012148:	0029      	movs	r1, r5
 801214a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801214c:	489a      	ldr	r0, [pc, #616]	; (80123b8 <_vfiprintf_r+0x738>)
 801214e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012150:	3301      	adds	r3, #1
 8012152:	3108      	adds	r1, #8
 8012154:	6028      	str	r0, [r5, #0]
 8012156:	2f10      	cmp	r7, #16
 8012158:	dd00      	ble.n	801215c <_vfiprintf_r+0x4dc>
 801215a:	e1a7      	b.n	80124ac <_vfiprintf_r+0x82c>
 801215c:	606f      	str	r7, [r5, #4]
 801215e:	18bf      	adds	r7, r7, r2
 8012160:	000d      	movs	r5, r1
 8012162:	9716      	str	r7, [sp, #88]	; 0x58
 8012164:	9315      	str	r3, [sp, #84]	; 0x54
 8012166:	2b07      	cmp	r3, #7
 8012168:	dd08      	ble.n	801217c <_vfiprintf_r+0x4fc>
 801216a:	9903      	ldr	r1, [sp, #12]
 801216c:	9806      	ldr	r0, [sp, #24]
 801216e:	aa14      	add	r2, sp, #80	; 0x50
 8012170:	f7ff fd51 	bl	8011c16 <__sprint_r>
 8012174:	2800      	cmp	r0, #0
 8012176:	d000      	beq.n	801217a <_vfiprintf_r+0x4fa>
 8012178:	e1eb      	b.n	8012552 <_vfiprintf_r+0x8d2>
 801217a:	ad17      	add	r5, sp, #92	; 0x5c
 801217c:	a912      	add	r1, sp, #72	; 0x48
 801217e:	78c8      	ldrb	r0, [r1, #3]
 8012180:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012182:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012184:	3103      	adds	r1, #3
 8012186:	2800      	cmp	r0, #0
 8012188:	d012      	beq.n	80121b0 <_vfiprintf_r+0x530>
 801218a:	6029      	str	r1, [r5, #0]
 801218c:	2101      	movs	r1, #1
 801218e:	3301      	adds	r3, #1
 8012190:	1852      	adds	r2, r2, r1
 8012192:	6069      	str	r1, [r5, #4]
 8012194:	9216      	str	r2, [sp, #88]	; 0x58
 8012196:	9315      	str	r3, [sp, #84]	; 0x54
 8012198:	3508      	adds	r5, #8
 801219a:	2b07      	cmp	r3, #7
 801219c:	dd08      	ble.n	80121b0 <_vfiprintf_r+0x530>
 801219e:	9903      	ldr	r1, [sp, #12]
 80121a0:	9806      	ldr	r0, [sp, #24]
 80121a2:	aa14      	add	r2, sp, #80	; 0x50
 80121a4:	f7ff fd37 	bl	8011c16 <__sprint_r>
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d000      	beq.n	80121ae <_vfiprintf_r+0x52e>
 80121ac:	e1d1      	b.n	8012552 <_vfiprintf_r+0x8d2>
 80121ae:	ad17      	add	r5, sp, #92	; 0x5c
 80121b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80121b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80121b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121b6:	2900      	cmp	r1, #0
 80121b8:	d013      	beq.n	80121e2 <_vfiprintf_r+0x562>
 80121ba:	a913      	add	r1, sp, #76	; 0x4c
 80121bc:	6029      	str	r1, [r5, #0]
 80121be:	2102      	movs	r1, #2
 80121c0:	3301      	adds	r3, #1
 80121c2:	1852      	adds	r2, r2, r1
 80121c4:	6069      	str	r1, [r5, #4]
 80121c6:	9216      	str	r2, [sp, #88]	; 0x58
 80121c8:	9315      	str	r3, [sp, #84]	; 0x54
 80121ca:	3508      	adds	r5, #8
 80121cc:	2b07      	cmp	r3, #7
 80121ce:	dd08      	ble.n	80121e2 <_vfiprintf_r+0x562>
 80121d0:	9903      	ldr	r1, [sp, #12]
 80121d2:	9806      	ldr	r0, [sp, #24]
 80121d4:	aa14      	add	r2, sp, #80	; 0x50
 80121d6:	f7ff fd1e 	bl	8011c16 <__sprint_r>
 80121da:	2800      	cmp	r0, #0
 80121dc:	d000      	beq.n	80121e0 <_vfiprintf_r+0x560>
 80121de:	e1b8      	b.n	8012552 <_vfiprintf_r+0x8d2>
 80121e0:	ad17      	add	r5, sp, #92	; 0x5c
 80121e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80121e4:	2b80      	cmp	r3, #128	; 0x80
 80121e6:	d11e      	bne.n	8012226 <_vfiprintf_r+0x5a6>
 80121e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121ec:	1a9f      	subs	r7, r3, r2
 80121ee:	2f00      	cmp	r7, #0
 80121f0:	dd19      	ble.n	8012226 <_vfiprintf_r+0x5a6>
 80121f2:	0029      	movs	r1, r5
 80121f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121f6:	4871      	ldr	r0, [pc, #452]	; (80123bc <_vfiprintf_r+0x73c>)
 80121f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80121fa:	3301      	adds	r3, #1
 80121fc:	3108      	adds	r1, #8
 80121fe:	6028      	str	r0, [r5, #0]
 8012200:	2f10      	cmp	r7, #16
 8012202:	dd00      	ble.n	8012206 <_vfiprintf_r+0x586>
 8012204:	e164      	b.n	80124d0 <_vfiprintf_r+0x850>
 8012206:	606f      	str	r7, [r5, #4]
 8012208:	18bf      	adds	r7, r7, r2
 801220a:	000d      	movs	r5, r1
 801220c:	9716      	str	r7, [sp, #88]	; 0x58
 801220e:	9315      	str	r3, [sp, #84]	; 0x54
 8012210:	2b07      	cmp	r3, #7
 8012212:	dd08      	ble.n	8012226 <_vfiprintf_r+0x5a6>
 8012214:	9903      	ldr	r1, [sp, #12]
 8012216:	9806      	ldr	r0, [sp, #24]
 8012218:	aa14      	add	r2, sp, #80	; 0x50
 801221a:	f7ff fcfc 	bl	8011c16 <__sprint_r>
 801221e:	2800      	cmp	r0, #0
 8012220:	d000      	beq.n	8012224 <_vfiprintf_r+0x5a4>
 8012222:	e196      	b.n	8012552 <_vfiprintf_r+0x8d2>
 8012224:	ad17      	add	r5, sp, #92	; 0x5c
 8012226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012228:	9a05      	ldr	r2, [sp, #20]
 801222a:	1a9f      	subs	r7, r3, r2
 801222c:	2f00      	cmp	r7, #0
 801222e:	dd19      	ble.n	8012264 <_vfiprintf_r+0x5e4>
 8012230:	0029      	movs	r1, r5
 8012232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012234:	4861      	ldr	r0, [pc, #388]	; (80123bc <_vfiprintf_r+0x73c>)
 8012236:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012238:	3301      	adds	r3, #1
 801223a:	3108      	adds	r1, #8
 801223c:	6028      	str	r0, [r5, #0]
 801223e:	2f10      	cmp	r7, #16
 8012240:	dd00      	ble.n	8012244 <_vfiprintf_r+0x5c4>
 8012242:	e157      	b.n	80124f4 <_vfiprintf_r+0x874>
 8012244:	606f      	str	r7, [r5, #4]
 8012246:	18bf      	adds	r7, r7, r2
 8012248:	000d      	movs	r5, r1
 801224a:	9716      	str	r7, [sp, #88]	; 0x58
 801224c:	9315      	str	r3, [sp, #84]	; 0x54
 801224e:	2b07      	cmp	r3, #7
 8012250:	dd08      	ble.n	8012264 <_vfiprintf_r+0x5e4>
 8012252:	9903      	ldr	r1, [sp, #12]
 8012254:	9806      	ldr	r0, [sp, #24]
 8012256:	aa14      	add	r2, sp, #80	; 0x50
 8012258:	f7ff fcdd 	bl	8011c16 <__sprint_r>
 801225c:	2800      	cmp	r0, #0
 801225e:	d000      	beq.n	8012262 <_vfiprintf_r+0x5e2>
 8012260:	e177      	b.n	8012552 <_vfiprintf_r+0x8d2>
 8012262:	ad17      	add	r5, sp, #92	; 0x5c
 8012264:	9b05      	ldr	r3, [sp, #20]
 8012266:	9a05      	ldr	r2, [sp, #20]
 8012268:	606b      	str	r3, [r5, #4]
 801226a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801226c:	602e      	str	r6, [r5, #0]
 801226e:	189b      	adds	r3, r3, r2
 8012270:	9316      	str	r3, [sp, #88]	; 0x58
 8012272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012274:	3508      	adds	r5, #8
 8012276:	3301      	adds	r3, #1
 8012278:	9315      	str	r3, [sp, #84]	; 0x54
 801227a:	2b07      	cmp	r3, #7
 801227c:	dd08      	ble.n	8012290 <_vfiprintf_r+0x610>
 801227e:	9903      	ldr	r1, [sp, #12]
 8012280:	9806      	ldr	r0, [sp, #24]
 8012282:	aa14      	add	r2, sp, #80	; 0x50
 8012284:	f7ff fcc7 	bl	8011c16 <__sprint_r>
 8012288:	2800      	cmp	r0, #0
 801228a:	d000      	beq.n	801228e <_vfiprintf_r+0x60e>
 801228c:	e161      	b.n	8012552 <_vfiprintf_r+0x8d2>
 801228e:	ad17      	add	r5, sp, #92	; 0x5c
 8012290:	0764      	lsls	r4, r4, #29
 8012292:	d500      	bpl.n	8012296 <_vfiprintf_r+0x616>
 8012294:	e140      	b.n	8012518 <_vfiprintf_r+0x898>
 8012296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801229a:	4293      	cmp	r3, r2
 801229c:	da00      	bge.n	80122a0 <_vfiprintf_r+0x620>
 801229e:	0013      	movs	r3, r2
 80122a0:	9a08      	ldr	r2, [sp, #32]
 80122a2:	18d3      	adds	r3, r2, r3
 80122a4:	9308      	str	r3, [sp, #32]
 80122a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d007      	beq.n	80122bc <_vfiprintf_r+0x63c>
 80122ac:	9903      	ldr	r1, [sp, #12]
 80122ae:	9806      	ldr	r0, [sp, #24]
 80122b0:	aa14      	add	r2, sp, #80	; 0x50
 80122b2:	f7ff fcb0 	bl	8011c16 <__sprint_r>
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d000      	beq.n	80122bc <_vfiprintf_r+0x63c>
 80122ba:	e14a      	b.n	8012552 <_vfiprintf_r+0x8d2>
 80122bc:	2300      	movs	r3, #0
 80122be:	ad17      	add	r5, sp, #92	; 0x5c
 80122c0:	9315      	str	r3, [sp, #84]	; 0x54
 80122c2:	e6b7      	b.n	8012034 <_vfiprintf_r+0x3b4>
 80122c4:	0030      	movs	r0, r6
 80122c6:	f7ed ff1d 	bl	8000104 <strlen>
 80122ca:	9005      	str	r0, [sp, #20]
 80122cc:	e719      	b.n	8012102 <_vfiprintf_r+0x482>
 80122ce:	2310      	movs	r3, #16
 80122d0:	431c      	orrs	r4, r3
 80122d2:	2320      	movs	r3, #32
 80122d4:	0020      	movs	r0, r4
 80122d6:	4018      	ands	r0, r3
 80122d8:	421c      	tst	r4, r3
 80122da:	d009      	beq.n	80122f0 <_vfiprintf_r+0x670>
 80122dc:	3b19      	subs	r3, #25
 80122de:	3707      	adds	r7, #7
 80122e0:	439f      	bics	r7, r3
 80122e2:	0039      	movs	r1, r7
 80122e4:	c90c      	ldmia	r1!, {r2, r3}
 80122e6:	9200      	str	r2, [sp, #0]
 80122e8:	9301      	str	r3, [sp, #4]
 80122ea:	9104      	str	r1, [sp, #16]
 80122ec:	2301      	movs	r3, #1
 80122ee:	e6c7      	b.n	8012080 <_vfiprintf_r+0x400>
 80122f0:	003b      	movs	r3, r7
 80122f2:	cb04      	ldmia	r3!, {r2}
 80122f4:	0021      	movs	r1, r4
 80122f6:	9304      	str	r3, [sp, #16]
 80122f8:	2310      	movs	r3, #16
 80122fa:	4019      	ands	r1, r3
 80122fc:	421c      	tst	r4, r3
 80122fe:	d003      	beq.n	8012308 <_vfiprintf_r+0x688>
 8012300:	9200      	str	r2, [sp, #0]
 8012302:	9001      	str	r0, [sp, #4]
 8012304:	3b0f      	subs	r3, #15
 8012306:	e6bb      	b.n	8012080 <_vfiprintf_r+0x400>
 8012308:	2340      	movs	r3, #64	; 0x40
 801230a:	0020      	movs	r0, r4
 801230c:	4018      	ands	r0, r3
 801230e:	421c      	tst	r4, r3
 8012310:	d003      	beq.n	801231a <_vfiprintf_r+0x69a>
 8012312:	b293      	uxth	r3, r2
 8012314:	9300      	str	r3, [sp, #0]
 8012316:	9101      	str	r1, [sp, #4]
 8012318:	e7e8      	b.n	80122ec <_vfiprintf_r+0x66c>
 801231a:	2380      	movs	r3, #128	; 0x80
 801231c:	0021      	movs	r1, r4
 801231e:	009b      	lsls	r3, r3, #2
 8012320:	4019      	ands	r1, r3
 8012322:	421c      	tst	r4, r3
 8012324:	d003      	beq.n	801232e <_vfiprintf_r+0x6ae>
 8012326:	b2d3      	uxtb	r3, r2
 8012328:	9300      	str	r3, [sp, #0]
 801232a:	9001      	str	r0, [sp, #4]
 801232c:	e7de      	b.n	80122ec <_vfiprintf_r+0x66c>
 801232e:	9200      	str	r2, [sp, #0]
 8012330:	e7f1      	b.n	8012316 <_vfiprintf_r+0x696>
 8012332:	4a23      	ldr	r2, [pc, #140]	; (80123c0 <_vfiprintf_r+0x740>)
 8012334:	0020      	movs	r0, r4
 8012336:	920c      	str	r2, [sp, #48]	; 0x30
 8012338:	2220      	movs	r2, #32
 801233a:	4010      	ands	r0, r2
 801233c:	4214      	tst	r4, r2
 801233e:	d019      	beq.n	8012374 <_vfiprintf_r+0x6f4>
 8012340:	3a19      	subs	r2, #25
 8012342:	3707      	adds	r7, #7
 8012344:	4397      	bics	r7, r2
 8012346:	0038      	movs	r0, r7
 8012348:	c806      	ldmia	r0!, {r1, r2}
 801234a:	9100      	str	r1, [sp, #0]
 801234c:	9201      	str	r2, [sp, #4]
 801234e:	9004      	str	r0, [sp, #16]
 8012350:	07e2      	lsls	r2, r4, #31
 8012352:	d509      	bpl.n	8012368 <_vfiprintf_r+0x6e8>
 8012354:	9a00      	ldr	r2, [sp, #0]
 8012356:	9901      	ldr	r1, [sp, #4]
 8012358:	430a      	orrs	r2, r1
 801235a:	d005      	beq.n	8012368 <_vfiprintf_r+0x6e8>
 801235c:	aa13      	add	r2, sp, #76	; 0x4c
 801235e:	2130      	movs	r1, #48	; 0x30
 8012360:	7053      	strb	r3, [r2, #1]
 8012362:	2302      	movs	r3, #2
 8012364:	7011      	strb	r1, [r2, #0]
 8012366:	431c      	orrs	r4, r3
 8012368:	4b10      	ldr	r3, [pc, #64]	; (80123ac <_vfiprintf_r+0x72c>)
 801236a:	401c      	ands	r4, r3
 801236c:	2302      	movs	r3, #2
 801236e:	e687      	b.n	8012080 <_vfiprintf_r+0x400>
 8012370:	4a10      	ldr	r2, [pc, #64]	; (80123b4 <_vfiprintf_r+0x734>)
 8012372:	e7df      	b.n	8012334 <_vfiprintf_r+0x6b4>
 8012374:	0039      	movs	r1, r7
 8012376:	c904      	ldmia	r1!, {r2}
 8012378:	0026      	movs	r6, r4
 801237a:	9104      	str	r1, [sp, #16]
 801237c:	2110      	movs	r1, #16
 801237e:	400e      	ands	r6, r1
 8012380:	420c      	tst	r4, r1
 8012382:	d002      	beq.n	801238a <_vfiprintf_r+0x70a>
 8012384:	9200      	str	r2, [sp, #0]
 8012386:	9001      	str	r0, [sp, #4]
 8012388:	e7e2      	b.n	8012350 <_vfiprintf_r+0x6d0>
 801238a:	2140      	movs	r1, #64	; 0x40
 801238c:	0020      	movs	r0, r4
 801238e:	4008      	ands	r0, r1
 8012390:	420c      	tst	r4, r1
 8012392:	d003      	beq.n	801239c <_vfiprintf_r+0x71c>
 8012394:	b292      	uxth	r2, r2
 8012396:	9200      	str	r2, [sp, #0]
 8012398:	9601      	str	r6, [sp, #4]
 801239a:	e7d9      	b.n	8012350 <_vfiprintf_r+0x6d0>
 801239c:	2180      	movs	r1, #128	; 0x80
 801239e:	0026      	movs	r6, r4
 80123a0:	0089      	lsls	r1, r1, #2
 80123a2:	400e      	ands	r6, r1
 80123a4:	420c      	tst	r4, r1
 80123a6:	d0f6      	beq.n	8012396 <_vfiprintf_r+0x716>
 80123a8:	b2d2      	uxtb	r2, r2
 80123aa:	e7eb      	b.n	8012384 <_vfiprintf_r+0x704>
 80123ac:	fffffbff 	.word	0xfffffbff
 80123b0:	00007830 	.word	0x00007830
 80123b4:	08014c54 	.word	0x08014c54
 80123b8:	08014d61 	.word	0x08014d61
 80123bc:	08014d71 	.word	0x08014d71
 80123c0:	08014c65 	.word	0x08014c65
 80123c4:	9b01      	ldr	r3, [sp, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d109      	bne.n	80123de <_vfiprintf_r+0x75e>
 80123ca:	9b00      	ldr	r3, [sp, #0]
 80123cc:	2b09      	cmp	r3, #9
 80123ce:	d806      	bhi.n	80123de <_vfiprintf_r+0x75e>
 80123d0:	26b7      	movs	r6, #183	; 0xb7
 80123d2:	ab12      	add	r3, sp, #72	; 0x48
 80123d4:	18f6      	adds	r6, r6, r3
 80123d6:	9b00      	ldr	r3, [sp, #0]
 80123d8:	3330      	adds	r3, #48	; 0x30
 80123da:	7033      	strb	r3, [r6, #0]
 80123dc:	e115      	b.n	801260a <_vfiprintf_r+0x98a>
 80123de:	2380      	movs	r3, #128	; 0x80
 80123e0:	2400      	movs	r4, #0
 80123e2:	00db      	lsls	r3, r3, #3
 80123e4:	403b      	ands	r3, r7
 80123e6:	ae40      	add	r6, sp, #256	; 0x100
 80123e8:	930a      	str	r3, [sp, #40]	; 0x28
 80123ea:	220a      	movs	r2, #10
 80123ec:	9800      	ldr	r0, [sp, #0]
 80123ee:	9901      	ldr	r1, [sp, #4]
 80123f0:	2300      	movs	r3, #0
 80123f2:	f7ee f857 	bl	80004a4 <__aeabi_uldivmod>
 80123f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123f8:	3e01      	subs	r6, #1
 80123fa:	3230      	adds	r2, #48	; 0x30
 80123fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80123fe:	9110      	str	r1, [sp, #64]	; 0x40
 8012400:	7032      	strb	r2, [r6, #0]
 8012402:	3401      	adds	r4, #1
 8012404:	2b00      	cmp	r3, #0
 8012406:	d01a      	beq.n	801243e <_vfiprintf_r+0x7be>
 8012408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	42a3      	cmp	r3, r4
 801240e:	d116      	bne.n	801243e <_vfiprintf_r+0x7be>
 8012410:	2cff      	cmp	r4, #255	; 0xff
 8012412:	d014      	beq.n	801243e <_vfiprintf_r+0x7be>
 8012414:	9b01      	ldr	r3, [sp, #4]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d102      	bne.n	8012420 <_vfiprintf_r+0x7a0>
 801241a:	9b00      	ldr	r3, [sp, #0]
 801241c:	2b09      	cmp	r3, #9
 801241e:	d90e      	bls.n	801243e <_vfiprintf_r+0x7be>
 8012420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012422:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012424:	1af6      	subs	r6, r6, r3
 8012426:	001a      	movs	r2, r3
 8012428:	0030      	movs	r0, r6
 801242a:	f7f9 ffe6 	bl	800c3fa <strncpy>
 801242e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012430:	2400      	movs	r4, #0
 8012432:	785b      	ldrb	r3, [r3, #1]
 8012434:	1e5a      	subs	r2, r3, #1
 8012436:	4193      	sbcs	r3, r2
 8012438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801243a:	18d3      	adds	r3, r2, r3
 801243c:	930d      	str	r3, [sp, #52]	; 0x34
 801243e:	9b01      	ldr	r3, [sp, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d103      	bne.n	801244c <_vfiprintf_r+0x7cc>
 8012444:	9b00      	ldr	r3, [sp, #0]
 8012446:	2b09      	cmp	r3, #9
 8012448:	d800      	bhi.n	801244c <_vfiprintf_r+0x7cc>
 801244a:	e0de      	b.n	801260a <_vfiprintf_r+0x98a>
 801244c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801244e:	9300      	str	r3, [sp, #0]
 8012450:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012452:	9301      	str	r3, [sp, #4]
 8012454:	e7c9      	b.n	80123ea <_vfiprintf_r+0x76a>
 8012456:	200f      	movs	r0, #15
 8012458:	9b00      	ldr	r3, [sp, #0]
 801245a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801245c:	4003      	ands	r3, r0
 801245e:	5cd3      	ldrb	r3, [r2, r3]
 8012460:	3e01      	subs	r6, #1
 8012462:	7033      	strb	r3, [r6, #0]
 8012464:	9b01      	ldr	r3, [sp, #4]
 8012466:	0719      	lsls	r1, r3, #28
 8012468:	9b00      	ldr	r3, [sp, #0]
 801246a:	091a      	lsrs	r2, r3, #4
 801246c:	9b01      	ldr	r3, [sp, #4]
 801246e:	4311      	orrs	r1, r2
 8012470:	091b      	lsrs	r3, r3, #4
 8012472:	9301      	str	r3, [sp, #4]
 8012474:	000b      	movs	r3, r1
 8012476:	9a01      	ldr	r2, [sp, #4]
 8012478:	9100      	str	r1, [sp, #0]
 801247a:	4313      	orrs	r3, r2
 801247c:	d1ec      	bne.n	8012458 <_vfiprintf_r+0x7d8>
 801247e:	e0c4      	b.n	801260a <_vfiprintf_r+0x98a>
 8012480:	ae40      	add	r6, sp, #256	; 0x100
 8012482:	2b00      	cmp	r3, #0
 8012484:	d000      	beq.n	8012488 <_vfiprintf_r+0x808>
 8012486:	e0c0      	b.n	801260a <_vfiprintf_r+0x98a>
 8012488:	07e4      	lsls	r4, r4, #31
 801248a:	d400      	bmi.n	801248e <_vfiprintf_r+0x80e>
 801248c:	e0bd      	b.n	801260a <_vfiprintf_r+0x98a>
 801248e:	26b7      	movs	r6, #183	; 0xb7
 8012490:	ab12      	add	r3, sp, #72	; 0x48
 8012492:	18f6      	adds	r6, r6, r3
 8012494:	2330      	movs	r3, #48	; 0x30
 8012496:	e7a0      	b.n	80123da <_vfiprintf_r+0x75a>
 8012498:	2b00      	cmp	r3, #0
 801249a:	d100      	bne.n	801249e <_vfiprintf_r+0x81e>
 801249c:	e07e      	b.n	801259c <_vfiprintf_r+0x91c>
 801249e:	ae27      	add	r6, sp, #156	; 0x9c
 80124a0:	7033      	strb	r3, [r6, #0]
 80124a2:	2300      	movs	r3, #0
 80124a4:	aa12      	add	r2, sp, #72	; 0x48
 80124a6:	70d3      	strb	r3, [r2, #3]
 80124a8:	9704      	str	r7, [sp, #16]
 80124aa:	e576      	b.n	8011f9a <_vfiprintf_r+0x31a>
 80124ac:	2010      	movs	r0, #16
 80124ae:	1812      	adds	r2, r2, r0
 80124b0:	6068      	str	r0, [r5, #4]
 80124b2:	9216      	str	r2, [sp, #88]	; 0x58
 80124b4:	9315      	str	r3, [sp, #84]	; 0x54
 80124b6:	2b07      	cmp	r3, #7
 80124b8:	dd07      	ble.n	80124ca <_vfiprintf_r+0x84a>
 80124ba:	9903      	ldr	r1, [sp, #12]
 80124bc:	9806      	ldr	r0, [sp, #24]
 80124be:	aa14      	add	r2, sp, #80	; 0x50
 80124c0:	f7ff fba9 	bl	8011c16 <__sprint_r>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	d144      	bne.n	8012552 <_vfiprintf_r+0x8d2>
 80124c8:	a917      	add	r1, sp, #92	; 0x5c
 80124ca:	000d      	movs	r5, r1
 80124cc:	3f10      	subs	r7, #16
 80124ce:	e63b      	b.n	8012148 <_vfiprintf_r+0x4c8>
 80124d0:	2010      	movs	r0, #16
 80124d2:	1812      	adds	r2, r2, r0
 80124d4:	6068      	str	r0, [r5, #4]
 80124d6:	9216      	str	r2, [sp, #88]	; 0x58
 80124d8:	9315      	str	r3, [sp, #84]	; 0x54
 80124da:	2b07      	cmp	r3, #7
 80124dc:	dd07      	ble.n	80124ee <_vfiprintf_r+0x86e>
 80124de:	9903      	ldr	r1, [sp, #12]
 80124e0:	9806      	ldr	r0, [sp, #24]
 80124e2:	aa14      	add	r2, sp, #80	; 0x50
 80124e4:	f7ff fb97 	bl	8011c16 <__sprint_r>
 80124e8:	2800      	cmp	r0, #0
 80124ea:	d132      	bne.n	8012552 <_vfiprintf_r+0x8d2>
 80124ec:	a917      	add	r1, sp, #92	; 0x5c
 80124ee:	000d      	movs	r5, r1
 80124f0:	3f10      	subs	r7, #16
 80124f2:	e67e      	b.n	80121f2 <_vfiprintf_r+0x572>
 80124f4:	2010      	movs	r0, #16
 80124f6:	1812      	adds	r2, r2, r0
 80124f8:	6068      	str	r0, [r5, #4]
 80124fa:	9216      	str	r2, [sp, #88]	; 0x58
 80124fc:	9315      	str	r3, [sp, #84]	; 0x54
 80124fe:	2b07      	cmp	r3, #7
 8012500:	dd07      	ble.n	8012512 <_vfiprintf_r+0x892>
 8012502:	9903      	ldr	r1, [sp, #12]
 8012504:	9806      	ldr	r0, [sp, #24]
 8012506:	aa14      	add	r2, sp, #80	; 0x50
 8012508:	f7ff fb85 	bl	8011c16 <__sprint_r>
 801250c:	2800      	cmp	r0, #0
 801250e:	d120      	bne.n	8012552 <_vfiprintf_r+0x8d2>
 8012510:	a917      	add	r1, sp, #92	; 0x5c
 8012512:	000d      	movs	r5, r1
 8012514:	3f10      	subs	r7, #16
 8012516:	e68b      	b.n	8012230 <_vfiprintf_r+0x5b0>
 8012518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801251a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801251c:	2610      	movs	r6, #16
 801251e:	1a9c      	subs	r4, r3, r2
 8012520:	2c00      	cmp	r4, #0
 8012522:	dc00      	bgt.n	8012526 <_vfiprintf_r+0x8a6>
 8012524:	e6b7      	b.n	8012296 <_vfiprintf_r+0x616>
 8012526:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012528:	4a3b      	ldr	r2, [pc, #236]	; (8012618 <_vfiprintf_r+0x998>)
 801252a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801252c:	3101      	adds	r1, #1
 801252e:	602a      	str	r2, [r5, #0]
 8012530:	2c10      	cmp	r4, #16
 8012532:	dc22      	bgt.n	801257a <_vfiprintf_r+0x8fa>
 8012534:	606c      	str	r4, [r5, #4]
 8012536:	18e4      	adds	r4, r4, r3
 8012538:	9416      	str	r4, [sp, #88]	; 0x58
 801253a:	9115      	str	r1, [sp, #84]	; 0x54
 801253c:	2907      	cmp	r1, #7
 801253e:	dc00      	bgt.n	8012542 <_vfiprintf_r+0x8c2>
 8012540:	e6a9      	b.n	8012296 <_vfiprintf_r+0x616>
 8012542:	9903      	ldr	r1, [sp, #12]
 8012544:	9806      	ldr	r0, [sp, #24]
 8012546:	aa14      	add	r2, sp, #80	; 0x50
 8012548:	f7ff fb65 	bl	8011c16 <__sprint_r>
 801254c:	2800      	cmp	r0, #0
 801254e:	d100      	bne.n	8012552 <_vfiprintf_r+0x8d2>
 8012550:	e6a1      	b.n	8012296 <_vfiprintf_r+0x616>
 8012552:	9b03      	ldr	r3, [sp, #12]
 8012554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012556:	07db      	lsls	r3, r3, #31
 8012558:	d407      	bmi.n	801256a <_vfiprintf_r+0x8ea>
 801255a:	9b03      	ldr	r3, [sp, #12]
 801255c:	899b      	ldrh	r3, [r3, #12]
 801255e:	059b      	lsls	r3, r3, #22
 8012560:	d403      	bmi.n	801256a <_vfiprintf_r+0x8ea>
 8012562:	9b03      	ldr	r3, [sp, #12]
 8012564:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012566:	f7fa f808 	bl	800c57a <__retarget_lock_release_recursive>
 801256a:	9b03      	ldr	r3, [sp, #12]
 801256c:	899b      	ldrh	r3, [r3, #12]
 801256e:	065b      	lsls	r3, r3, #25
 8012570:	d401      	bmi.n	8012576 <_vfiprintf_r+0x8f6>
 8012572:	f7ff fbc3 	bl	8011cfc <_vfiprintf_r+0x7c>
 8012576:	f7ff fbbe 	bl	8011cf6 <_vfiprintf_r+0x76>
 801257a:	3310      	adds	r3, #16
 801257c:	606e      	str	r6, [r5, #4]
 801257e:	9316      	str	r3, [sp, #88]	; 0x58
 8012580:	9115      	str	r1, [sp, #84]	; 0x54
 8012582:	3508      	adds	r5, #8
 8012584:	2907      	cmp	r1, #7
 8012586:	dd07      	ble.n	8012598 <_vfiprintf_r+0x918>
 8012588:	9903      	ldr	r1, [sp, #12]
 801258a:	9806      	ldr	r0, [sp, #24]
 801258c:	aa14      	add	r2, sp, #80	; 0x50
 801258e:	f7ff fb42 	bl	8011c16 <__sprint_r>
 8012592:	2800      	cmp	r0, #0
 8012594:	d1dd      	bne.n	8012552 <_vfiprintf_r+0x8d2>
 8012596:	ad17      	add	r5, sp, #92	; 0x5c
 8012598:	3c10      	subs	r4, #16
 801259a:	e7c4      	b.n	8012526 <_vfiprintf_r+0x8a6>
 801259c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d102      	bne.n	80125a8 <_vfiprintf_r+0x928>
 80125a2:	2300      	movs	r3, #0
 80125a4:	9315      	str	r3, [sp, #84]	; 0x54
 80125a6:	e7d4      	b.n	8012552 <_vfiprintf_r+0x8d2>
 80125a8:	9903      	ldr	r1, [sp, #12]
 80125aa:	9806      	ldr	r0, [sp, #24]
 80125ac:	aa14      	add	r2, sp, #80	; 0x50
 80125ae:	f7ff fb32 	bl	8011c16 <__sprint_r>
 80125b2:	2800      	cmp	r0, #0
 80125b4:	d0f5      	beq.n	80125a2 <_vfiprintf_r+0x922>
 80125b6:	e7cc      	b.n	8012552 <_vfiprintf_r+0x8d2>
 80125b8:	0027      	movs	r7, r4
 80125ba:	2a00      	cmp	r2, #0
 80125bc:	d100      	bne.n	80125c0 <_vfiprintf_r+0x940>
 80125be:	e51b      	b.n	8011ff8 <_vfiprintf_r+0x378>
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d100      	bne.n	80125c6 <_vfiprintf_r+0x946>
 80125c4:	e6fe      	b.n	80123c4 <_vfiprintf_r+0x744>
 80125c6:	ae40      	add	r6, sp, #256	; 0x100
 80125c8:	2b02      	cmp	r3, #2
 80125ca:	d100      	bne.n	80125ce <_vfiprintf_r+0x94e>
 80125cc:	e743      	b.n	8012456 <_vfiprintf_r+0x7d6>
 80125ce:	2307      	movs	r3, #7
 80125d0:	469c      	mov	ip, r3
 80125d2:	4663      	mov	r3, ip
 80125d4:	9900      	ldr	r1, [sp, #0]
 80125d6:	0032      	movs	r2, r6
 80125d8:	400b      	ands	r3, r1
 80125da:	9901      	ldr	r1, [sp, #4]
 80125dc:	3e01      	subs	r6, #1
 80125de:	074c      	lsls	r4, r1, #29
 80125e0:	9900      	ldr	r1, [sp, #0]
 80125e2:	3330      	adds	r3, #48	; 0x30
 80125e4:	08c8      	lsrs	r0, r1, #3
 80125e6:	9901      	ldr	r1, [sp, #4]
 80125e8:	4304      	orrs	r4, r0
 80125ea:	08c9      	lsrs	r1, r1, #3
 80125ec:	9101      	str	r1, [sp, #4]
 80125ee:	0021      	movs	r1, r4
 80125f0:	9801      	ldr	r0, [sp, #4]
 80125f2:	7033      	strb	r3, [r6, #0]
 80125f4:	9400      	str	r4, [sp, #0]
 80125f6:	4301      	orrs	r1, r0
 80125f8:	d1eb      	bne.n	80125d2 <_vfiprintf_r+0x952>
 80125fa:	07f9      	lsls	r1, r7, #31
 80125fc:	d505      	bpl.n	801260a <_vfiprintf_r+0x98a>
 80125fe:	2b30      	cmp	r3, #48	; 0x30
 8012600:	d003      	beq.n	801260a <_vfiprintf_r+0x98a>
 8012602:	2330      	movs	r3, #48	; 0x30
 8012604:	3e01      	subs	r6, #1
 8012606:	7033      	strb	r3, [r6, #0]
 8012608:	1e96      	subs	r6, r2, #2
 801260a:	9b05      	ldr	r3, [sp, #20]
 801260c:	003c      	movs	r4, r7
 801260e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012610:	ab40      	add	r3, sp, #256	; 0x100
 8012612:	1b9b      	subs	r3, r3, r6
 8012614:	9305      	str	r3, [sp, #20]
 8012616:	e575      	b.n	8012104 <_vfiprintf_r+0x484>
 8012618:	08014d61 	.word	0x08014d61

0801261c <__sbprintf>:
 801261c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801261e:	0015      	movs	r5, r2
 8012620:	2202      	movs	r2, #2
 8012622:	4c1e      	ldr	r4, [pc, #120]	; (801269c <__sbprintf+0x80>)
 8012624:	001f      	movs	r7, r3
 8012626:	898b      	ldrh	r3, [r1, #12]
 8012628:	44a5      	add	sp, r4
 801262a:	4393      	bics	r3, r2
 801262c:	466a      	mov	r2, sp
 801262e:	8193      	strh	r3, [r2, #12]
 8012630:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012632:	0006      	movs	r6, r0
 8012634:	9319      	str	r3, [sp, #100]	; 0x64
 8012636:	89cb      	ldrh	r3, [r1, #14]
 8012638:	a816      	add	r0, sp, #88	; 0x58
 801263a:	81d3      	strh	r3, [r2, #14]
 801263c:	69cb      	ldr	r3, [r1, #28]
 801263e:	000c      	movs	r4, r1
 8012640:	9307      	str	r3, [sp, #28]
 8012642:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8012644:	9309      	str	r3, [sp, #36]	; 0x24
 8012646:	ab1a      	add	r3, sp, #104	; 0x68
 8012648:	9300      	str	r3, [sp, #0]
 801264a:	9304      	str	r3, [sp, #16]
 801264c:	2380      	movs	r3, #128	; 0x80
 801264e:	00db      	lsls	r3, r3, #3
 8012650:	9302      	str	r3, [sp, #8]
 8012652:	9305      	str	r3, [sp, #20]
 8012654:	2300      	movs	r3, #0
 8012656:	9306      	str	r3, [sp, #24]
 8012658:	f7f9 ff8c 	bl	800c574 <__retarget_lock_init_recursive>
 801265c:	002a      	movs	r2, r5
 801265e:	003b      	movs	r3, r7
 8012660:	4669      	mov	r1, sp
 8012662:	0030      	movs	r0, r6
 8012664:	f7ff fb0c 	bl	8011c80 <_vfiprintf_r>
 8012668:	1e05      	subs	r5, r0, #0
 801266a:	db07      	blt.n	801267c <__sbprintf+0x60>
 801266c:	4669      	mov	r1, sp
 801266e:	0030      	movs	r0, r6
 8012670:	f7fd fdf6 	bl	8010260 <_fflush_r>
 8012674:	2800      	cmp	r0, #0
 8012676:	d001      	beq.n	801267c <__sbprintf+0x60>
 8012678:	2501      	movs	r5, #1
 801267a:	426d      	negs	r5, r5
 801267c:	466b      	mov	r3, sp
 801267e:	899a      	ldrh	r2, [r3, #12]
 8012680:	2340      	movs	r3, #64	; 0x40
 8012682:	421a      	tst	r2, r3
 8012684:	d002      	beq.n	801268c <__sbprintf+0x70>
 8012686:	89a2      	ldrh	r2, [r4, #12]
 8012688:	4313      	orrs	r3, r2
 801268a:	81a3      	strh	r3, [r4, #12]
 801268c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801268e:	f7f9 ff72 	bl	800c576 <__retarget_lock_close_recursive>
 8012692:	0028      	movs	r0, r5
 8012694:	4b02      	ldr	r3, [pc, #8]	; (80126a0 <__sbprintf+0x84>)
 8012696:	449d      	add	sp, r3
 8012698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801269a:	46c0      	nop			; (mov r8, r8)
 801269c:	fffffb94 	.word	0xfffffb94
 80126a0:	0000046c 	.word	0x0000046c

080126a4 <__sfvwrite_r>:
 80126a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126a6:	6893      	ldr	r3, [r2, #8]
 80126a8:	b087      	sub	sp, #28
 80126aa:	000c      	movs	r4, r1
 80126ac:	9002      	str	r0, [sp, #8]
 80126ae:	9204      	str	r2, [sp, #16]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d102      	bne.n	80126ba <__sfvwrite_r+0x16>
 80126b4:	2000      	movs	r0, #0
 80126b6:	b007      	add	sp, #28
 80126b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126ba:	898b      	ldrh	r3, [r1, #12]
 80126bc:	071b      	lsls	r3, r3, #28
 80126be:	d557      	bpl.n	8012770 <__sfvwrite_r+0xcc>
 80126c0:	690b      	ldr	r3, [r1, #16]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d054      	beq.n	8012770 <__sfvwrite_r+0xcc>
 80126c6:	9b04      	ldr	r3, [sp, #16]
 80126c8:	2202      	movs	r2, #2
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	9301      	str	r3, [sp, #4]
 80126ce:	89a3      	ldrh	r3, [r4, #12]
 80126d0:	001f      	movs	r7, r3
 80126d2:	4017      	ands	r7, r2
 80126d4:	4213      	tst	r3, r2
 80126d6:	d171      	bne.n	80127bc <__sfvwrite_r+0x118>
 80126d8:	2201      	movs	r2, #1
 80126da:	2101      	movs	r1, #1
 80126dc:	401a      	ands	r2, r3
 80126de:	420b      	tst	r3, r1
 80126e0:	d100      	bne.n	80126e4 <__sfvwrite_r+0x40>
 80126e2:	e0a5      	b.n	8012830 <__sfvwrite_r+0x18c>
 80126e4:	0038      	movs	r0, r7
 80126e6:	003e      	movs	r6, r7
 80126e8:	9703      	str	r7, [sp, #12]
 80126ea:	9b03      	ldr	r3, [sp, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d100      	bne.n	80126f2 <__sfvwrite_r+0x4e>
 80126f0:	e10b      	b.n	801290a <__sfvwrite_r+0x266>
 80126f2:	2800      	cmp	r0, #0
 80126f4:	d10a      	bne.n	801270c <__sfvwrite_r+0x68>
 80126f6:	001a      	movs	r2, r3
 80126f8:	210a      	movs	r1, #10
 80126fa:	0030      	movs	r0, r6
 80126fc:	f7fd fe2a 	bl	8010354 <memchr>
 8012700:	9b03      	ldr	r3, [sp, #12]
 8012702:	1c5f      	adds	r7, r3, #1
 8012704:	2800      	cmp	r0, #0
 8012706:	d001      	beq.n	801270c <__sfvwrite_r+0x68>
 8012708:	3001      	adds	r0, #1
 801270a:	1b87      	subs	r7, r0, r6
 801270c:	9b03      	ldr	r3, [sp, #12]
 801270e:	9705      	str	r7, [sp, #20]
 8012710:	429f      	cmp	r7, r3
 8012712:	d900      	bls.n	8012716 <__sfvwrite_r+0x72>
 8012714:	9305      	str	r3, [sp, #20]
 8012716:	6820      	ldr	r0, [r4, #0]
 8012718:	6922      	ldr	r2, [r4, #16]
 801271a:	68a5      	ldr	r5, [r4, #8]
 801271c:	6963      	ldr	r3, [r4, #20]
 801271e:	4290      	cmp	r0, r2
 8012720:	d800      	bhi.n	8012724 <__sfvwrite_r+0x80>
 8012722:	e0fb      	b.n	801291c <__sfvwrite_r+0x278>
 8012724:	9a05      	ldr	r2, [sp, #20]
 8012726:	18ed      	adds	r5, r5, r3
 8012728:	42aa      	cmp	r2, r5
 801272a:	dc00      	bgt.n	801272e <__sfvwrite_r+0x8a>
 801272c:	e0f6      	b.n	801291c <__sfvwrite_r+0x278>
 801272e:	0031      	movs	r1, r6
 8012730:	002a      	movs	r2, r5
 8012732:	f000 fa1e 	bl	8012b72 <memmove>
 8012736:	6823      	ldr	r3, [r4, #0]
 8012738:	0021      	movs	r1, r4
 801273a:	195b      	adds	r3, r3, r5
 801273c:	9802      	ldr	r0, [sp, #8]
 801273e:	6023      	str	r3, [r4, #0]
 8012740:	f7fd fd8e 	bl	8010260 <_fflush_r>
 8012744:	2800      	cmp	r0, #0
 8012746:	d16e      	bne.n	8012826 <__sfvwrite_r+0x182>
 8012748:	2001      	movs	r0, #1
 801274a:	1b7f      	subs	r7, r7, r5
 801274c:	d105      	bne.n	801275a <__sfvwrite_r+0xb6>
 801274e:	0021      	movs	r1, r4
 8012750:	9802      	ldr	r0, [sp, #8]
 8012752:	f7fd fd85 	bl	8010260 <_fflush_r>
 8012756:	2800      	cmp	r0, #0
 8012758:	d165      	bne.n	8012826 <__sfvwrite_r+0x182>
 801275a:	9b03      	ldr	r3, [sp, #12]
 801275c:	9a04      	ldr	r2, [sp, #16]
 801275e:	1b5b      	subs	r3, r3, r5
 8012760:	9303      	str	r3, [sp, #12]
 8012762:	9b04      	ldr	r3, [sp, #16]
 8012764:	1976      	adds	r6, r6, r5
 8012766:	689b      	ldr	r3, [r3, #8]
 8012768:	1b5b      	subs	r3, r3, r5
 801276a:	6093      	str	r3, [r2, #8]
 801276c:	d1bd      	bne.n	80126ea <__sfvwrite_r+0x46>
 801276e:	e7a1      	b.n	80126b4 <__sfvwrite_r+0x10>
 8012770:	0021      	movs	r1, r4
 8012772:	9802      	ldr	r0, [sp, #8]
 8012774:	f000 f932 	bl	80129dc <__swsetup_r>
 8012778:	2800      	cmp	r0, #0
 801277a:	d0a4      	beq.n	80126c6 <__sfvwrite_r+0x22>
 801277c:	2001      	movs	r0, #1
 801277e:	4240      	negs	r0, r0
 8012780:	e799      	b.n	80126b6 <__sfvwrite_r+0x12>
 8012782:	9b01      	ldr	r3, [sp, #4]
 8012784:	681e      	ldr	r6, [r3, #0]
 8012786:	685d      	ldr	r5, [r3, #4]
 8012788:	3308      	adds	r3, #8
 801278a:	9301      	str	r3, [sp, #4]
 801278c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801278e:	69e1      	ldr	r1, [r4, #28]
 8012790:	2d00      	cmp	r5, #0
 8012792:	d0f6      	beq.n	8012782 <__sfvwrite_r+0xde>
 8012794:	4a6e      	ldr	r2, [pc, #440]	; (8012950 <__sfvwrite_r+0x2ac>)
 8012796:	002b      	movs	r3, r5
 8012798:	4295      	cmp	r5, r2
 801279a:	d900      	bls.n	801279e <__sfvwrite_r+0xfa>
 801279c:	0013      	movs	r3, r2
 801279e:	0032      	movs	r2, r6
 80127a0:	9802      	ldr	r0, [sp, #8]
 80127a2:	47b8      	blx	r7
 80127a4:	2800      	cmp	r0, #0
 80127a6:	dd3e      	ble.n	8012826 <__sfvwrite_r+0x182>
 80127a8:	9b04      	ldr	r3, [sp, #16]
 80127aa:	9a04      	ldr	r2, [sp, #16]
 80127ac:	689b      	ldr	r3, [r3, #8]
 80127ae:	1836      	adds	r6, r6, r0
 80127b0:	1a1b      	subs	r3, r3, r0
 80127b2:	1a2d      	subs	r5, r5, r0
 80127b4:	6093      	str	r3, [r2, #8]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d1e8      	bne.n	801278c <__sfvwrite_r+0xe8>
 80127ba:	e77b      	b.n	80126b4 <__sfvwrite_r+0x10>
 80127bc:	2600      	movs	r6, #0
 80127be:	0035      	movs	r5, r6
 80127c0:	e7e4      	b.n	801278c <__sfvwrite_r+0xe8>
 80127c2:	9b01      	ldr	r3, [sp, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	9303      	str	r3, [sp, #12]
 80127c8:	9b01      	ldr	r3, [sp, #4]
 80127ca:	685d      	ldr	r5, [r3, #4]
 80127cc:	3308      	adds	r3, #8
 80127ce:	9301      	str	r3, [sp, #4]
 80127d0:	220c      	movs	r2, #12
 80127d2:	5ea3      	ldrsh	r3, [r4, r2]
 80127d4:	6820      	ldr	r0, [r4, #0]
 80127d6:	68a6      	ldr	r6, [r4, #8]
 80127d8:	2d00      	cmp	r5, #0
 80127da:	d0f2      	beq.n	80127c2 <__sfvwrite_r+0x11e>
 80127dc:	2180      	movs	r1, #128	; 0x80
 80127de:	0089      	lsls	r1, r1, #2
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	420b      	tst	r3, r1
 80127e4:	d062      	beq.n	80128ac <__sfvwrite_r+0x208>
 80127e6:	42ae      	cmp	r6, r5
 80127e8:	d837      	bhi.n	801285a <__sfvwrite_r+0x1b6>
 80127ea:	2390      	movs	r3, #144	; 0x90
 80127ec:	00db      	lsls	r3, r3, #3
 80127ee:	421a      	tst	r2, r3
 80127f0:	d033      	beq.n	801285a <__sfvwrite_r+0x1b6>
 80127f2:	6921      	ldr	r1, [r4, #16]
 80127f4:	1a43      	subs	r3, r0, r1
 80127f6:	2003      	movs	r0, #3
 80127f8:	9305      	str	r3, [sp, #20]
 80127fa:	6963      	ldr	r3, [r4, #20]
 80127fc:	4343      	muls	r3, r0
 80127fe:	0fdf      	lsrs	r7, r3, #31
 8012800:	18ff      	adds	r7, r7, r3
 8012802:	9b05      	ldr	r3, [sp, #20]
 8012804:	107f      	asrs	r7, r7, #1
 8012806:	3301      	adds	r3, #1
 8012808:	195b      	adds	r3, r3, r5
 801280a:	42bb      	cmp	r3, r7
 801280c:	d900      	bls.n	8012810 <__sfvwrite_r+0x16c>
 801280e:	001f      	movs	r7, r3
 8012810:	0552      	lsls	r2, r2, #21
 8012812:	d53c      	bpl.n	801288e <__sfvwrite_r+0x1ea>
 8012814:	0039      	movs	r1, r7
 8012816:	9802      	ldr	r0, [sp, #8]
 8012818:	f7f8 fb56 	bl	800aec8 <_malloc_r>
 801281c:	1e06      	subs	r6, r0, #0
 801281e:	d10a      	bne.n	8012836 <__sfvwrite_r+0x192>
 8012820:	230c      	movs	r3, #12
 8012822:	9a02      	ldr	r2, [sp, #8]
 8012824:	6013      	str	r3, [r2, #0]
 8012826:	2340      	movs	r3, #64	; 0x40
 8012828:	89a2      	ldrh	r2, [r4, #12]
 801282a:	4313      	orrs	r3, r2
 801282c:	81a3      	strh	r3, [r4, #12]
 801282e:	e7a5      	b.n	801277c <__sfvwrite_r+0xd8>
 8012830:	0015      	movs	r5, r2
 8012832:	9203      	str	r2, [sp, #12]
 8012834:	e7cc      	b.n	80127d0 <__sfvwrite_r+0x12c>
 8012836:	9a05      	ldr	r2, [sp, #20]
 8012838:	6921      	ldr	r1, [r4, #16]
 801283a:	f7f9 feaa 	bl	800c592 <memcpy>
 801283e:	89a2      	ldrh	r2, [r4, #12]
 8012840:	4b44      	ldr	r3, [pc, #272]	; (8012954 <__sfvwrite_r+0x2b0>)
 8012842:	401a      	ands	r2, r3
 8012844:	2380      	movs	r3, #128	; 0x80
 8012846:	4313      	orrs	r3, r2
 8012848:	81a3      	strh	r3, [r4, #12]
 801284a:	9b05      	ldr	r3, [sp, #20]
 801284c:	6126      	str	r6, [r4, #16]
 801284e:	18f6      	adds	r6, r6, r3
 8012850:	6026      	str	r6, [r4, #0]
 8012852:	002e      	movs	r6, r5
 8012854:	6167      	str	r7, [r4, #20]
 8012856:	1aff      	subs	r7, r7, r3
 8012858:	60a7      	str	r7, [r4, #8]
 801285a:	002f      	movs	r7, r5
 801285c:	42ae      	cmp	r6, r5
 801285e:	d900      	bls.n	8012862 <__sfvwrite_r+0x1be>
 8012860:	002e      	movs	r6, r5
 8012862:	0032      	movs	r2, r6
 8012864:	9903      	ldr	r1, [sp, #12]
 8012866:	6820      	ldr	r0, [r4, #0]
 8012868:	f000 f983 	bl	8012b72 <memmove>
 801286c:	68a3      	ldr	r3, [r4, #8]
 801286e:	1b9b      	subs	r3, r3, r6
 8012870:	60a3      	str	r3, [r4, #8]
 8012872:	6823      	ldr	r3, [r4, #0]
 8012874:	199b      	adds	r3, r3, r6
 8012876:	6023      	str	r3, [r4, #0]
 8012878:	9b03      	ldr	r3, [sp, #12]
 801287a:	9a04      	ldr	r2, [sp, #16]
 801287c:	19db      	adds	r3, r3, r7
 801287e:	9303      	str	r3, [sp, #12]
 8012880:	9b04      	ldr	r3, [sp, #16]
 8012882:	1bed      	subs	r5, r5, r7
 8012884:	689b      	ldr	r3, [r3, #8]
 8012886:	1bdb      	subs	r3, r3, r7
 8012888:	6093      	str	r3, [r2, #8]
 801288a:	d1a1      	bne.n	80127d0 <__sfvwrite_r+0x12c>
 801288c:	e712      	b.n	80126b4 <__sfvwrite_r+0x10>
 801288e:	003a      	movs	r2, r7
 8012890:	9802      	ldr	r0, [sp, #8]
 8012892:	f7fe fcd7 	bl	8011244 <_realloc_r>
 8012896:	1e06      	subs	r6, r0, #0
 8012898:	d1d7      	bne.n	801284a <__sfvwrite_r+0x1a6>
 801289a:	6921      	ldr	r1, [r4, #16]
 801289c:	9802      	ldr	r0, [sp, #8]
 801289e:	f7f9 fef3 	bl	800c688 <_free_r>
 80128a2:	2280      	movs	r2, #128	; 0x80
 80128a4:	89a3      	ldrh	r3, [r4, #12]
 80128a6:	4393      	bics	r3, r2
 80128a8:	81a3      	strh	r3, [r4, #12]
 80128aa:	e7b9      	b.n	8012820 <__sfvwrite_r+0x17c>
 80128ac:	6923      	ldr	r3, [r4, #16]
 80128ae:	4283      	cmp	r3, r0
 80128b0:	d302      	bcc.n	80128b8 <__sfvwrite_r+0x214>
 80128b2:	6967      	ldr	r7, [r4, #20]
 80128b4:	42af      	cmp	r7, r5
 80128b6:	d916      	bls.n	80128e6 <__sfvwrite_r+0x242>
 80128b8:	42ae      	cmp	r6, r5
 80128ba:	d900      	bls.n	80128be <__sfvwrite_r+0x21a>
 80128bc:	002e      	movs	r6, r5
 80128be:	0032      	movs	r2, r6
 80128c0:	9903      	ldr	r1, [sp, #12]
 80128c2:	f000 f956 	bl	8012b72 <memmove>
 80128c6:	68a3      	ldr	r3, [r4, #8]
 80128c8:	6822      	ldr	r2, [r4, #0]
 80128ca:	1b9b      	subs	r3, r3, r6
 80128cc:	1992      	adds	r2, r2, r6
 80128ce:	0037      	movs	r7, r6
 80128d0:	60a3      	str	r3, [r4, #8]
 80128d2:	6022      	str	r2, [r4, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d1cf      	bne.n	8012878 <__sfvwrite_r+0x1d4>
 80128d8:	0021      	movs	r1, r4
 80128da:	9802      	ldr	r0, [sp, #8]
 80128dc:	f7fd fcc0 	bl	8010260 <_fflush_r>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	d0c9      	beq.n	8012878 <__sfvwrite_r+0x1d4>
 80128e4:	e79f      	b.n	8012826 <__sfvwrite_r+0x182>
 80128e6:	4b1c      	ldr	r3, [pc, #112]	; (8012958 <__sfvwrite_r+0x2b4>)
 80128e8:	0028      	movs	r0, r5
 80128ea:	429d      	cmp	r5, r3
 80128ec:	d900      	bls.n	80128f0 <__sfvwrite_r+0x24c>
 80128ee:	481b      	ldr	r0, [pc, #108]	; (801295c <__sfvwrite_r+0x2b8>)
 80128f0:	0039      	movs	r1, r7
 80128f2:	f7ed fcad 	bl	8000250 <__divsi3>
 80128f6:	003b      	movs	r3, r7
 80128f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80128fa:	4343      	muls	r3, r0
 80128fc:	9a03      	ldr	r2, [sp, #12]
 80128fe:	69e1      	ldr	r1, [r4, #28]
 8012900:	9802      	ldr	r0, [sp, #8]
 8012902:	47b0      	blx	r6
 8012904:	1e07      	subs	r7, r0, #0
 8012906:	dcb7      	bgt.n	8012878 <__sfvwrite_r+0x1d4>
 8012908:	e78d      	b.n	8012826 <__sfvwrite_r+0x182>
 801290a:	9b01      	ldr	r3, [sp, #4]
 801290c:	2000      	movs	r0, #0
 801290e:	681e      	ldr	r6, [r3, #0]
 8012910:	685b      	ldr	r3, [r3, #4]
 8012912:	9303      	str	r3, [sp, #12]
 8012914:	9b01      	ldr	r3, [sp, #4]
 8012916:	3308      	adds	r3, #8
 8012918:	9301      	str	r3, [sp, #4]
 801291a:	e6e6      	b.n	80126ea <__sfvwrite_r+0x46>
 801291c:	9a05      	ldr	r2, [sp, #20]
 801291e:	4293      	cmp	r3, r2
 8012920:	dc08      	bgt.n	8012934 <__sfvwrite_r+0x290>
 8012922:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012924:	0032      	movs	r2, r6
 8012926:	69e1      	ldr	r1, [r4, #28]
 8012928:	9802      	ldr	r0, [sp, #8]
 801292a:	47a8      	blx	r5
 801292c:	1e05      	subs	r5, r0, #0
 801292e:	dd00      	ble.n	8012932 <__sfvwrite_r+0x28e>
 8012930:	e70a      	b.n	8012748 <__sfvwrite_r+0xa4>
 8012932:	e778      	b.n	8012826 <__sfvwrite_r+0x182>
 8012934:	9a05      	ldr	r2, [sp, #20]
 8012936:	0031      	movs	r1, r6
 8012938:	f000 f91b 	bl	8012b72 <memmove>
 801293c:	9a05      	ldr	r2, [sp, #20]
 801293e:	68a3      	ldr	r3, [r4, #8]
 8012940:	0015      	movs	r5, r2
 8012942:	1a9b      	subs	r3, r3, r2
 8012944:	60a3      	str	r3, [r4, #8]
 8012946:	6823      	ldr	r3, [r4, #0]
 8012948:	189b      	adds	r3, r3, r2
 801294a:	6023      	str	r3, [r4, #0]
 801294c:	e6fc      	b.n	8012748 <__sfvwrite_r+0xa4>
 801294e:	46c0      	nop			; (mov r8, r8)
 8012950:	7ffffc00 	.word	0x7ffffc00
 8012954:	fffffb7f 	.word	0xfffffb7f
 8012958:	7ffffffe 	.word	0x7ffffffe
 801295c:	7fffffff 	.word	0x7fffffff

08012960 <__submore>:
 8012960:	000b      	movs	r3, r1
 8012962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012964:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8012966:	3340      	adds	r3, #64	; 0x40
 8012968:	000c      	movs	r4, r1
 801296a:	429d      	cmp	r5, r3
 801296c:	d11c      	bne.n	80129a8 <__submore+0x48>
 801296e:	2680      	movs	r6, #128	; 0x80
 8012970:	00f6      	lsls	r6, r6, #3
 8012972:	0031      	movs	r1, r6
 8012974:	f7f8 faa8 	bl	800aec8 <_malloc_r>
 8012978:	2800      	cmp	r0, #0
 801297a:	d102      	bne.n	8012982 <__submore+0x22>
 801297c:	2001      	movs	r0, #1
 801297e:	4240      	negs	r0, r0
 8012980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012982:	0023      	movs	r3, r4
 8012984:	6320      	str	r0, [r4, #48]	; 0x30
 8012986:	6366      	str	r6, [r4, #52]	; 0x34
 8012988:	3342      	adds	r3, #66	; 0x42
 801298a:	781a      	ldrb	r2, [r3, #0]
 801298c:	4b10      	ldr	r3, [pc, #64]	; (80129d0 <__submore+0x70>)
 801298e:	54c2      	strb	r2, [r0, r3]
 8012990:	0023      	movs	r3, r4
 8012992:	3341      	adds	r3, #65	; 0x41
 8012994:	781a      	ldrb	r2, [r3, #0]
 8012996:	4b0f      	ldr	r3, [pc, #60]	; (80129d4 <__submore+0x74>)
 8012998:	54c2      	strb	r2, [r0, r3]
 801299a:	782a      	ldrb	r2, [r5, #0]
 801299c:	4b0e      	ldr	r3, [pc, #56]	; (80129d8 <__submore+0x78>)
 801299e:	54c2      	strb	r2, [r0, r3]
 80129a0:	18c0      	adds	r0, r0, r3
 80129a2:	6020      	str	r0, [r4, #0]
 80129a4:	2000      	movs	r0, #0
 80129a6:	e7eb      	b.n	8012980 <__submore+0x20>
 80129a8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80129aa:	0029      	movs	r1, r5
 80129ac:	0073      	lsls	r3, r6, #1
 80129ae:	001a      	movs	r2, r3
 80129b0:	9301      	str	r3, [sp, #4]
 80129b2:	f7fe fc47 	bl	8011244 <_realloc_r>
 80129b6:	1e05      	subs	r5, r0, #0
 80129b8:	d0e0      	beq.n	801297c <__submore+0x1c>
 80129ba:	1987      	adds	r7, r0, r6
 80129bc:	0001      	movs	r1, r0
 80129be:	0032      	movs	r2, r6
 80129c0:	0038      	movs	r0, r7
 80129c2:	f7f9 fde6 	bl	800c592 <memcpy>
 80129c6:	9b01      	ldr	r3, [sp, #4]
 80129c8:	6027      	str	r7, [r4, #0]
 80129ca:	6325      	str	r5, [r4, #48]	; 0x30
 80129cc:	6363      	str	r3, [r4, #52]	; 0x34
 80129ce:	e7e9      	b.n	80129a4 <__submore+0x44>
 80129d0:	000003ff 	.word	0x000003ff
 80129d4:	000003fe 	.word	0x000003fe
 80129d8:	000003fd 	.word	0x000003fd

080129dc <__swsetup_r>:
 80129dc:	4b30      	ldr	r3, [pc, #192]	; (8012aa0 <__swsetup_r+0xc4>)
 80129de:	b570      	push	{r4, r5, r6, lr}
 80129e0:	0005      	movs	r5, r0
 80129e2:	6818      	ldr	r0, [r3, #0]
 80129e4:	000c      	movs	r4, r1
 80129e6:	2800      	cmp	r0, #0
 80129e8:	d004      	beq.n	80129f4 <__swsetup_r+0x18>
 80129ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d101      	bne.n	80129f4 <__swsetup_r+0x18>
 80129f0:	f7f9 fbec 	bl	800c1cc <__sinit>
 80129f4:	230c      	movs	r3, #12
 80129f6:	5ee2      	ldrsh	r2, [r4, r3]
 80129f8:	b293      	uxth	r3, r2
 80129fa:	0711      	lsls	r1, r2, #28
 80129fc:	d423      	bmi.n	8012a46 <__swsetup_r+0x6a>
 80129fe:	06d9      	lsls	r1, r3, #27
 8012a00:	d407      	bmi.n	8012a12 <__swsetup_r+0x36>
 8012a02:	2309      	movs	r3, #9
 8012a04:	2001      	movs	r0, #1
 8012a06:	602b      	str	r3, [r5, #0]
 8012a08:	3337      	adds	r3, #55	; 0x37
 8012a0a:	4313      	orrs	r3, r2
 8012a0c:	81a3      	strh	r3, [r4, #12]
 8012a0e:	4240      	negs	r0, r0
 8012a10:	bd70      	pop	{r4, r5, r6, pc}
 8012a12:	075b      	lsls	r3, r3, #29
 8012a14:	d513      	bpl.n	8012a3e <__swsetup_r+0x62>
 8012a16:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012a18:	2900      	cmp	r1, #0
 8012a1a:	d008      	beq.n	8012a2e <__swsetup_r+0x52>
 8012a1c:	0023      	movs	r3, r4
 8012a1e:	3340      	adds	r3, #64	; 0x40
 8012a20:	4299      	cmp	r1, r3
 8012a22:	d002      	beq.n	8012a2a <__swsetup_r+0x4e>
 8012a24:	0028      	movs	r0, r5
 8012a26:	f7f9 fe2f 	bl	800c688 <_free_r>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	6323      	str	r3, [r4, #48]	; 0x30
 8012a2e:	2224      	movs	r2, #36	; 0x24
 8012a30:	89a3      	ldrh	r3, [r4, #12]
 8012a32:	4393      	bics	r3, r2
 8012a34:	81a3      	strh	r3, [r4, #12]
 8012a36:	2300      	movs	r3, #0
 8012a38:	6063      	str	r3, [r4, #4]
 8012a3a:	6923      	ldr	r3, [r4, #16]
 8012a3c:	6023      	str	r3, [r4, #0]
 8012a3e:	2308      	movs	r3, #8
 8012a40:	89a2      	ldrh	r2, [r4, #12]
 8012a42:	4313      	orrs	r3, r2
 8012a44:	81a3      	strh	r3, [r4, #12]
 8012a46:	6923      	ldr	r3, [r4, #16]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d10b      	bne.n	8012a64 <__swsetup_r+0x88>
 8012a4c:	21a0      	movs	r1, #160	; 0xa0
 8012a4e:	2280      	movs	r2, #128	; 0x80
 8012a50:	89a3      	ldrh	r3, [r4, #12]
 8012a52:	0089      	lsls	r1, r1, #2
 8012a54:	0092      	lsls	r2, r2, #2
 8012a56:	400b      	ands	r3, r1
 8012a58:	4293      	cmp	r3, r2
 8012a5a:	d003      	beq.n	8012a64 <__swsetup_r+0x88>
 8012a5c:	0021      	movs	r1, r4
 8012a5e:	0028      	movs	r0, r5
 8012a60:	f000 f8e8 	bl	8012c34 <__smakebuf_r>
 8012a64:	220c      	movs	r2, #12
 8012a66:	5ea3      	ldrsh	r3, [r4, r2]
 8012a68:	2001      	movs	r0, #1
 8012a6a:	001a      	movs	r2, r3
 8012a6c:	b299      	uxth	r1, r3
 8012a6e:	4002      	ands	r2, r0
 8012a70:	4203      	tst	r3, r0
 8012a72:	d00f      	beq.n	8012a94 <__swsetup_r+0xb8>
 8012a74:	2200      	movs	r2, #0
 8012a76:	60a2      	str	r2, [r4, #8]
 8012a78:	6962      	ldr	r2, [r4, #20]
 8012a7a:	4252      	negs	r2, r2
 8012a7c:	61a2      	str	r2, [r4, #24]
 8012a7e:	2000      	movs	r0, #0
 8012a80:	6922      	ldr	r2, [r4, #16]
 8012a82:	4282      	cmp	r2, r0
 8012a84:	d1c4      	bne.n	8012a10 <__swsetup_r+0x34>
 8012a86:	0609      	lsls	r1, r1, #24
 8012a88:	d5c2      	bpl.n	8012a10 <__swsetup_r+0x34>
 8012a8a:	2240      	movs	r2, #64	; 0x40
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	81a3      	strh	r3, [r4, #12]
 8012a90:	3801      	subs	r0, #1
 8012a92:	e7bd      	b.n	8012a10 <__swsetup_r+0x34>
 8012a94:	0788      	lsls	r0, r1, #30
 8012a96:	d400      	bmi.n	8012a9a <__swsetup_r+0xbe>
 8012a98:	6962      	ldr	r2, [r4, #20]
 8012a9a:	60a2      	str	r2, [r4, #8]
 8012a9c:	e7ef      	b.n	8012a7e <__swsetup_r+0xa2>
 8012a9e:	46c0      	nop			; (mov r8, r8)
 8012aa0:	200006d8 	.word	0x200006d8

08012aa4 <__fputwc>:
 8012aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012aa6:	b085      	sub	sp, #20
 8012aa8:	000e      	movs	r6, r1
 8012aaa:	0015      	movs	r5, r2
 8012aac:	9001      	str	r0, [sp, #4]
 8012aae:	f7f9 fccf 	bl	800c450 <__locale_mb_cur_max>
 8012ab2:	0004      	movs	r4, r0
 8012ab4:	2801      	cmp	r0, #1
 8012ab6:	d119      	bne.n	8012aec <__fputwc+0x48>
 8012ab8:	1e73      	subs	r3, r6, #1
 8012aba:	2bfe      	cmp	r3, #254	; 0xfe
 8012abc:	d816      	bhi.n	8012aec <__fputwc+0x48>
 8012abe:	ab02      	add	r3, sp, #8
 8012ac0:	711e      	strb	r6, [r3, #4]
 8012ac2:	2700      	movs	r7, #0
 8012ac4:	42a7      	cmp	r7, r4
 8012ac6:	d020      	beq.n	8012b0a <__fputwc+0x66>
 8012ac8:	ab03      	add	r3, sp, #12
 8012aca:	5dd9      	ldrb	r1, [r3, r7]
 8012acc:	68ab      	ldr	r3, [r5, #8]
 8012ace:	3b01      	subs	r3, #1
 8012ad0:	60ab      	str	r3, [r5, #8]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	da04      	bge.n	8012ae0 <__fputwc+0x3c>
 8012ad6:	69aa      	ldr	r2, [r5, #24]
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	db19      	blt.n	8012b10 <__fputwc+0x6c>
 8012adc:	290a      	cmp	r1, #10
 8012ade:	d017      	beq.n	8012b10 <__fputwc+0x6c>
 8012ae0:	682b      	ldr	r3, [r5, #0]
 8012ae2:	1c5a      	adds	r2, r3, #1
 8012ae4:	602a      	str	r2, [r5, #0]
 8012ae6:	7019      	strb	r1, [r3, #0]
 8012ae8:	3701      	adds	r7, #1
 8012aea:	e7eb      	b.n	8012ac4 <__fputwc+0x20>
 8012aec:	002b      	movs	r3, r5
 8012aee:	0032      	movs	r2, r6
 8012af0:	9801      	ldr	r0, [sp, #4]
 8012af2:	335c      	adds	r3, #92	; 0x5c
 8012af4:	a903      	add	r1, sp, #12
 8012af6:	f000 f857 	bl	8012ba8 <_wcrtomb_r>
 8012afa:	0004      	movs	r4, r0
 8012afc:	1c43      	adds	r3, r0, #1
 8012afe:	d1e0      	bne.n	8012ac2 <__fputwc+0x1e>
 8012b00:	2340      	movs	r3, #64	; 0x40
 8012b02:	0006      	movs	r6, r0
 8012b04:	89aa      	ldrh	r2, [r5, #12]
 8012b06:	4313      	orrs	r3, r2
 8012b08:	81ab      	strh	r3, [r5, #12]
 8012b0a:	0030      	movs	r0, r6
 8012b0c:	b005      	add	sp, #20
 8012b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b10:	002a      	movs	r2, r5
 8012b12:	9801      	ldr	r0, [sp, #4]
 8012b14:	f000 f8cc 	bl	8012cb0 <__swbuf_r>
 8012b18:	1c43      	adds	r3, r0, #1
 8012b1a:	d1e5      	bne.n	8012ae8 <__fputwc+0x44>
 8012b1c:	0006      	movs	r6, r0
 8012b1e:	e7f4      	b.n	8012b0a <__fputwc+0x66>

08012b20 <_fputwc_r>:
 8012b20:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012b22:	b570      	push	{r4, r5, r6, lr}
 8012b24:	0005      	movs	r5, r0
 8012b26:	000e      	movs	r6, r1
 8012b28:	0014      	movs	r4, r2
 8012b2a:	07db      	lsls	r3, r3, #31
 8012b2c:	d405      	bmi.n	8012b3a <_fputwc_r+0x1a>
 8012b2e:	8993      	ldrh	r3, [r2, #12]
 8012b30:	059b      	lsls	r3, r3, #22
 8012b32:	d402      	bmi.n	8012b3a <_fputwc_r+0x1a>
 8012b34:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8012b36:	f7f9 fd1f 	bl	800c578 <__retarget_lock_acquire_recursive>
 8012b3a:	230c      	movs	r3, #12
 8012b3c:	5ee2      	ldrsh	r2, [r4, r3]
 8012b3e:	2380      	movs	r3, #128	; 0x80
 8012b40:	019b      	lsls	r3, r3, #6
 8012b42:	421a      	tst	r2, r3
 8012b44:	d104      	bne.n	8012b50 <_fputwc_r+0x30>
 8012b46:	431a      	orrs	r2, r3
 8012b48:	81a2      	strh	r2, [r4, #12]
 8012b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012b4c:	4313      	orrs	r3, r2
 8012b4e:	6663      	str	r3, [r4, #100]	; 0x64
 8012b50:	0028      	movs	r0, r5
 8012b52:	0022      	movs	r2, r4
 8012b54:	0031      	movs	r1, r6
 8012b56:	f7ff ffa5 	bl	8012aa4 <__fputwc>
 8012b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b5c:	0005      	movs	r5, r0
 8012b5e:	07db      	lsls	r3, r3, #31
 8012b60:	d405      	bmi.n	8012b6e <_fputwc_r+0x4e>
 8012b62:	89a3      	ldrh	r3, [r4, #12]
 8012b64:	059b      	lsls	r3, r3, #22
 8012b66:	d402      	bmi.n	8012b6e <_fputwc_r+0x4e>
 8012b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b6a:	f7f9 fd06 	bl	800c57a <__retarget_lock_release_recursive>
 8012b6e:	0028      	movs	r0, r5
 8012b70:	bd70      	pop	{r4, r5, r6, pc}

08012b72 <memmove>:
 8012b72:	b510      	push	{r4, lr}
 8012b74:	4288      	cmp	r0, r1
 8012b76:	d902      	bls.n	8012b7e <memmove+0xc>
 8012b78:	188b      	adds	r3, r1, r2
 8012b7a:	4298      	cmp	r0, r3
 8012b7c:	d303      	bcc.n	8012b86 <memmove+0x14>
 8012b7e:	2300      	movs	r3, #0
 8012b80:	e007      	b.n	8012b92 <memmove+0x20>
 8012b82:	5c8b      	ldrb	r3, [r1, r2]
 8012b84:	5483      	strb	r3, [r0, r2]
 8012b86:	3a01      	subs	r2, #1
 8012b88:	d2fb      	bcs.n	8012b82 <memmove+0x10>
 8012b8a:	bd10      	pop	{r4, pc}
 8012b8c:	5ccc      	ldrb	r4, [r1, r3]
 8012b8e:	54c4      	strb	r4, [r0, r3]
 8012b90:	3301      	adds	r3, #1
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d1fa      	bne.n	8012b8c <memmove+0x1a>
 8012b96:	e7f8      	b.n	8012b8a <memmove+0x18>

08012b98 <abort>:
 8012b98:	2006      	movs	r0, #6
 8012b9a:	b510      	push	{r4, lr}
 8012b9c:	f000 f906 	bl	8012dac <raise>
 8012ba0:	2001      	movs	r0, #1
 8012ba2:	f7f0 fdc9 	bl	8003738 <_exit>
	...

08012ba8 <_wcrtomb_r>:
 8012ba8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012baa:	001d      	movs	r5, r3
 8012bac:	4b09      	ldr	r3, [pc, #36]	; (8012bd4 <_wcrtomb_r+0x2c>)
 8012bae:	0004      	movs	r4, r0
 8012bb0:	33e0      	adds	r3, #224	; 0xe0
 8012bb2:	681e      	ldr	r6, [r3, #0]
 8012bb4:	002b      	movs	r3, r5
 8012bb6:	2900      	cmp	r1, #0
 8012bb8:	d101      	bne.n	8012bbe <_wcrtomb_r+0x16>
 8012bba:	000a      	movs	r2, r1
 8012bbc:	a901      	add	r1, sp, #4
 8012bbe:	0020      	movs	r0, r4
 8012bc0:	47b0      	blx	r6
 8012bc2:	1c43      	adds	r3, r0, #1
 8012bc4:	d103      	bne.n	8012bce <_wcrtomb_r+0x26>
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	602b      	str	r3, [r5, #0]
 8012bca:	338a      	adds	r3, #138	; 0x8a
 8012bcc:	6023      	str	r3, [r4, #0]
 8012bce:	b004      	add	sp, #16
 8012bd0:	bd70      	pop	{r4, r5, r6, pc}
 8012bd2:	46c0      	nop			; (mov r8, r8)
 8012bd4:	20000448 	.word	0x20000448

08012bd8 <__swhatbuf_r>:
 8012bd8:	b570      	push	{r4, r5, r6, lr}
 8012bda:	000e      	movs	r6, r1
 8012bdc:	001d      	movs	r5, r3
 8012bde:	230e      	movs	r3, #14
 8012be0:	5ec9      	ldrsh	r1, [r1, r3]
 8012be2:	0014      	movs	r4, r2
 8012be4:	b096      	sub	sp, #88	; 0x58
 8012be6:	2900      	cmp	r1, #0
 8012be8:	da09      	bge.n	8012bfe <__swhatbuf_r+0x26>
 8012bea:	89b2      	ldrh	r2, [r6, #12]
 8012bec:	2380      	movs	r3, #128	; 0x80
 8012bee:	0011      	movs	r1, r2
 8012bf0:	4019      	ands	r1, r3
 8012bf2:	421a      	tst	r2, r3
 8012bf4:	d018      	beq.n	8012c28 <__swhatbuf_r+0x50>
 8012bf6:	2100      	movs	r1, #0
 8012bf8:	3b40      	subs	r3, #64	; 0x40
 8012bfa:	0008      	movs	r0, r1
 8012bfc:	e010      	b.n	8012c20 <__swhatbuf_r+0x48>
 8012bfe:	466a      	mov	r2, sp
 8012c00:	f000 f8de 	bl	8012dc0 <_fstat_r>
 8012c04:	2800      	cmp	r0, #0
 8012c06:	dbf0      	blt.n	8012bea <__swhatbuf_r+0x12>
 8012c08:	23f0      	movs	r3, #240	; 0xf0
 8012c0a:	9901      	ldr	r1, [sp, #4]
 8012c0c:	021b      	lsls	r3, r3, #8
 8012c0e:	4019      	ands	r1, r3
 8012c10:	4b07      	ldr	r3, [pc, #28]	; (8012c30 <__swhatbuf_r+0x58>)
 8012c12:	2080      	movs	r0, #128	; 0x80
 8012c14:	18c9      	adds	r1, r1, r3
 8012c16:	424b      	negs	r3, r1
 8012c18:	4159      	adcs	r1, r3
 8012c1a:	2380      	movs	r3, #128	; 0x80
 8012c1c:	0100      	lsls	r0, r0, #4
 8012c1e:	00db      	lsls	r3, r3, #3
 8012c20:	6029      	str	r1, [r5, #0]
 8012c22:	6023      	str	r3, [r4, #0]
 8012c24:	b016      	add	sp, #88	; 0x58
 8012c26:	bd70      	pop	{r4, r5, r6, pc}
 8012c28:	2380      	movs	r3, #128	; 0x80
 8012c2a:	00db      	lsls	r3, r3, #3
 8012c2c:	e7e5      	b.n	8012bfa <__swhatbuf_r+0x22>
 8012c2e:	46c0      	nop			; (mov r8, r8)
 8012c30:	ffffe000 	.word	0xffffe000

08012c34 <__smakebuf_r>:
 8012c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c36:	2602      	movs	r6, #2
 8012c38:	898b      	ldrh	r3, [r1, #12]
 8012c3a:	0005      	movs	r5, r0
 8012c3c:	000c      	movs	r4, r1
 8012c3e:	4233      	tst	r3, r6
 8012c40:	d006      	beq.n	8012c50 <__smakebuf_r+0x1c>
 8012c42:	0023      	movs	r3, r4
 8012c44:	3343      	adds	r3, #67	; 0x43
 8012c46:	6023      	str	r3, [r4, #0]
 8012c48:	6123      	str	r3, [r4, #16]
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	6163      	str	r3, [r4, #20]
 8012c4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012c50:	466a      	mov	r2, sp
 8012c52:	ab01      	add	r3, sp, #4
 8012c54:	f7ff ffc0 	bl	8012bd8 <__swhatbuf_r>
 8012c58:	9900      	ldr	r1, [sp, #0]
 8012c5a:	0007      	movs	r7, r0
 8012c5c:	0028      	movs	r0, r5
 8012c5e:	f7f8 f933 	bl	800aec8 <_malloc_r>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	d108      	bne.n	8012c78 <__smakebuf_r+0x44>
 8012c66:	220c      	movs	r2, #12
 8012c68:	5ea3      	ldrsh	r3, [r4, r2]
 8012c6a:	059a      	lsls	r2, r3, #22
 8012c6c:	d4ef      	bmi.n	8012c4e <__smakebuf_r+0x1a>
 8012c6e:	2203      	movs	r2, #3
 8012c70:	4393      	bics	r3, r2
 8012c72:	431e      	orrs	r6, r3
 8012c74:	81a6      	strh	r6, [r4, #12]
 8012c76:	e7e4      	b.n	8012c42 <__smakebuf_r+0xe>
 8012c78:	2380      	movs	r3, #128	; 0x80
 8012c7a:	89a2      	ldrh	r2, [r4, #12]
 8012c7c:	6020      	str	r0, [r4, #0]
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	81a3      	strh	r3, [r4, #12]
 8012c82:	9b00      	ldr	r3, [sp, #0]
 8012c84:	6120      	str	r0, [r4, #16]
 8012c86:	6163      	str	r3, [r4, #20]
 8012c88:	9b01      	ldr	r3, [sp, #4]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d00c      	beq.n	8012ca8 <__smakebuf_r+0x74>
 8012c8e:	0028      	movs	r0, r5
 8012c90:	230e      	movs	r3, #14
 8012c92:	5ee1      	ldrsh	r1, [r4, r3]
 8012c94:	f000 f8a6 	bl	8012de4 <_isatty_r>
 8012c98:	2800      	cmp	r0, #0
 8012c9a:	d005      	beq.n	8012ca8 <__smakebuf_r+0x74>
 8012c9c:	2303      	movs	r3, #3
 8012c9e:	89a2      	ldrh	r2, [r4, #12]
 8012ca0:	439a      	bics	r2, r3
 8012ca2:	3b02      	subs	r3, #2
 8012ca4:	4313      	orrs	r3, r2
 8012ca6:	81a3      	strh	r3, [r4, #12]
 8012ca8:	89a3      	ldrh	r3, [r4, #12]
 8012caa:	433b      	orrs	r3, r7
 8012cac:	81a3      	strh	r3, [r4, #12]
 8012cae:	e7ce      	b.n	8012c4e <__smakebuf_r+0x1a>

08012cb0 <__swbuf_r>:
 8012cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb2:	0006      	movs	r6, r0
 8012cb4:	000d      	movs	r5, r1
 8012cb6:	0014      	movs	r4, r2
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	d004      	beq.n	8012cc6 <__swbuf_r+0x16>
 8012cbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d101      	bne.n	8012cc6 <__swbuf_r+0x16>
 8012cc2:	f7f9 fa83 	bl	800c1cc <__sinit>
 8012cc6:	69a3      	ldr	r3, [r4, #24]
 8012cc8:	60a3      	str	r3, [r4, #8]
 8012cca:	89a3      	ldrh	r3, [r4, #12]
 8012ccc:	071b      	lsls	r3, r3, #28
 8012cce:	d52e      	bpl.n	8012d2e <__swbuf_r+0x7e>
 8012cd0:	6923      	ldr	r3, [r4, #16]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d02b      	beq.n	8012d2e <__swbuf_r+0x7e>
 8012cd6:	230c      	movs	r3, #12
 8012cd8:	5ee2      	ldrsh	r2, [r4, r3]
 8012cda:	2380      	movs	r3, #128	; 0x80
 8012cdc:	019b      	lsls	r3, r3, #6
 8012cde:	b2ef      	uxtb	r7, r5
 8012ce0:	b2ed      	uxtb	r5, r5
 8012ce2:	421a      	tst	r2, r3
 8012ce4:	d02c      	beq.n	8012d40 <__swbuf_r+0x90>
 8012ce6:	6923      	ldr	r3, [r4, #16]
 8012ce8:	6820      	ldr	r0, [r4, #0]
 8012cea:	1ac0      	subs	r0, r0, r3
 8012cec:	6963      	ldr	r3, [r4, #20]
 8012cee:	4283      	cmp	r3, r0
 8012cf0:	dc05      	bgt.n	8012cfe <__swbuf_r+0x4e>
 8012cf2:	0021      	movs	r1, r4
 8012cf4:	0030      	movs	r0, r6
 8012cf6:	f7fd fab3 	bl	8010260 <_fflush_r>
 8012cfa:	2800      	cmp	r0, #0
 8012cfc:	d11d      	bne.n	8012d3a <__swbuf_r+0x8a>
 8012cfe:	68a3      	ldr	r3, [r4, #8]
 8012d00:	3001      	adds	r0, #1
 8012d02:	3b01      	subs	r3, #1
 8012d04:	60a3      	str	r3, [r4, #8]
 8012d06:	6823      	ldr	r3, [r4, #0]
 8012d08:	1c5a      	adds	r2, r3, #1
 8012d0a:	6022      	str	r2, [r4, #0]
 8012d0c:	701f      	strb	r7, [r3, #0]
 8012d0e:	6963      	ldr	r3, [r4, #20]
 8012d10:	4283      	cmp	r3, r0
 8012d12:	d004      	beq.n	8012d1e <__swbuf_r+0x6e>
 8012d14:	89a3      	ldrh	r3, [r4, #12]
 8012d16:	07db      	lsls	r3, r3, #31
 8012d18:	d507      	bpl.n	8012d2a <__swbuf_r+0x7a>
 8012d1a:	2d0a      	cmp	r5, #10
 8012d1c:	d105      	bne.n	8012d2a <__swbuf_r+0x7a>
 8012d1e:	0021      	movs	r1, r4
 8012d20:	0030      	movs	r0, r6
 8012d22:	f7fd fa9d 	bl	8010260 <_fflush_r>
 8012d26:	2800      	cmp	r0, #0
 8012d28:	d107      	bne.n	8012d3a <__swbuf_r+0x8a>
 8012d2a:	0028      	movs	r0, r5
 8012d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d2e:	0021      	movs	r1, r4
 8012d30:	0030      	movs	r0, r6
 8012d32:	f7ff fe53 	bl	80129dc <__swsetup_r>
 8012d36:	2800      	cmp	r0, #0
 8012d38:	d0cd      	beq.n	8012cd6 <__swbuf_r+0x26>
 8012d3a:	2501      	movs	r5, #1
 8012d3c:	426d      	negs	r5, r5
 8012d3e:	e7f4      	b.n	8012d2a <__swbuf_r+0x7a>
 8012d40:	4313      	orrs	r3, r2
 8012d42:	81a3      	strh	r3, [r4, #12]
 8012d44:	4a02      	ldr	r2, [pc, #8]	; (8012d50 <__swbuf_r+0xa0>)
 8012d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d48:	4013      	ands	r3, r2
 8012d4a:	6663      	str	r3, [r4, #100]	; 0x64
 8012d4c:	e7cb      	b.n	8012ce6 <__swbuf_r+0x36>
 8012d4e:	46c0      	nop			; (mov r8, r8)
 8012d50:	ffffdfff 	.word	0xffffdfff

08012d54 <_raise_r>:
 8012d54:	b570      	push	{r4, r5, r6, lr}
 8012d56:	0004      	movs	r4, r0
 8012d58:	000d      	movs	r5, r1
 8012d5a:	291f      	cmp	r1, #31
 8012d5c:	d904      	bls.n	8012d68 <_raise_r+0x14>
 8012d5e:	2316      	movs	r3, #22
 8012d60:	6003      	str	r3, [r0, #0]
 8012d62:	2001      	movs	r0, #1
 8012d64:	4240      	negs	r0, r0
 8012d66:	bd70      	pop	{r4, r5, r6, pc}
 8012d68:	0003      	movs	r3, r0
 8012d6a:	33fc      	adds	r3, #252	; 0xfc
 8012d6c:	69db      	ldr	r3, [r3, #28]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d004      	beq.n	8012d7c <_raise_r+0x28>
 8012d72:	008a      	lsls	r2, r1, #2
 8012d74:	189b      	adds	r3, r3, r2
 8012d76:	681a      	ldr	r2, [r3, #0]
 8012d78:	2a00      	cmp	r2, #0
 8012d7a:	d108      	bne.n	8012d8e <_raise_r+0x3a>
 8012d7c:	0020      	movs	r0, r4
 8012d7e:	f000 f855 	bl	8012e2c <_getpid_r>
 8012d82:	002a      	movs	r2, r5
 8012d84:	0001      	movs	r1, r0
 8012d86:	0020      	movs	r0, r4
 8012d88:	f000 f83e 	bl	8012e08 <_kill_r>
 8012d8c:	e7eb      	b.n	8012d66 <_raise_r+0x12>
 8012d8e:	2000      	movs	r0, #0
 8012d90:	2a01      	cmp	r2, #1
 8012d92:	d0e8      	beq.n	8012d66 <_raise_r+0x12>
 8012d94:	1c51      	adds	r1, r2, #1
 8012d96:	d103      	bne.n	8012da0 <_raise_r+0x4c>
 8012d98:	2316      	movs	r3, #22
 8012d9a:	3001      	adds	r0, #1
 8012d9c:	6023      	str	r3, [r4, #0]
 8012d9e:	e7e2      	b.n	8012d66 <_raise_r+0x12>
 8012da0:	2400      	movs	r4, #0
 8012da2:	0028      	movs	r0, r5
 8012da4:	601c      	str	r4, [r3, #0]
 8012da6:	4790      	blx	r2
 8012da8:	0020      	movs	r0, r4
 8012daa:	e7dc      	b.n	8012d66 <_raise_r+0x12>

08012dac <raise>:
 8012dac:	b510      	push	{r4, lr}
 8012dae:	4b03      	ldr	r3, [pc, #12]	; (8012dbc <raise+0x10>)
 8012db0:	0001      	movs	r1, r0
 8012db2:	6818      	ldr	r0, [r3, #0]
 8012db4:	f7ff ffce 	bl	8012d54 <_raise_r>
 8012db8:	bd10      	pop	{r4, pc}
 8012dba:	46c0      	nop			; (mov r8, r8)
 8012dbc:	200006d8 	.word	0x200006d8

08012dc0 <_fstat_r>:
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	b570      	push	{r4, r5, r6, lr}
 8012dc4:	4d06      	ldr	r5, [pc, #24]	; (8012de0 <_fstat_r+0x20>)
 8012dc6:	0004      	movs	r4, r0
 8012dc8:	0008      	movs	r0, r1
 8012dca:	0011      	movs	r1, r2
 8012dcc:	602b      	str	r3, [r5, #0]
 8012dce:	f7f0 fd02 	bl	80037d6 <_fstat>
 8012dd2:	1c43      	adds	r3, r0, #1
 8012dd4:	d103      	bne.n	8012dde <_fstat_r+0x1e>
 8012dd6:	682b      	ldr	r3, [r5, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d000      	beq.n	8012dde <_fstat_r+0x1e>
 8012ddc:	6023      	str	r3, [r4, #0]
 8012dde:	bd70      	pop	{r4, r5, r6, pc}
 8012de0:	20000d24 	.word	0x20000d24

08012de4 <_isatty_r>:
 8012de4:	2300      	movs	r3, #0
 8012de6:	b570      	push	{r4, r5, r6, lr}
 8012de8:	4d06      	ldr	r5, [pc, #24]	; (8012e04 <_isatty_r+0x20>)
 8012dea:	0004      	movs	r4, r0
 8012dec:	0008      	movs	r0, r1
 8012dee:	602b      	str	r3, [r5, #0]
 8012df0:	f7f0 fcff 	bl	80037f2 <_isatty>
 8012df4:	1c43      	adds	r3, r0, #1
 8012df6:	d103      	bne.n	8012e00 <_isatty_r+0x1c>
 8012df8:	682b      	ldr	r3, [r5, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d000      	beq.n	8012e00 <_isatty_r+0x1c>
 8012dfe:	6023      	str	r3, [r4, #0]
 8012e00:	bd70      	pop	{r4, r5, r6, pc}
 8012e02:	46c0      	nop			; (mov r8, r8)
 8012e04:	20000d24 	.word	0x20000d24

08012e08 <_kill_r>:
 8012e08:	2300      	movs	r3, #0
 8012e0a:	b570      	push	{r4, r5, r6, lr}
 8012e0c:	4d06      	ldr	r5, [pc, #24]	; (8012e28 <_kill_r+0x20>)
 8012e0e:	0004      	movs	r4, r0
 8012e10:	0008      	movs	r0, r1
 8012e12:	0011      	movs	r1, r2
 8012e14:	602b      	str	r3, [r5, #0]
 8012e16:	f7f0 fc7f 	bl	8003718 <_kill>
 8012e1a:	1c43      	adds	r3, r0, #1
 8012e1c:	d103      	bne.n	8012e26 <_kill_r+0x1e>
 8012e1e:	682b      	ldr	r3, [r5, #0]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d000      	beq.n	8012e26 <_kill_r+0x1e>
 8012e24:	6023      	str	r3, [r4, #0]
 8012e26:	bd70      	pop	{r4, r5, r6, pc}
 8012e28:	20000d24 	.word	0x20000d24

08012e2c <_getpid_r>:
 8012e2c:	b510      	push	{r4, lr}
 8012e2e:	f7f0 fc6d 	bl	800370c <_getpid>
 8012e32:	bd10      	pop	{r4, pc}

08012e34 <round>:
 8012e34:	b570      	push	{r4, r5, r6, lr}
 8012e36:	004a      	lsls	r2, r1, #1
 8012e38:	000d      	movs	r5, r1
 8012e3a:	4920      	ldr	r1, [pc, #128]	; (8012ebc <round+0x88>)
 8012e3c:	0d52      	lsrs	r2, r2, #21
 8012e3e:	1851      	adds	r1, r2, r1
 8012e40:	0006      	movs	r6, r0
 8012e42:	2913      	cmp	r1, #19
 8012e44:	dc18      	bgt.n	8012e78 <round+0x44>
 8012e46:	2900      	cmp	r1, #0
 8012e48:	da09      	bge.n	8012e5e <round+0x2a>
 8012e4a:	0feb      	lsrs	r3, r5, #31
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	07db      	lsls	r3, r3, #31
 8012e50:	3101      	adds	r1, #1
 8012e52:	d101      	bne.n	8012e58 <round+0x24>
 8012e54:	491a      	ldr	r1, [pc, #104]	; (8012ec0 <round+0x8c>)
 8012e56:	430b      	orrs	r3, r1
 8012e58:	0019      	movs	r1, r3
 8012e5a:	0010      	movs	r0, r2
 8012e5c:	e017      	b.n	8012e8e <round+0x5a>
 8012e5e:	4c19      	ldr	r4, [pc, #100]	; (8012ec4 <round+0x90>)
 8012e60:	410c      	asrs	r4, r1
 8012e62:	0022      	movs	r2, r4
 8012e64:	402a      	ands	r2, r5
 8012e66:	4302      	orrs	r2, r0
 8012e68:	d013      	beq.n	8012e92 <round+0x5e>
 8012e6a:	2280      	movs	r2, #128	; 0x80
 8012e6c:	0312      	lsls	r2, r2, #12
 8012e6e:	410a      	asrs	r2, r1
 8012e70:	1953      	adds	r3, r2, r5
 8012e72:	43a3      	bics	r3, r4
 8012e74:	2200      	movs	r2, #0
 8012e76:	e7ef      	b.n	8012e58 <round+0x24>
 8012e78:	2933      	cmp	r1, #51	; 0x33
 8012e7a:	dd0d      	ble.n	8012e98 <round+0x64>
 8012e7c:	2380      	movs	r3, #128	; 0x80
 8012e7e:	00db      	lsls	r3, r3, #3
 8012e80:	4299      	cmp	r1, r3
 8012e82:	d106      	bne.n	8012e92 <round+0x5e>
 8012e84:	0002      	movs	r2, r0
 8012e86:	002b      	movs	r3, r5
 8012e88:	0029      	movs	r1, r5
 8012e8a:	f7ed fc95 	bl	80007b8 <__aeabi_dadd>
 8012e8e:	0006      	movs	r6, r0
 8012e90:	000d      	movs	r5, r1
 8012e92:	0030      	movs	r0, r6
 8012e94:	0029      	movs	r1, r5
 8012e96:	bd70      	pop	{r4, r5, r6, pc}
 8012e98:	4c0b      	ldr	r4, [pc, #44]	; (8012ec8 <round+0x94>)
 8012e9a:	1912      	adds	r2, r2, r4
 8012e9c:	2401      	movs	r4, #1
 8012e9e:	4264      	negs	r4, r4
 8012ea0:	40d4      	lsrs	r4, r2
 8012ea2:	4220      	tst	r0, r4
 8012ea4:	d0f5      	beq.n	8012e92 <round+0x5e>
 8012ea6:	2233      	movs	r2, #51	; 0x33
 8012ea8:	1a51      	subs	r1, r2, r1
 8012eaa:	3a32      	subs	r2, #50	; 0x32
 8012eac:	408a      	lsls	r2, r1
 8012eae:	1812      	adds	r2, r2, r0
 8012eb0:	4282      	cmp	r2, r0
 8012eb2:	4180      	sbcs	r0, r0
 8012eb4:	4240      	negs	r0, r0
 8012eb6:	182b      	adds	r3, r5, r0
 8012eb8:	43a2      	bics	r2, r4
 8012eba:	e7cd      	b.n	8012e58 <round+0x24>
 8012ebc:	fffffc01 	.word	0xfffffc01
 8012ec0:	3ff00000 	.word	0x3ff00000
 8012ec4:	000fffff 	.word	0x000fffff
 8012ec8:	fffffbed 	.word	0xfffffbed

08012ecc <_init>:
 8012ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ece:	46c0      	nop			; (mov r8, r8)
 8012ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ed2:	bc08      	pop	{r3}
 8012ed4:	469e      	mov	lr, r3
 8012ed6:	4770      	bx	lr

08012ed8 <_fini>:
 8012ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eda:	46c0      	nop			; (mov r8, r8)
 8012edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ede:	bc08      	pop	{r3}
 8012ee0:	469e      	mov	lr, r3
 8012ee2:	4770      	bx	lr
