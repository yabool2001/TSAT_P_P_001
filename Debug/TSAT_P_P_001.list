
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e34  08012588  08012588  00022588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143bc  080143bc  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  080143bc  080143bc  000243bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143c4  080143c4  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080143c4  080143c4  000243c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080143cc  080143cc  000243cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  080143d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  200006e0  08014ab0  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e48  08014ab0  00030e48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c417  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b00  00000000  00000000  0004cb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  00050668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001462  00000000  00000000  00052070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d9dc  00000000  00000000  000534d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d508  00000000  00000000  00070eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1455  00000000  00000000  0008e3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a7c  00000000  00000000  0013f80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00147288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801256c 	.word	0x0801256c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	0801256c 	.word	0x0801256c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08013e78 	.word	0x08013e78
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f8fd 	bl	80037ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f8ff 	bl	80027b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fb39 	bl	8002c2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fab5 	bl	8002b28 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fa65 	bl	8002a8c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 faff 	bl	8002bc4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c6:	f000 fa23 	bl	8002a10 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ca:	f000 f93f 	bl	800284c <MX_RTC_Init>
  MX_SPI1_Init();
 80025ce:	f000 f9e1 	bl	8002994 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4b5e      	ldr	r3, [pc, #376]	; (800274c <main+0x1a4>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4b5d      	ldr	r3, [pc, #372]	; (800274c <main+0x1a4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4859      	ldr	r0, [pc, #356]	; (8002750 <main+0x1a8>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f004 fb8c 	bl	8006d08 <HAL_UART_Transmit>

  is_system_already_initialized = is_system_initialized () ;
 80025f0:	f000 fd06 	bl	8003000 <is_system_initialized>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	4b56      	ldr	r3, [pc, #344]	; (8002754 <main+0x1ac>)
 80025fa:	701a      	strb	r2, [r3, #0]

  lis2dw12_ctx.write_reg = platform_write ;
 80025fc:	4b56      	ldr	r3, [pc, #344]	; (8002758 <main+0x1b0>)
 80025fe:	4a57      	ldr	r2, [pc, #348]	; (800275c <main+0x1b4>)
 8002600:	601a      	str	r2, [r3, #0]
  lis2dw12_ctx.read_reg = platform_read ;
 8002602:	4b55      	ldr	r3, [pc, #340]	; (8002758 <main+0x1b0>)
 8002604:	4a56      	ldr	r2, [pc, #344]	; (8002760 <main+0x1b8>)
 8002606:	605a      	str	r2, [r3, #4]
  lis2dw12_ctx.handle = LIS2DW12 ;
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <main+0x1b0>)
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <main+0x1bc>)
 800260c:	60da      	str	r2, [r3, #12]
  lis2dw12_device_id_get ( &lis2dw12_ctx , &lis2dw12_whoami_reg ) ;
 800260e:	4a56      	ldr	r2, [pc, #344]	; (8002768 <main+0x1c0>)
 8002610:	4b51      	ldr	r3, [pc, #324]	; (8002758 <main+0x1b0>)
 8002612:	0011      	movs	r1, r2
 8002614:	0018      	movs	r0, r3
 8002616:	f006 ff96 	bl	8009546 <lis2dw12_device_id_get>
  if ( lis2dw12_whoami_reg == LIS2DW12_ID )
 800261a:	4b53      	ldr	r3, [pc, #332]	; (8002768 <main+0x1c0>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b44      	cmp	r3, #68	; 0x44
 8002620:	d104      	bne.n	800262c <main+0x84>
  {
	  send_debug_logs ( lis2dw12_whoami_reg ) ;
 8002622:	4b51      	ldr	r3, [pc, #324]	; (8002768 <main+0x1c0>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fbba 	bl	8002da0 <send_debug_logs>
  }

  if ( !my_astro_init () )
 800262c:	f006 ff9e 	bl	800956c <my_astro_init>
 8002630:	0003      	movs	r3, r0
 8002632:	001a      	movs	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	4053      	eors	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <main+0x9a>
  {
	  HAL_NVIC_SystemReset () ;
 800263e:	f001 fa42 	bl	8003ac6 <HAL_NVIC_SystemReset>
  }

  astro_geo_wr_latitude = 0 ;
 8002642:	4b4a      	ldr	r3, [pc, #296]	; (800276c <main+0x1c4>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
  astro_geo_wr_longitude = 0 ;
 8002648:	4b49      	ldr	r3, [pc, #292]	; (8002770 <main+0x1c8>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
  if ( my_lx6_get_coordinates ( my_lx6_gnss_max_active_time , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 800264e:	4b49      	ldr	r3, [pc, #292]	; (8002774 <main+0x1cc>)
 8002650:	8818      	ldrh	r0, [r3, #0]
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <main+0x1d0>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4945      	ldr	r1, [pc, #276]	; (8002770 <main+0x1c8>)
 800265a:	9102      	str	r1, [sp, #8]
 800265c:	4943      	ldr	r1, [pc, #268]	; (800276c <main+0x1c4>)
 800265e:	9101      	str	r1, [sp, #4]
 8002660:	4946      	ldr	r1, [pc, #280]	; (800277c <main+0x1d4>)
 8002662:	9100      	str	r1, [sp, #0]
 8002664:	f007 f850 	bl	8009708 <my_lx6_get_coordinates>
 8002668:	1e03      	subs	r3, r0, #0
 800266a:	d023      	beq.n	80026b4 <main+0x10c>
  {
	  my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <main+0x1c4>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <main+0x1c8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0019      	movs	r1, r3
 8002676:	0010      	movs	r0, r2
 8002678:	f007 f836 	bl	80096e8 <my_astro_write_coordinates>
	  get_my_rtc_time ( rtc_dt ) ;
 800267c:	4b40      	ldr	r3, [pc, #256]	; (8002780 <main+0x1d8>)
 800267e:	0018      	movs	r0, r3
 8002680:	f007 fa80 	bl	8009b84 <get_my_rtc_time>
	  send_debug_logs ( rtc_dt ) ;
 8002684:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <main+0x1d8>)
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fb8a 	bl	8002da0 <send_debug_logs>
	  if ( nmea_fixed_pdop_d < 100.0 )
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <main+0x1d4>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <main+0x1dc>)
 8002696:	f7fd fedd 	bl	8000454 <__aeabi_dcmplt>
 800269a:	1e03      	subs	r3, r0, #0
 800269c:	d00a      	beq.n	80026b4 <main+0x10c>
	  {
		  snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <main+0x1d4>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4938      	ldr	r1, [pc, #224]	; (8002788 <main+0x1e0>)
 80026a6:	4839      	ldr	r0, [pc, #228]	; (800278c <main+0x1e4>)
 80026a8:	9200      	str	r2, [sp, #0]
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	000a      	movs	r2, r1
 80026ae:	2105      	movs	r1, #5
 80026b0:	f009 f910 	bl	800b8d4 <snprintf>
	  }
  }

  agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 80026b4:	4b36      	ldr	r3, [pc, #216]	; (8002790 <main+0x1e8>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	001a      	movs	r2, r3
 80026ba:	4b36      	ldr	r3, [pc, #216]	; (8002794 <main+0x1ec>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	18d2      	adds	r2, r2, r3
 80026c0:	4b34      	ldr	r3, [pc, #208]	; (8002794 <main+0x1ec>)
 80026c2:	601a      	str	r2, [r3, #0]
  sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds ) ;
 80026c4:	4b32      	ldr	r3, [pc, #200]	; (8002790 <main+0x1e8>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	001c      	movs	r4, r3
 80026ca:	4b32      	ldr	r3, [pc, #200]	; (8002794 <main+0x1ec>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2f      	ldr	r2, [pc, #188]	; (800278c <main+0x1e4>)
 80026d0:	4931      	ldr	r1, [pc, #196]	; (8002798 <main+0x1f0>)
 80026d2:	4832      	ldr	r0, [pc, #200]	; (800279c <main+0x1f4>)
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	0023      	movs	r3, r4
 80026d8:	f009 f930 	bl	800b93c <sprintf>
  sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 80026dc:	4a2f      	ldr	r2, [pc, #188]	; (800279c <main+0x1f4>)
 80026de:	4930      	ldr	r1, [pc, #192]	; (80027a0 <main+0x1f8>)
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <main+0x1fc>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f009 f92a 	bl	800b93c <sprintf>
  send_debug_logs ( astro_payload_log ) ;
 80026e8:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <main+0x1fc>)
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 fb58 	bl	8002da0 <send_debug_logs>
  my_astro_add_payload_2_queue ( payload ) ;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <main+0x1f4>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f006 ff90 	bl	8009618 <my_astro_add_payload_2_queue>
  //HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 80026f8:	f000 fbe2 	bl	8002ec0 <get_systick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <main+0x200>)
 8002700:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if ( is_evt_pin_high() )
 8002702:	f000 fbcb 	bl	8002e9c <is_evt_pin_high>
 8002706:	1e03      	subs	r3, r0, #0
 8002708:	d001      	beq.n	800270e <main+0x166>
	  {
		  my_astro_read_evt_reg () ;
 800270a:	f006 ffad 	bl	8009668 <my_astro_read_evt_reg>
	  }
	  if ( get_systick () - astro_log_loop_timer >  ASTRO_LOG_TIMER )
 800270e:	f000 fbd7 	bl	8002ec0 <get_systick>
 8002712:	0002      	movs	r2, r0
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <main+0x200>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	4a24      	ldr	r2, [pc, #144]	; (80027ac <main+0x204>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d9f0      	bls.n	8002702 <main+0x15a>
	  {
		  my_astro_log ();
 8002720:	f006 ffd8 	bl	80096d4 <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 8002724:	f000 fbcc 	bl	8002ec0 <get_systick>
 8002728:	0002      	movs	r2, r0
 800272a:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <main+0x200>)
 800272c:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <main+0x208>)
 8002730:	881c      	ldrh	r4, [r3, #0]
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <main+0x1f4>)
 8002734:	0018      	movs	r0, r3
 8002736:	f7fd fce5 	bl	8000104 <strlen>
 800273a:	0003      	movs	r3, r0
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <main+0x1f4>)
 8002740:	0019      	movs	r1, r3
 8002742:	0020      	movs	r0, r4
 8002744:	f005 fdd8 	bl	80082f8 <astronode_send_pld_er>
	  if ( is_evt_pin_high() )
 8002748:	e7db      	b.n	8002702 <main+0x15a>
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	20000000 	.word	0x20000000
 8002750:	2000086c 	.word	0x2000086c
 8002754:	20000b2d 	.word	0x20000b2d
 8002758:	20000b1c 	.word	0x20000b1c
 800275c:	0800303d 	.word	0x0800303d
 8002760:	080030ad 	.word	0x080030ad
 8002764:	20000728 	.word	0x20000728
 8002768:	20000b2c 	.word	0x20000b2c
 800276c:	200009a8 	.word	0x200009a8
 8002770:	200009ac 	.word	0x200009ac
 8002774:	20000010 	.word	0x20000010
 8002778:	20000008 	.word	0x20000008
 800277c:	20000018 	.word	0x20000018
 8002780:	20000994 	.word	0x20000994
 8002784:	40590000 	.word	0x40590000
 8002788:	080125a0 	.word	0x080125a0
 800278c:	200009b0 	.word	0x200009b0
 8002790:	200009b6 	.word	0x200009b6
 8002794:	200009b8 	.word	0x200009b8
 8002798:	080125a8 	.word	0x080125a8
 800279c:	200009c4 	.word	0x200009c4
 80027a0:	080125b4 	.word	0x080125b4
 80027a4:	20000a64 	.word	0x20000a64
 80027a8:	200009bc 	.word	0x200009bc
 80027ac:	0000ea60 	.word	0x0000ea60
 80027b0:	200009c0 	.word	0x200009c0

080027b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b093      	sub	sp, #76	; 0x4c
 80027b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ba:	2410      	movs	r4, #16
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	0018      	movs	r0, r3
 80027c0:	2338      	movs	r3, #56	; 0x38
 80027c2:	001a      	movs	r2, r3
 80027c4:	2100      	movs	r1, #0
 80027c6:	f009 f94f 	bl	800ba68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ca:	003b      	movs	r3, r7
 80027cc:	0018      	movs	r0, r3
 80027ce:	2310      	movs	r3, #16
 80027d0:	001a      	movs	r2, r3
 80027d2:	2100      	movs	r1, #0
 80027d4:	f009 f948 	bl	800ba68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	0018      	movs	r0, r3
 80027de:	f001 fbf1 	bl	8003fc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80027e2:	193b      	adds	r3, r7, r4
 80027e4:	220a      	movs	r2, #10
 80027e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027e8:	193b      	adds	r3, r7, r4
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	0052      	lsls	r2, r2, #1
 80027ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80027f0:	0021      	movs	r1, r4
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2201      	movs	r2, #1
 8002802:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800280a:	187b      	adds	r3, r7, r1
 800280c:	0018      	movs	r0, r3
 800280e:	f001 fc25 	bl	800405c <HAL_RCC_OscConfig>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d001      	beq.n	800281a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002816:	f000 fca9 	bl	800316c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800281a:	003b      	movs	r3, r7
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002820:	003b      	movs	r3, r7
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002826:	003b      	movs	r3, r7
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800282c:	003b      	movs	r3, r7
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002832:	003b      	movs	r3, r7
 8002834:	2100      	movs	r1, #0
 8002836:	0018      	movs	r0, r3
 8002838:	f001 ff2a 	bl	8004690 <HAL_RCC_ClockConfig>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002840:	f000 fc94 	bl	800316c <Error_Handler>
  }
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b013      	add	sp, #76	; 0x4c
 800284a:	bd90      	pop	{r4, r7, pc}

0800284c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b090      	sub	sp, #64	; 0x40
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002852:	232c      	movs	r3, #44	; 0x2c
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	0018      	movs	r0, r3
 8002858:	2314      	movs	r3, #20
 800285a:	001a      	movs	r2, r3
 800285c:	2100      	movs	r1, #0
 800285e:	f009 f903 	bl	800ba68 <memset>
  RTC_DateTypeDef sDate = {0};
 8002862:	2328      	movs	r3, #40	; 0x28
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800286a:	003b      	movs	r3, r7
 800286c:	0018      	movs	r0, r3
 800286e:	2328      	movs	r3, #40	; 0x28
 8002870:	001a      	movs	r2, r3
 8002872:	2100      	movs	r1, #0
 8002874:	f009 f8f8 	bl	800ba68 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002878:	4b44      	ldr	r3, [pc, #272]	; (800298c <MX_RTC_Init+0x140>)
 800287a:	4a45      	ldr	r2, [pc, #276]	; (8002990 <MX_RTC_Init+0x144>)
 800287c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800287e:	4b43      	ldr	r3, [pc, #268]	; (800298c <MX_RTC_Init+0x140>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002884:	4b41      	ldr	r3, [pc, #260]	; (800298c <MX_RTC_Init+0x140>)
 8002886:	227f      	movs	r2, #127	; 0x7f
 8002888:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800288a:	4b40      	ldr	r3, [pc, #256]	; (800298c <MX_RTC_Init+0x140>)
 800288c:	22ff      	movs	r2, #255	; 0xff
 800288e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002890:	4b3e      	ldr	r3, [pc, #248]	; (800298c <MX_RTC_Init+0x140>)
 8002892:	2200      	movs	r2, #0
 8002894:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <MX_RTC_Init+0x140>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800289c:	4b3b      	ldr	r3, [pc, #236]	; (800298c <MX_RTC_Init+0x140>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028a2:	4b3a      	ldr	r3, [pc, #232]	; (800298c <MX_RTC_Init+0x140>)
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	05d2      	lsls	r2, r2, #23
 80028a8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80028aa:	4b38      	ldr	r3, [pc, #224]	; (800298c <MX_RTC_Init+0x140>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028b0:	4b36      	ldr	r3, [pc, #216]	; (800298c <MX_RTC_Init+0x140>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f002 fa4e 	bl	8004d54 <HAL_RTC_Init>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d001      	beq.n	80028c0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80028bc:	f000 fc56 	bl	800316c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	2200      	movs	r2, #0
 80028cc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	2200      	movs	r2, #0
 80028d2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028e6:	1879      	adds	r1, r7, r1
 80028e8:	4b28      	ldr	r3, [pc, #160]	; (800298c <MX_RTC_Init+0x140>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	0018      	movs	r0, r3
 80028ee:	f002 fad3 	bl	8004e98 <HAL_RTC_SetTime>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80028f6:	f000 fc39 	bl	800316c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80028fa:	2128      	movs	r1, #40	; 0x28
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	2206      	movs	r2, #6
 8002900:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002902:	187b      	adds	r3, r7, r1
 8002904:	2201      	movs	r2, #1
 8002906:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002908:	187b      	adds	r3, r7, r1
 800290a:	2201      	movs	r2, #1
 800290c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800290e:	187b      	adds	r3, r7, r1
 8002910:	2200      	movs	r2, #0
 8002912:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002914:	1879      	adds	r1, r7, r1
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <MX_RTC_Init+0x140>)
 8002918:	2201      	movs	r2, #1
 800291a:	0018      	movs	r0, r3
 800291c:	f002 fbc0 	bl	80050a0 <HAL_RTC_SetDate>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	d001      	beq.n	8002928 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002924:	f000 fc22 	bl	800316c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002928:	003b      	movs	r3, r7
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800292e:	003b      	movs	r3, r7
 8002930:	2200      	movs	r2, #0
 8002932:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002934:	003b      	movs	r3, r7
 8002936:	2200      	movs	r2, #0
 8002938:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800293a:	003b      	movs	r3, r7
 800293c:	2200      	movs	r2, #0
 800293e:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002940:	003b      	movs	r3, r7
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002946:	003b      	movs	r3, r7
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800294c:	003b      	movs	r3, r7
 800294e:	2200      	movs	r2, #0
 8002950:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002952:	003b      	movs	r3, r7
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002958:	003b      	movs	r3, r7
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800295e:	003b      	movs	r3, r7
 8002960:	2220      	movs	r2, #32
 8002962:	2101      	movs	r1, #1
 8002964:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002966:	003b      	movs	r3, r7
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	0052      	lsls	r2, r2, #1
 800296c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800296e:	0039      	movs	r1, r7
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <MX_RTC_Init+0x140>)
 8002972:	2201      	movs	r2, #1
 8002974:	0018      	movs	r0, r3
 8002976:	f002 fc73 	bl	8005260 <HAL_RTC_SetAlarm>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d001      	beq.n	8002982 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800297e:	f000 fbf5 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b010      	add	sp, #64	; 0x40
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	200006fc 	.word	0x200006fc
 8002990:	40002800 	.word	0x40002800

08002994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <MX_SPI1_Init+0x74>)
 800299a:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <MX_SPI1_Init+0x78>)
 800299c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029a0:	2282      	movs	r2, #130	; 0x82
 80029a2:	0052      	lsls	r2, r2, #1
 80029a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029ae:	22e0      	movs	r2, #224	; 0xe0
 80029b0:	00d2      	lsls	r2, r2, #3
 80029b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029bc:	2200      	movs	r2, #0
 80029be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029dc:	2200      	movs	r2, #0
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029e2:	2207      	movs	r2, #7
 80029e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029ee:	2208      	movs	r2, #8
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <MX_SPI1_Init+0x74>)
 80029f4:	0018      	movs	r0, r3
 80029f6:	f002 feb5 	bl	8005764 <HAL_SPI_Init>
 80029fa:	1e03      	subs	r3, r0, #0
 80029fc:	d001      	beq.n	8002a02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029fe:	f000 fbb5 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000728 	.word	0x20000728
 8002a0c:	40013000 	.word	0x40013000

08002a10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	0018      	movs	r0, r3
 8002a1a:	230c      	movs	r3, #12
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f009 f822 	bl	800ba68 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <MX_TIM6_Init+0x6c>)
 8002a26:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <MX_TIM6_Init+0x70>)
 8002a28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <MX_TIM6_Init+0x6c>)
 8002a2c:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <MX_TIM6_Init+0x74>)
 8002a2e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <MX_TIM6_Init+0x6c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_TIM6_Init+0x6c>)
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <MX_TIM6_Init+0x78>)
 8002a3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <MX_TIM6_Init+0x6c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_TIM6_Init+0x6c>)
 8002a44:	0018      	movs	r0, r3
 8002a46:	f003 fd8f 	bl	8006568 <HAL_TIM_Base_Init>
 8002a4a:	1e03      	subs	r3, r0, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a4e:	f000 fb8d 	bl	800316c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a5e:	1d3a      	adds	r2, r7, #4
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_TIM6_Init+0x6c>)
 8002a62:	0011      	movs	r1, r2
 8002a64:	0018      	movs	r0, r3
 8002a66:	f004 f833 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002a6e:	f000 fb7d 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	2000078c 	.word	0x2000078c
 8002a80:	40001000 	.word	0x40001000
 8002a84:	00003e7f 	.word	0x00003e7f
 8002a88:	000003e7 	.word	0x000003e7

08002a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002a92:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <MX_USART1_UART_Init+0x98>)
 8002a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a96:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002a98:	2296      	movs	r2, #150	; 0x96
 8002a9a:	0192      	lsls	r2, r2, #6
 8002a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ace:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f004 f880 	bl	8006bdc <HAL_UART_Init>
 8002adc:	1e03      	subs	r3, r0, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ae0:	f000 fb44 	bl	800316c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f004 ff4d 	bl	8007988 <HAL_UARTEx_SetTxFifoThreshold>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d001      	beq.n	8002af6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002af2:	f000 fb3b 	bl	800316c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002af8:	2100      	movs	r1, #0
 8002afa:	0018      	movs	r0, r3
 8002afc:	f004 ff84 	bl	8007a08 <HAL_UARTEx_SetRxFifoThreshold>
 8002b00:	1e03      	subs	r3, r0, #0
 8002b02:	d001      	beq.n	8002b08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b04:	f000 fb32 	bl	800316c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <MX_USART1_UART_Init+0x94>)
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f004 ff02 	bl	8007914 <HAL_UARTEx_DisableFifoMode>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d001      	beq.n	8002b18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b14:	f000 fb2a 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	200007d8 	.word	0x200007d8
 8002b24:	40013800 	.word	0x40013800

08002b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b2e:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <MX_USART2_UART_Init+0x98>)
 8002b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b34:	22e1      	movs	r2, #225	; 0xe1
 8002b36:	0252      	lsls	r2, r2, #9
 8002b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b4e:	220c      	movs	r2, #12
 8002b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b64:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b6a:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b72:	0018      	movs	r0, r3
 8002b74:	f004 f832 	bl	8006bdc <HAL_UART_Init>
 8002b78:	1e03      	subs	r3, r0, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b7c:	f000 faf6 	bl	800316c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b82:	2100      	movs	r1, #0
 8002b84:	0018      	movs	r0, r3
 8002b86:	f004 feff 	bl	8007988 <HAL_UARTEx_SetTxFifoThreshold>
 8002b8a:	1e03      	subs	r3, r0, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b8e:	f000 faed 	bl	800316c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002b94:	2100      	movs	r1, #0
 8002b96:	0018      	movs	r0, r3
 8002b98:	f004 ff36 	bl	8007a08 <HAL_UARTEx_SetRxFifoThreshold>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002ba0:	f000 fae4 	bl	800316c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <MX_USART2_UART_Init+0x94>)
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f004 feb4 	bl	8007914 <HAL_UARTEx_DisableFifoMode>
 8002bac:	1e03      	subs	r3, r0, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002bb0:	f000 fadc 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	2000086c 	.word	0x2000086c
 8002bc0:	40004400 	.word	0x40004400

08002bc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <MX_USART3_UART_Init+0x64>)
 8002bcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002bd0:	2296      	movs	r2, #150	; 0x96
 8002bd2:	0192      	lsls	r2, r2, #6
 8002bd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd6:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002bea:	220c      	movs	r2, #12
 8002bec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <MX_USART3_UART_Init+0x60>)
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f003 ffe4 	bl	8006bdc <HAL_UART_Init>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d001      	beq.n	8002c1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c18:	f000 faa8 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	20000900 	.word	0x20000900
 8002c28:	40004800 	.word	0x40004800

08002c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b08b      	sub	sp, #44	; 0x2c
 8002c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c32:	2414      	movs	r4, #20
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	0018      	movs	r0, r3
 8002c38:	2314      	movs	r3, #20
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	f008 ff13 	bl	800ba68 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c42:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c46:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c48:	2104      	movs	r1, #4
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c4e:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	2204      	movs	r2, #4
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5e:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c60:	2120      	movs	r1, #32
 8002c62:	430a      	orrs	r2, r1
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c76:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c7e:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8e:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c90:	2102      	movs	r1, #2
 8002c92:	430a      	orrs	r2, r1
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34
 8002c96:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <MX_GPIO_Init+0x164>)
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002ca2:	2388      	movs	r3, #136	; 0x88
 8002ca4:	015b      	lsls	r3, r3, #5
 8002ca6:	483b      	ldr	r0, [pc, #236]	; (8002d94 <MX_GPIO_Init+0x168>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	0019      	movs	r1, r3
 8002cac:	f001 f96d 	bl	8003f8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8002cb0:	4939      	ldr	r1, [pc, #228]	; (8002d98 <MX_GPIO_Init+0x16c>)
 8002cb2:	23a0      	movs	r3, #160	; 0xa0
 8002cb4:	05db      	lsls	r3, r3, #23
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f001 f966 	bl	8003f8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI1_CS_GPIO_Port, LIS_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	01db      	lsls	r3, r3, #7
 8002cc2:	4836      	ldr	r0, [pc, #216]	; (8002d9c <MX_GPIO_Init+0x170>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	f001 f95f 	bl	8003f8a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L86_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|L86_PWR_SW_Pin;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2288      	movs	r2, #136	; 0x88
 8002cd0:	0152      	lsls	r2, r2, #5
 8002cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd4:	193b      	adds	r3, r7, r4
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <MX_GPIO_Init+0x168>)
 8002cea:	0019      	movs	r1, r3
 8002cec:	0010      	movs	r0, r2
 8002cee:	f000 fefb 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin;
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <MX_GPIO_Init+0x16c>)
 8002cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	193a      	adds	r2, r7, r4
 8002d0c:	23a0      	movs	r3, #160	; 0xa0
 8002d0e:	05db      	lsls	r3, r3, #23
 8002d10:	0011      	movs	r1, r2
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fee8 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LIS_SPI1_CS_Pin;
 8002d18:	0021      	movs	r1, r4
 8002d1a:	187b      	adds	r3, r7, r1
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	01d2      	lsls	r2, r2, #7
 8002d20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d22:	000c      	movs	r4, r1
 8002d24:	193b      	adds	r3, r7, r4
 8002d26:	2201      	movs	r2, #1
 8002d28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	193b      	adds	r3, r7, r4
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	193b      	adds	r3, r7, r4
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIS_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <MX_GPIO_Init+0x170>)
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	0010      	movs	r0, r2
 8002d3e:	f000 fed3 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	0152      	lsls	r2, r2, #5
 8002d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8002d56:	193a      	adds	r2, r7, r4
 8002d58:	23a0      	movs	r3, #160	; 0xa0
 8002d5a:	05db      	lsls	r3, r3, #23
 8002d5c:	0011      	movs	r1, r2
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 fec2 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002d64:	0021      	movs	r1, r4
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	22c0      	movs	r2, #192	; 0xc0
 8002d6a:	0092      	lsls	r2, r2, #2
 8002d6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2288      	movs	r2, #136	; 0x88
 8002d72:	0352      	lsls	r2, r2, #13
 8002d74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <MX_GPIO_Init+0x170>)
 8002d80:	0019      	movs	r1, r3
 8002d82:	0010      	movs	r0, r2
 8002d84:	f000 feb0 	bl	8003ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b00b      	add	sp, #44	; 0x2c
 8002d8e:	bd90      	pop	{r4, r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	50000800 	.word	0x50000800
 8002d98:	00008860 	.word	0x00008860
 8002d9c:	50000400 	.word	0x50000400

08002da0 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7fd f9aa 	bl	8000104 <strlen>
 8002db0:	0003      	movs	r3, r0
 8002db2:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2bfa      	cmp	r3, #250	; 0xfa
 8002db8:	d908      	bls.n	8002dcc <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002dba:	23fa      	movs	r3, #250	; 0xfa
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <send_debug_logs+0x54>)
 8002dc0:	480d      	ldr	r0, [pc, #52]	; (8002df8 <send_debug_logs+0x58>)
 8002dc2:	222a      	movs	r2, #42	; 0x2a
 8002dc4:	f003 ffa0 	bl	8006d08 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002dc8:	23fa      	movs	r3, #250	; 0xfa
 8002dca:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	23fa      	movs	r3, #250	; 0xfa
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4808      	ldr	r0, [pc, #32]	; (8002df8 <send_debug_logs+0x58>)
 8002dd8:	f003 ff96 	bl	8006d08 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002ddc:	23fa      	movs	r3, #250	; 0xfa
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4906      	ldr	r1, [pc, #24]	; (8002dfc <send_debug_logs+0x5c>)
 8002de2:	4805      	ldr	r0, [pc, #20]	; (8002df8 <send_debug_logs+0x58>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	f003 ff8f 	bl	8006d08 <HAL_UART_Transmit>
}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b004      	add	sp, #16
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	080125cc 	.word	0x080125cc
 8002df8:	2000086c 	.word	0x2000086c
 8002dfc:	080125f8 	.word	0x080125f8

08002e00 <reset_astronode>:
void reset_astronode ( void )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	0119      	lsls	r1, r3, #4
 8002e08:	23a0      	movs	r3, #160	; 0xa0
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f001 f8bb 	bl	8003f8a <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002e14:	2001      	movs	r0, #1
 8002e16:	f000 fd4f 	bl	80038b8 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	0119      	lsls	r1, r3, #4
 8002e1e:	23a0      	movs	r3, #160	; 0xa0
 8002e20:	05db      	lsls	r3, r3, #23
 8002e22:	2200      	movs	r2, #0
 8002e24:	0018      	movs	r0, r3
 8002e26:	f001 f8b0 	bl	8003f8a <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002e2a:	20fa      	movs	r0, #250	; 0xfa
 8002e2c:	f000 fd44 	bl	80038b8 <HAL_Delay>
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <send_astronode_request+0x34>)
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7ff ffab 	bl	8002da0 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7ff ffa7 	bl	8002da0 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	23fa      	movs	r3, #250	; 0xfa
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4804      	ldr	r0, [pc, #16]	; (8002e70 <send_astronode_request+0x38>)
 8002e5e:	f003 ff53 	bl	8006d08 <HAL_UART_Transmit>
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b002      	add	sp, #8
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	080125fc 	.word	0x080125fc
 8002e70:	200007d8 	.word	0x200007d8

08002e74 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4806      	ldr	r0, [pc, #24]	; (8002e98 <is_astronode_character_received+0x24>)
 8002e80:	2364      	movs	r3, #100	; 0x64
 8002e82:	2201      	movs	r2, #1
 8002e84:	f003 ffdc 	bl	8006e40 <HAL_UART_Receive>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	425a      	negs	r2, r3
 8002e8c:	4153      	adcs	r3, r2
 8002e8e:	b2db      	uxtb	r3, r3
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	200007d8 	.word	0x200007d8

08002e9c <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	23a0      	movs	r3, #160	; 0xa0
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f001 f850 	bl	8003f50 <HAL_GPIO_ReadPin>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	425a      	negs	r2, r3
 8002eb6:	4153      	adcs	r3, r2
 8002eb8:	b2db      	uxtb	r3, r3
}
 8002eba:	0018      	movs	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002ec4:	f000 fcee 	bl	80038a4 <HAL_GetTick>
 8002ec8:	0003      	movs	r3, r0
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	000a      	movs	r2, r1
 8002eda:	1cbb      	adds	r3, r7, #2
 8002edc:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002ede:	f7ff ffef 	bl	8002ec0 <get_systick>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	1cba      	adds	r2, r7, #2
 8002eea:	8812      	ldrh	r2, [r2, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	419b      	sbcs	r3, r3
 8002ef0:	425b      	negs	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <my_astro_on+0x4c>)
 8002f02:	0018      	movs	r0, r3
 8002f04:	f003 fec0 	bl	8006c88 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	0219      	lsls	r1, r3, #8
 8002f0c:	23a0      	movs	r3, #160	; 0xa0
 8002f0e:	05db      	lsls	r3, r3, #23
 8002f10:	2200      	movs	r2, #0
 8002f12:	0018      	movs	r0, r3
 8002f14:	f001 f839 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	0119      	lsls	r1, r3, #4
 8002f1c:	23a0      	movs	r3, #160	; 0xa0
 8002f1e:	05db      	lsls	r3, r3, #23
 8002f20:	2200      	movs	r2, #0
 8002f22:	0018      	movs	r0, r3
 8002f24:	f001 f831 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002f28:	23a0      	movs	r3, #160	; 0xa0
 8002f2a:	05db      	lsls	r3, r3, #23
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2140      	movs	r1, #64	; 0x40
 8002f30:	0018      	movs	r0, r3
 8002f32:	f001 f82a 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002f36:	2001      	movs	r0, #1
 8002f38:	f000 fcbe 	bl	80038b8 <HAL_Delay>
	MX_USART1_UART_Init () ;
 8002f3c:	f7ff fda6 	bl	8002a8c <MX_USART1_UART_Init>
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	200007d8 	.word	0x200007d8

08002f4c <my_astro_off>:
void my_astro_off ( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002f50:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <my_astro_off+0x48>)
 8002f52:	0018      	movs	r0, r3
 8002f54:	f003 fe98 	bl	8006c88 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	0219      	lsls	r1, r3, #8
 8002f5c:	23a0      	movs	r3, #160	; 0xa0
 8002f5e:	05db      	lsls	r3, r3, #23
 8002f60:	2200      	movs	r2, #0
 8002f62:	0018      	movs	r0, r3
 8002f64:	f001 f811 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	0119      	lsls	r1, r3, #4
 8002f6c:	23a0      	movs	r3, #160	; 0xa0
 8002f6e:	05db      	lsls	r3, r3, #23
 8002f70:	2200      	movs	r2, #0
 8002f72:	0018      	movs	r0, r3
 8002f74:	f001 f809 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f000 fc9d 	bl	80038b8 <HAL_Delay>
	HAL_GPIO_WritePin 	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002f7e:	23a0      	movs	r3, #160	; 0xa0
 8002f80:	05db      	lsls	r3, r3, #23
 8002f82:	2200      	movs	r2, #0
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 ffff 	bl	8003f8a <HAL_GPIO_WritePin>
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	200007d8 	.word	0x200007d8

08002f98 <my_lx6_on>:
void my_lx6_on ( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4808      	ldr	r0, [pc, #32]	; (8002fc4 <my_lx6_on+0x2c>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	f000 fff0 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	015b      	lsls	r3, r3, #5
 8002fae:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <my_lx6_on+0x2c>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	f000 ffe9 	bl	8003f8a <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002fb8:	f7ff fe04 	bl	8002bc4 <MX_USART3_UART_Init>
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	50000800 	.word	0x50000800

08002fc8 <my_lx6_off>:
void my_lx6_off ( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4809      	ldr	r0, [pc, #36]	; (8002ff8 <my_lx6_off+0x30>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	f000 ffd8 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	015b      	lsls	r3, r3, #5
 8002fde:	4806      	ldr	r0, [pc, #24]	; (8002ff8 <my_lx6_off+0x30>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	f000 ffd1 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <my_lx6_off+0x34>)
 8002fea:	0018      	movs	r0, r3
 8002fec:	f003 fe4c 	bl	8006c88 <HAL_UART_DeInit>
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	50000800 	.word	0x50000800
 8002ffc:	20000900 	.word	0x20000900

08003000 <is_system_initialized>:

bool is_system_initialized ( void )
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	yyyy = get_my_rtc_time ( rtc_dt ) ;
 8003006:	1dbc      	adds	r4, r7, #6
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <is_system_initialized+0x34>)
 800300a:	0018      	movs	r0, r3
 800300c:	f006 fdba 	bl	8009b84 <get_my_rtc_time>
 8003010:	0003      	movs	r3, r0
 8003012:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt ) ;
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <is_system_initialized+0x34>)
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff fec2 	bl	8002da0 <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR )
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	4a05      	ldr	r2, [pc, #20]	; (8003038 <is_system_initialized+0x38>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <is_system_initialized+0x2a>
	{
		return true ;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <is_system_initialized+0x2c>
	}
	return false ;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b003      	add	sp, #12
 8003032:	bd90      	pop	{r4, r7, pc}
 8003034:	20000994 	.word	0x20000994
 8003038:	000007e6 	.word	0x000007e6

0800303c <platform_write>:

static int32_t platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 800303c:	b5b0      	push	{r4, r5, r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	0008      	movs	r0, r1
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	0019      	movs	r1, r3
 800304a:	240b      	movs	r4, #11
 800304c:	193b      	adds	r3, r7, r4
 800304e:	1c02      	adds	r2, r0, #0
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	2508      	movs	r5, #8
 8003054:	197b      	adds	r3, r7, r5
 8003056:	1c0a      	adds	r2, r1, #0
 8003058:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	01db      	lsls	r3, r3, #7
 800305e:	4812      	ldr	r0, [pc, #72]	; (80030a8 <platform_write+0x6c>)
 8003060:	2200      	movs	r2, #0
 8003062:	0019      	movs	r1, r3
 8003064:	f000 ff91 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003068:	2014      	movs	r0, #20
 800306a:	f000 fc25 	bl	80038b8 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 800306e:	23fa      	movs	r3, #250	; 0xfa
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	1939      	adds	r1, r7, r4
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f002 fc2c 	bl	80058d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 800307c:	23fa      	movs	r3, #250	; 0xfa
 800307e:	009c      	lsls	r4, r3, #2
 8003080:	197b      	adds	r3, r7, r5
 8003082:	881a      	ldrh	r2, [r3, #0]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	0023      	movs	r3, r4
 800308a:	f002 fc23 	bl	80058d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	01db      	lsls	r3, r3, #7
 8003092:	4805      	ldr	r0, [pc, #20]	; (80030a8 <platform_write+0x6c>)
 8003094:	2201      	movs	r2, #1
 8003096:	0019      	movs	r1, r3
 8003098:	f000 ff77 	bl	8003f8a <HAL_GPIO_WritePin>

	return 0;
 800309c:	2300      	movs	r3, #0
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bdb0      	pop	{r4, r5, r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	50000400 	.word	0x50000400

080030ac <platform_read>:
static int32_t platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 80030ac:	b5b0      	push	{r4, r5, r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	0008      	movs	r0, r1
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	0019      	movs	r1, r3
 80030ba:	240b      	movs	r4, #11
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	1c02      	adds	r2, r0, #0
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	2508      	movs	r5, #8
 80030c4:	197b      	adds	r3, r7, r5
 80030c6:	1c0a      	adds	r2, r1, #0
 80030c8:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	4252      	negs	r2, r2
 80030d2:	4313      	orrs	r3, r2
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	01db      	lsls	r3, r3, #7
 80030de:	4812      	ldr	r0, [pc, #72]	; (8003128 <platform_read+0x7c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	0019      	movs	r1, r3
 80030e4:	f000 ff51 	bl	8003f8a <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80030e8:	2014      	movs	r0, #20
 80030ea:	f000 fbe5 	bl	80038b8 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 80030ee:	23fa      	movs	r3, #250	; 0xfa
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	1939      	adds	r1, r7, r4
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f002 fbec 	bl	80058d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 80030fc:	23fa      	movs	r3, #250	; 0xfa
 80030fe:	009c      	lsls	r4, r3, #2
 8003100:	197b      	adds	r3, r7, r5
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	0023      	movs	r3, r4
 800310a:	f002 fd3b 	bl	8005b84 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	01db      	lsls	r3, r3, #7
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <platform_read+0x7c>)
 8003114:	2201      	movs	r2, #1
 8003116:	0019      	movs	r1, r3
 8003118:	f000 ff37 	bl	8003f8a <HAL_GPIO_WritePin>

	return 0;
 800311c:	2300      	movs	r3, #0
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bdb0      	pop	{r4, r5, r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	50000400 	.word	0x50000400

0800312c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d10d      	bne.n	800315a <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	3301      	adds	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003148:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	23e1      	movs	r3, #225	; 0xe1
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	429a      	cmp	r2, r3
 8003154:	d901      	bls.n	800315a <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 8003156:	f000 fcb6 	bl	8003ac6 <HAL_NVIC_SystemReset>
		  }
	}
}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	46bd      	mov	sp, r7
 800315e:	b002      	add	sp, #8
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	40001000 	.word	0x40001000
 8003168:	200009b6 	.word	0x200009b6

0800316c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003170:	b672      	cpsid	i
}
 8003172:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003174:	e7fe      	b.n	8003174 <Error_Handler+0x8>
	...

08003178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_MspInit+0x44>)
 8003180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <HAL_MspInit+0x44>)
 8003184:	2101      	movs	r1, #1
 8003186:	430a      	orrs	r2, r1
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_MspInit+0x44>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2201      	movs	r2, #1
 8003190:	4013      	ands	r3, r2
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_MspInit+0x44>)
 8003198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_MspInit+0x44>)
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	0549      	lsls	r1, r1, #21
 80031a0:	430a      	orrs	r2, r1
 80031a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_MspInit+0x44>)
 80031a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	055b      	lsls	r3, r3, #21
 80031ac:	4013      	ands	r3, r2
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b002      	add	sp, #8
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	40021000 	.word	0x40021000

080031c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b091      	sub	sp, #68	; 0x44
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031c8:	240c      	movs	r4, #12
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	0018      	movs	r0, r3
 80031ce:	2334      	movs	r3, #52	; 0x34
 80031d0:	001a      	movs	r2, r3
 80031d2:	2100      	movs	r1, #0
 80031d4:	f008 fc48 	bl	800ba68 <memset>
  if(hrtc->Instance==RTC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <HAL_RTC_MspInit+0x74>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d124      	bne.n	800322c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	0292      	lsls	r2, r2, #10
 80031e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80031ea:	193b      	adds	r3, r7, r4
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	0018      	movs	r0, r3
 80031f6:	f001 fbf5 	bl	80049e4 <HAL_RCCEx_PeriphCLKConfig>
 80031fa:	1e03      	subs	r3, r0, #0
 80031fc:	d001      	beq.n	8003202 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80031fe:	f7ff ffb5 	bl	800316c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_RTC_MspInit+0x78>)
 8003204:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_RTC_MspInit+0x78>)
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	0209      	lsls	r1, r1, #8
 800320c:	430a      	orrs	r2, r1
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RTC_MspInit+0x78>)
 8003212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_RTC_MspInit+0x78>)
 8003216:	2180      	movs	r1, #128	; 0x80
 8003218:	00c9      	lsls	r1, r1, #3
 800321a:	430a      	orrs	r2, r1
 800321c:	63da      	str	r2, [r3, #60]	; 0x3c
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RTC_MspInit+0x78>)
 8003220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4013      	ands	r3, r2
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b011      	add	sp, #68	; 0x44
 8003232:	bd90      	pop	{r4, r7, pc}
 8003234:	40002800 	.word	0x40002800
 8003238:	40021000 	.word	0x40021000

0800323c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b08b      	sub	sp, #44	; 0x2c
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	2414      	movs	r4, #20
 8003246:	193b      	adds	r3, r7, r4
 8003248:	0018      	movs	r0, r3
 800324a:	2314      	movs	r3, #20
 800324c:	001a      	movs	r2, r3
 800324e:	2100      	movs	r1, #0
 8003250:	f008 fc0a 	bl	800ba68 <memset>
  if(hspi->Instance==SPI1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_SPI_MspInit+0x8c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d12f      	bne.n	80032be <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800325e:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_SPI_MspInit+0x90>)
 8003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_SPI_MspInit+0x90>)
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0149      	lsls	r1, r1, #5
 8003268:	430a      	orrs	r2, r1
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
 800326c:	4b17      	ldr	r3, [pc, #92]	; (80032cc <HAL_SPI_MspInit+0x90>)
 800326e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	015b      	lsls	r3, r3, #5
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_SPI_MspInit+0x90>)
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <HAL_SPI_MspInit+0x90>)
 8003280:	2102      	movs	r1, #2
 8003282:	430a      	orrs	r2, r1
 8003284:	635a      	str	r2, [r3, #52]	; 0x34
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_SPI_MspInit+0x90>)
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	2202      	movs	r2, #2
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LIS_SPI1_SCK_Pin|LIS_SPI1_MISO_Pin|LIS_SPI1_MOSI_Pin;
 8003292:	0021      	movs	r1, r4
 8003294:	187b      	adds	r3, r7, r1
 8003296:	2238      	movs	r2, #56	; 0x38
 8003298:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	187b      	adds	r3, r7, r1
 800329c:	2202      	movs	r2, #2
 800329e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	187b      	adds	r3, r7, r1
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	2200      	movs	r2, #0
 80032b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	4a06      	ldr	r2, [pc, #24]	; (80032d0 <HAL_SPI_MspInit+0x94>)
 80032b6:	0019      	movs	r1, r3
 80032b8:	0010      	movs	r0, r2
 80032ba:	f000 fc15 	bl	8003ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b00b      	add	sp, #44	; 0x2c
 80032c4:	bd90      	pop	{r4, r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	40013000 	.word	0x40013000
 80032cc:	40021000 	.word	0x40021000
 80032d0:	50000400 	.word	0x50000400

080032d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0d      	ldr	r2, [pc, #52]	; (8003318 <HAL_TIM_Base_MspInit+0x44>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d113      	bne.n	800330e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_TIM_Base_MspInit+0x48>)
 80032e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_TIM_Base_MspInit+0x48>)
 80032ec:	2110      	movs	r1, #16
 80032ee:	430a      	orrs	r2, r1
 80032f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_TIM_Base_MspInit+0x48>)
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	2210      	movs	r2, #16
 80032f8:	4013      	ands	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80032fe:	2200      	movs	r2, #0
 8003300:	2100      	movs	r1, #0
 8003302:	2011      	movs	r0, #17
 8003304:	f000 fbba 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003308:	2011      	movs	r0, #17
 800330a:	f000 fbcc 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40001000 	.word	0x40001000
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b09b      	sub	sp, #108	; 0x6c
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	2354      	movs	r3, #84	; 0x54
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	0018      	movs	r0, r3
 800332e:	2314      	movs	r3, #20
 8003330:	001a      	movs	r2, r3
 8003332:	2100      	movs	r1, #0
 8003334:	f008 fb98 	bl	800ba68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003338:	2420      	movs	r4, #32
 800333a:	193b      	adds	r3, r7, r4
 800333c:	0018      	movs	r0, r3
 800333e:	2334      	movs	r3, #52	; 0x34
 8003340:	001a      	movs	r2, r3
 8003342:	2100      	movs	r1, #0
 8003344:	f008 fb90 	bl	800ba68 <memset>
  if(huart->Instance==USART1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a61      	ldr	r2, [pc, #388]	; (80034d4 <HAL_UART_MspInit+0x1b4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d140      	bne.n	80033d4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003352:	193b      	adds	r3, r7, r4
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003358:	193b      	adds	r3, r7, r4
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800335e:	193b      	adds	r3, r7, r4
 8003360:	0018      	movs	r0, r3
 8003362:	f001 fb3f 	bl	80049e4 <HAL_RCCEx_PeriphCLKConfig>
 8003366:	1e03      	subs	r3, r0, #0
 8003368:	d001      	beq.n	800336e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800336a:	f7ff feff 	bl	800316c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800336e:	4b5a      	ldr	r3, [pc, #360]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 8003370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003372:	4b59      	ldr	r3, [pc, #356]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	01c9      	lsls	r1, r1, #7
 8003378:	430a      	orrs	r2, r1
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
 800337c:	4b56      	ldr	r3, [pc, #344]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 800337e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	01db      	lsls	r3, r3, #7
 8003384:	4013      	ands	r3, r2
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338a:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 8003390:	2101      	movs	r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
 8003396:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	2201      	movs	r2, #1
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 80033a2:	2154      	movs	r1, #84	; 0x54
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	22c0      	movs	r2, #192	; 0xc0
 80033a8:	00d2      	lsls	r2, r2, #3
 80033aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	2202      	movs	r2, #2
 80033b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	187b      	adds	r3, r7, r1
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80033be:	187b      	adds	r3, r7, r1
 80033c0:	2201      	movs	r2, #1
 80033c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	187a      	adds	r2, r7, r1
 80033c6:	23a0      	movs	r3, #160	; 0xa0
 80033c8:	05db      	lsls	r3, r3, #23
 80033ca:	0011      	movs	r1, r2
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 fb8b 	bl	8003ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033d2:	e07b      	b.n	80034cc <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a40      	ldr	r2, [pc, #256]	; (80034dc <HAL_UART_MspInit+0x1bc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d140      	bne.n	8003460 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033de:	2120      	movs	r1, #32
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	2202      	movs	r2, #2
 80033e4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033e6:	187b      	adds	r3, r7, r1
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ec:	187b      	adds	r3, r7, r1
 80033ee:	0018      	movs	r0, r3
 80033f0:	f001 faf8 	bl	80049e4 <HAL_RCCEx_PeriphCLKConfig>
 80033f4:	1e03      	subs	r3, r0, #0
 80033f6:	d001      	beq.n	80033fc <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80033f8:	f7ff feb8 	bl	800316c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 80033fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003400:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	0289      	lsls	r1, r1, #10
 8003406:	430a      	orrs	r2, r1
 8003408:	63da      	str	r2, [r3, #60]	; 0x3c
 800340a:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 800340c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	4013      	ands	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003418:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 800341a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800341c:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 800341e:	2101      	movs	r1, #1
 8003420:	430a      	orrs	r2, r1
 8003422:	635a      	str	r2, [r3, #52]	; 0x34
 8003424:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	2201      	movs	r2, #1
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8003430:	2154      	movs	r1, #84	; 0x54
 8003432:	187b      	adds	r3, r7, r1
 8003434:	220c      	movs	r2, #12
 8003436:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2202      	movs	r2, #2
 800343c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800343e:	187b      	adds	r3, r7, r1
 8003440:	2201      	movs	r2, #1
 8003442:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003444:	187b      	adds	r3, r7, r1
 8003446:	2200      	movs	r2, #0
 8003448:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800344a:	187b      	adds	r3, r7, r1
 800344c:	2201      	movs	r2, #1
 800344e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003450:	187a      	adds	r2, r7, r1
 8003452:	23a0      	movs	r3, #160	; 0xa0
 8003454:	05db      	lsls	r3, r3, #23
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f000 fb45 	bl	8003ae8 <HAL_GPIO_Init>
}
 800345e:	e035      	b.n	80034cc <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1e      	ldr	r2, [pc, #120]	; (80034e0 <HAL_UART_MspInit+0x1c0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d130      	bne.n	80034cc <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 800346c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	02c9      	lsls	r1, r1, #11
 8003474:	430a      	orrs	r2, r1
 8003476:	63da      	str	r2, [r3, #60]	; 0x3c
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 800347a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	02db      	lsls	r3, r3, #11
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 8003488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 800348c:	2104      	movs	r1, #4
 800348e:	430a      	orrs	r2, r1
 8003490:	635a      	str	r2, [r3, #52]	; 0x34
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_UART_MspInit+0x1b8>)
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	2204      	movs	r2, #4
 8003498:	4013      	ands	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 800349e:	2154      	movs	r1, #84	; 0x54
 80034a0:	187b      	adds	r3, r7, r1
 80034a2:	22c0      	movs	r2, #192	; 0xc0
 80034a4:	0112      	lsls	r2, r2, #4
 80034a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	2202      	movs	r2, #2
 80034ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80034ba:	187b      	adds	r3, r7, r1
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <HAL_UART_MspInit+0x1c4>)
 80034c4:	0019      	movs	r1, r3
 80034c6:	0010      	movs	r0, r2
 80034c8:	f000 fb0e 	bl	8003ae8 <HAL_GPIO_Init>
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b01b      	add	sp, #108	; 0x6c
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40004400 	.word	0x40004400
 80034e0:	40004800 	.word	0x40004800
 80034e4:	50000800 	.word	0x50000800

080034e8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <HAL_UART_MspDeInit+0x80>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10e      	bne.n	8003518 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_UART_MspDeInit+0x84>)
 80034fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_UART_MspDeInit+0x84>)
 8003500:	491b      	ldr	r1, [pc, #108]	; (8003570 <HAL_UART_MspDeInit+0x88>)
 8003502:	400a      	ands	r2, r1
 8003504:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 8003506:	23c0      	movs	r3, #192	; 0xc0
 8003508:	00da      	lsls	r2, r3, #3
 800350a:	23a0      	movs	r3, #160	; 0xa0
 800350c:	05db      	lsls	r3, r3, #23
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f000 fc4d 	bl	8003db0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003516:	e023      	b.n	8003560 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a15      	ldr	r2, [pc, #84]	; (8003574 <HAL_UART_MspDeInit+0x8c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d10c      	bne.n	800353c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_UART_MspDeInit+0x84>)
 8003524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_UART_MspDeInit+0x84>)
 8003528:	4913      	ldr	r1, [pc, #76]	; (8003578 <HAL_UART_MspDeInit+0x90>)
 800352a:	400a      	ands	r2, r1
 800352c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 800352e:	23a0      	movs	r3, #160	; 0xa0
 8003530:	05db      	lsls	r3, r3, #23
 8003532:	210c      	movs	r1, #12
 8003534:	0018      	movs	r0, r3
 8003536:	f000 fc3b 	bl	8003db0 <HAL_GPIO_DeInit>
}
 800353a:	e011      	b.n	8003560 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_UART_MspDeInit+0x94>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10c      	bne.n	8003560 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_UART_MspDeInit+0x84>)
 8003548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_UART_MspDeInit+0x84>)
 800354c:	490c      	ldr	r1, [pc, #48]	; (8003580 <HAL_UART_MspDeInit+0x98>)
 800354e:	400a      	ands	r2, r1
 8003550:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 8003552:	23c0      	movs	r3, #192	; 0xc0
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <HAL_UART_MspDeInit+0x9c>)
 8003558:	0019      	movs	r1, r3
 800355a:	0010      	movs	r0, r2
 800355c:	f000 fc28 	bl	8003db0 <HAL_GPIO_DeInit>
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40013800 	.word	0x40013800
 800356c:	40021000 	.word	0x40021000
 8003570:	ffffbfff 	.word	0xffffbfff
 8003574:	40004400 	.word	0x40004400
 8003578:	fffdffff 	.word	0xfffdffff
 800357c:	40004800 	.word	0x40004800
 8003580:	fffbffff 	.word	0xfffbffff
 8003584:	50000800 	.word	0x50000800

08003588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800358c:	e7fe      	b.n	800358c <NMI_Handler+0x4>

0800358e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003592:	e7fe      	b.n	8003592 <HardFault_Handler+0x4>

08003594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ac:	f000 f968 	bl	8003880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80035be:	0018      	movs	r0, r3
 80035c0:	f003 f8b4 	bl	800672c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	2000078c 	.word	0x2000078c

080035d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  return 1;
 80035d4:	2301      	movs	r3, #1
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_kill>:

int _kill(int pid, int sig)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035e6:	f008 faeb 	bl	800bbc0 <__errno>
 80035ea:	0003      	movs	r3, r0
 80035ec:	2216      	movs	r2, #22
 80035ee:	601a      	str	r2, [r3, #0]
  return -1;
 80035f0:	2301      	movs	r3, #1
 80035f2:	425b      	negs	r3, r3
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_exit>:

void _exit (int status)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003604:	2301      	movs	r3, #1
 8003606:	425a      	negs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	0011      	movs	r1, r2
 800360c:	0018      	movs	r0, r3
 800360e:	f7ff ffe5 	bl	80035dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003612:	e7fe      	b.n	8003612 <_exit+0x16>

08003614 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e00a      	b.n	800363c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003626:	e000      	b.n	800362a <_read+0x16>
 8003628:	bf00      	nop
 800362a:	0001      	movs	r1, r0
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	60ba      	str	r2, [r7, #8]
 8003632:	b2ca      	uxtb	r2, r1
 8003634:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	dbf0      	blt.n	8003626 <_read+0x12>
  }

  return len;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b006      	add	sp, #24
 800364c:	bd80      	pop	{r7, pc}

0800364e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e009      	b.n	8003674 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	0018      	movs	r0, r3
 800366a:	e000      	b.n	800366e <_write+0x20>
 800366c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3301      	adds	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	dbf1      	blt.n	8003660 <_write+0x12>
  }
  return len;
 800367c:	687b      	ldr	r3, [r7, #4]
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}

08003686 <_close>:

int _close(int file)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800368e:	2301      	movs	r3, #1
 8003690:	425b      	negs	r3, r3
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}

0800369a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	0192      	lsls	r2, r2, #6
 80036aa:	605a      	str	r2, [r3, #4]
  return 0;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b002      	add	sp, #8
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_isatty>:

int _isatty(int file)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036be:	2301      	movs	r3, #1
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e8:	4a14      	ldr	r2, [pc, #80]	; (800373c <_sbrk+0x5c>)
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <_sbrk+0x60>)
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <_sbrk+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <_sbrk+0x64>)
 80036fe:	4a12      	ldr	r2, [pc, #72]	; (8003748 <_sbrk+0x68>)
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <_sbrk+0x64>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	18d3      	adds	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	429a      	cmp	r2, r3
 800370e:	d207      	bcs.n	8003720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003710:	f008 fa56 	bl	800bbc0 <__errno>
 8003714:	0003      	movs	r3, r0
 8003716:	220c      	movs	r2, #12
 8003718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800371a:	2301      	movs	r3, #1
 800371c:	425b      	negs	r3, r3
 800371e:	e009      	b.n	8003734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <_sbrk+0x64>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <_sbrk+0x64>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	18d2      	adds	r2, r2, r3
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <_sbrk+0x64>)
 8003730:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003732:	68fb      	ldr	r3, [r7, #12]
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b006      	add	sp, #24
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20009000 	.word	0x20009000
 8003740:	00000400 	.word	0x00000400
 8003744:	20000b30 	.word	0x20000b30
 8003748:	20000e48 	.word	0x20000e48

0800374c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003758:	480d      	ldr	r0, [pc, #52]	; (8003790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800375a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800375c:	f7ff fff6 	bl	800374c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003760:	480c      	ldr	r0, [pc, #48]	; (8003794 <LoopForever+0x6>)
  ldr r1, =_edata
 8003762:	490d      	ldr	r1, [pc, #52]	; (8003798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003764:	4a0d      	ldr	r2, [pc, #52]	; (800379c <LoopForever+0xe>)
  movs r3, #0
 8003766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003768:	e002      	b.n	8003770 <LoopCopyDataInit>

0800376a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800376a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800376c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800376e:	3304      	adds	r3, #4

08003770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003774:	d3f9      	bcc.n	800376a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003776:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003778:	4c0a      	ldr	r4, [pc, #40]	; (80037a4 <LoopForever+0x16>)
  movs r3, #0
 800377a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800377c:	e001      	b.n	8003782 <LoopFillZerobss>

0800377e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800377e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003780:	3204      	adds	r2, #4

08003782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003784:	d3fb      	bcc.n	800377e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003786:	f008 fa21 	bl	800bbcc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800378a:	f7fe ff0d 	bl	80025a8 <main>

0800378e <LoopForever>:

LoopForever:
  b LoopForever
 800378e:	e7fe      	b.n	800378e <LoopForever>
  ldr   r0, =_estack
 8003790:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003798:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 800379c:	080143d0 	.word	0x080143d0
  ldr r2, =_sbss
 80037a0:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 80037a4:	20000e48 	.word	0x20000e48

080037a8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037a8:	e7fe      	b.n	80037a8 <ADC1_COMP_IRQHandler>
	...

080037ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_Init+0x3c>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_Init+0x3c>)
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	0049      	lsls	r1, r1, #1
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c6:	2000      	movs	r0, #0
 80037c8:	f000 f810 	bl	80037ec <HAL_InitTick>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e001      	b.n	80037dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7ff fcce 	bl	8003178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037dc:	1dfb      	adds	r3, r7, #7
 80037de:	781b      	ldrb	r3, [r3, #0]
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40022000 	.word	0x40022000

080037ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037f4:	230f      	movs	r3, #15
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_InitTick+0x88>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02b      	beq.n	800385c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_InitTick+0x8c>)
 8003806:	681c      	ldr	r4, [r3, #0]
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_InitTick+0x88>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	0019      	movs	r1, r3
 800380e:	23fa      	movs	r3, #250	; 0xfa
 8003810:	0098      	lsls	r0, r3, #2
 8003812:	f7fc fc93 	bl	800013c <__udivsi3>
 8003816:	0003      	movs	r3, r0
 8003818:	0019      	movs	r1, r3
 800381a:	0020      	movs	r0, r4
 800381c:	f7fc fc8e 	bl	800013c <__udivsi3>
 8003820:	0003      	movs	r3, r0
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f953 	bl	8003ace <HAL_SYSTICK_Config>
 8003828:	1e03      	subs	r3, r0, #0
 800382a:	d112      	bne.n	8003852 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d80a      	bhi.n	8003848 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	2301      	movs	r3, #1
 8003836:	425b      	negs	r3, r3
 8003838:	2200      	movs	r2, #0
 800383a:	0018      	movs	r0, r3
 800383c:	f000 f91e 	bl	8003a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_InitTick+0x90>)
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e00d      	b.n	8003864 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003848:	230f      	movs	r3, #15
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e008      	b.n	8003864 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003852:	230f      	movs	r3, #15
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e003      	b.n	8003864 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800385c:	230f      	movs	r3, #15
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	781b      	ldrb	r3, [r3, #0]
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b005      	add	sp, #20
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	20000028 	.word	0x20000028
 8003878:	20000020 	.word	0x20000020
 800387c:	20000024 	.word	0x20000024

08003880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_IncTick+0x1c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	001a      	movs	r2, r3
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_IncTick+0x20>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	18d2      	adds	r2, r2, r3
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_IncTick+0x20>)
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	20000028 	.word	0x20000028
 80038a0:	20000b34 	.word	0x20000b34

080038a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  return uwTick;
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <HAL_GetTick+0x10>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	20000b34 	.word	0x20000b34

080038b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7ff fff0 	bl	80038a4 <HAL_GetTick>
 80038c4:	0003      	movs	r3, r0
 80038c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	d005      	beq.n	80038de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_Delay+0x44>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	001a      	movs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	f7ff ffe0 	bl	80038a4 <HAL_GetTick>
 80038e4:	0002      	movs	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d8f7      	bhi.n	80038e0 <HAL_Delay+0x28>
  {
  }
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b004      	add	sp, #16
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	20000028 	.word	0x20000028

08003900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	0002      	movs	r2, r0
 8003908:	1dfb      	adds	r3, r7, #7
 800390a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800390c:	1dfb      	adds	r3, r7, #7
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b7f      	cmp	r3, #127	; 0x7f
 8003912:	d809      	bhi.n	8003928 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003914:	1dfb      	adds	r3, r7, #7
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	001a      	movs	r2, r3
 800391a:	231f      	movs	r3, #31
 800391c:	401a      	ands	r2, r3
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <__NVIC_EnableIRQ+0x30>)
 8003920:	2101      	movs	r1, #1
 8003922:	4091      	lsls	r1, r2
 8003924:	000a      	movs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}
 8003930:	e000e100 	.word	0xe000e100

08003934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	0002      	movs	r2, r0
 800393c:	6039      	str	r1, [r7, #0]
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b7f      	cmp	r3, #127	; 0x7f
 8003948:	d828      	bhi.n	800399c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800394a:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <__NVIC_SetPriority+0xd4>)
 800394c:	1dfb      	adds	r3, r7, #7
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b25b      	sxtb	r3, r3
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	33c0      	adds	r3, #192	; 0xc0
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	589b      	ldr	r3, [r3, r2]
 800395a:	1dfa      	adds	r2, r7, #7
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	0011      	movs	r1, r2
 8003960:	2203      	movs	r2, #3
 8003962:	400a      	ands	r2, r1
 8003964:	00d2      	lsls	r2, r2, #3
 8003966:	21ff      	movs	r1, #255	; 0xff
 8003968:	4091      	lsls	r1, r2
 800396a:	000a      	movs	r2, r1
 800396c:	43d2      	mvns	r2, r2
 800396e:	401a      	ands	r2, r3
 8003970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	22ff      	movs	r2, #255	; 0xff
 8003978:	401a      	ands	r2, r3
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	0018      	movs	r0, r3
 8003980:	2303      	movs	r3, #3
 8003982:	4003      	ands	r3, r0
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003988:	481f      	ldr	r0, [pc, #124]	; (8003a08 <__NVIC_SetPriority+0xd4>)
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b25b      	sxtb	r3, r3
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	430a      	orrs	r2, r1
 8003994:	33c0      	adds	r3, #192	; 0xc0
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800399a:	e031      	b.n	8003a00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800399c:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <__NVIC_SetPriority+0xd8>)
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	0019      	movs	r1, r3
 80039a4:	230f      	movs	r3, #15
 80039a6:	400b      	ands	r3, r1
 80039a8:	3b08      	subs	r3, #8
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3306      	adds	r3, #6
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	18d3      	adds	r3, r2, r3
 80039b2:	3304      	adds	r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1dfa      	adds	r2, r7, #7
 80039b8:	7812      	ldrb	r2, [r2, #0]
 80039ba:	0011      	movs	r1, r2
 80039bc:	2203      	movs	r2, #3
 80039be:	400a      	ands	r2, r1
 80039c0:	00d2      	lsls	r2, r2, #3
 80039c2:	21ff      	movs	r1, #255	; 0xff
 80039c4:	4091      	lsls	r1, r2
 80039c6:	000a      	movs	r2, r1
 80039c8:	43d2      	mvns	r2, r2
 80039ca:	401a      	ands	r2, r3
 80039cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	22ff      	movs	r2, #255	; 0xff
 80039d4:	401a      	ands	r2, r3
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	0018      	movs	r0, r3
 80039dc:	2303      	movs	r3, #3
 80039de:	4003      	ands	r3, r0
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039e4:	4809      	ldr	r0, [pc, #36]	; (8003a0c <__NVIC_SetPriority+0xd8>)
 80039e6:	1dfb      	adds	r3, r7, #7
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	001c      	movs	r4, r3
 80039ec:	230f      	movs	r3, #15
 80039ee:	4023      	ands	r3, r4
 80039f0:	3b08      	subs	r3, #8
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	430a      	orrs	r2, r1
 80039f6:	3306      	adds	r3, #6
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	18c3      	adds	r3, r0, r3
 80039fc:	3304      	adds	r3, #4
 80039fe:	601a      	str	r2, [r3, #0]
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b003      	add	sp, #12
 8003a06:	bd90      	pop	{r4, r7, pc}
 8003a08:	e000e100 	.word	0xe000e100
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a14:	f3bf 8f4f 	dsb	sy
}
 8003a18:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a1a:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <__NVIC_SystemReset+0x1c>)
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <__NVIC_SystemReset+0x20>)
 8003a1e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a20:	f3bf 8f4f 	dsb	sy
}
 8003a24:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	e7fd      	b.n	8003a26 <__NVIC_SystemReset+0x16>
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	e000ed00 	.word	0xe000ed00
 8003a30:	05fa0004 	.word	0x05fa0004

08003a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	1e5a      	subs	r2, r3, #1
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	045b      	lsls	r3, r3, #17
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d301      	bcc.n	8003a4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e010      	b.n	8003a6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <SysTick_Config+0x44>)
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	3a01      	subs	r2, #1
 8003a52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a54:	2301      	movs	r3, #1
 8003a56:	425b      	negs	r3, r3
 8003a58:	2103      	movs	r1, #3
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff ff6a 	bl	8003934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <SysTick_Config+0x44>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <SysTick_Config+0x44>)
 8003a68:	2207      	movs	r2, #7
 8003a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b002      	add	sp, #8
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	e000e010 	.word	0xe000e010

08003a7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	210f      	movs	r1, #15
 8003a88:	187b      	adds	r3, r7, r1
 8003a8a:	1c02      	adds	r2, r0, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	0011      	movs	r1, r2
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7ff ff4b 	bl	8003934 <__NVIC_SetPriority>
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	0002      	movs	r2, r0
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab2:	1dfb      	adds	r3, r7, #7
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7ff ff21 	bl	8003900 <__NVIC_EnableIRQ>
}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b002      	add	sp, #8
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003aca:	f7ff ffa1 	bl	8003a10 <__NVIC_SystemReset>

08003ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7ff ffab 	bl	8003a34 <SysTick_Config>
 8003ade:	0003      	movs	r3, r0
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af6:	e147      	b.n	8003d88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4091      	lsls	r1, r2
 8003b02:	000a      	movs	r2, r1
 8003b04:	4013      	ands	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d100      	bne.n	8003b10 <HAL_GPIO_Init+0x28>
 8003b0e:	e138      	b.n	8003d82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d005      	beq.n	8003b28 <HAL_GPIO_Init+0x40>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2203      	movs	r2, #3
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d130      	bne.n	8003b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	409a      	lsls	r2, r3
 8003b36:	0013      	movs	r3, r2
 8003b38:	43da      	mvns	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b5e:	2201      	movs	r2, #1
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	409a      	lsls	r2, r3
 8003b64:	0013      	movs	r3, r2
 8003b66:	43da      	mvns	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	2201      	movs	r2, #1
 8003b76:	401a      	ands	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	0013      	movs	r3, r2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d017      	beq.n	8003bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	0013      	movs	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d123      	bne.n	8003c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	08da      	lsrs	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3208      	adds	r2, #8
 8003bda:	0092      	lsls	r2, r2, #2
 8003bdc:	58d3      	ldr	r3, [r2, r3]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2207      	movs	r2, #7
 8003be4:	4013      	ands	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	220f      	movs	r2, #15
 8003bea:	409a      	lsls	r2, r3
 8003bec:	0013      	movs	r3, r2
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2107      	movs	r1, #7
 8003bfe:	400b      	ands	r3, r1
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	409a      	lsls	r2, r3
 8003c04:	0013      	movs	r3, r2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	08da      	lsrs	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3208      	adds	r2, #8
 8003c14:	0092      	lsls	r2, r2, #2
 8003c16:	6939      	ldr	r1, [r7, #16]
 8003c18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	2203      	movs	r2, #3
 8003c26:	409a      	lsls	r2, r3
 8003c28:	0013      	movs	r3, r2
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2203      	movs	r2, #3
 8003c38:	401a      	ands	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	0013      	movs	r3, r2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	23c0      	movs	r3, #192	; 0xc0
 8003c54:	029b      	lsls	r3, r3, #10
 8003c56:	4013      	ands	r3, r2
 8003c58:	d100      	bne.n	8003c5c <HAL_GPIO_Init+0x174>
 8003c5a:	e092      	b.n	8003d82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c5c:	4a50      	ldr	r2, [pc, #320]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	3318      	adds	r3, #24
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	589b      	ldr	r3, [r3, r2]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	4013      	ands	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	220f      	movs	r2, #15
 8003c74:	409a      	lsls	r2, r3
 8003c76:	0013      	movs	r3, r2
 8003c78:	43da      	mvns	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	23a0      	movs	r3, #160	; 0xa0
 8003c84:	05db      	lsls	r3, r3, #23
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d013      	beq.n	8003cb2 <HAL_GPIO_Init+0x1ca>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a45      	ldr	r2, [pc, #276]	; (8003da4 <HAL_GPIO_Init+0x2bc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00d      	beq.n	8003cae <HAL_GPIO_Init+0x1c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a44      	ldr	r2, [pc, #272]	; (8003da8 <HAL_GPIO_Init+0x2c0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <HAL_GPIO_Init+0x1c2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a43      	ldr	r2, [pc, #268]	; (8003dac <HAL_GPIO_Init+0x2c4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_GPIO_Init+0x1be>
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e006      	b.n	8003cb4 <HAL_GPIO_Init+0x1cc>
 8003ca6:	2305      	movs	r3, #5
 8003ca8:	e004      	b.n	8003cb4 <HAL_GPIO_Init+0x1cc>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e002      	b.n	8003cb4 <HAL_GPIO_Init+0x1cc>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_GPIO_Init+0x1cc>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	400a      	ands	r2, r1
 8003cba:	00d2      	lsls	r2, r2, #3
 8003cbc:	4093      	lsls	r3, r2
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003cc4:	4936      	ldr	r1, [pc, #216]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	3318      	adds	r3, #24
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cd2:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	035b      	lsls	r3, r3, #13
 8003cea:	4013      	ands	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cf6:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003cfc:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	43da      	mvns	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	039b      	lsls	r3, r3, #14
 8003d14:	4013      	ands	r3, r2
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d20:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d26:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d28:	2384      	movs	r3, #132	; 0x84
 8003d2a:	58d3      	ldr	r3, [r2, r3]
 8003d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	029b      	lsls	r3, r3, #10
 8003d40:	4013      	ands	r3, r2
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d4c:	4914      	ldr	r1, [pc, #80]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d4e:	2284      	movs	r2, #132	; 0x84
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d54:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	58d3      	ldr	r3, [r2, r3]
 8003d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	025b      	lsls	r3, r3, #9
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d7a:	4909      	ldr	r1, [pc, #36]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3301      	adds	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	40da      	lsrs	r2, r3
 8003d90:	1e13      	subs	r3, r2, #0
 8003d92:	d000      	beq.n	8003d96 <HAL_GPIO_Init+0x2ae>
 8003d94:	e6b0      	b.n	8003af8 <HAL_GPIO_Init+0x10>
  }
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b006      	add	sp, #24
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021800 	.word	0x40021800
 8003da4:	50000400 	.word	0x50000400
 8003da8:	50000800 	.word	0x50000800
 8003dac:	50000c00 	.word	0x50000c00

08003db0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003dbe:	e0b4      	b.n	8003f2a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d100      	bne.n	8003dd4 <HAL_GPIO_DeInit+0x24>
 8003dd2:	e0a7      	b.n	8003f24 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003dd4:	4a5a      	ldr	r2, [pc, #360]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3318      	adds	r3, #24
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	589b      	ldr	r3, [r3, r2]
 8003de0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2203      	movs	r2, #3
 8003de6:	4013      	ands	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	220f      	movs	r2, #15
 8003dec:	409a      	lsls	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	23a0      	movs	r3, #160	; 0xa0
 8003df8:	05db      	lsls	r3, r3, #23
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d013      	beq.n	8003e26 <HAL_GPIO_DeInit+0x76>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a50      	ldr	r2, [pc, #320]	; (8003f44 <HAL_GPIO_DeInit+0x194>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00d      	beq.n	8003e22 <HAL_GPIO_DeInit+0x72>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4f      	ldr	r2, [pc, #316]	; (8003f48 <HAL_GPIO_DeInit+0x198>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <HAL_GPIO_DeInit+0x6e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4e      	ldr	r2, [pc, #312]	; (8003f4c <HAL_GPIO_DeInit+0x19c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d101      	bne.n	8003e1a <HAL_GPIO_DeInit+0x6a>
 8003e16:	2303      	movs	r3, #3
 8003e18:	e006      	b.n	8003e28 <HAL_GPIO_DeInit+0x78>
 8003e1a:	2305      	movs	r3, #5
 8003e1c:	e004      	b.n	8003e28 <HAL_GPIO_DeInit+0x78>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_DeInit+0x78>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_GPIO_DeInit+0x78>
 8003e26:	2300      	movs	r3, #0
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	00d2      	lsls	r2, r2, #3
 8003e30:	4093      	lsls	r3, r2
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d136      	bne.n	8003ea6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e38:	4a41      	ldr	r2, [pc, #260]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	58d3      	ldr	r3, [r2, r3]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	43d2      	mvns	r2, r2
 8003e42:	493f      	ldr	r1, [pc, #252]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003e4a:	4a3d      	ldr	r2, [pc, #244]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e4c:	2384      	movs	r3, #132	; 0x84
 8003e4e:	58d3      	ldr	r3, [r2, r3]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	43d2      	mvns	r2, r2
 8003e54:	493a      	ldr	r1, [pc, #232]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	2284      	movs	r2, #132	; 0x84
 8003e5a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003e5c:	4b38      	ldr	r3, [pc, #224]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43d9      	mvns	r1, r3
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e66:	400a      	ands	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e6a:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	43d9      	mvns	r1, r3
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	220f      	movs	r2, #15
 8003e82:	409a      	lsls	r2, r3
 8003e84:	0013      	movs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003e88:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	3318      	adds	r3, #24
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	589a      	ldr	r2, [r3, r2]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43d9      	mvns	r1, r3
 8003e98:	4829      	ldr	r0, [pc, #164]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	2103      	movs	r1, #3
 8003eb0:	4099      	lsls	r1, r3
 8003eb2:	000b      	movs	r3, r1
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	08da      	lsrs	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3208      	adds	r2, #8
 8003ec2:	0092      	lsls	r2, r2, #2
 8003ec4:	58d3      	ldr	r3, [r2, r3]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	2107      	movs	r1, #7
 8003eca:	400a      	ands	r2, r1
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	210f      	movs	r1, #15
 8003ed0:	4091      	lsls	r1, r2
 8003ed2:	000a      	movs	r2, r1
 8003ed4:	43d1      	mvns	r1, r2
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	08d2      	lsrs	r2, r2, #3
 8003eda:	4019      	ands	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3208      	adds	r2, #8
 8003ee0:	0092      	lsls	r2, r2, #2
 8003ee2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	0052      	lsls	r2, r2, #1
 8003eec:	2103      	movs	r1, #3
 8003eee:	4091      	lsls	r1, r2
 8003ef0:	000a      	movs	r2, r1
 8003ef2:	43d2      	mvns	r2, r2
 8003ef4:	401a      	ands	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2101      	movs	r1, #1
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4091      	lsls	r1, r2
 8003f04:	000a      	movs	r2, r1
 8003f06:	43d2      	mvns	r2, r2
 8003f08:	401a      	ands	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	0052      	lsls	r2, r2, #1
 8003f16:	2103      	movs	r1, #3
 8003f18:	4091      	lsls	r1, r2
 8003f1a:	000a      	movs	r2, r1
 8003f1c:	43d2      	mvns	r2, r2
 8003f1e:	401a      	ands	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3301      	adds	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	40da      	lsrs	r2, r3
 8003f30:	1e13      	subs	r3, r2, #0
 8003f32:	d000      	beq.n	8003f36 <HAL_GPIO_DeInit+0x186>
 8003f34:	e744      	b.n	8003dc0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b006      	add	sp, #24
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021800 	.word	0x40021800
 8003f44:	50000400 	.word	0x50000400
 8003f48:	50000800 	.word	0x50000800
 8003f4c:	50000c00 	.word	0x50000c00

08003f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	000a      	movs	r2, r1
 8003f5a:	1cbb      	adds	r3, r7, #2
 8003f5c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	1cba      	adds	r2, r7, #2
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	4013      	ands	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003f6a:	230f      	movs	r3, #15
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	e003      	b.n	8003f7c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f74:	230f      	movs	r3, #15
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003f7c:	230f      	movs	r3, #15
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	781b      	ldrb	r3, [r3, #0]
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b004      	add	sp, #16
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	0008      	movs	r0, r1
 8003f94:	0011      	movs	r1, r2
 8003f96:	1cbb      	adds	r3, r7, #2
 8003f98:	1c02      	adds	r2, r0, #0
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	1c7b      	adds	r3, r7, #1
 8003f9e:	1c0a      	adds	r2, r1, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fa2:	1c7b      	adds	r3, r7, #1
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d004      	beq.n	8003fb4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003faa:	1cbb      	adds	r3, r7, #2
 8003fac:	881a      	ldrh	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb2:	e003      	b.n	8003fbc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fb4:	1cbb      	adds	r3, r7, #2
 8003fb6:	881a      	ldrh	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003fcc:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d11f      	bne.n	8004028 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	0013      	movs	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	189b      	adds	r3, r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4912      	ldr	r1, [pc, #72]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7fc f8a0 	bl	800013c <__udivsi3>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004002:	e008      	b.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b01      	subs	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e001      	b.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e009      	b.n	800402a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	401a      	ands	r2, r3
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	429a      	cmp	r2, r3
 8004026:	d0ed      	beq.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	0018      	movs	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	b004      	add	sp, #16
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	40007000 	.word	0x40007000
 8004038:	fffff9ff 	.word	0xfffff9ff
 800403c:	20000020 	.word	0x20000020
 8004040:	000f4240 	.word	0x000f4240

08004044 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <LL_RCC_GetAPB1Prescaler+0x14>)
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	23e0      	movs	r3, #224	; 0xe0
 800404e:	01db      	lsls	r3, r3, #7
 8004050:	4013      	ands	r3, r2
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000

0800405c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e2fe      	b.n	800466c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2201      	movs	r2, #1
 8004074:	4013      	ands	r3, r2
 8004076:	d100      	bne.n	800407a <HAL_RCC_OscConfig+0x1e>
 8004078:	e07c      	b.n	8004174 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407a:	4bc3      	ldr	r3, [pc, #780]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2238      	movs	r2, #56	; 0x38
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004084:	4bc0      	ldr	r3, [pc, #768]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2203      	movs	r2, #3
 800408a:	4013      	ands	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b10      	cmp	r3, #16
 8004092:	d102      	bne.n	800409a <HAL_RCC_OscConfig+0x3e>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d10b      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	4bb9      	ldr	r3, [pc, #740]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	029b      	lsls	r3, r3, #10
 80040a8:	4013      	ands	r3, r2
 80040aa:	d062      	beq.n	8004172 <HAL_RCC_OscConfig+0x116>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d15e      	bne.n	8004172 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e2d9      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	025b      	lsls	r3, r3, #9
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_OscConfig+0x78>
 80040c4:	4bb0      	ldr	r3, [pc, #704]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4baf      	ldr	r3, [pc, #700]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80040ca:	2180      	movs	r1, #128	; 0x80
 80040cc:	0249      	lsls	r1, r1, #9
 80040ce:	430a      	orrs	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e020      	b.n	8004116 <HAL_RCC_OscConfig+0xba>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	23a0      	movs	r3, #160	; 0xa0
 80040da:	02db      	lsls	r3, r3, #11
 80040dc:	429a      	cmp	r2, r3
 80040de:	d10e      	bne.n	80040fe <HAL_RCC_OscConfig+0xa2>
 80040e0:	4ba9      	ldr	r3, [pc, #676]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4ba8      	ldr	r3, [pc, #672]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	02c9      	lsls	r1, r1, #11
 80040ea:	430a      	orrs	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	4ba6      	ldr	r3, [pc, #664]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4ba5      	ldr	r3, [pc, #660]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	0249      	lsls	r1, r1, #9
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e00b      	b.n	8004116 <HAL_RCC_OscConfig+0xba>
 80040fe:	4ba2      	ldr	r3, [pc, #648]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4ba1      	ldr	r3, [pc, #644]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004104:	49a1      	ldr	r1, [pc, #644]	; (800438c <HAL_RCC_OscConfig+0x330>)
 8004106:	400a      	ands	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	4b9f      	ldr	r3, [pc, #636]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b9e      	ldr	r3, [pc, #632]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004110:	499f      	ldr	r1, [pc, #636]	; (8004390 <HAL_RCC_OscConfig+0x334>)
 8004112:	400a      	ands	r2, r1
 8004114:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d014      	beq.n	8004148 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7ff fbc1 	bl	80038a4 <HAL_GetTick>
 8004122:	0003      	movs	r3, r0
 8004124:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7ff fbbc 	bl	80038a4 <HAL_GetTick>
 800412c:	0002      	movs	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e298      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413a:	4b93      	ldr	r3, [pc, #588]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	029b      	lsls	r3, r3, #10
 8004142:	4013      	ands	r3, r2
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0xcc>
 8004146:	e015      	b.n	8004174 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7ff fbac 	bl	80038a4 <HAL_GetTick>
 800414c:	0003      	movs	r3, r0
 800414e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004152:	f7ff fba7 	bl	80038a4 <HAL_GetTick>
 8004156:	0002      	movs	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b64      	cmp	r3, #100	; 0x64
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e283      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004164:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	029b      	lsls	r3, r3, #10
 800416c:	4013      	ands	r3, r2
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0xf6>
 8004170:	e000      	b.n	8004174 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004172:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2202      	movs	r2, #2
 800417a:	4013      	ands	r3, r2
 800417c:	d100      	bne.n	8004180 <HAL_RCC_OscConfig+0x124>
 800417e:	e099      	b.n	80042b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004180:	4b81      	ldr	r3, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2238      	movs	r2, #56	; 0x38
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418a:	4b7f      	ldr	r3, [pc, #508]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2203      	movs	r2, #3
 8004190:	4013      	ands	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b10      	cmp	r3, #16
 8004198:	d102      	bne.n	80041a0 <HAL_RCC_OscConfig+0x144>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d002      	beq.n	80041a6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d135      	bne.n	8004212 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a6:	4b78      	ldr	r3, [pc, #480]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4013      	ands	r3, r2
 80041b0:	d005      	beq.n	80041be <HAL_RCC_OscConfig+0x162>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e256      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041be:	4b72      	ldr	r3, [pc, #456]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4a74      	ldr	r2, [pc, #464]	; (8004394 <HAL_RCC_OscConfig+0x338>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	0019      	movs	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	021a      	lsls	r2, r3, #8
 80041ce:	4b6e      	ldr	r3, [pc, #440]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d112      	bne.n	8004200 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041da:	4b6b      	ldr	r3, [pc, #428]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a6e      	ldr	r2, [pc, #440]	; (8004398 <HAL_RCC_OscConfig+0x33c>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	4b67      	ldr	r3, [pc, #412]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80041ea:	430a      	orrs	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80041ee:	4b66      	ldr	r3, [pc, #408]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	0adb      	lsrs	r3, r3, #11
 80041f4:	2207      	movs	r2, #7
 80041f6:	4013      	ands	r3, r2
 80041f8:	4a68      	ldr	r2, [pc, #416]	; (800439c <HAL_RCC_OscConfig+0x340>)
 80041fa:	40da      	lsrs	r2, r3
 80041fc:	4b68      	ldr	r3, [pc, #416]	; (80043a0 <HAL_RCC_OscConfig+0x344>)
 80041fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004200:	4b68      	ldr	r3, [pc, #416]	; (80043a4 <HAL_RCC_OscConfig+0x348>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0018      	movs	r0, r3
 8004206:	f7ff faf1 	bl	80037ec <HAL_InitTick>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d051      	beq.n	80042b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e22c      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d030      	beq.n	800427c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800421a:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a5e      	ldr	r2, [pc, #376]	; (8004398 <HAL_RCC_OscConfig+0x33c>)
 8004220:	4013      	ands	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	4b57      	ldr	r3, [pc, #348]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800422e:	4b56      	ldr	r3, [pc, #344]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b55      	ldr	r3, [pc, #340]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	0049      	lsls	r1, r1, #1
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7ff fb32 	bl	80038a4 <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004246:	f7ff fb2d 	bl	80038a4 <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e209      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004258:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4013      	ands	r3, r2
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b48      	ldr	r3, [pc, #288]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a4a      	ldr	r2, [pc, #296]	; (8004394 <HAL_RCC_OscConfig+0x338>)
 800426a:	4013      	ands	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	4b44      	ldr	r3, [pc, #272]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	e01b      	b.n	80042b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800427c:	4b42      	ldr	r3, [pc, #264]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004282:	4949      	ldr	r1, [pc, #292]	; (80043a8 <HAL_RCC_OscConfig+0x34c>)
 8004284:	400a      	ands	r2, r1
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7ff fb0c 	bl	80038a4 <HAL_GetTick>
 800428c:	0003      	movs	r3, r0
 800428e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004292:	f7ff fb07 	bl	80038a4 <HAL_GetTick>
 8004296:	0002      	movs	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e1e3      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042a4:	4b38      	ldr	r3, [pc, #224]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4013      	ands	r3, r2
 80042ae:	d1f0      	bne.n	8004292 <HAL_RCC_OscConfig+0x236>
 80042b0:	e000      	b.n	80042b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2208      	movs	r2, #8
 80042ba:	4013      	ands	r3, r2
 80042bc:	d047      	beq.n	800434e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042be:	4b32      	ldr	r3, [pc, #200]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2238      	movs	r2, #56	; 0x38
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b18      	cmp	r3, #24
 80042c8:	d10a      	bne.n	80042e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80042ca:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80042cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ce:	2202      	movs	r2, #2
 80042d0:	4013      	ands	r3, r2
 80042d2:	d03c      	beq.n	800434e <HAL_RCC_OscConfig+0x2f2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d138      	bne.n	800434e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e1c5      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d019      	beq.n	800431c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80042e8:	4b27      	ldr	r3, [pc, #156]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80042ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042ec:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 80042ee:	2101      	movs	r1, #1
 80042f0:	430a      	orrs	r2, r1
 80042f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7ff fad6 	bl	80038a4 <HAL_GetTick>
 80042f8:	0003      	movs	r3, r0
 80042fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fe:	f7ff fad1 	bl	80038a4 <HAL_GetTick>
 8004302:	0002      	movs	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e1ad      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004314:	2202      	movs	r2, #2
 8004316:	4013      	ands	r3, r2
 8004318:	d0f1      	beq.n	80042fe <HAL_RCC_OscConfig+0x2a2>
 800431a:	e018      	b.n	800434e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 800431e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004322:	2101      	movs	r1, #1
 8004324:	438a      	bics	r2, r1
 8004326:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7ff fabc 	bl	80038a4 <HAL_GetTick>
 800432c:	0003      	movs	r3, r0
 800432e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004332:	f7ff fab7 	bl	80038a4 <HAL_GetTick>
 8004336:	0002      	movs	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e193      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004348:	2202      	movs	r2, #2
 800434a:	4013      	ands	r3, r2
 800434c:	d1f1      	bne.n	8004332 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2204      	movs	r2, #4
 8004354:	4013      	ands	r3, r2
 8004356:	d100      	bne.n	800435a <HAL_RCC_OscConfig+0x2fe>
 8004358:	e0c6      	b.n	80044e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435a:	231f      	movs	r3, #31
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2238      	movs	r2, #56	; 0x38
 8004368:	4013      	ands	r3, r2
 800436a:	2b20      	cmp	r3, #32
 800436c:	d11e      	bne.n	80043ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_RCC_OscConfig+0x32c>)
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	2202      	movs	r2, #2
 8004374:	4013      	ands	r3, r2
 8004376:	d100      	bne.n	800437a <HAL_RCC_OscConfig+0x31e>
 8004378:	e0b6      	b.n	80044e8 <HAL_RCC_OscConfig+0x48c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d000      	beq.n	8004384 <HAL_RCC_OscConfig+0x328>
 8004382:	e0b1      	b.n	80044e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e171      	b.n	800466c <HAL_RCC_OscConfig+0x610>
 8004388:	40021000 	.word	0x40021000
 800438c:	fffeffff 	.word	0xfffeffff
 8004390:	fffbffff 	.word	0xfffbffff
 8004394:	ffff80ff 	.word	0xffff80ff
 8004398:	ffffc7ff 	.word	0xffffc7ff
 800439c:	00f42400 	.word	0x00f42400
 80043a0:	20000020 	.word	0x20000020
 80043a4:	20000024 	.word	0x20000024
 80043a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ac:	4bb1      	ldr	r3, [pc, #708]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80043ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	055b      	lsls	r3, r3, #21
 80043b4:	4013      	ands	r3, r2
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_OscConfig+0x360>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x362>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d011      	beq.n	80043e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	4bac      	ldr	r3, [pc, #688]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80043c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c6:	4bab      	ldr	r3, [pc, #684]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	0549      	lsls	r1, r1, #21
 80043cc:	430a      	orrs	r2, r1
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80043d0:	4ba8      	ldr	r3, [pc, #672]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80043d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	055b      	lsls	r3, r3, #21
 80043d8:	4013      	ands	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80043de:	231f      	movs	r3, #31
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e6:	4ba4      	ldr	r3, [pc, #656]	; (8004678 <HAL_RCC_OscConfig+0x61c>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4013      	ands	r3, r2
 80043f0:	d11a      	bne.n	8004428 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f2:	4ba1      	ldr	r3, [pc, #644]	; (8004678 <HAL_RCC_OscConfig+0x61c>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4ba0      	ldr	r3, [pc, #640]	; (8004678 <HAL_RCC_OscConfig+0x61c>)
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	0049      	lsls	r1, r1, #1
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004400:	f7ff fa50 	bl	80038a4 <HAL_GetTick>
 8004404:	0003      	movs	r3, r0
 8004406:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440a:	f7ff fa4b 	bl	80038a4 <HAL_GetTick>
 800440e:	0002      	movs	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e127      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800441c:	4b96      	ldr	r3, [pc, #600]	; (8004678 <HAL_RCC_OscConfig+0x61c>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4013      	ands	r3, r2
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d106      	bne.n	800443e <HAL_RCC_OscConfig+0x3e2>
 8004430:	4b90      	ldr	r3, [pc, #576]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004434:	4b8f      	ldr	r3, [pc, #572]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004436:	2101      	movs	r1, #1
 8004438:	430a      	orrs	r2, r1
 800443a:	65da      	str	r2, [r3, #92]	; 0x5c
 800443c:	e01c      	b.n	8004478 <HAL_RCC_OscConfig+0x41c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b05      	cmp	r3, #5
 8004444:	d10c      	bne.n	8004460 <HAL_RCC_OscConfig+0x404>
 8004446:	4b8b      	ldr	r3, [pc, #556]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800444a:	4b8a      	ldr	r3, [pc, #552]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800444c:	2104      	movs	r1, #4
 800444e:	430a      	orrs	r2, r1
 8004450:	65da      	str	r2, [r3, #92]	; 0x5c
 8004452:	4b88      	ldr	r3, [pc, #544]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004456:	4b87      	ldr	r3, [pc, #540]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004458:	2101      	movs	r1, #1
 800445a:	430a      	orrs	r2, r1
 800445c:	65da      	str	r2, [r3, #92]	; 0x5c
 800445e:	e00b      	b.n	8004478 <HAL_RCC_OscConfig+0x41c>
 8004460:	4b84      	ldr	r3, [pc, #528]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004462:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004464:	4b83      	ldr	r3, [pc, #524]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004466:	2101      	movs	r1, #1
 8004468:	438a      	bics	r2, r1
 800446a:	65da      	str	r2, [r3, #92]	; 0x5c
 800446c:	4b81      	ldr	r3, [pc, #516]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800446e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004470:	4b80      	ldr	r3, [pc, #512]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004472:	2104      	movs	r1, #4
 8004474:	438a      	bics	r2, r1
 8004476:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d014      	beq.n	80044aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7ff fa10 	bl	80038a4 <HAL_GetTick>
 8004484:	0003      	movs	r3, r0
 8004486:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004488:	e009      	b.n	800449e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448a:	f7ff fa0b 	bl	80038a4 <HAL_GetTick>
 800448e:	0002      	movs	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	4a79      	ldr	r2, [pc, #484]	; (800467c <HAL_RCC_OscConfig+0x620>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e0e6      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449e:	4b75      	ldr	r3, [pc, #468]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80044a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a2:	2202      	movs	r2, #2
 80044a4:	4013      	ands	r3, r2
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x42e>
 80044a8:	e013      	b.n	80044d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7ff f9fb 	bl	80038a4 <HAL_GetTick>
 80044ae:	0003      	movs	r3, r0
 80044b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044b2:	e009      	b.n	80044c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7ff f9f6 	bl	80038a4 <HAL_GetTick>
 80044b8:	0002      	movs	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	4a6f      	ldr	r2, [pc, #444]	; (800467c <HAL_RCC_OscConfig+0x620>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e0d1      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c8:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	2202      	movs	r2, #2
 80044ce:	4013      	ands	r3, r2
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80044d2:	231f      	movs	r3, #31
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d105      	bne.n	80044e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80044dc:	4b65      	ldr	r3, [pc, #404]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80044de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e0:	4b64      	ldr	r3, [pc, #400]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80044e2:	4967      	ldr	r1, [pc, #412]	; (8004680 <HAL_RCC_OscConfig+0x624>)
 80044e4:	400a      	ands	r2, r1
 80044e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d100      	bne.n	80044f2 <HAL_RCC_OscConfig+0x496>
 80044f0:	e0bb      	b.n	800466a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f2:	4b60      	ldr	r3, [pc, #384]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2238      	movs	r2, #56	; 0x38
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d100      	bne.n	8004500 <HAL_RCC_OscConfig+0x4a4>
 80044fe:	e07b      	b.n	80045f8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d156      	bne.n	80045b6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004508:	4b5a      	ldr	r3, [pc, #360]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800450e:	495d      	ldr	r1, [pc, #372]	; (8004684 <HAL_RCC_OscConfig+0x628>)
 8004510:	400a      	ands	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7ff f9c6 	bl	80038a4 <HAL_GetTick>
 8004518:	0003      	movs	r3, r0
 800451a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451e:	f7ff f9c1 	bl	80038a4 <HAL_GetTick>
 8004522:	0002      	movs	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e09d      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004530:	4b50      	ldr	r3, [pc, #320]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	049b      	lsls	r3, r3, #18
 8004538:	4013      	ands	r3, r2
 800453a:	d1f0      	bne.n	800451e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800453c:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4a51      	ldr	r2, [pc, #324]	; (8004688 <HAL_RCC_OscConfig+0x62c>)
 8004542:	4013      	ands	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1a      	ldr	r2, [r3, #32]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004568:	431a      	orrs	r2, r3
 800456a:	4b42      	ldr	r3, [pc, #264]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 800456c:	430a      	orrs	r2, r1
 800456e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004570:	4b40      	ldr	r3, [pc, #256]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b3f      	ldr	r3, [pc, #252]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	0449      	lsls	r1, r1, #17
 800457a:	430a      	orrs	r2, r1
 800457c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0549      	lsls	r1, r1, #21
 8004588:	430a      	orrs	r2, r1
 800458a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7ff f98a 	bl	80038a4 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004596:	f7ff f985 	bl	80038a4 <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e061      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a8:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	049b      	lsls	r3, r3, #18
 80045b0:	4013      	ands	r3, r2
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x53a>
 80045b4:	e059      	b.n	800466a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b6:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b2e      	ldr	r3, [pc, #184]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045bc:	4931      	ldr	r1, [pc, #196]	; (8004684 <HAL_RCC_OscConfig+0x628>)
 80045be:	400a      	ands	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7ff f96f 	bl	80038a4 <HAL_GetTick>
 80045c6:	0003      	movs	r3, r0
 80045c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045cc:	f7ff f96a 	bl	80038a4 <HAL_GetTick>
 80045d0:	0002      	movs	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e046      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045de:	4b25      	ldr	r3, [pc, #148]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	049b      	lsls	r3, r3, #18
 80045e6:	4013      	ands	r3, r2
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	4b21      	ldr	r3, [pc, #132]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 80045f0:	4926      	ldr	r1, [pc, #152]	; (800468c <HAL_RCC_OscConfig+0x630>)
 80045f2:	400a      	ands	r2, r1
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	e038      	b.n	800466a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e033      	b.n	800466c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x618>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2203      	movs	r2, #3
 800460e:	401a      	ands	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	429a      	cmp	r2, r3
 8004616:	d126      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2270      	movs	r2, #112	; 0x70
 800461c:	401a      	ands	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d11f      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	23fe      	movs	r3, #254	; 0xfe
 800462a:	01db      	lsls	r3, r3, #7
 800462c:	401a      	ands	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d116      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	23f8      	movs	r3, #248	; 0xf8
 800463c:	039b      	lsls	r3, r3, #14
 800463e:	401a      	ands	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d10e      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	23e0      	movs	r3, #224	; 0xe0
 800464c:	051b      	lsls	r3, r3, #20
 800464e:	401a      	ands	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d106      	bne.n	8004666 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	0f5b      	lsrs	r3, r3, #29
 800465c:	075a      	lsls	r2, r3, #29
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d001      	beq.n	800466a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	0018      	movs	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	b008      	add	sp, #32
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	40007000 	.word	0x40007000
 800467c:	00001388 	.word	0x00001388
 8004680:	efffffff 	.word	0xefffffff
 8004684:	feffffff 	.word	0xfeffffff
 8004688:	11c1808c 	.word	0x11c1808c
 800468c:	eefefffc 	.word	0xeefefffc

08004690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0e9      	b.n	8004878 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2207      	movs	r2, #7
 80046aa:	4013      	ands	r3, r2
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d91e      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2207      	movs	r2, #7
 80046b8:	4393      	bics	r3, r2
 80046ba:	0019      	movs	r1, r3
 80046bc:	4b70      	ldr	r3, [pc, #448]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046c4:	f7ff f8ee 	bl	80038a4 <HAL_GetTick>
 80046c8:	0003      	movs	r3, r0
 80046ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046cc:	e009      	b.n	80046e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ce:	f7ff f8e9 	bl	80038a4 <HAL_GetTick>
 80046d2:	0002      	movs	r2, r0
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	4a6a      	ldr	r2, [pc, #424]	; (8004884 <HAL_RCC_ClockConfig+0x1f4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0ca      	b.n	8004878 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046e2:	4b67      	ldr	r3, [pc, #412]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2207      	movs	r2, #7
 80046e8:	4013      	ands	r3, r2
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d1ee      	bne.n	80046ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2202      	movs	r2, #2
 80046f6:	4013      	ands	r3, r2
 80046f8:	d015      	beq.n	8004726 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2204      	movs	r2, #4
 8004700:	4013      	ands	r3, r2
 8004702:	d006      	beq.n	8004712 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004704:	4b60      	ldr	r3, [pc, #384]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	4b5f      	ldr	r3, [pc, #380]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 800470a:	21e0      	movs	r1, #224	; 0xe0
 800470c:	01c9      	lsls	r1, r1, #7
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004712:	4b5d      	ldr	r3, [pc, #372]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4a5d      	ldr	r2, [pc, #372]	; (800488c <HAL_RCC_ClockConfig+0x1fc>)
 8004718:	4013      	ands	r3, r2
 800471a:	0019      	movs	r1, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	4b59      	ldr	r3, [pc, #356]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	4013      	ands	r3, r2
 800472e:	d057      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d107      	bne.n	8004748 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004738:	4b53      	ldr	r3, [pc, #332]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	2380      	movs	r3, #128	; 0x80
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	4013      	ands	r3, r2
 8004742:	d12b      	bne.n	800479c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e097      	b.n	8004878 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d107      	bne.n	8004760 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004750:	4b4d      	ldr	r3, [pc, #308]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	049b      	lsls	r3, r3, #18
 8004758:	4013      	ands	r3, r2
 800475a:	d11f      	bne.n	800479c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e08b      	b.n	8004878 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d107      	bne.n	8004778 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004768:	4b47      	ldr	r3, [pc, #284]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4013      	ands	r3, r2
 8004772:	d113      	bne.n	800479c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e07f      	b.n	8004878 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d106      	bne.n	800478e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004780:	4b41      	ldr	r3, [pc, #260]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	2202      	movs	r2, #2
 8004786:	4013      	ands	r3, r2
 8004788:	d108      	bne.n	800479c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e074      	b.n	8004878 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478e:	4b3e      	ldr	r3, [pc, #248]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004792:	2202      	movs	r2, #2
 8004794:	4013      	ands	r3, r2
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e06d      	b.n	8004878 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800479c:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2207      	movs	r2, #7
 80047a2:	4393      	bics	r3, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4b37      	ldr	r3, [pc, #220]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 80047ac:	430a      	orrs	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b0:	f7ff f878 	bl	80038a4 <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b8:	e009      	b.n	80047ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ba:	f7ff f873 	bl	80038a4 <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	4a2f      	ldr	r2, [pc, #188]	; (8004884 <HAL_RCC_ClockConfig+0x1f4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e054      	b.n	8004878 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2238      	movs	r2, #56	; 0x38
 80047d4:	401a      	ands	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	429a      	cmp	r2, r3
 80047de:	d1ec      	bne.n	80047ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2207      	movs	r2, #7
 80047e6:	4013      	ands	r3, r2
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d21e      	bcs.n	800482c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b24      	ldr	r3, [pc, #144]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2207      	movs	r2, #7
 80047f4:	4393      	bics	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004800:	f7ff f850 	bl	80038a4 <HAL_GetTick>
 8004804:	0003      	movs	r3, r0
 8004806:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004808:	e009      	b.n	800481e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480a:	f7ff f84b 	bl	80038a4 <HAL_GetTick>
 800480e:	0002      	movs	r2, r0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <HAL_RCC_ClockConfig+0x1f4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e02c      	b.n	8004878 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2207      	movs	r2, #7
 8004824:	4013      	ands	r3, r2
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d1ee      	bne.n	800480a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2204      	movs	r2, #4
 8004832:	4013      	ands	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	4a15      	ldr	r2, [pc, #84]	; (8004890 <HAL_RCC_ClockConfig+0x200>)
 800483c:	4013      	ands	r3, r2
 800483e:	0019      	movs	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004846:	430a      	orrs	r2, r1
 8004848:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800484a:	f000 f829 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 800484e:	0001      	movs	r1, r0
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	220f      	movs	r2, #15
 8004858:	401a      	ands	r2, r3
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <HAL_RCC_ClockConfig+0x204>)
 800485c:	0092      	lsls	r2, r2, #2
 800485e:	58d3      	ldr	r3, [r2, r3]
 8004860:	221f      	movs	r2, #31
 8004862:	4013      	ands	r3, r2
 8004864:	000a      	movs	r2, r1
 8004866:	40da      	lsrs	r2, r3
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x208>)
 800486a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCC_ClockConfig+0x20c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	0018      	movs	r0, r3
 8004872:	f7fe ffbb 	bl	80037ec <HAL_InitTick>
 8004876:	0003      	movs	r3, r0
}
 8004878:	0018      	movs	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	b004      	add	sp, #16
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40022000 	.word	0x40022000
 8004884:	00001388 	.word	0x00001388
 8004888:	40021000 	.word	0x40021000
 800488c:	fffff0ff 	.word	0xfffff0ff
 8004890:	ffff8fff 	.word	0xffff8fff
 8004894:	08013eb8 	.word	0x08013eb8
 8004898:	20000020 	.word	0x20000020
 800489c:	20000024 	.word	0x20000024

080048a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048a6:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2238      	movs	r2, #56	; 0x38
 80048ac:	4013      	ands	r3, r2
 80048ae:	d10f      	bne.n	80048d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80048b0:	4b39      	ldr	r3, [pc, #228]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	0adb      	lsrs	r3, r3, #11
 80048b6:	2207      	movs	r2, #7
 80048b8:	4013      	ands	r3, r2
 80048ba:	2201      	movs	r2, #1
 80048bc:	409a      	lsls	r2, r3
 80048be:	0013      	movs	r3, r2
 80048c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	4835      	ldr	r0, [pc, #212]	; (800499c <HAL_RCC_GetSysClockFreq+0xfc>)
 80048c6:	f7fb fc39 	bl	800013c <__udivsi3>
 80048ca:	0003      	movs	r3, r0
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	e05d      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048d0:	4b31      	ldr	r3, [pc, #196]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2238      	movs	r2, #56	; 0x38
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d102      	bne.n	80048e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048dc:	4b30      	ldr	r3, [pc, #192]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	e054      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048e2:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2238      	movs	r2, #56	; 0x38
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d138      	bne.n	8004960 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80048ee:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2203      	movs	r2, #3
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048f8:	4b27      	ldr	r3, [pc, #156]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	2207      	movs	r2, #7
 8004900:	4013      	ands	r3, r2
 8004902:	3301      	adds	r3, #1
 8004904:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d10d      	bne.n	8004928 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	4824      	ldr	r0, [pc, #144]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004910:	f7fb fc14 	bl	800013c <__udivsi3>
 8004914:	0003      	movs	r3, r0
 8004916:	0019      	movs	r1, r3
 8004918:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	227f      	movs	r2, #127	; 0x7f
 8004920:	4013      	ands	r3, r2
 8004922:	434b      	muls	r3, r1
 8004924:	617b      	str	r3, [r7, #20]
        break;
 8004926:	e00d      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	481c      	ldr	r0, [pc, #112]	; (800499c <HAL_RCC_GetSysClockFreq+0xfc>)
 800492c:	f7fb fc06 	bl	800013c <__udivsi3>
 8004930:	0003      	movs	r3, r0
 8004932:	0019      	movs	r1, r3
 8004934:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	0a1b      	lsrs	r3, r3, #8
 800493a:	227f      	movs	r2, #127	; 0x7f
 800493c:	4013      	ands	r3, r2
 800493e:	434b      	muls	r3, r1
 8004940:	617b      	str	r3, [r7, #20]
        break;
 8004942:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004944:	4b14      	ldr	r3, [pc, #80]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	0f5b      	lsrs	r3, r3, #29
 800494a:	2207      	movs	r2, #7
 800494c:	4013      	ands	r3, r2
 800494e:	3301      	adds	r3, #1
 8004950:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	6978      	ldr	r0, [r7, #20]
 8004956:	f7fb fbf1 	bl	800013c <__udivsi3>
 800495a:	0003      	movs	r3, r0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	e015      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2238      	movs	r2, #56	; 0x38
 8004966:	4013      	ands	r3, r2
 8004968:	2b20      	cmp	r3, #32
 800496a:	d103      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	e00b      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2238      	movs	r2, #56	; 0x38
 800497a:	4013      	ands	r3, r2
 800497c:	2b18      	cmp	r3, #24
 800497e:	d103      	bne.n	8004988 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004980:	23fa      	movs	r3, #250	; 0xfa
 8004982:	01db      	lsls	r3, r3, #7
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	e001      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800498c:	693b      	ldr	r3, [r7, #16]
}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b006      	add	sp, #24
 8004994:	bd80      	pop	{r7, pc}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	40021000 	.word	0x40021000
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	007a1200 	.word	0x007a1200

080049a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a8:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049aa:	681b      	ldr	r3, [r3, #0]
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	20000020 	.word	0x20000020

080049b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b8:	b5b0      	push	{r4, r5, r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80049bc:	f7ff fff2 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80049c0:	0004      	movs	r4, r0
 80049c2:	f7ff fb3f 	bl	8004044 <LL_RCC_GetAPB1Prescaler>
 80049c6:	0003      	movs	r3, r0
 80049c8:	0b1a      	lsrs	r2, r3, #12
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049cc:	0092      	lsls	r2, r2, #2
 80049ce:	58d3      	ldr	r3, [r2, r3]
 80049d0:	221f      	movs	r2, #31
 80049d2:	4013      	ands	r3, r2
 80049d4:	40dc      	lsrs	r4, r3
 80049d6:	0023      	movs	r3, r4
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	bdb0      	pop	{r4, r5, r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	08013ef8 	.word	0x08013ef8

080049e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80049ec:	2313      	movs	r3, #19
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049f4:	2312      	movs	r3, #18
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	029b      	lsls	r3, r3, #10
 8004a04:	4013      	ands	r3, r2
 8004a06:	d100      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004a08:	e0a3      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0a:	2011      	movs	r0, #17
 8004a0c:	183b      	adds	r3, r7, r0
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a12:	4bc3      	ldr	r3, [pc, #780]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a16:	2380      	movs	r3, #128	; 0x80
 8004a18:	055b      	lsls	r3, r3, #21
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d110      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	4bc0      	ldr	r3, [pc, #768]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a22:	4bbf      	ldr	r3, [pc, #764]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a24:	2180      	movs	r1, #128	; 0x80
 8004a26:	0549      	lsls	r1, r1, #21
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a2c:	4bbc      	ldr	r3, [pc, #752]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	055b      	lsls	r3, r3, #21
 8004a34:	4013      	ands	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a3a:	183b      	adds	r3, r7, r0
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a40:	4bb8      	ldr	r3, [pc, #736]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4bb7      	ldr	r3, [pc, #732]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a46:	2180      	movs	r1, #128	; 0x80
 8004a48:	0049      	lsls	r1, r1, #1
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a4e:	f7fe ff29 	bl	80038a4 <HAL_GetTick>
 8004a52:	0003      	movs	r3, r0
 8004a54:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a56:	e00b      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a58:	f7fe ff24 	bl	80038a4 <HAL_GetTick>
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d904      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004a66:	2313      	movs	r3, #19
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	701a      	strb	r2, [r3, #0]
        break;
 8004a6e:	e005      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a70:	4bac      	ldr	r3, [pc, #688]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d0ed      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004a7c:	2313      	movs	r3, #19
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d154      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a86:	4ba6      	ldr	r3, [pc, #664]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a8a:	23c0      	movs	r3, #192	; 0xc0
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4013      	ands	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d014      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004aa2:	4b9f      	ldr	r3, [pc, #636]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa6:	4aa0      	ldr	r2, [pc, #640]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004aac:	4b9c      	ldr	r3, [pc, #624]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ab0:	4b9b      	ldr	r3, [pc, #620]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab2:	2180      	movs	r1, #128	; 0x80
 8004ab4:	0249      	lsls	r1, r1, #9
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004aba:	4b99      	ldr	r3, [pc, #612]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004abc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004abe:	4b98      	ldr	r3, [pc, #608]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac0:	499a      	ldr	r1, [pc, #616]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ac6:	4b96      	ldr	r3, [pc, #600]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d016      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fe fee6 	bl	80038a4 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004adc:	e00c      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ade:	f7fe fee1 	bl	80038a4 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	4a91      	ldr	r2, [pc, #580]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d904      	bls.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004aee:	2313      	movs	r3, #19
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	2203      	movs	r2, #3
 8004af4:	701a      	strb	r2, [r3, #0]
            break;
 8004af6:	e004      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af8:	4b89      	ldr	r3, [pc, #548]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	2202      	movs	r2, #2
 8004afe:	4013      	ands	r3, r2
 8004b00:	d0ed      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004b02:	2313      	movs	r3, #19
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b0c:	4b84      	ldr	r3, [pc, #528]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	4a85      	ldr	r2, [pc, #532]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	0019      	movs	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1a:	4b81      	ldr	r3, [pc, #516]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b20:	e00c      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b22:	2312      	movs	r3, #18
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	2213      	movs	r2, #19
 8004b28:	18ba      	adds	r2, r7, r2
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e005      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	2312      	movs	r3, #18
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2213      	movs	r2, #19
 8004b36:	18ba      	adds	r2, r7, r2
 8004b38:	7812      	ldrb	r2, [r2, #0]
 8004b3a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b3c:	2311      	movs	r3, #17
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d105      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b46:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b4a:	4b75      	ldr	r3, [pc, #468]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b4c:	4979      	ldr	r1, [pc, #484]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b4e:	400a      	ands	r2, r1
 8004b50:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2201      	movs	r2, #1
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d009      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b5c:	4b70      	ldr	r3, [pc, #448]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	2203      	movs	r2, #3
 8004b62:	4393      	bics	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2202      	movs	r2, #2
 8004b76:	4013      	ands	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b7a:	4b69      	ldr	r3, [pc, #420]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	220c      	movs	r2, #12
 8004b80:	4393      	bics	r3, r2
 8004b82:	0019      	movs	r1, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	4b65      	ldr	r3, [pc, #404]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2210      	movs	r2, #16
 8004b94:	4013      	ands	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b98:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	4a66      	ldr	r2, [pc, #408]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	4b5e      	ldr	r3, [pc, #376]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bb8:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbc:	4a5f      	ldr	r2, [pc, #380]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	4b56      	ldr	r3, [pc, #344]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bd8:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	4a58      	ldr	r2, [pc, #352]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	0019      	movs	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69da      	ldr	r2, [r3, #28]
 8004be6:	4b4e      	ldr	r3, [pc, #312]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004be8:	430a      	orrs	r2, r1
 8004bea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	4a52      	ldr	r2, [pc, #328]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	0019      	movs	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	4b46      	ldr	r3, [pc, #280]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c06:	430a      	orrs	r2, r1
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	01db      	lsls	r3, r3, #7
 8004c12:	4013      	ands	r3, r2
 8004c14:	d015      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c16:	4b42      	ldr	r3, [pc, #264]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	0899      	lsrs	r1, r3, #2
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1a      	ldr	r2, [r3, #32]
 8004c22:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c24:	430a      	orrs	r2, r1
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1a      	ldr	r2, [r3, #32]
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	05db      	lsls	r3, r3, #23
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d106      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c34:	4b3a      	ldr	r3, [pc, #232]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c3a:	2180      	movs	r1, #128	; 0x80
 8004c3c:	0249      	lsls	r1, r1, #9
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	031b      	lsls	r3, r3, #12
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c4e:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	2240      	movs	r2, #64	; 0x40
 8004c54:	4393      	bics	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c5c:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	2380      	movs	r3, #128	; 0x80
 8004c68:	039b      	lsls	r3, r3, #14
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d016      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	4a35      	ldr	r2, [pc, #212]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c86:	2380      	movs	r3, #128	; 0x80
 8004c88:	03db      	lsls	r3, r3, #15
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d106      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c8e:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	0449      	lsls	r1, r1, #17
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	03db      	lsls	r3, r3, #15
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d016      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	045b      	lsls	r3, r3, #17
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004cc8:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cce:	2180      	movs	r1, #128	; 0x80
 8004cd0:	0449      	lsls	r1, r1, #17
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d016      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	0019      	movs	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	01db      	lsls	r3, r3, #7
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d106      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d02:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d08:	2180      	movs	r1, #128	; 0x80
 8004d0a:	0249      	lsls	r1, r1, #9
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004d10:	2312      	movs	r3, #18
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	781b      	ldrb	r3, [r3, #0]
}
 8004d16:	0018      	movs	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b006      	add	sp, #24
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40007000 	.word	0x40007000
 8004d28:	fffffcff 	.word	0xfffffcff
 8004d2c:	fffeffff 	.word	0xfffeffff
 8004d30:	00001388 	.word	0x00001388
 8004d34:	efffffff 	.word	0xefffffff
 8004d38:	fffff3ff 	.word	0xfffff3ff
 8004d3c:	fff3ffff 	.word	0xfff3ffff
 8004d40:	ffcfffff 	.word	0xffcfffff
 8004d44:	ffffcfff 	.word	0xffffcfff
 8004d48:	ffbfffff 	.word	0xffbfffff
 8004d4c:	feffffff 	.word	0xfeffffff
 8004d50:	ffff3fff 	.word	0xffff3fff

08004d54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d54:	b5b0      	push	{r4, r5, r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d5c:	230f      	movs	r3, #15
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d100      	bne.n	8004d6c <HAL_RTC_Init+0x18>
 8004d6a:	e08c      	b.n	8004e86 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2229      	movs	r2, #41	; 0x29
 8004d70:	5c9b      	ldrb	r3, [r3, r2]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10b      	bne.n	8004d90 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2228      	movs	r2, #40	; 0x28
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2288      	movs	r2, #136	; 0x88
 8004d84:	0212      	lsls	r2, r2, #8
 8004d86:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f7fe fa18 	bl	80031c0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2229      	movs	r2, #41	; 0x29
 8004d94:	2102      	movs	r1, #2
 8004d96:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2210      	movs	r2, #16
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d062      	beq.n	8004e6c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	22ca      	movs	r2, #202	; 0xca
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2253      	movs	r2, #83	; 0x53
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004db6:	250f      	movs	r5, #15
 8004db8:	197c      	adds	r4, r7, r5
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f000 fb9c 	bl	80054fa <RTC_EnterInitMode>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004dc6:	0028      	movs	r0, r5
 8004dc8:	183b      	adds	r3, r7, r0
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d12c      	bne.n	8004e2a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	492e      	ldr	r1, [pc, #184]	; (8004e94 <HAL_RTC_Init+0x140>)
 8004ddc:	400a      	ands	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6999      	ldr	r1, [r3, #24]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6912      	ldr	r2, [r2, #16]
 8004e06:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6919      	ldr	r1, [r3, #16]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	041a      	lsls	r2, r3, #16
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004e1c:	183c      	adds	r4, r7, r0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f000 fbad 	bl	8005580 <RTC_ExitInitMode>
 8004e26:	0003      	movs	r3, r0
 8004e28:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004e2a:	230f      	movs	r3, #15
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d116      	bne.n	8004e62 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	00d2      	lsls	r2, r2, #3
 8004e40:	08d2      	lsrs	r2, r2, #3
 8004e42:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	22ff      	movs	r2, #255	; 0xff
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24
 8004e6a:	e003      	b.n	8004e74 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004e6c:	230f      	movs	r3, #15
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004e74:	230f      	movs	r3, #15
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2229      	movs	r2, #41	; 0x29
 8004e82:	2101      	movs	r1, #1
 8004e84:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004e86:	230f      	movs	r3, #15
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	781b      	ldrb	r3, [r3, #0]
}
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b004      	add	sp, #16
 8004e92:	bdb0      	pop	{r4, r5, r7, pc}
 8004e94:	fb8fffbf 	.word	0xfb8fffbf

08004e98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2228      	movs	r2, #40	; 0x28
 8004ea8:	5c9b      	ldrb	r3, [r3, r2]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_RTC_SetTime+0x1a>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e092      	b.n	8004fd8 <HAL_RTC_SetTime+0x140>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2228      	movs	r2, #40	; 0x28
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2229      	movs	r2, #41	; 0x29
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	22ca      	movs	r2, #202	; 0xca
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2253      	movs	r2, #83	; 0x53
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ed2:	2513      	movs	r5, #19
 8004ed4:	197c      	adds	r4, r7, r5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 fb0e 	bl	80054fa <RTC_EnterInitMode>
 8004ede:	0003      	movs	r3, r0
 8004ee0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004ee2:	197b      	adds	r3, r7, r5
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d162      	bne.n	8004fb0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d125      	bne.n	8004f3c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d102      	bne.n	8004f02 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2200      	movs	r2, #0
 8004f00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	0018      	movs	r0, r3
 8004f08:	f000 fb7e 	bl	8005608 <RTC_ByteToBcd2>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	0018      	movs	r0, r3
 8004f16:	f000 fb77 	bl	8005608 <RTC_ByteToBcd2>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f1e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	789b      	ldrb	r3, [r3, #2]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f000 fb6f 	bl	8005608 <RTC_ByteToBcd2>
 8004f2a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f2c:	0022      	movs	r2, r4
 8004f2e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	78db      	ldrb	r3, [r3, #3]
 8004f34:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e017      	b.n	8004f6c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2240      	movs	r2, #64	; 0x40
 8004f44:	4013      	ands	r3, r2
 8004f46:	d102      	bne.n	8004f4e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f5a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f60:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	78db      	ldrb	r3, [r3, #3]
 8004f66:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	491b      	ldr	r1, [pc, #108]	; (8004fe0 <HAL_RTC_SetTime+0x148>)
 8004f74:	400a      	ands	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4918      	ldr	r1, [pc, #96]	; (8004fe4 <HAL_RTC_SetTime+0x14c>)
 8004f84:	400a      	ands	r2, r1
 8004f86:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6999      	ldr	r1, [r3, #24]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004fa0:	2313      	movs	r3, #19
 8004fa2:	18fc      	adds	r4, r7, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 faea 	bl	8005580 <RTC_ExitInitMode>
 8004fac:	0003      	movs	r3, r0
 8004fae:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004fb8:	2313      	movs	r3, #19
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d103      	bne.n	8004fca <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2229      	movs	r2, #41	; 0x29
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2228      	movs	r2, #40	; 0x28
 8004fce:	2100      	movs	r1, #0
 8004fd0:	5499      	strb	r1, [r3, r2]

  return status;
 8004fd2:	2313      	movs	r3, #19
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	781b      	ldrb	r3, [r3, #0]
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b006      	add	sp, #24
 8004fde:	bdb0      	pop	{r4, r5, r7, pc}
 8004fe0:	007f7f7f 	.word	0x007f7f7f
 8004fe4:	fffbffff 	.word	0xfffbffff

08004fe8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	045b      	lsls	r3, r3, #17
 8005006:	0c5a      	lsrs	r2, r3, #17
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a22      	ldr	r2, [pc, #136]	; (800509c <HAL_RTC_GetTime+0xb4>)
 8005014:	4013      	ands	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	b2db      	uxtb	r3, r3
 800501e:	223f      	movs	r2, #63	; 0x3f
 8005020:	4013      	ands	r3, r2
 8005022:	b2da      	uxtb	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	b2db      	uxtb	r3, r3
 800502e:	227f      	movs	r2, #127	; 0x7f
 8005030:	4013      	ands	r3, r2
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	227f      	movs	r2, #127	; 0x7f
 800503e:	4013      	ands	r3, r2
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	0d9b      	lsrs	r3, r3, #22
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2201      	movs	r2, #1
 800504e:	4013      	ands	r3, r2
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d11a      	bne.n	8005092 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	0018      	movs	r0, r3
 8005062:	f000 faf9 	bl	8005658 <RTC_Bcd2ToByte>
 8005066:	0003      	movs	r3, r0
 8005068:	001a      	movs	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	0018      	movs	r0, r3
 8005074:	f000 faf0 	bl	8005658 <RTC_Bcd2ToByte>
 8005078:	0003      	movs	r3, r0
 800507a:	001a      	movs	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	789b      	ldrb	r3, [r3, #2]
 8005084:	0018      	movs	r0, r3
 8005086:	f000 fae7 	bl	8005658 <RTC_Bcd2ToByte>
 800508a:	0003      	movs	r3, r0
 800508c:	001a      	movs	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b006      	add	sp, #24
 800509a:	bd80      	pop	{r7, pc}
 800509c:	007f7f7f 	.word	0x007f7f7f

080050a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050a0:	b5b0      	push	{r4, r5, r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2228      	movs	r2, #40	; 0x28
 80050b0:	5c9b      	ldrb	r3, [r3, r2]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_RTC_SetDate+0x1a>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e07e      	b.n	80051b8 <HAL_RTC_SetDate+0x118>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2228      	movs	r2, #40	; 0x28
 80050be:	2101      	movs	r1, #1
 80050c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2229      	movs	r2, #41	; 0x29
 80050c6:	2102      	movs	r1, #2
 80050c8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10e      	bne.n	80050ee <HAL_RTC_SetDate+0x4e>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	001a      	movs	r2, r3
 80050d6:	2310      	movs	r3, #16
 80050d8:	4013      	ands	r3, r2
 80050da:	d008      	beq.n	80050ee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2210      	movs	r2, #16
 80050e2:	4393      	bics	r3, r2
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	330a      	adds	r3, #10
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11c      	bne.n	800512e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	78db      	ldrb	r3, [r3, #3]
 80050f8:	0018      	movs	r0, r3
 80050fa:	f000 fa85 	bl	8005608 <RTC_ByteToBcd2>
 80050fe:	0003      	movs	r3, r0
 8005100:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	0018      	movs	r0, r3
 8005108:	f000 fa7e 	bl	8005608 <RTC_ByteToBcd2>
 800510c:	0003      	movs	r3, r0
 800510e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005110:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	789b      	ldrb	r3, [r3, #2]
 8005116:	0018      	movs	r0, r3
 8005118:	f000 fa76 	bl	8005608 <RTC_ByteToBcd2>
 800511c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800511e:	0022      	movs	r2, r4
 8005120:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e00e      	b.n	800514c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	78db      	ldrb	r3, [r3, #3]
 8005132:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800513a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005140:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	22ca      	movs	r2, #202	; 0xca
 8005152:	625a      	str	r2, [r3, #36]	; 0x24
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2253      	movs	r2, #83	; 0x53
 800515a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800515c:	2513      	movs	r5, #19
 800515e:	197c      	adds	r4, r7, r5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	0018      	movs	r0, r3
 8005164:	f000 f9c9 	bl	80054fa <RTC_EnterInitMode>
 8005168:	0003      	movs	r3, r0
 800516a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800516c:	0028      	movs	r0, r5
 800516e:	183b      	adds	r3, r7, r0
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4910      	ldr	r1, [pc, #64]	; (80051c0 <HAL_RTC_SetDate+0x120>)
 800517e:	400a      	ands	r2, r1
 8005180:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005182:	183c      	adds	r4, r7, r0
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	0018      	movs	r0, r3
 8005188:	f000 f9fa 	bl	8005580 <RTC_ExitInitMode>
 800518c:	0003      	movs	r3, r0
 800518e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005198:	2313      	movs	r3, #19
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2229      	movs	r2, #41	; 0x29
 80051a6:	2101      	movs	r1, #1
 80051a8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2228      	movs	r2, #40	; 0x28
 80051ae:	2100      	movs	r1, #0
 80051b0:	5499      	strb	r1, [r3, r2]

  return status;
 80051b2:	2313      	movs	r3, #19
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	781b      	ldrb	r3, [r3, #0]
}
 80051b8:	0018      	movs	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b006      	add	sp, #24
 80051be:	bdb0      	pop	{r4, r5, r7, pc}
 80051c0:	00ffff3f 	.word	0x00ffff3f

080051c4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4a21      	ldr	r2, [pc, #132]	; (800525c <HAL_RTC_GetDate+0x98>)
 80051d8:	4013      	ands	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	0a1b      	lsrs	r3, r3, #8
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	221f      	movs	r2, #31
 80051ee:	4013      	ands	r3, r2
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	223f      	movs	r2, #63	; 0x3f
 80051fc:	4013      	ands	r3, r2
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	0b5b      	lsrs	r3, r3, #13
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2207      	movs	r2, #7
 800520c:	4013      	ands	r3, r2
 800520e:	b2da      	uxtb	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d11a      	bne.n	8005250 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	78db      	ldrb	r3, [r3, #3]
 800521e:	0018      	movs	r0, r3
 8005220:	f000 fa1a 	bl	8005658 <RTC_Bcd2ToByte>
 8005224:	0003      	movs	r3, r0
 8005226:	001a      	movs	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	0018      	movs	r0, r3
 8005232:	f000 fa11 	bl	8005658 <RTC_Bcd2ToByte>
 8005236:	0003      	movs	r3, r0
 8005238:	001a      	movs	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	789b      	ldrb	r3, [r3, #2]
 8005242:	0018      	movs	r0, r3
 8005244:	f000 fa08 	bl	8005658 <RTC_Bcd2ToByte>
 8005248:	0003      	movs	r3, r0
 800524a:	001a      	movs	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	0018      	movs	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	b006      	add	sp, #24
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	00ffff3f 	.word	0x00ffff3f

08005260 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2228      	movs	r2, #40	; 0x28
 8005270:	5c9b      	ldrb	r3, [r3, r2]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_RTC_SetAlarm+0x1a>
 8005276:	2302      	movs	r3, #2
 8005278:	e10c      	b.n	8005494 <HAL_RTC_SetAlarm+0x234>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2228      	movs	r2, #40	; 0x28
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2229      	movs	r2, #41	; 0x29
 8005286:	2102      	movs	r1, #2
 8005288:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d136      	bne.n	80052fe <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2240      	movs	r2, #64	; 0x40
 8005298:	4013      	ands	r3, r2
 800529a:	d102      	bne.n	80052a2 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2200      	movs	r2, #0
 80052a0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	0018      	movs	r0, r3
 80052a8:	f000 f9ae 	bl	8005608 <RTC_ByteToBcd2>
 80052ac:	0003      	movs	r3, r0
 80052ae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	0018      	movs	r0, r3
 80052b6:	f000 f9a7 	bl	8005608 <RTC_ByteToBcd2>
 80052ba:	0003      	movs	r3, r0
 80052bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052be:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	789b      	ldrb	r3, [r3, #2]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f000 f99f 	bl	8005608 <RTC_ByteToBcd2>
 80052ca:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052cc:	0022      	movs	r2, r4
 80052ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052d6:	431a      	orrs	r2, r3
 80052d8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2220      	movs	r2, #32
 80052de:	5c9b      	ldrb	r3, [r3, r2]
 80052e0:	0018      	movs	r0, r3
 80052e2:	f000 f991 	bl	8005608 <RTC_ByteToBcd2>
 80052e6:	0003      	movs	r3, r0
 80052e8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052ea:	0022      	movs	r2, r4
 80052ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e022      	b.n	8005344 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2240      	movs	r2, #64	; 0x40
 8005306:	4013      	ands	r3, r2
 8005308:	d102      	bne.n	8005310 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2200      	movs	r2, #0
 800530e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800531c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005322:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	78db      	ldrb	r3, [r3, #3]
 8005328:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800532a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2120      	movs	r1, #32
 8005330:	5c5b      	ldrb	r3, [r3, r1]
 8005332:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005334:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800533a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005340:	4313      	orrs	r3, r2
 8005342:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	22ca      	movs	r2, #202	; 0xca
 8005356:	625a      	str	r2, [r3, #36]	; 0x24
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2253      	movs	r2, #83	; 0x53
 800535e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	429a      	cmp	r2, r3
 800536a:	d143      	bne.n	80053f4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4949      	ldr	r1, [pc, #292]	; (800549c <HAL_RTC_SetAlarm+0x23c>)
 8005378:	400a      	ands	r2, r1
 800537a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4946      	ldr	r1, [pc, #280]	; (80054a0 <HAL_RTC_SetAlarm+0x240>)
 8005388:	400a      	ands	r2, r1
 800538a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 800538c:	f7fe fa8a 	bl	80038a4 <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005394:	e016      	b.n	80053c4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005396:	f7fe fa85 	bl	80038a4 <HAL_GetTick>
 800539a:	0002      	movs	r2, r0
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	23fa      	movs	r3, #250	; 0xfa
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d90d      	bls.n	80053c4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	22ff      	movs	r2, #255	; 0xff
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2229      	movs	r2, #41	; 0x29
 80053b4:	2103      	movs	r1, #3
 80053b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2228      	movs	r2, #40	; 0x28
 80053bc:	2100      	movs	r1, #0
 80053be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e067      	b.n	8005494 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	4013      	ands	r3, r2
 80053ce:	d0e2      	beq.n	8005396 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2180      	movs	r1, #128	; 0x80
 80053ec:	0049      	lsls	r1, r1, #1
 80053ee:	430a      	orrs	r2, r1
 80053f0:	619a      	str	r2, [r3, #24]
 80053f2:	e042      	b.n	800547a <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4929      	ldr	r1, [pc, #164]	; (80054a4 <HAL_RTC_SetAlarm+0x244>)
 8005400:	400a      	ands	r2, r1
 8005402:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4926      	ldr	r1, [pc, #152]	; (80054a8 <HAL_RTC_SetAlarm+0x248>)
 8005410:	400a      	ands	r2, r1
 8005412:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005414:	f7fe fa46 	bl	80038a4 <HAL_GetTick>
 8005418:	0003      	movs	r3, r0
 800541a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800541c:	e016      	b.n	800544c <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800541e:	f7fe fa41 	bl	80038a4 <HAL_GetTick>
 8005422:	0002      	movs	r2, r0
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	1ad2      	subs	r2, r2, r3
 8005428:	23fa      	movs	r3, #250	; 0xfa
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	429a      	cmp	r2, r3
 800542e:	d90d      	bls.n	800544c <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	22ff      	movs	r2, #255	; 0xff
 8005436:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2229      	movs	r2, #41	; 0x29
 800543c:	2103      	movs	r1, #3
 800543e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2228      	movs	r2, #40	; 0x28
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e023      	b.n	8005494 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2202      	movs	r2, #2
 8005454:	4013      	ands	r3, r2
 8005456:	d0e2      	beq.n	800541e <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2180      	movs	r1, #128	; 0x80
 8005474:	0089      	lsls	r1, r1, #2
 8005476:	430a      	orrs	r2, r1
 8005478:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	22ff      	movs	r2, #255	; 0xff
 8005480:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2229      	movs	r2, #41	; 0x29
 8005486:	2101      	movs	r1, #1
 8005488:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2228      	movs	r2, #40	; 0x28
 800548e:	2100      	movs	r1, #0
 8005490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b009      	add	sp, #36	; 0x24
 800549a:	bd90      	pop	{r4, r7, pc}
 800549c:	fffffeff 	.word	0xfffffeff
 80054a0:	ffffefff 	.word	0xffffefff
 80054a4:	fffffdff 	.word	0xfffffdff
 80054a8:	ffffdfff 	.word	0xffffdfff

080054ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	21a0      	movs	r1, #160	; 0xa0
 80054c0:	438a      	bics	r2, r1
 80054c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80054c4:	f7fe f9ee 	bl	80038a4 <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80054cc:	e00a      	b.n	80054e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054ce:	f7fe f9e9 	bl	80038a4 <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1ad2      	subs	r2, r2, r3
 80054d8:	23fa      	movs	r3, #250	; 0xfa
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	429a      	cmp	r2, r3
 80054de:	d901      	bls.n	80054e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e006      	b.n	80054f2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	4013      	ands	r3, r2
 80054ee:	d0ee      	beq.n	80054ce <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}

080054fa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005502:	230f      	movs	r3, #15
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	2240      	movs	r2, #64	; 0x40
 8005512:	4013      	ands	r3, r2
 8005514:	d12c      	bne.n	8005570 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	430a      	orrs	r2, r1
 8005524:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005526:	f7fe f9bd 	bl	80038a4 <HAL_GetTick>
 800552a:	0003      	movs	r3, r0
 800552c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800552e:	e014      	b.n	800555a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005530:	f7fe f9b8 	bl	80038a4 <HAL_GetTick>
 8005534:	0002      	movs	r2, r0
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	1ad2      	subs	r2, r2, r3
 800553a:	200f      	movs	r0, #15
 800553c:	183b      	adds	r3, r7, r0
 800553e:	1839      	adds	r1, r7, r0
 8005540:	7809      	ldrb	r1, [r1, #0]
 8005542:	7019      	strb	r1, [r3, #0]
 8005544:	23fa      	movs	r3, #250	; 0xfa
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	429a      	cmp	r2, r3
 800554a:	d906      	bls.n	800555a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800554c:	183b      	adds	r3, r7, r0
 800554e:	2203      	movs	r2, #3
 8005550:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2229      	movs	r2, #41	; 0x29
 8005556:	2103      	movs	r1, #3
 8005558:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2240      	movs	r2, #64	; 0x40
 8005562:	4013      	ands	r3, r2
 8005564:	d104      	bne.n	8005570 <RTC_EnterInitMode+0x76>
 8005566:	230f      	movs	r3, #15
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d1df      	bne.n	8005530 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005570:	230f      	movs	r3, #15
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	781b      	ldrb	r3, [r3, #0]
}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b004      	add	sp, #16
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005580:	b590      	push	{r4, r7, lr}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	240f      	movs	r4, #15
 800558a:	193b      	adds	r3, r7, r4
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <RTC_ExitInitMode+0x84>)
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <RTC_ExitInitMode+0x84>)
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	438a      	bics	r2, r1
 800559a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <RTC_ExitInitMode+0x84>)
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2220      	movs	r2, #32
 80055a2:	4013      	ands	r3, r2
 80055a4:	d10d      	bne.n	80055c2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7ff ff7f 	bl	80054ac <HAL_RTC_WaitForSynchro>
 80055ae:	1e03      	subs	r3, r0, #0
 80055b0:	d021      	beq.n	80055f6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2229      	movs	r2, #41	; 0x29
 80055b6:	2103      	movs	r1, #3
 80055b8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80055ba:	193b      	adds	r3, r7, r4
 80055bc:	2203      	movs	r2, #3
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e019      	b.n	80055f6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80055c2:	4b10      	ldr	r3, [pc, #64]	; (8005604 <RTC_ExitInitMode+0x84>)
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <RTC_ExitInitMode+0x84>)
 80055c8:	2120      	movs	r1, #32
 80055ca:	438a      	bics	r2, r1
 80055cc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7ff ff6b 	bl	80054ac <HAL_RTC_WaitForSynchro>
 80055d6:	1e03      	subs	r3, r0, #0
 80055d8:	d007      	beq.n	80055ea <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2229      	movs	r2, #41	; 0x29
 80055de:	2103      	movs	r1, #3
 80055e0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80055e2:	230f      	movs	r3, #15
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	2203      	movs	r2, #3
 80055e8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <RTC_ExitInitMode+0x84>)
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	4b05      	ldr	r3, [pc, #20]	; (8005604 <RTC_ExitInitMode+0x84>)
 80055f0:	2120      	movs	r1, #32
 80055f2:	430a      	orrs	r2, r1
 80055f4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80055f6:	230f      	movs	r3, #15
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	781b      	ldrb	r3, [r3, #0]
}
 80055fc:	0018      	movs	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	b005      	add	sp, #20
 8005602:	bd90      	pop	{r4, r7, pc}
 8005604:	40002800 	.word	0x40002800

08005608 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	0002      	movs	r2, r0
 8005610:	1dfb      	adds	r3, r7, #7
 8005612:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005618:	230b      	movs	r3, #11
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	1dfa      	adds	r2, r7, #7
 800561e:	7812      	ldrb	r2, [r2, #0]
 8005620:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005622:	e008      	b.n	8005636 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3301      	adds	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800562a:	220b      	movs	r2, #11
 800562c:	18bb      	adds	r3, r7, r2
 800562e:	18ba      	adds	r2, r7, r2
 8005630:	7812      	ldrb	r2, [r2, #0]
 8005632:	3a0a      	subs	r2, #10
 8005634:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005636:	210b      	movs	r1, #11
 8005638:	187b      	adds	r3, r7, r1
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b09      	cmp	r3, #9
 800563e:	d8f1      	bhi.n	8005624 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	b2da      	uxtb	r2, r3
 8005648:	187b      	adds	r3, r7, r1
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	4313      	orrs	r3, r2
 800564e:	b2db      	uxtb	r3, r3
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b004      	add	sp, #16
 8005656:	bd80      	pop	{r7, pc}

08005658 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	0002      	movs	r2, r0
 8005660:	1dfb      	adds	r3, r7, #7
 8005662:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005664:	1dfb      	adds	r3, r7, #7
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	b2db      	uxtb	r3, r3
 800566c:	001a      	movs	r2, r3
 800566e:	0013      	movs	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	189b      	adds	r3, r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	b2da      	uxtb	r2, r3
 800567c:	1dfb      	adds	r3, r7, #7
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	210f      	movs	r1, #15
 8005682:	400b      	ands	r3, r1
 8005684:	b2db      	uxtb	r3, r3
 8005686:	18d3      	adds	r3, r2, r3
 8005688:	b2db      	uxtb	r3, r3
}
 800568a:	0018      	movs	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	b004      	add	sp, #16
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2228      	movs	r2, #40	; 0x28
 800569e:	5c9b      	ldrb	r3, [r3, r2]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_RTCEx_EnableBypassShadow+0x16>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e024      	b.n	80056f2 <HAL_RTCEx_EnableBypassShadow+0x60>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2228      	movs	r2, #40	; 0x28
 80056ac:	2101      	movs	r1, #1
 80056ae:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2229      	movs	r2, #41	; 0x29
 80056b4:	2102      	movs	r1, #2
 80056b6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	22ca      	movs	r2, #202	; 0xca
 80056be:	625a      	str	r2, [r3, #36]	; 0x24
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2253      	movs	r2, #83	; 0x53
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2120      	movs	r1, #32
 80056d4:	430a      	orrs	r2, r1
 80056d6:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	22ff      	movs	r2, #255	; 0xff
 80056de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2229      	movs	r2, #41	; 0x29
 80056e4:	2101      	movs	r1, #1
 80056e6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2228      	movs	r2, #40	; 0x28
 80056ec:	2100      	movs	r1, #0
 80056ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	0018      	movs	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b002      	add	sp, #8
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2228      	movs	r2, #40	; 0x28
 8005706:	5c9b      	ldrb	r3, [r3, r2]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_RTCEx_DisableBypassShadow+0x16>
 800570c:	2302      	movs	r3, #2
 800570e:	e024      	b.n	800575a <HAL_RTCEx_DisableBypassShadow+0x60>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2228      	movs	r2, #40	; 0x28
 8005714:	2101      	movs	r1, #1
 8005716:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2229      	movs	r2, #41	; 0x29
 800571c:	2102      	movs	r1, #2
 800571e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	22ca      	movs	r2, #202	; 0xca
 8005726:	625a      	str	r2, [r3, #36]	; 0x24
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2253      	movs	r2, #83	; 0x53
 800572e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	21df      	movs	r1, #223	; 0xdf
 800573c:	400a      	ands	r2, r1
 800573e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	22ff      	movs	r2, #255	; 0xff
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2229      	movs	r2, #41	; 0x29
 800574c:	2101      	movs	r1, #1
 800574e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2228      	movs	r2, #40	; 0x28
 8005754:	2100      	movs	r1, #0
 8005756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b002      	add	sp, #8
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e0a8      	b.n	80058c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	2382      	movs	r3, #130	; 0x82
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	429a      	cmp	r2, r3
 8005788:	d009      	beq.n	800579e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	61da      	str	r2, [r3, #28]
 8005790:	e005      	b.n	800579e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	225d      	movs	r2, #93	; 0x5d
 80057a8:	5c9b      	ldrb	r3, [r3, r2]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d107      	bne.n	80057c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	225c      	movs	r2, #92	; 0x5c
 80057b4:	2100      	movs	r1, #0
 80057b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7fd fd3e 	bl	800323c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	225d      	movs	r2, #93	; 0x5d
 80057c4:	2102      	movs	r1, #2
 80057c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2140      	movs	r1, #64	; 0x40
 80057d4:	438a      	bics	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	23e0      	movs	r3, #224	; 0xe0
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d902      	bls.n	80057ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	e002      	b.n	80057f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	015b      	lsls	r3, r3, #5
 80057ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	23f0      	movs	r3, #240	; 0xf0
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d008      	beq.n	800580e <HAL_SPI_Init+0xaa>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	23e0      	movs	r3, #224	; 0xe0
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	429a      	cmp	r2, r3
 8005806:	d002      	beq.n	800580e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	2382      	movs	r3, #130	; 0x82
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	401a      	ands	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6899      	ldr	r1, [r3, #8]
 800581c:	2384      	movs	r3, #132	; 0x84
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	400b      	ands	r3, r1
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2102      	movs	r1, #2
 800582a:	400b      	ands	r3, r1
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	2101      	movs	r1, #1
 8005834:	400b      	ands	r3, r1
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6999      	ldr	r1, [r3, #24]
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	400b      	ands	r3, r1
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2138      	movs	r1, #56	; 0x38
 800584a:	400b      	ands	r3, r1
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	400b      	ands	r3, r1
 8005856:	431a      	orrs	r2, r3
 8005858:	0011      	movs	r1, r2
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	401a      	ands	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	0c1b      	lsrs	r3, r3, #16
 8005872:	2204      	movs	r2, #4
 8005874:	401a      	ands	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2110      	movs	r1, #16
 800587c:	400b      	ands	r3, r1
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005884:	2108      	movs	r1, #8
 8005886:	400b      	ands	r3, r1
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68d9      	ldr	r1, [r3, #12]
 800588e:	23f0      	movs	r3, #240	; 0xf0
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	400b      	ands	r3, r1
 8005894:	431a      	orrs	r2, r3
 8005896:	0011      	movs	r1, r2
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	015b      	lsls	r3, r3, #5
 800589e:	401a      	ands	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69da      	ldr	r2, [r3, #28]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4907      	ldr	r1, [pc, #28]	; (80058d0 <HAL_SPI_Init+0x16c>)
 80058b4:	400a      	ands	r2, r1
 80058b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	225d      	movs	r2, #93	; 0x5d
 80058c2:	2101      	movs	r1, #1
 80058c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b004      	add	sp, #16
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	fffff7ff 	.word	0xfffff7ff

080058d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	1dbb      	adds	r3, r7, #6
 80058e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058e4:	231f      	movs	r3, #31
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	225c      	movs	r2, #92	; 0x5c
 80058f0:	5c9b      	ldrb	r3, [r3, r2]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_SPI_Transmit+0x26>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e140      	b.n	8005b7c <HAL_SPI_Transmit+0x2a8>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	225c      	movs	r2, #92	; 0x5c
 80058fe:	2101      	movs	r1, #1
 8005900:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005902:	f7fd ffcf 	bl	80038a4 <HAL_GetTick>
 8005906:	0003      	movs	r3, r0
 8005908:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800590a:	2316      	movs	r3, #22
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	1dba      	adds	r2, r7, #6
 8005910:	8812      	ldrh	r2, [r2, #0]
 8005912:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	225d      	movs	r2, #93	; 0x5d
 8005918:	5c9b      	ldrb	r3, [r3, r2]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d004      	beq.n	800592a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005920:	231f      	movs	r3, #31
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	2202      	movs	r2, #2
 8005926:	701a      	strb	r2, [r3, #0]
    goto error;
 8005928:	e11d      	b.n	8005b66 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_SPI_Transmit+0x64>
 8005930:	1dbb      	adds	r3, r7, #6
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d104      	bne.n	8005942 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005938:	231f      	movs	r3, #31
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005940:	e111      	b.n	8005b66 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	225d      	movs	r2, #93	; 0x5d
 8005946:	2103      	movs	r1, #3
 8005948:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1dba      	adds	r2, r7, #6
 800595a:	8812      	ldrh	r2, [r2, #0]
 800595c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1dba      	adds	r2, r7, #6
 8005962:	8812      	ldrh	r2, [r2, #0]
 8005964:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2244      	movs	r2, #68	; 0x44
 8005970:	2100      	movs	r1, #0
 8005972:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2246      	movs	r2, #70	; 0x46
 8005978:	2100      	movs	r1, #0
 800597a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	429a      	cmp	r2, r3
 8005992:	d110      	bne.n	80059b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2140      	movs	r1, #64	; 0x40
 80059a0:	438a      	bics	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	01c9      	lsls	r1, r1, #7
 80059b2:	430a      	orrs	r2, r1
 80059b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2240      	movs	r2, #64	; 0x40
 80059be:	4013      	ands	r3, r2
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	d007      	beq.n	80059d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2140      	movs	r1, #64	; 0x40
 80059d0:	430a      	orrs	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	23e0      	movs	r3, #224	; 0xe0
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	429a      	cmp	r2, r3
 80059de:	d94e      	bls.n	8005a7e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <HAL_SPI_Transmit+0x11e>
 80059e8:	2316      	movs	r3, #22
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d13f      	bne.n	8005a72 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	881a      	ldrh	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	1c9a      	adds	r2, r3, #2
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a16:	e02c      	b.n	8005a72 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d112      	bne.n	8005a4c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	881a      	ldrh	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	1c9a      	adds	r2, r3, #2
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a4a:	e012      	b.n	8005a72 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4c:	f7fd ff2a 	bl	80038a4 <HAL_GetTick>
 8005a50:	0002      	movs	r2, r0
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d802      	bhi.n	8005a62 <HAL_SPI_Transmit+0x18e>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	d102      	bne.n	8005a68 <HAL_SPI_Transmit+0x194>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005a68:	231f      	movs	r3, #31
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005a70:	e079      	b.n	8005b66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1cd      	bne.n	8005a18 <HAL_SPI_Transmit+0x144>
 8005a7c:	e04f      	b.n	8005b1e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <HAL_SPI_Transmit+0x1bc>
 8005a86:	2316      	movs	r3, #22
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d141      	bne.n	8005b14 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005ab6:	e02d      	b.n	8005b14 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d113      	bne.n	8005aee <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	7812      	ldrb	r2, [r2, #0]
 8005ad2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aec:	e012      	b.n	8005b14 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aee:	f7fd fed9 	bl	80038a4 <HAL_GetTick>
 8005af2:	0002      	movs	r2, r0
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d802      	bhi.n	8005b04 <HAL_SPI_Transmit+0x230>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	3301      	adds	r3, #1
 8005b02:	d102      	bne.n	8005b0a <HAL_SPI_Transmit+0x236>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005b0a:	231f      	movs	r3, #31
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	2203      	movs	r2, #3
 8005b10:	701a      	strb	r2, [r3, #0]
          goto error;
 8005b12:	e028      	b.n	8005b66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1cc      	bne.n	8005ab8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 fcd9 	bl	80064dc <SPI_EndRxTxTransaction>
 8005b2a:	1e03      	subs	r3, r0, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d004      	beq.n	8005b64 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005b5a:	231f      	movs	r3, #31
 8005b5c:	18fb      	adds	r3, r7, r3
 8005b5e:	2201      	movs	r2, #1
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e000      	b.n	8005b66 <HAL_SPI_Transmit+0x292>
  }

error:
 8005b64:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	225d      	movs	r2, #93	; 0x5d
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	225c      	movs	r2, #92	; 0x5c
 8005b72:	2100      	movs	r1, #0
 8005b74:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b76:	231f      	movs	r3, #31
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	781b      	ldrb	r3, [r3, #0]
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b008      	add	sp, #32
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	1dbb      	adds	r3, r7, #6
 8005b92:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b94:	2317      	movs	r3, #23
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	2382      	movs	r3, #130	; 0x82
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d113      	bne.n	8005bd0 <HAL_SPI_Receive+0x4c>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10f      	bne.n	8005bd0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	225d      	movs	r2, #93	; 0x5d
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bb8:	1dbb      	adds	r3, r7, #6
 8005bba:	881c      	ldrh	r4, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	0023      	movs	r3, r4
 8005bc8:	f000 f928 	bl	8005e1c <HAL_SPI_TransmitReceive>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	e11c      	b.n	8005e0a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	225c      	movs	r2, #92	; 0x5c
 8005bd4:	5c9b      	ldrb	r3, [r3, r2]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <HAL_SPI_Receive+0x5a>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e115      	b.n	8005e0a <HAL_SPI_Receive+0x286>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	225c      	movs	r2, #92	; 0x5c
 8005be2:	2101      	movs	r1, #1
 8005be4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be6:	f7fd fe5d 	bl	80038a4 <HAL_GetTick>
 8005bea:	0003      	movs	r3, r0
 8005bec:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	225d      	movs	r2, #93	; 0x5d
 8005bf2:	5c9b      	ldrb	r3, [r3, r2]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d004      	beq.n	8005c04 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005bfa:	2317      	movs	r3, #23
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	2202      	movs	r2, #2
 8005c00:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c02:	e0f7      	b.n	8005df4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_SPI_Receive+0x8e>
 8005c0a:	1dbb      	adds	r3, r7, #6
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005c12:	2317      	movs	r3, #23
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	2201      	movs	r2, #1
 8005c18:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c1a:	e0eb      	b.n	8005df4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	225d      	movs	r2, #93	; 0x5d
 8005c20:	2104      	movs	r1, #4
 8005c22:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1dba      	adds	r2, r7, #6
 8005c34:	2144      	movs	r1, #68	; 0x44
 8005c36:	8812      	ldrh	r2, [r2, #0]
 8005c38:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1dba      	adds	r2, r7, #6
 8005c3e:	2146      	movs	r1, #70	; 0x46
 8005c40:	8812      	ldrh	r2, [r2, #0]
 8005c42:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	23e0      	movs	r3, #224	; 0xe0
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d908      	bls.n	8005c80 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4966      	ldr	r1, [pc, #408]	; (8005e14 <HAL_SPI_Receive+0x290>)
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	e008      	b.n	8005c92 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2180      	movs	r1, #128	; 0x80
 8005c8c:	0149      	lsls	r1, r1, #5
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	2380      	movs	r3, #128	; 0x80
 8005c98:	021b      	lsls	r3, r3, #8
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d10f      	bne.n	8005cbe <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	438a      	bics	r2, r1
 8005cac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4957      	ldr	r1, [pc, #348]	; (8005e18 <HAL_SPI_Receive+0x294>)
 8005cba:	400a      	ands	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2240      	movs	r2, #64	; 0x40
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d007      	beq.n	8005cdc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2140      	movs	r1, #64	; 0x40
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	23e0      	movs	r3, #224	; 0xe0
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d900      	bls.n	8005cea <HAL_SPI_Receive+0x166>
 8005ce8:	e069      	b.n	8005dbe <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cea:	e031      	b.n	8005d50 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d117      	bne.n	8005d2a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	001a      	movs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	7812      	ldrb	r2, [r2, #0]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2246      	movs	r2, #70	; 0x46
 8005d1a:	5a9b      	ldrh	r3, [r3, r2]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b299      	uxth	r1, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2246      	movs	r2, #70	; 0x46
 8005d26:	5299      	strh	r1, [r3, r2]
 8005d28:	e012      	b.n	8005d50 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d2a:	f7fd fdbb 	bl	80038a4 <HAL_GetTick>
 8005d2e:	0002      	movs	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d802      	bhi.n	8005d40 <HAL_SPI_Receive+0x1bc>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	d102      	bne.n	8005d46 <HAL_SPI_Receive+0x1c2>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005d46:	2317      	movs	r3, #23
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	701a      	strb	r2, [r3, #0]
          goto error;
 8005d4e:	e051      	b.n	8005df4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2246      	movs	r2, #70	; 0x46
 8005d54:	5a9b      	ldrh	r3, [r3, r2]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1c7      	bne.n	8005cec <HAL_SPI_Receive+0x168>
 8005d5c:	e035      	b.n	8005dca <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2201      	movs	r2, #1
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d115      	bne.n	8005d98 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	b292      	uxth	r2, r2
 8005d78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	1c9a      	adds	r2, r3, #2
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2246      	movs	r2, #70	; 0x46
 8005d88:	5a9b      	ldrh	r3, [r3, r2]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b299      	uxth	r1, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2246      	movs	r2, #70	; 0x46
 8005d94:	5299      	strh	r1, [r3, r2]
 8005d96:	e012      	b.n	8005dbe <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d98:	f7fd fd84 	bl	80038a4 <HAL_GetTick>
 8005d9c:	0002      	movs	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d802      	bhi.n	8005dae <HAL_SPI_Receive+0x22a>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	d102      	bne.n	8005db4 <HAL_SPI_Receive+0x230>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d104      	bne.n	8005dbe <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005db4:	2317      	movs	r3, #23
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	2203      	movs	r2, #3
 8005dba:	701a      	strb	r2, [r3, #0]
          goto error;
 8005dbc:	e01a      	b.n	8005df4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2246      	movs	r2, #70	; 0x46
 8005dc2:	5a9b      	ldrh	r3, [r3, r2]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1c9      	bne.n	8005d5e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f000 fb25 	bl	8006420 <SPI_EndRxTransaction>
 8005dd6:	1e03      	subs	r3, r0, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005de8:	2317      	movs	r3, #23
 8005dea:	18fb      	adds	r3, r7, r3
 8005dec:	2201      	movs	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	e000      	b.n	8005df4 <HAL_SPI_Receive+0x270>
  }

error :
 8005df2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	225d      	movs	r2, #93	; 0x5d
 8005df8:	2101      	movs	r1, #1
 8005dfa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	225c      	movs	r2, #92	; 0x5c
 8005e00:	2100      	movs	r1, #0
 8005e02:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005e04:	2317      	movs	r3, #23
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	781b      	ldrb	r3, [r3, #0]
}
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b007      	add	sp, #28
 8005e10:	bd90      	pop	{r4, r7, pc}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	ffffefff 	.word	0xffffefff
 8005e18:	ffffbfff 	.word	0xffffbfff

08005e1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	; 0x28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	001a      	movs	r2, r3
 8005e2a:	1cbb      	adds	r3, r7, #2
 8005e2c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e32:	2323      	movs	r3, #35	; 0x23
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	2200      	movs	r2, #0
 8005e38:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	225c      	movs	r2, #92	; 0x5c
 8005e3e:	5c9b      	ldrb	r3, [r3, r2]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x2c>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e1b5      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x398>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	225c      	movs	r2, #92	; 0x5c
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e50:	f7fd fd28 	bl	80038a4 <HAL_GetTick>
 8005e54:	0003      	movs	r3, r0
 8005e56:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e58:	201b      	movs	r0, #27
 8005e5a:	183b      	adds	r3, r7, r0
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	215d      	movs	r1, #93	; 0x5d
 8005e60:	5c52      	ldrb	r2, [r2, r1]
 8005e62:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e6a:	2312      	movs	r3, #18
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	1cba      	adds	r2, r7, #2
 8005e70:	8812      	ldrh	r2, [r2, #0]
 8005e72:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e74:	183b      	adds	r3, r7, r0
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d011      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x84>
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	2382      	movs	r3, #130	; 0x82
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d107      	bne.n	8005e96 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <HAL_SPI_TransmitReceive+0x7a>
 8005e8e:	183b      	adds	r3, r7, r0
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d004      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005e96:	2323      	movs	r3, #35	; 0x23
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e9e:	e17e      	b.n	800619e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d006      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x98>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x98>
 8005eac:	1cbb      	adds	r3, r7, #2
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005eb4:	2323      	movs	r3, #35	; 0x23
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ebc:	e16f      	b.n	800619e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	225d      	movs	r2, #93	; 0x5d
 8005ec2:	5c9b      	ldrb	r3, [r3, r2]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d003      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	225d      	movs	r2, #93	; 0x5d
 8005ece:	2105      	movs	r1, #5
 8005ed0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1cba      	adds	r2, r7, #2
 8005ee2:	2146      	movs	r1, #70	; 0x46
 8005ee4:	8812      	ldrh	r2, [r2, #0]
 8005ee6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1cba      	adds	r2, r7, #2
 8005eec:	2144      	movs	r1, #68	; 0x44
 8005eee:	8812      	ldrh	r2, [r2, #0]
 8005ef0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1cba      	adds	r2, r7, #2
 8005efc:	8812      	ldrh	r2, [r2, #0]
 8005efe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1cba      	adds	r2, r7, #2
 8005f04:	8812      	ldrh	r2, [r2, #0]
 8005f06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	23e0      	movs	r3, #224	; 0xe0
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d908      	bls.n	8005f32 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	49a4      	ldr	r1, [pc, #656]	; (80061bc <HAL_SPI_TransmitReceive+0x3a0>)
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]
 8005f30:	e008      	b.n	8005f44 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2180      	movs	r1, #128	; 0x80
 8005f3e:	0149      	lsls	r1, r1, #5
 8005f40:	430a      	orrs	r2, r1
 8005f42:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2240      	movs	r2, #64	; 0x40
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d007      	beq.n	8005f62 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	23e0      	movs	r3, #224	; 0xe0
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d800      	bhi.n	8005f70 <HAL_SPI_TransmitReceive+0x154>
 8005f6e:	e07f      	b.n	8006070 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_SPI_TransmitReceive+0x168>
 8005f78:	2312      	movs	r3, #18
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d000      	beq.n	8005f84 <HAL_SPI_TransmitReceive+0x168>
 8005f82:	e069      	b.n	8006058 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	881a      	ldrh	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	1c9a      	adds	r2, r3, #2
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa8:	e056      	b.n	8006058 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x1d4>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x1d4>
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d113      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	881a      	ldrh	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	1c9a      	adds	r2, r3, #2
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d11c      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x21c>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2246      	movs	r2, #70	; 0x46
 8006002:	5a9b      	ldrh	r3, [r3, r2]
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	b292      	uxth	r2, r2
 8006016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	1c9a      	adds	r2, r3, #2
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2246      	movs	r2, #70	; 0x46
 8006026:	5a9b      	ldrh	r3, [r3, r2]
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b299      	uxth	r1, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2246      	movs	r2, #70	; 0x46
 8006032:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006034:	2301      	movs	r3, #1
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006038:	f7fd fc34 	bl	80038a4 <HAL_GetTick>
 800603c:	0002      	movs	r2, r0
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006044:	429a      	cmp	r2, r3
 8006046:	d807      	bhi.n	8006058 <HAL_SPI_TransmitReceive+0x23c>
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	3301      	adds	r3, #1
 800604c:	d004      	beq.n	8006058 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800604e:	2323      	movs	r3, #35	; 0x23
 8006050:	18fb      	adds	r3, r7, r3
 8006052:	2203      	movs	r2, #3
 8006054:	701a      	strb	r2, [r3, #0]
        goto error;
 8006056:	e0a2      	b.n	800619e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1a3      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x18e>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2246      	movs	r2, #70	; 0x46
 8006066:	5a9b      	ldrh	r3, [r3, r2]
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d19d      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x18e>
 800606e:	e085      	b.n	800617c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_SPI_TransmitReceive+0x268>
 8006078:	2312      	movs	r3, #18
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d000      	beq.n	8006084 <HAL_SPI_TransmitReceive+0x268>
 8006082:	e070      	b.n	8006166 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	7812      	ldrb	r2, [r2, #0]
 8006090:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060aa:	e05c      	b.n	8006166 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2202      	movs	r2, #2
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d11c      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x2d8>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d017      	beq.n	80060f4 <HAL_SPI_TransmitReceive+0x2d8>
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d114      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	330c      	adds	r3, #12
 80060d4:	7812      	ldrb	r2, [r2, #0]
 80060d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2201      	movs	r2, #1
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d11e      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x324>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2246      	movs	r2, #70	; 0x46
 8006106:	5a9b      	ldrh	r3, [r3, r2]
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d018      	beq.n	8006140 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	001a      	movs	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	7812      	ldrb	r2, [r2, #0]
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2246      	movs	r2, #70	; 0x46
 800612e:	5a9b      	ldrh	r3, [r3, r2]
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b299      	uxth	r1, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2246      	movs	r2, #70	; 0x46
 800613a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800613c:	2301      	movs	r3, #1
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006140:	f7fd fbb0 	bl	80038a4 <HAL_GetTick>
 8006144:	0002      	movs	r2, r0
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614c:	429a      	cmp	r2, r3
 800614e:	d802      	bhi.n	8006156 <HAL_SPI_TransmitReceive+0x33a>
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	3301      	adds	r3, #1
 8006154:	d102      	bne.n	800615c <HAL_SPI_TransmitReceive+0x340>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800615c:	2323      	movs	r3, #35	; 0x23
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	2203      	movs	r2, #3
 8006162:	701a      	strb	r2, [r3, #0]
        goto error;
 8006164:	e01b      	b.n	800619e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d19d      	bne.n	80060ac <HAL_SPI_TransmitReceive+0x290>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2246      	movs	r2, #70	; 0x46
 8006174:	5a9b      	ldrh	r3, [r3, r2]
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d197      	bne.n	80060ac <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	0018      	movs	r0, r3
 8006184:	f000 f9aa 	bl	80064dc <SPI_EndRxTxTransaction>
 8006188:	1e03      	subs	r3, r0, #0
 800618a:	d007      	beq.n	800619c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800618c:	2323      	movs	r3, #35	; 0x23
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	2201      	movs	r2, #1
 8006192:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	661a      	str	r2, [r3, #96]	; 0x60
 800619a:	e000      	b.n	800619e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800619c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	225d      	movs	r2, #93	; 0x5d
 80061a2:	2101      	movs	r1, #1
 80061a4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	225c      	movs	r2, #92	; 0x5c
 80061aa:	2100      	movs	r1, #0
 80061ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80061ae:	2323      	movs	r3, #35	; 0x23
 80061b0:	18fb      	adds	r3, r7, r3
 80061b2:	781b      	ldrb	r3, [r3, #0]
}
 80061b4:	0018      	movs	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b00a      	add	sp, #40	; 0x28
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	ffffefff 	.word	0xffffefff

080061c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	1dfb      	adds	r3, r7, #7
 80061ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061d0:	f7fd fb68 	bl	80038a4 <HAL_GetTick>
 80061d4:	0002      	movs	r2, r0
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	18d3      	adds	r3, r2, r3
 80061de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061e0:	f7fd fb60 	bl	80038a4 <HAL_GetTick>
 80061e4:	0003      	movs	r3, r0
 80061e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061e8:	4b3a      	ldr	r3, [pc, #232]	; (80062d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	015b      	lsls	r3, r3, #5
 80061ee:	0d1b      	lsrs	r3, r3, #20
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	4353      	muls	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061f6:	e058      	b.n	80062aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	3301      	adds	r3, #1
 80061fc:	d055      	beq.n	80062aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061fe:	f7fd fb51 	bl	80038a4 <HAL_GetTick>
 8006202:	0002      	movs	r2, r0
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	429a      	cmp	r2, r3
 800620c:	d902      	bls.n	8006214 <SPI_WaitFlagStateUntilTimeout+0x54>
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d142      	bne.n	800629a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	21e0      	movs	r1, #224	; 0xe0
 8006220:	438a      	bics	r2, r1
 8006222:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	2382      	movs	r3, #130	; 0x82
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	429a      	cmp	r2, r3
 800622e:	d113      	bne.n	8006258 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	2380      	movs	r3, #128	; 0x80
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	429a      	cmp	r2, r3
 800623a:	d005      	beq.n	8006248 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	2380      	movs	r3, #128	; 0x80
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	429a      	cmp	r2, r3
 8006246:	d107      	bne.n	8006258 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2140      	movs	r1, #64	; 0x40
 8006254:	438a      	bics	r2, r1
 8006256:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	019b      	lsls	r3, r3, #6
 8006260:	429a      	cmp	r2, r3
 8006262:	d110      	bne.n	8006286 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	491a      	ldr	r1, [pc, #104]	; (80062d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006270:	400a      	ands	r2, r1
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2180      	movs	r1, #128	; 0x80
 8006280:	0189      	lsls	r1, r1, #6
 8006282:	430a      	orrs	r2, r1
 8006284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	225d      	movs	r2, #93	; 0x5d
 800628a:	2101      	movs	r1, #1
 800628c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	225c      	movs	r2, #92	; 0x5c
 8006292:	2100      	movs	r1, #0
 8006294:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e017      	b.n	80062ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	4013      	ands	r3, r2
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	425a      	negs	r2, r3
 80062ba:	4153      	adcs	r3, r2
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	001a      	movs	r2, r3
 80062c0:	1dfb      	adds	r3, r7, #7
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d197      	bne.n	80061f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	0018      	movs	r0, r3
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b008      	add	sp, #32
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	20000020 	.word	0x20000020
 80062d8:	ffffdfff 	.word	0xffffdfff

080062dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062ea:	2317      	movs	r3, #23
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	2200      	movs	r2, #0
 80062f0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062f2:	f7fd fad7 	bl	80038a4 <HAL_GetTick>
 80062f6:	0002      	movs	r2, r0
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	18d3      	adds	r3, r2, r3
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006302:	f7fd facf 	bl	80038a4 <HAL_GetTick>
 8006306:	0003      	movs	r3, r0
 8006308:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006312:	4b41      	ldr	r3, [pc, #260]	; (8006418 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	0013      	movs	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	189b      	adds	r3, r3, r2
 800631c:	00da      	lsls	r2, r3, #3
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	0d1b      	lsrs	r3, r3, #20
 8006322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006324:	4353      	muls	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006328:	e068      	b.n	80063fc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	23c0      	movs	r3, #192	; 0xc0
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	429a      	cmp	r2, r3
 8006332:	d10a      	bne.n	800634a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d107      	bne.n	800634a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	2117      	movs	r1, #23
 8006342:	187b      	adds	r3, r7, r1
 8006344:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006346:	187b      	adds	r3, r7, r1
 8006348:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	d055      	beq.n	80063fc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006350:	f7fd faa8 	bl	80038a4 <HAL_GetTick>
 8006354:	0002      	movs	r2, r0
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635c:	429a      	cmp	r2, r3
 800635e:	d902      	bls.n	8006366 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	2b00      	cmp	r3, #0
 8006364:	d142      	bne.n	80063ec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	21e0      	movs	r1, #224	; 0xe0
 8006372:	438a      	bics	r2, r1
 8006374:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	2382      	movs	r3, #130	; 0x82
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	429a      	cmp	r2, r3
 8006380:	d113      	bne.n	80063aa <SPI_WaitFifoStateUntilTimeout+0xce>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	2380      	movs	r3, #128	; 0x80
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	429a      	cmp	r2, r3
 800638c:	d005      	beq.n	800639a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	2380      	movs	r3, #128	; 0x80
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	429a      	cmp	r2, r3
 8006398:	d107      	bne.n	80063aa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2140      	movs	r1, #64	; 0x40
 80063a6:	438a      	bics	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ae:	2380      	movs	r3, #128	; 0x80
 80063b0:	019b      	lsls	r3, r3, #6
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d110      	bne.n	80063d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4916      	ldr	r1, [pc, #88]	; (800641c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80063c2:	400a      	ands	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2180      	movs	r1, #128	; 0x80
 80063d2:	0189      	lsls	r1, r1, #6
 80063d4:	430a      	orrs	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	225d      	movs	r2, #93	; 0x5d
 80063dc:	2101      	movs	r1, #1
 80063de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	225c      	movs	r2, #92	; 0x5c
 80063e4:	2100      	movs	r1, #0
 80063e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e010      	b.n	800640e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d18e      	bne.n	800632a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	0018      	movs	r0, r3
 8006410:	46bd      	mov	sp, r7
 8006412:	b00a      	add	sp, #40	; 0x28
 8006414:	bd80      	pop	{r7, pc}
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	20000020 	.word	0x20000020
 800641c:	ffffdfff 	.word	0xffffdfff

08006420 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	2382      	movs	r3, #130	; 0x82
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	429a      	cmp	r2, r3
 8006436:	d113      	bne.n	8006460 <SPI_EndRxTransaction+0x40>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	2380      	movs	r3, #128	; 0x80
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	429a      	cmp	r2, r3
 8006442:	d005      	beq.n	8006450 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	2380      	movs	r3, #128	; 0x80
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	429a      	cmp	r2, r3
 800644e:	d107      	bne.n	8006460 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2140      	movs	r1, #64	; 0x40
 800645c:	438a      	bics	r2, r1
 800645e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	0013      	movs	r3, r2
 800646a:	2200      	movs	r2, #0
 800646c:	2180      	movs	r1, #128	; 0x80
 800646e:	f7ff fea7 	bl	80061c0 <SPI_WaitFlagStateUntilTimeout>
 8006472:	1e03      	subs	r3, r0, #0
 8006474:	d007      	beq.n	8006486 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647a:	2220      	movs	r2, #32
 800647c:	431a      	orrs	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e026      	b.n	80064d4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	2382      	movs	r3, #130	; 0x82
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	429a      	cmp	r2, r3
 8006490:	d11f      	bne.n	80064d2 <SPI_EndRxTransaction+0xb2>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	429a      	cmp	r2, r3
 800649c:	d005      	beq.n	80064aa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	2380      	movs	r3, #128	; 0x80
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d113      	bne.n	80064d2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	23c0      	movs	r3, #192	; 0xc0
 80064ae:	00d9      	lsls	r1, r3, #3
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	0013      	movs	r3, r2
 80064b8:	2200      	movs	r2, #0
 80064ba:	f7ff ff0f 	bl	80062dc <SPI_WaitFifoStateUntilTimeout>
 80064be:	1e03      	subs	r3, r0, #0
 80064c0:	d007      	beq.n	80064d2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c6:	2220      	movs	r2, #32
 80064c8:	431a      	orrs	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e000      	b.n	80064d4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	0018      	movs	r0, r3
 80064d6:	46bd      	mov	sp, r7
 80064d8:	b004      	add	sp, #16
 80064da:	bd80      	pop	{r7, pc}

080064dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	23c0      	movs	r3, #192	; 0xc0
 80064ec:	0159      	lsls	r1, r3, #5
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	0013      	movs	r3, r2
 80064f6:	2200      	movs	r2, #0
 80064f8:	f7ff fef0 	bl	80062dc <SPI_WaitFifoStateUntilTimeout>
 80064fc:	1e03      	subs	r3, r0, #0
 80064fe:	d007      	beq.n	8006510 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006504:	2220      	movs	r2, #32
 8006506:	431a      	orrs	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e027      	b.n	8006560 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	0013      	movs	r3, r2
 800651a:	2200      	movs	r2, #0
 800651c:	2180      	movs	r1, #128	; 0x80
 800651e:	f7ff fe4f 	bl	80061c0 <SPI_WaitFlagStateUntilTimeout>
 8006522:	1e03      	subs	r3, r0, #0
 8006524:	d007      	beq.n	8006536 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652a:	2220      	movs	r2, #32
 800652c:	431a      	orrs	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e014      	b.n	8006560 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	23c0      	movs	r3, #192	; 0xc0
 800653a:	00d9      	lsls	r1, r3, #3
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	0013      	movs	r3, r2
 8006544:	2200      	movs	r2, #0
 8006546:	f7ff fec9 	bl	80062dc <SPI_WaitFifoStateUntilTimeout>
 800654a:	1e03      	subs	r3, r0, #0
 800654c:	d007      	beq.n	800655e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006552:	2220      	movs	r2, #32
 8006554:	431a      	orrs	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e000      	b.n	8006560 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	0018      	movs	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	b004      	add	sp, #16
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e04a      	b.n	8006610 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	223d      	movs	r2, #61	; 0x3d
 800657e:	5c9b      	ldrb	r3, [r3, r2]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d107      	bne.n	8006596 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	223c      	movs	r2, #60	; 0x3c
 800658a:	2100      	movs	r1, #0
 800658c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	0018      	movs	r0, r3
 8006592:	f7fc fe9f 	bl	80032d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	223d      	movs	r2, #61	; 0x3d
 800659a:	2102      	movs	r1, #2
 800659c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3304      	adds	r3, #4
 80065a6:	0019      	movs	r1, r3
 80065a8:	0010      	movs	r0, r2
 80065aa:	f000 fa11 	bl	80069d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2248      	movs	r2, #72	; 0x48
 80065b2:	2101      	movs	r1, #1
 80065b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	223e      	movs	r2, #62	; 0x3e
 80065ba:	2101      	movs	r1, #1
 80065bc:	5499      	strb	r1, [r3, r2]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	223f      	movs	r2, #63	; 0x3f
 80065c2:	2101      	movs	r1, #1
 80065c4:	5499      	strb	r1, [r3, r2]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2240      	movs	r2, #64	; 0x40
 80065ca:	2101      	movs	r1, #1
 80065cc:	5499      	strb	r1, [r3, r2]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2241      	movs	r2, #65	; 0x41
 80065d2:	2101      	movs	r1, #1
 80065d4:	5499      	strb	r1, [r3, r2]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2242      	movs	r2, #66	; 0x42
 80065da:	2101      	movs	r1, #1
 80065dc:	5499      	strb	r1, [r3, r2]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2243      	movs	r2, #67	; 0x43
 80065e2:	2101      	movs	r1, #1
 80065e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2244      	movs	r2, #68	; 0x44
 80065ea:	2101      	movs	r1, #1
 80065ec:	5499      	strb	r1, [r3, r2]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2245      	movs	r2, #69	; 0x45
 80065f2:	2101      	movs	r1, #1
 80065f4:	5499      	strb	r1, [r3, r2]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2246      	movs	r2, #70	; 0x46
 80065fa:	2101      	movs	r1, #1
 80065fc:	5499      	strb	r1, [r3, r2]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2247      	movs	r2, #71	; 0x47
 8006602:	2101      	movs	r1, #1
 8006604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	223d      	movs	r2, #61	; 0x3d
 800660a:	2101      	movs	r1, #1
 800660c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	0018      	movs	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	b002      	add	sp, #8
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	223d      	movs	r2, #61	; 0x3d
 8006624:	5c9b      	ldrb	r3, [r3, r2]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	d001      	beq.n	8006630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e042      	b.n	80066b6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	223d      	movs	r2, #61	; 0x3d
 8006634:	2102      	movs	r1, #2
 8006636:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2101      	movs	r1, #1
 8006644:	430a      	orrs	r2, r1
 8006646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <HAL_TIM_Base_Start_IT+0xa8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00f      	beq.n	8006672 <HAL_TIM_Base_Start_IT+0x5a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	2380      	movs	r3, #128	; 0x80
 8006658:	05db      	lsls	r3, r3, #23
 800665a:	429a      	cmp	r2, r3
 800665c:	d009      	beq.n	8006672 <HAL_TIM_Base_Start_IT+0x5a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a18      	ldr	r2, [pc, #96]	; (80066c4 <HAL_TIM_Base_Start_IT+0xac>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d004      	beq.n	8006672 <HAL_TIM_Base_Start_IT+0x5a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a16      	ldr	r2, [pc, #88]	; (80066c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d116      	bne.n	80066a0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	4a14      	ldr	r2, [pc, #80]	; (80066cc <HAL_TIM_Base_Start_IT+0xb4>)
 800667a:	4013      	ands	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b06      	cmp	r3, #6
 8006682:	d016      	beq.n	80066b2 <HAL_TIM_Base_Start_IT+0x9a>
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	2380      	movs	r3, #128	; 0x80
 8006688:	025b      	lsls	r3, r3, #9
 800668a:	429a      	cmp	r2, r3
 800668c:	d011      	beq.n	80066b2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2101      	movs	r1, #1
 800669a:	430a      	orrs	r2, r1
 800669c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669e:	e008      	b.n	80066b2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2101      	movs	r1, #1
 80066ac:	430a      	orrs	r2, r1
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e000      	b.n	80066b4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	0018      	movs	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b004      	add	sp, #16
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	40012c00 	.word	0x40012c00
 80066c4:	40000400 	.word	0x40000400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	00010007 	.word	0x00010007

080066d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2101      	movs	r1, #1
 80066e4:	438a      	bics	r2, r1
 80066e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	4a0d      	ldr	r2, [pc, #52]	; (8006724 <HAL_TIM_Base_Stop_IT+0x54>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	d10d      	bne.n	8006710 <HAL_TIM_Base_Stop_IT+0x40>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <HAL_TIM_Base_Stop_IT+0x58>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	d107      	bne.n	8006710 <HAL_TIM_Base_Stop_IT+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2101      	movs	r1, #1
 800670c:	438a      	bics	r2, r1
 800670e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	223d      	movs	r2, #61	; 0x3d
 8006714:	2101      	movs	r1, #1
 8006716:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b002      	add	sp, #8
 8006720:	bd80      	pop	{r7, pc}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	00001111 	.word	0x00001111
 8006728:	00000444 	.word	0x00000444

0800672c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2202      	movs	r2, #2
 800673c:	4013      	ands	r3, r2
 800673e:	2b02      	cmp	r3, #2
 8006740:	d124      	bne.n	800678c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	2202      	movs	r2, #2
 800674a:	4013      	ands	r3, r2
 800674c:	2b02      	cmp	r3, #2
 800674e:	d11d      	bne.n	800678c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2203      	movs	r2, #3
 8006756:	4252      	negs	r2, r2
 8006758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	2203      	movs	r2, #3
 8006768:	4013      	ands	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	0018      	movs	r0, r3
 8006770:	f000 f916 	bl	80069a0 <HAL_TIM_IC_CaptureCallback>
 8006774:	e007      	b.n	8006786 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0018      	movs	r0, r3
 800677a:	f000 f909 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	0018      	movs	r0, r3
 8006782:	f000 f915 	bl	80069b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2204      	movs	r2, #4
 8006794:	4013      	ands	r3, r2
 8006796:	2b04      	cmp	r3, #4
 8006798:	d125      	bne.n	80067e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2204      	movs	r2, #4
 80067a2:	4013      	ands	r3, r2
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d11e      	bne.n	80067e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2205      	movs	r2, #5
 80067ae:	4252      	negs	r2, r2
 80067b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	23c0      	movs	r3, #192	; 0xc0
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4013      	ands	r3, r2
 80067c4:	d004      	beq.n	80067d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	0018      	movs	r0, r3
 80067ca:	f000 f8e9 	bl	80069a0 <HAL_TIM_IC_CaptureCallback>
 80067ce:	e007      	b.n	80067e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	0018      	movs	r0, r3
 80067d4:	f000 f8dc 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	0018      	movs	r0, r3
 80067dc:	f000 f8e8 	bl	80069b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2208      	movs	r2, #8
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d124      	bne.n	800683e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	2208      	movs	r2, #8
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d11d      	bne.n	800683e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2209      	movs	r2, #9
 8006808:	4252      	negs	r2, r2
 800680a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2204      	movs	r2, #4
 8006810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	2203      	movs	r2, #3
 800681a:	4013      	ands	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0018      	movs	r0, r3
 8006822:	f000 f8bd 	bl	80069a0 <HAL_TIM_IC_CaptureCallback>
 8006826:	e007      	b.n	8006838 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0018      	movs	r0, r3
 800682c:	f000 f8b0 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	0018      	movs	r0, r3
 8006834:	f000 f8bc 	bl	80069b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2210      	movs	r2, #16
 8006846:	4013      	ands	r3, r2
 8006848:	2b10      	cmp	r3, #16
 800684a:	d125      	bne.n	8006898 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	2210      	movs	r2, #16
 8006854:	4013      	ands	r3, r2
 8006856:	2b10      	cmp	r3, #16
 8006858:	d11e      	bne.n	8006898 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2211      	movs	r2, #17
 8006860:	4252      	negs	r2, r2
 8006862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2208      	movs	r2, #8
 8006868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	23c0      	movs	r3, #192	; 0xc0
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4013      	ands	r3, r2
 8006876:	d004      	beq.n	8006882 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	0018      	movs	r0, r3
 800687c:	f000 f890 	bl	80069a0 <HAL_TIM_IC_CaptureCallback>
 8006880:	e007      	b.n	8006892 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	0018      	movs	r0, r3
 8006886:	f000 f883 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	0018      	movs	r0, r3
 800688e:	f000 f88f 	bl	80069b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2201      	movs	r2, #1
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d10f      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d108      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2202      	movs	r2, #2
 80068ba:	4252      	negs	r2, r2
 80068bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	0018      	movs	r0, r3
 80068c2:	f7fc fc33 	bl	800312c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2280      	movs	r2, #128	; 0x80
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b80      	cmp	r3, #128	; 0x80
 80068d2:	d10f      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2280      	movs	r2, #128	; 0x80
 80068dc:	4013      	ands	r3, r2
 80068de:	2b80      	cmp	r3, #128	; 0x80
 80068e0:	d108      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2281      	movs	r2, #129	; 0x81
 80068e8:	4252      	negs	r2, r2
 80068ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	0018      	movs	r0, r3
 80068f0:	f000 f964 	bl	8006bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	2380      	movs	r3, #128	; 0x80
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	401a      	ands	r2, r3
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	429a      	cmp	r2, r3
 8006906:	d10e      	bne.n	8006926 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	2280      	movs	r2, #128	; 0x80
 8006910:	4013      	ands	r3, r2
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d107      	bne.n	8006926 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <HAL_TIM_IRQHandler+0x260>)
 800691c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	0018      	movs	r0, r3
 8006922:	f000 f953 	bl	8006bcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2240      	movs	r2, #64	; 0x40
 800692e:	4013      	ands	r3, r2
 8006930:	2b40      	cmp	r3, #64	; 0x40
 8006932:	d10f      	bne.n	8006954 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2240      	movs	r2, #64	; 0x40
 800693c:	4013      	ands	r3, r2
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d108      	bne.n	8006954 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2241      	movs	r2, #65	; 0x41
 8006948:	4252      	negs	r2, r2
 800694a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	0018      	movs	r0, r3
 8006950:	f000 f836 	bl	80069c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2220      	movs	r2, #32
 800695c:	4013      	ands	r3, r2
 800695e:	2b20      	cmp	r3, #32
 8006960:	d10f      	bne.n	8006982 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	4013      	ands	r3, r2
 800696c:	2b20      	cmp	r3, #32
 800696e:	d108      	bne.n	8006982 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2221      	movs	r2, #33	; 0x21
 8006976:	4252      	negs	r2, r2
 8006978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	0018      	movs	r0, r3
 800697e:	f000 f915 	bl	8006bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006982:	46c0      	nop			; (mov r8, r8)
 8006984:	46bd      	mov	sp, r7
 8006986:	b002      	add	sp, #8
 8006988:	bd80      	pop	{r7, pc}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	fffffeff 	.word	0xfffffeff

08006990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	b002      	add	sp, #8
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069a8:	46c0      	nop			; (mov r8, r8)
 80069aa:	46bd      	mov	sp, r7
 80069ac:	b002      	add	sp, #8
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069c8:	46c0      	nop			; (mov r8, r8)
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b002      	add	sp, #8
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a34      	ldr	r2, [pc, #208]	; (8006ab4 <TIM_Base_SetConfig+0xe4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d008      	beq.n	80069fa <TIM_Base_SetConfig+0x2a>
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	2380      	movs	r3, #128	; 0x80
 80069ec:	05db      	lsls	r3, r3, #23
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d003      	beq.n	80069fa <TIM_Base_SetConfig+0x2a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a30      	ldr	r2, [pc, #192]	; (8006ab8 <TIM_Base_SetConfig+0xe8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d108      	bne.n	8006a0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2270      	movs	r2, #112	; 0x70
 80069fe:	4393      	bics	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a29      	ldr	r2, [pc, #164]	; (8006ab4 <TIM_Base_SetConfig+0xe4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d018      	beq.n	8006a46 <TIM_Base_SetConfig+0x76>
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	2380      	movs	r3, #128	; 0x80
 8006a18:	05db      	lsls	r3, r3, #23
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d013      	beq.n	8006a46 <TIM_Base_SetConfig+0x76>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a25      	ldr	r2, [pc, #148]	; (8006ab8 <TIM_Base_SetConfig+0xe8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00f      	beq.n	8006a46 <TIM_Base_SetConfig+0x76>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a24      	ldr	r2, [pc, #144]	; (8006abc <TIM_Base_SetConfig+0xec>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00b      	beq.n	8006a46 <TIM_Base_SetConfig+0x76>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a23      	ldr	r2, [pc, #140]	; (8006ac0 <TIM_Base_SetConfig+0xf0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d007      	beq.n	8006a46 <TIM_Base_SetConfig+0x76>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a22      	ldr	r2, [pc, #136]	; (8006ac4 <TIM_Base_SetConfig+0xf4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_Base_SetConfig+0x76>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a21      	ldr	r2, [pc, #132]	; (8006ac8 <TIM_Base_SetConfig+0xf8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d108      	bne.n	8006a58 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a20      	ldr	r2, [pc, #128]	; (8006acc <TIM_Base_SetConfig+0xfc>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2280      	movs	r2, #128	; 0x80
 8006a5c:	4393      	bics	r3, r2
 8006a5e:	001a      	movs	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a0c      	ldr	r2, [pc, #48]	; (8006ab4 <TIM_Base_SetConfig+0xe4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00b      	beq.n	8006a9e <TIM_Base_SetConfig+0xce>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <TIM_Base_SetConfig+0xf0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d007      	beq.n	8006a9e <TIM_Base_SetConfig+0xce>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a0c      	ldr	r2, [pc, #48]	; (8006ac4 <TIM_Base_SetConfig+0xf4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d003      	beq.n	8006a9e <TIM_Base_SetConfig+0xce>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a0b      	ldr	r2, [pc, #44]	; (8006ac8 <TIM_Base_SetConfig+0xf8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d103      	bne.n	8006aa6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	691a      	ldr	r2, [r3, #16]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	615a      	str	r2, [r3, #20]
}
 8006aac:	46c0      	nop			; (mov r8, r8)
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b004      	add	sp, #16
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40002000 	.word	0x40002000
 8006ac0:	40014000 	.word	0x40014000
 8006ac4:	40014400 	.word	0x40014400
 8006ac8:	40014800 	.word	0x40014800
 8006acc:	fffffcff 	.word	0xfffffcff

08006ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	223c      	movs	r2, #60	; 0x3c
 8006ade:	5c9b      	ldrb	r3, [r3, r2]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e055      	b.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	223c      	movs	r2, #60	; 0x3c
 8006aec:	2101      	movs	r1, #1
 8006aee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	223d      	movs	r2, #61	; 0x3d
 8006af4:	2102      	movs	r1, #2
 8006af6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a23      	ldr	r2, [pc, #140]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d108      	bne.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2270      	movs	r2, #112	; 0x70
 8006b28:	4393      	bics	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a16      	ldr	r2, [pc, #88]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00f      	beq.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	05db      	lsls	r3, r3, #23
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d009      	beq.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a12      	ldr	r2, [pc, #72]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d004      	beq.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a11      	ldr	r2, [pc, #68]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d10c      	bne.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2280      	movs	r2, #128	; 0x80
 8006b6c:	4393      	bics	r3, r2
 8006b6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	223d      	movs	r2, #61	; 0x3d
 8006b86:	2101      	movs	r1, #1
 8006b88:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	223c      	movs	r2, #60	; 0x3c
 8006b8e:	2100      	movs	r1, #0
 8006b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	0018      	movs	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b004      	add	sp, #16
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	ff0fffff 	.word	0xff0fffff
 8006ba4:	40000400 	.word	0x40000400
 8006ba8:	40014000 	.word	0x40014000

08006bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bb4:	46c0      	nop			; (mov r8, r8)
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b002      	add	sp, #8
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bc4:	46c0      	nop			; (mov r8, r8)
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b002      	add	sp, #8
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b002      	add	sp, #8
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e046      	b.n	8006c7c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2288      	movs	r2, #136	; 0x88
 8006bf2:	589b      	ldr	r3, [r3, r2]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2284      	movs	r2, #132	; 0x84
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7fc fb8c 	bl	8003320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2288      	movs	r2, #136	; 0x88
 8006c0c:	2124      	movs	r1, #36	; 0x24
 8006c0e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	438a      	bics	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	0018      	movs	r0, r3
 8006c24:	f000 f9ee 	bl	8007004 <UART_SetConfig>
 8006c28:	0003      	movs	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e024      	b.n	8006c7c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f000 fc9f 	bl	8007580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	490d      	ldr	r1, [pc, #52]	; (8006c84 <HAL_UART_Init+0xa8>)
 8006c4e:	400a      	ands	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	212a      	movs	r1, #42	; 0x2a
 8006c5e:	438a      	bics	r2, r1
 8006c60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fd37 	bl	80076e8 <UART_CheckIdleState>
 8006c7a:	0003      	movs	r3, r0
}
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	b002      	add	sp, #8
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	ffffb7ff 	.word	0xffffb7ff

08006c88 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e032      	b.n	8006d00 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2288      	movs	r2, #136	; 0x88
 8006c9e:	2124      	movs	r1, #36	; 0x24
 8006ca0:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2101      	movs	r1, #1
 8006cae:	438a      	bics	r2, r1
 8006cb0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f7fc fc0b 	bl	80034e8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2290      	movs	r2, #144	; 0x90
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2288      	movs	r2, #136	; 0x88
 8006cde:	2100      	movs	r1, #0
 8006ce0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	228c      	movs	r2, #140	; 0x8c
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2284      	movs	r2, #132	; 0x84
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	0018      	movs	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b002      	add	sp, #8
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	; 0x28
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	1dbb      	adds	r3, r7, #6
 8006d16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2288      	movs	r2, #136	; 0x88
 8006d1c:	589b      	ldr	r3, [r3, r2]
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d000      	beq.n	8006d24 <HAL_UART_Transmit+0x1c>
 8006d22:	e088      	b.n	8006e36 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_UART_Transmit+0x2a>
 8006d2a:	1dbb      	adds	r3, r7, #6
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e080      	b.n	8006e38 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	2380      	movs	r3, #128	; 0x80
 8006d3c:	015b      	lsls	r3, r3, #5
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d109      	bne.n	8006d56 <HAL_UART_Transmit+0x4e>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d105      	bne.n	8006d56 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d001      	beq.n	8006d56 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e070      	b.n	8006e38 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2290      	movs	r2, #144	; 0x90
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2288      	movs	r2, #136	; 0x88
 8006d62:	2121      	movs	r1, #33	; 0x21
 8006d64:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d66:	f7fc fd9d 	bl	80038a4 <HAL_GetTick>
 8006d6a:	0003      	movs	r3, r0
 8006d6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1dba      	adds	r2, r7, #6
 8006d72:	2154      	movs	r1, #84	; 0x54
 8006d74:	8812      	ldrh	r2, [r2, #0]
 8006d76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	1dba      	adds	r2, r7, #6
 8006d7c:	2156      	movs	r1, #86	; 0x56
 8006d7e:	8812      	ldrh	r2, [r2, #0]
 8006d80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	2380      	movs	r3, #128	; 0x80
 8006d88:	015b      	lsls	r3, r3, #5
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d108      	bne.n	8006da0 <HAL_UART_Transmit+0x98>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	e003      	b.n	8006da8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006da8:	e02c      	b.n	8006e04 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	0013      	movs	r3, r2
 8006db4:	2200      	movs	r2, #0
 8006db6:	2180      	movs	r1, #128	; 0x80
 8006db8:	f000 fce4 	bl	8007784 <UART_WaitOnFlagUntilTimeout>
 8006dbc:	1e03      	subs	r3, r0, #0
 8006dbe:	d001      	beq.n	8006dc4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e039      	b.n	8006e38 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	001a      	movs	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	05d2      	lsls	r2, r2, #23
 8006dd6:	0dd2      	lsrs	r2, r2, #23
 8006dd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	3302      	adds	r3, #2
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e007      	b.n	8006df2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	3301      	adds	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2256      	movs	r2, #86	; 0x56
 8006df6:	5a9b      	ldrh	r3, [r3, r2]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b299      	uxth	r1, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2256      	movs	r2, #86	; 0x56
 8006e02:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2256      	movs	r2, #86	; 0x56
 8006e08:	5a9b      	ldrh	r3, [r3, r2]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1cc      	bne.n	8006daa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	0013      	movs	r3, r2
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2140      	movs	r1, #64	; 0x40
 8006e1e:	f000 fcb1 	bl	8007784 <UART_WaitOnFlagUntilTimeout>
 8006e22:	1e03      	subs	r3, r0, #0
 8006e24:	d001      	beq.n	8006e2a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e006      	b.n	8006e38 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2288      	movs	r2, #136	; 0x88
 8006e2e:	2120      	movs	r1, #32
 8006e30:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	e000      	b.n	8006e38 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006e36:	2302      	movs	r3, #2
  }
}
 8006e38:	0018      	movs	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b008      	add	sp, #32
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	1dbb      	adds	r3, r7, #6
 8006e4e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	228c      	movs	r2, #140	; 0x8c
 8006e54:	589b      	ldr	r3, [r3, r2]
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d000      	beq.n	8006e5c <HAL_UART_Receive+0x1c>
 8006e5a:	e0cc      	b.n	8006ff6 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_UART_Receive+0x2a>
 8006e62:	1dbb      	adds	r3, r7, #6
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e0c4      	b.n	8006ff8 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	2380      	movs	r3, #128	; 0x80
 8006e74:	015b      	lsls	r3, r3, #5
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d109      	bne.n	8006e8e <HAL_UART_Receive+0x4e>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d105      	bne.n	8006e8e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2201      	movs	r2, #1
 8006e86:	4013      	ands	r3, r2
 8006e88:	d001      	beq.n	8006e8e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e0b4      	b.n	8006ff8 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2290      	movs	r2, #144	; 0x90
 8006e92:	2100      	movs	r1, #0
 8006e94:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	228c      	movs	r2, #140	; 0x8c
 8006e9a:	2122      	movs	r1, #34	; 0x22
 8006e9c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ea4:	f7fc fcfe 	bl	80038a4 <HAL_GetTick>
 8006ea8:	0003      	movs	r3, r0
 8006eaa:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	1dba      	adds	r2, r7, #6
 8006eb0:	215c      	movs	r1, #92	; 0x5c
 8006eb2:	8812      	ldrh	r2, [r2, #0]
 8006eb4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	1dba      	adds	r2, r7, #6
 8006eba:	215e      	movs	r1, #94	; 0x5e
 8006ebc:	8812      	ldrh	r2, [r2, #0]
 8006ebe:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	2380      	movs	r3, #128	; 0x80
 8006ec6:	015b      	lsls	r3, r3, #5
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d10d      	bne.n	8006ee8 <HAL_UART_Receive+0xa8>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d104      	bne.n	8006ede <HAL_UART_Receive+0x9e>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2260      	movs	r2, #96	; 0x60
 8006ed8:	4949      	ldr	r1, [pc, #292]	; (8007000 <HAL_UART_Receive+0x1c0>)
 8006eda:	5299      	strh	r1, [r3, r2]
 8006edc:	e02e      	b.n	8006f3c <HAL_UART_Receive+0xfc>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2260      	movs	r2, #96	; 0x60
 8006ee2:	21ff      	movs	r1, #255	; 0xff
 8006ee4:	5299      	strh	r1, [r3, r2]
 8006ee6:	e029      	b.n	8006f3c <HAL_UART_Receive+0xfc>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10d      	bne.n	8006f0c <HAL_UART_Receive+0xcc>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <HAL_UART_Receive+0xc2>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2260      	movs	r2, #96	; 0x60
 8006efc:	21ff      	movs	r1, #255	; 0xff
 8006efe:	5299      	strh	r1, [r3, r2]
 8006f00:	e01c      	b.n	8006f3c <HAL_UART_Receive+0xfc>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2260      	movs	r2, #96	; 0x60
 8006f06:	217f      	movs	r1, #127	; 0x7f
 8006f08:	5299      	strh	r1, [r3, r2]
 8006f0a:	e017      	b.n	8006f3c <HAL_UART_Receive+0xfc>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	2380      	movs	r3, #128	; 0x80
 8006f12:	055b      	lsls	r3, r3, #21
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d10d      	bne.n	8006f34 <HAL_UART_Receive+0xf4>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <HAL_UART_Receive+0xea>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2260      	movs	r2, #96	; 0x60
 8006f24:	217f      	movs	r1, #127	; 0x7f
 8006f26:	5299      	strh	r1, [r3, r2]
 8006f28:	e008      	b.n	8006f3c <HAL_UART_Receive+0xfc>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2260      	movs	r2, #96	; 0x60
 8006f2e:	213f      	movs	r1, #63	; 0x3f
 8006f30:	5299      	strh	r1, [r3, r2]
 8006f32:	e003      	b.n	8006f3c <HAL_UART_Receive+0xfc>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2260      	movs	r2, #96	; 0x60
 8006f38:	2100      	movs	r1, #0
 8006f3a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006f3c:	2312      	movs	r3, #18
 8006f3e:	18fb      	adds	r3, r7, r3
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	2160      	movs	r1, #96	; 0x60
 8006f44:	5a52      	ldrh	r2, [r2, r1]
 8006f46:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	2380      	movs	r3, #128	; 0x80
 8006f4e:	015b      	lsls	r3, r3, #5
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d108      	bne.n	8006f66 <HAL_UART_Receive+0x126>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	61bb      	str	r3, [r7, #24]
 8006f64:	e003      	b.n	8006f6e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f6e:	e036      	b.n	8006fde <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	0013      	movs	r3, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2120      	movs	r1, #32
 8006f7e:	f000 fc01 	bl	8007784 <UART_WaitOnFlagUntilTimeout>
 8006f82:	1e03      	subs	r3, r0, #0
 8006f84:	d001      	beq.n	8006f8a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e036      	b.n	8006ff8 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10e      	bne.n	8006fae <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2212      	movs	r2, #18
 8006f9a:	18ba      	adds	r2, r7, r2
 8006f9c:	8812      	ldrh	r2, [r2, #0]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	3302      	adds	r3, #2
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	e00e      	b.n	8006fcc <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2212      	movs	r2, #18
 8006fb8:	18ba      	adds	r2, r7, r2
 8006fba:	8812      	ldrh	r2, [r2, #0]
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	225e      	movs	r2, #94	; 0x5e
 8006fd0:	5a9b      	ldrh	r3, [r3, r2]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b299      	uxth	r1, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	225e      	movs	r2, #94	; 0x5e
 8006fdc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	225e      	movs	r2, #94	; 0x5e
 8006fe2:	5a9b      	ldrh	r3, [r3, r2]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1c2      	bne.n	8006f70 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	228c      	movs	r2, #140	; 0x8c
 8006fee:	2120      	movs	r1, #32
 8006ff0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e000      	b.n	8006ff8 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8006ff6:	2302      	movs	r3, #2
  }
}
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b008      	add	sp, #32
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	000001ff 	.word	0x000001ff

08007004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007004:	b5b0      	push	{r4, r5, r7, lr}
 8007006:	b090      	sub	sp, #64	; 0x40
 8007008:	af00      	add	r7, sp, #0
 800700a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800700c:	231a      	movs	r3, #26
 800700e:	2220      	movs	r2, #32
 8007010:	189b      	adds	r3, r3, r2
 8007012:	19db      	adds	r3, r3, r7
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	431a      	orrs	r2, r3
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	431a      	orrs	r2, r3
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	4313      	orrs	r3, r2
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4aaf      	ldr	r2, [pc, #700]	; (80072f4 <UART_SetConfig+0x2f0>)
 8007038:	4013      	ands	r3, r2
 800703a:	0019      	movs	r1, r3
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007042:	430b      	orrs	r3, r1
 8007044:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	4aaa      	ldr	r2, [pc, #680]	; (80072f8 <UART_SetConfig+0x2f4>)
 800704e:	4013      	ands	r3, r2
 8007050:	0018      	movs	r0, r3
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	68d9      	ldr	r1, [r3, #12]
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	0003      	movs	r3, r0
 800705c:	430b      	orrs	r3, r1
 800705e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4aa4      	ldr	r2, [pc, #656]	; (80072fc <UART_SetConfig+0x2f8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d004      	beq.n	800707a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007076:	4313      	orrs	r3, r2
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	4a9f      	ldr	r2, [pc, #636]	; (8007300 <UART_SetConfig+0x2fc>)
 8007082:	4013      	ands	r3, r2
 8007084:	0019      	movs	r1, r3
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	430b      	orrs	r3, r1
 800708e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	220f      	movs	r2, #15
 8007098:	4393      	bics	r3, r2
 800709a:	0018      	movs	r0, r3
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	0003      	movs	r3, r0
 80070a6:	430b      	orrs	r3, r1
 80070a8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a95      	ldr	r2, [pc, #596]	; (8007304 <UART_SetConfig+0x300>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d131      	bne.n	8007118 <UART_SetConfig+0x114>
 80070b4:	4b94      	ldr	r3, [pc, #592]	; (8007308 <UART_SetConfig+0x304>)
 80070b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b8:	2203      	movs	r2, #3
 80070ba:	4013      	ands	r3, r2
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d01d      	beq.n	80070fc <UART_SetConfig+0xf8>
 80070c0:	d823      	bhi.n	800710a <UART_SetConfig+0x106>
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d00c      	beq.n	80070e0 <UART_SetConfig+0xdc>
 80070c6:	d820      	bhi.n	800710a <UART_SetConfig+0x106>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <UART_SetConfig+0xce>
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d00e      	beq.n	80070ee <UART_SetConfig+0xea>
 80070d0:	e01b      	b.n	800710a <UART_SetConfig+0x106>
 80070d2:	231b      	movs	r3, #27
 80070d4:	2220      	movs	r2, #32
 80070d6:	189b      	adds	r3, r3, r2
 80070d8:	19db      	adds	r3, r3, r7
 80070da:	2200      	movs	r2, #0
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	e0b4      	b.n	800724a <UART_SetConfig+0x246>
 80070e0:	231b      	movs	r3, #27
 80070e2:	2220      	movs	r2, #32
 80070e4:	189b      	adds	r3, r3, r2
 80070e6:	19db      	adds	r3, r3, r7
 80070e8:	2202      	movs	r2, #2
 80070ea:	701a      	strb	r2, [r3, #0]
 80070ec:	e0ad      	b.n	800724a <UART_SetConfig+0x246>
 80070ee:	231b      	movs	r3, #27
 80070f0:	2220      	movs	r2, #32
 80070f2:	189b      	adds	r3, r3, r2
 80070f4:	19db      	adds	r3, r3, r7
 80070f6:	2204      	movs	r2, #4
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	e0a6      	b.n	800724a <UART_SetConfig+0x246>
 80070fc:	231b      	movs	r3, #27
 80070fe:	2220      	movs	r2, #32
 8007100:	189b      	adds	r3, r3, r2
 8007102:	19db      	adds	r3, r3, r7
 8007104:	2208      	movs	r2, #8
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	e09f      	b.n	800724a <UART_SetConfig+0x246>
 800710a:	231b      	movs	r3, #27
 800710c:	2220      	movs	r2, #32
 800710e:	189b      	adds	r3, r3, r2
 8007110:	19db      	adds	r3, r3, r7
 8007112:	2210      	movs	r2, #16
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e098      	b.n	800724a <UART_SetConfig+0x246>
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a7b      	ldr	r2, [pc, #492]	; (800730c <UART_SetConfig+0x308>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d131      	bne.n	8007186 <UART_SetConfig+0x182>
 8007122:	4b79      	ldr	r3, [pc, #484]	; (8007308 <UART_SetConfig+0x304>)
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	220c      	movs	r2, #12
 8007128:	4013      	ands	r3, r2
 800712a:	2b0c      	cmp	r3, #12
 800712c:	d01d      	beq.n	800716a <UART_SetConfig+0x166>
 800712e:	d823      	bhi.n	8007178 <UART_SetConfig+0x174>
 8007130:	2b08      	cmp	r3, #8
 8007132:	d00c      	beq.n	800714e <UART_SetConfig+0x14a>
 8007134:	d820      	bhi.n	8007178 <UART_SetConfig+0x174>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <UART_SetConfig+0x13c>
 800713a:	2b04      	cmp	r3, #4
 800713c:	d00e      	beq.n	800715c <UART_SetConfig+0x158>
 800713e:	e01b      	b.n	8007178 <UART_SetConfig+0x174>
 8007140:	231b      	movs	r3, #27
 8007142:	2220      	movs	r2, #32
 8007144:	189b      	adds	r3, r3, r2
 8007146:	19db      	adds	r3, r3, r7
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	e07d      	b.n	800724a <UART_SetConfig+0x246>
 800714e:	231b      	movs	r3, #27
 8007150:	2220      	movs	r2, #32
 8007152:	189b      	adds	r3, r3, r2
 8007154:	19db      	adds	r3, r3, r7
 8007156:	2202      	movs	r2, #2
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e076      	b.n	800724a <UART_SetConfig+0x246>
 800715c:	231b      	movs	r3, #27
 800715e:	2220      	movs	r2, #32
 8007160:	189b      	adds	r3, r3, r2
 8007162:	19db      	adds	r3, r3, r7
 8007164:	2204      	movs	r2, #4
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	e06f      	b.n	800724a <UART_SetConfig+0x246>
 800716a:	231b      	movs	r3, #27
 800716c:	2220      	movs	r2, #32
 800716e:	189b      	adds	r3, r3, r2
 8007170:	19db      	adds	r3, r3, r7
 8007172:	2208      	movs	r2, #8
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	e068      	b.n	800724a <UART_SetConfig+0x246>
 8007178:	231b      	movs	r3, #27
 800717a:	2220      	movs	r2, #32
 800717c:	189b      	adds	r3, r3, r2
 800717e:	19db      	adds	r3, r3, r7
 8007180:	2210      	movs	r2, #16
 8007182:	701a      	strb	r2, [r3, #0]
 8007184:	e061      	b.n	800724a <UART_SetConfig+0x246>
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a61      	ldr	r2, [pc, #388]	; (8007310 <UART_SetConfig+0x30c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d106      	bne.n	800719e <UART_SetConfig+0x19a>
 8007190:	231b      	movs	r3, #27
 8007192:	2220      	movs	r2, #32
 8007194:	189b      	adds	r3, r3, r2
 8007196:	19db      	adds	r3, r3, r7
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	e055      	b.n	800724a <UART_SetConfig+0x246>
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a5c      	ldr	r2, [pc, #368]	; (8007314 <UART_SetConfig+0x310>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d106      	bne.n	80071b6 <UART_SetConfig+0x1b2>
 80071a8:	231b      	movs	r3, #27
 80071aa:	2220      	movs	r2, #32
 80071ac:	189b      	adds	r3, r3, r2
 80071ae:	19db      	adds	r3, r3, r7
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	e049      	b.n	800724a <UART_SetConfig+0x246>
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a50      	ldr	r2, [pc, #320]	; (80072fc <UART_SetConfig+0x2f8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d13e      	bne.n	800723e <UART_SetConfig+0x23a>
 80071c0:	4b51      	ldr	r3, [pc, #324]	; (8007308 <UART_SetConfig+0x304>)
 80071c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071c4:	23c0      	movs	r3, #192	; 0xc0
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	4013      	ands	r3, r2
 80071ca:	22c0      	movs	r2, #192	; 0xc0
 80071cc:	0112      	lsls	r2, r2, #4
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d027      	beq.n	8007222 <UART_SetConfig+0x21e>
 80071d2:	22c0      	movs	r2, #192	; 0xc0
 80071d4:	0112      	lsls	r2, r2, #4
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d82a      	bhi.n	8007230 <UART_SetConfig+0x22c>
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	0112      	lsls	r2, r2, #4
 80071de:	4293      	cmp	r3, r2
 80071e0:	d011      	beq.n	8007206 <UART_SetConfig+0x202>
 80071e2:	2280      	movs	r2, #128	; 0x80
 80071e4:	0112      	lsls	r2, r2, #4
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d822      	bhi.n	8007230 <UART_SetConfig+0x22c>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <UART_SetConfig+0x1f4>
 80071ee:	2280      	movs	r2, #128	; 0x80
 80071f0:	00d2      	lsls	r2, r2, #3
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00e      	beq.n	8007214 <UART_SetConfig+0x210>
 80071f6:	e01b      	b.n	8007230 <UART_SetConfig+0x22c>
 80071f8:	231b      	movs	r3, #27
 80071fa:	2220      	movs	r2, #32
 80071fc:	189b      	adds	r3, r3, r2
 80071fe:	19db      	adds	r3, r3, r7
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	e021      	b.n	800724a <UART_SetConfig+0x246>
 8007206:	231b      	movs	r3, #27
 8007208:	2220      	movs	r2, #32
 800720a:	189b      	adds	r3, r3, r2
 800720c:	19db      	adds	r3, r3, r7
 800720e:	2202      	movs	r2, #2
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	e01a      	b.n	800724a <UART_SetConfig+0x246>
 8007214:	231b      	movs	r3, #27
 8007216:	2220      	movs	r2, #32
 8007218:	189b      	adds	r3, r3, r2
 800721a:	19db      	adds	r3, r3, r7
 800721c:	2204      	movs	r2, #4
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	e013      	b.n	800724a <UART_SetConfig+0x246>
 8007222:	231b      	movs	r3, #27
 8007224:	2220      	movs	r2, #32
 8007226:	189b      	adds	r3, r3, r2
 8007228:	19db      	adds	r3, r3, r7
 800722a:	2208      	movs	r2, #8
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e00c      	b.n	800724a <UART_SetConfig+0x246>
 8007230:	231b      	movs	r3, #27
 8007232:	2220      	movs	r2, #32
 8007234:	189b      	adds	r3, r3, r2
 8007236:	19db      	adds	r3, r3, r7
 8007238:	2210      	movs	r2, #16
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	e005      	b.n	800724a <UART_SetConfig+0x246>
 800723e:	231b      	movs	r3, #27
 8007240:	2220      	movs	r2, #32
 8007242:	189b      	adds	r3, r3, r2
 8007244:	19db      	adds	r3, r3, r7
 8007246:	2210      	movs	r2, #16
 8007248:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2b      	ldr	r2, [pc, #172]	; (80072fc <UART_SetConfig+0x2f8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d000      	beq.n	8007256 <UART_SetConfig+0x252>
 8007254:	e0a9      	b.n	80073aa <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007256:	231b      	movs	r3, #27
 8007258:	2220      	movs	r2, #32
 800725a:	189b      	adds	r3, r3, r2
 800725c:	19db      	adds	r3, r3, r7
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d015      	beq.n	8007290 <UART_SetConfig+0x28c>
 8007264:	dc18      	bgt.n	8007298 <UART_SetConfig+0x294>
 8007266:	2b04      	cmp	r3, #4
 8007268:	d00d      	beq.n	8007286 <UART_SetConfig+0x282>
 800726a:	dc15      	bgt.n	8007298 <UART_SetConfig+0x294>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <UART_SetConfig+0x272>
 8007270:	2b02      	cmp	r3, #2
 8007272:	d005      	beq.n	8007280 <UART_SetConfig+0x27c>
 8007274:	e010      	b.n	8007298 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007276:	f7fd fb9f 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 800727a:	0003      	movs	r3, r0
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800727e:	e014      	b.n	80072aa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007280:	4b25      	ldr	r3, [pc, #148]	; (8007318 <UART_SetConfig+0x314>)
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007284:	e011      	b.n	80072aa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007286:	f7fd fb0b 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 800728a:	0003      	movs	r3, r0
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800728e:	e00c      	b.n	80072aa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007296:	e008      	b.n	80072aa <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800729c:	231a      	movs	r3, #26
 800729e:	2220      	movs	r2, #32
 80072a0:	189b      	adds	r3, r3, r2
 80072a2:	19db      	adds	r3, r3, r7
 80072a4:	2201      	movs	r2, #1
 80072a6:	701a      	strb	r2, [r3, #0]
        break;
 80072a8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d100      	bne.n	80072b2 <UART_SetConfig+0x2ae>
 80072b0:	e14b      	b.n	800754a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072b6:	4b19      	ldr	r3, [pc, #100]	; (800731c <UART_SetConfig+0x318>)
 80072b8:	0052      	lsls	r2, r2, #1
 80072ba:	5ad3      	ldrh	r3, [r2, r3]
 80072bc:	0019      	movs	r1, r3
 80072be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80072c0:	f7f8 ff3c 	bl	800013c <__udivsi3>
 80072c4:	0003      	movs	r3, r0
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	0013      	movs	r3, r2
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	189b      	adds	r3, r3, r2
 80072d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d305      	bcc.n	80072e4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d91d      	bls.n	8007320 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80072e4:	231a      	movs	r3, #26
 80072e6:	2220      	movs	r2, #32
 80072e8:	189b      	adds	r3, r3, r2
 80072ea:	19db      	adds	r3, r3, r7
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e12b      	b.n	800754a <UART_SetConfig+0x546>
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	cfff69f3 	.word	0xcfff69f3
 80072f8:	ffffcfff 	.word	0xffffcfff
 80072fc:	40008000 	.word	0x40008000
 8007300:	11fff4ff 	.word	0x11fff4ff
 8007304:	40013800 	.word	0x40013800
 8007308:	40021000 	.word	0x40021000
 800730c:	40004400 	.word	0x40004400
 8007310:	40004800 	.word	0x40004800
 8007314:	40004c00 	.word	0x40004c00
 8007318:	00f42400 	.word	0x00f42400
 800731c:	08013f18 	.word	0x08013f18
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007322:	61bb      	str	r3, [r7, #24]
 8007324:	2300      	movs	r3, #0
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800732c:	4b92      	ldr	r3, [pc, #584]	; (8007578 <UART_SetConfig+0x574>)
 800732e:	0052      	lsls	r2, r2, #1
 8007330:	5ad3      	ldrh	r3, [r2, r3]
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	69b8      	ldr	r0, [r7, #24]
 800733e:	69f9      	ldr	r1, [r7, #28]
 8007340:	f7f9 f8b0 	bl	80004a4 <__aeabi_uldivmod>
 8007344:	0002      	movs	r2, r0
 8007346:	000b      	movs	r3, r1
 8007348:	0e11      	lsrs	r1, r2, #24
 800734a:	021d      	lsls	r5, r3, #8
 800734c:	430d      	orrs	r5, r1
 800734e:	0214      	lsls	r4, r2, #8
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	60bb      	str	r3, [r7, #8]
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	68b8      	ldr	r0, [r7, #8]
 800735e:	68f9      	ldr	r1, [r7, #12]
 8007360:	1900      	adds	r0, r0, r4
 8007362:	4169      	adcs	r1, r5
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	603b      	str	r3, [r7, #0]
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f7f9 f897 	bl	80004a4 <__aeabi_uldivmod>
 8007376:	0002      	movs	r2, r0
 8007378:	000b      	movs	r3, r1
 800737a:	0013      	movs	r3, r2
 800737c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800737e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007380:	23c0      	movs	r3, #192	; 0xc0
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	429a      	cmp	r2, r3
 8007386:	d309      	bcc.n	800739c <UART_SetConfig+0x398>
 8007388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800738a:	2380      	movs	r3, #128	; 0x80
 800738c:	035b      	lsls	r3, r3, #13
 800738e:	429a      	cmp	r2, r3
 8007390:	d204      	bcs.n	800739c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	e0d6      	b.n	800754a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800739c:	231a      	movs	r3, #26
 800739e:	2220      	movs	r2, #32
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	19db      	adds	r3, r3, r7
 80073a4:	2201      	movs	r2, #1
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e0cf      	b.n	800754a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	2380      	movs	r3, #128	; 0x80
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d000      	beq.n	80073b8 <UART_SetConfig+0x3b4>
 80073b6:	e070      	b.n	800749a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80073b8:	231b      	movs	r3, #27
 80073ba:	2220      	movs	r2, #32
 80073bc:	189b      	adds	r3, r3, r2
 80073be:	19db      	adds	r3, r3, r7
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b08      	cmp	r3, #8
 80073c4:	d015      	beq.n	80073f2 <UART_SetConfig+0x3ee>
 80073c6:	dc18      	bgt.n	80073fa <UART_SetConfig+0x3f6>
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d00d      	beq.n	80073e8 <UART_SetConfig+0x3e4>
 80073cc:	dc15      	bgt.n	80073fa <UART_SetConfig+0x3f6>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <UART_SetConfig+0x3d4>
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d005      	beq.n	80073e2 <UART_SetConfig+0x3de>
 80073d6:	e010      	b.n	80073fa <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d8:	f7fd faee 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 80073dc:	0003      	movs	r3, r0
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e0:	e014      	b.n	800740c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e2:	4b66      	ldr	r3, [pc, #408]	; (800757c <UART_SetConfig+0x578>)
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e6:	e011      	b.n	800740c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073e8:	f7fd fa5a 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 80073ec:	0003      	movs	r3, r0
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073f0:	e00c      	b.n	800740c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f2:	2380      	movs	r3, #128	; 0x80
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073f8:	e008      	b.n	800740c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80073fe:	231a      	movs	r3, #26
 8007400:	2220      	movs	r2, #32
 8007402:	189b      	adds	r3, r3, r2
 8007404:	19db      	adds	r3, r3, r7
 8007406:	2201      	movs	r2, #1
 8007408:	701a      	strb	r2, [r3, #0]
        break;
 800740a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	2b00      	cmp	r3, #0
 8007410:	d100      	bne.n	8007414 <UART_SetConfig+0x410>
 8007412:	e09a      	b.n	800754a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007418:	4b57      	ldr	r3, [pc, #348]	; (8007578 <UART_SetConfig+0x574>)
 800741a:	0052      	lsls	r2, r2, #1
 800741c:	5ad3      	ldrh	r3, [r2, r3]
 800741e:	0019      	movs	r1, r3
 8007420:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007422:	f7f8 fe8b 	bl	800013c <__udivsi3>
 8007426:	0003      	movs	r3, r0
 8007428:	005a      	lsls	r2, r3, #1
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	085b      	lsrs	r3, r3, #1
 8007430:	18d2      	adds	r2, r2, r3
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	0019      	movs	r1, r3
 8007438:	0010      	movs	r0, r2
 800743a:	f7f8 fe7f 	bl	800013c <__udivsi3>
 800743e:	0003      	movs	r3, r0
 8007440:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	2b0f      	cmp	r3, #15
 8007446:	d921      	bls.n	800748c <UART_SetConfig+0x488>
 8007448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	025b      	lsls	r3, r3, #9
 800744e:	429a      	cmp	r2, r3
 8007450:	d21c      	bcs.n	800748c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	b29a      	uxth	r2, r3
 8007456:	200e      	movs	r0, #14
 8007458:	2420      	movs	r4, #32
 800745a:	1903      	adds	r3, r0, r4
 800745c:	19db      	adds	r3, r3, r7
 800745e:	210f      	movs	r1, #15
 8007460:	438a      	bics	r2, r1
 8007462:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	b29b      	uxth	r3, r3
 800746a:	2207      	movs	r2, #7
 800746c:	4013      	ands	r3, r2
 800746e:	b299      	uxth	r1, r3
 8007470:	1903      	adds	r3, r0, r4
 8007472:	19db      	adds	r3, r3, r7
 8007474:	1902      	adds	r2, r0, r4
 8007476:	19d2      	adds	r2, r2, r7
 8007478:	8812      	ldrh	r2, [r2, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	1902      	adds	r2, r0, r4
 8007484:	19d2      	adds	r2, r2, r7
 8007486:	8812      	ldrh	r2, [r2, #0]
 8007488:	60da      	str	r2, [r3, #12]
 800748a:	e05e      	b.n	800754a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800748c:	231a      	movs	r3, #26
 800748e:	2220      	movs	r2, #32
 8007490:	189b      	adds	r3, r3, r2
 8007492:	19db      	adds	r3, r3, r7
 8007494:	2201      	movs	r2, #1
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	e057      	b.n	800754a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800749a:	231b      	movs	r3, #27
 800749c:	2220      	movs	r2, #32
 800749e:	189b      	adds	r3, r3, r2
 80074a0:	19db      	adds	r3, r3, r7
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d015      	beq.n	80074d4 <UART_SetConfig+0x4d0>
 80074a8:	dc18      	bgt.n	80074dc <UART_SetConfig+0x4d8>
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d00d      	beq.n	80074ca <UART_SetConfig+0x4c6>
 80074ae:	dc15      	bgt.n	80074dc <UART_SetConfig+0x4d8>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <UART_SetConfig+0x4b6>
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d005      	beq.n	80074c4 <UART_SetConfig+0x4c0>
 80074b8:	e010      	b.n	80074dc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ba:	f7fd fa7d 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 80074be:	0003      	movs	r3, r0
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074c2:	e014      	b.n	80074ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c4:	4b2d      	ldr	r3, [pc, #180]	; (800757c <UART_SetConfig+0x578>)
 80074c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074c8:	e011      	b.n	80074ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ca:	f7fd f9e9 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 80074ce:	0003      	movs	r3, r0
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074d2:	e00c      	b.n	80074ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074d4:	2380      	movs	r3, #128	; 0x80
 80074d6:	021b      	lsls	r3, r3, #8
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074da:	e008      	b.n	80074ee <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80074e0:	231a      	movs	r3, #26
 80074e2:	2220      	movs	r2, #32
 80074e4:	189b      	adds	r3, r3, r2
 80074e6:	19db      	adds	r3, r3, r7
 80074e8:	2201      	movs	r2, #1
 80074ea:	701a      	strb	r2, [r3, #0]
        break;
 80074ec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d02a      	beq.n	800754a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074f8:	4b1f      	ldr	r3, [pc, #124]	; (8007578 <UART_SetConfig+0x574>)
 80074fa:	0052      	lsls	r2, r2, #1
 80074fc:	5ad3      	ldrh	r3, [r2, r3]
 80074fe:	0019      	movs	r1, r3
 8007500:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007502:	f7f8 fe1b 	bl	800013c <__udivsi3>
 8007506:	0003      	movs	r3, r0
 8007508:	001a      	movs	r2, r3
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	085b      	lsrs	r3, r3, #1
 8007510:	18d2      	adds	r2, r2, r3
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	0019      	movs	r1, r3
 8007518:	0010      	movs	r0, r2
 800751a:	f7f8 fe0f 	bl	800013c <__udivsi3>
 800751e:	0003      	movs	r3, r0
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	2b0f      	cmp	r3, #15
 8007526:	d90a      	bls.n	800753e <UART_SetConfig+0x53a>
 8007528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752a:	2380      	movs	r3, #128	; 0x80
 800752c:	025b      	lsls	r3, r3, #9
 800752e:	429a      	cmp	r2, r3
 8007530:	d205      	bcs.n	800753e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	b29a      	uxth	r2, r3
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60da      	str	r2, [r3, #12]
 800753c:	e005      	b.n	800754a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800753e:	231a      	movs	r3, #26
 8007540:	2220      	movs	r2, #32
 8007542:	189b      	adds	r3, r3, r2
 8007544:	19db      	adds	r3, r3, r7
 8007546:	2201      	movs	r2, #1
 8007548:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	226a      	movs	r2, #106	; 0x6a
 800754e:	2101      	movs	r1, #1
 8007550:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	2268      	movs	r2, #104	; 0x68
 8007556:	2101      	movs	r1, #1
 8007558:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	2200      	movs	r2, #0
 800755e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	2200      	movs	r2, #0
 8007564:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007566:	231a      	movs	r3, #26
 8007568:	2220      	movs	r2, #32
 800756a:	189b      	adds	r3, r3, r2
 800756c:	19db      	adds	r3, r3, r7
 800756e:	781b      	ldrb	r3, [r3, #0]
}
 8007570:	0018      	movs	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	b010      	add	sp, #64	; 0x40
 8007576:	bdb0      	pop	{r4, r5, r7, pc}
 8007578:	08013f18 	.word	0x08013f18
 800757c:	00f42400 	.word	0x00f42400

08007580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758c:	2201      	movs	r2, #1
 800758e:	4013      	ands	r3, r2
 8007590:	d00b      	beq.n	80075aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	4a4a      	ldr	r2, [pc, #296]	; (80076c4 <UART_AdvFeatureConfig+0x144>)
 800759a:	4013      	ands	r3, r2
 800759c:	0019      	movs	r1, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	2202      	movs	r2, #2
 80075b0:	4013      	ands	r3, r2
 80075b2:	d00b      	beq.n	80075cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4a43      	ldr	r2, [pc, #268]	; (80076c8 <UART_AdvFeatureConfig+0x148>)
 80075bc:	4013      	ands	r3, r2
 80075be:	0019      	movs	r1, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	2204      	movs	r2, #4
 80075d2:	4013      	ands	r3, r2
 80075d4:	d00b      	beq.n	80075ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4a3b      	ldr	r2, [pc, #236]	; (80076cc <UART_AdvFeatureConfig+0x14c>)
 80075de:	4013      	ands	r3, r2
 80075e0:	0019      	movs	r1, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	2208      	movs	r2, #8
 80075f4:	4013      	ands	r3, r2
 80075f6:	d00b      	beq.n	8007610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	4a34      	ldr	r2, [pc, #208]	; (80076d0 <UART_AdvFeatureConfig+0x150>)
 8007600:	4013      	ands	r3, r2
 8007602:	0019      	movs	r1, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	2210      	movs	r2, #16
 8007616:	4013      	ands	r3, r2
 8007618:	d00b      	beq.n	8007632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	4a2c      	ldr	r2, [pc, #176]	; (80076d4 <UART_AdvFeatureConfig+0x154>)
 8007622:	4013      	ands	r3, r2
 8007624:	0019      	movs	r1, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	2220      	movs	r2, #32
 8007638:	4013      	ands	r3, r2
 800763a:	d00b      	beq.n	8007654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	4a25      	ldr	r2, [pc, #148]	; (80076d8 <UART_AdvFeatureConfig+0x158>)
 8007644:	4013      	ands	r3, r2
 8007646:	0019      	movs	r1, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	2240      	movs	r2, #64	; 0x40
 800765a:	4013      	ands	r3, r2
 800765c:	d01d      	beq.n	800769a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <UART_AdvFeatureConfig+0x15c>)
 8007666:	4013      	ands	r3, r2
 8007668:	0019      	movs	r1, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800767a:	2380      	movs	r3, #128	; 0x80
 800767c:	035b      	lsls	r3, r3, #13
 800767e:	429a      	cmp	r2, r3
 8007680:	d10b      	bne.n	800769a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	4a15      	ldr	r2, [pc, #84]	; (80076e0 <UART_AdvFeatureConfig+0x160>)
 800768a:	4013      	ands	r3, r2
 800768c:	0019      	movs	r1, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	2280      	movs	r2, #128	; 0x80
 80076a0:	4013      	ands	r3, r2
 80076a2:	d00b      	beq.n	80076bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	4a0e      	ldr	r2, [pc, #56]	; (80076e4 <UART_AdvFeatureConfig+0x164>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	0019      	movs	r1, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	605a      	str	r2, [r3, #4]
  }
}
 80076bc:	46c0      	nop			; (mov r8, r8)
 80076be:	46bd      	mov	sp, r7
 80076c0:	b002      	add	sp, #8
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	fffdffff 	.word	0xfffdffff
 80076c8:	fffeffff 	.word	0xfffeffff
 80076cc:	fffbffff 	.word	0xfffbffff
 80076d0:	ffff7fff 	.word	0xffff7fff
 80076d4:	ffffefff 	.word	0xffffefff
 80076d8:	ffffdfff 	.word	0xffffdfff
 80076dc:	ffefffff 	.word	0xffefffff
 80076e0:	ff9fffff 	.word	0xff9fffff
 80076e4:	fff7ffff 	.word	0xfff7ffff

080076e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2290      	movs	r2, #144	; 0x90
 80076f4:	2100      	movs	r1, #0
 80076f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076f8:	f7fc f8d4 	bl	80038a4 <HAL_GetTick>
 80076fc:	0003      	movs	r3, r0
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2208      	movs	r2, #8
 8007708:	4013      	ands	r3, r2
 800770a:	2b08      	cmp	r3, #8
 800770c:	d10c      	bne.n	8007728 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2280      	movs	r2, #128	; 0x80
 8007712:	0391      	lsls	r1, r2, #14
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <UART_CheckIdleState+0x98>)
 8007718:	9200      	str	r2, [sp, #0]
 800771a:	2200      	movs	r2, #0
 800771c:	f000 f832 	bl	8007784 <UART_WaitOnFlagUntilTimeout>
 8007720:	1e03      	subs	r3, r0, #0
 8007722:	d001      	beq.n	8007728 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e026      	b.n	8007776 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2204      	movs	r2, #4
 8007730:	4013      	ands	r3, r2
 8007732:	2b04      	cmp	r3, #4
 8007734:	d10c      	bne.n	8007750 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2280      	movs	r2, #128	; 0x80
 800773a:	03d1      	lsls	r1, r2, #15
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4a10      	ldr	r2, [pc, #64]	; (8007780 <UART_CheckIdleState+0x98>)
 8007740:	9200      	str	r2, [sp, #0]
 8007742:	2200      	movs	r2, #0
 8007744:	f000 f81e 	bl	8007784 <UART_WaitOnFlagUntilTimeout>
 8007748:	1e03      	subs	r3, r0, #0
 800774a:	d001      	beq.n	8007750 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e012      	b.n	8007776 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2288      	movs	r2, #136	; 0x88
 8007754:	2120      	movs	r1, #32
 8007756:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	228c      	movs	r2, #140	; 0x8c
 800775c:	2120      	movs	r1, #32
 800775e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2284      	movs	r2, #132	; 0x84
 8007770:	2100      	movs	r1, #0
 8007772:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	0018      	movs	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	b004      	add	sp, #16
 800777c:	bd80      	pop	{r7, pc}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	01ffffff 	.word	0x01ffffff

08007784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b094      	sub	sp, #80	; 0x50
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	1dfb      	adds	r3, r7, #7
 8007792:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007794:	e0a7      	b.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007798:	3301      	adds	r3, #1
 800779a:	d100      	bne.n	800779e <UART_WaitOnFlagUntilTimeout+0x1a>
 800779c:	e0a3      	b.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779e:	f7fc f881 	bl	80038a4 <HAL_GetTick>
 80077a2:	0002      	movs	r2, r0
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d302      	bcc.n	80077b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80077ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d13f      	bne.n	8007834 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b4:	f3ef 8310 	mrs	r3, PRIMASK
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077bc:	647b      	str	r3, [r7, #68]	; 0x44
 80077be:	2301      	movs	r3, #1
 80077c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	f383 8810 	msr	PRIMASK, r3
}
 80077c8:	46c0      	nop			; (mov r8, r8)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	494e      	ldr	r1, [pc, #312]	; (8007910 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80077d6:	400a      	ands	r2, r1
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	f383 8810 	msr	PRIMASK, r3
}
 80077e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e6:	f3ef 8310 	mrs	r3, PRIMASK
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80077ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	643b      	str	r3, [r7, #64]	; 0x40
 80077f0:	2301      	movs	r3, #1
 80077f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	f383 8810 	msr	PRIMASK, r3
}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2101      	movs	r1, #1
 8007808:	438a      	bics	r2, r1
 800780a:	609a      	str	r2, [r3, #8]
 800780c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007812:	f383 8810 	msr	PRIMASK, r3
}
 8007816:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2288      	movs	r2, #136	; 0x88
 800781c:	2120      	movs	r1, #32
 800781e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	228c      	movs	r2, #140	; 0x8c
 8007824:	2120      	movs	r1, #32
 8007826:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2284      	movs	r2, #132	; 0x84
 800782c:	2100      	movs	r1, #0
 800782e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e069      	b.n	8007908 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2204      	movs	r2, #4
 800783c:	4013      	ands	r3, r2
 800783e:	d052      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69da      	ldr	r2, [r3, #28]
 8007846:	2380      	movs	r3, #128	; 0x80
 8007848:	011b      	lsls	r3, r3, #4
 800784a:	401a      	ands	r2, r3
 800784c:	2380      	movs	r3, #128	; 0x80
 800784e:	011b      	lsls	r3, r3, #4
 8007850:	429a      	cmp	r2, r3
 8007852:	d148      	bne.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2280      	movs	r2, #128	; 0x80
 800785a:	0112      	lsls	r2, r2, #4
 800785c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785e:	f3ef 8310 	mrs	r3, PRIMASK
 8007862:	613b      	str	r3, [r7, #16]
  return(result);
 8007864:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f383 8810 	msr	PRIMASK, r3
}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4924      	ldr	r1, [pc, #144]	; (8007910 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007880:	400a      	ands	r2, r1
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007886:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	f383 8810 	msr	PRIMASK, r3
}
 800788e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007890:	f3ef 8310 	mrs	r3, PRIMASK
 8007894:	61fb      	str	r3, [r7, #28]
  return(result);
 8007896:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007898:	64bb      	str	r3, [r7, #72]	; 0x48
 800789a:	2301      	movs	r3, #1
 800789c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	f383 8810 	msr	PRIMASK, r3
}
 80078a4:	46c0      	nop			; (mov r8, r8)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2101      	movs	r1, #1
 80078b2:	438a      	bics	r2, r1
 80078b4:	609a      	str	r2, [r3, #8]
 80078b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	f383 8810 	msr	PRIMASK, r3
}
 80078c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2288      	movs	r2, #136	; 0x88
 80078c6:	2120      	movs	r1, #32
 80078c8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	228c      	movs	r2, #140	; 0x8c
 80078ce:	2120      	movs	r1, #32
 80078d0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2290      	movs	r2, #144	; 0x90
 80078d6:	2120      	movs	r1, #32
 80078d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2284      	movs	r2, #132	; 0x84
 80078de:	2100      	movs	r1, #0
 80078e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e010      	b.n	8007908 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	4013      	ands	r3, r2
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	425a      	negs	r2, r3
 80078f6:	4153      	adcs	r3, r2
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	001a      	movs	r2, r3
 80078fc:	1dfb      	adds	r3, r7, #7
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d100      	bne.n	8007906 <UART_WaitOnFlagUntilTimeout+0x182>
 8007904:	e747      	b.n	8007796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	0018      	movs	r0, r3
 800790a:	46bd      	mov	sp, r7
 800790c:	b014      	add	sp, #80	; 0x50
 800790e:	bd80      	pop	{r7, pc}
 8007910:	fffffe5f 	.word	0xfffffe5f

08007914 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2284      	movs	r2, #132	; 0x84
 8007920:	5c9b      	ldrb	r3, [r3, r2]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d101      	bne.n	800792a <HAL_UARTEx_DisableFifoMode+0x16>
 8007926:	2302      	movs	r3, #2
 8007928:	e027      	b.n	800797a <HAL_UARTEx_DisableFifoMode+0x66>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2284      	movs	r2, #132	; 0x84
 800792e:	2101      	movs	r1, #1
 8007930:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2288      	movs	r2, #136	; 0x88
 8007936:	2124      	movs	r1, #36	; 0x24
 8007938:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2101      	movs	r1, #1
 800794e:	438a      	bics	r2, r1
 8007950:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4a0b      	ldr	r2, [pc, #44]	; (8007984 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007956:	4013      	ands	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2288      	movs	r2, #136	; 0x88
 800796c:	2120      	movs	r1, #32
 800796e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2284      	movs	r2, #132	; 0x84
 8007974:	2100      	movs	r1, #0
 8007976:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	0018      	movs	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	b004      	add	sp, #16
 8007980:	bd80      	pop	{r7, pc}
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	dfffffff 	.word	0xdfffffff

08007988 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2284      	movs	r2, #132	; 0x84
 8007996:	5c9b      	ldrb	r3, [r3, r2]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d101      	bne.n	80079a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800799c:	2302      	movs	r3, #2
 800799e:	e02e      	b.n	80079fe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2284      	movs	r2, #132	; 0x84
 80079a4:	2101      	movs	r1, #1
 80079a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2288      	movs	r2, #136	; 0x88
 80079ac:	2124      	movs	r1, #36	; 0x24
 80079ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2101      	movs	r1, #1
 80079c4:	438a      	bics	r2, r1
 80079c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	08d9      	lsrs	r1, r3, #3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	0018      	movs	r0, r3
 80079e0:	f000 f854 	bl	8007a8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2288      	movs	r2, #136	; 0x88
 80079f0:	2120      	movs	r1, #32
 80079f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2284      	movs	r2, #132	; 0x84
 80079f8:	2100      	movs	r1, #0
 80079fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	0018      	movs	r0, r3
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b004      	add	sp, #16
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2284      	movs	r2, #132	; 0x84
 8007a16:	5c9b      	ldrb	r3, [r3, r2]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e02f      	b.n	8007a80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2284      	movs	r2, #132	; 0x84
 8007a24:	2101      	movs	r1, #1
 8007a26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2288      	movs	r2, #136	; 0x88
 8007a2c:	2124      	movs	r1, #36	; 0x24
 8007a2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2101      	movs	r1, #1
 8007a44:	438a      	bics	r2, r1
 8007a46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	4a0e      	ldr	r2, [pc, #56]	; (8007a88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	0019      	movs	r1, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 f813 	bl	8007a8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2288      	movs	r2, #136	; 0x88
 8007a72:	2120      	movs	r1, #32
 8007a74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2284      	movs	r2, #132	; 0x84
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	0018      	movs	r0, r3
 8007a82:	46bd      	mov	sp, r7
 8007a84:	b004      	add	sp, #16
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	f1ffffff 	.word	0xf1ffffff

08007a8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d108      	bne.n	8007aae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	226a      	movs	r2, #106	; 0x6a
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2268      	movs	r2, #104	; 0x68
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aac:	e043      	b.n	8007b36 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aae:	260f      	movs	r6, #15
 8007ab0:	19bb      	adds	r3, r7, r6
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ab6:	200e      	movs	r0, #14
 8007ab8:	183b      	adds	r3, r7, r0
 8007aba:	2208      	movs	r2, #8
 8007abc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	0e5b      	lsrs	r3, r3, #25
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	240d      	movs	r4, #13
 8007aca:	193b      	adds	r3, r7, r4
 8007acc:	2107      	movs	r1, #7
 8007ace:	400a      	ands	r2, r1
 8007ad0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	0f5b      	lsrs	r3, r3, #29
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	250c      	movs	r5, #12
 8007ade:	197b      	adds	r3, r7, r5
 8007ae0:	2107      	movs	r1, #7
 8007ae2:	400a      	ands	r2, r1
 8007ae4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ae6:	183b      	adds	r3, r7, r0
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	197a      	adds	r2, r7, r5
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	4914      	ldr	r1, [pc, #80]	; (8007b40 <UARTEx_SetNbDataToProcess+0xb4>)
 8007af0:	5c8a      	ldrb	r2, [r1, r2]
 8007af2:	435a      	muls	r2, r3
 8007af4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007af6:	197b      	adds	r3, r7, r5
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	4a12      	ldr	r2, [pc, #72]	; (8007b44 <UARTEx_SetNbDataToProcess+0xb8>)
 8007afc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007afe:	0019      	movs	r1, r3
 8007b00:	f7f8 fba6 	bl	8000250 <__divsi3>
 8007b04:	0003      	movs	r3, r0
 8007b06:	b299      	uxth	r1, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	226a      	movs	r2, #106	; 0x6a
 8007b0c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b0e:	19bb      	adds	r3, r7, r6
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	193a      	adds	r2, r7, r4
 8007b14:	7812      	ldrb	r2, [r2, #0]
 8007b16:	490a      	ldr	r1, [pc, #40]	; (8007b40 <UARTEx_SetNbDataToProcess+0xb4>)
 8007b18:	5c8a      	ldrb	r2, [r1, r2]
 8007b1a:	435a      	muls	r2, r3
 8007b1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b1e:	193b      	adds	r3, r7, r4
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <UARTEx_SetNbDataToProcess+0xb8>)
 8007b24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b26:	0019      	movs	r1, r3
 8007b28:	f7f8 fb92 	bl	8000250 <__divsi3>
 8007b2c:	0003      	movs	r3, r0
 8007b2e:	b299      	uxth	r1, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2268      	movs	r2, #104	; 0x68
 8007b34:	5299      	strh	r1, [r3, r2]
}
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	b005      	add	sp, #20
 8007b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	08013f30 	.word	0x08013f30
 8007b44:	08013f38 	.word	0x08013f38

08007b48 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007b48:	b5b0      	push	{r4, r5, r7, lr}
 8007b4a:	b0e4      	sub	sp, #400	; 0x190
 8007b4c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007b4e:	24c8      	movs	r4, #200	; 0xc8
 8007b50:	193b      	adds	r3, r7, r4
 8007b52:	0018      	movs	r0, r3
 8007b54:	23c6      	movs	r3, #198	; 0xc6
 8007b56:	001a      	movs	r2, r3
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f003 ff85 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8007b5e:	4b13      	ldr	r3, [pc, #76]	; (8007bac <astronode_send_cfg_sr+0x64>)
 8007b60:	25c8      	movs	r5, #200	; 0xc8
 8007b62:	006d      	lsls	r5, r5, #1
 8007b64:	195b      	adds	r3, r3, r5
 8007b66:	19db      	adds	r3, r3, r7
 8007b68:	0018      	movs	r0, r3
 8007b6a:	23c6      	movs	r3, #198	; 0xc6
 8007b6c:	001a      	movs	r2, r3
 8007b6e:	2100      	movs	r1, #0
 8007b70:	f003 ff7a 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007b74:	193b      	adds	r3, r7, r4
 8007b76:	2210      	movs	r2, #16
 8007b78:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007b7a:	003a      	movs	r2, r7
 8007b7c:	193b      	adds	r3, r7, r4
 8007b7e:	0011      	movs	r1, r2
 8007b80:	0018      	movs	r0, r3
 8007b82:	f001 faa9 	bl	80090d8 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <astronode_send_cfg_sr+0x64>)
 8007b88:	195b      	adds	r3, r3, r5
 8007b8a:	19db      	adds	r3, r3, r7
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b90      	cmp	r3, #144	; 0x90
 8007b90:	d104      	bne.n	8007b9c <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <astronode_send_cfg_sr+0x68>)
 8007b94:	0018      	movs	r0, r3
 8007b96:	f7fb f903 	bl	8002da0 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007b9a:	e003      	b.n	8007ba4 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <astronode_send_cfg_sr+0x6c>)
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f7fb f8fe 	bl	8002da0 <send_debug_logs>
}
 8007ba4:	46c0      	nop			; (mov r8, r8)
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b064      	add	sp, #400	; 0x190
 8007baa:	bdb0      	pop	{r4, r5, r7, pc}
 8007bac:	fffffe70 	.word	0xfffffe70
 8007bb0:	08012aa0 	.word	0x08012aa0
 8007bb4:	08012ad4 	.word	0x08012ad4

08007bb8 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bba:	b0e7      	sub	sp, #412	; 0x19c
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	0005      	movs	r5, r0
 8007bc0:	000c      	movs	r4, r1
 8007bc2:	0010      	movs	r0, r2
 8007bc4:	0019      	movs	r1, r3
 8007bc6:	4b4b      	ldr	r3, [pc, #300]	; (8007cf4 <astronode_send_cfg_wr+0x13c>)
 8007bc8:	26cc      	movs	r6, #204	; 0xcc
 8007bca:	0076      	lsls	r6, r6, #1
 8007bcc:	199b      	adds	r3, r3, r6
 8007bce:	19db      	adds	r3, r3, r7
 8007bd0:	1c2a      	adds	r2, r5, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
 8007bd4:	4b48      	ldr	r3, [pc, #288]	; (8007cf8 <astronode_send_cfg_wr+0x140>)
 8007bd6:	0035      	movs	r5, r6
 8007bd8:	195b      	adds	r3, r3, r5
 8007bda:	19db      	adds	r3, r3, r7
 8007bdc:	1c22      	adds	r2, r4, #0
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	4b46      	ldr	r3, [pc, #280]	; (8007cfc <astronode_send_cfg_wr+0x144>)
 8007be2:	002c      	movs	r4, r5
 8007be4:	191b      	adds	r3, r3, r4
 8007be6:	19db      	adds	r3, r3, r7
 8007be8:	1c02      	adds	r2, r0, #0
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	4b44      	ldr	r3, [pc, #272]	; (8007d00 <astronode_send_cfg_wr+0x148>)
 8007bee:	191b      	adds	r3, r3, r4
 8007bf0:	19db      	adds	r3, r3, r7
 8007bf2:	1c0a      	adds	r2, r1, #0
 8007bf4:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007bf6:	25d0      	movs	r5, #208	; 0xd0
 8007bf8:	197b      	adds	r3, r7, r5
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	23c6      	movs	r3, #198	; 0xc6
 8007bfe:	001a      	movs	r2, r3
 8007c00:	2100      	movs	r1, #0
 8007c02:	f003 ff31 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8007c06:	4b3f      	ldr	r3, [pc, #252]	; (8007d04 <astronode_send_cfg_wr+0x14c>)
 8007c08:	191b      	adds	r3, r3, r4
 8007c0a:	19db      	adds	r3, r3, r7
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	23c6      	movs	r3, #198	; 0xc6
 8007c10:	001a      	movs	r2, r3
 8007c12:	2100      	movs	r1, #0
 8007c14:	f003 ff28 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007c18:	0029      	movs	r1, r5
 8007c1a:	187b      	adds	r3, r7, r1
 8007c1c:	2205      	movs	r2, #5
 8007c1e:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007c20:	4b34      	ldr	r3, [pc, #208]	; (8007cf4 <astronode_send_cfg_wr+0x13c>)
 8007c22:	191b      	adds	r3, r3, r4
 8007c24:	19db      	adds	r3, r3, r7
 8007c26:	2200      	movs	r2, #0
 8007c28:	569a      	ldrsb	r2, [r3, r2]
 8007c2a:	4b33      	ldr	r3, [pc, #204]	; (8007cf8 <astronode_send_cfg_wr+0x140>)
 8007c2c:	191b      	adds	r3, r3, r4
 8007c2e:	19db      	adds	r3, r3, r7
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	b25b      	sxtb	r3, r3
 8007c36:	4313      	orrs	r3, r2
 8007c38:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007c3a:	4b30      	ldr	r3, [pc, #192]	; (8007cfc <astronode_send_cfg_wr+0x144>)
 8007c3c:	191b      	adds	r3, r3, r4
 8007c3e:	19db      	adds	r3, r3, r7
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	4313      	orrs	r3, r2
 8007c48:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007c4a:	4b2d      	ldr	r3, [pc, #180]	; (8007d00 <astronode_send_cfg_wr+0x148>)
 8007c4c:	191b      	adds	r3, r3, r4
 8007c4e:	19db      	adds	r3, r3, r7
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	b25b      	sxtb	r3, r3
 8007c56:	4313      	orrs	r3, r2
 8007c58:	b25b      	sxtb	r3, r3
 8007c5a:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007c5c:	187b      	adds	r3, r7, r1
 8007c5e:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007c60:	23d4      	movs	r3, #212	; 0xd4
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	2508      	movs	r5, #8
 8007c66:	195b      	adds	r3, r3, r5
 8007c68:	19db      	adds	r3, r3, r7
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	569a      	ldrsb	r2, [r3, r2]
 8007c6e:	23d6      	movs	r3, #214	; 0xd6
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	195b      	adds	r3, r3, r5
 8007c74:	19db      	adds	r3, r3, r7
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	b25b      	sxtb	r3, r3
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007c80:	23d8      	movs	r3, #216	; 0xd8
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	195b      	adds	r3, r3, r5
 8007c86:	19db      	adds	r3, r3, r7
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	b25b      	sxtb	r3, r3
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007c92:	23da      	movs	r3, #218	; 0xda
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	195b      	adds	r3, r3, r5
 8007c98:	19db      	adds	r3, r3, r7
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	b25b      	sxtb	r3, r3
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007ca6:	187b      	adds	r3, r7, r1
 8007ca8:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007caa:	0008      	movs	r0, r1
 8007cac:	187b      	adds	r3, r7, r1
 8007cae:	22c4      	movs	r2, #196	; 0xc4
 8007cb0:	2103      	movs	r1, #3
 8007cb2:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007cb4:	002b      	movs	r3, r5
 8007cb6:	18fa      	adds	r2, r7, r3
 8007cb8:	183b      	adds	r3, r7, r0
 8007cba:	0011      	movs	r1, r2
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f001 fa0b 	bl	80090d8 <astronode_transport_send_receive>
 8007cc2:	0003      	movs	r3, r0
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d10f      	bne.n	8007ce8 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007cc8:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <astronode_send_cfg_wr+0x14c>)
 8007cca:	191b      	adds	r3, r3, r4
 8007ccc:	19db      	adds	r3, r3, r7
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b85      	cmp	r3, #133	; 0x85
 8007cd2:	d105      	bne.n	8007ce0 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007cd4:	4b0c      	ldr	r3, [pc, #48]	; (8007d08 <astronode_send_cfg_wr+0x150>)
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7fb f862 	bl	8002da0 <send_debug_logs>
            return true ;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e004      	b.n	8007cea <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <astronode_send_cfg_wr+0x154>)
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	f7fb f85c 	bl	8002da0 <send_debug_logs>
        }
    }
    return false ;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	0018      	movs	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	b067      	add	sp, #412	; 0x19c
 8007cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	fffffe6f 	.word	0xfffffe6f
 8007cf8:	fffffe6e 	.word	0xfffffe6e
 8007cfc:	fffffe6d 	.word	0xfffffe6d
 8007d00:	fffffe6c 	.word	0xfffffe6c
 8007d04:	fffffe70 	.word	0xfffffe70
 8007d08:	08012b08 	.word	0x08012b08
 8007d0c:	08012b34 	.word	0x08012b34

08007d10 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d12:	b0ed      	sub	sp, #436	; 0x1b4
 8007d14:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007d16:	21c8      	movs	r1, #200	; 0xc8
 8007d18:	2318      	movs	r3, #24
 8007d1a:	18cb      	adds	r3, r1, r3
 8007d1c:	19db      	adds	r3, r3, r7
 8007d1e:	0018      	movs	r0, r3
 8007d20:	23c6      	movs	r3, #198	; 0xc6
 8007d22:	001a      	movs	r2, r3
 8007d24:	2100      	movs	r1, #0
 8007d26:	f003 fe9f 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8007d2a:	4b4a      	ldr	r3, [pc, #296]	; (8007e54 <astronode_send_mgi_rr+0x144>)
 8007d2c:	26cc      	movs	r6, #204	; 0xcc
 8007d2e:	0076      	lsls	r6, r6, #1
 8007d30:	199b      	adds	r3, r3, r6
 8007d32:	2218      	movs	r2, #24
 8007d34:	4694      	mov	ip, r2
 8007d36:	44bc      	add	ip, r7
 8007d38:	4463      	add	r3, ip
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	23c6      	movs	r3, #198	; 0xc6
 8007d3e:	001a      	movs	r2, r3
 8007d40:	2100      	movs	r1, #0
 8007d42:	f003 fe91 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007d46:	21c8      	movs	r1, #200	; 0xc8
 8007d48:	2318      	movs	r3, #24
 8007d4a:	18cb      	adds	r3, r1, r3
 8007d4c:	19db      	adds	r3, r3, r7
 8007d4e:	2219      	movs	r2, #25
 8007d50:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007d52:	2318      	movs	r3, #24
 8007d54:	18fa      	adds	r2, r7, r3
 8007d56:	2318      	movs	r3, #24
 8007d58:	18cb      	adds	r3, r1, r3
 8007d5a:	19db      	adds	r3, r3, r7
 8007d5c:	0011      	movs	r1, r2
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f001 f9ba 	bl	80090d8 <astronode_transport_send_receive>
 8007d64:	0003      	movs	r3, r0
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d16f      	bne.n	8007e4a <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007d6a:	4b3a      	ldr	r3, [pc, #232]	; (8007e54 <astronode_send_mgi_rr+0x144>)
 8007d6c:	0032      	movs	r2, r6
 8007d6e:	189b      	adds	r3, r3, r2
 8007d70:	2118      	movs	r1, #24
 8007d72:	468c      	mov	ip, r1
 8007d74:	44bc      	add	ip, r7
 8007d76:	4463      	add	r3, ip
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b99      	cmp	r3, #153	; 0x99
 8007d7c:	d161      	bne.n	8007e42 <astronode_send_mgi_rr+0x132>
        {
 8007d7e:	466b      	mov	r3, sp
 8007d80:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007d82:	4b34      	ldr	r3, [pc, #208]	; (8007e54 <astronode_send_mgi_rr+0x144>)
 8007d84:	189b      	adds	r3, r3, r2
 8007d86:	2218      	movs	r2, #24
 8007d88:	4694      	mov	ip, r2
 8007d8a:	44bc      	add	ip, r7
 8007d8c:	4463      	add	r3, ip
 8007d8e:	22c4      	movs	r2, #196	; 0xc4
 8007d90:	5a9b      	ldrh	r3, [r3, r2]
 8007d92:	001a      	movs	r2, r3
 8007d94:	3a01      	subs	r2, #1
 8007d96:	21ca      	movs	r1, #202	; 0xca
 8007d98:	0049      	lsls	r1, r1, #1
 8007d9a:	2018      	movs	r0, #24
 8007d9c:	1809      	adds	r1, r1, r0
 8007d9e:	19c9      	adds	r1, r1, r7
 8007da0:	600a      	str	r2, [r1, #0]
 8007da2:	001c      	movs	r4, r3
 8007da4:	2200      	movs	r2, #0
 8007da6:	0015      	movs	r5, r2
 8007da8:	0020      	movs	r0, r4
 8007daa:	0029      	movs	r1, r5
 8007dac:	0004      	movs	r4, r0
 8007dae:	0f62      	lsrs	r2, r4, #29
 8007db0:	000c      	movs	r4, r1
 8007db2:	00e4      	lsls	r4, r4, #3
 8007db4:	617c      	str	r4, [r7, #20]
 8007db6:	697c      	ldr	r4, [r7, #20]
 8007db8:	4314      	orrs	r4, r2
 8007dba:	617c      	str	r4, [r7, #20]
 8007dbc:	0001      	movs	r1, r0
 8007dbe:	00c9      	lsls	r1, r1, #3
 8007dc0:	6139      	str	r1, [r7, #16]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	6838      	ldr	r0, [r7, #0]
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	0004      	movs	r4, r0
 8007dce:	0f62      	lsrs	r2, r4, #29
 8007dd0:	000c      	movs	r4, r1
 8007dd2:	00e4      	lsls	r4, r4, #3
 8007dd4:	60fc      	str	r4, [r7, #12]
 8007dd6:	68fc      	ldr	r4, [r7, #12]
 8007dd8:	4314      	orrs	r4, r2
 8007dda:	60fc      	str	r4, [r7, #12]
 8007ddc:	0001      	movs	r1, r0
 8007dde:	00ca      	lsls	r2, r1, #3
 8007de0:	60ba      	str	r2, [r7, #8]
 8007de2:	3307      	adds	r3, #7
 8007de4:	08db      	lsrs	r3, r3, #3
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	4669      	mov	r1, sp
 8007dea:	1acb      	subs	r3, r1, r3
 8007dec:	469d      	mov	sp, r3
 8007dee:	466b      	mov	r3, sp
 8007df0:	3300      	adds	r3, #0
 8007df2:	24c8      	movs	r4, #200	; 0xc8
 8007df4:	0064      	lsls	r4, r4, #1
 8007df6:	2218      	movs	r2, #24
 8007df8:	18a2      	adds	r2, r4, r2
 8007dfa:	19d1      	adds	r1, r2, r7
 8007dfc:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007dfe:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <astronode_send_mgi_rr+0x148>)
 8007e00:	0018      	movs	r0, r3
 8007e02:	f7fa ffcd 	bl	8002da0 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007e06:	4b13      	ldr	r3, [pc, #76]	; (8007e54 <astronode_send_mgi_rr+0x144>)
 8007e08:	22cc      	movs	r2, #204	; 0xcc
 8007e0a:	0052      	lsls	r2, r2, #1
 8007e0c:	189b      	adds	r3, r3, r2
 8007e0e:	2218      	movs	r2, #24
 8007e10:	4694      	mov	ip, r2
 8007e12:	44bc      	add	ip, r7
 8007e14:	4463      	add	r3, ip
 8007e16:	22c4      	movs	r2, #196	; 0xc4
 8007e18:	5a9b      	ldrh	r3, [r3, r2]
 8007e1a:	0019      	movs	r1, r3
 8007e1c:	2318      	movs	r3, #24
 8007e1e:	18fb      	adds	r3, r7, r3
 8007e20:	3301      	adds	r3, #1
 8007e22:	4a0e      	ldr	r2, [pc, #56]	; (8007e5c <astronode_send_mgi_rr+0x14c>)
 8007e24:	2018      	movs	r0, #24
 8007e26:	1820      	adds	r0, r4, r0
 8007e28:	19c0      	adds	r0, r0, r7
 8007e2a:	6800      	ldr	r0, [r0, #0]
 8007e2c:	f003 fd52 	bl	800b8d4 <snprintf>
            send_debug_logs(guid);
 8007e30:	2318      	movs	r3, #24
 8007e32:	18e3      	adds	r3, r4, r3
 8007e34:	19db      	adds	r3, r3, r7
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f7fa ffb1 	bl	8002da0 <send_debug_logs>
 8007e3e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007e40:	e003      	b.n	8007e4a <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007e42:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <astronode_send_mgi_rr+0x150>)
 8007e44:	0018      	movs	r0, r3
 8007e46:	f7fa ffab 	bl	8002da0 <send_debug_logs>
}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b06d      	add	sp, #436	; 0x1b4
 8007e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	fffffe68 	.word	0xfffffe68
 8007e58:	08012bc0 	.word	0x08012bc0
 8007e5c:	08012bd0 	.word	0x08012bd0
 8007e60:	08012bd4 	.word	0x08012bd4

08007e64 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e66:	b0ed      	sub	sp, #436	; 0x1b4
 8007e68:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007e6a:	21c8      	movs	r1, #200	; 0xc8
 8007e6c:	2318      	movs	r3, #24
 8007e6e:	18cb      	adds	r3, r1, r3
 8007e70:	19db      	adds	r3, r3, r7
 8007e72:	0018      	movs	r0, r3
 8007e74:	23c6      	movs	r3, #198	; 0xc6
 8007e76:	001a      	movs	r2, r3
 8007e78:	2100      	movs	r1, #0
 8007e7a:	f003 fdf5 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8007e7e:	4b4a      	ldr	r3, [pc, #296]	; (8007fa8 <astronode_send_msn_rr+0x144>)
 8007e80:	26cc      	movs	r6, #204	; 0xcc
 8007e82:	0076      	lsls	r6, r6, #1
 8007e84:	199b      	adds	r3, r3, r6
 8007e86:	2218      	movs	r2, #24
 8007e88:	4694      	mov	ip, r2
 8007e8a:	44bc      	add	ip, r7
 8007e8c:	4463      	add	r3, ip
 8007e8e:	0018      	movs	r0, r3
 8007e90:	23c6      	movs	r3, #198	; 0xc6
 8007e92:	001a      	movs	r2, r3
 8007e94:	2100      	movs	r1, #0
 8007e96:	f003 fde7 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007e9a:	21c8      	movs	r1, #200	; 0xc8
 8007e9c:	2318      	movs	r3, #24
 8007e9e:	18cb      	adds	r3, r1, r3
 8007ea0:	19db      	adds	r3, r3, r7
 8007ea2:	221a      	movs	r2, #26
 8007ea4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007ea6:	2318      	movs	r3, #24
 8007ea8:	18fa      	adds	r2, r7, r3
 8007eaa:	2318      	movs	r3, #24
 8007eac:	18cb      	adds	r3, r1, r3
 8007eae:	19db      	adds	r3, r3, r7
 8007eb0:	0011      	movs	r1, r2
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f001 f910 	bl	80090d8 <astronode_transport_send_receive>
 8007eb8:	0003      	movs	r3, r0
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d16f      	bne.n	8007f9e <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007ebe:	4b3a      	ldr	r3, [pc, #232]	; (8007fa8 <astronode_send_msn_rr+0x144>)
 8007ec0:	0032      	movs	r2, r6
 8007ec2:	189b      	adds	r3, r3, r2
 8007ec4:	2118      	movs	r1, #24
 8007ec6:	468c      	mov	ip, r1
 8007ec8:	44bc      	add	ip, r7
 8007eca:	4463      	add	r3, ip
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b9a      	cmp	r3, #154	; 0x9a
 8007ed0:	d161      	bne.n	8007f96 <astronode_send_msn_rr+0x132>
        {
 8007ed2:	466b      	mov	r3, sp
 8007ed4:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007ed6:	4b34      	ldr	r3, [pc, #208]	; (8007fa8 <astronode_send_msn_rr+0x144>)
 8007ed8:	189b      	adds	r3, r3, r2
 8007eda:	2218      	movs	r2, #24
 8007edc:	4694      	mov	ip, r2
 8007ede:	44bc      	add	ip, r7
 8007ee0:	4463      	add	r3, ip
 8007ee2:	22c4      	movs	r2, #196	; 0xc4
 8007ee4:	5a9b      	ldrh	r3, [r3, r2]
 8007ee6:	001a      	movs	r2, r3
 8007ee8:	3a01      	subs	r2, #1
 8007eea:	21ca      	movs	r1, #202	; 0xca
 8007eec:	0049      	lsls	r1, r1, #1
 8007eee:	2018      	movs	r0, #24
 8007ef0:	1809      	adds	r1, r1, r0
 8007ef2:	19c9      	adds	r1, r1, r7
 8007ef4:	600a      	str	r2, [r1, #0]
 8007ef6:	001c      	movs	r4, r3
 8007ef8:	2200      	movs	r2, #0
 8007efa:	0015      	movs	r5, r2
 8007efc:	0020      	movs	r0, r4
 8007efe:	0029      	movs	r1, r5
 8007f00:	0004      	movs	r4, r0
 8007f02:	0f62      	lsrs	r2, r4, #29
 8007f04:	000c      	movs	r4, r1
 8007f06:	00e4      	lsls	r4, r4, #3
 8007f08:	617c      	str	r4, [r7, #20]
 8007f0a:	697c      	ldr	r4, [r7, #20]
 8007f0c:	4314      	orrs	r4, r2
 8007f0e:	617c      	str	r4, [r7, #20]
 8007f10:	0001      	movs	r1, r0
 8007f12:	00c9      	lsls	r1, r1, #3
 8007f14:	6139      	str	r1, [r7, #16]
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	6838      	ldr	r0, [r7, #0]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	0004      	movs	r4, r0
 8007f22:	0f62      	lsrs	r2, r4, #29
 8007f24:	000c      	movs	r4, r1
 8007f26:	00e4      	lsls	r4, r4, #3
 8007f28:	60fc      	str	r4, [r7, #12]
 8007f2a:	68fc      	ldr	r4, [r7, #12]
 8007f2c:	4314      	orrs	r4, r2
 8007f2e:	60fc      	str	r4, [r7, #12]
 8007f30:	0001      	movs	r1, r0
 8007f32:	00ca      	lsls	r2, r1, #3
 8007f34:	60ba      	str	r2, [r7, #8]
 8007f36:	3307      	adds	r3, #7
 8007f38:	08db      	lsrs	r3, r3, #3
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	4669      	mov	r1, sp
 8007f3e:	1acb      	subs	r3, r1, r3
 8007f40:	469d      	mov	sp, r3
 8007f42:	466b      	mov	r3, sp
 8007f44:	3300      	adds	r3, #0
 8007f46:	24c8      	movs	r4, #200	; 0xc8
 8007f48:	0064      	lsls	r4, r4, #1
 8007f4a:	2218      	movs	r2, #24
 8007f4c:	18a2      	adds	r2, r4, r2
 8007f4e:	19d1      	adds	r1, r2, r7
 8007f50:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007f52:	4b16      	ldr	r3, [pc, #88]	; (8007fac <astronode_send_msn_rr+0x148>)
 8007f54:	0018      	movs	r0, r3
 8007f56:	f7fa ff23 	bl	8002da0 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <astronode_send_msn_rr+0x144>)
 8007f5c:	22cc      	movs	r2, #204	; 0xcc
 8007f5e:	0052      	lsls	r2, r2, #1
 8007f60:	189b      	adds	r3, r3, r2
 8007f62:	2218      	movs	r2, #24
 8007f64:	4694      	mov	ip, r2
 8007f66:	44bc      	add	ip, r7
 8007f68:	4463      	add	r3, ip
 8007f6a:	22c4      	movs	r2, #196	; 0xc4
 8007f6c:	5a9b      	ldrh	r3, [r3, r2]
 8007f6e:	0019      	movs	r1, r3
 8007f70:	2318      	movs	r3, #24
 8007f72:	18fb      	adds	r3, r7, r3
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a0e      	ldr	r2, [pc, #56]	; (8007fb0 <astronode_send_msn_rr+0x14c>)
 8007f78:	2018      	movs	r0, #24
 8007f7a:	1820      	adds	r0, r4, r0
 8007f7c:	19c0      	adds	r0, r0, r7
 8007f7e:	6800      	ldr	r0, [r0, #0]
 8007f80:	f003 fca8 	bl	800b8d4 <snprintf>
            send_debug_logs(serial_number);
 8007f84:	2318      	movs	r3, #24
 8007f86:	18e3      	adds	r3, r4, r3
 8007f88:	19db      	adds	r3, r3, r7
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	f7fa ff07 	bl	8002da0 <send_debug_logs>
 8007f92:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007f94:	e003      	b.n	8007f9e <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007f96:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <astronode_send_msn_rr+0x150>)
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f7fa ff01 	bl	8002da0 <send_debug_logs>
}
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	b06d      	add	sp, #436	; 0x1b4
 8007fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	fffffe68 	.word	0xfffffe68
 8007fac:	08012bf0 	.word	0x08012bf0
 8007fb0:	08012bd0 	.word	0x08012bd0
 8007fb4:	08012c0c 	.word	0x08012c0c

08007fb8 <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 8007fb8:	b5b0      	push	{r4, r5, r7, lr}
 8007fba:	b0fa      	sub	sp, #488	; 0x1e8
 8007fbc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007fbe:	258e      	movs	r5, #142	; 0x8e
 8007fc0:	006d      	lsls	r5, r5, #1
 8007fc2:	197b      	adds	r3, r7, r5
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	23c6      	movs	r3, #198	; 0xc6
 8007fc8:	001a      	movs	r2, r3
 8007fca:	2100      	movs	r1, #0
 8007fcc:	f003 fd4c 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8007fd0:	4b26      	ldr	r3, [pc, #152]	; (800806c <astronode_send_nco_rr+0xb4>)
 8007fd2:	24f4      	movs	r4, #244	; 0xf4
 8007fd4:	0064      	lsls	r4, r4, #1
 8007fd6:	191b      	adds	r3, r3, r4
 8007fd8:	19db      	adds	r3, r3, r7
 8007fda:	0018      	movs	r0, r3
 8007fdc:	23c6      	movs	r3, #198	; 0xc6
 8007fde:	001a      	movs	r2, r3
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	f003 fd41 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 8007fe6:	197b      	adds	r3, r7, r5
 8007fe8:	2218      	movs	r2, #24
 8007fea:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007fec:	2354      	movs	r3, #84	; 0x54
 8007fee:	18fa      	adds	r2, r7, r3
 8007ff0:	197b      	adds	r3, r7, r5
 8007ff2:	0011      	movs	r1, r2
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f001 f86f 	bl	80090d8 <astronode_transport_send_receive>
 8007ffa:	0003      	movs	r3, r0
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d131      	bne.n	8008064 <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 8008000:	4b1a      	ldr	r3, [pc, #104]	; (800806c <astronode_send_nco_rr+0xb4>)
 8008002:	0021      	movs	r1, r4
 8008004:	185b      	adds	r3, r3, r1
 8008006:	19db      	adds	r3, r3, r7
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b98      	cmp	r3, #152	; 0x98
 800800c:	d126      	bne.n	800805c <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 800800e:	4b17      	ldr	r3, [pc, #92]	; (800806c <astronode_send_nco_rr+0xb4>)
 8008010:	185b      	adds	r3, r3, r1
 8008012:	19db      	adds	r3, r3, r7
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8008018:	4b14      	ldr	r3, [pc, #80]	; (800806c <astronode_send_nco_rr+0xb4>)
 800801a:	185b      	adds	r3, r3, r1
 800801c:	19db      	adds	r3, r3, r7
 800801e:	789b      	ldrb	r3, [r3, #2]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 8008024:	4b11      	ldr	r3, [pc, #68]	; (800806c <astronode_send_nco_rr+0xb4>)
 8008026:	185b      	adds	r3, r3, r1
 8008028:	19db      	adds	r3, r3, r7
 800802a:	78db      	ldrb	r3, [r3, #3]
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 8008030:	4b0e      	ldr	r3, [pc, #56]	; (800806c <astronode_send_nco_rr+0xb4>)
 8008032:	185b      	adds	r3, r3, r1
 8008034:	19db      	adds	r3, r3, r7
 8008036:	791b      	ldrb	r3, [r3, #4]
 8008038:	061b      	lsls	r3, r3, #24
 800803a:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 800803c:	22f2      	movs	r2, #242	; 0xf2
 800803e:	0052      	lsls	r2, r2, #1
 8008040:	18b9      	adds	r1, r7, r2
 8008042:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 8008044:	18bb      	adds	r3, r7, r2
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4909      	ldr	r1, [pc, #36]	; (8008070 <astronode_send_nco_rr+0xb8>)
 800804a:	1d3b      	adds	r3, r7, #4
 800804c:	0018      	movs	r0, r3
 800804e:	f003 fc75 	bl	800b93c <sprintf>
            send_debug_logs(str);
 8008052:	1d3b      	adds	r3, r7, #4
 8008054:	0018      	movs	r0, r3
 8008056:	f7fa fea3 	bl	8002da0 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 800805a:	e003      	b.n	8008064 <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 800805c:	4b05      	ldr	r3, [pc, #20]	; (8008074 <astronode_send_nco_rr+0xbc>)
 800805e:	0018      	movs	r0, r3
 8008060:	f7fa fe9e 	bl	8002da0 <send_debug_logs>
}
 8008064:	46c0      	nop			; (mov r8, r8)
 8008066:	46bd      	mov	sp, r7
 8008068:	b07a      	add	sp, #488	; 0x1e8
 800806a:	bdb0      	pop	{r4, r5, r7, pc}
 800806c:	fffffe6c 	.word	0xfffffe6c
 8008070:	08012c34 	.word	0x08012c34
 8008074:	08012c7c 	.word	0x08012c7c

08008078 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 8008078:	b5b0      	push	{r4, r5, r7, lr}
 800807a:	b0e4      	sub	sp, #400	; 0x190
 800807c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800807e:	24c8      	movs	r4, #200	; 0xc8
 8008080:	193b      	adds	r3, r7, r4
 8008082:	0018      	movs	r0, r3
 8008084:	23c6      	movs	r3, #198	; 0xc6
 8008086:	001a      	movs	r2, r3
 8008088:	2100      	movs	r1, #0
 800808a:	f003 fced 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 800808e:	4b31      	ldr	r3, [pc, #196]	; (8008154 <astronode_send_evt_rr+0xdc>)
 8008090:	25c8      	movs	r5, #200	; 0xc8
 8008092:	006d      	lsls	r5, r5, #1
 8008094:	195b      	adds	r3, r3, r5
 8008096:	19db      	adds	r3, r3, r7
 8008098:	0018      	movs	r0, r3
 800809a:	23c6      	movs	r3, #198	; 0xc6
 800809c:	001a      	movs	r2, r3
 800809e:	2100      	movs	r1, #0
 80080a0:	f003 fce2 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80080a4:	193b      	adds	r3, r7, r4
 80080a6:	2265      	movs	r2, #101	; 0x65
 80080a8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80080aa:	003a      	movs	r2, r7
 80080ac:	193b      	adds	r3, r7, r4
 80080ae:	0011      	movs	r1, r2
 80080b0:	0018      	movs	r0, r3
 80080b2:	f001 f811 	bl	80090d8 <astronode_transport_send_receive>
 80080b6:	0003      	movs	r3, r0
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d147      	bne.n	800814c <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80080bc:	4b25      	ldr	r3, [pc, #148]	; (8008154 <astronode_send_evt_rr+0xdc>)
 80080be:	195b      	adds	r3, r3, r5
 80080c0:	19db      	adds	r3, r3, r7
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2be5      	cmp	r3, #229	; 0xe5
 80080c6:	d141      	bne.n	800814c <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80080c8:	4b22      	ldr	r3, [pc, #136]	; (8008154 <astronode_send_evt_rr+0xdc>)
 80080ca:	195b      	adds	r3, r3, r5
 80080cc:	19db      	adds	r3, r3, r7
 80080ce:	785b      	ldrb	r3, [r3, #1]
 80080d0:	001a      	movs	r2, r3
 80080d2:	2301      	movs	r3, #1
 80080d4:	4013      	ands	r3, r2
 80080d6:	d006      	beq.n	80080e6 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80080d8:	4b1f      	ldr	r3, [pc, #124]	; (8008158 <astronode_send_evt_rr+0xe0>)
 80080da:	2201      	movs	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 80080de:	4b1f      	ldr	r3, [pc, #124]	; (800815c <astronode_send_evt_rr+0xe4>)
 80080e0:	0018      	movs	r0, r3
 80080e2:	f7fa fe5d 	bl	8002da0 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80080e6:	4b1b      	ldr	r3, [pc, #108]	; (8008154 <astronode_send_evt_rr+0xdc>)
 80080e8:	22c8      	movs	r2, #200	; 0xc8
 80080ea:	0052      	lsls	r2, r2, #1
 80080ec:	189b      	adds	r3, r3, r2
 80080ee:	19db      	adds	r3, r3, r7
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	001a      	movs	r2, r3
 80080f4:	2302      	movs	r3, #2
 80080f6:	4013      	ands	r3, r2
 80080f8:	d006      	beq.n	8008108 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 80080fa:	4b19      	ldr	r3, [pc, #100]	; (8008160 <astronode_send_evt_rr+0xe8>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8008100:	4b18      	ldr	r3, [pc, #96]	; (8008164 <astronode_send_evt_rr+0xec>)
 8008102:	0018      	movs	r0, r3
 8008104:	f7fa fe4c 	bl	8002da0 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8008108:	4b12      	ldr	r3, [pc, #72]	; (8008154 <astronode_send_evt_rr+0xdc>)
 800810a:	22c8      	movs	r2, #200	; 0xc8
 800810c:	0052      	lsls	r2, r2, #1
 800810e:	189b      	adds	r3, r3, r2
 8008110:	19db      	adds	r3, r3, r7
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	001a      	movs	r2, r3
 8008116:	2304      	movs	r3, #4
 8008118:	4013      	ands	r3, r2
 800811a:	d006      	beq.n	800812a <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 800811c:	4b12      	ldr	r3, [pc, #72]	; (8008168 <astronode_send_evt_rr+0xf0>)
 800811e:	2201      	movs	r2, #1
 8008120:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8008122:	4b12      	ldr	r3, [pc, #72]	; (800816c <astronode_send_evt_rr+0xf4>)
 8008124:	0018      	movs	r0, r3
 8008126:	f7fa fe3b 	bl	8002da0 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800812a:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <astronode_send_evt_rr+0xdc>)
 800812c:	22c8      	movs	r2, #200	; 0xc8
 800812e:	0052      	lsls	r2, r2, #1
 8008130:	189b      	adds	r3, r3, r2
 8008132:	19db      	adds	r3, r3, r7
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	001a      	movs	r2, r3
 8008138:	2308      	movs	r3, #8
 800813a:	4013      	ands	r3, r2
 800813c:	d006      	beq.n	800814c <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800813e:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <astronode_send_evt_rr+0xf8>)
 8008140:	2201      	movs	r2, #1
 8008142:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008144:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <astronode_send_evt_rr+0xfc>)
 8008146:	0018      	movs	r0, r3
 8008148:	f7fa fe2a 	bl	8002da0 <send_debug_logs>
            }

        }
    }
}
 800814c:	46c0      	nop			; (mov r8, r8)
 800814e:	46bd      	mov	sp, r7
 8008150:	b064      	add	sp, #400	; 0x190
 8008152:	bdb0      	pop	{r4, r5, r7, pc}
 8008154:	fffffe70 	.word	0xfffffe70
 8008158:	20000b38 	.word	0x20000b38
 800815c:	08012cb4 	.word	0x08012cb4
 8008160:	20000b39 	.word	0x20000b39
 8008164:	08012cd8 	.word	0x08012cd8
 8008168:	20000b3a 	.word	0x20000b3a
 800816c:	08012cf0 	.word	0x08012cf0
 8008170:	20000b3b 	.word	0x20000b3b
 8008174:	08012d04 	.word	0x08012d04

08008178 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8008178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817a:	b0e7      	sub	sp, #412	; 0x19c
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8008182:	24d0      	movs	r4, #208	; 0xd0
 8008184:	193b      	adds	r3, r7, r4
 8008186:	0018      	movs	r0, r3
 8008188:	23c6      	movs	r3, #198	; 0xc6
 800818a:	001a      	movs	r2, r3
 800818c:	2100      	movs	r1, #0
 800818e:	f003 fc6b 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8008192:	4b56      	ldr	r3, [pc, #344]	; (80082ec <astronode_send_geo_wr+0x174>)
 8008194:	26cc      	movs	r6, #204	; 0xcc
 8008196:	0076      	lsls	r6, r6, #1
 8008198:	199b      	adds	r3, r3, r6
 800819a:	19db      	adds	r3, r3, r7
 800819c:	0018      	movs	r0, r3
 800819e:	23c6      	movs	r3, #198	; 0xc6
 80081a0:	001a      	movs	r2, r3
 80081a2:	2100      	movs	r1, #0
 80081a4:	f003 fc60 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80081a8:	193b      	adds	r3, r7, r4
 80081aa:	2235      	movs	r2, #53	; 0x35
 80081ac:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80081ae:	193b      	adds	r3, r7, r4
 80081b0:	22c4      	movs	r2, #196	; 0xc4
 80081b2:	5a9b      	ldrh	r3, [r3, r2]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	b290      	uxth	r0, r2
 80081b8:	193a      	adds	r2, r7, r4
 80081ba:	21c4      	movs	r1, #196	; 0xc4
 80081bc:	5250      	strh	r0, [r2, r1]
 80081be:	0019      	movs	r1, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	193b      	adds	r3, r7, r4
 80081c6:	185b      	adds	r3, r3, r1
 80081c8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	1218      	asrs	r0, r3, #8
 80081ce:	0025      	movs	r5, r4
 80081d0:	197b      	adds	r3, r7, r5
 80081d2:	22c4      	movs	r2, #196	; 0xc4
 80081d4:	5a9b      	ldrh	r3, [r3, r2]
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	b294      	uxth	r4, r2
 80081da:	197a      	adds	r2, r7, r5
 80081dc:	21c4      	movs	r1, #196	; 0xc4
 80081de:	5254      	strh	r4, [r2, r1]
 80081e0:	0019      	movs	r1, r3
 80081e2:	b2c2      	uxtb	r2, r0
 80081e4:	002c      	movs	r4, r5
 80081e6:	193b      	adds	r3, r7, r4
 80081e8:	185b      	adds	r3, r3, r1
 80081ea:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	1418      	asrs	r0, r3, #16
 80081f0:	0025      	movs	r5, r4
 80081f2:	197b      	adds	r3, r7, r5
 80081f4:	22c4      	movs	r2, #196	; 0xc4
 80081f6:	5a9b      	ldrh	r3, [r3, r2]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	b294      	uxth	r4, r2
 80081fc:	197a      	adds	r2, r7, r5
 80081fe:	21c4      	movs	r1, #196	; 0xc4
 8008200:	5254      	strh	r4, [r2, r1]
 8008202:	0019      	movs	r1, r3
 8008204:	b2c2      	uxtb	r2, r0
 8008206:	002c      	movs	r4, r5
 8008208:	193b      	adds	r3, r7, r4
 800820a:	185b      	adds	r3, r3, r1
 800820c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	1618      	asrs	r0, r3, #24
 8008212:	0025      	movs	r5, r4
 8008214:	197b      	adds	r3, r7, r5
 8008216:	22c4      	movs	r2, #196	; 0xc4
 8008218:	5a9b      	ldrh	r3, [r3, r2]
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	b294      	uxth	r4, r2
 800821e:	197a      	adds	r2, r7, r5
 8008220:	21c4      	movs	r1, #196	; 0xc4
 8008222:	5254      	strh	r4, [r2, r1]
 8008224:	0019      	movs	r1, r3
 8008226:	b2c2      	uxtb	r2, r0
 8008228:	002c      	movs	r4, r5
 800822a:	193b      	adds	r3, r7, r4
 800822c:	185b      	adds	r3, r3, r1
 800822e:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008230:	193b      	adds	r3, r7, r4
 8008232:	22c4      	movs	r2, #196	; 0xc4
 8008234:	5a9b      	ldrh	r3, [r3, r2]
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	b290      	uxth	r0, r2
 800823a:	193a      	adds	r2, r7, r4
 800823c:	21c4      	movs	r1, #196	; 0xc4
 800823e:	5250      	strh	r0, [r2, r1]
 8008240:	0019      	movs	r1, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	b2da      	uxtb	r2, r3
 8008246:	193b      	adds	r3, r7, r4
 8008248:	185b      	adds	r3, r3, r1
 800824a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	1218      	asrs	r0, r3, #8
 8008250:	0025      	movs	r5, r4
 8008252:	197b      	adds	r3, r7, r5
 8008254:	22c4      	movs	r2, #196	; 0xc4
 8008256:	5a9b      	ldrh	r3, [r3, r2]
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	b294      	uxth	r4, r2
 800825c:	197a      	adds	r2, r7, r5
 800825e:	21c4      	movs	r1, #196	; 0xc4
 8008260:	5254      	strh	r4, [r2, r1]
 8008262:	0019      	movs	r1, r3
 8008264:	b2c2      	uxtb	r2, r0
 8008266:	002c      	movs	r4, r5
 8008268:	193b      	adds	r3, r7, r4
 800826a:	185b      	adds	r3, r3, r1
 800826c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	1418      	asrs	r0, r3, #16
 8008272:	0025      	movs	r5, r4
 8008274:	197b      	adds	r3, r7, r5
 8008276:	22c4      	movs	r2, #196	; 0xc4
 8008278:	5a9b      	ldrh	r3, [r3, r2]
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	b294      	uxth	r4, r2
 800827e:	197a      	adds	r2, r7, r5
 8008280:	21c4      	movs	r1, #196	; 0xc4
 8008282:	5254      	strh	r4, [r2, r1]
 8008284:	0019      	movs	r1, r3
 8008286:	b2c2      	uxtb	r2, r0
 8008288:	002c      	movs	r4, r5
 800828a:	193b      	adds	r3, r7, r4
 800828c:	185b      	adds	r3, r3, r1
 800828e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	1618      	asrs	r0, r3, #24
 8008294:	0025      	movs	r5, r4
 8008296:	197b      	adds	r3, r7, r5
 8008298:	22c4      	movs	r2, #196	; 0xc4
 800829a:	5a9b      	ldrh	r3, [r3, r2]
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	b294      	uxth	r4, r2
 80082a0:	197a      	adds	r2, r7, r5
 80082a2:	21c4      	movs	r1, #196	; 0xc4
 80082a4:	5254      	strh	r4, [r2, r1]
 80082a6:	0019      	movs	r1, r3
 80082a8:	b2c2      	uxtb	r2, r0
 80082aa:	0028      	movs	r0, r5
 80082ac:	183b      	adds	r3, r7, r0
 80082ae:	185b      	adds	r3, r3, r1
 80082b0:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80082b2:	2308      	movs	r3, #8
 80082b4:	18fa      	adds	r2, r7, r3
 80082b6:	183b      	adds	r3, r7, r0
 80082b8:	0011      	movs	r1, r2
 80082ba:	0018      	movs	r0, r3
 80082bc:	f000 ff0c 	bl	80090d8 <astronode_transport_send_receive>
 80082c0:	0003      	movs	r3, r0
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d10e      	bne.n	80082e4 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80082c6:	4b09      	ldr	r3, [pc, #36]	; (80082ec <astronode_send_geo_wr+0x174>)
 80082c8:	199b      	adds	r3, r3, r6
 80082ca:	19db      	adds	r3, r3, r7
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2bb5      	cmp	r3, #181	; 0xb5
 80082d0:	d104      	bne.n	80082dc <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80082d2:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <astronode_send_geo_wr+0x178>)
 80082d4:	0018      	movs	r0, r3
 80082d6:	f7fa fd63 	bl	8002da0 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80082da:	e003      	b.n	80082e4 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80082dc:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <astronode_send_geo_wr+0x17c>)
 80082de:	0018      	movs	r0, r3
 80082e0:	f7fa fd5e 	bl	8002da0 <send_debug_logs>
}
 80082e4:	46c0      	nop			; (mov r8, r8)
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b067      	add	sp, #412	; 0x19c
 80082ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ec:	fffffe70 	.word	0xfffffe70
 80082f0:	08012d18 	.word	0x08012d18
 80082f4:	08012d44 	.word	0x08012d44

080082f8 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80082f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082fa:	b0fb      	sub	sp, #492	; 0x1ec
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6039      	str	r1, [r7, #0]
 8008300:	0011      	movs	r1, r2
 8008302:	4b4a      	ldr	r3, [pc, #296]	; (800842c <astronode_send_pld_er+0x134>)
 8008304:	26f4      	movs	r6, #244	; 0xf4
 8008306:	0076      	lsls	r6, r6, #1
 8008308:	199b      	adds	r3, r3, r6
 800830a:	19db      	adds	r3, r3, r7
 800830c:	1c02      	adds	r2, r0, #0
 800830e:	801a      	strh	r2, [r3, #0]
 8008310:	4b47      	ldr	r3, [pc, #284]	; (8008430 <astronode_send_pld_er+0x138>)
 8008312:	199b      	adds	r3, r3, r6
 8008314:	19db      	adds	r3, r3, r7
 8008316:	1c0a      	adds	r2, r1, #0
 8008318:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800831a:	2490      	movs	r4, #144	; 0x90
 800831c:	0064      	lsls	r4, r4, #1
 800831e:	193b      	adds	r3, r7, r4
 8008320:	0018      	movs	r0, r3
 8008322:	23c6      	movs	r3, #198	; 0xc6
 8008324:	001a      	movs	r2, r3
 8008326:	2100      	movs	r1, #0
 8008328:	f003 fb9e 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 800832c:	4b41      	ldr	r3, [pc, #260]	; (8008434 <astronode_send_pld_er+0x13c>)
 800832e:	199b      	adds	r3, r3, r6
 8008330:	19db      	adds	r3, r3, r7
 8008332:	0018      	movs	r0, r3
 8008334:	23c6      	movs	r3, #198	; 0xc6
 8008336:	001a      	movs	r2, r3
 8008338:	2100      	movs	r1, #0
 800833a:	f003 fb95 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800833e:	193b      	adds	r3, r7, r4
 8008340:	2225      	movs	r2, #37	; 0x25
 8008342:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008344:	193b      	adds	r3, r7, r4
 8008346:	22c4      	movs	r2, #196	; 0xc4
 8008348:	5a9b      	ldrh	r3, [r3, r2]
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	b290      	uxth	r0, r2
 800834e:	193a      	adds	r2, r7, r4
 8008350:	21c4      	movs	r1, #196	; 0xc4
 8008352:	5250      	strh	r0, [r2, r1]
 8008354:	0019      	movs	r1, r3
 8008356:	4b35      	ldr	r3, [pc, #212]	; (800842c <astronode_send_pld_er+0x134>)
 8008358:	199b      	adds	r3, r3, r6
 800835a:	19db      	adds	r3, r3, r7
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b2da      	uxtb	r2, r3
 8008360:	193b      	adds	r3, r7, r4
 8008362:	185b      	adds	r3, r3, r1
 8008364:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8008366:	4b31      	ldr	r3, [pc, #196]	; (800842c <astronode_send_pld_er+0x134>)
 8008368:	199b      	adds	r3, r3, r6
 800836a:	19db      	adds	r3, r3, r7
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	0a1b      	lsrs	r3, r3, #8
 8008370:	b298      	uxth	r0, r3
 8008372:	0025      	movs	r5, r4
 8008374:	197b      	adds	r3, r7, r5
 8008376:	22c4      	movs	r2, #196	; 0xc4
 8008378:	5a9b      	ldrh	r3, [r3, r2]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	b294      	uxth	r4, r2
 800837e:	197a      	adds	r2, r7, r5
 8008380:	21c4      	movs	r1, #196	; 0xc4
 8008382:	5254      	strh	r4, [r2, r1]
 8008384:	0019      	movs	r1, r3
 8008386:	b2c2      	uxtb	r2, r0
 8008388:	002c      	movs	r4, r5
 800838a:	193b      	adds	r3, r7, r4
 800838c:	185b      	adds	r3, r3, r1
 800838e:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8008390:	193b      	adds	r3, r7, r4
 8008392:	22c4      	movs	r2, #196	; 0xc4
 8008394:	5a9b      	ldrh	r3, [r3, r2]
 8008396:	001a      	movs	r2, r3
 8008398:	193b      	adds	r3, r7, r4
 800839a:	189b      	adds	r3, r3, r2
 800839c:	1c58      	adds	r0, r3, #1
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <astronode_send_pld_er+0x138>)
 80083a0:	199b      	adds	r3, r3, r6
 80083a2:	19db      	adds	r3, r3, r7
 80083a4:	881a      	ldrh	r2, [r3, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	0019      	movs	r1, r3
 80083aa:	f003 fc42 	bl	800bc32 <memcpy>
    request.payload_len = 2 + payload_length;
 80083ae:	4b20      	ldr	r3, [pc, #128]	; (8008430 <astronode_send_pld_er+0x138>)
 80083b0:	199b      	adds	r3, r3, r6
 80083b2:	19db      	adds	r3, r3, r7
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	3302      	adds	r3, #2
 80083b8:	b299      	uxth	r1, r3
 80083ba:	193b      	adds	r3, r7, r4
 80083bc:	22c4      	movs	r2, #196	; 0xc4
 80083be:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80083c0:	2358      	movs	r3, #88	; 0x58
 80083c2:	18fa      	adds	r2, r7, r3
 80083c4:	193b      	adds	r3, r7, r4
 80083c6:	0011      	movs	r1, r2
 80083c8:	0018      	movs	r0, r3
 80083ca:	f000 fe85 	bl	80090d8 <astronode_transport_send_receive>
 80083ce:	0003      	movs	r3, r0
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d125      	bne.n	8008420 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <astronode_send_pld_er+0x13c>)
 80083d6:	199b      	adds	r3, r3, r6
 80083d8:	19db      	adds	r3, r3, r7
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2ba5      	cmp	r3, #165	; 0xa5
 80083de:	d10f      	bne.n	8008400 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 80083e0:	4b12      	ldr	r3, [pc, #72]	; (800842c <astronode_send_pld_er+0x134>)
 80083e2:	199b      	adds	r3, r3, r6
 80083e4:	19db      	adds	r3, r3, r7
 80083e6:	881a      	ldrh	r2, [r3, #0]
 80083e8:	4913      	ldr	r1, [pc, #76]	; (8008438 <astronode_send_pld_er+0x140>)
 80083ea:	2408      	movs	r4, #8
 80083ec:	193b      	adds	r3, r7, r4
 80083ee:	0018      	movs	r0, r3
 80083f0:	f003 faa4 	bl	800b93c <sprintf>
            send_debug_logs ( s ) ;
 80083f4:	193b      	adds	r3, r7, r4
 80083f6:	0018      	movs	r0, r3
 80083f8:	f7fa fcd2 	bl	8002da0 <send_debug_logs>
            return true ;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e010      	b.n	8008422 <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 8008400:	4b0a      	ldr	r3, [pc, #40]	; (800842c <astronode_send_pld_er+0x134>)
 8008402:	22f4      	movs	r2, #244	; 0xf4
 8008404:	0052      	lsls	r2, r2, #1
 8008406:	189b      	adds	r3, r3, r2
 8008408:	19db      	adds	r3, r3, r7
 800840a:	881a      	ldrh	r2, [r3, #0]
 800840c:	490b      	ldr	r1, [pc, #44]	; (800843c <astronode_send_pld_er+0x144>)
 800840e:	2408      	movs	r4, #8
 8008410:	193b      	adds	r3, r7, r4
 8008412:	0018      	movs	r0, r3
 8008414:	f003 fa92 	bl	800b93c <sprintf>
            send_debug_logs ( s ) ;
 8008418:	193b      	adds	r3, r7, r4
 800841a:	0018      	movs	r0, r3
 800841c:	f7fa fcc0 	bl	8002da0 <send_debug_logs>
        }
    }
    return false ;
 8008420:	2300      	movs	r3, #0
}
 8008422:	0018      	movs	r0, r3
 8008424:	46bd      	mov	sp, r7
 8008426:	b07b      	add	sp, #492	; 0x1ec
 8008428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	fffffe1e 	.word	0xfffffe1e
 8008430:	fffffe1c 	.word	0xfffffe1c
 8008434:	fffffe70 	.word	0xfffffe70
 8008438:	08012dbc 	.word	0x08012dbc
 800843c:	08012de8 	.word	0x08012de8

08008440 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8008440:	b5b0      	push	{r4, r5, r7, lr}
 8008442:	b0e4      	sub	sp, #400	; 0x190
 8008444:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008446:	24c8      	movs	r4, #200	; 0xc8
 8008448:	193b      	adds	r3, r7, r4
 800844a:	0018      	movs	r0, r3
 800844c:	23c6      	movs	r3, #198	; 0xc6
 800844e:	001a      	movs	r2, r3
 8008450:	2100      	movs	r1, #0
 8008452:	f003 fb09 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8008456:	4b15      	ldr	r3, [pc, #84]	; (80084ac <astronode_send_pld_fr+0x6c>)
 8008458:	25c8      	movs	r5, #200	; 0xc8
 800845a:	006d      	lsls	r5, r5, #1
 800845c:	195b      	adds	r3, r3, r5
 800845e:	19db      	adds	r3, r3, r7
 8008460:	0018      	movs	r0, r3
 8008462:	23c6      	movs	r3, #198	; 0xc6
 8008464:	001a      	movs	r2, r3
 8008466:	2100      	movs	r1, #0
 8008468:	f003 fafe 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 800846c:	193b      	adds	r3, r7, r4
 800846e:	2227      	movs	r2, #39	; 0x27
 8008470:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008472:	003a      	movs	r2, r7
 8008474:	193b      	adds	r3, r7, r4
 8008476:	0011      	movs	r1, r2
 8008478:	0018      	movs	r0, r3
 800847a:	f000 fe2d 	bl	80090d8 <astronode_transport_send_receive>
 800847e:	0003      	movs	r3, r0
 8008480:	2b01      	cmp	r3, #1
 8008482:	d10e      	bne.n	80084a2 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8008484:	4b09      	ldr	r3, [pc, #36]	; (80084ac <astronode_send_pld_fr+0x6c>)
 8008486:	195b      	adds	r3, r3, r5
 8008488:	19db      	adds	r3, r3, r7
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2ba7      	cmp	r3, #167	; 0xa7
 800848e:	d104      	bne.n	800849a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8008490:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <astronode_send_pld_fr+0x70>)
 8008492:	0018      	movs	r0, r3
 8008494:	f7fa fc84 	bl	8002da0 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008498:	e003      	b.n	80084a2 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 800849a:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <astronode_send_pld_fr+0x74>)
 800849c:	0018      	movs	r0, r3
 800849e:	f7fa fc7f 	bl	8002da0 <send_debug_logs>
}
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	46bd      	mov	sp, r7
 80084a6:	b064      	add	sp, #400	; 0x190
 80084a8:	bdb0      	pop	{r4, r5, r7, pc}
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	fffffe70 	.word	0xfffffe70
 80084b0:	08012e18 	.word	0x08012e18
 80084b4:	08012e50 	.word	0x08012e50

080084b8 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80084b8:	b5b0      	push	{r4, r5, r7, lr}
 80084ba:	b0e4      	sub	sp, #400	; 0x190
 80084bc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80084be:	24c8      	movs	r4, #200	; 0xc8
 80084c0:	193b      	adds	r3, r7, r4
 80084c2:	0018      	movs	r0, r3
 80084c4:	23c6      	movs	r3, #198	; 0xc6
 80084c6:	001a      	movs	r2, r3
 80084c8:	2100      	movs	r1, #0
 80084ca:	f003 facd 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 80084ce:	4b16      	ldr	r3, [pc, #88]	; (8008528 <astronode_send_res_cr+0x70>)
 80084d0:	25c8      	movs	r5, #200	; 0xc8
 80084d2:	006d      	lsls	r5, r5, #1
 80084d4:	195b      	adds	r3, r3, r5
 80084d6:	19db      	adds	r3, r3, r7
 80084d8:	0018      	movs	r0, r3
 80084da:	23c6      	movs	r3, #198	; 0xc6
 80084dc:	001a      	movs	r2, r3
 80084de:	2100      	movs	r1, #0
 80084e0:	f003 fac2 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80084e4:	193b      	adds	r3, r7, r4
 80084e6:	2255      	movs	r2, #85	; 0x55
 80084e8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80084ea:	003a      	movs	r2, r7
 80084ec:	193b      	adds	r3, r7, r4
 80084ee:	0011      	movs	r1, r2
 80084f0:	0018      	movs	r0, r3
 80084f2:	f000 fdf1 	bl	80090d8 <astronode_transport_send_receive>
 80084f6:	0003      	movs	r3, r0
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d111      	bne.n	8008520 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <astronode_send_res_cr+0x70>)
 80084fe:	195b      	adds	r3, r3, r5
 8008500:	19db      	adds	r3, r3, r7
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2bd5      	cmp	r3, #213	; 0xd5
 8008506:	d107      	bne.n	8008518 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008508:	4b08      	ldr	r3, [pc, #32]	; (800852c <astronode_send_res_cr+0x74>)
 800850a:	2200      	movs	r2, #0
 800850c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800850e:	4b08      	ldr	r3, [pc, #32]	; (8008530 <astronode_send_res_cr+0x78>)
 8008510:	0018      	movs	r0, r3
 8008512:	f7fa fc45 	bl	8002da0 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008516:	e003      	b.n	8008520 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008518:	4b06      	ldr	r3, [pc, #24]	; (8008534 <astronode_send_res_cr+0x7c>)
 800851a:	0018      	movs	r0, r3
 800851c:	f7fa fc40 	bl	8002da0 <send_debug_logs>
}
 8008520:	46c0      	nop			; (mov r8, r8)
 8008522:	46bd      	mov	sp, r7
 8008524:	b064      	add	sp, #400	; 0x190
 8008526:	bdb0      	pop	{r4, r5, r7, pc}
 8008528:	fffffe70 	.word	0xfffffe70
 800852c:	20000b39 	.word	0x20000b39
 8008530:	08012e8c 	.word	0x08012e8c
 8008534:	08012ec0 	.word	0x08012ec0

08008538 <astronode_send_rtc_rr>:

void astronode_send_rtc_rr(void)
{
 8008538:	b5b0      	push	{r4, r5, r7, lr}
 800853a:	b0fa      	sub	sp, #488	; 0x1e8
 800853c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800853e:	258e      	movs	r5, #142	; 0x8e
 8008540:	006d      	lsls	r5, r5, #1
 8008542:	197b      	adds	r3, r7, r5
 8008544:	0018      	movs	r0, r3
 8008546:	23c6      	movs	r3, #198	; 0xc6
 8008548:	001a      	movs	r2, r3
 800854a:	2100      	movs	r1, #0
 800854c:	f003 fa8c 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8008550:	4b26      	ldr	r3, [pc, #152]	; (80085ec <astronode_send_rtc_rr+0xb4>)
 8008552:	24f4      	movs	r4, #244	; 0xf4
 8008554:	0064      	lsls	r4, r4, #1
 8008556:	191b      	adds	r3, r3, r4
 8008558:	19db      	adds	r3, r3, r7
 800855a:	0018      	movs	r0, r3
 800855c:	23c6      	movs	r3, #198	; 0xc6
 800855e:	001a      	movs	r2, r3
 8008560:	2100      	movs	r1, #0
 8008562:	f003 fa81 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR;
 8008566:	197b      	adds	r3, r7, r5
 8008568:	2217      	movs	r2, #23
 800856a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800856c:	2354      	movs	r3, #84	; 0x54
 800856e:	18fa      	adds	r2, r7, r3
 8008570:	197b      	adds	r3, r7, r5
 8008572:	0011      	movs	r1, r2
 8008574:	0018      	movs	r0, r3
 8008576:	f000 fdaf 	bl	80090d8 <astronode_transport_send_receive>
 800857a:	0003      	movs	r3, r0
 800857c:	2b01      	cmp	r3, #1
 800857e:	d131      	bne.n	80085e4 <astronode_send_rtc_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RTC_RA)
 8008580:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <astronode_send_rtc_rr+0xb4>)
 8008582:	0021      	movs	r1, r4
 8008584:	185b      	adds	r3, r3, r1
 8008586:	19db      	adds	r3, r3, r7
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b97      	cmp	r3, #151	; 0x97
 800858c:	d126      	bne.n	80085dc <astronode_send_rtc_rr+0xa4>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800858e:	4b17      	ldr	r3, [pc, #92]	; (80085ec <astronode_send_rtc_rr+0xb4>)
 8008590:	185b      	adds	r3, r3, r1
 8008592:	19db      	adds	r3, r3, r7
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8008598:	4b14      	ldr	r3, [pc, #80]	; (80085ec <astronode_send_rtc_rr+0xb4>)
 800859a:	185b      	adds	r3, r3, r1
 800859c:	19db      	adds	r3, r3, r7
 800859e:	789b      	ldrb	r3, [r3, #2]
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 80085a4:	4b11      	ldr	r3, [pc, #68]	; (80085ec <astronode_send_rtc_rr+0xb4>)
 80085a6:	185b      	adds	r3, r3, r1
 80085a8:	19db      	adds	r3, r3, r7
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	041b      	lsls	r3, r3, #16
 80085ae:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 80085b0:	4b0e      	ldr	r3, [pc, #56]	; (80085ec <astronode_send_rtc_rr+0xb4>)
 80085b2:	185b      	adds	r3, r3, r1
 80085b4:	19db      	adds	r3, r3, r7
 80085b6:	791b      	ldrb	r3, [r3, #4]
 80085b8:	061b      	lsls	r3, r3, #24
 80085ba:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80085bc:	22f2      	movs	r2, #242	; 0xf2
 80085be:	0052      	lsls	r2, r2, #1
 80085c0:	18b9      	adds	r1, r7, r2
 80085c2:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 80085c4:	18bb      	adds	r3, r7, r2
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4909      	ldr	r1, [pc, #36]	; (80085f0 <astronode_send_rtc_rr+0xb8>)
 80085ca:	1d3b      	adds	r3, r7, #4
 80085cc:	0018      	movs	r0, r3
 80085ce:	f003 f9b5 	bl	800b93c <sprintf>
            send_debug_logs(str);
 80085d2:	1d3b      	adds	r3, r7, #4
 80085d4:	0018      	movs	r0, r3
 80085d6:	f7fa fbe3 	bl	8002da0 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read rtc time.");
        }
    }
}
 80085da:	e003      	b.n	80085e4 <astronode_send_rtc_rr+0xac>
            send_debug_logs("Failed to read rtc time.");
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <astronode_send_rtc_rr+0xbc>)
 80085de:	0018      	movs	r0, r3
 80085e0:	f7fa fbde 	bl	8002da0 <send_debug_logs>
}
 80085e4:	46c0      	nop			; (mov r8, r8)
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b07a      	add	sp, #488	; 0x1e8
 80085ea:	bdb0      	pop	{r4, r5, r7, pc}
 80085ec:	fffffe6c 	.word	0xfffffe6c
 80085f0:	08012eec 	.word	0x08012eec
 80085f4:	08012f2c 	.word	0x08012f2c

080085f8 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80085f8:	b5b0      	push	{r4, r5, r7, lr}
 80085fa:	b0f8      	sub	sp, #480	; 0x1e0
 80085fc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80085fe:	258c      	movs	r5, #140	; 0x8c
 8008600:	006d      	lsls	r5, r5, #1
 8008602:	197b      	adds	r3, r7, r5
 8008604:	0018      	movs	r0, r3
 8008606:	23c6      	movs	r3, #198	; 0xc6
 8008608:	001a      	movs	r2, r3
 800860a:	2100      	movs	r1, #0
 800860c:	f003 fa2c 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8008610:	4b21      	ldr	r3, [pc, #132]	; (8008698 <astronode_send_sak_rr+0xa0>)
 8008612:	24f0      	movs	r4, #240	; 0xf0
 8008614:	0064      	lsls	r4, r4, #1
 8008616:	191b      	adds	r3, r3, r4
 8008618:	19db      	adds	r3, r3, r7
 800861a:	0018      	movs	r0, r3
 800861c:	23c6      	movs	r3, #198	; 0xc6
 800861e:	001a      	movs	r2, r3
 8008620:	2100      	movs	r1, #0
 8008622:	f003 fa21 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8008626:	197b      	adds	r3, r7, r5
 8008628:	2245      	movs	r2, #69	; 0x45
 800862a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800862c:	2350      	movs	r3, #80	; 0x50
 800862e:	18fa      	adds	r2, r7, r3
 8008630:	197b      	adds	r3, r7, r5
 8008632:	0011      	movs	r1, r2
 8008634:	0018      	movs	r0, r3
 8008636:	f000 fd4f 	bl	80090d8 <astronode_transport_send_receive>
 800863a:	0003      	movs	r3, r0
 800863c:	2b01      	cmp	r3, #1
 800863e:	d126      	bne.n	800868e <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008640:	4b15      	ldr	r3, [pc, #84]	; (8008698 <astronode_send_sak_rr+0xa0>)
 8008642:	191b      	adds	r3, r3, r4
 8008644:	19db      	adds	r3, r3, r7
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2bc5      	cmp	r3, #197	; 0xc5
 800864a:	d11c      	bne.n	8008686 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 800864c:	4b12      	ldr	r3, [pc, #72]	; (8008698 <astronode_send_sak_rr+0xa0>)
 800864e:	191b      	adds	r3, r3, r4
 8008650:	19db      	adds	r3, r3, r7
 8008652:	785b      	ldrb	r3, [r3, #1]
 8008654:	b299      	uxth	r1, r3
 8008656:	4b10      	ldr	r3, [pc, #64]	; (8008698 <astronode_send_sak_rr+0xa0>)
 8008658:	191b      	adds	r3, r3, r4
 800865a:	19db      	adds	r3, r3, r7
 800865c:	789b      	ldrb	r3, [r3, #2]
 800865e:	b29b      	uxth	r3, r3
 8008660:	021b      	lsls	r3, r3, #8
 8008662:	b29a      	uxth	r2, r3
 8008664:	20ef      	movs	r0, #239	; 0xef
 8008666:	0040      	lsls	r0, r0, #1
 8008668:	183b      	adds	r3, r7, r0
 800866a:	188a      	adds	r2, r1, r2
 800866c:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 800866e:	183b      	adds	r3, r7, r0
 8008670:	881a      	ldrh	r2, [r3, #0]
 8008672:	490a      	ldr	r1, [pc, #40]	; (800869c <astronode_send_sak_rr+0xa4>)
 8008674:	003b      	movs	r3, r7
 8008676:	0018      	movs	r0, r3
 8008678:	f003 f960 	bl	800b93c <sprintf>
            send_debug_logs(str);
 800867c:	003b      	movs	r3, r7
 800867e:	0018      	movs	r0, r3
 8008680:	f7fa fb8e 	bl	8002da0 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8008684:	e003      	b.n	800868e <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8008686:	4b06      	ldr	r3, [pc, #24]	; (80086a0 <astronode_send_sak_rr+0xa8>)
 8008688:	0018      	movs	r0, r3
 800868a:	f7fa fb89 	bl	8002da0 <send_debug_logs>
}
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	46bd      	mov	sp, r7
 8008692:	b078      	add	sp, #480	; 0x1e0
 8008694:	bdb0      	pop	{r4, r5, r7, pc}
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	fffffe70 	.word	0xfffffe70
 800869c:	08012f48 	.word	0x08012f48
 80086a0:	08012f74 	.word	0x08012f74

080086a4 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 80086a4:	b5b0      	push	{r4, r5, r7, lr}
 80086a6:	b0e4      	sub	sp, #400	; 0x190
 80086a8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80086aa:	24c8      	movs	r4, #200	; 0xc8
 80086ac:	193b      	adds	r3, r7, r4
 80086ae:	0018      	movs	r0, r3
 80086b0:	23c6      	movs	r3, #198	; 0xc6
 80086b2:	001a      	movs	r2, r3
 80086b4:	2100      	movs	r1, #0
 80086b6:	f003 f9d7 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 80086ba:	4b16      	ldr	r3, [pc, #88]	; (8008714 <astronode_send_sak_cr+0x70>)
 80086bc:	25c8      	movs	r5, #200	; 0xc8
 80086be:	006d      	lsls	r5, r5, #1
 80086c0:	195b      	adds	r3, r3, r5
 80086c2:	19db      	adds	r3, r3, r7
 80086c4:	0018      	movs	r0, r3
 80086c6:	23c6      	movs	r3, #198	; 0xc6
 80086c8:	001a      	movs	r2, r3
 80086ca:	2100      	movs	r1, #0
 80086cc:	f003 f9cc 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80086d0:	193b      	adds	r3, r7, r4
 80086d2:	2246      	movs	r2, #70	; 0x46
 80086d4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80086d6:	003a      	movs	r2, r7
 80086d8:	193b      	adds	r3, r7, r4
 80086da:	0011      	movs	r1, r2
 80086dc:	0018      	movs	r0, r3
 80086de:	f000 fcfb 	bl	80090d8 <astronode_transport_send_receive>
 80086e2:	0003      	movs	r3, r0
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d111      	bne.n	800870c <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80086e8:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <astronode_send_sak_cr+0x70>)
 80086ea:	195b      	adds	r3, r3, r5
 80086ec:	19db      	adds	r3, r3, r7
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2bc6      	cmp	r3, #198	; 0xc6
 80086f2:	d107      	bne.n	8008704 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80086f4:	4b08      	ldr	r3, [pc, #32]	; (8008718 <astronode_send_sak_cr+0x74>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <astronode_send_sak_cr+0x78>)
 80086fc:	0018      	movs	r0, r3
 80086fe:	f7fa fb4f 	bl	8002da0 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8008702:	e003      	b.n	800870c <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <astronode_send_sak_cr+0x7c>)
 8008706:	0018      	movs	r0, r3
 8008708:	f7fa fb4a 	bl	8002da0 <send_debug_logs>
}
 800870c:	46c0      	nop			; (mov r8, r8)
 800870e:	46bd      	mov	sp, r7
 8008710:	b064      	add	sp, #400	; 0x190
 8008712:	bdb0      	pop	{r4, r5, r7, pc}
 8008714:	fffffe70 	.word	0xfffffe70
 8008718:	20000b38 	.word	0x20000b38
 800871c:	08012fa8 	.word	0x08012fa8
 8008720:	08012fd0 	.word	0x08012fd0

08008724 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008726:	b0ed      	sub	sp, #436	; 0x1b4
 8008728:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800872a:	21c8      	movs	r1, #200	; 0xc8
 800872c:	2318      	movs	r3, #24
 800872e:	18cb      	adds	r3, r1, r3
 8008730:	19db      	adds	r3, r3, r7
 8008732:	0018      	movs	r0, r3
 8008734:	23c6      	movs	r3, #198	; 0xc6
 8008736:	001a      	movs	r2, r3
 8008738:	2100      	movs	r1, #0
 800873a:	f003 f995 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 800873e:	4b4a      	ldr	r3, [pc, #296]	; (8008868 <astronode_send_mpn_rr+0x144>)
 8008740:	26cc      	movs	r6, #204	; 0xcc
 8008742:	0076      	lsls	r6, r6, #1
 8008744:	199b      	adds	r3, r3, r6
 8008746:	2218      	movs	r2, #24
 8008748:	4694      	mov	ip, r2
 800874a:	44bc      	add	ip, r7
 800874c:	4463      	add	r3, ip
 800874e:	0018      	movs	r0, r3
 8008750:	23c6      	movs	r3, #198	; 0xc6
 8008752:	001a      	movs	r2, r3
 8008754:	2100      	movs	r1, #0
 8008756:	f003 f987 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 800875a:	21c8      	movs	r1, #200	; 0xc8
 800875c:	2318      	movs	r3, #24
 800875e:	18cb      	adds	r3, r1, r3
 8008760:	19db      	adds	r3, r3, r7
 8008762:	221b      	movs	r2, #27
 8008764:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008766:	2318      	movs	r3, #24
 8008768:	18fa      	adds	r2, r7, r3
 800876a:	2318      	movs	r3, #24
 800876c:	18cb      	adds	r3, r1, r3
 800876e:	19db      	adds	r3, r3, r7
 8008770:	0011      	movs	r1, r2
 8008772:	0018      	movs	r0, r3
 8008774:	f000 fcb0 	bl	80090d8 <astronode_transport_send_receive>
 8008778:	0003      	movs	r3, r0
 800877a:	2b01      	cmp	r3, #1
 800877c:	d16f      	bne.n	800885e <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 800877e:	4b3a      	ldr	r3, [pc, #232]	; (8008868 <astronode_send_mpn_rr+0x144>)
 8008780:	0032      	movs	r2, r6
 8008782:	189b      	adds	r3, r3, r2
 8008784:	2118      	movs	r1, #24
 8008786:	468c      	mov	ip, r1
 8008788:	44bc      	add	ip, r7
 800878a:	4463      	add	r3, ip
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b9b      	cmp	r3, #155	; 0x9b
 8008790:	d161      	bne.n	8008856 <astronode_send_mpn_rr+0x132>
        {
 8008792:	466b      	mov	r3, sp
 8008794:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8008796:	4b34      	ldr	r3, [pc, #208]	; (8008868 <astronode_send_mpn_rr+0x144>)
 8008798:	189b      	adds	r3, r3, r2
 800879a:	2218      	movs	r2, #24
 800879c:	4694      	mov	ip, r2
 800879e:	44bc      	add	ip, r7
 80087a0:	4463      	add	r3, ip
 80087a2:	22c4      	movs	r2, #196	; 0xc4
 80087a4:	5a9b      	ldrh	r3, [r3, r2]
 80087a6:	001a      	movs	r2, r3
 80087a8:	3a01      	subs	r2, #1
 80087aa:	21ca      	movs	r1, #202	; 0xca
 80087ac:	0049      	lsls	r1, r1, #1
 80087ae:	2018      	movs	r0, #24
 80087b0:	1809      	adds	r1, r1, r0
 80087b2:	19c9      	adds	r1, r1, r7
 80087b4:	600a      	str	r2, [r1, #0]
 80087b6:	001c      	movs	r4, r3
 80087b8:	2200      	movs	r2, #0
 80087ba:	0015      	movs	r5, r2
 80087bc:	0020      	movs	r0, r4
 80087be:	0029      	movs	r1, r5
 80087c0:	0004      	movs	r4, r0
 80087c2:	0f62      	lsrs	r2, r4, #29
 80087c4:	000c      	movs	r4, r1
 80087c6:	00e4      	lsls	r4, r4, #3
 80087c8:	617c      	str	r4, [r7, #20]
 80087ca:	697c      	ldr	r4, [r7, #20]
 80087cc:	4314      	orrs	r4, r2
 80087ce:	617c      	str	r4, [r7, #20]
 80087d0:	0001      	movs	r1, r0
 80087d2:	00c9      	lsls	r1, r1, #3
 80087d4:	6139      	str	r1, [r7, #16]
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	2200      	movs	r2, #0
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	6838      	ldr	r0, [r7, #0]
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	0004      	movs	r4, r0
 80087e2:	0f62      	lsrs	r2, r4, #29
 80087e4:	000c      	movs	r4, r1
 80087e6:	00e4      	lsls	r4, r4, #3
 80087e8:	60fc      	str	r4, [r7, #12]
 80087ea:	68fc      	ldr	r4, [r7, #12]
 80087ec:	4314      	orrs	r4, r2
 80087ee:	60fc      	str	r4, [r7, #12]
 80087f0:	0001      	movs	r1, r0
 80087f2:	00ca      	lsls	r2, r1, #3
 80087f4:	60ba      	str	r2, [r7, #8]
 80087f6:	3307      	adds	r3, #7
 80087f8:	08db      	lsrs	r3, r3, #3
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	4669      	mov	r1, sp
 80087fe:	1acb      	subs	r3, r1, r3
 8008800:	469d      	mov	sp, r3
 8008802:	466b      	mov	r3, sp
 8008804:	3300      	adds	r3, #0
 8008806:	24c8      	movs	r4, #200	; 0xc8
 8008808:	0064      	lsls	r4, r4, #1
 800880a:	2218      	movs	r2, #24
 800880c:	18a2      	adds	r2, r4, r2
 800880e:	19d1      	adds	r1, r2, r7
 8008810:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8008812:	4b16      	ldr	r3, [pc, #88]	; (800886c <astronode_send_mpn_rr+0x148>)
 8008814:	0018      	movs	r0, r3
 8008816:	f7fa fac3 	bl	8002da0 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 800881a:	4b13      	ldr	r3, [pc, #76]	; (8008868 <astronode_send_mpn_rr+0x144>)
 800881c:	22cc      	movs	r2, #204	; 0xcc
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	189b      	adds	r3, r3, r2
 8008822:	2218      	movs	r2, #24
 8008824:	4694      	mov	ip, r2
 8008826:	44bc      	add	ip, r7
 8008828:	4463      	add	r3, ip
 800882a:	22c4      	movs	r2, #196	; 0xc4
 800882c:	5a9b      	ldrh	r3, [r3, r2]
 800882e:	0019      	movs	r1, r3
 8008830:	2318      	movs	r3, #24
 8008832:	18fb      	adds	r3, r7, r3
 8008834:	3301      	adds	r3, #1
 8008836:	4a0e      	ldr	r2, [pc, #56]	; (8008870 <astronode_send_mpn_rr+0x14c>)
 8008838:	2018      	movs	r0, #24
 800883a:	1820      	adds	r0, r4, r0
 800883c:	19c0      	adds	r0, r0, r7
 800883e:	6800      	ldr	r0, [r0, #0]
 8008840:	f003 f848 	bl	800b8d4 <snprintf>
            send_debug_logs(product_number);
 8008844:	2318      	movs	r3, #24
 8008846:	18e3      	adds	r3, r4, r3
 8008848:	19db      	adds	r3, r3, r7
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	0018      	movs	r0, r3
 800884e:	f7fa faa7 	bl	8002da0 <send_debug_logs>
 8008852:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008854:	e003      	b.n	800885e <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008856:	4b07      	ldr	r3, [pc, #28]	; (8008874 <astronode_send_mpn_rr+0x150>)
 8008858:	0018      	movs	r0, r3
 800885a:	f7fa faa1 	bl	8002da0 <send_debug_logs>
}
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	46bd      	mov	sp, r7
 8008862:	b06d      	add	sp, #436	; 0x1b4
 8008864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008866:	46c0      	nop			; (mov r8, r8)
 8008868:	fffffe68 	.word	0xfffffe68
 800886c:	08013098 	.word	0x08013098
 8008870:	08012bd0 	.word	0x08012bd0
 8008874:	08012c0c 	.word	0x08012c0c

08008878 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008878:	b5b0      	push	{r4, r5, r7, lr}
 800887a:	b0e4      	sub	sp, #400	; 0x190
 800887c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800887e:	24c8      	movs	r4, #200	; 0xc8
 8008880:	193b      	adds	r3, r7, r4
 8008882:	0018      	movs	r0, r3
 8008884:	23c6      	movs	r3, #198	; 0xc6
 8008886:	001a      	movs	r2, r3
 8008888:	2100      	movs	r1, #0
 800888a:	f003 f8ed 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 800888e:	4b16      	ldr	r3, [pc, #88]	; (80088e8 <astronode_send_cmd_cr+0x70>)
 8008890:	25c8      	movs	r5, #200	; 0xc8
 8008892:	006d      	lsls	r5, r5, #1
 8008894:	195b      	adds	r3, r3, r5
 8008896:	19db      	adds	r3, r3, r7
 8008898:	0018      	movs	r0, r3
 800889a:	23c6      	movs	r3, #198	; 0xc6
 800889c:	001a      	movs	r2, r3
 800889e:	2100      	movs	r1, #0
 80088a0:	f003 f8e2 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 80088a4:	193b      	adds	r3, r7, r4
 80088a6:	2248      	movs	r2, #72	; 0x48
 80088a8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80088aa:	003a      	movs	r2, r7
 80088ac:	193b      	adds	r3, r7, r4
 80088ae:	0011      	movs	r1, r2
 80088b0:	0018      	movs	r0, r3
 80088b2:	f000 fc11 	bl	80090d8 <astronode_transport_send_receive>
 80088b6:	0003      	movs	r3, r0
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d111      	bne.n	80088e0 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 80088bc:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <astronode_send_cmd_cr+0x70>)
 80088be:	195b      	adds	r3, r3, r5
 80088c0:	19db      	adds	r3, r3, r7
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2bc8      	cmp	r3, #200	; 0xc8
 80088c6:	d107      	bne.n	80088d8 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 80088c8:	4b08      	ldr	r3, [pc, #32]	; (80088ec <astronode_send_cmd_cr+0x74>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 80088ce:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <astronode_send_cmd_cr+0x78>)
 80088d0:	0018      	movs	r0, r3
 80088d2:	f7fa fa65 	bl	8002da0 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 80088d6:	e003      	b.n	80088e0 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 80088d8:	4b06      	ldr	r3, [pc, #24]	; (80088f4 <astronode_send_cmd_cr+0x7c>)
 80088da:	0018      	movs	r0, r3
 80088dc:	f7fa fa60 	bl	8002da0 <send_debug_logs>
}
 80088e0:	46c0      	nop			; (mov r8, r8)
 80088e2:	46bd      	mov	sp, r7
 80088e4:	b064      	add	sp, #400	; 0x190
 80088e6:	bdb0      	pop	{r4, r5, r7, pc}
 80088e8:	fffffe70 	.word	0xfffffe70
 80088ec:	20000b3a 	.word	0x20000b3a
 80088f0:	080134e8 	.word	0x080134e8
 80088f4:	0801350c 	.word	0x0801350c

080088f8 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 80088f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fa:	4cac      	ldr	r4, [pc, #688]	; (8008bac <astronode_send_cmd_rr+0x2b4>)
 80088fc:	44a5      	add	sp, r4
 80088fe:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008900:	218c      	movs	r1, #140	; 0x8c
 8008902:	0049      	lsls	r1, r1, #1
 8008904:	2318      	movs	r3, #24
 8008906:	18cb      	adds	r3, r1, r3
 8008908:	19db      	adds	r3, r3, r7
 800890a:	0018      	movs	r0, r3
 800890c:	23c6      	movs	r3, #198	; 0xc6
 800890e:	001a      	movs	r2, r3
 8008910:	2100      	movs	r1, #0
 8008912:	f003 f8a9 	bl	800ba68 <memset>
    astronode_app_msg_t answer = {0};
 8008916:	4ba6      	ldr	r3, [pc, #664]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 8008918:	26f8      	movs	r6, #248	; 0xf8
 800891a:	0076      	lsls	r6, r6, #1
 800891c:	199b      	adds	r3, r3, r6
 800891e:	2218      	movs	r2, #24
 8008920:	4694      	mov	ip, r2
 8008922:	44bc      	add	ip, r7
 8008924:	4463      	add	r3, ip
 8008926:	0018      	movs	r0, r3
 8008928:	23c6      	movs	r3, #198	; 0xc6
 800892a:	001a      	movs	r2, r3
 800892c:	2100      	movs	r1, #0
 800892e:	f003 f89b 	bl	800ba68 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008932:	218c      	movs	r1, #140	; 0x8c
 8008934:	0049      	lsls	r1, r1, #1
 8008936:	2318      	movs	r3, #24
 8008938:	18cb      	adds	r3, r1, r3
 800893a:	19db      	adds	r3, r3, r7
 800893c:	2247      	movs	r2, #71	; 0x47
 800893e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008940:	2350      	movs	r3, #80	; 0x50
 8008942:	2218      	movs	r2, #24
 8008944:	189b      	adds	r3, r3, r2
 8008946:	19da      	adds	r2, r3, r7
 8008948:	2318      	movs	r3, #24
 800894a:	18cb      	adds	r3, r1, r3
 800894c:	19db      	adds	r3, r3, r7
 800894e:	0011      	movs	r1, r2
 8008950:	0018      	movs	r0, r3
 8008952:	f000 fbc1 	bl	80090d8 <astronode_transport_send_receive>
 8008956:	0003      	movs	r3, r0
 8008958:	2b01      	cmp	r3, #1
 800895a:	d000      	beq.n	800895e <astronode_send_cmd_rr+0x66>
 800895c:	e121      	b.n	8008ba2 <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 800895e:	4b94      	ldr	r3, [pc, #592]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 8008960:	199b      	adds	r3, r3, r6
 8008962:	2218      	movs	r2, #24
 8008964:	4694      	mov	ip, r2
 8008966:	44bc      	add	ip, r7
 8008968:	4463      	add	r3, ip
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2bc7      	cmp	r3, #199	; 0xc7
 800896e:	d000      	beq.n	8008972 <astronode_send_cmd_rr+0x7a>
 8008970:	e113      	b.n	8008b9a <astronode_send_cmd_rr+0x2a2>
        {
 8008972:	466b      	mov	r3, sp
 8008974:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008976:	4b8f      	ldr	r3, [pc, #572]	; (8008bb4 <astronode_send_cmd_rr+0x2bc>)
 8008978:	0018      	movs	r0, r3
 800897a:	f7fa fa11 	bl	8002da0 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 800897e:	4b8c      	ldr	r3, [pc, #560]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 8008980:	21f8      	movs	r1, #248	; 0xf8
 8008982:	0049      	lsls	r1, r1, #1
 8008984:	185b      	adds	r3, r3, r1
 8008986:	2218      	movs	r2, #24
 8008988:	4694      	mov	ip, r2
 800898a:	44bc      	add	ip, r7
 800898c:	4463      	add	r3, ip
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008992:	4b87      	ldr	r3, [pc, #540]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 8008994:	185b      	adds	r3, r3, r1
 8008996:	2018      	movs	r0, #24
 8008998:	4684      	mov	ip, r0
 800899a:	44bc      	add	ip, r7
 800899c:	4463      	add	r3, ip
 800899e:	789b      	ldrb	r3, [r3, #2]
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 80089a4:	4b82      	ldr	r3, [pc, #520]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 80089a6:	185b      	adds	r3, r3, r1
 80089a8:	2018      	movs	r0, #24
 80089aa:	4684      	mov	ip, r0
 80089ac:	44bc      	add	ip, r7
 80089ae:	4463      	add	r3, ip
 80089b0:	78db      	ldrb	r3, [r3, #3]
 80089b2:	041b      	lsls	r3, r3, #16
 80089b4:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 80089b6:	4b7e      	ldr	r3, [pc, #504]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 80089b8:	185b      	adds	r3, r3, r1
 80089ba:	2118      	movs	r1, #24
 80089bc:	468c      	mov	ip, r1
 80089be:	44bc      	add	ip, r7
 80089c0:	4463      	add	r3, ip
 80089c2:	791b      	ldrb	r3, [r3, #4]
 80089c4:	061b      	lsls	r3, r3, #24
 80089c6:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80089c8:	22f4      	movs	r2, #244	; 0xf4
 80089ca:	0052      	lsls	r2, r2, #1
 80089cc:	2118      	movs	r1, #24
 80089ce:	1851      	adds	r1, r2, r1
 80089d0:	19c8      	adds	r0, r1, r7
 80089d2:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 80089d4:	2318      	movs	r3, #24
 80089d6:	18d3      	adds	r3, r2, r3
 80089d8:	19db      	adds	r3, r3, r7
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	4976      	ldr	r1, [pc, #472]	; (8008bb8 <astronode_send_cmd_rr+0x2c0>)
 80089de:	2318      	movs	r3, #24
 80089e0:	18fb      	adds	r3, r7, r3
 80089e2:	0018      	movs	r0, r3
 80089e4:	f002 ffaa 	bl	800b93c <sprintf>
            send_debug_logs(str);
 80089e8:	2318      	movs	r3, #24
 80089ea:	18fb      	adds	r3, r7, r3
 80089ec:	0018      	movs	r0, r3
 80089ee:	f7fa f9d7 	bl	8002da0 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 80089f2:	4b6f      	ldr	r3, [pc, #444]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 80089f4:	21f8      	movs	r1, #248	; 0xf8
 80089f6:	0049      	lsls	r1, r1, #1
 80089f8:	185b      	adds	r3, r3, r1
 80089fa:	2218      	movs	r2, #24
 80089fc:	4694      	mov	ip, r2
 80089fe:	44bc      	add	ip, r7
 8008a00:	4463      	add	r3, ip
 8008a02:	22c4      	movs	r2, #196	; 0xc4
 8008a04:	5a9b      	ldrh	r3, [r3, r2]
 8008a06:	2b2c      	cmp	r3, #44	; 0x2c
 8008a08:	d00e      	beq.n	8008a28 <astronode_send_cmd_rr+0x130>
 8008a0a:	4b69      	ldr	r3, [pc, #420]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 8008a0c:	185b      	adds	r3, r3, r1
 8008a0e:	2218      	movs	r2, #24
 8008a10:	4694      	mov	ip, r2
 8008a12:	44bc      	add	ip, r7
 8008a14:	4463      	add	r3, ip
 8008a16:	22c4      	movs	r2, #196	; 0xc4
 8008a18:	5a9b      	ldrh	r3, [r3, r2]
 8008a1a:	2b0c      	cmp	r3, #12
 8008a1c:	d004      	beq.n	8008a28 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008a1e:	4b67      	ldr	r3, [pc, #412]	; (8008bbc <astronode_send_cmd_rr+0x2c4>)
 8008a20:	0018      	movs	r0, r3
 8008a22:	f7fa f9bd 	bl	8002da0 <send_debug_logs>
                return;
 8008a26:	e0b6      	b.n	8008b96 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008a28:	4b61      	ldr	r3, [pc, #388]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 8008a2a:	22f8      	movs	r2, #248	; 0xf8
 8008a2c:	0052      	lsls	r2, r2, #1
 8008a2e:	189b      	adds	r3, r3, r2
 8008a30:	2218      	movs	r2, #24
 8008a32:	4694      	mov	ip, r2
 8008a34:	44bc      	add	ip, r7
 8008a36:	4463      	add	r3, ip
 8008a38:	22c4      	movs	r2, #196	; 0xc4
 8008a3a:	5a9b      	ldrh	r3, [r3, r2]
 8008a3c:	001a      	movs	r2, r3
 8008a3e:	3a01      	subs	r2, #1
 8008a40:	21f2      	movs	r1, #242	; 0xf2
 8008a42:	0049      	lsls	r1, r1, #1
 8008a44:	2018      	movs	r0, #24
 8008a46:	1809      	adds	r1, r1, r0
 8008a48:	19c9      	adds	r1, r1, r7
 8008a4a:	600a      	str	r2, [r1, #0]
 8008a4c:	001c      	movs	r4, r3
 8008a4e:	2200      	movs	r2, #0
 8008a50:	0015      	movs	r5, r2
 8008a52:	0020      	movs	r0, r4
 8008a54:	0029      	movs	r1, r5
 8008a56:	0004      	movs	r4, r0
 8008a58:	0f62      	lsrs	r2, r4, #29
 8008a5a:	000c      	movs	r4, r1
 8008a5c:	00e4      	lsls	r4, r4, #3
 8008a5e:	617c      	str	r4, [r7, #20]
 8008a60:	697c      	ldr	r4, [r7, #20]
 8008a62:	4314      	orrs	r4, r2
 8008a64:	617c      	str	r4, [r7, #20]
 8008a66:	0001      	movs	r1, r0
 8008a68:	00c9      	lsls	r1, r1, #3
 8008a6a:	6139      	str	r1, [r7, #16]
 8008a6c:	603b      	str	r3, [r7, #0]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	6838      	ldr	r0, [r7, #0]
 8008a74:	6879      	ldr	r1, [r7, #4]
 8008a76:	0004      	movs	r4, r0
 8008a78:	0f62      	lsrs	r2, r4, #29
 8008a7a:	000c      	movs	r4, r1
 8008a7c:	00e4      	lsls	r4, r4, #3
 8008a7e:	60fc      	str	r4, [r7, #12]
 8008a80:	68fc      	ldr	r4, [r7, #12]
 8008a82:	4314      	orrs	r4, r2
 8008a84:	60fc      	str	r4, [r7, #12]
 8008a86:	0001      	movs	r1, r0
 8008a88:	00ca      	lsls	r2, r1, #3
 8008a8a:	60ba      	str	r2, [r7, #8]
 8008a8c:	3307      	adds	r3, #7
 8008a8e:	08db      	lsrs	r3, r3, #3
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	4669      	mov	r1, sp
 8008a94:	1acb      	subs	r3, r1, r3
 8008a96:	469d      	mov	sp, r3
 8008a98:	466b      	mov	r3, sp
 8008a9a:	3300      	adds	r3, #0
 8008a9c:	20f0      	movs	r0, #240	; 0xf0
 8008a9e:	0040      	lsls	r0, r0, #1
 8008aa0:	2218      	movs	r2, #24
 8008aa2:	1882      	adds	r2, r0, r2
 8008aa4:	19d1      	adds	r1, r2, r7
 8008aa6:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008aa8:	4b41      	ldr	r3, [pc, #260]	; (8008bb0 <astronode_send_cmd_rr+0x2b8>)
 8008aaa:	22f8      	movs	r2, #248	; 0xf8
 8008aac:	0052      	lsls	r2, r2, #1
 8008aae:	189b      	adds	r3, r3, r2
 8008ab0:	2218      	movs	r2, #24
 8008ab2:	4694      	mov	ip, r2
 8008ab4:	44bc      	add	ip, r7
 8008ab6:	4463      	add	r3, ip
 8008ab8:	22c4      	movs	r2, #196	; 0xc4
 8008aba:	5a9b      	ldrh	r3, [r3, r2]
 8008abc:	3b03      	subs	r3, #3
 8008abe:	0019      	movs	r1, r3
 8008ac0:	2350      	movs	r3, #80	; 0x50
 8008ac2:	2218      	movs	r2, #24
 8008ac4:	189b      	adds	r3, r3, r2
 8008ac6:	19db      	adds	r3, r3, r7
 8008ac8:	3305      	adds	r3, #5
 8008aca:	4a3d      	ldr	r2, [pc, #244]	; (8008bc0 <astronode_send_cmd_rr+0x2c8>)
 8008acc:	2418      	movs	r4, #24
 8008ace:	1900      	adds	r0, r0, r4
 8008ad0:	19c0      	adds	r0, r0, r7
 8008ad2:	6800      	ldr	r0, [r0, #0]
 8008ad4:	f002 fefe 	bl	800b8d4 <snprintf>
 8008ad8:	0002      	movs	r2, r0
 8008ada:	23ef      	movs	r3, #239	; 0xef
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	2118      	movs	r1, #24
 8008ae0:	185b      	adds	r3, r3, r1
 8008ae2:	19db      	adds	r3, r3, r7
 8008ae4:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008ae6:	23f0      	movs	r3, #240	; 0xf0
 8008ae8:	33ff      	adds	r3, #255	; 0xff
 8008aea:	2218      	movs	r2, #24
 8008aec:	189b      	adds	r3, r3, r2
 8008aee:	19db      	adds	r3, r3, r7
 8008af0:	2200      	movs	r2, #0
 8008af2:	701a      	strb	r2, [r3, #0]
 8008af4:	e024      	b.n	8008b40 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008af6:	23f0      	movs	r3, #240	; 0xf0
 8008af8:	33ff      	adds	r3, #255	; 0xff
 8008afa:	2218      	movs	r2, #24
 8008afc:	189b      	adds	r3, r3, r2
 8008afe:	19db      	adds	r3, r3, r7
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	22f0      	movs	r2, #240	; 0xf0
 8008b04:	0052      	lsls	r2, r2, #1
 8008b06:	2118      	movs	r1, #24
 8008b08:	1852      	adds	r2, r2, r1
 8008b0a:	19d2      	adds	r2, r2, r7
 8008b0c:	6812      	ldr	r2, [r2, #0]
 8008b0e:	5cd3      	ldrb	r3, [r2, r3]
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	4b2c      	ldr	r3, [pc, #176]	; (8008bc4 <astronode_send_cmd_rr+0x2cc>)
 8008b14:	18d3      	adds	r3, r2, r3
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	001a      	movs	r2, r3
 8008b1a:	2397      	movs	r3, #151	; 0x97
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	d104      	bne.n	8008b2a <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008b20:	4b29      	ldr	r3, [pc, #164]	; (8008bc8 <astronode_send_cmd_rr+0x2d0>)
 8008b22:	0018      	movs	r0, r3
 8008b24:	f7fa f93c 	bl	8002da0 <send_debug_logs>
                    return;
 8008b28:	e035      	b.n	8008b96 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8008b2a:	21f0      	movs	r1, #240	; 0xf0
 8008b2c:	31ff      	adds	r1, #255	; 0xff
 8008b2e:	2318      	movs	r3, #24
 8008b30:	18cb      	adds	r3, r1, r3
 8008b32:	19db      	adds	r3, r3, r7
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	2318      	movs	r3, #24
 8008b38:	18cb      	adds	r3, r1, r3
 8008b3a:	19db      	adds	r3, r3, r7
 8008b3c:	3201      	adds	r2, #1
 8008b3e:	701a      	strb	r2, [r3, #0]
 8008b40:	23f0      	movs	r3, #240	; 0xf0
 8008b42:	33ff      	adds	r3, #255	; 0xff
 8008b44:	2218      	movs	r2, #24
 8008b46:	189b      	adds	r3, r3, r2
 8008b48:	19db      	adds	r3, r3, r7
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	22ef      	movs	r2, #239	; 0xef
 8008b50:	0052      	lsls	r2, r2, #1
 8008b52:	2118      	movs	r1, #24
 8008b54:	1852      	adds	r2, r2, r1
 8008b56:	19d2      	adds	r2, r2, r7
 8008b58:	8812      	ldrh	r2, [r2, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d8cb      	bhi.n	8008af6 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008b5e:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <astronode_send_cmd_rr+0x2d4>)
 8008b60:	0018      	movs	r0, r3
 8008b62:	f7fa f91d 	bl	8002da0 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008b66:	2350      	movs	r3, #80	; 0x50
 8008b68:	2218      	movs	r2, #24
 8008b6a:	189b      	adds	r3, r3, r2
 8008b6c:	19db      	adds	r3, r3, r7
 8008b6e:	1d5a      	adds	r2, r3, #5
 8008b70:	4917      	ldr	r1, [pc, #92]	; (8008bd0 <astronode_send_cmd_rr+0x2d8>)
 8008b72:	24f0      	movs	r4, #240	; 0xf0
 8008b74:	0064      	lsls	r4, r4, #1
 8008b76:	2318      	movs	r3, #24
 8008b78:	18e3      	adds	r3, r4, r3
 8008b7a:	19db      	adds	r3, r3, r7
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	0018      	movs	r0, r3
 8008b80:	f002 fedc 	bl	800b93c <sprintf>
            send_debug_logs(command_content);
 8008b84:	2318      	movs	r3, #24
 8008b86:	18e3      	adds	r3, r4, r3
 8008b88:	19db      	adds	r3, r3, r7
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f7fa f907 	bl	8002da0 <send_debug_logs>
 8008b92:	46b5      	mov	sp, r6
 8008b94:	e005      	b.n	8008ba2 <astronode_send_cmd_rr+0x2aa>
                return;
 8008b96:	46b5      	mov	sp, r6
 8008b98:	e003      	b.n	8008ba2 <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008b9a:	4b0e      	ldr	r3, [pc, #56]	; (8008bd4 <astronode_send_cmd_rr+0x2dc>)
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f7fa f8ff 	bl	8002da0 <send_debug_logs>
        }
    }
}
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	2383      	movs	r3, #131	; 0x83
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	449d      	add	sp, r3
 8008baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bac:	fffffdf4 	.word	0xfffffdf4
 8008bb0:	fffffe60 	.word	0xfffffe60
 8008bb4:	08013524 	.word	0x08013524
 8008bb8:	08013540 	.word	0x08013540
 8008bbc:	08013590 	.word	0x08013590
 8008bc0:	08012bd0 	.word	0x08012bd0
 8008bc4:	08013fa8 	.word	0x08013fa8
 8008bc8:	080135a4 	.word	0x080135a4
 8008bcc:	080135d0 	.word	0x080135d0
 8008bd0:	080135e8 	.word	0x080135e8
 8008bd4:	080135ec 	.word	0x080135ec

08008bd8 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <is_sak_available+0x10>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
}
 8008be0:	0018      	movs	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	20000b38 	.word	0x20000b38

08008bec <is_astronode_reset>:

bool is_astronode_reset()
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008bf0:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <is_astronode_reset+0x10>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
}
 8008bf4:	0018      	movs	r0, r3
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	20000b39 	.word	0x20000b39

08008c00 <is_command_available>:

bool is_command_available()
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <is_command_available+0x10>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
}
 8008c08:	0018      	movs	r0, r3
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	20000b3a 	.word	0x20000b3a

08008c14 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	0002      	movs	r2, r0
 8008c1c:	6039      	str	r1, [r7, #0]
 8008c1e:	1dfb      	adds	r3, r7, #7
 8008c20:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008c22:	1dfb      	adds	r3, r7, #7
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b2f      	cmp	r3, #47	; 0x2f
 8008c28:	d90b      	bls.n	8008c42 <ascii_to_value+0x2e>
 8008c2a:	1dfb      	adds	r3, r7, #7
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b39      	cmp	r3, #57	; 0x39
 8008c30:	d807      	bhi.n	8008c42 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008c32:	1dfb      	adds	r3, r7, #7
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	3b30      	subs	r3, #48	; 0x30
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	701a      	strb	r2, [r3, #0]
        return true;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e010      	b.n	8008c64 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008c42:	1dfb      	adds	r3, r7, #7
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	d90b      	bls.n	8008c62 <ascii_to_value+0x4e>
 8008c4a:	1dfb      	adds	r3, r7, #7
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b46      	cmp	r3, #70	; 0x46
 8008c50:	d807      	bhi.n	8008c62 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008c52:	1dfb      	adds	r3, r7, #7
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	3b37      	subs	r3, #55	; 0x37
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	701a      	strb	r2, [r3, #0]
        return true;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e000      	b.n	8008c64 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008c62:	2300      	movs	r3, #0
    }
}
 8008c64:	0018      	movs	r0, r3
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b002      	add	sp, #8
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008c76:	250e      	movs	r5, #14
 8008c78:	197b      	adds	r3, r7, r5
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008c7e:	197b      	adds	r3, r7, r5
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	197a      	adds	r2, r7, r5
 8008c84:	1c59      	adds	r1, r3, #1
 8008c86:	8011      	strh	r1, [r2, #0]
 8008c88:	001a      	movs	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	189b      	adds	r3, r3, r2
 8008c8e:	2202      	movs	r2, #2
 8008c90:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	260a      	movs	r6, #10
 8008c96:	19bc      	adds	r4, r7, r6
 8008c98:	4a44      	ldr	r2, [pc, #272]	; (8008dac <astronode_create_request_transport+0x140>)
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f000 fa7d 	bl	800919c <calculate_crc>
 8008ca2:	0003      	movs	r3, r0
 8008ca4:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	1c58      	adds	r0, r3, #1
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	22c4      	movs	r2, #196	; 0xc4
 8008cae:	5a99      	ldrh	r1, [r3, r2]
 8008cb0:	19bc      	adds	r4, r7, r6
 8008cb2:	19bb      	adds	r3, r7, r6
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	001a      	movs	r2, r3
 8008cb8:	f000 fa70 	bl	800919c <calculate_crc>
 8008cbc:	0003      	movs	r3, r0
 8008cbe:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008cc0:	19bb      	adds	r3, r7, r6
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	021b      	lsls	r3, r3, #8
 8008cc6:	b21a      	sxth	r2, r3
 8008cc8:	0031      	movs	r1, r6
 8008cca:	19bb      	adds	r3, r7, r6
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	0a1b      	lsrs	r3, r3, #8
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	b21b      	sxth	r3, r3
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	b21a      	sxth	r2, r3
 8008cd8:	187b      	adds	r3, r7, r1
 8008cda:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	7818      	ldrb	r0, [r3, #0]
 8008ce0:	197b      	adds	r3, r7, r5
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	18d3      	adds	r3, r2, r3
 8008ce8:	0019      	movs	r1, r3
 8008cea:	f000 fbeb 	bl	80094c4 <uint8_to_ascii_buffer>
    index += 2;
 8008cee:	197b      	adds	r3, r7, r5
 8008cf0:	197a      	adds	r2, r7, r5
 8008cf2:	8812      	ldrh	r2, [r2, #0]
 8008cf4:	3202      	adds	r2, #2
 8008cf6:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008cf8:	230c      	movs	r3, #12
 8008cfa:	18fb      	adds	r3, r7, r3
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	801a      	strh	r2, [r3, #0]
 8008d00:	e017      	b.n	8008d32 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008d02:	240c      	movs	r4, #12
 8008d04:	193b      	adds	r3, r7, r4
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	18d3      	adds	r3, r2, r3
 8008d0c:	7858      	ldrb	r0, [r3, #1]
 8008d0e:	250e      	movs	r5, #14
 8008d10:	197b      	adds	r3, r7, r5
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	18d3      	adds	r3, r2, r3
 8008d18:	0019      	movs	r1, r3
 8008d1a:	f000 fbd3 	bl	80094c4 <uint8_to_ascii_buffer>
        index += 2;
 8008d1e:	197b      	adds	r3, r7, r5
 8008d20:	197a      	adds	r2, r7, r5
 8008d22:	8812      	ldrh	r2, [r2, #0]
 8008d24:	3202      	adds	r2, #2
 8008d26:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008d28:	193b      	adds	r3, r7, r4
 8008d2a:	881a      	ldrh	r2, [r3, #0]
 8008d2c:	193b      	adds	r3, r7, r4
 8008d2e:	3201      	adds	r2, #1
 8008d30:	801a      	strh	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	22c4      	movs	r2, #196	; 0xc4
 8008d36:	5a9b      	ldrh	r3, [r3, r2]
 8008d38:	220c      	movs	r2, #12
 8008d3a:	18ba      	adds	r2, r7, r2
 8008d3c:	8812      	ldrh	r2, [r2, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d3df      	bcc.n	8008d02 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008d42:	250a      	movs	r5, #10
 8008d44:	197b      	adds	r3, r7, r5
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	0a1b      	lsrs	r3, r3, #8
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	b2d8      	uxtb	r0, r3
 8008d4e:	240e      	movs	r4, #14
 8008d50:	193b      	adds	r3, r7, r4
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	18d3      	adds	r3, r2, r3
 8008d58:	0019      	movs	r1, r3
 8008d5a:	f000 fbb3 	bl	80094c4 <uint8_to_ascii_buffer>
    index += 2;
 8008d5e:	0021      	movs	r1, r4
 8008d60:	187b      	adds	r3, r7, r1
 8008d62:	187a      	adds	r2, r7, r1
 8008d64:	8812      	ldrh	r2, [r2, #0]
 8008d66:	3202      	adds	r2, #2
 8008d68:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008d6a:	197b      	adds	r3, r7, r5
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	b2d8      	uxtb	r0, r3
 8008d70:	000c      	movs	r4, r1
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	18d3      	adds	r3, r2, r3
 8008d7a:	0019      	movs	r1, r3
 8008d7c:	f000 fba2 	bl	80094c4 <uint8_to_ascii_buffer>
    index += 2;
 8008d80:	0020      	movs	r0, r4
 8008d82:	183b      	adds	r3, r7, r0
 8008d84:	183a      	adds	r2, r7, r0
 8008d86:	8812      	ldrh	r2, [r2, #0]
 8008d88:	3202      	adds	r2, #2
 8008d8a:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008d8c:	183b      	adds	r3, r7, r0
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	183a      	adds	r2, r7, r0
 8008d92:	1c59      	adds	r1, r3, #1
 8008d94:	8011      	strh	r1, [r2, #0]
 8008d96:	001a      	movs	r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	189b      	adds	r3, r3, r2
 8008d9c:	2203      	movs	r2, #3
 8008d9e:	701a      	strb	r2, [r3, #0]

    return index;
 8008da0:	183b      	adds	r3, r7, r0
 8008da2:	881b      	ldrh	r3, [r3, #0]
}
 8008da4:	0018      	movs	r0, r3
 8008da6:	46bd      	mov	sp, r7
 8008da8:	b005      	add	sp, #20
 8008daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dac:	0000ffff 	.word	0x0000ffff

08008db0 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db2:	b089      	sub	sp, #36	; 0x24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	607a      	str	r2, [r7, #4]
 8008dba:	230a      	movs	r3, #10
 8008dbc:	18fb      	adds	r3, r7, r3
 8008dbe:	1c0a      	adds	r2, r1, #0
 8008dc0:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d005      	beq.n	8008dd6 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008dca:	4bbd      	ldr	r3, [pc, #756]	; (80090c0 <astronode_decode_answer_transport+0x310>)
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f7f9 ffe7 	bl	8002da0 <send_debug_logs>
        return RS_FAILURE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e170      	b.n	80090b8 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008dd6:	210a      	movs	r1, #10
 8008dd8:	187b      	adds	r3, r7, r1
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	4013      	ands	r3, r2
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <astronode_decode_answer_transport+0x3e>
 8008de6:	187b      	adds	r3, r7, r1
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	2b07      	cmp	r3, #7
 8008dec:	d805      	bhi.n	8008dfa <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008dee:	4bb5      	ldr	r3, [pc, #724]	; (80090c4 <astronode_decode_answer_transport+0x314>)
 8008df0:	0018      	movs	r0, r3
 8008df2:	f7f9 ffd5 	bl	8002da0 <send_debug_logs>
        return RS_FAILURE;
 8008df6:	2300      	movs	r3, #0
 8008df8:	e15e      	b.n	80090b8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008dfa:	230a      	movs	r3, #10
 8008dfc:	18fb      	adds	r3, r7, r3
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	3b08      	subs	r3, #8
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	da00      	bge.n	8008e08 <astronode_decode_answer_transport+0x58>
 8008e06:	3301      	adds	r3, #1
 8008e08:	105b      	asrs	r3, r3, #1
 8008e0a:	b299      	uxth	r1, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	22c4      	movs	r2, #196	; 0xc4
 8008e10:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008e12:	230a      	movs	r3, #10
 8008e14:	18fb      	adds	r3, r7, r3
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	18d3      	adds	r3, r2, r3
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d005      	beq.n	8008e30 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008e24:	4ba8      	ldr	r3, [pc, #672]	; (80090c8 <astronode_decode_answer_transport+0x318>)
 8008e26:	0018      	movs	r0, r3
 8008e28:	f7f9 ffba 	bl	8002da0 <send_debug_logs>
        return RS_FAILURE;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e143      	b.n	80090b8 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008e30:	2117      	movs	r1, #23
 8008e32:	187b      	adds	r3, r7, r1
 8008e34:	2200      	movs	r2, #0
 8008e36:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008e38:	2416      	movs	r4, #22
 8008e3a:	193b      	adds	r3, r7, r4
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	187a      	adds	r2, r7, r1
 8008e48:	0011      	movs	r1, r2
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	f7ff fee2 	bl	8008c14 <ascii_to_value>
 8008e50:	0003      	movs	r3, r0
 8008e52:	001a      	movs	r2, r3
 8008e54:	2301      	movs	r3, #1
 8008e56:	4053      	eors	r3, r2
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10e      	bne.n	8008e7c <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3302      	adds	r3, #2
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	193a      	adds	r2, r7, r4
 8008e66:	0011      	movs	r1, r2
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f7ff fed3 	bl	8008c14 <ascii_to_value>
 8008e6e:	0003      	movs	r3, r0
 8008e70:	001a      	movs	r2, r3
 8008e72:	2301      	movs	r3, #1
 8008e74:	4053      	eors	r3, r2
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d005      	beq.n	8008e88 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008e7c:	4b93      	ldr	r3, [pc, #588]	; (80090cc <astronode_decode_answer_transport+0x31c>)
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f7f9 ff8e 	bl	8002da0 <send_debug_logs>
        return RS_FAILURE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	e117      	b.n	80090b8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008e88:	2317      	movs	r3, #23
 8008e8a:	18fb      	adds	r3, r7, r3
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	011b      	lsls	r3, r3, #4
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	2316      	movs	r3, #22
 8008e94:	18fb      	adds	r3, r7, r3
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	18d3      	adds	r3, r2, r3
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008ea0:	231e      	movs	r3, #30
 8008ea2:	18fb      	adds	r3, r7, r3
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	801a      	strh	r2, [r3, #0]
 8008ea8:	231c      	movs	r3, #28
 8008eaa:	18fb      	adds	r3, r7, r3
 8008eac:	2200      	movs	r2, #0
 8008eae:	801a      	strh	r2, [r3, #0]
 8008eb0:	e045      	b.n	8008f3e <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008eb2:	241e      	movs	r4, #30
 8008eb4:	193b      	adds	r3, r7, r4
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	18d3      	adds	r3, r2, r3
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2217      	movs	r2, #23
 8008ec0:	18ba      	adds	r2, r7, r2
 8008ec2:	0011      	movs	r1, r2
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f7ff fea5 	bl	8008c14 <ascii_to_value>
 8008eca:	0003      	movs	r3, r0
 8008ecc:	001a      	movs	r2, r3
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4053      	eors	r3, r2
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d112      	bne.n	8008efe <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008ed8:	193b      	adds	r3, r7, r4
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	3301      	adds	r3, #1
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	18d3      	adds	r3, r2, r3
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2216      	movs	r2, #22
 8008ee6:	18ba      	adds	r2, r7, r2
 8008ee8:	0011      	movs	r1, r2
 8008eea:	0018      	movs	r0, r3
 8008eec:	f7ff fe92 	bl	8008c14 <ascii_to_value>
 8008ef0:	0003      	movs	r3, r0
 8008ef2:	001a      	movs	r2, r3
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4053      	eors	r3, r2
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d005      	beq.n	8008f0a <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008efe:	4b73      	ldr	r3, [pc, #460]	; (80090cc <astronode_decode_answer_transport+0x31c>)
 8008f00:	0018      	movs	r0, r3
 8008f02:	f7f9 ff4d 	bl	8002da0 <send_debug_logs>
            return RS_FAILURE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	e0d6      	b.n	80090b8 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008f0a:	2317      	movs	r3, #23
 8008f0c:	18fb      	adds	r3, r7, r3
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	b2d9      	uxtb	r1, r3
 8008f14:	2316      	movs	r3, #22
 8008f16:	18fb      	adds	r3, r7, r3
 8008f18:	781a      	ldrb	r2, [r3, #0]
 8008f1a:	201c      	movs	r0, #28
 8008f1c:	183b      	adds	r3, r7, r0
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	1838      	adds	r0, r7, r0
 8008f22:	1c5c      	adds	r4, r3, #1
 8008f24:	8004      	strh	r4, [r0, #0]
 8008f26:	0018      	movs	r0, r3
 8008f28:	188b      	adds	r3, r1, r2
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	181b      	adds	r3, r3, r0
 8008f30:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008f32:	221e      	movs	r2, #30
 8008f34:	18bb      	adds	r3, r7, r2
 8008f36:	18ba      	adds	r2, r7, r2
 8008f38:	8812      	ldrh	r2, [r2, #0]
 8008f3a:	3202      	adds	r2, #2
 8008f3c:	801a      	strh	r2, [r3, #0]
 8008f3e:	231e      	movs	r3, #30
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	881a      	ldrh	r2, [r3, #0]
 8008f44:	260a      	movs	r6, #10
 8008f46:	19bb      	adds	r3, r7, r6
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	3b05      	subs	r3, #5
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	dbb0      	blt.n	8008eb2 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	251a      	movs	r5, #26
 8008f54:	197c      	adds	r4, r7, r5
 8008f56:	4a5e      	ldr	r2, [pc, #376]	; (80090d0 <astronode_decode_answer_transport+0x320>)
 8008f58:	2101      	movs	r1, #1
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f000 f91e 	bl	800919c <calculate_crc>
 8008f60:	0003      	movs	r3, r0
 8008f62:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	1c58      	adds	r0, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	22c4      	movs	r2, #196	; 0xc4
 8008f6c:	5a99      	ldrh	r1, [r3, r2]
 8008f6e:	197c      	adds	r4, r7, r5
 8008f70:	197b      	adds	r3, r7, r5
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	001a      	movs	r2, r3
 8008f76:	f000 f911 	bl	800919c <calculate_crc>
 8008f7a:	0003      	movs	r3, r0
 8008f7c:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008f7e:	197b      	adds	r3, r7, r5
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	021b      	lsls	r3, r3, #8
 8008f84:	b21a      	sxth	r2, r3
 8008f86:	0029      	movs	r1, r5
 8008f88:	197b      	adds	r3, r7, r5
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	b21b      	sxth	r3, r3
 8008f92:	4313      	orrs	r3, r2
 8008f94:	b21a      	sxth	r2, r3
 8008f96:	187b      	adds	r3, r7, r1
 8008f98:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008f9a:	19bb      	adds	r3, r7, r6
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	3b05      	subs	r3, #5
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	18d3      	adds	r3, r2, r3
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2217      	movs	r2, #23
 8008fa8:	18ba      	adds	r2, r7, r2
 8008faa:	0011      	movs	r1, r2
 8008fac:	0018      	movs	r0, r3
 8008fae:	f7ff fe31 	bl	8008c14 <ascii_to_value>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	001a      	movs	r2, r3
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4053      	eors	r3, r2
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d112      	bne.n	8008fe6 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008fc0:	19bb      	adds	r3, r7, r6
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	3b04      	subs	r3, #4
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	18d3      	adds	r3, r2, r3
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2216      	movs	r2, #22
 8008fce:	18ba      	adds	r2, r7, r2
 8008fd0:	0011      	movs	r1, r2
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f7ff fe1e 	bl	8008c14 <ascii_to_value>
 8008fd8:	0003      	movs	r3, r0
 8008fda:	001a      	movs	r2, r3
 8008fdc:	2301      	movs	r3, #1
 8008fde:	4053      	eors	r3, r2
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008fe6:	4b39      	ldr	r3, [pc, #228]	; (80090cc <astronode_decode_answer_transport+0x31c>)
 8008fe8:	0018      	movs	r0, r3
 8008fea:	f7f9 fed9 	bl	8002da0 <send_debug_logs>
        return RS_FAILURE;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e062      	b.n	80090b8 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008ff2:	2017      	movs	r0, #23
 8008ff4:	183b      	adds	r3, r7, r0
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	031b      	lsls	r3, r3, #12
 8008ffc:	b299      	uxth	r1, r3
 8008ffe:	2416      	movs	r4, #22
 8009000:	193b      	adds	r3, r7, r4
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	b29a      	uxth	r2, r3
 800900a:	2318      	movs	r3, #24
 800900c:	18fb      	adds	r3, r7, r3
 800900e:	188a      	adds	r2, r1, r2
 8009010:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8009012:	250a      	movs	r5, #10
 8009014:	197b      	adds	r3, r7, r5
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	3b03      	subs	r3, #3
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	18d3      	adds	r3, r2, r3
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	183a      	adds	r2, r7, r0
 8009022:	0011      	movs	r1, r2
 8009024:	0018      	movs	r0, r3
 8009026:	f7ff fdf5 	bl	8008c14 <ascii_to_value>
 800902a:	0003      	movs	r3, r0
 800902c:	001a      	movs	r2, r3
 800902e:	2301      	movs	r3, #1
 8009030:	4053      	eors	r3, r2
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d111      	bne.n	800905c <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8009038:	197b      	adds	r3, r7, r5
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	3b02      	subs	r3, #2
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	18d3      	adds	r3, r2, r3
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	193a      	adds	r2, r7, r4
 8009046:	0011      	movs	r1, r2
 8009048:	0018      	movs	r0, r3
 800904a:	f7ff fde3 	bl	8008c14 <ascii_to_value>
 800904e:	0003      	movs	r3, r0
 8009050:	001a      	movs	r2, r3
 8009052:	2301      	movs	r3, #1
 8009054:	4053      	eors	r3, r2
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800905c:	4b1b      	ldr	r3, [pc, #108]	; (80090cc <astronode_decode_answer_transport+0x31c>)
 800905e:	0018      	movs	r0, r3
 8009060:	f7f9 fe9e 	bl	8002da0 <send_debug_logs>
        return RS_FAILURE;
 8009064:	2300      	movs	r3, #0
 8009066:	e027      	b.n	80090b8 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8009068:	2317      	movs	r3, #23
 800906a:	18fb      	adds	r3, r7, r3
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	011b      	lsls	r3, r3, #4
 8009072:	b29a      	uxth	r2, r3
 8009074:	2316      	movs	r3, #22
 8009076:	18fb      	adds	r3, r7, r3
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	b29b      	uxth	r3, r3
 800907c:	18d3      	adds	r3, r2, r3
 800907e:	b299      	uxth	r1, r3
 8009080:	2018      	movs	r0, #24
 8009082:	183b      	adds	r3, r7, r0
 8009084:	183a      	adds	r2, r7, r0
 8009086:	8812      	ldrh	r2, [r2, #0]
 8009088:	188a      	adds	r2, r1, r2
 800908a:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 800908c:	183a      	adds	r2, r7, r0
 800908e:	231a      	movs	r3, #26
 8009090:	18fb      	adds	r3, r7, r3
 8009092:	8812      	ldrh	r2, [r2, #0]
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d005      	beq.n	80090a6 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800909a:	4b0e      	ldr	r3, [pc, #56]	; (80090d4 <astronode_decode_answer_transport+0x324>)
 800909c:	0018      	movs	r0, r3
 800909e:	f7f9 fe7f 	bl	8002da0 <send_debug_logs>
        return RS_FAILURE;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e008      	b.n	80090b8 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2bff      	cmp	r3, #255	; 0xff
 80090ac:	d103      	bne.n	80090b6 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	0018      	movs	r0, r3
 80090b2:	f000 f8c3 	bl	800923c <check_for_error>
    }

    return RS_SUCCESS;
 80090b6:	2301      	movs	r3, #1
}
 80090b8:	0018      	movs	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b009      	add	sp, #36	; 0x24
 80090be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c0:	0801367c 	.word	0x0801367c
 80090c4:	080136cc 	.word	0x080136cc
 80090c8:	0801371c 	.word	0x0801371c
 80090cc:	0801376c 	.word	0x0801376c
 80090d0:	0000ffff 	.word	0x0000ffff
 80090d4:	080137b8 	.word	0x080137b8

080090d8 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80090d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090da:	4c2b      	ldr	r4, [pc, #172]	; (8009188 <astronode_transport_send_receive+0xb0>)
 80090dc:	44a5      	add	sp, r4
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80090e4:	4b29      	ldr	r3, [pc, #164]	; (800918c <astronode_transport_send_receive+0xb4>)
 80090e6:	25ca      	movs	r5, #202	; 0xca
 80090e8:	00ad      	lsls	r5, r5, #2
 80090ea:	195b      	adds	r3, r3, r5
 80090ec:	19db      	adds	r3, r3, r7
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	3304      	adds	r3, #4
 80090f4:	22c4      	movs	r2, #196	; 0xc4
 80090f6:	0052      	lsls	r2, r2, #1
 80090f8:	2100      	movs	r1, #0
 80090fa:	0018      	movs	r0, r3
 80090fc:	f002 fcb4 	bl	800ba68 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009100:	4b23      	ldr	r3, [pc, #140]	; (8009190 <astronode_transport_send_receive+0xb8>)
 8009102:	195b      	adds	r3, r3, r5
 8009104:	19db      	adds	r3, r3, r7
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	3304      	adds	r3, #4
 800910c:	22c4      	movs	r2, #196	; 0xc4
 800910e:	0052      	lsls	r2, r2, #1
 8009110:	2100      	movs	r1, #0
 8009112:	0018      	movs	r0, r3
 8009114:	f002 fca8 	bl	800ba68 <memset>
    uint16_t answer_length =  0;
 8009118:	4b1e      	ldr	r3, [pc, #120]	; (8009194 <astronode_transport_send_receive+0xbc>)
 800911a:	195b      	adds	r3, r3, r5
 800911c:	19db      	adds	r3, r3, r7
 800911e:	2200      	movs	r2, #0
 8009120:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8009122:	4e1d      	ldr	r6, [pc, #116]	; (8009198 <astronode_transport_send_receive+0xc0>)
 8009124:	19bc      	adds	r4, r7, r6
 8009126:	23cc      	movs	r3, #204	; 0xcc
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	18fa      	adds	r2, r7, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	0011      	movs	r1, r2
 8009130:	0018      	movs	r0, r3
 8009132:	f7ff fd9b 	bl	8008c6c <astronode_create_request_transport>
 8009136:	0003      	movs	r3, r0
 8009138:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800913a:	19bb      	adds	r3, r7, r6
 800913c:	881a      	ldrh	r2, [r3, #0]
 800913e:	23cc      	movs	r3, #204	; 0xcc
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	18fb      	adds	r3, r7, r3
 8009144:	0011      	movs	r1, r2
 8009146:	0018      	movs	r0, r3
 8009148:	f7f9 fe76 	bl	8002e38 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800914c:	230a      	movs	r3, #10
 800914e:	18fa      	adds	r2, r7, r3
 8009150:	240c      	movs	r4, #12
 8009152:	193b      	adds	r3, r7, r4
 8009154:	0011      	movs	r1, r2
 8009156:	0018      	movs	r0, r3
 8009158:	f000 f92c 	bl	80093b4 <receive_astronode_answer>
 800915c:	0003      	movs	r3, r0
 800915e:	2b01      	cmp	r3, #1
 8009160:	d10a      	bne.n	8009178 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8009162:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <astronode_transport_send_receive+0xbc>)
 8009164:	195b      	adds	r3, r3, r5
 8009166:	19db      	adds	r3, r3, r7
 8009168:	8819      	ldrh	r1, [r3, #0]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	193b      	adds	r3, r7, r4
 800916e:	0018      	movs	r0, r3
 8009170:	f7ff fe1e 	bl	8008db0 <astronode_decode_answer_transport>
 8009174:	0003      	movs	r3, r0
 8009176:	e000      	b.n	800917a <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009178:	2300      	movs	r3, #0
    }
}
 800917a:	0018      	movs	r0, r3
 800917c:	46bd      	mov	sp, r7
 800917e:	23cb      	movs	r3, #203	; 0xcb
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	449d      	add	sp, r3
 8009184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009186:	46c0      	nop			; (mov r8, r8)
 8009188:	fffffcd4 	.word	0xfffffcd4
 800918c:	fffffe70 	.word	0xfffffe70
 8009190:	fffffce4 	.word	0xfffffce4
 8009194:	fffffce2 	.word	0xfffffce2
 8009198:	00000326 	.word	0x00000326

0800919c <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800919c:	b590      	push	{r4, r7, lr}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	0008      	movs	r0, r1
 80091a6:	0011      	movs	r1, r2
 80091a8:	1cbb      	adds	r3, r7, #2
 80091aa:	1c02      	adds	r2, r0, #0
 80091ac:	801a      	strh	r2, [r3, #0]
 80091ae:	003b      	movs	r3, r7
 80091b0:	1c0a      	adds	r2, r1, #0
 80091b2:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 80091b4:	230e      	movs	r3, #14
 80091b6:	18fb      	adds	r3, r7, r3
 80091b8:	003a      	movs	r2, r7
 80091ba:	8812      	ldrh	r2, [r2, #0]
 80091bc:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 80091be:	e02e      	b.n	800921e <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80091c0:	240e      	movs	r4, #14
 80091c2:	193b      	adds	r3, r7, r4
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	0a1b      	lsrs	r3, r3, #8
 80091c8:	b299      	uxth	r1, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	200c      	movs	r0, #12
 80091d6:	183b      	adds	r3, r7, r0
 80091d8:	404a      	eors	r2, r1
 80091da:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80091dc:	183b      	adds	r3, r7, r0
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	091b      	lsrs	r3, r3, #4
 80091e2:	b299      	uxth	r1, r3
 80091e4:	183b      	adds	r3, r7, r0
 80091e6:	183a      	adds	r2, r7, r0
 80091e8:	8812      	ldrh	r2, [r2, #0]
 80091ea:	404a      	eors	r2, r1
 80091ec:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80091ee:	0021      	movs	r1, r4
 80091f0:	187b      	adds	r3, r7, r1
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	b21a      	sxth	r2, r3
 80091f8:	183b      	adds	r3, r7, r0
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	031b      	lsls	r3, r3, #12
 80091fe:	b21b      	sxth	r3, r3
 8009200:	4053      	eors	r3, r2
 8009202:	b21a      	sxth	r2, r3
 8009204:	183b      	adds	r3, r7, r0
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	015b      	lsls	r3, r3, #5
 800920a:	b21b      	sxth	r3, r3
 800920c:	4053      	eors	r3, r2
 800920e:	b21a      	sxth	r2, r3
 8009210:	183b      	adds	r3, r7, r0
 8009212:	2000      	movs	r0, #0
 8009214:	5e1b      	ldrsh	r3, [r3, r0]
 8009216:	4053      	eors	r3, r2
 8009218:	b21a      	sxth	r2, r3
 800921a:	187b      	adds	r3, r7, r1
 800921c:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800921e:	1cbb      	adds	r3, r7, #2
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	1cba      	adds	r2, r7, #2
 8009224:	1e59      	subs	r1, r3, #1
 8009226:	8011      	strh	r1, [r2, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1c9      	bne.n	80091c0 <calculate_crc+0x24>
    }
    return crc;
 800922c:	230e      	movs	r3, #14
 800922e:	18fb      	adds	r3, r7, r3
 8009230:	881b      	ldrh	r3, [r3, #0]
}
 8009232:	0018      	movs	r0, r3
 8009234:	46bd      	mov	sp, r7
 8009236:	b005      	add	sp, #20
 8009238:	bd90      	pop	{r4, r7, pc}
	...

0800923c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	785b      	ldrb	r3, [r3, #1]
 8009248:	b299      	uxth	r1, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	789b      	ldrb	r3, [r3, #2]
 800924e:	b29b      	uxth	r3, r3
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	b29a      	uxth	r2, r3
 8009254:	200e      	movs	r0, #14
 8009256:	183b      	adds	r3, r7, r0
 8009258:	188a      	adds	r2, r1, r2
 800925a:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800925c:	183b      	adds	r3, r7, r0
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	4a40      	ldr	r2, [pc, #256]	; (8009364 <check_for_error+0x128>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d100      	bne.n	8009268 <check_for_error+0x2c>
 8009266:	e06f      	b.n	8009348 <check_for_error+0x10c>
 8009268:	4a3e      	ldr	r2, [pc, #248]	; (8009364 <check_for_error+0x128>)
 800926a:	4293      	cmp	r3, r2
 800926c:	dd00      	ble.n	8009270 <check_for_error+0x34>
 800926e:	e070      	b.n	8009352 <check_for_error+0x116>
 8009270:	4a3d      	ldr	r2, [pc, #244]	; (8009368 <check_for_error+0x12c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d100      	bne.n	8009278 <check_for_error+0x3c>
 8009276:	e062      	b.n	800933e <check_for_error+0x102>
 8009278:	4a3b      	ldr	r2, [pc, #236]	; (8009368 <check_for_error+0x12c>)
 800927a:	4293      	cmp	r3, r2
 800927c:	dd00      	ble.n	8009280 <check_for_error+0x44>
 800927e:	e068      	b.n	8009352 <check_for_error+0x116>
 8009280:	4a3a      	ldr	r2, [pc, #232]	; (800936c <check_for_error+0x130>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d056      	beq.n	8009334 <check_for_error+0xf8>
 8009286:	4a39      	ldr	r2, [pc, #228]	; (800936c <check_for_error+0x130>)
 8009288:	4293      	cmp	r3, r2
 800928a:	dd00      	ble.n	800928e <check_for_error+0x52>
 800928c:	e061      	b.n	8009352 <check_for_error+0x116>
 800928e:	4a38      	ldr	r2, [pc, #224]	; (8009370 <check_for_error+0x134>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d04a      	beq.n	800932a <check_for_error+0xee>
 8009294:	4a36      	ldr	r2, [pc, #216]	; (8009370 <check_for_error+0x134>)
 8009296:	4293      	cmp	r3, r2
 8009298:	dc5b      	bgt.n	8009352 <check_for_error+0x116>
 800929a:	4a36      	ldr	r2, [pc, #216]	; (8009374 <check_for_error+0x138>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d03f      	beq.n	8009320 <check_for_error+0xe4>
 80092a0:	4a34      	ldr	r2, [pc, #208]	; (8009374 <check_for_error+0x138>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	dc55      	bgt.n	8009352 <check_for_error+0x116>
 80092a6:	4a34      	ldr	r2, [pc, #208]	; (8009378 <check_for_error+0x13c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d034      	beq.n	8009316 <check_for_error+0xda>
 80092ac:	4a32      	ldr	r2, [pc, #200]	; (8009378 <check_for_error+0x13c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	dc4f      	bgt.n	8009352 <check_for_error+0x116>
 80092b2:	4a32      	ldr	r2, [pc, #200]	; (800937c <check_for_error+0x140>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d029      	beq.n	800930c <check_for_error+0xd0>
 80092b8:	4a30      	ldr	r2, [pc, #192]	; (800937c <check_for_error+0x140>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	dc49      	bgt.n	8009352 <check_for_error+0x116>
 80092be:	4a30      	ldr	r2, [pc, #192]	; (8009380 <check_for_error+0x144>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d01e      	beq.n	8009302 <check_for_error+0xc6>
 80092c4:	4a2e      	ldr	r2, [pc, #184]	; (8009380 <check_for_error+0x144>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	dc43      	bgt.n	8009352 <check_for_error+0x116>
 80092ca:	2222      	movs	r2, #34	; 0x22
 80092cc:	32ff      	adds	r2, #255	; 0xff
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d012      	beq.n	80092f8 <check_for_error+0xbc>
 80092d2:	2291      	movs	r2, #145	; 0x91
 80092d4:	0052      	lsls	r2, r2, #1
 80092d6:	4293      	cmp	r3, r2
 80092d8:	da3b      	bge.n	8009352 <check_for_error+0x116>
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d002      	beq.n	80092e4 <check_for_error+0xa8>
 80092de:	2b11      	cmp	r3, #17
 80092e0:	d005      	beq.n	80092ee <check_for_error+0xb2>
 80092e2:	e036      	b.n	8009352 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80092e4:	4b27      	ldr	r3, [pc, #156]	; (8009384 <check_for_error+0x148>)
 80092e6:	0018      	movs	r0, r3
 80092e8:	f7f9 fd5a 	bl	8002da0 <send_debug_logs>
            break;
 80092ec:	e036      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80092ee:	4b26      	ldr	r3, [pc, #152]	; (8009388 <check_for_error+0x14c>)
 80092f0:	0018      	movs	r0, r3
 80092f2:	f7f9 fd55 	bl	8002da0 <send_debug_logs>
            break;
 80092f6:	e031      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80092f8:	4b24      	ldr	r3, [pc, #144]	; (800938c <check_for_error+0x150>)
 80092fa:	0018      	movs	r0, r3
 80092fc:	f7f9 fd50 	bl	8002da0 <send_debug_logs>
            break;
 8009300:	e02c      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8009302:	4b23      	ldr	r3, [pc, #140]	; (8009390 <check_for_error+0x154>)
 8009304:	0018      	movs	r0, r3
 8009306:	f7f9 fd4b 	bl	8002da0 <send_debug_logs>
            break;
 800930a:	e027      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800930c:	4b21      	ldr	r3, [pc, #132]	; (8009394 <check_for_error+0x158>)
 800930e:	0018      	movs	r0, r3
 8009310:	f7f9 fd46 	bl	8002da0 <send_debug_logs>
            break;
 8009314:	e022      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8009316:	4b20      	ldr	r3, [pc, #128]	; (8009398 <check_for_error+0x15c>)
 8009318:	0018      	movs	r0, r3
 800931a:	f7f9 fd41 	bl	8002da0 <send_debug_logs>
            break;
 800931e:	e01d      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8009320:	4b1e      	ldr	r3, [pc, #120]	; (800939c <check_for_error+0x160>)
 8009322:	0018      	movs	r0, r3
 8009324:	f7f9 fd3c 	bl	8002da0 <send_debug_logs>
            break;
 8009328:	e018      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800932a:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <check_for_error+0x164>)
 800932c:	0018      	movs	r0, r3
 800932e:	f7f9 fd37 	bl	8002da0 <send_debug_logs>
            break;
 8009332:	e013      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8009334:	4b1b      	ldr	r3, [pc, #108]	; (80093a4 <check_for_error+0x168>)
 8009336:	0018      	movs	r0, r3
 8009338:	f7f9 fd32 	bl	8002da0 <send_debug_logs>
            break;
 800933c:	e00e      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800933e:	4b1a      	ldr	r3, [pc, #104]	; (80093a8 <check_for_error+0x16c>)
 8009340:	0018      	movs	r0, r3
 8009342:	f7f9 fd2d 	bl	8002da0 <send_debug_logs>
            break;
 8009346:	e009      	b.n	800935c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8009348:	4b18      	ldr	r3, [pc, #96]	; (80093ac <check_for_error+0x170>)
 800934a:	0018      	movs	r0, r3
 800934c:	f7f9 fd28 	bl	8002da0 <send_debug_logs>
            break;
 8009350:	e004      	b.n	800935c <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8009352:	4b17      	ldr	r3, [pc, #92]	; (80093b0 <check_for_error+0x174>)
 8009354:	0018      	movs	r0, r3
 8009356:	f7f9 fd23 	bl	8002da0 <send_debug_logs>
            break;
 800935a:	46c0      	nop			; (mov r8, r8)
    }
}
 800935c:	46c0      	nop			; (mov r8, r8)
 800935e:	46bd      	mov	sp, r7
 8009360:	b004      	add	sp, #16
 8009362:	bd80      	pop	{r7, pc}
 8009364:	00004601 	.word	0x00004601
 8009368:	00004501 	.word	0x00004501
 800936c:	00003501 	.word	0x00003501
 8009370:	00002601 	.word	0x00002601
 8009374:	00002511 	.word	0x00002511
 8009378:	00002501 	.word	0x00002501
 800937c:	00000611 	.word	0x00000611
 8009380:	00000601 	.word	0x00000601
 8009384:	080137fc 	.word	0x080137fc
 8009388:	08013848 	.word	0x08013848
 800938c:	080138ac 	.word	0x080138ac
 8009390:	080138e4 	.word	0x080138e4
 8009394:	08013988 	.word	0x08013988
 8009398:	080139f0 	.word	0x080139f0
 800939c:	08013a50 	.word	0x08013a50
 80093a0:	08013adc 	.word	0x08013adc
 80093a4:	08013b3c 	.word	0x08013b3c
 80093a8:	08013be8 	.word	0x08013be8
 80093ac:	08013c34 	.word	0x08013c34
 80093b0:	08013c7c 	.word	0x08013c7c

080093b4 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 80093b4:	b5b0      	push	{r4, r5, r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 80093be:	230f      	movs	r3, #15
 80093c0:	18fb      	adds	r3, r7, r3
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 80093c6:	2316      	movs	r3, #22
 80093c8:	18fb      	adds	r3, r7, r3
 80093ca:	2200      	movs	r2, #0
 80093cc:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80093ce:	f7f9 fd77 	bl	8002ec0 <get_systick>
 80093d2:	0003      	movs	r3, r0
 80093d4:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80093d6:	2315      	movs	r3, #21
 80093d8:	18fb      	adds	r3, r7, r3
 80093da:	2200      	movs	r2, #0
 80093dc:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80093de:	e054      	b.n	800948a <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80093e0:	4a34      	ldr	r2, [pc, #208]	; (80094b4 <receive_astronode_answer+0x100>)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	0011      	movs	r1, r2
 80093e6:	0018      	movs	r0, r3
 80093e8:	f7f9 fd72 	bl	8002ed0 <is_systick_timeout_over>
 80093ec:	1e03      	subs	r3, r0, #0
 80093ee:	d005      	beq.n	80093fc <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80093f0:	4b31      	ldr	r3, [pc, #196]	; (80094b8 <receive_astronode_answer+0x104>)
 80093f2:	0018      	movs	r0, r3
 80093f4:	f7f9 fcd4 	bl	8002da0 <send_debug_logs>
            return RS_FAILURE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	e057      	b.n	80094ac <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80093fc:	250f      	movs	r5, #15
 80093fe:	197b      	adds	r3, r7, r5
 8009400:	0018      	movs	r0, r3
 8009402:	f7f9 fd37 	bl	8002e74 <is_astronode_character_received>
 8009406:	0003      	movs	r3, r0
 8009408:	0019      	movs	r1, r3
 800940a:	2016      	movs	r0, #22
 800940c:	183b      	adds	r3, r7, r0
 800940e:	183a      	adds	r2, r7, r0
 8009410:	8812      	ldrh	r2, [r2, #0]
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	2415      	movs	r4, #21
 8009416:	193b      	adds	r3, r7, r4
 8009418:	193a      	adds	r2, r7, r4
 800941a:	7812      	ldrb	r2, [r2, #0]
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	2900      	cmp	r1, #0
 8009420:	d033      	beq.n	800948a <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8009422:	197b      	adds	r3, r7, r5
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b02      	cmp	r3, #2
 8009428:	d105      	bne.n	8009436 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800942a:	193b      	adds	r3, r7, r4
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]
                length = 0;
 8009430:	183b      	adds	r3, r7, r0
 8009432:	2200      	movs	r2, #0
 8009434:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8009436:	2116      	movs	r1, #22
 8009438:	187b      	adds	r3, r7, r1
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	18d3      	adds	r3, r2, r3
 8009440:	220f      	movs	r2, #15
 8009442:	18ba      	adds	r2, r7, r2
 8009444:	7812      	ldrb	r2, [r2, #0]
 8009446:	701a      	strb	r2, [r3, #0]
            length++;
 8009448:	187b      	adds	r3, r7, r1
 800944a:	881a      	ldrh	r2, [r3, #0]
 800944c:	187b      	adds	r3, r7, r1
 800944e:	3201      	adds	r2, #1
 8009450:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8009452:	187b      	adds	r3, r7, r1
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	2bb2      	cmp	r3, #178	; 0xb2
 8009458:	d905      	bls.n	8009466 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800945a:	4b18      	ldr	r3, [pc, #96]	; (80094bc <receive_astronode_answer+0x108>)
 800945c:	0018      	movs	r0, r3
 800945e:	f7f9 fc9f 	bl	8002da0 <send_debug_logs>
                return RS_FAILURE;
 8009462:	2300      	movs	r3, #0
 8009464:	e022      	b.n	80094ac <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8009466:	230f      	movs	r3, #15
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b03      	cmp	r3, #3
 800946e:	d10c      	bne.n	800948a <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8009470:	2216      	movs	r2, #22
 8009472:	18bb      	adds	r3, r7, r2
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d907      	bls.n	800948a <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	18ba      	adds	r2, r7, r2
 800947e:	8812      	ldrh	r2, [r2, #0]
 8009480:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8009482:	2315      	movs	r3, #21
 8009484:	18fb      	adds	r3, r7, r3
 8009486:	2201      	movs	r2, #1
 8009488:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800948a:	2315      	movs	r3, #21
 800948c:	18fb      	adds	r3, r7, r3
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2201      	movs	r2, #1
 8009492:	4053      	eors	r3, r2
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1a2      	bne.n	80093e0 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800949a:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <receive_astronode_answer+0x10c>)
 800949c:	0018      	movs	r0, r3
 800949e:	f7f9 fc7f 	bl	8002da0 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	0018      	movs	r0, r3
 80094a6:	f7f9 fc7b 	bl	8002da0 <send_debug_logs>

    return RS_SUCCESS;
 80094aa:	2301      	movs	r3, #1
}
 80094ac:	0018      	movs	r0, r3
 80094ae:	46bd      	mov	sp, r7
 80094b0:	b006      	add	sp, #24
 80094b2:	bdb0      	pop	{r4, r5, r7, pc}
 80094b4:	000005dc 	.word	0x000005dc
 80094b8:	08013ca0 	.word	0x08013ca0
 80094bc:	08013cc4 	.word	0x08013cc4
 80094c0:	08013d10 	.word	0x08013d10

080094c4 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	0002      	movs	r2, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	1dfb      	adds	r3, r7, #7
 80094d0:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 80094d2:	1dfb      	adds	r3, r7, #7
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	091b      	lsrs	r3, r3, #4
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	001a      	movs	r2, r3
 80094dc:	4b08      	ldr	r3, [pc, #32]	; (8009500 <uint8_to_ascii_buffer+0x3c>)
 80094de:	5c9a      	ldrb	r2, [r3, r2]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80094e4:	1dfb      	adds	r3, r7, #7
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	220f      	movs	r2, #15
 80094ea:	401a      	ands	r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	4903      	ldr	r1, [pc, #12]	; (8009500 <uint8_to_ascii_buffer+0x3c>)
 80094f2:	5c8a      	ldrb	r2, [r1, r2]
 80094f4:	701a      	strb	r2, [r3, #0]
}
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	46bd      	mov	sp, r7
 80094fa:	b002      	add	sp, #8
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	46c0      	nop			; (mov r8, r8)
 8009500:	08013f40 	.word	0x08013f40

08009504 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8009504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	0008      	movs	r0, r1
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	0019      	movs	r1, r3
 8009512:	260b      	movs	r6, #11
 8009514:	19bb      	adds	r3, r7, r6
 8009516:	1c02      	adds	r2, r0, #0
 8009518:	701a      	strb	r2, [r3, #0]
 800951a:	2508      	movs	r5, #8
 800951c:	197b      	adds	r3, r7, r5
 800951e:	1c0a      	adds	r2, r1, #0
 8009520:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	685c      	ldr	r4, [r3, #4]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68d8      	ldr	r0, [r3, #12]
 800952a:	197b      	adds	r3, r7, r5
 800952c:	881d      	ldrh	r5, [r3, #0]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	19bb      	adds	r3, r7, r6
 8009532:	7819      	ldrb	r1, [r3, #0]
 8009534:	002b      	movs	r3, r5
 8009536:	47a0      	blx	r4
 8009538:	0003      	movs	r3, r0
 800953a:	617b      	str	r3, [r7, #20]

  return ret;
 800953c:	697b      	ldr	r3, [r7, #20]
}
 800953e:	0018      	movs	r0, r3
 8009540:	46bd      	mov	sp, r7
 8009542:	b007      	add	sp, #28
 8009544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009546 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	2301      	movs	r3, #1
 8009556:	210f      	movs	r1, #15
 8009558:	f7ff ffd4 	bl	8009504 <lis2dw12_read_reg>
 800955c:	0003      	movs	r3, r0
 800955e:	60fb      	str	r3, [r7, #12]

  return ret;
 8009560:	68fb      	ldr	r3, [r7, #12]
}
 8009562:	0018      	movs	r0, r3
 8009564:	46bd      	mov	sp, r7
 8009566:	b004      	add	sp, #16
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ( void )
{
 800956c:	b590      	push	{r4, r7, lr}
 800956e:	b087      	sub	sp, #28
 8009570:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009572:	1dfb      	adds	r3, r7, #7
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8009578:	4b24      	ldr	r3, [pc, #144]	; (800960c <my_astro_init+0xa0>)
 800957a:	2200      	movs	r2, #0
 800957c:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 800957e:	4b24      	ldr	r3, [pc, #144]	; (8009610 <my_astro_init+0xa4>)
 8009580:	0018      	movs	r0, r3
 8009582:	f7fd f849 	bl	8006618 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009586:	e01a      	b.n	80095be <my_astro_init+0x52>
	{
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 8009588:	1dfc      	adds	r4, r7, #7
 800958a:	2300      	movs	r3, #0
 800958c:	9303      	str	r3, [sp, #12]
 800958e:	2301      	movs	r3, #1
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	2301      	movs	r3, #1
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	2301      	movs	r3, #1
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	2300      	movs	r3, #0
 800959c:	2201      	movs	r2, #1
 800959e:	2101      	movs	r1, #1
 80095a0:	2001      	movs	r0, #1
 80095a2:	f7fe fb09 	bl	8007bb8 <astronode_send_cfg_wr>
 80095a6:	0003      	movs	r3, r0
 80095a8:	7023      	strb	r3, [r4, #0]
		my_astro_off () ;
 80095aa:	f7f9 fccf 	bl	8002f4c <my_astro_off>
		HAL_Delay ( 3000 ) ;
 80095ae:	4b19      	ldr	r3, [pc, #100]	; (8009614 <my_astro_init+0xa8>)
 80095b0:	0018      	movs	r0, r3
 80095b2:	f7fa f981 	bl	80038b8 <HAL_Delay>
		my_astro_on () ;
 80095b6:	f7f9 fca1 	bl	8002efc <my_astro_on>
		reset_astronode () ;
 80095ba:	f7f9 fc21 	bl	8002e00 <reset_astronode>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <my_astro_init+0xa0>)
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	2b3b      	cmp	r3, #59	; 0x3b
 80095c4:	d806      	bhi.n	80095d4 <my_astro_init+0x68>
 80095c6:	1dfb      	adds	r3, r7, #7
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	2201      	movs	r2, #1
 80095cc:	4053      	eors	r3, r2
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1d9      	bne.n	8009588 <my_astro_init+0x1c>
	}
	tim_seconds = 0 ;
 80095d4:	4b0d      	ldr	r3, [pc, #52]	; (800960c <my_astro_init+0xa0>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 80095da:	4b0d      	ldr	r3, [pc, #52]	; (8009610 <my_astro_init+0xa4>)
 80095dc:	0018      	movs	r0, r3
 80095de:	f7fd f877 	bl	80066d0 <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 80095e2:	1dfb      	adds	r3, r7, #7
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <my_astro_init+0x96>
	{
		astronode_send_cfg_sr () ;
 80095ea:	f7fe faad 	bl	8007b48 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80095ee:	f7ff f899 	bl	8008724 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80095f2:	f7fe fc37 	bl	8007e64 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80095f6:	f7fe fb8b 	bl	8007d10 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80095fa:	f7fe ff21 	bl	8008440 <astronode_send_pld_fr>
		return true ;
 80095fe:	2301      	movs	r3, #1
 8009600:	e000      	b.n	8009604 <my_astro_init+0x98>
	}
	else
	{
		return false ;
 8009602:	2300      	movs	r3, #0
	}
}
 8009604:	0018      	movs	r0, r3
 8009606:	46bd      	mov	sp, r7
 8009608:	b003      	add	sp, #12
 800960a:	bd90      	pop	{r4, r7, pc}
 800960c:	200009b6 	.word	0x200009b6
 8009610:	2000078c 	.word	0x2000078c
 8009614:	00000bb8 	.word	0x00000bb8

08009618 <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( char* payload )
{
 8009618:	b590      	push	{r4, r7, lr}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
	uint16_t id = 0 ;
 8009620:	240e      	movs	r4, #14
 8009622:	193b      	adds	r3, r7, r4
 8009624:	2200      	movs	r2, #0
 8009626:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	0018      	movs	r0, r3
 800962c:	f7f6 fd6a 	bl	8000104 <strlen>
 8009630:	0003      	movs	r3, r0
 8009632:	60bb      	str	r3, [r7, #8]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2ba0      	cmp	r3, #160	; 0xa0
 8009638:	d80b      	bhi.n	8009652 <my_astro_add_payload_2_queue+0x3a>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	b29a      	uxth	r2, r3
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	193b      	adds	r3, r7, r4
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	0018      	movs	r0, r3
 8009646:	f7fe fe57 	bl	80082f8 <astronode_send_pld_er>
 800964a:	1e03      	subs	r3, r0, #0
 800964c:	d005      	beq.n	800965a <my_astro_add_payload_2_queue+0x42>
		{
			return true ;
 800964e:	2301      	movs	r3, #1
 8009650:	e004      	b.n	800965c <my_astro_add_payload_2_queue+0x44>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009652:	4b04      	ldr	r3, [pc, #16]	; (8009664 <my_astro_add_payload_2_queue+0x4c>)
 8009654:	0018      	movs	r0, r3
 8009656:	f7f9 fba3 	bl	8002da0 <send_debug_logs>
	}
	return false ;
 800965a:	2300      	movs	r3, #0
}
 800965c:	0018      	movs	r0, r3
 800965e:	46bd      	mov	sp, r7
 8009660:	b005      	add	sp, #20
 8009662:	bd90      	pop	{r4, r7, pc}
 8009664:	08013d3c 	.word	0x08013d3c

08009668 <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 800966c:	4b15      	ldr	r3, [pc, #84]	; (80096c4 <my_astro_read_evt_reg+0x5c>)
 800966e:	0018      	movs	r0, r3
 8009670:	f7f9 fb96 	bl	8002da0 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009674:	f7fe fd00 	bl	8008078 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009678:	f7ff faae 	bl	8008bd8 <is_sak_available>
 800967c:	1e03      	subs	r3, r0, #0
 800967e:	d007      	beq.n	8009690 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8009680:	f7fe ffba 	bl	80085f8 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009684:	f7ff f80e 	bl	80086a4 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8009688:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <my_astro_read_evt_reg+0x60>)
 800968a:	0018      	movs	r0, r3
 800968c:	f7f9 fb88 	bl	8002da0 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009690:	f7ff faac 	bl	8008bec <is_astronode_reset>
 8009694:	1e03      	subs	r3, r0, #0
 8009696:	d005      	beq.n	80096a4 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8009698:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <my_astro_read_evt_reg+0x64>)
 800969a:	0018      	movs	r0, r3
 800969c:	f7f9 fb80 	bl	8002da0 <send_debug_logs>
	  astronode_send_res_cr () ;
 80096a0:	f7fe ff0a 	bl	80084b8 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 80096a4:	f7ff faac 	bl	8008c00 <is_command_available>
 80096a8:	1e03      	subs	r3, r0, #0
 80096aa:	d007      	beq.n	80096bc <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 80096ac:	4b08      	ldr	r3, [pc, #32]	; (80096d0 <my_astro_read_evt_reg+0x68>)
 80096ae:	0018      	movs	r0, r3
 80096b0:	f7f9 fb76 	bl	8002da0 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 80096b4:	f7ff f920 	bl	80088f8 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 80096b8:	f7ff f8de 	bl	8008878 <astronode_send_cmd_cr>
	}
	return true ;
 80096bc:	2301      	movs	r3, #1
}
 80096be:	0018      	movs	r0, r3
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	08013d80 	.word	0x08013d80
 80096c8:	08013d9c 	.word	0x08013d9c
 80096cc:	08013dc8 	.word	0x08013dc8
 80096d0:	08013dec 	.word	0x08013dec

080096d4 <my_astro_log>:
bool my_astro_log ( void )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 80096d8:	f7fe ff2e 	bl	8008538 <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 80096dc:	f7fe fc6c 	bl	8007fb8 <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 80096e0:	2301      	movs	r3, #1
}
 80096e2:	0018      	movs	r0, r3
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	0011      	movs	r1, r2
 80096f8:	0018      	movs	r0, r3
 80096fa:	f7fe fd3d 	bl	8008178 <astronode_send_geo_wr>
}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	46bd      	mov	sp, r7
 8009702:	b002      	add	sp, #8
 8009704:	bd80      	pop	{r7, pc}
	...

08009708 <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 8009708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800970a:	4cde      	ldr	r4, [pc, #888]	; (8009a84 <my_lx6_get_coordinates+0x37c>)
 800970c:	44a5      	add	sp, r4
 800970e:	af02      	add	r7, sp, #8
 8009710:	0001      	movs	r1, r0
 8009712:	603a      	str	r2, [r7, #0]
 8009714:	607b      	str	r3, [r7, #4]
 8009716:	4bdc      	ldr	r3, [pc, #880]	; (8009a88 <my_lx6_get_coordinates+0x380>)
 8009718:	20da      	movs	r0, #218	; 0xda
 800971a:	0080      	lsls	r0, r0, #2
 800971c:	181b      	adds	r3, r3, r0
 800971e:	19db      	adds	r3, r3, r7
 8009720:	1c0a      	adds	r2, r1, #0
 8009722:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 8009724:	4bd9      	ldr	r3, [pc, #868]	; (8009a8c <my_lx6_get_coordinates+0x384>)
 8009726:	18fb      	adds	r3, r7, r3
 8009728:	2200      	movs	r2, #0
 800972a:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 800972c:	4bd8      	ldr	r3, [pc, #864]	; (8009a90 <my_lx6_get_coordinates+0x388>)
 800972e:	18fb      	adds	r3, r7, r3
 8009730:	2200      	movs	r2, #0
 8009732:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009734:	4bd7      	ldr	r3, [pc, #860]	; (8009a94 <my_lx6_get_coordinates+0x38c>)
 8009736:	0004      	movs	r4, r0
 8009738:	191b      	adds	r3, r3, r4
 800973a:	19db      	adds	r3, r3, r7
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	3304      	adds	r3, #4
 8009742:	22f6      	movs	r2, #246	; 0xf6
 8009744:	2100      	movs	r1, #0
 8009746:	0018      	movs	r0, r3
 8009748:	f002 f98e 	bl	800ba68 <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 800974c:	4bd2      	ldr	r3, [pc, #840]	; (8009a98 <my_lx6_get_coordinates+0x390>)
 800974e:	191b      	adds	r3, r3, r4
 8009750:	19db      	adds	r3, r3, r7
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	3304      	adds	r3, #4
 8009758:	22f6      	movs	r2, #246	; 0xf6
 800975a:	2100      	movs	r1, #0
 800975c:	0018      	movs	r0, r3
 800975e:	f002 f983 	bl	800ba68 <memset>
	uint8_t		rmc_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009762:	4bce      	ldr	r3, [pc, #824]	; (8009a9c <my_lx6_get_coordinates+0x394>)
 8009764:	191b      	adds	r3, r3, r4
 8009766:	19db      	adds	r3, r3, r7
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	3304      	adds	r3, #4
 800976e:	22f6      	movs	r2, #246	; 0xf6
 8009770:	2100      	movs	r1, #0
 8009772:	0018      	movs	r0, r3
 8009774:	f002 f978 	bl	800ba68 <memset>
	uint8_t		i_nmea = 0 ;
 8009778:	4bc9      	ldr	r3, [pc, #804]	; (8009aa0 <my_lx6_get_coordinates+0x398>)
 800977a:	0021      	movs	r1, r4
 800977c:	185b      	adds	r3, r3, r1
 800977e:	19db      	adds	r3, r3, r7
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009784:	4bc7      	ldr	r3, [pc, #796]	; (8009aa4 <my_lx6_get_coordinates+0x39c>)
 8009786:	18fb      	adds	r3, r7, r3
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 800978c:	4bc6      	ldr	r3, [pc, #792]	; (8009aa8 <my_lx6_get_coordinates+0x3a0>)
 800978e:	000c      	movs	r4, r1
 8009790:	185b      	adds	r3, r3, r1
 8009792:	19db      	adds	r3, r3, r7
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	3304      	adds	r3, #4
 800979a:	2208      	movs	r2, #8
 800979c:	2100      	movs	r1, #0
 800979e:	0018      	movs	r0, r3
 80097a0:	f002 f962 	bl	800ba68 <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 80097a4:	4bc1      	ldr	r3, [pc, #772]	; (8009aac <my_lx6_get_coordinates+0x3a4>)
 80097a6:	191b      	adds	r3, r3, r4
 80097a8:	19db      	adds	r3, r3, r7
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	3304      	adds	r3, #4
 80097b0:	2208      	movs	r2, #8
 80097b2:	2100      	movs	r1, #0
 80097b4:	0018      	movs	r0, r3
 80097b6:	f002 f957 	bl	800ba68 <memset>
	char 		nmea_coordinates_log[52] ; // Nagłowek + 12 + ew. znak minus + '\0'
	char* 		nmea_gngsa_label = "GNGSA" ;
 80097ba:	4bbd      	ldr	r3, [pc, #756]	; (8009ab0 <my_lx6_get_coordinates+0x3a8>)
 80097bc:	22d8      	movs	r2, #216	; 0xd8
 80097be:	0092      	lsls	r2, r2, #2
 80097c0:	18ba      	adds	r2, r7, r2
 80097c2:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 80097c4:	4bbb      	ldr	r3, [pc, #748]	; (8009ab4 <my_lx6_get_coordinates+0x3ac>)
 80097c6:	22d7      	movs	r2, #215	; 0xd7
 80097c8:	0092      	lsls	r2, r2, #2
 80097ca:	18ba      	adds	r2, r7, r2
 80097cc:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 80097ce:	4bba      	ldr	r3, [pc, #744]	; (8009ab8 <my_lx6_get_coordinates+0x3b0>)
 80097d0:	22d6      	movs	r2, #214	; 0xd6
 80097d2:	0092      	lsls	r2, r2, #2
 80097d4:	18ba      	adds	r2, r7, r2
 80097d6:	6013      	str	r3, [r2, #0]
	char* 		nmea_gsv_label = "GSV" ;
 80097d8:	4bb8      	ldr	r3, [pc, #736]	; (8009abc <my_lx6_get_coordinates+0x3b4>)
 80097da:	22d5      	movs	r2, #213	; 0xd5
 80097dc:	0092      	lsls	r2, r2, #2
 80097de:	18ba      	adds	r2, r7, r2
 80097e0:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 80097e2:	4bb7      	ldr	r3, [pc, #732]	; (8009ac0 <my_lx6_get_coordinates+0x3b8>)
 80097e4:	18fb      	adds	r3, r7, r3
 80097e6:	2200      	movs	r2, #0
 80097e8:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 80097ea:	4bb6      	ldr	r3, [pc, #728]	; (8009ac4 <my_lx6_get_coordinates+0x3bc>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 80097f0:	4bb5      	ldr	r3, [pc, #724]	; (8009ac8 <my_lx6_get_coordinates+0x3c0>)
 80097f2:	0018      	movs	r0, r3
 80097f4:	f7fc ff10 	bl	8006618 <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 80097f8:	f7f9 fbce 	bl	8002f98 <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 80097fc:	e0ea      	b.n	80099d4 <my_lx6_get_coordinates+0x2cc>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 80097fe:	23fa      	movs	r3, #250	; 0xfa
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4ca3      	ldr	r4, [pc, #652]	; (8009a90 <my_lx6_get_coordinates+0x388>)
 8009804:	1939      	adds	r1, r7, r4
 8009806:	48b1      	ldr	r0, [pc, #708]	; (8009acc <my_lx6_get_coordinates+0x3c4>)
 8009808:	2201      	movs	r2, #1
 800980a:	f7fd fb19 	bl	8006e40 <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 800980e:	23fa      	movs	r3, #250	; 0xfa
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	1939      	adds	r1, r7, r4
 8009814:	48ae      	ldr	r0, [pc, #696]	; (8009ad0 <my_lx6_get_coordinates+0x3c8>)
 8009816:	2201      	movs	r2, #1
 8009818:	f7fd fa76 	bl	8006d08 <HAL_UART_Transmit>
		if ( rxd_byte )
 800981c:	0020      	movs	r0, r4
 800981e:	193b      	adds	r3, r7, r4
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	4ca0      	ldr	r4, [pc, #640]	; (8009aa4 <my_lx6_get_coordinates+0x39c>)
 8009824:	193a      	adds	r2, r7, r4
 8009826:	1939      	adds	r1, r7, r4
 8009828:	7809      	ldrb	r1, [r1, #0]
 800982a:	7011      	strb	r1, [r2, #0]
 800982c:	4da4      	ldr	r5, [pc, #656]	; (8009ac0 <my_lx6_get_coordinates+0x3b8>)
 800982e:	197a      	adds	r2, r7, r5
 8009830:	1979      	adds	r1, r7, r5
 8009832:	7809      	ldrb	r1, [r1, #0]
 8009834:	7011      	strb	r1, [r2, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d100      	bne.n	800983c <my_lx6_get_coordinates+0x134>
 800983a:	e0cb      	b.n	80099d4 <my_lx6_get_coordinates+0x2cc>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 800983c:	235f      	movs	r3, #95	; 0x5f
 800983e:	18fa      	adds	r2, r7, r3
 8009840:	2696      	movs	r6, #150	; 0x96
 8009842:	00b6      	lsls	r6, r6, #2
 8009844:	19b9      	adds	r1, r7, r6
 8009846:	183b      	adds	r3, r7, r0
 8009848:	0018      	movs	r0, r3
 800984a:	f000 fa34 	bl	8009cb6 <my_nmea_message>
 800984e:	0001      	movs	r1, r0
 8009850:	193b      	adds	r3, r7, r4
 8009852:	193a      	adds	r2, r7, r4
 8009854:	7812      	ldrb	r2, [r2, #0]
 8009856:	701a      	strb	r2, [r3, #0]
 8009858:	197b      	adds	r3, r7, r5
 800985a:	197a      	adds	r2, r7, r5
 800985c:	7812      	ldrb	r2, [r2, #0]
 800985e:	701a      	strb	r2, [r3, #0]
 8009860:	2902      	cmp	r1, #2
 8009862:	d000      	beq.n	8009866 <my_lx6_get_coordinates+0x15e>
 8009864:	e0b6      	b.n	80099d4 <my_lx6_get_coordinates+0x2cc>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8009866:	19bb      	adds	r3, r7, r6
 8009868:	0018      	movs	r0, r3
 800986a:	f000 fae4 	bl	8009e36 <is_my_nmea_checksum_ok>
 800986e:	0003      	movs	r3, r0
 8009870:	0019      	movs	r1, r3
 8009872:	193b      	adds	r3, r7, r4
 8009874:	193a      	adds	r2, r7, r4
 8009876:	7812      	ldrb	r2, [r2, #0]
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	197b      	adds	r3, r7, r5
 800987c:	197a      	adds	r2, r7, r5
 800987e:	7812      	ldrb	r2, [r2, #0]
 8009880:	701a      	strb	r2, [r3, #0]
 8009882:	2900      	cmp	r1, #0
 8009884:	d100      	bne.n	8009888 <my_lx6_get_coordinates+0x180>
 8009886:	e0a5      	b.n	80099d4 <my_lx6_get_coordinates+0x2cc>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009888:	23d6      	movs	r3, #214	; 0xd6
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	18fb      	adds	r3, r7, r3
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	19bb      	adds	r3, r7, r6
 8009892:	0011      	movs	r1, r2
 8009894:	0018      	movs	r0, r3
 8009896:	f002 f914 	bl	800bac2 <strstr>
 800989a:	1e03      	subs	r3, r0, #0
 800989c:	d00d      	beq.n	80098ba <my_lx6_get_coordinates+0x1b2>
					{
						memcpy ( rmc_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby skorzystać z czasu jak najdokładniejszego, bo przed fix ten czas jest fake.
 800989e:	4b7f      	ldr	r3, [pc, #508]	; (8009a9c <my_lx6_get_coordinates+0x394>)
 80098a0:	21da      	movs	r1, #218	; 0xda
 80098a2:	0089      	lsls	r1, r1, #2
 80098a4:	185b      	adds	r3, r3, r1
 80098a6:	19da      	adds	r2, r3, r7
 80098a8:	4b7a      	ldr	r3, [pc, #488]	; (8009a94 <my_lx6_get_coordinates+0x38c>)
 80098aa:	185b      	adds	r3, r3, r1
 80098ac:	19db      	adds	r3, r3, r7
 80098ae:	0010      	movs	r0, r2
 80098b0:	0019      	movs	r1, r3
 80098b2:	23fa      	movs	r3, #250	; 0xfa
 80098b4:	001a      	movs	r2, r3
 80098b6:	f002 f9bc 	bl	800bc32 <memcpy>
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MY_GNSS_MIN_TNS )
 80098ba:	23d5      	movs	r3, #213	; 0xd5
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	18fb      	adds	r3, r7, r3
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	2496      	movs	r4, #150	; 0x96
 80098c4:	00a4      	lsls	r4, r4, #2
 80098c6:	193b      	adds	r3, r7, r4
 80098c8:	0011      	movs	r1, r2
 80098ca:	0018      	movs	r0, r3
 80098cc:	f002 f8f9 	bl	800bac2 <strstr>
 80098d0:	1e03      	subs	r3, r0, #0
 80098d2:	d011      	beq.n	80098f8 <my_lx6_get_coordinates+0x1f0>
 80098d4:	4d73      	ldr	r5, [pc, #460]	; (8009aa4 <my_lx6_get_coordinates+0x39c>)
 80098d6:	197b      	adds	r3, r7, r5
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d80c      	bhi.n	80098f8 <my_lx6_get_coordinates+0x1f0>
					{
						if ( tim_seconds > MY_GNSS_MIN_TNS_TIME_THS )
 80098de:	4b79      	ldr	r3, [pc, #484]	; (8009ac4 <my_lx6_get_coordinates+0x3bc>)
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	2b0a      	cmp	r3, #10
 80098e4:	d900      	bls.n	80098e8 <my_lx6_get_coordinates+0x1e0>
 80098e6:	e081      	b.n	80099ec <my_lx6_get_coordinates+0x2e4>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 80098e8:	193b      	adds	r3, r7, r4
 80098ea:	0018      	movs	r0, r3
 80098ec:	f000 fc60 	bl	800a1b0 <my_nmea_get_gsv_tns>
 80098f0:	0003      	movs	r3, r0
 80098f2:	001a      	movs	r2, r3
 80098f4:	197b      	adds	r3, r7, r5
 80098f6:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 80098f8:	23d8      	movs	r3, #216	; 0xd8
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	18fb      	adds	r3, r7, r3
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	2596      	movs	r5, #150	; 0x96
 8009902:	00ad      	lsls	r5, r5, #2
 8009904:	197b      	adds	r3, r7, r5
 8009906:	0011      	movs	r1, r2
 8009908:	0018      	movs	r0, r3
 800990a:	f002 f8da 	bl	800bac2 <strstr>
 800990e:	1e03      	subs	r3, r0, #0
 8009910:	d015      	beq.n	800993e <my_lx6_get_coordinates+0x236>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8009912:	4b6b      	ldr	r3, [pc, #428]	; (8009ac0 <my_lx6_get_coordinates+0x3b8>)
 8009914:	18fc      	adds	r4, r7, r3
 8009916:	197b      	adds	r3, r7, r5
 8009918:	0018      	movs	r0, r3
 800991a:	f000 fa38 	bl	8009d8e <get_my_nmea_gngsa_fixed_mode_s>
 800991e:	0003      	movs	r3, r0
 8009920:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009922:	197b      	adds	r3, r7, r5
 8009924:	0018      	movs	r0, r3
 8009926:	f000 fa3d 	bl	8009da4 <get_my_nmea_gngsa_pdop_d>
 800992a:	0002      	movs	r2, r0
 800992c:	000b      	movs	r3, r1
 800992e:	21de      	movs	r1, #222	; 0xde
 8009930:	0089      	lsls	r1, r1, #2
 8009932:	2008      	movs	r0, #8
 8009934:	1809      	adds	r1, r1, r0
 8009936:	19c9      	adds	r1, r1, r7
 8009938:	6809      	ldr	r1, [r1, #0]
 800993a:	600a      	str	r2, [r1, #0]
 800993c:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 800993e:	23d7      	movs	r3, #215	; 0xd7
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	18fb      	adds	r3, r7, r3
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	2596      	movs	r5, #150	; 0x96
 8009948:	00ad      	lsls	r5, r5, #2
 800994a:	197b      	adds	r3, r7, r5
 800994c:	0011      	movs	r1, r2
 800994e:	0018      	movs	r0, r3
 8009950:	f002 f8b7 	bl	800bac2 <strstr>
 8009954:	1e03      	subs	r3, r0, #0
 8009956:	d03d      	beq.n	80099d4 <my_lx6_get_coordinates+0x2cc>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths && nmea_fixed_mode_s == NMEA_3D_FIX )
 8009958:	23de      	movs	r3, #222	; 0xde
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	2408      	movs	r4, #8
 800995e:	191b      	adds	r3, r3, r4
 8009960:	19db      	adds	r3, r3, r7
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	6838      	ldr	r0, [r7, #0]
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	f7f6 fd90 	bl	8000490 <__aeabi_dcmpge>
 8009970:	1e03      	subs	r3, r0, #0
 8009972:	d021      	beq.n	80099b8 <my_lx6_get_coordinates+0x2b0>
 8009974:	4b52      	ldr	r3, [pc, #328]	; (8009ac0 <my_lx6_get_coordinates+0x3b8>)
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b33      	cmp	r3, #51	; 0x33
 800997c:	d11c      	bne.n	80099b8 <my_lx6_get_coordinates+0x2b0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 800997e:	23df      	movs	r3, #223	; 0xdf
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	0026      	movs	r6, r4
 8009984:	191b      	adds	r3, r3, r4
 8009986:	19db      	adds	r3, r3, r7
 8009988:	681c      	ldr	r4, [r3, #0]
 800998a:	2344      	movs	r3, #68	; 0x44
 800998c:	18fa      	adds	r2, r7, r3
 800998e:	2350      	movs	r3, #80	; 0x50
 8009990:	18f9      	adds	r1, r7, r3
 8009992:	1978      	adds	r0, r7, r5
 8009994:	23e0      	movs	r3, #224	; 0xe0
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	199b      	adds	r3, r3, r6
 800999a:	19db      	adds	r3, r3, r7
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	0023      	movs	r3, r4
 80099a2:	f000 fb03 	bl	8009fac <get_my_nmea_gngll_coordinates>
							set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 80099a6:	197b      	adds	r3, r7, r5
 80099a8:	0018      	movs	r0, r3
 80099aa:	f000 f895 	bl	8009ad8 <set_my_rtc_from_nmea_rmc>
							r = true ;
 80099ae:	4b37      	ldr	r3, [pc, #220]	; (8009a8c <my_lx6_get_coordinates+0x384>)
 80099b0:	18fb      	adds	r3, r7, r3
 80099b2:	2201      	movs	r2, #1
 80099b4:	701a      	strb	r2, [r3, #0]
							break ;
 80099b6:	e01a      	b.n	80099ee <my_lx6_get_coordinates+0x2e6>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 80099b8:	4b37      	ldr	r3, [pc, #220]	; (8009a98 <my_lx6_get_coordinates+0x390>)
 80099ba:	21da      	movs	r1, #218	; 0xda
 80099bc:	0089      	lsls	r1, r1, #2
 80099be:	185b      	adds	r3, r3, r1
 80099c0:	19da      	adds	r2, r3, r7
 80099c2:	4b34      	ldr	r3, [pc, #208]	; (8009a94 <my_lx6_get_coordinates+0x38c>)
 80099c4:	185b      	adds	r3, r3, r1
 80099c6:	19db      	adds	r3, r3, r7
 80099c8:	0010      	movs	r0, r2
 80099ca:	0019      	movs	r1, r3
 80099cc:	23fa      	movs	r3, #250	; 0xfa
 80099ce:	001a      	movs	r2, r3
 80099d0:	f002 f92f 	bl	800bc32 <memcpy>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 80099d4:	4b3b      	ldr	r3, [pc, #236]	; (8009ac4 <my_lx6_get_coordinates+0x3bc>)
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	4a2b      	ldr	r2, [pc, #172]	; (8009a88 <my_lx6_get_coordinates+0x380>)
 80099da:	21da      	movs	r1, #218	; 0xda
 80099dc:	0089      	lsls	r1, r1, #2
 80099de:	1852      	adds	r2, r2, r1
 80099e0:	19d2      	adds	r2, r2, r7
 80099e2:	8812      	ldrh	r2, [r2, #0]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d900      	bls.n	80099ea <my_lx6_get_coordinates+0x2e2>
 80099e8:	e709      	b.n	80097fe <my_lx6_get_coordinates+0xf6>
 80099ea:	e000      	b.n	80099ee <my_lx6_get_coordinates+0x2e6>
							break ;
 80099ec:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 80099ee:	4b36      	ldr	r3, [pc, #216]	; (8009ac8 <my_lx6_get_coordinates+0x3c0>)
 80099f0:	0018      	movs	r0, r3
 80099f2:	f7fc fe6d 	bl	80066d0 <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 80099f6:	f7f9 fae7 	bl	8002fc8 <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 80099fa:	4b2b      	ldr	r3, [pc, #172]	; (8009aa8 <my_lx6_get_coordinates+0x3a0>)
 80099fc:	22da      	movs	r2, #218	; 0xda
 80099fe:	0092      	lsls	r2, r2, #2
 8009a00:	189b      	adds	r3, r3, r2
 8009a02:	19db      	adds	r3, r3, r7
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d125      	bne.n	8009a56 <my_lx6_get_coordinates+0x34e>
 8009a0a:	4b23      	ldr	r3, [pc, #140]	; (8009a98 <my_lx6_get_coordinates+0x390>)
 8009a0c:	189b      	adds	r3, r3, r2
 8009a0e:	19db      	adds	r3, r3, r7
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d01f      	beq.n	8009a56 <my_lx6_get_coordinates+0x34e>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009a16:	23df      	movs	r3, #223	; 0xdf
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	2508      	movs	r5, #8
 8009a1c:	195b      	adds	r3, r3, r5
 8009a1e:	19db      	adds	r3, r3, r7
 8009a20:	681c      	ldr	r4, [r3, #0]
 8009a22:	2344      	movs	r3, #68	; 0x44
 8009a24:	18fa      	adds	r2, r7, r3
 8009a26:	2350      	movs	r3, #80	; 0x50
 8009a28:	18f9      	adds	r1, r7, r3
 8009a2a:	23ae      	movs	r3, #174	; 0xae
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	18f8      	adds	r0, r7, r3
 8009a30:	23e0      	movs	r3, #224	; 0xe0
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	195b      	adds	r3, r3, r5
 8009a36:	19db      	adds	r3, r3, r7
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	0023      	movs	r3, r4
 8009a3e:	f000 fab5 	bl	8009fac <get_my_nmea_gngll_coordinates>
		set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009a42:	2396      	movs	r3, #150	; 0x96
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	18fb      	adds	r3, r7, r3
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f000 f845 	bl	8009ad8 <set_my_rtc_from_nmea_rmc>
		r = true ;
 8009a4e:	4b0f      	ldr	r3, [pc, #60]	; (8009a8c <my_lx6_get_coordinates+0x384>)
 8009a50:	18fb      	adds	r3, r7, r3
 8009a52:	2201      	movs	r2, #1
 8009a54:	701a      	strb	r2, [r3, #0]
	}
	sprintf ( nmea_coordinates_log , "NMEA coordinates: %s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 8009a56:	2344      	movs	r3, #68	; 0x44
 8009a58:	18fb      	adds	r3, r7, r3
 8009a5a:	2250      	movs	r2, #80	; 0x50
 8009a5c:	18ba      	adds	r2, r7, r2
 8009a5e:	491d      	ldr	r1, [pc, #116]	; (8009ad4 <my_lx6_get_coordinates+0x3cc>)
 8009a60:	2410      	movs	r4, #16
 8009a62:	1938      	adds	r0, r7, r4
 8009a64:	f001 ff6a 	bl	800b93c <sprintf>
	send_debug_logs ( nmea_coordinates_log ) ;
 8009a68:	193b      	adds	r3, r7, r4
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f7f9 f998 	bl	8002da0 <send_debug_logs>
	return r ;
 8009a70:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <my_lx6_get_coordinates+0x384>)
 8009a72:	18fb      	adds	r3, r7, r3
 8009a74:	781b      	ldrb	r3, [r3, #0]
}
 8009a76:	0018      	movs	r0, r3
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	23db      	movs	r3, #219	; 0xdb
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	449d      	add	sp, r3
 8009a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a82:	46c0      	nop			; (mov r8, r8)
 8009a84:	fffffc8c 	.word	0xfffffc8c
 8009a88:	fffffca6 	.word	0xfffffca6
 8009a8c:	00000367 	.word	0x00000367
 8009a90:	00000353 	.word	0x00000353
 8009a94:	fffffef0 	.word	0xfffffef0
 8009a98:	fffffdf4 	.word	0xfffffdf4
 8009a9c:	fffffcf8 	.word	0xfffffcf8
 8009aa0:	fffffcf7 	.word	0xfffffcf7
 8009aa4:	00000366 	.word	0x00000366
 8009aa8:	fffffce8 	.word	0xfffffce8
 8009aac:	fffffcdc 	.word	0xfffffcdc
 8009ab0:	08013e14 	.word	0x08013e14
 8009ab4:	08013e1c 	.word	0x08013e1c
 8009ab8:	08013e24 	.word	0x08013e24
 8009abc:	08013e28 	.word	0x08013e28
 8009ac0:	00000365 	.word	0x00000365
 8009ac4:	200009b6 	.word	0x200009b6
 8009ac8:	2000078c 	.word	0x2000078c
 8009acc:	20000900 	.word	0x20000900
 8009ad0:	2000086c 	.word	0x2000086c
 8009ad4:	08013e2c 	.word	0x08013e2c

08009ad8 <set_my_rtc_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void set_my_rtc_from_nmea_rmc ( const char* m )
{
 8009ad8:	b5b0      	push	{r4, r5, r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  get_my_nmea_rmc_date_yy ( m , &sDate.Year ) ;
 8009ae0:	2508      	movs	r5, #8
 8009ae2:	197b      	adds	r3, r7, r5
 8009ae4:	1cda      	adds	r2, r3, #3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	0011      	movs	r1, r2
 8009aea:	0018      	movs	r0, r3
 8009aec:	f000 fb98 	bl	800a220 <get_my_nmea_rmc_date_yy>
	  get_my_nmea_rmc_date_mm ( m , &sDate.Month ) ;
 8009af0:	197b      	adds	r3, r7, r5
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	0011      	movs	r1, r2
 8009af8:	0018      	movs	r0, r3
 8009afa:	f000 fbcb 	bl	800a294 <get_my_nmea_rmc_date_mm>
	  get_my_nmea_rmc_date_dd ( m , &sDate.Date ) ;
 8009afe:	197b      	adds	r3, r7, r5
 8009b00:	1c9a      	adds	r2, r3, #2
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	0011      	movs	r1, r2
 8009b06:	0018      	movs	r0, r3
 8009b08:	f000 fbfe 	bl	800a308 <get_my_nmea_rmc_date_dd>
	  get_my_nmea_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009b0c:	240c      	movs	r4, #12
 8009b0e:	193a      	adds	r2, r7, r4
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	0011      	movs	r1, r2
 8009b14:	0018      	movs	r0, r3
 8009b16:	f000 fc31 	bl	800a37c <get_my_nmea_rmc_utc_hh>
	  get_my_nmea_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009b1a:	193b      	adds	r3, r7, r4
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	0011      	movs	r1, r2
 8009b22:	0018      	movs	r0, r3
 8009b24:	f000 fc64 	bl	800a3f0 <get_my_nmea_rmc_utc_mm>
	  get_my_nmea_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009b28:	193b      	adds	r3, r7, r4
 8009b2a:	1c9a      	adds	r2, r3, #2
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	0011      	movs	r1, r2
 8009b30:	0018      	movs	r0, r3
 8009b32:	f000 fc97 	bl	800a464 <get_my_nmea_rmc_utc_ss>
	  get_my_nmea_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009b36:	193b      	adds	r3, r7, r4
 8009b38:	1d1a      	adds	r2, r3, #4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	0011      	movs	r1, r2
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f000 fcca 	bl	800a4d8 <get_my_nmea_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009b44:	193b      	adds	r3, r7, r4
 8009b46:	2200      	movs	r2, #0
 8009b48:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009b4a:	193b      	adds	r3, r7, r4
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009b50:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <set_my_rtc_from_nmea_rmc+0xa8>)
 8009b52:	0018      	movs	r0, r3
 8009b54:	f7fb fd9d 	bl	8005692 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009b58:	1939      	adds	r1, r7, r4
 8009b5a:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <set_my_rtc_from_nmea_rmc+0xa8>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f7fb f99a 	bl	8004e98 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009b64:	1979      	adds	r1, r7, r5
 8009b66:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <set_my_rtc_from_nmea_rmc+0xa8>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f7fb fa98 	bl	80050a0 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009b70:	4b03      	ldr	r3, [pc, #12]	; (8009b80 <set_my_rtc_from_nmea_rmc+0xa8>)
 8009b72:	0018      	movs	r0, r3
 8009b74:	f7fb fdc1 	bl	80056fa <HAL_RTCEx_DisableBypassShadow>
}
 8009b78:	46c0      	nop			; (mov r8, r8)
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	b008      	add	sp, #32
 8009b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b80:	200006fc 	.word	0x200006fc

08009b84 <get_my_rtc_time>:
uint16_t get_my_rtc_time ( char* dt_s )
{
 8009b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b86:	b08d      	sub	sp, #52	; 0x34
 8009b88:	af04      	add	r7, sp, #16
 8009b8a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8009b8c:	2508      	movs	r5, #8
 8009b8e:	1979      	adds	r1, r7, r5
 8009b90:	4b1b      	ldr	r3, [pc, #108]	; (8009c00 <get_my_rtc_time+0x7c>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	0018      	movs	r0, r3
 8009b96:	f7fb fa27 	bl	8004fe8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8009b9a:	241c      	movs	r4, #28
 8009b9c:	1939      	adds	r1, r7, r4
 8009b9e:	4b18      	ldr	r3, [pc, #96]	; (8009c00 <get_my_rtc_time+0x7c>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	f7fb fb0e 	bl	80051c4 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 8009ba8:	0021      	movs	r1, r4
 8009baa:	187b      	adds	r3, r7, r1
 8009bac:	78db      	ldrb	r3, [r3, #3]
 8009bae:	22fa      	movs	r2, #250	; 0xfa
 8009bb0:	00d2      	lsls	r2, r2, #3
 8009bb2:	189a      	adds	r2, r3, r2
 8009bb4:	187b      	adds	r3, r7, r1
 8009bb6:	785b      	ldrb	r3, [r3, #1]
 8009bb8:	469c      	mov	ip, r3
 8009bba:	187b      	adds	r3, r7, r1
 8009bbc:	789b      	ldrb	r3, [r3, #2]
 8009bbe:	001c      	movs	r4, r3
 8009bc0:	0028      	movs	r0, r5
 8009bc2:	183b      	adds	r3, r7, r0
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	001d      	movs	r5, r3
 8009bc8:	183b      	adds	r3, r7, r0
 8009bca:	785b      	ldrb	r3, [r3, #1]
 8009bcc:	001e      	movs	r6, r3
 8009bce:	183b      	adds	r3, r7, r0
 8009bd0:	789b      	ldrb	r3, [r3, #2]
 8009bd2:	490c      	ldr	r1, [pc, #48]	; (8009c04 <get_my_rtc_time+0x80>)
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	9602      	str	r6, [sp, #8]
 8009bda:	9501      	str	r5, [sp, #4]
 8009bdc:	9400      	str	r4, [sp, #0]
 8009bde:	4663      	mov	r3, ip
 8009be0:	f001 feac 	bl	800b93c <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009be4:	211c      	movs	r1, #28
 8009be6:	187b      	adds	r3, r7, r1
 8009be8:	78db      	ldrb	r3, [r3, #3]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	22fa      	movs	r2, #250	; 0xfa
 8009bee:	00d2      	lsls	r2, r2, #3
 8009bf0:	4694      	mov	ip, r2
 8009bf2:	4463      	add	r3, ip
 8009bf4:	b29b      	uxth	r3, r3
}
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	b009      	add	sp, #36	; 0x24
 8009bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	200006fc 	.word	0x200006fc
 8009c04:	08013e44 	.word	0x08013e44

08009c08 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2100      	movs	r1, #0
 8009c14:	0018      	movs	r0, r3
 8009c16:	f001 fcf5 	bl	800b604 <strtod>
 8009c1a:	0002      	movs	r2, r0
 8009c1c:	000b      	movs	r3, r1
 8009c1e:	60ba      	str	r2, [r7, #8]
 8009c20:	60fb      	str	r3, [r7, #12]
    return d ;
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	68fb      	ldr	r3, [r7, #12]
}
 8009c26:	0010      	movs	r0, r2
 8009c28:	0019      	movs	r1, r3
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	b004      	add	sp, #16
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	0008      	movs	r0, r1
 8009c3a:	0011      	movs	r1, r2
 8009c3c:	1cfb      	adds	r3, r7, #3
 8009c3e:	1c02      	adds	r2, r0, #0
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	1cbb      	adds	r3, r7, #2
 8009c44:	1c0a      	adds	r2, r1, #0
 8009c46:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009c48:	230f      	movs	r3, #15
 8009c4a:	18fb      	adds	r3, r7, r3
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009c50:	230e      	movs	r3, #14
 8009c52:	18fb      	adds	r3, r7, r3
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009c58:	e01c      	b.n	8009c94 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009c5a:	230f      	movs	r3, #15
 8009c5c:	18fb      	adds	r3, r7, r3
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	18d3      	adds	r3, r2, r3
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	1cfa      	adds	r2, r7, #3
 8009c68:	7812      	ldrb	r2, [r2, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d105      	bne.n	8009c7a <my_find_char_position+0x4a>
			p++ ;
 8009c6e:	210e      	movs	r1, #14
 8009c70:	187b      	adds	r3, r7, r1
 8009c72:	781a      	ldrb	r2, [r3, #0]
 8009c74:	187b      	adds	r3, r7, r1
 8009c76:	3201      	adds	r2, #1
 8009c78:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009c7a:	230e      	movs	r3, #14
 8009c7c:	18fa      	adds	r2, r7, r3
 8009c7e:	1cbb      	adds	r3, r7, #2
 8009c80:	7812      	ldrb	r2, [r2, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d00e      	beq.n	8009ca6 <my_find_char_position+0x76>
			break ;
		i++ ;
 8009c88:	210f      	movs	r1, #15
 8009c8a:	187b      	adds	r3, r7, r1
 8009c8c:	781a      	ldrb	r2, [r3, #0]
 8009c8e:	187b      	adds	r3, r7, r1
 8009c90:	3201      	adds	r2, #1
 8009c92:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8009c94:	230f      	movs	r3, #15
 8009c96:	18fb      	adds	r3, r7, r3
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	18d3      	adds	r3, r2, r3
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1da      	bne.n	8009c5a <my_find_char_position+0x2a>
 8009ca4:	e000      	b.n	8009ca8 <my_find_char_position+0x78>
			break ;
 8009ca6:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8009ca8:	230f      	movs	r3, #15
 8009caa:	18fb      	adds	r3, r7, r3
 8009cac:	781b      	ldrb	r3, [r3, #0]
}
 8009cae:	0018      	movs	r0, r3
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	b004      	add	sp, #16
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b24      	cmp	r3, #36	; 0x24
 8009cc8:	d117      	bne.n	8009cfa <my_nmea_message+0x44>
    {
        *i = 0 ;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	b2d1      	uxtb	r1, r2
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	7011      	strb	r1, [r2, #0]
 8009cdc:	001a      	movs	r2, r3
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	189b      	adds	r3, r3, r2
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	7812      	ldrb	r2, [r2, #0]
 8009ce6:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	001a      	movs	r2, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	189b      	adds	r3, r3, r2
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e045      	b.n	8009d86 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b1f      	cmp	r3, #31
 8009d00:	d907      	bls.n	8009d12 <my_nmea_message+0x5c>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b7e      	cmp	r3, #126	; 0x7e
 8009d08:	d803      	bhi.n	8009d12 <my_nmea_message+0x5c>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d103      	bne.n	8009d1a <my_nmea_message+0x64>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b0d      	cmp	r3, #13
 8009d18:	d114      	bne.n	8009d44 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	b2d1      	uxtb	r1, r2
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	7011      	strb	r1, [r2, #0]
 8009d26:	001a      	movs	r2, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	189b      	adds	r3, r3, r2
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	7812      	ldrb	r2, [r2, #0]
 8009d30:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	001a      	movs	r2, r3
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	189b      	adds	r3, r3, r2
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e020      	b.n	8009d86 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	2b0a      	cmp	r3, #10
 8009d4a:	d11a      	bne.n	8009d82 <my_nmea_message+0xcc>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d916      	bls.n	8009d82 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	001a      	movs	r2, r3
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	189b      	adds	r3, r3, r2
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b0d      	cmp	r3, #13
 8009d6e:	d108      	bne.n	8009d82 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	001a      	movs	r2, r3
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	189b      	adds	r3, r3, r2
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e001      	b.n	8009d86 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009d82:	2301      	movs	r3, #1
 8009d84:	425b      	negs	r3, r3
}
 8009d86:	0018      	movs	r0, r3
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	b004      	add	sp, #16
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3309      	adds	r3, #9
 8009d9a:	781b      	ldrb	r3, [r3, #0]
}
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	b002      	add	sp, #8
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009da4:	b5b0      	push	{r4, r5, r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	220f      	movs	r2, #15
 8009db0:	212c      	movs	r1, #44	; 0x2c
 8009db2:	0018      	movs	r0, r3
 8009db4:	f7ff ff3c 	bl	8009c30 <my_find_char_position>
 8009db8:	0003      	movs	r3, r0
 8009dba:	001a      	movs	r2, r3
 8009dbc:	2517      	movs	r5, #23
 8009dbe:	197b      	adds	r3, r7, r5
 8009dc0:	3201      	adds	r2, #1
 8009dc2:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2210      	movs	r2, #16
 8009dc8:	212c      	movs	r1, #44	; 0x2c
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f7ff ff30 	bl	8009c30 <my_find_char_position>
 8009dd0:	0003      	movs	r3, r0
 8009dd2:	0019      	movs	r1, r3
 8009dd4:	2416      	movs	r4, #22
 8009dd6:	193b      	adds	r3, r7, r4
 8009dd8:	197a      	adds	r2, r7, r5
 8009dda:	7812      	ldrb	r2, [r2, #0]
 8009ddc:	1a8a      	subs	r2, r1, r2
 8009dde:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009de0:	193b      	adds	r3, r7, r4
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	3301      	adds	r3, #1
 8009de6:	0018      	movs	r0, r3
 8009de8:	f000 fbaa 	bl	800a540 <malloc>
 8009dec:	0003      	movs	r3, r0
 8009dee:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009df0:	197b      	adds	r3, r7, r5
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	18d1      	adds	r1, r2, r3
 8009df8:	193b      	adds	r3, r7, r4
 8009dfa:	781a      	ldrb	r2, [r3, #0]
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	0018      	movs	r0, r3
 8009e00:	f001 fe4b 	bl	800ba9a <strncpy>
	pdop_s[pdop_length] = '\0';
 8009e04:	193b      	adds	r3, r7, r4
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	18d3      	adds	r3, r2, r3
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	0018      	movs	r0, r3
 8009e14:	f7ff fef8 	bl	8009c08 <my_string2double_conv>
 8009e18:	0002      	movs	r2, r0
 8009e1a:	000b      	movs	r3, r1
 8009e1c:	60ba      	str	r2, [r7, #8]
 8009e1e:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	0018      	movs	r0, r3
 8009e24:	f000 fb96 	bl	800a554 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
}
 8009e2c:	0010      	movs	r0, r2
 8009e2e:	0019      	movs	r1, r3
 8009e30:	46bd      	mov	sp, r7
 8009e32:	b006      	add	sp, #24
 8009e34:	bdb0      	pop	{r4, r5, r7, pc}

08009e36 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8009e36:	b590      	push	{r4, r7, lr}
 8009e38:	b085      	sub	sp, #20
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8009e3e:	230f      	movs	r3, #15
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	2200      	movs	r2, #0
 8009e44:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8009e46:	230e      	movs	r3, #14
 8009e48:	18fb      	adds	r3, r7, r3
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009e4e:	e00f      	b.n	8009e70 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8009e50:	220e      	movs	r2, #14
 8009e52:	18bb      	adds	r3, r7, r2
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	18ba      	adds	r2, r7, r2
 8009e58:	1c59      	adds	r1, r3, #1
 8009e5a:	7011      	strb	r1, [r2, #0]
 8009e5c:	001a      	movs	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	189b      	adds	r3, r3, r2
 8009e62:	7819      	ldrb	r1, [r3, #0]
 8009e64:	220f      	movs	r2, #15
 8009e66:	18bb      	adds	r3, r7, r2
 8009e68:	18ba      	adds	r2, r7, r2
 8009e6a:	7812      	ldrb	r2, [r2, #0]
 8009e6c:	404a      	eors	r2, r1
 8009e6e:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009e70:	210e      	movs	r1, #14
 8009e72:	187b      	adds	r3, r7, r1
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	18d3      	adds	r3, r2, r3
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e7e:	d00a      	beq.n	8009e96 <is_my_nmea_checksum_ok+0x60>
 8009e80:	187b      	adds	r3, r7, r1
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	18d3      	adds	r3, r2, r3
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <is_my_nmea_checksum_ok+0x60>
 8009e8e:	187b      	adds	r3, r7, r1
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1dc      	bne.n	8009e50 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8009e96:	230f      	movs	r3, #15
 8009e98:	18fb      	adds	r3, r7, r3
 8009e9a:	781c      	ldrb	r4, [r3, #0]
 8009e9c:	210e      	movs	r1, #14
 8009e9e:	187b      	adds	r3, r7, r1
 8009ea0:	187a      	adds	r2, r7, r1
 8009ea2:	7812      	ldrb	r2, [r2, #0]
 8009ea4:	3201      	adds	r2, #1
 8009ea6:	701a      	strb	r2, [r3, #0]
 8009ea8:	187b      	adds	r3, r7, r1
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	18d3      	adds	r3, r2, r3
 8009eb0:	2210      	movs	r2, #16
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f001 fc3d 	bl	800b734 <strtol>
 8009eba:	0003      	movs	r3, r0
 8009ebc:	1ae3      	subs	r3, r4, r3
 8009ebe:	425a      	negs	r2, r3
 8009ec0:	4153      	adcs	r3, r2
 8009ec2:	b2db      	uxtb	r3, r3
}
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	b005      	add	sp, #20
 8009eca:	bd90      	pop	{r4, r7, pc}

08009ecc <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8009ecc:	b5b0      	push	{r4, r5, r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	000a      	movs	r2, r1
 8009ed6:	1cfb      	adds	r3, r7, #3
 8009ed8:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8009eda:	2308      	movs	r3, #8
 8009edc:	18fa      	adds	r2, r7, r3
 8009ede:	492f      	ldr	r1, [pc, #188]	; (8009f9c <nmea2decimal+0xd0>)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	0018      	movs	r0, r3
 8009ee4:	f001 fd4a 	bl	800b97c <sscanf>
    min = deg / 100 ;
 8009ee8:	68b8      	ldr	r0, [r7, #8]
 8009eea:	68f9      	ldr	r1, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	4b2c      	ldr	r3, [pc, #176]	; (8009fa0 <nmea2decimal+0xd4>)
 8009ef0:	f7f6 ffc2 	bl	8000e78 <__aeabi_ddiv>
 8009ef4:	0002      	movs	r2, r0
 8009ef6:	000b      	movs	r3, r1
 8009ef8:	613a      	str	r2, [r7, #16]
 8009efa:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8009efc:	6938      	ldr	r0, [r7, #16]
 8009efe:	6979      	ldr	r1, [r7, #20]
 8009f00:	f7f8 fa16 	bl	8002330 <__aeabi_d2iz>
 8009f04:	0003      	movs	r3, r0
 8009f06:	0018      	movs	r0, r3
 8009f08:	f7f8 fa48 	bl	800239c <__aeabi_i2d>
 8009f0c:	0002      	movs	r2, r0
 8009f0e:	000b      	movs	r3, r1
 8009f10:	60ba      	str	r2, [r7, #8]
 8009f12:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6938      	ldr	r0, [r7, #16]
 8009f1a:	6979      	ldr	r1, [r7, #20]
 8009f1c:	f7f7 fe68 	bl	8001bf0 <__aeabi_dsub>
 8009f20:	0002      	movs	r2, r0
 8009f22:	000b      	movs	r3, r1
 8009f24:	0010      	movs	r0, r2
 8009f26:	0019      	movs	r1, r3
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4b1e      	ldr	r3, [pc, #120]	; (8009fa4 <nmea2decimal+0xd8>)
 8009f2c:	f7f7 fb9e 	bl	800166c <__aeabi_dmul>
 8009f30:	0002      	movs	r2, r0
 8009f32:	000b      	movs	r3, r1
 8009f34:	613a      	str	r2, [r7, #16]
 8009f36:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8009f38:	2200      	movs	r2, #0
 8009f3a:	4b1b      	ldr	r3, [pc, #108]	; (8009fa8 <nmea2decimal+0xdc>)
 8009f3c:	6938      	ldr	r0, [r7, #16]
 8009f3e:	6979      	ldr	r1, [r7, #20]
 8009f40:	f7f6 ff9a 	bl	8000e78 <__aeabi_ddiv>
 8009f44:	0002      	movs	r2, r0
 8009f46:	000b      	movs	r3, r1
 8009f48:	613a      	str	r2, [r7, #16]
 8009f4a:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8009f4c:	1cfb      	adds	r3, r7, #3
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b53      	cmp	r3, #83	; 0x53
 8009f52:	d003      	beq.n	8009f5c <nmea2decimal+0x90>
 8009f54:	1cfb      	adds	r3, r7, #3
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b57      	cmp	r3, #87	; 0x57
 8009f5a:	d10e      	bne.n	8009f7a <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8009f5c:	68b8      	ldr	r0, [r7, #8]
 8009f5e:	68f9      	ldr	r1, [r7, #12]
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f7f6 fc28 	bl	80007b8 <__aeabi_dadd>
 8009f68:	0002      	movs	r2, r0
 8009f6a:	000b      	movs	r3, r1
 8009f6c:	0011      	movs	r1, r2
 8009f6e:	000c      	movs	r4, r1
 8009f70:	2180      	movs	r1, #128	; 0x80
 8009f72:	0609      	lsls	r1, r1, #24
 8009f74:	4059      	eors	r1, r3
 8009f76:	000d      	movs	r5, r1
 8009f78:	e009      	b.n	8009f8e <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8009f7a:	68b8      	ldr	r0, [r7, #8]
 8009f7c:	68f9      	ldr	r1, [r7, #12]
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f7f6 fc19 	bl	80007b8 <__aeabi_dadd>
 8009f86:	0002      	movs	r2, r0
 8009f88:	000b      	movs	r3, r1
 8009f8a:	0014      	movs	r4, r2
 8009f8c:	001d      	movs	r5, r3
}
 8009f8e:	0022      	movs	r2, r4
 8009f90:	002b      	movs	r3, r5
 8009f92:	0010      	movs	r0, r2
 8009f94:	0019      	movs	r1, r3
 8009f96:	46bd      	mov	sp, r7
 8009f98:	b006      	add	sp, #24
 8009f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8009f9c:	08013e64 	.word	0x08013e64
 8009fa0:	40590000 	.word	0x40590000
 8009fa4:	40240000 	.word	0x40240000
 8009fa8:	40180000 	.word	0x40180000

08009fac <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 8009fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fae:	b091      	sub	sp, #68	; 0x44
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	212c      	movs	r1, #44	; 0x2c
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f7ff fe35 	bl	8009c30 <my_find_char_position>
 8009fc6:	0003      	movs	r3, r0
 8009fc8:	001a      	movs	r2, r3
 8009fca:	2537      	movs	r5, #55	; 0x37
 8009fcc:	197b      	adds	r3, r7, r5
 8009fce:	3201      	adds	r2, #1
 8009fd0:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	212c      	movs	r1, #44	; 0x2c
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f7ff fe29 	bl	8009c30 <my_find_char_position>
 8009fde:	0003      	movs	r3, r0
 8009fe0:	0019      	movs	r1, r3
 8009fe2:	2436      	movs	r4, #54	; 0x36
 8009fe4:	193b      	adds	r3, r7, r4
 8009fe6:	197a      	adds	r2, r7, r5
 8009fe8:	7812      	ldrb	r2, [r2, #0]
 8009fea:	1a8a      	subs	r2, r1, r2
 8009fec:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009fee:	193b      	adds	r3, r7, r4
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	f000 faa3 	bl	800a540 <malloc>
 8009ffa:	0003      	movs	r3, r0
 8009ffc:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009ffe:	197b      	adds	r3, r7, r5
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	18d1      	adds	r1, r2, r3
 800a006:	193b      	adds	r3, r7, r4
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	0018      	movs	r0, r3
 800a00e:	f001 fd44 	bl	800ba9a <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a012:	193b      	adds	r3, r7, r4
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a018:	18d3      	adds	r3, r2, r3
 800a01a:	2200      	movs	r2, #0
 800a01c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a01e:	197b      	adds	r3, r7, r5
 800a020:	781a      	ldrb	r2, [r3, #0]
 800a022:	193b      	adds	r3, r7, r4
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	18d3      	adds	r3, r2, r3
 800a028:	3301      	adds	r3, #1
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	18d2      	adds	r2, r2, r3
 800a02e:	262f      	movs	r6, #47	; 0x2f
 800a030:	19bb      	adds	r3, r7, r6
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a036:	19bb      	adds	r3, r7, r6
 800a038:	781a      	ldrb	r2, [r3, #0]
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	0011      	movs	r1, r2
 800a03e:	0018      	movs	r0, r3
 800a040:	f7ff ff44 	bl	8009ecc <nmea2decimal>
 800a044:	0002      	movs	r2, r0
 800a046:	000b      	movs	r3, r1
 800a048:	623a      	str	r2, [r7, #32]
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	0018      	movs	r0, r3
 800a050:	f000 fa80 	bl	800a554 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a054:	2200      	movs	r2, #0
 800a056:	4b53      	ldr	r3, [pc, #332]	; (800a1a4 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a058:	6a38      	ldr	r0, [r7, #32]
 800a05a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a05c:	f7f7 fb06 	bl	800166c <__aeabi_dmul>
 800a060:	0002      	movs	r2, r0
 800a062:	000b      	movs	r3, r1
 800a064:	0010      	movs	r0, r2
 800a066:	0019      	movs	r1, r3
 800a068:	f008 fa34 	bl	80124d4 <round>
 800a06c:	2200      	movs	r2, #0
 800a06e:	4b4d      	ldr	r3, [pc, #308]	; (800a1a4 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a070:	f7f6 ff02 	bl	8000e78 <__aeabi_ddiv>
 800a074:	0002      	movs	r2, r0
 800a076:	000b      	movs	r3, r1
 800a078:	623a      	str	r2, [r7, #32]
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 800a07c:	494a      	ldr	r1, [pc, #296]	; (800a1a8 <get_my_nmea_gngll_coordinates+0x1fc>)
 800a07e:	68b8      	ldr	r0, [r7, #8]
 800a080:	6a3a      	ldr	r2, [r7, #32]
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	9200      	str	r2, [sp, #0]
 800a086:	9301      	str	r3, [sp, #4]
 800a088:	000a      	movs	r2, r1
 800a08a:	210c      	movs	r1, #12
 800a08c:	f001 fc22 	bl	800b8d4 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a090:	2200      	movs	r2, #0
 800a092:	4b46      	ldr	r3, [pc, #280]	; (800a1ac <get_my_nmea_gngll_coordinates+0x200>)
 800a094:	6a38      	ldr	r0, [r7, #32]
 800a096:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a098:	f7f7 fae8 	bl	800166c <__aeabi_dmul>
 800a09c:	0002      	movs	r2, r0
 800a09e:	000b      	movs	r3, r1
 800a0a0:	0010      	movs	r0, r2
 800a0a2:	0019      	movs	r1, r3
 800a0a4:	f7f8 f944 	bl	8002330 <__aeabi_d2iz>
 800a0a8:	0002      	movs	r2, r0
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	212c      	movs	r1, #44	; 0x2c
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	f7ff fdbb 	bl	8009c30 <my_find_char_position>
 800a0ba:	0003      	movs	r3, r0
 800a0bc:	001a      	movs	r2, r3
 800a0be:	197b      	adds	r3, r7, r5
 800a0c0:	3201      	adds	r2, #1
 800a0c2:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2204      	movs	r2, #4
 800a0c8:	212c      	movs	r1, #44	; 0x2c
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	f7ff fdb0 	bl	8009c30 <my_find_char_position>
 800a0d0:	0003      	movs	r3, r0
 800a0d2:	0019      	movs	r1, r3
 800a0d4:	193b      	adds	r3, r7, r4
 800a0d6:	197a      	adds	r2, r7, r5
 800a0d8:	7812      	ldrb	r2, [r2, #0]
 800a0da:	1a8a      	subs	r2, r1, r2
 800a0dc:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a0de:	193b      	adds	r3, r7, r4
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f000 fa2b 	bl	800a540 <malloc>
 800a0ea:	0003      	movs	r3, r0
 800a0ec:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a0ee:	197b      	adds	r3, r7, r5
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	18d1      	adds	r1, r2, r3
 800a0f6:	193b      	adds	r3, r7, r4
 800a0f8:	781a      	ldrb	r2, [r3, #0]
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f001 fccc 	bl	800ba9a <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a102:	193b      	adds	r3, r7, r4
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	69fa      	ldr	r2, [r7, #28]
 800a108:	18d3      	adds	r3, r2, r3
 800a10a:	2200      	movs	r2, #0
 800a10c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a10e:	197b      	adds	r3, r7, r5
 800a110:	781a      	ldrb	r2, [r3, #0]
 800a112:	193b      	adds	r3, r7, r4
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	18d3      	adds	r3, r2, r3
 800a118:	3301      	adds	r3, #1
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	18d2      	adds	r2, r2, r3
 800a11e:	19bb      	adds	r3, r7, r6
 800a120:	7812      	ldrb	r2, [r2, #0]
 800a122:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a124:	19bb      	adds	r3, r7, r6
 800a126:	781a      	ldrb	r2, [r3, #0]
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	0011      	movs	r1, r2
 800a12c:	0018      	movs	r0, r3
 800a12e:	f7ff fecd 	bl	8009ecc <nmea2decimal>
 800a132:	0002      	movs	r2, r0
 800a134:	000b      	movs	r3, r1
 800a136:	613a      	str	r2, [r7, #16]
 800a138:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	0018      	movs	r0, r3
 800a13e:	f000 fa09 	bl	800a554 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a142:	2200      	movs	r2, #0
 800a144:	4b17      	ldr	r3, [pc, #92]	; (800a1a4 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a146:	6938      	ldr	r0, [r7, #16]
 800a148:	6979      	ldr	r1, [r7, #20]
 800a14a:	f7f7 fa8f 	bl	800166c <__aeabi_dmul>
 800a14e:	0002      	movs	r2, r0
 800a150:	000b      	movs	r3, r1
 800a152:	0010      	movs	r0, r2
 800a154:	0019      	movs	r1, r3
 800a156:	f008 f9bd 	bl	80124d4 <round>
 800a15a:	2200      	movs	r2, #0
 800a15c:	4b11      	ldr	r3, [pc, #68]	; (800a1a4 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a15e:	f7f6 fe8b 	bl	8000e78 <__aeabi_ddiv>
 800a162:	0002      	movs	r2, r0
 800a164:	000b      	movs	r3, r1
 800a166:	613a      	str	r2, [r7, #16]
 800a168:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 800a16a:	490f      	ldr	r1, [pc, #60]	; (800a1a8 <get_my_nmea_gngll_coordinates+0x1fc>)
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	9200      	str	r2, [sp, #0]
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	000a      	movs	r2, r1
 800a178:	210c      	movs	r1, #12
 800a17a:	f001 fbab 	bl	800b8d4 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a17e:	2200      	movs	r2, #0
 800a180:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <get_my_nmea_gngll_coordinates+0x200>)
 800a182:	6938      	ldr	r0, [r7, #16]
 800a184:	6979      	ldr	r1, [r7, #20]
 800a186:	f7f7 fa71 	bl	800166c <__aeabi_dmul>
 800a18a:	0002      	movs	r2, r0
 800a18c:	000b      	movs	r3, r1
 800a18e:	0010      	movs	r0, r2
 800a190:	0019      	movs	r1, r3
 800a192:	f7f8 f8cd 	bl	8002330 <__aeabi_d2iz>
 800a196:	0002      	movs	r2, r0
 800a198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a19a:	601a      	str	r2, [r3, #0]
}
 800a19c:	46c0      	nop			; (mov r8, r8)
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	b00f      	add	sp, #60	; 0x3c
 800a1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a4:	412e8480 	.word	0x412e8480
 800a1a8:	08013e68 	.word	0x08013e68
 800a1ac:	416312d0 	.word	0x416312d0

0800a1b0 <my_nmea_get_gsv_tns>:
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a1b0:	b5b0      	push	{r4, r5, r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a1b8:	240e      	movs	r4, #14
 800a1ba:	193b      	adds	r3, r7, r4
 800a1bc:	2200      	movs	r2, #0
 800a1be:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2203      	movs	r2, #3
 800a1c4:	212c      	movs	r1, #44	; 0x2c
 800a1c6:	0018      	movs	r0, r3
 800a1c8:	f7ff fd32 	bl	8009c30 <my_find_char_position>
 800a1cc:	0003      	movs	r3, r0
 800a1ce:	001a      	movs	r2, r3
 800a1d0:	2517      	movs	r5, #23
 800a1d2:	197b      	adds	r3, r7, r5
 800a1d4:	3201      	adds	r2, #1
 800a1d6:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a1d8:	2003      	movs	r0, #3
 800a1da:	f000 f9b1 	bl	800a540 <malloc>
 800a1de:	0003      	movs	r3, r0
 800a1e0:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a1e2:	197b      	adds	r3, r7, r5
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	18d1      	adds	r1, r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	0018      	movs	r0, r3
 800a1f0:	f001 fc53 	bl	800ba9a <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3302      	adds	r3, #2
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a1fc:	193a      	adds	r2, r7, r4
 800a1fe:	4907      	ldr	r1, [pc, #28]	; (800a21c <my_nmea_get_gsv_tns+0x6c>)
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	0018      	movs	r0, r3
 800a204:	f001 fbba 	bl	800b97c <sscanf>
	free ( s ) ;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	0018      	movs	r0, r3
 800a20c:	f000 f9a2 	bl	800a554 <free>
	return tns ;
 800a210:	193b      	adds	r3, r7, r4
 800a212:	881b      	ldrh	r3, [r3, #0]
}
 800a214:	0018      	movs	r0, r3
 800a216:	46bd      	mov	sp, r7
 800a218:	b006      	add	sp, #24
 800a21a:	bdb0      	pop	{r4, r5, r7, pc}
 800a21c:	08013e70 	.word	0x08013e70

0800a220 <get_my_nmea_rmc_date_yy>:

void get_my_nmea_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a220:	b590      	push	{r4, r7, lr}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2209      	movs	r2, #9
 800a22e:	212c      	movs	r1, #44	; 0x2c
 800a230:	0018      	movs	r0, r3
 800a232:	f7ff fcfd 	bl	8009c30 <my_find_char_position>
 800a236:	0003      	movs	r3, r0
 800a238:	001a      	movs	r2, r3
 800a23a:	2417      	movs	r4, #23
 800a23c:	193b      	adds	r3, r7, r4
 800a23e:	3205      	adds	r2, #5
 800a240:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a242:	2003      	movs	r0, #3
 800a244:	f000 f97c 	bl	800a540 <malloc>
 800a248:	0003      	movs	r3, r0
 800a24a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a24c:	193b      	adds	r3, r7, r4
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	18d1      	adds	r1, r2, r3
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	2202      	movs	r2, #2
 800a258:	0018      	movs	r0, r3
 800a25a:	f001 fc1e 	bl	800ba9a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	3302      	adds	r3, #2
 800a262:	2200      	movs	r2, #0
 800a264:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a266:	240e      	movs	r4, #14
 800a268:	193a      	adds	r2, r7, r4
 800a26a:	4909      	ldr	r1, [pc, #36]	; (800a290 <get_my_nmea_rmc_date_yy+0x70>)
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	0018      	movs	r0, r3
 800a270:	f001 fb84 	bl	800b97c <sscanf>
	free ( s ) ;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	0018      	movs	r0, r3
 800a278:	f000 f96c 	bl	800a554 <free>
	*yy = (uint8_t) temp ;
 800a27c:	193b      	adds	r3, r7, r4
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	b2da      	uxtb	r2, r3
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	701a      	strb	r2, [r3, #0]

}
 800a286:	46c0      	nop			; (mov r8, r8)
 800a288:	46bd      	mov	sp, r7
 800a28a:	b007      	add	sp, #28
 800a28c:	bd90      	pop	{r4, r7, pc}
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	08013e70 	.word	0x08013e70

0800a294 <get_my_nmea_rmc_date_mm>:
void get_my_nmea_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a294:	b590      	push	{r4, r7, lr}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2209      	movs	r2, #9
 800a2a2:	212c      	movs	r1, #44	; 0x2c
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	f7ff fcc3 	bl	8009c30 <my_find_char_position>
 800a2aa:	0003      	movs	r3, r0
 800a2ac:	001a      	movs	r2, r3
 800a2ae:	2417      	movs	r4, #23
 800a2b0:	193b      	adds	r3, r7, r4
 800a2b2:	3203      	adds	r2, #3
 800a2b4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a2b6:	2003      	movs	r0, #3
 800a2b8:	f000 f942 	bl	800a540 <malloc>
 800a2bc:	0003      	movs	r3, r0
 800a2be:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a2c0:	193b      	adds	r3, r7, r4
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	18d1      	adds	r1, r2, r3
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	f001 fbe4 	bl	800ba9a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	3302      	adds	r3, #2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a2da:	240e      	movs	r4, #14
 800a2dc:	193a      	adds	r2, r7, r4
 800a2de:	4909      	ldr	r1, [pc, #36]	; (800a304 <get_my_nmea_rmc_date_mm+0x70>)
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	f001 fb4a 	bl	800b97c <sscanf>
	free ( s ) ;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	f000 f932 	bl	800a554 <free>
	*mm = (uint8_t) temp ;
 800a2f0:	193b      	adds	r3, r7, r4
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	701a      	strb	r2, [r3, #0]

}
 800a2fa:	46c0      	nop			; (mov r8, r8)
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	b007      	add	sp, #28
 800a300:	bd90      	pop	{r4, r7, pc}
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	08013e70 	.word	0x08013e70

0800a308 <get_my_nmea_rmc_date_dd>:
void get_my_nmea_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2209      	movs	r2, #9
 800a316:	212c      	movs	r1, #44	; 0x2c
 800a318:	0018      	movs	r0, r3
 800a31a:	f7ff fc89 	bl	8009c30 <my_find_char_position>
 800a31e:	0003      	movs	r3, r0
 800a320:	001a      	movs	r2, r3
 800a322:	2417      	movs	r4, #23
 800a324:	193b      	adds	r3, r7, r4
 800a326:	3201      	adds	r2, #1
 800a328:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a32a:	2003      	movs	r0, #3
 800a32c:	f000 f908 	bl	800a540 <malloc>
 800a330:	0003      	movs	r3, r0
 800a332:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a334:	193b      	adds	r3, r7, r4
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	18d1      	adds	r1, r2, r3
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	2202      	movs	r2, #2
 800a340:	0018      	movs	r0, r3
 800a342:	f001 fbaa 	bl	800ba9a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	3302      	adds	r3, #2
 800a34a:	2200      	movs	r2, #0
 800a34c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a34e:	240e      	movs	r4, #14
 800a350:	193a      	adds	r2, r7, r4
 800a352:	4909      	ldr	r1, [pc, #36]	; (800a378 <get_my_nmea_rmc_date_dd+0x70>)
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	0018      	movs	r0, r3
 800a358:	f001 fb10 	bl	800b97c <sscanf>
	free ( s ) ;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	0018      	movs	r0, r3
 800a360:	f000 f8f8 	bl	800a554 <free>
	*dd = (uint8_t) temp ;
 800a364:	193b      	adds	r3, r7, r4
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	701a      	strb	r2, [r3, #0]

}
 800a36e:	46c0      	nop			; (mov r8, r8)
 800a370:	46bd      	mov	sp, r7
 800a372:	b007      	add	sp, #28
 800a374:	bd90      	pop	{r4, r7, pc}
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	08013e70 	.word	0x08013e70

0800a37c <get_my_nmea_rmc_utc_hh>:
void get_my_nmea_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a37c:	b590      	push	{r4, r7, lr}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	212c      	movs	r1, #44	; 0x2c
 800a38c:	0018      	movs	r0, r3
 800a38e:	f7ff fc4f 	bl	8009c30 <my_find_char_position>
 800a392:	0003      	movs	r3, r0
 800a394:	001a      	movs	r2, r3
 800a396:	2417      	movs	r4, #23
 800a398:	193b      	adds	r3, r7, r4
 800a39a:	3201      	adds	r2, #1
 800a39c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a39e:	2003      	movs	r0, #3
 800a3a0:	f000 f8ce 	bl	800a540 <malloc>
 800a3a4:	0003      	movs	r3, r0
 800a3a6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a3a8:	193b      	adds	r3, r7, r4
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	18d1      	adds	r1, r2, r3
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	0018      	movs	r0, r3
 800a3b6:	f001 fb70 	bl	800ba9a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	3302      	adds	r3, #2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a3c2:	240e      	movs	r4, #14
 800a3c4:	193a      	adds	r2, r7, r4
 800a3c6:	4909      	ldr	r1, [pc, #36]	; (800a3ec <get_my_nmea_rmc_utc_hh+0x70>)
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f001 fad6 	bl	800b97c <sscanf>
	free ( s ) ;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f000 f8be 	bl	800a554 <free>
	*hh = (uint8_t) temp ;
 800a3d8:	193b      	adds	r3, r7, r4
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	701a      	strb	r2, [r3, #0]

}
 800a3e2:	46c0      	nop			; (mov r8, r8)
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	b007      	add	sp, #28
 800a3e8:	bd90      	pop	{r4, r7, pc}
 800a3ea:	46c0      	nop			; (mov r8, r8)
 800a3ec:	08013e70 	.word	0x08013e70

0800a3f0 <get_my_nmea_rmc_utc_mm>:
void get_my_nmea_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a3f0:	b590      	push	{r4, r7, lr}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	212c      	movs	r1, #44	; 0x2c
 800a400:	0018      	movs	r0, r3
 800a402:	f7ff fc15 	bl	8009c30 <my_find_char_position>
 800a406:	0003      	movs	r3, r0
 800a408:	001a      	movs	r2, r3
 800a40a:	2417      	movs	r4, #23
 800a40c:	193b      	adds	r3, r7, r4
 800a40e:	3203      	adds	r2, #3
 800a410:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a412:	2003      	movs	r0, #3
 800a414:	f000 f894 	bl	800a540 <malloc>
 800a418:	0003      	movs	r3, r0
 800a41a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a41c:	193b      	adds	r3, r7, r4
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	18d1      	adds	r1, r2, r3
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	2202      	movs	r2, #2
 800a428:	0018      	movs	r0, r3
 800a42a:	f001 fb36 	bl	800ba9a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	3302      	adds	r3, #2
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a436:	240e      	movs	r4, #14
 800a438:	193a      	adds	r2, r7, r4
 800a43a:	4909      	ldr	r1, [pc, #36]	; (800a460 <get_my_nmea_rmc_utc_mm+0x70>)
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	0018      	movs	r0, r3
 800a440:	f001 fa9c 	bl	800b97c <sscanf>
	free ( s ) ;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	0018      	movs	r0, r3
 800a448:	f000 f884 	bl	800a554 <free>
	*mm = (uint8_t) temp ;
 800a44c:	193b      	adds	r3, r7, r4
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	b2da      	uxtb	r2, r3
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	701a      	strb	r2, [r3, #0]

}
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	46bd      	mov	sp, r7
 800a45a:	b007      	add	sp, #28
 800a45c:	bd90      	pop	{r4, r7, pc}
 800a45e:	46c0      	nop			; (mov r8, r8)
 800a460:	08013e70 	.word	0x08013e70

0800a464 <get_my_nmea_rmc_utc_ss>:
void get_my_nmea_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a464:	b590      	push	{r4, r7, lr}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	212c      	movs	r1, #44	; 0x2c
 800a474:	0018      	movs	r0, r3
 800a476:	f7ff fbdb 	bl	8009c30 <my_find_char_position>
 800a47a:	0003      	movs	r3, r0
 800a47c:	001a      	movs	r2, r3
 800a47e:	2417      	movs	r4, #23
 800a480:	193b      	adds	r3, r7, r4
 800a482:	3205      	adds	r2, #5
 800a484:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a486:	2003      	movs	r0, #3
 800a488:	f000 f85a 	bl	800a540 <malloc>
 800a48c:	0003      	movs	r3, r0
 800a48e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a490:	193b      	adds	r3, r7, r4
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	18d1      	adds	r1, r2, r3
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2202      	movs	r2, #2
 800a49c:	0018      	movs	r0, r3
 800a49e:	f001 fafc 	bl	800ba9a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	3302      	adds	r3, #2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a4aa:	240e      	movs	r4, #14
 800a4ac:	193a      	adds	r2, r7, r4
 800a4ae:	4909      	ldr	r1, [pc, #36]	; (800a4d4 <get_my_nmea_rmc_utc_ss+0x70>)
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f001 fa62 	bl	800b97c <sscanf>
	free ( s ) ;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	f000 f84a 	bl	800a554 <free>
	*ss = (uint8_t) temp ;
 800a4c0:	193b      	adds	r3, r7, r4
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	701a      	strb	r2, [r3, #0]

}
 800a4ca:	46c0      	nop			; (mov r8, r8)
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	b007      	add	sp, #28
 800a4d0:	bd90      	pop	{r4, r7, pc}
 800a4d2:	46c0      	nop			; (mov r8, r8)
 800a4d4:	08013e70 	.word	0x08013e70

0800a4d8 <get_my_nmea_rmc_utc_sss>:
void get_my_nmea_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a4d8:	b590      	push	{r4, r7, lr}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	212c      	movs	r1, #44	; 0x2c
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f7ff fba1 	bl	8009c30 <my_find_char_position>
 800a4ee:	0003      	movs	r3, r0
 800a4f0:	001a      	movs	r2, r3
 800a4f2:	240f      	movs	r4, #15
 800a4f4:	193b      	adds	r3, r7, r4
 800a4f6:	3208      	adds	r2, #8
 800a4f8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a4fa:	2004      	movs	r0, #4
 800a4fc:	f000 f820 	bl	800a540 <malloc>
 800a500:	0003      	movs	r3, r0
 800a502:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a504:	193b      	adds	r3, r7, r4
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	18d1      	adds	r1, r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2203      	movs	r2, #3
 800a510:	0018      	movs	r0, r3
 800a512:	f001 fac2 	bl	800ba9a <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3303      	adds	r3, #3
 800a51a:	2200      	movs	r2, #0
 800a51c:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	4906      	ldr	r1, [pc, #24]	; (800a53c <get_my_nmea_rmc_utc_sss+0x64>)
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	0018      	movs	r0, r3
 800a526:	f001 fa29 	bl	800b97c <sscanf>
	free ( s ) ;
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	0018      	movs	r0, r3
 800a52e:	f000 f811 	bl	800a554 <free>
}
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	46bd      	mov	sp, r7
 800a536:	b005      	add	sp, #20
 800a538:	bd90      	pop	{r4, r7, pc}
 800a53a:	46c0      	nop			; (mov r8, r8)
 800a53c:	08013e74 	.word	0x08013e74

0800a540 <malloc>:
 800a540:	b510      	push	{r4, lr}
 800a542:	4b03      	ldr	r3, [pc, #12]	; (800a550 <malloc+0x10>)
 800a544:	0001      	movs	r1, r0
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	f000 f80e 	bl	800a568 <_malloc_r>
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	200006d8 	.word	0x200006d8

0800a554 <free>:
 800a554:	b510      	push	{r4, lr}
 800a556:	4b03      	ldr	r3, [pc, #12]	; (800a564 <free+0x10>)
 800a558:	0001      	movs	r1, r0
 800a55a:	6818      	ldr	r0, [r3, #0]
 800a55c:	f001 fbe4 	bl	800bd28 <_free_r>
 800a560:	bd10      	pop	{r4, pc}
 800a562:	46c0      	nop			; (mov r8, r8)
 800a564:	200006d8 	.word	0x200006d8

0800a568 <_malloc_r>:
 800a568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a56a:	000d      	movs	r5, r1
 800a56c:	b087      	sub	sp, #28
 800a56e:	350b      	adds	r5, #11
 800a570:	9001      	str	r0, [sp, #4]
 800a572:	2d16      	cmp	r5, #22
 800a574:	d908      	bls.n	800a588 <_malloc_r+0x20>
 800a576:	2207      	movs	r2, #7
 800a578:	4395      	bics	r5, r2
 800a57a:	d506      	bpl.n	800a58a <_malloc_r+0x22>
 800a57c:	230c      	movs	r3, #12
 800a57e:	9a01      	ldr	r2, [sp, #4]
 800a580:	6013      	str	r3, [r2, #0]
 800a582:	2000      	movs	r0, #0
 800a584:	b007      	add	sp, #28
 800a586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a588:	2510      	movs	r5, #16
 800a58a:	42a9      	cmp	r1, r5
 800a58c:	d8f6      	bhi.n	800a57c <_malloc_r+0x14>
 800a58e:	9801      	ldr	r0, [sp, #4]
 800a590:	f000 f9fe 	bl	800a990 <__malloc_lock>
 800a594:	23fc      	movs	r3, #252	; 0xfc
 800a596:	4ebe      	ldr	r6, [pc, #760]	; (800a890 <_malloc_r+0x328>)
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	429d      	cmp	r5, r3
 800a59c:	d219      	bcs.n	800a5d2 <_malloc_r+0x6a>
 800a59e:	002a      	movs	r2, r5
 800a5a0:	3208      	adds	r2, #8
 800a5a2:	18b2      	adds	r2, r6, r2
 800a5a4:	0011      	movs	r1, r2
 800a5a6:	6854      	ldr	r4, [r2, #4]
 800a5a8:	3908      	subs	r1, #8
 800a5aa:	08eb      	lsrs	r3, r5, #3
 800a5ac:	428c      	cmp	r4, r1
 800a5ae:	d103      	bne.n	800a5b8 <_malloc_r+0x50>
 800a5b0:	68d4      	ldr	r4, [r2, #12]
 800a5b2:	3302      	adds	r3, #2
 800a5b4:	42a2      	cmp	r2, r4
 800a5b6:	d022      	beq.n	800a5fe <_malloc_r+0x96>
 800a5b8:	2203      	movs	r2, #3
 800a5ba:	6863      	ldr	r3, [r4, #4]
 800a5bc:	68a1      	ldr	r1, [r4, #8]
 800a5be:	4393      	bics	r3, r2
 800a5c0:	68e2      	ldr	r2, [r4, #12]
 800a5c2:	18e3      	adds	r3, r4, r3
 800a5c4:	60ca      	str	r2, [r1, #12]
 800a5c6:	6091      	str	r1, [r2, #8]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	6859      	ldr	r1, [r3, #4]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	605a      	str	r2, [r3, #4]
 800a5d0:	e02a      	b.n	800a628 <_malloc_r+0xc0>
 800a5d2:	233f      	movs	r3, #63	; 0x3f
 800a5d4:	0a6a      	lsrs	r2, r5, #9
 800a5d6:	d003      	beq.n	800a5e0 <_malloc_r+0x78>
 800a5d8:	2a04      	cmp	r2, #4
 800a5da:	d82b      	bhi.n	800a634 <_malloc_r+0xcc>
 800a5dc:	09ab      	lsrs	r3, r5, #6
 800a5de:	3338      	adds	r3, #56	; 0x38
 800a5e0:	2203      	movs	r2, #3
 800a5e2:	4694      	mov	ip, r2
 800a5e4:	00d9      	lsls	r1, r3, #3
 800a5e6:	1989      	adds	r1, r1, r6
 800a5e8:	68cc      	ldr	r4, [r1, #12]
 800a5ea:	428c      	cmp	r4, r1
 800a5ec:	d006      	beq.n	800a5fc <_malloc_r+0x94>
 800a5ee:	4660      	mov	r0, ip
 800a5f0:	6862      	ldr	r2, [r4, #4]
 800a5f2:	4382      	bics	r2, r0
 800a5f4:	1b57      	subs	r7, r2, r5
 800a5f6:	2f0f      	cmp	r7, #15
 800a5f8:	dd34      	ble.n	800a664 <_malloc_r+0xfc>
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	6934      	ldr	r4, [r6, #16]
 800a600:	49a4      	ldr	r1, [pc, #656]	; (800a894 <_malloc_r+0x32c>)
 800a602:	428c      	cmp	r4, r1
 800a604:	d055      	beq.n	800a6b2 <_malloc_r+0x14a>
 800a606:	2003      	movs	r0, #3
 800a608:	6862      	ldr	r2, [r4, #4]
 800a60a:	4382      	bics	r2, r0
 800a60c:	1b50      	subs	r0, r2, r5
 800a60e:	280f      	cmp	r0, #15
 800a610:	dd36      	ble.n	800a680 <_malloc_r+0x118>
 800a612:	2301      	movs	r3, #1
 800a614:	1967      	adds	r7, r4, r5
 800a616:	431d      	orrs	r5, r3
 800a618:	4303      	orrs	r3, r0
 800a61a:	6065      	str	r5, [r4, #4]
 800a61c:	6177      	str	r7, [r6, #20]
 800a61e:	6137      	str	r7, [r6, #16]
 800a620:	60f9      	str	r1, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607b      	str	r3, [r7, #4]
 800a626:	50a0      	str	r0, [r4, r2]
 800a628:	9801      	ldr	r0, [sp, #4]
 800a62a:	f000 f9b9 	bl	800a9a0 <__malloc_unlock>
 800a62e:	0020      	movs	r0, r4
 800a630:	3008      	adds	r0, #8
 800a632:	e7a7      	b.n	800a584 <_malloc_r+0x1c>
 800a634:	2a14      	cmp	r2, #20
 800a636:	d802      	bhi.n	800a63e <_malloc_r+0xd6>
 800a638:	0013      	movs	r3, r2
 800a63a:	335b      	adds	r3, #91	; 0x5b
 800a63c:	e7d0      	b.n	800a5e0 <_malloc_r+0x78>
 800a63e:	2a54      	cmp	r2, #84	; 0x54
 800a640:	d802      	bhi.n	800a648 <_malloc_r+0xe0>
 800a642:	0b2b      	lsrs	r3, r5, #12
 800a644:	336e      	adds	r3, #110	; 0x6e
 800a646:	e7cb      	b.n	800a5e0 <_malloc_r+0x78>
 800a648:	23aa      	movs	r3, #170	; 0xaa
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d802      	bhi.n	800a656 <_malloc_r+0xee>
 800a650:	0beb      	lsrs	r3, r5, #15
 800a652:	3377      	adds	r3, #119	; 0x77
 800a654:	e7c4      	b.n	800a5e0 <_malloc_r+0x78>
 800a656:	4990      	ldr	r1, [pc, #576]	; (800a898 <_malloc_r+0x330>)
 800a658:	237e      	movs	r3, #126	; 0x7e
 800a65a:	428a      	cmp	r2, r1
 800a65c:	d8c0      	bhi.n	800a5e0 <_malloc_r+0x78>
 800a65e:	0cab      	lsrs	r3, r5, #18
 800a660:	337c      	adds	r3, #124	; 0x7c
 800a662:	e7bd      	b.n	800a5e0 <_malloc_r+0x78>
 800a664:	68e0      	ldr	r0, [r4, #12]
 800a666:	2f00      	cmp	r7, #0
 800a668:	db08      	blt.n	800a67c <_malloc_r+0x114>
 800a66a:	68a3      	ldr	r3, [r4, #8]
 800a66c:	60d8      	str	r0, [r3, #12]
 800a66e:	6083      	str	r3, [r0, #8]
 800a670:	2301      	movs	r3, #1
 800a672:	18a2      	adds	r2, r4, r2
 800a674:	6851      	ldr	r1, [r2, #4]
 800a676:	430b      	orrs	r3, r1
 800a678:	6053      	str	r3, [r2, #4]
 800a67a:	e7d5      	b.n	800a628 <_malloc_r+0xc0>
 800a67c:	0004      	movs	r4, r0
 800a67e:	e7b4      	b.n	800a5ea <_malloc_r+0x82>
 800a680:	6171      	str	r1, [r6, #20]
 800a682:	6131      	str	r1, [r6, #16]
 800a684:	2800      	cmp	r0, #0
 800a686:	daf3      	bge.n	800a670 <_malloc_r+0x108>
 800a688:	6871      	ldr	r1, [r6, #4]
 800a68a:	468c      	mov	ip, r1
 800a68c:	2180      	movs	r1, #128	; 0x80
 800a68e:	0089      	lsls	r1, r1, #2
 800a690:	428a      	cmp	r2, r1
 800a692:	d300      	bcc.n	800a696 <_malloc_r+0x12e>
 800a694:	e08c      	b.n	800a7b0 <_malloc_r+0x248>
 800a696:	08d1      	lsrs	r1, r2, #3
 800a698:	0950      	lsrs	r0, r2, #5
 800a69a:	2201      	movs	r2, #1
 800a69c:	4082      	lsls	r2, r0
 800a69e:	4660      	mov	r0, ip
 800a6a0:	4302      	orrs	r2, r0
 800a6a2:	6072      	str	r2, [r6, #4]
 800a6a4:	00ca      	lsls	r2, r1, #3
 800a6a6:	1992      	adds	r2, r2, r6
 800a6a8:	6891      	ldr	r1, [r2, #8]
 800a6aa:	60e2      	str	r2, [r4, #12]
 800a6ac:	60a1      	str	r1, [r4, #8]
 800a6ae:	6094      	str	r4, [r2, #8]
 800a6b0:	60cc      	str	r4, [r1, #12]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	4876      	ldr	r0, [pc, #472]	; (800a890 <_malloc_r+0x328>)
 800a6b6:	1099      	asrs	r1, r3, #2
 800a6b8:	408a      	lsls	r2, r1
 800a6ba:	6841      	ldr	r1, [r0, #4]
 800a6bc:	4291      	cmp	r1, r2
 800a6be:	d328      	bcc.n	800a712 <_malloc_r+0x1aa>
 800a6c0:	420a      	tst	r2, r1
 800a6c2:	d105      	bne.n	800a6d0 <_malloc_r+0x168>
 800a6c4:	2403      	movs	r4, #3
 800a6c6:	43a3      	bics	r3, r4
 800a6c8:	0052      	lsls	r2, r2, #1
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	420a      	tst	r2, r1
 800a6ce:	d0fb      	beq.n	800a6c8 <_malloc_r+0x160>
 800a6d0:	496f      	ldr	r1, [pc, #444]	; (800a890 <_malloc_r+0x328>)
 800a6d2:	9104      	str	r1, [sp, #16]
 800a6d4:	00d9      	lsls	r1, r3, #3
 800a6d6:	1841      	adds	r1, r0, r1
 800a6d8:	468c      	mov	ip, r1
 800a6da:	000f      	movs	r7, r1
 800a6dc:	9302      	str	r3, [sp, #8]
 800a6de:	68fc      	ldr	r4, [r7, #12]
 800a6e0:	42bc      	cmp	r4, r7
 800a6e2:	d000      	beq.n	800a6e6 <_malloc_r+0x17e>
 800a6e4:	e09b      	b.n	800a81e <_malloc_r+0x2b6>
 800a6e6:	2403      	movs	r4, #3
 800a6e8:	9902      	ldr	r1, [sp, #8]
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	3101      	adds	r1, #1
 800a6ee:	9102      	str	r1, [sp, #8]
 800a6f0:	4221      	tst	r1, r4
 800a6f2:	d1f4      	bne.n	800a6de <_malloc_r+0x176>
 800a6f4:	2103      	movs	r1, #3
 800a6f6:	420b      	tst	r3, r1
 800a6f8:	d000      	beq.n	800a6fc <_malloc_r+0x194>
 800a6fa:	e0b7      	b.n	800a86c <_malloc_r+0x304>
 800a6fc:	6843      	ldr	r3, [r0, #4]
 800a6fe:	4393      	bics	r3, r2
 800a700:	6043      	str	r3, [r0, #4]
 800a702:	9b04      	ldr	r3, [sp, #16]
 800a704:	0052      	lsls	r2, r2, #1
 800a706:	6859      	ldr	r1, [r3, #4]
 800a708:	4291      	cmp	r1, r2
 800a70a:	d302      	bcc.n	800a712 <_malloc_r+0x1aa>
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	d000      	beq.n	800a712 <_malloc_r+0x1aa>
 800a710:	e0bb      	b.n	800a88a <_malloc_r+0x322>
 800a712:	2203      	movs	r2, #3
 800a714:	6883      	ldr	r3, [r0, #8]
 800a716:	9302      	str	r3, [sp, #8]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	4393      	bics	r3, r2
 800a71c:	9303      	str	r3, [sp, #12]
 800a71e:	42ab      	cmp	r3, r5
 800a720:	d303      	bcc.n	800a72a <_malloc_r+0x1c2>
 800a722:	1b59      	subs	r1, r3, r5
 800a724:	290f      	cmp	r1, #15
 800a726:	dd00      	ble.n	800a72a <_malloc_r+0x1c2>
 800a728:	e123      	b.n	800a972 <_malloc_r+0x40a>
 800a72a:	9b02      	ldr	r3, [sp, #8]
 800a72c:	9a03      	ldr	r2, [sp, #12]
 800a72e:	2008      	movs	r0, #8
 800a730:	189e      	adds	r6, r3, r2
 800a732:	4b5a      	ldr	r3, [pc, #360]	; (800a89c <_malloc_r+0x334>)
 800a734:	681f      	ldr	r7, [r3, #0]
 800a736:	f001 fa71 	bl	800bc1c <sysconf>
 800a73a:	4b59      	ldr	r3, [pc, #356]	; (800a8a0 <_malloc_r+0x338>)
 800a73c:	3710      	adds	r7, #16
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	197f      	adds	r7, r7, r5
 800a742:	9004      	str	r0, [sp, #16]
 800a744:	3301      	adds	r3, #1
 800a746:	d003      	beq.n	800a750 <_malloc_r+0x1e8>
 800a748:	1e7b      	subs	r3, r7, #1
 800a74a:	181b      	adds	r3, r3, r0
 800a74c:	4247      	negs	r7, r0
 800a74e:	401f      	ands	r7, r3
 800a750:	0039      	movs	r1, r7
 800a752:	9801      	ldr	r0, [sp, #4]
 800a754:	f001 fa0e 	bl	800bb74 <_sbrk_r>
 800a758:	0004      	movs	r4, r0
 800a75a:	1c43      	adds	r3, r0, #1
 800a75c:	d100      	bne.n	800a760 <_malloc_r+0x1f8>
 800a75e:	e0de      	b.n	800a91e <_malloc_r+0x3b6>
 800a760:	4286      	cmp	r6, r0
 800a762:	d904      	bls.n	800a76e <_malloc_r+0x206>
 800a764:	4b4a      	ldr	r3, [pc, #296]	; (800a890 <_malloc_r+0x328>)
 800a766:	9a02      	ldr	r2, [sp, #8]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d000      	beq.n	800a76e <_malloc_r+0x206>
 800a76c:	e0d7      	b.n	800a91e <_malloc_r+0x3b6>
 800a76e:	4a4d      	ldr	r2, [pc, #308]	; (800a8a4 <_malloc_r+0x33c>)
 800a770:	6813      	ldr	r3, [r2, #0]
 800a772:	18fb      	adds	r3, r7, r3
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	9a04      	ldr	r2, [sp, #16]
 800a778:	3a01      	subs	r2, #1
 800a77a:	42a6      	cmp	r6, r4
 800a77c:	d000      	beq.n	800a780 <_malloc_r+0x218>
 800a77e:	e097      	b.n	800a8b0 <_malloc_r+0x348>
 800a780:	4216      	tst	r6, r2
 800a782:	d000      	beq.n	800a786 <_malloc_r+0x21e>
 800a784:	e094      	b.n	800a8b0 <_malloc_r+0x348>
 800a786:	4b42      	ldr	r3, [pc, #264]	; (800a890 <_malloc_r+0x328>)
 800a788:	689a      	ldr	r2, [r3, #8]
 800a78a:	9b03      	ldr	r3, [sp, #12]
 800a78c:	19df      	adds	r7, r3, r7
 800a78e:	2301      	movs	r3, #1
 800a790:	433b      	orrs	r3, r7
 800a792:	6053      	str	r3, [r2, #4]
 800a794:	4b43      	ldr	r3, [pc, #268]	; (800a8a4 <_malloc_r+0x33c>)
 800a796:	4a44      	ldr	r2, [pc, #272]	; (800a8a8 <_malloc_r+0x340>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6811      	ldr	r1, [r2, #0]
 800a79c:	428b      	cmp	r3, r1
 800a79e:	d900      	bls.n	800a7a2 <_malloc_r+0x23a>
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	4a42      	ldr	r2, [pc, #264]	; (800a8ac <_malloc_r+0x344>)
 800a7a4:	6811      	ldr	r1, [r2, #0]
 800a7a6:	428b      	cmp	r3, r1
 800a7a8:	d800      	bhi.n	800a7ac <_malloc_r+0x244>
 800a7aa:	e0b8      	b.n	800a91e <_malloc_r+0x3b6>
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	e0b6      	b.n	800a91e <_malloc_r+0x3b6>
 800a7b0:	0a50      	lsrs	r0, r2, #9
 800a7b2:	2804      	cmp	r0, #4
 800a7b4:	d811      	bhi.n	800a7da <_malloc_r+0x272>
 800a7b6:	0991      	lsrs	r1, r2, #6
 800a7b8:	3138      	adds	r1, #56	; 0x38
 800a7ba:	00cf      	lsls	r7, r1, #3
 800a7bc:	19bf      	adds	r7, r7, r6
 800a7be:	68b8      	ldr	r0, [r7, #8]
 800a7c0:	4287      	cmp	r7, r0
 800a7c2:	d125      	bne.n	800a810 <_malloc_r+0x2a8>
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	1089      	asrs	r1, r1, #2
 800a7c8:	408a      	lsls	r2, r1
 800a7ca:	4661      	mov	r1, ip
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	6072      	str	r2, [r6, #4]
 800a7d0:	60e7      	str	r7, [r4, #12]
 800a7d2:	60a0      	str	r0, [r4, #8]
 800a7d4:	60bc      	str	r4, [r7, #8]
 800a7d6:	60c4      	str	r4, [r0, #12]
 800a7d8:	e76b      	b.n	800a6b2 <_malloc_r+0x14a>
 800a7da:	2814      	cmp	r0, #20
 800a7dc:	d802      	bhi.n	800a7e4 <_malloc_r+0x27c>
 800a7de:	0001      	movs	r1, r0
 800a7e0:	315b      	adds	r1, #91	; 0x5b
 800a7e2:	e7ea      	b.n	800a7ba <_malloc_r+0x252>
 800a7e4:	2854      	cmp	r0, #84	; 0x54
 800a7e6:	d802      	bhi.n	800a7ee <_malloc_r+0x286>
 800a7e8:	0b11      	lsrs	r1, r2, #12
 800a7ea:	316e      	adds	r1, #110	; 0x6e
 800a7ec:	e7e5      	b.n	800a7ba <_malloc_r+0x252>
 800a7ee:	21aa      	movs	r1, #170	; 0xaa
 800a7f0:	0049      	lsls	r1, r1, #1
 800a7f2:	4288      	cmp	r0, r1
 800a7f4:	d802      	bhi.n	800a7fc <_malloc_r+0x294>
 800a7f6:	0bd1      	lsrs	r1, r2, #15
 800a7f8:	3177      	adds	r1, #119	; 0x77
 800a7fa:	e7de      	b.n	800a7ba <_malloc_r+0x252>
 800a7fc:	4f26      	ldr	r7, [pc, #152]	; (800a898 <_malloc_r+0x330>)
 800a7fe:	217e      	movs	r1, #126	; 0x7e
 800a800:	42b8      	cmp	r0, r7
 800a802:	d8da      	bhi.n	800a7ba <_malloc_r+0x252>
 800a804:	0c91      	lsrs	r1, r2, #18
 800a806:	317c      	adds	r1, #124	; 0x7c
 800a808:	e7d7      	b.n	800a7ba <_malloc_r+0x252>
 800a80a:	6880      	ldr	r0, [r0, #8]
 800a80c:	4287      	cmp	r7, r0
 800a80e:	d004      	beq.n	800a81a <_malloc_r+0x2b2>
 800a810:	2603      	movs	r6, #3
 800a812:	6841      	ldr	r1, [r0, #4]
 800a814:	43b1      	bics	r1, r6
 800a816:	4291      	cmp	r1, r2
 800a818:	d8f7      	bhi.n	800a80a <_malloc_r+0x2a2>
 800a81a:	68c7      	ldr	r7, [r0, #12]
 800a81c:	e7d8      	b.n	800a7d0 <_malloc_r+0x268>
 800a81e:	2603      	movs	r6, #3
 800a820:	6861      	ldr	r1, [r4, #4]
 800a822:	43b1      	bics	r1, r6
 800a824:	9103      	str	r1, [sp, #12]
 800a826:	68e6      	ldr	r6, [r4, #12]
 800a828:	1b49      	subs	r1, r1, r5
 800a82a:	290f      	cmp	r1, #15
 800a82c:	dd10      	ble.n	800a850 <_malloc_r+0x2e8>
 800a82e:	2201      	movs	r2, #1
 800a830:	1963      	adds	r3, r4, r5
 800a832:	4315      	orrs	r5, r2
 800a834:	6065      	str	r5, [r4, #4]
 800a836:	68a5      	ldr	r5, [r4, #8]
 800a838:	430a      	orrs	r2, r1
 800a83a:	60ee      	str	r6, [r5, #12]
 800a83c:	60b5      	str	r5, [r6, #8]
 800a83e:	6143      	str	r3, [r0, #20]
 800a840:	6103      	str	r3, [r0, #16]
 800a842:	4814      	ldr	r0, [pc, #80]	; (800a894 <_malloc_r+0x32c>)
 800a844:	605a      	str	r2, [r3, #4]
 800a846:	60d8      	str	r0, [r3, #12]
 800a848:	6098      	str	r0, [r3, #8]
 800a84a:	9b03      	ldr	r3, [sp, #12]
 800a84c:	50e1      	str	r1, [r4, r3]
 800a84e:	e6eb      	b.n	800a628 <_malloc_r+0xc0>
 800a850:	2900      	cmp	r1, #0
 800a852:	db09      	blt.n	800a868 <_malloc_r+0x300>
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	18e1      	adds	r1, r4, r3
 800a858:	2301      	movs	r3, #1
 800a85a:	684a      	ldr	r2, [r1, #4]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	604b      	str	r3, [r1, #4]
 800a860:	68a3      	ldr	r3, [r4, #8]
 800a862:	60de      	str	r6, [r3, #12]
 800a864:	60b3      	str	r3, [r6, #8]
 800a866:	e6df      	b.n	800a628 <_malloc_r+0xc0>
 800a868:	0034      	movs	r4, r6
 800a86a:	e739      	b.n	800a6e0 <_malloc_r+0x178>
 800a86c:	2108      	movs	r1, #8
 800a86e:	4249      	negs	r1, r1
 800a870:	448c      	add	ip, r1
 800a872:	4661      	mov	r1, ip
 800a874:	6889      	ldr	r1, [r1, #8]
 800a876:	3b01      	subs	r3, #1
 800a878:	4561      	cmp	r1, ip
 800a87a:	d100      	bne.n	800a87e <_malloc_r+0x316>
 800a87c:	e73a      	b.n	800a6f4 <_malloc_r+0x18c>
 800a87e:	e740      	b.n	800a702 <_malloc_r+0x19a>
 800a880:	3304      	adds	r3, #4
 800a882:	0052      	lsls	r2, r2, #1
 800a884:	420a      	tst	r2, r1
 800a886:	d0fb      	beq.n	800a880 <_malloc_r+0x318>
 800a888:	e724      	b.n	800a6d4 <_malloc_r+0x16c>
 800a88a:	9b02      	ldr	r3, [sp, #8]
 800a88c:	e7fa      	b.n	800a884 <_malloc_r+0x31c>
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	2000002c 	.word	0x2000002c
 800a894:	20000034 	.word	0x20000034
 800a898:	00000554 	.word	0x00000554
 800a89c:	20000b6c 	.word	0x20000b6c
 800a8a0:	20000434 	.word	0x20000434
 800a8a4:	20000b3c 	.word	0x20000b3c
 800a8a8:	20000b64 	.word	0x20000b64
 800a8ac:	20000b68 	.word	0x20000b68
 800a8b0:	4934      	ldr	r1, [pc, #208]	; (800a984 <_malloc_r+0x41c>)
 800a8b2:	6808      	ldr	r0, [r1, #0]
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d140      	bne.n	800a93a <_malloc_r+0x3d2>
 800a8b8:	600c      	str	r4, [r1, #0]
 800a8ba:	2107      	movs	r1, #7
 800a8bc:	0026      	movs	r6, r4
 800a8be:	2300      	movs	r3, #0
 800a8c0:	400e      	ands	r6, r1
 800a8c2:	420c      	tst	r4, r1
 800a8c4:	d002      	beq.n	800a8cc <_malloc_r+0x364>
 800a8c6:	3308      	adds	r3, #8
 800a8c8:	1b9b      	subs	r3, r3, r6
 800a8ca:	18e4      	adds	r4, r4, r3
 800a8cc:	19e1      	adds	r1, r4, r7
 800a8ce:	9105      	str	r1, [sp, #20]
 800a8d0:	9f05      	ldr	r7, [sp, #20]
 800a8d2:	9904      	ldr	r1, [sp, #16]
 800a8d4:	4017      	ands	r7, r2
 800a8d6:	18cb      	adds	r3, r1, r3
 800a8d8:	1bdf      	subs	r7, r3, r7
 800a8da:	4017      	ands	r7, r2
 800a8dc:	0039      	movs	r1, r7
 800a8de:	9801      	ldr	r0, [sp, #4]
 800a8e0:	f001 f948 	bl	800bb74 <_sbrk_r>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d107      	bne.n	800a8f8 <_malloc_r+0x390>
 800a8e8:	1e37      	subs	r7, r6, #0
 800a8ea:	9805      	ldr	r0, [sp, #20]
 800a8ec:	d004      	beq.n	800a8f8 <_malloc_r+0x390>
 800a8ee:	0030      	movs	r0, r6
 800a8f0:	2700      	movs	r7, #0
 800a8f2:	9b05      	ldr	r3, [sp, #20]
 800a8f4:	3808      	subs	r0, #8
 800a8f6:	1818      	adds	r0, r3, r0
 800a8f8:	4a23      	ldr	r2, [pc, #140]	; (800a988 <_malloc_r+0x420>)
 800a8fa:	1b00      	subs	r0, r0, r4
 800a8fc:	6813      	ldr	r3, [r2, #0]
 800a8fe:	19c0      	adds	r0, r0, r7
 800a900:	19db      	adds	r3, r3, r7
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	2201      	movs	r2, #1
 800a906:	4b21      	ldr	r3, [pc, #132]	; (800a98c <_malloc_r+0x424>)
 800a908:	9902      	ldr	r1, [sp, #8]
 800a90a:	4310      	orrs	r0, r2
 800a90c:	609c      	str	r4, [r3, #8]
 800a90e:	6060      	str	r0, [r4, #4]
 800a910:	4299      	cmp	r1, r3
 800a912:	d100      	bne.n	800a916 <_malloc_r+0x3ae>
 800a914:	e73e      	b.n	800a794 <_malloc_r+0x22c>
 800a916:	9b03      	ldr	r3, [sp, #12]
 800a918:	2b0f      	cmp	r3, #15
 800a91a:	d813      	bhi.n	800a944 <_malloc_r+0x3dc>
 800a91c:	6062      	str	r2, [r4, #4]
 800a91e:	2203      	movs	r2, #3
 800a920:	4b1a      	ldr	r3, [pc, #104]	; (800a98c <_malloc_r+0x424>)
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	4393      	bics	r3, r2
 800a928:	1b59      	subs	r1, r3, r5
 800a92a:	42ab      	cmp	r3, r5
 800a92c:	d301      	bcc.n	800a932 <_malloc_r+0x3ca>
 800a92e:	290f      	cmp	r1, #15
 800a930:	dc1f      	bgt.n	800a972 <_malloc_r+0x40a>
 800a932:	9801      	ldr	r0, [sp, #4]
 800a934:	f000 f834 	bl	800a9a0 <__malloc_unlock>
 800a938:	e623      	b.n	800a582 <_malloc_r+0x1a>
 800a93a:	4913      	ldr	r1, [pc, #76]	; (800a988 <_malloc_r+0x420>)
 800a93c:	1ba6      	subs	r6, r4, r6
 800a93e:	18f6      	adds	r6, r6, r3
 800a940:	600e      	str	r6, [r1, #0]
 800a942:	e7ba      	b.n	800a8ba <_malloc_r+0x352>
 800a944:	2107      	movs	r1, #7
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	3b0c      	subs	r3, #12
 800a94a:	438b      	bics	r3, r1
 800a94c:	9902      	ldr	r1, [sp, #8]
 800a94e:	6849      	ldr	r1, [r1, #4]
 800a950:	400a      	ands	r2, r1
 800a952:	9902      	ldr	r1, [sp, #8]
 800a954:	431a      	orrs	r2, r3
 800a956:	604a      	str	r2, [r1, #4]
 800a958:	18ca      	adds	r2, r1, r3
 800a95a:	2105      	movs	r1, #5
 800a95c:	6051      	str	r1, [r2, #4]
 800a95e:	6091      	str	r1, [r2, #8]
 800a960:	2b0f      	cmp	r3, #15
 800a962:	d800      	bhi.n	800a966 <_malloc_r+0x3fe>
 800a964:	e716      	b.n	800a794 <_malloc_r+0x22c>
 800a966:	9902      	ldr	r1, [sp, #8]
 800a968:	9801      	ldr	r0, [sp, #4]
 800a96a:	3108      	adds	r1, #8
 800a96c:	f001 f9dc 	bl	800bd28 <_free_r>
 800a970:	e710      	b.n	800a794 <_malloc_r+0x22c>
 800a972:	2201      	movs	r2, #1
 800a974:	0013      	movs	r3, r2
 800a976:	4805      	ldr	r0, [pc, #20]	; (800a98c <_malloc_r+0x424>)
 800a978:	432b      	orrs	r3, r5
 800a97a:	6884      	ldr	r4, [r0, #8]
 800a97c:	6063      	str	r3, [r4, #4]
 800a97e:	1963      	adds	r3, r4, r5
 800a980:	6083      	str	r3, [r0, #8]
 800a982:	e623      	b.n	800a5cc <_malloc_r+0x64>
 800a984:	20000434 	.word	0x20000434
 800a988:	20000b3c 	.word	0x20000b3c
 800a98c:	2000002c 	.word	0x2000002c

0800a990 <__malloc_lock>:
 800a990:	b510      	push	{r4, lr}
 800a992:	4802      	ldr	r0, [pc, #8]	; (800a99c <__malloc_lock+0xc>)
 800a994:	f001 f940 	bl	800bc18 <__retarget_lock_acquire_recursive>
 800a998:	bd10      	pop	{r4, pc}
 800a99a:	46c0      	nop			; (mov r8, r8)
 800a99c:	20000cb1 	.word	0x20000cb1

0800a9a0 <__malloc_unlock>:
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	4802      	ldr	r0, [pc, #8]	; (800a9ac <__malloc_unlock+0xc>)
 800a9a4:	f001 f939 	bl	800bc1a <__retarget_lock_release_recursive>
 800a9a8:	bd10      	pop	{r4, pc}
 800a9aa:	46c0      	nop			; (mov r8, r8)
 800a9ac:	20000cb1 	.word	0x20000cb1

0800a9b0 <sulp>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	0016      	movs	r6, r2
 800a9b4:	000d      	movs	r5, r1
 800a9b6:	f002 f90d 	bl	800cbd4 <__ulp>
 800a9ba:	2e00      	cmp	r6, #0
 800a9bc:	d00d      	beq.n	800a9da <sulp+0x2a>
 800a9be:	236b      	movs	r3, #107	; 0x6b
 800a9c0:	006a      	lsls	r2, r5, #1
 800a9c2:	0d52      	lsrs	r2, r2, #21
 800a9c4:	1a9b      	subs	r3, r3, r2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	dd07      	ble.n	800a9da <sulp+0x2a>
 800a9ca:	2400      	movs	r4, #0
 800a9cc:	4a03      	ldr	r2, [pc, #12]	; (800a9dc <sulp+0x2c>)
 800a9ce:	051b      	lsls	r3, r3, #20
 800a9d0:	189d      	adds	r5, r3, r2
 800a9d2:	002b      	movs	r3, r5
 800a9d4:	0022      	movs	r2, r4
 800a9d6:	f7f6 fe49 	bl	800166c <__aeabi_dmul>
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	3ff00000 	.word	0x3ff00000

0800a9e0 <_strtod_l>:
 800a9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e2:	b0a1      	sub	sp, #132	; 0x84
 800a9e4:	9219      	str	r2, [sp, #100]	; 0x64
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2600      	movs	r6, #0
 800a9ea:	2700      	movs	r7, #0
 800a9ec:	9004      	str	r0, [sp, #16]
 800a9ee:	9107      	str	r1, [sp, #28]
 800a9f0:	921c      	str	r2, [sp, #112]	; 0x70
 800a9f2:	911b      	str	r1, [sp, #108]	; 0x6c
 800a9f4:	780a      	ldrb	r2, [r1, #0]
 800a9f6:	2a2b      	cmp	r2, #43	; 0x2b
 800a9f8:	d055      	beq.n	800aaa6 <_strtod_l+0xc6>
 800a9fa:	d841      	bhi.n	800aa80 <_strtod_l+0xa0>
 800a9fc:	2a0d      	cmp	r2, #13
 800a9fe:	d83b      	bhi.n	800aa78 <_strtod_l+0x98>
 800aa00:	2a08      	cmp	r2, #8
 800aa02:	d83b      	bhi.n	800aa7c <_strtod_l+0x9c>
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	d044      	beq.n	800aa92 <_strtod_l+0xb2>
 800aa08:	2200      	movs	r2, #0
 800aa0a:	920f      	str	r2, [sp, #60]	; 0x3c
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800aa10:	9109      	str	r1, [sp, #36]	; 0x24
 800aa12:	782a      	ldrb	r2, [r5, #0]
 800aa14:	2a30      	cmp	r2, #48	; 0x30
 800aa16:	d000      	beq.n	800aa1a <_strtod_l+0x3a>
 800aa18:	e085      	b.n	800ab26 <_strtod_l+0x146>
 800aa1a:	786a      	ldrb	r2, [r5, #1]
 800aa1c:	3120      	adds	r1, #32
 800aa1e:	438a      	bics	r2, r1
 800aa20:	2a58      	cmp	r2, #88	; 0x58
 800aa22:	d000      	beq.n	800aa26 <_strtod_l+0x46>
 800aa24:	e075      	b.n	800ab12 <_strtod_l+0x132>
 800aa26:	9302      	str	r3, [sp, #8]
 800aa28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa2a:	4a97      	ldr	r2, [pc, #604]	; (800ac88 <_strtod_l+0x2a8>)
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	ab1c      	add	r3, sp, #112	; 0x70
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	9804      	ldr	r0, [sp, #16]
 800aa34:	ab1d      	add	r3, sp, #116	; 0x74
 800aa36:	a91b      	add	r1, sp, #108	; 0x6c
 800aa38:	f001 fa92 	bl	800bf60 <__gethex>
 800aa3c:	230f      	movs	r3, #15
 800aa3e:	0002      	movs	r2, r0
 800aa40:	401a      	ands	r2, r3
 800aa42:	0004      	movs	r4, r0
 800aa44:	9205      	str	r2, [sp, #20]
 800aa46:	4218      	tst	r0, r3
 800aa48:	d005      	beq.n	800aa56 <_strtod_l+0x76>
 800aa4a:	2a06      	cmp	r2, #6
 800aa4c:	d12d      	bne.n	800aaaa <_strtod_l+0xca>
 800aa4e:	1c6b      	adds	r3, r5, #1
 800aa50:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa52:	2300      	movs	r3, #0
 800aa54:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d002      	beq.n	800aa62 <_strtod_l+0x82>
 800aa5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aa60:	6013      	str	r3, [r2, #0]
 800aa62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d01b      	beq.n	800aaa0 <_strtod_l+0xc0>
 800aa68:	2380      	movs	r3, #128	; 0x80
 800aa6a:	0032      	movs	r2, r6
 800aa6c:	061b      	lsls	r3, r3, #24
 800aa6e:	18fb      	adds	r3, r7, r3
 800aa70:	0010      	movs	r0, r2
 800aa72:	0019      	movs	r1, r3
 800aa74:	b021      	add	sp, #132	; 0x84
 800aa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa78:	2a20      	cmp	r2, #32
 800aa7a:	d1c5      	bne.n	800aa08 <_strtod_l+0x28>
 800aa7c:	3101      	adds	r1, #1
 800aa7e:	e7b8      	b.n	800a9f2 <_strtod_l+0x12>
 800aa80:	2a2d      	cmp	r2, #45	; 0x2d
 800aa82:	d1c1      	bne.n	800aa08 <_strtod_l+0x28>
 800aa84:	3a2c      	subs	r2, #44	; 0x2c
 800aa86:	920f      	str	r2, [sp, #60]	; 0x3c
 800aa88:	1c4a      	adds	r2, r1, #1
 800aa8a:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa8c:	784a      	ldrb	r2, [r1, #1]
 800aa8e:	2a00      	cmp	r2, #0
 800aa90:	d1bc      	bne.n	800aa0c <_strtod_l+0x2c>
 800aa92:	9b07      	ldr	r3, [sp, #28]
 800aa94:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa96:	2300      	movs	r3, #0
 800aa98:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1dd      	bne.n	800aa5c <_strtod_l+0x7c>
 800aaa0:	0032      	movs	r2, r6
 800aaa2:	003b      	movs	r3, r7
 800aaa4:	e7e4      	b.n	800aa70 <_strtod_l+0x90>
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	e7ed      	b.n	800aa86 <_strtod_l+0xa6>
 800aaaa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aaac:	2a00      	cmp	r2, #0
 800aaae:	d007      	beq.n	800aac0 <_strtod_l+0xe0>
 800aab0:	2135      	movs	r1, #53	; 0x35
 800aab2:	a81e      	add	r0, sp, #120	; 0x78
 800aab4:	f002 f97f 	bl	800cdb6 <__copybits>
 800aab8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aaba:	9804      	ldr	r0, [sp, #16]
 800aabc:	f001 fd7c 	bl	800c5b8 <_Bfree>
 800aac0:	9805      	ldr	r0, [sp, #20]
 800aac2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aac4:	3801      	subs	r0, #1
 800aac6:	2804      	cmp	r0, #4
 800aac8:	d806      	bhi.n	800aad8 <_strtod_l+0xf8>
 800aaca:	f7f5 fb23 	bl	8000114 <__gnu_thumb1_case_uqi>
 800aace:	0312      	.short	0x0312
 800aad0:	1e1c      	.short	0x1e1c
 800aad2:	12          	.byte	0x12
 800aad3:	00          	.byte	0x00
 800aad4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aad6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800aad8:	05e4      	lsls	r4, r4, #23
 800aada:	d502      	bpl.n	800aae2 <_strtod_l+0x102>
 800aadc:	2380      	movs	r3, #128	; 0x80
 800aade:	061b      	lsls	r3, r3, #24
 800aae0:	431f      	orrs	r7, r3
 800aae2:	4b6a      	ldr	r3, [pc, #424]	; (800ac8c <_strtod_l+0x2ac>)
 800aae4:	423b      	tst	r3, r7
 800aae6:	d1b6      	bne.n	800aa56 <_strtod_l+0x76>
 800aae8:	f001 f86a 	bl	800bbc0 <__errno>
 800aaec:	2322      	movs	r3, #34	; 0x22
 800aaee:	6003      	str	r3, [r0, #0]
 800aaf0:	e7b1      	b.n	800aa56 <_strtod_l+0x76>
 800aaf2:	4967      	ldr	r1, [pc, #412]	; (800ac90 <_strtod_l+0x2b0>)
 800aaf4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aaf6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aaf8:	400a      	ands	r2, r1
 800aafa:	4966      	ldr	r1, [pc, #408]	; (800ac94 <_strtod_l+0x2b4>)
 800aafc:	185b      	adds	r3, r3, r1
 800aafe:	051b      	lsls	r3, r3, #20
 800ab00:	431a      	orrs	r2, r3
 800ab02:	0017      	movs	r7, r2
 800ab04:	e7e8      	b.n	800aad8 <_strtod_l+0xf8>
 800ab06:	4f61      	ldr	r7, [pc, #388]	; (800ac8c <_strtod_l+0x2ac>)
 800ab08:	e7e6      	b.n	800aad8 <_strtod_l+0xf8>
 800ab0a:	2601      	movs	r6, #1
 800ab0c:	4f62      	ldr	r7, [pc, #392]	; (800ac98 <_strtod_l+0x2b8>)
 800ab0e:	4276      	negs	r6, r6
 800ab10:	e7e2      	b.n	800aad8 <_strtod_l+0xf8>
 800ab12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab18:	785b      	ldrb	r3, [r3, #1]
 800ab1a:	2b30      	cmp	r3, #48	; 0x30
 800ab1c:	d0f9      	beq.n	800ab12 <_strtod_l+0x132>
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d099      	beq.n	800aa56 <_strtod_l+0x76>
 800ab22:	2301      	movs	r3, #1
 800ab24:	9309      	str	r3, [sp, #36]	; 0x24
 800ab26:	2500      	movs	r5, #0
 800ab28:	220a      	movs	r2, #10
 800ab2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab2c:	950d      	str	r5, [sp, #52]	; 0x34
 800ab2e:	9310      	str	r3, [sp, #64]	; 0x40
 800ab30:	9508      	str	r5, [sp, #32]
 800ab32:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ab34:	7804      	ldrb	r4, [r0, #0]
 800ab36:	0023      	movs	r3, r4
 800ab38:	3b30      	subs	r3, #48	; 0x30
 800ab3a:	b2d9      	uxtb	r1, r3
 800ab3c:	2909      	cmp	r1, #9
 800ab3e:	d927      	bls.n	800ab90 <_strtod_l+0x1b0>
 800ab40:	2201      	movs	r2, #1
 800ab42:	4956      	ldr	r1, [pc, #344]	; (800ac9c <_strtod_l+0x2bc>)
 800ab44:	f000 ff98 	bl	800ba78 <strncmp>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d031      	beq.n	800abb0 <_strtod_l+0x1d0>
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	0023      	movs	r3, r4
 800ab50:	4684      	mov	ip, r0
 800ab52:	9a08      	ldr	r2, [sp, #32]
 800ab54:	900c      	str	r0, [sp, #48]	; 0x30
 800ab56:	9205      	str	r2, [sp, #20]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	0019      	movs	r1, r3
 800ab5c:	4391      	bics	r1, r2
 800ab5e:	000a      	movs	r2, r1
 800ab60:	2100      	movs	r1, #0
 800ab62:	9106      	str	r1, [sp, #24]
 800ab64:	2a45      	cmp	r2, #69	; 0x45
 800ab66:	d000      	beq.n	800ab6a <_strtod_l+0x18a>
 800ab68:	e0c2      	b.n	800acf0 <_strtod_l+0x310>
 800ab6a:	9b05      	ldr	r3, [sp, #20]
 800ab6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab6e:	4303      	orrs	r3, r0
 800ab70:	4313      	orrs	r3, r2
 800ab72:	428b      	cmp	r3, r1
 800ab74:	d08d      	beq.n	800aa92 <_strtod_l+0xb2>
 800ab76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab78:	9307      	str	r3, [sp, #28]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab7e:	9b07      	ldr	r3, [sp, #28]
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	2b2b      	cmp	r3, #43	; 0x2b
 800ab84:	d071      	beq.n	800ac6a <_strtod_l+0x28a>
 800ab86:	000c      	movs	r4, r1
 800ab88:	2b2d      	cmp	r3, #45	; 0x2d
 800ab8a:	d174      	bne.n	800ac76 <_strtod_l+0x296>
 800ab8c:	2401      	movs	r4, #1
 800ab8e:	e06d      	b.n	800ac6c <_strtod_l+0x28c>
 800ab90:	9908      	ldr	r1, [sp, #32]
 800ab92:	2908      	cmp	r1, #8
 800ab94:	dc09      	bgt.n	800abaa <_strtod_l+0x1ca>
 800ab96:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab98:	4351      	muls	r1, r2
 800ab9a:	185b      	adds	r3, r3, r1
 800ab9c:	930d      	str	r3, [sp, #52]	; 0x34
 800ab9e:	9b08      	ldr	r3, [sp, #32]
 800aba0:	3001      	adds	r0, #1
 800aba2:	3301      	adds	r3, #1
 800aba4:	9308      	str	r3, [sp, #32]
 800aba6:	901b      	str	r0, [sp, #108]	; 0x6c
 800aba8:	e7c3      	b.n	800ab32 <_strtod_l+0x152>
 800abaa:	4355      	muls	r5, r2
 800abac:	195d      	adds	r5, r3, r5
 800abae:	e7f6      	b.n	800ab9e <_strtod_l+0x1be>
 800abb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abb2:	1c5a      	adds	r2, r3, #1
 800abb4:	921b      	str	r2, [sp, #108]	; 0x6c
 800abb6:	9a08      	ldr	r2, [sp, #32]
 800abb8:	785b      	ldrb	r3, [r3, #1]
 800abba:	2a00      	cmp	r2, #0
 800abbc:	d03a      	beq.n	800ac34 <_strtod_l+0x254>
 800abbe:	900c      	str	r0, [sp, #48]	; 0x30
 800abc0:	9205      	str	r2, [sp, #20]
 800abc2:	001a      	movs	r2, r3
 800abc4:	3a30      	subs	r2, #48	; 0x30
 800abc6:	2a09      	cmp	r2, #9
 800abc8:	d912      	bls.n	800abf0 <_strtod_l+0x210>
 800abca:	2201      	movs	r2, #1
 800abcc:	4694      	mov	ip, r2
 800abce:	e7c3      	b.n	800ab58 <_strtod_l+0x178>
 800abd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abd2:	3001      	adds	r0, #1
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	921b      	str	r2, [sp, #108]	; 0x6c
 800abd8:	785b      	ldrb	r3, [r3, #1]
 800abda:	2b30      	cmp	r3, #48	; 0x30
 800abdc:	d0f8      	beq.n	800abd0 <_strtod_l+0x1f0>
 800abde:	001a      	movs	r2, r3
 800abe0:	3a31      	subs	r2, #49	; 0x31
 800abe2:	2a08      	cmp	r2, #8
 800abe4:	d83c      	bhi.n	800ac60 <_strtod_l+0x280>
 800abe6:	900c      	str	r0, [sp, #48]	; 0x30
 800abe8:	2000      	movs	r0, #0
 800abea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800abec:	9005      	str	r0, [sp, #20]
 800abee:	9210      	str	r2, [sp, #64]	; 0x40
 800abf0:	001a      	movs	r2, r3
 800abf2:	1c41      	adds	r1, r0, #1
 800abf4:	3a30      	subs	r2, #48	; 0x30
 800abf6:	2b30      	cmp	r3, #48	; 0x30
 800abf8:	d016      	beq.n	800ac28 <_strtod_l+0x248>
 800abfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abfc:	185b      	adds	r3, r3, r1
 800abfe:	930c      	str	r3, [sp, #48]	; 0x30
 800ac00:	9b05      	ldr	r3, [sp, #20]
 800ac02:	210a      	movs	r1, #10
 800ac04:	469c      	mov	ip, r3
 800ac06:	4484      	add	ip, r0
 800ac08:	4563      	cmp	r3, ip
 800ac0a:	d115      	bne.n	800ac38 <_strtod_l+0x258>
 800ac0c:	9905      	ldr	r1, [sp, #20]
 800ac0e:	9b05      	ldr	r3, [sp, #20]
 800ac10:	3101      	adds	r1, #1
 800ac12:	1809      	adds	r1, r1, r0
 800ac14:	181b      	adds	r3, r3, r0
 800ac16:	9105      	str	r1, [sp, #20]
 800ac18:	2b08      	cmp	r3, #8
 800ac1a:	dc19      	bgt.n	800ac50 <_strtod_l+0x270>
 800ac1c:	230a      	movs	r3, #10
 800ac1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ac20:	434b      	muls	r3, r1
 800ac22:	2100      	movs	r1, #0
 800ac24:	18d3      	adds	r3, r2, r3
 800ac26:	930d      	str	r3, [sp, #52]	; 0x34
 800ac28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac2a:	0008      	movs	r0, r1
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac30:	785b      	ldrb	r3, [r3, #1]
 800ac32:	e7c6      	b.n	800abc2 <_strtod_l+0x1e2>
 800ac34:	9808      	ldr	r0, [sp, #32]
 800ac36:	e7d0      	b.n	800abda <_strtod_l+0x1fa>
 800ac38:	1c5c      	adds	r4, r3, #1
 800ac3a:	2b08      	cmp	r3, #8
 800ac3c:	dc04      	bgt.n	800ac48 <_strtod_l+0x268>
 800ac3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac40:	434b      	muls	r3, r1
 800ac42:	930d      	str	r3, [sp, #52]	; 0x34
 800ac44:	0023      	movs	r3, r4
 800ac46:	e7df      	b.n	800ac08 <_strtod_l+0x228>
 800ac48:	2c10      	cmp	r4, #16
 800ac4a:	dcfb      	bgt.n	800ac44 <_strtod_l+0x264>
 800ac4c:	434d      	muls	r5, r1
 800ac4e:	e7f9      	b.n	800ac44 <_strtod_l+0x264>
 800ac50:	9b05      	ldr	r3, [sp, #20]
 800ac52:	2100      	movs	r1, #0
 800ac54:	2b10      	cmp	r3, #16
 800ac56:	dce7      	bgt.n	800ac28 <_strtod_l+0x248>
 800ac58:	230a      	movs	r3, #10
 800ac5a:	435d      	muls	r5, r3
 800ac5c:	1955      	adds	r5, r2, r5
 800ac5e:	e7e3      	b.n	800ac28 <_strtod_l+0x248>
 800ac60:	2200      	movs	r2, #0
 800ac62:	920c      	str	r2, [sp, #48]	; 0x30
 800ac64:	9205      	str	r2, [sp, #20]
 800ac66:	3201      	adds	r2, #1
 800ac68:	e7b0      	b.n	800abcc <_strtod_l+0x1ec>
 800ac6a:	2400      	movs	r4, #0
 800ac6c:	9b07      	ldr	r3, [sp, #28]
 800ac6e:	3302      	adds	r3, #2
 800ac70:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac72:	9b07      	ldr	r3, [sp, #28]
 800ac74:	789b      	ldrb	r3, [r3, #2]
 800ac76:	001a      	movs	r2, r3
 800ac78:	3a30      	subs	r2, #48	; 0x30
 800ac7a:	2a09      	cmp	r2, #9
 800ac7c:	d914      	bls.n	800aca8 <_strtod_l+0x2c8>
 800ac7e:	9a07      	ldr	r2, [sp, #28]
 800ac80:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac82:	2200      	movs	r2, #0
 800ac84:	e033      	b.n	800acee <_strtod_l+0x30e>
 800ac86:	46c0      	nop			; (mov r8, r8)
 800ac88:	08013f54 	.word	0x08013f54
 800ac8c:	7ff00000 	.word	0x7ff00000
 800ac90:	ffefffff 	.word	0xffefffff
 800ac94:	00000433 	.word	0x00000433
 800ac98:	7fffffff 	.word	0x7fffffff
 800ac9c:	08013f50 	.word	0x08013f50
 800aca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	921b      	str	r2, [sp, #108]	; 0x6c
 800aca6:	785b      	ldrb	r3, [r3, #1]
 800aca8:	2b30      	cmp	r3, #48	; 0x30
 800acaa:	d0f9      	beq.n	800aca0 <_strtod_l+0x2c0>
 800acac:	2200      	movs	r2, #0
 800acae:	9206      	str	r2, [sp, #24]
 800acb0:	001a      	movs	r2, r3
 800acb2:	3a31      	subs	r2, #49	; 0x31
 800acb4:	2a08      	cmp	r2, #8
 800acb6:	d81b      	bhi.n	800acf0 <_strtod_l+0x310>
 800acb8:	3b30      	subs	r3, #48	; 0x30
 800acba:	930e      	str	r3, [sp, #56]	; 0x38
 800acbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acbe:	9306      	str	r3, [sp, #24]
 800acc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acc2:	1c59      	adds	r1, r3, #1
 800acc4:	911b      	str	r1, [sp, #108]	; 0x6c
 800acc6:	785b      	ldrb	r3, [r3, #1]
 800acc8:	001a      	movs	r2, r3
 800acca:	3a30      	subs	r2, #48	; 0x30
 800accc:	2a09      	cmp	r2, #9
 800acce:	d93a      	bls.n	800ad46 <_strtod_l+0x366>
 800acd0:	9a06      	ldr	r2, [sp, #24]
 800acd2:	1a8a      	subs	r2, r1, r2
 800acd4:	49b2      	ldr	r1, [pc, #712]	; (800afa0 <_strtod_l+0x5c0>)
 800acd6:	9106      	str	r1, [sp, #24]
 800acd8:	2a08      	cmp	r2, #8
 800acda:	dc04      	bgt.n	800ace6 <_strtod_l+0x306>
 800acdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acde:	9206      	str	r2, [sp, #24]
 800ace0:	428a      	cmp	r2, r1
 800ace2:	dd00      	ble.n	800ace6 <_strtod_l+0x306>
 800ace4:	9106      	str	r1, [sp, #24]
 800ace6:	2c00      	cmp	r4, #0
 800ace8:	d002      	beq.n	800acf0 <_strtod_l+0x310>
 800acea:	9a06      	ldr	r2, [sp, #24]
 800acec:	4252      	negs	r2, r2
 800acee:	9206      	str	r2, [sp, #24]
 800acf0:	9a05      	ldr	r2, [sp, #20]
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	d14d      	bne.n	800ad92 <_strtod_l+0x3b2>
 800acf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf8:	4310      	orrs	r0, r2
 800acfa:	d000      	beq.n	800acfe <_strtod_l+0x31e>
 800acfc:	e6ab      	b.n	800aa56 <_strtod_l+0x76>
 800acfe:	4662      	mov	r2, ip
 800ad00:	2a00      	cmp	r2, #0
 800ad02:	d000      	beq.n	800ad06 <_strtod_l+0x326>
 800ad04:	e6c5      	b.n	800aa92 <_strtod_l+0xb2>
 800ad06:	2b69      	cmp	r3, #105	; 0x69
 800ad08:	d027      	beq.n	800ad5a <_strtod_l+0x37a>
 800ad0a:	dc23      	bgt.n	800ad54 <_strtod_l+0x374>
 800ad0c:	2b49      	cmp	r3, #73	; 0x49
 800ad0e:	d024      	beq.n	800ad5a <_strtod_l+0x37a>
 800ad10:	2b4e      	cmp	r3, #78	; 0x4e
 800ad12:	d000      	beq.n	800ad16 <_strtod_l+0x336>
 800ad14:	e6bd      	b.n	800aa92 <_strtod_l+0xb2>
 800ad16:	49a3      	ldr	r1, [pc, #652]	; (800afa4 <_strtod_l+0x5c4>)
 800ad18:	a81b      	add	r0, sp, #108	; 0x6c
 800ad1a:	f001 fb57 	bl	800c3cc <__match>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d100      	bne.n	800ad24 <_strtod_l+0x344>
 800ad22:	e6b6      	b.n	800aa92 <_strtod_l+0xb2>
 800ad24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b28      	cmp	r3, #40	; 0x28
 800ad2a:	d12c      	bne.n	800ad86 <_strtod_l+0x3a6>
 800ad2c:	499e      	ldr	r1, [pc, #632]	; (800afa8 <_strtod_l+0x5c8>)
 800ad2e:	aa1e      	add	r2, sp, #120	; 0x78
 800ad30:	a81b      	add	r0, sp, #108	; 0x6c
 800ad32:	f001 fb5f 	bl	800c3f4 <__hexnan>
 800ad36:	2805      	cmp	r0, #5
 800ad38:	d125      	bne.n	800ad86 <_strtod_l+0x3a6>
 800ad3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad3c:	4a9b      	ldr	r2, [pc, #620]	; (800afac <_strtod_l+0x5cc>)
 800ad3e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ad40:	431a      	orrs	r2, r3
 800ad42:	0017      	movs	r7, r2
 800ad44:	e687      	b.n	800aa56 <_strtod_l+0x76>
 800ad46:	220a      	movs	r2, #10
 800ad48:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ad4a:	434a      	muls	r2, r1
 800ad4c:	18d2      	adds	r2, r2, r3
 800ad4e:	3a30      	subs	r2, #48	; 0x30
 800ad50:	920e      	str	r2, [sp, #56]	; 0x38
 800ad52:	e7b5      	b.n	800acc0 <_strtod_l+0x2e0>
 800ad54:	2b6e      	cmp	r3, #110	; 0x6e
 800ad56:	d0de      	beq.n	800ad16 <_strtod_l+0x336>
 800ad58:	e69b      	b.n	800aa92 <_strtod_l+0xb2>
 800ad5a:	4995      	ldr	r1, [pc, #596]	; (800afb0 <_strtod_l+0x5d0>)
 800ad5c:	a81b      	add	r0, sp, #108	; 0x6c
 800ad5e:	f001 fb35 	bl	800c3cc <__match>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d100      	bne.n	800ad68 <_strtod_l+0x388>
 800ad66:	e694      	b.n	800aa92 <_strtod_l+0xb2>
 800ad68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad6a:	4992      	ldr	r1, [pc, #584]	; (800afb4 <_strtod_l+0x5d4>)
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	a81b      	add	r0, sp, #108	; 0x6c
 800ad70:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad72:	f001 fb2b 	bl	800c3cc <__match>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d102      	bne.n	800ad80 <_strtod_l+0x3a0>
 800ad7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad80:	2600      	movs	r6, #0
 800ad82:	4f8a      	ldr	r7, [pc, #552]	; (800afac <_strtod_l+0x5cc>)
 800ad84:	e667      	b.n	800aa56 <_strtod_l+0x76>
 800ad86:	488c      	ldr	r0, [pc, #560]	; (800afb8 <_strtod_l+0x5d8>)
 800ad88:	f000 ff5c 	bl	800bc44 <nan>
 800ad8c:	0006      	movs	r6, r0
 800ad8e:	000f      	movs	r7, r1
 800ad90:	e661      	b.n	800aa56 <_strtod_l+0x76>
 800ad92:	9b06      	ldr	r3, [sp, #24]
 800ad94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad96:	1a9b      	subs	r3, r3, r2
 800ad98:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9a:	9b08      	ldr	r3, [sp, #32]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <_strtod_l+0x3c4>
 800ada0:	9b05      	ldr	r3, [sp, #20]
 800ada2:	9308      	str	r3, [sp, #32]
 800ada4:	9c05      	ldr	r4, [sp, #20]
 800ada6:	2c10      	cmp	r4, #16
 800ada8:	dd00      	ble.n	800adac <_strtod_l+0x3cc>
 800adaa:	2410      	movs	r4, #16
 800adac:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adae:	f7f7 fb25 	bl	80023fc <__aeabi_ui2d>
 800adb2:	9b05      	ldr	r3, [sp, #20]
 800adb4:	0006      	movs	r6, r0
 800adb6:	000f      	movs	r7, r1
 800adb8:	2b09      	cmp	r3, #9
 800adba:	dd15      	ble.n	800ade8 <_strtod_l+0x408>
 800adbc:	0022      	movs	r2, r4
 800adbe:	4b7f      	ldr	r3, [pc, #508]	; (800afbc <_strtod_l+0x5dc>)
 800adc0:	3a09      	subs	r2, #9
 800adc2:	00d2      	lsls	r2, r2, #3
 800adc4:	189b      	adds	r3, r3, r2
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f7f6 fc4f 	bl	800166c <__aeabi_dmul>
 800adce:	0006      	movs	r6, r0
 800add0:	0028      	movs	r0, r5
 800add2:	000f      	movs	r7, r1
 800add4:	f7f7 fb12 	bl	80023fc <__aeabi_ui2d>
 800add8:	0002      	movs	r2, r0
 800adda:	000b      	movs	r3, r1
 800addc:	0030      	movs	r0, r6
 800adde:	0039      	movs	r1, r7
 800ade0:	f7f5 fcea 	bl	80007b8 <__aeabi_dadd>
 800ade4:	0006      	movs	r6, r0
 800ade6:	000f      	movs	r7, r1
 800ade8:	9b05      	ldr	r3, [sp, #20]
 800adea:	2b0f      	cmp	r3, #15
 800adec:	dc39      	bgt.n	800ae62 <_strtod_l+0x482>
 800adee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d100      	bne.n	800adf6 <_strtod_l+0x416>
 800adf4:	e62f      	b.n	800aa56 <_strtod_l+0x76>
 800adf6:	dd24      	ble.n	800ae42 <_strtod_l+0x462>
 800adf8:	2b16      	cmp	r3, #22
 800adfa:	dc09      	bgt.n	800ae10 <_strtod_l+0x430>
 800adfc:	496f      	ldr	r1, [pc, #444]	; (800afbc <_strtod_l+0x5dc>)
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	18c9      	adds	r1, r1, r3
 800ae02:	0032      	movs	r2, r6
 800ae04:	6808      	ldr	r0, [r1, #0]
 800ae06:	6849      	ldr	r1, [r1, #4]
 800ae08:	003b      	movs	r3, r7
 800ae0a:	f7f6 fc2f 	bl	800166c <__aeabi_dmul>
 800ae0e:	e7bd      	b.n	800ad8c <_strtod_l+0x3ac>
 800ae10:	2325      	movs	r3, #37	; 0x25
 800ae12:	9a05      	ldr	r2, [sp, #20]
 800ae14:	1a9b      	subs	r3, r3, r2
 800ae16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	db22      	blt.n	800ae62 <_strtod_l+0x482>
 800ae1c:	240f      	movs	r4, #15
 800ae1e:	9b05      	ldr	r3, [sp, #20]
 800ae20:	4d66      	ldr	r5, [pc, #408]	; (800afbc <_strtod_l+0x5dc>)
 800ae22:	1ae4      	subs	r4, r4, r3
 800ae24:	00e1      	lsls	r1, r4, #3
 800ae26:	1869      	adds	r1, r5, r1
 800ae28:	0032      	movs	r2, r6
 800ae2a:	6808      	ldr	r0, [r1, #0]
 800ae2c:	6849      	ldr	r1, [r1, #4]
 800ae2e:	003b      	movs	r3, r7
 800ae30:	f7f6 fc1c 	bl	800166c <__aeabi_dmul>
 800ae34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae36:	1b1c      	subs	r4, r3, r4
 800ae38:	00e4      	lsls	r4, r4, #3
 800ae3a:	192d      	adds	r5, r5, r4
 800ae3c:	682a      	ldr	r2, [r5, #0]
 800ae3e:	686b      	ldr	r3, [r5, #4]
 800ae40:	e7e3      	b.n	800ae0a <_strtod_l+0x42a>
 800ae42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae44:	3316      	adds	r3, #22
 800ae46:	db0c      	blt.n	800ae62 <_strtod_l+0x482>
 800ae48:	9906      	ldr	r1, [sp, #24]
 800ae4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae4c:	4b5b      	ldr	r3, [pc, #364]	; (800afbc <_strtod_l+0x5dc>)
 800ae4e:	1a52      	subs	r2, r2, r1
 800ae50:	00d2      	lsls	r2, r2, #3
 800ae52:	189b      	adds	r3, r3, r2
 800ae54:	0030      	movs	r0, r6
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	0039      	movs	r1, r7
 800ae5c:	f7f6 f80c 	bl	8000e78 <__aeabi_ddiv>
 800ae60:	e794      	b.n	800ad8c <_strtod_l+0x3ac>
 800ae62:	9b05      	ldr	r3, [sp, #20]
 800ae64:	1b1c      	subs	r4, r3, r4
 800ae66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae68:	18e4      	adds	r4, r4, r3
 800ae6a:	2c00      	cmp	r4, #0
 800ae6c:	dd72      	ble.n	800af54 <_strtod_l+0x574>
 800ae6e:	220f      	movs	r2, #15
 800ae70:	0023      	movs	r3, r4
 800ae72:	4013      	ands	r3, r2
 800ae74:	4214      	tst	r4, r2
 800ae76:	d00a      	beq.n	800ae8e <_strtod_l+0x4ae>
 800ae78:	4950      	ldr	r1, [pc, #320]	; (800afbc <_strtod_l+0x5dc>)
 800ae7a:	00db      	lsls	r3, r3, #3
 800ae7c:	18c9      	adds	r1, r1, r3
 800ae7e:	0032      	movs	r2, r6
 800ae80:	6808      	ldr	r0, [r1, #0]
 800ae82:	6849      	ldr	r1, [r1, #4]
 800ae84:	003b      	movs	r3, r7
 800ae86:	f7f6 fbf1 	bl	800166c <__aeabi_dmul>
 800ae8a:	0006      	movs	r6, r0
 800ae8c:	000f      	movs	r7, r1
 800ae8e:	230f      	movs	r3, #15
 800ae90:	439c      	bics	r4, r3
 800ae92:	d04a      	beq.n	800af2a <_strtod_l+0x54a>
 800ae94:	3326      	adds	r3, #38	; 0x26
 800ae96:	33ff      	adds	r3, #255	; 0xff
 800ae98:	429c      	cmp	r4, r3
 800ae9a:	dd22      	ble.n	800aee2 <_strtod_l+0x502>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9305      	str	r3, [sp, #20]
 800aea0:	9306      	str	r3, [sp, #24]
 800aea2:	930d      	str	r3, [sp, #52]	; 0x34
 800aea4:	9308      	str	r3, [sp, #32]
 800aea6:	2322      	movs	r3, #34	; 0x22
 800aea8:	2600      	movs	r6, #0
 800aeaa:	9a04      	ldr	r2, [sp, #16]
 800aeac:	4f3f      	ldr	r7, [pc, #252]	; (800afac <_strtod_l+0x5cc>)
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeb2:	42b3      	cmp	r3, r6
 800aeb4:	d100      	bne.n	800aeb8 <_strtod_l+0x4d8>
 800aeb6:	e5ce      	b.n	800aa56 <_strtod_l+0x76>
 800aeb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aeba:	9804      	ldr	r0, [sp, #16]
 800aebc:	f001 fb7c 	bl	800c5b8 <_Bfree>
 800aec0:	9908      	ldr	r1, [sp, #32]
 800aec2:	9804      	ldr	r0, [sp, #16]
 800aec4:	f001 fb78 	bl	800c5b8 <_Bfree>
 800aec8:	9906      	ldr	r1, [sp, #24]
 800aeca:	9804      	ldr	r0, [sp, #16]
 800aecc:	f001 fb74 	bl	800c5b8 <_Bfree>
 800aed0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aed2:	9804      	ldr	r0, [sp, #16]
 800aed4:	f001 fb70 	bl	800c5b8 <_Bfree>
 800aed8:	9905      	ldr	r1, [sp, #20]
 800aeda:	9804      	ldr	r0, [sp, #16]
 800aedc:	f001 fb6c 	bl	800c5b8 <_Bfree>
 800aee0:	e5b9      	b.n	800aa56 <_strtod_l+0x76>
 800aee2:	2300      	movs	r3, #0
 800aee4:	0030      	movs	r0, r6
 800aee6:	0039      	movs	r1, r7
 800aee8:	4d35      	ldr	r5, [pc, #212]	; (800afc0 <_strtod_l+0x5e0>)
 800aeea:	1124      	asrs	r4, r4, #4
 800aeec:	9307      	str	r3, [sp, #28]
 800aeee:	2c01      	cmp	r4, #1
 800aef0:	dc1e      	bgt.n	800af30 <_strtod_l+0x550>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <_strtod_l+0x51a>
 800aef6:	0006      	movs	r6, r0
 800aef8:	000f      	movs	r7, r1
 800aefa:	4b32      	ldr	r3, [pc, #200]	; (800afc4 <_strtod_l+0x5e4>)
 800aefc:	9a07      	ldr	r2, [sp, #28]
 800aefe:	18ff      	adds	r7, r7, r3
 800af00:	4b2f      	ldr	r3, [pc, #188]	; (800afc0 <_strtod_l+0x5e0>)
 800af02:	00d2      	lsls	r2, r2, #3
 800af04:	189d      	adds	r5, r3, r2
 800af06:	6828      	ldr	r0, [r5, #0]
 800af08:	6869      	ldr	r1, [r5, #4]
 800af0a:	0032      	movs	r2, r6
 800af0c:	003b      	movs	r3, r7
 800af0e:	f7f6 fbad 	bl	800166c <__aeabi_dmul>
 800af12:	4b26      	ldr	r3, [pc, #152]	; (800afac <_strtod_l+0x5cc>)
 800af14:	4a2c      	ldr	r2, [pc, #176]	; (800afc8 <_strtod_l+0x5e8>)
 800af16:	0006      	movs	r6, r0
 800af18:	400b      	ands	r3, r1
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d8be      	bhi.n	800ae9c <_strtod_l+0x4bc>
 800af1e:	4a2b      	ldr	r2, [pc, #172]	; (800afcc <_strtod_l+0x5ec>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d913      	bls.n	800af4c <_strtod_l+0x56c>
 800af24:	2601      	movs	r6, #1
 800af26:	4f2a      	ldr	r7, [pc, #168]	; (800afd0 <_strtod_l+0x5f0>)
 800af28:	4276      	negs	r6, r6
 800af2a:	2300      	movs	r3, #0
 800af2c:	9307      	str	r3, [sp, #28]
 800af2e:	e088      	b.n	800b042 <_strtod_l+0x662>
 800af30:	2201      	movs	r2, #1
 800af32:	4214      	tst	r4, r2
 800af34:	d004      	beq.n	800af40 <_strtod_l+0x560>
 800af36:	682a      	ldr	r2, [r5, #0]
 800af38:	686b      	ldr	r3, [r5, #4]
 800af3a:	f7f6 fb97 	bl	800166c <__aeabi_dmul>
 800af3e:	2301      	movs	r3, #1
 800af40:	9a07      	ldr	r2, [sp, #28]
 800af42:	1064      	asrs	r4, r4, #1
 800af44:	3201      	adds	r2, #1
 800af46:	9207      	str	r2, [sp, #28]
 800af48:	3508      	adds	r5, #8
 800af4a:	e7d0      	b.n	800aeee <_strtod_l+0x50e>
 800af4c:	23d4      	movs	r3, #212	; 0xd4
 800af4e:	049b      	lsls	r3, r3, #18
 800af50:	18cf      	adds	r7, r1, r3
 800af52:	e7ea      	b.n	800af2a <_strtod_l+0x54a>
 800af54:	2c00      	cmp	r4, #0
 800af56:	d0e8      	beq.n	800af2a <_strtod_l+0x54a>
 800af58:	4264      	negs	r4, r4
 800af5a:	230f      	movs	r3, #15
 800af5c:	0022      	movs	r2, r4
 800af5e:	401a      	ands	r2, r3
 800af60:	421c      	tst	r4, r3
 800af62:	d00a      	beq.n	800af7a <_strtod_l+0x59a>
 800af64:	4b15      	ldr	r3, [pc, #84]	; (800afbc <_strtod_l+0x5dc>)
 800af66:	00d2      	lsls	r2, r2, #3
 800af68:	189b      	adds	r3, r3, r2
 800af6a:	0030      	movs	r0, r6
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	0039      	movs	r1, r7
 800af72:	f7f5 ff81 	bl	8000e78 <__aeabi_ddiv>
 800af76:	0006      	movs	r6, r0
 800af78:	000f      	movs	r7, r1
 800af7a:	1124      	asrs	r4, r4, #4
 800af7c:	d0d5      	beq.n	800af2a <_strtod_l+0x54a>
 800af7e:	2c1f      	cmp	r4, #31
 800af80:	dd28      	ble.n	800afd4 <_strtod_l+0x5f4>
 800af82:	2300      	movs	r3, #0
 800af84:	9305      	str	r3, [sp, #20]
 800af86:	9306      	str	r3, [sp, #24]
 800af88:	930d      	str	r3, [sp, #52]	; 0x34
 800af8a:	9308      	str	r3, [sp, #32]
 800af8c:	2322      	movs	r3, #34	; 0x22
 800af8e:	9a04      	ldr	r2, [sp, #16]
 800af90:	2600      	movs	r6, #0
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af96:	2700      	movs	r7, #0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d18d      	bne.n	800aeb8 <_strtod_l+0x4d8>
 800af9c:	e55b      	b.n	800aa56 <_strtod_l+0x76>
 800af9e:	46c0      	nop			; (mov r8, r8)
 800afa0:	00004e1f 	.word	0x00004e1f
 800afa4:	08014289 	.word	0x08014289
 800afa8:	08013f68 	.word	0x08013f68
 800afac:	7ff00000 	.word	0x7ff00000
 800afb0:	08014281 	.word	0x08014281
 800afb4:	08014337 	.word	0x08014337
 800afb8:	08014333 	.word	0x08014333
 800afbc:	080141a8 	.word	0x080141a8
 800afc0:	08014180 	.word	0x08014180
 800afc4:	fcb00000 	.word	0xfcb00000
 800afc8:	7ca00000 	.word	0x7ca00000
 800afcc:	7c900000 	.word	0x7c900000
 800afd0:	7fefffff 	.word	0x7fefffff
 800afd4:	2310      	movs	r3, #16
 800afd6:	0022      	movs	r2, r4
 800afd8:	401a      	ands	r2, r3
 800afda:	9207      	str	r2, [sp, #28]
 800afdc:	421c      	tst	r4, r3
 800afde:	d001      	beq.n	800afe4 <_strtod_l+0x604>
 800afe0:	335a      	adds	r3, #90	; 0x5a
 800afe2:	9307      	str	r3, [sp, #28]
 800afe4:	0030      	movs	r0, r6
 800afe6:	0039      	movs	r1, r7
 800afe8:	2300      	movs	r3, #0
 800afea:	4dc4      	ldr	r5, [pc, #784]	; (800b2fc <_strtod_l+0x91c>)
 800afec:	2201      	movs	r2, #1
 800afee:	4214      	tst	r4, r2
 800aff0:	d004      	beq.n	800affc <_strtod_l+0x61c>
 800aff2:	682a      	ldr	r2, [r5, #0]
 800aff4:	686b      	ldr	r3, [r5, #4]
 800aff6:	f7f6 fb39 	bl	800166c <__aeabi_dmul>
 800affa:	2301      	movs	r3, #1
 800affc:	1064      	asrs	r4, r4, #1
 800affe:	3508      	adds	r5, #8
 800b000:	2c00      	cmp	r4, #0
 800b002:	d1f3      	bne.n	800afec <_strtod_l+0x60c>
 800b004:	2b00      	cmp	r3, #0
 800b006:	d001      	beq.n	800b00c <_strtod_l+0x62c>
 800b008:	0006      	movs	r6, r0
 800b00a:	000f      	movs	r7, r1
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00f      	beq.n	800b032 <_strtod_l+0x652>
 800b012:	236b      	movs	r3, #107	; 0x6b
 800b014:	007a      	lsls	r2, r7, #1
 800b016:	0d52      	lsrs	r2, r2, #21
 800b018:	0039      	movs	r1, r7
 800b01a:	1a9b      	subs	r3, r3, r2
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dd08      	ble.n	800b032 <_strtod_l+0x652>
 800b020:	2b1f      	cmp	r3, #31
 800b022:	dc00      	bgt.n	800b026 <_strtod_l+0x646>
 800b024:	e121      	b.n	800b26a <_strtod_l+0x88a>
 800b026:	2600      	movs	r6, #0
 800b028:	2b34      	cmp	r3, #52	; 0x34
 800b02a:	dc00      	bgt.n	800b02e <_strtod_l+0x64e>
 800b02c:	e116      	b.n	800b25c <_strtod_l+0x87c>
 800b02e:	27dc      	movs	r7, #220	; 0xdc
 800b030:	04bf      	lsls	r7, r7, #18
 800b032:	2200      	movs	r2, #0
 800b034:	2300      	movs	r3, #0
 800b036:	0030      	movs	r0, r6
 800b038:	0039      	movs	r1, r7
 800b03a:	f7f5 fa05 	bl	8000448 <__aeabi_dcmpeq>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d19f      	bne.n	800af82 <_strtod_l+0x5a2>
 800b042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b044:	9a08      	ldr	r2, [sp, #32]
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b04a:	9b05      	ldr	r3, [sp, #20]
 800b04c:	9804      	ldr	r0, [sp, #16]
 800b04e:	f001 fb01 	bl	800c654 <__s2b>
 800b052:	900d      	str	r0, [sp, #52]	; 0x34
 800b054:	2800      	cmp	r0, #0
 800b056:	d100      	bne.n	800b05a <_strtod_l+0x67a>
 800b058:	e720      	b.n	800ae9c <_strtod_l+0x4bc>
 800b05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05c:	9906      	ldr	r1, [sp, #24]
 800b05e:	17da      	asrs	r2, r3, #31
 800b060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b062:	1a5b      	subs	r3, r3, r1
 800b064:	401a      	ands	r2, r3
 800b066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b068:	9215      	str	r2, [sp, #84]	; 0x54
 800b06a:	43db      	mvns	r3, r3
 800b06c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b06e:	17db      	asrs	r3, r3, #31
 800b070:	401a      	ands	r2, r3
 800b072:	2300      	movs	r3, #0
 800b074:	9218      	str	r2, [sp, #96]	; 0x60
 800b076:	9305      	str	r3, [sp, #20]
 800b078:	9306      	str	r3, [sp, #24]
 800b07a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b07c:	9804      	ldr	r0, [sp, #16]
 800b07e:	6859      	ldr	r1, [r3, #4]
 800b080:	f001 fa72 	bl	800c568 <_Balloc>
 800b084:	9008      	str	r0, [sp, #32]
 800b086:	2800      	cmp	r0, #0
 800b088:	d100      	bne.n	800b08c <_strtod_l+0x6ac>
 800b08a:	e70c      	b.n	800aea6 <_strtod_l+0x4c6>
 800b08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b08e:	300c      	adds	r0, #12
 800b090:	0019      	movs	r1, r3
 800b092:	691a      	ldr	r2, [r3, #16]
 800b094:	310c      	adds	r1, #12
 800b096:	3202      	adds	r2, #2
 800b098:	0092      	lsls	r2, r2, #2
 800b09a:	f000 fdca 	bl	800bc32 <memcpy>
 800b09e:	ab1e      	add	r3, sp, #120	; 0x78
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	ab1d      	add	r3, sp, #116	; 0x74
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	0032      	movs	r2, r6
 800b0a8:	003b      	movs	r3, r7
 800b0aa:	9804      	ldr	r0, [sp, #16]
 800b0ac:	9610      	str	r6, [sp, #64]	; 0x40
 800b0ae:	9711      	str	r7, [sp, #68]	; 0x44
 800b0b0:	f001 fdf8 	bl	800cca4 <__d2b>
 800b0b4:	901c      	str	r0, [sp, #112]	; 0x70
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d100      	bne.n	800b0bc <_strtod_l+0x6dc>
 800b0ba:	e6f4      	b.n	800aea6 <_strtod_l+0x4c6>
 800b0bc:	2101      	movs	r1, #1
 800b0be:	9804      	ldr	r0, [sp, #16]
 800b0c0:	f001 fb5c 	bl	800c77c <__i2b>
 800b0c4:	9006      	str	r0, [sp, #24]
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d100      	bne.n	800b0cc <_strtod_l+0x6ec>
 800b0ca:	e6ec      	b.n	800aea6 <_strtod_l+0x4c6>
 800b0cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b0d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b0d2:	1ad4      	subs	r4, r2, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	db01      	blt.n	800b0dc <_strtod_l+0x6fc>
 800b0d8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b0da:	195d      	adds	r5, r3, r5
 800b0dc:	9907      	ldr	r1, [sp, #28]
 800b0de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b0e0:	1a5b      	subs	r3, r3, r1
 800b0e2:	2136      	movs	r1, #54	; 0x36
 800b0e4:	189b      	adds	r3, r3, r2
 800b0e6:	1a8a      	subs	r2, r1, r2
 800b0e8:	4985      	ldr	r1, [pc, #532]	; (800b300 <_strtod_l+0x920>)
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	468c      	mov	ip, r1
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	9114      	str	r1, [sp, #80]	; 0x50
 800b0f4:	9012      	str	r0, [sp, #72]	; 0x48
 800b0f6:	4563      	cmp	r3, ip
 800b0f8:	da07      	bge.n	800b10a <_strtod_l+0x72a>
 800b0fa:	4661      	mov	r1, ip
 800b0fc:	1ac9      	subs	r1, r1, r3
 800b0fe:	1a52      	subs	r2, r2, r1
 800b100:	291f      	cmp	r1, #31
 800b102:	dd00      	ble.n	800b106 <_strtod_l+0x726>
 800b104:	e0b6      	b.n	800b274 <_strtod_l+0x894>
 800b106:	4088      	lsls	r0, r1
 800b108:	9012      	str	r0, [sp, #72]	; 0x48
 800b10a:	18ab      	adds	r3, r5, r2
 800b10c:	930c      	str	r3, [sp, #48]	; 0x30
 800b10e:	18a4      	adds	r4, r4, r2
 800b110:	9b07      	ldr	r3, [sp, #28]
 800b112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b114:	191c      	adds	r4, r3, r4
 800b116:	002b      	movs	r3, r5
 800b118:	4295      	cmp	r5, r2
 800b11a:	dd00      	ble.n	800b11e <_strtod_l+0x73e>
 800b11c:	0013      	movs	r3, r2
 800b11e:	42a3      	cmp	r3, r4
 800b120:	dd00      	ble.n	800b124 <_strtod_l+0x744>
 800b122:	0023      	movs	r3, r4
 800b124:	2b00      	cmp	r3, #0
 800b126:	dd04      	ble.n	800b132 <_strtod_l+0x752>
 800b128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b12a:	1ae4      	subs	r4, r4, r3
 800b12c:	1ad2      	subs	r2, r2, r3
 800b12e:	920c      	str	r2, [sp, #48]	; 0x30
 800b130:	1aed      	subs	r5, r5, r3
 800b132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd17      	ble.n	800b168 <_strtod_l+0x788>
 800b138:	001a      	movs	r2, r3
 800b13a:	9906      	ldr	r1, [sp, #24]
 800b13c:	9804      	ldr	r0, [sp, #16]
 800b13e:	f001 fbe5 	bl	800c90c <__pow5mult>
 800b142:	9006      	str	r0, [sp, #24]
 800b144:	2800      	cmp	r0, #0
 800b146:	d100      	bne.n	800b14a <_strtod_l+0x76a>
 800b148:	e6ad      	b.n	800aea6 <_strtod_l+0x4c6>
 800b14a:	0001      	movs	r1, r0
 800b14c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b14e:	9804      	ldr	r0, [sp, #16]
 800b150:	f001 fb2c 	bl	800c7ac <__multiply>
 800b154:	900e      	str	r0, [sp, #56]	; 0x38
 800b156:	2800      	cmp	r0, #0
 800b158:	d100      	bne.n	800b15c <_strtod_l+0x77c>
 800b15a:	e6a4      	b.n	800aea6 <_strtod_l+0x4c6>
 800b15c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b15e:	9804      	ldr	r0, [sp, #16]
 800b160:	f001 fa2a 	bl	800c5b8 <_Bfree>
 800b164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b166:	931c      	str	r3, [sp, #112]	; 0x70
 800b168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dd00      	ble.n	800b170 <_strtod_l+0x790>
 800b16e:	e087      	b.n	800b280 <_strtod_l+0x8a0>
 800b170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b172:	2b00      	cmp	r3, #0
 800b174:	dd08      	ble.n	800b188 <_strtod_l+0x7a8>
 800b176:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b178:	9908      	ldr	r1, [sp, #32]
 800b17a:	9804      	ldr	r0, [sp, #16]
 800b17c:	f001 fbc6 	bl	800c90c <__pow5mult>
 800b180:	9008      	str	r0, [sp, #32]
 800b182:	2800      	cmp	r0, #0
 800b184:	d100      	bne.n	800b188 <_strtod_l+0x7a8>
 800b186:	e68e      	b.n	800aea6 <_strtod_l+0x4c6>
 800b188:	2c00      	cmp	r4, #0
 800b18a:	dd08      	ble.n	800b19e <_strtod_l+0x7be>
 800b18c:	0022      	movs	r2, r4
 800b18e:	9908      	ldr	r1, [sp, #32]
 800b190:	9804      	ldr	r0, [sp, #16]
 800b192:	f001 fbfd 	bl	800c990 <__lshift>
 800b196:	9008      	str	r0, [sp, #32]
 800b198:	2800      	cmp	r0, #0
 800b19a:	d100      	bne.n	800b19e <_strtod_l+0x7be>
 800b19c:	e683      	b.n	800aea6 <_strtod_l+0x4c6>
 800b19e:	2d00      	cmp	r5, #0
 800b1a0:	dd08      	ble.n	800b1b4 <_strtod_l+0x7d4>
 800b1a2:	002a      	movs	r2, r5
 800b1a4:	9906      	ldr	r1, [sp, #24]
 800b1a6:	9804      	ldr	r0, [sp, #16]
 800b1a8:	f001 fbf2 	bl	800c990 <__lshift>
 800b1ac:	9006      	str	r0, [sp, #24]
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d100      	bne.n	800b1b4 <_strtod_l+0x7d4>
 800b1b2:	e678      	b.n	800aea6 <_strtod_l+0x4c6>
 800b1b4:	9a08      	ldr	r2, [sp, #32]
 800b1b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b1b8:	9804      	ldr	r0, [sp, #16]
 800b1ba:	f001 fc73 	bl	800caa4 <__mdiff>
 800b1be:	9005      	str	r0, [sp, #20]
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d100      	bne.n	800b1c6 <_strtod_l+0x7e6>
 800b1c4:	e66f      	b.n	800aea6 <_strtod_l+0x4c6>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	68c3      	ldr	r3, [r0, #12]
 800b1ca:	9906      	ldr	r1, [sp, #24]
 800b1cc:	60c2      	str	r2, [r0, #12]
 800b1ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b1d0:	f001 fc4c 	bl	800ca6c <__mcmp>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	da5d      	bge.n	800b294 <_strtod_l+0x8b4>
 800b1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1da:	4333      	orrs	r3, r6
 800b1dc:	d000      	beq.n	800b1e0 <_strtod_l+0x800>
 800b1de:	e088      	b.n	800b2f2 <_strtod_l+0x912>
 800b1e0:	033b      	lsls	r3, r7, #12
 800b1e2:	d000      	beq.n	800b1e6 <_strtod_l+0x806>
 800b1e4:	e085      	b.n	800b2f2 <_strtod_l+0x912>
 800b1e6:	22d6      	movs	r2, #214	; 0xd6
 800b1e8:	4b46      	ldr	r3, [pc, #280]	; (800b304 <_strtod_l+0x924>)
 800b1ea:	04d2      	lsls	r2, r2, #19
 800b1ec:	403b      	ands	r3, r7
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d97f      	bls.n	800b2f2 <_strtod_l+0x912>
 800b1f2:	9b05      	ldr	r3, [sp, #20]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d103      	bne.n	800b202 <_strtod_l+0x822>
 800b1fa:	9b05      	ldr	r3, [sp, #20]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	dd77      	ble.n	800b2f2 <_strtod_l+0x912>
 800b202:	9905      	ldr	r1, [sp, #20]
 800b204:	2201      	movs	r2, #1
 800b206:	9804      	ldr	r0, [sp, #16]
 800b208:	f001 fbc2 	bl	800c990 <__lshift>
 800b20c:	9906      	ldr	r1, [sp, #24]
 800b20e:	9005      	str	r0, [sp, #20]
 800b210:	f001 fc2c 	bl	800ca6c <__mcmp>
 800b214:	2800      	cmp	r0, #0
 800b216:	dd6c      	ble.n	800b2f2 <_strtod_l+0x912>
 800b218:	9907      	ldr	r1, [sp, #28]
 800b21a:	003b      	movs	r3, r7
 800b21c:	4a39      	ldr	r2, [pc, #228]	; (800b304 <_strtod_l+0x924>)
 800b21e:	2900      	cmp	r1, #0
 800b220:	d100      	bne.n	800b224 <_strtod_l+0x844>
 800b222:	e094      	b.n	800b34e <_strtod_l+0x96e>
 800b224:	0011      	movs	r1, r2
 800b226:	20d6      	movs	r0, #214	; 0xd6
 800b228:	4039      	ands	r1, r7
 800b22a:	04c0      	lsls	r0, r0, #19
 800b22c:	4281      	cmp	r1, r0
 800b22e:	dd00      	ble.n	800b232 <_strtod_l+0x852>
 800b230:	e08d      	b.n	800b34e <_strtod_l+0x96e>
 800b232:	23dc      	movs	r3, #220	; 0xdc
 800b234:	049b      	lsls	r3, r3, #18
 800b236:	4299      	cmp	r1, r3
 800b238:	dc00      	bgt.n	800b23c <_strtod_l+0x85c>
 800b23a:	e6a7      	b.n	800af8c <_strtod_l+0x5ac>
 800b23c:	0030      	movs	r0, r6
 800b23e:	0039      	movs	r1, r7
 800b240:	4b31      	ldr	r3, [pc, #196]	; (800b308 <_strtod_l+0x928>)
 800b242:	2200      	movs	r2, #0
 800b244:	f7f6 fa12 	bl	800166c <__aeabi_dmul>
 800b248:	4b2e      	ldr	r3, [pc, #184]	; (800b304 <_strtod_l+0x924>)
 800b24a:	0006      	movs	r6, r0
 800b24c:	000f      	movs	r7, r1
 800b24e:	420b      	tst	r3, r1
 800b250:	d000      	beq.n	800b254 <_strtod_l+0x874>
 800b252:	e631      	b.n	800aeb8 <_strtod_l+0x4d8>
 800b254:	2322      	movs	r3, #34	; 0x22
 800b256:	9a04      	ldr	r2, [sp, #16]
 800b258:	6013      	str	r3, [r2, #0]
 800b25a:	e62d      	b.n	800aeb8 <_strtod_l+0x4d8>
 800b25c:	234b      	movs	r3, #75	; 0x4b
 800b25e:	1a9a      	subs	r2, r3, r2
 800b260:	3b4c      	subs	r3, #76	; 0x4c
 800b262:	4093      	lsls	r3, r2
 800b264:	4019      	ands	r1, r3
 800b266:	000f      	movs	r7, r1
 800b268:	e6e3      	b.n	800b032 <_strtod_l+0x652>
 800b26a:	2201      	movs	r2, #1
 800b26c:	4252      	negs	r2, r2
 800b26e:	409a      	lsls	r2, r3
 800b270:	4016      	ands	r6, r2
 800b272:	e6de      	b.n	800b032 <_strtod_l+0x652>
 800b274:	4925      	ldr	r1, [pc, #148]	; (800b30c <_strtod_l+0x92c>)
 800b276:	1acb      	subs	r3, r1, r3
 800b278:	0001      	movs	r1, r0
 800b27a:	4099      	lsls	r1, r3
 800b27c:	9114      	str	r1, [sp, #80]	; 0x50
 800b27e:	e743      	b.n	800b108 <_strtod_l+0x728>
 800b280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b282:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b284:	9804      	ldr	r0, [sp, #16]
 800b286:	f001 fb83 	bl	800c990 <__lshift>
 800b28a:	901c      	str	r0, [sp, #112]	; 0x70
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d000      	beq.n	800b292 <_strtod_l+0x8b2>
 800b290:	e76e      	b.n	800b170 <_strtod_l+0x790>
 800b292:	e608      	b.n	800aea6 <_strtod_l+0x4c6>
 800b294:	970e      	str	r7, [sp, #56]	; 0x38
 800b296:	2800      	cmp	r0, #0
 800b298:	d177      	bne.n	800b38a <_strtod_l+0x9aa>
 800b29a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b29c:	033b      	lsls	r3, r7, #12
 800b29e:	0b1b      	lsrs	r3, r3, #12
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	d039      	beq.n	800b318 <_strtod_l+0x938>
 800b2a4:	4a1a      	ldr	r2, [pc, #104]	; (800b310 <_strtod_l+0x930>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d139      	bne.n	800b31e <_strtod_l+0x93e>
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	9b07      	ldr	r3, [sp, #28]
 800b2ae:	4249      	negs	r1, r1
 800b2b0:	0032      	movs	r2, r6
 800b2b2:	0008      	movs	r0, r1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00b      	beq.n	800b2d0 <_strtod_l+0x8f0>
 800b2b8:	24d4      	movs	r4, #212	; 0xd4
 800b2ba:	4b12      	ldr	r3, [pc, #72]	; (800b304 <_strtod_l+0x924>)
 800b2bc:	0008      	movs	r0, r1
 800b2be:	403b      	ands	r3, r7
 800b2c0:	04e4      	lsls	r4, r4, #19
 800b2c2:	42a3      	cmp	r3, r4
 800b2c4:	d804      	bhi.n	800b2d0 <_strtod_l+0x8f0>
 800b2c6:	306c      	adds	r0, #108	; 0x6c
 800b2c8:	0d1b      	lsrs	r3, r3, #20
 800b2ca:	1ac3      	subs	r3, r0, r3
 800b2cc:	4099      	lsls	r1, r3
 800b2ce:	0008      	movs	r0, r1
 800b2d0:	4282      	cmp	r2, r0
 800b2d2:	d124      	bne.n	800b31e <_strtod_l+0x93e>
 800b2d4:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <_strtod_l+0x934>)
 800b2d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b2d8:	4299      	cmp	r1, r3
 800b2da:	d102      	bne.n	800b2e2 <_strtod_l+0x902>
 800b2dc:	3201      	adds	r2, #1
 800b2de:	d100      	bne.n	800b2e2 <_strtod_l+0x902>
 800b2e0:	e5e1      	b.n	800aea6 <_strtod_l+0x4c6>
 800b2e2:	4b08      	ldr	r3, [pc, #32]	; (800b304 <_strtod_l+0x924>)
 800b2e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2e6:	2600      	movs	r6, #0
 800b2e8:	401a      	ands	r2, r3
 800b2ea:	0013      	movs	r3, r2
 800b2ec:	2280      	movs	r2, #128	; 0x80
 800b2ee:	0352      	lsls	r2, r2, #13
 800b2f0:	189f      	adds	r7, r3, r2
 800b2f2:	9b07      	ldr	r3, [sp, #28]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1a1      	bne.n	800b23c <_strtod_l+0x85c>
 800b2f8:	e5de      	b.n	800aeb8 <_strtod_l+0x4d8>
 800b2fa:	46c0      	nop			; (mov r8, r8)
 800b2fc:	08013f80 	.word	0x08013f80
 800b300:	fffffc02 	.word	0xfffffc02
 800b304:	7ff00000 	.word	0x7ff00000
 800b308:	39500000 	.word	0x39500000
 800b30c:	fffffbe2 	.word	0xfffffbe2
 800b310:	000fffff 	.word	0x000fffff
 800b314:	7fefffff 	.word	0x7fefffff
 800b318:	4333      	orrs	r3, r6
 800b31a:	d100      	bne.n	800b31e <_strtod_l+0x93e>
 800b31c:	e77c      	b.n	800b218 <_strtod_l+0x838>
 800b31e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b320:	2b00      	cmp	r3, #0
 800b322:	d01d      	beq.n	800b360 <_strtod_l+0x980>
 800b324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b326:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b328:	4213      	tst	r3, r2
 800b32a:	d0e2      	beq.n	800b2f2 <_strtod_l+0x912>
 800b32c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b32e:	0030      	movs	r0, r6
 800b330:	0039      	movs	r1, r7
 800b332:	9a07      	ldr	r2, [sp, #28]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d017      	beq.n	800b368 <_strtod_l+0x988>
 800b338:	f7ff fb3a 	bl	800a9b0 <sulp>
 800b33c:	0002      	movs	r2, r0
 800b33e:	000b      	movs	r3, r1
 800b340:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b342:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b344:	f7f5 fa38 	bl	80007b8 <__aeabi_dadd>
 800b348:	0006      	movs	r6, r0
 800b34a:	000f      	movs	r7, r1
 800b34c:	e7d1      	b.n	800b2f2 <_strtod_l+0x912>
 800b34e:	2601      	movs	r6, #1
 800b350:	4013      	ands	r3, r2
 800b352:	4a98      	ldr	r2, [pc, #608]	; (800b5b4 <_strtod_l+0xbd4>)
 800b354:	4276      	negs	r6, r6
 800b356:	189b      	adds	r3, r3, r2
 800b358:	4a97      	ldr	r2, [pc, #604]	; (800b5b8 <_strtod_l+0xbd8>)
 800b35a:	431a      	orrs	r2, r3
 800b35c:	0017      	movs	r7, r2
 800b35e:	e7c8      	b.n	800b2f2 <_strtod_l+0x912>
 800b360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b362:	4233      	tst	r3, r6
 800b364:	d0c5      	beq.n	800b2f2 <_strtod_l+0x912>
 800b366:	e7e1      	b.n	800b32c <_strtod_l+0x94c>
 800b368:	f7ff fb22 	bl	800a9b0 <sulp>
 800b36c:	0002      	movs	r2, r0
 800b36e:	000b      	movs	r3, r1
 800b370:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b372:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b374:	f7f6 fc3c 	bl	8001bf0 <__aeabi_dsub>
 800b378:	2200      	movs	r2, #0
 800b37a:	2300      	movs	r3, #0
 800b37c:	0006      	movs	r6, r0
 800b37e:	000f      	movs	r7, r1
 800b380:	f7f5 f862 	bl	8000448 <__aeabi_dcmpeq>
 800b384:	2800      	cmp	r0, #0
 800b386:	d0b4      	beq.n	800b2f2 <_strtod_l+0x912>
 800b388:	e600      	b.n	800af8c <_strtod_l+0x5ac>
 800b38a:	9906      	ldr	r1, [sp, #24]
 800b38c:	9805      	ldr	r0, [sp, #20]
 800b38e:	f001 fce9 	bl	800cd64 <__ratio>
 800b392:	2380      	movs	r3, #128	; 0x80
 800b394:	2200      	movs	r2, #0
 800b396:	05db      	lsls	r3, r3, #23
 800b398:	0004      	movs	r4, r0
 800b39a:	000d      	movs	r5, r1
 800b39c:	f7f5 f864 	bl	8000468 <__aeabi_dcmple>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d06d      	beq.n	800b480 <_strtod_l+0xaa0>
 800b3a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d000      	beq.n	800b3ac <_strtod_l+0x9cc>
 800b3aa:	e07e      	b.n	800b4aa <_strtod_l+0xaca>
 800b3ac:	2e00      	cmp	r6, #0
 800b3ae:	d158      	bne.n	800b462 <_strtod_l+0xa82>
 800b3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3b2:	031b      	lsls	r3, r3, #12
 800b3b4:	d000      	beq.n	800b3b8 <_strtod_l+0x9d8>
 800b3b6:	e07f      	b.n	800b4b8 <_strtod_l+0xad8>
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	0020      	movs	r0, r4
 800b3bc:	0029      	movs	r1, r5
 800b3be:	4b7f      	ldr	r3, [pc, #508]	; (800b5bc <_strtod_l+0xbdc>)
 800b3c0:	f7f5 f848 	bl	8000454 <__aeabi_dcmplt>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d158      	bne.n	800b47a <_strtod_l+0xa9a>
 800b3c8:	0020      	movs	r0, r4
 800b3ca:	0029      	movs	r1, r5
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	4b7c      	ldr	r3, [pc, #496]	; (800b5c0 <_strtod_l+0xbe0>)
 800b3d0:	f7f6 f94c 	bl	800166c <__aeabi_dmul>
 800b3d4:	0004      	movs	r4, r0
 800b3d6:	000d      	movs	r5, r1
 800b3d8:	2380      	movs	r3, #128	; 0x80
 800b3da:	061b      	lsls	r3, r3, #24
 800b3dc:	940a      	str	r4, [sp, #40]	; 0x28
 800b3de:	18eb      	adds	r3, r5, r3
 800b3e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e6:	9212      	str	r2, [sp, #72]	; 0x48
 800b3e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3ea:	4a76      	ldr	r2, [pc, #472]	; (800b5c4 <_strtod_l+0xbe4>)
 800b3ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	9314      	str	r3, [sp, #80]	; 0x50
 800b3f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3f4:	4b74      	ldr	r3, [pc, #464]	; (800b5c8 <_strtod_l+0xbe8>)
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d000      	beq.n	800b3fc <_strtod_l+0xa1c>
 800b3fa:	e091      	b.n	800b520 <_strtod_l+0xb40>
 800b3fc:	4a73      	ldr	r2, [pc, #460]	; (800b5cc <_strtod_l+0xbec>)
 800b3fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b400:	4694      	mov	ip, r2
 800b402:	4463      	add	r3, ip
 800b404:	001f      	movs	r7, r3
 800b406:	0030      	movs	r0, r6
 800b408:	0019      	movs	r1, r3
 800b40a:	f001 fbe3 	bl	800cbd4 <__ulp>
 800b40e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b412:	f7f6 f92b 	bl	800166c <__aeabi_dmul>
 800b416:	0032      	movs	r2, r6
 800b418:	003b      	movs	r3, r7
 800b41a:	f7f5 f9cd 	bl	80007b8 <__aeabi_dadd>
 800b41e:	4a69      	ldr	r2, [pc, #420]	; (800b5c4 <_strtod_l+0xbe4>)
 800b420:	4b6b      	ldr	r3, [pc, #428]	; (800b5d0 <_strtod_l+0xbf0>)
 800b422:	0006      	movs	r6, r0
 800b424:	400a      	ands	r2, r1
 800b426:	429a      	cmp	r2, r3
 800b428:	d949      	bls.n	800b4be <_strtod_l+0xade>
 800b42a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b42c:	4b69      	ldr	r3, [pc, #420]	; (800b5d4 <_strtod_l+0xbf4>)
 800b42e:	429a      	cmp	r2, r3
 800b430:	d103      	bne.n	800b43a <_strtod_l+0xa5a>
 800b432:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b434:	3301      	adds	r3, #1
 800b436:	d100      	bne.n	800b43a <_strtod_l+0xa5a>
 800b438:	e535      	b.n	800aea6 <_strtod_l+0x4c6>
 800b43a:	2601      	movs	r6, #1
 800b43c:	4f65      	ldr	r7, [pc, #404]	; (800b5d4 <_strtod_l+0xbf4>)
 800b43e:	4276      	negs	r6, r6
 800b440:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b442:	9804      	ldr	r0, [sp, #16]
 800b444:	f001 f8b8 	bl	800c5b8 <_Bfree>
 800b448:	9908      	ldr	r1, [sp, #32]
 800b44a:	9804      	ldr	r0, [sp, #16]
 800b44c:	f001 f8b4 	bl	800c5b8 <_Bfree>
 800b450:	9906      	ldr	r1, [sp, #24]
 800b452:	9804      	ldr	r0, [sp, #16]
 800b454:	f001 f8b0 	bl	800c5b8 <_Bfree>
 800b458:	9905      	ldr	r1, [sp, #20]
 800b45a:	9804      	ldr	r0, [sp, #16]
 800b45c:	f001 f8ac 	bl	800c5b8 <_Bfree>
 800b460:	e60b      	b.n	800b07a <_strtod_l+0x69a>
 800b462:	2e01      	cmp	r6, #1
 800b464:	d103      	bne.n	800b46e <_strtod_l+0xa8e>
 800b466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d100      	bne.n	800b46e <_strtod_l+0xa8e>
 800b46c:	e58e      	b.n	800af8c <_strtod_l+0x5ac>
 800b46e:	2300      	movs	r3, #0
 800b470:	4c59      	ldr	r4, [pc, #356]	; (800b5d8 <_strtod_l+0xbf8>)
 800b472:	930a      	str	r3, [sp, #40]	; 0x28
 800b474:	940b      	str	r4, [sp, #44]	; 0x2c
 800b476:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b478:	e01c      	b.n	800b4b4 <_strtod_l+0xad4>
 800b47a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b47c:	4d50      	ldr	r5, [pc, #320]	; (800b5c0 <_strtod_l+0xbe0>)
 800b47e:	e7ab      	b.n	800b3d8 <_strtod_l+0x9f8>
 800b480:	2200      	movs	r2, #0
 800b482:	0020      	movs	r0, r4
 800b484:	0029      	movs	r1, r5
 800b486:	4b4e      	ldr	r3, [pc, #312]	; (800b5c0 <_strtod_l+0xbe0>)
 800b488:	f7f6 f8f0 	bl	800166c <__aeabi_dmul>
 800b48c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b48e:	0004      	movs	r4, r0
 800b490:	000b      	movs	r3, r1
 800b492:	000d      	movs	r5, r1
 800b494:	2a00      	cmp	r2, #0
 800b496:	d104      	bne.n	800b4a2 <_strtod_l+0xac2>
 800b498:	2280      	movs	r2, #128	; 0x80
 800b49a:	0612      	lsls	r2, r2, #24
 800b49c:	900a      	str	r0, [sp, #40]	; 0x28
 800b49e:	188b      	adds	r3, r1, r2
 800b4a0:	e79e      	b.n	800b3e0 <_strtod_l+0xa00>
 800b4a2:	0002      	movs	r2, r0
 800b4a4:	920a      	str	r2, [sp, #40]	; 0x28
 800b4a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4a8:	e79b      	b.n	800b3e2 <_strtod_l+0xa02>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	4c43      	ldr	r4, [pc, #268]	; (800b5bc <_strtod_l+0xbdc>)
 800b4ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b4b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b4b2:	2400      	movs	r4, #0
 800b4b4:	4d41      	ldr	r5, [pc, #260]	; (800b5bc <_strtod_l+0xbdc>)
 800b4b6:	e794      	b.n	800b3e2 <_strtod_l+0xa02>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	4c47      	ldr	r4, [pc, #284]	; (800b5d8 <_strtod_l+0xbf8>)
 800b4bc:	e7f7      	b.n	800b4ae <_strtod_l+0xace>
 800b4be:	23d4      	movs	r3, #212	; 0xd4
 800b4c0:	049b      	lsls	r3, r3, #18
 800b4c2:	18cf      	adds	r7, r1, r3
 800b4c4:	9b07      	ldr	r3, [sp, #28]
 800b4c6:	970e      	str	r7, [sp, #56]	; 0x38
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1b9      	bne.n	800b440 <_strtod_l+0xa60>
 800b4cc:	4b3d      	ldr	r3, [pc, #244]	; (800b5c4 <_strtod_l+0xbe4>)
 800b4ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4d0:	403b      	ands	r3, r7
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d1b4      	bne.n	800b440 <_strtod_l+0xa60>
 800b4d6:	0020      	movs	r0, r4
 800b4d8:	0029      	movs	r1, r5
 800b4da:	f7f5 f84f 	bl	800057c <__aeabi_d2lz>
 800b4de:	f7f5 f889 	bl	80005f4 <__aeabi_l2d>
 800b4e2:	0002      	movs	r2, r0
 800b4e4:	000b      	movs	r3, r1
 800b4e6:	0020      	movs	r0, r4
 800b4e8:	0029      	movs	r1, r5
 800b4ea:	f7f6 fb81 	bl	8001bf0 <__aeabi_dsub>
 800b4ee:	033b      	lsls	r3, r7, #12
 800b4f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4f2:	0b1b      	lsrs	r3, r3, #12
 800b4f4:	4333      	orrs	r3, r6
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	0004      	movs	r4, r0
 800b4fa:	000d      	movs	r5, r1
 800b4fc:	4a37      	ldr	r2, [pc, #220]	; (800b5dc <_strtod_l+0xbfc>)
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d054      	beq.n	800b5ac <_strtod_l+0xbcc>
 800b502:	4b37      	ldr	r3, [pc, #220]	; (800b5e0 <_strtod_l+0xc00>)
 800b504:	f7f4 ffa6 	bl	8000454 <__aeabi_dcmplt>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d000      	beq.n	800b50e <_strtod_l+0xb2e>
 800b50c:	e4d4      	b.n	800aeb8 <_strtod_l+0x4d8>
 800b50e:	0020      	movs	r0, r4
 800b510:	0029      	movs	r1, r5
 800b512:	4a34      	ldr	r2, [pc, #208]	; (800b5e4 <_strtod_l+0xc04>)
 800b514:	4b2a      	ldr	r3, [pc, #168]	; (800b5c0 <_strtod_l+0xbe0>)
 800b516:	f7f4 ffb1 	bl	800047c <__aeabi_dcmpgt>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d090      	beq.n	800b440 <_strtod_l+0xa60>
 800b51e:	e4cb      	b.n	800aeb8 <_strtod_l+0x4d8>
 800b520:	9b07      	ldr	r3, [sp, #28]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d02b      	beq.n	800b57e <_strtod_l+0xb9e>
 800b526:	23d4      	movs	r3, #212	; 0xd4
 800b528:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b52a:	04db      	lsls	r3, r3, #19
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d826      	bhi.n	800b57e <_strtod_l+0xb9e>
 800b530:	0020      	movs	r0, r4
 800b532:	0029      	movs	r1, r5
 800b534:	4a2c      	ldr	r2, [pc, #176]	; (800b5e8 <_strtod_l+0xc08>)
 800b536:	4b2d      	ldr	r3, [pc, #180]	; (800b5ec <_strtod_l+0xc0c>)
 800b538:	f7f4 ff96 	bl	8000468 <__aeabi_dcmple>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d017      	beq.n	800b570 <_strtod_l+0xb90>
 800b540:	0020      	movs	r0, r4
 800b542:	0029      	movs	r1, r5
 800b544:	f7f4 fffc 	bl	8000540 <__aeabi_d2uiz>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d100      	bne.n	800b54e <_strtod_l+0xb6e>
 800b54c:	3001      	adds	r0, #1
 800b54e:	f7f6 ff55 	bl	80023fc <__aeabi_ui2d>
 800b552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b554:	0004      	movs	r4, r0
 800b556:	000b      	movs	r3, r1
 800b558:	000d      	movs	r5, r1
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	d122      	bne.n	800b5a4 <_strtod_l+0xbc4>
 800b55e:	2280      	movs	r2, #128	; 0x80
 800b560:	0612      	lsls	r2, r2, #24
 800b562:	188b      	adds	r3, r1, r2
 800b564:	9016      	str	r0, [sp, #88]	; 0x58
 800b566:	9317      	str	r3, [sp, #92]	; 0x5c
 800b568:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b56a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b56c:	9212      	str	r2, [sp, #72]	; 0x48
 800b56e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b570:	22d6      	movs	r2, #214	; 0xd6
 800b572:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b574:	04d2      	lsls	r2, r2, #19
 800b576:	189b      	adds	r3, r3, r2
 800b578:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b57a:	1a9b      	subs	r3, r3, r2
 800b57c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b57e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b580:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b582:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b584:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b586:	f001 fb25 	bl	800cbd4 <__ulp>
 800b58a:	0002      	movs	r2, r0
 800b58c:	000b      	movs	r3, r1
 800b58e:	0030      	movs	r0, r6
 800b590:	0039      	movs	r1, r7
 800b592:	f7f6 f86b 	bl	800166c <__aeabi_dmul>
 800b596:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b59a:	f7f5 f90d 	bl	80007b8 <__aeabi_dadd>
 800b59e:	0006      	movs	r6, r0
 800b5a0:	000f      	movs	r7, r1
 800b5a2:	e78f      	b.n	800b4c4 <_strtod_l+0xae4>
 800b5a4:	0002      	movs	r2, r0
 800b5a6:	9216      	str	r2, [sp, #88]	; 0x58
 800b5a8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5aa:	e7dd      	b.n	800b568 <_strtod_l+0xb88>
 800b5ac:	4b10      	ldr	r3, [pc, #64]	; (800b5f0 <_strtod_l+0xc10>)
 800b5ae:	f7f4 ff51 	bl	8000454 <__aeabi_dcmplt>
 800b5b2:	e7b2      	b.n	800b51a <_strtod_l+0xb3a>
 800b5b4:	fff00000 	.word	0xfff00000
 800b5b8:	000fffff 	.word	0x000fffff
 800b5bc:	3ff00000 	.word	0x3ff00000
 800b5c0:	3fe00000 	.word	0x3fe00000
 800b5c4:	7ff00000 	.word	0x7ff00000
 800b5c8:	7fe00000 	.word	0x7fe00000
 800b5cc:	fcb00000 	.word	0xfcb00000
 800b5d0:	7c9fffff 	.word	0x7c9fffff
 800b5d4:	7fefffff 	.word	0x7fefffff
 800b5d8:	bff00000 	.word	0xbff00000
 800b5dc:	94a03595 	.word	0x94a03595
 800b5e0:	3fdfffff 	.word	0x3fdfffff
 800b5e4:	35afe535 	.word	0x35afe535
 800b5e8:	ffc00000 	.word	0xffc00000
 800b5ec:	41dfffff 	.word	0x41dfffff
 800b5f0:	3fcfffff 	.word	0x3fcfffff

0800b5f4 <_strtod_r>:
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	4b02      	ldr	r3, [pc, #8]	; (800b600 <_strtod_r+0xc>)
 800b5f8:	f7ff f9f2 	bl	800a9e0 <_strtod_l>
 800b5fc:	bd10      	pop	{r4, pc}
 800b5fe:	46c0      	nop			; (mov r8, r8)
 800b600:	20000448 	.word	0x20000448

0800b604 <strtod>:
 800b604:	b510      	push	{r4, lr}
 800b606:	4c04      	ldr	r4, [pc, #16]	; (800b618 <strtod+0x14>)
 800b608:	000a      	movs	r2, r1
 800b60a:	0001      	movs	r1, r0
 800b60c:	4b03      	ldr	r3, [pc, #12]	; (800b61c <strtod+0x18>)
 800b60e:	6820      	ldr	r0, [r4, #0]
 800b610:	f7ff f9e6 	bl	800a9e0 <_strtod_l>
 800b614:	bd10      	pop	{r4, pc}
 800b616:	46c0      	nop			; (mov r8, r8)
 800b618:	200006d8 	.word	0x200006d8
 800b61c:	20000448 	.word	0x20000448

0800b620 <_strtol_l.constprop.0>:
 800b620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b622:	b087      	sub	sp, #28
 800b624:	001e      	movs	r6, r3
 800b626:	9005      	str	r0, [sp, #20]
 800b628:	9101      	str	r1, [sp, #4]
 800b62a:	9202      	str	r2, [sp, #8]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d048      	beq.n	800b6c2 <_strtol_l.constprop.0+0xa2>
 800b630:	000b      	movs	r3, r1
 800b632:	2e24      	cmp	r6, #36	; 0x24
 800b634:	d845      	bhi.n	800b6c2 <_strtol_l.constprop.0+0xa2>
 800b636:	4a3b      	ldr	r2, [pc, #236]	; (800b724 <_strtol_l.constprop.0+0x104>)
 800b638:	2108      	movs	r1, #8
 800b63a:	4694      	mov	ip, r2
 800b63c:	001a      	movs	r2, r3
 800b63e:	4660      	mov	r0, ip
 800b640:	7814      	ldrb	r4, [r2, #0]
 800b642:	3301      	adds	r3, #1
 800b644:	5d00      	ldrb	r0, [r0, r4]
 800b646:	001d      	movs	r5, r3
 800b648:	0007      	movs	r7, r0
 800b64a:	400f      	ands	r7, r1
 800b64c:	4208      	tst	r0, r1
 800b64e:	d1f5      	bne.n	800b63c <_strtol_l.constprop.0+0x1c>
 800b650:	2c2d      	cmp	r4, #45	; 0x2d
 800b652:	d13d      	bne.n	800b6d0 <_strtol_l.constprop.0+0xb0>
 800b654:	2701      	movs	r7, #1
 800b656:	781c      	ldrb	r4, [r3, #0]
 800b658:	1c95      	adds	r5, r2, #2
 800b65a:	2e00      	cmp	r6, #0
 800b65c:	d05e      	beq.n	800b71c <_strtol_l.constprop.0+0xfc>
 800b65e:	2e10      	cmp	r6, #16
 800b660:	d109      	bne.n	800b676 <_strtol_l.constprop.0+0x56>
 800b662:	2c30      	cmp	r4, #48	; 0x30
 800b664:	d107      	bne.n	800b676 <_strtol_l.constprop.0+0x56>
 800b666:	2220      	movs	r2, #32
 800b668:	782b      	ldrb	r3, [r5, #0]
 800b66a:	4393      	bics	r3, r2
 800b66c:	2b58      	cmp	r3, #88	; 0x58
 800b66e:	d150      	bne.n	800b712 <_strtol_l.constprop.0+0xf2>
 800b670:	2610      	movs	r6, #16
 800b672:	786c      	ldrb	r4, [r5, #1]
 800b674:	3502      	adds	r5, #2
 800b676:	4b2c      	ldr	r3, [pc, #176]	; (800b728 <_strtol_l.constprop.0+0x108>)
 800b678:	0031      	movs	r1, r6
 800b67a:	18fb      	adds	r3, r7, r3
 800b67c:	0018      	movs	r0, r3
 800b67e:	9303      	str	r3, [sp, #12]
 800b680:	f7f4 fde2 	bl	8000248 <__aeabi_uidivmod>
 800b684:	2200      	movs	r2, #0
 800b686:	9104      	str	r1, [sp, #16]
 800b688:	2101      	movs	r1, #1
 800b68a:	4684      	mov	ip, r0
 800b68c:	0010      	movs	r0, r2
 800b68e:	4249      	negs	r1, r1
 800b690:	0023      	movs	r3, r4
 800b692:	3b30      	subs	r3, #48	; 0x30
 800b694:	2b09      	cmp	r3, #9
 800b696:	d903      	bls.n	800b6a0 <_strtol_l.constprop.0+0x80>
 800b698:	3b11      	subs	r3, #17
 800b69a:	2b19      	cmp	r3, #25
 800b69c:	d81d      	bhi.n	800b6da <_strtol_l.constprop.0+0xba>
 800b69e:	330a      	adds	r3, #10
 800b6a0:	429e      	cmp	r6, r3
 800b6a2:	dd1e      	ble.n	800b6e2 <_strtol_l.constprop.0+0xc2>
 800b6a4:	1c54      	adds	r4, r2, #1
 800b6a6:	d009      	beq.n	800b6bc <_strtol_l.constprop.0+0x9c>
 800b6a8:	000a      	movs	r2, r1
 800b6aa:	4584      	cmp	ip, r0
 800b6ac:	d306      	bcc.n	800b6bc <_strtol_l.constprop.0+0x9c>
 800b6ae:	d102      	bne.n	800b6b6 <_strtol_l.constprop.0+0x96>
 800b6b0:	9c04      	ldr	r4, [sp, #16]
 800b6b2:	429c      	cmp	r4, r3
 800b6b4:	db02      	blt.n	800b6bc <_strtol_l.constprop.0+0x9c>
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	4370      	muls	r0, r6
 800b6ba:	1818      	adds	r0, r3, r0
 800b6bc:	782c      	ldrb	r4, [r5, #0]
 800b6be:	3501      	adds	r5, #1
 800b6c0:	e7e6      	b.n	800b690 <_strtol_l.constprop.0+0x70>
 800b6c2:	f000 fa7d 	bl	800bbc0 <__errno>
 800b6c6:	2316      	movs	r3, #22
 800b6c8:	6003      	str	r3, [r0, #0]
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	b007      	add	sp, #28
 800b6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d0:	2c2b      	cmp	r4, #43	; 0x2b
 800b6d2:	d1c2      	bne.n	800b65a <_strtol_l.constprop.0+0x3a>
 800b6d4:	781c      	ldrb	r4, [r3, #0]
 800b6d6:	1c95      	adds	r5, r2, #2
 800b6d8:	e7bf      	b.n	800b65a <_strtol_l.constprop.0+0x3a>
 800b6da:	0023      	movs	r3, r4
 800b6dc:	3b61      	subs	r3, #97	; 0x61
 800b6de:	2b19      	cmp	r3, #25
 800b6e0:	d9dd      	bls.n	800b69e <_strtol_l.constprop.0+0x7e>
 800b6e2:	1c53      	adds	r3, r2, #1
 800b6e4:	d109      	bne.n	800b6fa <_strtol_l.constprop.0+0xda>
 800b6e6:	2322      	movs	r3, #34	; 0x22
 800b6e8:	9a05      	ldr	r2, [sp, #20]
 800b6ea:	9803      	ldr	r0, [sp, #12]
 800b6ec:	6013      	str	r3, [r2, #0]
 800b6ee:	9b02      	ldr	r3, [sp, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0eb      	beq.n	800b6cc <_strtol_l.constprop.0+0xac>
 800b6f4:	1e6b      	subs	r3, r5, #1
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	e007      	b.n	800b70a <_strtol_l.constprop.0+0xea>
 800b6fa:	2f00      	cmp	r7, #0
 800b6fc:	d000      	beq.n	800b700 <_strtol_l.constprop.0+0xe0>
 800b6fe:	4240      	negs	r0, r0
 800b700:	9b02      	ldr	r3, [sp, #8]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d0e2      	beq.n	800b6cc <_strtol_l.constprop.0+0xac>
 800b706:	2a00      	cmp	r2, #0
 800b708:	d1f4      	bne.n	800b6f4 <_strtol_l.constprop.0+0xd4>
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	9a01      	ldr	r2, [sp, #4]
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	e7dc      	b.n	800b6cc <_strtol_l.constprop.0+0xac>
 800b712:	2430      	movs	r4, #48	; 0x30
 800b714:	2e00      	cmp	r6, #0
 800b716:	d1ae      	bne.n	800b676 <_strtol_l.constprop.0+0x56>
 800b718:	3608      	adds	r6, #8
 800b71a:	e7ac      	b.n	800b676 <_strtol_l.constprop.0+0x56>
 800b71c:	2c30      	cmp	r4, #48	; 0x30
 800b71e:	d0a2      	beq.n	800b666 <_strtol_l.constprop.0+0x46>
 800b720:	260a      	movs	r6, #10
 800b722:	e7a8      	b.n	800b676 <_strtol_l.constprop.0+0x56>
 800b724:	08013fa9 	.word	0x08013fa9
 800b728:	7fffffff 	.word	0x7fffffff

0800b72c <_strtol_r>:
 800b72c:	b510      	push	{r4, lr}
 800b72e:	f7ff ff77 	bl	800b620 <_strtol_l.constprop.0>
 800b732:	bd10      	pop	{r4, pc}

0800b734 <strtol>:
 800b734:	b510      	push	{r4, lr}
 800b736:	4c04      	ldr	r4, [pc, #16]	; (800b748 <strtol+0x14>)
 800b738:	0013      	movs	r3, r2
 800b73a:	000a      	movs	r2, r1
 800b73c:	0001      	movs	r1, r0
 800b73e:	6820      	ldr	r0, [r4, #0]
 800b740:	f7ff ff6e 	bl	800b620 <_strtol_l.constprop.0>
 800b744:	bd10      	pop	{r4, pc}
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	200006d8 	.word	0x200006d8

0800b74c <std>:
 800b74c:	2300      	movs	r3, #0
 800b74e:	b510      	push	{r4, lr}
 800b750:	0004      	movs	r4, r0
 800b752:	6003      	str	r3, [r0, #0]
 800b754:	6043      	str	r3, [r0, #4]
 800b756:	6083      	str	r3, [r0, #8]
 800b758:	8181      	strh	r1, [r0, #12]
 800b75a:	6643      	str	r3, [r0, #100]	; 0x64
 800b75c:	81c2      	strh	r2, [r0, #14]
 800b75e:	6103      	str	r3, [r0, #16]
 800b760:	6143      	str	r3, [r0, #20]
 800b762:	6183      	str	r3, [r0, #24]
 800b764:	0019      	movs	r1, r3
 800b766:	2208      	movs	r2, #8
 800b768:	305c      	adds	r0, #92	; 0x5c
 800b76a:	f000 f97d 	bl	800ba68 <memset>
 800b76e:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <std+0x50>)
 800b770:	61e4      	str	r4, [r4, #28]
 800b772:	6223      	str	r3, [r4, #32]
 800b774:	4b0a      	ldr	r3, [pc, #40]	; (800b7a0 <std+0x54>)
 800b776:	6263      	str	r3, [r4, #36]	; 0x24
 800b778:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <std+0x58>)
 800b77a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b77c:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <std+0x5c>)
 800b77e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b780:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <std+0x60>)
 800b782:	429c      	cmp	r4, r3
 800b784:	d005      	beq.n	800b792 <std+0x46>
 800b786:	4b0a      	ldr	r3, [pc, #40]	; (800b7b0 <std+0x64>)
 800b788:	429c      	cmp	r4, r3
 800b78a:	d002      	beq.n	800b792 <std+0x46>
 800b78c:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <std+0x68>)
 800b78e:	429c      	cmp	r4, r3
 800b790:	d103      	bne.n	800b79a <std+0x4e>
 800b792:	0020      	movs	r0, r4
 800b794:	3058      	adds	r0, #88	; 0x58
 800b796:	f000 fa3d 	bl	800bc14 <__retarget_lock_init_recursive>
 800b79a:	bd10      	pop	{r4, pc}
 800b79c:	0800b9cd 	.word	0x0800b9cd
 800b7a0:	0800b9f9 	.word	0x0800b9f9
 800b7a4:	0800ba31 	.word	0x0800ba31
 800b7a8:	0800ba5d 	.word	0x0800ba5d
 800b7ac:	20000b70 	.word	0x20000b70
 800b7b0:	20000bd8 	.word	0x20000bd8
 800b7b4:	20000c40 	.word	0x20000c40

0800b7b8 <stdio_exit_handler>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	4a03      	ldr	r2, [pc, #12]	; (800b7c8 <stdio_exit_handler+0x10>)
 800b7bc:	4903      	ldr	r1, [pc, #12]	; (800b7cc <stdio_exit_handler+0x14>)
 800b7be:	4804      	ldr	r0, [pc, #16]	; (800b7d0 <stdio_exit_handler+0x18>)
 800b7c0:	f000 f86c 	bl	800b89c <_fwalk_sglue>
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	46c0      	nop			; (mov r8, r8)
 800b7c8:	2000043c 	.word	0x2000043c
 800b7cc:	0800f715 	.word	0x0800f715
 800b7d0:	200005b8 	.word	0x200005b8

0800b7d4 <cleanup_stdio>:
 800b7d4:	6841      	ldr	r1, [r0, #4]
 800b7d6:	4b0b      	ldr	r3, [pc, #44]	; (800b804 <cleanup_stdio+0x30>)
 800b7d8:	b510      	push	{r4, lr}
 800b7da:	0004      	movs	r4, r0
 800b7dc:	4299      	cmp	r1, r3
 800b7de:	d001      	beq.n	800b7e4 <cleanup_stdio+0x10>
 800b7e0:	f003 ff98 	bl	800f714 <_fclose_r>
 800b7e4:	68a1      	ldr	r1, [r4, #8]
 800b7e6:	4b08      	ldr	r3, [pc, #32]	; (800b808 <cleanup_stdio+0x34>)
 800b7e8:	4299      	cmp	r1, r3
 800b7ea:	d002      	beq.n	800b7f2 <cleanup_stdio+0x1e>
 800b7ec:	0020      	movs	r0, r4
 800b7ee:	f003 ff91 	bl	800f714 <_fclose_r>
 800b7f2:	68e1      	ldr	r1, [r4, #12]
 800b7f4:	4b05      	ldr	r3, [pc, #20]	; (800b80c <cleanup_stdio+0x38>)
 800b7f6:	4299      	cmp	r1, r3
 800b7f8:	d002      	beq.n	800b800 <cleanup_stdio+0x2c>
 800b7fa:	0020      	movs	r0, r4
 800b7fc:	f003 ff8a 	bl	800f714 <_fclose_r>
 800b800:	bd10      	pop	{r4, pc}
 800b802:	46c0      	nop			; (mov r8, r8)
 800b804:	20000b70 	.word	0x20000b70
 800b808:	20000bd8 	.word	0x20000bd8
 800b80c:	20000c40 	.word	0x20000c40

0800b810 <global_stdio_init.part.0>:
 800b810:	b510      	push	{r4, lr}
 800b812:	4b09      	ldr	r3, [pc, #36]	; (800b838 <global_stdio_init.part.0+0x28>)
 800b814:	4a09      	ldr	r2, [pc, #36]	; (800b83c <global_stdio_init.part.0+0x2c>)
 800b816:	2104      	movs	r1, #4
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	4809      	ldr	r0, [pc, #36]	; (800b840 <global_stdio_init.part.0+0x30>)
 800b81c:	2200      	movs	r2, #0
 800b81e:	f7ff ff95 	bl	800b74c <std>
 800b822:	2201      	movs	r2, #1
 800b824:	2109      	movs	r1, #9
 800b826:	4807      	ldr	r0, [pc, #28]	; (800b844 <global_stdio_init.part.0+0x34>)
 800b828:	f7ff ff90 	bl	800b74c <std>
 800b82c:	2202      	movs	r2, #2
 800b82e:	2112      	movs	r1, #18
 800b830:	4805      	ldr	r0, [pc, #20]	; (800b848 <global_stdio_init.part.0+0x38>)
 800b832:	f7ff ff8b 	bl	800b74c <std>
 800b836:	bd10      	pop	{r4, pc}
 800b838:	20000ca8 	.word	0x20000ca8
 800b83c:	0800b7b9 	.word	0x0800b7b9
 800b840:	20000b70 	.word	0x20000b70
 800b844:	20000bd8 	.word	0x20000bd8
 800b848:	20000c40 	.word	0x20000c40

0800b84c <__sfp_lock_acquire>:
 800b84c:	b510      	push	{r4, lr}
 800b84e:	4802      	ldr	r0, [pc, #8]	; (800b858 <__sfp_lock_acquire+0xc>)
 800b850:	f000 f9e2 	bl	800bc18 <__retarget_lock_acquire_recursive>
 800b854:	bd10      	pop	{r4, pc}
 800b856:	46c0      	nop			; (mov r8, r8)
 800b858:	20000cb2 	.word	0x20000cb2

0800b85c <__sfp_lock_release>:
 800b85c:	b510      	push	{r4, lr}
 800b85e:	4802      	ldr	r0, [pc, #8]	; (800b868 <__sfp_lock_release+0xc>)
 800b860:	f000 f9db 	bl	800bc1a <__retarget_lock_release_recursive>
 800b864:	bd10      	pop	{r4, pc}
 800b866:	46c0      	nop			; (mov r8, r8)
 800b868:	20000cb2 	.word	0x20000cb2

0800b86c <__sinit>:
 800b86c:	b510      	push	{r4, lr}
 800b86e:	0004      	movs	r4, r0
 800b870:	f7ff ffec 	bl	800b84c <__sfp_lock_acquire>
 800b874:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <__sinit+0x14>
 800b87a:	f7ff ffef 	bl	800b85c <__sfp_lock_release>
 800b87e:	bd10      	pop	{r4, pc}
 800b880:	4b04      	ldr	r3, [pc, #16]	; (800b894 <__sinit+0x28>)
 800b882:	6363      	str	r3, [r4, #52]	; 0x34
 800b884:	4b04      	ldr	r3, [pc, #16]	; (800b898 <__sinit+0x2c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1f6      	bne.n	800b87a <__sinit+0xe>
 800b88c:	f7ff ffc0 	bl	800b810 <global_stdio_init.part.0>
 800b890:	e7f3      	b.n	800b87a <__sinit+0xe>
 800b892:	46c0      	nop			; (mov r8, r8)
 800b894:	0800b7d5 	.word	0x0800b7d5
 800b898:	20000ca8 	.word	0x20000ca8

0800b89c <_fwalk_sglue>:
 800b89c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b89e:	0014      	movs	r4, r2
 800b8a0:	2600      	movs	r6, #0
 800b8a2:	9000      	str	r0, [sp, #0]
 800b8a4:	9101      	str	r1, [sp, #4]
 800b8a6:	68a5      	ldr	r5, [r4, #8]
 800b8a8:	6867      	ldr	r7, [r4, #4]
 800b8aa:	3f01      	subs	r7, #1
 800b8ac:	d504      	bpl.n	800b8b8 <_fwalk_sglue+0x1c>
 800b8ae:	6824      	ldr	r4, [r4, #0]
 800b8b0:	2c00      	cmp	r4, #0
 800b8b2:	d1f8      	bne.n	800b8a6 <_fwalk_sglue+0xa>
 800b8b4:	0030      	movs	r0, r6
 800b8b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8b8:	89ab      	ldrh	r3, [r5, #12]
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d908      	bls.n	800b8d0 <_fwalk_sglue+0x34>
 800b8be:	220e      	movs	r2, #14
 800b8c0:	5eab      	ldrsh	r3, [r5, r2]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	d004      	beq.n	800b8d0 <_fwalk_sglue+0x34>
 800b8c6:	0029      	movs	r1, r5
 800b8c8:	9800      	ldr	r0, [sp, #0]
 800b8ca:	9b01      	ldr	r3, [sp, #4]
 800b8cc:	4798      	blx	r3
 800b8ce:	4306      	orrs	r6, r0
 800b8d0:	3568      	adds	r5, #104	; 0x68
 800b8d2:	e7ea      	b.n	800b8aa <_fwalk_sglue+0xe>

0800b8d4 <snprintf>:
 800b8d4:	b40c      	push	{r2, r3}
 800b8d6:	b530      	push	{r4, r5, lr}
 800b8d8:	4b17      	ldr	r3, [pc, #92]	; (800b938 <snprintf+0x64>)
 800b8da:	000c      	movs	r4, r1
 800b8dc:	681d      	ldr	r5, [r3, #0]
 800b8de:	b09d      	sub	sp, #116	; 0x74
 800b8e0:	2900      	cmp	r1, #0
 800b8e2:	da08      	bge.n	800b8f6 <snprintf+0x22>
 800b8e4:	238b      	movs	r3, #139	; 0x8b
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	602b      	str	r3, [r5, #0]
 800b8ea:	4240      	negs	r0, r0
 800b8ec:	b01d      	add	sp, #116	; 0x74
 800b8ee:	bc30      	pop	{r4, r5}
 800b8f0:	bc08      	pop	{r3}
 800b8f2:	b002      	add	sp, #8
 800b8f4:	4718      	bx	r3
 800b8f6:	2382      	movs	r3, #130	; 0x82
 800b8f8:	466a      	mov	r2, sp
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	8293      	strh	r3, [r2, #20]
 800b8fe:	2300      	movs	r3, #0
 800b900:	9002      	str	r0, [sp, #8]
 800b902:	9006      	str	r0, [sp, #24]
 800b904:	4299      	cmp	r1, r3
 800b906:	d000      	beq.n	800b90a <snprintf+0x36>
 800b908:	1e4b      	subs	r3, r1, #1
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	9307      	str	r3, [sp, #28]
 800b90e:	2301      	movs	r3, #1
 800b910:	466a      	mov	r2, sp
 800b912:	425b      	negs	r3, r3
 800b914:	82d3      	strh	r3, [r2, #22]
 800b916:	0028      	movs	r0, r5
 800b918:	ab21      	add	r3, sp, #132	; 0x84
 800b91a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b91c:	a902      	add	r1, sp, #8
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	f001 fa9a 	bl	800ce58 <_svfprintf_r>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	da01      	bge.n	800b92c <snprintf+0x58>
 800b928:	238b      	movs	r3, #139	; 0x8b
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	2c00      	cmp	r4, #0
 800b92e:	d0dd      	beq.n	800b8ec <snprintf+0x18>
 800b930:	2200      	movs	r2, #0
 800b932:	9b02      	ldr	r3, [sp, #8]
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	e7d9      	b.n	800b8ec <snprintf+0x18>
 800b938:	200006d8 	.word	0x200006d8

0800b93c <sprintf>:
 800b93c:	b40e      	push	{r1, r2, r3}
 800b93e:	b500      	push	{lr}
 800b940:	490b      	ldr	r1, [pc, #44]	; (800b970 <sprintf+0x34>)
 800b942:	b09c      	sub	sp, #112	; 0x70
 800b944:	ab1d      	add	r3, sp, #116	; 0x74
 800b946:	9002      	str	r0, [sp, #8]
 800b948:	9006      	str	r0, [sp, #24]
 800b94a:	9107      	str	r1, [sp, #28]
 800b94c:	9104      	str	r1, [sp, #16]
 800b94e:	4809      	ldr	r0, [pc, #36]	; (800b974 <sprintf+0x38>)
 800b950:	4909      	ldr	r1, [pc, #36]	; (800b978 <sprintf+0x3c>)
 800b952:	cb04      	ldmia	r3!, {r2}
 800b954:	9105      	str	r1, [sp, #20]
 800b956:	6800      	ldr	r0, [r0, #0]
 800b958:	a902      	add	r1, sp, #8
 800b95a:	9301      	str	r3, [sp, #4]
 800b95c:	f001 fa7c 	bl	800ce58 <_svfprintf_r>
 800b960:	2200      	movs	r2, #0
 800b962:	9b02      	ldr	r3, [sp, #8]
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	b01c      	add	sp, #112	; 0x70
 800b968:	bc08      	pop	{r3}
 800b96a:	b003      	add	sp, #12
 800b96c:	4718      	bx	r3
 800b96e:	46c0      	nop			; (mov r8, r8)
 800b970:	7fffffff 	.word	0x7fffffff
 800b974:	200006d8 	.word	0x200006d8
 800b978:	ffff0208 	.word	0xffff0208

0800b97c <sscanf>:
 800b97c:	b40e      	push	{r1, r2, r3}
 800b97e:	b530      	push	{r4, r5, lr}
 800b980:	2381      	movs	r3, #129	; 0x81
 800b982:	b09c      	sub	sp, #112	; 0x70
 800b984:	466a      	mov	r2, sp
 800b986:	ac1f      	add	r4, sp, #124	; 0x7c
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	cc20      	ldmia	r4!, {r5}
 800b98c:	8293      	strh	r3, [r2, #20]
 800b98e:	9002      	str	r0, [sp, #8]
 800b990:	9006      	str	r0, [sp, #24]
 800b992:	f7f4 fbb7 	bl	8000104 <strlen>
 800b996:	4b0b      	ldr	r3, [pc, #44]	; (800b9c4 <sscanf+0x48>)
 800b998:	466a      	mov	r2, sp
 800b99a:	930a      	str	r3, [sp, #40]	; 0x28
 800b99c:	2300      	movs	r3, #0
 800b99e:	9003      	str	r0, [sp, #12]
 800b9a0:	9007      	str	r0, [sp, #28]
 800b9a2:	4809      	ldr	r0, [pc, #36]	; (800b9c8 <sscanf+0x4c>)
 800b9a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b9a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	82d3      	strh	r3, [r2, #22]
 800b9ac:	a902      	add	r1, sp, #8
 800b9ae:	0023      	movs	r3, r4
 800b9b0:	002a      	movs	r2, r5
 800b9b2:	6800      	ldr	r0, [r0, #0]
 800b9b4:	9401      	str	r4, [sp, #4]
 800b9b6:	f002 fc91 	bl	800e2dc <__ssvfscanf_r>
 800b9ba:	b01c      	add	sp, #112	; 0x70
 800b9bc:	bc30      	pop	{r4, r5}
 800b9be:	bc08      	pop	{r3}
 800b9c0:	b003      	add	sp, #12
 800b9c2:	4718      	bx	r3
 800b9c4:	0800b9f5 	.word	0x0800b9f5
 800b9c8:	200006d8 	.word	0x200006d8

0800b9cc <__sread>:
 800b9cc:	b570      	push	{r4, r5, r6, lr}
 800b9ce:	000c      	movs	r4, r1
 800b9d0:	250e      	movs	r5, #14
 800b9d2:	5f49      	ldrsh	r1, [r1, r5]
 800b9d4:	f000 f8ba 	bl	800bb4c <_read_r>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	db03      	blt.n	800b9e4 <__sread+0x18>
 800b9dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b9de:	181b      	adds	r3, r3, r0
 800b9e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	4a02      	ldr	r2, [pc, #8]	; (800b9f0 <__sread+0x24>)
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	e7f9      	b.n	800b9e2 <__sread+0x16>
 800b9ee:	46c0      	nop			; (mov r8, r8)
 800b9f0:	ffffefff 	.word	0xffffefff

0800b9f4 <__seofread>:
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	4770      	bx	lr

0800b9f8 <__swrite>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	001f      	movs	r7, r3
 800b9fc:	898b      	ldrh	r3, [r1, #12]
 800b9fe:	0005      	movs	r5, r0
 800ba00:	000c      	movs	r4, r1
 800ba02:	0016      	movs	r6, r2
 800ba04:	05db      	lsls	r3, r3, #23
 800ba06:	d505      	bpl.n	800ba14 <__swrite+0x1c>
 800ba08:	230e      	movs	r3, #14
 800ba0a:	5ec9      	ldrsh	r1, [r1, r3]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2302      	movs	r3, #2
 800ba10:	f000 f888 	bl	800bb24 <_lseek_r>
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	4a05      	ldr	r2, [pc, #20]	; (800ba2c <__swrite+0x34>)
 800ba18:	0028      	movs	r0, r5
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	81a3      	strh	r3, [r4, #12]
 800ba1e:	0032      	movs	r2, r6
 800ba20:	230e      	movs	r3, #14
 800ba22:	5ee1      	ldrsh	r1, [r4, r3]
 800ba24:	003b      	movs	r3, r7
 800ba26:	f000 f8b7 	bl	800bb98 <_write_r>
 800ba2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba2c:	ffffefff 	.word	0xffffefff

0800ba30 <__sseek>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	000c      	movs	r4, r1
 800ba34:	250e      	movs	r5, #14
 800ba36:	5f49      	ldrsh	r1, [r1, r5]
 800ba38:	f000 f874 	bl	800bb24 <_lseek_r>
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	1c42      	adds	r2, r0, #1
 800ba40:	d103      	bne.n	800ba4a <__sseek+0x1a>
 800ba42:	4a05      	ldr	r2, [pc, #20]	; (800ba58 <__sseek+0x28>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
 800ba4a:	2280      	movs	r2, #128	; 0x80
 800ba4c:	0152      	lsls	r2, r2, #5
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	81a3      	strh	r3, [r4, #12]
 800ba52:	6520      	str	r0, [r4, #80]	; 0x50
 800ba54:	e7f8      	b.n	800ba48 <__sseek+0x18>
 800ba56:	46c0      	nop			; (mov r8, r8)
 800ba58:	ffffefff 	.word	0xffffefff

0800ba5c <__sclose>:
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	230e      	movs	r3, #14
 800ba60:	5ec9      	ldrsh	r1, [r1, r3]
 800ba62:	f000 f84d 	bl	800bb00 <_close_r>
 800ba66:	bd10      	pop	{r4, pc}

0800ba68 <memset>:
 800ba68:	0003      	movs	r3, r0
 800ba6a:	1882      	adds	r2, r0, r2
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d100      	bne.n	800ba72 <memset+0xa>
 800ba70:	4770      	bx	lr
 800ba72:	7019      	strb	r1, [r3, #0]
 800ba74:	3301      	adds	r3, #1
 800ba76:	e7f9      	b.n	800ba6c <memset+0x4>

0800ba78 <strncmp>:
 800ba78:	b530      	push	{r4, r5, lr}
 800ba7a:	0005      	movs	r5, r0
 800ba7c:	1e10      	subs	r0, r2, #0
 800ba7e:	d00b      	beq.n	800ba98 <strncmp+0x20>
 800ba80:	2400      	movs	r4, #0
 800ba82:	3a01      	subs	r2, #1
 800ba84:	5d2b      	ldrb	r3, [r5, r4]
 800ba86:	5d08      	ldrb	r0, [r1, r4]
 800ba88:	4283      	cmp	r3, r0
 800ba8a:	d104      	bne.n	800ba96 <strncmp+0x1e>
 800ba8c:	42a2      	cmp	r2, r4
 800ba8e:	d002      	beq.n	800ba96 <strncmp+0x1e>
 800ba90:	3401      	adds	r4, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1f6      	bne.n	800ba84 <strncmp+0xc>
 800ba96:	1a18      	subs	r0, r3, r0
 800ba98:	bd30      	pop	{r4, r5, pc}

0800ba9a <strncpy>:
 800ba9a:	0003      	movs	r3, r0
 800ba9c:	b530      	push	{r4, r5, lr}
 800ba9e:	001d      	movs	r5, r3
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	d006      	beq.n	800bab2 <strncpy+0x18>
 800baa4:	780c      	ldrb	r4, [r1, #0]
 800baa6:	3a01      	subs	r2, #1
 800baa8:	3301      	adds	r3, #1
 800baaa:	702c      	strb	r4, [r5, #0]
 800baac:	3101      	adds	r1, #1
 800baae:	2c00      	cmp	r4, #0
 800bab0:	d1f5      	bne.n	800ba9e <strncpy+0x4>
 800bab2:	2100      	movs	r1, #0
 800bab4:	189a      	adds	r2, r3, r2
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d100      	bne.n	800babc <strncpy+0x22>
 800baba:	bd30      	pop	{r4, r5, pc}
 800babc:	7019      	strb	r1, [r3, #0]
 800babe:	3301      	adds	r3, #1
 800bac0:	e7f9      	b.n	800bab6 <strncpy+0x1c>

0800bac2 <strstr>:
 800bac2:	780a      	ldrb	r2, [r1, #0]
 800bac4:	b530      	push	{r4, r5, lr}
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	d10c      	bne.n	800bae4 <strstr+0x22>
 800baca:	bd30      	pop	{r4, r5, pc}
 800bacc:	429a      	cmp	r2, r3
 800bace:	d108      	bne.n	800bae2 <strstr+0x20>
 800bad0:	2301      	movs	r3, #1
 800bad2:	5ccc      	ldrb	r4, [r1, r3]
 800bad4:	2c00      	cmp	r4, #0
 800bad6:	d0f8      	beq.n	800baca <strstr+0x8>
 800bad8:	5cc5      	ldrb	r5, [r0, r3]
 800bada:	42a5      	cmp	r5, r4
 800badc:	d101      	bne.n	800bae2 <strstr+0x20>
 800bade:	3301      	adds	r3, #1
 800bae0:	e7f7      	b.n	800bad2 <strstr+0x10>
 800bae2:	3001      	adds	r0, #1
 800bae4:	7803      	ldrb	r3, [r0, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1f0      	bne.n	800bacc <strstr+0xa>
 800baea:	0018      	movs	r0, r3
 800baec:	e7ed      	b.n	800baca <strstr+0x8>
	...

0800baf0 <__locale_mb_cur_max>:
 800baf0:	2294      	movs	r2, #148	; 0x94
 800baf2:	4b02      	ldr	r3, [pc, #8]	; (800bafc <__locale_mb_cur_max+0xc>)
 800baf4:	0052      	lsls	r2, r2, #1
 800baf6:	5c98      	ldrb	r0, [r3, r2]
 800baf8:	4770      	bx	lr
 800bafa:	46c0      	nop			; (mov r8, r8)
 800bafc:	20000448 	.word	0x20000448

0800bb00 <_close_r>:
 800bb00:	2300      	movs	r3, #0
 800bb02:	b570      	push	{r4, r5, r6, lr}
 800bb04:	4d06      	ldr	r5, [pc, #24]	; (800bb20 <_close_r+0x20>)
 800bb06:	0004      	movs	r4, r0
 800bb08:	0008      	movs	r0, r1
 800bb0a:	602b      	str	r3, [r5, #0]
 800bb0c:	f7f7 fdbb 	bl	8003686 <_close>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d103      	bne.n	800bb1c <_close_r+0x1c>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d000      	beq.n	800bb1c <_close_r+0x1c>
 800bb1a:	6023      	str	r3, [r4, #0]
 800bb1c:	bd70      	pop	{r4, r5, r6, pc}
 800bb1e:	46c0      	nop			; (mov r8, r8)
 800bb20:	20000cac 	.word	0x20000cac

0800bb24 <_lseek_r>:
 800bb24:	b570      	push	{r4, r5, r6, lr}
 800bb26:	0004      	movs	r4, r0
 800bb28:	0008      	movs	r0, r1
 800bb2a:	0011      	movs	r1, r2
 800bb2c:	001a      	movs	r2, r3
 800bb2e:	2300      	movs	r3, #0
 800bb30:	4d05      	ldr	r5, [pc, #20]	; (800bb48 <_lseek_r+0x24>)
 800bb32:	602b      	str	r3, [r5, #0]
 800bb34:	f7f7 fdc8 	bl	80036c8 <_lseek>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d103      	bne.n	800bb44 <_lseek_r+0x20>
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d000      	beq.n	800bb44 <_lseek_r+0x20>
 800bb42:	6023      	str	r3, [r4, #0]
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
 800bb46:	46c0      	nop			; (mov r8, r8)
 800bb48:	20000cac 	.word	0x20000cac

0800bb4c <_read_r>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	0004      	movs	r4, r0
 800bb50:	0008      	movs	r0, r1
 800bb52:	0011      	movs	r1, r2
 800bb54:	001a      	movs	r2, r3
 800bb56:	2300      	movs	r3, #0
 800bb58:	4d05      	ldr	r5, [pc, #20]	; (800bb70 <_read_r+0x24>)
 800bb5a:	602b      	str	r3, [r5, #0]
 800bb5c:	f7f7 fd5a 	bl	8003614 <_read>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d103      	bne.n	800bb6c <_read_r+0x20>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d000      	beq.n	800bb6c <_read_r+0x20>
 800bb6a:	6023      	str	r3, [r4, #0]
 800bb6c:	bd70      	pop	{r4, r5, r6, pc}
 800bb6e:	46c0      	nop			; (mov r8, r8)
 800bb70:	20000cac 	.word	0x20000cac

0800bb74 <_sbrk_r>:
 800bb74:	2300      	movs	r3, #0
 800bb76:	b570      	push	{r4, r5, r6, lr}
 800bb78:	4d06      	ldr	r5, [pc, #24]	; (800bb94 <_sbrk_r+0x20>)
 800bb7a:	0004      	movs	r4, r0
 800bb7c:	0008      	movs	r0, r1
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	f7f7 fdae 	bl	80036e0 <_sbrk>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d103      	bne.n	800bb90 <_sbrk_r+0x1c>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d000      	beq.n	800bb90 <_sbrk_r+0x1c>
 800bb8e:	6023      	str	r3, [r4, #0]
 800bb90:	bd70      	pop	{r4, r5, r6, pc}
 800bb92:	46c0      	nop			; (mov r8, r8)
 800bb94:	20000cac 	.word	0x20000cac

0800bb98 <_write_r>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	0004      	movs	r4, r0
 800bb9c:	0008      	movs	r0, r1
 800bb9e:	0011      	movs	r1, r2
 800bba0:	001a      	movs	r2, r3
 800bba2:	2300      	movs	r3, #0
 800bba4:	4d05      	ldr	r5, [pc, #20]	; (800bbbc <_write_r+0x24>)
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f7 fd51 	bl	800364e <_write>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d103      	bne.n	800bbb8 <_write_r+0x20>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d000      	beq.n	800bbb8 <_write_r+0x20>
 800bbb6:	6023      	str	r3, [r4, #0]
 800bbb8:	bd70      	pop	{r4, r5, r6, pc}
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	20000cac 	.word	0x20000cac

0800bbc0 <__errno>:
 800bbc0:	4b01      	ldr	r3, [pc, #4]	; (800bbc8 <__errno+0x8>)
 800bbc2:	6818      	ldr	r0, [r3, #0]
 800bbc4:	4770      	bx	lr
 800bbc6:	46c0      	nop			; (mov r8, r8)
 800bbc8:	200006d8 	.word	0x200006d8

0800bbcc <__libc_init_array>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	2600      	movs	r6, #0
 800bbd0:	4c0c      	ldr	r4, [pc, #48]	; (800bc04 <__libc_init_array+0x38>)
 800bbd2:	4d0d      	ldr	r5, [pc, #52]	; (800bc08 <__libc_init_array+0x3c>)
 800bbd4:	1b64      	subs	r4, r4, r5
 800bbd6:	10a4      	asrs	r4, r4, #2
 800bbd8:	42a6      	cmp	r6, r4
 800bbda:	d109      	bne.n	800bbf0 <__libc_init_array+0x24>
 800bbdc:	2600      	movs	r6, #0
 800bbde:	f006 fcc5 	bl	801256c <_init>
 800bbe2:	4c0a      	ldr	r4, [pc, #40]	; (800bc0c <__libc_init_array+0x40>)
 800bbe4:	4d0a      	ldr	r5, [pc, #40]	; (800bc10 <__libc_init_array+0x44>)
 800bbe6:	1b64      	subs	r4, r4, r5
 800bbe8:	10a4      	asrs	r4, r4, #2
 800bbea:	42a6      	cmp	r6, r4
 800bbec:	d105      	bne.n	800bbfa <__libc_init_array+0x2e>
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	00b3      	lsls	r3, r6, #2
 800bbf2:	58eb      	ldr	r3, [r5, r3]
 800bbf4:	4798      	blx	r3
 800bbf6:	3601      	adds	r6, #1
 800bbf8:	e7ee      	b.n	800bbd8 <__libc_init_array+0xc>
 800bbfa:	00b3      	lsls	r3, r6, #2
 800bbfc:	58eb      	ldr	r3, [r5, r3]
 800bbfe:	4798      	blx	r3
 800bc00:	3601      	adds	r6, #1
 800bc02:	e7f2      	b.n	800bbea <__libc_init_array+0x1e>
 800bc04:	080143c4 	.word	0x080143c4
 800bc08:	080143c4 	.word	0x080143c4
 800bc0c:	080143cc 	.word	0x080143cc
 800bc10:	080143c4 	.word	0x080143c4

0800bc14 <__retarget_lock_init_recursive>:
 800bc14:	4770      	bx	lr

0800bc16 <__retarget_lock_close_recursive>:
 800bc16:	4770      	bx	lr

0800bc18 <__retarget_lock_acquire_recursive>:
 800bc18:	4770      	bx	lr

0800bc1a <__retarget_lock_release_recursive>:
 800bc1a:	4770      	bx	lr

0800bc1c <sysconf>:
 800bc1c:	2380      	movs	r3, #128	; 0x80
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	2808      	cmp	r0, #8
 800bc22:	d004      	beq.n	800bc2e <sysconf+0x12>
 800bc24:	f7ff ffcc 	bl	800bbc0 <__errno>
 800bc28:	2316      	movs	r3, #22
 800bc2a:	6003      	str	r3, [r0, #0]
 800bc2c:	3b17      	subs	r3, #23
 800bc2e:	0018      	movs	r0, r3
 800bc30:	bd10      	pop	{r4, pc}

0800bc32 <memcpy>:
 800bc32:	2300      	movs	r3, #0
 800bc34:	b510      	push	{r4, lr}
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d100      	bne.n	800bc3c <memcpy+0xa>
 800bc3a:	bd10      	pop	{r4, pc}
 800bc3c:	5ccc      	ldrb	r4, [r1, r3]
 800bc3e:	54c4      	strb	r4, [r0, r3]
 800bc40:	3301      	adds	r3, #1
 800bc42:	e7f8      	b.n	800bc36 <memcpy+0x4>

0800bc44 <nan>:
 800bc44:	2000      	movs	r0, #0
 800bc46:	4901      	ldr	r1, [pc, #4]	; (800bc4c <nan+0x8>)
 800bc48:	4770      	bx	lr
 800bc4a:	46c0      	nop			; (mov r8, r8)
 800bc4c:	7ff80000 	.word	0x7ff80000

0800bc50 <nanf>:
 800bc50:	4800      	ldr	r0, [pc, #0]	; (800bc54 <nanf+0x4>)
 800bc52:	4770      	bx	lr
 800bc54:	7fc00000 	.word	0x7fc00000

0800bc58 <register_fini>:
 800bc58:	4b03      	ldr	r3, [pc, #12]	; (800bc68 <register_fini+0x10>)
 800bc5a:	b510      	push	{r4, lr}
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <register_fini+0xe>
 800bc60:	4802      	ldr	r0, [pc, #8]	; (800bc6c <register_fini+0x14>)
 800bc62:	f000 f805 	bl	800bc70 <atexit>
 800bc66:	bd10      	pop	{r4, pc}
 800bc68:	00000000 	.word	0x00000000
 800bc6c:	0800f9cd 	.word	0x0800f9cd

0800bc70 <atexit>:
 800bc70:	2300      	movs	r3, #0
 800bc72:	b510      	push	{r4, lr}
 800bc74:	0001      	movs	r1, r0
 800bc76:	001a      	movs	r2, r3
 800bc78:	0018      	movs	r0, r3
 800bc7a:	f003 fef9 	bl	800fa70 <__register_exitproc>
 800bc7e:	bd10      	pop	{r4, pc}

0800bc80 <_malloc_trim_r>:
 800bc80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc82:	0004      	movs	r4, r0
 800bc84:	2008      	movs	r0, #8
 800bc86:	000d      	movs	r5, r1
 800bc88:	f7ff ffc8 	bl	800bc1c <sysconf>
 800bc8c:	0006      	movs	r6, r0
 800bc8e:	0020      	movs	r0, r4
 800bc90:	f7fe fe7e 	bl	800a990 <__malloc_lock>
 800bc94:	2203      	movs	r2, #3
 800bc96:	4f21      	ldr	r7, [pc, #132]	; (800bd1c <_malloc_trim_r+0x9c>)
 800bc98:	0031      	movs	r1, r6
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	4393      	bics	r3, r2
 800bca0:	1b58      	subs	r0, r3, r5
 800bca2:	3811      	subs	r0, #17
 800bca4:	1980      	adds	r0, r0, r6
 800bca6:	9301      	str	r3, [sp, #4]
 800bca8:	f7f4 fa48 	bl	800013c <__udivsi3>
 800bcac:	1e45      	subs	r5, r0, #1
 800bcae:	4375      	muls	r5, r6
 800bcb0:	42ae      	cmp	r6, r5
 800bcb2:	dd04      	ble.n	800bcbe <_malloc_trim_r+0x3e>
 800bcb4:	0020      	movs	r0, r4
 800bcb6:	f7fe fe73 	bl	800a9a0 <__malloc_unlock>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	0020      	movs	r0, r4
 800bcc2:	f7ff ff57 	bl	800bb74 <_sbrk_r>
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	9a01      	ldr	r2, [sp, #4]
 800bcca:	189b      	adds	r3, r3, r2
 800bccc:	4298      	cmp	r0, r3
 800bcce:	d1f1      	bne.n	800bcb4 <_malloc_trim_r+0x34>
 800bcd0:	0020      	movs	r0, r4
 800bcd2:	4269      	negs	r1, r5
 800bcd4:	f7ff ff4e 	bl	800bb74 <_sbrk_r>
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d110      	bne.n	800bcfe <_malloc_trim_r+0x7e>
 800bcdc:	2100      	movs	r1, #0
 800bcde:	0020      	movs	r0, r4
 800bce0:	f7ff ff48 	bl	800bb74 <_sbrk_r>
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	1a81      	subs	r1, r0, r2
 800bce8:	290f      	cmp	r1, #15
 800bcea:	dde3      	ble.n	800bcb4 <_malloc_trim_r+0x34>
 800bcec:	4d0c      	ldr	r5, [pc, #48]	; (800bd20 <_malloc_trim_r+0xa0>)
 800bcee:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <_malloc_trim_r+0xa4>)
 800bcf0:	682d      	ldr	r5, [r5, #0]
 800bcf2:	1b40      	subs	r0, r0, r5
 800bcf4:	6018      	str	r0, [r3, #0]
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	430b      	orrs	r3, r1
 800bcfa:	6053      	str	r3, [r2, #4]
 800bcfc:	e7da      	b.n	800bcb4 <_malloc_trim_r+0x34>
 800bcfe:	2601      	movs	r6, #1
 800bd00:	9b01      	ldr	r3, [sp, #4]
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	1b5b      	subs	r3, r3, r5
 800bd06:	4333      	orrs	r3, r6
 800bd08:	6053      	str	r3, [r2, #4]
 800bd0a:	4a06      	ldr	r2, [pc, #24]	; (800bd24 <_malloc_trim_r+0xa4>)
 800bd0c:	0020      	movs	r0, r4
 800bd0e:	6813      	ldr	r3, [r2, #0]
 800bd10:	1b5b      	subs	r3, r3, r5
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	f7fe fe44 	bl	800a9a0 <__malloc_unlock>
 800bd18:	0030      	movs	r0, r6
 800bd1a:	e7cf      	b.n	800bcbc <_malloc_trim_r+0x3c>
 800bd1c:	2000002c 	.word	0x2000002c
 800bd20:	20000434 	.word	0x20000434
 800bd24:	20000b3c 	.word	0x20000b3c

0800bd28 <_free_r>:
 800bd28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd2a:	1e0d      	subs	r5, r1, #0
 800bd2c:	9001      	str	r0, [sp, #4]
 800bd2e:	d02d      	beq.n	800bd8c <_free_r+0x64>
 800bd30:	f7fe fe2e 	bl	800a990 <__malloc_lock>
 800bd34:	2301      	movs	r3, #1
 800bd36:	0029      	movs	r1, r5
 800bd38:	469c      	mov	ip, r3
 800bd3a:	3908      	subs	r1, #8
 800bd3c:	684f      	ldr	r7, [r1, #4]
 800bd3e:	4662      	mov	r2, ip
 800bd40:	003b      	movs	r3, r7
 800bd42:	4664      	mov	r4, ip
 800bd44:	4393      	bics	r3, r2
 800bd46:	18c8      	adds	r0, r1, r3
 800bd48:	6845      	ldr	r5, [r0, #4]
 800bd4a:	3202      	adds	r2, #2
 800bd4c:	4395      	bics	r5, r2
 800bd4e:	4a4a      	ldr	r2, [pc, #296]	; (800be78 <_free_r+0x150>)
 800bd50:	4027      	ands	r7, r4
 800bd52:	6896      	ldr	r6, [r2, #8]
 800bd54:	4286      	cmp	r6, r0
 800bd56:	d11a      	bne.n	800bd8e <_free_r+0x66>
 800bd58:	195b      	adds	r3, r3, r5
 800bd5a:	2f00      	cmp	r7, #0
 800bd5c:	d106      	bne.n	800bd6c <_free_r+0x44>
 800bd5e:	6808      	ldr	r0, [r1, #0]
 800bd60:	1a09      	subs	r1, r1, r0
 800bd62:	688d      	ldr	r5, [r1, #8]
 800bd64:	181b      	adds	r3, r3, r0
 800bd66:	68c8      	ldr	r0, [r1, #12]
 800bd68:	60e8      	str	r0, [r5, #12]
 800bd6a:	6085      	str	r5, [r0, #8]
 800bd6c:	2001      	movs	r0, #1
 800bd6e:	4318      	orrs	r0, r3
 800bd70:	6048      	str	r0, [r1, #4]
 800bd72:	6091      	str	r1, [r2, #8]
 800bd74:	4a41      	ldr	r2, [pc, #260]	; (800be7c <_free_r+0x154>)
 800bd76:	6812      	ldr	r2, [r2, #0]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d804      	bhi.n	800bd86 <_free_r+0x5e>
 800bd7c:	4b40      	ldr	r3, [pc, #256]	; (800be80 <_free_r+0x158>)
 800bd7e:	9801      	ldr	r0, [sp, #4]
 800bd80:	6819      	ldr	r1, [r3, #0]
 800bd82:	f7ff ff7d 	bl	800bc80 <_malloc_trim_r>
 800bd86:	9801      	ldr	r0, [sp, #4]
 800bd88:	f7fe fe0a 	bl	800a9a0 <__malloc_unlock>
 800bd8c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bd8e:	2600      	movs	r6, #0
 800bd90:	6045      	str	r5, [r0, #4]
 800bd92:	42b7      	cmp	r7, r6
 800bd94:	d109      	bne.n	800bdaa <_free_r+0x82>
 800bd96:	680f      	ldr	r7, [r1, #0]
 800bd98:	4c3a      	ldr	r4, [pc, #232]	; (800be84 <_free_r+0x15c>)
 800bd9a:	1bc9      	subs	r1, r1, r7
 800bd9c:	19db      	adds	r3, r3, r7
 800bd9e:	688f      	ldr	r7, [r1, #8]
 800bda0:	42a7      	cmp	r7, r4
 800bda2:	d02c      	beq.n	800bdfe <_free_r+0xd6>
 800bda4:	68cc      	ldr	r4, [r1, #12]
 800bda6:	60fc      	str	r4, [r7, #12]
 800bda8:	60a7      	str	r7, [r4, #8]
 800bdaa:	1947      	adds	r7, r0, r5
 800bdac:	687c      	ldr	r4, [r7, #4]
 800bdae:	2701      	movs	r7, #1
 800bdb0:	423c      	tst	r4, r7
 800bdb2:	d10b      	bne.n	800bdcc <_free_r+0xa4>
 800bdb4:	195b      	adds	r3, r3, r5
 800bdb6:	6885      	ldr	r5, [r0, #8]
 800bdb8:	2e00      	cmp	r6, #0
 800bdba:	d122      	bne.n	800be02 <_free_r+0xda>
 800bdbc:	4c31      	ldr	r4, [pc, #196]	; (800be84 <_free_r+0x15c>)
 800bdbe:	42a5      	cmp	r5, r4
 800bdc0:	d11f      	bne.n	800be02 <_free_r+0xda>
 800bdc2:	003e      	movs	r6, r7
 800bdc4:	6151      	str	r1, [r2, #20]
 800bdc6:	6111      	str	r1, [r2, #16]
 800bdc8:	60cd      	str	r5, [r1, #12]
 800bdca:	608d      	str	r5, [r1, #8]
 800bdcc:	2501      	movs	r5, #1
 800bdce:	0028      	movs	r0, r5
 800bdd0:	4318      	orrs	r0, r3
 800bdd2:	6048      	str	r0, [r1, #4]
 800bdd4:	50cb      	str	r3, [r1, r3]
 800bdd6:	2e00      	cmp	r6, #0
 800bdd8:	d1d5      	bne.n	800bd86 <_free_r+0x5e>
 800bdda:	2080      	movs	r0, #128	; 0x80
 800bddc:	0080      	lsls	r0, r0, #2
 800bdde:	4283      	cmp	r3, r0
 800bde0:	d213      	bcs.n	800be0a <_free_r+0xe2>
 800bde2:	08d8      	lsrs	r0, r3, #3
 800bde4:	095b      	lsrs	r3, r3, #5
 800bde6:	409d      	lsls	r5, r3
 800bde8:	6853      	ldr	r3, [r2, #4]
 800bdea:	431d      	orrs	r5, r3
 800bdec:	00c3      	lsls	r3, r0, #3
 800bdee:	189b      	adds	r3, r3, r2
 800bdf0:	6055      	str	r5, [r2, #4]
 800bdf2:	689a      	ldr	r2, [r3, #8]
 800bdf4:	60cb      	str	r3, [r1, #12]
 800bdf6:	608a      	str	r2, [r1, #8]
 800bdf8:	6099      	str	r1, [r3, #8]
 800bdfa:	60d1      	str	r1, [r2, #12]
 800bdfc:	e7c3      	b.n	800bd86 <_free_r+0x5e>
 800bdfe:	4666      	mov	r6, ip
 800be00:	e7d3      	b.n	800bdaa <_free_r+0x82>
 800be02:	68c0      	ldr	r0, [r0, #12]
 800be04:	60e8      	str	r0, [r5, #12]
 800be06:	6085      	str	r5, [r0, #8]
 800be08:	e7e0      	b.n	800bdcc <_free_r+0xa4>
 800be0a:	0a5d      	lsrs	r5, r3, #9
 800be0c:	2d04      	cmp	r5, #4
 800be0e:	d812      	bhi.n	800be36 <_free_r+0x10e>
 800be10:	0998      	lsrs	r0, r3, #6
 800be12:	3038      	adds	r0, #56	; 0x38
 800be14:	00c6      	lsls	r6, r0, #3
 800be16:	18b6      	adds	r6, r6, r2
 800be18:	68b5      	ldr	r5, [r6, #8]
 800be1a:	2703      	movs	r7, #3
 800be1c:	42ae      	cmp	r6, r5
 800be1e:	d125      	bne.n	800be6c <_free_r+0x144>
 800be20:	2301      	movs	r3, #1
 800be22:	1080      	asrs	r0, r0, #2
 800be24:	4083      	lsls	r3, r0
 800be26:	6850      	ldr	r0, [r2, #4]
 800be28:	4303      	orrs	r3, r0
 800be2a:	6053      	str	r3, [r2, #4]
 800be2c:	60ce      	str	r6, [r1, #12]
 800be2e:	608d      	str	r5, [r1, #8]
 800be30:	60b1      	str	r1, [r6, #8]
 800be32:	60e9      	str	r1, [r5, #12]
 800be34:	e7a7      	b.n	800bd86 <_free_r+0x5e>
 800be36:	2d14      	cmp	r5, #20
 800be38:	d802      	bhi.n	800be40 <_free_r+0x118>
 800be3a:	0028      	movs	r0, r5
 800be3c:	305b      	adds	r0, #91	; 0x5b
 800be3e:	e7e9      	b.n	800be14 <_free_r+0xec>
 800be40:	2d54      	cmp	r5, #84	; 0x54
 800be42:	d802      	bhi.n	800be4a <_free_r+0x122>
 800be44:	0b18      	lsrs	r0, r3, #12
 800be46:	306e      	adds	r0, #110	; 0x6e
 800be48:	e7e4      	b.n	800be14 <_free_r+0xec>
 800be4a:	20aa      	movs	r0, #170	; 0xaa
 800be4c:	0040      	lsls	r0, r0, #1
 800be4e:	4285      	cmp	r5, r0
 800be50:	d802      	bhi.n	800be58 <_free_r+0x130>
 800be52:	0bd8      	lsrs	r0, r3, #15
 800be54:	3077      	adds	r0, #119	; 0x77
 800be56:	e7dd      	b.n	800be14 <_free_r+0xec>
 800be58:	4e0b      	ldr	r6, [pc, #44]	; (800be88 <_free_r+0x160>)
 800be5a:	207e      	movs	r0, #126	; 0x7e
 800be5c:	42b5      	cmp	r5, r6
 800be5e:	d8d9      	bhi.n	800be14 <_free_r+0xec>
 800be60:	0c98      	lsrs	r0, r3, #18
 800be62:	307c      	adds	r0, #124	; 0x7c
 800be64:	e7d6      	b.n	800be14 <_free_r+0xec>
 800be66:	68ad      	ldr	r5, [r5, #8]
 800be68:	42ae      	cmp	r6, r5
 800be6a:	d003      	beq.n	800be74 <_free_r+0x14c>
 800be6c:	686a      	ldr	r2, [r5, #4]
 800be6e:	43ba      	bics	r2, r7
 800be70:	429a      	cmp	r2, r3
 800be72:	d8f8      	bhi.n	800be66 <_free_r+0x13e>
 800be74:	68ee      	ldr	r6, [r5, #12]
 800be76:	e7d9      	b.n	800be2c <_free_r+0x104>
 800be78:	2000002c 	.word	0x2000002c
 800be7c:	20000438 	.word	0x20000438
 800be80:	20000b6c 	.word	0x20000b6c
 800be84:	20000034 	.word	0x20000034
 800be88:	00000554 	.word	0x00000554

0800be8c <rshift>:
 800be8c:	0002      	movs	r2, r0
 800be8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be90:	6904      	ldr	r4, [r0, #16]
 800be92:	114b      	asrs	r3, r1, #5
 800be94:	b085      	sub	sp, #20
 800be96:	3214      	adds	r2, #20
 800be98:	9302      	str	r3, [sp, #8]
 800be9a:	114d      	asrs	r5, r1, #5
 800be9c:	0013      	movs	r3, r2
 800be9e:	42ac      	cmp	r4, r5
 800bea0:	dd32      	ble.n	800bf08 <rshift+0x7c>
 800bea2:	261f      	movs	r6, #31
 800bea4:	000f      	movs	r7, r1
 800bea6:	114b      	asrs	r3, r1, #5
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	00a5      	lsls	r5, r4, #2
 800beac:	18d3      	adds	r3, r2, r3
 800beae:	4037      	ands	r7, r6
 800beb0:	1955      	adds	r5, r2, r5
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	9701      	str	r7, [sp, #4]
 800beb6:	4231      	tst	r1, r6
 800beb8:	d10d      	bne.n	800bed6 <rshift+0x4a>
 800beba:	0016      	movs	r6, r2
 800bebc:	0019      	movs	r1, r3
 800bebe:	428d      	cmp	r5, r1
 800bec0:	d836      	bhi.n	800bf30 <rshift+0xa4>
 800bec2:	9900      	ldr	r1, [sp, #0]
 800bec4:	2300      	movs	r3, #0
 800bec6:	3903      	subs	r1, #3
 800bec8:	428d      	cmp	r5, r1
 800beca:	d302      	bcc.n	800bed2 <rshift+0x46>
 800becc:	9b02      	ldr	r3, [sp, #8]
 800bece:	1ae4      	subs	r4, r4, r3
 800bed0:	00a3      	lsls	r3, r4, #2
 800bed2:	18d3      	adds	r3, r2, r3
 800bed4:	e018      	b.n	800bf08 <rshift+0x7c>
 800bed6:	2120      	movs	r1, #32
 800bed8:	9e01      	ldr	r6, [sp, #4]
 800beda:	9f01      	ldr	r7, [sp, #4]
 800bedc:	1b89      	subs	r1, r1, r6
 800bede:	9e00      	ldr	r6, [sp, #0]
 800bee0:	9103      	str	r1, [sp, #12]
 800bee2:	ce02      	ldmia	r6!, {r1}
 800bee4:	4694      	mov	ip, r2
 800bee6:	40f9      	lsrs	r1, r7
 800bee8:	42b5      	cmp	r5, r6
 800beea:	d816      	bhi.n	800bf1a <rshift+0x8e>
 800beec:	9e00      	ldr	r6, [sp, #0]
 800beee:	2300      	movs	r3, #0
 800bef0:	3601      	adds	r6, #1
 800bef2:	42b5      	cmp	r5, r6
 800bef4:	d303      	bcc.n	800befe <rshift+0x72>
 800bef6:	9b02      	ldr	r3, [sp, #8]
 800bef8:	1ae3      	subs	r3, r4, r3
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	3b04      	subs	r3, #4
 800befe:	18d3      	adds	r3, r2, r3
 800bf00:	6019      	str	r1, [r3, #0]
 800bf02:	2900      	cmp	r1, #0
 800bf04:	d000      	beq.n	800bf08 <rshift+0x7c>
 800bf06:	3304      	adds	r3, #4
 800bf08:	1a99      	subs	r1, r3, r2
 800bf0a:	1089      	asrs	r1, r1, #2
 800bf0c:	6101      	str	r1, [r0, #16]
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d101      	bne.n	800bf16 <rshift+0x8a>
 800bf12:	2300      	movs	r3, #0
 800bf14:	6143      	str	r3, [r0, #20]
 800bf16:	b005      	add	sp, #20
 800bf18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf1a:	6837      	ldr	r7, [r6, #0]
 800bf1c:	9b03      	ldr	r3, [sp, #12]
 800bf1e:	409f      	lsls	r7, r3
 800bf20:	430f      	orrs	r7, r1
 800bf22:	4661      	mov	r1, ip
 800bf24:	c180      	stmia	r1!, {r7}
 800bf26:	468c      	mov	ip, r1
 800bf28:	9b01      	ldr	r3, [sp, #4]
 800bf2a:	ce02      	ldmia	r6!, {r1}
 800bf2c:	40d9      	lsrs	r1, r3
 800bf2e:	e7db      	b.n	800bee8 <rshift+0x5c>
 800bf30:	c980      	ldmia	r1!, {r7}
 800bf32:	c680      	stmia	r6!, {r7}
 800bf34:	e7c3      	b.n	800bebe <rshift+0x32>

0800bf36 <__hexdig_fun>:
 800bf36:	0002      	movs	r2, r0
 800bf38:	3a30      	subs	r2, #48	; 0x30
 800bf3a:	0003      	movs	r3, r0
 800bf3c:	2a09      	cmp	r2, #9
 800bf3e:	d802      	bhi.n	800bf46 <__hexdig_fun+0x10>
 800bf40:	3b20      	subs	r3, #32
 800bf42:	b2d8      	uxtb	r0, r3
 800bf44:	4770      	bx	lr
 800bf46:	0002      	movs	r2, r0
 800bf48:	3a61      	subs	r2, #97	; 0x61
 800bf4a:	2a05      	cmp	r2, #5
 800bf4c:	d801      	bhi.n	800bf52 <__hexdig_fun+0x1c>
 800bf4e:	3b47      	subs	r3, #71	; 0x47
 800bf50:	e7f7      	b.n	800bf42 <__hexdig_fun+0xc>
 800bf52:	001a      	movs	r2, r3
 800bf54:	3a41      	subs	r2, #65	; 0x41
 800bf56:	2000      	movs	r0, #0
 800bf58:	2a05      	cmp	r2, #5
 800bf5a:	d8f3      	bhi.n	800bf44 <__hexdig_fun+0xe>
 800bf5c:	3b27      	subs	r3, #39	; 0x27
 800bf5e:	e7f0      	b.n	800bf42 <__hexdig_fun+0xc>

0800bf60 <__gethex>:
 800bf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf62:	b089      	sub	sp, #36	; 0x24
 800bf64:	9307      	str	r3, [sp, #28]
 800bf66:	2302      	movs	r3, #2
 800bf68:	9201      	str	r2, [sp, #4]
 800bf6a:	680a      	ldr	r2, [r1, #0]
 800bf6c:	425b      	negs	r3, r3
 800bf6e:	9003      	str	r0, [sp, #12]
 800bf70:	9106      	str	r1, [sp, #24]
 800bf72:	1c96      	adds	r6, r2, #2
 800bf74:	1a9b      	subs	r3, r3, r2
 800bf76:	199a      	adds	r2, r3, r6
 800bf78:	9600      	str	r6, [sp, #0]
 800bf7a:	9205      	str	r2, [sp, #20]
 800bf7c:	9a00      	ldr	r2, [sp, #0]
 800bf7e:	3601      	adds	r6, #1
 800bf80:	7810      	ldrb	r0, [r2, #0]
 800bf82:	2830      	cmp	r0, #48	; 0x30
 800bf84:	d0f7      	beq.n	800bf76 <__gethex+0x16>
 800bf86:	f7ff ffd6 	bl	800bf36 <__hexdig_fun>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	001d      	movs	r5, r3
 800bf8e:	9302      	str	r3, [sp, #8]
 800bf90:	4298      	cmp	r0, r3
 800bf92:	d11d      	bne.n	800bfd0 <__gethex+0x70>
 800bf94:	2201      	movs	r2, #1
 800bf96:	49a6      	ldr	r1, [pc, #664]	; (800c230 <__gethex+0x2d0>)
 800bf98:	9800      	ldr	r0, [sp, #0]
 800bf9a:	f7ff fd6d 	bl	800ba78 <strncmp>
 800bf9e:	0007      	movs	r7, r0
 800bfa0:	42a8      	cmp	r0, r5
 800bfa2:	d169      	bne.n	800c078 <__gethex+0x118>
 800bfa4:	9b00      	ldr	r3, [sp, #0]
 800bfa6:	0034      	movs	r4, r6
 800bfa8:	7858      	ldrb	r0, [r3, #1]
 800bfaa:	f7ff ffc4 	bl	800bf36 <__hexdig_fun>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	9302      	str	r3, [sp, #8]
 800bfb2:	42a8      	cmp	r0, r5
 800bfb4:	d02f      	beq.n	800c016 <__gethex+0xb6>
 800bfb6:	9600      	str	r6, [sp, #0]
 800bfb8:	9b00      	ldr	r3, [sp, #0]
 800bfba:	7818      	ldrb	r0, [r3, #0]
 800bfbc:	2830      	cmp	r0, #48	; 0x30
 800bfbe:	d009      	beq.n	800bfd4 <__gethex+0x74>
 800bfc0:	f7ff ffb9 	bl	800bf36 <__hexdig_fun>
 800bfc4:	4242      	negs	r2, r0
 800bfc6:	4142      	adcs	r2, r0
 800bfc8:	2301      	movs	r3, #1
 800bfca:	0035      	movs	r5, r6
 800bfcc:	9202      	str	r2, [sp, #8]
 800bfce:	9305      	str	r3, [sp, #20]
 800bfd0:	9c00      	ldr	r4, [sp, #0]
 800bfd2:	e004      	b.n	800bfde <__gethex+0x7e>
 800bfd4:	9b00      	ldr	r3, [sp, #0]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	e7ed      	b.n	800bfb8 <__gethex+0x58>
 800bfdc:	3401      	adds	r4, #1
 800bfde:	7820      	ldrb	r0, [r4, #0]
 800bfe0:	f7ff ffa9 	bl	800bf36 <__hexdig_fun>
 800bfe4:	1e07      	subs	r7, r0, #0
 800bfe6:	d1f9      	bne.n	800bfdc <__gethex+0x7c>
 800bfe8:	2201      	movs	r2, #1
 800bfea:	0020      	movs	r0, r4
 800bfec:	4990      	ldr	r1, [pc, #576]	; (800c230 <__gethex+0x2d0>)
 800bfee:	f7ff fd43 	bl	800ba78 <strncmp>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d10d      	bne.n	800c012 <__gethex+0xb2>
 800bff6:	2d00      	cmp	r5, #0
 800bff8:	d106      	bne.n	800c008 <__gethex+0xa8>
 800bffa:	3401      	adds	r4, #1
 800bffc:	0025      	movs	r5, r4
 800bffe:	7820      	ldrb	r0, [r4, #0]
 800c000:	f7ff ff99 	bl	800bf36 <__hexdig_fun>
 800c004:	2800      	cmp	r0, #0
 800c006:	d102      	bne.n	800c00e <__gethex+0xae>
 800c008:	1b2d      	subs	r5, r5, r4
 800c00a:	00af      	lsls	r7, r5, #2
 800c00c:	e003      	b.n	800c016 <__gethex+0xb6>
 800c00e:	3401      	adds	r4, #1
 800c010:	e7f5      	b.n	800bffe <__gethex+0x9e>
 800c012:	2d00      	cmp	r5, #0
 800c014:	d1f8      	bne.n	800c008 <__gethex+0xa8>
 800c016:	2220      	movs	r2, #32
 800c018:	7823      	ldrb	r3, [r4, #0]
 800c01a:	0026      	movs	r6, r4
 800c01c:	4393      	bics	r3, r2
 800c01e:	2b50      	cmp	r3, #80	; 0x50
 800c020:	d11d      	bne.n	800c05e <__gethex+0xfe>
 800c022:	7863      	ldrb	r3, [r4, #1]
 800c024:	2b2b      	cmp	r3, #43	; 0x2b
 800c026:	d02c      	beq.n	800c082 <__gethex+0x122>
 800c028:	2b2d      	cmp	r3, #45	; 0x2d
 800c02a:	d02e      	beq.n	800c08a <__gethex+0x12a>
 800c02c:	2300      	movs	r3, #0
 800c02e:	1c66      	adds	r6, r4, #1
 800c030:	9304      	str	r3, [sp, #16]
 800c032:	7830      	ldrb	r0, [r6, #0]
 800c034:	f7ff ff7f 	bl	800bf36 <__hexdig_fun>
 800c038:	1e43      	subs	r3, r0, #1
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	2b18      	cmp	r3, #24
 800c03e:	d82b      	bhi.n	800c098 <__gethex+0x138>
 800c040:	3810      	subs	r0, #16
 800c042:	0005      	movs	r5, r0
 800c044:	7870      	ldrb	r0, [r6, #1]
 800c046:	f7ff ff76 	bl	800bf36 <__hexdig_fun>
 800c04a:	1e43      	subs	r3, r0, #1
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	3601      	adds	r6, #1
 800c050:	2b18      	cmp	r3, #24
 800c052:	d91c      	bls.n	800c08e <__gethex+0x12e>
 800c054:	9b04      	ldr	r3, [sp, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d000      	beq.n	800c05c <__gethex+0xfc>
 800c05a:	426d      	negs	r5, r5
 800c05c:	197f      	adds	r7, r7, r5
 800c05e:	9b06      	ldr	r3, [sp, #24]
 800c060:	601e      	str	r6, [r3, #0]
 800c062:	9b02      	ldr	r3, [sp, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d019      	beq.n	800c09c <__gethex+0x13c>
 800c068:	2600      	movs	r6, #0
 800c06a:	9b05      	ldr	r3, [sp, #20]
 800c06c:	42b3      	cmp	r3, r6
 800c06e:	d100      	bne.n	800c072 <__gethex+0x112>
 800c070:	3606      	adds	r6, #6
 800c072:	0030      	movs	r0, r6
 800c074:	b009      	add	sp, #36	; 0x24
 800c076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c078:	2301      	movs	r3, #1
 800c07a:	2700      	movs	r7, #0
 800c07c:	9c00      	ldr	r4, [sp, #0]
 800c07e:	9302      	str	r3, [sp, #8]
 800c080:	e7c9      	b.n	800c016 <__gethex+0xb6>
 800c082:	2300      	movs	r3, #0
 800c084:	9304      	str	r3, [sp, #16]
 800c086:	1ca6      	adds	r6, r4, #2
 800c088:	e7d3      	b.n	800c032 <__gethex+0xd2>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e7fa      	b.n	800c084 <__gethex+0x124>
 800c08e:	230a      	movs	r3, #10
 800c090:	435d      	muls	r5, r3
 800c092:	182d      	adds	r5, r5, r0
 800c094:	3d10      	subs	r5, #16
 800c096:	e7d5      	b.n	800c044 <__gethex+0xe4>
 800c098:	0026      	movs	r6, r4
 800c09a:	e7e0      	b.n	800c05e <__gethex+0xfe>
 800c09c:	9b00      	ldr	r3, [sp, #0]
 800c09e:	9902      	ldr	r1, [sp, #8]
 800c0a0:	1ae3      	subs	r3, r4, r3
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	2b07      	cmp	r3, #7
 800c0a6:	dc0a      	bgt.n	800c0be <__gethex+0x15e>
 800c0a8:	9803      	ldr	r0, [sp, #12]
 800c0aa:	f000 fa5d 	bl	800c568 <_Balloc>
 800c0ae:	1e05      	subs	r5, r0, #0
 800c0b0:	d108      	bne.n	800c0c4 <__gethex+0x164>
 800c0b2:	002a      	movs	r2, r5
 800c0b4:	21e4      	movs	r1, #228	; 0xe4
 800c0b6:	4b5f      	ldr	r3, [pc, #380]	; (800c234 <__gethex+0x2d4>)
 800c0b8:	485f      	ldr	r0, [pc, #380]	; (800c238 <__gethex+0x2d8>)
 800c0ba:	f003 fd19 	bl	800faf0 <__assert_func>
 800c0be:	3101      	adds	r1, #1
 800c0c0:	105b      	asrs	r3, r3, #1
 800c0c2:	e7ef      	b.n	800c0a4 <__gethex+0x144>
 800c0c4:	0003      	movs	r3, r0
 800c0c6:	3314      	adds	r3, #20
 800c0c8:	9302      	str	r3, [sp, #8]
 800c0ca:	9305      	str	r3, [sp, #20]
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	001e      	movs	r6, r3
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	9b00      	ldr	r3, [sp, #0]
 800c0d4:	42a3      	cmp	r3, r4
 800c0d6:	d33f      	bcc.n	800c158 <__gethex+0x1f8>
 800c0d8:	9c05      	ldr	r4, [sp, #20]
 800c0da:	9b02      	ldr	r3, [sp, #8]
 800c0dc:	c440      	stmia	r4!, {r6}
 800c0de:	1ae4      	subs	r4, r4, r3
 800c0e0:	10a4      	asrs	r4, r4, #2
 800c0e2:	0030      	movs	r0, r6
 800c0e4:	612c      	str	r4, [r5, #16]
 800c0e6:	f000 fb01 	bl	800c6ec <__hi0bits>
 800c0ea:	9b01      	ldr	r3, [sp, #4]
 800c0ec:	0164      	lsls	r4, r4, #5
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	1a26      	subs	r6, r4, r0
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	429e      	cmp	r6, r3
 800c0f6:	dd51      	ble.n	800c19c <__gethex+0x23c>
 800c0f8:	1af6      	subs	r6, r6, r3
 800c0fa:	0031      	movs	r1, r6
 800c0fc:	0028      	movs	r0, r5
 800c0fe:	f000 fe7b 	bl	800cdf8 <__any_on>
 800c102:	1e04      	subs	r4, r0, #0
 800c104:	d016      	beq.n	800c134 <__gethex+0x1d4>
 800c106:	2401      	movs	r4, #1
 800c108:	231f      	movs	r3, #31
 800c10a:	0020      	movs	r0, r4
 800c10c:	1e72      	subs	r2, r6, #1
 800c10e:	4013      	ands	r3, r2
 800c110:	4098      	lsls	r0, r3
 800c112:	0003      	movs	r3, r0
 800c114:	1151      	asrs	r1, r2, #5
 800c116:	9802      	ldr	r0, [sp, #8]
 800c118:	0089      	lsls	r1, r1, #2
 800c11a:	5809      	ldr	r1, [r1, r0]
 800c11c:	4219      	tst	r1, r3
 800c11e:	d009      	beq.n	800c134 <__gethex+0x1d4>
 800c120:	42a2      	cmp	r2, r4
 800c122:	dd06      	ble.n	800c132 <__gethex+0x1d2>
 800c124:	0028      	movs	r0, r5
 800c126:	1eb1      	subs	r1, r6, #2
 800c128:	f000 fe66 	bl	800cdf8 <__any_on>
 800c12c:	3402      	adds	r4, #2
 800c12e:	2800      	cmp	r0, #0
 800c130:	d100      	bne.n	800c134 <__gethex+0x1d4>
 800c132:	2402      	movs	r4, #2
 800c134:	0031      	movs	r1, r6
 800c136:	0028      	movs	r0, r5
 800c138:	f7ff fea8 	bl	800be8c <rshift>
 800c13c:	19bf      	adds	r7, r7, r6
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	42bb      	cmp	r3, r7
 800c144:	da3a      	bge.n	800c1bc <__gethex+0x25c>
 800c146:	0029      	movs	r1, r5
 800c148:	9803      	ldr	r0, [sp, #12]
 800c14a:	f000 fa35 	bl	800c5b8 <_Bfree>
 800c14e:	2300      	movs	r3, #0
 800c150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c152:	26a3      	movs	r6, #163	; 0xa3
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	e78c      	b.n	800c072 <__gethex+0x112>
 800c158:	3c01      	subs	r4, #1
 800c15a:	7823      	ldrb	r3, [r4, #0]
 800c15c:	2b2e      	cmp	r3, #46	; 0x2e
 800c15e:	d012      	beq.n	800c186 <__gethex+0x226>
 800c160:	9b04      	ldr	r3, [sp, #16]
 800c162:	2b20      	cmp	r3, #32
 800c164:	d104      	bne.n	800c170 <__gethex+0x210>
 800c166:	9b05      	ldr	r3, [sp, #20]
 800c168:	c340      	stmia	r3!, {r6}
 800c16a:	2600      	movs	r6, #0
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	9604      	str	r6, [sp, #16]
 800c170:	7820      	ldrb	r0, [r4, #0]
 800c172:	f7ff fee0 	bl	800bf36 <__hexdig_fun>
 800c176:	230f      	movs	r3, #15
 800c178:	4018      	ands	r0, r3
 800c17a:	9b04      	ldr	r3, [sp, #16]
 800c17c:	4098      	lsls	r0, r3
 800c17e:	3304      	adds	r3, #4
 800c180:	4306      	orrs	r6, r0
 800c182:	9304      	str	r3, [sp, #16]
 800c184:	e7a5      	b.n	800c0d2 <__gethex+0x172>
 800c186:	9b00      	ldr	r3, [sp, #0]
 800c188:	42a3      	cmp	r3, r4
 800c18a:	d8e9      	bhi.n	800c160 <__gethex+0x200>
 800c18c:	2201      	movs	r2, #1
 800c18e:	0020      	movs	r0, r4
 800c190:	4927      	ldr	r1, [pc, #156]	; (800c230 <__gethex+0x2d0>)
 800c192:	f7ff fc71 	bl	800ba78 <strncmp>
 800c196:	2800      	cmp	r0, #0
 800c198:	d1e2      	bne.n	800c160 <__gethex+0x200>
 800c19a:	e79a      	b.n	800c0d2 <__gethex+0x172>
 800c19c:	9b00      	ldr	r3, [sp, #0]
 800c19e:	2400      	movs	r4, #0
 800c1a0:	429e      	cmp	r6, r3
 800c1a2:	dacc      	bge.n	800c13e <__gethex+0x1de>
 800c1a4:	1b9e      	subs	r6, r3, r6
 800c1a6:	0029      	movs	r1, r5
 800c1a8:	0032      	movs	r2, r6
 800c1aa:	9803      	ldr	r0, [sp, #12]
 800c1ac:	f000 fbf0 	bl	800c990 <__lshift>
 800c1b0:	0003      	movs	r3, r0
 800c1b2:	3314      	adds	r3, #20
 800c1b4:	0005      	movs	r5, r0
 800c1b6:	1bbf      	subs	r7, r7, r6
 800c1b8:	9302      	str	r3, [sp, #8]
 800c1ba:	e7c0      	b.n	800c13e <__gethex+0x1de>
 800c1bc:	9b01      	ldr	r3, [sp, #4]
 800c1be:	685e      	ldr	r6, [r3, #4]
 800c1c0:	42be      	cmp	r6, r7
 800c1c2:	dd70      	ble.n	800c2a6 <__gethex+0x346>
 800c1c4:	9b00      	ldr	r3, [sp, #0]
 800c1c6:	1bf6      	subs	r6, r6, r7
 800c1c8:	42b3      	cmp	r3, r6
 800c1ca:	dc37      	bgt.n	800c23c <__gethex+0x2dc>
 800c1cc:	9b01      	ldr	r3, [sp, #4]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d024      	beq.n	800c21e <__gethex+0x2be>
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d026      	beq.n	800c226 <__gethex+0x2c6>
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d117      	bne.n	800c20c <__gethex+0x2ac>
 800c1dc:	9b00      	ldr	r3, [sp, #0]
 800c1de:	42b3      	cmp	r3, r6
 800c1e0:	d114      	bne.n	800c20c <__gethex+0x2ac>
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d10b      	bne.n	800c1fe <__gethex+0x29e>
 800c1e6:	9b01      	ldr	r3, [sp, #4]
 800c1e8:	9a07      	ldr	r2, [sp, #28]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	2662      	movs	r6, #98	; 0x62
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	9a02      	ldr	r2, [sp, #8]
 800c1f4:	612b      	str	r3, [r5, #16]
 800c1f6:	6013      	str	r3, [r2, #0]
 800c1f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1fa:	601d      	str	r5, [r3, #0]
 800c1fc:	e739      	b.n	800c072 <__gethex+0x112>
 800c1fe:	9900      	ldr	r1, [sp, #0]
 800c200:	0028      	movs	r0, r5
 800c202:	3901      	subs	r1, #1
 800c204:	f000 fdf8 	bl	800cdf8 <__any_on>
 800c208:	2800      	cmp	r0, #0
 800c20a:	d1ec      	bne.n	800c1e6 <__gethex+0x286>
 800c20c:	0029      	movs	r1, r5
 800c20e:	9803      	ldr	r0, [sp, #12]
 800c210:	f000 f9d2 	bl	800c5b8 <_Bfree>
 800c214:	2300      	movs	r3, #0
 800c216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c218:	2650      	movs	r6, #80	; 0x50
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	e729      	b.n	800c072 <__gethex+0x112>
 800c21e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1f3      	bne.n	800c20c <__gethex+0x2ac>
 800c224:	e7df      	b.n	800c1e6 <__gethex+0x286>
 800c226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1dc      	bne.n	800c1e6 <__gethex+0x286>
 800c22c:	e7ee      	b.n	800c20c <__gethex+0x2ac>
 800c22e:	46c0      	nop			; (mov r8, r8)
 800c230:	08013f50 	.word	0x08013f50
 800c234:	080140b1 	.word	0x080140b1
 800c238:	080140c2 	.word	0x080140c2
 800c23c:	1e77      	subs	r7, r6, #1
 800c23e:	2c00      	cmp	r4, #0
 800c240:	d12f      	bne.n	800c2a2 <__gethex+0x342>
 800c242:	2f00      	cmp	r7, #0
 800c244:	d004      	beq.n	800c250 <__gethex+0x2f0>
 800c246:	0039      	movs	r1, r7
 800c248:	0028      	movs	r0, r5
 800c24a:	f000 fdd5 	bl	800cdf8 <__any_on>
 800c24e:	0004      	movs	r4, r0
 800c250:	231f      	movs	r3, #31
 800c252:	117a      	asrs	r2, r7, #5
 800c254:	401f      	ands	r7, r3
 800c256:	3b1e      	subs	r3, #30
 800c258:	40bb      	lsls	r3, r7
 800c25a:	9902      	ldr	r1, [sp, #8]
 800c25c:	0092      	lsls	r2, r2, #2
 800c25e:	5852      	ldr	r2, [r2, r1]
 800c260:	421a      	tst	r2, r3
 800c262:	d001      	beq.n	800c268 <__gethex+0x308>
 800c264:	2302      	movs	r3, #2
 800c266:	431c      	orrs	r4, r3
 800c268:	9b00      	ldr	r3, [sp, #0]
 800c26a:	0031      	movs	r1, r6
 800c26c:	1b9b      	subs	r3, r3, r6
 800c26e:	2602      	movs	r6, #2
 800c270:	0028      	movs	r0, r5
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	f7ff fe0a 	bl	800be8c <rshift>
 800c278:	9b01      	ldr	r3, [sp, #4]
 800c27a:	685f      	ldr	r7, [r3, #4]
 800c27c:	2c00      	cmp	r4, #0
 800c27e:	d041      	beq.n	800c304 <__gethex+0x3a4>
 800c280:	9b01      	ldr	r3, [sp, #4]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	2b02      	cmp	r3, #2
 800c286:	d010      	beq.n	800c2aa <__gethex+0x34a>
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d012      	beq.n	800c2b2 <__gethex+0x352>
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d106      	bne.n	800c29e <__gethex+0x33e>
 800c290:	07a2      	lsls	r2, r4, #30
 800c292:	d504      	bpl.n	800c29e <__gethex+0x33e>
 800c294:	9a02      	ldr	r2, [sp, #8]
 800c296:	6812      	ldr	r2, [r2, #0]
 800c298:	4314      	orrs	r4, r2
 800c29a:	421c      	tst	r4, r3
 800c29c:	d10c      	bne.n	800c2b8 <__gethex+0x358>
 800c29e:	2310      	movs	r3, #16
 800c2a0:	e02f      	b.n	800c302 <__gethex+0x3a2>
 800c2a2:	2401      	movs	r4, #1
 800c2a4:	e7d4      	b.n	800c250 <__gethex+0x2f0>
 800c2a6:	2601      	movs	r6, #1
 800c2a8:	e7e8      	b.n	800c27c <__gethex+0x31c>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2ae:	1a9b      	subs	r3, r3, r2
 800c2b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0f2      	beq.n	800c29e <__gethex+0x33e>
 800c2b8:	692b      	ldr	r3, [r5, #16]
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	9302      	str	r3, [sp, #8]
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	002b      	movs	r3, r5
 800c2c4:	9a04      	ldr	r2, [sp, #16]
 800c2c6:	3314      	adds	r3, #20
 800c2c8:	1899      	adds	r1, r3, r2
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	1c54      	adds	r4, r2, #1
 800c2ce:	d01e      	beq.n	800c30e <__gethex+0x3ae>
 800c2d0:	3201      	adds	r2, #1
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	002b      	movs	r3, r5
 800c2d6:	3314      	adds	r3, #20
 800c2d8:	2e02      	cmp	r6, #2
 800c2da:	d141      	bne.n	800c360 <__gethex+0x400>
 800c2dc:	9a01      	ldr	r2, [sp, #4]
 800c2de:	9900      	ldr	r1, [sp, #0]
 800c2e0:	6812      	ldr	r2, [r2, #0]
 800c2e2:	3a01      	subs	r2, #1
 800c2e4:	428a      	cmp	r2, r1
 800c2e6:	d10b      	bne.n	800c300 <__gethex+0x3a0>
 800c2e8:	221f      	movs	r2, #31
 800c2ea:	9800      	ldr	r0, [sp, #0]
 800c2ec:	1149      	asrs	r1, r1, #5
 800c2ee:	4002      	ands	r2, r0
 800c2f0:	2001      	movs	r0, #1
 800c2f2:	0004      	movs	r4, r0
 800c2f4:	4094      	lsls	r4, r2
 800c2f6:	0089      	lsls	r1, r1, #2
 800c2f8:	58cb      	ldr	r3, [r1, r3]
 800c2fa:	4223      	tst	r3, r4
 800c2fc:	d000      	beq.n	800c300 <__gethex+0x3a0>
 800c2fe:	2601      	movs	r6, #1
 800c300:	2320      	movs	r3, #32
 800c302:	431e      	orrs	r6, r3
 800c304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c306:	601d      	str	r5, [r3, #0]
 800c308:	9b07      	ldr	r3, [sp, #28]
 800c30a:	601f      	str	r7, [r3, #0]
 800c30c:	e6b1      	b.n	800c072 <__gethex+0x112>
 800c30e:	c301      	stmia	r3!, {r0}
 800c310:	4299      	cmp	r1, r3
 800c312:	d8da      	bhi.n	800c2ca <__gethex+0x36a>
 800c314:	68ab      	ldr	r3, [r5, #8]
 800c316:	9a02      	ldr	r2, [sp, #8]
 800c318:	429a      	cmp	r2, r3
 800c31a:	db18      	blt.n	800c34e <__gethex+0x3ee>
 800c31c:	6869      	ldr	r1, [r5, #4]
 800c31e:	9803      	ldr	r0, [sp, #12]
 800c320:	3101      	adds	r1, #1
 800c322:	f000 f921 	bl	800c568 <_Balloc>
 800c326:	1e04      	subs	r4, r0, #0
 800c328:	d104      	bne.n	800c334 <__gethex+0x3d4>
 800c32a:	0022      	movs	r2, r4
 800c32c:	2184      	movs	r1, #132	; 0x84
 800c32e:	4b1c      	ldr	r3, [pc, #112]	; (800c3a0 <__gethex+0x440>)
 800c330:	481c      	ldr	r0, [pc, #112]	; (800c3a4 <__gethex+0x444>)
 800c332:	e6c2      	b.n	800c0ba <__gethex+0x15a>
 800c334:	0029      	movs	r1, r5
 800c336:	692a      	ldr	r2, [r5, #16]
 800c338:	310c      	adds	r1, #12
 800c33a:	3202      	adds	r2, #2
 800c33c:	0092      	lsls	r2, r2, #2
 800c33e:	300c      	adds	r0, #12
 800c340:	f7ff fc77 	bl	800bc32 <memcpy>
 800c344:	0029      	movs	r1, r5
 800c346:	9803      	ldr	r0, [sp, #12]
 800c348:	f000 f936 	bl	800c5b8 <_Bfree>
 800c34c:	0025      	movs	r5, r4
 800c34e:	692b      	ldr	r3, [r5, #16]
 800c350:	1c5a      	adds	r2, r3, #1
 800c352:	612a      	str	r2, [r5, #16]
 800c354:	2201      	movs	r2, #1
 800c356:	3304      	adds	r3, #4
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	18eb      	adds	r3, r5, r3
 800c35c:	605a      	str	r2, [r3, #4]
 800c35e:	e7b9      	b.n	800c2d4 <__gethex+0x374>
 800c360:	692a      	ldr	r2, [r5, #16]
 800c362:	9902      	ldr	r1, [sp, #8]
 800c364:	428a      	cmp	r2, r1
 800c366:	dd09      	ble.n	800c37c <__gethex+0x41c>
 800c368:	2101      	movs	r1, #1
 800c36a:	0028      	movs	r0, r5
 800c36c:	f7ff fd8e 	bl	800be8c <rshift>
 800c370:	9b01      	ldr	r3, [sp, #4]
 800c372:	3701      	adds	r7, #1
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	42bb      	cmp	r3, r7
 800c378:	dac1      	bge.n	800c2fe <__gethex+0x39e>
 800c37a:	e6e4      	b.n	800c146 <__gethex+0x1e6>
 800c37c:	221f      	movs	r2, #31
 800c37e:	9c00      	ldr	r4, [sp, #0]
 800c380:	9900      	ldr	r1, [sp, #0]
 800c382:	2601      	movs	r6, #1
 800c384:	4014      	ands	r4, r2
 800c386:	4211      	tst	r1, r2
 800c388:	d0ba      	beq.n	800c300 <__gethex+0x3a0>
 800c38a:	9a04      	ldr	r2, [sp, #16]
 800c38c:	189b      	adds	r3, r3, r2
 800c38e:	3b04      	subs	r3, #4
 800c390:	6818      	ldr	r0, [r3, #0]
 800c392:	f000 f9ab 	bl	800c6ec <__hi0bits>
 800c396:	2320      	movs	r3, #32
 800c398:	1b1b      	subs	r3, r3, r4
 800c39a:	4298      	cmp	r0, r3
 800c39c:	dbe4      	blt.n	800c368 <__gethex+0x408>
 800c39e:	e7af      	b.n	800c300 <__gethex+0x3a0>
 800c3a0:	080140b1 	.word	0x080140b1
 800c3a4:	080140c2 	.word	0x080140c2

0800c3a8 <L_shift>:
 800c3a8:	2308      	movs	r3, #8
 800c3aa:	b570      	push	{r4, r5, r6, lr}
 800c3ac:	2520      	movs	r5, #32
 800c3ae:	1a9a      	subs	r2, r3, r2
 800c3b0:	0092      	lsls	r2, r2, #2
 800c3b2:	1aad      	subs	r5, r5, r2
 800c3b4:	6843      	ldr	r3, [r0, #4]
 800c3b6:	6804      	ldr	r4, [r0, #0]
 800c3b8:	001e      	movs	r6, r3
 800c3ba:	40ae      	lsls	r6, r5
 800c3bc:	40d3      	lsrs	r3, r2
 800c3be:	4334      	orrs	r4, r6
 800c3c0:	6004      	str	r4, [r0, #0]
 800c3c2:	6043      	str	r3, [r0, #4]
 800c3c4:	3004      	adds	r0, #4
 800c3c6:	4288      	cmp	r0, r1
 800c3c8:	d3f4      	bcc.n	800c3b4 <L_shift+0xc>
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}

0800c3cc <__match>:
 800c3cc:	b530      	push	{r4, r5, lr}
 800c3ce:	6803      	ldr	r3, [r0, #0]
 800c3d0:	780c      	ldrb	r4, [r1, #0]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	2c00      	cmp	r4, #0
 800c3d6:	d102      	bne.n	800c3de <__match+0x12>
 800c3d8:	6003      	str	r3, [r0, #0]
 800c3da:	2001      	movs	r0, #1
 800c3dc:	bd30      	pop	{r4, r5, pc}
 800c3de:	781a      	ldrb	r2, [r3, #0]
 800c3e0:	0015      	movs	r5, r2
 800c3e2:	3d41      	subs	r5, #65	; 0x41
 800c3e4:	2d19      	cmp	r5, #25
 800c3e6:	d800      	bhi.n	800c3ea <__match+0x1e>
 800c3e8:	3220      	adds	r2, #32
 800c3ea:	3101      	adds	r1, #1
 800c3ec:	42a2      	cmp	r2, r4
 800c3ee:	d0ef      	beq.n	800c3d0 <__match+0x4>
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	e7f3      	b.n	800c3dc <__match+0x10>

0800c3f4 <__hexnan>:
 800c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3f6:	680b      	ldr	r3, [r1, #0]
 800c3f8:	b08b      	sub	sp, #44	; 0x2c
 800c3fa:	9201      	str	r2, [sp, #4]
 800c3fc:	9901      	ldr	r1, [sp, #4]
 800c3fe:	115a      	asrs	r2, r3, #5
 800c400:	0092      	lsls	r2, r2, #2
 800c402:	188a      	adds	r2, r1, r2
 800c404:	9202      	str	r2, [sp, #8]
 800c406:	0019      	movs	r1, r3
 800c408:	221f      	movs	r2, #31
 800c40a:	4011      	ands	r1, r2
 800c40c:	9008      	str	r0, [sp, #32]
 800c40e:	9106      	str	r1, [sp, #24]
 800c410:	4213      	tst	r3, r2
 800c412:	d002      	beq.n	800c41a <__hexnan+0x26>
 800c414:	9b02      	ldr	r3, [sp, #8]
 800c416:	3304      	adds	r3, #4
 800c418:	9302      	str	r3, [sp, #8]
 800c41a:	9b02      	ldr	r3, [sp, #8]
 800c41c:	2500      	movs	r5, #0
 800c41e:	1f1f      	subs	r7, r3, #4
 800c420:	003e      	movs	r6, r7
 800c422:	003c      	movs	r4, r7
 800c424:	9b08      	ldr	r3, [sp, #32]
 800c426:	603d      	str	r5, [r7, #0]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	9507      	str	r5, [sp, #28]
 800c42c:	9305      	str	r3, [sp, #20]
 800c42e:	9503      	str	r5, [sp, #12]
 800c430:	9b05      	ldr	r3, [sp, #20]
 800c432:	3301      	adds	r3, #1
 800c434:	9309      	str	r3, [sp, #36]	; 0x24
 800c436:	9b05      	ldr	r3, [sp, #20]
 800c438:	785b      	ldrb	r3, [r3, #1]
 800c43a:	9304      	str	r3, [sp, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d028      	beq.n	800c492 <__hexnan+0x9e>
 800c440:	9804      	ldr	r0, [sp, #16]
 800c442:	f7ff fd78 	bl	800bf36 <__hexdig_fun>
 800c446:	2800      	cmp	r0, #0
 800c448:	d154      	bne.n	800c4f4 <__hexnan+0x100>
 800c44a:	9b04      	ldr	r3, [sp, #16]
 800c44c:	2b20      	cmp	r3, #32
 800c44e:	d819      	bhi.n	800c484 <__hexnan+0x90>
 800c450:	9b03      	ldr	r3, [sp, #12]
 800c452:	9a07      	ldr	r2, [sp, #28]
 800c454:	4293      	cmp	r3, r2
 800c456:	dd12      	ble.n	800c47e <__hexnan+0x8a>
 800c458:	42b4      	cmp	r4, r6
 800c45a:	d206      	bcs.n	800c46a <__hexnan+0x76>
 800c45c:	2d07      	cmp	r5, #7
 800c45e:	dc04      	bgt.n	800c46a <__hexnan+0x76>
 800c460:	002a      	movs	r2, r5
 800c462:	0031      	movs	r1, r6
 800c464:	0020      	movs	r0, r4
 800c466:	f7ff ff9f 	bl	800c3a8 <L_shift>
 800c46a:	9b01      	ldr	r3, [sp, #4]
 800c46c:	2508      	movs	r5, #8
 800c46e:	429c      	cmp	r4, r3
 800c470:	d905      	bls.n	800c47e <__hexnan+0x8a>
 800c472:	1f26      	subs	r6, r4, #4
 800c474:	2500      	movs	r5, #0
 800c476:	0034      	movs	r4, r6
 800c478:	9b03      	ldr	r3, [sp, #12]
 800c47a:	6035      	str	r5, [r6, #0]
 800c47c:	9307      	str	r3, [sp, #28]
 800c47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c480:	9305      	str	r3, [sp, #20]
 800c482:	e7d5      	b.n	800c430 <__hexnan+0x3c>
 800c484:	9b04      	ldr	r3, [sp, #16]
 800c486:	2b29      	cmp	r3, #41	; 0x29
 800c488:	d159      	bne.n	800c53e <__hexnan+0x14a>
 800c48a:	9b05      	ldr	r3, [sp, #20]
 800c48c:	9a08      	ldr	r2, [sp, #32]
 800c48e:	3302      	adds	r3, #2
 800c490:	6013      	str	r3, [r2, #0]
 800c492:	9b03      	ldr	r3, [sp, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d052      	beq.n	800c53e <__hexnan+0x14a>
 800c498:	42b4      	cmp	r4, r6
 800c49a:	d206      	bcs.n	800c4aa <__hexnan+0xb6>
 800c49c:	2d07      	cmp	r5, #7
 800c49e:	dc04      	bgt.n	800c4aa <__hexnan+0xb6>
 800c4a0:	002a      	movs	r2, r5
 800c4a2:	0031      	movs	r1, r6
 800c4a4:	0020      	movs	r0, r4
 800c4a6:	f7ff ff7f 	bl	800c3a8 <L_shift>
 800c4aa:	9b01      	ldr	r3, [sp, #4]
 800c4ac:	429c      	cmp	r4, r3
 800c4ae:	d935      	bls.n	800c51c <__hexnan+0x128>
 800c4b0:	001a      	movs	r2, r3
 800c4b2:	0023      	movs	r3, r4
 800c4b4:	cb02      	ldmia	r3!, {r1}
 800c4b6:	c202      	stmia	r2!, {r1}
 800c4b8:	429f      	cmp	r7, r3
 800c4ba:	d2fb      	bcs.n	800c4b4 <__hexnan+0xc0>
 800c4bc:	9b02      	ldr	r3, [sp, #8]
 800c4be:	1c62      	adds	r2, r4, #1
 800c4c0:	1ed9      	subs	r1, r3, #3
 800c4c2:	2304      	movs	r3, #4
 800c4c4:	4291      	cmp	r1, r2
 800c4c6:	d305      	bcc.n	800c4d4 <__hexnan+0xe0>
 800c4c8:	9b02      	ldr	r3, [sp, #8]
 800c4ca:	3b04      	subs	r3, #4
 800c4cc:	1b1b      	subs	r3, r3, r4
 800c4ce:	089b      	lsrs	r3, r3, #2
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	9a01      	ldr	r2, [sp, #4]
 800c4d6:	18d3      	adds	r3, r2, r3
 800c4d8:	2200      	movs	r2, #0
 800c4da:	c304      	stmia	r3!, {r2}
 800c4dc:	429f      	cmp	r7, r3
 800c4de:	d2fc      	bcs.n	800c4da <__hexnan+0xe6>
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d104      	bne.n	800c4f0 <__hexnan+0xfc>
 800c4e6:	9b01      	ldr	r3, [sp, #4]
 800c4e8:	429f      	cmp	r7, r3
 800c4ea:	d126      	bne.n	800c53a <__hexnan+0x146>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	2005      	movs	r0, #5
 800c4f2:	e025      	b.n	800c540 <__hexnan+0x14c>
 800c4f4:	9b03      	ldr	r3, [sp, #12]
 800c4f6:	3501      	adds	r5, #1
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	9303      	str	r3, [sp, #12]
 800c4fc:	2d08      	cmp	r5, #8
 800c4fe:	dd06      	ble.n	800c50e <__hexnan+0x11a>
 800c500:	9b01      	ldr	r3, [sp, #4]
 800c502:	429c      	cmp	r4, r3
 800c504:	d9bb      	bls.n	800c47e <__hexnan+0x8a>
 800c506:	2300      	movs	r3, #0
 800c508:	2501      	movs	r5, #1
 800c50a:	3c04      	subs	r4, #4
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	220f      	movs	r2, #15
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	4010      	ands	r0, r2
 800c514:	011b      	lsls	r3, r3, #4
 800c516:	4303      	orrs	r3, r0
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	e7b0      	b.n	800c47e <__hexnan+0x8a>
 800c51c:	9b06      	ldr	r3, [sp, #24]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0de      	beq.n	800c4e0 <__hexnan+0xec>
 800c522:	2320      	movs	r3, #32
 800c524:	9a06      	ldr	r2, [sp, #24]
 800c526:	9902      	ldr	r1, [sp, #8]
 800c528:	1a9b      	subs	r3, r3, r2
 800c52a:	2201      	movs	r2, #1
 800c52c:	4252      	negs	r2, r2
 800c52e:	40da      	lsrs	r2, r3
 800c530:	3904      	subs	r1, #4
 800c532:	680b      	ldr	r3, [r1, #0]
 800c534:	4013      	ands	r3, r2
 800c536:	600b      	str	r3, [r1, #0]
 800c538:	e7d2      	b.n	800c4e0 <__hexnan+0xec>
 800c53a:	3f04      	subs	r7, #4
 800c53c:	e7d0      	b.n	800c4e0 <__hexnan+0xec>
 800c53e:	2004      	movs	r0, #4
 800c540:	b00b      	add	sp, #44	; 0x2c
 800c542:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c544 <__ascii_mbtowc>:
 800c544:	b082      	sub	sp, #8
 800c546:	2900      	cmp	r1, #0
 800c548:	d100      	bne.n	800c54c <__ascii_mbtowc+0x8>
 800c54a:	a901      	add	r1, sp, #4
 800c54c:	1e10      	subs	r0, r2, #0
 800c54e:	d006      	beq.n	800c55e <__ascii_mbtowc+0x1a>
 800c550:	2b00      	cmp	r3, #0
 800c552:	d006      	beq.n	800c562 <__ascii_mbtowc+0x1e>
 800c554:	7813      	ldrb	r3, [r2, #0]
 800c556:	600b      	str	r3, [r1, #0]
 800c558:	7810      	ldrb	r0, [r2, #0]
 800c55a:	1e43      	subs	r3, r0, #1
 800c55c:	4198      	sbcs	r0, r3
 800c55e:	b002      	add	sp, #8
 800c560:	4770      	bx	lr
 800c562:	2002      	movs	r0, #2
 800c564:	4240      	negs	r0, r0
 800c566:	e7fa      	b.n	800c55e <__ascii_mbtowc+0x1a>

0800c568 <_Balloc>:
 800c568:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c56a:	b570      	push	{r4, r5, r6, lr}
 800c56c:	0006      	movs	r6, r0
 800c56e:	000c      	movs	r4, r1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d012      	beq.n	800c59a <_Balloc+0x32>
 800c574:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c576:	00a2      	lsls	r2, r4, #2
 800c578:	189b      	adds	r3, r3, r2
 800c57a:	6818      	ldr	r0, [r3, #0]
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d115      	bne.n	800c5ac <_Balloc+0x44>
 800c580:	2101      	movs	r1, #1
 800c582:	000d      	movs	r5, r1
 800c584:	40a5      	lsls	r5, r4
 800c586:	1d6a      	adds	r2, r5, #5
 800c588:	0030      	movs	r0, r6
 800c58a:	0092      	lsls	r2, r2, #2
 800c58c:	f003 face 	bl	800fb2c <_calloc_r>
 800c590:	2800      	cmp	r0, #0
 800c592:	d009      	beq.n	800c5a8 <_Balloc+0x40>
 800c594:	6044      	str	r4, [r0, #4]
 800c596:	6085      	str	r5, [r0, #8]
 800c598:	e00a      	b.n	800c5b0 <_Balloc+0x48>
 800c59a:	2221      	movs	r2, #33	; 0x21
 800c59c:	2104      	movs	r1, #4
 800c59e:	f003 fac5 	bl	800fb2c <_calloc_r>
 800c5a2:	6470      	str	r0, [r6, #68]	; 0x44
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	d1e5      	bne.n	800c574 <_Balloc+0xc>
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	6802      	ldr	r2, [r0, #0]
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	6103      	str	r3, [r0, #16]
 800c5b4:	60c3      	str	r3, [r0, #12]
 800c5b6:	e7f8      	b.n	800c5aa <_Balloc+0x42>

0800c5b8 <_Bfree>:
 800c5b8:	2900      	cmp	r1, #0
 800c5ba:	d006      	beq.n	800c5ca <_Bfree+0x12>
 800c5bc:	684a      	ldr	r2, [r1, #4]
 800c5be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c5c0:	0092      	lsls	r2, r2, #2
 800c5c2:	189b      	adds	r3, r3, r2
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	600a      	str	r2, [r1, #0]
 800c5c8:	6019      	str	r1, [r3, #0]
 800c5ca:	4770      	bx	lr

0800c5cc <__multadd>:
 800c5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5ce:	000e      	movs	r6, r1
 800c5d0:	9001      	str	r0, [sp, #4]
 800c5d2:	000c      	movs	r4, r1
 800c5d4:	001d      	movs	r5, r3
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	690f      	ldr	r7, [r1, #16]
 800c5da:	3614      	adds	r6, #20
 800c5dc:	6833      	ldr	r3, [r6, #0]
 800c5de:	3001      	adds	r0, #1
 800c5e0:	b299      	uxth	r1, r3
 800c5e2:	4351      	muls	r1, r2
 800c5e4:	0c1b      	lsrs	r3, r3, #16
 800c5e6:	4353      	muls	r3, r2
 800c5e8:	1949      	adds	r1, r1, r5
 800c5ea:	0c0d      	lsrs	r5, r1, #16
 800c5ec:	195b      	adds	r3, r3, r5
 800c5ee:	0c1d      	lsrs	r5, r3, #16
 800c5f0:	b289      	uxth	r1, r1
 800c5f2:	041b      	lsls	r3, r3, #16
 800c5f4:	185b      	adds	r3, r3, r1
 800c5f6:	c608      	stmia	r6!, {r3}
 800c5f8:	4287      	cmp	r7, r0
 800c5fa:	dcef      	bgt.n	800c5dc <__multadd+0x10>
 800c5fc:	2d00      	cmp	r5, #0
 800c5fe:	d022      	beq.n	800c646 <__multadd+0x7a>
 800c600:	68a3      	ldr	r3, [r4, #8]
 800c602:	42bb      	cmp	r3, r7
 800c604:	dc19      	bgt.n	800c63a <__multadd+0x6e>
 800c606:	6861      	ldr	r1, [r4, #4]
 800c608:	9801      	ldr	r0, [sp, #4]
 800c60a:	3101      	adds	r1, #1
 800c60c:	f7ff ffac 	bl	800c568 <_Balloc>
 800c610:	1e06      	subs	r6, r0, #0
 800c612:	d105      	bne.n	800c620 <__multadd+0x54>
 800c614:	0032      	movs	r2, r6
 800c616:	21ba      	movs	r1, #186	; 0xba
 800c618:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <__multadd+0x80>)
 800c61a:	480d      	ldr	r0, [pc, #52]	; (800c650 <__multadd+0x84>)
 800c61c:	f003 fa68 	bl	800faf0 <__assert_func>
 800c620:	0021      	movs	r1, r4
 800c622:	6922      	ldr	r2, [r4, #16]
 800c624:	310c      	adds	r1, #12
 800c626:	3202      	adds	r2, #2
 800c628:	0092      	lsls	r2, r2, #2
 800c62a:	300c      	adds	r0, #12
 800c62c:	f7ff fb01 	bl	800bc32 <memcpy>
 800c630:	0021      	movs	r1, r4
 800c632:	9801      	ldr	r0, [sp, #4]
 800c634:	f7ff ffc0 	bl	800c5b8 <_Bfree>
 800c638:	0034      	movs	r4, r6
 800c63a:	1d3b      	adds	r3, r7, #4
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	18e3      	adds	r3, r4, r3
 800c640:	605d      	str	r5, [r3, #4]
 800c642:	1c7b      	adds	r3, r7, #1
 800c644:	6123      	str	r3, [r4, #16]
 800c646:	0020      	movs	r0, r4
 800c648:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	080140b1 	.word	0x080140b1
 800c650:	08014122 	.word	0x08014122

0800c654 <__s2b>:
 800c654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c656:	0006      	movs	r6, r0
 800c658:	0018      	movs	r0, r3
 800c65a:	000c      	movs	r4, r1
 800c65c:	3008      	adds	r0, #8
 800c65e:	2109      	movs	r1, #9
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	0015      	movs	r5, r2
 800c664:	f7f3 fdf4 	bl	8000250 <__divsi3>
 800c668:	2301      	movs	r3, #1
 800c66a:	2100      	movs	r1, #0
 800c66c:	4283      	cmp	r3, r0
 800c66e:	db0a      	blt.n	800c686 <__s2b+0x32>
 800c670:	0030      	movs	r0, r6
 800c672:	f7ff ff79 	bl	800c568 <_Balloc>
 800c676:	1e01      	subs	r1, r0, #0
 800c678:	d108      	bne.n	800c68c <__s2b+0x38>
 800c67a:	000a      	movs	r2, r1
 800c67c:	4b19      	ldr	r3, [pc, #100]	; (800c6e4 <__s2b+0x90>)
 800c67e:	481a      	ldr	r0, [pc, #104]	; (800c6e8 <__s2b+0x94>)
 800c680:	31d3      	adds	r1, #211	; 0xd3
 800c682:	f003 fa35 	bl	800faf0 <__assert_func>
 800c686:	005b      	lsls	r3, r3, #1
 800c688:	3101      	adds	r1, #1
 800c68a:	e7ef      	b.n	800c66c <__s2b+0x18>
 800c68c:	9b08      	ldr	r3, [sp, #32]
 800c68e:	6143      	str	r3, [r0, #20]
 800c690:	2301      	movs	r3, #1
 800c692:	6103      	str	r3, [r0, #16]
 800c694:	2d09      	cmp	r5, #9
 800c696:	dd18      	ble.n	800c6ca <__s2b+0x76>
 800c698:	0023      	movs	r3, r4
 800c69a:	3309      	adds	r3, #9
 800c69c:	001f      	movs	r7, r3
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	1964      	adds	r4, r4, r5
 800c6a2:	783b      	ldrb	r3, [r7, #0]
 800c6a4:	220a      	movs	r2, #10
 800c6a6:	0030      	movs	r0, r6
 800c6a8:	3b30      	subs	r3, #48	; 0x30
 800c6aa:	f7ff ff8f 	bl	800c5cc <__multadd>
 800c6ae:	3701      	adds	r7, #1
 800c6b0:	0001      	movs	r1, r0
 800c6b2:	42a7      	cmp	r7, r4
 800c6b4:	d1f5      	bne.n	800c6a2 <__s2b+0x4e>
 800c6b6:	002c      	movs	r4, r5
 800c6b8:	9b00      	ldr	r3, [sp, #0]
 800c6ba:	3c08      	subs	r4, #8
 800c6bc:	191c      	adds	r4, r3, r4
 800c6be:	002f      	movs	r7, r5
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	429f      	cmp	r7, r3
 800c6c4:	db04      	blt.n	800c6d0 <__s2b+0x7c>
 800c6c6:	0008      	movs	r0, r1
 800c6c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6ca:	2509      	movs	r5, #9
 800c6cc:	340a      	adds	r4, #10
 800c6ce:	e7f6      	b.n	800c6be <__s2b+0x6a>
 800c6d0:	1b63      	subs	r3, r4, r5
 800c6d2:	5ddb      	ldrb	r3, [r3, r7]
 800c6d4:	220a      	movs	r2, #10
 800c6d6:	0030      	movs	r0, r6
 800c6d8:	3b30      	subs	r3, #48	; 0x30
 800c6da:	f7ff ff77 	bl	800c5cc <__multadd>
 800c6de:	3701      	adds	r7, #1
 800c6e0:	0001      	movs	r1, r0
 800c6e2:	e7ed      	b.n	800c6c0 <__s2b+0x6c>
 800c6e4:	080140b1 	.word	0x080140b1
 800c6e8:	08014122 	.word	0x08014122

0800c6ec <__hi0bits>:
 800c6ec:	0003      	movs	r3, r0
 800c6ee:	0c02      	lsrs	r2, r0, #16
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	4282      	cmp	r2, r0
 800c6f4:	d101      	bne.n	800c6fa <__hi0bits+0xe>
 800c6f6:	041b      	lsls	r3, r3, #16
 800c6f8:	3010      	adds	r0, #16
 800c6fa:	0e1a      	lsrs	r2, r3, #24
 800c6fc:	d101      	bne.n	800c702 <__hi0bits+0x16>
 800c6fe:	3008      	adds	r0, #8
 800c700:	021b      	lsls	r3, r3, #8
 800c702:	0f1a      	lsrs	r2, r3, #28
 800c704:	d101      	bne.n	800c70a <__hi0bits+0x1e>
 800c706:	3004      	adds	r0, #4
 800c708:	011b      	lsls	r3, r3, #4
 800c70a:	0f9a      	lsrs	r2, r3, #30
 800c70c:	d101      	bne.n	800c712 <__hi0bits+0x26>
 800c70e:	3002      	adds	r0, #2
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	2b00      	cmp	r3, #0
 800c714:	db03      	blt.n	800c71e <__hi0bits+0x32>
 800c716:	3001      	adds	r0, #1
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	d400      	bmi.n	800c71e <__hi0bits+0x32>
 800c71c:	2020      	movs	r0, #32
 800c71e:	4770      	bx	lr

0800c720 <__lo0bits>:
 800c720:	6803      	ldr	r3, [r0, #0]
 800c722:	0001      	movs	r1, r0
 800c724:	2207      	movs	r2, #7
 800c726:	0018      	movs	r0, r3
 800c728:	4010      	ands	r0, r2
 800c72a:	4213      	tst	r3, r2
 800c72c:	d00d      	beq.n	800c74a <__lo0bits+0x2a>
 800c72e:	3a06      	subs	r2, #6
 800c730:	2000      	movs	r0, #0
 800c732:	4213      	tst	r3, r2
 800c734:	d105      	bne.n	800c742 <__lo0bits+0x22>
 800c736:	3002      	adds	r0, #2
 800c738:	4203      	tst	r3, r0
 800c73a:	d003      	beq.n	800c744 <__lo0bits+0x24>
 800c73c:	40d3      	lsrs	r3, r2
 800c73e:	0010      	movs	r0, r2
 800c740:	600b      	str	r3, [r1, #0]
 800c742:	4770      	bx	lr
 800c744:	089b      	lsrs	r3, r3, #2
 800c746:	600b      	str	r3, [r1, #0]
 800c748:	e7fb      	b.n	800c742 <__lo0bits+0x22>
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	2a00      	cmp	r2, #0
 800c74e:	d101      	bne.n	800c754 <__lo0bits+0x34>
 800c750:	2010      	movs	r0, #16
 800c752:	0c1b      	lsrs	r3, r3, #16
 800c754:	b2da      	uxtb	r2, r3
 800c756:	2a00      	cmp	r2, #0
 800c758:	d101      	bne.n	800c75e <__lo0bits+0x3e>
 800c75a:	3008      	adds	r0, #8
 800c75c:	0a1b      	lsrs	r3, r3, #8
 800c75e:	071a      	lsls	r2, r3, #28
 800c760:	d101      	bne.n	800c766 <__lo0bits+0x46>
 800c762:	3004      	adds	r0, #4
 800c764:	091b      	lsrs	r3, r3, #4
 800c766:	079a      	lsls	r2, r3, #30
 800c768:	d101      	bne.n	800c76e <__lo0bits+0x4e>
 800c76a:	3002      	adds	r0, #2
 800c76c:	089b      	lsrs	r3, r3, #2
 800c76e:	07da      	lsls	r2, r3, #31
 800c770:	d4e9      	bmi.n	800c746 <__lo0bits+0x26>
 800c772:	3001      	adds	r0, #1
 800c774:	085b      	lsrs	r3, r3, #1
 800c776:	d1e6      	bne.n	800c746 <__lo0bits+0x26>
 800c778:	2020      	movs	r0, #32
 800c77a:	e7e2      	b.n	800c742 <__lo0bits+0x22>

0800c77c <__i2b>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	000c      	movs	r4, r1
 800c780:	2101      	movs	r1, #1
 800c782:	f7ff fef1 	bl	800c568 <_Balloc>
 800c786:	2800      	cmp	r0, #0
 800c788:	d107      	bne.n	800c79a <__i2b+0x1e>
 800c78a:	2146      	movs	r1, #70	; 0x46
 800c78c:	4c05      	ldr	r4, [pc, #20]	; (800c7a4 <__i2b+0x28>)
 800c78e:	0002      	movs	r2, r0
 800c790:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <__i2b+0x2c>)
 800c792:	0020      	movs	r0, r4
 800c794:	31ff      	adds	r1, #255	; 0xff
 800c796:	f003 f9ab 	bl	800faf0 <__assert_func>
 800c79a:	2301      	movs	r3, #1
 800c79c:	6144      	str	r4, [r0, #20]
 800c79e:	6103      	str	r3, [r0, #16]
 800c7a0:	bd10      	pop	{r4, pc}
 800c7a2:	46c0      	nop			; (mov r8, r8)
 800c7a4:	08014122 	.word	0x08014122
 800c7a8:	080140b1 	.word	0x080140b1

0800c7ac <__multiply>:
 800c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ae:	0015      	movs	r5, r2
 800c7b0:	690a      	ldr	r2, [r1, #16]
 800c7b2:	692b      	ldr	r3, [r5, #16]
 800c7b4:	000c      	movs	r4, r1
 800c7b6:	b08b      	sub	sp, #44	; 0x2c
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	da01      	bge.n	800c7c0 <__multiply+0x14>
 800c7bc:	002c      	movs	r4, r5
 800c7be:	000d      	movs	r5, r1
 800c7c0:	6927      	ldr	r7, [r4, #16]
 800c7c2:	692e      	ldr	r6, [r5, #16]
 800c7c4:	6861      	ldr	r1, [r4, #4]
 800c7c6:	19bb      	adds	r3, r7, r6
 800c7c8:	9303      	str	r3, [sp, #12]
 800c7ca:	68a3      	ldr	r3, [r4, #8]
 800c7cc:	19ba      	adds	r2, r7, r6
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	da00      	bge.n	800c7d4 <__multiply+0x28>
 800c7d2:	3101      	adds	r1, #1
 800c7d4:	f7ff fec8 	bl	800c568 <_Balloc>
 800c7d8:	9002      	str	r0, [sp, #8]
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d106      	bne.n	800c7ec <__multiply+0x40>
 800c7de:	21b1      	movs	r1, #177	; 0xb1
 800c7e0:	4b48      	ldr	r3, [pc, #288]	; (800c904 <__multiply+0x158>)
 800c7e2:	4849      	ldr	r0, [pc, #292]	; (800c908 <__multiply+0x15c>)
 800c7e4:	9a02      	ldr	r2, [sp, #8]
 800c7e6:	0049      	lsls	r1, r1, #1
 800c7e8:	f003 f982 	bl	800faf0 <__assert_func>
 800c7ec:	9b02      	ldr	r3, [sp, #8]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	3314      	adds	r3, #20
 800c7f2:	469c      	mov	ip, r3
 800c7f4:	19bb      	adds	r3, r7, r6
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4463      	add	r3, ip
 800c7fa:	9304      	str	r3, [sp, #16]
 800c7fc:	4663      	mov	r3, ip
 800c7fe:	9904      	ldr	r1, [sp, #16]
 800c800:	428b      	cmp	r3, r1
 800c802:	d32a      	bcc.n	800c85a <__multiply+0xae>
 800c804:	0023      	movs	r3, r4
 800c806:	00bf      	lsls	r7, r7, #2
 800c808:	3314      	adds	r3, #20
 800c80a:	3514      	adds	r5, #20
 800c80c:	9308      	str	r3, [sp, #32]
 800c80e:	00b6      	lsls	r6, r6, #2
 800c810:	19db      	adds	r3, r3, r7
 800c812:	9305      	str	r3, [sp, #20]
 800c814:	19ab      	adds	r3, r5, r6
 800c816:	9309      	str	r3, [sp, #36]	; 0x24
 800c818:	2304      	movs	r3, #4
 800c81a:	9306      	str	r3, [sp, #24]
 800c81c:	0023      	movs	r3, r4
 800c81e:	9a05      	ldr	r2, [sp, #20]
 800c820:	3315      	adds	r3, #21
 800c822:	9501      	str	r5, [sp, #4]
 800c824:	429a      	cmp	r2, r3
 800c826:	d305      	bcc.n	800c834 <__multiply+0x88>
 800c828:	1b13      	subs	r3, r2, r4
 800c82a:	3b15      	subs	r3, #21
 800c82c:	089b      	lsrs	r3, r3, #2
 800c82e:	3301      	adds	r3, #1
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	9306      	str	r3, [sp, #24]
 800c834:	9b01      	ldr	r3, [sp, #4]
 800c836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c838:	4293      	cmp	r3, r2
 800c83a:	d310      	bcc.n	800c85e <__multiply+0xb2>
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	dd05      	ble.n	800c84e <__multiply+0xa2>
 800c842:	9b04      	ldr	r3, [sp, #16]
 800c844:	3b04      	subs	r3, #4
 800c846:	9304      	str	r3, [sp, #16]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d056      	beq.n	800c8fc <__multiply+0x150>
 800c84e:	9b02      	ldr	r3, [sp, #8]
 800c850:	9a03      	ldr	r2, [sp, #12]
 800c852:	0018      	movs	r0, r3
 800c854:	611a      	str	r2, [r3, #16]
 800c856:	b00b      	add	sp, #44	; 0x2c
 800c858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c85a:	c304      	stmia	r3!, {r2}
 800c85c:	e7cf      	b.n	800c7fe <__multiply+0x52>
 800c85e:	9b01      	ldr	r3, [sp, #4]
 800c860:	6818      	ldr	r0, [r3, #0]
 800c862:	b280      	uxth	r0, r0
 800c864:	2800      	cmp	r0, #0
 800c866:	d01e      	beq.n	800c8a6 <__multiply+0xfa>
 800c868:	4667      	mov	r7, ip
 800c86a:	2500      	movs	r5, #0
 800c86c:	9e08      	ldr	r6, [sp, #32]
 800c86e:	ce02      	ldmia	r6!, {r1}
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	9307      	str	r3, [sp, #28]
 800c874:	b28b      	uxth	r3, r1
 800c876:	4343      	muls	r3, r0
 800c878:	001a      	movs	r2, r3
 800c87a:	466b      	mov	r3, sp
 800c87c:	8b9b      	ldrh	r3, [r3, #28]
 800c87e:	18d3      	adds	r3, r2, r3
 800c880:	195b      	adds	r3, r3, r5
 800c882:	0c0d      	lsrs	r5, r1, #16
 800c884:	4345      	muls	r5, r0
 800c886:	9a07      	ldr	r2, [sp, #28]
 800c888:	0c11      	lsrs	r1, r2, #16
 800c88a:	1869      	adds	r1, r5, r1
 800c88c:	0c1a      	lsrs	r2, r3, #16
 800c88e:	188a      	adds	r2, r1, r2
 800c890:	b29b      	uxth	r3, r3
 800c892:	0c15      	lsrs	r5, r2, #16
 800c894:	0412      	lsls	r2, r2, #16
 800c896:	431a      	orrs	r2, r3
 800c898:	9b05      	ldr	r3, [sp, #20]
 800c89a:	c704      	stmia	r7!, {r2}
 800c89c:	42b3      	cmp	r3, r6
 800c89e:	d8e6      	bhi.n	800c86e <__multiply+0xc2>
 800c8a0:	4663      	mov	r3, ip
 800c8a2:	9a06      	ldr	r2, [sp, #24]
 800c8a4:	509d      	str	r5, [r3, r2]
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	6818      	ldr	r0, [r3, #0]
 800c8aa:	0c00      	lsrs	r0, r0, #16
 800c8ac:	d020      	beq.n	800c8f0 <__multiply+0x144>
 800c8ae:	4663      	mov	r3, ip
 800c8b0:	0025      	movs	r5, r4
 800c8b2:	4661      	mov	r1, ip
 800c8b4:	2700      	movs	r7, #0
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3514      	adds	r5, #20
 800c8ba:	682a      	ldr	r2, [r5, #0]
 800c8bc:	680e      	ldr	r6, [r1, #0]
 800c8be:	b292      	uxth	r2, r2
 800c8c0:	4342      	muls	r2, r0
 800c8c2:	0c36      	lsrs	r6, r6, #16
 800c8c4:	1992      	adds	r2, r2, r6
 800c8c6:	19d2      	adds	r2, r2, r7
 800c8c8:	0416      	lsls	r6, r2, #16
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	431e      	orrs	r6, r3
 800c8ce:	600e      	str	r6, [r1, #0]
 800c8d0:	cd40      	ldmia	r5!, {r6}
 800c8d2:	684b      	ldr	r3, [r1, #4]
 800c8d4:	0c36      	lsrs	r6, r6, #16
 800c8d6:	4346      	muls	r6, r0
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	0c12      	lsrs	r2, r2, #16
 800c8dc:	18f3      	adds	r3, r6, r3
 800c8de:	189b      	adds	r3, r3, r2
 800c8e0:	9a05      	ldr	r2, [sp, #20]
 800c8e2:	0c1f      	lsrs	r7, r3, #16
 800c8e4:	3104      	adds	r1, #4
 800c8e6:	42aa      	cmp	r2, r5
 800c8e8:	d8e7      	bhi.n	800c8ba <__multiply+0x10e>
 800c8ea:	4662      	mov	r2, ip
 800c8ec:	9906      	ldr	r1, [sp, #24]
 800c8ee:	5053      	str	r3, [r2, r1]
 800c8f0:	9b01      	ldr	r3, [sp, #4]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	2304      	movs	r3, #4
 800c8f8:	449c      	add	ip, r3
 800c8fa:	e79b      	b.n	800c834 <__multiply+0x88>
 800c8fc:	9b03      	ldr	r3, [sp, #12]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	9303      	str	r3, [sp, #12]
 800c902:	e79b      	b.n	800c83c <__multiply+0x90>
 800c904:	080140b1 	.word	0x080140b1
 800c908:	08014122 	.word	0x08014122

0800c90c <__pow5mult>:
 800c90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c90e:	2303      	movs	r3, #3
 800c910:	0015      	movs	r5, r2
 800c912:	0007      	movs	r7, r0
 800c914:	000e      	movs	r6, r1
 800c916:	401a      	ands	r2, r3
 800c918:	421d      	tst	r5, r3
 800c91a:	d008      	beq.n	800c92e <__pow5mult+0x22>
 800c91c:	491a      	ldr	r1, [pc, #104]	; (800c988 <__pow5mult+0x7c>)
 800c91e:	3a01      	subs	r2, #1
 800c920:	0092      	lsls	r2, r2, #2
 800c922:	5852      	ldr	r2, [r2, r1]
 800c924:	2300      	movs	r3, #0
 800c926:	0031      	movs	r1, r6
 800c928:	f7ff fe50 	bl	800c5cc <__multadd>
 800c92c:	0006      	movs	r6, r0
 800c92e:	10ad      	asrs	r5, r5, #2
 800c930:	d027      	beq.n	800c982 <__pow5mult+0x76>
 800c932:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c934:	2c00      	cmp	r4, #0
 800c936:	d107      	bne.n	800c948 <__pow5mult+0x3c>
 800c938:	0038      	movs	r0, r7
 800c93a:	4914      	ldr	r1, [pc, #80]	; (800c98c <__pow5mult+0x80>)
 800c93c:	f7ff ff1e 	bl	800c77c <__i2b>
 800c940:	2300      	movs	r3, #0
 800c942:	0004      	movs	r4, r0
 800c944:	6438      	str	r0, [r7, #64]	; 0x40
 800c946:	6003      	str	r3, [r0, #0]
 800c948:	2301      	movs	r3, #1
 800c94a:	421d      	tst	r5, r3
 800c94c:	d00a      	beq.n	800c964 <__pow5mult+0x58>
 800c94e:	0031      	movs	r1, r6
 800c950:	0022      	movs	r2, r4
 800c952:	0038      	movs	r0, r7
 800c954:	f7ff ff2a 	bl	800c7ac <__multiply>
 800c958:	0031      	movs	r1, r6
 800c95a:	9001      	str	r0, [sp, #4]
 800c95c:	0038      	movs	r0, r7
 800c95e:	f7ff fe2b 	bl	800c5b8 <_Bfree>
 800c962:	9e01      	ldr	r6, [sp, #4]
 800c964:	106d      	asrs	r5, r5, #1
 800c966:	d00c      	beq.n	800c982 <__pow5mult+0x76>
 800c968:	6820      	ldr	r0, [r4, #0]
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d107      	bne.n	800c97e <__pow5mult+0x72>
 800c96e:	0022      	movs	r2, r4
 800c970:	0021      	movs	r1, r4
 800c972:	0038      	movs	r0, r7
 800c974:	f7ff ff1a 	bl	800c7ac <__multiply>
 800c978:	2300      	movs	r3, #0
 800c97a:	6020      	str	r0, [r4, #0]
 800c97c:	6003      	str	r3, [r0, #0]
 800c97e:	0004      	movs	r4, r0
 800c980:	e7e2      	b.n	800c948 <__pow5mult+0x3c>
 800c982:	0030      	movs	r0, r6
 800c984:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c986:	46c0      	nop			; (mov r8, r8)
 800c988:	08014270 	.word	0x08014270
 800c98c:	00000271 	.word	0x00000271

0800c990 <__lshift>:
 800c990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c992:	000c      	movs	r4, r1
 800c994:	0017      	movs	r7, r2
 800c996:	6923      	ldr	r3, [r4, #16]
 800c998:	1155      	asrs	r5, r2, #5
 800c99a:	b087      	sub	sp, #28
 800c99c:	18eb      	adds	r3, r5, r3
 800c99e:	9302      	str	r3, [sp, #8]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	6849      	ldr	r1, [r1, #4]
 800c9a6:	68a3      	ldr	r3, [r4, #8]
 800c9a8:	9004      	str	r0, [sp, #16]
 800c9aa:	9a01      	ldr	r2, [sp, #4]
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	db10      	blt.n	800c9d2 <__lshift+0x42>
 800c9b0:	9804      	ldr	r0, [sp, #16]
 800c9b2:	f7ff fdd9 	bl	800c568 <_Balloc>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	0002      	movs	r2, r0
 800c9ba:	0006      	movs	r6, r0
 800c9bc:	0019      	movs	r1, r3
 800c9be:	3214      	adds	r2, #20
 800c9c0:	4298      	cmp	r0, r3
 800c9c2:	d10c      	bne.n	800c9de <__lshift+0x4e>
 800c9c4:	31df      	adds	r1, #223	; 0xdf
 800c9c6:	0032      	movs	r2, r6
 800c9c8:	4b26      	ldr	r3, [pc, #152]	; (800ca64 <__lshift+0xd4>)
 800c9ca:	4827      	ldr	r0, [pc, #156]	; (800ca68 <__lshift+0xd8>)
 800c9cc:	31ff      	adds	r1, #255	; 0xff
 800c9ce:	f003 f88f 	bl	800faf0 <__assert_func>
 800c9d2:	3101      	adds	r1, #1
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	e7e8      	b.n	800c9aa <__lshift+0x1a>
 800c9d8:	0098      	lsls	r0, r3, #2
 800c9da:	5011      	str	r1, [r2, r0]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	42ab      	cmp	r3, r5
 800c9e0:	dbfa      	blt.n	800c9d8 <__lshift+0x48>
 800c9e2:	43eb      	mvns	r3, r5
 800c9e4:	17db      	asrs	r3, r3, #31
 800c9e6:	401d      	ands	r5, r3
 800c9e8:	211f      	movs	r1, #31
 800c9ea:	0023      	movs	r3, r4
 800c9ec:	0038      	movs	r0, r7
 800c9ee:	00ad      	lsls	r5, r5, #2
 800c9f0:	1955      	adds	r5, r2, r5
 800c9f2:	6922      	ldr	r2, [r4, #16]
 800c9f4:	3314      	adds	r3, #20
 800c9f6:	0092      	lsls	r2, r2, #2
 800c9f8:	4008      	ands	r0, r1
 800c9fa:	4684      	mov	ip, r0
 800c9fc:	189a      	adds	r2, r3, r2
 800c9fe:	420f      	tst	r7, r1
 800ca00:	d02a      	beq.n	800ca58 <__lshift+0xc8>
 800ca02:	3101      	adds	r1, #1
 800ca04:	1a09      	subs	r1, r1, r0
 800ca06:	9105      	str	r1, [sp, #20]
 800ca08:	2100      	movs	r1, #0
 800ca0a:	9503      	str	r5, [sp, #12]
 800ca0c:	4667      	mov	r7, ip
 800ca0e:	6818      	ldr	r0, [r3, #0]
 800ca10:	40b8      	lsls	r0, r7
 800ca12:	4308      	orrs	r0, r1
 800ca14:	9903      	ldr	r1, [sp, #12]
 800ca16:	c101      	stmia	r1!, {r0}
 800ca18:	9103      	str	r1, [sp, #12]
 800ca1a:	9805      	ldr	r0, [sp, #20]
 800ca1c:	cb02      	ldmia	r3!, {r1}
 800ca1e:	40c1      	lsrs	r1, r0
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d8f3      	bhi.n	800ca0c <__lshift+0x7c>
 800ca24:	0020      	movs	r0, r4
 800ca26:	3015      	adds	r0, #21
 800ca28:	2304      	movs	r3, #4
 800ca2a:	4282      	cmp	r2, r0
 800ca2c:	d304      	bcc.n	800ca38 <__lshift+0xa8>
 800ca2e:	1b13      	subs	r3, r2, r4
 800ca30:	3b15      	subs	r3, #21
 800ca32:	089b      	lsrs	r3, r3, #2
 800ca34:	3301      	adds	r3, #1
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	50e9      	str	r1, [r5, r3]
 800ca3a:	2900      	cmp	r1, #0
 800ca3c:	d002      	beq.n	800ca44 <__lshift+0xb4>
 800ca3e:	9b02      	ldr	r3, [sp, #8]
 800ca40:	3302      	adds	r3, #2
 800ca42:	9301      	str	r3, [sp, #4]
 800ca44:	9b01      	ldr	r3, [sp, #4]
 800ca46:	9804      	ldr	r0, [sp, #16]
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	0021      	movs	r1, r4
 800ca4c:	6133      	str	r3, [r6, #16]
 800ca4e:	f7ff fdb3 	bl	800c5b8 <_Bfree>
 800ca52:	0030      	movs	r0, r6
 800ca54:	b007      	add	sp, #28
 800ca56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca58:	cb02      	ldmia	r3!, {r1}
 800ca5a:	c502      	stmia	r5!, {r1}
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d8fb      	bhi.n	800ca58 <__lshift+0xc8>
 800ca60:	e7f0      	b.n	800ca44 <__lshift+0xb4>
 800ca62:	46c0      	nop			; (mov r8, r8)
 800ca64:	080140b1 	.word	0x080140b1
 800ca68:	08014122 	.word	0x08014122

0800ca6c <__mcmp>:
 800ca6c:	b530      	push	{r4, r5, lr}
 800ca6e:	690b      	ldr	r3, [r1, #16]
 800ca70:	6904      	ldr	r4, [r0, #16]
 800ca72:	0002      	movs	r2, r0
 800ca74:	1ae0      	subs	r0, r4, r3
 800ca76:	429c      	cmp	r4, r3
 800ca78:	d10e      	bne.n	800ca98 <__mcmp+0x2c>
 800ca7a:	3214      	adds	r2, #20
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	3114      	adds	r1, #20
 800ca80:	0014      	movs	r4, r2
 800ca82:	18c9      	adds	r1, r1, r3
 800ca84:	18d2      	adds	r2, r2, r3
 800ca86:	3a04      	subs	r2, #4
 800ca88:	3904      	subs	r1, #4
 800ca8a:	6815      	ldr	r5, [r2, #0]
 800ca8c:	680b      	ldr	r3, [r1, #0]
 800ca8e:	429d      	cmp	r5, r3
 800ca90:	d003      	beq.n	800ca9a <__mcmp+0x2e>
 800ca92:	2001      	movs	r0, #1
 800ca94:	429d      	cmp	r5, r3
 800ca96:	d303      	bcc.n	800caa0 <__mcmp+0x34>
 800ca98:	bd30      	pop	{r4, r5, pc}
 800ca9a:	4294      	cmp	r4, r2
 800ca9c:	d3f3      	bcc.n	800ca86 <__mcmp+0x1a>
 800ca9e:	e7fb      	b.n	800ca98 <__mcmp+0x2c>
 800caa0:	4240      	negs	r0, r0
 800caa2:	e7f9      	b.n	800ca98 <__mcmp+0x2c>

0800caa4 <__mdiff>:
 800caa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caa6:	000e      	movs	r6, r1
 800caa8:	0007      	movs	r7, r0
 800caaa:	0011      	movs	r1, r2
 800caac:	0030      	movs	r0, r6
 800caae:	b087      	sub	sp, #28
 800cab0:	0014      	movs	r4, r2
 800cab2:	f7ff ffdb 	bl	800ca6c <__mcmp>
 800cab6:	1e05      	subs	r5, r0, #0
 800cab8:	d110      	bne.n	800cadc <__mdiff+0x38>
 800caba:	0001      	movs	r1, r0
 800cabc:	0038      	movs	r0, r7
 800cabe:	f7ff fd53 	bl	800c568 <_Balloc>
 800cac2:	1e02      	subs	r2, r0, #0
 800cac4:	d104      	bne.n	800cad0 <__mdiff+0x2c>
 800cac6:	4b3f      	ldr	r3, [pc, #252]	; (800cbc4 <__mdiff+0x120>)
 800cac8:	483f      	ldr	r0, [pc, #252]	; (800cbc8 <__mdiff+0x124>)
 800caca:	4940      	ldr	r1, [pc, #256]	; (800cbcc <__mdiff+0x128>)
 800cacc:	f003 f810 	bl	800faf0 <__assert_func>
 800cad0:	2301      	movs	r3, #1
 800cad2:	6145      	str	r5, [r0, #20]
 800cad4:	6103      	str	r3, [r0, #16]
 800cad6:	0010      	movs	r0, r2
 800cad8:	b007      	add	sp, #28
 800cada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cadc:	2301      	movs	r3, #1
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	2800      	cmp	r0, #0
 800cae2:	db04      	blt.n	800caee <__mdiff+0x4a>
 800cae4:	0023      	movs	r3, r4
 800cae6:	0034      	movs	r4, r6
 800cae8:	001e      	movs	r6, r3
 800caea:	2300      	movs	r3, #0
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	0038      	movs	r0, r7
 800caf0:	6861      	ldr	r1, [r4, #4]
 800caf2:	f7ff fd39 	bl	800c568 <_Balloc>
 800caf6:	1e02      	subs	r2, r0, #0
 800caf8:	d103      	bne.n	800cb02 <__mdiff+0x5e>
 800cafa:	4b32      	ldr	r3, [pc, #200]	; (800cbc4 <__mdiff+0x120>)
 800cafc:	4832      	ldr	r0, [pc, #200]	; (800cbc8 <__mdiff+0x124>)
 800cafe:	4934      	ldr	r1, [pc, #208]	; (800cbd0 <__mdiff+0x12c>)
 800cb00:	e7e4      	b.n	800cacc <__mdiff+0x28>
 800cb02:	9b01      	ldr	r3, [sp, #4]
 800cb04:	2700      	movs	r7, #0
 800cb06:	60c3      	str	r3, [r0, #12]
 800cb08:	6920      	ldr	r0, [r4, #16]
 800cb0a:	3414      	adds	r4, #20
 800cb0c:	0083      	lsls	r3, r0, #2
 800cb0e:	18e3      	adds	r3, r4, r3
 800cb10:	0021      	movs	r1, r4
 800cb12:	9401      	str	r4, [sp, #4]
 800cb14:	0034      	movs	r4, r6
 800cb16:	9302      	str	r3, [sp, #8]
 800cb18:	6933      	ldr	r3, [r6, #16]
 800cb1a:	3414      	adds	r4, #20
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	18e3      	adds	r3, r4, r3
 800cb20:	9303      	str	r3, [sp, #12]
 800cb22:	0013      	movs	r3, r2
 800cb24:	3314      	adds	r3, #20
 800cb26:	469c      	mov	ip, r3
 800cb28:	9305      	str	r3, [sp, #20]
 800cb2a:	9104      	str	r1, [sp, #16]
 800cb2c:	9b04      	ldr	r3, [sp, #16]
 800cb2e:	cc02      	ldmia	r4!, {r1}
 800cb30:	cb20      	ldmia	r3!, {r5}
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	b2ab      	uxth	r3, r5
 800cb36:	19df      	adds	r7, r3, r7
 800cb38:	b28b      	uxth	r3, r1
 800cb3a:	1afb      	subs	r3, r7, r3
 800cb3c:	0c09      	lsrs	r1, r1, #16
 800cb3e:	0c2d      	lsrs	r5, r5, #16
 800cb40:	1a6d      	subs	r5, r5, r1
 800cb42:	1419      	asrs	r1, r3, #16
 800cb44:	1869      	adds	r1, r5, r1
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	140f      	asrs	r7, r1, #16
 800cb4a:	0409      	lsls	r1, r1, #16
 800cb4c:	4319      	orrs	r1, r3
 800cb4e:	4663      	mov	r3, ip
 800cb50:	c302      	stmia	r3!, {r1}
 800cb52:	469c      	mov	ip, r3
 800cb54:	9b03      	ldr	r3, [sp, #12]
 800cb56:	42a3      	cmp	r3, r4
 800cb58:	d8e8      	bhi.n	800cb2c <__mdiff+0x88>
 800cb5a:	0031      	movs	r1, r6
 800cb5c:	9c03      	ldr	r4, [sp, #12]
 800cb5e:	3115      	adds	r1, #21
 800cb60:	2304      	movs	r3, #4
 800cb62:	428c      	cmp	r4, r1
 800cb64:	d304      	bcc.n	800cb70 <__mdiff+0xcc>
 800cb66:	1ba3      	subs	r3, r4, r6
 800cb68:	3b15      	subs	r3, #21
 800cb6a:	089b      	lsrs	r3, r3, #2
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	9901      	ldr	r1, [sp, #4]
 800cb72:	18cd      	adds	r5, r1, r3
 800cb74:	9905      	ldr	r1, [sp, #20]
 800cb76:	002e      	movs	r6, r5
 800cb78:	18cb      	adds	r3, r1, r3
 800cb7a:	469c      	mov	ip, r3
 800cb7c:	9902      	ldr	r1, [sp, #8]
 800cb7e:	428e      	cmp	r6, r1
 800cb80:	d310      	bcc.n	800cba4 <__mdiff+0x100>
 800cb82:	9e02      	ldr	r6, [sp, #8]
 800cb84:	1ee9      	subs	r1, r5, #3
 800cb86:	2400      	movs	r4, #0
 800cb88:	428e      	cmp	r6, r1
 800cb8a:	d304      	bcc.n	800cb96 <__mdiff+0xf2>
 800cb8c:	0031      	movs	r1, r6
 800cb8e:	3103      	adds	r1, #3
 800cb90:	1b49      	subs	r1, r1, r5
 800cb92:	0889      	lsrs	r1, r1, #2
 800cb94:	008c      	lsls	r4, r1, #2
 800cb96:	191b      	adds	r3, r3, r4
 800cb98:	3b04      	subs	r3, #4
 800cb9a:	6819      	ldr	r1, [r3, #0]
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	d00f      	beq.n	800cbc0 <__mdiff+0x11c>
 800cba0:	6110      	str	r0, [r2, #16]
 800cba2:	e798      	b.n	800cad6 <__mdiff+0x32>
 800cba4:	ce02      	ldmia	r6!, {r1}
 800cba6:	b28c      	uxth	r4, r1
 800cba8:	19e4      	adds	r4, r4, r7
 800cbaa:	0c0f      	lsrs	r7, r1, #16
 800cbac:	1421      	asrs	r1, r4, #16
 800cbae:	1879      	adds	r1, r7, r1
 800cbb0:	b2a4      	uxth	r4, r4
 800cbb2:	140f      	asrs	r7, r1, #16
 800cbb4:	0409      	lsls	r1, r1, #16
 800cbb6:	4321      	orrs	r1, r4
 800cbb8:	4664      	mov	r4, ip
 800cbba:	c402      	stmia	r4!, {r1}
 800cbbc:	46a4      	mov	ip, r4
 800cbbe:	e7dd      	b.n	800cb7c <__mdiff+0xd8>
 800cbc0:	3801      	subs	r0, #1
 800cbc2:	e7e9      	b.n	800cb98 <__mdiff+0xf4>
 800cbc4:	080140b1 	.word	0x080140b1
 800cbc8:	08014122 	.word	0x08014122
 800cbcc:	00000237 	.word	0x00000237
 800cbd0:	00000245 	.word	0x00000245

0800cbd4 <__ulp>:
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <__ulp+0x30>)
 800cbd8:	4019      	ands	r1, r3
 800cbda:	4b0b      	ldr	r3, [pc, #44]	; (800cc08 <__ulp+0x34>)
 800cbdc:	18c9      	adds	r1, r1, r3
 800cbde:	4281      	cmp	r1, r0
 800cbe0:	dc06      	bgt.n	800cbf0 <__ulp+0x1c>
 800cbe2:	4249      	negs	r1, r1
 800cbe4:	150b      	asrs	r3, r1, #20
 800cbe6:	2b13      	cmp	r3, #19
 800cbe8:	dc03      	bgt.n	800cbf2 <__ulp+0x1e>
 800cbea:	2180      	movs	r1, #128	; 0x80
 800cbec:	0309      	lsls	r1, r1, #12
 800cbee:	4119      	asrs	r1, r3
 800cbf0:	4770      	bx	lr
 800cbf2:	3b14      	subs	r3, #20
 800cbf4:	2001      	movs	r0, #1
 800cbf6:	2b1e      	cmp	r3, #30
 800cbf8:	dc02      	bgt.n	800cc00 <__ulp+0x2c>
 800cbfa:	2080      	movs	r0, #128	; 0x80
 800cbfc:	0600      	lsls	r0, r0, #24
 800cbfe:	40d8      	lsrs	r0, r3
 800cc00:	2100      	movs	r1, #0
 800cc02:	e7f5      	b.n	800cbf0 <__ulp+0x1c>
 800cc04:	7ff00000 	.word	0x7ff00000
 800cc08:	fcc00000 	.word	0xfcc00000

0800cc0c <__b2d>:
 800cc0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc0e:	0006      	movs	r6, r0
 800cc10:	6903      	ldr	r3, [r0, #16]
 800cc12:	3614      	adds	r6, #20
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	18f3      	adds	r3, r6, r3
 800cc18:	1f1d      	subs	r5, r3, #4
 800cc1a:	682c      	ldr	r4, [r5, #0]
 800cc1c:	000f      	movs	r7, r1
 800cc1e:	0020      	movs	r0, r4
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	f7ff fd63 	bl	800c6ec <__hi0bits>
 800cc26:	2220      	movs	r2, #32
 800cc28:	1a12      	subs	r2, r2, r0
 800cc2a:	603a      	str	r2, [r7, #0]
 800cc2c:	0003      	movs	r3, r0
 800cc2e:	4a1c      	ldr	r2, [pc, #112]	; (800cca0 <__b2d+0x94>)
 800cc30:	280a      	cmp	r0, #10
 800cc32:	dc15      	bgt.n	800cc60 <__b2d+0x54>
 800cc34:	210b      	movs	r1, #11
 800cc36:	0027      	movs	r7, r4
 800cc38:	1a09      	subs	r1, r1, r0
 800cc3a:	40cf      	lsrs	r7, r1
 800cc3c:	433a      	orrs	r2, r7
 800cc3e:	468c      	mov	ip, r1
 800cc40:	0011      	movs	r1, r2
 800cc42:	2200      	movs	r2, #0
 800cc44:	42ae      	cmp	r6, r5
 800cc46:	d202      	bcs.n	800cc4e <__b2d+0x42>
 800cc48:	9a01      	ldr	r2, [sp, #4]
 800cc4a:	3a08      	subs	r2, #8
 800cc4c:	6812      	ldr	r2, [r2, #0]
 800cc4e:	3315      	adds	r3, #21
 800cc50:	409c      	lsls	r4, r3
 800cc52:	4663      	mov	r3, ip
 800cc54:	0027      	movs	r7, r4
 800cc56:	40da      	lsrs	r2, r3
 800cc58:	4317      	orrs	r7, r2
 800cc5a:	0038      	movs	r0, r7
 800cc5c:	b003      	add	sp, #12
 800cc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc60:	2700      	movs	r7, #0
 800cc62:	42ae      	cmp	r6, r5
 800cc64:	d202      	bcs.n	800cc6c <__b2d+0x60>
 800cc66:	9d01      	ldr	r5, [sp, #4]
 800cc68:	3d08      	subs	r5, #8
 800cc6a:	682f      	ldr	r7, [r5, #0]
 800cc6c:	210b      	movs	r1, #11
 800cc6e:	4249      	negs	r1, r1
 800cc70:	468c      	mov	ip, r1
 800cc72:	449c      	add	ip, r3
 800cc74:	2b0b      	cmp	r3, #11
 800cc76:	d010      	beq.n	800cc9a <__b2d+0x8e>
 800cc78:	4661      	mov	r1, ip
 800cc7a:	2320      	movs	r3, #32
 800cc7c:	408c      	lsls	r4, r1
 800cc7e:	1a5b      	subs	r3, r3, r1
 800cc80:	0039      	movs	r1, r7
 800cc82:	40d9      	lsrs	r1, r3
 800cc84:	430c      	orrs	r4, r1
 800cc86:	4322      	orrs	r2, r4
 800cc88:	0011      	movs	r1, r2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	42b5      	cmp	r5, r6
 800cc8e:	d901      	bls.n	800cc94 <__b2d+0x88>
 800cc90:	3d04      	subs	r5, #4
 800cc92:	682a      	ldr	r2, [r5, #0]
 800cc94:	4664      	mov	r4, ip
 800cc96:	40a7      	lsls	r7, r4
 800cc98:	e7dd      	b.n	800cc56 <__b2d+0x4a>
 800cc9a:	4322      	orrs	r2, r4
 800cc9c:	0011      	movs	r1, r2
 800cc9e:	e7dc      	b.n	800cc5a <__b2d+0x4e>
 800cca0:	3ff00000 	.word	0x3ff00000

0800cca4 <__d2b>:
 800cca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cca6:	2101      	movs	r1, #1
 800cca8:	0014      	movs	r4, r2
 800ccaa:	001d      	movs	r5, r3
 800ccac:	9f08      	ldr	r7, [sp, #32]
 800ccae:	f7ff fc5b 	bl	800c568 <_Balloc>
 800ccb2:	1e06      	subs	r6, r0, #0
 800ccb4:	d105      	bne.n	800ccc2 <__d2b+0x1e>
 800ccb6:	0032      	movs	r2, r6
 800ccb8:	4b24      	ldr	r3, [pc, #144]	; (800cd4c <__d2b+0xa8>)
 800ccba:	4825      	ldr	r0, [pc, #148]	; (800cd50 <__d2b+0xac>)
 800ccbc:	4925      	ldr	r1, [pc, #148]	; (800cd54 <__d2b+0xb0>)
 800ccbe:	f002 ff17 	bl	800faf0 <__assert_func>
 800ccc2:	032b      	lsls	r3, r5, #12
 800ccc4:	006d      	lsls	r5, r5, #1
 800ccc6:	0b1b      	lsrs	r3, r3, #12
 800ccc8:	0d6d      	lsrs	r5, r5, #21
 800ccca:	d125      	bne.n	800cd18 <__d2b+0x74>
 800cccc:	9301      	str	r3, [sp, #4]
 800ccce:	2c00      	cmp	r4, #0
 800ccd0:	d028      	beq.n	800cd24 <__d2b+0x80>
 800ccd2:	4668      	mov	r0, sp
 800ccd4:	9400      	str	r4, [sp, #0]
 800ccd6:	f7ff fd23 	bl	800c720 <__lo0bits>
 800ccda:	9b01      	ldr	r3, [sp, #4]
 800ccdc:	9900      	ldr	r1, [sp, #0]
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d01e      	beq.n	800cd20 <__d2b+0x7c>
 800cce2:	2220      	movs	r2, #32
 800cce4:	001c      	movs	r4, r3
 800cce6:	1a12      	subs	r2, r2, r0
 800cce8:	4094      	lsls	r4, r2
 800ccea:	0022      	movs	r2, r4
 800ccec:	40c3      	lsrs	r3, r0
 800ccee:	430a      	orrs	r2, r1
 800ccf0:	6172      	str	r2, [r6, #20]
 800ccf2:	9301      	str	r3, [sp, #4]
 800ccf4:	9c01      	ldr	r4, [sp, #4]
 800ccf6:	61b4      	str	r4, [r6, #24]
 800ccf8:	1e63      	subs	r3, r4, #1
 800ccfa:	419c      	sbcs	r4, r3
 800ccfc:	3401      	adds	r4, #1
 800ccfe:	6134      	str	r4, [r6, #16]
 800cd00:	2d00      	cmp	r5, #0
 800cd02:	d017      	beq.n	800cd34 <__d2b+0x90>
 800cd04:	2435      	movs	r4, #53	; 0x35
 800cd06:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <__d2b+0xb4>)
 800cd08:	18ed      	adds	r5, r5, r3
 800cd0a:	182d      	adds	r5, r5, r0
 800cd0c:	603d      	str	r5, [r7, #0]
 800cd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd10:	1a24      	subs	r4, r4, r0
 800cd12:	601c      	str	r4, [r3, #0]
 800cd14:	0030      	movs	r0, r6
 800cd16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd18:	2280      	movs	r2, #128	; 0x80
 800cd1a:	0352      	lsls	r2, r2, #13
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	e7d5      	b.n	800cccc <__d2b+0x28>
 800cd20:	6171      	str	r1, [r6, #20]
 800cd22:	e7e7      	b.n	800ccf4 <__d2b+0x50>
 800cd24:	a801      	add	r0, sp, #4
 800cd26:	f7ff fcfb 	bl	800c720 <__lo0bits>
 800cd2a:	9b01      	ldr	r3, [sp, #4]
 800cd2c:	2401      	movs	r4, #1
 800cd2e:	6173      	str	r3, [r6, #20]
 800cd30:	3020      	adds	r0, #32
 800cd32:	e7e4      	b.n	800ccfe <__d2b+0x5a>
 800cd34:	4b09      	ldr	r3, [pc, #36]	; (800cd5c <__d2b+0xb8>)
 800cd36:	18c0      	adds	r0, r0, r3
 800cd38:	4b09      	ldr	r3, [pc, #36]	; (800cd60 <__d2b+0xbc>)
 800cd3a:	6038      	str	r0, [r7, #0]
 800cd3c:	18e3      	adds	r3, r4, r3
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	18f3      	adds	r3, r6, r3
 800cd42:	6958      	ldr	r0, [r3, #20]
 800cd44:	f7ff fcd2 	bl	800c6ec <__hi0bits>
 800cd48:	0164      	lsls	r4, r4, #5
 800cd4a:	e7e0      	b.n	800cd0e <__d2b+0x6a>
 800cd4c:	080140b1 	.word	0x080140b1
 800cd50:	08014122 	.word	0x08014122
 800cd54:	0000030f 	.word	0x0000030f
 800cd58:	fffffbcd 	.word	0xfffffbcd
 800cd5c:	fffffbce 	.word	0xfffffbce
 800cd60:	3fffffff 	.word	0x3fffffff

0800cd64 <__ratio>:
 800cd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd66:	b087      	sub	sp, #28
 800cd68:	000f      	movs	r7, r1
 800cd6a:	a904      	add	r1, sp, #16
 800cd6c:	0006      	movs	r6, r0
 800cd6e:	f7ff ff4d 	bl	800cc0c <__b2d>
 800cd72:	9000      	str	r0, [sp, #0]
 800cd74:	9101      	str	r1, [sp, #4]
 800cd76:	9c00      	ldr	r4, [sp, #0]
 800cd78:	9d01      	ldr	r5, [sp, #4]
 800cd7a:	0038      	movs	r0, r7
 800cd7c:	a905      	add	r1, sp, #20
 800cd7e:	f7ff ff45 	bl	800cc0c <__b2d>
 800cd82:	9002      	str	r0, [sp, #8]
 800cd84:	9103      	str	r1, [sp, #12]
 800cd86:	9a02      	ldr	r2, [sp, #8]
 800cd88:	9b03      	ldr	r3, [sp, #12]
 800cd8a:	6930      	ldr	r0, [r6, #16]
 800cd8c:	6939      	ldr	r1, [r7, #16]
 800cd8e:	9e04      	ldr	r6, [sp, #16]
 800cd90:	1a40      	subs	r0, r0, r1
 800cd92:	9905      	ldr	r1, [sp, #20]
 800cd94:	0140      	lsls	r0, r0, #5
 800cd96:	1a71      	subs	r1, r6, r1
 800cd98:	1841      	adds	r1, r0, r1
 800cd9a:	0508      	lsls	r0, r1, #20
 800cd9c:	2900      	cmp	r1, #0
 800cd9e:	dd07      	ble.n	800cdb0 <__ratio+0x4c>
 800cda0:	9901      	ldr	r1, [sp, #4]
 800cda2:	1845      	adds	r5, r0, r1
 800cda4:	0020      	movs	r0, r4
 800cda6:	0029      	movs	r1, r5
 800cda8:	f7f4 f866 	bl	8000e78 <__aeabi_ddiv>
 800cdac:	b007      	add	sp, #28
 800cdae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdb0:	9903      	ldr	r1, [sp, #12]
 800cdb2:	1a0b      	subs	r3, r1, r0
 800cdb4:	e7f6      	b.n	800cda4 <__ratio+0x40>

0800cdb6 <__copybits>:
 800cdb6:	b570      	push	{r4, r5, r6, lr}
 800cdb8:	0014      	movs	r4, r2
 800cdba:	0005      	movs	r5, r0
 800cdbc:	3901      	subs	r1, #1
 800cdbe:	6913      	ldr	r3, [r2, #16]
 800cdc0:	1149      	asrs	r1, r1, #5
 800cdc2:	3101      	adds	r1, #1
 800cdc4:	0089      	lsls	r1, r1, #2
 800cdc6:	3414      	adds	r4, #20
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	1841      	adds	r1, r0, r1
 800cdcc:	18e3      	adds	r3, r4, r3
 800cdce:	42a3      	cmp	r3, r4
 800cdd0:	d80d      	bhi.n	800cdee <__copybits+0x38>
 800cdd2:	0014      	movs	r4, r2
 800cdd4:	3411      	adds	r4, #17
 800cdd6:	2500      	movs	r5, #0
 800cdd8:	429c      	cmp	r4, r3
 800cdda:	d803      	bhi.n	800cde4 <__copybits+0x2e>
 800cddc:	1a9b      	subs	r3, r3, r2
 800cdde:	3b11      	subs	r3, #17
 800cde0:	089b      	lsrs	r3, r3, #2
 800cde2:	009d      	lsls	r5, r3, #2
 800cde4:	2300      	movs	r3, #0
 800cde6:	1940      	adds	r0, r0, r5
 800cde8:	4281      	cmp	r1, r0
 800cdea:	d803      	bhi.n	800cdf4 <__copybits+0x3e>
 800cdec:	bd70      	pop	{r4, r5, r6, pc}
 800cdee:	cc40      	ldmia	r4!, {r6}
 800cdf0:	c540      	stmia	r5!, {r6}
 800cdf2:	e7ec      	b.n	800cdce <__copybits+0x18>
 800cdf4:	c008      	stmia	r0!, {r3}
 800cdf6:	e7f7      	b.n	800cde8 <__copybits+0x32>

0800cdf8 <__any_on>:
 800cdf8:	0002      	movs	r2, r0
 800cdfa:	6900      	ldr	r0, [r0, #16]
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	3214      	adds	r2, #20
 800ce00:	114b      	asrs	r3, r1, #5
 800ce02:	4298      	cmp	r0, r3
 800ce04:	db13      	blt.n	800ce2e <__any_on+0x36>
 800ce06:	dd0c      	ble.n	800ce22 <__any_on+0x2a>
 800ce08:	241f      	movs	r4, #31
 800ce0a:	0008      	movs	r0, r1
 800ce0c:	4020      	ands	r0, r4
 800ce0e:	4221      	tst	r1, r4
 800ce10:	d007      	beq.n	800ce22 <__any_on+0x2a>
 800ce12:	0099      	lsls	r1, r3, #2
 800ce14:	588c      	ldr	r4, [r1, r2]
 800ce16:	0021      	movs	r1, r4
 800ce18:	40c1      	lsrs	r1, r0
 800ce1a:	4081      	lsls	r1, r0
 800ce1c:	2001      	movs	r0, #1
 800ce1e:	428c      	cmp	r4, r1
 800ce20:	d104      	bne.n	800ce2c <__any_on+0x34>
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	18d3      	adds	r3, r2, r3
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d803      	bhi.n	800ce32 <__any_on+0x3a>
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	bd10      	pop	{r4, pc}
 800ce2e:	0003      	movs	r3, r0
 800ce30:	e7f7      	b.n	800ce22 <__any_on+0x2a>
 800ce32:	3b04      	subs	r3, #4
 800ce34:	6819      	ldr	r1, [r3, #0]
 800ce36:	2900      	cmp	r1, #0
 800ce38:	d0f5      	beq.n	800ce26 <__any_on+0x2e>
 800ce3a:	2001      	movs	r0, #1
 800ce3c:	e7f6      	b.n	800ce2c <__any_on+0x34>

0800ce3e <__ascii_wctomb>:
 800ce3e:	0003      	movs	r3, r0
 800ce40:	1e08      	subs	r0, r1, #0
 800ce42:	d005      	beq.n	800ce50 <__ascii_wctomb+0x12>
 800ce44:	2aff      	cmp	r2, #255	; 0xff
 800ce46:	d904      	bls.n	800ce52 <__ascii_wctomb+0x14>
 800ce48:	228a      	movs	r2, #138	; 0x8a
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	4240      	negs	r0, r0
 800ce50:	4770      	bx	lr
 800ce52:	2001      	movs	r0, #1
 800ce54:	700a      	strb	r2, [r1, #0]
 800ce56:	e7fb      	b.n	800ce50 <__ascii_wctomb+0x12>

0800ce58 <_svfprintf_r>:
 800ce58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce5a:	b0d9      	sub	sp, #356	; 0x164
 800ce5c:	001c      	movs	r4, r3
 800ce5e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ce60:	9208      	str	r2, [sp, #32]
 800ce62:	900a      	str	r0, [sp, #40]	; 0x28
 800ce64:	f002 fdae 	bl	800f9c4 <_localeconv_r>
 800ce68:	6803      	ldr	r3, [r0, #0]
 800ce6a:	0018      	movs	r0, r3
 800ce6c:	931c      	str	r3, [sp, #112]	; 0x70
 800ce6e:	f7f3 f949 	bl	8000104 <strlen>
 800ce72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce74:	9016      	str	r0, [sp, #88]	; 0x58
 800ce76:	899b      	ldrh	r3, [r3, #12]
 800ce78:	061b      	lsls	r3, r3, #24
 800ce7a:	d517      	bpl.n	800ceac <_svfprintf_r+0x54>
 800ce7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d113      	bne.n	800ceac <_svfprintf_r+0x54>
 800ce84:	2140      	movs	r1, #64	; 0x40
 800ce86:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce88:	f7fd fb6e 	bl	800a568 <_malloc_r>
 800ce8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce8e:	6018      	str	r0, [r3, #0]
 800ce90:	6118      	str	r0, [r3, #16]
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d107      	bne.n	800cea6 <_svfprintf_r+0x4e>
 800ce96:	230c      	movs	r3, #12
 800ce98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	3b0d      	subs	r3, #13
 800ce9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cea0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cea2:	b059      	add	sp, #356	; 0x164
 800cea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cea6:	2340      	movs	r3, #64	; 0x40
 800cea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ceaa:	6153      	str	r3, [r2, #20]
 800ceac:	2300      	movs	r3, #0
 800ceae:	2200      	movs	r2, #0
 800ceb0:	932e      	str	r3, [sp, #184]	; 0xb8
 800ceb2:	932d      	str	r3, [sp, #180]	; 0xb4
 800ceb4:	930e      	str	r3, [sp, #56]	; 0x38
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	9214      	str	r2, [sp, #80]	; 0x50
 800ceba:	9315      	str	r3, [sp, #84]	; 0x54
 800cebc:	2300      	movs	r3, #0
 800cebe:	af2f      	add	r7, sp, #188	; 0xbc
 800cec0:	972c      	str	r7, [sp, #176]	; 0xb0
 800cec2:	931f      	str	r3, [sp, #124]	; 0x7c
 800cec4:	931e      	str	r3, [sp, #120]	; 0x78
 800cec6:	9312      	str	r3, [sp, #72]	; 0x48
 800cec8:	931b      	str	r3, [sp, #108]	; 0x6c
 800ceca:	931d      	str	r3, [sp, #116]	; 0x74
 800cecc:	9317      	str	r3, [sp, #92]	; 0x5c
 800cece:	9d08      	ldr	r5, [sp, #32]
 800ced0:	782b      	ldrb	r3, [r5, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d002      	beq.n	800cedc <_svfprintf_r+0x84>
 800ced6:	2b25      	cmp	r3, #37	; 0x25
 800ced8:	d000      	beq.n	800cedc <_svfprintf_r+0x84>
 800ceda:	e091      	b.n	800d000 <_svfprintf_r+0x1a8>
 800cedc:	9b08      	ldr	r3, [sp, #32]
 800cede:	1aee      	subs	r6, r5, r3
 800cee0:	429d      	cmp	r5, r3
 800cee2:	d016      	beq.n	800cf12 <_svfprintf_r+0xba>
 800cee4:	603b      	str	r3, [r7, #0]
 800cee6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cee8:	607e      	str	r6, [r7, #4]
 800ceea:	199b      	adds	r3, r3, r6
 800ceec:	932e      	str	r3, [sp, #184]	; 0xb8
 800ceee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cef0:	3708      	adds	r7, #8
 800cef2:	3301      	adds	r3, #1
 800cef4:	932d      	str	r3, [sp, #180]	; 0xb4
 800cef6:	2b07      	cmp	r3, #7
 800cef8:	dd08      	ble.n	800cf0c <_svfprintf_r+0xb4>
 800cefa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cefc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cefe:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf00:	f004 f8c0 	bl	8011084 <__ssprint_r>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d000      	beq.n	800cf0a <_svfprintf_r+0xb2>
 800cf08:	e1cf      	b.n	800d2aa <_svfprintf_r+0x452>
 800cf0a:	af2f      	add	r7, sp, #188	; 0xbc
 800cf0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf0e:	199b      	adds	r3, r3, r6
 800cf10:	9317      	str	r3, [sp, #92]	; 0x5c
 800cf12:	782b      	ldrb	r3, [r5, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <_svfprintf_r+0xc4>
 800cf18:	f001 f99e 	bl	800e258 <_svfprintf_r+0x1400>
 800cf1c:	221b      	movs	r2, #27
 800cf1e:	2300      	movs	r3, #0
 800cf20:	a91e      	add	r1, sp, #120	; 0x78
 800cf22:	1852      	adds	r2, r2, r1
 800cf24:	7013      	strb	r3, [r2, #0]
 800cf26:	2201      	movs	r2, #1
 800cf28:	001e      	movs	r6, r3
 800cf2a:	4252      	negs	r2, r2
 800cf2c:	3501      	adds	r5, #1
 800cf2e:	9209      	str	r2, [sp, #36]	; 0x24
 800cf30:	9318      	str	r3, [sp, #96]	; 0x60
 800cf32:	1c6b      	adds	r3, r5, #1
 800cf34:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf36:	782b      	ldrb	r3, [r5, #0]
 800cf38:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cf3c:	3820      	subs	r0, #32
 800cf3e:	285a      	cmp	r0, #90	; 0x5a
 800cf40:	d901      	bls.n	800cf46 <_svfprintf_r+0xee>
 800cf42:	f000 fe20 	bl	800db86 <_svfprintf_r+0xd2e>
 800cf46:	f7f3 f8ef 	bl	8000128 <__gnu_thumb1_case_uhi>
 800cf4a:	0078      	.short	0x0078
 800cf4c:	061e061e 	.word	0x061e061e
 800cf50:	061e0082 	.word	0x061e0082
 800cf54:	061e061e 	.word	0x061e061e
 800cf58:	061e005d 	.word	0x061e005d
 800cf5c:	0084061e 	.word	0x0084061e
 800cf60:	061e008c 	.word	0x061e008c
 800cf64:	0091008a 	.word	0x0091008a
 800cf68:	00b2061e 	.word	0x00b2061e
 800cf6c:	00b400b4 	.word	0x00b400b4
 800cf70:	00b400b4 	.word	0x00b400b4
 800cf74:	00b400b4 	.word	0x00b400b4
 800cf78:	00b400b4 	.word	0x00b400b4
 800cf7c:	061e00b4 	.word	0x061e00b4
 800cf80:	061e061e 	.word	0x061e061e
 800cf84:	061e061e 	.word	0x061e061e
 800cf88:	061e061e 	.word	0x061e061e
 800cf8c:	061e013b 	.word	0x061e013b
 800cf90:	00f400e0 	.word	0x00f400e0
 800cf94:	013b013b 	.word	0x013b013b
 800cf98:	061e013b 	.word	0x061e013b
 800cf9c:	061e061e 	.word	0x061e061e
 800cfa0:	00c7061e 	.word	0x00c7061e
 800cfa4:	061e061e 	.word	0x061e061e
 800cfa8:	061e04c7 	.word	0x061e04c7
 800cfac:	061e061e 	.word	0x061e061e
 800cfb0:	061e050a 	.word	0x061e050a
 800cfb4:	061e052a 	.word	0x061e052a
 800cfb8:	055c061e 	.word	0x055c061e
 800cfbc:	061e061e 	.word	0x061e061e
 800cfc0:	061e061e 	.word	0x061e061e
 800cfc4:	061e061e 	.word	0x061e061e
 800cfc8:	061e061e 	.word	0x061e061e
 800cfcc:	061e013b 	.word	0x061e013b
 800cfd0:	00f600e0 	.word	0x00f600e0
 800cfd4:	013b013b 	.word	0x013b013b
 800cfd8:	00c9013b 	.word	0x00c9013b
 800cfdc:	00dc00f6 	.word	0x00dc00f6
 800cfe0:	00d5061e 	.word	0x00d5061e
 800cfe4:	04a7061e 	.word	0x04a7061e
 800cfe8:	04fa04c9 	.word	0x04fa04c9
 800cfec:	061e00dc 	.word	0x061e00dc
 800cff0:	0080050a 	.word	0x0080050a
 800cff4:	061e052c 	.word	0x061e052c
 800cff8:	057c061e 	.word	0x057c061e
 800cffc:	0080061e 	.word	0x0080061e
 800d000:	3501      	adds	r5, #1
 800d002:	e765      	b.n	800ced0 <_svfprintf_r+0x78>
 800d004:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d006:	f002 fcdd 	bl	800f9c4 <_localeconv_r>
 800d00a:	6843      	ldr	r3, [r0, #4]
 800d00c:	0018      	movs	r0, r3
 800d00e:	931d      	str	r3, [sp, #116]	; 0x74
 800d010:	f7f3 f878 	bl	8000104 <strlen>
 800d014:	901b      	str	r0, [sp, #108]	; 0x6c
 800d016:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d018:	f002 fcd4 	bl	800f9c4 <_localeconv_r>
 800d01c:	6883      	ldr	r3, [r0, #8]
 800d01e:	9312      	str	r3, [sp, #72]	; 0x48
 800d020:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d022:	2b00      	cmp	r3, #0
 800d024:	d011      	beq.n	800d04a <_svfprintf_r+0x1f2>
 800d026:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00e      	beq.n	800d04a <_svfprintf_r+0x1f2>
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00b      	beq.n	800d04a <_svfprintf_r+0x1f2>
 800d032:	2380      	movs	r3, #128	; 0x80
 800d034:	00db      	lsls	r3, r3, #3
 800d036:	431e      	orrs	r6, r3
 800d038:	e007      	b.n	800d04a <_svfprintf_r+0x1f2>
 800d03a:	231b      	movs	r3, #27
 800d03c:	aa1e      	add	r2, sp, #120	; 0x78
 800d03e:	189b      	adds	r3, r3, r2
 800d040:	781a      	ldrb	r2, [r3, #0]
 800d042:	2a00      	cmp	r2, #0
 800d044:	d101      	bne.n	800d04a <_svfprintf_r+0x1f2>
 800d046:	3220      	adds	r2, #32
 800d048:	701a      	strb	r2, [r3, #0]
 800d04a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d04c:	e771      	b.n	800cf32 <_svfprintf_r+0xda>
 800d04e:	2301      	movs	r3, #1
 800d050:	e7f1      	b.n	800d036 <_svfprintf_r+0x1de>
 800d052:	cc08      	ldmia	r4!, {r3}
 800d054:	9318      	str	r3, [sp, #96]	; 0x60
 800d056:	2b00      	cmp	r3, #0
 800d058:	daf7      	bge.n	800d04a <_svfprintf_r+0x1f2>
 800d05a:	425b      	negs	r3, r3
 800d05c:	9318      	str	r3, [sp, #96]	; 0x60
 800d05e:	2304      	movs	r3, #4
 800d060:	e7e9      	b.n	800d036 <_svfprintf_r+0x1de>
 800d062:	231b      	movs	r3, #27
 800d064:	aa1e      	add	r2, sp, #120	; 0x78
 800d066:	189b      	adds	r3, r3, r2
 800d068:	222b      	movs	r2, #43	; 0x2b
 800d06a:	e7ed      	b.n	800d048 <_svfprintf_r+0x1f0>
 800d06c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d06e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d070:	7812      	ldrb	r2, [r2, #0]
 800d072:	3301      	adds	r3, #1
 800d074:	920f      	str	r2, [sp, #60]	; 0x3c
 800d076:	2a2a      	cmp	r2, #42	; 0x2a
 800d078:	d010      	beq.n	800d09c <_svfprintf_r+0x244>
 800d07a:	2200      	movs	r2, #0
 800d07c:	9209      	str	r2, [sp, #36]	; 0x24
 800d07e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d080:	9313      	str	r3, [sp, #76]	; 0x4c
 800d082:	3a30      	subs	r2, #48	; 0x30
 800d084:	2a09      	cmp	r2, #9
 800d086:	d900      	bls.n	800d08a <_svfprintf_r+0x232>
 800d088:	e757      	b.n	800cf3a <_svfprintf_r+0xe2>
 800d08a:	200a      	movs	r0, #10
 800d08c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d08e:	4341      	muls	r1, r0
 800d090:	188a      	adds	r2, r1, r2
 800d092:	9209      	str	r2, [sp, #36]	; 0x24
 800d094:	781a      	ldrb	r2, [r3, #0]
 800d096:	3301      	adds	r3, #1
 800d098:	920f      	str	r2, [sp, #60]	; 0x3c
 800d09a:	e7f0      	b.n	800d07e <_svfprintf_r+0x226>
 800d09c:	cc04      	ldmia	r4!, {r2}
 800d09e:	9209      	str	r2, [sp, #36]	; 0x24
 800d0a0:	2a00      	cmp	r2, #0
 800d0a2:	da02      	bge.n	800d0aa <_svfprintf_r+0x252>
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	4252      	negs	r2, r2
 800d0a8:	9209      	str	r2, [sp, #36]	; 0x24
 800d0aa:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0ac:	e7cd      	b.n	800d04a <_svfprintf_r+0x1f2>
 800d0ae:	2380      	movs	r3, #128	; 0x80
 800d0b0:	e7c1      	b.n	800d036 <_svfprintf_r+0x1de>
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0b6:	9218      	str	r2, [sp, #96]	; 0x60
 800d0b8:	210a      	movs	r1, #10
 800d0ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d0bc:	434a      	muls	r2, r1
 800d0be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d0c0:	3930      	subs	r1, #48	; 0x30
 800d0c2:	188a      	adds	r2, r1, r2
 800d0c4:	9218      	str	r2, [sp, #96]	; 0x60
 800d0c6:	001a      	movs	r2, r3
 800d0c8:	7812      	ldrb	r2, [r2, #0]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	920f      	str	r2, [sp, #60]	; 0x3c
 800d0ce:	3a30      	subs	r2, #48	; 0x30
 800d0d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0d2:	2a09      	cmp	r2, #9
 800d0d4:	d9f0      	bls.n	800d0b8 <_svfprintf_r+0x260>
 800d0d6:	e730      	b.n	800cf3a <_svfprintf_r+0xe2>
 800d0d8:	2308      	movs	r3, #8
 800d0da:	e7ac      	b.n	800d036 <_svfprintf_r+0x1de>
 800d0dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	2b68      	cmp	r3, #104	; 0x68
 800d0e2:	d105      	bne.n	800d0f0 <_svfprintf_r+0x298>
 800d0e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0ea:	2380      	movs	r3, #128	; 0x80
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	e7a2      	b.n	800d036 <_svfprintf_r+0x1de>
 800d0f0:	2340      	movs	r3, #64	; 0x40
 800d0f2:	e7a0      	b.n	800d036 <_svfprintf_r+0x1de>
 800d0f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b6c      	cmp	r3, #108	; 0x6c
 800d0fa:	d104      	bne.n	800d106 <_svfprintf_r+0x2ae>
 800d0fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0fe:	3301      	adds	r3, #1
 800d100:	9313      	str	r3, [sp, #76]	; 0x4c
 800d102:	2320      	movs	r3, #32
 800d104:	e797      	b.n	800d036 <_svfprintf_r+0x1de>
 800d106:	2310      	movs	r3, #16
 800d108:	e795      	b.n	800d036 <_svfprintf_r+0x1de>
 800d10a:	0021      	movs	r1, r4
 800d10c:	c904      	ldmia	r1!, {r2}
 800d10e:	ab3f      	add	r3, sp, #252	; 0xfc
 800d110:	910d      	str	r1, [sp, #52]	; 0x34
 800d112:	211b      	movs	r1, #27
 800d114:	701a      	strb	r2, [r3, #0]
 800d116:	2200      	movs	r2, #0
 800d118:	a81e      	add	r0, sp, #120	; 0x78
 800d11a:	1809      	adds	r1, r1, r0
 800d11c:	700a      	strb	r2, [r1, #0]
 800d11e:	920c      	str	r2, [sp, #48]	; 0x30
 800d120:	3201      	adds	r2, #1
 800d122:	9209      	str	r2, [sp, #36]	; 0x24
 800d124:	2200      	movs	r2, #0
 800d126:	9308      	str	r3, [sp, #32]
 800d128:	0015      	movs	r5, r2
 800d12a:	9219      	str	r2, [sp, #100]	; 0x64
 800d12c:	9210      	str	r2, [sp, #64]	; 0x40
 800d12e:	9211      	str	r2, [sp, #68]	; 0x44
 800d130:	e1f1      	b.n	800d516 <_svfprintf_r+0x6be>
 800d132:	2310      	movs	r3, #16
 800d134:	431e      	orrs	r6, r3
 800d136:	06b3      	lsls	r3, r6, #26
 800d138:	d531      	bpl.n	800d19e <_svfprintf_r+0x346>
 800d13a:	2307      	movs	r3, #7
 800d13c:	3407      	adds	r4, #7
 800d13e:	439c      	bics	r4, r3
 800d140:	0022      	movs	r2, r4
 800d142:	ca18      	ldmia	r2!, {r3, r4}
 800d144:	9306      	str	r3, [sp, #24]
 800d146:	9407      	str	r4, [sp, #28]
 800d148:	920d      	str	r2, [sp, #52]	; 0x34
 800d14a:	9a07      	ldr	r2, [sp, #28]
 800d14c:	2301      	movs	r3, #1
 800d14e:	2a00      	cmp	r2, #0
 800d150:	da0b      	bge.n	800d16a <_svfprintf_r+0x312>
 800d152:	9c06      	ldr	r4, [sp, #24]
 800d154:	9d07      	ldr	r5, [sp, #28]
 800d156:	2200      	movs	r2, #0
 800d158:	4261      	negs	r1, r4
 800d15a:	41aa      	sbcs	r2, r5
 800d15c:	9106      	str	r1, [sp, #24]
 800d15e:	9207      	str	r2, [sp, #28]
 800d160:	221b      	movs	r2, #27
 800d162:	a91e      	add	r1, sp, #120	; 0x78
 800d164:	1852      	adds	r2, r2, r1
 800d166:	212d      	movs	r1, #45	; 0x2d
 800d168:	7011      	strb	r1, [r2, #0]
 800d16a:	9907      	ldr	r1, [sp, #28]
 800d16c:	9a06      	ldr	r2, [sp, #24]
 800d16e:	430a      	orrs	r2, r1
 800d170:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d172:	3101      	adds	r1, #1
 800d174:	d101      	bne.n	800d17a <_svfprintf_r+0x322>
 800d176:	f001 f87b 	bl	800e270 <_svfprintf_r+0x1418>
 800d17a:	2180      	movs	r1, #128	; 0x80
 800d17c:	0034      	movs	r4, r6
 800d17e:	438c      	bics	r4, r1
 800d180:	2a00      	cmp	r2, #0
 800d182:	d001      	beq.n	800d188 <_svfprintf_r+0x330>
 800d184:	f001 f879 	bl	800e27a <_svfprintf_r+0x1422>
 800d188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d18a:	2a00      	cmp	r2, #0
 800d18c:	d101      	bne.n	800d192 <_svfprintf_r+0x33a>
 800d18e:	f000 fcef 	bl	800db70 <_svfprintf_r+0xd18>
 800d192:	2b01      	cmp	r3, #1
 800d194:	d001      	beq.n	800d19a <_svfprintf_r+0x342>
 800d196:	f001 f874 	bl	800e282 <_svfprintf_r+0x142a>
 800d19a:	f000 fc79 	bl	800da90 <_svfprintf_r+0xc38>
 800d19e:	0022      	movs	r2, r4
 800d1a0:	ca08      	ldmia	r2!, {r3}
 800d1a2:	920d      	str	r2, [sp, #52]	; 0x34
 800d1a4:	06f2      	lsls	r2, r6, #27
 800d1a6:	d503      	bpl.n	800d1b0 <_svfprintf_r+0x358>
 800d1a8:	9306      	str	r3, [sp, #24]
 800d1aa:	17db      	asrs	r3, r3, #31
 800d1ac:	9307      	str	r3, [sp, #28]
 800d1ae:	e7cc      	b.n	800d14a <_svfprintf_r+0x2f2>
 800d1b0:	0672      	lsls	r2, r6, #25
 800d1b2:	d501      	bpl.n	800d1b8 <_svfprintf_r+0x360>
 800d1b4:	b21b      	sxth	r3, r3
 800d1b6:	e7f7      	b.n	800d1a8 <_svfprintf_r+0x350>
 800d1b8:	05b2      	lsls	r2, r6, #22
 800d1ba:	d5f5      	bpl.n	800d1a8 <_svfprintf_r+0x350>
 800d1bc:	b25b      	sxtb	r3, r3
 800d1be:	e7f3      	b.n	800d1a8 <_svfprintf_r+0x350>
 800d1c0:	2307      	movs	r3, #7
 800d1c2:	3407      	adds	r4, #7
 800d1c4:	439c      	bics	r4, r3
 800d1c6:	0022      	movs	r2, r4
 800d1c8:	ca18      	ldmia	r2!, {r3, r4}
 800d1ca:	920d      	str	r2, [sp, #52]	; 0x34
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	9314      	str	r3, [sp, #80]	; 0x50
 800d1d0:	9415      	str	r4, [sp, #84]	; 0x54
 800d1d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d1d6:	005c      	lsls	r4, r3, #1
 800d1d8:	0864      	lsrs	r4, r4, #1
 800d1da:	0028      	movs	r0, r5
 800d1dc:	0021      	movs	r1, r4
 800d1de:	4b3e      	ldr	r3, [pc, #248]	; (800d2d8 <_svfprintf_r+0x480>)
 800d1e0:	4252      	negs	r2, r2
 800d1e2:	f7f5 f887 	bl	80022f4 <__aeabi_dcmpun>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d126      	bne.n	800d238 <_svfprintf_r+0x3e0>
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	0028      	movs	r0, r5
 800d1ee:	0021      	movs	r1, r4
 800d1f0:	4b39      	ldr	r3, [pc, #228]	; (800d2d8 <_svfprintf_r+0x480>)
 800d1f2:	4252      	negs	r2, r2
 800d1f4:	f7f3 f938 	bl	8000468 <__aeabi_dcmple>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d11d      	bne.n	800d238 <_svfprintf_r+0x3e0>
 800d1fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d1fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d200:	2200      	movs	r2, #0
 800d202:	2300      	movs	r3, #0
 800d204:	f7f3 f926 	bl	8000454 <__aeabi_dcmplt>
 800d208:	2800      	cmp	r0, #0
 800d20a:	d004      	beq.n	800d216 <_svfprintf_r+0x3be>
 800d20c:	231b      	movs	r3, #27
 800d20e:	aa1e      	add	r2, sp, #120	; 0x78
 800d210:	189b      	adds	r3, r3, r2
 800d212:	222d      	movs	r2, #45	; 0x2d
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	4b31      	ldr	r3, [pc, #196]	; (800d2dc <_svfprintf_r+0x484>)
 800d218:	9308      	str	r3, [sp, #32]
 800d21a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d21c:	2b47      	cmp	r3, #71	; 0x47
 800d21e:	dd01      	ble.n	800d224 <_svfprintf_r+0x3cc>
 800d220:	4b2f      	ldr	r3, [pc, #188]	; (800d2e0 <_svfprintf_r+0x488>)
 800d222:	9308      	str	r3, [sp, #32]
 800d224:	2380      	movs	r3, #128	; 0x80
 800d226:	439e      	bics	r6, r3
 800d228:	2300      	movs	r3, #0
 800d22a:	930c      	str	r3, [sp, #48]	; 0x30
 800d22c:	3303      	adds	r3, #3
 800d22e:	9309      	str	r3, [sp, #36]	; 0x24
 800d230:	2300      	movs	r3, #0
 800d232:	9319      	str	r3, [sp, #100]	; 0x64
 800d234:	f000 fc78 	bl	800db28 <_svfprintf_r+0xcd0>
 800d238:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d23a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d23c:	0010      	movs	r0, r2
 800d23e:	0019      	movs	r1, r3
 800d240:	f7f5 f858 	bl	80022f4 <__aeabi_dcmpun>
 800d244:	2800      	cmp	r0, #0
 800d246:	d00e      	beq.n	800d266 <_svfprintf_r+0x40e>
 800d248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	da04      	bge.n	800d258 <_svfprintf_r+0x400>
 800d24e:	231b      	movs	r3, #27
 800d250:	aa1e      	add	r2, sp, #120	; 0x78
 800d252:	189b      	adds	r3, r3, r2
 800d254:	222d      	movs	r2, #45	; 0x2d
 800d256:	701a      	strb	r2, [r3, #0]
 800d258:	4b22      	ldr	r3, [pc, #136]	; (800d2e4 <_svfprintf_r+0x48c>)
 800d25a:	9308      	str	r3, [sp, #32]
 800d25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d25e:	2b47      	cmp	r3, #71	; 0x47
 800d260:	dde0      	ble.n	800d224 <_svfprintf_r+0x3cc>
 800d262:	4b21      	ldr	r3, [pc, #132]	; (800d2e8 <_svfprintf_r+0x490>)
 800d264:	e7dd      	b.n	800d222 <_svfprintf_r+0x3ca>
 800d266:	2320      	movs	r3, #32
 800d268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d26a:	439a      	bics	r2, r3
 800d26c:	9210      	str	r2, [sp, #64]	; 0x40
 800d26e:	2a41      	cmp	r2, #65	; 0x41
 800d270:	d123      	bne.n	800d2ba <_svfprintf_r+0x462>
 800d272:	2230      	movs	r2, #48	; 0x30
 800d274:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d276:	ab25      	add	r3, sp, #148	; 0x94
 800d278:	701a      	strb	r2, [r3, #0]
 800d27a:	3248      	adds	r2, #72	; 0x48
 800d27c:	2961      	cmp	r1, #97	; 0x61
 800d27e:	d000      	beq.n	800d282 <_svfprintf_r+0x42a>
 800d280:	3a20      	subs	r2, #32
 800d282:	705a      	strb	r2, [r3, #1]
 800d284:	2302      	movs	r3, #2
 800d286:	431e      	orrs	r6, r3
 800d288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d28a:	2b63      	cmp	r3, #99	; 0x63
 800d28c:	dd2e      	ble.n	800d2ec <_svfprintf_r+0x494>
 800d28e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d290:	1c59      	adds	r1, r3, #1
 800d292:	f7fd f969 	bl	800a568 <_malloc_r>
 800d296:	9008      	str	r0, [sp, #32]
 800d298:	2800      	cmp	r0, #0
 800d29a:	d000      	beq.n	800d29e <_svfprintf_r+0x446>
 800d29c:	e216      	b.n	800d6cc <_svfprintf_r+0x874>
 800d29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2a0:	899a      	ldrh	r2, [r3, #12]
 800d2a2:	2340      	movs	r3, #64	; 0x40
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2a8:	8193      	strh	r3, [r2, #12]
 800d2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2ac:	899b      	ldrh	r3, [r3, #12]
 800d2ae:	065b      	lsls	r3, r3, #25
 800d2b0:	d400      	bmi.n	800d2b4 <_svfprintf_r+0x45c>
 800d2b2:	e5f5      	b.n	800cea0 <_svfprintf_r+0x48>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	425b      	negs	r3, r3
 800d2b8:	e5f1      	b.n	800ce9e <_svfprintf_r+0x46>
 800d2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2bc:	900c      	str	r0, [sp, #48]	; 0x30
 800d2be:	3301      	adds	r3, #1
 800d2c0:	d100      	bne.n	800d2c4 <_svfprintf_r+0x46c>
 800d2c2:	e206      	b.n	800d6d2 <_svfprintf_r+0x87a>
 800d2c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2c6:	2b47      	cmp	r3, #71	; 0x47
 800d2c8:	d114      	bne.n	800d2f4 <_svfprintf_r+0x49c>
 800d2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d111      	bne.n	800d2f4 <_svfprintf_r+0x49c>
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2d4:	e00e      	b.n	800d2f4 <_svfprintf_r+0x49c>
 800d2d6:	46c0      	nop			; (mov r8, r8)
 800d2d8:	7fefffff 	.word	0x7fefffff
 800d2dc:	0801427c 	.word	0x0801427c
 800d2e0:	08014280 	.word	0x08014280
 800d2e4:	08014284 	.word	0x08014284
 800d2e8:	08014288 	.word	0x08014288
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d2f0:	ab3f      	add	r3, sp, #252	; 0xfc
 800d2f2:	9308      	str	r3, [sp, #32]
 800d2f4:	2380      	movs	r3, #128	; 0x80
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	4333      	orrs	r3, r6
 800d2fa:	931a      	str	r3, [sp, #104]	; 0x68
 800d2fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d300:	2b00      	cmp	r3, #0
 800d302:	db00      	blt.n	800d306 <_svfprintf_r+0x4ae>
 800d304:	e1e7      	b.n	800d6d6 <_svfprintf_r+0x87e>
 800d306:	2280      	movs	r2, #128	; 0x80
 800d308:	0612      	lsls	r2, r2, #24
 800d30a:	4694      	mov	ip, r2
 800d30c:	4463      	add	r3, ip
 800d30e:	930e      	str	r3, [sp, #56]	; 0x38
 800d310:	232d      	movs	r3, #45	; 0x2d
 800d312:	9322      	str	r3, [sp, #136]	; 0x88
 800d314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d316:	2b41      	cmp	r3, #65	; 0x41
 800d318:	d000      	beq.n	800d31c <_svfprintf_r+0x4c4>
 800d31a:	e1f5      	b.n	800d708 <_svfprintf_r+0x8b0>
 800d31c:	0028      	movs	r0, r5
 800d31e:	aa26      	add	r2, sp, #152	; 0x98
 800d320:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d322:	f002 fb73 	bl	800fa0c <frexp>
 800d326:	23ff      	movs	r3, #255	; 0xff
 800d328:	2200      	movs	r2, #0
 800d32a:	059b      	lsls	r3, r3, #22
 800d32c:	f7f4 f99e 	bl	800166c <__aeabi_dmul>
 800d330:	2200      	movs	r2, #0
 800d332:	2300      	movs	r3, #0
 800d334:	0004      	movs	r4, r0
 800d336:	000d      	movs	r5, r1
 800d338:	f7f3 f886 	bl	8000448 <__aeabi_dcmpeq>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d001      	beq.n	800d344 <_svfprintf_r+0x4ec>
 800d340:	2301      	movs	r3, #1
 800d342:	9326      	str	r3, [sp, #152]	; 0x98
 800d344:	4bda      	ldr	r3, [pc, #872]	; (800d6b0 <_svfprintf_r+0x858>)
 800d346:	9319      	str	r3, [sp, #100]	; 0x64
 800d348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d34a:	2b61      	cmp	r3, #97	; 0x61
 800d34c:	d001      	beq.n	800d352 <_svfprintf_r+0x4fa>
 800d34e:	4bd9      	ldr	r3, [pc, #868]	; (800d6b4 <_svfprintf_r+0x85c>)
 800d350:	9319      	str	r3, [sp, #100]	; 0x64
 800d352:	9b08      	ldr	r3, [sp, #32]
 800d354:	930e      	str	r3, [sp, #56]	; 0x38
 800d356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d358:	3b01      	subs	r3, #1
 800d35a:	9311      	str	r3, [sp, #68]	; 0x44
 800d35c:	2200      	movs	r2, #0
 800d35e:	4bd6      	ldr	r3, [pc, #856]	; (800d6b8 <_svfprintf_r+0x860>)
 800d360:	0020      	movs	r0, r4
 800d362:	0029      	movs	r1, r5
 800d364:	f7f4 f982 	bl	800166c <__aeabi_dmul>
 800d368:	000d      	movs	r5, r1
 800d36a:	0004      	movs	r4, r0
 800d36c:	f7f4 ffe0 	bl	8002330 <__aeabi_d2iz>
 800d370:	9021      	str	r0, [sp, #132]	; 0x84
 800d372:	f7f5 f813 	bl	800239c <__aeabi_i2d>
 800d376:	0002      	movs	r2, r0
 800d378:	000b      	movs	r3, r1
 800d37a:	0020      	movs	r0, r4
 800d37c:	0029      	movs	r1, r5
 800d37e:	f7f4 fc37 	bl	8001bf0 <__aeabi_dsub>
 800d382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d384:	000d      	movs	r5, r1
 800d386:	001a      	movs	r2, r3
 800d388:	3201      	adds	r2, #1
 800d38a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d38c:	920e      	str	r2, [sp, #56]	; 0x38
 800d38e:	9223      	str	r2, [sp, #140]	; 0x8c
 800d390:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d392:	0004      	movs	r4, r0
 800d394:	5c52      	ldrb	r2, [r2, r1]
 800d396:	701a      	strb	r2, [r3, #0]
 800d398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d39a:	9320      	str	r3, [sp, #128]	; 0x80
 800d39c:	3301      	adds	r3, #1
 800d39e:	d00a      	beq.n	800d3b6 <_svfprintf_r+0x55e>
 800d3a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	9311      	str	r3, [sp, #68]	; 0x44
 800d3a8:	0020      	movs	r0, r4
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	0029      	movs	r1, r5
 800d3ae:	f7f3 f84b 	bl	8000448 <__aeabi_dcmpeq>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d0d2      	beq.n	800d35c <_svfprintf_r+0x504>
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	0020      	movs	r0, r4
 800d3ba:	0029      	movs	r1, r5
 800d3bc:	4bbf      	ldr	r3, [pc, #764]	; (800d6bc <_svfprintf_r+0x864>)
 800d3be:	f7f3 f85d 	bl	800047c <__aeabi_dcmpgt>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d10c      	bne.n	800d3e0 <_svfprintf_r+0x588>
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	0020      	movs	r0, r4
 800d3ca:	0029      	movs	r1, r5
 800d3cc:	4bbb      	ldr	r3, [pc, #748]	; (800d6bc <_svfprintf_r+0x864>)
 800d3ce:	f7f3 f83b 	bl	8000448 <__aeabi_dcmpeq>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d100      	bne.n	800d3d8 <_svfprintf_r+0x580>
 800d3d6:	e191      	b.n	800d6fc <_svfprintf_r+0x8a4>
 800d3d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3da:	07db      	lsls	r3, r3, #31
 800d3dc:	d400      	bmi.n	800d3e0 <_svfprintf_r+0x588>
 800d3de:	e18d      	b.n	800d6fc <_svfprintf_r+0x8a4>
 800d3e0:	2030      	movs	r0, #48	; 0x30
 800d3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3e4:	932a      	str	r3, [sp, #168]	; 0xa8
 800d3e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3e8:	7bdb      	ldrb	r3, [r3, #15]
 800d3ea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d3ec:	3a01      	subs	r2, #1
 800d3ee:	922a      	str	r2, [sp, #168]	; 0xa8
 800d3f0:	7811      	ldrb	r1, [r2, #0]
 800d3f2:	4299      	cmp	r1, r3
 800d3f4:	d100      	bne.n	800d3f8 <_svfprintf_r+0x5a0>
 800d3f6:	e171      	b.n	800d6dc <_svfprintf_r+0x884>
 800d3f8:	1c4b      	adds	r3, r1, #1
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	2939      	cmp	r1, #57	; 0x39
 800d3fe:	d101      	bne.n	800d404 <_svfprintf_r+0x5ac>
 800d400:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d402:	7a9b      	ldrb	r3, [r3, #10]
 800d404:	7013      	strb	r3, [r2, #0]
 800d406:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d408:	9a08      	ldr	r2, [sp, #32]
 800d40a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d40c:	1a9b      	subs	r3, r3, r2
 800d40e:	930e      	str	r3, [sp, #56]	; 0x38
 800d410:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d412:	2b47      	cmp	r3, #71	; 0x47
 800d414:	d000      	beq.n	800d418 <_svfprintf_r+0x5c0>
 800d416:	e1c4      	b.n	800d7a2 <_svfprintf_r+0x94a>
 800d418:	1ceb      	adds	r3, r5, #3
 800d41a:	db03      	blt.n	800d424 <_svfprintf_r+0x5cc>
 800d41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d41e:	42ab      	cmp	r3, r5
 800d420:	db00      	blt.n	800d424 <_svfprintf_r+0x5cc>
 800d422:	e1e6      	b.n	800d7f2 <_svfprintf_r+0x99a>
 800d424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d426:	3b02      	subs	r3, #2
 800d428:	930f      	str	r3, [sp, #60]	; 0x3c
 800d42a:	223c      	movs	r2, #60	; 0x3c
 800d42c:	466b      	mov	r3, sp
 800d42e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d430:	189b      	adds	r3, r3, r2
 800d432:	1e6c      	subs	r4, r5, #1
 800d434:	3a1c      	subs	r2, #28
 800d436:	2000      	movs	r0, #0
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	9426      	str	r4, [sp, #152]	; 0x98
 800d43c:	4391      	bics	r1, r2
 800d43e:	2941      	cmp	r1, #65	; 0x41
 800d440:	d102      	bne.n	800d448 <_svfprintf_r+0x5f0>
 800d442:	330f      	adds	r3, #15
 800d444:	b2db      	uxtb	r3, r3
 800d446:	3001      	adds	r0, #1
 800d448:	a928      	add	r1, sp, #160	; 0xa0
 800d44a:	700b      	strb	r3, [r1, #0]
 800d44c:	232b      	movs	r3, #43	; 0x2b
 800d44e:	2c00      	cmp	r4, #0
 800d450:	da02      	bge.n	800d458 <_svfprintf_r+0x600>
 800d452:	2401      	movs	r4, #1
 800d454:	3302      	adds	r3, #2
 800d456:	1b64      	subs	r4, r4, r5
 800d458:	704b      	strb	r3, [r1, #1]
 800d45a:	2c09      	cmp	r4, #9
 800d45c:	dc00      	bgt.n	800d460 <_svfprintf_r+0x608>
 800d45e:	e1ba      	b.n	800d7d6 <_svfprintf_r+0x97e>
 800d460:	2337      	movs	r3, #55	; 0x37
 800d462:	250a      	movs	r5, #10
 800d464:	aa1e      	add	r2, sp, #120	; 0x78
 800d466:	189b      	adds	r3, r3, r2
 800d468:	9310      	str	r3, [sp, #64]	; 0x40
 800d46a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d46c:	0020      	movs	r0, r4
 800d46e:	9309      	str	r3, [sp, #36]	; 0x24
 800d470:	0029      	movs	r1, r5
 800d472:	3b01      	subs	r3, #1
 800d474:	9310      	str	r3, [sp, #64]	; 0x40
 800d476:	f7f2 ffd1 	bl	800041c <__aeabi_idivmod>
 800d47a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d47c:	3130      	adds	r1, #48	; 0x30
 800d47e:	7019      	strb	r1, [r3, #0]
 800d480:	0020      	movs	r0, r4
 800d482:	0029      	movs	r1, r5
 800d484:	9411      	str	r4, [sp, #68]	; 0x44
 800d486:	f7f2 fee3 	bl	8000250 <__divsi3>
 800d48a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d48c:	0004      	movs	r4, r0
 800d48e:	2b63      	cmp	r3, #99	; 0x63
 800d490:	dceb      	bgt.n	800d46a <_svfprintf_r+0x612>
 800d492:	222a      	movs	r2, #42	; 0x2a
 800d494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d496:	a81e      	add	r0, sp, #120	; 0x78
 800d498:	1e99      	subs	r1, r3, #2
 800d49a:	1812      	adds	r2, r2, r0
 800d49c:	2037      	movs	r0, #55	; 0x37
 800d49e:	000b      	movs	r3, r1
 800d4a0:	3430      	adds	r4, #48	; 0x30
 800d4a2:	700c      	strb	r4, [r1, #0]
 800d4a4:	ac1e      	add	r4, sp, #120	; 0x78
 800d4a6:	1900      	adds	r0, r0, r4
 800d4a8:	4283      	cmp	r3, r0
 800d4aa:	d200      	bcs.n	800d4ae <_svfprintf_r+0x656>
 800d4ac:	e18e      	b.n	800d7cc <_svfprintf_r+0x974>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4281      	cmp	r1, r0
 800d4b2:	d804      	bhi.n	800d4be <_svfprintf_r+0x666>
 800d4b4:	aa1e      	add	r2, sp, #120	; 0x78
 800d4b6:	3339      	adds	r3, #57	; 0x39
 800d4b8:	189b      	adds	r3, r3, r2
 800d4ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4bc:	1a9b      	subs	r3, r3, r2
 800d4be:	222a      	movs	r2, #42	; 0x2a
 800d4c0:	a91e      	add	r1, sp, #120	; 0x78
 800d4c2:	1852      	adds	r2, r2, r1
 800d4c4:	18d3      	adds	r3, r2, r3
 800d4c6:	aa28      	add	r2, sp, #160	; 0xa0
 800d4c8:	1a9b      	subs	r3, r3, r2
 800d4ca:	931e      	str	r3, [sp, #120]	; 0x78
 800d4cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4d0:	4694      	mov	ip, r2
 800d4d2:	4463      	add	r3, ip
 800d4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	dc01      	bgt.n	800d4e0 <_svfprintf_r+0x688>
 800d4dc:	07f3      	lsls	r3, r6, #31
 800d4de:	d504      	bpl.n	800d4ea <_svfprintf_r+0x692>
 800d4e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e4:	4694      	mov	ip, r2
 800d4e6:	4463      	add	r3, ip
 800d4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ea:	2280      	movs	r2, #128	; 0x80
 800d4ec:	4b74      	ldr	r3, [pc, #464]	; (800d6c0 <_svfprintf_r+0x868>)
 800d4ee:	0052      	lsls	r2, r2, #1
 800d4f0:	4033      	ands	r3, r6
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	001d      	movs	r5, r3
 800d4f8:	921a      	str	r2, [sp, #104]	; 0x68
 800d4fa:	9310      	str	r3, [sp, #64]	; 0x40
 800d4fc:	9311      	str	r3, [sp, #68]	; 0x44
 800d4fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d500:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d502:	9319      	str	r3, [sp, #100]	; 0x64
 800d504:	2b00      	cmp	r3, #0
 800d506:	d006      	beq.n	800d516 <_svfprintf_r+0x6be>
 800d508:	231b      	movs	r3, #27
 800d50a:	aa1e      	add	r2, sp, #120	; 0x78
 800d50c:	189b      	adds	r3, r3, r2
 800d50e:	222d      	movs	r2, #45	; 0x2d
 800d510:	701a      	strb	r2, [r3, #0]
 800d512:	2300      	movs	r3, #0
 800d514:	9319      	str	r3, [sp, #100]	; 0x64
 800d516:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d51a:	931a      	str	r3, [sp, #104]	; 0x68
 800d51c:	4293      	cmp	r3, r2
 800d51e:	da00      	bge.n	800d522 <_svfprintf_r+0x6ca>
 800d520:	921a      	str	r2, [sp, #104]	; 0x68
 800d522:	231b      	movs	r3, #27
 800d524:	aa1e      	add	r2, sp, #120	; 0x78
 800d526:	189b      	adds	r3, r3, r2
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	1e5a      	subs	r2, r3, #1
 800d52c:	4193      	sbcs	r3, r2
 800d52e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d530:	18d3      	adds	r3, r2, r3
 800d532:	931a      	str	r3, [sp, #104]	; 0x68
 800d534:	0032      	movs	r2, r6
 800d536:	2302      	movs	r3, #2
 800d538:	401a      	ands	r2, r3
 800d53a:	9220      	str	r2, [sp, #128]	; 0x80
 800d53c:	421e      	tst	r6, r3
 800d53e:	d002      	beq.n	800d546 <_svfprintf_r+0x6ee>
 800d540:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d542:	3302      	adds	r3, #2
 800d544:	931a      	str	r3, [sp, #104]	; 0x68
 800d546:	2384      	movs	r3, #132	; 0x84
 800d548:	0032      	movs	r2, r6
 800d54a:	401a      	ands	r2, r3
 800d54c:	9221      	str	r2, [sp, #132]	; 0x84
 800d54e:	421e      	tst	r6, r3
 800d550:	d11f      	bne.n	800d592 <_svfprintf_r+0x73a>
 800d552:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d554:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d556:	1a9c      	subs	r4, r3, r2
 800d558:	2c00      	cmp	r4, #0
 800d55a:	dd1a      	ble.n	800d592 <_svfprintf_r+0x73a>
 800d55c:	0039      	movs	r1, r7
 800d55e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d560:	4858      	ldr	r0, [pc, #352]	; (800d6c4 <_svfprintf_r+0x86c>)
 800d562:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d564:	3301      	adds	r3, #1
 800d566:	3108      	adds	r1, #8
 800d568:	6038      	str	r0, [r7, #0]
 800d56a:	2c10      	cmp	r4, #16
 800d56c:	dd00      	ble.n	800d570 <_svfprintf_r+0x718>
 800d56e:	e31c      	b.n	800dbaa <_svfprintf_r+0xd52>
 800d570:	607c      	str	r4, [r7, #4]
 800d572:	18a4      	adds	r4, r4, r2
 800d574:	000f      	movs	r7, r1
 800d576:	942e      	str	r4, [sp, #184]	; 0xb8
 800d578:	932d      	str	r3, [sp, #180]	; 0xb4
 800d57a:	2b07      	cmp	r3, #7
 800d57c:	dd09      	ble.n	800d592 <_svfprintf_r+0x73a>
 800d57e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d580:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d582:	aa2c      	add	r2, sp, #176	; 0xb0
 800d584:	f003 fd7e 	bl	8011084 <__ssprint_r>
 800d588:	2800      	cmp	r0, #0
 800d58a:	d001      	beq.n	800d590 <_svfprintf_r+0x738>
 800d58c:	f000 fe43 	bl	800e216 <_svfprintf_r+0x13be>
 800d590:	af2f      	add	r7, sp, #188	; 0xbc
 800d592:	221b      	movs	r2, #27
 800d594:	a91e      	add	r1, sp, #120	; 0x78
 800d596:	1852      	adds	r2, r2, r1
 800d598:	7811      	ldrb	r1, [r2, #0]
 800d59a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d59c:	2900      	cmp	r1, #0
 800d59e:	d014      	beq.n	800d5ca <_svfprintf_r+0x772>
 800d5a0:	603a      	str	r2, [r7, #0]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	189b      	adds	r3, r3, r2
 800d5a6:	932e      	str	r3, [sp, #184]	; 0xb8
 800d5a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d5aa:	607a      	str	r2, [r7, #4]
 800d5ac:	189b      	adds	r3, r3, r2
 800d5ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	2b07      	cmp	r3, #7
 800d5b4:	dd09      	ble.n	800d5ca <_svfprintf_r+0x772>
 800d5b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d5ba:	aa2c      	add	r2, sp, #176	; 0xb0
 800d5bc:	f003 fd62 	bl	8011084 <__ssprint_r>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d001      	beq.n	800d5c8 <_svfprintf_r+0x770>
 800d5c4:	f000 fe27 	bl	800e216 <_svfprintf_r+0x13be>
 800d5c8:	af2f      	add	r7, sp, #188	; 0xbc
 800d5ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d5cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d5ce:	2a00      	cmp	r2, #0
 800d5d0:	d015      	beq.n	800d5fe <_svfprintf_r+0x7a6>
 800d5d2:	aa25      	add	r2, sp, #148	; 0x94
 800d5d4:	603a      	str	r2, [r7, #0]
 800d5d6:	2202      	movs	r2, #2
 800d5d8:	189b      	adds	r3, r3, r2
 800d5da:	932e      	str	r3, [sp, #184]	; 0xb8
 800d5dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d5de:	607a      	str	r2, [r7, #4]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	2b07      	cmp	r3, #7
 800d5e8:	dd09      	ble.n	800d5fe <_svfprintf_r+0x7a6>
 800d5ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d5ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800d5f0:	f003 fd48 	bl	8011084 <__ssprint_r>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d001      	beq.n	800d5fc <_svfprintf_r+0x7a4>
 800d5f8:	f000 fe0d 	bl	800e216 <_svfprintf_r+0x13be>
 800d5fc:	af2f      	add	r7, sp, #188	; 0xbc
 800d5fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d600:	2b80      	cmp	r3, #128	; 0x80
 800d602:	d11f      	bne.n	800d644 <_svfprintf_r+0x7ec>
 800d604:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d606:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d608:	1a9c      	subs	r4, r3, r2
 800d60a:	2c00      	cmp	r4, #0
 800d60c:	dd1a      	ble.n	800d644 <_svfprintf_r+0x7ec>
 800d60e:	0039      	movs	r1, r7
 800d610:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d612:	482d      	ldr	r0, [pc, #180]	; (800d6c8 <_svfprintf_r+0x870>)
 800d614:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d616:	3301      	adds	r3, #1
 800d618:	3108      	adds	r1, #8
 800d61a:	6038      	str	r0, [r7, #0]
 800d61c:	2c10      	cmp	r4, #16
 800d61e:	dd00      	ble.n	800d622 <_svfprintf_r+0x7ca>
 800d620:	e2d6      	b.n	800dbd0 <_svfprintf_r+0xd78>
 800d622:	607c      	str	r4, [r7, #4]
 800d624:	18a4      	adds	r4, r4, r2
 800d626:	000f      	movs	r7, r1
 800d628:	942e      	str	r4, [sp, #184]	; 0xb8
 800d62a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d62c:	2b07      	cmp	r3, #7
 800d62e:	dd09      	ble.n	800d644 <_svfprintf_r+0x7ec>
 800d630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d632:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d634:	aa2c      	add	r2, sp, #176	; 0xb0
 800d636:	f003 fd25 	bl	8011084 <__ssprint_r>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d001      	beq.n	800d642 <_svfprintf_r+0x7ea>
 800d63e:	f000 fdea 	bl	800e216 <_svfprintf_r+0x13be>
 800d642:	af2f      	add	r7, sp, #188	; 0xbc
 800d644:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d648:	1a9c      	subs	r4, r3, r2
 800d64a:	2c00      	cmp	r4, #0
 800d64c:	dd1a      	ble.n	800d684 <_svfprintf_r+0x82c>
 800d64e:	0039      	movs	r1, r7
 800d650:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d652:	481d      	ldr	r0, [pc, #116]	; (800d6c8 <_svfprintf_r+0x870>)
 800d654:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d656:	3301      	adds	r3, #1
 800d658:	3108      	adds	r1, #8
 800d65a:	6038      	str	r0, [r7, #0]
 800d65c:	2c10      	cmp	r4, #16
 800d65e:	dd00      	ble.n	800d662 <_svfprintf_r+0x80a>
 800d660:	e2c9      	b.n	800dbf6 <_svfprintf_r+0xd9e>
 800d662:	18a2      	adds	r2, r4, r2
 800d664:	607c      	str	r4, [r7, #4]
 800d666:	922e      	str	r2, [sp, #184]	; 0xb8
 800d668:	000f      	movs	r7, r1
 800d66a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d66c:	2b07      	cmp	r3, #7
 800d66e:	dd09      	ble.n	800d684 <_svfprintf_r+0x82c>
 800d670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d672:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d674:	aa2c      	add	r2, sp, #176	; 0xb0
 800d676:	f003 fd05 	bl	8011084 <__ssprint_r>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d001      	beq.n	800d682 <_svfprintf_r+0x82a>
 800d67e:	f000 fdca 	bl	800e216 <_svfprintf_r+0x13be>
 800d682:	af2f      	add	r7, sp, #188	; 0xbc
 800d684:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d686:	9319      	str	r3, [sp, #100]	; 0x64
 800d688:	05f3      	lsls	r3, r6, #23
 800d68a:	d500      	bpl.n	800d68e <_svfprintf_r+0x836>
 800d68c:	e2ce      	b.n	800dc2c <_svfprintf_r+0xdd4>
 800d68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d690:	9b08      	ldr	r3, [sp, #32]
 800d692:	4694      	mov	ip, r2
 800d694:	603b      	str	r3, [r7, #0]
 800d696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d698:	607b      	str	r3, [r7, #4]
 800d69a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d69c:	4463      	add	r3, ip
 800d69e:	932e      	str	r3, [sp, #184]	; 0xb8
 800d6a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	932d      	str	r3, [sp, #180]	; 0xb4
 800d6a6:	2b07      	cmp	r3, #7
 800d6a8:	dd00      	ble.n	800d6ac <_svfprintf_r+0x854>
 800d6aa:	e3a3      	b.n	800ddf4 <_svfprintf_r+0xf9c>
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	e301      	b.n	800dcb4 <_svfprintf_r+0xe5c>
 800d6b0:	0801428c 	.word	0x0801428c
 800d6b4:	0801429d 	.word	0x0801429d
 800d6b8:	40300000 	.word	0x40300000
 800d6bc:	3fe00000 	.word	0x3fe00000
 800d6c0:	fffffbff 	.word	0xfffffbff
 800d6c4:	080142b0 	.word	0x080142b0
 800d6c8:	080142c0 	.word	0x080142c0
 800d6cc:	9b08      	ldr	r3, [sp, #32]
 800d6ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d6d0:	e610      	b.n	800d2f4 <_svfprintf_r+0x49c>
 800d6d2:	2306      	movs	r3, #6
 800d6d4:	e5fd      	b.n	800d2d2 <_svfprintf_r+0x47a>
 800d6d6:	930e      	str	r3, [sp, #56]	; 0x38
 800d6d8:	2300      	movs	r3, #0
 800d6da:	e61a      	b.n	800d312 <_svfprintf_r+0x4ba>
 800d6dc:	7010      	strb	r0, [r2, #0]
 800d6de:	e684      	b.n	800d3ea <_svfprintf_r+0x592>
 800d6e0:	7018      	strb	r0, [r3, #0]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	1aca      	subs	r2, r1, r3
 800d6e6:	d5fb      	bpl.n	800d6e0 <_svfprintf_r+0x888>
 800d6e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	3201      	adds	r2, #1
 800d6ee:	db01      	blt.n	800d6f4 <_svfprintf_r+0x89c>
 800d6f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6f6:	18d3      	adds	r3, r2, r3
 800d6f8:	9323      	str	r3, [sp, #140]	; 0x8c
 800d6fa:	e684      	b.n	800d406 <_svfprintf_r+0x5ae>
 800d6fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6fe:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d700:	2030      	movs	r0, #48	; 0x30
 800d702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d704:	1851      	adds	r1, r2, r1
 800d706:	e7ed      	b.n	800d6e4 <_svfprintf_r+0x88c>
 800d708:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d70a:	2303      	movs	r3, #3
 800d70c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d70e:	2a46      	cmp	r2, #70	; 0x46
 800d710:	d006      	beq.n	800d720 <_svfprintf_r+0x8c8>
 800d712:	0014      	movs	r4, r2
 800d714:	3c45      	subs	r4, #69	; 0x45
 800d716:	4262      	negs	r2, r4
 800d718:	4154      	adcs	r4, r2
 800d71a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d71c:	3b01      	subs	r3, #1
 800d71e:	1914      	adds	r4, r2, r4
 800d720:	aa2a      	add	r2, sp, #168	; 0xa8
 800d722:	9204      	str	r2, [sp, #16]
 800d724:	aa27      	add	r2, sp, #156	; 0x9c
 800d726:	9203      	str	r2, [sp, #12]
 800d728:	aa26      	add	r2, sp, #152	; 0x98
 800d72a:	9202      	str	r2, [sp, #8]
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	002a      	movs	r2, r5
 800d730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d732:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d734:	9401      	str	r4, [sp, #4]
 800d736:	f002 fad7 	bl	800fce8 <_dtoa_r>
 800d73a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d73c:	9008      	str	r0, [sp, #32]
 800d73e:	2b47      	cmp	r3, #71	; 0x47
 800d740:	d103      	bne.n	800d74a <_svfprintf_r+0x8f2>
 800d742:	07f3      	lsls	r3, r6, #31
 800d744:	d401      	bmi.n	800d74a <_svfprintf_r+0x8f2>
 800d746:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d748:	e65e      	b.n	800d408 <_svfprintf_r+0x5b0>
 800d74a:	9b08      	ldr	r3, [sp, #32]
 800d74c:	191b      	adds	r3, r3, r4
 800d74e:	9311      	str	r3, [sp, #68]	; 0x44
 800d750:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d752:	2b46      	cmp	r3, #70	; 0x46
 800d754:	d112      	bne.n	800d77c <_svfprintf_r+0x924>
 800d756:	9b08      	ldr	r3, [sp, #32]
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	2b30      	cmp	r3, #48	; 0x30
 800d75c:	d10a      	bne.n	800d774 <_svfprintf_r+0x91c>
 800d75e:	2200      	movs	r2, #0
 800d760:	2300      	movs	r3, #0
 800d762:	0028      	movs	r0, r5
 800d764:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d766:	f7f2 fe6f 	bl	8000448 <__aeabi_dcmpeq>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d102      	bne.n	800d774 <_svfprintf_r+0x91c>
 800d76e:	2301      	movs	r3, #1
 800d770:	1b1b      	subs	r3, r3, r4
 800d772:	9326      	str	r3, [sp, #152]	; 0x98
 800d774:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d776:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d778:	18d3      	adds	r3, r2, r3
 800d77a:	9311      	str	r3, [sp, #68]	; 0x44
 800d77c:	2200      	movs	r2, #0
 800d77e:	2300      	movs	r3, #0
 800d780:	0028      	movs	r0, r5
 800d782:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d784:	f7f2 fe60 	bl	8000448 <__aeabi_dcmpeq>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d001      	beq.n	800d790 <_svfprintf_r+0x938>
 800d78c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d78e:	932a      	str	r3, [sp, #168]	; 0xa8
 800d790:	2230      	movs	r2, #48	; 0x30
 800d792:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d794:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d796:	4299      	cmp	r1, r3
 800d798:	d9d5      	bls.n	800d746 <_svfprintf_r+0x8ee>
 800d79a:	1c59      	adds	r1, r3, #1
 800d79c:	912a      	str	r1, [sp, #168]	; 0xa8
 800d79e:	701a      	strb	r2, [r3, #0]
 800d7a0:	e7f7      	b.n	800d792 <_svfprintf_r+0x93a>
 800d7a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7a4:	2b46      	cmp	r3, #70	; 0x46
 800d7a6:	d000      	beq.n	800d7aa <_svfprintf_r+0x952>
 800d7a8:	e63f      	b.n	800d42a <_svfprintf_r+0x5d2>
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	0033      	movs	r3, r6
 800d7ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	430b      	orrs	r3, r1
 800d7b4:	2d00      	cmp	r5, #0
 800d7b6:	dd2c      	ble.n	800d812 <_svfprintf_r+0x9ba>
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d046      	beq.n	800d84a <_svfprintf_r+0x9f2>
 800d7bc:	000a      	movs	r2, r1
 800d7be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d7c0:	18eb      	adds	r3, r5, r3
 800d7c2:	18d3      	adds	r3, r2, r3
 800d7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c6:	2366      	movs	r3, #102	; 0x66
 800d7c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7ca:	e030      	b.n	800d82e <_svfprintf_r+0x9d6>
 800d7cc:	781c      	ldrb	r4, [r3, #0]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	7014      	strb	r4, [r2, #0]
 800d7d2:	3201      	adds	r2, #1
 800d7d4:	e668      	b.n	800d4a8 <_svfprintf_r+0x650>
 800d7d6:	222a      	movs	r2, #42	; 0x2a
 800d7d8:	ab1e      	add	r3, sp, #120	; 0x78
 800d7da:	18d2      	adds	r2, r2, r3
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d104      	bne.n	800d7ea <_svfprintf_r+0x992>
 800d7e0:	2330      	movs	r3, #48	; 0x30
 800d7e2:	222b      	movs	r2, #43	; 0x2b
 800d7e4:	708b      	strb	r3, [r1, #2]
 800d7e6:	ab1e      	add	r3, sp, #120	; 0x78
 800d7e8:	18d2      	adds	r2, r2, r3
 800d7ea:	3430      	adds	r4, #48	; 0x30
 800d7ec:	1c53      	adds	r3, r2, #1
 800d7ee:	7014      	strb	r4, [r2, #0]
 800d7f0:	e669      	b.n	800d4c6 <_svfprintf_r+0x66e>
 800d7f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7f4:	42ab      	cmp	r3, r5
 800d7f6:	dd12      	ble.n	800d81e <_svfprintf_r+0x9c6>
 800d7f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7fc:	4694      	mov	ip, r2
 800d7fe:	4463      	add	r3, ip
 800d800:	9309      	str	r3, [sp, #36]	; 0x24
 800d802:	2367      	movs	r3, #103	; 0x67
 800d804:	930f      	str	r3, [sp, #60]	; 0x3c
 800d806:	2d00      	cmp	r5, #0
 800d808:	dc11      	bgt.n	800d82e <_svfprintf_r+0x9d6>
 800d80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d80c:	1b5b      	subs	r3, r3, r5
 800d80e:	3301      	adds	r3, #1
 800d810:	e00c      	b.n	800d82c <_svfprintf_r+0x9d4>
 800d812:	2b00      	cmp	r3, #0
 800d814:	d01b      	beq.n	800d84e <_svfprintf_r+0x9f6>
 800d816:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d81a:	3301      	adds	r3, #1
 800d81c:	e7d1      	b.n	800d7c2 <_svfprintf_r+0x96a>
 800d81e:	2367      	movs	r3, #103	; 0x67
 800d820:	9509      	str	r5, [sp, #36]	; 0x24
 800d822:	930f      	str	r3, [sp, #60]	; 0x3c
 800d824:	07f3      	lsls	r3, r6, #31
 800d826:	d502      	bpl.n	800d82e <_svfprintf_r+0x9d6>
 800d828:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d82a:	18eb      	adds	r3, r5, r3
 800d82c:	9309      	str	r3, [sp, #36]	; 0x24
 800d82e:	2380      	movs	r3, #128	; 0x80
 800d830:	0032      	movs	r2, r6
 800d832:	00db      	lsls	r3, r3, #3
 800d834:	401a      	ands	r2, r3
 800d836:	9211      	str	r2, [sp, #68]	; 0x44
 800d838:	2200      	movs	r2, #0
 800d83a:	9210      	str	r2, [sp, #64]	; 0x40
 800d83c:	421e      	tst	r6, r3
 800d83e:	d100      	bne.n	800d842 <_svfprintf_r+0x9ea>
 800d840:	e65d      	b.n	800d4fe <_svfprintf_r+0x6a6>
 800d842:	4295      	cmp	r5, r2
 800d844:	dc25      	bgt.n	800d892 <_svfprintf_r+0xa3a>
 800d846:	9211      	str	r2, [sp, #68]	; 0x44
 800d848:	e659      	b.n	800d4fe <_svfprintf_r+0x6a6>
 800d84a:	9509      	str	r5, [sp, #36]	; 0x24
 800d84c:	e7bb      	b.n	800d7c6 <_svfprintf_r+0x96e>
 800d84e:	2366      	movs	r3, #102	; 0x66
 800d850:	9209      	str	r2, [sp, #36]	; 0x24
 800d852:	930f      	str	r3, [sp, #60]	; 0x3c
 800d854:	e7eb      	b.n	800d82e <_svfprintf_r+0x9d6>
 800d856:	42ab      	cmp	r3, r5
 800d858:	da0e      	bge.n	800d878 <_svfprintf_r+0xa20>
 800d85a:	1aed      	subs	r5, r5, r3
 800d85c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d85e:	785b      	ldrb	r3, [r3, #1]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d012      	beq.n	800d88a <_svfprintf_r+0xa32>
 800d864:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d866:	3301      	adds	r3, #1
 800d868:	9311      	str	r3, [sp, #68]	; 0x44
 800d86a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d86c:	3301      	adds	r3, #1
 800d86e:	9312      	str	r3, [sp, #72]	; 0x48
 800d870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2bff      	cmp	r3, #255	; 0xff
 800d876:	d1ee      	bne.n	800d856 <_svfprintf_r+0x9fe>
 800d878:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d87a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d87c:	189b      	adds	r3, r3, r2
 800d87e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d880:	4353      	muls	r3, r2
 800d882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d884:	189b      	adds	r3, r3, r2
 800d886:	9309      	str	r3, [sp, #36]	; 0x24
 800d888:	e639      	b.n	800d4fe <_svfprintf_r+0x6a6>
 800d88a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d88c:	3301      	adds	r3, #1
 800d88e:	9310      	str	r3, [sp, #64]	; 0x40
 800d890:	e7ee      	b.n	800d870 <_svfprintf_r+0xa18>
 800d892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d894:	9311      	str	r3, [sp, #68]	; 0x44
 800d896:	e7eb      	b.n	800d870 <_svfprintf_r+0xa18>
 800d898:	1d23      	adds	r3, r4, #4
 800d89a:	930d      	str	r3, [sp, #52]	; 0x34
 800d89c:	06b3      	lsls	r3, r6, #26
 800d89e:	d509      	bpl.n	800d8b4 <_svfprintf_r+0xa5c>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	17d2      	asrs	r2, r2, #31
 800d8a8:	605a      	str	r2, [r3, #4]
 800d8aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d8ae:	9308      	str	r3, [sp, #32]
 800d8b0:	f7ff fb0d 	bl	800cece <_svfprintf_r+0x76>
 800d8b4:	06f3      	lsls	r3, r6, #27
 800d8b6:	d503      	bpl.n	800d8c0 <_svfprintf_r+0xa68>
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8bc:	601a      	str	r2, [r3, #0]
 800d8be:	e7f4      	b.n	800d8aa <_svfprintf_r+0xa52>
 800d8c0:	0673      	lsls	r3, r6, #25
 800d8c2:	d503      	bpl.n	800d8cc <_svfprintf_r+0xa74>
 800d8c4:	6823      	ldr	r3, [r4, #0]
 800d8c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8c8:	801a      	strh	r2, [r3, #0]
 800d8ca:	e7ee      	b.n	800d8aa <_svfprintf_r+0xa52>
 800d8cc:	05b6      	lsls	r6, r6, #22
 800d8ce:	d5f3      	bpl.n	800d8b8 <_svfprintf_r+0xa60>
 800d8d0:	6823      	ldr	r3, [r4, #0]
 800d8d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8d4:	701a      	strb	r2, [r3, #0]
 800d8d6:	e7e8      	b.n	800d8aa <_svfprintf_r+0xa52>
 800d8d8:	2310      	movs	r3, #16
 800d8da:	431e      	orrs	r6, r3
 800d8dc:	2320      	movs	r3, #32
 800d8de:	0030      	movs	r0, r6
 800d8e0:	4018      	ands	r0, r3
 800d8e2:	421e      	tst	r6, r3
 800d8e4:	d00f      	beq.n	800d906 <_svfprintf_r+0xaae>
 800d8e6:	3b19      	subs	r3, #25
 800d8e8:	3407      	adds	r4, #7
 800d8ea:	439c      	bics	r4, r3
 800d8ec:	0022      	movs	r2, r4
 800d8ee:	ca18      	ldmia	r2!, {r3, r4}
 800d8f0:	9306      	str	r3, [sp, #24]
 800d8f2:	9407      	str	r4, [sp, #28]
 800d8f4:	920d      	str	r2, [sp, #52]	; 0x34
 800d8f6:	4bc9      	ldr	r3, [pc, #804]	; (800dc1c <_svfprintf_r+0xdc4>)
 800d8f8:	401e      	ands	r6, r3
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	221b      	movs	r2, #27
 800d8fe:	a91e      	add	r1, sp, #120	; 0x78
 800d900:	1852      	adds	r2, r2, r1
 800d902:	2100      	movs	r1, #0
 800d904:	e430      	b.n	800d168 <_svfprintf_r+0x310>
 800d906:	0022      	movs	r2, r4
 800d908:	ca08      	ldmia	r2!, {r3}
 800d90a:	0031      	movs	r1, r6
 800d90c:	920d      	str	r2, [sp, #52]	; 0x34
 800d90e:	2210      	movs	r2, #16
 800d910:	4011      	ands	r1, r2
 800d912:	4216      	tst	r6, r2
 800d914:	d002      	beq.n	800d91c <_svfprintf_r+0xac4>
 800d916:	9306      	str	r3, [sp, #24]
 800d918:	9007      	str	r0, [sp, #28]
 800d91a:	e7ec      	b.n	800d8f6 <_svfprintf_r+0xa9e>
 800d91c:	2240      	movs	r2, #64	; 0x40
 800d91e:	0030      	movs	r0, r6
 800d920:	4010      	ands	r0, r2
 800d922:	4216      	tst	r6, r2
 800d924:	d003      	beq.n	800d92e <_svfprintf_r+0xad6>
 800d926:	b29b      	uxth	r3, r3
 800d928:	9306      	str	r3, [sp, #24]
 800d92a:	9107      	str	r1, [sp, #28]
 800d92c:	e7e3      	b.n	800d8f6 <_svfprintf_r+0xa9e>
 800d92e:	2280      	movs	r2, #128	; 0x80
 800d930:	0031      	movs	r1, r6
 800d932:	0092      	lsls	r2, r2, #2
 800d934:	4011      	ands	r1, r2
 800d936:	4216      	tst	r6, r2
 800d938:	d0f6      	beq.n	800d928 <_svfprintf_r+0xad0>
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	e7eb      	b.n	800d916 <_svfprintf_r+0xabe>
 800d93e:	0023      	movs	r3, r4
 800d940:	cb04      	ldmia	r3!, {r2}
 800d942:	49b7      	ldr	r1, [pc, #732]	; (800dc20 <_svfprintf_r+0xdc8>)
 800d944:	9206      	str	r2, [sp, #24]
 800d946:	aa25      	add	r2, sp, #148	; 0x94
 800d948:	8011      	strh	r1, [r2, #0]
 800d94a:	4ab6      	ldr	r2, [pc, #728]	; (800dc24 <_svfprintf_r+0xdcc>)
 800d94c:	930d      	str	r3, [sp, #52]	; 0x34
 800d94e:	2300      	movs	r3, #0
 800d950:	921f      	str	r2, [sp, #124]	; 0x7c
 800d952:	2278      	movs	r2, #120	; 0x78
 800d954:	9307      	str	r3, [sp, #28]
 800d956:	3302      	adds	r3, #2
 800d958:	431e      	orrs	r6, r3
 800d95a:	920f      	str	r2, [sp, #60]	; 0x3c
 800d95c:	e7ce      	b.n	800d8fc <_svfprintf_r+0xaa4>
 800d95e:	0023      	movs	r3, r4
 800d960:	cb04      	ldmia	r3!, {r2}
 800d962:	2400      	movs	r4, #0
 800d964:	930d      	str	r3, [sp, #52]	; 0x34
 800d966:	231b      	movs	r3, #27
 800d968:	9208      	str	r2, [sp, #32]
 800d96a:	aa1e      	add	r2, sp, #120	; 0x78
 800d96c:	189b      	adds	r3, r3, r2
 800d96e:	701c      	strb	r4, [r3, #0]
 800d970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d972:	3301      	adds	r3, #1
 800d974:	d00e      	beq.n	800d994 <_svfprintf_r+0xb3c>
 800d976:	0021      	movs	r1, r4
 800d978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d97a:	9808      	ldr	r0, [sp, #32]
 800d97c:	f002 f83a 	bl	800f9f4 <memchr>
 800d980:	900c      	str	r0, [sp, #48]	; 0x30
 800d982:	42a0      	cmp	r0, r4
 800d984:	d100      	bne.n	800d988 <_svfprintf_r+0xb30>
 800d986:	e10d      	b.n	800dba4 <_svfprintf_r+0xd4c>
 800d988:	9a08      	ldr	r2, [sp, #32]
 800d98a:	1a83      	subs	r3, r0, r2
 800d98c:	9309      	str	r3, [sp, #36]	; 0x24
 800d98e:	0023      	movs	r3, r4
 800d990:	940c      	str	r4, [sp, #48]	; 0x30
 800d992:	e44e      	b.n	800d232 <_svfprintf_r+0x3da>
 800d994:	9808      	ldr	r0, [sp, #32]
 800d996:	f7f2 fbb5 	bl	8000104 <strlen>
 800d99a:	9009      	str	r0, [sp, #36]	; 0x24
 800d99c:	e7f7      	b.n	800d98e <_svfprintf_r+0xb36>
 800d99e:	2310      	movs	r3, #16
 800d9a0:	431e      	orrs	r6, r3
 800d9a2:	2320      	movs	r3, #32
 800d9a4:	0030      	movs	r0, r6
 800d9a6:	4018      	ands	r0, r3
 800d9a8:	421e      	tst	r6, r3
 800d9aa:	d009      	beq.n	800d9c0 <_svfprintf_r+0xb68>
 800d9ac:	3b19      	subs	r3, #25
 800d9ae:	3407      	adds	r4, #7
 800d9b0:	439c      	bics	r4, r3
 800d9b2:	0022      	movs	r2, r4
 800d9b4:	ca18      	ldmia	r2!, {r3, r4}
 800d9b6:	9306      	str	r3, [sp, #24]
 800d9b8:	9407      	str	r4, [sp, #28]
 800d9ba:	920d      	str	r2, [sp, #52]	; 0x34
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e79d      	b.n	800d8fc <_svfprintf_r+0xaa4>
 800d9c0:	0023      	movs	r3, r4
 800d9c2:	cb04      	ldmia	r3!, {r2}
 800d9c4:	0031      	movs	r1, r6
 800d9c6:	930d      	str	r3, [sp, #52]	; 0x34
 800d9c8:	2310      	movs	r3, #16
 800d9ca:	4019      	ands	r1, r3
 800d9cc:	421e      	tst	r6, r3
 800d9ce:	d003      	beq.n	800d9d8 <_svfprintf_r+0xb80>
 800d9d0:	9206      	str	r2, [sp, #24]
 800d9d2:	9007      	str	r0, [sp, #28]
 800d9d4:	3b0f      	subs	r3, #15
 800d9d6:	e791      	b.n	800d8fc <_svfprintf_r+0xaa4>
 800d9d8:	2340      	movs	r3, #64	; 0x40
 800d9da:	0030      	movs	r0, r6
 800d9dc:	4018      	ands	r0, r3
 800d9de:	421e      	tst	r6, r3
 800d9e0:	d003      	beq.n	800d9ea <_svfprintf_r+0xb92>
 800d9e2:	b293      	uxth	r3, r2
 800d9e4:	9306      	str	r3, [sp, #24]
 800d9e6:	9107      	str	r1, [sp, #28]
 800d9e8:	e7e8      	b.n	800d9bc <_svfprintf_r+0xb64>
 800d9ea:	2380      	movs	r3, #128	; 0x80
 800d9ec:	0031      	movs	r1, r6
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	4019      	ands	r1, r3
 800d9f2:	421e      	tst	r6, r3
 800d9f4:	d003      	beq.n	800d9fe <_svfprintf_r+0xba6>
 800d9f6:	b2d3      	uxtb	r3, r2
 800d9f8:	9306      	str	r3, [sp, #24]
 800d9fa:	9007      	str	r0, [sp, #28]
 800d9fc:	e7de      	b.n	800d9bc <_svfprintf_r+0xb64>
 800d9fe:	9206      	str	r2, [sp, #24]
 800da00:	e7f1      	b.n	800d9e6 <_svfprintf_r+0xb8e>
 800da02:	4b89      	ldr	r3, [pc, #548]	; (800dc28 <_svfprintf_r+0xdd0>)
 800da04:	0030      	movs	r0, r6
 800da06:	931f      	str	r3, [sp, #124]	; 0x7c
 800da08:	2320      	movs	r3, #32
 800da0a:	4018      	ands	r0, r3
 800da0c:	421e      	tst	r6, r3
 800da0e:	d01a      	beq.n	800da46 <_svfprintf_r+0xbee>
 800da10:	3b19      	subs	r3, #25
 800da12:	3407      	adds	r4, #7
 800da14:	439c      	bics	r4, r3
 800da16:	0022      	movs	r2, r4
 800da18:	ca18      	ldmia	r2!, {r3, r4}
 800da1a:	9306      	str	r3, [sp, #24]
 800da1c:	9407      	str	r4, [sp, #28]
 800da1e:	920d      	str	r2, [sp, #52]	; 0x34
 800da20:	07f3      	lsls	r3, r6, #31
 800da22:	d50a      	bpl.n	800da3a <_svfprintf_r+0xbe2>
 800da24:	9b06      	ldr	r3, [sp, #24]
 800da26:	9a07      	ldr	r2, [sp, #28]
 800da28:	4313      	orrs	r3, r2
 800da2a:	d006      	beq.n	800da3a <_svfprintf_r+0xbe2>
 800da2c:	2230      	movs	r2, #48	; 0x30
 800da2e:	ab25      	add	r3, sp, #148	; 0x94
 800da30:	701a      	strb	r2, [r3, #0]
 800da32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da34:	705a      	strb	r2, [r3, #1]
 800da36:	2302      	movs	r3, #2
 800da38:	431e      	orrs	r6, r3
 800da3a:	4b78      	ldr	r3, [pc, #480]	; (800dc1c <_svfprintf_r+0xdc4>)
 800da3c:	401e      	ands	r6, r3
 800da3e:	2302      	movs	r3, #2
 800da40:	e75c      	b.n	800d8fc <_svfprintf_r+0xaa4>
 800da42:	4b78      	ldr	r3, [pc, #480]	; (800dc24 <_svfprintf_r+0xdcc>)
 800da44:	e7de      	b.n	800da04 <_svfprintf_r+0xbac>
 800da46:	0023      	movs	r3, r4
 800da48:	cb04      	ldmia	r3!, {r2}
 800da4a:	0031      	movs	r1, r6
 800da4c:	930d      	str	r3, [sp, #52]	; 0x34
 800da4e:	2310      	movs	r3, #16
 800da50:	4019      	ands	r1, r3
 800da52:	421e      	tst	r6, r3
 800da54:	d002      	beq.n	800da5c <_svfprintf_r+0xc04>
 800da56:	9206      	str	r2, [sp, #24]
 800da58:	9007      	str	r0, [sp, #28]
 800da5a:	e7e1      	b.n	800da20 <_svfprintf_r+0xbc8>
 800da5c:	2340      	movs	r3, #64	; 0x40
 800da5e:	0030      	movs	r0, r6
 800da60:	4018      	ands	r0, r3
 800da62:	421e      	tst	r6, r3
 800da64:	d003      	beq.n	800da6e <_svfprintf_r+0xc16>
 800da66:	b293      	uxth	r3, r2
 800da68:	9306      	str	r3, [sp, #24]
 800da6a:	9107      	str	r1, [sp, #28]
 800da6c:	e7d8      	b.n	800da20 <_svfprintf_r+0xbc8>
 800da6e:	2380      	movs	r3, #128	; 0x80
 800da70:	0031      	movs	r1, r6
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4019      	ands	r1, r3
 800da76:	421e      	tst	r6, r3
 800da78:	d002      	beq.n	800da80 <_svfprintf_r+0xc28>
 800da7a:	b2d3      	uxtb	r3, r2
 800da7c:	9306      	str	r3, [sp, #24]
 800da7e:	e7eb      	b.n	800da58 <_svfprintf_r+0xc00>
 800da80:	9206      	str	r2, [sp, #24]
 800da82:	e7f2      	b.n	800da6a <_svfprintf_r+0xc12>
 800da84:	9b07      	ldr	r3, [sp, #28]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10a      	bne.n	800daa0 <_svfprintf_r+0xc48>
 800da8a:	9b06      	ldr	r3, [sp, #24]
 800da8c:	2b09      	cmp	r3, #9
 800da8e:	d807      	bhi.n	800daa0 <_svfprintf_r+0xc48>
 800da90:	23e7      	movs	r3, #231	; 0xe7
 800da92:	aa1e      	add	r2, sp, #120	; 0x78
 800da94:	189b      	adds	r3, r3, r2
 800da96:	9a06      	ldr	r2, [sp, #24]
 800da98:	3230      	adds	r2, #48	; 0x30
 800da9a:	701a      	strb	r2, [r3, #0]
 800da9c:	f000 fc18 	bl	800e2d0 <_svfprintf_r+0x1478>
 800daa0:	2680      	movs	r6, #128	; 0x80
 800daa2:	2300      	movs	r3, #0
 800daa4:	00f6      	lsls	r6, r6, #3
 800daa6:	930e      	str	r3, [sp, #56]	; 0x38
 800daa8:	ad58      	add	r5, sp, #352	; 0x160
 800daaa:	4026      	ands	r6, r4
 800daac:	220a      	movs	r2, #10
 800daae:	9806      	ldr	r0, [sp, #24]
 800dab0:	9907      	ldr	r1, [sp, #28]
 800dab2:	2300      	movs	r3, #0
 800dab4:	f7f2 fcf6 	bl	80004a4 <__aeabi_uldivmod>
 800dab8:	1e6b      	subs	r3, r5, #1
 800daba:	3230      	adds	r2, #48	; 0x30
 800dabc:	9308      	str	r3, [sp, #32]
 800dabe:	701a      	strb	r2, [r3, #0]
 800dac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dac2:	900c      	str	r0, [sp, #48]	; 0x30
 800dac4:	3301      	adds	r3, #1
 800dac6:	9110      	str	r1, [sp, #64]	; 0x40
 800dac8:	930e      	str	r3, [sp, #56]	; 0x38
 800daca:	2e00      	cmp	r6, #0
 800dacc:	d01d      	beq.n	800db0a <_svfprintf_r+0xcb2>
 800dace:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d118      	bne.n	800db0a <_svfprintf_r+0xcb2>
 800dad8:	2aff      	cmp	r2, #255	; 0xff
 800dada:	d016      	beq.n	800db0a <_svfprintf_r+0xcb2>
 800dadc:	9b07      	ldr	r3, [sp, #28]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d102      	bne.n	800dae8 <_svfprintf_r+0xc90>
 800dae2:	9b06      	ldr	r3, [sp, #24]
 800dae4:	2b09      	cmp	r3, #9
 800dae6:	d910      	bls.n	800db0a <_svfprintf_r+0xcb2>
 800dae8:	9b08      	ldr	r3, [sp, #32]
 800daea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800daec:	991d      	ldr	r1, [sp, #116]	; 0x74
 800daee:	1a9b      	subs	r3, r3, r2
 800daf0:	0018      	movs	r0, r3
 800daf2:	9308      	str	r3, [sp, #32]
 800daf4:	f7fd ffd1 	bl	800ba9a <strncpy>
 800daf8:	2200      	movs	r2, #0
 800dafa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dafc:	920e      	str	r2, [sp, #56]	; 0x38
 800dafe:	785b      	ldrb	r3, [r3, #1]
 800db00:	1e5a      	subs	r2, r3, #1
 800db02:	4193      	sbcs	r3, r2
 800db04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db06:	18d3      	adds	r3, r2, r3
 800db08:	9312      	str	r3, [sp, #72]	; 0x48
 800db0a:	9b07      	ldr	r3, [sp, #28]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10f      	bne.n	800db30 <_svfprintf_r+0xcd8>
 800db10:	9b06      	ldr	r3, [sp, #24]
 800db12:	2b09      	cmp	r3, #9
 800db14:	d80c      	bhi.n	800db30 <_svfprintf_r+0xcd8>
 800db16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db18:	9a08      	ldr	r2, [sp, #32]
 800db1a:	9319      	str	r3, [sp, #100]	; 0x64
 800db1c:	ab58      	add	r3, sp, #352	; 0x160
 800db1e:	1a9b      	subs	r3, r3, r2
 800db20:	9309      	str	r3, [sp, #36]	; 0x24
 800db22:	2300      	movs	r3, #0
 800db24:	0026      	movs	r6, r4
 800db26:	930c      	str	r3, [sp, #48]	; 0x30
 800db28:	001d      	movs	r5, r3
 800db2a:	9310      	str	r3, [sp, #64]	; 0x40
 800db2c:	9311      	str	r3, [sp, #68]	; 0x44
 800db2e:	e4f2      	b.n	800d516 <_svfprintf_r+0x6be>
 800db30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db32:	9d08      	ldr	r5, [sp, #32]
 800db34:	9306      	str	r3, [sp, #24]
 800db36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db38:	9307      	str	r3, [sp, #28]
 800db3a:	e7b7      	b.n	800daac <_svfprintf_r+0xc54>
 800db3c:	200f      	movs	r0, #15
 800db3e:	ab58      	add	r3, sp, #352	; 0x160
 800db40:	9308      	str	r3, [sp, #32]
 800db42:	9b08      	ldr	r3, [sp, #32]
 800db44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800db46:	3b01      	subs	r3, #1
 800db48:	9308      	str	r3, [sp, #32]
 800db4a:	9b06      	ldr	r3, [sp, #24]
 800db4c:	4003      	ands	r3, r0
 800db4e:	5cd3      	ldrb	r3, [r2, r3]
 800db50:	9a08      	ldr	r2, [sp, #32]
 800db52:	7013      	strb	r3, [r2, #0]
 800db54:	9b07      	ldr	r3, [sp, #28]
 800db56:	0719      	lsls	r1, r3, #28
 800db58:	9b06      	ldr	r3, [sp, #24]
 800db5a:	091a      	lsrs	r2, r3, #4
 800db5c:	9b07      	ldr	r3, [sp, #28]
 800db5e:	4311      	orrs	r1, r2
 800db60:	091b      	lsrs	r3, r3, #4
 800db62:	9307      	str	r3, [sp, #28]
 800db64:	000b      	movs	r3, r1
 800db66:	9a07      	ldr	r2, [sp, #28]
 800db68:	9106      	str	r1, [sp, #24]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	d1e9      	bne.n	800db42 <_svfprintf_r+0xcea>
 800db6e:	e7d2      	b.n	800db16 <_svfprintf_r+0xcbe>
 800db70:	aa58      	add	r2, sp, #352	; 0x160
 800db72:	9208      	str	r2, [sp, #32]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1ce      	bne.n	800db16 <_svfprintf_r+0xcbe>
 800db78:	07f6      	lsls	r6, r6, #31
 800db7a:	d5cc      	bpl.n	800db16 <_svfprintf_r+0xcbe>
 800db7c:	aa1e      	add	r2, sp, #120	; 0x78
 800db7e:	33e7      	adds	r3, #231	; 0xe7
 800db80:	189b      	adds	r3, r3, r2
 800db82:	2230      	movs	r2, #48	; 0x30
 800db84:	e789      	b.n	800da9a <_svfprintf_r+0xc42>
 800db86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d100      	bne.n	800db8e <_svfprintf_r+0xd36>
 800db8c:	e364      	b.n	800e258 <_svfprintf_r+0x1400>
 800db8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db90:	211b      	movs	r1, #27
 800db92:	ab3f      	add	r3, sp, #252	; 0xfc
 800db94:	701a      	strb	r2, [r3, #0]
 800db96:	2200      	movs	r2, #0
 800db98:	a81e      	add	r0, sp, #120	; 0x78
 800db9a:	1809      	adds	r1, r1, r0
 800db9c:	700a      	strb	r2, [r1, #0]
 800db9e:	940d      	str	r4, [sp, #52]	; 0x34
 800dba0:	f7ff fabd 	bl	800d11e <_svfprintf_r+0x2c6>
 800dba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dba6:	f7ff fb44 	bl	800d232 <_svfprintf_r+0x3da>
 800dbaa:	2010      	movs	r0, #16
 800dbac:	1812      	adds	r2, r2, r0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	922e      	str	r2, [sp, #184]	; 0xb8
 800dbb2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dbb4:	2b07      	cmp	r3, #7
 800dbb6:	dd08      	ble.n	800dbca <_svfprintf_r+0xd72>
 800dbb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbbc:	aa2c      	add	r2, sp, #176	; 0xb0
 800dbbe:	f003 fa61 	bl	8011084 <__ssprint_r>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d000      	beq.n	800dbc8 <_svfprintf_r+0xd70>
 800dbc6:	e326      	b.n	800e216 <_svfprintf_r+0x13be>
 800dbc8:	a92f      	add	r1, sp, #188	; 0xbc
 800dbca:	000f      	movs	r7, r1
 800dbcc:	3c10      	subs	r4, #16
 800dbce:	e4c5      	b.n	800d55c <_svfprintf_r+0x704>
 800dbd0:	2010      	movs	r0, #16
 800dbd2:	1812      	adds	r2, r2, r0
 800dbd4:	6078      	str	r0, [r7, #4]
 800dbd6:	922e      	str	r2, [sp, #184]	; 0xb8
 800dbd8:	932d      	str	r3, [sp, #180]	; 0xb4
 800dbda:	2b07      	cmp	r3, #7
 800dbdc:	dd08      	ble.n	800dbf0 <_svfprintf_r+0xd98>
 800dbde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbe0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbe2:	aa2c      	add	r2, sp, #176	; 0xb0
 800dbe4:	f003 fa4e 	bl	8011084 <__ssprint_r>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d000      	beq.n	800dbee <_svfprintf_r+0xd96>
 800dbec:	e313      	b.n	800e216 <_svfprintf_r+0x13be>
 800dbee:	a92f      	add	r1, sp, #188	; 0xbc
 800dbf0:	000f      	movs	r7, r1
 800dbf2:	3c10      	subs	r4, #16
 800dbf4:	e50b      	b.n	800d60e <_svfprintf_r+0x7b6>
 800dbf6:	2010      	movs	r0, #16
 800dbf8:	1812      	adds	r2, r2, r0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	922e      	str	r2, [sp, #184]	; 0xb8
 800dbfe:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc00:	2b07      	cmp	r3, #7
 800dc02:	dd08      	ble.n	800dc16 <_svfprintf_r+0xdbe>
 800dc04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc08:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc0a:	f003 fa3b 	bl	8011084 <__ssprint_r>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d000      	beq.n	800dc14 <_svfprintf_r+0xdbc>
 800dc12:	e300      	b.n	800e216 <_svfprintf_r+0x13be>
 800dc14:	a92f      	add	r1, sp, #188	; 0xbc
 800dc16:	000f      	movs	r7, r1
 800dc18:	3c10      	subs	r4, #16
 800dc1a:	e518      	b.n	800d64e <_svfprintf_r+0x7f6>
 800dc1c:	fffffbff 	.word	0xfffffbff
 800dc20:	00007830 	.word	0x00007830
 800dc24:	0801428c 	.word	0x0801428c
 800dc28:	0801429d 	.word	0x0801429d
 800dc2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc2e:	2b65      	cmp	r3, #101	; 0x65
 800dc30:	dc00      	bgt.n	800dc34 <_svfprintf_r+0xddc>
 800dc32:	e241      	b.n	800e0b8 <_svfprintf_r+0x1260>
 800dc34:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dc36:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dc38:	2200      	movs	r2, #0
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	f7f2 fc04 	bl	8000448 <__aeabi_dcmpeq>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d077      	beq.n	800dd34 <_svfprintf_r+0xedc>
 800dc44:	4bca      	ldr	r3, [pc, #808]	; (800df70 <_svfprintf_r+0x1118>)
 800dc46:	603b      	str	r3, [r7, #0]
 800dc48:	2301      	movs	r3, #1
 800dc4a:	607b      	str	r3, [r7, #4]
 800dc4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc4e:	3708      	adds	r7, #8
 800dc50:	3301      	adds	r3, #1
 800dc52:	932e      	str	r3, [sp, #184]	; 0xb8
 800dc54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc56:	3301      	adds	r3, #1
 800dc58:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc5a:	2b07      	cmp	r3, #7
 800dc5c:	dd08      	ble.n	800dc70 <_svfprintf_r+0xe18>
 800dc5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc62:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc64:	f003 fa0e 	bl	8011084 <__ssprint_r>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	d000      	beq.n	800dc6e <_svfprintf_r+0xe16>
 800dc6c:	e2d3      	b.n	800e216 <_svfprintf_r+0x13be>
 800dc6e:	af2f      	add	r7, sp, #188	; 0xbc
 800dc70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dc72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc74:	4293      	cmp	r3, r2
 800dc76:	db01      	blt.n	800dc7c <_svfprintf_r+0xe24>
 800dc78:	07f3      	lsls	r3, r6, #31
 800dc7a:	d51b      	bpl.n	800dcb4 <_svfprintf_r+0xe5c>
 800dc7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dc7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc80:	603b      	str	r3, [r7, #0]
 800dc82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc84:	607b      	str	r3, [r7, #4]
 800dc86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dc88:	3708      	adds	r7, #8
 800dc8a:	189b      	adds	r3, r3, r2
 800dc8c:	932e      	str	r3, [sp, #184]	; 0xb8
 800dc8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc90:	3301      	adds	r3, #1
 800dc92:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc94:	2b07      	cmp	r3, #7
 800dc96:	dd08      	ble.n	800dcaa <_svfprintf_r+0xe52>
 800dc98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc9c:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc9e:	f003 f9f1 	bl	8011084 <__ssprint_r>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d000      	beq.n	800dca8 <_svfprintf_r+0xe50>
 800dca6:	e2b6      	b.n	800e216 <_svfprintf_r+0x13be>
 800dca8:	af2f      	add	r7, sp, #188	; 0xbc
 800dcaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcac:	2510      	movs	r5, #16
 800dcae:	1e5c      	subs	r4, r3, #1
 800dcb0:	2c00      	cmp	r4, #0
 800dcb2:	dc2e      	bgt.n	800dd12 <_svfprintf_r+0xeba>
 800dcb4:	0776      	lsls	r6, r6, #29
 800dcb6:	d500      	bpl.n	800dcba <_svfprintf_r+0xe62>
 800dcb8:	e290      	b.n	800e1dc <_svfprintf_r+0x1384>
 800dcba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dcbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	da00      	bge.n	800dcc4 <_svfprintf_r+0xe6c>
 800dcc2:	0013      	movs	r3, r2
 800dcc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dcc6:	18d3      	adds	r3, r2, r3
 800dcc8:	9317      	str	r3, [sp, #92]	; 0x5c
 800dcca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d007      	beq.n	800dce0 <_svfprintf_r+0xe88>
 800dcd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcd4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcd6:	f003 f9d5 	bl	8011084 <__ssprint_r>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d000      	beq.n	800dce0 <_svfprintf_r+0xe88>
 800dcde:	e29a      	b.n	800e216 <_svfprintf_r+0x13be>
 800dce0:	2300      	movs	r3, #0
 800dce2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d000      	beq.n	800dcec <_svfprintf_r+0xe94>
 800dcea:	e2b0      	b.n	800e24e <_svfprintf_r+0x13f6>
 800dcec:	af2f      	add	r7, sp, #188	; 0xbc
 800dcee:	e5dc      	b.n	800d8aa <_svfprintf_r+0xa52>
 800dcf0:	3210      	adds	r2, #16
 800dcf2:	607d      	str	r5, [r7, #4]
 800dcf4:	922e      	str	r2, [sp, #184]	; 0xb8
 800dcf6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcf8:	2b07      	cmp	r3, #7
 800dcfa:	dd08      	ble.n	800dd0e <_svfprintf_r+0xeb6>
 800dcfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd00:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd02:	f003 f9bf 	bl	8011084 <__ssprint_r>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d000      	beq.n	800dd0c <_svfprintf_r+0xeb4>
 800dd0a:	e284      	b.n	800e216 <_svfprintf_r+0x13be>
 800dd0c:	a92f      	add	r1, sp, #188	; 0xbc
 800dd0e:	000f      	movs	r7, r1
 800dd10:	3c10      	subs	r4, #16
 800dd12:	0039      	movs	r1, r7
 800dd14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd16:	4897      	ldr	r0, [pc, #604]	; (800df74 <_svfprintf_r+0x111c>)
 800dd18:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	3108      	adds	r1, #8
 800dd1e:	6038      	str	r0, [r7, #0]
 800dd20:	2c10      	cmp	r4, #16
 800dd22:	dce5      	bgt.n	800dcf0 <_svfprintf_r+0xe98>
 800dd24:	607c      	str	r4, [r7, #4]
 800dd26:	18a4      	adds	r4, r4, r2
 800dd28:	942e      	str	r4, [sp, #184]	; 0xb8
 800dd2a:	000f      	movs	r7, r1
 800dd2c:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd2e:	2b07      	cmp	r3, #7
 800dd30:	ddc0      	ble.n	800dcb4 <_svfprintf_r+0xe5c>
 800dd32:	e05f      	b.n	800ddf4 <_svfprintf_r+0xf9c>
 800dd34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	dc78      	bgt.n	800de2c <_svfprintf_r+0xfd4>
 800dd3a:	4b8d      	ldr	r3, [pc, #564]	; (800df70 <_svfprintf_r+0x1118>)
 800dd3c:	603b      	str	r3, [r7, #0]
 800dd3e:	2301      	movs	r3, #1
 800dd40:	607b      	str	r3, [r7, #4]
 800dd42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd44:	3708      	adds	r7, #8
 800dd46:	3301      	adds	r3, #1
 800dd48:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd50:	2b07      	cmp	r3, #7
 800dd52:	dd08      	ble.n	800dd66 <_svfprintf_r+0xf0e>
 800dd54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd58:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd5a:	f003 f993 	bl	8011084 <__ssprint_r>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d000      	beq.n	800dd64 <_svfprintf_r+0xf0c>
 800dd62:	e258      	b.n	800e216 <_svfprintf_r+0x13be>
 800dd64:	af2f      	add	r7, sp, #188	; 0xbc
 800dd66:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dd68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd6a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd6c:	430b      	orrs	r3, r1
 800dd6e:	2101      	movs	r1, #1
 800dd70:	4031      	ands	r1, r6
 800dd72:	430b      	orrs	r3, r1
 800dd74:	d09e      	beq.n	800dcb4 <_svfprintf_r+0xe5c>
 800dd76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dd78:	603b      	str	r3, [r7, #0]
 800dd7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dd7c:	607b      	str	r3, [r7, #4]
 800dd7e:	189a      	adds	r2, r3, r2
 800dd80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd82:	922e      	str	r2, [sp, #184]	; 0xb8
 800dd84:	3301      	adds	r3, #1
 800dd86:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd88:	3708      	adds	r7, #8
 800dd8a:	2b07      	cmp	r3, #7
 800dd8c:	dd08      	ble.n	800dda0 <_svfprintf_r+0xf48>
 800dd8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd92:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd94:	f003 f976 	bl	8011084 <__ssprint_r>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d000      	beq.n	800dd9e <_svfprintf_r+0xf46>
 800dd9c:	e23b      	b.n	800e216 <_svfprintf_r+0x13be>
 800dd9e:	af2f      	add	r7, sp, #188	; 0xbc
 800dda0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dda2:	2c00      	cmp	r4, #0
 800dda4:	da19      	bge.n	800ddda <_svfprintf_r+0xf82>
 800dda6:	0038      	movs	r0, r7
 800dda8:	2510      	movs	r5, #16
 800ddaa:	4264      	negs	r4, r4
 800ddac:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ddae:	4a71      	ldr	r2, [pc, #452]	; (800df74 <_svfprintf_r+0x111c>)
 800ddb0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ddb2:	3101      	adds	r1, #1
 800ddb4:	3708      	adds	r7, #8
 800ddb6:	6002      	str	r2, [r0, #0]
 800ddb8:	2c10      	cmp	r4, #16
 800ddba:	dc25      	bgt.n	800de08 <_svfprintf_r+0xfb0>
 800ddbc:	6044      	str	r4, [r0, #4]
 800ddbe:	18e4      	adds	r4, r4, r3
 800ddc0:	942e      	str	r4, [sp, #184]	; 0xb8
 800ddc2:	912d      	str	r1, [sp, #180]	; 0xb4
 800ddc4:	2907      	cmp	r1, #7
 800ddc6:	dd08      	ble.n	800ddda <_svfprintf_r+0xf82>
 800ddc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddcc:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddce:	f003 f959 	bl	8011084 <__ssprint_r>
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d000      	beq.n	800ddd8 <_svfprintf_r+0xf80>
 800ddd6:	e21e      	b.n	800e216 <_svfprintf_r+0x13be>
 800ddd8:	af2f      	add	r7, sp, #188	; 0xbc
 800ddda:	9b08      	ldr	r3, [sp, #32]
 800dddc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ddde:	603b      	str	r3, [r7, #0]
 800dde0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dde2:	18d2      	adds	r2, r2, r3
 800dde4:	922e      	str	r2, [sp, #184]	; 0xb8
 800dde6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800dde8:	607b      	str	r3, [r7, #4]
 800ddea:	3201      	adds	r2, #1
 800ddec:	922d      	str	r2, [sp, #180]	; 0xb4
 800ddee:	2a07      	cmp	r2, #7
 800ddf0:	dc00      	bgt.n	800ddf4 <_svfprintf_r+0xf9c>
 800ddf2:	e45b      	b.n	800d6ac <_svfprintf_r+0x854>
 800ddf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddf8:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddfa:	f003 f943 	bl	8011084 <__ssprint_r>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d000      	beq.n	800de04 <_svfprintf_r+0xfac>
 800de02:	e208      	b.n	800e216 <_svfprintf_r+0x13be>
 800de04:	af2f      	add	r7, sp, #188	; 0xbc
 800de06:	e755      	b.n	800dcb4 <_svfprintf_r+0xe5c>
 800de08:	3310      	adds	r3, #16
 800de0a:	6045      	str	r5, [r0, #4]
 800de0c:	932e      	str	r3, [sp, #184]	; 0xb8
 800de0e:	912d      	str	r1, [sp, #180]	; 0xb4
 800de10:	2907      	cmp	r1, #7
 800de12:	dd08      	ble.n	800de26 <_svfprintf_r+0xfce>
 800de14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de18:	aa2c      	add	r2, sp, #176	; 0xb0
 800de1a:	f003 f933 	bl	8011084 <__ssprint_r>
 800de1e:	2800      	cmp	r0, #0
 800de20:	d000      	beq.n	800de24 <_svfprintf_r+0xfcc>
 800de22:	e1f8      	b.n	800e216 <_svfprintf_r+0x13be>
 800de24:	af2f      	add	r7, sp, #188	; 0xbc
 800de26:	0038      	movs	r0, r7
 800de28:	3c10      	subs	r4, #16
 800de2a:	e7bf      	b.n	800ddac <_svfprintf_r+0xf54>
 800de2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de2e:	002c      	movs	r4, r5
 800de30:	429d      	cmp	r5, r3
 800de32:	dd00      	ble.n	800de36 <_svfprintf_r+0xfde>
 800de34:	001c      	movs	r4, r3
 800de36:	2c00      	cmp	r4, #0
 800de38:	dd14      	ble.n	800de64 <_svfprintf_r+0x100c>
 800de3a:	9b08      	ldr	r3, [sp, #32]
 800de3c:	607c      	str	r4, [r7, #4]
 800de3e:	603b      	str	r3, [r7, #0]
 800de40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de42:	3708      	adds	r7, #8
 800de44:	18e3      	adds	r3, r4, r3
 800de46:	932e      	str	r3, [sp, #184]	; 0xb8
 800de48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de4a:	3301      	adds	r3, #1
 800de4c:	932d      	str	r3, [sp, #180]	; 0xb4
 800de4e:	2b07      	cmp	r3, #7
 800de50:	dd08      	ble.n	800de64 <_svfprintf_r+0x100c>
 800de52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de56:	aa2c      	add	r2, sp, #176	; 0xb0
 800de58:	f003 f914 	bl	8011084 <__ssprint_r>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	d000      	beq.n	800de62 <_svfprintf_r+0x100a>
 800de60:	e1d9      	b.n	800e216 <_svfprintf_r+0x13be>
 800de62:	af2f      	add	r7, sp, #188	; 0xbc
 800de64:	43e3      	mvns	r3, r4
 800de66:	17db      	asrs	r3, r3, #31
 800de68:	401c      	ands	r4, r3
 800de6a:	1b2c      	subs	r4, r5, r4
 800de6c:	2c00      	cmp	r4, #0
 800de6e:	dd18      	ble.n	800dea2 <_svfprintf_r+0x104a>
 800de70:	0039      	movs	r1, r7
 800de72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de74:	483f      	ldr	r0, [pc, #252]	; (800df74 <_svfprintf_r+0x111c>)
 800de76:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de78:	3301      	adds	r3, #1
 800de7a:	3108      	adds	r1, #8
 800de7c:	6038      	str	r0, [r7, #0]
 800de7e:	2c10      	cmp	r4, #16
 800de80:	dc7a      	bgt.n	800df78 <_svfprintf_r+0x1120>
 800de82:	607c      	str	r4, [r7, #4]
 800de84:	18a4      	adds	r4, r4, r2
 800de86:	000f      	movs	r7, r1
 800de88:	942e      	str	r4, [sp, #184]	; 0xb8
 800de8a:	932d      	str	r3, [sp, #180]	; 0xb4
 800de8c:	2b07      	cmp	r3, #7
 800de8e:	dd08      	ble.n	800dea2 <_svfprintf_r+0x104a>
 800de90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de94:	aa2c      	add	r2, sp, #176	; 0xb0
 800de96:	f003 f8f5 	bl	8011084 <__ssprint_r>
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d000      	beq.n	800dea0 <_svfprintf_r+0x1048>
 800de9e:	e1ba      	b.n	800e216 <_svfprintf_r+0x13be>
 800dea0:	af2f      	add	r7, sp, #188	; 0xbc
 800dea2:	9b08      	ldr	r3, [sp, #32]
 800dea4:	195d      	adds	r5, r3, r5
 800dea6:	0573      	lsls	r3, r6, #21
 800dea8:	d50b      	bpl.n	800dec2 <_svfprintf_r+0x106a>
 800deaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800deac:	2b00      	cmp	r3, #0
 800deae:	d176      	bne.n	800df9e <_svfprintf_r+0x1146>
 800deb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d176      	bne.n	800dfa4 <_svfprintf_r+0x114c>
 800deb6:	9b08      	ldr	r3, [sp, #32]
 800deb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800deba:	189b      	adds	r3, r3, r2
 800debc:	429d      	cmp	r5, r3
 800debe:	d900      	bls.n	800dec2 <_svfprintf_r+0x106a>
 800dec0:	001d      	movs	r5, r3
 800dec2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dec4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dec6:	4293      	cmp	r3, r2
 800dec8:	db01      	blt.n	800dece <_svfprintf_r+0x1076>
 800deca:	07f3      	lsls	r3, r6, #31
 800decc:	d516      	bpl.n	800defc <_svfprintf_r+0x10a4>
 800dece:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ded0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ded2:	603b      	str	r3, [r7, #0]
 800ded4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ded6:	607b      	str	r3, [r7, #4]
 800ded8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800deda:	3708      	adds	r7, #8
 800dedc:	189b      	adds	r3, r3, r2
 800dede:	932e      	str	r3, [sp, #184]	; 0xb8
 800dee0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dee2:	3301      	adds	r3, #1
 800dee4:	932d      	str	r3, [sp, #180]	; 0xb4
 800dee6:	2b07      	cmp	r3, #7
 800dee8:	dd08      	ble.n	800defc <_svfprintf_r+0x10a4>
 800deea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800deec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800deee:	aa2c      	add	r2, sp, #176	; 0xb0
 800def0:	f003 f8c8 	bl	8011084 <__ssprint_r>
 800def4:	2800      	cmp	r0, #0
 800def6:	d000      	beq.n	800defa <_svfprintf_r+0x10a2>
 800def8:	e18d      	b.n	800e216 <_svfprintf_r+0x13be>
 800defa:	af2f      	add	r7, sp, #188	; 0xbc
 800defc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800defe:	9b08      	ldr	r3, [sp, #32]
 800df00:	4694      	mov	ip, r2
 800df02:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800df04:	4463      	add	r3, ip
 800df06:	1b5b      	subs	r3, r3, r5
 800df08:	1b14      	subs	r4, r2, r4
 800df0a:	429c      	cmp	r4, r3
 800df0c:	dd00      	ble.n	800df10 <_svfprintf_r+0x10b8>
 800df0e:	001c      	movs	r4, r3
 800df10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df12:	2c00      	cmp	r4, #0
 800df14:	dd12      	ble.n	800df3c <_svfprintf_r+0x10e4>
 800df16:	18e3      	adds	r3, r4, r3
 800df18:	932e      	str	r3, [sp, #184]	; 0xb8
 800df1a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df1c:	603d      	str	r5, [r7, #0]
 800df1e:	3301      	adds	r3, #1
 800df20:	607c      	str	r4, [r7, #4]
 800df22:	932d      	str	r3, [sp, #180]	; 0xb4
 800df24:	3708      	adds	r7, #8
 800df26:	2b07      	cmp	r3, #7
 800df28:	dd08      	ble.n	800df3c <_svfprintf_r+0x10e4>
 800df2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df2e:	aa2c      	add	r2, sp, #176	; 0xb0
 800df30:	f003 f8a8 	bl	8011084 <__ssprint_r>
 800df34:	2800      	cmp	r0, #0
 800df36:	d000      	beq.n	800df3a <_svfprintf_r+0x10e2>
 800df38:	e16d      	b.n	800e216 <_svfprintf_r+0x13be>
 800df3a:	af2f      	add	r7, sp, #188	; 0xbc
 800df3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df40:	2510      	movs	r5, #16
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	43e2      	mvns	r2, r4
 800df46:	17d2      	asrs	r2, r2, #31
 800df48:	4014      	ands	r4, r2
 800df4a:	1b1c      	subs	r4, r3, r4
 800df4c:	2c00      	cmp	r4, #0
 800df4e:	dc00      	bgt.n	800df52 <_svfprintf_r+0x10fa>
 800df50:	e6b0      	b.n	800dcb4 <_svfprintf_r+0xe5c>
 800df52:	0039      	movs	r1, r7
 800df54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df56:	4807      	ldr	r0, [pc, #28]	; (800df74 <_svfprintf_r+0x111c>)
 800df58:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df5a:	3301      	adds	r3, #1
 800df5c:	3108      	adds	r1, #8
 800df5e:	6038      	str	r0, [r7, #0]
 800df60:	2c10      	cmp	r4, #16
 800df62:	dd00      	ble.n	800df66 <_svfprintf_r+0x110e>
 800df64:	e096      	b.n	800e094 <_svfprintf_r+0x123c>
 800df66:	1912      	adds	r2, r2, r4
 800df68:	607c      	str	r4, [r7, #4]
 800df6a:	922e      	str	r2, [sp, #184]	; 0xb8
 800df6c:	e6dd      	b.n	800dd2a <_svfprintf_r+0xed2>
 800df6e:	46c0      	nop			; (mov r8, r8)
 800df70:	080142ae 	.word	0x080142ae
 800df74:	080142c0 	.word	0x080142c0
 800df78:	2010      	movs	r0, #16
 800df7a:	1812      	adds	r2, r2, r0
 800df7c:	6078      	str	r0, [r7, #4]
 800df7e:	922e      	str	r2, [sp, #184]	; 0xb8
 800df80:	932d      	str	r3, [sp, #180]	; 0xb4
 800df82:	2b07      	cmp	r3, #7
 800df84:	dd08      	ble.n	800df98 <_svfprintf_r+0x1140>
 800df86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df88:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df8a:	aa2c      	add	r2, sp, #176	; 0xb0
 800df8c:	f003 f87a 	bl	8011084 <__ssprint_r>
 800df90:	2800      	cmp	r0, #0
 800df92:	d000      	beq.n	800df96 <_svfprintf_r+0x113e>
 800df94:	e13f      	b.n	800e216 <_svfprintf_r+0x13be>
 800df96:	a92f      	add	r1, sp, #188	; 0xbc
 800df98:	000f      	movs	r7, r1
 800df9a:	3c10      	subs	r4, #16
 800df9c:	e768      	b.n	800de70 <_svfprintf_r+0x1018>
 800df9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d05d      	beq.n	800e060 <_svfprintf_r+0x1208>
 800dfa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	9310      	str	r3, [sp, #64]	; 0x40
 800dfaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dfac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dfae:	603b      	str	r3, [r7, #0]
 800dfb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dfb2:	607b      	str	r3, [r7, #4]
 800dfb4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	189b      	adds	r3, r3, r2
 800dfba:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfbc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfc2:	2b07      	cmp	r3, #7
 800dfc4:	dd08      	ble.n	800dfd8 <_svfprintf_r+0x1180>
 800dfc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfca:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfcc:	f003 f85a 	bl	8011084 <__ssprint_r>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d000      	beq.n	800dfd6 <_svfprintf_r+0x117e>
 800dfd4:	e11f      	b.n	800e216 <_svfprintf_r+0x13be>
 800dfd6:	af2f      	add	r7, sp, #188	; 0xbc
 800dfd8:	9b08      	ldr	r3, [sp, #32]
 800dfda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfdc:	189c      	adds	r4, r3, r2
 800dfde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dfe0:	1b64      	subs	r4, r4, r5
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	429c      	cmp	r4, r3
 800dfe6:	dd00      	ble.n	800dfea <_svfprintf_r+0x1192>
 800dfe8:	001c      	movs	r4, r3
 800dfea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dfec:	2c00      	cmp	r4, #0
 800dfee:	dd12      	ble.n	800e016 <_svfprintf_r+0x11be>
 800dff0:	18e3      	adds	r3, r4, r3
 800dff2:	932e      	str	r3, [sp, #184]	; 0xb8
 800dff4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dff6:	603d      	str	r5, [r7, #0]
 800dff8:	3301      	adds	r3, #1
 800dffa:	607c      	str	r4, [r7, #4]
 800dffc:	932d      	str	r3, [sp, #180]	; 0xb4
 800dffe:	3708      	adds	r7, #8
 800e000:	2b07      	cmp	r3, #7
 800e002:	dd08      	ble.n	800e016 <_svfprintf_r+0x11be>
 800e004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e006:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e008:	aa2c      	add	r2, sp, #176	; 0xb0
 800e00a:	f003 f83b 	bl	8011084 <__ssprint_r>
 800e00e:	2800      	cmp	r0, #0
 800e010:	d000      	beq.n	800e014 <_svfprintf_r+0x11bc>
 800e012:	e100      	b.n	800e216 <_svfprintf_r+0x13be>
 800e014:	af2f      	add	r7, sp, #188	; 0xbc
 800e016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e018:	781a      	ldrb	r2, [r3, #0]
 800e01a:	43e3      	mvns	r3, r4
 800e01c:	17db      	asrs	r3, r3, #31
 800e01e:	401c      	ands	r4, r3
 800e020:	1b14      	subs	r4, r2, r4
 800e022:	2c00      	cmp	r4, #0
 800e024:	dd18      	ble.n	800e058 <_svfprintf_r+0x1200>
 800e026:	0039      	movs	r1, r7
 800e028:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e02a:	48aa      	ldr	r0, [pc, #680]	; (800e2d4 <_svfprintf_r+0x147c>)
 800e02c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e02e:	3301      	adds	r3, #1
 800e030:	3108      	adds	r1, #8
 800e032:	6038      	str	r0, [r7, #0]
 800e034:	2c10      	cmp	r4, #16
 800e036:	dc1a      	bgt.n	800e06e <_svfprintf_r+0x1216>
 800e038:	1912      	adds	r2, r2, r4
 800e03a:	607c      	str	r4, [r7, #4]
 800e03c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e03e:	000f      	movs	r7, r1
 800e040:	932d      	str	r3, [sp, #180]	; 0xb4
 800e042:	2b07      	cmp	r3, #7
 800e044:	dd08      	ble.n	800e058 <_svfprintf_r+0x1200>
 800e046:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e048:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e04a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e04c:	f003 f81a 	bl	8011084 <__ssprint_r>
 800e050:	2800      	cmp	r0, #0
 800e052:	d000      	beq.n	800e056 <_svfprintf_r+0x11fe>
 800e054:	e0df      	b.n	800e216 <_svfprintf_r+0x13be>
 800e056:	af2f      	add	r7, sp, #188	; 0xbc
 800e058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	18ed      	adds	r5, r5, r3
 800e05e:	e724      	b.n	800deaa <_svfprintf_r+0x1052>
 800e060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e062:	3b01      	subs	r3, #1
 800e064:	9312      	str	r3, [sp, #72]	; 0x48
 800e066:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e068:	3b01      	subs	r3, #1
 800e06a:	9311      	str	r3, [sp, #68]	; 0x44
 800e06c:	e79d      	b.n	800dfaa <_svfprintf_r+0x1152>
 800e06e:	2010      	movs	r0, #16
 800e070:	1812      	adds	r2, r2, r0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	922e      	str	r2, [sp, #184]	; 0xb8
 800e076:	932d      	str	r3, [sp, #180]	; 0xb4
 800e078:	2b07      	cmp	r3, #7
 800e07a:	dd08      	ble.n	800e08e <_svfprintf_r+0x1236>
 800e07c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e07e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e080:	aa2c      	add	r2, sp, #176	; 0xb0
 800e082:	f002 ffff 	bl	8011084 <__ssprint_r>
 800e086:	2800      	cmp	r0, #0
 800e088:	d000      	beq.n	800e08c <_svfprintf_r+0x1234>
 800e08a:	e0c4      	b.n	800e216 <_svfprintf_r+0x13be>
 800e08c:	a92f      	add	r1, sp, #188	; 0xbc
 800e08e:	000f      	movs	r7, r1
 800e090:	3c10      	subs	r4, #16
 800e092:	e7c8      	b.n	800e026 <_svfprintf_r+0x11ce>
 800e094:	3210      	adds	r2, #16
 800e096:	607d      	str	r5, [r7, #4]
 800e098:	922e      	str	r2, [sp, #184]	; 0xb8
 800e09a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e09c:	2b07      	cmp	r3, #7
 800e09e:	dd08      	ble.n	800e0b2 <_svfprintf_r+0x125a>
 800e0a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0a4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0a6:	f002 ffed 	bl	8011084 <__ssprint_r>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d000      	beq.n	800e0b0 <_svfprintf_r+0x1258>
 800e0ae:	e0b2      	b.n	800e216 <_svfprintf_r+0x13be>
 800e0b0:	a92f      	add	r1, sp, #188	; 0xbc
 800e0b2:	000f      	movs	r7, r1
 800e0b4:	3c10      	subs	r4, #16
 800e0b6:	e74c      	b.n	800df52 <_svfprintf_r+0x10fa>
 800e0b8:	003c      	movs	r4, r7
 800e0ba:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e0bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0c0:	3101      	adds	r1, #1
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	3408      	adds	r4, #8
 800e0c6:	2a01      	cmp	r2, #1
 800e0c8:	dc03      	bgt.n	800e0d2 <_svfprintf_r+0x127a>
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	4216      	tst	r6, r2
 800e0ce:	d100      	bne.n	800e0d2 <_svfprintf_r+0x127a>
 800e0d0:	e07f      	b.n	800e1d2 <_svfprintf_r+0x137a>
 800e0d2:	9a08      	ldr	r2, [sp, #32]
 800e0d4:	912e      	str	r1, [sp, #184]	; 0xb8
 800e0d6:	603a      	str	r2, [r7, #0]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0dc:	607a      	str	r2, [r7, #4]
 800e0de:	2b07      	cmp	r3, #7
 800e0e0:	dd08      	ble.n	800e0f4 <_svfprintf_r+0x129c>
 800e0e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0e6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0e8:	f002 ffcc 	bl	8011084 <__ssprint_r>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d000      	beq.n	800e0f2 <_svfprintf_r+0x129a>
 800e0f0:	e091      	b.n	800e216 <_svfprintf_r+0x13be>
 800e0f2:	ac2f      	add	r4, sp, #188	; 0xbc
 800e0f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e0f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0fc:	6063      	str	r3, [r4, #4]
 800e0fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e100:	3408      	adds	r4, #8
 800e102:	189b      	adds	r3, r3, r2
 800e104:	932e      	str	r3, [sp, #184]	; 0xb8
 800e106:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e108:	3301      	adds	r3, #1
 800e10a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e10c:	2b07      	cmp	r3, #7
 800e10e:	dd07      	ble.n	800e120 <_svfprintf_r+0x12c8>
 800e110:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e112:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e114:	aa2c      	add	r2, sp, #176	; 0xb0
 800e116:	f002 ffb5 	bl	8011084 <__ssprint_r>
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d17b      	bne.n	800e216 <_svfprintf_r+0x13be>
 800e11e:	ac2f      	add	r4, sp, #188	; 0xbc
 800e120:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e122:	2200      	movs	r2, #0
 800e124:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e126:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e128:	9309      	str	r3, [sp, #36]	; 0x24
 800e12a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e12c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e12e:	1e5d      	subs	r5, r3, #1
 800e130:	2300      	movs	r3, #0
 800e132:	f7f2 f989 	bl	8000448 <__aeabi_dcmpeq>
 800e136:	2800      	cmp	r0, #0
 800e138:	d126      	bne.n	800e188 <_svfprintf_r+0x1330>
 800e13a:	9b08      	ldr	r3, [sp, #32]
 800e13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e13e:	3301      	adds	r3, #1
 800e140:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	1e7b      	subs	r3, r7, #1
 800e146:	3201      	adds	r2, #1
 800e148:	185b      	adds	r3, r3, r1
 800e14a:	6065      	str	r5, [r4, #4]
 800e14c:	932e      	str	r3, [sp, #184]	; 0xb8
 800e14e:	922d      	str	r2, [sp, #180]	; 0xb4
 800e150:	3408      	adds	r4, #8
 800e152:	2a07      	cmp	r2, #7
 800e154:	dd07      	ble.n	800e166 <_svfprintf_r+0x130e>
 800e156:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e158:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e15a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e15c:	f002 ff92 	bl	8011084 <__ssprint_r>
 800e160:	2800      	cmp	r0, #0
 800e162:	d158      	bne.n	800e216 <_svfprintf_r+0x13be>
 800e164:	ac2f      	add	r4, sp, #188	; 0xbc
 800e166:	ab28      	add	r3, sp, #160	; 0xa0
 800e168:	6023      	str	r3, [r4, #0]
 800e16a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e16c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e16e:	6063      	str	r3, [r4, #4]
 800e170:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e172:	189b      	adds	r3, r3, r2
 800e174:	932e      	str	r3, [sp, #184]	; 0xb8
 800e176:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e178:	3301      	adds	r3, #1
 800e17a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e17c:	2b07      	cmp	r3, #7
 800e17e:	dd00      	ble.n	800e182 <_svfprintf_r+0x132a>
 800e180:	e638      	b.n	800ddf4 <_svfprintf_r+0xf9c>
 800e182:	3408      	adds	r4, #8
 800e184:	0027      	movs	r7, r4
 800e186:	e595      	b.n	800dcb4 <_svfprintf_r+0xe5c>
 800e188:	2710      	movs	r7, #16
 800e18a:	2d00      	cmp	r5, #0
 800e18c:	ddeb      	ble.n	800e166 <_svfprintf_r+0x130e>
 800e18e:	0021      	movs	r1, r4
 800e190:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e192:	4850      	ldr	r0, [pc, #320]	; (800e2d4 <_svfprintf_r+0x147c>)
 800e194:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e196:	3301      	adds	r3, #1
 800e198:	3108      	adds	r1, #8
 800e19a:	6020      	str	r0, [r4, #0]
 800e19c:	2d10      	cmp	r5, #16
 800e19e:	dc07      	bgt.n	800e1b0 <_svfprintf_r+0x1358>
 800e1a0:	6065      	str	r5, [r4, #4]
 800e1a2:	000c      	movs	r4, r1
 800e1a4:	18ad      	adds	r5, r5, r2
 800e1a6:	952e      	str	r5, [sp, #184]	; 0xb8
 800e1a8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1aa:	2b07      	cmp	r3, #7
 800e1ac:	dddb      	ble.n	800e166 <_svfprintf_r+0x130e>
 800e1ae:	e7d2      	b.n	800e156 <_svfprintf_r+0x12fe>
 800e1b0:	3210      	adds	r2, #16
 800e1b2:	6067      	str	r7, [r4, #4]
 800e1b4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e1b6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1b8:	2b07      	cmp	r3, #7
 800e1ba:	dd07      	ble.n	800e1cc <_svfprintf_r+0x1374>
 800e1bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1c0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1c2:	f002 ff5f 	bl	8011084 <__ssprint_r>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d125      	bne.n	800e216 <_svfprintf_r+0x13be>
 800e1ca:	a92f      	add	r1, sp, #188	; 0xbc
 800e1cc:	000c      	movs	r4, r1
 800e1ce:	3d10      	subs	r5, #16
 800e1d0:	e7dd      	b.n	800e18e <_svfprintf_r+0x1336>
 800e1d2:	9808      	ldr	r0, [sp, #32]
 800e1d4:	912e      	str	r1, [sp, #184]	; 0xb8
 800e1d6:	c705      	stmia	r7!, {r0, r2}
 800e1d8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1da:	e7e6      	b.n	800e1aa <_svfprintf_r+0x1352>
 800e1dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e1de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e1e0:	2510      	movs	r5, #16
 800e1e2:	1a9c      	subs	r4, r3, r2
 800e1e4:	2c00      	cmp	r4, #0
 800e1e6:	dc00      	bgt.n	800e1ea <_svfprintf_r+0x1392>
 800e1e8:	e567      	b.n	800dcba <_svfprintf_r+0xe62>
 800e1ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e1ec:	493a      	ldr	r1, [pc, #232]	; (800e2d8 <_svfprintf_r+0x1480>)
 800e1ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	6039      	str	r1, [r7, #0]
 800e1f4:	2c10      	cmp	r4, #16
 800e1f6:	dc19      	bgt.n	800e22c <_svfprintf_r+0x13d4>
 800e1f8:	607c      	str	r4, [r7, #4]
 800e1fa:	18a4      	adds	r4, r4, r2
 800e1fc:	942e      	str	r4, [sp, #184]	; 0xb8
 800e1fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800e200:	2b07      	cmp	r3, #7
 800e202:	dc00      	bgt.n	800e206 <_svfprintf_r+0x13ae>
 800e204:	e559      	b.n	800dcba <_svfprintf_r+0xe62>
 800e206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e208:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e20a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e20c:	f002 ff3a 	bl	8011084 <__ssprint_r>
 800e210:	2800      	cmp	r0, #0
 800e212:	d100      	bne.n	800e216 <_svfprintf_r+0x13be>
 800e214:	e551      	b.n	800dcba <_svfprintf_r+0xe62>
 800e216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d101      	bne.n	800e220 <_svfprintf_r+0x13c8>
 800e21c:	f7ff f845 	bl	800d2aa <_svfprintf_r+0x452>
 800e220:	0019      	movs	r1, r3
 800e222:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e224:	f7fd fd80 	bl	800bd28 <_free_r>
 800e228:	f7ff f83f 	bl	800d2aa <_svfprintf_r+0x452>
 800e22c:	3210      	adds	r2, #16
 800e22e:	607d      	str	r5, [r7, #4]
 800e230:	922e      	str	r2, [sp, #184]	; 0xb8
 800e232:	932d      	str	r3, [sp, #180]	; 0xb4
 800e234:	3708      	adds	r7, #8
 800e236:	2b07      	cmp	r3, #7
 800e238:	dd07      	ble.n	800e24a <_svfprintf_r+0x13f2>
 800e23a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e23c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e23e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e240:	f002 ff20 	bl	8011084 <__ssprint_r>
 800e244:	2800      	cmp	r0, #0
 800e246:	d1e6      	bne.n	800e216 <_svfprintf_r+0x13be>
 800e248:	af2f      	add	r7, sp, #188	; 0xbc
 800e24a:	3c10      	subs	r4, #16
 800e24c:	e7cd      	b.n	800e1ea <_svfprintf_r+0x1392>
 800e24e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e250:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e252:	f7fd fd69 	bl	800bd28 <_free_r>
 800e256:	e549      	b.n	800dcec <_svfprintf_r+0xe94>
 800e258:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <_svfprintf_r+0x140a>
 800e25e:	f7ff f824 	bl	800d2aa <_svfprintf_r+0x452>
 800e262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e264:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e266:	aa2c      	add	r2, sp, #176	; 0xb0
 800e268:	f002 ff0c 	bl	8011084 <__ssprint_r>
 800e26c:	f7ff f81d 	bl	800d2aa <_svfprintf_r+0x452>
 800e270:	0034      	movs	r4, r6
 800e272:	2a00      	cmp	r2, #0
 800e274:	d101      	bne.n	800e27a <_svfprintf_r+0x1422>
 800e276:	f7fe ff8c 	bl	800d192 <_svfprintf_r+0x33a>
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d101      	bne.n	800e282 <_svfprintf_r+0x142a>
 800e27e:	f7ff fc01 	bl	800da84 <_svfprintf_r+0xc2c>
 800e282:	2b02      	cmp	r3, #2
 800e284:	d100      	bne.n	800e288 <_svfprintf_r+0x1430>
 800e286:	e459      	b.n	800db3c <_svfprintf_r+0xce4>
 800e288:	2507      	movs	r5, #7
 800e28a:	ab58      	add	r3, sp, #352	; 0x160
 800e28c:	9308      	str	r3, [sp, #32]
 800e28e:	9a08      	ldr	r2, [sp, #32]
 800e290:	0013      	movs	r3, r2
 800e292:	3b01      	subs	r3, #1
 800e294:	9308      	str	r3, [sp, #32]
 800e296:	9b06      	ldr	r3, [sp, #24]
 800e298:	9908      	ldr	r1, [sp, #32]
 800e29a:	402b      	ands	r3, r5
 800e29c:	3330      	adds	r3, #48	; 0x30
 800e29e:	700b      	strb	r3, [r1, #0]
 800e2a0:	9907      	ldr	r1, [sp, #28]
 800e2a2:	074e      	lsls	r6, r1, #29
 800e2a4:	9906      	ldr	r1, [sp, #24]
 800e2a6:	08c8      	lsrs	r0, r1, #3
 800e2a8:	9907      	ldr	r1, [sp, #28]
 800e2aa:	4306      	orrs	r6, r0
 800e2ac:	08c9      	lsrs	r1, r1, #3
 800e2ae:	9107      	str	r1, [sp, #28]
 800e2b0:	0031      	movs	r1, r6
 800e2b2:	9807      	ldr	r0, [sp, #28]
 800e2b4:	9606      	str	r6, [sp, #24]
 800e2b6:	4301      	orrs	r1, r0
 800e2b8:	d1e9      	bne.n	800e28e <_svfprintf_r+0x1436>
 800e2ba:	07e1      	lsls	r1, r4, #31
 800e2bc:	d400      	bmi.n	800e2c0 <_svfprintf_r+0x1468>
 800e2be:	e42a      	b.n	800db16 <_svfprintf_r+0xcbe>
 800e2c0:	2b30      	cmp	r3, #48	; 0x30
 800e2c2:	d100      	bne.n	800e2c6 <_svfprintf_r+0x146e>
 800e2c4:	e427      	b.n	800db16 <_svfprintf_r+0xcbe>
 800e2c6:	2130      	movs	r1, #48	; 0x30
 800e2c8:	9b08      	ldr	r3, [sp, #32]
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	7019      	strb	r1, [r3, #0]
 800e2ce:	1e93      	subs	r3, r2, #2
 800e2d0:	9308      	str	r3, [sp, #32]
 800e2d2:	e420      	b.n	800db16 <_svfprintf_r+0xcbe>
 800e2d4:	080142c0 	.word	0x080142c0
 800e2d8:	080142b0 	.word	0x080142b0

0800e2dc <__ssvfscanf_r>:
 800e2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2de:	4ca7      	ldr	r4, [pc, #668]	; (800e57c <__ssvfscanf_r+0x2a0>)
 800e2e0:	44a5      	add	sp, r4
 800e2e2:	af02      	add	r7, sp, #8
 800e2e4:	633b      	str	r3, [r7, #48]	; 0x30
 800e2e6:	000b      	movs	r3, r1
 800e2e8:	6378      	str	r0, [r7, #52]	; 0x34
 800e2ea:	6479      	str	r1, [r7, #68]	; 0x44
 800e2ec:	61ba      	str	r2, [r7, #24]
 800e2ee:	220c      	movs	r2, #12
 800e2f0:	5e9a      	ldrsh	r2, [r3, r2]
 800e2f2:	2380      	movs	r3, #128	; 0x80
 800e2f4:	019b      	lsls	r3, r3, #6
 800e2f6:	421a      	tst	r2, r3
 800e2f8:	d105      	bne.n	800e306 <__ssvfscanf_r+0x2a>
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	818b      	strh	r3, [r1, #12]
 800e2fe:	4aa0      	ldr	r2, [pc, #640]	; (800e580 <__ssvfscanf_r+0x2a4>)
 800e300:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e302:	4013      	ands	r3, r2
 800e304:	664b      	str	r3, [r1, #100]	; 0x64
 800e306:	2300      	movs	r3, #0
 800e308:	617b      	str	r3, [r7, #20]
 800e30a:	643b      	str	r3, [r7, #64]	; 0x40
 800e30c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e30e:	627b      	str	r3, [r7, #36]	; 0x24
 800e310:	63bb      	str	r3, [r7, #56]	; 0x38
 800e312:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	69ba      	ldr	r2, [r7, #24]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	3201      	adds	r2, #1
 800e31c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e31e:	61ba      	str	r2, [r7, #24]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d100      	bne.n	800e326 <__ssvfscanf_r+0x4a>
 800e324:	e0d7      	b.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e326:	2608      	movs	r6, #8
 800e328:	2108      	movs	r1, #8
 800e32a:	4a96      	ldr	r2, [pc, #600]	; (800e584 <__ssvfscanf_r+0x2a8>)
 800e32c:	5cd2      	ldrb	r2, [r2, r3]
 800e32e:	4016      	ands	r6, r2
 800e330:	420a      	tst	r2, r1
 800e332:	d01d      	beq.n	800e370 <__ssvfscanf_r+0x94>
 800e334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	dd12      	ble.n	800e362 <__ssvfscanf_r+0x86>
 800e33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e33e:	4991      	ldr	r1, [pc, #580]	; (800e584 <__ssvfscanf_r+0x2a8>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	781a      	ldrb	r2, [r3, #0]
 800e344:	5c8a      	ldrb	r2, [r1, r2]
 800e346:	2108      	movs	r1, #8
 800e348:	420a      	tst	r2, r1
 800e34a:	d0e3      	beq.n	800e314 <__ssvfscanf_r+0x38>
 800e34c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e34e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e350:	3201      	adds	r2, #1
 800e352:	63ba      	str	r2, [r7, #56]	; 0x38
 800e354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e356:	3301      	adds	r3, #1
 800e358:	6852      	ldr	r2, [r2, #4]
 800e35a:	600b      	str	r3, [r1, #0]
 800e35c:	3a01      	subs	r2, #1
 800e35e:	604a      	str	r2, [r1, #4]
 800e360:	e7e8      	b.n	800e334 <__ssvfscanf_r+0x58>
 800e362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e364:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e366:	f002 ff4d 	bl	8011204 <__ssrefill_r>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d0e6      	beq.n	800e33c <__ssvfscanf_r+0x60>
 800e36e:	e7d1      	b.n	800e314 <__ssvfscanf_r+0x38>
 800e370:	2b25      	cmp	r3, #37	; 0x25
 800e372:	d165      	bne.n	800e440 <__ssvfscanf_r+0x164>
 800e374:	250a      	movs	r5, #10
 800e376:	2480      	movs	r4, #128	; 0x80
 800e378:	69ba      	ldr	r2, [r7, #24]
 800e37a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e37c:	3b16      	subs	r3, #22
 800e37e:	69b9      	ldr	r1, [r7, #24]
 800e380:	3101      	adds	r1, #1
 800e382:	61b9      	str	r1, [r7, #24]
 800e384:	7811      	ldrb	r1, [r2, #0]
 800e386:	0008      	movs	r0, r1
 800e388:	3825      	subs	r0, #37	; 0x25
 800e38a:	2855      	cmp	r0, #85	; 0x55
 800e38c:	d900      	bls.n	800e390 <__ssvfscanf_r+0xb4>
 800e38e:	e170      	b.n	800e672 <__ssvfscanf_r+0x396>
 800e390:	f7f1 feca 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e394:	016f0056 	.word	0x016f0056
 800e398:	016f016f 	.word	0x016f016f
 800e39c:	0081016f 	.word	0x0081016f
 800e3a0:	016f016f 	.word	0x016f016f
 800e3a4:	016f016f 	.word	0x016f016f
 800e3a8:	00b8016f 	.word	0x00b8016f
 800e3ac:	00b800b8 	.word	0x00b800b8
 800e3b0:	00b800b8 	.word	0x00b800b8
 800e3b4:	00b800b8 	.word	0x00b800b8
 800e3b8:	00b800b8 	.word	0x00b800b8
 800e3bc:	016f00b8 	.word	0x016f00b8
 800e3c0:	016f016f 	.word	0x016f016f
 800e3c4:	016f016f 	.word	0x016f016f
 800e3c8:	016f016f 	.word	0x016f016f
 800e3cc:	016f00d8 	.word	0x016f00d8
 800e3d0:	00c1010a 	.word	0x00c1010a
 800e3d4:	00d800d8 	.word	0x00d800d8
 800e3d8:	016f00d8 	.word	0x016f00d8
 800e3dc:	016f016f 	.word	0x016f016f
 800e3e0:	009f016f 	.word	0x009f016f
 800e3e4:	016f016f 	.word	0x016f016f
 800e3e8:	016f00c9 	.word	0x016f00c9
 800e3ec:	016f016f 	.word	0x016f016f
 800e3f0:	016f00f0 	.word	0x016f00f0
 800e3f4:	016f016f 	.word	0x016f016f
 800e3f8:	00d1016f 	.word	0x00d1016f
 800e3fc:	016f016f 	.word	0x016f016f
 800e400:	016f00fe 	.word	0x016f00fe
 800e404:	016f016f 	.word	0x016f016f
 800e408:	016f016f 	.word	0x016f016f
 800e40c:	016f00d8 	.word	0x016f00d8
 800e410:	00c3010c 	.word	0x00c3010c
 800e414:	00d800d8 	.word	0x00d800d8
 800e418:	009400d8 	.word	0x009400d8
 800e41c:	009f012f 	.word	0x009f012f
 800e420:	0088016f 	.word	0x0088016f
 800e424:	011200a9 	.word	0x011200a9
 800e428:	011000cb 	.word	0x011000cb
 800e42c:	016f016f 	.word	0x016f016f
 800e430:	00a600f2 	.word	0x00a600f2
 800e434:	016f00cf 	.word	0x016f00cf
 800e438:	00d1016f 	.word	0x00d1016f
 800e43c:	00a6016f 	.word	0x00a6016f
 800e440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	dd12      	ble.n	800e46e <__ssvfscanf_r+0x192>
 800e448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e44a:	69ba      	ldr	r2, [r7, #24]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	3a01      	subs	r2, #1
 800e450:	7819      	ldrb	r1, [r3, #0]
 800e452:	7812      	ldrb	r2, [r2, #0]
 800e454:	4291      	cmp	r1, r2
 800e456:	d13e      	bne.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e45a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e45c:	6852      	ldr	r2, [r2, #4]
 800e45e:	3301      	adds	r3, #1
 800e460:	600b      	str	r3, [r1, #0]
 800e462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e464:	3a01      	subs	r2, #1
 800e466:	604a      	str	r2, [r1, #4]
 800e468:	3301      	adds	r3, #1
 800e46a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e46c:	e752      	b.n	800e314 <__ssvfscanf_r+0x38>
 800e46e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e470:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e472:	f002 fec7 	bl	8011204 <__ssrefill_r>
 800e476:	2800      	cmp	r0, #0
 800e478:	d0e6      	beq.n	800e448 <__ssvfscanf_r+0x16c>
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d003      	beq.n	800e488 <__ssvfscanf_r+0x1ac>
 800e480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e482:	899b      	ldrh	r3, [r3, #12]
 800e484:	065b      	lsls	r3, r3, #25
 800e486:	d526      	bpl.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d000      	beq.n	800e490 <__ssvfscanf_r+0x1b4>
 800e48e:	e0f6      	b.n	800e67e <__ssvfscanf_r+0x3a2>
 800e490:	3b01      	subs	r3, #1
 800e492:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e494:	e104      	b.n	800e6a0 <__ssvfscanf_r+0x3c4>
 800e496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e498:	4332      	orrs	r2, r6
 800e49a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e49c:	d11b      	bne.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e49e:	2610      	movs	r6, #16
 800e4a0:	69ba      	ldr	r2, [r7, #24]
 800e4a2:	e76c      	b.n	800e37e <__ssvfscanf_r+0xa2>
 800e4a4:	421e      	tst	r6, r3
 800e4a6:	d116      	bne.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e4a8:	7851      	ldrb	r1, [r2, #1]
 800e4aa:	296c      	cmp	r1, #108	; 0x6c
 800e4ac:	d103      	bne.n	800e4b6 <__ssvfscanf_r+0x1da>
 800e4ae:	3202      	adds	r2, #2
 800e4b0:	61ba      	str	r2, [r7, #24]
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	e000      	b.n	800e4b8 <__ssvfscanf_r+0x1dc>
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	4316      	orrs	r6, r2
 800e4ba:	e7f1      	b.n	800e4a0 <__ssvfscanf_r+0x1c4>
 800e4bc:	421e      	tst	r6, r3
 800e4be:	d10a      	bne.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e4c0:	7851      	ldrb	r1, [r2, #1]
 800e4c2:	2968      	cmp	r1, #104	; 0x68
 800e4c4:	d103      	bne.n	800e4ce <__ssvfscanf_r+0x1f2>
 800e4c6:	3202      	adds	r2, #2
 800e4c8:	61ba      	str	r2, [r7, #24]
 800e4ca:	2208      	movs	r2, #8
 800e4cc:	e7f4      	b.n	800e4b8 <__ssvfscanf_r+0x1dc>
 800e4ce:	2204      	movs	r2, #4
 800e4d0:	e7f2      	b.n	800e4b8 <__ssvfscanf_r+0x1dc>
 800e4d2:	421e      	tst	r6, r3
 800e4d4:	d0ed      	beq.n	800e4b2 <__ssvfscanf_r+0x1d6>
 800e4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d000      	beq.n	800e4de <__ssvfscanf_r+0x202>
 800e4dc:	e0da      	b.n	800e694 <__ssvfscanf_r+0x3b8>
 800e4de:	e0df      	b.n	800e6a0 <__ssvfscanf_r+0x3c4>
 800e4e0:	421e      	tst	r6, r3
 800e4e2:	d0dd      	beq.n	800e4a0 <__ssvfscanf_r+0x1c4>
 800e4e4:	e7f7      	b.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e4e6:	228f      	movs	r2, #143	; 0x8f
 800e4e8:	218f      	movs	r1, #143	; 0x8f
 800e4ea:	4032      	ands	r2, r6
 800e4ec:	420e      	tst	r6, r1
 800e4ee:	d1f2      	bne.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e4f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4f2:	2900      	cmp	r1, #0
 800e4f4:	d104      	bne.n	800e500 <__ssvfscanf_r+0x224>
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	a902      	add	r1, sp, #8
 800e4fa:	6439      	str	r1, [r7, #64]	; 0x40
 800e4fc:	600a      	str	r2, [r1, #0]
 800e4fe:	604a      	str	r2, [r1, #4]
 800e500:	4326      	orrs	r6, r4
 800e502:	e7cd      	b.n	800e4a0 <__ssvfscanf_r+0x1c4>
 800e504:	228f      	movs	r2, #143	; 0x8f
 800e506:	4216      	tst	r6, r2
 800e508:	d1e5      	bne.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e50a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e50c:	436a      	muls	r2, r5
 800e50e:	3a30      	subs	r2, #48	; 0x30
 800e510:	188a      	adds	r2, r1, r2
 800e512:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e514:	e7c4      	b.n	800e4a0 <__ssvfscanf_r+0x1c4>
 800e516:	2301      	movs	r3, #1
 800e518:	431e      	orrs	r6, r3
 800e51a:	4b1b      	ldr	r3, [pc, #108]	; (800e588 <__ssvfscanf_r+0x2ac>)
 800e51c:	617b      	str	r3, [r7, #20]
 800e51e:	230a      	movs	r3, #10
 800e520:	2403      	movs	r4, #3
 800e522:	627b      	str	r3, [r7, #36]	; 0x24
 800e524:	e00f      	b.n	800e546 <__ssvfscanf_r+0x26a>
 800e526:	2301      	movs	r3, #1
 800e528:	431e      	orrs	r6, r3
 800e52a:	4b18      	ldr	r3, [pc, #96]	; (800e58c <__ssvfscanf_r+0x2b0>)
 800e52c:	617b      	str	r3, [r7, #20]
 800e52e:	2308      	movs	r3, #8
 800e530:	e7f6      	b.n	800e520 <__ssvfscanf_r+0x244>
 800e532:	4b16      	ldr	r3, [pc, #88]	; (800e58c <__ssvfscanf_r+0x2b0>)
 800e534:	e7f2      	b.n	800e51c <__ssvfscanf_r+0x240>
 800e536:	2380      	movs	r3, #128	; 0x80
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	431e      	orrs	r6, r3
 800e53c:	4b13      	ldr	r3, [pc, #76]	; (800e58c <__ssvfscanf_r+0x2b0>)
 800e53e:	617b      	str	r3, [r7, #20]
 800e540:	2310      	movs	r3, #16
 800e542:	e7ed      	b.n	800e520 <__ssvfscanf_r+0x244>
 800e544:	2404      	movs	r4, #4
 800e546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	dd55      	ble.n	800e5fa <__ssvfscanf_r+0x31e>
 800e54e:	0673      	lsls	r3, r6, #25
 800e550:	d407      	bmi.n	800e562 <__ssvfscanf_r+0x286>
 800e552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e554:	490b      	ldr	r1, [pc, #44]	; (800e584 <__ssvfscanf_r+0x2a8>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	781a      	ldrb	r2, [r3, #0]
 800e55a:	5c8a      	ldrb	r2, [r1, r2]
 800e55c:	2108      	movs	r1, #8
 800e55e:	420a      	tst	r2, r1
 800e560:	d152      	bne.n	800e608 <__ssvfscanf_r+0x32c>
 800e562:	1e60      	subs	r0, r4, #1
 800e564:	2803      	cmp	r0, #3
 800e566:	d863      	bhi.n	800e630 <__ssvfscanf_r+0x354>
 800e568:	f7f1 fdde 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e56c:	03bd01da 	.word	0x03bd01da
 800e570:	068a0579 	.word	0x068a0579
 800e574:	2301      	movs	r3, #1
 800e576:	431e      	orrs	r6, r3
 800e578:	2402      	movs	r4, #2
 800e57a:	e7e4      	b.n	800e546 <__ssvfscanf_r+0x26a>
 800e57c:	fffffd34 	.word	0xfffffd34
 800e580:	ffffdfff 	.word	0xffffdfff
 800e584:	08013fa9 	.word	0x08013fa9
 800e588:	0800b72d 	.word	0x0800b72d
 800e58c:	08010d35 	.word	0x08010d35
 800e590:	2248      	movs	r2, #72	; 0x48
 800e592:	2318      	movs	r3, #24
 800e594:	189b      	adds	r3, r3, r2
 800e596:	19d8      	adds	r0, r3, r7
 800e598:	69b9      	ldr	r1, [r7, #24]
 800e59a:	f001 f9d7 	bl	800f94c <__sccl>
 800e59e:	2340      	movs	r3, #64	; 0x40
 800e5a0:	2401      	movs	r4, #1
 800e5a2:	61b8      	str	r0, [r7, #24]
 800e5a4:	431e      	orrs	r6, r3
 800e5a6:	e7ce      	b.n	800e546 <__ssvfscanf_r+0x26a>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	431e      	orrs	r6, r3
 800e5ac:	2340      	movs	r3, #64	; 0x40
 800e5ae:	2400      	movs	r4, #0
 800e5b0:	431e      	orrs	r6, r3
 800e5b2:	e7c8      	b.n	800e546 <__ssvfscanf_r+0x26a>
 800e5b4:	2388      	movs	r3, #136	; 0x88
 800e5b6:	e7bf      	b.n	800e538 <__ssvfscanf_r+0x25c>
 800e5b8:	06f3      	lsls	r3, r6, #27
 800e5ba:	d500      	bpl.n	800e5be <__ssvfscanf_r+0x2e2>
 800e5bc:	e6aa      	b.n	800e314 <__ssvfscanf_r+0x38>
 800e5be:	2108      	movs	r1, #8
 800e5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c2:	cb04      	ldmia	r3!, {r2}
 800e5c4:	420e      	tst	r6, r1
 800e5c6:	d003      	beq.n	800e5d0 <__ssvfscanf_r+0x2f4>
 800e5c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5ca:	7011      	strb	r1, [r2, #0]
 800e5cc:	633b      	str	r3, [r7, #48]	; 0x30
 800e5ce:	e6a1      	b.n	800e314 <__ssvfscanf_r+0x38>
 800e5d0:	0771      	lsls	r1, r6, #29
 800e5d2:	d502      	bpl.n	800e5da <__ssvfscanf_r+0x2fe>
 800e5d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5d6:	8011      	strh	r1, [r2, #0]
 800e5d8:	e7f8      	b.n	800e5cc <__ssvfscanf_r+0x2f0>
 800e5da:	07f1      	lsls	r1, r6, #31
 800e5dc:	d502      	bpl.n	800e5e4 <__ssvfscanf_r+0x308>
 800e5de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5e0:	6011      	str	r1, [r2, #0]
 800e5e2:	e7f3      	b.n	800e5cc <__ssvfscanf_r+0x2f0>
 800e5e4:	07b6      	lsls	r6, r6, #30
 800e5e6:	d5fa      	bpl.n	800e5de <__ssvfscanf_r+0x302>
 800e5e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5ea:	6011      	str	r1, [r2, #0]
 800e5ec:	17c9      	asrs	r1, r1, #31
 800e5ee:	6051      	str	r1, [r2, #4]
 800e5f0:	e7ec      	b.n	800e5cc <__ssvfscanf_r+0x2f0>
 800e5f2:	4ba2      	ldr	r3, [pc, #648]	; (800e87c <__ssvfscanf_r+0x5a0>)
 800e5f4:	617b      	str	r3, [r7, #20]
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	e792      	b.n	800e520 <__ssvfscanf_r+0x244>
 800e5fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5fe:	f002 fe01 	bl	8011204 <__ssrefill_r>
 800e602:	2800      	cmp	r0, #0
 800e604:	d0a3      	beq.n	800e54e <__ssvfscanf_r+0x272>
 800e606:	e738      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800e608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e60a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e60c:	3201      	adds	r2, #1
 800e60e:	63ba      	str	r2, [r7, #56]	; 0x38
 800e610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e612:	6852      	ldr	r2, [r2, #4]
 800e614:	3a01      	subs	r2, #1
 800e616:	604a      	str	r2, [r1, #4]
 800e618:	2a00      	cmp	r2, #0
 800e61a:	dd02      	ble.n	800e622 <__ssvfscanf_r+0x346>
 800e61c:	3301      	adds	r3, #1
 800e61e:	600b      	str	r3, [r1, #0]
 800e620:	e797      	b.n	800e552 <__ssvfscanf_r+0x276>
 800e622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e624:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e626:	f002 fded 	bl	8011204 <__ssrefill_r>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	d091      	beq.n	800e552 <__ssvfscanf_r+0x276>
 800e62e:	e724      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800e630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e632:	2301      	movs	r3, #1
 800e634:	2a00      	cmp	r2, #0
 800e636:	d100      	bne.n	800e63a <__ssvfscanf_r+0x35e>
 800e638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e63a:	2210      	movs	r2, #16
 800e63c:	0034      	movs	r4, r6
 800e63e:	4032      	ands	r2, r6
 800e640:	623a      	str	r2, [r7, #32]
 800e642:	401c      	ands	r4, r3
 800e644:	421e      	tst	r6, r3
 800e646:	d100      	bne.n	800e64a <__ssvfscanf_r+0x36e>
 800e648:	e0f3      	b.n	800e832 <__ssvfscanf_r+0x556>
 800e64a:	2a00      	cmp	r2, #0
 800e64c:	d000      	beq.n	800e650 <__ssvfscanf_r+0x374>
 800e64e:	e0b6      	b.n	800e7be <__ssvfscanf_r+0x4e2>
 800e650:	2080      	movs	r0, #128	; 0x80
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	cb10      	ldmia	r3!, {r4}
 800e656:	613b      	str	r3, [r7, #16]
 800e658:	4206      	tst	r6, r0
 800e65a:	d100      	bne.n	800e65e <__ssvfscanf_r+0x382>
 800e65c:	e0b7      	b.n	800e7ce <__ssvfscanf_r+0x4f2>
 800e65e:	2c00      	cmp	r4, #0
 800e660:	d007      	beq.n	800e672 <__ssvfscanf_r+0x396>
 800e662:	f7fb ff6d 	bl	800a540 <malloc>
 800e666:	6338      	str	r0, [r7, #48]	; 0x30
 800e668:	2800      	cmp	r0, #0
 800e66a:	d11f      	bne.n	800e6ac <__ssvfscanf_r+0x3d0>
 800e66c:	2301      	movs	r3, #1
 800e66e:	425b      	negs	r3, r3
 800e670:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e674:	2b00      	cmp	r3, #0
 800e676:	d013      	beq.n	800e6a0 <__ssvfscanf_r+0x3c4>
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	3301      	adds	r3, #1
 800e67c:	d10a      	bne.n	800e694 <__ssvfscanf_r+0x3b8>
 800e67e:	2400      	movs	r4, #0
 800e680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e682:	681d      	ldr	r5, [r3, #0]
 800e684:	88db      	ldrh	r3, [r3, #6]
 800e686:	42a3      	cmp	r3, r4
 800e688:	dd01      	ble.n	800e68e <__ssvfscanf_r+0x3b2>
 800e68a:	f001 f82a 	bl	800f6e2 <__ssvfscanf_r+0x1406>
 800e68e:	2301      	movs	r3, #1
 800e690:	425b      	negs	r3, r3
 800e692:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e696:	6818      	ldr	r0, [r3, #0]
 800e698:	2800      	cmp	r0, #0
 800e69a:	d001      	beq.n	800e6a0 <__ssvfscanf_r+0x3c4>
 800e69c:	f7fb ff5a 	bl	800a554 <free>
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6a4:	23b1      	movs	r3, #177	; 0xb1
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	449d      	add	sp, r3
 800e6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ae:	6023      	str	r3, [r4, #0]
 800e6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6b2:	88de      	ldrh	r6, [r3, #6]
 800e6b4:	889d      	ldrh	r5, [r3, #4]
 800e6b6:	42ae      	cmp	r6, r5
 800e6b8:	d30e      	bcc.n	800e6d8 <__ssvfscanf_r+0x3fc>
 800e6ba:	4b71      	ldr	r3, [pc, #452]	; (800e880 <__ssvfscanf_r+0x5a4>)
 800e6bc:	429d      	cmp	r5, r3
 800e6be:	d8d5      	bhi.n	800e66c <__ssvfscanf_r+0x390>
 800e6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6c2:	3508      	adds	r5, #8
 800e6c4:	b2ad      	uxth	r5, r5
 800e6c6:	6818      	ldr	r0, [r3, #0]
 800e6c8:	00a9      	lsls	r1, r5, #2
 800e6ca:	f002 f901 	bl	80108d0 <realloc>
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d0cc      	beq.n	800e66c <__ssvfscanf_r+0x390>
 800e6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6d4:	6018      	str	r0, [r3, #0]
 800e6d6:	809d      	strh	r5, [r3, #4]
 800e6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6da:	1c72      	adds	r2, r6, #1
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	00b6      	lsls	r6, r6, #2
 800e6e0:	50f4      	str	r4, [r6, r3]
 800e6e2:	2320      	movs	r3, #32
 800e6e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6e6:	0026      	movs	r6, r4
 800e6e8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e6ea:	80ca      	strh	r2, [r1, #6]
 800e6ec:	61fb      	str	r3, [r7, #28]
 800e6ee:	2500      	movs	r5, #0
 800e6f0:	f7fd f9fe 	bl	800baf0 <__locale_mb_cur_max>
 800e6f4:	42a8      	cmp	r0, r5
 800e6f6:	d100      	bne.n	800e6fa <__ssvfscanf_r+0x41e>
 800e6f8:	e6bf      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800e6fa:	1c6a      	adds	r2, r5, #1
 800e6fc:	60fa      	str	r2, [r7, #12]
 800e6fe:	228c      	movs	r2, #140	; 0x8c
 800e700:	2048      	movs	r0, #72	; 0x48
 800e702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e704:	0052      	lsls	r2, r2, #1
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	1812      	adds	r2, r2, r0
 800e70a:	7819      	ldrb	r1, [r3, #0]
 800e70c:	19d2      	adds	r2, r2, r7
 800e70e:	5551      	strb	r1, [r2, r5]
 800e710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e714:	6852      	ldr	r2, [r2, #4]
 800e716:	3301      	adds	r3, #1
 800e718:	600b      	str	r3, [r1, #0]
 800e71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71c:	3a01      	subs	r2, #1
 800e71e:	604a      	str	r2, [r1, #4]
 800e720:	2b03      	cmp	r3, #3
 800e722:	d102      	bne.n	800e72a <__ssvfscanf_r+0x44e>
 800e724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e726:	2b04      	cmp	r3, #4
 800e728:	d007      	beq.n	800e73a <__ssvfscanf_r+0x45e>
 800e72a:	2048      	movs	r0, #72	; 0x48
 800e72c:	2310      	movs	r3, #16
 800e72e:	181b      	adds	r3, r3, r0
 800e730:	2208      	movs	r2, #8
 800e732:	2100      	movs	r1, #0
 800e734:	19d8      	adds	r0, r3, r7
 800e736:	f7fd f997 	bl	800ba68 <memset>
 800e73a:	2148      	movs	r1, #72	; 0x48
 800e73c:	2310      	movs	r3, #16
 800e73e:	228c      	movs	r2, #140	; 0x8c
 800e740:	185b      	adds	r3, r3, r1
 800e742:	0052      	lsls	r2, r2, #1
 800e744:	19db      	adds	r3, r3, r7
 800e746:	1852      	adds	r2, r2, r1
 800e748:	9300      	str	r3, [sp, #0]
 800e74a:	0021      	movs	r1, r4
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e750:	19d2      	adds	r2, r2, r7
 800e752:	f002 fc57 	bl	8011004 <_mbrtowc_r>
 800e756:	0003      	movs	r3, r0
 800e758:	62b8      	str	r0, [r7, #40]	; 0x28
 800e75a:	3301      	adds	r3, #1
 800e75c:	d100      	bne.n	800e760 <__ssvfscanf_r+0x484>
 800e75e:	e68c      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800e760:	2800      	cmp	r0, #0
 800e762:	d139      	bne.n	800e7d8 <__ssvfscanf_r+0x4fc>
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d100      	bne.n	800e76c <__ssvfscanf_r+0x490>
 800e76a:	6023      	str	r3, [r4, #0]
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e770:	4694      	mov	ip, r2
 800e772:	4463      	add	r3, ip
 800e774:	63bb      	str	r3, [r7, #56]	; 0x38
 800e776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e778:	2b03      	cmp	r3, #3
 800e77a:	d102      	bne.n	800e782 <__ssvfscanf_r+0x4a6>
 800e77c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e77e:	2b04      	cmp	r3, #4
 800e780:	d002      	beq.n	800e788 <__ssvfscanf_r+0x4ac>
 800e782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e784:	3b01      	subs	r3, #1
 800e786:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e788:	6a3b      	ldr	r3, [r7, #32]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d115      	bne.n	800e7ba <__ssvfscanf_r+0x4de>
 800e78e:	2e00      	cmp	r6, #0
 800e790:	d012      	beq.n	800e7b8 <__ssvfscanf_r+0x4dc>
 800e792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e794:	69fa      	ldr	r2, [r7, #28]
 800e796:	1ae5      	subs	r5, r4, r3
 800e798:	10ab      	asrs	r3, r5, #2
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d30c      	bcc.n	800e7b8 <__ssvfscanf_r+0x4dc>
 800e79e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7a0:	00d1      	lsls	r1, r2, #3
 800e7a2:	f002 f895 	bl	80108d0 <realloc>
 800e7a6:	6338      	str	r0, [r7, #48]	; 0x30
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d100      	bne.n	800e7ae <__ssvfscanf_r+0x4d2>
 800e7ac:	e75e      	b.n	800e66c <__ssvfscanf_r+0x390>
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	1944      	adds	r4, r0, r5
 800e7b2:	005b      	lsls	r3, r3, #1
 800e7b4:	6030      	str	r0, [r6, #0]
 800e7b6:	61fb      	str	r3, [r7, #28]
 800e7b8:	3404      	adds	r4, #4
 800e7ba:	2500      	movs	r5, #0
 800e7bc:	e010      	b.n	800e7e0 <__ssvfscanf_r+0x504>
 800e7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c0:	613b      	str	r3, [r7, #16]
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	001e      	movs	r6, r3
 800e7c6:	001c      	movs	r4, r3
 800e7c8:	61fb      	str	r3, [r7, #28]
 800e7ca:	633b      	str	r3, [r7, #48]	; 0x30
 800e7cc:	e78f      	b.n	800e6ee <__ssvfscanf_r+0x412>
 800e7ce:	6a3b      	ldr	r3, [r7, #32]
 800e7d0:	001e      	movs	r6, r3
 800e7d2:	61fb      	str	r3, [r7, #28]
 800e7d4:	633b      	str	r3, [r7, #48]	; 0x30
 800e7d6:	e78a      	b.n	800e6ee <__ssvfscanf_r+0x412>
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	68fd      	ldr	r5, [r7, #12]
 800e7dc:	3302      	adds	r3, #2
 800e7de:	d1c5      	bne.n	800e76c <__ssvfscanf_r+0x490>
 800e7e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	dc12      	bgt.n	800e80e <__ssvfscanf_r+0x532>
 800e7e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7ec:	f002 fd0a 	bl	8011204 <__ssrefill_r>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	d00c      	beq.n	800e80e <__ssvfscanf_r+0x532>
 800e7f4:	2d00      	cmp	r5, #0
 800e7f6:	d000      	beq.n	800e7fa <__ssvfscanf_r+0x51e>
 800e7f8:	e63f      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800e7fa:	2e00      	cmp	r6, #0
 800e7fc:	d10c      	bne.n	800e818 <__ssvfscanf_r+0x53c>
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	425a      	negs	r2, r3
 800e802:	4153      	adcs	r3, r2
 800e804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e806:	18d3      	adds	r3, r2, r3
 800e808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	e6de      	b.n	800e5cc <__ssvfscanf_r+0x2f0>
 800e80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e810:	2b00      	cmp	r3, #0
 800e812:	d000      	beq.n	800e816 <__ssvfscanf_r+0x53a>
 800e814:	e76c      	b.n	800e6f0 <__ssvfscanf_r+0x414>
 800e816:	e7f0      	b.n	800e7fa <__ssvfscanf_r+0x51e>
 800e818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81a:	69fa      	ldr	r2, [r7, #28]
 800e81c:	1ae1      	subs	r1, r4, r3
 800e81e:	108b      	asrs	r3, r1, #2
 800e820:	429a      	cmp	r2, r3
 800e822:	d9ec      	bls.n	800e7fe <__ssvfscanf_r+0x522>
 800e824:	6830      	ldr	r0, [r6, #0]
 800e826:	f002 f853 	bl	80108d0 <realloc>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d0e7      	beq.n	800e7fe <__ssvfscanf_r+0x522>
 800e82e:	6030      	str	r0, [r6, #0]
 800e830:	e7e5      	b.n	800e7fe <__ssvfscanf_r+0x522>
 800e832:	6a3b      	ldr	r3, [r7, #32]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d025      	beq.n	800e884 <__ssvfscanf_r+0x5a8>
 800e838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e83a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e840:	6812      	ldr	r2, [r2, #0]
 800e842:	4299      	cmp	r1, r3
 800e844:	dd11      	ble.n	800e86a <__ssvfscanf_r+0x58e>
 800e846:	1ac9      	subs	r1, r1, r3
 800e848:	18d2      	adds	r2, r2, r3
 800e84a:	18e4      	adds	r4, r4, r3
 800e84c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e84e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e850:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e852:	0019      	movs	r1, r3
 800e854:	601a      	str	r2, [r3, #0]
 800e856:	f002 fcd5 	bl	8011204 <__ssrefill_r>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d0ec      	beq.n	800e838 <__ssvfscanf_r+0x55c>
 800e85e:	2c00      	cmp	r4, #0
 800e860:	d100      	bne.n	800e864 <__ssvfscanf_r+0x588>
 800e862:	e60a      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800e864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e866:	191b      	adds	r3, r3, r4
 800e868:	e5ff      	b.n	800e46a <__ssvfscanf_r+0x18e>
 800e86a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e86c:	1a5b      	subs	r3, r3, r1
 800e86e:	1864      	adds	r4, r4, r1
 800e870:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e872:	604b      	str	r3, [r1, #4]
 800e874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e876:	18d2      	adds	r2, r2, r3
 800e878:	600a      	str	r2, [r1, #0]
 800e87a:	e7f3      	b.n	800e864 <__ssvfscanf_r+0x588>
 800e87c:	0800b72d 	.word	0x0800b72d
 800e880:	0000fff6 	.word	0x0000fff6
 800e884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e886:	0034      	movs	r4, r6
 800e888:	cb20      	ldmia	r3!, {r5}
 800e88a:	633b      	str	r3, [r7, #48]	; 0x30
 800e88c:	2380      	movs	r3, #128	; 0x80
 800e88e:	401c      	ands	r4, r3
 800e890:	421e      	tst	r6, r3
 800e892:	d028      	beq.n	800e8e6 <__ssvfscanf_r+0x60a>
 800e894:	2d00      	cmp	r5, #0
 800e896:	d100      	bne.n	800e89a <__ssvfscanf_r+0x5be>
 800e898:	e61d      	b.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800e89a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e89c:	f7fb fe50 	bl	800a540 <malloc>
 800e8a0:	6238      	str	r0, [r7, #32]
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d100      	bne.n	800e8a8 <__ssvfscanf_r+0x5cc>
 800e8a6:	e5ef      	b.n	800e488 <__ssvfscanf_r+0x1ac>
 800e8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8aa:	6028      	str	r0, [r5, #0]
 800e8ac:	88de      	ldrh	r6, [r3, #6]
 800e8ae:	889c      	ldrh	r4, [r3, #4]
 800e8b0:	6818      	ldr	r0, [r3, #0]
 800e8b2:	42a6      	cmp	r6, r4
 800e8b4:	d30e      	bcc.n	800e8d4 <__ssvfscanf_r+0x5f8>
 800e8b6:	4bbf      	ldr	r3, [pc, #764]	; (800ebb4 <__ssvfscanf_r+0x8d8>)
 800e8b8:	429c      	cmp	r4, r3
 800e8ba:	d900      	bls.n	800e8be <__ssvfscanf_r+0x5e2>
 800e8bc:	e6df      	b.n	800e67e <__ssvfscanf_r+0x3a2>
 800e8be:	3408      	adds	r4, #8
 800e8c0:	b2a4      	uxth	r4, r4
 800e8c2:	00a1      	lsls	r1, r4, #2
 800e8c4:	f002 f804 	bl	80108d0 <realloc>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d100      	bne.n	800e8ce <__ssvfscanf_r+0x5f2>
 800e8cc:	e6d7      	b.n	800e67e <__ssvfscanf_r+0x3a2>
 800e8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d0:	6018      	str	r0, [r3, #0]
 800e8d2:	809c      	strh	r4, [r3, #4]
 800e8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d6:	1c72      	adds	r2, r6, #1
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e8dc:	00b6      	lsls	r6, r6, #2
 800e8de:	002c      	movs	r4, r5
 800e8e0:	50f5      	str	r5, [r6, r3]
 800e8e2:	6a3d      	ldr	r5, [r7, #32]
 800e8e4:	80ca      	strh	r2, [r1, #6]
 800e8e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e8:	0029      	movs	r1, r5
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e8f2:	f002 fca6 	bl	8011242 <_sfread_r>
 800e8f6:	1e05      	subs	r5, r0, #0
 800e8f8:	d100      	bne.n	800e8fc <__ssvfscanf_r+0x620>
 800e8fa:	e5be      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800e8fc:	2c00      	cmp	r4, #0
 800e8fe:	d009      	beq.n	800e914 <__ssvfscanf_r+0x638>
 800e900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e902:	4283      	cmp	r3, r0
 800e904:	d906      	bls.n	800e914 <__ssvfscanf_r+0x638>
 800e906:	0001      	movs	r1, r0
 800e908:	6820      	ldr	r0, [r4, #0]
 800e90a:	f001 ffe1 	bl	80108d0 <realloc>
 800e90e:	2800      	cmp	r0, #0
 800e910:	d000      	beq.n	800e914 <__ssvfscanf_r+0x638>
 800e912:	6020      	str	r0, [r4, #0]
 800e914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e916:	195b      	adds	r3, r3, r5
 800e918:	63bb      	str	r3, [r7, #56]	; 0x38
 800e91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91c:	3301      	adds	r3, #1
 800e91e:	e4f8      	b.n	800e312 <__ssvfscanf_r+0x36>
 800e920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e922:	2b00      	cmp	r3, #0
 800e924:	d101      	bne.n	800e92a <__ssvfscanf_r+0x64e>
 800e926:	3b01      	subs	r3, #1
 800e928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e92a:	2210      	movs	r2, #16
 800e92c:	2301      	movs	r3, #1
 800e92e:	0034      	movs	r4, r6
 800e930:	4032      	ands	r2, r6
 800e932:	401c      	ands	r4, r3
 800e934:	623a      	str	r2, [r7, #32]
 800e936:	421e      	tst	r6, r3
 800e938:	d100      	bne.n	800e93c <__ssvfscanf_r+0x660>
 800e93a:	e116      	b.n	800eb6a <__ssvfscanf_r+0x88e>
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	d000      	beq.n	800e942 <__ssvfscanf_r+0x666>
 800e940:	e0b0      	b.n	800eaa4 <__ssvfscanf_r+0x7c8>
 800e942:	2080      	movs	r0, #128	; 0x80
 800e944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e946:	cb10      	ldmia	r3!, {r4}
 800e948:	60fb      	str	r3, [r7, #12]
 800e94a:	4206      	tst	r6, r0
 800e94c:	d100      	bne.n	800e950 <__ssvfscanf_r+0x674>
 800e94e:	e0b2      	b.n	800eab6 <__ssvfscanf_r+0x7da>
 800e950:	2c00      	cmp	r4, #0
 800e952:	d100      	bne.n	800e956 <__ssvfscanf_r+0x67a>
 800e954:	e68d      	b.n	800e672 <__ssvfscanf_r+0x396>
 800e956:	f7fb fdf3 	bl	800a540 <malloc>
 800e95a:	6338      	str	r0, [r7, #48]	; 0x30
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d100      	bne.n	800e962 <__ssvfscanf_r+0x686>
 800e960:	e684      	b.n	800e66c <__ssvfscanf_r+0x390>
 800e962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e964:	6023      	str	r3, [r4, #0]
 800e966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e968:	88de      	ldrh	r6, [r3, #6]
 800e96a:	889d      	ldrh	r5, [r3, #4]
 800e96c:	42ae      	cmp	r6, r5
 800e96e:	d310      	bcc.n	800e992 <__ssvfscanf_r+0x6b6>
 800e970:	4b90      	ldr	r3, [pc, #576]	; (800ebb4 <__ssvfscanf_r+0x8d8>)
 800e972:	429d      	cmp	r5, r3
 800e974:	d900      	bls.n	800e978 <__ssvfscanf_r+0x69c>
 800e976:	e679      	b.n	800e66c <__ssvfscanf_r+0x390>
 800e978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e97a:	3508      	adds	r5, #8
 800e97c:	b2ad      	uxth	r5, r5
 800e97e:	6818      	ldr	r0, [r3, #0]
 800e980:	00a9      	lsls	r1, r5, #2
 800e982:	f001 ffa5 	bl	80108d0 <realloc>
 800e986:	2800      	cmp	r0, #0
 800e988:	d100      	bne.n	800e98c <__ssvfscanf_r+0x6b0>
 800e98a:	e66f      	b.n	800e66c <__ssvfscanf_r+0x390>
 800e98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e98e:	6018      	str	r0, [r3, #0]
 800e990:	809d      	strh	r5, [r3, #4]
 800e992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e994:	1c72      	adds	r2, r6, #1
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	00b6      	lsls	r6, r6, #2
 800e99a:	50f4      	str	r4, [r6, r3]
 800e99c:	2320      	movs	r3, #32
 800e99e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9a0:	0026      	movs	r6, r4
 800e9a2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e9a4:	80ca      	strh	r2, [r1, #6]
 800e9a6:	613b      	str	r3, [r7, #16]
 800e9a8:	2500      	movs	r5, #0
 800e9aa:	f7fd f8a1 	bl	800baf0 <__locale_mb_cur_max>
 800e9ae:	42a8      	cmp	r0, r5
 800e9b0:	d100      	bne.n	800e9b4 <__ssvfscanf_r+0x6d8>
 800e9b2:	e562      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800e9b4:	1c6a      	adds	r2, r5, #1
 800e9b6:	61fa      	str	r2, [r7, #28]
 800e9b8:	228c      	movs	r2, #140	; 0x8c
 800e9ba:	2048      	movs	r0, #72	; 0x48
 800e9bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9be:	0052      	lsls	r2, r2, #1
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	1812      	adds	r2, r2, r0
 800e9c4:	7819      	ldrb	r1, [r3, #0]
 800e9c6:	19d2      	adds	r2, r2, r7
 800e9c8:	5551      	strb	r1, [r2, r5]
 800e9ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9ce:	6852      	ldr	r2, [r2, #4]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	600b      	str	r3, [r1, #0]
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	3a01      	subs	r2, #1
 800e9d8:	604a      	str	r2, [r1, #4]
 800e9da:	2b03      	cmp	r3, #3
 800e9dc:	d102      	bne.n	800e9e4 <__ssvfscanf_r+0x708>
 800e9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9e0:	2b04      	cmp	r3, #4
 800e9e2:	d006      	beq.n	800e9f2 <__ssvfscanf_r+0x716>
 800e9e4:	2048      	movs	r0, #72	; 0x48
 800e9e6:	2208      	movs	r2, #8
 800e9e8:	1813      	adds	r3, r2, r0
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	19d8      	adds	r0, r3, r7
 800e9ee:	f7fd f83b 	bl	800ba68 <memset>
 800e9f2:	2148      	movs	r1, #72	; 0x48
 800e9f4:	2308      	movs	r3, #8
 800e9f6:	228c      	movs	r2, #140	; 0x8c
 800e9f8:	185b      	adds	r3, r3, r1
 800e9fa:	0052      	lsls	r2, r2, #1
 800e9fc:	19db      	adds	r3, r3, r7
 800e9fe:	1852      	adds	r2, r2, r1
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	0021      	movs	r1, r4
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea08:	19d2      	adds	r2, r2, r7
 800ea0a:	f002 fafb 	bl	8011004 <_mbrtowc_r>
 800ea0e:	0003      	movs	r3, r0
 800ea10:	62b8      	str	r0, [r7, #40]	; 0x28
 800ea12:	3301      	adds	r3, #1
 800ea14:	d100      	bne.n	800ea18 <__ssvfscanf_r+0x73c>
 800ea16:	e530      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d151      	bne.n	800eac0 <__ssvfscanf_r+0x7e4>
 800ea1c:	6020      	str	r0, [r4, #0]
 800ea1e:	2301      	movs	r3, #1
 800ea20:	6825      	ldr	r5, [r4, #0]
 800ea22:	425b      	negs	r3, r3
 800ea24:	1c6a      	adds	r2, r5, #1
 800ea26:	d01a      	beq.n	800ea5e <__ssvfscanf_r+0x782>
 800ea28:	2048      	movs	r0, #72	; 0x48
 800ea2a:	3311      	adds	r3, #17
 800ea2c:	181b      	adds	r3, r3, r0
 800ea2e:	2208      	movs	r2, #8
 800ea30:	2100      	movs	r1, #0
 800ea32:	19d8      	adds	r0, r3, r7
 800ea34:	f7fd f818 	bl	800ba68 <memset>
 800ea38:	4b5f      	ldr	r3, [pc, #380]	; (800ebb8 <__ssvfscanf_r+0x8dc>)
 800ea3a:	2148      	movs	r1, #72	; 0x48
 800ea3c:	33e0      	adds	r3, #224	; 0xe0
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	2310      	movs	r3, #16
 800ea42:	4694      	mov	ip, r2
 800ea44:	185b      	adds	r3, r3, r1
 800ea46:	002a      	movs	r2, r5
 800ea48:	19db      	adds	r3, r3, r7
 800ea4a:	4665      	mov	r5, ip
 800ea4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea4e:	1879      	adds	r1, r7, r1
 800ea50:	47a8      	blx	r5
 800ea52:	2300      	movs	r3, #0
 800ea54:	2801      	cmp	r0, #1
 800ea56:	d102      	bne.n	800ea5e <__ssvfscanf_r+0x782>
 800ea58:	3348      	adds	r3, #72	; 0x48
 800ea5a:	18fb      	adds	r3, r7, r3
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	2218      	movs	r2, #24
 800ea60:	2148      	movs	r1, #72	; 0x48
 800ea62:	1852      	adds	r2, r2, r1
 800ea64:	19d2      	adds	r2, r2, r7
 800ea66:	5cd3      	ldrb	r3, [r2, r3]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d149      	bne.n	800eb00 <__ssvfscanf_r+0x824>
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d137      	bne.n	800eae2 <__ssvfscanf_r+0x806>
 800ea72:	6a3b      	ldr	r3, [r7, #32]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d113      	bne.n	800eaa0 <__ssvfscanf_r+0x7c4>
 800ea78:	6023      	str	r3, [r4, #0]
 800ea7a:	2e00      	cmp	r6, #0
 800ea7c:	d00d      	beq.n	800ea9a <__ssvfscanf_r+0x7be>
 800ea7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea80:	693a      	ldr	r2, [r7, #16]
 800ea82:	1ae4      	subs	r4, r4, r3
 800ea84:	10a3      	asrs	r3, r4, #2
 800ea86:	3301      	adds	r3, #1
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d906      	bls.n	800ea9a <__ssvfscanf_r+0x7be>
 800ea8c:	6830      	ldr	r0, [r6, #0]
 800ea8e:	1d21      	adds	r1, r4, #4
 800ea90:	f001 ff1e 	bl	80108d0 <realloc>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d000      	beq.n	800ea9a <__ssvfscanf_r+0x7be>
 800ea98:	6030      	str	r0, [r6, #0]
 800ea9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	e593      	b.n	800e5cc <__ssvfscanf_r+0x2f0>
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa6:	60fb      	str	r3, [r7, #12]
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	001e      	movs	r6, r3
 800eaac:	613b      	str	r3, [r7, #16]
 800eaae:	633b      	str	r3, [r7, #48]	; 0x30
 800eab0:	334c      	adds	r3, #76	; 0x4c
 800eab2:	18fc      	adds	r4, r7, r3
 800eab4:	e778      	b.n	800e9a8 <__ssvfscanf_r+0x6cc>
 800eab6:	6a3b      	ldr	r3, [r7, #32]
 800eab8:	001e      	movs	r6, r3
 800eaba:	613b      	str	r3, [r7, #16]
 800eabc:	633b      	str	r3, [r7, #48]	; 0x30
 800eabe:	e773      	b.n	800e9a8 <__ssvfscanf_r+0x6cc>
 800eac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac2:	69fd      	ldr	r5, [r7, #28]
 800eac4:	3302      	adds	r3, #2
 800eac6:	d1aa      	bne.n	800ea1e <__ssvfscanf_r+0x742>
 800eac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	dc47      	bgt.n	800eb60 <__ssvfscanf_r+0x884>
 800ead0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ead2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ead4:	f002 fb96 	bl	8011204 <__ssrefill_r>
 800ead8:	2800      	cmp	r0, #0
 800eada:	d041      	beq.n	800eb60 <__ssvfscanf_r+0x884>
 800eadc:	2d00      	cmp	r5, #0
 800eade:	d0c8      	beq.n	800ea72 <__ssvfscanf_r+0x796>
 800eae0:	e4cb      	b.n	800e47a <__ssvfscanf_r+0x19e>
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	2248      	movs	r2, #72	; 0x48
 800eae6:	3b01      	subs	r3, #1
 800eae8:	61fb      	str	r3, [r7, #28]
 800eaea:	238c      	movs	r3, #140	; 0x8c
 800eaec:	005b      	lsls	r3, r3, #1
 800eaee:	189b      	adds	r3, r3, r2
 800eaf0:	69fa      	ldr	r2, [r7, #28]
 800eaf2:	19db      	adds	r3, r3, r7
 800eaf4:	5cd1      	ldrb	r1, [r2, r3]
 800eaf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eaf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eafa:	f002 fb47 	bl	801118c <_sungetc_r>
 800eafe:	e7b5      	b.n	800ea6c <__ssvfscanf_r+0x790>
 800eb00:	69fa      	ldr	r2, [r7, #28]
 800eb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb04:	4694      	mov	ip, r2
 800eb06:	4463      	add	r3, ip
 800eb08:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0c:	2b03      	cmp	r3, #3
 800eb0e:	d102      	bne.n	800eb16 <__ssvfscanf_r+0x83a>
 800eb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb12:	2b04      	cmp	r3, #4
 800eb14:	d002      	beq.n	800eb1c <__ssvfscanf_r+0x840>
 800eb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb1c:	6a3b      	ldr	r3, [r7, #32]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d11a      	bne.n	800eb58 <__ssvfscanf_r+0x87c>
 800eb22:	3404      	adds	r4, #4
 800eb24:	2e00      	cmp	r6, #0
 800eb26:	d019      	beq.n	800eb5c <__ssvfscanf_r+0x880>
 800eb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2a:	693a      	ldr	r2, [r7, #16]
 800eb2c:	1ae3      	subs	r3, r4, r3
 800eb2e:	61fb      	str	r3, [r7, #28]
 800eb30:	6a3d      	ldr	r5, [r7, #32]
 800eb32:	109b      	asrs	r3, r3, #2
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d3c7      	bcc.n	800eac8 <__ssvfscanf_r+0x7ec>
 800eb38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb3a:	00d1      	lsls	r1, r2, #3
 800eb3c:	f001 fec8 	bl	80108d0 <realloc>
 800eb40:	6338      	str	r0, [r7, #48]	; 0x30
 800eb42:	2800      	cmp	r0, #0
 800eb44:	d100      	bne.n	800eb48 <__ssvfscanf_r+0x86c>
 800eb46:	e591      	b.n	800e66c <__ssvfscanf_r+0x390>
 800eb48:	4684      	mov	ip, r0
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	69fc      	ldr	r4, [r7, #28]
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	4464      	add	r4, ip
 800eb52:	6030      	str	r0, [r6, #0]
 800eb54:	613b      	str	r3, [r7, #16]
 800eb56:	e7b7      	b.n	800eac8 <__ssvfscanf_r+0x7ec>
 800eb58:	2500      	movs	r5, #0
 800eb5a:	e7b5      	b.n	800eac8 <__ssvfscanf_r+0x7ec>
 800eb5c:	0035      	movs	r5, r6
 800eb5e:	e7b3      	b.n	800eac8 <__ssvfscanf_r+0x7ec>
 800eb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d000      	beq.n	800eb68 <__ssvfscanf_r+0x88c>
 800eb66:	e720      	b.n	800e9aa <__ssvfscanf_r+0x6ce>
 800eb68:	e783      	b.n	800ea72 <__ssvfscanf_r+0x796>
 800eb6a:	6a3b      	ldr	r3, [r7, #32]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d025      	beq.n	800ebbc <__ssvfscanf_r+0x8e0>
 800eb70:	2118      	movs	r1, #24
 800eb72:	2048      	movs	r0, #72	; 0x48
 800eb74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb76:	1809      	adds	r1, r1, r0
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	19c9      	adds	r1, r1, r7
 800eb7c:	781a      	ldrb	r2, [r3, #0]
 800eb7e:	5c8a      	ldrb	r2, [r1, r2]
 800eb80:	2a00      	cmp	r2, #0
 800eb82:	d103      	bne.n	800eb8c <__ssvfscanf_r+0x8b0>
 800eb84:	2c00      	cmp	r4, #0
 800eb86:	d000      	beq.n	800eb8a <__ssvfscanf_r+0x8ae>
 800eb88:	e66c      	b.n	800e864 <__ssvfscanf_r+0x588>
 800eb8a:	e4a4      	b.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800eb8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb90:	6852      	ldr	r2, [r2, #4]
 800eb92:	3301      	adds	r3, #1
 800eb94:	600b      	str	r3, [r1, #0]
 800eb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb98:	3a01      	subs	r2, #1
 800eb9a:	3401      	adds	r4, #1
 800eb9c:	604a      	str	r2, [r1, #4]
 800eb9e:	429c      	cmp	r4, r3
 800eba0:	d100      	bne.n	800eba4 <__ssvfscanf_r+0x8c8>
 800eba2:	e65f      	b.n	800e864 <__ssvfscanf_r+0x588>
 800eba4:	2a00      	cmp	r2, #0
 800eba6:	dce3      	bgt.n	800eb70 <__ssvfscanf_r+0x894>
 800eba8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ebaa:	f002 fb2b 	bl	8011204 <__ssrefill_r>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d0de      	beq.n	800eb70 <__ssvfscanf_r+0x894>
 800ebb2:	e657      	b.n	800e864 <__ssvfscanf_r+0x588>
 800ebb4:	0000fff6 	.word	0x0000fff6
 800ebb8:	20000448 	.word	0x20000448
 800ebbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbe:	0032      	movs	r2, r6
 800ebc0:	cb20      	ldmia	r3!, {r5}
 800ebc2:	61fb      	str	r3, [r7, #28]
 800ebc4:	2380      	movs	r3, #128	; 0x80
 800ebc6:	401a      	ands	r2, r3
 800ebc8:	421e      	tst	r6, r3
 800ebca:	d100      	bne.n	800ebce <__ssvfscanf_r+0x8f2>
 800ebcc:	e086      	b.n	800ecdc <__ssvfscanf_r+0xa00>
 800ebce:	2d00      	cmp	r5, #0
 800ebd0:	d100      	bne.n	800ebd4 <__ssvfscanf_r+0x8f8>
 800ebd2:	e480      	b.n	800e4d6 <__ssvfscanf_r+0x1fa>
 800ebd4:	2020      	movs	r0, #32
 800ebd6:	f7fb fcb3 	bl	800a540 <malloc>
 800ebda:	6338      	str	r0, [r7, #48]	; 0x30
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	d100      	bne.n	800ebe2 <__ssvfscanf_r+0x906>
 800ebe0:	e452      	b.n	800e488 <__ssvfscanf_r+0x1ac>
 800ebe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebe4:	6028      	str	r0, [r5, #0]
 800ebe6:	88de      	ldrh	r6, [r3, #6]
 800ebe8:	889c      	ldrh	r4, [r3, #4]
 800ebea:	6818      	ldr	r0, [r3, #0]
 800ebec:	42a6      	cmp	r6, r4
 800ebee:	d30e      	bcc.n	800ec0e <__ssvfscanf_r+0x932>
 800ebf0:	4bc3      	ldr	r3, [pc, #780]	; (800ef00 <__ssvfscanf_r+0xc24>)
 800ebf2:	429c      	cmp	r4, r3
 800ebf4:	d900      	bls.n	800ebf8 <__ssvfscanf_r+0x91c>
 800ebf6:	e542      	b.n	800e67e <__ssvfscanf_r+0x3a2>
 800ebf8:	3408      	adds	r4, #8
 800ebfa:	b2a4      	uxth	r4, r4
 800ebfc:	00a1      	lsls	r1, r4, #2
 800ebfe:	f001 fe67 	bl	80108d0 <realloc>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d100      	bne.n	800ec08 <__ssvfscanf_r+0x92c>
 800ec06:	e53a      	b.n	800e67e <__ssvfscanf_r+0x3a2>
 800ec08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec0a:	6018      	str	r0, [r3, #0]
 800ec0c:	809c      	strh	r4, [r3, #4]
 800ec0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec10:	1c72      	adds	r2, r6, #1
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	00b6      	lsls	r6, r6, #2
 800ec16:	50f5      	str	r5, [r6, r3]
 800ec18:	2320      	movs	r3, #32
 800ec1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec1c:	002e      	movs	r6, r5
 800ec1e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ec20:	80ca      	strh	r2, [r1, #6]
 800ec22:	623b      	str	r3, [r7, #32]
 800ec24:	002c      	movs	r4, r5
 800ec26:	2118      	movs	r1, #24
 800ec28:	2048      	movs	r0, #72	; 0x48
 800ec2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec2c:	1809      	adds	r1, r1, r0
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	19c9      	adds	r1, r1, r7
 800ec32:	781a      	ldrb	r2, [r3, #0]
 800ec34:	5c8a      	ldrb	r2, [r1, r2]
 800ec36:	2a00      	cmp	r2, #0
 800ec38:	d101      	bne.n	800ec3e <__ssvfscanf_r+0x962>
 800ec3a:	633d      	str	r5, [r7, #48]	; 0x30
 800ec3c:	e031      	b.n	800eca2 <__ssvfscanf_r+0x9c6>
 800ec3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec42:	6852      	ldr	r2, [r2, #4]
 800ec44:	3a01      	subs	r2, #1
 800ec46:	604a      	str	r2, [r1, #4]
 800ec48:	1c5a      	adds	r2, r3, #1
 800ec4a:	600a      	str	r2, [r1, #0]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	1c6a      	adds	r2, r5, #1
 800ec50:	633a      	str	r2, [r7, #48]	; 0x30
 800ec52:	702b      	strb	r3, [r5, #0]
 800ec54:	2e00      	cmp	r6, #0
 800ec56:	d010      	beq.n	800ec7a <__ssvfscanf_r+0x99e>
 800ec58:	6a3b      	ldr	r3, [r7, #32]
 800ec5a:	1b15      	subs	r5, r2, r4
 800ec5c:	429d      	cmp	r5, r3
 800ec5e:	d30c      	bcc.n	800ec7a <__ssvfscanf_r+0x99e>
 800ec60:	005b      	lsls	r3, r3, #1
 800ec62:	0020      	movs	r0, r4
 800ec64:	0019      	movs	r1, r3
 800ec66:	623b      	str	r3, [r7, #32]
 800ec68:	f001 fe32 	bl	80108d0 <realloc>
 800ec6c:	1e04      	subs	r4, r0, #0
 800ec6e:	d101      	bne.n	800ec74 <__ssvfscanf_r+0x998>
 800ec70:	f7ff fc0a 	bl	800e488 <__ssvfscanf_r+0x1ac>
 800ec74:	1943      	adds	r3, r0, r5
 800ec76:	633b      	str	r3, [r7, #48]	; 0x30
 800ec78:	6030      	str	r0, [r6, #0]
 800ec7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec7c:	3b01      	subs	r3, #1
 800ec7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d00e      	beq.n	800eca2 <__ssvfscanf_r+0x9c6>
 800ec84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dc2a      	bgt.n	800ece2 <__ssvfscanf_r+0xa06>
 800ec8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec90:	f002 fab8 	bl	8011204 <__ssrefill_r>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d024      	beq.n	800ece2 <__ssvfscanf_r+0xa06>
 800ec98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9a:	42a3      	cmp	r3, r4
 800ec9c:	d101      	bne.n	800eca2 <__ssvfscanf_r+0x9c6>
 800ec9e:	f7ff fbec 	bl	800e47a <__ssvfscanf_r+0x19e>
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	1b1d      	subs	r5, r3, r4
 800eca6:	42a3      	cmp	r3, r4
 800eca8:	d101      	bne.n	800ecae <__ssvfscanf_r+0x9d2>
 800ecaa:	f7ff fc14 	bl	800e4d6 <__ssvfscanf_r+0x1fa>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecb2:	7013      	strb	r3, [r2, #0]
 800ecb4:	429e      	cmp	r6, r3
 800ecb6:	d009      	beq.n	800eccc <__ssvfscanf_r+0x9f0>
 800ecb8:	6a3b      	ldr	r3, [r7, #32]
 800ecba:	1c69      	adds	r1, r5, #1
 800ecbc:	428b      	cmp	r3, r1
 800ecbe:	d905      	bls.n	800eccc <__ssvfscanf_r+0x9f0>
 800ecc0:	6830      	ldr	r0, [r6, #0]
 800ecc2:	f001 fe05 	bl	80108d0 <realloc>
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	d000      	beq.n	800eccc <__ssvfscanf_r+0x9f0>
 800ecca:	6030      	str	r0, [r6, #0]
 800eccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecce:	3301      	adds	r3, #1
 800ecd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd4:	195b      	adds	r3, r3, r5
 800ecd6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	e477      	b.n	800e5cc <__ssvfscanf_r+0x2f0>
 800ecdc:	0016      	movs	r6, r2
 800ecde:	623a      	str	r2, [r7, #32]
 800ece0:	e7a0      	b.n	800ec24 <__ssvfscanf_r+0x948>
 800ece2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ece4:	e79f      	b.n	800ec26 <__ssvfscanf_r+0x94a>
 800ece6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d101      	bne.n	800ecf0 <__ssvfscanf_r+0xa14>
 800ecec:	3b01      	subs	r3, #1
 800ecee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecf0:	2210      	movs	r2, #16
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	0034      	movs	r4, r6
 800ecf6:	4032      	ands	r2, r6
 800ecf8:	401c      	ands	r4, r3
 800ecfa:	61fa      	str	r2, [r7, #28]
 800ecfc:	421e      	tst	r6, r3
 800ecfe:	d100      	bne.n	800ed02 <__ssvfscanf_r+0xa26>
 800ed00:	e102      	b.n	800ef08 <__ssvfscanf_r+0xc2c>
 800ed02:	2a00      	cmp	r2, #0
 800ed04:	d000      	beq.n	800ed08 <__ssvfscanf_r+0xa2c>
 800ed06:	e09f      	b.n	800ee48 <__ssvfscanf_r+0xb6c>
 800ed08:	2080      	movs	r0, #128	; 0x80
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0c:	cb10      	ldmia	r3!, {r4}
 800ed0e:	60fb      	str	r3, [r7, #12]
 800ed10:	4206      	tst	r6, r0
 800ed12:	d100      	bne.n	800ed16 <__ssvfscanf_r+0xa3a>
 800ed14:	e0a1      	b.n	800ee5a <__ssvfscanf_r+0xb7e>
 800ed16:	2c00      	cmp	r4, #0
 800ed18:	d100      	bne.n	800ed1c <__ssvfscanf_r+0xa40>
 800ed1a:	e4aa      	b.n	800e672 <__ssvfscanf_r+0x396>
 800ed1c:	f7fb fc10 	bl	800a540 <malloc>
 800ed20:	6338      	str	r0, [r7, #48]	; 0x30
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d100      	bne.n	800ed28 <__ssvfscanf_r+0xa4c>
 800ed26:	e4a1      	b.n	800e66c <__ssvfscanf_r+0x390>
 800ed28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2a:	6023      	str	r3, [r4, #0]
 800ed2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed2e:	88de      	ldrh	r6, [r3, #6]
 800ed30:	889d      	ldrh	r5, [r3, #4]
 800ed32:	42ae      	cmp	r6, r5
 800ed34:	d310      	bcc.n	800ed58 <__ssvfscanf_r+0xa7c>
 800ed36:	4b72      	ldr	r3, [pc, #456]	; (800ef00 <__ssvfscanf_r+0xc24>)
 800ed38:	429d      	cmp	r5, r3
 800ed3a:	d900      	bls.n	800ed3e <__ssvfscanf_r+0xa62>
 800ed3c:	e496      	b.n	800e66c <__ssvfscanf_r+0x390>
 800ed3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed40:	3508      	adds	r5, #8
 800ed42:	b2ad      	uxth	r5, r5
 800ed44:	6818      	ldr	r0, [r3, #0]
 800ed46:	00a9      	lsls	r1, r5, #2
 800ed48:	f001 fdc2 	bl	80108d0 <realloc>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d100      	bne.n	800ed52 <__ssvfscanf_r+0xa76>
 800ed50:	e48c      	b.n	800e66c <__ssvfscanf_r+0x390>
 800ed52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed54:	6018      	str	r0, [r3, #0]
 800ed56:	809d      	strh	r5, [r3, #4]
 800ed58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed5a:	1c72      	adds	r2, r6, #1
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	00b6      	lsls	r6, r6, #2
 800ed60:	50f4      	str	r4, [r6, r3]
 800ed62:	2320      	movs	r3, #32
 800ed64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed66:	0025      	movs	r5, r4
 800ed68:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ed6a:	80ca      	strh	r2, [r1, #6]
 800ed6c:	613b      	str	r3, [r7, #16]
 800ed6e:	2300      	movs	r3, #0
 800ed70:	623b      	str	r3, [r7, #32]
 800ed72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed74:	4a63      	ldr	r2, [pc, #396]	; (800ef04 <__ssvfscanf_r+0xc28>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	5cd3      	ldrb	r3, [r2, r3]
 800ed7c:	2208      	movs	r2, #8
 800ed7e:	4213      	tst	r3, r2
 800ed80:	d149      	bne.n	800ee16 <__ssvfscanf_r+0xb3a>
 800ed82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d046      	beq.n	800ee16 <__ssvfscanf_r+0xb3a>
 800ed88:	f7fc feb2 	bl	800baf0 <__locale_mb_cur_max>
 800ed8c:	6a3b      	ldr	r3, [r7, #32]
 800ed8e:	4298      	cmp	r0, r3
 800ed90:	d101      	bne.n	800ed96 <__ssvfscanf_r+0xaba>
 800ed92:	f7ff fb72 	bl	800e47a <__ssvfscanf_r+0x19e>
 800ed96:	6a3a      	ldr	r2, [r7, #32]
 800ed98:	2048      	movs	r0, #72	; 0x48
 800ed9a:	1c56      	adds	r6, r2, #1
 800ed9c:	228c      	movs	r2, #140	; 0x8c
 800ed9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eda0:	0052      	lsls	r2, r2, #1
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	1812      	adds	r2, r2, r0
 800eda6:	7819      	ldrb	r1, [r3, #0]
 800eda8:	6a38      	ldr	r0, [r7, #32]
 800edaa:	19d2      	adds	r2, r2, r7
 800edac:	5411      	strb	r1, [r2, r0]
 800edae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edb2:	6852      	ldr	r2, [r2, #4]
 800edb4:	3301      	adds	r3, #1
 800edb6:	600b      	str	r3, [r1, #0]
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	3a01      	subs	r2, #1
 800edbc:	604a      	str	r2, [r1, #4]
 800edbe:	2b03      	cmp	r3, #3
 800edc0:	d102      	bne.n	800edc8 <__ssvfscanf_r+0xaec>
 800edc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edc4:	2b04      	cmp	r3, #4
 800edc6:	d007      	beq.n	800edd8 <__ssvfscanf_r+0xafc>
 800edc8:	2048      	movs	r0, #72	; 0x48
 800edca:	2310      	movs	r3, #16
 800edcc:	181b      	adds	r3, r3, r0
 800edce:	2208      	movs	r2, #8
 800edd0:	2100      	movs	r1, #0
 800edd2:	19d8      	adds	r0, r3, r7
 800edd4:	f7fc fe48 	bl	800ba68 <memset>
 800edd8:	2148      	movs	r1, #72	; 0x48
 800edda:	2310      	movs	r3, #16
 800eddc:	228c      	movs	r2, #140	; 0x8c
 800edde:	185b      	adds	r3, r3, r1
 800ede0:	0052      	lsls	r2, r2, #1
 800ede2:	19db      	adds	r3, r3, r7
 800ede4:	1852      	adds	r2, r2, r1
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	0021      	movs	r1, r4
 800edea:	0033      	movs	r3, r6
 800edec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edee:	19d2      	adds	r2, r2, r7
 800edf0:	f002 f908 	bl	8011004 <_mbrtowc_r>
 800edf4:	0003      	movs	r3, r0
 800edf6:	62b8      	str	r0, [r7, #40]	; 0x28
 800edf8:	3301      	adds	r3, #1
 800edfa:	d101      	bne.n	800ee00 <__ssvfscanf_r+0xb24>
 800edfc:	f7ff fb3d 	bl	800e47a <__ssvfscanf_r+0x19e>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d12f      	bne.n	800ee64 <__ssvfscanf_r+0xb88>
 800ee04:	6020      	str	r0, [r4, #0]
 800ee06:	6820      	ldr	r0, [r4, #0]
 800ee08:	f002 f91a 	bl	8011040 <iswspace>
 800ee0c:	6238      	str	r0, [r7, #32]
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d04a      	beq.n	800eea8 <__ssvfscanf_r+0xbcc>
 800ee12:	2e00      	cmp	r6, #0
 800ee14:	d13c      	bne.n	800ee90 <__ssvfscanf_r+0xbb4>
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d000      	beq.n	800ee1e <__ssvfscanf_r+0xb42>
 800ee1c:	e640      	b.n	800eaa0 <__ssvfscanf_r+0x7c4>
 800ee1e:	6023      	str	r3, [r4, #0]
 800ee20:	2d00      	cmp	r5, #0
 800ee22:	d100      	bne.n	800ee26 <__ssvfscanf_r+0xb4a>
 800ee24:	e639      	b.n	800ea9a <__ssvfscanf_r+0x7be>
 800ee26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	1ae4      	subs	r4, r4, r3
 800ee2c:	10a3      	asrs	r3, r4, #2
 800ee2e:	3301      	adds	r3, #1
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d800      	bhi.n	800ee36 <__ssvfscanf_r+0xb5a>
 800ee34:	e631      	b.n	800ea9a <__ssvfscanf_r+0x7be>
 800ee36:	6828      	ldr	r0, [r5, #0]
 800ee38:	1d21      	adds	r1, r4, #4
 800ee3a:	f001 fd49 	bl	80108d0 <realloc>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d100      	bne.n	800ee44 <__ssvfscanf_r+0xb68>
 800ee42:	e62a      	b.n	800ea9a <__ssvfscanf_r+0x7be>
 800ee44:	6028      	str	r0, [r5, #0]
 800ee46:	e628      	b.n	800ea9a <__ssvfscanf_r+0x7be>
 800ee48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4a:	60fb      	str	r3, [r7, #12]
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	001d      	movs	r5, r3
 800ee50:	613b      	str	r3, [r7, #16]
 800ee52:	633b      	str	r3, [r7, #48]	; 0x30
 800ee54:	334c      	adds	r3, #76	; 0x4c
 800ee56:	18fc      	adds	r4, r7, r3
 800ee58:	e789      	b.n	800ed6e <__ssvfscanf_r+0xa92>
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	001d      	movs	r5, r3
 800ee5e:	613b      	str	r3, [r7, #16]
 800ee60:	633b      	str	r3, [r7, #48]	; 0x30
 800ee62:	e784      	b.n	800ed6e <__ssvfscanf_r+0xa92>
 800ee64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee66:	623e      	str	r6, [r7, #32]
 800ee68:	3302      	adds	r3, #2
 800ee6a:	d1cc      	bne.n	800ee06 <__ssvfscanf_r+0xb2a>
 800ee6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	dd00      	ble.n	800ee76 <__ssvfscanf_r+0xb9a>
 800ee74:	e77d      	b.n	800ed72 <__ssvfscanf_r+0xa96>
 800ee76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee7a:	f002 f9c3 	bl	8011204 <__ssrefill_r>
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d100      	bne.n	800ee84 <__ssvfscanf_r+0xba8>
 800ee82:	e776      	b.n	800ed72 <__ssvfscanf_r+0xa96>
 800ee84:	6a3b      	ldr	r3, [r7, #32]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <__ssvfscanf_r+0xbb2>
 800ee8a:	f7ff faf6 	bl	800e47a <__ssvfscanf_r+0x19e>
 800ee8e:	e7c2      	b.n	800ee16 <__ssvfscanf_r+0xb3a>
 800ee90:	238c      	movs	r3, #140	; 0x8c
 800ee92:	2248      	movs	r2, #72	; 0x48
 800ee94:	005b      	lsls	r3, r3, #1
 800ee96:	189b      	adds	r3, r3, r2
 800ee98:	3e01      	subs	r6, #1
 800ee9a:	19db      	adds	r3, r3, r7
 800ee9c:	5cf1      	ldrb	r1, [r6, r3]
 800ee9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eea0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eea2:	f002 f973 	bl	801118c <_sungetc_r>
 800eea6:	e7b4      	b.n	800ee12 <__ssvfscanf_r+0xb36>
 800eea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeaa:	199b      	adds	r3, r3, r6
 800eeac:	63bb      	str	r3, [r7, #56]	; 0x38
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	2b03      	cmp	r3, #3
 800eeb2:	d102      	bne.n	800eeba <__ssvfscanf_r+0xbde>
 800eeb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eeb6:	2b04      	cmp	r3, #4
 800eeb8:	d002      	beq.n	800eec0 <__ssvfscanf_r+0xbe4>
 800eeba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eebc:	3b01      	subs	r3, #1
 800eebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d1d2      	bne.n	800ee6c <__ssvfscanf_r+0xb90>
 800eec6:	3404      	adds	r4, #4
 800eec8:	2d00      	cmp	r5, #0
 800eeca:	d016      	beq.n	800eefa <__ssvfscanf_r+0xc1e>
 800eecc:	69fa      	ldr	r2, [r7, #28]
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	623a      	str	r2, [r7, #32]
 800eed2:	693a      	ldr	r2, [r7, #16]
 800eed4:	1ae6      	subs	r6, r4, r3
 800eed6:	10b3      	asrs	r3, r6, #2
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d3c7      	bcc.n	800ee6c <__ssvfscanf_r+0xb90>
 800eedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eede:	00d1      	lsls	r1, r2, #3
 800eee0:	f001 fcf6 	bl	80108d0 <realloc>
 800eee4:	6338      	str	r0, [r7, #48]	; 0x30
 800eee6:	2800      	cmp	r0, #0
 800eee8:	d101      	bne.n	800eeee <__ssvfscanf_r+0xc12>
 800eeea:	f7ff fbbf 	bl	800e66c <__ssvfscanf_r+0x390>
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	1984      	adds	r4, r0, r6
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	6028      	str	r0, [r5, #0]
 800eef6:	613b      	str	r3, [r7, #16]
 800eef8:	e7b8      	b.n	800ee6c <__ssvfscanf_r+0xb90>
 800eefa:	623d      	str	r5, [r7, #32]
 800eefc:	e7b6      	b.n	800ee6c <__ssvfscanf_r+0xb90>
 800eefe:	46c0      	nop			; (mov r8, r8)
 800ef00:	0000fff6 	.word	0x0000fff6
 800ef04:	08013fa9 	.word	0x08013fa9
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d01c      	beq.n	800ef48 <__ssvfscanf_r+0xc6c>
 800ef0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef10:	49bf      	ldr	r1, [pc, #764]	; (800f210 <__ssvfscanf_r+0xf34>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	781a      	ldrb	r2, [r3, #0]
 800ef16:	5c8a      	ldrb	r2, [r1, r2]
 800ef18:	2108      	movs	r1, #8
 800ef1a:	420a      	tst	r2, r1
 800ef1c:	d000      	beq.n	800ef20 <__ssvfscanf_r+0xc44>
 800ef1e:	e4a1      	b.n	800e864 <__ssvfscanf_r+0x588>
 800ef20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef24:	6852      	ldr	r2, [r2, #4]
 800ef26:	3301      	adds	r3, #1
 800ef28:	600b      	str	r3, [r1, #0]
 800ef2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef2c:	3a01      	subs	r2, #1
 800ef2e:	3401      	adds	r4, #1
 800ef30:	604a      	str	r2, [r1, #4]
 800ef32:	429c      	cmp	r4, r3
 800ef34:	d100      	bne.n	800ef38 <__ssvfscanf_r+0xc5c>
 800ef36:	e495      	b.n	800e864 <__ssvfscanf_r+0x588>
 800ef38:	2a00      	cmp	r2, #0
 800ef3a:	dce8      	bgt.n	800ef0e <__ssvfscanf_r+0xc32>
 800ef3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef3e:	f002 f961 	bl	8011204 <__ssrefill_r>
 800ef42:	2800      	cmp	r0, #0
 800ef44:	d0e3      	beq.n	800ef0e <__ssvfscanf_r+0xc32>
 800ef46:	e48d      	b.n	800e864 <__ssvfscanf_r+0x588>
 800ef48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4a:	0032      	movs	r2, r6
 800ef4c:	cb10      	ldmia	r3!, {r4}
 800ef4e:	61fb      	str	r3, [r7, #28]
 800ef50:	2380      	movs	r3, #128	; 0x80
 800ef52:	401a      	ands	r2, r3
 800ef54:	421e      	tst	r6, r3
 800ef56:	d039      	beq.n	800efcc <__ssvfscanf_r+0xcf0>
 800ef58:	2c00      	cmp	r4, #0
 800ef5a:	d101      	bne.n	800ef60 <__ssvfscanf_r+0xc84>
 800ef5c:	f7ff fabb 	bl	800e4d6 <__ssvfscanf_r+0x1fa>
 800ef60:	2020      	movs	r0, #32
 800ef62:	f7fb faed 	bl	800a540 <malloc>
 800ef66:	6338      	str	r0, [r7, #48]	; 0x30
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d101      	bne.n	800ef70 <__ssvfscanf_r+0xc94>
 800ef6c:	f7ff fa8c 	bl	800e488 <__ssvfscanf_r+0x1ac>
 800ef70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef72:	6020      	str	r0, [r4, #0]
 800ef74:	88de      	ldrh	r6, [r3, #6]
 800ef76:	889d      	ldrh	r5, [r3, #4]
 800ef78:	6818      	ldr	r0, [r3, #0]
 800ef7a:	42ae      	cmp	r6, r5
 800ef7c:	d310      	bcc.n	800efa0 <__ssvfscanf_r+0xcc4>
 800ef7e:	4ba5      	ldr	r3, [pc, #660]	; (800f214 <__ssvfscanf_r+0xf38>)
 800ef80:	429d      	cmp	r5, r3
 800ef82:	d901      	bls.n	800ef88 <__ssvfscanf_r+0xcac>
 800ef84:	f7ff fb7b 	bl	800e67e <__ssvfscanf_r+0x3a2>
 800ef88:	3508      	adds	r5, #8
 800ef8a:	b2ad      	uxth	r5, r5
 800ef8c:	00a9      	lsls	r1, r5, #2
 800ef8e:	f001 fc9f 	bl	80108d0 <realloc>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	d101      	bne.n	800ef9a <__ssvfscanf_r+0xcbe>
 800ef96:	f7ff fb72 	bl	800e67e <__ssvfscanf_r+0x3a2>
 800ef9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef9c:	6018      	str	r0, [r3, #0]
 800ef9e:	809d      	strh	r5, [r3, #4]
 800efa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa2:	1c72      	adds	r2, r6, #1
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	00b6      	lsls	r6, r6, #2
 800efa8:	50f4      	str	r4, [r6, r3]
 800efaa:	2320      	movs	r3, #32
 800efac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efae:	0026      	movs	r6, r4
 800efb0:	80ca      	strh	r2, [r1, #6]
 800efb2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800efb4:	633b      	str	r3, [r7, #48]	; 0x30
 800efb6:	0025      	movs	r5, r4
 800efb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efba:	4995      	ldr	r1, [pc, #596]	; (800f210 <__ssvfscanf_r+0xf34>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	781a      	ldrb	r2, [r3, #0]
 800efc0:	5c8a      	ldrb	r2, [r1, r2]
 800efc2:	2108      	movs	r1, #8
 800efc4:	420a      	tst	r2, r1
 800efc6:	d004      	beq.n	800efd2 <__ssvfscanf_r+0xcf6>
 800efc8:	623c      	str	r4, [r7, #32]
 800efca:	e031      	b.n	800f030 <__ssvfscanf_r+0xd54>
 800efcc:	0016      	movs	r6, r2
 800efce:	633a      	str	r2, [r7, #48]	; 0x30
 800efd0:	e7f1      	b.n	800efb6 <__ssvfscanf_r+0xcda>
 800efd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efd6:	6852      	ldr	r2, [r2, #4]
 800efd8:	3a01      	subs	r2, #1
 800efda:	604a      	str	r2, [r1, #4]
 800efdc:	1c5a      	adds	r2, r3, #1
 800efde:	600a      	str	r2, [r1, #0]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	1c62      	adds	r2, r4, #1
 800efe4:	623a      	str	r2, [r7, #32]
 800efe6:	7023      	strb	r3, [r4, #0]
 800efe8:	2e00      	cmp	r6, #0
 800efea:	d010      	beq.n	800f00e <__ssvfscanf_r+0xd32>
 800efec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efee:	1b54      	subs	r4, r2, r5
 800eff0:	429c      	cmp	r4, r3
 800eff2:	d30c      	bcc.n	800f00e <__ssvfscanf_r+0xd32>
 800eff4:	005b      	lsls	r3, r3, #1
 800eff6:	0028      	movs	r0, r5
 800eff8:	0019      	movs	r1, r3
 800effa:	633b      	str	r3, [r7, #48]	; 0x30
 800effc:	f001 fc68 	bl	80108d0 <realloc>
 800f000:	1e05      	subs	r5, r0, #0
 800f002:	d101      	bne.n	800f008 <__ssvfscanf_r+0xd2c>
 800f004:	f7ff fa40 	bl	800e488 <__ssvfscanf_r+0x1ac>
 800f008:	1903      	adds	r3, r0, r4
 800f00a:	623b      	str	r3, [r7, #32]
 800f00c:	6030      	str	r0, [r6, #0]
 800f00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f010:	3b01      	subs	r3, #1
 800f012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00b      	beq.n	800f030 <__ssvfscanf_r+0xd54>
 800f018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	dd01      	ble.n	800f024 <__ssvfscanf_r+0xd48>
 800f020:	6a3c      	ldr	r4, [r7, #32]
 800f022:	e7c9      	b.n	800efb8 <__ssvfscanf_r+0xcdc>
 800f024:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f026:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f028:	f002 f8ec 	bl	8011204 <__ssrefill_r>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d0f7      	beq.n	800f020 <__ssvfscanf_r+0xd44>
 800f030:	2300      	movs	r3, #0
 800f032:	6a3a      	ldr	r2, [r7, #32]
 800f034:	7013      	strb	r3, [r2, #0]
 800f036:	1b55      	subs	r5, r2, r5
 800f038:	2e00      	cmp	r6, #0
 800f03a:	d009      	beq.n	800f050 <__ssvfscanf_r+0xd74>
 800f03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03e:	1c69      	adds	r1, r5, #1
 800f040:	428b      	cmp	r3, r1
 800f042:	d905      	bls.n	800f050 <__ssvfscanf_r+0xd74>
 800f044:	6830      	ldr	r0, [r6, #0]
 800f046:	f001 fc43 	bl	80108d0 <realloc>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	d000      	beq.n	800f050 <__ssvfscanf_r+0xd74>
 800f04e:	6030      	str	r0, [r6, #0]
 800f050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f052:	195b      	adds	r3, r3, r5
 800f054:	63bb      	str	r3, [r7, #56]	; 0x38
 800f056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f058:	3301      	adds	r3, #1
 800f05a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f05c:	e63c      	b.n	800ecd8 <__ssvfscanf_r+0x9fc>
 800f05e:	22ae      	movs	r2, #174	; 0xae
 800f060:	2100      	movs	r1, #0
 800f062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f064:	0052      	lsls	r2, r2, #1
 800f066:	3b01      	subs	r3, #1
 800f068:	6239      	str	r1, [r7, #32]
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d906      	bls.n	800f07c <__ssvfscanf_r+0xda0>
 800f06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f070:	3b5e      	subs	r3, #94	; 0x5e
 800f072:	3bff      	subs	r3, #255	; 0xff
 800f074:	623b      	str	r3, [r7, #32]
 800f076:	235e      	movs	r3, #94	; 0x5e
 800f078:	33ff      	adds	r3, #255	; 0xff
 800f07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f07c:	24d8      	movs	r4, #216	; 0xd8
 800f07e:	2300      	movs	r3, #0
 800f080:	2248      	movs	r2, #72	; 0x48
 800f082:	0124      	lsls	r4, r4, #4
 800f084:	4334      	orrs	r4, r6
 800f086:	2680      	movs	r6, #128	; 0x80
 800f088:	61fb      	str	r3, [r7, #28]
 800f08a:	3319      	adds	r3, #25
 800f08c:	33ff      	adds	r3, #255	; 0xff
 800f08e:	189b      	adds	r3, r3, r2
 800f090:	19dd      	adds	r5, r3, r7
 800f092:	00b6      	lsls	r6, r6, #2
 800f094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	7813      	ldrb	r3, [r2, #0]
 800f09a:	2b39      	cmp	r3, #57	; 0x39
 800f09c:	d80f      	bhi.n	800f0be <__ssvfscanf_r+0xde2>
 800f09e:	2b2a      	cmp	r3, #42	; 0x2a
 800f0a0:	d91b      	bls.n	800f0da <__ssvfscanf_r+0xdfe>
 800f0a2:	0018      	movs	r0, r3
 800f0a4:	382b      	subs	r0, #43	; 0x2b
 800f0a6:	280e      	cmp	r0, #14
 800f0a8:	d817      	bhi.n	800f0da <__ssvfscanf_r+0xdfe>
 800f0aa:	f7f1 f833 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f0ae:	168f      	.short	0x168f
 800f0b0:	5416168f 	.word	0x5416168f
 800f0b4:	80808080 	.word	0x80808080
 800f0b8:	87808080 	.word	0x87808080
 800f0bc:	87          	.byte	0x87
 800f0bd:	00          	.byte	0x00
 800f0be:	2b66      	cmp	r3, #102	; 0x66
 800f0c0:	d83a      	bhi.n	800f138 <__ssvfscanf_r+0xe5c>
 800f0c2:	2b60      	cmp	r3, #96	; 0x60
 800f0c4:	d803      	bhi.n	800f0ce <__ssvfscanf_r+0xdf2>
 800f0c6:	2b46      	cmp	r3, #70	; 0x46
 800f0c8:	d805      	bhi.n	800f0d6 <__ssvfscanf_r+0xdfa>
 800f0ca:	2b40      	cmp	r3, #64	; 0x40
 800f0cc:	d905      	bls.n	800f0da <__ssvfscanf_r+0xdfe>
 800f0ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0d0:	290a      	cmp	r1, #10
 800f0d2:	dc71      	bgt.n	800f1b8 <__ssvfscanf_r+0xedc>
 800f0d4:	e001      	b.n	800f0da <__ssvfscanf_r+0xdfe>
 800f0d6:	2b58      	cmp	r3, #88	; 0x58
 800f0d8:	d030      	beq.n	800f13c <__ssvfscanf_r+0xe60>
 800f0da:	05e3      	lsls	r3, r4, #23
 800f0dc:	d515      	bpl.n	800f10a <__ssvfscanf_r+0xe2e>
 800f0de:	238c      	movs	r3, #140	; 0x8c
 800f0e0:	2248      	movs	r2, #72	; 0x48
 800f0e2:	005b      	lsls	r3, r3, #1
 800f0e4:	189b      	adds	r3, r3, r2
 800f0e6:	19db      	adds	r3, r3, r7
 800f0e8:	429d      	cmp	r5, r3
 800f0ea:	d905      	bls.n	800f0f8 <__ssvfscanf_r+0xe1c>
 800f0ec:	3d01      	subs	r5, #1
 800f0ee:	7829      	ldrb	r1, [r5, #0]
 800f0f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0f4:	f002 f84a 	bl	801118c <_sungetc_r>
 800f0f8:	238c      	movs	r3, #140	; 0x8c
 800f0fa:	2248      	movs	r2, #72	; 0x48
 800f0fc:	005b      	lsls	r3, r3, #1
 800f0fe:	189b      	adds	r3, r3, r2
 800f100:	19db      	adds	r3, r3, r7
 800f102:	429d      	cmp	r5, r3
 800f104:	d101      	bne.n	800f10a <__ssvfscanf_r+0xe2e>
 800f106:	f7ff f9e6 	bl	800e4d6 <__ssvfscanf_r+0x1fa>
 800f10a:	2310      	movs	r3, #16
 800f10c:	0022      	movs	r2, r4
 800f10e:	401a      	ands	r2, r3
 800f110:	421c      	tst	r4, r3
 800f112:	d171      	bne.n	800f1f8 <__ssvfscanf_r+0xf1c>
 800f114:	218c      	movs	r1, #140	; 0x8c
 800f116:	2048      	movs	r0, #72	; 0x48
 800f118:	0049      	lsls	r1, r1, #1
 800f11a:	1809      	adds	r1, r1, r0
 800f11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11e:	697e      	ldr	r6, [r7, #20]
 800f120:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f122:	19c9      	adds	r1, r1, r7
 800f124:	702a      	strb	r2, [r5, #0]
 800f126:	47b0      	blx	r6
 800f128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12a:	1d1e      	adds	r6, r3, #4
 800f12c:	06a3      	lsls	r3, r4, #26
 800f12e:	d559      	bpl.n	800f1e4 <__ssvfscanf_r+0xf08>
 800f130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	6018      	str	r0, [r3, #0]
 800f136:	e05b      	b.n	800f1f0 <__ssvfscanf_r+0xf14>
 800f138:	2b78      	cmp	r3, #120	; 0x78
 800f13a:	d1ce      	bne.n	800f0da <__ssvfscanf_r+0xdfe>
 800f13c:	21c0      	movs	r1, #192	; 0xc0
 800f13e:	00c9      	lsls	r1, r1, #3
 800f140:	4021      	ands	r1, r4
 800f142:	42b1      	cmp	r1, r6
 800f144:	d1c9      	bne.n	800f0da <__ssvfscanf_r+0xdfe>
 800f146:	4934      	ldr	r1, [pc, #208]	; (800f218 <__ssvfscanf_r+0xf3c>)
 800f148:	4021      	ands	r1, r4
 800f14a:	24a0      	movs	r4, #160	; 0xa0
 800f14c:	00e4      	lsls	r4, r4, #3
 800f14e:	430c      	orrs	r4, r1
 800f150:	2110      	movs	r1, #16
 800f152:	6279      	str	r1, [r7, #36]	; 0x24
 800f154:	e00b      	b.n	800f16e <__ssvfscanf_r+0xe92>
 800f156:	0521      	lsls	r1, r4, #20
 800f158:	d509      	bpl.n	800f16e <__ssvfscanf_r+0xe92>
 800f15a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f15c:	2900      	cmp	r1, #0
 800f15e:	d102      	bne.n	800f166 <__ssvfscanf_r+0xe8a>
 800f160:	3108      	adds	r1, #8
 800f162:	4334      	orrs	r4, r6
 800f164:	6279      	str	r1, [r7, #36]	; 0x24
 800f166:	0561      	lsls	r1, r4, #21
 800f168:	d504      	bpl.n	800f174 <__ssvfscanf_r+0xe98>
 800f16a:	492c      	ldr	r1, [pc, #176]	; (800f21c <__ssvfscanf_r+0xf40>)
 800f16c:	400c      	ands	r4, r1
 800f16e:	702b      	strb	r3, [r5, #0]
 800f170:	3501      	adds	r5, #1
 800f172:	e00c      	b.n	800f18e <__ssvfscanf_r+0xeb2>
 800f174:	4b2a      	ldr	r3, [pc, #168]	; (800f220 <__ssvfscanf_r+0xf44>)
 800f176:	401c      	ands	r4, r3
 800f178:	6a3b      	ldr	r3, [r7, #32]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d004      	beq.n	800f188 <__ssvfscanf_r+0xeac>
 800f17e:	3b01      	subs	r3, #1
 800f180:	623b      	str	r3, [r7, #32]
 800f182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f184:	3301      	adds	r3, #1
 800f186:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	3301      	adds	r3, #1
 800f18c:	61fb      	str	r3, [r7, #28]
 800f18e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f190:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	3b01      	subs	r3, #1
 800f196:	604b      	str	r3, [r1, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	dd1c      	ble.n	800f1d6 <__ssvfscanf_r+0xefa>
 800f19c:	3201      	adds	r2, #1
 800f19e:	600a      	str	r2, [r1, #0]
 800f1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d000      	beq.n	800f1ac <__ssvfscanf_r+0xed0>
 800f1aa:	e773      	b.n	800f094 <__ssvfscanf_r+0xdb8>
 800f1ac:	e795      	b.n	800f0da <__ssvfscanf_r+0xdfe>
 800f1ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1b0:	491c      	ldr	r1, [pc, #112]	; (800f224 <__ssvfscanf_r+0xf48>)
 800f1b2:	0040      	lsls	r0, r0, #1
 800f1b4:	5e41      	ldrsh	r1, [r0, r1]
 800f1b6:	6279      	str	r1, [r7, #36]	; 0x24
 800f1b8:	491b      	ldr	r1, [pc, #108]	; (800f228 <__ssvfscanf_r+0xf4c>)
 800f1ba:	e7d7      	b.n	800f16c <__ssvfscanf_r+0xe90>
 800f1bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1be:	4919      	ldr	r1, [pc, #100]	; (800f224 <__ssvfscanf_r+0xf48>)
 800f1c0:	0040      	lsls	r0, r0, #1
 800f1c2:	5e41      	ldrsh	r1, [r0, r1]
 800f1c4:	6279      	str	r1, [r7, #36]	; 0x24
 800f1c6:	2908      	cmp	r1, #8
 800f1c8:	dcf6      	bgt.n	800f1b8 <__ssvfscanf_r+0xedc>
 800f1ca:	e786      	b.n	800f0da <__ssvfscanf_r+0xdfe>
 800f1cc:	2180      	movs	r1, #128	; 0x80
 800f1ce:	420c      	tst	r4, r1
 800f1d0:	d083      	beq.n	800f0da <__ssvfscanf_r+0xdfe>
 800f1d2:	438c      	bics	r4, r1
 800f1d4:	e7cb      	b.n	800f16e <__ssvfscanf_r+0xe92>
 800f1d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1da:	f002 f813 	bl	8011204 <__ssrefill_r>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d0de      	beq.n	800f1a0 <__ssvfscanf_r+0xec4>
 800f1e2:	e77a      	b.n	800f0da <__ssvfscanf_r+0xdfe>
 800f1e4:	2308      	movs	r3, #8
 800f1e6:	421c      	tst	r4, r3
 800f1e8:	d020      	beq.n	800f22c <__ssvfscanf_r+0xf50>
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	7018      	strb	r0, [r3, #0]
 800f1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f2:	633e      	str	r6, [r7, #48]	; 0x30
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1f8:	238c      	movs	r3, #140	; 0x8c
 800f1fa:	2248      	movs	r2, #72	; 0x48
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	189b      	adds	r3, r3, r2
 800f200:	19db      	adds	r3, r3, r7
 800f202:	1aed      	subs	r5, r5, r3
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	18ed      	adds	r5, r5, r3
 800f208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20a:	195b      	adds	r3, r3, r5
 800f20c:	f7ff f92d 	bl	800e46a <__ssvfscanf_r+0x18e>
 800f210:	08013fa9 	.word	0x08013fa9
 800f214:	0000fff6 	.word	0x0000fff6
 800f218:	fffffdff 	.word	0xfffffdff
 800f21c:	fffffa7f 	.word	0xfffffa7f
 800f220:	fffffc7f 	.word	0xfffffc7f
 800f224:	080142d6 	.word	0x080142d6
 800f228:	fffff47f 	.word	0xfffff47f
 800f22c:	0763      	lsls	r3, r4, #29
 800f22e:	d503      	bpl.n	800f238 <__ssvfscanf_r+0xf5c>
 800f230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	8018      	strh	r0, [r3, #0]
 800f236:	e7db      	b.n	800f1f0 <__ssvfscanf_r+0xf14>
 800f238:	2301      	movs	r3, #1
 800f23a:	0022      	movs	r2, r4
 800f23c:	401a      	ands	r2, r3
 800f23e:	421c      	tst	r4, r3
 800f240:	d000      	beq.n	800f244 <__ssvfscanf_r+0xf68>
 800f242:	e775      	b.n	800f130 <__ssvfscanf_r+0xe54>
 800f244:	07a4      	lsls	r4, r4, #30
 800f246:	d400      	bmi.n	800f24a <__ssvfscanf_r+0xf6e>
 800f248:	e772      	b.n	800f130 <__ssvfscanf_r+0xe54>
 800f24a:	4ba8      	ldr	r3, [pc, #672]	; (800f4ec <__ssvfscanf_r+0x1210>)
 800f24c:	6979      	ldr	r1, [r7, #20]
 800f24e:	4299      	cmp	r1, r3
 800f250:	d10c      	bne.n	800f26c <__ssvfscanf_r+0xf90>
 800f252:	218c      	movs	r1, #140	; 0x8c
 800f254:	2048      	movs	r0, #72	; 0x48
 800f256:	0049      	lsls	r1, r1, #1
 800f258:	1809      	adds	r1, r1, r0
 800f25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f25e:	19c9      	adds	r1, r1, r7
 800f260:	f001 fecc 	bl	8010ffc <_strtoull_r>
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	c303      	stmia	r3!, {r0, r1}
 800f26a:	e7c1      	b.n	800f1f0 <__ssvfscanf_r+0xf14>
 800f26c:	218c      	movs	r1, #140	; 0x8c
 800f26e:	2048      	movs	r0, #72	; 0x48
 800f270:	0049      	lsls	r1, r1, #1
 800f272:	1809      	adds	r1, r1, r0
 800f274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f276:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f278:	19c9      	adds	r1, r1, r7
 800f27a:	f001 fe0d 	bl	8010e98 <_strtoll_r>
 800f27e:	e7f1      	b.n	800f264 <__ssvfscanf_r+0xf88>
 800f280:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f282:	f000 fb9f 	bl	800f9c4 <_localeconv_r>
 800f286:	22ae      	movs	r2, #174	; 0xae
 800f288:	2100      	movs	r1, #0
 800f28a:	6803      	ldr	r3, [r0, #0]
 800f28c:	0052      	lsls	r2, r2, #1
 800f28e:	603b      	str	r3, [r7, #0]
 800f290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f292:	60f9      	str	r1, [r7, #12]
 800f294:	3b01      	subs	r3, #1
 800f296:	4293      	cmp	r3, r2
 800f298:	d906      	bls.n	800f2a8 <__ssvfscanf_r+0xfcc>
 800f29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f29c:	3b5e      	subs	r3, #94	; 0x5e
 800f29e:	3bff      	subs	r3, #255	; 0xff
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	235e      	movs	r3, #94	; 0x5e
 800f2a4:	33ff      	adds	r3, #255	; 0xff
 800f2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2a8:	23f0      	movs	r3, #240	; 0xf0
 800f2aa:	00db      	lsls	r3, r3, #3
 800f2ac:	431e      	orrs	r6, r3
 800f2ae:	238c      	movs	r3, #140	; 0x8c
 800f2b0:	2248      	movs	r2, #72	; 0x48
 800f2b2:	2400      	movs	r4, #0
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	189b      	adds	r3, r3, r2
 800f2b8:	623c      	str	r4, [r7, #32]
 800f2ba:	607c      	str	r4, [r7, #4]
 800f2bc:	60bc      	str	r4, [r7, #8]
 800f2be:	61fc      	str	r4, [r7, #28]
 800f2c0:	613c      	str	r4, [r7, #16]
 800f2c2:	19dd      	adds	r5, r3, r7
 800f2c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	781a      	ldrb	r2, [r3, #0]
 800f2ca:	0010      	movs	r0, r2
 800f2cc:	382b      	subs	r0, #43	; 0x2b
 800f2ce:	284e      	cmp	r0, #78	; 0x4e
 800f2d0:	d900      	bls.n	800f2d4 <__ssvfscanf_r+0xff8>
 800f2d2:	e133      	b.n	800f53c <__ssvfscanf_r+0x1260>
 800f2d4:	f7f0 ff28 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f2d8:	0132009b 	.word	0x0132009b
 800f2dc:	0132009b 	.word	0x0132009b
 800f2e0:	004f0132 	.word	0x004f0132
 800f2e4:	00720072 	.word	0x00720072
 800f2e8:	00720072 	.word	0x00720072
 800f2ec:	00720072 	.word	0x00720072
 800f2f0:	00720072 	.word	0x00720072
 800f2f4:	01320072 	.word	0x01320072
 800f2f8:	01320132 	.word	0x01320132
 800f2fc:	01320132 	.word	0x01320132
 800f300:	01320132 	.word	0x01320132
 800f304:	007b00bc 	.word	0x007b00bc
 800f308:	007b007b 	.word	0x007b007b
 800f30c:	00f7012f 	.word	0x00f7012f
 800f310:	01320132 	.word	0x01320132
 800f314:	013200e3 	.word	0x013200e3
 800f318:	01320132 	.word	0x01320132
 800f31c:	00a00132 	.word	0x00a00132
 800f320:	01120132 	.word	0x01120132
 800f324:	01320132 	.word	0x01320132
 800f328:	01010132 	.word	0x01010132
 800f32c:	01320132 	.word	0x01320132
 800f330:	00820132 	.word	0x00820132
 800f334:	01320105 	.word	0x01320105
 800f338:	01320132 	.word	0x01320132
 800f33c:	01320132 	.word	0x01320132
 800f340:	01320132 	.word	0x01320132
 800f344:	007b00bc 	.word	0x007b00bc
 800f348:	007b007b 	.word	0x007b007b
 800f34c:	00f7012f 	.word	0x00f7012f
 800f350:	01320132 	.word	0x01320132
 800f354:	013200e3 	.word	0x013200e3
 800f358:	01320132 	.word	0x01320132
 800f35c:	00a00132 	.word	0x00a00132
 800f360:	01120132 	.word	0x01120132
 800f364:	01320132 	.word	0x01320132
 800f368:	01010132 	.word	0x01010132
 800f36c:	01320132 	.word	0x01320132
 800f370:	00820132 	.word	0x00820132
 800f374:	0105      	.short	0x0105
 800f376:	05f1      	lsls	r1, r6, #23
 800f378:	d520      	bpl.n	800f3bc <__ssvfscanf_r+0x10e0>
 800f37a:	2280      	movs	r2, #128	; 0x80
 800f37c:	4396      	bics	r6, r2
 800f37e:	69fa      	ldr	r2, [r7, #28]
 800f380:	3201      	adds	r2, #1
 800f382:	61fa      	str	r2, [r7, #28]
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	2a00      	cmp	r2, #0
 800f388:	d004      	beq.n	800f394 <__ssvfscanf_r+0x10b8>
 800f38a:	3a01      	subs	r2, #1
 800f38c:	60fa      	str	r2, [r7, #12]
 800f38e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f390:	3201      	adds	r2, #1
 800f392:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f396:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f398:	3a01      	subs	r2, #1
 800f39a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f39c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f39e:	3201      	adds	r2, #1
 800f3a0:	63ba      	str	r2, [r7, #56]	; 0x38
 800f3a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3a4:	6852      	ldr	r2, [r2, #4]
 800f3a6:	3a01      	subs	r2, #1
 800f3a8:	604a      	str	r2, [r1, #4]
 800f3aa:	2a00      	cmp	r2, #0
 800f3ac:	dc00      	bgt.n	800f3b0 <__ssvfscanf_r+0x10d4>
 800f3ae:	e0d6      	b.n	800f55e <__ssvfscanf_r+0x1282>
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	600b      	str	r3, [r1, #0]
 800f3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d184      	bne.n	800f2c4 <__ssvfscanf_r+0xfe8>
 800f3ba:	e057      	b.n	800f46c <__ssvfscanf_r+0x1190>
 800f3bc:	6a39      	ldr	r1, [r7, #32]
 800f3be:	1909      	adds	r1, r1, r4
 800f3c0:	2900      	cmp	r1, #0
 800f3c2:	d153      	bne.n	800f46c <__ssvfscanf_r+0x1190>
 800f3c4:	494a      	ldr	r1, [pc, #296]	; (800f4f0 <__ssvfscanf_r+0x1214>)
 800f3c6:	400e      	ands	r6, r1
 800f3c8:	702a      	strb	r2, [r5, #0]
 800f3ca:	3501      	adds	r5, #1
 800f3cc:	e7e2      	b.n	800f394 <__ssvfscanf_r+0x10b8>
 800f3ce:	0531      	lsls	r1, r6, #20
 800f3d0:	d54c      	bpl.n	800f46c <__ssvfscanf_r+0x1190>
 800f3d2:	6a39      	ldr	r1, [r7, #32]
 800f3d4:	1909      	adds	r1, r1, r4
 800f3d6:	2900      	cmp	r1, #0
 800f3d8:	d040      	beq.n	800f45c <__ssvfscanf_r+0x1180>
 800f3da:	e047      	b.n	800f46c <__ssvfscanf_r+0x1190>
 800f3dc:	2198      	movs	r1, #152	; 0x98
 800f3de:	2080      	movs	r0, #128	; 0x80
 800f3e0:	0109      	lsls	r1, r1, #4
 800f3e2:	4031      	ands	r1, r6
 800f3e4:	0040      	lsls	r0, r0, #1
 800f3e6:	4281      	cmp	r1, r0
 800f3e8:	d140      	bne.n	800f46c <__ssvfscanf_r+0x1190>
 800f3ea:	69f9      	ldr	r1, [r7, #28]
 800f3ec:	2901      	cmp	r1, #1
 800f3ee:	d13d      	bne.n	800f46c <__ssvfscanf_r+0x1190>
 800f3f0:	2080      	movs	r0, #128	; 0x80
 800f3f2:	4940      	ldr	r1, [pc, #256]	; (800f4f4 <__ssvfscanf_r+0x1218>)
 800f3f4:	0100      	lsls	r0, r0, #4
 800f3f6:	400e      	ands	r6, r1
 800f3f8:	3132      	adds	r1, #50	; 0x32
 800f3fa:	31ff      	adds	r1, #255	; 0xff
 800f3fc:	7029      	strb	r1, [r5, #0]
 800f3fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f400:	4306      	orrs	r6, r0
 800f402:	3901      	subs	r1, #1
 800f404:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f406:	3501      	adds	r5, #1
 800f408:	2100      	movs	r1, #0
 800f40a:	61f9      	str	r1, [r7, #28]
 800f40c:	e7dc      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f40e:	2180      	movs	r1, #128	; 0x80
 800f410:	420e      	tst	r6, r1
 800f412:	d02b      	beq.n	800f46c <__ssvfscanf_r+0x1190>
 800f414:	438e      	bics	r6, r1
 800f416:	e7d7      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f418:	6a39      	ldr	r1, [r7, #32]
 800f41a:	2900      	cmp	r1, #0
 800f41c:	d10d      	bne.n	800f43a <__ssvfscanf_r+0x115e>
 800f41e:	69f9      	ldr	r1, [r7, #28]
 800f420:	2900      	cmp	r1, #0
 800f422:	d10e      	bne.n	800f442 <__ssvfscanf_r+0x1166>
 800f424:	21e0      	movs	r1, #224	; 0xe0
 800f426:	0030      	movs	r0, r6
 800f428:	00c9      	lsls	r1, r1, #3
 800f42a:	4008      	ands	r0, r1
 800f42c:	4288      	cmp	r0, r1
 800f42e:	d108      	bne.n	800f442 <__ssvfscanf_r+0x1166>
 800f430:	4931      	ldr	r1, [pc, #196]	; (800f4f8 <__ssvfscanf_r+0x121c>)
 800f432:	400e      	ands	r6, r1
 800f434:	2101      	movs	r1, #1
 800f436:	6239      	str	r1, [r7, #32]
 800f438:	e7c6      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f43a:	6a39      	ldr	r1, [r7, #32]
 800f43c:	2902      	cmp	r1, #2
 800f43e:	d100      	bne.n	800f442 <__ssvfscanf_r+0x1166>
 800f440:	e089      	b.n	800f556 <__ssvfscanf_r+0x127a>
 800f442:	2c01      	cmp	r4, #1
 800f444:	d001      	beq.n	800f44a <__ssvfscanf_r+0x116e>
 800f446:	2c04      	cmp	r4, #4
 800f448:	d110      	bne.n	800f46c <__ssvfscanf_r+0x1190>
 800f44a:	3401      	adds	r4, #1
 800f44c:	b2e4      	uxtb	r4, r4
 800f44e:	e7bb      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f450:	0531      	lsls	r1, r6, #20
 800f452:	d508      	bpl.n	800f466 <__ssvfscanf_r+0x118a>
 800f454:	6a39      	ldr	r1, [r7, #32]
 800f456:	1909      	adds	r1, r1, r4
 800f458:	2900      	cmp	r1, #0
 800f45a:	d104      	bne.n	800f466 <__ssvfscanf_r+0x118a>
 800f45c:	4824      	ldr	r0, [pc, #144]	; (800f4f0 <__ssvfscanf_r+0x1214>)
 800f45e:	000c      	movs	r4, r1
 800f460:	4006      	ands	r6, r0
 800f462:	6239      	str	r1, [r7, #32]
 800f464:	e7b0      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f466:	6a39      	ldr	r1, [r7, #32]
 800f468:	2901      	cmp	r1, #1
 800f46a:	d076      	beq.n	800f55a <__ssvfscanf_r+0x127e>
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d001      	beq.n	800f476 <__ssvfscanf_r+0x119a>
 800f472:	4b20      	ldr	r3, [pc, #128]	; (800f4f4 <__ssvfscanf_r+0x1218>)
 800f474:	401e      	ands	r6, r3
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	3b01      	subs	r3, #1
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d877      	bhi.n	800f56e <__ssvfscanf_r+0x1292>
 800f47e:	238c      	movs	r3, #140	; 0x8c
 800f480:	2248      	movs	r2, #72	; 0x48
 800f482:	005b      	lsls	r3, r3, #1
 800f484:	189b      	adds	r3, r3, r2
 800f486:	19db      	adds	r3, r3, r7
 800f488:	429d      	cmp	r5, r3
 800f48a:	d801      	bhi.n	800f490 <__ssvfscanf_r+0x11b4>
 800f48c:	f7ff f823 	bl	800e4d6 <__ssvfscanf_r+0x1fa>
 800f490:	3d01      	subs	r5, #1
 800f492:	7829      	ldrb	r1, [r5, #0]
 800f494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f496:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f498:	f001 fe78 	bl	801118c <_sungetc_r>
 800f49c:	e7ef      	b.n	800f47e <__ssvfscanf_r+0x11a2>
 800f49e:	2c00      	cmp	r4, #0
 800f4a0:	d10c      	bne.n	800f4bc <__ssvfscanf_r+0x11e0>
 800f4a2:	69f9      	ldr	r1, [r7, #28]
 800f4a4:	2900      	cmp	r1, #0
 800f4a6:	d1e4      	bne.n	800f472 <__ssvfscanf_r+0x1196>
 800f4a8:	21e0      	movs	r1, #224	; 0xe0
 800f4aa:	0030      	movs	r0, r6
 800f4ac:	00c9      	lsls	r1, r1, #3
 800f4ae:	4008      	ands	r0, r1
 800f4b0:	4288      	cmp	r0, r1
 800f4b2:	d1e0      	bne.n	800f476 <__ssvfscanf_r+0x119a>
 800f4b4:	4910      	ldr	r1, [pc, #64]	; (800f4f8 <__ssvfscanf_r+0x121c>)
 800f4b6:	3401      	adds	r4, #1
 800f4b8:	400e      	ands	r6, r1
 800f4ba:	e785      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f4bc:	20fd      	movs	r0, #253	; 0xfd
 800f4be:	1ee1      	subs	r1, r4, #3
 800f4c0:	4201      	tst	r1, r0
 800f4c2:	d1d3      	bne.n	800f46c <__ssvfscanf_r+0x1190>
 800f4c4:	e7c1      	b.n	800f44a <__ssvfscanf_r+0x116e>
 800f4c6:	0531      	lsls	r1, r6, #20
 800f4c8:	d503      	bpl.n	800f4d2 <__ssvfscanf_r+0x11f6>
 800f4ca:	6a39      	ldr	r1, [r7, #32]
 800f4cc:	1909      	adds	r1, r1, r4
 800f4ce:	2900      	cmp	r1, #0
 800f4d0:	d0c4      	beq.n	800f45c <__ssvfscanf_r+0x1180>
 800f4d2:	2c02      	cmp	r4, #2
 800f4d4:	d1ca      	bne.n	800f46c <__ssvfscanf_r+0x1190>
 800f4d6:	2403      	movs	r4, #3
 800f4d8:	e776      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f4da:	2c06      	cmp	r4, #6
 800f4dc:	d1c6      	bne.n	800f46c <__ssvfscanf_r+0x1190>
 800f4de:	2407      	movs	r4, #7
 800f4e0:	e772      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f4e2:	2c07      	cmp	r4, #7
 800f4e4:	d1c2      	bne.n	800f46c <__ssvfscanf_r+0x1190>
 800f4e6:	2408      	movs	r4, #8
 800f4e8:	e76e      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f4ea:	46c0      	nop			; (mov r8, r8)
 800f4ec:	08010d35 	.word	0x08010d35
 800f4f0:	fffffe7f 	.word	0xfffffe7f
 800f4f4:	fffffeff 	.word	0xfffffeff
 800f4f8:	fffff87f 	.word	0xfffff87f
 800f4fc:	0531      	lsls	r1, r6, #20
 800f4fe:	d5b5      	bpl.n	800f46c <__ssvfscanf_r+0x1190>
 800f500:	21a0      	movs	r1, #160	; 0xa0
 800f502:	2080      	movs	r0, #128	; 0x80
 800f504:	00c9      	lsls	r1, r1, #3
 800f506:	00c0      	lsls	r0, r0, #3
 800f508:	4031      	ands	r1, r6
 800f50a:	4281      	cmp	r1, r0
 800f50c:	d004      	beq.n	800f518 <__ssvfscanf_r+0x123c>
 800f50e:	4206      	tst	r6, r0
 800f510:	d0ac      	beq.n	800f46c <__ssvfscanf_r+0x1190>
 800f512:	69f9      	ldr	r1, [r7, #28]
 800f514:	2900      	cmp	r1, #0
 800f516:	d0ae      	beq.n	800f476 <__ssvfscanf_r+0x119a>
 800f518:	2180      	movs	r1, #128	; 0x80
 800f51a:	0089      	lsls	r1, r1, #2
 800f51c:	420e      	tst	r6, r1
 800f51e:	d104      	bne.n	800f52a <__ssvfscanf_r+0x124e>
 800f520:	69f9      	ldr	r1, [r7, #28]
 800f522:	6938      	ldr	r0, [r7, #16]
 800f524:	607d      	str	r5, [r7, #4]
 800f526:	1a09      	subs	r1, r1, r0
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	20c0      	movs	r0, #192	; 0xc0
 800f52c:	4973      	ldr	r1, [pc, #460]	; (800f6fc <__ssvfscanf_r+0x1420>)
 800f52e:	0040      	lsls	r0, r0, #1
 800f530:	400e      	ands	r6, r1
 800f532:	4306      	orrs	r6, r0
 800f534:	e768      	b.n	800f408 <__ssvfscanf_r+0x112c>
 800f536:	0531      	lsls	r1, r6, #20
 800f538:	d5e2      	bpl.n	800f500 <__ssvfscanf_r+0x1224>
 800f53a:	e74a      	b.n	800f3d2 <__ssvfscanf_r+0x10f6>
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	7809      	ldrb	r1, [r1, #0]
 800f540:	4291      	cmp	r1, r2
 800f542:	d193      	bne.n	800f46c <__ssvfscanf_r+0x1190>
 800f544:	2180      	movs	r1, #128	; 0x80
 800f546:	0089      	lsls	r1, r1, #2
 800f548:	420e      	tst	r6, r1
 800f54a:	d08f      	beq.n	800f46c <__ssvfscanf_r+0x1190>
 800f54c:	496c      	ldr	r1, [pc, #432]	; (800f700 <__ssvfscanf_r+0x1424>)
 800f54e:	400e      	ands	r6, r1
 800f550:	69f9      	ldr	r1, [r7, #28]
 800f552:	6139      	str	r1, [r7, #16]
 800f554:	e738      	b.n	800f3c8 <__ssvfscanf_r+0x10ec>
 800f556:	2103      	movs	r1, #3
 800f558:	e76d      	b.n	800f436 <__ssvfscanf_r+0x115a>
 800f55a:	2102      	movs	r1, #2
 800f55c:	e76b      	b.n	800f436 <__ssvfscanf_r+0x115a>
 800f55e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f560:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f562:	f001 fe4f 	bl	8011204 <__ssrefill_r>
 800f566:	2800      	cmp	r0, #0
 800f568:	d100      	bne.n	800f56c <__ssvfscanf_r+0x1290>
 800f56a:	e723      	b.n	800f3b4 <__ssvfscanf_r+0x10d8>
 800f56c:	e77e      	b.n	800f46c <__ssvfscanf_r+0x1190>
 800f56e:	1e63      	subs	r3, r4, #1
 800f570:	2b06      	cmp	r3, #6
 800f572:	d825      	bhi.n	800f5c0 <__ssvfscanf_r+0x12e4>
 800f574:	2c02      	cmp	r4, #2
 800f576:	d837      	bhi.n	800f5e8 <__ssvfscanf_r+0x130c>
 800f578:	238c      	movs	r3, #140	; 0x8c
 800f57a:	2248      	movs	r2, #72	; 0x48
 800f57c:	005b      	lsls	r3, r3, #1
 800f57e:	189b      	adds	r3, r3, r2
 800f580:	19db      	adds	r3, r3, r7
 800f582:	429d      	cmp	r5, r3
 800f584:	d801      	bhi.n	800f58a <__ssvfscanf_r+0x12ae>
 800f586:	f7fe ffa6 	bl	800e4d6 <__ssvfscanf_r+0x1fa>
 800f58a:	3d01      	subs	r5, #1
 800f58c:	7829      	ldrb	r1, [r5, #0]
 800f58e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f590:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f592:	f001 fdfb 	bl	801118c <_sungetc_r>
 800f596:	e7ef      	b.n	800f578 <__ssvfscanf_r+0x129c>
 800f598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f59a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f59c:	3b01      	subs	r3, #1
 800f59e:	7819      	ldrb	r1, [r3, #0]
 800f5a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5a4:	f001 fdf2 	bl	801118c <_sungetc_r>
 800f5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5aa:	6a3a      	ldr	r2, [r7, #32]
 800f5ac:	189b      	adds	r3, r3, r2
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b03      	cmp	r3, #3
 800f5b2:	d8f1      	bhi.n	800f598 <__ssvfscanf_r+0x12bc>
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b6:	3c03      	subs	r4, #3
 800f5b8:	b2e4      	uxtb	r4, r4
 800f5ba:	1b1b      	subs	r3, r3, r4
 800f5bc:	1b2d      	subs	r5, r5, r4
 800f5be:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5c0:	05f3      	lsls	r3, r6, #23
 800f5c2:	d52f      	bpl.n	800f624 <__ssvfscanf_r+0x1348>
 800f5c4:	0573      	lsls	r3, r6, #21
 800f5c6:	d514      	bpl.n	800f5f2 <__ssvfscanf_r+0x1316>
 800f5c8:	238c      	movs	r3, #140	; 0x8c
 800f5ca:	2248      	movs	r2, #72	; 0x48
 800f5cc:	005b      	lsls	r3, r3, #1
 800f5ce:	189b      	adds	r3, r3, r2
 800f5d0:	19db      	adds	r3, r3, r7
 800f5d2:	429d      	cmp	r5, r3
 800f5d4:	d801      	bhi.n	800f5da <__ssvfscanf_r+0x12fe>
 800f5d6:	f7fe ff7e 	bl	800e4d6 <__ssvfscanf_r+0x1fa>
 800f5da:	3d01      	subs	r5, #1
 800f5dc:	7829      	ldrb	r1, [r5, #0]
 800f5de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5e2:	f001 fdd3 	bl	801118c <_sungetc_r>
 800f5e6:	e7ef      	b.n	800f5c8 <__ssvfscanf_r+0x12ec>
 800f5e8:	1b63      	subs	r3, r4, r5
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	63fd      	str	r5, [r7, #60]	; 0x3c
 800f5ee:	623b      	str	r3, [r7, #32]
 800f5f0:	e7da      	b.n	800f5a8 <__ssvfscanf_r+0x12cc>
 800f5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f4:	1e6c      	subs	r4, r5, #1
 800f5f6:	7821      	ldrb	r1, [r4, #0]
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5fc:	2965      	cmp	r1, #101	; 0x65
 800f5fe:	d00a      	beq.n	800f616 <__ssvfscanf_r+0x133a>
 800f600:	2945      	cmp	r1, #69	; 0x45
 800f602:	d008      	beq.n	800f616 <__ssvfscanf_r+0x133a>
 800f604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f608:	f001 fdc0 	bl	801118c <_sungetc_r>
 800f60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60e:	1eac      	subs	r4, r5, #2
 800f610:	3b02      	subs	r3, #2
 800f612:	7821      	ldrb	r1, [r4, #0]
 800f614:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f616:	0025      	movs	r5, r4
 800f618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f61a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f61c:	f001 fdb6 	bl	801118c <_sungetc_r>
 800f620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f622:	63bb      	str	r3, [r7, #56]	; 0x38
 800f624:	2310      	movs	r3, #16
 800f626:	0032      	movs	r2, r6
 800f628:	401a      	ands	r2, r3
 800f62a:	421e      	tst	r6, r3
 800f62c:	d001      	beq.n	800f632 <__ssvfscanf_r+0x1356>
 800f62e:	f7fe fe71 	bl	800e314 <__ssvfscanf_r+0x38>
 800f632:	23c0      	movs	r3, #192	; 0xc0
 800f634:	2180      	movs	r1, #128	; 0x80
 800f636:	00db      	lsls	r3, r3, #3
 800f638:	702a      	strb	r2, [r5, #0]
 800f63a:	4033      	ands	r3, r6
 800f63c:	00c9      	lsls	r1, r1, #3
 800f63e:	428b      	cmp	r3, r1
 800f640:	d11f      	bne.n	800f682 <__ssvfscanf_r+0x13a6>
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	69fa      	ldr	r2, [r7, #28]
 800f646:	69f9      	ldr	r1, [r7, #28]
 800f648:	1a9a      	subs	r2, r3, r2
 800f64a:	428b      	cmp	r3, r1
 800f64c:	d125      	bne.n	800f69a <__ssvfscanf_r+0x13be>
 800f64e:	238c      	movs	r3, #140	; 0x8c
 800f650:	2148      	movs	r1, #72	; 0x48
 800f652:	005b      	lsls	r3, r3, #1
 800f654:	185b      	adds	r3, r3, r1
 800f656:	19d9      	adds	r1, r3, r7
 800f658:	2200      	movs	r2, #0
 800f65a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f65c:	f7fb ffca 	bl	800b5f4 <_strtod_r>
 800f660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f662:	0004      	movs	r4, r0
 800f664:	3304      	adds	r3, #4
 800f666:	000d      	movs	r5, r1
 800f668:	623b      	str	r3, [r7, #32]
 800f66a:	07f3      	lsls	r3, r6, #31
 800f66c:	d523      	bpl.n	800f6b6 <__ssvfscanf_r+0x13da>
 800f66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	601c      	str	r4, [r3, #0]
 800f674:	605d      	str	r5, [r3, #4]
 800f676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f678:	3301      	adds	r3, #1
 800f67a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f67c:	6a3b      	ldr	r3, [r7, #32]
 800f67e:	f7fe ffa5 	bl	800e5cc <__ssvfscanf_r+0x2f0>
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d0e2      	beq.n	800f64e <__ssvfscanf_r+0x1372>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f68c:	1c59      	adds	r1, r3, #1
 800f68e:	230a      	movs	r3, #10
 800f690:	f7fc f84c 	bl	800b72c <_strtol_r>
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	687d      	ldr	r5, [r7, #4]
 800f698:	1ac2      	subs	r2, r0, r3
 800f69a:	2148      	movs	r1, #72	; 0x48
 800f69c:	4b19      	ldr	r3, [pc, #100]	; (800f704 <__ssvfscanf_r+0x1428>)
 800f69e:	185b      	adds	r3, r3, r1
 800f6a0:	19db      	adds	r3, r3, r7
 800f6a2:	429d      	cmp	r5, r3
 800f6a4:	d302      	bcc.n	800f6ac <__ssvfscanf_r+0x13d0>
 800f6a6:	4b18      	ldr	r3, [pc, #96]	; (800f708 <__ssvfscanf_r+0x142c>)
 800f6a8:	185b      	adds	r3, r3, r1
 800f6aa:	19dd      	adds	r5, r3, r7
 800f6ac:	0028      	movs	r0, r5
 800f6ae:	4917      	ldr	r1, [pc, #92]	; (800f70c <__ssvfscanf_r+0x1430>)
 800f6b0:	f7fc f944 	bl	800b93c <sprintf>
 800f6b4:	e7cb      	b.n	800f64e <__ssvfscanf_r+0x1372>
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6bc:	07b6      	lsls	r6, r6, #30
 800f6be:	d4d8      	bmi.n	800f672 <__ssvfscanf_r+0x1396>
 800f6c0:	0002      	movs	r2, r0
 800f6c2:	000b      	movs	r3, r1
 800f6c4:	f7f2 fe16 	bl	80022f4 <__aeabi_dcmpun>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d005      	beq.n	800f6d8 <__ssvfscanf_r+0x13fc>
 800f6cc:	4810      	ldr	r0, [pc, #64]	; (800f710 <__ssvfscanf_r+0x1434>)
 800f6ce:	f7fc fabf 	bl	800bc50 <nanf>
 800f6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d4:	6018      	str	r0, [r3, #0]
 800f6d6:	e7ce      	b.n	800f676 <__ssvfscanf_r+0x139a>
 800f6d8:	0020      	movs	r0, r4
 800f6da:	0029      	movs	r1, r5
 800f6dc:	f7f2 feb4 	bl	8002448 <__aeabi_d2f>
 800f6e0:	e7f7      	b.n	800f6d2 <__ssvfscanf_r+0x13f6>
 800f6e2:	00a3      	lsls	r3, r4, #2
 800f6e4:	18ed      	adds	r5, r5, r3
 800f6e6:	682b      	ldr	r3, [r5, #0]
 800f6e8:	3401      	adds	r4, #1
 800f6ea:	6818      	ldr	r0, [r3, #0]
 800f6ec:	f7fa ff32 	bl	800a554 <free>
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	682b      	ldr	r3, [r5, #0]
 800f6f4:	601a      	str	r2, [r3, #0]
 800f6f6:	f7fe ffc3 	bl	800e680 <__ssvfscanf_r+0x3a4>
 800f6fa:	46c0      	nop			; (mov r8, r8)
 800f6fc:	fffff07f 	.word	0xfffff07f
 800f700:	fffffd7f 	.word	0xfffffd7f
 800f704:	0000026b 	.word	0x0000026b
 800f708:	0000026a 	.word	0x0000026a
 800f70c:	080142d0 	.word	0x080142d0
 800f710:	08014333 	.word	0x08014333

0800f714 <_fclose_r>:
 800f714:	b570      	push	{r4, r5, r6, lr}
 800f716:	0005      	movs	r5, r0
 800f718:	1e0c      	subs	r4, r1, #0
 800f71a:	d102      	bne.n	800f722 <_fclose_r+0xe>
 800f71c:	2600      	movs	r6, #0
 800f71e:	0030      	movs	r0, r6
 800f720:	bd70      	pop	{r4, r5, r6, pc}
 800f722:	2800      	cmp	r0, #0
 800f724:	d004      	beq.n	800f730 <_fclose_r+0x1c>
 800f726:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d101      	bne.n	800f730 <_fclose_r+0x1c>
 800f72c:	f7fc f89e 	bl	800b86c <__sinit>
 800f730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f732:	07db      	lsls	r3, r3, #31
 800f734:	d405      	bmi.n	800f742 <_fclose_r+0x2e>
 800f736:	89a3      	ldrh	r3, [r4, #12]
 800f738:	059b      	lsls	r3, r3, #22
 800f73a:	d402      	bmi.n	800f742 <_fclose_r+0x2e>
 800f73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f73e:	f7fc fa6b 	bl	800bc18 <__retarget_lock_acquire_recursive>
 800f742:	220c      	movs	r2, #12
 800f744:	5ea3      	ldrsh	r3, [r4, r2]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d109      	bne.n	800f75e <_fclose_r+0x4a>
 800f74a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f74c:	3301      	adds	r3, #1
 800f74e:	0016      	movs	r6, r2
 800f750:	401e      	ands	r6, r3
 800f752:	421a      	tst	r2, r3
 800f754:	d1e2      	bne.n	800f71c <_fclose_r+0x8>
 800f756:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f758:	f7fc fa5f 	bl	800bc1a <__retarget_lock_release_recursive>
 800f75c:	e7df      	b.n	800f71e <_fclose_r+0xa>
 800f75e:	0021      	movs	r1, r4
 800f760:	0028      	movs	r0, r5
 800f762:	f000 f837 	bl	800f7d4 <__sflush_r>
 800f766:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f768:	0006      	movs	r6, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d006      	beq.n	800f77c <_fclose_r+0x68>
 800f76e:	0028      	movs	r0, r5
 800f770:	69e1      	ldr	r1, [r4, #28]
 800f772:	4798      	blx	r3
 800f774:	2800      	cmp	r0, #0
 800f776:	da01      	bge.n	800f77c <_fclose_r+0x68>
 800f778:	2601      	movs	r6, #1
 800f77a:	4276      	negs	r6, r6
 800f77c:	89a3      	ldrh	r3, [r4, #12]
 800f77e:	061b      	lsls	r3, r3, #24
 800f780:	d503      	bpl.n	800f78a <_fclose_r+0x76>
 800f782:	0028      	movs	r0, r5
 800f784:	6921      	ldr	r1, [r4, #16]
 800f786:	f7fc facf 	bl	800bd28 <_free_r>
 800f78a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f78c:	2900      	cmp	r1, #0
 800f78e:	d008      	beq.n	800f7a2 <_fclose_r+0x8e>
 800f790:	0023      	movs	r3, r4
 800f792:	3340      	adds	r3, #64	; 0x40
 800f794:	4299      	cmp	r1, r3
 800f796:	d002      	beq.n	800f79e <_fclose_r+0x8a>
 800f798:	0028      	movs	r0, r5
 800f79a:	f7fc fac5 	bl	800bd28 <_free_r>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	6323      	str	r3, [r4, #48]	; 0x30
 800f7a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f7a4:	2900      	cmp	r1, #0
 800f7a6:	d004      	beq.n	800f7b2 <_fclose_r+0x9e>
 800f7a8:	0028      	movs	r0, r5
 800f7aa:	f7fc fabd 	bl	800bd28 <_free_r>
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	6463      	str	r3, [r4, #68]	; 0x44
 800f7b2:	f7fc f84b 	bl	800b84c <__sfp_lock_acquire>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	81a3      	strh	r3, [r4, #12]
 800f7ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7bc:	07db      	lsls	r3, r3, #31
 800f7be:	d402      	bmi.n	800f7c6 <_fclose_r+0xb2>
 800f7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7c2:	f7fc fa2a 	bl	800bc1a <__retarget_lock_release_recursive>
 800f7c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7c8:	f7fc fa25 	bl	800bc16 <__retarget_lock_close_recursive>
 800f7cc:	f7fc f846 	bl	800b85c <__sfp_lock_release>
 800f7d0:	e7a5      	b.n	800f71e <_fclose_r+0xa>
	...

0800f7d4 <__sflush_r>:
 800f7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7d6:	230c      	movs	r3, #12
 800f7d8:	5eca      	ldrsh	r2, [r1, r3]
 800f7da:	000c      	movs	r4, r1
 800f7dc:	0005      	movs	r5, r0
 800f7de:	b291      	uxth	r1, r2
 800f7e0:	0713      	lsls	r3, r2, #28
 800f7e2:	d464      	bmi.n	800f8ae <__sflush_r+0xda>
 800f7e4:	2380      	movs	r3, #128	; 0x80
 800f7e6:	011b      	lsls	r3, r3, #4
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	6862      	ldr	r2, [r4, #4]
 800f7ec:	81a3      	strh	r3, [r4, #12]
 800f7ee:	2a00      	cmp	r2, #0
 800f7f0:	dc04      	bgt.n	800f7fc <__sflush_r+0x28>
 800f7f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f7f4:	2a00      	cmp	r2, #0
 800f7f6:	dc01      	bgt.n	800f7fc <__sflush_r+0x28>
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f7fc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f7fe:	2f00      	cmp	r7, #0
 800f800:	d0fa      	beq.n	800f7f8 <__sflush_r+0x24>
 800f802:	2200      	movs	r2, #0
 800f804:	2080      	movs	r0, #128	; 0x80
 800f806:	682e      	ldr	r6, [r5, #0]
 800f808:	602a      	str	r2, [r5, #0]
 800f80a:	001a      	movs	r2, r3
 800f80c:	0140      	lsls	r0, r0, #5
 800f80e:	69e1      	ldr	r1, [r4, #28]
 800f810:	4002      	ands	r2, r0
 800f812:	4203      	tst	r3, r0
 800f814:	d038      	beq.n	800f888 <__sflush_r+0xb4>
 800f816:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f818:	89a3      	ldrh	r3, [r4, #12]
 800f81a:	075b      	lsls	r3, r3, #29
 800f81c:	d506      	bpl.n	800f82c <__sflush_r+0x58>
 800f81e:	6863      	ldr	r3, [r4, #4]
 800f820:	1ac0      	subs	r0, r0, r3
 800f822:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f824:	2b00      	cmp	r3, #0
 800f826:	d001      	beq.n	800f82c <__sflush_r+0x58>
 800f828:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f82a:	1ac0      	subs	r0, r0, r3
 800f82c:	0002      	movs	r2, r0
 800f82e:	2300      	movs	r3, #0
 800f830:	0028      	movs	r0, r5
 800f832:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f834:	69e1      	ldr	r1, [r4, #28]
 800f836:	47b8      	blx	r7
 800f838:	89a2      	ldrh	r2, [r4, #12]
 800f83a:	1c43      	adds	r3, r0, #1
 800f83c:	d106      	bne.n	800f84c <__sflush_r+0x78>
 800f83e:	6829      	ldr	r1, [r5, #0]
 800f840:	291d      	cmp	r1, #29
 800f842:	d830      	bhi.n	800f8a6 <__sflush_r+0xd2>
 800f844:	4b2c      	ldr	r3, [pc, #176]	; (800f8f8 <__sflush_r+0x124>)
 800f846:	410b      	asrs	r3, r1
 800f848:	07db      	lsls	r3, r3, #31
 800f84a:	d42c      	bmi.n	800f8a6 <__sflush_r+0xd2>
 800f84c:	4b2b      	ldr	r3, [pc, #172]	; (800f8fc <__sflush_r+0x128>)
 800f84e:	4013      	ands	r3, r2
 800f850:	2200      	movs	r2, #0
 800f852:	6062      	str	r2, [r4, #4]
 800f854:	6922      	ldr	r2, [r4, #16]
 800f856:	b21b      	sxth	r3, r3
 800f858:	81a3      	strh	r3, [r4, #12]
 800f85a:	6022      	str	r2, [r4, #0]
 800f85c:	04db      	lsls	r3, r3, #19
 800f85e:	d505      	bpl.n	800f86c <__sflush_r+0x98>
 800f860:	1c43      	adds	r3, r0, #1
 800f862:	d102      	bne.n	800f86a <__sflush_r+0x96>
 800f864:	682b      	ldr	r3, [r5, #0]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d100      	bne.n	800f86c <__sflush_r+0x98>
 800f86a:	6520      	str	r0, [r4, #80]	; 0x50
 800f86c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f86e:	602e      	str	r6, [r5, #0]
 800f870:	2900      	cmp	r1, #0
 800f872:	d0c1      	beq.n	800f7f8 <__sflush_r+0x24>
 800f874:	0023      	movs	r3, r4
 800f876:	3340      	adds	r3, #64	; 0x40
 800f878:	4299      	cmp	r1, r3
 800f87a:	d002      	beq.n	800f882 <__sflush_r+0xae>
 800f87c:	0028      	movs	r0, r5
 800f87e:	f7fc fa53 	bl	800bd28 <_free_r>
 800f882:	2000      	movs	r0, #0
 800f884:	6320      	str	r0, [r4, #48]	; 0x30
 800f886:	e7b8      	b.n	800f7fa <__sflush_r+0x26>
 800f888:	2301      	movs	r3, #1
 800f88a:	0028      	movs	r0, r5
 800f88c:	47b8      	blx	r7
 800f88e:	1c43      	adds	r3, r0, #1
 800f890:	d1c2      	bne.n	800f818 <__sflush_r+0x44>
 800f892:	682b      	ldr	r3, [r5, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d0bf      	beq.n	800f818 <__sflush_r+0x44>
 800f898:	2b1d      	cmp	r3, #29
 800f89a:	d001      	beq.n	800f8a0 <__sflush_r+0xcc>
 800f89c:	2b16      	cmp	r3, #22
 800f89e:	d101      	bne.n	800f8a4 <__sflush_r+0xd0>
 800f8a0:	602e      	str	r6, [r5, #0]
 800f8a2:	e7a9      	b.n	800f7f8 <__sflush_r+0x24>
 800f8a4:	89a2      	ldrh	r2, [r4, #12]
 800f8a6:	2340      	movs	r3, #64	; 0x40
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	81a3      	strh	r3, [r4, #12]
 800f8ac:	e7a5      	b.n	800f7fa <__sflush_r+0x26>
 800f8ae:	6926      	ldr	r6, [r4, #16]
 800f8b0:	2e00      	cmp	r6, #0
 800f8b2:	d0a1      	beq.n	800f7f8 <__sflush_r+0x24>
 800f8b4:	6827      	ldr	r7, [r4, #0]
 800f8b6:	6026      	str	r6, [r4, #0]
 800f8b8:	1bbb      	subs	r3, r7, r6
 800f8ba:	9301      	str	r3, [sp, #4]
 800f8bc:	2300      	movs	r3, #0
 800f8be:	0789      	lsls	r1, r1, #30
 800f8c0:	d100      	bne.n	800f8c4 <__sflush_r+0xf0>
 800f8c2:	6963      	ldr	r3, [r4, #20]
 800f8c4:	60a3      	str	r3, [r4, #8]
 800f8c6:	9b01      	ldr	r3, [sp, #4]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	dc00      	bgt.n	800f8ce <__sflush_r+0xfa>
 800f8cc:	e794      	b.n	800f7f8 <__sflush_r+0x24>
 800f8ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8d0:	0032      	movs	r2, r6
 800f8d2:	001f      	movs	r7, r3
 800f8d4:	0028      	movs	r0, r5
 800f8d6:	9b01      	ldr	r3, [sp, #4]
 800f8d8:	69e1      	ldr	r1, [r4, #28]
 800f8da:	47b8      	blx	r7
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	dc06      	bgt.n	800f8ee <__sflush_r+0x11a>
 800f8e0:	2340      	movs	r3, #64	; 0x40
 800f8e2:	2001      	movs	r0, #1
 800f8e4:	89a2      	ldrh	r2, [r4, #12]
 800f8e6:	4240      	negs	r0, r0
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	81a3      	strh	r3, [r4, #12]
 800f8ec:	e785      	b.n	800f7fa <__sflush_r+0x26>
 800f8ee:	9b01      	ldr	r3, [sp, #4]
 800f8f0:	1836      	adds	r6, r6, r0
 800f8f2:	1a1b      	subs	r3, r3, r0
 800f8f4:	9301      	str	r3, [sp, #4]
 800f8f6:	e7e6      	b.n	800f8c6 <__sflush_r+0xf2>
 800f8f8:	dfbffffe 	.word	0xdfbffffe
 800f8fc:	fffff7ff 	.word	0xfffff7ff

0800f900 <_fflush_r>:
 800f900:	b570      	push	{r4, r5, r6, lr}
 800f902:	0005      	movs	r5, r0
 800f904:	000c      	movs	r4, r1
 800f906:	2800      	cmp	r0, #0
 800f908:	d004      	beq.n	800f914 <_fflush_r+0x14>
 800f90a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d101      	bne.n	800f914 <_fflush_r+0x14>
 800f910:	f7fb ffac 	bl	800b86c <__sinit>
 800f914:	220c      	movs	r2, #12
 800f916:	5ea3      	ldrsh	r3, [r4, r2]
 800f918:	1e1e      	subs	r6, r3, #0
 800f91a:	d015      	beq.n	800f948 <_fflush_r+0x48>
 800f91c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f91e:	07d2      	lsls	r2, r2, #31
 800f920:	d404      	bmi.n	800f92c <_fflush_r+0x2c>
 800f922:	059b      	lsls	r3, r3, #22
 800f924:	d402      	bmi.n	800f92c <_fflush_r+0x2c>
 800f926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f928:	f7fc f976 	bl	800bc18 <__retarget_lock_acquire_recursive>
 800f92c:	0021      	movs	r1, r4
 800f92e:	0028      	movs	r0, r5
 800f930:	f7ff ff50 	bl	800f7d4 <__sflush_r>
 800f934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f936:	0006      	movs	r6, r0
 800f938:	07db      	lsls	r3, r3, #31
 800f93a:	d405      	bmi.n	800f948 <_fflush_r+0x48>
 800f93c:	89a3      	ldrh	r3, [r4, #12]
 800f93e:	059b      	lsls	r3, r3, #22
 800f940:	d402      	bmi.n	800f948 <_fflush_r+0x48>
 800f942:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f944:	f7fc f969 	bl	800bc1a <__retarget_lock_release_recursive>
 800f948:	0030      	movs	r0, r6
 800f94a:	bd70      	pop	{r4, r5, r6, pc}

0800f94c <__sccl>:
 800f94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f94e:	780b      	ldrb	r3, [r1, #0]
 800f950:	0004      	movs	r4, r0
 800f952:	2b5e      	cmp	r3, #94	; 0x5e
 800f954:	d019      	beq.n	800f98a <__sccl+0x3e>
 800f956:	2200      	movs	r2, #0
 800f958:	1c4d      	adds	r5, r1, #1
 800f95a:	0021      	movs	r1, r4
 800f95c:	1c60      	adds	r0, r4, #1
 800f95e:	30ff      	adds	r0, #255	; 0xff
 800f960:	700a      	strb	r2, [r1, #0]
 800f962:	3101      	adds	r1, #1
 800f964:	4281      	cmp	r1, r0
 800f966:	d1fb      	bne.n	800f960 <__sccl+0x14>
 800f968:	1e68      	subs	r0, r5, #1
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00c      	beq.n	800f988 <__sccl+0x3c>
 800f96e:	2101      	movs	r1, #1
 800f970:	262d      	movs	r6, #45	; 0x2d
 800f972:	404a      	eors	r2, r1
 800f974:	0028      	movs	r0, r5
 800f976:	54e2      	strb	r2, [r4, r3]
 800f978:	7801      	ldrb	r1, [r0, #0]
 800f97a:	1c45      	adds	r5, r0, #1
 800f97c:	292d      	cmp	r1, #45	; 0x2d
 800f97e:	d00c      	beq.n	800f99a <__sccl+0x4e>
 800f980:	295d      	cmp	r1, #93	; 0x5d
 800f982:	d01d      	beq.n	800f9c0 <__sccl+0x74>
 800f984:	2900      	cmp	r1, #0
 800f986:	d104      	bne.n	800f992 <__sccl+0x46>
 800f988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f98a:	2201      	movs	r2, #1
 800f98c:	784b      	ldrb	r3, [r1, #1]
 800f98e:	1c8d      	adds	r5, r1, #2
 800f990:	e7e3      	b.n	800f95a <__sccl+0xe>
 800f992:	000b      	movs	r3, r1
 800f994:	e7ee      	b.n	800f974 <__sccl+0x28>
 800f996:	0033      	movs	r3, r6
 800f998:	e7ec      	b.n	800f974 <__sccl+0x28>
 800f99a:	7841      	ldrb	r1, [r0, #1]
 800f99c:	295d      	cmp	r1, #93	; 0x5d
 800f99e:	d0fa      	beq.n	800f996 <__sccl+0x4a>
 800f9a0:	428b      	cmp	r3, r1
 800f9a2:	dcf8      	bgt.n	800f996 <__sccl+0x4a>
 800f9a4:	001d      	movs	r5, r3
 800f9a6:	3002      	adds	r0, #2
 800f9a8:	3501      	adds	r5, #1
 800f9aa:	5562      	strb	r2, [r4, r5]
 800f9ac:	42a9      	cmp	r1, r5
 800f9ae:	dcfb      	bgt.n	800f9a8 <__sccl+0x5c>
 800f9b0:	2500      	movs	r5, #0
 800f9b2:	1c5f      	adds	r7, r3, #1
 800f9b4:	428b      	cmp	r3, r1
 800f9b6:	da01      	bge.n	800f9bc <__sccl+0x70>
 800f9b8:	1acd      	subs	r5, r1, r3
 800f9ba:	3d01      	subs	r5, #1
 800f9bc:	197b      	adds	r3, r7, r5
 800f9be:	e7db      	b.n	800f978 <__sccl+0x2c>
 800f9c0:	0028      	movs	r0, r5
 800f9c2:	e7e1      	b.n	800f988 <__sccl+0x3c>

0800f9c4 <_localeconv_r>:
 800f9c4:	4800      	ldr	r0, [pc, #0]	; (800f9c8 <_localeconv_r+0x4>)
 800f9c6:	4770      	bx	lr
 800f9c8:	20000538 	.word	0x20000538

0800f9cc <__libc_fini_array>:
 800f9cc:	b570      	push	{r4, r5, r6, lr}
 800f9ce:	4c07      	ldr	r4, [pc, #28]	; (800f9ec <__libc_fini_array+0x20>)
 800f9d0:	4d07      	ldr	r5, [pc, #28]	; (800f9f0 <__libc_fini_array+0x24>)
 800f9d2:	1b64      	subs	r4, r4, r5
 800f9d4:	10a4      	asrs	r4, r4, #2
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	d102      	bne.n	800f9e0 <__libc_fini_array+0x14>
 800f9da:	f002 fdcd 	bl	8012578 <_fini>
 800f9de:	bd70      	pop	{r4, r5, r6, pc}
 800f9e0:	3c01      	subs	r4, #1
 800f9e2:	00a3      	lsls	r3, r4, #2
 800f9e4:	58eb      	ldr	r3, [r5, r3]
 800f9e6:	4798      	blx	r3
 800f9e8:	e7f5      	b.n	800f9d6 <__libc_fini_array+0xa>
 800f9ea:	46c0      	nop			; (mov r8, r8)
 800f9ec:	080143d0 	.word	0x080143d0
 800f9f0:	080143cc 	.word	0x080143cc

0800f9f4 <memchr>:
 800f9f4:	b2c9      	uxtb	r1, r1
 800f9f6:	1882      	adds	r2, r0, r2
 800f9f8:	4290      	cmp	r0, r2
 800f9fa:	d101      	bne.n	800fa00 <memchr+0xc>
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	4770      	bx	lr
 800fa00:	7803      	ldrb	r3, [r0, #0]
 800fa02:	428b      	cmp	r3, r1
 800fa04:	d0fb      	beq.n	800f9fe <memchr+0xa>
 800fa06:	3001      	adds	r0, #1
 800fa08:	e7f6      	b.n	800f9f8 <memchr+0x4>
	...

0800fa0c <frexp>:
 800fa0c:	b570      	push	{r4, r5, r6, lr}
 800fa0e:	0014      	movs	r4, r2
 800fa10:	2500      	movs	r5, #0
 800fa12:	6025      	str	r5, [r4, #0]
 800fa14:	4d10      	ldr	r5, [pc, #64]	; (800fa58 <frexp+0x4c>)
 800fa16:	004b      	lsls	r3, r1, #1
 800fa18:	000a      	movs	r2, r1
 800fa1a:	085b      	lsrs	r3, r3, #1
 800fa1c:	42ab      	cmp	r3, r5
 800fa1e:	dc1a      	bgt.n	800fa56 <frexp+0x4a>
 800fa20:	001d      	movs	r5, r3
 800fa22:	4305      	orrs	r5, r0
 800fa24:	d017      	beq.n	800fa56 <frexp+0x4a>
 800fa26:	4d0d      	ldr	r5, [pc, #52]	; (800fa5c <frexp+0x50>)
 800fa28:	4229      	tst	r1, r5
 800fa2a:	d109      	bne.n	800fa40 <frexp+0x34>
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	4b0c      	ldr	r3, [pc, #48]	; (800fa60 <frexp+0x54>)
 800fa30:	f7f1 fe1c 	bl	800166c <__aeabi_dmul>
 800fa34:	2536      	movs	r5, #54	; 0x36
 800fa36:	000a      	movs	r2, r1
 800fa38:	004b      	lsls	r3, r1, #1
 800fa3a:	426d      	negs	r5, r5
 800fa3c:	085b      	lsrs	r3, r3, #1
 800fa3e:	6025      	str	r5, [r4, #0]
 800fa40:	4d08      	ldr	r5, [pc, #32]	; (800fa64 <frexp+0x58>)
 800fa42:	151b      	asrs	r3, r3, #20
 800fa44:	195b      	adds	r3, r3, r5
 800fa46:	6825      	ldr	r5, [r4, #0]
 800fa48:	18eb      	adds	r3, r5, r3
 800fa4a:	6023      	str	r3, [r4, #0]
 800fa4c:	4b06      	ldr	r3, [pc, #24]	; (800fa68 <frexp+0x5c>)
 800fa4e:	401a      	ands	r2, r3
 800fa50:	4b06      	ldr	r3, [pc, #24]	; (800fa6c <frexp+0x60>)
 800fa52:	4313      	orrs	r3, r2
 800fa54:	0019      	movs	r1, r3
 800fa56:	bd70      	pop	{r4, r5, r6, pc}
 800fa58:	7fefffff 	.word	0x7fefffff
 800fa5c:	7ff00000 	.word	0x7ff00000
 800fa60:	43500000 	.word	0x43500000
 800fa64:	fffffc02 	.word	0xfffffc02
 800fa68:	800fffff 	.word	0x800fffff
 800fa6c:	3fe00000 	.word	0x3fe00000

0800fa70 <__register_exitproc>:
 800fa70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa72:	4f1c      	ldr	r7, [pc, #112]	; (800fae4 <__register_exitproc+0x74>)
 800fa74:	0004      	movs	r4, r0
 800fa76:	6838      	ldr	r0, [r7, #0]
 800fa78:	0016      	movs	r6, r2
 800fa7a:	9301      	str	r3, [sp, #4]
 800fa7c:	9100      	str	r1, [sp, #0]
 800fa7e:	f7fc f8cb 	bl	800bc18 <__retarget_lock_acquire_recursive>
 800fa82:	4a19      	ldr	r2, [pc, #100]	; (800fae8 <__register_exitproc+0x78>)
 800fa84:	6813      	ldr	r3, [r2, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d101      	bne.n	800fa8e <__register_exitproc+0x1e>
 800fa8a:	4b18      	ldr	r3, [pc, #96]	; (800faec <__register_exitproc+0x7c>)
 800fa8c:	6013      	str	r3, [r2, #0]
 800fa8e:	685a      	ldr	r2, [r3, #4]
 800fa90:	6838      	ldr	r0, [r7, #0]
 800fa92:	2a1f      	cmp	r2, #31
 800fa94:	dd04      	ble.n	800faa0 <__register_exitproc+0x30>
 800fa96:	f7fc f8c0 	bl	800bc1a <__retarget_lock_release_recursive>
 800fa9a:	2001      	movs	r0, #1
 800fa9c:	4240      	negs	r0, r0
 800fa9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800faa0:	2c00      	cmp	r4, #0
 800faa2:	d014      	beq.n	800face <__register_exitproc+0x5e>
 800faa4:	0091      	lsls	r1, r2, #2
 800faa6:	1859      	adds	r1, r3, r1
 800faa8:	000f      	movs	r7, r1
 800faaa:	3788      	adds	r7, #136	; 0x88
 800faac:	603e      	str	r6, [r7, #0]
 800faae:	2701      	movs	r7, #1
 800fab0:	001e      	movs	r6, r3
 800fab2:	4097      	lsls	r7, r2
 800fab4:	3685      	adds	r6, #133	; 0x85
 800fab6:	36ff      	adds	r6, #255	; 0xff
 800fab8:	6875      	ldr	r5, [r6, #4]
 800faba:	31fc      	adds	r1, #252	; 0xfc
 800fabc:	433d      	orrs	r5, r7
 800fabe:	6075      	str	r5, [r6, #4]
 800fac0:	9d01      	ldr	r5, [sp, #4]
 800fac2:	60cd      	str	r5, [r1, #12]
 800fac4:	2c02      	cmp	r4, #2
 800fac6:	d102      	bne.n	800face <__register_exitproc+0x5e>
 800fac8:	68b1      	ldr	r1, [r6, #8]
 800faca:	4339      	orrs	r1, r7
 800facc:	60b1      	str	r1, [r6, #8]
 800face:	1c51      	adds	r1, r2, #1
 800fad0:	6059      	str	r1, [r3, #4]
 800fad2:	3202      	adds	r2, #2
 800fad4:	9900      	ldr	r1, [sp, #0]
 800fad6:	0092      	lsls	r2, r2, #2
 800fad8:	50d1      	str	r1, [r2, r3]
 800fada:	f7fc f89e 	bl	800bc1a <__retarget_lock_release_recursive>
 800fade:	2000      	movs	r0, #0
 800fae0:	e7dd      	b.n	800fa9e <__register_exitproc+0x2e>
 800fae2:	46c0      	nop			; (mov r8, r8)
 800fae4:	200006dc 	.word	0x200006dc
 800fae8:	20000cb4 	.word	0x20000cb4
 800faec:	20000cb8 	.word	0x20000cb8

0800faf0 <__assert_func>:
 800faf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800faf2:	0014      	movs	r4, r2
 800faf4:	001a      	movs	r2, r3
 800faf6:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <__assert_func+0x2c>)
 800faf8:	0005      	movs	r5, r0
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	000e      	movs	r6, r1
 800fafe:	68d8      	ldr	r0, [r3, #12]
 800fb00:	4b07      	ldr	r3, [pc, #28]	; (800fb20 <__assert_func+0x30>)
 800fb02:	2c00      	cmp	r4, #0
 800fb04:	d101      	bne.n	800fb0a <__assert_func+0x1a>
 800fb06:	4b07      	ldr	r3, [pc, #28]	; (800fb24 <__assert_func+0x34>)
 800fb08:	001c      	movs	r4, r3
 800fb0a:	4907      	ldr	r1, [pc, #28]	; (800fb28 <__assert_func+0x38>)
 800fb0c:	9301      	str	r3, [sp, #4]
 800fb0e:	9402      	str	r4, [sp, #8]
 800fb10:	002b      	movs	r3, r5
 800fb12:	9600      	str	r6, [sp, #0]
 800fb14:	f001 faa6 	bl	8011064 <fiprintf>
 800fb18:	f002 fb8e 	bl	8012238 <abort>
 800fb1c:	200006d8 	.word	0x200006d8
 800fb20:	080142f8 	.word	0x080142f8
 800fb24:	08014333 	.word	0x08014333
 800fb28:	08014305 	.word	0x08014305

0800fb2c <_calloc_r>:
 800fb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2e:	2400      	movs	r4, #0
 800fb30:	0c0b      	lsrs	r3, r1, #16
 800fb32:	0c16      	lsrs	r6, r2, #16
 800fb34:	42a3      	cmp	r3, r4
 800fb36:	d133      	bne.n	800fba0 <_calloc_r+0x74>
 800fb38:	42a6      	cmp	r6, r4
 800fb3a:	d121      	bne.n	800fb80 <_calloc_r+0x54>
 800fb3c:	b28b      	uxth	r3, r1
 800fb3e:	b291      	uxth	r1, r2
 800fb40:	4359      	muls	r1, r3
 800fb42:	f7fa fd11 	bl	800a568 <_malloc_r>
 800fb46:	1e05      	subs	r5, r0, #0
 800fb48:	d033      	beq.n	800fbb2 <_calloc_r+0x86>
 800fb4a:	0003      	movs	r3, r0
 800fb4c:	3b08      	subs	r3, #8
 800fb4e:	685a      	ldr	r2, [r3, #4]
 800fb50:	2303      	movs	r3, #3
 800fb52:	439a      	bics	r2, r3
 800fb54:	3a04      	subs	r2, #4
 800fb56:	2a24      	cmp	r2, #36	; 0x24
 800fb58:	d832      	bhi.n	800fbc0 <_calloc_r+0x94>
 800fb5a:	0003      	movs	r3, r0
 800fb5c:	2a13      	cmp	r2, #19
 800fb5e:	d90a      	bls.n	800fb76 <_calloc_r+0x4a>
 800fb60:	6004      	str	r4, [r0, #0]
 800fb62:	6044      	str	r4, [r0, #4]
 800fb64:	3308      	adds	r3, #8
 800fb66:	2a1b      	cmp	r2, #27
 800fb68:	d905      	bls.n	800fb76 <_calloc_r+0x4a>
 800fb6a:	6084      	str	r4, [r0, #8]
 800fb6c:	60c4      	str	r4, [r0, #12]
 800fb6e:	2a24      	cmp	r2, #36	; 0x24
 800fb70:	d021      	beq.n	800fbb6 <_calloc_r+0x8a>
 800fb72:	0003      	movs	r3, r0
 800fb74:	3310      	adds	r3, #16
 800fb76:	2200      	movs	r2, #0
 800fb78:	601a      	str	r2, [r3, #0]
 800fb7a:	605a      	str	r2, [r3, #4]
 800fb7c:	609a      	str	r2, [r3, #8]
 800fb7e:	e018      	b.n	800fbb2 <_calloc_r+0x86>
 800fb80:	1c33      	adds	r3, r6, #0
 800fb82:	1c0d      	adds	r5, r1, #0
 800fb84:	b289      	uxth	r1, r1
 800fb86:	b292      	uxth	r2, r2
 800fb88:	434a      	muls	r2, r1
 800fb8a:	b2ad      	uxth	r5, r5
 800fb8c:	b299      	uxth	r1, r3
 800fb8e:	4369      	muls	r1, r5
 800fb90:	0c13      	lsrs	r3, r2, #16
 800fb92:	18c9      	adds	r1, r1, r3
 800fb94:	0c0b      	lsrs	r3, r1, #16
 800fb96:	d107      	bne.n	800fba8 <_calloc_r+0x7c>
 800fb98:	0409      	lsls	r1, r1, #16
 800fb9a:	b292      	uxth	r2, r2
 800fb9c:	4311      	orrs	r1, r2
 800fb9e:	e7d0      	b.n	800fb42 <_calloc_r+0x16>
 800fba0:	2e00      	cmp	r6, #0
 800fba2:	d101      	bne.n	800fba8 <_calloc_r+0x7c>
 800fba4:	1c15      	adds	r5, r2, #0
 800fba6:	e7ed      	b.n	800fb84 <_calloc_r+0x58>
 800fba8:	f7fc f80a 	bl	800bbc0 <__errno>
 800fbac:	230c      	movs	r3, #12
 800fbae:	2500      	movs	r5, #0
 800fbb0:	6003      	str	r3, [r0, #0]
 800fbb2:	0028      	movs	r0, r5
 800fbb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb6:	0003      	movs	r3, r0
 800fbb8:	6104      	str	r4, [r0, #16]
 800fbba:	3318      	adds	r3, #24
 800fbbc:	6144      	str	r4, [r0, #20]
 800fbbe:	e7da      	b.n	800fb76 <_calloc_r+0x4a>
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	f7fb ff51 	bl	800ba68 <memset>
 800fbc6:	e7f4      	b.n	800fbb2 <_calloc_r+0x86>

0800fbc8 <quorem>:
 800fbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbca:	6902      	ldr	r2, [r0, #16]
 800fbcc:	690b      	ldr	r3, [r1, #16]
 800fbce:	b089      	sub	sp, #36	; 0x24
 800fbd0:	0007      	movs	r7, r0
 800fbd2:	9104      	str	r1, [sp, #16]
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	db69      	blt.n	800fcae <quorem+0xe6>
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	009c      	lsls	r4, r3, #2
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	000b      	movs	r3, r1
 800fbe2:	3314      	adds	r3, #20
 800fbe4:	9306      	str	r3, [sp, #24]
 800fbe6:	191b      	adds	r3, r3, r4
 800fbe8:	9305      	str	r3, [sp, #20]
 800fbea:	003b      	movs	r3, r7
 800fbec:	3314      	adds	r3, #20
 800fbee:	9303      	str	r3, [sp, #12]
 800fbf0:	191c      	adds	r4, r3, r4
 800fbf2:	9b05      	ldr	r3, [sp, #20]
 800fbf4:	6826      	ldr	r6, [r4, #0]
 800fbf6:	681d      	ldr	r5, [r3, #0]
 800fbf8:	0030      	movs	r0, r6
 800fbfa:	3501      	adds	r5, #1
 800fbfc:	0029      	movs	r1, r5
 800fbfe:	f7f0 fa9d 	bl	800013c <__udivsi3>
 800fc02:	9002      	str	r0, [sp, #8]
 800fc04:	42ae      	cmp	r6, r5
 800fc06:	d329      	bcc.n	800fc5c <quorem+0x94>
 800fc08:	9b06      	ldr	r3, [sp, #24]
 800fc0a:	2600      	movs	r6, #0
 800fc0c:	469c      	mov	ip, r3
 800fc0e:	9d03      	ldr	r5, [sp, #12]
 800fc10:	9606      	str	r6, [sp, #24]
 800fc12:	4662      	mov	r2, ip
 800fc14:	ca08      	ldmia	r2!, {r3}
 800fc16:	6828      	ldr	r0, [r5, #0]
 800fc18:	4694      	mov	ip, r2
 800fc1a:	9a02      	ldr	r2, [sp, #8]
 800fc1c:	b299      	uxth	r1, r3
 800fc1e:	4351      	muls	r1, r2
 800fc20:	0c1b      	lsrs	r3, r3, #16
 800fc22:	4353      	muls	r3, r2
 800fc24:	1989      	adds	r1, r1, r6
 800fc26:	0c0a      	lsrs	r2, r1, #16
 800fc28:	189b      	adds	r3, r3, r2
 800fc2a:	9307      	str	r3, [sp, #28]
 800fc2c:	0c1e      	lsrs	r6, r3, #16
 800fc2e:	9b06      	ldr	r3, [sp, #24]
 800fc30:	b282      	uxth	r2, r0
 800fc32:	18d2      	adds	r2, r2, r3
 800fc34:	466b      	mov	r3, sp
 800fc36:	b289      	uxth	r1, r1
 800fc38:	8b9b      	ldrh	r3, [r3, #28]
 800fc3a:	1a52      	subs	r2, r2, r1
 800fc3c:	0c01      	lsrs	r1, r0, #16
 800fc3e:	1ac9      	subs	r1, r1, r3
 800fc40:	1413      	asrs	r3, r2, #16
 800fc42:	18cb      	adds	r3, r1, r3
 800fc44:	1419      	asrs	r1, r3, #16
 800fc46:	b292      	uxth	r2, r2
 800fc48:	041b      	lsls	r3, r3, #16
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	c508      	stmia	r5!, {r3}
 800fc4e:	9b05      	ldr	r3, [sp, #20]
 800fc50:	9106      	str	r1, [sp, #24]
 800fc52:	4563      	cmp	r3, ip
 800fc54:	d2dd      	bcs.n	800fc12 <quorem+0x4a>
 800fc56:	6823      	ldr	r3, [r4, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d030      	beq.n	800fcbe <quorem+0xf6>
 800fc5c:	0038      	movs	r0, r7
 800fc5e:	9904      	ldr	r1, [sp, #16]
 800fc60:	f7fc ff04 	bl	800ca6c <__mcmp>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	db21      	blt.n	800fcac <quorem+0xe4>
 800fc68:	0038      	movs	r0, r7
 800fc6a:	2600      	movs	r6, #0
 800fc6c:	9b02      	ldr	r3, [sp, #8]
 800fc6e:	9c04      	ldr	r4, [sp, #16]
 800fc70:	3301      	adds	r3, #1
 800fc72:	9302      	str	r3, [sp, #8]
 800fc74:	3014      	adds	r0, #20
 800fc76:	3414      	adds	r4, #20
 800fc78:	6803      	ldr	r3, [r0, #0]
 800fc7a:	cc02      	ldmia	r4!, {r1}
 800fc7c:	b29d      	uxth	r5, r3
 800fc7e:	19ad      	adds	r5, r5, r6
 800fc80:	b28a      	uxth	r2, r1
 800fc82:	1aaa      	subs	r2, r5, r2
 800fc84:	0c09      	lsrs	r1, r1, #16
 800fc86:	0c1b      	lsrs	r3, r3, #16
 800fc88:	1a5b      	subs	r3, r3, r1
 800fc8a:	1411      	asrs	r1, r2, #16
 800fc8c:	185b      	adds	r3, r3, r1
 800fc8e:	141e      	asrs	r6, r3, #16
 800fc90:	b292      	uxth	r2, r2
 800fc92:	041b      	lsls	r3, r3, #16
 800fc94:	4313      	orrs	r3, r2
 800fc96:	c008      	stmia	r0!, {r3}
 800fc98:	9b05      	ldr	r3, [sp, #20]
 800fc9a:	42a3      	cmp	r3, r4
 800fc9c:	d2ec      	bcs.n	800fc78 <quorem+0xb0>
 800fc9e:	9b01      	ldr	r3, [sp, #4]
 800fca0:	9a03      	ldr	r2, [sp, #12]
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	18d3      	adds	r3, r2, r3
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	2a00      	cmp	r2, #0
 800fcaa:	d015      	beq.n	800fcd8 <quorem+0x110>
 800fcac:	9802      	ldr	r0, [sp, #8]
 800fcae:	b009      	add	sp, #36	; 0x24
 800fcb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcb2:	6823      	ldr	r3, [r4, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d106      	bne.n	800fcc6 <quorem+0xfe>
 800fcb8:	9b01      	ldr	r3, [sp, #4]
 800fcba:	3b01      	subs	r3, #1
 800fcbc:	9301      	str	r3, [sp, #4]
 800fcbe:	9b03      	ldr	r3, [sp, #12]
 800fcc0:	3c04      	subs	r4, #4
 800fcc2:	42a3      	cmp	r3, r4
 800fcc4:	d3f5      	bcc.n	800fcb2 <quorem+0xea>
 800fcc6:	9b01      	ldr	r3, [sp, #4]
 800fcc8:	613b      	str	r3, [r7, #16]
 800fcca:	e7c7      	b.n	800fc5c <quorem+0x94>
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	2a00      	cmp	r2, #0
 800fcd0:	d106      	bne.n	800fce0 <quorem+0x118>
 800fcd2:	9a01      	ldr	r2, [sp, #4]
 800fcd4:	3a01      	subs	r2, #1
 800fcd6:	9201      	str	r2, [sp, #4]
 800fcd8:	9a03      	ldr	r2, [sp, #12]
 800fcda:	3b04      	subs	r3, #4
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d3f5      	bcc.n	800fccc <quorem+0x104>
 800fce0:	9b01      	ldr	r3, [sp, #4]
 800fce2:	613b      	str	r3, [r7, #16]
 800fce4:	e7e2      	b.n	800fcac <quorem+0xe4>
	...

0800fce8 <_dtoa_r>:
 800fce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcea:	0014      	movs	r4, r2
 800fcec:	001d      	movs	r5, r3
 800fcee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800fcf0:	b09d      	sub	sp, #116	; 0x74
 800fcf2:	9408      	str	r4, [sp, #32]
 800fcf4:	9509      	str	r5, [sp, #36]	; 0x24
 800fcf6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800fcf8:	9004      	str	r0, [sp, #16]
 800fcfa:	2900      	cmp	r1, #0
 800fcfc:	d009      	beq.n	800fd12 <_dtoa_r+0x2a>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fd02:	4093      	lsls	r3, r2
 800fd04:	604a      	str	r2, [r1, #4]
 800fd06:	608b      	str	r3, [r1, #8]
 800fd08:	f7fc fc56 	bl	800c5b8 <_Bfree>
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	9a04      	ldr	r2, [sp, #16]
 800fd10:	6393      	str	r3, [r2, #56]	; 0x38
 800fd12:	2d00      	cmp	r5, #0
 800fd14:	da1e      	bge.n	800fd54 <_dtoa_r+0x6c>
 800fd16:	2301      	movs	r3, #1
 800fd18:	6033      	str	r3, [r6, #0]
 800fd1a:	006b      	lsls	r3, r5, #1
 800fd1c:	085b      	lsrs	r3, r3, #1
 800fd1e:	9309      	str	r3, [sp, #36]	; 0x24
 800fd20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fd22:	4bb5      	ldr	r3, [pc, #724]	; (800fff8 <_dtoa_r+0x310>)
 800fd24:	4ab4      	ldr	r2, [pc, #720]	; (800fff8 <_dtoa_r+0x310>)
 800fd26:	403b      	ands	r3, r7
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d116      	bne.n	800fd5a <_dtoa_r+0x72>
 800fd2c:	4bb3      	ldr	r3, [pc, #716]	; (800fffc <_dtoa_r+0x314>)
 800fd2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fd30:	6013      	str	r3, [r2, #0]
 800fd32:	033b      	lsls	r3, r7, #12
 800fd34:	0b1b      	lsrs	r3, r3, #12
 800fd36:	4323      	orrs	r3, r4
 800fd38:	d101      	bne.n	800fd3e <_dtoa_r+0x56>
 800fd3a:	f000 fdb2 	bl	80108a2 <_dtoa_r+0xbba>
 800fd3e:	4bb0      	ldr	r3, [pc, #704]	; (8010000 <_dtoa_r+0x318>)
 800fd40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fd42:	9306      	str	r3, [sp, #24]
 800fd44:	2a00      	cmp	r2, #0
 800fd46:	d002      	beq.n	800fd4e <_dtoa_r+0x66>
 800fd48:	4bae      	ldr	r3, [pc, #696]	; (8010004 <_dtoa_r+0x31c>)
 800fd4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fd4c:	6013      	str	r3, [r2, #0]
 800fd4e:	9806      	ldr	r0, [sp, #24]
 800fd50:	b01d      	add	sp, #116	; 0x74
 800fd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd54:	2300      	movs	r3, #0
 800fd56:	6033      	str	r3, [r6, #0]
 800fd58:	e7e2      	b.n	800fd20 <_dtoa_r+0x38>
 800fd5a:	9a08      	ldr	r2, [sp, #32]
 800fd5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd5e:	9210      	str	r2, [sp, #64]	; 0x40
 800fd60:	9311      	str	r3, [sp, #68]	; 0x44
 800fd62:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fd64:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd66:	2200      	movs	r2, #0
 800fd68:	2300      	movs	r3, #0
 800fd6a:	f7f0 fb6d 	bl	8000448 <__aeabi_dcmpeq>
 800fd6e:	1e06      	subs	r6, r0, #0
 800fd70:	d009      	beq.n	800fd86 <_dtoa_r+0x9e>
 800fd72:	2301      	movs	r3, #1
 800fd74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fd76:	6013      	str	r3, [r2, #0]
 800fd78:	4ba3      	ldr	r3, [pc, #652]	; (8010008 <_dtoa_r+0x320>)
 800fd7a:	9306      	str	r3, [sp, #24]
 800fd7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d0e5      	beq.n	800fd4e <_dtoa_r+0x66>
 800fd82:	4ba2      	ldr	r3, [pc, #648]	; (801000c <_dtoa_r+0x324>)
 800fd84:	e7e1      	b.n	800fd4a <_dtoa_r+0x62>
 800fd86:	ab1a      	add	r3, sp, #104	; 0x68
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	ab1b      	add	r3, sp, #108	; 0x6c
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	9804      	ldr	r0, [sp, #16]
 800fd90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fd92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd94:	f7fc ff86 	bl	800cca4 <__d2b>
 800fd98:	007a      	lsls	r2, r7, #1
 800fd9a:	9005      	str	r0, [sp, #20]
 800fd9c:	0d52      	lsrs	r2, r2, #21
 800fd9e:	d100      	bne.n	800fda2 <_dtoa_r+0xba>
 800fda0:	e07b      	b.n	800fe9a <_dtoa_r+0x1b2>
 800fda2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fda4:	9617      	str	r6, [sp, #92]	; 0x5c
 800fda6:	0319      	lsls	r1, r3, #12
 800fda8:	4b99      	ldr	r3, [pc, #612]	; (8010010 <_dtoa_r+0x328>)
 800fdaa:	0b09      	lsrs	r1, r1, #12
 800fdac:	430b      	orrs	r3, r1
 800fdae:	4999      	ldr	r1, [pc, #612]	; (8010014 <_dtoa_r+0x32c>)
 800fdb0:	1857      	adds	r7, r2, r1
 800fdb2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fdb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fdb6:	0019      	movs	r1, r3
 800fdb8:	2200      	movs	r2, #0
 800fdba:	4b97      	ldr	r3, [pc, #604]	; (8010018 <_dtoa_r+0x330>)
 800fdbc:	f7f1 ff18 	bl	8001bf0 <__aeabi_dsub>
 800fdc0:	4a96      	ldr	r2, [pc, #600]	; (801001c <_dtoa_r+0x334>)
 800fdc2:	4b97      	ldr	r3, [pc, #604]	; (8010020 <_dtoa_r+0x338>)
 800fdc4:	f7f1 fc52 	bl	800166c <__aeabi_dmul>
 800fdc8:	4a96      	ldr	r2, [pc, #600]	; (8010024 <_dtoa_r+0x33c>)
 800fdca:	4b97      	ldr	r3, [pc, #604]	; (8010028 <_dtoa_r+0x340>)
 800fdcc:	f7f0 fcf4 	bl	80007b8 <__aeabi_dadd>
 800fdd0:	0004      	movs	r4, r0
 800fdd2:	0038      	movs	r0, r7
 800fdd4:	000d      	movs	r5, r1
 800fdd6:	f7f2 fae1 	bl	800239c <__aeabi_i2d>
 800fdda:	4a94      	ldr	r2, [pc, #592]	; (801002c <_dtoa_r+0x344>)
 800fddc:	4b94      	ldr	r3, [pc, #592]	; (8010030 <_dtoa_r+0x348>)
 800fdde:	f7f1 fc45 	bl	800166c <__aeabi_dmul>
 800fde2:	0002      	movs	r2, r0
 800fde4:	000b      	movs	r3, r1
 800fde6:	0020      	movs	r0, r4
 800fde8:	0029      	movs	r1, r5
 800fdea:	f7f0 fce5 	bl	80007b8 <__aeabi_dadd>
 800fdee:	0004      	movs	r4, r0
 800fdf0:	000d      	movs	r5, r1
 800fdf2:	f7f2 fa9d 	bl	8002330 <__aeabi_d2iz>
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	9003      	str	r0, [sp, #12]
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	0020      	movs	r0, r4
 800fdfe:	0029      	movs	r1, r5
 800fe00:	f7f0 fb28 	bl	8000454 <__aeabi_dcmplt>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d00b      	beq.n	800fe20 <_dtoa_r+0x138>
 800fe08:	9803      	ldr	r0, [sp, #12]
 800fe0a:	f7f2 fac7 	bl	800239c <__aeabi_i2d>
 800fe0e:	002b      	movs	r3, r5
 800fe10:	0022      	movs	r2, r4
 800fe12:	f7f0 fb19 	bl	8000448 <__aeabi_dcmpeq>
 800fe16:	4243      	negs	r3, r0
 800fe18:	4158      	adcs	r0, r3
 800fe1a:	9b03      	ldr	r3, [sp, #12]
 800fe1c:	1a1b      	subs	r3, r3, r0
 800fe1e:	9303      	str	r3, [sp, #12]
 800fe20:	2301      	movs	r3, #1
 800fe22:	9316      	str	r3, [sp, #88]	; 0x58
 800fe24:	9b03      	ldr	r3, [sp, #12]
 800fe26:	2b16      	cmp	r3, #22
 800fe28:	d810      	bhi.n	800fe4c <_dtoa_r+0x164>
 800fe2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fe2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fe2e:	9a03      	ldr	r2, [sp, #12]
 800fe30:	4b80      	ldr	r3, [pc, #512]	; (8010034 <_dtoa_r+0x34c>)
 800fe32:	00d2      	lsls	r2, r2, #3
 800fe34:	189b      	adds	r3, r3, r2
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	f7f0 fb0b 	bl	8000454 <__aeabi_dcmplt>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d047      	beq.n	800fed2 <_dtoa_r+0x1ea>
 800fe42:	9b03      	ldr	r3, [sp, #12]
 800fe44:	3b01      	subs	r3, #1
 800fe46:	9303      	str	r3, [sp, #12]
 800fe48:	2300      	movs	r3, #0
 800fe4a:	9316      	str	r3, [sp, #88]	; 0x58
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fe50:	920a      	str	r2, [sp, #40]	; 0x28
 800fe52:	1bdb      	subs	r3, r3, r7
 800fe54:	1e5a      	subs	r2, r3, #1
 800fe56:	d53e      	bpl.n	800fed6 <_dtoa_r+0x1ee>
 800fe58:	2201      	movs	r2, #1
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	930a      	str	r3, [sp, #40]	; 0x28
 800fe5e:	2300      	movs	r3, #0
 800fe60:	930c      	str	r3, [sp, #48]	; 0x30
 800fe62:	9b03      	ldr	r3, [sp, #12]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	db38      	blt.n	800feda <_dtoa_r+0x1f2>
 800fe68:	9a03      	ldr	r2, [sp, #12]
 800fe6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe6c:	4694      	mov	ip, r2
 800fe6e:	4463      	add	r3, ip
 800fe70:	930c      	str	r3, [sp, #48]	; 0x30
 800fe72:	2300      	movs	r3, #0
 800fe74:	9213      	str	r2, [sp, #76]	; 0x4c
 800fe76:	930d      	str	r3, [sp, #52]	; 0x34
 800fe78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe7a:	2401      	movs	r4, #1
 800fe7c:	2b09      	cmp	r3, #9
 800fe7e:	d867      	bhi.n	800ff50 <_dtoa_r+0x268>
 800fe80:	2b05      	cmp	r3, #5
 800fe82:	dd02      	ble.n	800fe8a <_dtoa_r+0x1a2>
 800fe84:	2400      	movs	r4, #0
 800fe86:	3b04      	subs	r3, #4
 800fe88:	9322      	str	r3, [sp, #136]	; 0x88
 800fe8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe8c:	1e98      	subs	r0, r3, #2
 800fe8e:	2803      	cmp	r0, #3
 800fe90:	d867      	bhi.n	800ff62 <_dtoa_r+0x27a>
 800fe92:	f7f0 f93f 	bl	8000114 <__gnu_thumb1_case_uqi>
 800fe96:	3a2b      	.short	0x3a2b
 800fe98:	5b38      	.short	0x5b38
 800fe9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe9c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800fe9e:	18f6      	adds	r6, r6, r3
 800fea0:	4b65      	ldr	r3, [pc, #404]	; (8010038 <_dtoa_r+0x350>)
 800fea2:	18f2      	adds	r2, r6, r3
 800fea4:	2a20      	cmp	r2, #32
 800fea6:	dd0f      	ble.n	800fec8 <_dtoa_r+0x1e0>
 800fea8:	2340      	movs	r3, #64	; 0x40
 800feaa:	1a9b      	subs	r3, r3, r2
 800feac:	409f      	lsls	r7, r3
 800feae:	4b63      	ldr	r3, [pc, #396]	; (801003c <_dtoa_r+0x354>)
 800feb0:	0038      	movs	r0, r7
 800feb2:	18f3      	adds	r3, r6, r3
 800feb4:	40dc      	lsrs	r4, r3
 800feb6:	4320      	orrs	r0, r4
 800feb8:	f7f2 faa0 	bl	80023fc <__aeabi_ui2d>
 800febc:	2201      	movs	r2, #1
 800febe:	4b60      	ldr	r3, [pc, #384]	; (8010040 <_dtoa_r+0x358>)
 800fec0:	1e77      	subs	r7, r6, #1
 800fec2:	18cb      	adds	r3, r1, r3
 800fec4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fec6:	e776      	b.n	800fdb6 <_dtoa_r+0xce>
 800fec8:	2320      	movs	r3, #32
 800feca:	0020      	movs	r0, r4
 800fecc:	1a9b      	subs	r3, r3, r2
 800fece:	4098      	lsls	r0, r3
 800fed0:	e7f2      	b.n	800feb8 <_dtoa_r+0x1d0>
 800fed2:	9016      	str	r0, [sp, #88]	; 0x58
 800fed4:	e7ba      	b.n	800fe4c <_dtoa_r+0x164>
 800fed6:	920c      	str	r2, [sp, #48]	; 0x30
 800fed8:	e7c3      	b.n	800fe62 <_dtoa_r+0x17a>
 800feda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fedc:	9a03      	ldr	r2, [sp, #12]
 800fede:	1a9b      	subs	r3, r3, r2
 800fee0:	930a      	str	r3, [sp, #40]	; 0x28
 800fee2:	4253      	negs	r3, r2
 800fee4:	930d      	str	r3, [sp, #52]	; 0x34
 800fee6:	2300      	movs	r3, #0
 800fee8:	9313      	str	r3, [sp, #76]	; 0x4c
 800feea:	e7c5      	b.n	800fe78 <_dtoa_r+0x190>
 800feec:	2300      	movs	r3, #0
 800feee:	930f      	str	r3, [sp, #60]	; 0x3c
 800fef0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fef2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fef4:	9307      	str	r3, [sp, #28]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	dc13      	bgt.n	800ff22 <_dtoa_r+0x23a>
 800fefa:	2301      	movs	r3, #1
 800fefc:	001a      	movs	r2, r3
 800fefe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff00:	9307      	str	r3, [sp, #28]
 800ff02:	9223      	str	r2, [sp, #140]	; 0x8c
 800ff04:	e00d      	b.n	800ff22 <_dtoa_r+0x23a>
 800ff06:	2301      	movs	r3, #1
 800ff08:	e7f1      	b.n	800feee <_dtoa_r+0x206>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ff0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff10:	4694      	mov	ip, r2
 800ff12:	9b03      	ldr	r3, [sp, #12]
 800ff14:	4463      	add	r3, ip
 800ff16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff18:	3301      	adds	r3, #1
 800ff1a:	9307      	str	r3, [sp, #28]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	dc00      	bgt.n	800ff22 <_dtoa_r+0x23a>
 800ff20:	2301      	movs	r3, #1
 800ff22:	2100      	movs	r1, #0
 800ff24:	2204      	movs	r2, #4
 800ff26:	0010      	movs	r0, r2
 800ff28:	3014      	adds	r0, #20
 800ff2a:	4298      	cmp	r0, r3
 800ff2c:	d91d      	bls.n	800ff6a <_dtoa_r+0x282>
 800ff2e:	9b04      	ldr	r3, [sp, #16]
 800ff30:	0018      	movs	r0, r3
 800ff32:	63d9      	str	r1, [r3, #60]	; 0x3c
 800ff34:	f7fc fb18 	bl	800c568 <_Balloc>
 800ff38:	9006      	str	r0, [sp, #24]
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d118      	bne.n	800ff70 <_dtoa_r+0x288>
 800ff3e:	21b0      	movs	r1, #176	; 0xb0
 800ff40:	4b40      	ldr	r3, [pc, #256]	; (8010044 <_dtoa_r+0x35c>)
 800ff42:	4841      	ldr	r0, [pc, #260]	; (8010048 <_dtoa_r+0x360>)
 800ff44:	9a06      	ldr	r2, [sp, #24]
 800ff46:	31ff      	adds	r1, #255	; 0xff
 800ff48:	f7ff fdd2 	bl	800faf0 <__assert_func>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e7dd      	b.n	800ff0c <_dtoa_r+0x224>
 800ff50:	2300      	movs	r3, #0
 800ff52:	940f      	str	r4, [sp, #60]	; 0x3c
 800ff54:	9322      	str	r3, [sp, #136]	; 0x88
 800ff56:	3b01      	subs	r3, #1
 800ff58:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff5a:	9307      	str	r3, [sp, #28]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	3313      	adds	r3, #19
 800ff60:	e7cf      	b.n	800ff02 <_dtoa_r+0x21a>
 800ff62:	2301      	movs	r3, #1
 800ff64:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff66:	3b02      	subs	r3, #2
 800ff68:	e7f6      	b.n	800ff58 <_dtoa_r+0x270>
 800ff6a:	3101      	adds	r1, #1
 800ff6c:	0052      	lsls	r2, r2, #1
 800ff6e:	e7da      	b.n	800ff26 <_dtoa_r+0x23e>
 800ff70:	9b04      	ldr	r3, [sp, #16]
 800ff72:	9a06      	ldr	r2, [sp, #24]
 800ff74:	639a      	str	r2, [r3, #56]	; 0x38
 800ff76:	9b07      	ldr	r3, [sp, #28]
 800ff78:	2b0e      	cmp	r3, #14
 800ff7a:	d900      	bls.n	800ff7e <_dtoa_r+0x296>
 800ff7c:	e0e3      	b.n	8010146 <_dtoa_r+0x45e>
 800ff7e:	2c00      	cmp	r4, #0
 800ff80:	d100      	bne.n	800ff84 <_dtoa_r+0x29c>
 800ff82:	e0e0      	b.n	8010146 <_dtoa_r+0x45e>
 800ff84:	9b03      	ldr	r3, [sp, #12]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	dd62      	ble.n	8010050 <_dtoa_r+0x368>
 800ff8a:	210f      	movs	r1, #15
 800ff8c:	9a03      	ldr	r2, [sp, #12]
 800ff8e:	4b29      	ldr	r3, [pc, #164]	; (8010034 <_dtoa_r+0x34c>)
 800ff90:	400a      	ands	r2, r1
 800ff92:	00d2      	lsls	r2, r2, #3
 800ff94:	189b      	adds	r3, r3, r2
 800ff96:	681e      	ldr	r6, [r3, #0]
 800ff98:	685f      	ldr	r7, [r3, #4]
 800ff9a:	9b03      	ldr	r3, [sp, #12]
 800ff9c:	2402      	movs	r4, #2
 800ff9e:	111d      	asrs	r5, r3, #4
 800ffa0:	05db      	lsls	r3, r3, #23
 800ffa2:	d50a      	bpl.n	800ffba <_dtoa_r+0x2d2>
 800ffa4:	4b29      	ldr	r3, [pc, #164]	; (801004c <_dtoa_r+0x364>)
 800ffa6:	400d      	ands	r5, r1
 800ffa8:	6a1a      	ldr	r2, [r3, #32]
 800ffaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ffae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ffb0:	f7f0 ff62 	bl	8000e78 <__aeabi_ddiv>
 800ffb4:	9008      	str	r0, [sp, #32]
 800ffb6:	9109      	str	r1, [sp, #36]	; 0x24
 800ffb8:	3401      	adds	r4, #1
 800ffba:	4b24      	ldr	r3, [pc, #144]	; (801004c <_dtoa_r+0x364>)
 800ffbc:	930e      	str	r3, [sp, #56]	; 0x38
 800ffbe:	2d00      	cmp	r5, #0
 800ffc0:	d108      	bne.n	800ffd4 <_dtoa_r+0x2ec>
 800ffc2:	9808      	ldr	r0, [sp, #32]
 800ffc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffc6:	0032      	movs	r2, r6
 800ffc8:	003b      	movs	r3, r7
 800ffca:	f7f0 ff55 	bl	8000e78 <__aeabi_ddiv>
 800ffce:	9008      	str	r0, [sp, #32]
 800ffd0:	9109      	str	r1, [sp, #36]	; 0x24
 800ffd2:	e058      	b.n	8010086 <_dtoa_r+0x39e>
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	421d      	tst	r5, r3
 800ffd8:	d009      	beq.n	800ffee <_dtoa_r+0x306>
 800ffda:	18e4      	adds	r4, r4, r3
 800ffdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffde:	0030      	movs	r0, r6
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	0039      	movs	r1, r7
 800ffe6:	f7f1 fb41 	bl	800166c <__aeabi_dmul>
 800ffea:	0006      	movs	r6, r0
 800ffec:	000f      	movs	r7, r1
 800ffee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fff0:	106d      	asrs	r5, r5, #1
 800fff2:	3308      	adds	r3, #8
 800fff4:	e7e2      	b.n	800ffbc <_dtoa_r+0x2d4>
 800fff6:	46c0      	nop			; (mov r8, r8)
 800fff8:	7ff00000 	.word	0x7ff00000
 800fffc:	0000270f 	.word	0x0000270f
 8010000:	0801433d 	.word	0x0801433d
 8010004:	08014340 	.word	0x08014340
 8010008:	080142ae 	.word	0x080142ae
 801000c:	080142af 	.word	0x080142af
 8010010:	3ff00000 	.word	0x3ff00000
 8010014:	fffffc01 	.word	0xfffffc01
 8010018:	3ff80000 	.word	0x3ff80000
 801001c:	636f4361 	.word	0x636f4361
 8010020:	3fd287a7 	.word	0x3fd287a7
 8010024:	8b60c8b3 	.word	0x8b60c8b3
 8010028:	3fc68a28 	.word	0x3fc68a28
 801002c:	509f79fb 	.word	0x509f79fb
 8010030:	3fd34413 	.word	0x3fd34413
 8010034:	080141a8 	.word	0x080141a8
 8010038:	00000432 	.word	0x00000432
 801003c:	00000412 	.word	0x00000412
 8010040:	fe100000 	.word	0xfe100000
 8010044:	080140b1 	.word	0x080140b1
 8010048:	08014341 	.word	0x08014341
 801004c:	08014180 	.word	0x08014180
 8010050:	9b03      	ldr	r3, [sp, #12]
 8010052:	2402      	movs	r4, #2
 8010054:	2b00      	cmp	r3, #0
 8010056:	d016      	beq.n	8010086 <_dtoa_r+0x39e>
 8010058:	9810      	ldr	r0, [sp, #64]	; 0x40
 801005a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801005c:	220f      	movs	r2, #15
 801005e:	425d      	negs	r5, r3
 8010060:	402a      	ands	r2, r5
 8010062:	4bdd      	ldr	r3, [pc, #884]	; (80103d8 <_dtoa_r+0x6f0>)
 8010064:	00d2      	lsls	r2, r2, #3
 8010066:	189b      	adds	r3, r3, r2
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	f7f1 fafe 	bl	800166c <__aeabi_dmul>
 8010070:	2701      	movs	r7, #1
 8010072:	2300      	movs	r3, #0
 8010074:	9008      	str	r0, [sp, #32]
 8010076:	9109      	str	r1, [sp, #36]	; 0x24
 8010078:	4ed8      	ldr	r6, [pc, #864]	; (80103dc <_dtoa_r+0x6f4>)
 801007a:	112d      	asrs	r5, r5, #4
 801007c:	2d00      	cmp	r5, #0
 801007e:	d000      	beq.n	8010082 <_dtoa_r+0x39a>
 8010080:	e091      	b.n	80101a6 <_dtoa_r+0x4be>
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1a3      	bne.n	800ffce <_dtoa_r+0x2e6>
 8010086:	9e08      	ldr	r6, [sp, #32]
 8010088:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801008a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801008c:	2b00      	cmp	r3, #0
 801008e:	d100      	bne.n	8010092 <_dtoa_r+0x3aa>
 8010090:	e094      	b.n	80101bc <_dtoa_r+0x4d4>
 8010092:	2200      	movs	r2, #0
 8010094:	0030      	movs	r0, r6
 8010096:	0039      	movs	r1, r7
 8010098:	4bd1      	ldr	r3, [pc, #836]	; (80103e0 <_dtoa_r+0x6f8>)
 801009a:	f7f0 f9db 	bl	8000454 <__aeabi_dcmplt>
 801009e:	2800      	cmp	r0, #0
 80100a0:	d100      	bne.n	80100a4 <_dtoa_r+0x3bc>
 80100a2:	e08b      	b.n	80101bc <_dtoa_r+0x4d4>
 80100a4:	9b07      	ldr	r3, [sp, #28]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d100      	bne.n	80100ac <_dtoa_r+0x3c4>
 80100aa:	e087      	b.n	80101bc <_dtoa_r+0x4d4>
 80100ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	dd45      	ble.n	801013e <_dtoa_r+0x456>
 80100b2:	9b03      	ldr	r3, [sp, #12]
 80100b4:	2200      	movs	r2, #0
 80100b6:	3b01      	subs	r3, #1
 80100b8:	930e      	str	r3, [sp, #56]	; 0x38
 80100ba:	0030      	movs	r0, r6
 80100bc:	4bc9      	ldr	r3, [pc, #804]	; (80103e4 <_dtoa_r+0x6fc>)
 80100be:	0039      	movs	r1, r7
 80100c0:	f7f1 fad4 	bl	800166c <__aeabi_dmul>
 80100c4:	9008      	str	r0, [sp, #32]
 80100c6:	9109      	str	r1, [sp, #36]	; 0x24
 80100c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100ca:	3401      	adds	r4, #1
 80100cc:	0020      	movs	r0, r4
 80100ce:	9e08      	ldr	r6, [sp, #32]
 80100d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80100d2:	9312      	str	r3, [sp, #72]	; 0x48
 80100d4:	f7f2 f962 	bl	800239c <__aeabi_i2d>
 80100d8:	0032      	movs	r2, r6
 80100da:	003b      	movs	r3, r7
 80100dc:	f7f1 fac6 	bl	800166c <__aeabi_dmul>
 80100e0:	2200      	movs	r2, #0
 80100e2:	4bc1      	ldr	r3, [pc, #772]	; (80103e8 <_dtoa_r+0x700>)
 80100e4:	f7f0 fb68 	bl	80007b8 <__aeabi_dadd>
 80100e8:	4ac0      	ldr	r2, [pc, #768]	; (80103ec <_dtoa_r+0x704>)
 80100ea:	9014      	str	r0, [sp, #80]	; 0x50
 80100ec:	9115      	str	r1, [sp, #84]	; 0x54
 80100ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80100f2:	4694      	mov	ip, r2
 80100f4:	9308      	str	r3, [sp, #32]
 80100f6:	9409      	str	r4, [sp, #36]	; 0x24
 80100f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100fa:	4463      	add	r3, ip
 80100fc:	9318      	str	r3, [sp, #96]	; 0x60
 80100fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010100:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010102:	2b00      	cmp	r3, #0
 8010104:	d15e      	bne.n	80101c4 <_dtoa_r+0x4dc>
 8010106:	2200      	movs	r2, #0
 8010108:	4bb9      	ldr	r3, [pc, #740]	; (80103f0 <_dtoa_r+0x708>)
 801010a:	0030      	movs	r0, r6
 801010c:	0039      	movs	r1, r7
 801010e:	f7f1 fd6f 	bl	8001bf0 <__aeabi_dsub>
 8010112:	9a08      	ldr	r2, [sp, #32]
 8010114:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010116:	0004      	movs	r4, r0
 8010118:	000d      	movs	r5, r1
 801011a:	f7f0 f9af 	bl	800047c <__aeabi_dcmpgt>
 801011e:	2800      	cmp	r0, #0
 8010120:	d000      	beq.n	8010124 <_dtoa_r+0x43c>
 8010122:	e2b3      	b.n	801068c <_dtoa_r+0x9a4>
 8010124:	48b3      	ldr	r0, [pc, #716]	; (80103f4 <_dtoa_r+0x70c>)
 8010126:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010128:	4684      	mov	ip, r0
 801012a:	4461      	add	r1, ip
 801012c:	000b      	movs	r3, r1
 801012e:	0020      	movs	r0, r4
 8010130:	0029      	movs	r1, r5
 8010132:	9a08      	ldr	r2, [sp, #32]
 8010134:	f7f0 f98e 	bl	8000454 <__aeabi_dcmplt>
 8010138:	2800      	cmp	r0, #0
 801013a:	d000      	beq.n	801013e <_dtoa_r+0x456>
 801013c:	e2a3      	b.n	8010686 <_dtoa_r+0x99e>
 801013e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010140:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010142:	9308      	str	r3, [sp, #32]
 8010144:	9409      	str	r4, [sp, #36]	; 0x24
 8010146:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010148:	2b00      	cmp	r3, #0
 801014a:	da00      	bge.n	801014e <_dtoa_r+0x466>
 801014c:	e179      	b.n	8010442 <_dtoa_r+0x75a>
 801014e:	9a03      	ldr	r2, [sp, #12]
 8010150:	2a0e      	cmp	r2, #14
 8010152:	dd00      	ble.n	8010156 <_dtoa_r+0x46e>
 8010154:	e175      	b.n	8010442 <_dtoa_r+0x75a>
 8010156:	4ba0      	ldr	r3, [pc, #640]	; (80103d8 <_dtoa_r+0x6f0>)
 8010158:	00d2      	lsls	r2, r2, #3
 801015a:	189b      	adds	r3, r3, r2
 801015c:	681e      	ldr	r6, [r3, #0]
 801015e:	685f      	ldr	r7, [r3, #4]
 8010160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010162:	2b00      	cmp	r3, #0
 8010164:	db00      	blt.n	8010168 <_dtoa_r+0x480>
 8010166:	e0e5      	b.n	8010334 <_dtoa_r+0x64c>
 8010168:	9b07      	ldr	r3, [sp, #28]
 801016a:	2b00      	cmp	r3, #0
 801016c:	dd00      	ble.n	8010170 <_dtoa_r+0x488>
 801016e:	e0e1      	b.n	8010334 <_dtoa_r+0x64c>
 8010170:	d000      	beq.n	8010174 <_dtoa_r+0x48c>
 8010172:	e288      	b.n	8010686 <_dtoa_r+0x99e>
 8010174:	2200      	movs	r2, #0
 8010176:	0030      	movs	r0, r6
 8010178:	0039      	movs	r1, r7
 801017a:	4b9d      	ldr	r3, [pc, #628]	; (80103f0 <_dtoa_r+0x708>)
 801017c:	f7f1 fa76 	bl	800166c <__aeabi_dmul>
 8010180:	9a08      	ldr	r2, [sp, #32]
 8010182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010184:	f7f0 f984 	bl	8000490 <__aeabi_dcmpge>
 8010188:	9e07      	ldr	r6, [sp, #28]
 801018a:	0037      	movs	r7, r6
 801018c:	2800      	cmp	r0, #0
 801018e:	d000      	beq.n	8010192 <_dtoa_r+0x4aa>
 8010190:	e25f      	b.n	8010652 <_dtoa_r+0x96a>
 8010192:	9b06      	ldr	r3, [sp, #24]
 8010194:	9a06      	ldr	r2, [sp, #24]
 8010196:	3301      	adds	r3, #1
 8010198:	9308      	str	r3, [sp, #32]
 801019a:	2331      	movs	r3, #49	; 0x31
 801019c:	7013      	strb	r3, [r2, #0]
 801019e:	9b03      	ldr	r3, [sp, #12]
 80101a0:	3301      	adds	r3, #1
 80101a2:	9303      	str	r3, [sp, #12]
 80101a4:	e25a      	b.n	801065c <_dtoa_r+0x974>
 80101a6:	423d      	tst	r5, r7
 80101a8:	d005      	beq.n	80101b6 <_dtoa_r+0x4ce>
 80101aa:	6832      	ldr	r2, [r6, #0]
 80101ac:	6873      	ldr	r3, [r6, #4]
 80101ae:	f7f1 fa5d 	bl	800166c <__aeabi_dmul>
 80101b2:	003b      	movs	r3, r7
 80101b4:	3401      	adds	r4, #1
 80101b6:	106d      	asrs	r5, r5, #1
 80101b8:	3608      	adds	r6, #8
 80101ba:	e75f      	b.n	801007c <_dtoa_r+0x394>
 80101bc:	9b03      	ldr	r3, [sp, #12]
 80101be:	930e      	str	r3, [sp, #56]	; 0x38
 80101c0:	9b07      	ldr	r3, [sp, #28]
 80101c2:	e783      	b.n	80100cc <_dtoa_r+0x3e4>
 80101c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80101c6:	4b84      	ldr	r3, [pc, #528]	; (80103d8 <_dtoa_r+0x6f0>)
 80101c8:	3a01      	subs	r2, #1
 80101ca:	00d2      	lsls	r2, r2, #3
 80101cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80101ce:	189b      	adds	r3, r3, r2
 80101d0:	9c08      	ldr	r4, [sp, #32]
 80101d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	2900      	cmp	r1, #0
 80101da:	d051      	beq.n	8010280 <_dtoa_r+0x598>
 80101dc:	2000      	movs	r0, #0
 80101de:	4986      	ldr	r1, [pc, #536]	; (80103f8 <_dtoa_r+0x710>)
 80101e0:	f7f0 fe4a 	bl	8000e78 <__aeabi_ddiv>
 80101e4:	0022      	movs	r2, r4
 80101e6:	002b      	movs	r3, r5
 80101e8:	f7f1 fd02 	bl	8001bf0 <__aeabi_dsub>
 80101ec:	9a06      	ldr	r2, [sp, #24]
 80101ee:	0004      	movs	r4, r0
 80101f0:	4694      	mov	ip, r2
 80101f2:	000d      	movs	r5, r1
 80101f4:	9b06      	ldr	r3, [sp, #24]
 80101f6:	9314      	str	r3, [sp, #80]	; 0x50
 80101f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101fa:	4463      	add	r3, ip
 80101fc:	9318      	str	r3, [sp, #96]	; 0x60
 80101fe:	0039      	movs	r1, r7
 8010200:	0030      	movs	r0, r6
 8010202:	f7f2 f895 	bl	8002330 <__aeabi_d2iz>
 8010206:	9012      	str	r0, [sp, #72]	; 0x48
 8010208:	f7f2 f8c8 	bl	800239c <__aeabi_i2d>
 801020c:	0002      	movs	r2, r0
 801020e:	000b      	movs	r3, r1
 8010210:	0030      	movs	r0, r6
 8010212:	0039      	movs	r1, r7
 8010214:	f7f1 fcec 	bl	8001bf0 <__aeabi_dsub>
 8010218:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801021a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801021c:	3301      	adds	r3, #1
 801021e:	9308      	str	r3, [sp, #32]
 8010220:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010222:	0006      	movs	r6, r0
 8010224:	3330      	adds	r3, #48	; 0x30
 8010226:	7013      	strb	r3, [r2, #0]
 8010228:	0022      	movs	r2, r4
 801022a:	002b      	movs	r3, r5
 801022c:	000f      	movs	r7, r1
 801022e:	f7f0 f911 	bl	8000454 <__aeabi_dcmplt>
 8010232:	2800      	cmp	r0, #0
 8010234:	d174      	bne.n	8010320 <_dtoa_r+0x638>
 8010236:	0032      	movs	r2, r6
 8010238:	003b      	movs	r3, r7
 801023a:	2000      	movs	r0, #0
 801023c:	4968      	ldr	r1, [pc, #416]	; (80103e0 <_dtoa_r+0x6f8>)
 801023e:	f7f1 fcd7 	bl	8001bf0 <__aeabi_dsub>
 8010242:	0022      	movs	r2, r4
 8010244:	002b      	movs	r3, r5
 8010246:	f7f0 f905 	bl	8000454 <__aeabi_dcmplt>
 801024a:	2800      	cmp	r0, #0
 801024c:	d000      	beq.n	8010250 <_dtoa_r+0x568>
 801024e:	e0d7      	b.n	8010400 <_dtoa_r+0x718>
 8010250:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010252:	9a08      	ldr	r2, [sp, #32]
 8010254:	4293      	cmp	r3, r2
 8010256:	d100      	bne.n	801025a <_dtoa_r+0x572>
 8010258:	e771      	b.n	801013e <_dtoa_r+0x456>
 801025a:	2200      	movs	r2, #0
 801025c:	0020      	movs	r0, r4
 801025e:	0029      	movs	r1, r5
 8010260:	4b60      	ldr	r3, [pc, #384]	; (80103e4 <_dtoa_r+0x6fc>)
 8010262:	f7f1 fa03 	bl	800166c <__aeabi_dmul>
 8010266:	4b5f      	ldr	r3, [pc, #380]	; (80103e4 <_dtoa_r+0x6fc>)
 8010268:	0004      	movs	r4, r0
 801026a:	000d      	movs	r5, r1
 801026c:	0030      	movs	r0, r6
 801026e:	0039      	movs	r1, r7
 8010270:	2200      	movs	r2, #0
 8010272:	f7f1 f9fb 	bl	800166c <__aeabi_dmul>
 8010276:	9b08      	ldr	r3, [sp, #32]
 8010278:	0006      	movs	r6, r0
 801027a:	000f      	movs	r7, r1
 801027c:	9314      	str	r3, [sp, #80]	; 0x50
 801027e:	e7be      	b.n	80101fe <_dtoa_r+0x516>
 8010280:	0020      	movs	r0, r4
 8010282:	0029      	movs	r1, r5
 8010284:	f7f1 f9f2 	bl	800166c <__aeabi_dmul>
 8010288:	9a06      	ldr	r2, [sp, #24]
 801028a:	9b06      	ldr	r3, [sp, #24]
 801028c:	4694      	mov	ip, r2
 801028e:	9308      	str	r3, [sp, #32]
 8010290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010292:	9014      	str	r0, [sp, #80]	; 0x50
 8010294:	9115      	str	r1, [sp, #84]	; 0x54
 8010296:	4463      	add	r3, ip
 8010298:	9319      	str	r3, [sp, #100]	; 0x64
 801029a:	0030      	movs	r0, r6
 801029c:	0039      	movs	r1, r7
 801029e:	f7f2 f847 	bl	8002330 <__aeabi_d2iz>
 80102a2:	9018      	str	r0, [sp, #96]	; 0x60
 80102a4:	f7f2 f87a 	bl	800239c <__aeabi_i2d>
 80102a8:	0002      	movs	r2, r0
 80102aa:	000b      	movs	r3, r1
 80102ac:	0030      	movs	r0, r6
 80102ae:	0039      	movs	r1, r7
 80102b0:	f7f1 fc9e 	bl	8001bf0 <__aeabi_dsub>
 80102b4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80102b6:	9b08      	ldr	r3, [sp, #32]
 80102b8:	3630      	adds	r6, #48	; 0x30
 80102ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80102bc:	701e      	strb	r6, [r3, #0]
 80102be:	3301      	adds	r3, #1
 80102c0:	0004      	movs	r4, r0
 80102c2:	000d      	movs	r5, r1
 80102c4:	9308      	str	r3, [sp, #32]
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d12d      	bne.n	8010326 <_dtoa_r+0x63e>
 80102ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 80102cc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80102ce:	9a06      	ldr	r2, [sp, #24]
 80102d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80102d2:	4694      	mov	ip, r2
 80102d4:	4463      	add	r3, ip
 80102d6:	2200      	movs	r2, #0
 80102d8:	9308      	str	r3, [sp, #32]
 80102da:	4b47      	ldr	r3, [pc, #284]	; (80103f8 <_dtoa_r+0x710>)
 80102dc:	f7f0 fa6c 	bl	80007b8 <__aeabi_dadd>
 80102e0:	0002      	movs	r2, r0
 80102e2:	000b      	movs	r3, r1
 80102e4:	0020      	movs	r0, r4
 80102e6:	0029      	movs	r1, r5
 80102e8:	f7f0 f8c8 	bl	800047c <__aeabi_dcmpgt>
 80102ec:	2800      	cmp	r0, #0
 80102ee:	d000      	beq.n	80102f2 <_dtoa_r+0x60a>
 80102f0:	e086      	b.n	8010400 <_dtoa_r+0x718>
 80102f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80102f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102f6:	2000      	movs	r0, #0
 80102f8:	493f      	ldr	r1, [pc, #252]	; (80103f8 <_dtoa_r+0x710>)
 80102fa:	f7f1 fc79 	bl	8001bf0 <__aeabi_dsub>
 80102fe:	0002      	movs	r2, r0
 8010300:	000b      	movs	r3, r1
 8010302:	0020      	movs	r0, r4
 8010304:	0029      	movs	r1, r5
 8010306:	f7f0 f8a5 	bl	8000454 <__aeabi_dcmplt>
 801030a:	2800      	cmp	r0, #0
 801030c:	d100      	bne.n	8010310 <_dtoa_r+0x628>
 801030e:	e716      	b.n	801013e <_dtoa_r+0x456>
 8010310:	9b08      	ldr	r3, [sp, #32]
 8010312:	001a      	movs	r2, r3
 8010314:	3a01      	subs	r2, #1
 8010316:	9208      	str	r2, [sp, #32]
 8010318:	7812      	ldrb	r2, [r2, #0]
 801031a:	2a30      	cmp	r2, #48	; 0x30
 801031c:	d0f8      	beq.n	8010310 <_dtoa_r+0x628>
 801031e:	9308      	str	r3, [sp, #32]
 8010320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010322:	9303      	str	r3, [sp, #12]
 8010324:	e046      	b.n	80103b4 <_dtoa_r+0x6cc>
 8010326:	2200      	movs	r2, #0
 8010328:	4b2e      	ldr	r3, [pc, #184]	; (80103e4 <_dtoa_r+0x6fc>)
 801032a:	f7f1 f99f 	bl	800166c <__aeabi_dmul>
 801032e:	0006      	movs	r6, r0
 8010330:	000f      	movs	r7, r1
 8010332:	e7b2      	b.n	801029a <_dtoa_r+0x5b2>
 8010334:	9b06      	ldr	r3, [sp, #24]
 8010336:	9a06      	ldr	r2, [sp, #24]
 8010338:	930a      	str	r3, [sp, #40]	; 0x28
 801033a:	9b07      	ldr	r3, [sp, #28]
 801033c:	9c08      	ldr	r4, [sp, #32]
 801033e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010340:	3b01      	subs	r3, #1
 8010342:	189b      	adds	r3, r3, r2
 8010344:	930b      	str	r3, [sp, #44]	; 0x2c
 8010346:	0032      	movs	r2, r6
 8010348:	003b      	movs	r3, r7
 801034a:	0020      	movs	r0, r4
 801034c:	0029      	movs	r1, r5
 801034e:	f7f0 fd93 	bl	8000e78 <__aeabi_ddiv>
 8010352:	f7f1 ffed 	bl	8002330 <__aeabi_d2iz>
 8010356:	9007      	str	r0, [sp, #28]
 8010358:	f7f2 f820 	bl	800239c <__aeabi_i2d>
 801035c:	0032      	movs	r2, r6
 801035e:	003b      	movs	r3, r7
 8010360:	f7f1 f984 	bl	800166c <__aeabi_dmul>
 8010364:	0002      	movs	r2, r0
 8010366:	000b      	movs	r3, r1
 8010368:	0020      	movs	r0, r4
 801036a:	0029      	movs	r1, r5
 801036c:	f7f1 fc40 	bl	8001bf0 <__aeabi_dsub>
 8010370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010372:	001a      	movs	r2, r3
 8010374:	3201      	adds	r2, #1
 8010376:	920a      	str	r2, [sp, #40]	; 0x28
 8010378:	9208      	str	r2, [sp, #32]
 801037a:	9a07      	ldr	r2, [sp, #28]
 801037c:	3230      	adds	r2, #48	; 0x30
 801037e:	701a      	strb	r2, [r3, #0]
 8010380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010382:	429a      	cmp	r2, r3
 8010384:	d14f      	bne.n	8010426 <_dtoa_r+0x73e>
 8010386:	0002      	movs	r2, r0
 8010388:	000b      	movs	r3, r1
 801038a:	f7f0 fa15 	bl	80007b8 <__aeabi_dadd>
 801038e:	0032      	movs	r2, r6
 8010390:	003b      	movs	r3, r7
 8010392:	0004      	movs	r4, r0
 8010394:	000d      	movs	r5, r1
 8010396:	f7f0 f871 	bl	800047c <__aeabi_dcmpgt>
 801039a:	2800      	cmp	r0, #0
 801039c:	d12e      	bne.n	80103fc <_dtoa_r+0x714>
 801039e:	0032      	movs	r2, r6
 80103a0:	003b      	movs	r3, r7
 80103a2:	0020      	movs	r0, r4
 80103a4:	0029      	movs	r1, r5
 80103a6:	f7f0 f84f 	bl	8000448 <__aeabi_dcmpeq>
 80103aa:	2800      	cmp	r0, #0
 80103ac:	d002      	beq.n	80103b4 <_dtoa_r+0x6cc>
 80103ae:	9b07      	ldr	r3, [sp, #28]
 80103b0:	07de      	lsls	r6, r3, #31
 80103b2:	d423      	bmi.n	80103fc <_dtoa_r+0x714>
 80103b4:	9905      	ldr	r1, [sp, #20]
 80103b6:	9804      	ldr	r0, [sp, #16]
 80103b8:	f7fc f8fe 	bl	800c5b8 <_Bfree>
 80103bc:	2300      	movs	r3, #0
 80103be:	9a08      	ldr	r2, [sp, #32]
 80103c0:	7013      	strb	r3, [r2, #0]
 80103c2:	9b03      	ldr	r3, [sp, #12]
 80103c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80103c6:	3301      	adds	r3, #1
 80103c8:	6013      	str	r3, [r2, #0]
 80103ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d100      	bne.n	80103d2 <_dtoa_r+0x6ea>
 80103d0:	e4bd      	b.n	800fd4e <_dtoa_r+0x66>
 80103d2:	9a08      	ldr	r2, [sp, #32]
 80103d4:	601a      	str	r2, [r3, #0]
 80103d6:	e4ba      	b.n	800fd4e <_dtoa_r+0x66>
 80103d8:	080141a8 	.word	0x080141a8
 80103dc:	08014180 	.word	0x08014180
 80103e0:	3ff00000 	.word	0x3ff00000
 80103e4:	40240000 	.word	0x40240000
 80103e8:	401c0000 	.word	0x401c0000
 80103ec:	fcc00000 	.word	0xfcc00000
 80103f0:	40140000 	.word	0x40140000
 80103f4:	7cc00000 	.word	0x7cc00000
 80103f8:	3fe00000 	.word	0x3fe00000
 80103fc:	9b03      	ldr	r3, [sp, #12]
 80103fe:	930e      	str	r3, [sp, #56]	; 0x38
 8010400:	9b08      	ldr	r3, [sp, #32]
 8010402:	9308      	str	r3, [sp, #32]
 8010404:	3b01      	subs	r3, #1
 8010406:	781a      	ldrb	r2, [r3, #0]
 8010408:	2a39      	cmp	r2, #57	; 0x39
 801040a:	d108      	bne.n	801041e <_dtoa_r+0x736>
 801040c:	9a06      	ldr	r2, [sp, #24]
 801040e:	429a      	cmp	r2, r3
 8010410:	d1f7      	bne.n	8010402 <_dtoa_r+0x71a>
 8010412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010414:	9906      	ldr	r1, [sp, #24]
 8010416:	3201      	adds	r2, #1
 8010418:	920e      	str	r2, [sp, #56]	; 0x38
 801041a:	2230      	movs	r2, #48	; 0x30
 801041c:	700a      	strb	r2, [r1, #0]
 801041e:	781a      	ldrb	r2, [r3, #0]
 8010420:	3201      	adds	r2, #1
 8010422:	701a      	strb	r2, [r3, #0]
 8010424:	e77c      	b.n	8010320 <_dtoa_r+0x638>
 8010426:	2200      	movs	r2, #0
 8010428:	4ba9      	ldr	r3, [pc, #676]	; (80106d0 <_dtoa_r+0x9e8>)
 801042a:	f7f1 f91f 	bl	800166c <__aeabi_dmul>
 801042e:	2200      	movs	r2, #0
 8010430:	2300      	movs	r3, #0
 8010432:	0004      	movs	r4, r0
 8010434:	000d      	movs	r5, r1
 8010436:	f7f0 f807 	bl	8000448 <__aeabi_dcmpeq>
 801043a:	2800      	cmp	r0, #0
 801043c:	d100      	bne.n	8010440 <_dtoa_r+0x758>
 801043e:	e782      	b.n	8010346 <_dtoa_r+0x65e>
 8010440:	e7b8      	b.n	80103b4 <_dtoa_r+0x6cc>
 8010442:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010444:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010446:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010448:	2f00      	cmp	r7, #0
 801044a:	d012      	beq.n	8010472 <_dtoa_r+0x78a>
 801044c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801044e:	2a01      	cmp	r2, #1
 8010450:	dc6e      	bgt.n	8010530 <_dtoa_r+0x848>
 8010452:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010454:	2a00      	cmp	r2, #0
 8010456:	d065      	beq.n	8010524 <_dtoa_r+0x83c>
 8010458:	4a9e      	ldr	r2, [pc, #632]	; (80106d4 <_dtoa_r+0x9ec>)
 801045a:	189b      	adds	r3, r3, r2
 801045c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801045e:	2101      	movs	r1, #1
 8010460:	18d2      	adds	r2, r2, r3
 8010462:	920a      	str	r2, [sp, #40]	; 0x28
 8010464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010466:	9804      	ldr	r0, [sp, #16]
 8010468:	18d3      	adds	r3, r2, r3
 801046a:	930c      	str	r3, [sp, #48]	; 0x30
 801046c:	f7fc f986 	bl	800c77c <__i2b>
 8010470:	0007      	movs	r7, r0
 8010472:	2c00      	cmp	r4, #0
 8010474:	d00e      	beq.n	8010494 <_dtoa_r+0x7ac>
 8010476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010478:	2b00      	cmp	r3, #0
 801047a:	dd0b      	ble.n	8010494 <_dtoa_r+0x7ac>
 801047c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801047e:	0023      	movs	r3, r4
 8010480:	4294      	cmp	r4, r2
 8010482:	dd00      	ble.n	8010486 <_dtoa_r+0x79e>
 8010484:	0013      	movs	r3, r2
 8010486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010488:	1ae4      	subs	r4, r4, r3
 801048a:	1ad2      	subs	r2, r2, r3
 801048c:	920a      	str	r2, [sp, #40]	; 0x28
 801048e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010490:	1ad3      	subs	r3, r2, r3
 8010492:	930c      	str	r3, [sp, #48]	; 0x30
 8010494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010496:	2b00      	cmp	r3, #0
 8010498:	d01e      	beq.n	80104d8 <_dtoa_r+0x7f0>
 801049a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801049c:	2b00      	cmp	r3, #0
 801049e:	d05c      	beq.n	801055a <_dtoa_r+0x872>
 80104a0:	2d00      	cmp	r5, #0
 80104a2:	dd10      	ble.n	80104c6 <_dtoa_r+0x7de>
 80104a4:	0039      	movs	r1, r7
 80104a6:	002a      	movs	r2, r5
 80104a8:	9804      	ldr	r0, [sp, #16]
 80104aa:	f7fc fa2f 	bl	800c90c <__pow5mult>
 80104ae:	9a05      	ldr	r2, [sp, #20]
 80104b0:	0001      	movs	r1, r0
 80104b2:	0007      	movs	r7, r0
 80104b4:	9804      	ldr	r0, [sp, #16]
 80104b6:	f7fc f979 	bl	800c7ac <__multiply>
 80104ba:	0006      	movs	r6, r0
 80104bc:	9905      	ldr	r1, [sp, #20]
 80104be:	9804      	ldr	r0, [sp, #16]
 80104c0:	f7fc f87a 	bl	800c5b8 <_Bfree>
 80104c4:	9605      	str	r6, [sp, #20]
 80104c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104c8:	1b5a      	subs	r2, r3, r5
 80104ca:	42ab      	cmp	r3, r5
 80104cc:	d004      	beq.n	80104d8 <_dtoa_r+0x7f0>
 80104ce:	9905      	ldr	r1, [sp, #20]
 80104d0:	9804      	ldr	r0, [sp, #16]
 80104d2:	f7fc fa1b 	bl	800c90c <__pow5mult>
 80104d6:	9005      	str	r0, [sp, #20]
 80104d8:	2101      	movs	r1, #1
 80104da:	9804      	ldr	r0, [sp, #16]
 80104dc:	f7fc f94e 	bl	800c77c <__i2b>
 80104e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80104e2:	0006      	movs	r6, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	dd3a      	ble.n	801055e <_dtoa_r+0x876>
 80104e8:	001a      	movs	r2, r3
 80104ea:	0001      	movs	r1, r0
 80104ec:	9804      	ldr	r0, [sp, #16]
 80104ee:	f7fc fa0d 	bl	800c90c <__pow5mult>
 80104f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104f4:	0006      	movs	r6, r0
 80104f6:	2500      	movs	r5, #0
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	dc38      	bgt.n	801056e <_dtoa_r+0x886>
 80104fc:	2500      	movs	r5, #0
 80104fe:	9b08      	ldr	r3, [sp, #32]
 8010500:	42ab      	cmp	r3, r5
 8010502:	d130      	bne.n	8010566 <_dtoa_r+0x87e>
 8010504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010506:	031b      	lsls	r3, r3, #12
 8010508:	42ab      	cmp	r3, r5
 801050a:	d12c      	bne.n	8010566 <_dtoa_r+0x87e>
 801050c:	4b72      	ldr	r3, [pc, #456]	; (80106d8 <_dtoa_r+0x9f0>)
 801050e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010510:	4213      	tst	r3, r2
 8010512:	d028      	beq.n	8010566 <_dtoa_r+0x87e>
 8010514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010516:	3501      	adds	r5, #1
 8010518:	3301      	adds	r3, #1
 801051a:	930a      	str	r3, [sp, #40]	; 0x28
 801051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801051e:	3301      	adds	r3, #1
 8010520:	930c      	str	r3, [sp, #48]	; 0x30
 8010522:	e020      	b.n	8010566 <_dtoa_r+0x87e>
 8010524:	2336      	movs	r3, #54	; 0x36
 8010526:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010528:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801052a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801052c:	1a9b      	subs	r3, r3, r2
 801052e:	e795      	b.n	801045c <_dtoa_r+0x774>
 8010530:	9b07      	ldr	r3, [sp, #28]
 8010532:	1e5d      	subs	r5, r3, #1
 8010534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010536:	42ab      	cmp	r3, r5
 8010538:	db07      	blt.n	801054a <_dtoa_r+0x862>
 801053a:	1b5d      	subs	r5, r3, r5
 801053c:	9b07      	ldr	r3, [sp, #28]
 801053e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010540:	2b00      	cmp	r3, #0
 8010542:	da8b      	bge.n	801045c <_dtoa_r+0x774>
 8010544:	1ae4      	subs	r4, r4, r3
 8010546:	2300      	movs	r3, #0
 8010548:	e788      	b.n	801045c <_dtoa_r+0x774>
 801054a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801054c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801054e:	1aeb      	subs	r3, r5, r3
 8010550:	18d3      	adds	r3, r2, r3
 8010552:	950d      	str	r5, [sp, #52]	; 0x34
 8010554:	9313      	str	r3, [sp, #76]	; 0x4c
 8010556:	2500      	movs	r5, #0
 8010558:	e7f0      	b.n	801053c <_dtoa_r+0x854>
 801055a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801055c:	e7b7      	b.n	80104ce <_dtoa_r+0x7e6>
 801055e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010560:	2500      	movs	r5, #0
 8010562:	2b01      	cmp	r3, #1
 8010564:	ddca      	ble.n	80104fc <_dtoa_r+0x814>
 8010566:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010568:	2001      	movs	r0, #1
 801056a:	2b00      	cmp	r3, #0
 801056c:	d008      	beq.n	8010580 <_dtoa_r+0x898>
 801056e:	6933      	ldr	r3, [r6, #16]
 8010570:	3303      	adds	r3, #3
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	18f3      	adds	r3, r6, r3
 8010576:	6858      	ldr	r0, [r3, #4]
 8010578:	f7fc f8b8 	bl	800c6ec <__hi0bits>
 801057c:	2320      	movs	r3, #32
 801057e:	1a18      	subs	r0, r3, r0
 8010580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010582:	1818      	adds	r0, r3, r0
 8010584:	0002      	movs	r2, r0
 8010586:	231f      	movs	r3, #31
 8010588:	401a      	ands	r2, r3
 801058a:	4218      	tst	r0, r3
 801058c:	d047      	beq.n	801061e <_dtoa_r+0x936>
 801058e:	3301      	adds	r3, #1
 8010590:	1a9b      	subs	r3, r3, r2
 8010592:	2b04      	cmp	r3, #4
 8010594:	dd3f      	ble.n	8010616 <_dtoa_r+0x92e>
 8010596:	231c      	movs	r3, #28
 8010598:	1a9b      	subs	r3, r3, r2
 801059a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801059c:	18e4      	adds	r4, r4, r3
 801059e:	18d2      	adds	r2, r2, r3
 80105a0:	920a      	str	r2, [sp, #40]	; 0x28
 80105a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80105a4:	18d3      	adds	r3, r2, r3
 80105a6:	930c      	str	r3, [sp, #48]	; 0x30
 80105a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	dd05      	ble.n	80105ba <_dtoa_r+0x8d2>
 80105ae:	001a      	movs	r2, r3
 80105b0:	9905      	ldr	r1, [sp, #20]
 80105b2:	9804      	ldr	r0, [sp, #16]
 80105b4:	f7fc f9ec 	bl	800c990 <__lshift>
 80105b8:	9005      	str	r0, [sp, #20]
 80105ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105bc:	2b00      	cmp	r3, #0
 80105be:	dd05      	ble.n	80105cc <_dtoa_r+0x8e4>
 80105c0:	0031      	movs	r1, r6
 80105c2:	001a      	movs	r2, r3
 80105c4:	9804      	ldr	r0, [sp, #16]
 80105c6:	f7fc f9e3 	bl	800c990 <__lshift>
 80105ca:	0006      	movs	r6, r0
 80105cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d027      	beq.n	8010622 <_dtoa_r+0x93a>
 80105d2:	0031      	movs	r1, r6
 80105d4:	9805      	ldr	r0, [sp, #20]
 80105d6:	f7fc fa49 	bl	800ca6c <__mcmp>
 80105da:	2800      	cmp	r0, #0
 80105dc:	da21      	bge.n	8010622 <_dtoa_r+0x93a>
 80105de:	9b03      	ldr	r3, [sp, #12]
 80105e0:	220a      	movs	r2, #10
 80105e2:	3b01      	subs	r3, #1
 80105e4:	9303      	str	r3, [sp, #12]
 80105e6:	9905      	ldr	r1, [sp, #20]
 80105e8:	2300      	movs	r3, #0
 80105ea:	9804      	ldr	r0, [sp, #16]
 80105ec:	f7fb ffee 	bl	800c5cc <__multadd>
 80105f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105f2:	9005      	str	r0, [sp, #20]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d100      	bne.n	80105fa <_dtoa_r+0x912>
 80105f8:	e15d      	b.n	80108b6 <_dtoa_r+0xbce>
 80105fa:	2300      	movs	r3, #0
 80105fc:	0039      	movs	r1, r7
 80105fe:	220a      	movs	r2, #10
 8010600:	9804      	ldr	r0, [sp, #16]
 8010602:	f7fb ffe3 	bl	800c5cc <__multadd>
 8010606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010608:	0007      	movs	r7, r0
 801060a:	2b00      	cmp	r3, #0
 801060c:	dc49      	bgt.n	80106a2 <_dtoa_r+0x9ba>
 801060e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010610:	2b02      	cmp	r3, #2
 8010612:	dc0e      	bgt.n	8010632 <_dtoa_r+0x94a>
 8010614:	e045      	b.n	80106a2 <_dtoa_r+0x9ba>
 8010616:	2b04      	cmp	r3, #4
 8010618:	d0c6      	beq.n	80105a8 <_dtoa_r+0x8c0>
 801061a:	331c      	adds	r3, #28
 801061c:	e7bd      	b.n	801059a <_dtoa_r+0x8b2>
 801061e:	0013      	movs	r3, r2
 8010620:	e7fb      	b.n	801061a <_dtoa_r+0x932>
 8010622:	9b07      	ldr	r3, [sp, #28]
 8010624:	2b00      	cmp	r3, #0
 8010626:	dc36      	bgt.n	8010696 <_dtoa_r+0x9ae>
 8010628:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801062a:	2b02      	cmp	r3, #2
 801062c:	dd33      	ble.n	8010696 <_dtoa_r+0x9ae>
 801062e:	9b07      	ldr	r3, [sp, #28]
 8010630:	930b      	str	r3, [sp, #44]	; 0x2c
 8010632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10c      	bne.n	8010652 <_dtoa_r+0x96a>
 8010638:	0031      	movs	r1, r6
 801063a:	2205      	movs	r2, #5
 801063c:	9804      	ldr	r0, [sp, #16]
 801063e:	f7fb ffc5 	bl	800c5cc <__multadd>
 8010642:	0006      	movs	r6, r0
 8010644:	0001      	movs	r1, r0
 8010646:	9805      	ldr	r0, [sp, #20]
 8010648:	f7fc fa10 	bl	800ca6c <__mcmp>
 801064c:	2800      	cmp	r0, #0
 801064e:	dd00      	ble.n	8010652 <_dtoa_r+0x96a>
 8010650:	e59f      	b.n	8010192 <_dtoa_r+0x4aa>
 8010652:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010654:	43db      	mvns	r3, r3
 8010656:	9303      	str	r3, [sp, #12]
 8010658:	9b06      	ldr	r3, [sp, #24]
 801065a:	9308      	str	r3, [sp, #32]
 801065c:	2500      	movs	r5, #0
 801065e:	0031      	movs	r1, r6
 8010660:	9804      	ldr	r0, [sp, #16]
 8010662:	f7fb ffa9 	bl	800c5b8 <_Bfree>
 8010666:	2f00      	cmp	r7, #0
 8010668:	d100      	bne.n	801066c <_dtoa_r+0x984>
 801066a:	e6a3      	b.n	80103b4 <_dtoa_r+0x6cc>
 801066c:	2d00      	cmp	r5, #0
 801066e:	d005      	beq.n	801067c <_dtoa_r+0x994>
 8010670:	42bd      	cmp	r5, r7
 8010672:	d003      	beq.n	801067c <_dtoa_r+0x994>
 8010674:	0029      	movs	r1, r5
 8010676:	9804      	ldr	r0, [sp, #16]
 8010678:	f7fb ff9e 	bl	800c5b8 <_Bfree>
 801067c:	0039      	movs	r1, r7
 801067e:	9804      	ldr	r0, [sp, #16]
 8010680:	f7fb ff9a 	bl	800c5b8 <_Bfree>
 8010684:	e696      	b.n	80103b4 <_dtoa_r+0x6cc>
 8010686:	2600      	movs	r6, #0
 8010688:	0037      	movs	r7, r6
 801068a:	e7e2      	b.n	8010652 <_dtoa_r+0x96a>
 801068c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801068e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010690:	9303      	str	r3, [sp, #12]
 8010692:	0037      	movs	r7, r6
 8010694:	e57d      	b.n	8010192 <_dtoa_r+0x4aa>
 8010696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010698:	2b00      	cmp	r3, #0
 801069a:	d100      	bne.n	801069e <_dtoa_r+0x9b6>
 801069c:	e0c3      	b.n	8010826 <_dtoa_r+0xb3e>
 801069e:	9b07      	ldr	r3, [sp, #28]
 80106a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80106a2:	2c00      	cmp	r4, #0
 80106a4:	dd05      	ble.n	80106b2 <_dtoa_r+0x9ca>
 80106a6:	0039      	movs	r1, r7
 80106a8:	0022      	movs	r2, r4
 80106aa:	9804      	ldr	r0, [sp, #16]
 80106ac:	f7fc f970 	bl	800c990 <__lshift>
 80106b0:	0007      	movs	r7, r0
 80106b2:	0038      	movs	r0, r7
 80106b4:	2d00      	cmp	r5, #0
 80106b6:	d024      	beq.n	8010702 <_dtoa_r+0xa1a>
 80106b8:	6879      	ldr	r1, [r7, #4]
 80106ba:	9804      	ldr	r0, [sp, #16]
 80106bc:	f7fb ff54 	bl	800c568 <_Balloc>
 80106c0:	1e04      	subs	r4, r0, #0
 80106c2:	d111      	bne.n	80106e8 <_dtoa_r+0xa00>
 80106c4:	0022      	movs	r2, r4
 80106c6:	4b05      	ldr	r3, [pc, #20]	; (80106dc <_dtoa_r+0x9f4>)
 80106c8:	4805      	ldr	r0, [pc, #20]	; (80106e0 <_dtoa_r+0x9f8>)
 80106ca:	4906      	ldr	r1, [pc, #24]	; (80106e4 <_dtoa_r+0x9fc>)
 80106cc:	e43c      	b.n	800ff48 <_dtoa_r+0x260>
 80106ce:	46c0      	nop			; (mov r8, r8)
 80106d0:	40240000 	.word	0x40240000
 80106d4:	00000433 	.word	0x00000433
 80106d8:	7ff00000 	.word	0x7ff00000
 80106dc:	080140b1 	.word	0x080140b1
 80106e0:	08014341 	.word	0x08014341
 80106e4:	000002ef 	.word	0x000002ef
 80106e8:	0039      	movs	r1, r7
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	310c      	adds	r1, #12
 80106ee:	3202      	adds	r2, #2
 80106f0:	0092      	lsls	r2, r2, #2
 80106f2:	300c      	adds	r0, #12
 80106f4:	f7fb fa9d 	bl	800bc32 <memcpy>
 80106f8:	2201      	movs	r2, #1
 80106fa:	0021      	movs	r1, r4
 80106fc:	9804      	ldr	r0, [sp, #16]
 80106fe:	f7fc f947 	bl	800c990 <__lshift>
 8010702:	9b06      	ldr	r3, [sp, #24]
 8010704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010706:	9307      	str	r3, [sp, #28]
 8010708:	3b01      	subs	r3, #1
 801070a:	189b      	adds	r3, r3, r2
 801070c:	2201      	movs	r2, #1
 801070e:	003d      	movs	r5, r7
 8010710:	0007      	movs	r7, r0
 8010712:	930e      	str	r3, [sp, #56]	; 0x38
 8010714:	9b08      	ldr	r3, [sp, #32]
 8010716:	4013      	ands	r3, r2
 8010718:	930d      	str	r3, [sp, #52]	; 0x34
 801071a:	0031      	movs	r1, r6
 801071c:	9805      	ldr	r0, [sp, #20]
 801071e:	f7ff fa53 	bl	800fbc8 <quorem>
 8010722:	0029      	movs	r1, r5
 8010724:	0004      	movs	r4, r0
 8010726:	900b      	str	r0, [sp, #44]	; 0x2c
 8010728:	9805      	ldr	r0, [sp, #20]
 801072a:	f7fc f99f 	bl	800ca6c <__mcmp>
 801072e:	003a      	movs	r2, r7
 8010730:	900c      	str	r0, [sp, #48]	; 0x30
 8010732:	0031      	movs	r1, r6
 8010734:	9804      	ldr	r0, [sp, #16]
 8010736:	f7fc f9b5 	bl	800caa4 <__mdiff>
 801073a:	2201      	movs	r2, #1
 801073c:	68c3      	ldr	r3, [r0, #12]
 801073e:	3430      	adds	r4, #48	; 0x30
 8010740:	9008      	str	r0, [sp, #32]
 8010742:	920a      	str	r2, [sp, #40]	; 0x28
 8010744:	2b00      	cmp	r3, #0
 8010746:	d104      	bne.n	8010752 <_dtoa_r+0xa6a>
 8010748:	0001      	movs	r1, r0
 801074a:	9805      	ldr	r0, [sp, #20]
 801074c:	f7fc f98e 	bl	800ca6c <__mcmp>
 8010750:	900a      	str	r0, [sp, #40]	; 0x28
 8010752:	9908      	ldr	r1, [sp, #32]
 8010754:	9804      	ldr	r0, [sp, #16]
 8010756:	f7fb ff2f 	bl	800c5b8 <_Bfree>
 801075a:	9b07      	ldr	r3, [sp, #28]
 801075c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801075e:	3301      	adds	r3, #1
 8010760:	9308      	str	r3, [sp, #32]
 8010762:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010764:	4313      	orrs	r3, r2
 8010766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010768:	4313      	orrs	r3, r2
 801076a:	d109      	bne.n	8010780 <_dtoa_r+0xa98>
 801076c:	2c39      	cmp	r4, #57	; 0x39
 801076e:	d022      	beq.n	80107b6 <_dtoa_r+0xace>
 8010770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010772:	2b00      	cmp	r3, #0
 8010774:	dd01      	ble.n	801077a <_dtoa_r+0xa92>
 8010776:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010778:	3431      	adds	r4, #49	; 0x31
 801077a:	9b07      	ldr	r3, [sp, #28]
 801077c:	701c      	strb	r4, [r3, #0]
 801077e:	e76e      	b.n	801065e <_dtoa_r+0x976>
 8010780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010782:	2b00      	cmp	r3, #0
 8010784:	db04      	blt.n	8010790 <_dtoa_r+0xaa8>
 8010786:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010788:	4313      	orrs	r3, r2
 801078a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801078c:	4313      	orrs	r3, r2
 801078e:	d11e      	bne.n	80107ce <_dtoa_r+0xae6>
 8010790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010792:	2b00      	cmp	r3, #0
 8010794:	ddf1      	ble.n	801077a <_dtoa_r+0xa92>
 8010796:	9905      	ldr	r1, [sp, #20]
 8010798:	2201      	movs	r2, #1
 801079a:	9804      	ldr	r0, [sp, #16]
 801079c:	f7fc f8f8 	bl	800c990 <__lshift>
 80107a0:	0031      	movs	r1, r6
 80107a2:	9005      	str	r0, [sp, #20]
 80107a4:	f7fc f962 	bl	800ca6c <__mcmp>
 80107a8:	2800      	cmp	r0, #0
 80107aa:	dc02      	bgt.n	80107b2 <_dtoa_r+0xaca>
 80107ac:	d1e5      	bne.n	801077a <_dtoa_r+0xa92>
 80107ae:	07e3      	lsls	r3, r4, #31
 80107b0:	d5e3      	bpl.n	801077a <_dtoa_r+0xa92>
 80107b2:	2c39      	cmp	r4, #57	; 0x39
 80107b4:	d1df      	bne.n	8010776 <_dtoa_r+0xa8e>
 80107b6:	2339      	movs	r3, #57	; 0x39
 80107b8:	9a07      	ldr	r2, [sp, #28]
 80107ba:	7013      	strb	r3, [r2, #0]
 80107bc:	9b08      	ldr	r3, [sp, #32]
 80107be:	9308      	str	r3, [sp, #32]
 80107c0:	3b01      	subs	r3, #1
 80107c2:	781a      	ldrb	r2, [r3, #0]
 80107c4:	2a39      	cmp	r2, #57	; 0x39
 80107c6:	d063      	beq.n	8010890 <_dtoa_r+0xba8>
 80107c8:	3201      	adds	r2, #1
 80107ca:	701a      	strb	r2, [r3, #0]
 80107cc:	e747      	b.n	801065e <_dtoa_r+0x976>
 80107ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	dd03      	ble.n	80107dc <_dtoa_r+0xaf4>
 80107d4:	2c39      	cmp	r4, #57	; 0x39
 80107d6:	d0ee      	beq.n	80107b6 <_dtoa_r+0xace>
 80107d8:	3401      	adds	r4, #1
 80107da:	e7ce      	b.n	801077a <_dtoa_r+0xa92>
 80107dc:	9b07      	ldr	r3, [sp, #28]
 80107de:	9a07      	ldr	r2, [sp, #28]
 80107e0:	701c      	strb	r4, [r3, #0]
 80107e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d03e      	beq.n	8010866 <_dtoa_r+0xb7e>
 80107e8:	2300      	movs	r3, #0
 80107ea:	220a      	movs	r2, #10
 80107ec:	9905      	ldr	r1, [sp, #20]
 80107ee:	9804      	ldr	r0, [sp, #16]
 80107f0:	f7fb feec 	bl	800c5cc <__multadd>
 80107f4:	2300      	movs	r3, #0
 80107f6:	9005      	str	r0, [sp, #20]
 80107f8:	220a      	movs	r2, #10
 80107fa:	0029      	movs	r1, r5
 80107fc:	9804      	ldr	r0, [sp, #16]
 80107fe:	42bd      	cmp	r5, r7
 8010800:	d106      	bne.n	8010810 <_dtoa_r+0xb28>
 8010802:	f7fb fee3 	bl	800c5cc <__multadd>
 8010806:	0005      	movs	r5, r0
 8010808:	0007      	movs	r7, r0
 801080a:	9b08      	ldr	r3, [sp, #32]
 801080c:	9307      	str	r3, [sp, #28]
 801080e:	e784      	b.n	801071a <_dtoa_r+0xa32>
 8010810:	f7fb fedc 	bl	800c5cc <__multadd>
 8010814:	0039      	movs	r1, r7
 8010816:	0005      	movs	r5, r0
 8010818:	2300      	movs	r3, #0
 801081a:	220a      	movs	r2, #10
 801081c:	9804      	ldr	r0, [sp, #16]
 801081e:	f7fb fed5 	bl	800c5cc <__multadd>
 8010822:	0007      	movs	r7, r0
 8010824:	e7f1      	b.n	801080a <_dtoa_r+0xb22>
 8010826:	9b07      	ldr	r3, [sp, #28]
 8010828:	930b      	str	r3, [sp, #44]	; 0x2c
 801082a:	2500      	movs	r5, #0
 801082c:	0031      	movs	r1, r6
 801082e:	9805      	ldr	r0, [sp, #20]
 8010830:	f7ff f9ca 	bl	800fbc8 <quorem>
 8010834:	9b06      	ldr	r3, [sp, #24]
 8010836:	3030      	adds	r0, #48	; 0x30
 8010838:	5558      	strb	r0, [r3, r5]
 801083a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801083c:	3501      	adds	r5, #1
 801083e:	0004      	movs	r4, r0
 8010840:	42ab      	cmp	r3, r5
 8010842:	dd07      	ble.n	8010854 <_dtoa_r+0xb6c>
 8010844:	2300      	movs	r3, #0
 8010846:	220a      	movs	r2, #10
 8010848:	9905      	ldr	r1, [sp, #20]
 801084a:	9804      	ldr	r0, [sp, #16]
 801084c:	f7fb febe 	bl	800c5cc <__multadd>
 8010850:	9005      	str	r0, [sp, #20]
 8010852:	e7eb      	b.n	801082c <_dtoa_r+0xb44>
 8010854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010856:	2301      	movs	r3, #1
 8010858:	2a00      	cmp	r2, #0
 801085a:	dd00      	ble.n	801085e <_dtoa_r+0xb76>
 801085c:	0013      	movs	r3, r2
 801085e:	2500      	movs	r5, #0
 8010860:	9a06      	ldr	r2, [sp, #24]
 8010862:	18d3      	adds	r3, r2, r3
 8010864:	9308      	str	r3, [sp, #32]
 8010866:	9905      	ldr	r1, [sp, #20]
 8010868:	2201      	movs	r2, #1
 801086a:	9804      	ldr	r0, [sp, #16]
 801086c:	f7fc f890 	bl	800c990 <__lshift>
 8010870:	0031      	movs	r1, r6
 8010872:	9005      	str	r0, [sp, #20]
 8010874:	f7fc f8fa 	bl	800ca6c <__mcmp>
 8010878:	2800      	cmp	r0, #0
 801087a:	dc9f      	bgt.n	80107bc <_dtoa_r+0xad4>
 801087c:	d101      	bne.n	8010882 <_dtoa_r+0xb9a>
 801087e:	07e4      	lsls	r4, r4, #31
 8010880:	d49c      	bmi.n	80107bc <_dtoa_r+0xad4>
 8010882:	9b08      	ldr	r3, [sp, #32]
 8010884:	9308      	str	r3, [sp, #32]
 8010886:	3b01      	subs	r3, #1
 8010888:	781a      	ldrb	r2, [r3, #0]
 801088a:	2a30      	cmp	r2, #48	; 0x30
 801088c:	d0fa      	beq.n	8010884 <_dtoa_r+0xb9c>
 801088e:	e6e6      	b.n	801065e <_dtoa_r+0x976>
 8010890:	9a06      	ldr	r2, [sp, #24]
 8010892:	429a      	cmp	r2, r3
 8010894:	d193      	bne.n	80107be <_dtoa_r+0xad6>
 8010896:	9b03      	ldr	r3, [sp, #12]
 8010898:	3301      	adds	r3, #1
 801089a:	9303      	str	r3, [sp, #12]
 801089c:	2331      	movs	r3, #49	; 0x31
 801089e:	7013      	strb	r3, [r2, #0]
 80108a0:	e6dd      	b.n	801065e <_dtoa_r+0x976>
 80108a2:	4b09      	ldr	r3, [pc, #36]	; (80108c8 <_dtoa_r+0xbe0>)
 80108a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80108a6:	9306      	str	r3, [sp, #24]
 80108a8:	4b08      	ldr	r3, [pc, #32]	; (80108cc <_dtoa_r+0xbe4>)
 80108aa:	2a00      	cmp	r2, #0
 80108ac:	d001      	beq.n	80108b2 <_dtoa_r+0xbca>
 80108ae:	f7ff fa4c 	bl	800fd4a <_dtoa_r+0x62>
 80108b2:	f7ff fa4c 	bl	800fd4e <_dtoa_r+0x66>
 80108b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	dcb6      	bgt.n	801082a <_dtoa_r+0xb42>
 80108bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108be:	2b02      	cmp	r3, #2
 80108c0:	dd00      	ble.n	80108c4 <_dtoa_r+0xbdc>
 80108c2:	e6b6      	b.n	8010632 <_dtoa_r+0x94a>
 80108c4:	e7b1      	b.n	801082a <_dtoa_r+0xb42>
 80108c6:	46c0      	nop			; (mov r8, r8)
 80108c8:	08014334 	.word	0x08014334
 80108cc:	0801433c 	.word	0x0801433c

080108d0 <realloc>:
 80108d0:	b510      	push	{r4, lr}
 80108d2:	4b03      	ldr	r3, [pc, #12]	; (80108e0 <realloc+0x10>)
 80108d4:	000a      	movs	r2, r1
 80108d6:	0001      	movs	r1, r0
 80108d8:	6818      	ldr	r0, [r3, #0]
 80108da:	f000 f803 	bl	80108e4 <_realloc_r>
 80108de:	bd10      	pop	{r4, pc}
 80108e0:	200006d8 	.word	0x200006d8

080108e4 <_realloc_r>:
 80108e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108e6:	b087      	sub	sp, #28
 80108e8:	1e0c      	subs	r4, r1, #0
 80108ea:	9001      	str	r0, [sp, #4]
 80108ec:	9205      	str	r2, [sp, #20]
 80108ee:	d106      	bne.n	80108fe <_realloc_r+0x1a>
 80108f0:	0011      	movs	r1, r2
 80108f2:	f7f9 fe39 	bl	800a568 <_malloc_r>
 80108f6:	0007      	movs	r7, r0
 80108f8:	0038      	movs	r0, r7
 80108fa:	b007      	add	sp, #28
 80108fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108fe:	9801      	ldr	r0, [sp, #4]
 8010900:	f7fa f846 	bl	800a990 <__malloc_lock>
 8010904:	0023      	movs	r3, r4
 8010906:	3b08      	subs	r3, #8
 8010908:	685f      	ldr	r7, [r3, #4]
 801090a:	9304      	str	r3, [sp, #16]
 801090c:	9b05      	ldr	r3, [sp, #20]
 801090e:	330b      	adds	r3, #11
 8010910:	2b16      	cmp	r3, #22
 8010912:	d908      	bls.n	8010926 <_realloc_r+0x42>
 8010914:	2207      	movs	r2, #7
 8010916:	4393      	bics	r3, r2
 8010918:	9300      	str	r3, [sp, #0]
 801091a:	d506      	bpl.n	801092a <_realloc_r+0x46>
 801091c:	230c      	movs	r3, #12
 801091e:	9a01      	ldr	r2, [sp, #4]
 8010920:	2700      	movs	r7, #0
 8010922:	6013      	str	r3, [r2, #0]
 8010924:	e7e8      	b.n	80108f8 <_realloc_r+0x14>
 8010926:	2310      	movs	r3, #16
 8010928:	9300      	str	r3, [sp, #0]
 801092a:	9b00      	ldr	r3, [sp, #0]
 801092c:	9a05      	ldr	r2, [sp, #20]
 801092e:	4293      	cmp	r3, r2
 8010930:	d3f4      	bcc.n	801091c <_realloc_r+0x38>
 8010932:	9b04      	ldr	r3, [sp, #16]
 8010934:	003a      	movs	r2, r7
 8010936:	9302      	str	r3, [sp, #8]
 8010938:	2303      	movs	r3, #3
 801093a:	439a      	bics	r2, r3
 801093c:	9b00      	ldr	r3, [sp, #0]
 801093e:	9203      	str	r2, [sp, #12]
 8010940:	4293      	cmp	r3, r2
 8010942:	dc00      	bgt.n	8010946 <_realloc_r+0x62>
 8010944:	e169      	b.n	8010c1a <_realloc_r+0x336>
 8010946:	9b04      	ldr	r3, [sp, #16]
 8010948:	48b8      	ldr	r0, [pc, #736]	; (8010c2c <_realloc_r+0x348>)
 801094a:	189b      	adds	r3, r3, r2
 801094c:	6882      	ldr	r2, [r0, #8]
 801094e:	4694      	mov	ip, r2
 8010950:	685a      	ldr	r2, [r3, #4]
 8010952:	459c      	cmp	ip, r3
 8010954:	d006      	beq.n	8010964 <_realloc_r+0x80>
 8010956:	2501      	movs	r5, #1
 8010958:	0011      	movs	r1, r2
 801095a:	43a9      	bics	r1, r5
 801095c:	1859      	adds	r1, r3, r1
 801095e:	6849      	ldr	r1, [r1, #4]
 8010960:	4229      	tst	r1, r5
 8010962:	d144      	bne.n	80109ee <_realloc_r+0x10a>
 8010964:	2103      	movs	r1, #3
 8010966:	438a      	bics	r2, r1
 8010968:	9903      	ldr	r1, [sp, #12]
 801096a:	188e      	adds	r6, r1, r2
 801096c:	9900      	ldr	r1, [sp, #0]
 801096e:	459c      	cmp	ip, r3
 8010970:	d117      	bne.n	80109a2 <_realloc_r+0xbe>
 8010972:	3110      	adds	r1, #16
 8010974:	42b1      	cmp	r1, r6
 8010976:	dc3c      	bgt.n	80109f2 <_realloc_r+0x10e>
 8010978:	9a00      	ldr	r2, [sp, #0]
 801097a:	2101      	movs	r1, #1
 801097c:	4694      	mov	ip, r2
 801097e:	1ab6      	subs	r6, r6, r2
 8010980:	0022      	movs	r2, r4
 8010982:	9b04      	ldr	r3, [sp, #16]
 8010984:	430e      	orrs	r6, r1
 8010986:	4463      	add	r3, ip
 8010988:	6083      	str	r3, [r0, #8]
 801098a:	3a08      	subs	r2, #8
 801098c:	605e      	str	r6, [r3, #4]
 801098e:	6853      	ldr	r3, [r2, #4]
 8010990:	9801      	ldr	r0, [sp, #4]
 8010992:	400b      	ands	r3, r1
 8010994:	4661      	mov	r1, ip
 8010996:	430b      	orrs	r3, r1
 8010998:	6053      	str	r3, [r2, #4]
 801099a:	f7fa f801 	bl	800a9a0 <__malloc_unlock>
 801099e:	0027      	movs	r7, r4
 80109a0:	e7aa      	b.n	80108f8 <_realloc_r+0x14>
 80109a2:	42b1      	cmp	r1, r6
 80109a4:	dc25      	bgt.n	80109f2 <_realloc_r+0x10e>
 80109a6:	68da      	ldr	r2, [r3, #12]
 80109a8:	689b      	ldr	r3, [r3, #8]
 80109aa:	60da      	str	r2, [r3, #12]
 80109ac:	6093      	str	r3, [r2, #8]
 80109ae:	9b00      	ldr	r3, [sp, #0]
 80109b0:	9a02      	ldr	r2, [sp, #8]
 80109b2:	1af4      	subs	r4, r6, r3
 80109b4:	9b02      	ldr	r3, [sp, #8]
 80109b6:	1992      	adds	r2, r2, r6
 80109b8:	6858      	ldr	r0, [r3, #4]
 80109ba:	2301      	movs	r3, #1
 80109bc:	4018      	ands	r0, r3
 80109be:	2c0f      	cmp	r4, #15
 80109c0:	d800      	bhi.n	80109c4 <_realloc_r+0xe0>
 80109c2:	e12c      	b.n	8010c1e <_realloc_r+0x33a>
 80109c4:	9d00      	ldr	r5, [sp, #0]
 80109c6:	9902      	ldr	r1, [sp, #8]
 80109c8:	4328      	orrs	r0, r5
 80109ca:	1949      	adds	r1, r1, r5
 80109cc:	9d02      	ldr	r5, [sp, #8]
 80109ce:	431c      	orrs	r4, r3
 80109d0:	6068      	str	r0, [r5, #4]
 80109d2:	604c      	str	r4, [r1, #4]
 80109d4:	6850      	ldr	r0, [r2, #4]
 80109d6:	3108      	adds	r1, #8
 80109d8:	4303      	orrs	r3, r0
 80109da:	6053      	str	r3, [r2, #4]
 80109dc:	9801      	ldr	r0, [sp, #4]
 80109de:	f7fb f9a3 	bl	800bd28 <_free_r>
 80109e2:	9801      	ldr	r0, [sp, #4]
 80109e4:	f7f9 ffdc 	bl	800a9a0 <__malloc_unlock>
 80109e8:	9f02      	ldr	r7, [sp, #8]
 80109ea:	3708      	adds	r7, #8
 80109ec:	e784      	b.n	80108f8 <_realloc_r+0x14>
 80109ee:	2200      	movs	r2, #0
 80109f0:	0013      	movs	r3, r2
 80109f2:	07ff      	lsls	r7, r7, #31
 80109f4:	d500      	bpl.n	80109f8 <_realloc_r+0x114>
 80109f6:	e0c6      	b.n	8010b86 <_realloc_r+0x2a2>
 80109f8:	0021      	movs	r1, r4
 80109fa:	2003      	movs	r0, #3
 80109fc:	3908      	subs	r1, #8
 80109fe:	680d      	ldr	r5, [r1, #0]
 8010a00:	9904      	ldr	r1, [sp, #16]
 8010a02:	1b4d      	subs	r5, r1, r5
 8010a04:	6869      	ldr	r1, [r5, #4]
 8010a06:	4381      	bics	r1, r0
 8010a08:	9803      	ldr	r0, [sp, #12]
 8010a0a:	180f      	adds	r7, r1, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d100      	bne.n	8010a12 <_realloc_r+0x12e>
 8010a10:	e084      	b.n	8010b1c <_realloc_r+0x238>
 8010a12:	19d6      	adds	r6, r2, r7
 8010a14:	459c      	cmp	ip, r3
 8010a16:	d148      	bne.n	8010aaa <_realloc_r+0x1c6>
 8010a18:	9b00      	ldr	r3, [sp, #0]
 8010a1a:	3310      	adds	r3, #16
 8010a1c:	42b3      	cmp	r3, r6
 8010a1e:	dc7d      	bgt.n	8010b1c <_realloc_r+0x238>
 8010a20:	68aa      	ldr	r2, [r5, #8]
 8010a22:	68eb      	ldr	r3, [r5, #12]
 8010a24:	002f      	movs	r7, r5
 8010a26:	60d3      	str	r3, [r2, #12]
 8010a28:	609a      	str	r2, [r3, #8]
 8010a2a:	0002      	movs	r2, r0
 8010a2c:	3a04      	subs	r2, #4
 8010a2e:	3708      	adds	r7, #8
 8010a30:	2a24      	cmp	r2, #36	; 0x24
 8010a32:	d835      	bhi.n	8010aa0 <_realloc_r+0x1bc>
 8010a34:	003b      	movs	r3, r7
 8010a36:	2a13      	cmp	r2, #19
 8010a38:	d908      	bls.n	8010a4c <_realloc_r+0x168>
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	60ab      	str	r3, [r5, #8]
 8010a3e:	6863      	ldr	r3, [r4, #4]
 8010a40:	60eb      	str	r3, [r5, #12]
 8010a42:	2a1b      	cmp	r2, #27
 8010a44:	d81a      	bhi.n	8010a7c <_realloc_r+0x198>
 8010a46:	002b      	movs	r3, r5
 8010a48:	3408      	adds	r4, #8
 8010a4a:	3310      	adds	r3, #16
 8010a4c:	6822      	ldr	r2, [r4, #0]
 8010a4e:	601a      	str	r2, [r3, #0]
 8010a50:	6862      	ldr	r2, [r4, #4]
 8010a52:	605a      	str	r2, [r3, #4]
 8010a54:	68a2      	ldr	r2, [r4, #8]
 8010a56:	609a      	str	r2, [r3, #8]
 8010a58:	9b00      	ldr	r3, [sp, #0]
 8010a5a:	4a74      	ldr	r2, [pc, #464]	; (8010c2c <_realloc_r+0x348>)
 8010a5c:	18eb      	adds	r3, r5, r3
 8010a5e:	6093      	str	r3, [r2, #8]
 8010a60:	9a00      	ldr	r2, [sp, #0]
 8010a62:	1ab6      	subs	r6, r6, r2
 8010a64:	2201      	movs	r2, #1
 8010a66:	4316      	orrs	r6, r2
 8010a68:	605e      	str	r6, [r3, #4]
 8010a6a:	686b      	ldr	r3, [r5, #4]
 8010a6c:	4013      	ands	r3, r2
 8010a6e:	9a00      	ldr	r2, [sp, #0]
 8010a70:	4313      	orrs	r3, r2
 8010a72:	606b      	str	r3, [r5, #4]
 8010a74:	9801      	ldr	r0, [sp, #4]
 8010a76:	f7f9 ff93 	bl	800a9a0 <__malloc_unlock>
 8010a7a:	e73d      	b.n	80108f8 <_realloc_r+0x14>
 8010a7c:	68a3      	ldr	r3, [r4, #8]
 8010a7e:	612b      	str	r3, [r5, #16]
 8010a80:	68e3      	ldr	r3, [r4, #12]
 8010a82:	616b      	str	r3, [r5, #20]
 8010a84:	2a24      	cmp	r2, #36	; 0x24
 8010a86:	d003      	beq.n	8010a90 <_realloc_r+0x1ac>
 8010a88:	002b      	movs	r3, r5
 8010a8a:	3410      	adds	r4, #16
 8010a8c:	3318      	adds	r3, #24
 8010a8e:	e7dd      	b.n	8010a4c <_realloc_r+0x168>
 8010a90:	6923      	ldr	r3, [r4, #16]
 8010a92:	61ab      	str	r3, [r5, #24]
 8010a94:	002b      	movs	r3, r5
 8010a96:	6962      	ldr	r2, [r4, #20]
 8010a98:	3320      	adds	r3, #32
 8010a9a:	61ea      	str	r2, [r5, #28]
 8010a9c:	3418      	adds	r4, #24
 8010a9e:	e7d5      	b.n	8010a4c <_realloc_r+0x168>
 8010aa0:	0021      	movs	r1, r4
 8010aa2:	0038      	movs	r0, r7
 8010aa4:	f001 fbb5 	bl	8012212 <memmove>
 8010aa8:	e7d6      	b.n	8010a58 <_realloc_r+0x174>
 8010aaa:	9a00      	ldr	r2, [sp, #0]
 8010aac:	42b2      	cmp	r2, r6
 8010aae:	dc35      	bgt.n	8010b1c <_realloc_r+0x238>
 8010ab0:	0028      	movs	r0, r5
 8010ab2:	68da      	ldr	r2, [r3, #12]
 8010ab4:	689b      	ldr	r3, [r3, #8]
 8010ab6:	3008      	adds	r0, #8
 8010ab8:	60da      	str	r2, [r3, #12]
 8010aba:	6093      	str	r3, [r2, #8]
 8010abc:	68aa      	ldr	r2, [r5, #8]
 8010abe:	68eb      	ldr	r3, [r5, #12]
 8010ac0:	60d3      	str	r3, [r2, #12]
 8010ac2:	609a      	str	r2, [r3, #8]
 8010ac4:	9a03      	ldr	r2, [sp, #12]
 8010ac6:	3a04      	subs	r2, #4
 8010ac8:	2a24      	cmp	r2, #36	; 0x24
 8010aca:	d823      	bhi.n	8010b14 <_realloc_r+0x230>
 8010acc:	2a13      	cmp	r2, #19
 8010ace:	d907      	bls.n	8010ae0 <_realloc_r+0x1fc>
 8010ad0:	6823      	ldr	r3, [r4, #0]
 8010ad2:	60ab      	str	r3, [r5, #8]
 8010ad4:	6863      	ldr	r3, [r4, #4]
 8010ad6:	60eb      	str	r3, [r5, #12]
 8010ad8:	2a1b      	cmp	r2, #27
 8010ada:	d809      	bhi.n	8010af0 <_realloc_r+0x20c>
 8010adc:	3408      	adds	r4, #8
 8010ade:	3008      	adds	r0, #8
 8010ae0:	6823      	ldr	r3, [r4, #0]
 8010ae2:	6003      	str	r3, [r0, #0]
 8010ae4:	6863      	ldr	r3, [r4, #4]
 8010ae6:	6043      	str	r3, [r0, #4]
 8010ae8:	68a3      	ldr	r3, [r4, #8]
 8010aea:	6083      	str	r3, [r0, #8]
 8010aec:	9502      	str	r5, [sp, #8]
 8010aee:	e75e      	b.n	80109ae <_realloc_r+0xca>
 8010af0:	68a3      	ldr	r3, [r4, #8]
 8010af2:	612b      	str	r3, [r5, #16]
 8010af4:	68e3      	ldr	r3, [r4, #12]
 8010af6:	616b      	str	r3, [r5, #20]
 8010af8:	2a24      	cmp	r2, #36	; 0x24
 8010afa:	d003      	beq.n	8010b04 <_realloc_r+0x220>
 8010afc:	0028      	movs	r0, r5
 8010afe:	3410      	adds	r4, #16
 8010b00:	3018      	adds	r0, #24
 8010b02:	e7ed      	b.n	8010ae0 <_realloc_r+0x1fc>
 8010b04:	0028      	movs	r0, r5
 8010b06:	6923      	ldr	r3, [r4, #16]
 8010b08:	3020      	adds	r0, #32
 8010b0a:	61ab      	str	r3, [r5, #24]
 8010b0c:	6963      	ldr	r3, [r4, #20]
 8010b0e:	3418      	adds	r4, #24
 8010b10:	61eb      	str	r3, [r5, #28]
 8010b12:	e7e5      	b.n	8010ae0 <_realloc_r+0x1fc>
 8010b14:	0021      	movs	r1, r4
 8010b16:	f001 fb7c 	bl	8012212 <memmove>
 8010b1a:	e7e7      	b.n	8010aec <_realloc_r+0x208>
 8010b1c:	9b00      	ldr	r3, [sp, #0]
 8010b1e:	42bb      	cmp	r3, r7
 8010b20:	dc31      	bgt.n	8010b86 <_realloc_r+0x2a2>
 8010b22:	0028      	movs	r0, r5
 8010b24:	68aa      	ldr	r2, [r5, #8]
 8010b26:	68eb      	ldr	r3, [r5, #12]
 8010b28:	3008      	adds	r0, #8
 8010b2a:	60d3      	str	r3, [r2, #12]
 8010b2c:	609a      	str	r2, [r3, #8]
 8010b2e:	9a03      	ldr	r2, [sp, #12]
 8010b30:	3a04      	subs	r2, #4
 8010b32:	2a24      	cmp	r2, #36	; 0x24
 8010b34:	d823      	bhi.n	8010b7e <_realloc_r+0x29a>
 8010b36:	2a13      	cmp	r2, #19
 8010b38:	d907      	bls.n	8010b4a <_realloc_r+0x266>
 8010b3a:	6823      	ldr	r3, [r4, #0]
 8010b3c:	60ab      	str	r3, [r5, #8]
 8010b3e:	6863      	ldr	r3, [r4, #4]
 8010b40:	60eb      	str	r3, [r5, #12]
 8010b42:	2a1b      	cmp	r2, #27
 8010b44:	d809      	bhi.n	8010b5a <_realloc_r+0x276>
 8010b46:	3408      	adds	r4, #8
 8010b48:	3008      	adds	r0, #8
 8010b4a:	6823      	ldr	r3, [r4, #0]
 8010b4c:	6003      	str	r3, [r0, #0]
 8010b4e:	6863      	ldr	r3, [r4, #4]
 8010b50:	6043      	str	r3, [r0, #4]
 8010b52:	68a3      	ldr	r3, [r4, #8]
 8010b54:	6083      	str	r3, [r0, #8]
 8010b56:	003e      	movs	r6, r7
 8010b58:	e7c8      	b.n	8010aec <_realloc_r+0x208>
 8010b5a:	68a3      	ldr	r3, [r4, #8]
 8010b5c:	612b      	str	r3, [r5, #16]
 8010b5e:	68e3      	ldr	r3, [r4, #12]
 8010b60:	616b      	str	r3, [r5, #20]
 8010b62:	2a24      	cmp	r2, #36	; 0x24
 8010b64:	d003      	beq.n	8010b6e <_realloc_r+0x28a>
 8010b66:	0028      	movs	r0, r5
 8010b68:	3410      	adds	r4, #16
 8010b6a:	3018      	adds	r0, #24
 8010b6c:	e7ed      	b.n	8010b4a <_realloc_r+0x266>
 8010b6e:	0028      	movs	r0, r5
 8010b70:	6923      	ldr	r3, [r4, #16]
 8010b72:	3020      	adds	r0, #32
 8010b74:	61ab      	str	r3, [r5, #24]
 8010b76:	6963      	ldr	r3, [r4, #20]
 8010b78:	3418      	adds	r4, #24
 8010b7a:	61eb      	str	r3, [r5, #28]
 8010b7c:	e7e5      	b.n	8010b4a <_realloc_r+0x266>
 8010b7e:	0021      	movs	r1, r4
 8010b80:	f001 fb47 	bl	8012212 <memmove>
 8010b84:	e7e7      	b.n	8010b56 <_realloc_r+0x272>
 8010b86:	9905      	ldr	r1, [sp, #20]
 8010b88:	9801      	ldr	r0, [sp, #4]
 8010b8a:	f7f9 fced 	bl	800a568 <_malloc_r>
 8010b8e:	1e07      	subs	r7, r0, #0
 8010b90:	d100      	bne.n	8010b94 <_realloc_r+0x2b0>
 8010b92:	e76f      	b.n	8010a74 <_realloc_r+0x190>
 8010b94:	0023      	movs	r3, r4
 8010b96:	2201      	movs	r2, #1
 8010b98:	3b08      	subs	r3, #8
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	4393      	bics	r3, r2
 8010b9e:	9a04      	ldr	r2, [sp, #16]
 8010ba0:	18d3      	adds	r3, r2, r3
 8010ba2:	0002      	movs	r2, r0
 8010ba4:	3a08      	subs	r2, #8
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	d105      	bne.n	8010bb6 <_realloc_r+0x2d2>
 8010baa:	685e      	ldr	r6, [r3, #4]
 8010bac:	2303      	movs	r3, #3
 8010bae:	439e      	bics	r6, r3
 8010bb0:	9b03      	ldr	r3, [sp, #12]
 8010bb2:	18f6      	adds	r6, r6, r3
 8010bb4:	e6fb      	b.n	80109ae <_realloc_r+0xca>
 8010bb6:	9a03      	ldr	r2, [sp, #12]
 8010bb8:	3a04      	subs	r2, #4
 8010bba:	2a24      	cmp	r2, #36	; 0x24
 8010bbc:	d829      	bhi.n	8010c12 <_realloc_r+0x32e>
 8010bbe:	0003      	movs	r3, r0
 8010bc0:	0021      	movs	r1, r4
 8010bc2:	2a13      	cmp	r2, #19
 8010bc4:	d908      	bls.n	8010bd8 <_realloc_r+0x2f4>
 8010bc6:	6823      	ldr	r3, [r4, #0]
 8010bc8:	6003      	str	r3, [r0, #0]
 8010bca:	6863      	ldr	r3, [r4, #4]
 8010bcc:	6043      	str	r3, [r0, #4]
 8010bce:	2a1b      	cmp	r2, #27
 8010bd0:	d80d      	bhi.n	8010bee <_realloc_r+0x30a>
 8010bd2:	0003      	movs	r3, r0
 8010bd4:	3108      	adds	r1, #8
 8010bd6:	3308      	adds	r3, #8
 8010bd8:	680a      	ldr	r2, [r1, #0]
 8010bda:	601a      	str	r2, [r3, #0]
 8010bdc:	684a      	ldr	r2, [r1, #4]
 8010bde:	605a      	str	r2, [r3, #4]
 8010be0:	688a      	ldr	r2, [r1, #8]
 8010be2:	609a      	str	r2, [r3, #8]
 8010be4:	0021      	movs	r1, r4
 8010be6:	9801      	ldr	r0, [sp, #4]
 8010be8:	f7fb f89e 	bl	800bd28 <_free_r>
 8010bec:	e742      	b.n	8010a74 <_realloc_r+0x190>
 8010bee:	68a3      	ldr	r3, [r4, #8]
 8010bf0:	6083      	str	r3, [r0, #8]
 8010bf2:	68e3      	ldr	r3, [r4, #12]
 8010bf4:	60c3      	str	r3, [r0, #12]
 8010bf6:	2a24      	cmp	r2, #36	; 0x24
 8010bf8:	d003      	beq.n	8010c02 <_realloc_r+0x31e>
 8010bfa:	0003      	movs	r3, r0
 8010bfc:	3110      	adds	r1, #16
 8010bfe:	3310      	adds	r3, #16
 8010c00:	e7ea      	b.n	8010bd8 <_realloc_r+0x2f4>
 8010c02:	6923      	ldr	r3, [r4, #16]
 8010c04:	3118      	adds	r1, #24
 8010c06:	6103      	str	r3, [r0, #16]
 8010c08:	0003      	movs	r3, r0
 8010c0a:	6962      	ldr	r2, [r4, #20]
 8010c0c:	3318      	adds	r3, #24
 8010c0e:	6142      	str	r2, [r0, #20]
 8010c10:	e7e2      	b.n	8010bd8 <_realloc_r+0x2f4>
 8010c12:	0021      	movs	r1, r4
 8010c14:	f001 fafd 	bl	8012212 <memmove>
 8010c18:	e7e4      	b.n	8010be4 <_realloc_r+0x300>
 8010c1a:	9e03      	ldr	r6, [sp, #12]
 8010c1c:	e6c7      	b.n	80109ae <_realloc_r+0xca>
 8010c1e:	9902      	ldr	r1, [sp, #8]
 8010c20:	4306      	orrs	r6, r0
 8010c22:	604e      	str	r6, [r1, #4]
 8010c24:	6851      	ldr	r1, [r2, #4]
 8010c26:	430b      	orrs	r3, r1
 8010c28:	6053      	str	r3, [r2, #4]
 8010c2a:	e6da      	b.n	80109e2 <_realloc_r+0xfe>
 8010c2c:	2000002c 	.word	0x2000002c

08010c30 <_strtoul_l.constprop.0>:
 8010c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c32:	b087      	sub	sp, #28
 8010c34:	9202      	str	r2, [sp, #8]
 8010c36:	4a3e      	ldr	r2, [pc, #248]	; (8010d30 <_strtoul_l.constprop.0+0x100>)
 8010c38:	001e      	movs	r6, r3
 8010c3a:	9101      	str	r1, [sp, #4]
 8010c3c:	000b      	movs	r3, r1
 8010c3e:	4694      	mov	ip, r2
 8010c40:	2108      	movs	r1, #8
 8010c42:	9005      	str	r0, [sp, #20]
 8010c44:	001a      	movs	r2, r3
 8010c46:	4660      	mov	r0, ip
 8010c48:	7814      	ldrb	r4, [r2, #0]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	5d00      	ldrb	r0, [r0, r4]
 8010c4e:	001d      	movs	r5, r3
 8010c50:	0007      	movs	r7, r0
 8010c52:	400f      	ands	r7, r1
 8010c54:	4208      	tst	r0, r1
 8010c56:	d1f5      	bne.n	8010c44 <_strtoul_l.constprop.0+0x14>
 8010c58:	2c2d      	cmp	r4, #45	; 0x2d
 8010c5a:	d13d      	bne.n	8010cd8 <_strtoul_l.constprop.0+0xa8>
 8010c5c:	2701      	movs	r7, #1
 8010c5e:	781c      	ldrb	r4, [r3, #0]
 8010c60:	1c95      	adds	r5, r2, #2
 8010c62:	2e00      	cmp	r6, #0
 8010c64:	d05f      	beq.n	8010d26 <_strtoul_l.constprop.0+0xf6>
 8010c66:	2e10      	cmp	r6, #16
 8010c68:	d109      	bne.n	8010c7e <_strtoul_l.constprop.0+0x4e>
 8010c6a:	2c30      	cmp	r4, #48	; 0x30
 8010c6c:	d107      	bne.n	8010c7e <_strtoul_l.constprop.0+0x4e>
 8010c6e:	2220      	movs	r2, #32
 8010c70:	782b      	ldrb	r3, [r5, #0]
 8010c72:	4393      	bics	r3, r2
 8010c74:	2b58      	cmp	r3, #88	; 0x58
 8010c76:	d151      	bne.n	8010d1c <_strtoul_l.constprop.0+0xec>
 8010c78:	2610      	movs	r6, #16
 8010c7a:	786c      	ldrb	r4, [r5, #1]
 8010c7c:	3502      	adds	r5, #2
 8010c7e:	2001      	movs	r0, #1
 8010c80:	0031      	movs	r1, r6
 8010c82:	4240      	negs	r0, r0
 8010c84:	f7ef fa5a 	bl	800013c <__udivsi3>
 8010c88:	9003      	str	r0, [sp, #12]
 8010c8a:	2001      	movs	r0, #1
 8010c8c:	0031      	movs	r1, r6
 8010c8e:	4240      	negs	r0, r0
 8010c90:	f7ef fada 	bl	8000248 <__aeabi_uidivmod>
 8010c94:	2300      	movs	r3, #0
 8010c96:	2201      	movs	r2, #1
 8010c98:	9104      	str	r1, [sp, #16]
 8010c9a:	2101      	movs	r1, #1
 8010c9c:	0018      	movs	r0, r3
 8010c9e:	4694      	mov	ip, r2
 8010ca0:	4249      	negs	r1, r1
 8010ca2:	0022      	movs	r2, r4
 8010ca4:	3a30      	subs	r2, #48	; 0x30
 8010ca6:	2a09      	cmp	r2, #9
 8010ca8:	d903      	bls.n	8010cb2 <_strtoul_l.constprop.0+0x82>
 8010caa:	3a11      	subs	r2, #17
 8010cac:	2a19      	cmp	r2, #25
 8010cae:	d818      	bhi.n	8010ce2 <_strtoul_l.constprop.0+0xb2>
 8010cb0:	320a      	adds	r2, #10
 8010cb2:	4296      	cmp	r6, r2
 8010cb4:	dd19      	ble.n	8010cea <_strtoul_l.constprop.0+0xba>
 8010cb6:	1c5c      	adds	r4, r3, #1
 8010cb8:	d00b      	beq.n	8010cd2 <_strtoul_l.constprop.0+0xa2>
 8010cba:	9c03      	ldr	r4, [sp, #12]
 8010cbc:	000b      	movs	r3, r1
 8010cbe:	4284      	cmp	r4, r0
 8010cc0:	d307      	bcc.n	8010cd2 <_strtoul_l.constprop.0+0xa2>
 8010cc2:	d103      	bne.n	8010ccc <_strtoul_l.constprop.0+0x9c>
 8010cc4:	9c04      	ldr	r4, [sp, #16]
 8010cc6:	000b      	movs	r3, r1
 8010cc8:	4294      	cmp	r4, r2
 8010cca:	db02      	blt.n	8010cd2 <_strtoul_l.constprop.0+0xa2>
 8010ccc:	4663      	mov	r3, ip
 8010cce:	4370      	muls	r0, r6
 8010cd0:	1810      	adds	r0, r2, r0
 8010cd2:	782c      	ldrb	r4, [r5, #0]
 8010cd4:	3501      	adds	r5, #1
 8010cd6:	e7e4      	b.n	8010ca2 <_strtoul_l.constprop.0+0x72>
 8010cd8:	2c2b      	cmp	r4, #43	; 0x2b
 8010cda:	d1c2      	bne.n	8010c62 <_strtoul_l.constprop.0+0x32>
 8010cdc:	781c      	ldrb	r4, [r3, #0]
 8010cde:	1c95      	adds	r5, r2, #2
 8010ce0:	e7bf      	b.n	8010c62 <_strtoul_l.constprop.0+0x32>
 8010ce2:	0022      	movs	r2, r4
 8010ce4:	3a61      	subs	r2, #97	; 0x61
 8010ce6:	2a19      	cmp	r2, #25
 8010ce8:	d9e2      	bls.n	8010cb0 <_strtoul_l.constprop.0+0x80>
 8010cea:	1c5a      	adds	r2, r3, #1
 8010cec:	d108      	bne.n	8010d00 <_strtoul_l.constprop.0+0xd0>
 8010cee:	2222      	movs	r2, #34	; 0x22
 8010cf0:	9905      	ldr	r1, [sp, #20]
 8010cf2:	0018      	movs	r0, r3
 8010cf4:	600a      	str	r2, [r1, #0]
 8010cf6:	9a02      	ldr	r2, [sp, #8]
 8010cf8:	2a00      	cmp	r2, #0
 8010cfa:	d109      	bne.n	8010d10 <_strtoul_l.constprop.0+0xe0>
 8010cfc:	b007      	add	sp, #28
 8010cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d00:	2f00      	cmp	r7, #0
 8010d02:	d000      	beq.n	8010d06 <_strtoul_l.constprop.0+0xd6>
 8010d04:	4240      	negs	r0, r0
 8010d06:	9a02      	ldr	r2, [sp, #8]
 8010d08:	2a00      	cmp	r2, #0
 8010d0a:	d0f7      	beq.n	8010cfc <_strtoul_l.constprop.0+0xcc>
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <_strtoul_l.constprop.0+0xe4>
 8010d10:	1e6b      	subs	r3, r5, #1
 8010d12:	9301      	str	r3, [sp, #4]
 8010d14:	9b02      	ldr	r3, [sp, #8]
 8010d16:	9a01      	ldr	r2, [sp, #4]
 8010d18:	601a      	str	r2, [r3, #0]
 8010d1a:	e7ef      	b.n	8010cfc <_strtoul_l.constprop.0+0xcc>
 8010d1c:	2430      	movs	r4, #48	; 0x30
 8010d1e:	2e00      	cmp	r6, #0
 8010d20:	d1ad      	bne.n	8010c7e <_strtoul_l.constprop.0+0x4e>
 8010d22:	3608      	adds	r6, #8
 8010d24:	e7ab      	b.n	8010c7e <_strtoul_l.constprop.0+0x4e>
 8010d26:	2c30      	cmp	r4, #48	; 0x30
 8010d28:	d0a1      	beq.n	8010c6e <_strtoul_l.constprop.0+0x3e>
 8010d2a:	260a      	movs	r6, #10
 8010d2c:	e7a7      	b.n	8010c7e <_strtoul_l.constprop.0+0x4e>
 8010d2e:	46c0      	nop			; (mov r8, r8)
 8010d30:	08013fa9 	.word	0x08013fa9

08010d34 <_strtoul_r>:
 8010d34:	b510      	push	{r4, lr}
 8010d36:	f7ff ff7b 	bl	8010c30 <_strtoul_l.constprop.0>
 8010d3a:	bd10      	pop	{r4, pc}

08010d3c <_strtoll_l.constprop.0>:
 8010d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d3e:	b08d      	sub	sp, #52	; 0x34
 8010d40:	9203      	str	r2, [sp, #12]
 8010d42:	4a53      	ldr	r2, [pc, #332]	; (8010e90 <_strtoll_l.constprop.0+0x154>)
 8010d44:	001e      	movs	r6, r3
 8010d46:	9102      	str	r1, [sp, #8]
 8010d48:	000b      	movs	r3, r1
 8010d4a:	4694      	mov	ip, r2
 8010d4c:	2108      	movs	r1, #8
 8010d4e:	900a      	str	r0, [sp, #40]	; 0x28
 8010d50:	001a      	movs	r2, r3
 8010d52:	4660      	mov	r0, ip
 8010d54:	7814      	ldrb	r4, [r2, #0]
 8010d56:	3301      	adds	r3, #1
 8010d58:	5d00      	ldrb	r0, [r0, r4]
 8010d5a:	001d      	movs	r5, r3
 8010d5c:	0007      	movs	r7, r0
 8010d5e:	400f      	ands	r7, r1
 8010d60:	4208      	tst	r0, r1
 8010d62:	d1f5      	bne.n	8010d50 <_strtoll_l.constprop.0+0x14>
 8010d64:	2c2d      	cmp	r4, #45	; 0x2d
 8010d66:	d153      	bne.n	8010e10 <_strtoll_l.constprop.0+0xd4>
 8010d68:	781c      	ldrb	r4, [r3, #0]
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	1c95      	adds	r5, r2, #2
 8010d6e:	9301      	str	r3, [sp, #4]
 8010d70:	2e00      	cmp	r6, #0
 8010d72:	d100      	bne.n	8010d76 <_strtoll_l.constprop.0+0x3a>
 8010d74:	e086      	b.n	8010e84 <_strtoll_l.constprop.0+0x148>
 8010d76:	2e10      	cmp	r6, #16
 8010d78:	d10a      	bne.n	8010d90 <_strtoll_l.constprop.0+0x54>
 8010d7a:	2c30      	cmp	r4, #48	; 0x30
 8010d7c:	d108      	bne.n	8010d90 <_strtoll_l.constprop.0+0x54>
 8010d7e:	2220      	movs	r2, #32
 8010d80:	782b      	ldrb	r3, [r5, #0]
 8010d82:	4393      	bics	r3, r2
 8010d84:	2b58      	cmp	r3, #88	; 0x58
 8010d86:	d000      	beq.n	8010d8a <_strtoll_l.constprop.0+0x4e>
 8010d88:	e076      	b.n	8010e78 <_strtoll_l.constprop.0+0x13c>
 8010d8a:	2610      	movs	r6, #16
 8010d8c:	786c      	ldrb	r4, [r5, #1]
 8010d8e:	3502      	adds	r5, #2
 8010d90:	2001      	movs	r0, #1
 8010d92:	2300      	movs	r3, #0
 8010d94:	493f      	ldr	r1, [pc, #252]	; (8010e94 <_strtoll_l.constprop.0+0x158>)
 8010d96:	9a01      	ldr	r2, [sp, #4]
 8010d98:	4240      	negs	r0, r0
 8010d9a:	1812      	adds	r2, r2, r0
 8010d9c:	414b      	adcs	r3, r1
 8010d9e:	9204      	str	r2, [sp, #16]
 8010da0:	9305      	str	r3, [sp, #20]
 8010da2:	9804      	ldr	r0, [sp, #16]
 8010da4:	9905      	ldr	r1, [sp, #20]
 8010da6:	17f3      	asrs	r3, r6, #31
 8010da8:	0032      	movs	r2, r6
 8010daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8010dac:	f7ef fb7a 	bl	80004a4 <__aeabi_uldivmod>
 8010db0:	2300      	movs	r3, #0
 8010db2:	000f      	movs	r7, r1
 8010db4:	9008      	str	r0, [sp, #32]
 8010db6:	2100      	movs	r1, #0
 8010db8:	2000      	movs	r0, #0
 8010dba:	9209      	str	r2, [sp, #36]	; 0x24
 8010dbc:	0022      	movs	r2, r4
 8010dbe:	3a30      	subs	r2, #48	; 0x30
 8010dc0:	2a09      	cmp	r2, #9
 8010dc2:	d82b      	bhi.n	8010e1c <_strtoll_l.constprop.0+0xe0>
 8010dc4:	0014      	movs	r4, r2
 8010dc6:	42a6      	cmp	r6, r4
 8010dc8:	dd37      	ble.n	8010e3a <_strtoll_l.constprop.0+0xfe>
 8010dca:	1c5a      	adds	r2, r3, #1
 8010dcc:	d01d      	beq.n	8010e0a <_strtoll_l.constprop.0+0xce>
 8010dce:	42b9      	cmp	r1, r7
 8010dd0:	d830      	bhi.n	8010e34 <_strtoll_l.constprop.0+0xf8>
 8010dd2:	d102      	bne.n	8010dda <_strtoll_l.constprop.0+0x9e>
 8010dd4:	9b08      	ldr	r3, [sp, #32]
 8010dd6:	4298      	cmp	r0, r3
 8010dd8:	d82c      	bhi.n	8010e34 <_strtoll_l.constprop.0+0xf8>
 8010dda:	9b08      	ldr	r3, [sp, #32]
 8010ddc:	4283      	cmp	r3, r0
 8010dde:	d106      	bne.n	8010dee <_strtoll_l.constprop.0+0xb2>
 8010de0:	428f      	cmp	r7, r1
 8010de2:	d104      	bne.n	8010dee <_strtoll_l.constprop.0+0xb2>
 8010de4:	2301      	movs	r3, #1
 8010de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010de8:	425b      	negs	r3, r3
 8010dea:	42a2      	cmp	r2, r4
 8010dec:	db0d      	blt.n	8010e0a <_strtoll_l.constprop.0+0xce>
 8010dee:	000b      	movs	r3, r1
 8010df0:	0002      	movs	r2, r0
 8010df2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010df4:	0030      	movs	r0, r6
 8010df6:	f7ef fb75 	bl	80004e4 <__aeabi_lmul>
 8010dfa:	17e3      	asrs	r3, r4, #31
 8010dfc:	9406      	str	r4, [sp, #24]
 8010dfe:	9307      	str	r3, [sp, #28]
 8010e00:	9b06      	ldr	r3, [sp, #24]
 8010e02:	9c07      	ldr	r4, [sp, #28]
 8010e04:	18c0      	adds	r0, r0, r3
 8010e06:	4161      	adcs	r1, r4
 8010e08:	2301      	movs	r3, #1
 8010e0a:	782c      	ldrb	r4, [r5, #0]
 8010e0c:	3501      	adds	r5, #1
 8010e0e:	e7d5      	b.n	8010dbc <_strtoll_l.constprop.0+0x80>
 8010e10:	9701      	str	r7, [sp, #4]
 8010e12:	2c2b      	cmp	r4, #43	; 0x2b
 8010e14:	d1ac      	bne.n	8010d70 <_strtoll_l.constprop.0+0x34>
 8010e16:	781c      	ldrb	r4, [r3, #0]
 8010e18:	1c95      	adds	r5, r2, #2
 8010e1a:	e7a9      	b.n	8010d70 <_strtoll_l.constprop.0+0x34>
 8010e1c:	0022      	movs	r2, r4
 8010e1e:	3a41      	subs	r2, #65	; 0x41
 8010e20:	2a19      	cmp	r2, #25
 8010e22:	d801      	bhi.n	8010e28 <_strtoll_l.constprop.0+0xec>
 8010e24:	3c37      	subs	r4, #55	; 0x37
 8010e26:	e7ce      	b.n	8010dc6 <_strtoll_l.constprop.0+0x8a>
 8010e28:	0022      	movs	r2, r4
 8010e2a:	3a61      	subs	r2, #97	; 0x61
 8010e2c:	2a19      	cmp	r2, #25
 8010e2e:	d804      	bhi.n	8010e3a <_strtoll_l.constprop.0+0xfe>
 8010e30:	3c57      	subs	r4, #87	; 0x57
 8010e32:	e7c8      	b.n	8010dc6 <_strtoll_l.constprop.0+0x8a>
 8010e34:	2301      	movs	r3, #1
 8010e36:	425b      	negs	r3, r3
 8010e38:	e7e7      	b.n	8010e0a <_strtoll_l.constprop.0+0xce>
 8010e3a:	1c5a      	adds	r2, r3, #1
 8010e3c:	d109      	bne.n	8010e52 <_strtoll_l.constprop.0+0x116>
 8010e3e:	9804      	ldr	r0, [sp, #16]
 8010e40:	9905      	ldr	r1, [sp, #20]
 8010e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e44:	3323      	adds	r3, #35	; 0x23
 8010e46:	6013      	str	r3, [r2, #0]
 8010e48:	9b03      	ldr	r3, [sp, #12]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d10e      	bne.n	8010e6c <_strtoll_l.constprop.0+0x130>
 8010e4e:	b00d      	add	sp, #52	; 0x34
 8010e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e52:	9a01      	ldr	r2, [sp, #4]
 8010e54:	2a00      	cmp	r2, #0
 8010e56:	d004      	beq.n	8010e62 <_strtoll_l.constprop.0+0x126>
 8010e58:	0006      	movs	r6, r0
 8010e5a:	000f      	movs	r7, r1
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	4270      	negs	r0, r6
 8010e60:	41b9      	sbcs	r1, r7
 8010e62:	9a03      	ldr	r2, [sp, #12]
 8010e64:	2a00      	cmp	r2, #0
 8010e66:	d0f2      	beq.n	8010e4e <_strtoll_l.constprop.0+0x112>
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d001      	beq.n	8010e70 <_strtoll_l.constprop.0+0x134>
 8010e6c:	1e6b      	subs	r3, r5, #1
 8010e6e:	9302      	str	r3, [sp, #8]
 8010e70:	9b03      	ldr	r3, [sp, #12]
 8010e72:	9a02      	ldr	r2, [sp, #8]
 8010e74:	601a      	str	r2, [r3, #0]
 8010e76:	e7ea      	b.n	8010e4e <_strtoll_l.constprop.0+0x112>
 8010e78:	2430      	movs	r4, #48	; 0x30
 8010e7a:	2e00      	cmp	r6, #0
 8010e7c:	d000      	beq.n	8010e80 <_strtoll_l.constprop.0+0x144>
 8010e7e:	e787      	b.n	8010d90 <_strtoll_l.constprop.0+0x54>
 8010e80:	3608      	adds	r6, #8
 8010e82:	e785      	b.n	8010d90 <_strtoll_l.constprop.0+0x54>
 8010e84:	2c30      	cmp	r4, #48	; 0x30
 8010e86:	d100      	bne.n	8010e8a <_strtoll_l.constprop.0+0x14e>
 8010e88:	e779      	b.n	8010d7e <_strtoll_l.constprop.0+0x42>
 8010e8a:	260a      	movs	r6, #10
 8010e8c:	e780      	b.n	8010d90 <_strtoll_l.constprop.0+0x54>
 8010e8e:	46c0      	nop			; (mov r8, r8)
 8010e90:	08013fa9 	.word	0x08013fa9
 8010e94:	7fffffff 	.word	0x7fffffff

08010e98 <_strtoll_r>:
 8010e98:	b510      	push	{r4, lr}
 8010e9a:	f7ff ff4f 	bl	8010d3c <_strtoll_l.constprop.0>
 8010e9e:	bd10      	pop	{r4, pc}

08010ea0 <_strtoull_l.constprop.0>:
 8010ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ea2:	b08b      	sub	sp, #44	; 0x2c
 8010ea4:	9202      	str	r2, [sp, #8]
 8010ea6:	4a54      	ldr	r2, [pc, #336]	; (8010ff8 <_strtoull_l.constprop.0+0x158>)
 8010ea8:	001e      	movs	r6, r3
 8010eaa:	9101      	str	r1, [sp, #4]
 8010eac:	000b      	movs	r3, r1
 8010eae:	4694      	mov	ip, r2
 8010eb0:	2108      	movs	r1, #8
 8010eb2:	9009      	str	r0, [sp, #36]	; 0x24
 8010eb4:	001a      	movs	r2, r3
 8010eb6:	4660      	mov	r0, ip
 8010eb8:	7814      	ldrb	r4, [r2, #0]
 8010eba:	3301      	adds	r3, #1
 8010ebc:	5d00      	ldrb	r0, [r0, r4]
 8010ebe:	001d      	movs	r5, r3
 8010ec0:	0007      	movs	r7, r0
 8010ec2:	400f      	ands	r7, r1
 8010ec4:	4208      	tst	r0, r1
 8010ec6:	d1f5      	bne.n	8010eb4 <_strtoull_l.constprop.0+0x14>
 8010ec8:	2c2d      	cmp	r4, #45	; 0x2d
 8010eca:	d154      	bne.n	8010f76 <_strtoull_l.constprop.0+0xd6>
 8010ecc:	781c      	ldrb	r4, [r3, #0]
 8010ece:	2301      	movs	r3, #1
 8010ed0:	1c95      	adds	r5, r2, #2
 8010ed2:	9306      	str	r3, [sp, #24]
 8010ed4:	2e00      	cmp	r6, #0
 8010ed6:	d100      	bne.n	8010eda <_strtoull_l.constprop.0+0x3a>
 8010ed8:	e088      	b.n	8010fec <_strtoull_l.constprop.0+0x14c>
 8010eda:	2e10      	cmp	r6, #16
 8010edc:	d10a      	bne.n	8010ef4 <_strtoull_l.constprop.0+0x54>
 8010ede:	2c30      	cmp	r4, #48	; 0x30
 8010ee0:	d108      	bne.n	8010ef4 <_strtoull_l.constprop.0+0x54>
 8010ee2:	2220      	movs	r2, #32
 8010ee4:	782b      	ldrb	r3, [r5, #0]
 8010ee6:	4393      	bics	r3, r2
 8010ee8:	2b58      	cmp	r3, #88	; 0x58
 8010eea:	d000      	beq.n	8010eee <_strtoull_l.constprop.0+0x4e>
 8010eec:	e078      	b.n	8010fe0 <_strtoull_l.constprop.0+0x140>
 8010eee:	2610      	movs	r6, #16
 8010ef0:	786c      	ldrb	r4, [r5, #1]
 8010ef2:	3502      	adds	r5, #2
 8010ef4:	17f7      	asrs	r7, r6, #31
 8010ef6:	0032      	movs	r2, r6
 8010ef8:	003b      	movs	r3, r7
 8010efa:	2001      	movs	r0, #1
 8010efc:	4240      	negs	r0, r0
 8010efe:	17c1      	asrs	r1, r0, #31
 8010f00:	f7ef fad0 	bl	80004a4 <__aeabi_uldivmod>
 8010f04:	0032      	movs	r2, r6
 8010f06:	9007      	str	r0, [sp, #28]
 8010f08:	9103      	str	r1, [sp, #12]
 8010f0a:	003b      	movs	r3, r7
 8010f0c:	2001      	movs	r0, #1
 8010f0e:	4240      	negs	r0, r0
 8010f10:	17c1      	asrs	r1, r0, #31
 8010f12:	f7ef fac7 	bl	80004a4 <__aeabi_uldivmod>
 8010f16:	2300      	movs	r3, #0
 8010f18:	2000      	movs	r0, #0
 8010f1a:	2100      	movs	r1, #0
 8010f1c:	9208      	str	r2, [sp, #32]
 8010f1e:	0022      	movs	r2, r4
 8010f20:	3a30      	subs	r2, #48	; 0x30
 8010f22:	2a09      	cmp	r2, #9
 8010f24:	d82d      	bhi.n	8010f82 <_strtoull_l.constprop.0+0xe2>
 8010f26:	0014      	movs	r4, r2
 8010f28:	42a6      	cmp	r6, r4
 8010f2a:	dd39      	ble.n	8010fa0 <_strtoull_l.constprop.0+0x100>
 8010f2c:	1c5a      	adds	r2, r3, #1
 8010f2e:	d01f      	beq.n	8010f70 <_strtoull_l.constprop.0+0xd0>
 8010f30:	9b03      	ldr	r3, [sp, #12]
 8010f32:	4299      	cmp	r1, r3
 8010f34:	d831      	bhi.n	8010f9a <_strtoull_l.constprop.0+0xfa>
 8010f36:	d102      	bne.n	8010f3e <_strtoull_l.constprop.0+0x9e>
 8010f38:	9b07      	ldr	r3, [sp, #28]
 8010f3a:	4298      	cmp	r0, r3
 8010f3c:	d82d      	bhi.n	8010f9a <_strtoull_l.constprop.0+0xfa>
 8010f3e:	9b07      	ldr	r3, [sp, #28]
 8010f40:	4283      	cmp	r3, r0
 8010f42:	d107      	bne.n	8010f54 <_strtoull_l.constprop.0+0xb4>
 8010f44:	9b03      	ldr	r3, [sp, #12]
 8010f46:	428b      	cmp	r3, r1
 8010f48:	d104      	bne.n	8010f54 <_strtoull_l.constprop.0+0xb4>
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	9a08      	ldr	r2, [sp, #32]
 8010f4e:	425b      	negs	r3, r3
 8010f50:	42a2      	cmp	r2, r4
 8010f52:	db0d      	blt.n	8010f70 <_strtoull_l.constprop.0+0xd0>
 8010f54:	000b      	movs	r3, r1
 8010f56:	0002      	movs	r2, r0
 8010f58:	0039      	movs	r1, r7
 8010f5a:	0030      	movs	r0, r6
 8010f5c:	f7ef fac2 	bl	80004e4 <__aeabi_lmul>
 8010f60:	17e3      	asrs	r3, r4, #31
 8010f62:	9404      	str	r4, [sp, #16]
 8010f64:	9305      	str	r3, [sp, #20]
 8010f66:	9b04      	ldr	r3, [sp, #16]
 8010f68:	9c05      	ldr	r4, [sp, #20]
 8010f6a:	18c0      	adds	r0, r0, r3
 8010f6c:	4161      	adcs	r1, r4
 8010f6e:	2301      	movs	r3, #1
 8010f70:	782c      	ldrb	r4, [r5, #0]
 8010f72:	3501      	adds	r5, #1
 8010f74:	e7d3      	b.n	8010f1e <_strtoull_l.constprop.0+0x7e>
 8010f76:	9706      	str	r7, [sp, #24]
 8010f78:	2c2b      	cmp	r4, #43	; 0x2b
 8010f7a:	d1ab      	bne.n	8010ed4 <_strtoull_l.constprop.0+0x34>
 8010f7c:	781c      	ldrb	r4, [r3, #0]
 8010f7e:	1c95      	adds	r5, r2, #2
 8010f80:	e7a8      	b.n	8010ed4 <_strtoull_l.constprop.0+0x34>
 8010f82:	0022      	movs	r2, r4
 8010f84:	3a41      	subs	r2, #65	; 0x41
 8010f86:	2a19      	cmp	r2, #25
 8010f88:	d801      	bhi.n	8010f8e <_strtoull_l.constprop.0+0xee>
 8010f8a:	3c37      	subs	r4, #55	; 0x37
 8010f8c:	e7cc      	b.n	8010f28 <_strtoull_l.constprop.0+0x88>
 8010f8e:	0022      	movs	r2, r4
 8010f90:	3a61      	subs	r2, #97	; 0x61
 8010f92:	2a19      	cmp	r2, #25
 8010f94:	d804      	bhi.n	8010fa0 <_strtoull_l.constprop.0+0x100>
 8010f96:	3c57      	subs	r4, #87	; 0x57
 8010f98:	e7c6      	b.n	8010f28 <_strtoull_l.constprop.0+0x88>
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	425b      	negs	r3, r3
 8010f9e:	e7e7      	b.n	8010f70 <_strtoull_l.constprop.0+0xd0>
 8010fa0:	1c5a      	adds	r2, r3, #1
 8010fa2:	d10a      	bne.n	8010fba <_strtoull_l.constprop.0+0x11a>
 8010fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fa6:	3323      	adds	r3, #35	; 0x23
 8010fa8:	6013      	str	r3, [r2, #0]
 8010faa:	9b02      	ldr	r3, [sp, #8]
 8010fac:	2001      	movs	r0, #1
 8010fae:	4240      	negs	r0, r0
 8010fb0:	17c1      	asrs	r1, r0, #31
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d10e      	bne.n	8010fd4 <_strtoull_l.constprop.0+0x134>
 8010fb6:	b00b      	add	sp, #44	; 0x2c
 8010fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fba:	9a06      	ldr	r2, [sp, #24]
 8010fbc:	2a00      	cmp	r2, #0
 8010fbe:	d004      	beq.n	8010fca <_strtoull_l.constprop.0+0x12a>
 8010fc0:	0006      	movs	r6, r0
 8010fc2:	000f      	movs	r7, r1
 8010fc4:	2100      	movs	r1, #0
 8010fc6:	4270      	negs	r0, r6
 8010fc8:	41b9      	sbcs	r1, r7
 8010fca:	9a02      	ldr	r2, [sp, #8]
 8010fcc:	2a00      	cmp	r2, #0
 8010fce:	d0f2      	beq.n	8010fb6 <_strtoull_l.constprop.0+0x116>
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <_strtoull_l.constprop.0+0x138>
 8010fd4:	1e6b      	subs	r3, r5, #1
 8010fd6:	9301      	str	r3, [sp, #4]
 8010fd8:	9b02      	ldr	r3, [sp, #8]
 8010fda:	9a01      	ldr	r2, [sp, #4]
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	e7ea      	b.n	8010fb6 <_strtoull_l.constprop.0+0x116>
 8010fe0:	2430      	movs	r4, #48	; 0x30
 8010fe2:	2e00      	cmp	r6, #0
 8010fe4:	d000      	beq.n	8010fe8 <_strtoull_l.constprop.0+0x148>
 8010fe6:	e785      	b.n	8010ef4 <_strtoull_l.constprop.0+0x54>
 8010fe8:	3608      	adds	r6, #8
 8010fea:	e783      	b.n	8010ef4 <_strtoull_l.constprop.0+0x54>
 8010fec:	2c30      	cmp	r4, #48	; 0x30
 8010fee:	d100      	bne.n	8010ff2 <_strtoull_l.constprop.0+0x152>
 8010ff0:	e777      	b.n	8010ee2 <_strtoull_l.constprop.0+0x42>
 8010ff2:	260a      	movs	r6, #10
 8010ff4:	e77e      	b.n	8010ef4 <_strtoull_l.constprop.0+0x54>
 8010ff6:	46c0      	nop			; (mov r8, r8)
 8010ff8:	08013fa9 	.word	0x08013fa9

08010ffc <_strtoull_r>:
 8010ffc:	b510      	push	{r4, lr}
 8010ffe:	f7ff ff4f 	bl	8010ea0 <_strtoull_l.constprop.0>
 8011002:	bd10      	pop	{r4, pc}

08011004 <_mbrtowc_r>:
 8011004:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011006:	0004      	movs	r4, r0
 8011008:	0010      	movs	r0, r2
 801100a:	4a0b      	ldr	r2, [pc, #44]	; (8011038 <_mbrtowc_r+0x34>)
 801100c:	9d06      	ldr	r5, [sp, #24]
 801100e:	32e4      	adds	r2, #228	; 0xe4
 8011010:	6816      	ldr	r6, [r2, #0]
 8011012:	2800      	cmp	r0, #0
 8011014:	d10c      	bne.n	8011030 <_mbrtowc_r+0x2c>
 8011016:	2301      	movs	r3, #1
 8011018:	0001      	movs	r1, r0
 801101a:	4a08      	ldr	r2, [pc, #32]	; (801103c <_mbrtowc_r+0x38>)
 801101c:	9500      	str	r5, [sp, #0]
 801101e:	0020      	movs	r0, r4
 8011020:	47b0      	blx	r6
 8011022:	1c43      	adds	r3, r0, #1
 8011024:	d103      	bne.n	801102e <_mbrtowc_r+0x2a>
 8011026:	2300      	movs	r3, #0
 8011028:	602b      	str	r3, [r5, #0]
 801102a:	338a      	adds	r3, #138	; 0x8a
 801102c:	6023      	str	r3, [r4, #0]
 801102e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011030:	0002      	movs	r2, r0
 8011032:	9500      	str	r5, [sp, #0]
 8011034:	e7f3      	b.n	801101e <_mbrtowc_r+0x1a>
 8011036:	46c0      	nop			; (mov r8, r8)
 8011038:	20000448 	.word	0x20000448
 801103c:	08014333 	.word	0x08014333

08011040 <iswspace>:
 8011040:	b510      	push	{r4, lr}
 8011042:	2100      	movs	r1, #0
 8011044:	f000 f802 	bl	801104c <iswspace_l>
 8011048:	bd10      	pop	{r4, pc}
	...

0801104c <iswspace_l>:
 801104c:	0003      	movs	r3, r0
 801104e:	2000      	movs	r0, #0
 8011050:	2bff      	cmp	r3, #255	; 0xff
 8011052:	d803      	bhi.n	801105c <iswspace_l+0x10>
 8011054:	4a02      	ldr	r2, [pc, #8]	; (8011060 <iswspace_l+0x14>)
 8011056:	5cd0      	ldrb	r0, [r2, r3]
 8011058:	2308      	movs	r3, #8
 801105a:	4018      	ands	r0, r3
 801105c:	4770      	bx	lr
 801105e:	46c0      	nop			; (mov r8, r8)
 8011060:	08013fa9 	.word	0x08013fa9

08011064 <fiprintf>:
 8011064:	b40e      	push	{r1, r2, r3}
 8011066:	b517      	push	{r0, r1, r2, r4, lr}
 8011068:	4c05      	ldr	r4, [pc, #20]	; (8011080 <fiprintf+0x1c>)
 801106a:	ab05      	add	r3, sp, #20
 801106c:	cb04      	ldmia	r3!, {r2}
 801106e:	0001      	movs	r1, r0
 8011070:	6820      	ldr	r0, [r4, #0]
 8011072:	9301      	str	r3, [sp, #4]
 8011074:	f000 f954 	bl	8011320 <_vfiprintf_r>
 8011078:	bc1e      	pop	{r1, r2, r3, r4}
 801107a:	bc08      	pop	{r3}
 801107c:	b003      	add	sp, #12
 801107e:	4718      	bx	r3
 8011080:	200006d8 	.word	0x200006d8

08011084 <__ssprint_r>:
 8011084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011086:	6813      	ldr	r3, [r2, #0]
 8011088:	b087      	sub	sp, #28
 801108a:	0017      	movs	r7, r2
 801108c:	9303      	str	r3, [sp, #12]
 801108e:	6893      	ldr	r3, [r2, #8]
 8011090:	2200      	movs	r2, #0
 8011092:	000c      	movs	r4, r1
 8011094:	9005      	str	r0, [sp, #20]
 8011096:	9202      	str	r2, [sp, #8]
 8011098:	9201      	str	r2, [sp, #4]
 801109a:	4293      	cmp	r3, r2
 801109c:	d10d      	bne.n	80110ba <__ssprint_r+0x36>
 801109e:	2000      	movs	r0, #0
 80110a0:	2300      	movs	r3, #0
 80110a2:	607b      	str	r3, [r7, #4]
 80110a4:	b007      	add	sp, #28
 80110a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110a8:	9b03      	ldr	r3, [sp, #12]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	9302      	str	r3, [sp, #8]
 80110ae:	9b03      	ldr	r3, [sp, #12]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	9301      	str	r3, [sp, #4]
 80110b4:	9b03      	ldr	r3, [sp, #12]
 80110b6:	3308      	adds	r3, #8
 80110b8:	9303      	str	r3, [sp, #12]
 80110ba:	9a01      	ldr	r2, [sp, #4]
 80110bc:	68a6      	ldr	r6, [r4, #8]
 80110be:	6823      	ldr	r3, [r4, #0]
 80110c0:	2a00      	cmp	r2, #0
 80110c2:	d0f1      	beq.n	80110a8 <__ssprint_r+0x24>
 80110c4:	42b2      	cmp	r2, r6
 80110c6:	d32e      	bcc.n	8011126 <__ssprint_r+0xa2>
 80110c8:	2190      	movs	r1, #144	; 0x90
 80110ca:	89a2      	ldrh	r2, [r4, #12]
 80110cc:	00c9      	lsls	r1, r1, #3
 80110ce:	420a      	tst	r2, r1
 80110d0:	d029      	beq.n	8011126 <__ssprint_r+0xa2>
 80110d2:	2003      	movs	r0, #3
 80110d4:	6921      	ldr	r1, [r4, #16]
 80110d6:	1a5b      	subs	r3, r3, r1
 80110d8:	9304      	str	r3, [sp, #16]
 80110da:	6963      	ldr	r3, [r4, #20]
 80110dc:	4343      	muls	r3, r0
 80110de:	0fdd      	lsrs	r5, r3, #31
 80110e0:	18ed      	adds	r5, r5, r3
 80110e2:	9b04      	ldr	r3, [sp, #16]
 80110e4:	9801      	ldr	r0, [sp, #4]
 80110e6:	3301      	adds	r3, #1
 80110e8:	181b      	adds	r3, r3, r0
 80110ea:	106d      	asrs	r5, r5, #1
 80110ec:	42ab      	cmp	r3, r5
 80110ee:	d900      	bls.n	80110f2 <__ssprint_r+0x6e>
 80110f0:	001d      	movs	r5, r3
 80110f2:	0552      	lsls	r2, r2, #21
 80110f4:	d532      	bpl.n	801115c <__ssprint_r+0xd8>
 80110f6:	0029      	movs	r1, r5
 80110f8:	9805      	ldr	r0, [sp, #20]
 80110fa:	f7f9 fa35 	bl	800a568 <_malloc_r>
 80110fe:	1e06      	subs	r6, r0, #0
 8011100:	d036      	beq.n	8011170 <__ssprint_r+0xec>
 8011102:	9a04      	ldr	r2, [sp, #16]
 8011104:	6921      	ldr	r1, [r4, #16]
 8011106:	f7fa fd94 	bl	800bc32 <memcpy>
 801110a:	89a2      	ldrh	r2, [r4, #12]
 801110c:	4b1e      	ldr	r3, [pc, #120]	; (8011188 <__ssprint_r+0x104>)
 801110e:	401a      	ands	r2, r3
 8011110:	2380      	movs	r3, #128	; 0x80
 8011112:	4313      	orrs	r3, r2
 8011114:	81a3      	strh	r3, [r4, #12]
 8011116:	9b04      	ldr	r3, [sp, #16]
 8011118:	6126      	str	r6, [r4, #16]
 801111a:	18f6      	adds	r6, r6, r3
 801111c:	6026      	str	r6, [r4, #0]
 801111e:	6165      	str	r5, [r4, #20]
 8011120:	9e01      	ldr	r6, [sp, #4]
 8011122:	1aed      	subs	r5, r5, r3
 8011124:	60a5      	str	r5, [r4, #8]
 8011126:	9b01      	ldr	r3, [sp, #4]
 8011128:	429e      	cmp	r6, r3
 801112a:	d900      	bls.n	801112e <__ssprint_r+0xaa>
 801112c:	001e      	movs	r6, r3
 801112e:	0032      	movs	r2, r6
 8011130:	9902      	ldr	r1, [sp, #8]
 8011132:	6820      	ldr	r0, [r4, #0]
 8011134:	f001 f86d 	bl	8012212 <memmove>
 8011138:	9a01      	ldr	r2, [sp, #4]
 801113a:	68a3      	ldr	r3, [r4, #8]
 801113c:	4694      	mov	ip, r2
 801113e:	1b9b      	subs	r3, r3, r6
 8011140:	60a3      	str	r3, [r4, #8]
 8011142:	6823      	ldr	r3, [r4, #0]
 8011144:	199b      	adds	r3, r3, r6
 8011146:	6023      	str	r3, [r4, #0]
 8011148:	9b02      	ldr	r3, [sp, #8]
 801114a:	4463      	add	r3, ip
 801114c:	9302      	str	r3, [sp, #8]
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	1a9b      	subs	r3, r3, r2
 8011152:	60bb      	str	r3, [r7, #8]
 8011154:	d0a3      	beq.n	801109e <__ssprint_r+0x1a>
 8011156:	2300      	movs	r3, #0
 8011158:	9301      	str	r3, [sp, #4]
 801115a:	e7ae      	b.n	80110ba <__ssprint_r+0x36>
 801115c:	002a      	movs	r2, r5
 801115e:	9805      	ldr	r0, [sp, #20]
 8011160:	f7ff fbc0 	bl	80108e4 <_realloc_r>
 8011164:	1e06      	subs	r6, r0, #0
 8011166:	d1d6      	bne.n	8011116 <__ssprint_r+0x92>
 8011168:	6921      	ldr	r1, [r4, #16]
 801116a:	9805      	ldr	r0, [sp, #20]
 801116c:	f7fa fddc 	bl	800bd28 <_free_r>
 8011170:	230c      	movs	r3, #12
 8011172:	9a05      	ldr	r2, [sp, #20]
 8011174:	2001      	movs	r0, #1
 8011176:	6013      	str	r3, [r2, #0]
 8011178:	89a2      	ldrh	r2, [r4, #12]
 801117a:	3334      	adds	r3, #52	; 0x34
 801117c:	4313      	orrs	r3, r2
 801117e:	81a3      	strh	r3, [r4, #12]
 8011180:	2300      	movs	r3, #0
 8011182:	4240      	negs	r0, r0
 8011184:	60bb      	str	r3, [r7, #8]
 8011186:	e78b      	b.n	80110a0 <__ssprint_r+0x1c>
 8011188:	fffffb7f 	.word	0xfffffb7f

0801118c <_sungetc_r>:
 801118c:	b570      	push	{r4, r5, r6, lr}
 801118e:	0014      	movs	r4, r2
 8011190:	1c4b      	adds	r3, r1, #1
 8011192:	d103      	bne.n	801119c <_sungetc_r+0x10>
 8011194:	2501      	movs	r5, #1
 8011196:	426d      	negs	r5, r5
 8011198:	0028      	movs	r0, r5
 801119a:	bd70      	pop	{r4, r5, r6, pc}
 801119c:	8993      	ldrh	r3, [r2, #12]
 801119e:	2220      	movs	r2, #32
 80111a0:	4393      	bics	r3, r2
 80111a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80111a4:	81a3      	strh	r3, [r4, #12]
 80111a6:	b2ce      	uxtb	r6, r1
 80111a8:	6863      	ldr	r3, [r4, #4]
 80111aa:	b2cd      	uxtb	r5, r1
 80111ac:	2a00      	cmp	r2, #0
 80111ae:	d010      	beq.n	80111d2 <_sungetc_r+0x46>
 80111b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80111b2:	429a      	cmp	r2, r3
 80111b4:	dd07      	ble.n	80111c6 <_sungetc_r+0x3a>
 80111b6:	6823      	ldr	r3, [r4, #0]
 80111b8:	3b01      	subs	r3, #1
 80111ba:	6023      	str	r3, [r4, #0]
 80111bc:	701e      	strb	r6, [r3, #0]
 80111be:	6863      	ldr	r3, [r4, #4]
 80111c0:	3301      	adds	r3, #1
 80111c2:	6063      	str	r3, [r4, #4]
 80111c4:	e7e8      	b.n	8011198 <_sungetc_r+0xc>
 80111c6:	0021      	movs	r1, r4
 80111c8:	f000 ff1a 	bl	8012000 <__submore>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d0f2      	beq.n	80111b6 <_sungetc_r+0x2a>
 80111d0:	e7e0      	b.n	8011194 <_sungetc_r+0x8>
 80111d2:	6921      	ldr	r1, [r4, #16]
 80111d4:	6822      	ldr	r2, [r4, #0]
 80111d6:	2900      	cmp	r1, #0
 80111d8:	d007      	beq.n	80111ea <_sungetc_r+0x5e>
 80111da:	4291      	cmp	r1, r2
 80111dc:	d205      	bcs.n	80111ea <_sungetc_r+0x5e>
 80111de:	1e51      	subs	r1, r2, #1
 80111e0:	7808      	ldrb	r0, [r1, #0]
 80111e2:	42a8      	cmp	r0, r5
 80111e4:	d101      	bne.n	80111ea <_sungetc_r+0x5e>
 80111e6:	6021      	str	r1, [r4, #0]
 80111e8:	e7ea      	b.n	80111c0 <_sungetc_r+0x34>
 80111ea:	63e3      	str	r3, [r4, #60]	; 0x3c
 80111ec:	0023      	movs	r3, r4
 80111ee:	3340      	adds	r3, #64	; 0x40
 80111f0:	6323      	str	r3, [r4, #48]	; 0x30
 80111f2:	2303      	movs	r3, #3
 80111f4:	6363      	str	r3, [r4, #52]	; 0x34
 80111f6:	0023      	movs	r3, r4
 80111f8:	3342      	adds	r3, #66	; 0x42
 80111fa:	63a2      	str	r2, [r4, #56]	; 0x38
 80111fc:	701e      	strb	r6, [r3, #0]
 80111fe:	6023      	str	r3, [r4, #0]
 8011200:	2301      	movs	r3, #1
 8011202:	e7de      	b.n	80111c2 <_sungetc_r+0x36>

08011204 <__ssrefill_r>:
 8011204:	b510      	push	{r4, lr}
 8011206:	000c      	movs	r4, r1
 8011208:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801120a:	2900      	cmp	r1, #0
 801120c:	d00e      	beq.n	801122c <__ssrefill_r+0x28>
 801120e:	0023      	movs	r3, r4
 8011210:	3340      	adds	r3, #64	; 0x40
 8011212:	4299      	cmp	r1, r3
 8011214:	d001      	beq.n	801121a <__ssrefill_r+0x16>
 8011216:	f7fa fd87 	bl	800bd28 <_free_r>
 801121a:	2000      	movs	r0, #0
 801121c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801121e:	6320      	str	r0, [r4, #48]	; 0x30
 8011220:	6063      	str	r3, [r4, #4]
 8011222:	4283      	cmp	r3, r0
 8011224:	d002      	beq.n	801122c <__ssrefill_r+0x28>
 8011226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011228:	6023      	str	r3, [r4, #0]
 801122a:	bd10      	pop	{r4, pc}
 801122c:	6923      	ldr	r3, [r4, #16]
 801122e:	2001      	movs	r0, #1
 8011230:	6023      	str	r3, [r4, #0]
 8011232:	2300      	movs	r3, #0
 8011234:	89a2      	ldrh	r2, [r4, #12]
 8011236:	6063      	str	r3, [r4, #4]
 8011238:	3320      	adds	r3, #32
 801123a:	4313      	orrs	r3, r2
 801123c:	81a3      	strh	r3, [r4, #12]
 801123e:	4240      	negs	r0, r0
 8011240:	e7f3      	b.n	801122a <__ssrefill_r+0x26>

08011242 <_sfread_r>:
 8011242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011244:	0014      	movs	r4, r2
 8011246:	435c      	muls	r4, r3
 8011248:	b087      	sub	sp, #28
 801124a:	1e26      	subs	r6, r4, #0
 801124c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801124e:	9005      	str	r0, [sp, #20]
 8011250:	9101      	str	r1, [sp, #4]
 8011252:	9202      	str	r2, [sp, #8]
 8011254:	9303      	str	r3, [sp, #12]
 8011256:	d11e      	bne.n	8011296 <_sfread_r+0x54>
 8011258:	0020      	movs	r0, r4
 801125a:	b007      	add	sp, #28
 801125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801125e:	003a      	movs	r2, r7
 8011260:	9801      	ldr	r0, [sp, #4]
 8011262:	f7fa fce6 	bl	800bc32 <memcpy>
 8011266:	682b      	ldr	r3, [r5, #0]
 8011268:	0029      	movs	r1, r5
 801126a:	19db      	adds	r3, r3, r7
 801126c:	602b      	str	r3, [r5, #0]
 801126e:	2300      	movs	r3, #0
 8011270:	606b      	str	r3, [r5, #4]
 8011272:	9b01      	ldr	r3, [sp, #4]
 8011274:	9805      	ldr	r0, [sp, #20]
 8011276:	19db      	adds	r3, r3, r7
 8011278:	9301      	str	r3, [sp, #4]
 801127a:	1bf3      	subs	r3, r6, r7
 801127c:	9304      	str	r3, [sp, #16]
 801127e:	f7ff ffc1 	bl	8011204 <__ssrefill_r>
 8011282:	2800      	cmp	r0, #0
 8011284:	d006      	beq.n	8011294 <_sfread_r+0x52>
 8011286:	193c      	adds	r4, r7, r4
 8011288:	1ba0      	subs	r0, r4, r6
 801128a:	9902      	ldr	r1, [sp, #8]
 801128c:	f7ee ff56 	bl	800013c <__udivsi3>
 8011290:	0004      	movs	r4, r0
 8011292:	e7e1      	b.n	8011258 <_sfread_r+0x16>
 8011294:	9e04      	ldr	r6, [sp, #16]
 8011296:	686f      	ldr	r7, [r5, #4]
 8011298:	6829      	ldr	r1, [r5, #0]
 801129a:	42b7      	cmp	r7, r6
 801129c:	d3df      	bcc.n	801125e <_sfread_r+0x1c>
 801129e:	0032      	movs	r2, r6
 80112a0:	9801      	ldr	r0, [sp, #4]
 80112a2:	f7fa fcc6 	bl	800bc32 <memcpy>
 80112a6:	686b      	ldr	r3, [r5, #4]
 80112a8:	9c03      	ldr	r4, [sp, #12]
 80112aa:	1b9b      	subs	r3, r3, r6
 80112ac:	606b      	str	r3, [r5, #4]
 80112ae:	682b      	ldr	r3, [r5, #0]
 80112b0:	199b      	adds	r3, r3, r6
 80112b2:	602b      	str	r3, [r5, #0]
 80112b4:	e7d0      	b.n	8011258 <_sfread_r+0x16>

080112b6 <__sprint_r>:
 80112b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b8:	6893      	ldr	r3, [r2, #8]
 80112ba:	b085      	sub	sp, #20
 80112bc:	9001      	str	r0, [sp, #4]
 80112be:	000d      	movs	r5, r1
 80112c0:	0014      	movs	r4, r2
 80112c2:	1e18      	subs	r0, r3, #0
 80112c4:	d018      	beq.n	80112f8 <__sprint_r+0x42>
 80112c6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80112c8:	049b      	lsls	r3, r3, #18
 80112ca:	d524      	bpl.n	8011316 <__sprint_r+0x60>
 80112cc:	6817      	ldr	r7, [r2, #0]
 80112ce:	2600      	movs	r6, #0
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	9302      	str	r3, [sp, #8]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	9300      	str	r3, [sp, #0]
 80112d8:	089b      	lsrs	r3, r3, #2
 80112da:	9303      	str	r3, [sp, #12]
 80112dc:	9b03      	ldr	r3, [sp, #12]
 80112de:	42b3      	cmp	r3, r6
 80112e0:	dc0e      	bgt.n	8011300 <__sprint_r+0x4a>
 80112e2:	2203      	movs	r2, #3
 80112e4:	9b00      	ldr	r3, [sp, #0]
 80112e6:	68a0      	ldr	r0, [r4, #8]
 80112e8:	4393      	bics	r3, r2
 80112ea:	1ac0      	subs	r0, r0, r3
 80112ec:	60a0      	str	r0, [r4, #8]
 80112ee:	3708      	adds	r7, #8
 80112f0:	2800      	cmp	r0, #0
 80112f2:	d1ec      	bne.n	80112ce <__sprint_r+0x18>
 80112f4:	2300      	movs	r3, #0
 80112f6:	60a3      	str	r3, [r4, #8]
 80112f8:	2300      	movs	r3, #0
 80112fa:	6063      	str	r3, [r4, #4]
 80112fc:	b005      	add	sp, #20
 80112fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011300:	9902      	ldr	r1, [sp, #8]
 8011302:	00b3      	lsls	r3, r6, #2
 8011304:	58c9      	ldr	r1, [r1, r3]
 8011306:	002a      	movs	r2, r5
 8011308:	9801      	ldr	r0, [sp, #4]
 801130a:	f000 ff59 	bl	80121c0 <_fputwc_r>
 801130e:	1c43      	adds	r3, r0, #1
 8011310:	d0f0      	beq.n	80112f4 <__sprint_r+0x3e>
 8011312:	3601      	adds	r6, #1
 8011314:	e7e2      	b.n	80112dc <__sprint_r+0x26>
 8011316:	9801      	ldr	r0, [sp, #4]
 8011318:	f000 fd14 	bl	8011d44 <__sfvwrite_r>
 801131c:	e7ea      	b.n	80112f4 <__sprint_r+0x3e>
	...

08011320 <_vfiprintf_r>:
 8011320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011322:	b0c1      	sub	sp, #260	; 0x104
 8011324:	001c      	movs	r4, r3
 8011326:	001f      	movs	r7, r3
 8011328:	9006      	str	r0, [sp, #24]
 801132a:	9103      	str	r1, [sp, #12]
 801132c:	9207      	str	r2, [sp, #28]
 801132e:	2800      	cmp	r0, #0
 8011330:	d004      	beq.n	801133c <_vfiprintf_r+0x1c>
 8011332:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011334:	2b00      	cmp	r3, #0
 8011336:	d101      	bne.n	801133c <_vfiprintf_r+0x1c>
 8011338:	f7fa fa98 	bl	800b86c <__sinit>
 801133c:	9b03      	ldr	r3, [sp, #12]
 801133e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011340:	07db      	lsls	r3, r3, #31
 8011342:	d407      	bmi.n	8011354 <_vfiprintf_r+0x34>
 8011344:	9b03      	ldr	r3, [sp, #12]
 8011346:	899b      	ldrh	r3, [r3, #12]
 8011348:	059b      	lsls	r3, r3, #22
 801134a:	d403      	bmi.n	8011354 <_vfiprintf_r+0x34>
 801134c:	9b03      	ldr	r3, [sp, #12]
 801134e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011350:	f7fa fc62 	bl	800bc18 <__retarget_lock_acquire_recursive>
 8011354:	9b03      	ldr	r3, [sp, #12]
 8011356:	220c      	movs	r2, #12
 8011358:	5e9a      	ldrsh	r2, [r3, r2]
 801135a:	2380      	movs	r3, #128	; 0x80
 801135c:	019b      	lsls	r3, r3, #6
 801135e:	421a      	tst	r2, r3
 8011360:	d107      	bne.n	8011372 <_vfiprintf_r+0x52>
 8011362:	4313      	orrs	r3, r2
 8011364:	9a03      	ldr	r2, [sp, #12]
 8011366:	8193      	strh	r3, [r2, #12]
 8011368:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801136a:	4aa3      	ldr	r2, [pc, #652]	; (80115f8 <_vfiprintf_r+0x2d8>)
 801136c:	4013      	ands	r3, r2
 801136e:	9a03      	ldr	r2, [sp, #12]
 8011370:	6653      	str	r3, [r2, #100]	; 0x64
 8011372:	9b03      	ldr	r3, [sp, #12]
 8011374:	899b      	ldrh	r3, [r3, #12]
 8011376:	071b      	lsls	r3, r3, #28
 8011378:	d503      	bpl.n	8011382 <_vfiprintf_r+0x62>
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	691b      	ldr	r3, [r3, #16]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d118      	bne.n	80113b4 <_vfiprintf_r+0x94>
 8011382:	9903      	ldr	r1, [sp, #12]
 8011384:	9806      	ldr	r0, [sp, #24]
 8011386:	f000 fe79 	bl	801207c <__swsetup_r>
 801138a:	2800      	cmp	r0, #0
 801138c:	d012      	beq.n	80113b4 <_vfiprintf_r+0x94>
 801138e:	9b03      	ldr	r3, [sp, #12]
 8011390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011392:	07db      	lsls	r3, r3, #31
 8011394:	d505      	bpl.n	80113a2 <_vfiprintf_r+0x82>
 8011396:	2301      	movs	r3, #1
 8011398:	425b      	negs	r3, r3
 801139a:	9308      	str	r3, [sp, #32]
 801139c:	9808      	ldr	r0, [sp, #32]
 801139e:	b041      	add	sp, #260	; 0x104
 80113a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113a2:	9b03      	ldr	r3, [sp, #12]
 80113a4:	899b      	ldrh	r3, [r3, #12]
 80113a6:	059b      	lsls	r3, r3, #22
 80113a8:	d4f5      	bmi.n	8011396 <_vfiprintf_r+0x76>
 80113aa:	9b03      	ldr	r3, [sp, #12]
 80113ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80113ae:	f7fa fc34 	bl	800bc1a <__retarget_lock_release_recursive>
 80113b2:	e7f0      	b.n	8011396 <_vfiprintf_r+0x76>
 80113b4:	221a      	movs	r2, #26
 80113b6:	9b03      	ldr	r3, [sp, #12]
 80113b8:	899b      	ldrh	r3, [r3, #12]
 80113ba:	401a      	ands	r2, r3
 80113bc:	2a0a      	cmp	r2, #10
 80113be:	d116      	bne.n	80113ee <_vfiprintf_r+0xce>
 80113c0:	9a03      	ldr	r2, [sp, #12]
 80113c2:	210e      	movs	r1, #14
 80113c4:	5e52      	ldrsh	r2, [r2, r1]
 80113c6:	2a00      	cmp	r2, #0
 80113c8:	db11      	blt.n	80113ee <_vfiprintf_r+0xce>
 80113ca:	9a03      	ldr	r2, [sp, #12]
 80113cc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80113ce:	07d2      	lsls	r2, r2, #31
 80113d0:	d405      	bmi.n	80113de <_vfiprintf_r+0xbe>
 80113d2:	059b      	lsls	r3, r3, #22
 80113d4:	d403      	bmi.n	80113de <_vfiprintf_r+0xbe>
 80113d6:	9b03      	ldr	r3, [sp, #12]
 80113d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80113da:	f7fa fc1e 	bl	800bc1a <__retarget_lock_release_recursive>
 80113de:	0023      	movs	r3, r4
 80113e0:	9a07      	ldr	r2, [sp, #28]
 80113e2:	9903      	ldr	r1, [sp, #12]
 80113e4:	9806      	ldr	r0, [sp, #24]
 80113e6:	f000 fc69 	bl	8011cbc <__sbprintf>
 80113ea:	9008      	str	r0, [sp, #32]
 80113ec:	e7d6      	b.n	801139c <_vfiprintf_r+0x7c>
 80113ee:	2300      	movs	r3, #0
 80113f0:	ad17      	add	r5, sp, #92	; 0x5c
 80113f2:	9514      	str	r5, [sp, #80]	; 0x50
 80113f4:	9316      	str	r3, [sp, #88]	; 0x58
 80113f6:	9315      	str	r3, [sp, #84]	; 0x54
 80113f8:	930c      	str	r3, [sp, #48]	; 0x30
 80113fa:	930d      	str	r3, [sp, #52]	; 0x34
 80113fc:	930e      	str	r3, [sp, #56]	; 0x38
 80113fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011400:	9308      	str	r3, [sp, #32]
 8011402:	9c07      	ldr	r4, [sp, #28]
 8011404:	7823      	ldrb	r3, [r4, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d002      	beq.n	8011410 <_vfiprintf_r+0xf0>
 801140a:	2b25      	cmp	r3, #37	; 0x25
 801140c:	d000      	beq.n	8011410 <_vfiprintf_r+0xf0>
 801140e:	e08d      	b.n	801152c <_vfiprintf_r+0x20c>
 8011410:	9b07      	ldr	r3, [sp, #28]
 8011412:	1ae6      	subs	r6, r4, r3
 8011414:	429c      	cmp	r4, r3
 8011416:	d016      	beq.n	8011446 <_vfiprintf_r+0x126>
 8011418:	602b      	str	r3, [r5, #0]
 801141a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801141c:	606e      	str	r6, [r5, #4]
 801141e:	199b      	adds	r3, r3, r6
 8011420:	9316      	str	r3, [sp, #88]	; 0x58
 8011422:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011424:	3508      	adds	r5, #8
 8011426:	3301      	adds	r3, #1
 8011428:	9315      	str	r3, [sp, #84]	; 0x54
 801142a:	2b07      	cmp	r3, #7
 801142c:	dd08      	ble.n	8011440 <_vfiprintf_r+0x120>
 801142e:	9903      	ldr	r1, [sp, #12]
 8011430:	9806      	ldr	r0, [sp, #24]
 8011432:	aa14      	add	r2, sp, #80	; 0x50
 8011434:	f7ff ff3f 	bl	80112b6 <__sprint_r>
 8011438:	2800      	cmp	r0, #0
 801143a:	d000      	beq.n	801143e <_vfiprintf_r+0x11e>
 801143c:	e3d9      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 801143e:	ad17      	add	r5, sp, #92	; 0x5c
 8011440:	9b08      	ldr	r3, [sp, #32]
 8011442:	199b      	adds	r3, r3, r6
 8011444:	9308      	str	r3, [sp, #32]
 8011446:	7823      	ldrb	r3, [r4, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d101      	bne.n	8011450 <_vfiprintf_r+0x130>
 801144c:	f000 fbf6 	bl	8011c3c <_vfiprintf_r+0x91c>
 8011450:	2200      	movs	r2, #0
 8011452:	a912      	add	r1, sp, #72	; 0x48
 8011454:	70ca      	strb	r2, [r1, #3]
 8011456:	2101      	movs	r1, #1
 8011458:	1c63      	adds	r3, r4, #1
 801145a:	0014      	movs	r4, r2
 801145c:	4249      	negs	r1, r1
 801145e:	9105      	str	r1, [sp, #20]
 8011460:	9209      	str	r2, [sp, #36]	; 0x24
 8011462:	1c5a      	adds	r2, r3, #1
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	9207      	str	r2, [sp, #28]
 8011468:	0018      	movs	r0, r3
 801146a:	3820      	subs	r0, #32
 801146c:	285a      	cmp	r0, #90	; 0x5a
 801146e:	d900      	bls.n	8011472 <_vfiprintf_r+0x152>
 8011470:	e362      	b.n	8011b38 <_vfiprintf_r+0x818>
 8011472:	f7ee fe59 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011476:	0078      	.short	0x0078
 8011478:	03610361 	.word	0x03610361
 801147c:	03610081 	.word	0x03610081
 8011480:	03610361 	.word	0x03610361
 8011484:	0361005d 	.word	0x0361005d
 8011488:	00830361 	.word	0x00830361
 801148c:	0361008b 	.word	0x0361008b
 8011490:	008f0089 	.word	0x008f0089
 8011494:	00ad0361 	.word	0x00ad0361
 8011498:	00af00af 	.word	0x00af00af
 801149c:	00af00af 	.word	0x00af00af
 80114a0:	00af00af 	.word	0x00af00af
 80114a4:	00af00af 	.word	0x00af00af
 80114a8:	036100af 	.word	0x036100af
 80114ac:	03610361 	.word	0x03610361
 80114b0:	03610361 	.word	0x03610361
 80114b4:	03610361 	.word	0x03610361
 80114b8:	03610361 	.word	0x03610361
 80114bc:	00e600da 	.word	0x00e600da
 80114c0:	03610361 	.word	0x03610361
 80114c4:	03610361 	.word	0x03610361
 80114c8:	03610361 	.word	0x03610361
 80114cc:	03610361 	.word	0x03610361
 80114d0:	03610361 	.word	0x03610361
 80114d4:	03610143 	.word	0x03610143
 80114d8:	03610361 	.word	0x03610361
 80114dc:	03610182 	.word	0x03610182
 80114e0:	0361027c 	.word	0x0361027c
 80114e4:	02ae0361 	.word	0x02ae0361
 80114e8:	03610361 	.word	0x03610361
 80114ec:	03610361 	.word	0x03610361
 80114f0:	03610361 	.word	0x03610361
 80114f4:	03610361 	.word	0x03610361
 80114f8:	03610361 	.word	0x03610361
 80114fc:	00e800da 	.word	0x00e800da
 8011500:	03610361 	.word	0x03610361
 8011504:	00c30361 	.word	0x00c30361
 8011508:	00d600e8 	.word	0x00d600e8
 801150c:	00cf0361 	.word	0x00cf0361
 8011510:	01260361 	.word	0x01260361
 8011514:	01740145 	.word	0x01740145
 8011518:	036100d6 	.word	0x036100d6
 801151c:	007f0182 	.word	0x007f0182
 8011520:	0361027e 	.word	0x0361027e
 8011524:	02cd0361 	.word	0x02cd0361
 8011528:	007f0361 	.word	0x007f0361
 801152c:	3401      	adds	r4, #1
 801152e:	e769      	b.n	8011404 <_vfiprintf_r+0xe4>
 8011530:	9806      	ldr	r0, [sp, #24]
 8011532:	f7fe fa47 	bl	800f9c4 <_localeconv_r>
 8011536:	6843      	ldr	r3, [r0, #4]
 8011538:	0018      	movs	r0, r3
 801153a:	930f      	str	r3, [sp, #60]	; 0x3c
 801153c:	f7ee fde2 	bl	8000104 <strlen>
 8011540:	900e      	str	r0, [sp, #56]	; 0x38
 8011542:	9806      	ldr	r0, [sp, #24]
 8011544:	f7fe fa3e 	bl	800f9c4 <_localeconv_r>
 8011548:	6883      	ldr	r3, [r0, #8]
 801154a:	930d      	str	r3, [sp, #52]	; 0x34
 801154c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801154e:	2b00      	cmp	r3, #0
 8011550:	d010      	beq.n	8011574 <_vfiprintf_r+0x254>
 8011552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011554:	2b00      	cmp	r3, #0
 8011556:	d00d      	beq.n	8011574 <_vfiprintf_r+0x254>
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d00a      	beq.n	8011574 <_vfiprintf_r+0x254>
 801155e:	2380      	movs	r3, #128	; 0x80
 8011560:	00db      	lsls	r3, r3, #3
 8011562:	431c      	orrs	r4, r3
 8011564:	e006      	b.n	8011574 <_vfiprintf_r+0x254>
 8011566:	ab12      	add	r3, sp, #72	; 0x48
 8011568:	78da      	ldrb	r2, [r3, #3]
 801156a:	3303      	adds	r3, #3
 801156c:	2a00      	cmp	r2, #0
 801156e:	d101      	bne.n	8011574 <_vfiprintf_r+0x254>
 8011570:	3220      	adds	r2, #32
 8011572:	701a      	strb	r2, [r3, #0]
 8011574:	9b07      	ldr	r3, [sp, #28]
 8011576:	e774      	b.n	8011462 <_vfiprintf_r+0x142>
 8011578:	2301      	movs	r3, #1
 801157a:	e7f2      	b.n	8011562 <_vfiprintf_r+0x242>
 801157c:	cf08      	ldmia	r7!, {r3}
 801157e:	9309      	str	r3, [sp, #36]	; 0x24
 8011580:	2b00      	cmp	r3, #0
 8011582:	daf7      	bge.n	8011574 <_vfiprintf_r+0x254>
 8011584:	425b      	negs	r3, r3
 8011586:	9309      	str	r3, [sp, #36]	; 0x24
 8011588:	2304      	movs	r3, #4
 801158a:	e7ea      	b.n	8011562 <_vfiprintf_r+0x242>
 801158c:	222b      	movs	r2, #43	; 0x2b
 801158e:	ab12      	add	r3, sp, #72	; 0x48
 8011590:	70da      	strb	r2, [r3, #3]
 8011592:	e7ef      	b.n	8011574 <_vfiprintf_r+0x254>
 8011594:	9b07      	ldr	r3, [sp, #28]
 8011596:	1c5a      	adds	r2, r3, #1
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	2b2a      	cmp	r3, #42	; 0x2a
 801159c:	d00f      	beq.n	80115be <_vfiprintf_r+0x29e>
 801159e:	2100      	movs	r1, #0
 80115a0:	9105      	str	r1, [sp, #20]
 80115a2:	0019      	movs	r1, r3
 80115a4:	3930      	subs	r1, #48	; 0x30
 80115a6:	9207      	str	r2, [sp, #28]
 80115a8:	2909      	cmp	r1, #9
 80115aa:	d900      	bls.n	80115ae <_vfiprintf_r+0x28e>
 80115ac:	e75c      	b.n	8011468 <_vfiprintf_r+0x148>
 80115ae:	200a      	movs	r0, #10
 80115b0:	9b05      	ldr	r3, [sp, #20]
 80115b2:	4343      	muls	r3, r0
 80115b4:	185b      	adds	r3, r3, r1
 80115b6:	9305      	str	r3, [sp, #20]
 80115b8:	7813      	ldrb	r3, [r2, #0]
 80115ba:	3201      	adds	r2, #1
 80115bc:	e7f1      	b.n	80115a2 <_vfiprintf_r+0x282>
 80115be:	cf08      	ldmia	r7!, {r3}
 80115c0:	9305      	str	r3, [sp, #20]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	da02      	bge.n	80115cc <_vfiprintf_r+0x2ac>
 80115c6:	2301      	movs	r3, #1
 80115c8:	425b      	negs	r3, r3
 80115ca:	9305      	str	r3, [sp, #20]
 80115cc:	9207      	str	r2, [sp, #28]
 80115ce:	e7d1      	b.n	8011574 <_vfiprintf_r+0x254>
 80115d0:	2380      	movs	r3, #128	; 0x80
 80115d2:	e7c6      	b.n	8011562 <_vfiprintf_r+0x242>
 80115d4:	2100      	movs	r1, #0
 80115d6:	9a07      	ldr	r2, [sp, #28]
 80115d8:	9109      	str	r1, [sp, #36]	; 0x24
 80115da:	200a      	movs	r0, #10
 80115dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115de:	3b30      	subs	r3, #48	; 0x30
 80115e0:	4341      	muls	r1, r0
 80115e2:	185b      	adds	r3, r3, r1
 80115e4:	9309      	str	r3, [sp, #36]	; 0x24
 80115e6:	0013      	movs	r3, r2
 80115e8:	781b      	ldrb	r3, [r3, #0]
 80115ea:	3201      	adds	r2, #1
 80115ec:	0019      	movs	r1, r3
 80115ee:	3930      	subs	r1, #48	; 0x30
 80115f0:	9207      	str	r2, [sp, #28]
 80115f2:	2909      	cmp	r1, #9
 80115f4:	d9f1      	bls.n	80115da <_vfiprintf_r+0x2ba>
 80115f6:	e737      	b.n	8011468 <_vfiprintf_r+0x148>
 80115f8:	ffffdfff 	.word	0xffffdfff
 80115fc:	9b07      	ldr	r3, [sp, #28]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	2b68      	cmp	r3, #104	; 0x68
 8011602:	d105      	bne.n	8011610 <_vfiprintf_r+0x2f0>
 8011604:	9b07      	ldr	r3, [sp, #28]
 8011606:	3301      	adds	r3, #1
 8011608:	9307      	str	r3, [sp, #28]
 801160a:	2380      	movs	r3, #128	; 0x80
 801160c:	009b      	lsls	r3, r3, #2
 801160e:	e7a8      	b.n	8011562 <_vfiprintf_r+0x242>
 8011610:	2340      	movs	r3, #64	; 0x40
 8011612:	e7a6      	b.n	8011562 <_vfiprintf_r+0x242>
 8011614:	9b07      	ldr	r3, [sp, #28]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	2b6c      	cmp	r3, #108	; 0x6c
 801161a:	d104      	bne.n	8011626 <_vfiprintf_r+0x306>
 801161c:	9b07      	ldr	r3, [sp, #28]
 801161e:	3301      	adds	r3, #1
 8011620:	9307      	str	r3, [sp, #28]
 8011622:	2320      	movs	r3, #32
 8011624:	e79d      	b.n	8011562 <_vfiprintf_r+0x242>
 8011626:	2310      	movs	r3, #16
 8011628:	e79b      	b.n	8011562 <_vfiprintf_r+0x242>
 801162a:	003a      	movs	r2, r7
 801162c:	ca08      	ldmia	r2!, {r3}
 801162e:	ae27      	add	r6, sp, #156	; 0x9c
 8011630:	7033      	strb	r3, [r6, #0]
 8011632:	2300      	movs	r3, #0
 8011634:	9204      	str	r2, [sp, #16]
 8011636:	aa12      	add	r2, sp, #72	; 0x48
 8011638:	70d3      	strb	r3, [r2, #3]
 801163a:	2201      	movs	r2, #1
 801163c:	930b      	str	r3, [sp, #44]	; 0x2c
 801163e:	9205      	str	r2, [sp, #20]
 8011640:	e0b0      	b.n	80117a4 <_vfiprintf_r+0x484>
 8011642:	2310      	movs	r3, #16
 8011644:	431c      	orrs	r4, r3
 8011646:	06a3      	lsls	r3, r4, #26
 8011648:	d52a      	bpl.n	80116a0 <_vfiprintf_r+0x380>
 801164a:	2307      	movs	r3, #7
 801164c:	3707      	adds	r7, #7
 801164e:	439f      	bics	r7, r3
 8011650:	0039      	movs	r1, r7
 8011652:	c90c      	ldmia	r1!, {r2, r3}
 8011654:	9200      	str	r2, [sp, #0]
 8011656:	9301      	str	r3, [sp, #4]
 8011658:	9104      	str	r1, [sp, #16]
 801165a:	9a01      	ldr	r2, [sp, #4]
 801165c:	2301      	movs	r3, #1
 801165e:	2a00      	cmp	r2, #0
 8011660:	da09      	bge.n	8011676 <_vfiprintf_r+0x356>
 8011662:	9e00      	ldr	r6, [sp, #0]
 8011664:	9f01      	ldr	r7, [sp, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	4271      	negs	r1, r6
 801166a:	41ba      	sbcs	r2, r7
 801166c:	9100      	str	r1, [sp, #0]
 801166e:	9201      	str	r2, [sp, #4]
 8011670:	212d      	movs	r1, #45	; 0x2d
 8011672:	aa12      	add	r2, sp, #72	; 0x48
 8011674:	70d1      	strb	r1, [r2, #3]
 8011676:	9901      	ldr	r1, [sp, #4]
 8011678:	9a00      	ldr	r2, [sp, #0]
 801167a:	430a      	orrs	r2, r1
 801167c:	9905      	ldr	r1, [sp, #20]
 801167e:	3101      	adds	r1, #1
 8011680:	d100      	bne.n	8011684 <_vfiprintf_r+0x364>
 8011682:	e2e9      	b.n	8011c58 <_vfiprintf_r+0x938>
 8011684:	2180      	movs	r1, #128	; 0x80
 8011686:	0027      	movs	r7, r4
 8011688:	438f      	bics	r7, r1
 801168a:	2a00      	cmp	r2, #0
 801168c:	d000      	beq.n	8011690 <_vfiprintf_r+0x370>
 801168e:	e2e7      	b.n	8011c60 <_vfiprintf_r+0x940>
 8011690:	9a05      	ldr	r2, [sp, #20]
 8011692:	2a00      	cmp	r2, #0
 8011694:	d100      	bne.n	8011698 <_vfiprintf_r+0x378>
 8011696:	e243      	b.n	8011b20 <_vfiprintf_r+0x800>
 8011698:	2b01      	cmp	r3, #1
 801169a:	d000      	beq.n	801169e <_vfiprintf_r+0x37e>
 801169c:	e2e3      	b.n	8011c66 <_vfiprintf_r+0x946>
 801169e:	e1e7      	b.n	8011a70 <_vfiprintf_r+0x750>
 80116a0:	003a      	movs	r2, r7
 80116a2:	ca08      	ldmia	r2!, {r3}
 80116a4:	9204      	str	r2, [sp, #16]
 80116a6:	06e2      	lsls	r2, r4, #27
 80116a8:	d503      	bpl.n	80116b2 <_vfiprintf_r+0x392>
 80116aa:	9300      	str	r3, [sp, #0]
 80116ac:	17db      	asrs	r3, r3, #31
 80116ae:	9301      	str	r3, [sp, #4]
 80116b0:	e7d3      	b.n	801165a <_vfiprintf_r+0x33a>
 80116b2:	0662      	lsls	r2, r4, #25
 80116b4:	d501      	bpl.n	80116ba <_vfiprintf_r+0x39a>
 80116b6:	b21b      	sxth	r3, r3
 80116b8:	e7f7      	b.n	80116aa <_vfiprintf_r+0x38a>
 80116ba:	05a2      	lsls	r2, r4, #22
 80116bc:	d5f5      	bpl.n	80116aa <_vfiprintf_r+0x38a>
 80116be:	b25b      	sxtb	r3, r3
 80116c0:	e7f3      	b.n	80116aa <_vfiprintf_r+0x38a>
 80116c2:	1d3b      	adds	r3, r7, #4
 80116c4:	9304      	str	r3, [sp, #16]
 80116c6:	06a3      	lsls	r3, r4, #26
 80116c8:	d506      	bpl.n	80116d8 <_vfiprintf_r+0x3b8>
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	9a08      	ldr	r2, [sp, #32]
 80116ce:	601a      	str	r2, [r3, #0]
 80116d0:	17d2      	asrs	r2, r2, #31
 80116d2:	605a      	str	r2, [r3, #4]
 80116d4:	9f04      	ldr	r7, [sp, #16]
 80116d6:	e694      	b.n	8011402 <_vfiprintf_r+0xe2>
 80116d8:	06e3      	lsls	r3, r4, #27
 80116da:	d503      	bpl.n	80116e4 <_vfiprintf_r+0x3c4>
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	9a08      	ldr	r2, [sp, #32]
 80116e0:	601a      	str	r2, [r3, #0]
 80116e2:	e7f7      	b.n	80116d4 <_vfiprintf_r+0x3b4>
 80116e4:	0663      	lsls	r3, r4, #25
 80116e6:	d503      	bpl.n	80116f0 <_vfiprintf_r+0x3d0>
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	9a08      	ldr	r2, [sp, #32]
 80116ec:	801a      	strh	r2, [r3, #0]
 80116ee:	e7f1      	b.n	80116d4 <_vfiprintf_r+0x3b4>
 80116f0:	05a4      	lsls	r4, r4, #22
 80116f2:	d5f3      	bpl.n	80116dc <_vfiprintf_r+0x3bc>
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	9a08      	ldr	r2, [sp, #32]
 80116f8:	701a      	strb	r2, [r3, #0]
 80116fa:	e7eb      	b.n	80116d4 <_vfiprintf_r+0x3b4>
 80116fc:	2310      	movs	r3, #16
 80116fe:	431c      	orrs	r4, r3
 8011700:	2320      	movs	r3, #32
 8011702:	0020      	movs	r0, r4
 8011704:	4018      	ands	r0, r3
 8011706:	421c      	tst	r4, r3
 8011708:	d00d      	beq.n	8011726 <_vfiprintf_r+0x406>
 801170a:	3b19      	subs	r3, #25
 801170c:	3707      	adds	r7, #7
 801170e:	439f      	bics	r7, r3
 8011710:	0039      	movs	r1, r7
 8011712:	c90c      	ldmia	r1!, {r2, r3}
 8011714:	9200      	str	r2, [sp, #0]
 8011716:	9301      	str	r3, [sp, #4]
 8011718:	9104      	str	r1, [sp, #16]
 801171a:	4bcc      	ldr	r3, [pc, #816]	; (8011a4c <_vfiprintf_r+0x72c>)
 801171c:	401c      	ands	r4, r3
 801171e:	2300      	movs	r3, #0
 8011720:	2100      	movs	r1, #0
 8011722:	aa12      	add	r2, sp, #72	; 0x48
 8011724:	e7a6      	b.n	8011674 <_vfiprintf_r+0x354>
 8011726:	003a      	movs	r2, r7
 8011728:	ca08      	ldmia	r2!, {r3}
 801172a:	0021      	movs	r1, r4
 801172c:	9204      	str	r2, [sp, #16]
 801172e:	2210      	movs	r2, #16
 8011730:	4011      	ands	r1, r2
 8011732:	4214      	tst	r4, r2
 8011734:	d002      	beq.n	801173c <_vfiprintf_r+0x41c>
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	9001      	str	r0, [sp, #4]
 801173a:	e7ee      	b.n	801171a <_vfiprintf_r+0x3fa>
 801173c:	2240      	movs	r2, #64	; 0x40
 801173e:	0020      	movs	r0, r4
 8011740:	4010      	ands	r0, r2
 8011742:	4214      	tst	r4, r2
 8011744:	d003      	beq.n	801174e <_vfiprintf_r+0x42e>
 8011746:	b29b      	uxth	r3, r3
 8011748:	9300      	str	r3, [sp, #0]
 801174a:	9101      	str	r1, [sp, #4]
 801174c:	e7e5      	b.n	801171a <_vfiprintf_r+0x3fa>
 801174e:	2280      	movs	r2, #128	; 0x80
 8011750:	0021      	movs	r1, r4
 8011752:	0092      	lsls	r2, r2, #2
 8011754:	4011      	ands	r1, r2
 8011756:	4214      	tst	r4, r2
 8011758:	d0f6      	beq.n	8011748 <_vfiprintf_r+0x428>
 801175a:	b2db      	uxtb	r3, r3
 801175c:	e7eb      	b.n	8011736 <_vfiprintf_r+0x416>
 801175e:	003b      	movs	r3, r7
 8011760:	cb04      	ldmia	r3!, {r2}
 8011762:	49bb      	ldr	r1, [pc, #748]	; (8011a50 <_vfiprintf_r+0x730>)
 8011764:	9304      	str	r3, [sp, #16]
 8011766:	2300      	movs	r3, #0
 8011768:	9200      	str	r2, [sp, #0]
 801176a:	aa13      	add	r2, sp, #76	; 0x4c
 801176c:	8011      	strh	r1, [r2, #0]
 801176e:	4ab9      	ldr	r2, [pc, #740]	; (8011a54 <_vfiprintf_r+0x734>)
 8011770:	9301      	str	r3, [sp, #4]
 8011772:	3302      	adds	r3, #2
 8011774:	431c      	orrs	r4, r3
 8011776:	920c      	str	r2, [sp, #48]	; 0x30
 8011778:	e7d2      	b.n	8011720 <_vfiprintf_r+0x400>
 801177a:	003b      	movs	r3, r7
 801177c:	2700      	movs	r7, #0
 801177e:	cb40      	ldmia	r3!, {r6}
 8011780:	9304      	str	r3, [sp, #16]
 8011782:	ab12      	add	r3, sp, #72	; 0x48
 8011784:	70df      	strb	r7, [r3, #3]
 8011786:	9b05      	ldr	r3, [sp, #20]
 8011788:	3301      	adds	r3, #1
 801178a:	d100      	bne.n	801178e <_vfiprintf_r+0x46e>
 801178c:	e0ea      	b.n	8011964 <_vfiprintf_r+0x644>
 801178e:	0039      	movs	r1, r7
 8011790:	0030      	movs	r0, r6
 8011792:	9a05      	ldr	r2, [sp, #20]
 8011794:	f7fe f92e 	bl	800f9f4 <memchr>
 8011798:	900b      	str	r0, [sp, #44]	; 0x2c
 801179a:	42b8      	cmp	r0, r7
 801179c:	d002      	beq.n	80117a4 <_vfiprintf_r+0x484>
 801179e:	1b83      	subs	r3, r0, r6
 80117a0:	9305      	str	r3, [sp, #20]
 80117a2:	970b      	str	r7, [sp, #44]	; 0x2c
 80117a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117a6:	9a05      	ldr	r2, [sp, #20]
 80117a8:	930a      	str	r3, [sp, #40]	; 0x28
 80117aa:	4293      	cmp	r3, r2
 80117ac:	da00      	bge.n	80117b0 <_vfiprintf_r+0x490>
 80117ae:	920a      	str	r2, [sp, #40]	; 0x28
 80117b0:	ab12      	add	r3, sp, #72	; 0x48
 80117b2:	3303      	adds	r3, #3
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	1e5a      	subs	r2, r3, #1
 80117b8:	4193      	sbcs	r3, r2
 80117ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117bc:	18d3      	adds	r3, r2, r3
 80117be:	930a      	str	r3, [sp, #40]	; 0x28
 80117c0:	0022      	movs	r2, r4
 80117c2:	2302      	movs	r3, #2
 80117c4:	401a      	ands	r2, r3
 80117c6:	9210      	str	r2, [sp, #64]	; 0x40
 80117c8:	421c      	tst	r4, r3
 80117ca:	d002      	beq.n	80117d2 <_vfiprintf_r+0x4b2>
 80117cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117ce:	3302      	adds	r3, #2
 80117d0:	930a      	str	r3, [sp, #40]	; 0x28
 80117d2:	2384      	movs	r3, #132	; 0x84
 80117d4:	0022      	movs	r2, r4
 80117d6:	401a      	ands	r2, r3
 80117d8:	9211      	str	r2, [sp, #68]	; 0x44
 80117da:	421c      	tst	r4, r3
 80117dc:	d11e      	bne.n	801181c <_vfiprintf_r+0x4fc>
 80117de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117e2:	1a9f      	subs	r7, r3, r2
 80117e4:	2f00      	cmp	r7, #0
 80117e6:	dd19      	ble.n	801181c <_vfiprintf_r+0x4fc>
 80117e8:	0029      	movs	r1, r5
 80117ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117ec:	489a      	ldr	r0, [pc, #616]	; (8011a58 <_vfiprintf_r+0x738>)
 80117ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80117f0:	3301      	adds	r3, #1
 80117f2:	3108      	adds	r1, #8
 80117f4:	6028      	str	r0, [r5, #0]
 80117f6:	2f10      	cmp	r7, #16
 80117f8:	dd00      	ble.n	80117fc <_vfiprintf_r+0x4dc>
 80117fa:	e1a7      	b.n	8011b4c <_vfiprintf_r+0x82c>
 80117fc:	606f      	str	r7, [r5, #4]
 80117fe:	18bf      	adds	r7, r7, r2
 8011800:	000d      	movs	r5, r1
 8011802:	9716      	str	r7, [sp, #88]	; 0x58
 8011804:	9315      	str	r3, [sp, #84]	; 0x54
 8011806:	2b07      	cmp	r3, #7
 8011808:	dd08      	ble.n	801181c <_vfiprintf_r+0x4fc>
 801180a:	9903      	ldr	r1, [sp, #12]
 801180c:	9806      	ldr	r0, [sp, #24]
 801180e:	aa14      	add	r2, sp, #80	; 0x50
 8011810:	f7ff fd51 	bl	80112b6 <__sprint_r>
 8011814:	2800      	cmp	r0, #0
 8011816:	d000      	beq.n	801181a <_vfiprintf_r+0x4fa>
 8011818:	e1eb      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 801181a:	ad17      	add	r5, sp, #92	; 0x5c
 801181c:	a912      	add	r1, sp, #72	; 0x48
 801181e:	78c8      	ldrb	r0, [r1, #3]
 8011820:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011824:	3103      	adds	r1, #3
 8011826:	2800      	cmp	r0, #0
 8011828:	d012      	beq.n	8011850 <_vfiprintf_r+0x530>
 801182a:	6029      	str	r1, [r5, #0]
 801182c:	2101      	movs	r1, #1
 801182e:	3301      	adds	r3, #1
 8011830:	1852      	adds	r2, r2, r1
 8011832:	6069      	str	r1, [r5, #4]
 8011834:	9216      	str	r2, [sp, #88]	; 0x58
 8011836:	9315      	str	r3, [sp, #84]	; 0x54
 8011838:	3508      	adds	r5, #8
 801183a:	2b07      	cmp	r3, #7
 801183c:	dd08      	ble.n	8011850 <_vfiprintf_r+0x530>
 801183e:	9903      	ldr	r1, [sp, #12]
 8011840:	9806      	ldr	r0, [sp, #24]
 8011842:	aa14      	add	r2, sp, #80	; 0x50
 8011844:	f7ff fd37 	bl	80112b6 <__sprint_r>
 8011848:	2800      	cmp	r0, #0
 801184a:	d000      	beq.n	801184e <_vfiprintf_r+0x52e>
 801184c:	e1d1      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 801184e:	ad17      	add	r5, sp, #92	; 0x5c
 8011850:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011852:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011854:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011856:	2900      	cmp	r1, #0
 8011858:	d013      	beq.n	8011882 <_vfiprintf_r+0x562>
 801185a:	a913      	add	r1, sp, #76	; 0x4c
 801185c:	6029      	str	r1, [r5, #0]
 801185e:	2102      	movs	r1, #2
 8011860:	3301      	adds	r3, #1
 8011862:	1852      	adds	r2, r2, r1
 8011864:	6069      	str	r1, [r5, #4]
 8011866:	9216      	str	r2, [sp, #88]	; 0x58
 8011868:	9315      	str	r3, [sp, #84]	; 0x54
 801186a:	3508      	adds	r5, #8
 801186c:	2b07      	cmp	r3, #7
 801186e:	dd08      	ble.n	8011882 <_vfiprintf_r+0x562>
 8011870:	9903      	ldr	r1, [sp, #12]
 8011872:	9806      	ldr	r0, [sp, #24]
 8011874:	aa14      	add	r2, sp, #80	; 0x50
 8011876:	f7ff fd1e 	bl	80112b6 <__sprint_r>
 801187a:	2800      	cmp	r0, #0
 801187c:	d000      	beq.n	8011880 <_vfiprintf_r+0x560>
 801187e:	e1b8      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 8011880:	ad17      	add	r5, sp, #92	; 0x5c
 8011882:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011884:	2b80      	cmp	r3, #128	; 0x80
 8011886:	d11e      	bne.n	80118c6 <_vfiprintf_r+0x5a6>
 8011888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801188a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801188c:	1a9f      	subs	r7, r3, r2
 801188e:	2f00      	cmp	r7, #0
 8011890:	dd19      	ble.n	80118c6 <_vfiprintf_r+0x5a6>
 8011892:	0029      	movs	r1, r5
 8011894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011896:	4871      	ldr	r0, [pc, #452]	; (8011a5c <_vfiprintf_r+0x73c>)
 8011898:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801189a:	3301      	adds	r3, #1
 801189c:	3108      	adds	r1, #8
 801189e:	6028      	str	r0, [r5, #0]
 80118a0:	2f10      	cmp	r7, #16
 80118a2:	dd00      	ble.n	80118a6 <_vfiprintf_r+0x586>
 80118a4:	e164      	b.n	8011b70 <_vfiprintf_r+0x850>
 80118a6:	606f      	str	r7, [r5, #4]
 80118a8:	18bf      	adds	r7, r7, r2
 80118aa:	000d      	movs	r5, r1
 80118ac:	9716      	str	r7, [sp, #88]	; 0x58
 80118ae:	9315      	str	r3, [sp, #84]	; 0x54
 80118b0:	2b07      	cmp	r3, #7
 80118b2:	dd08      	ble.n	80118c6 <_vfiprintf_r+0x5a6>
 80118b4:	9903      	ldr	r1, [sp, #12]
 80118b6:	9806      	ldr	r0, [sp, #24]
 80118b8:	aa14      	add	r2, sp, #80	; 0x50
 80118ba:	f7ff fcfc 	bl	80112b6 <__sprint_r>
 80118be:	2800      	cmp	r0, #0
 80118c0:	d000      	beq.n	80118c4 <_vfiprintf_r+0x5a4>
 80118c2:	e196      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 80118c4:	ad17      	add	r5, sp, #92	; 0x5c
 80118c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118c8:	9a05      	ldr	r2, [sp, #20]
 80118ca:	1a9f      	subs	r7, r3, r2
 80118cc:	2f00      	cmp	r7, #0
 80118ce:	dd19      	ble.n	8011904 <_vfiprintf_r+0x5e4>
 80118d0:	0029      	movs	r1, r5
 80118d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118d4:	4861      	ldr	r0, [pc, #388]	; (8011a5c <_vfiprintf_r+0x73c>)
 80118d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80118d8:	3301      	adds	r3, #1
 80118da:	3108      	adds	r1, #8
 80118dc:	6028      	str	r0, [r5, #0]
 80118de:	2f10      	cmp	r7, #16
 80118e0:	dd00      	ble.n	80118e4 <_vfiprintf_r+0x5c4>
 80118e2:	e157      	b.n	8011b94 <_vfiprintf_r+0x874>
 80118e4:	606f      	str	r7, [r5, #4]
 80118e6:	18bf      	adds	r7, r7, r2
 80118e8:	000d      	movs	r5, r1
 80118ea:	9716      	str	r7, [sp, #88]	; 0x58
 80118ec:	9315      	str	r3, [sp, #84]	; 0x54
 80118ee:	2b07      	cmp	r3, #7
 80118f0:	dd08      	ble.n	8011904 <_vfiprintf_r+0x5e4>
 80118f2:	9903      	ldr	r1, [sp, #12]
 80118f4:	9806      	ldr	r0, [sp, #24]
 80118f6:	aa14      	add	r2, sp, #80	; 0x50
 80118f8:	f7ff fcdd 	bl	80112b6 <__sprint_r>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d000      	beq.n	8011902 <_vfiprintf_r+0x5e2>
 8011900:	e177      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 8011902:	ad17      	add	r5, sp, #92	; 0x5c
 8011904:	9b05      	ldr	r3, [sp, #20]
 8011906:	9a05      	ldr	r2, [sp, #20]
 8011908:	606b      	str	r3, [r5, #4]
 801190a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801190c:	602e      	str	r6, [r5, #0]
 801190e:	189b      	adds	r3, r3, r2
 8011910:	9316      	str	r3, [sp, #88]	; 0x58
 8011912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011914:	3508      	adds	r5, #8
 8011916:	3301      	adds	r3, #1
 8011918:	9315      	str	r3, [sp, #84]	; 0x54
 801191a:	2b07      	cmp	r3, #7
 801191c:	dd08      	ble.n	8011930 <_vfiprintf_r+0x610>
 801191e:	9903      	ldr	r1, [sp, #12]
 8011920:	9806      	ldr	r0, [sp, #24]
 8011922:	aa14      	add	r2, sp, #80	; 0x50
 8011924:	f7ff fcc7 	bl	80112b6 <__sprint_r>
 8011928:	2800      	cmp	r0, #0
 801192a:	d000      	beq.n	801192e <_vfiprintf_r+0x60e>
 801192c:	e161      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 801192e:	ad17      	add	r5, sp, #92	; 0x5c
 8011930:	0764      	lsls	r4, r4, #29
 8011932:	d500      	bpl.n	8011936 <_vfiprintf_r+0x616>
 8011934:	e140      	b.n	8011bb8 <_vfiprintf_r+0x898>
 8011936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801193a:	4293      	cmp	r3, r2
 801193c:	da00      	bge.n	8011940 <_vfiprintf_r+0x620>
 801193e:	0013      	movs	r3, r2
 8011940:	9a08      	ldr	r2, [sp, #32]
 8011942:	18d3      	adds	r3, r2, r3
 8011944:	9308      	str	r3, [sp, #32]
 8011946:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011948:	2b00      	cmp	r3, #0
 801194a:	d007      	beq.n	801195c <_vfiprintf_r+0x63c>
 801194c:	9903      	ldr	r1, [sp, #12]
 801194e:	9806      	ldr	r0, [sp, #24]
 8011950:	aa14      	add	r2, sp, #80	; 0x50
 8011952:	f7ff fcb0 	bl	80112b6 <__sprint_r>
 8011956:	2800      	cmp	r0, #0
 8011958:	d000      	beq.n	801195c <_vfiprintf_r+0x63c>
 801195a:	e14a      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 801195c:	2300      	movs	r3, #0
 801195e:	ad17      	add	r5, sp, #92	; 0x5c
 8011960:	9315      	str	r3, [sp, #84]	; 0x54
 8011962:	e6b7      	b.n	80116d4 <_vfiprintf_r+0x3b4>
 8011964:	0030      	movs	r0, r6
 8011966:	f7ee fbcd 	bl	8000104 <strlen>
 801196a:	9005      	str	r0, [sp, #20]
 801196c:	e719      	b.n	80117a2 <_vfiprintf_r+0x482>
 801196e:	2310      	movs	r3, #16
 8011970:	431c      	orrs	r4, r3
 8011972:	2320      	movs	r3, #32
 8011974:	0020      	movs	r0, r4
 8011976:	4018      	ands	r0, r3
 8011978:	421c      	tst	r4, r3
 801197a:	d009      	beq.n	8011990 <_vfiprintf_r+0x670>
 801197c:	3b19      	subs	r3, #25
 801197e:	3707      	adds	r7, #7
 8011980:	439f      	bics	r7, r3
 8011982:	0039      	movs	r1, r7
 8011984:	c90c      	ldmia	r1!, {r2, r3}
 8011986:	9200      	str	r2, [sp, #0]
 8011988:	9301      	str	r3, [sp, #4]
 801198a:	9104      	str	r1, [sp, #16]
 801198c:	2301      	movs	r3, #1
 801198e:	e6c7      	b.n	8011720 <_vfiprintf_r+0x400>
 8011990:	003b      	movs	r3, r7
 8011992:	cb04      	ldmia	r3!, {r2}
 8011994:	0021      	movs	r1, r4
 8011996:	9304      	str	r3, [sp, #16]
 8011998:	2310      	movs	r3, #16
 801199a:	4019      	ands	r1, r3
 801199c:	421c      	tst	r4, r3
 801199e:	d003      	beq.n	80119a8 <_vfiprintf_r+0x688>
 80119a0:	9200      	str	r2, [sp, #0]
 80119a2:	9001      	str	r0, [sp, #4]
 80119a4:	3b0f      	subs	r3, #15
 80119a6:	e6bb      	b.n	8011720 <_vfiprintf_r+0x400>
 80119a8:	2340      	movs	r3, #64	; 0x40
 80119aa:	0020      	movs	r0, r4
 80119ac:	4018      	ands	r0, r3
 80119ae:	421c      	tst	r4, r3
 80119b0:	d003      	beq.n	80119ba <_vfiprintf_r+0x69a>
 80119b2:	b293      	uxth	r3, r2
 80119b4:	9300      	str	r3, [sp, #0]
 80119b6:	9101      	str	r1, [sp, #4]
 80119b8:	e7e8      	b.n	801198c <_vfiprintf_r+0x66c>
 80119ba:	2380      	movs	r3, #128	; 0x80
 80119bc:	0021      	movs	r1, r4
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	4019      	ands	r1, r3
 80119c2:	421c      	tst	r4, r3
 80119c4:	d003      	beq.n	80119ce <_vfiprintf_r+0x6ae>
 80119c6:	b2d3      	uxtb	r3, r2
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	9001      	str	r0, [sp, #4]
 80119cc:	e7de      	b.n	801198c <_vfiprintf_r+0x66c>
 80119ce:	9200      	str	r2, [sp, #0]
 80119d0:	e7f1      	b.n	80119b6 <_vfiprintf_r+0x696>
 80119d2:	4a23      	ldr	r2, [pc, #140]	; (8011a60 <_vfiprintf_r+0x740>)
 80119d4:	0020      	movs	r0, r4
 80119d6:	920c      	str	r2, [sp, #48]	; 0x30
 80119d8:	2220      	movs	r2, #32
 80119da:	4010      	ands	r0, r2
 80119dc:	4214      	tst	r4, r2
 80119de:	d019      	beq.n	8011a14 <_vfiprintf_r+0x6f4>
 80119e0:	3a19      	subs	r2, #25
 80119e2:	3707      	adds	r7, #7
 80119e4:	4397      	bics	r7, r2
 80119e6:	0038      	movs	r0, r7
 80119e8:	c806      	ldmia	r0!, {r1, r2}
 80119ea:	9100      	str	r1, [sp, #0]
 80119ec:	9201      	str	r2, [sp, #4]
 80119ee:	9004      	str	r0, [sp, #16]
 80119f0:	07e2      	lsls	r2, r4, #31
 80119f2:	d509      	bpl.n	8011a08 <_vfiprintf_r+0x6e8>
 80119f4:	9a00      	ldr	r2, [sp, #0]
 80119f6:	9901      	ldr	r1, [sp, #4]
 80119f8:	430a      	orrs	r2, r1
 80119fa:	d005      	beq.n	8011a08 <_vfiprintf_r+0x6e8>
 80119fc:	aa13      	add	r2, sp, #76	; 0x4c
 80119fe:	2130      	movs	r1, #48	; 0x30
 8011a00:	7053      	strb	r3, [r2, #1]
 8011a02:	2302      	movs	r3, #2
 8011a04:	7011      	strb	r1, [r2, #0]
 8011a06:	431c      	orrs	r4, r3
 8011a08:	4b10      	ldr	r3, [pc, #64]	; (8011a4c <_vfiprintf_r+0x72c>)
 8011a0a:	401c      	ands	r4, r3
 8011a0c:	2302      	movs	r3, #2
 8011a0e:	e687      	b.n	8011720 <_vfiprintf_r+0x400>
 8011a10:	4a10      	ldr	r2, [pc, #64]	; (8011a54 <_vfiprintf_r+0x734>)
 8011a12:	e7df      	b.n	80119d4 <_vfiprintf_r+0x6b4>
 8011a14:	0039      	movs	r1, r7
 8011a16:	c904      	ldmia	r1!, {r2}
 8011a18:	0026      	movs	r6, r4
 8011a1a:	9104      	str	r1, [sp, #16]
 8011a1c:	2110      	movs	r1, #16
 8011a1e:	400e      	ands	r6, r1
 8011a20:	420c      	tst	r4, r1
 8011a22:	d002      	beq.n	8011a2a <_vfiprintf_r+0x70a>
 8011a24:	9200      	str	r2, [sp, #0]
 8011a26:	9001      	str	r0, [sp, #4]
 8011a28:	e7e2      	b.n	80119f0 <_vfiprintf_r+0x6d0>
 8011a2a:	2140      	movs	r1, #64	; 0x40
 8011a2c:	0020      	movs	r0, r4
 8011a2e:	4008      	ands	r0, r1
 8011a30:	420c      	tst	r4, r1
 8011a32:	d003      	beq.n	8011a3c <_vfiprintf_r+0x71c>
 8011a34:	b292      	uxth	r2, r2
 8011a36:	9200      	str	r2, [sp, #0]
 8011a38:	9601      	str	r6, [sp, #4]
 8011a3a:	e7d9      	b.n	80119f0 <_vfiprintf_r+0x6d0>
 8011a3c:	2180      	movs	r1, #128	; 0x80
 8011a3e:	0026      	movs	r6, r4
 8011a40:	0089      	lsls	r1, r1, #2
 8011a42:	400e      	ands	r6, r1
 8011a44:	420c      	tst	r4, r1
 8011a46:	d0f6      	beq.n	8011a36 <_vfiprintf_r+0x716>
 8011a48:	b2d2      	uxtb	r2, r2
 8011a4a:	e7eb      	b.n	8011a24 <_vfiprintf_r+0x704>
 8011a4c:	fffffbff 	.word	0xfffffbff
 8011a50:	00007830 	.word	0x00007830
 8011a54:	0801428c 	.word	0x0801428c
 8011a58:	08014399 	.word	0x08014399
 8011a5c:	080143a9 	.word	0x080143a9
 8011a60:	0801429d 	.word	0x0801429d
 8011a64:	9b01      	ldr	r3, [sp, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d109      	bne.n	8011a7e <_vfiprintf_r+0x75e>
 8011a6a:	9b00      	ldr	r3, [sp, #0]
 8011a6c:	2b09      	cmp	r3, #9
 8011a6e:	d806      	bhi.n	8011a7e <_vfiprintf_r+0x75e>
 8011a70:	26b7      	movs	r6, #183	; 0xb7
 8011a72:	ab12      	add	r3, sp, #72	; 0x48
 8011a74:	18f6      	adds	r6, r6, r3
 8011a76:	9b00      	ldr	r3, [sp, #0]
 8011a78:	3330      	adds	r3, #48	; 0x30
 8011a7a:	7033      	strb	r3, [r6, #0]
 8011a7c:	e115      	b.n	8011caa <_vfiprintf_r+0x98a>
 8011a7e:	2380      	movs	r3, #128	; 0x80
 8011a80:	2400      	movs	r4, #0
 8011a82:	00db      	lsls	r3, r3, #3
 8011a84:	403b      	ands	r3, r7
 8011a86:	ae40      	add	r6, sp, #256	; 0x100
 8011a88:	930a      	str	r3, [sp, #40]	; 0x28
 8011a8a:	220a      	movs	r2, #10
 8011a8c:	9800      	ldr	r0, [sp, #0]
 8011a8e:	9901      	ldr	r1, [sp, #4]
 8011a90:	2300      	movs	r3, #0
 8011a92:	f7ee fd07 	bl	80004a4 <__aeabi_uldivmod>
 8011a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a98:	3e01      	subs	r6, #1
 8011a9a:	3230      	adds	r2, #48	; 0x30
 8011a9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8011a9e:	9110      	str	r1, [sp, #64]	; 0x40
 8011aa0:	7032      	strb	r2, [r6, #0]
 8011aa2:	3401      	adds	r4, #1
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d01a      	beq.n	8011ade <_vfiprintf_r+0x7be>
 8011aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	42a3      	cmp	r3, r4
 8011aae:	d116      	bne.n	8011ade <_vfiprintf_r+0x7be>
 8011ab0:	2cff      	cmp	r4, #255	; 0xff
 8011ab2:	d014      	beq.n	8011ade <_vfiprintf_r+0x7be>
 8011ab4:	9b01      	ldr	r3, [sp, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d102      	bne.n	8011ac0 <_vfiprintf_r+0x7a0>
 8011aba:	9b00      	ldr	r3, [sp, #0]
 8011abc:	2b09      	cmp	r3, #9
 8011abe:	d90e      	bls.n	8011ade <_vfiprintf_r+0x7be>
 8011ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ac2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011ac4:	1af6      	subs	r6, r6, r3
 8011ac6:	001a      	movs	r2, r3
 8011ac8:	0030      	movs	r0, r6
 8011aca:	f7f9 ffe6 	bl	800ba9a <strncpy>
 8011ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ad0:	2400      	movs	r4, #0
 8011ad2:	785b      	ldrb	r3, [r3, #1]
 8011ad4:	1e5a      	subs	r2, r3, #1
 8011ad6:	4193      	sbcs	r3, r2
 8011ad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ada:	18d3      	adds	r3, r2, r3
 8011adc:	930d      	str	r3, [sp, #52]	; 0x34
 8011ade:	9b01      	ldr	r3, [sp, #4]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d103      	bne.n	8011aec <_vfiprintf_r+0x7cc>
 8011ae4:	9b00      	ldr	r3, [sp, #0]
 8011ae6:	2b09      	cmp	r3, #9
 8011ae8:	d800      	bhi.n	8011aec <_vfiprintf_r+0x7cc>
 8011aea:	e0de      	b.n	8011caa <_vfiprintf_r+0x98a>
 8011aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011af2:	9301      	str	r3, [sp, #4]
 8011af4:	e7c9      	b.n	8011a8a <_vfiprintf_r+0x76a>
 8011af6:	200f      	movs	r0, #15
 8011af8:	9b00      	ldr	r3, [sp, #0]
 8011afa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011afc:	4003      	ands	r3, r0
 8011afe:	5cd3      	ldrb	r3, [r2, r3]
 8011b00:	3e01      	subs	r6, #1
 8011b02:	7033      	strb	r3, [r6, #0]
 8011b04:	9b01      	ldr	r3, [sp, #4]
 8011b06:	0719      	lsls	r1, r3, #28
 8011b08:	9b00      	ldr	r3, [sp, #0]
 8011b0a:	091a      	lsrs	r2, r3, #4
 8011b0c:	9b01      	ldr	r3, [sp, #4]
 8011b0e:	4311      	orrs	r1, r2
 8011b10:	091b      	lsrs	r3, r3, #4
 8011b12:	9301      	str	r3, [sp, #4]
 8011b14:	000b      	movs	r3, r1
 8011b16:	9a01      	ldr	r2, [sp, #4]
 8011b18:	9100      	str	r1, [sp, #0]
 8011b1a:	4313      	orrs	r3, r2
 8011b1c:	d1ec      	bne.n	8011af8 <_vfiprintf_r+0x7d8>
 8011b1e:	e0c4      	b.n	8011caa <_vfiprintf_r+0x98a>
 8011b20:	ae40      	add	r6, sp, #256	; 0x100
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d000      	beq.n	8011b28 <_vfiprintf_r+0x808>
 8011b26:	e0c0      	b.n	8011caa <_vfiprintf_r+0x98a>
 8011b28:	07e4      	lsls	r4, r4, #31
 8011b2a:	d400      	bmi.n	8011b2e <_vfiprintf_r+0x80e>
 8011b2c:	e0bd      	b.n	8011caa <_vfiprintf_r+0x98a>
 8011b2e:	26b7      	movs	r6, #183	; 0xb7
 8011b30:	ab12      	add	r3, sp, #72	; 0x48
 8011b32:	18f6      	adds	r6, r6, r3
 8011b34:	2330      	movs	r3, #48	; 0x30
 8011b36:	e7a0      	b.n	8011a7a <_vfiprintf_r+0x75a>
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d100      	bne.n	8011b3e <_vfiprintf_r+0x81e>
 8011b3c:	e07e      	b.n	8011c3c <_vfiprintf_r+0x91c>
 8011b3e:	ae27      	add	r6, sp, #156	; 0x9c
 8011b40:	7033      	strb	r3, [r6, #0]
 8011b42:	2300      	movs	r3, #0
 8011b44:	aa12      	add	r2, sp, #72	; 0x48
 8011b46:	70d3      	strb	r3, [r2, #3]
 8011b48:	9704      	str	r7, [sp, #16]
 8011b4a:	e576      	b.n	801163a <_vfiprintf_r+0x31a>
 8011b4c:	2010      	movs	r0, #16
 8011b4e:	1812      	adds	r2, r2, r0
 8011b50:	6068      	str	r0, [r5, #4]
 8011b52:	9216      	str	r2, [sp, #88]	; 0x58
 8011b54:	9315      	str	r3, [sp, #84]	; 0x54
 8011b56:	2b07      	cmp	r3, #7
 8011b58:	dd07      	ble.n	8011b6a <_vfiprintf_r+0x84a>
 8011b5a:	9903      	ldr	r1, [sp, #12]
 8011b5c:	9806      	ldr	r0, [sp, #24]
 8011b5e:	aa14      	add	r2, sp, #80	; 0x50
 8011b60:	f7ff fba9 	bl	80112b6 <__sprint_r>
 8011b64:	2800      	cmp	r0, #0
 8011b66:	d144      	bne.n	8011bf2 <_vfiprintf_r+0x8d2>
 8011b68:	a917      	add	r1, sp, #92	; 0x5c
 8011b6a:	000d      	movs	r5, r1
 8011b6c:	3f10      	subs	r7, #16
 8011b6e:	e63b      	b.n	80117e8 <_vfiprintf_r+0x4c8>
 8011b70:	2010      	movs	r0, #16
 8011b72:	1812      	adds	r2, r2, r0
 8011b74:	6068      	str	r0, [r5, #4]
 8011b76:	9216      	str	r2, [sp, #88]	; 0x58
 8011b78:	9315      	str	r3, [sp, #84]	; 0x54
 8011b7a:	2b07      	cmp	r3, #7
 8011b7c:	dd07      	ble.n	8011b8e <_vfiprintf_r+0x86e>
 8011b7e:	9903      	ldr	r1, [sp, #12]
 8011b80:	9806      	ldr	r0, [sp, #24]
 8011b82:	aa14      	add	r2, sp, #80	; 0x50
 8011b84:	f7ff fb97 	bl	80112b6 <__sprint_r>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	d132      	bne.n	8011bf2 <_vfiprintf_r+0x8d2>
 8011b8c:	a917      	add	r1, sp, #92	; 0x5c
 8011b8e:	000d      	movs	r5, r1
 8011b90:	3f10      	subs	r7, #16
 8011b92:	e67e      	b.n	8011892 <_vfiprintf_r+0x572>
 8011b94:	2010      	movs	r0, #16
 8011b96:	1812      	adds	r2, r2, r0
 8011b98:	6068      	str	r0, [r5, #4]
 8011b9a:	9216      	str	r2, [sp, #88]	; 0x58
 8011b9c:	9315      	str	r3, [sp, #84]	; 0x54
 8011b9e:	2b07      	cmp	r3, #7
 8011ba0:	dd07      	ble.n	8011bb2 <_vfiprintf_r+0x892>
 8011ba2:	9903      	ldr	r1, [sp, #12]
 8011ba4:	9806      	ldr	r0, [sp, #24]
 8011ba6:	aa14      	add	r2, sp, #80	; 0x50
 8011ba8:	f7ff fb85 	bl	80112b6 <__sprint_r>
 8011bac:	2800      	cmp	r0, #0
 8011bae:	d120      	bne.n	8011bf2 <_vfiprintf_r+0x8d2>
 8011bb0:	a917      	add	r1, sp, #92	; 0x5c
 8011bb2:	000d      	movs	r5, r1
 8011bb4:	3f10      	subs	r7, #16
 8011bb6:	e68b      	b.n	80118d0 <_vfiprintf_r+0x5b0>
 8011bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bbc:	2610      	movs	r6, #16
 8011bbe:	1a9c      	subs	r4, r3, r2
 8011bc0:	2c00      	cmp	r4, #0
 8011bc2:	dc00      	bgt.n	8011bc6 <_vfiprintf_r+0x8a6>
 8011bc4:	e6b7      	b.n	8011936 <_vfiprintf_r+0x616>
 8011bc6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011bc8:	4a3b      	ldr	r2, [pc, #236]	; (8011cb8 <_vfiprintf_r+0x998>)
 8011bca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011bcc:	3101      	adds	r1, #1
 8011bce:	602a      	str	r2, [r5, #0]
 8011bd0:	2c10      	cmp	r4, #16
 8011bd2:	dc22      	bgt.n	8011c1a <_vfiprintf_r+0x8fa>
 8011bd4:	606c      	str	r4, [r5, #4]
 8011bd6:	18e4      	adds	r4, r4, r3
 8011bd8:	9416      	str	r4, [sp, #88]	; 0x58
 8011bda:	9115      	str	r1, [sp, #84]	; 0x54
 8011bdc:	2907      	cmp	r1, #7
 8011bde:	dc00      	bgt.n	8011be2 <_vfiprintf_r+0x8c2>
 8011be0:	e6a9      	b.n	8011936 <_vfiprintf_r+0x616>
 8011be2:	9903      	ldr	r1, [sp, #12]
 8011be4:	9806      	ldr	r0, [sp, #24]
 8011be6:	aa14      	add	r2, sp, #80	; 0x50
 8011be8:	f7ff fb65 	bl	80112b6 <__sprint_r>
 8011bec:	2800      	cmp	r0, #0
 8011bee:	d100      	bne.n	8011bf2 <_vfiprintf_r+0x8d2>
 8011bf0:	e6a1      	b.n	8011936 <_vfiprintf_r+0x616>
 8011bf2:	9b03      	ldr	r3, [sp, #12]
 8011bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011bf6:	07db      	lsls	r3, r3, #31
 8011bf8:	d407      	bmi.n	8011c0a <_vfiprintf_r+0x8ea>
 8011bfa:	9b03      	ldr	r3, [sp, #12]
 8011bfc:	899b      	ldrh	r3, [r3, #12]
 8011bfe:	059b      	lsls	r3, r3, #22
 8011c00:	d403      	bmi.n	8011c0a <_vfiprintf_r+0x8ea>
 8011c02:	9b03      	ldr	r3, [sp, #12]
 8011c04:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011c06:	f7fa f808 	bl	800bc1a <__retarget_lock_release_recursive>
 8011c0a:	9b03      	ldr	r3, [sp, #12]
 8011c0c:	899b      	ldrh	r3, [r3, #12]
 8011c0e:	065b      	lsls	r3, r3, #25
 8011c10:	d401      	bmi.n	8011c16 <_vfiprintf_r+0x8f6>
 8011c12:	f7ff fbc3 	bl	801139c <_vfiprintf_r+0x7c>
 8011c16:	f7ff fbbe 	bl	8011396 <_vfiprintf_r+0x76>
 8011c1a:	3310      	adds	r3, #16
 8011c1c:	606e      	str	r6, [r5, #4]
 8011c1e:	9316      	str	r3, [sp, #88]	; 0x58
 8011c20:	9115      	str	r1, [sp, #84]	; 0x54
 8011c22:	3508      	adds	r5, #8
 8011c24:	2907      	cmp	r1, #7
 8011c26:	dd07      	ble.n	8011c38 <_vfiprintf_r+0x918>
 8011c28:	9903      	ldr	r1, [sp, #12]
 8011c2a:	9806      	ldr	r0, [sp, #24]
 8011c2c:	aa14      	add	r2, sp, #80	; 0x50
 8011c2e:	f7ff fb42 	bl	80112b6 <__sprint_r>
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d1dd      	bne.n	8011bf2 <_vfiprintf_r+0x8d2>
 8011c36:	ad17      	add	r5, sp, #92	; 0x5c
 8011c38:	3c10      	subs	r4, #16
 8011c3a:	e7c4      	b.n	8011bc6 <_vfiprintf_r+0x8a6>
 8011c3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d102      	bne.n	8011c48 <_vfiprintf_r+0x928>
 8011c42:	2300      	movs	r3, #0
 8011c44:	9315      	str	r3, [sp, #84]	; 0x54
 8011c46:	e7d4      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 8011c48:	9903      	ldr	r1, [sp, #12]
 8011c4a:	9806      	ldr	r0, [sp, #24]
 8011c4c:	aa14      	add	r2, sp, #80	; 0x50
 8011c4e:	f7ff fb32 	bl	80112b6 <__sprint_r>
 8011c52:	2800      	cmp	r0, #0
 8011c54:	d0f5      	beq.n	8011c42 <_vfiprintf_r+0x922>
 8011c56:	e7cc      	b.n	8011bf2 <_vfiprintf_r+0x8d2>
 8011c58:	0027      	movs	r7, r4
 8011c5a:	2a00      	cmp	r2, #0
 8011c5c:	d100      	bne.n	8011c60 <_vfiprintf_r+0x940>
 8011c5e:	e51b      	b.n	8011698 <_vfiprintf_r+0x378>
 8011c60:	2b01      	cmp	r3, #1
 8011c62:	d100      	bne.n	8011c66 <_vfiprintf_r+0x946>
 8011c64:	e6fe      	b.n	8011a64 <_vfiprintf_r+0x744>
 8011c66:	ae40      	add	r6, sp, #256	; 0x100
 8011c68:	2b02      	cmp	r3, #2
 8011c6a:	d100      	bne.n	8011c6e <_vfiprintf_r+0x94e>
 8011c6c:	e743      	b.n	8011af6 <_vfiprintf_r+0x7d6>
 8011c6e:	2307      	movs	r3, #7
 8011c70:	469c      	mov	ip, r3
 8011c72:	4663      	mov	r3, ip
 8011c74:	9900      	ldr	r1, [sp, #0]
 8011c76:	0032      	movs	r2, r6
 8011c78:	400b      	ands	r3, r1
 8011c7a:	9901      	ldr	r1, [sp, #4]
 8011c7c:	3e01      	subs	r6, #1
 8011c7e:	074c      	lsls	r4, r1, #29
 8011c80:	9900      	ldr	r1, [sp, #0]
 8011c82:	3330      	adds	r3, #48	; 0x30
 8011c84:	08c8      	lsrs	r0, r1, #3
 8011c86:	9901      	ldr	r1, [sp, #4]
 8011c88:	4304      	orrs	r4, r0
 8011c8a:	08c9      	lsrs	r1, r1, #3
 8011c8c:	9101      	str	r1, [sp, #4]
 8011c8e:	0021      	movs	r1, r4
 8011c90:	9801      	ldr	r0, [sp, #4]
 8011c92:	7033      	strb	r3, [r6, #0]
 8011c94:	9400      	str	r4, [sp, #0]
 8011c96:	4301      	orrs	r1, r0
 8011c98:	d1eb      	bne.n	8011c72 <_vfiprintf_r+0x952>
 8011c9a:	07f9      	lsls	r1, r7, #31
 8011c9c:	d505      	bpl.n	8011caa <_vfiprintf_r+0x98a>
 8011c9e:	2b30      	cmp	r3, #48	; 0x30
 8011ca0:	d003      	beq.n	8011caa <_vfiprintf_r+0x98a>
 8011ca2:	2330      	movs	r3, #48	; 0x30
 8011ca4:	3e01      	subs	r6, #1
 8011ca6:	7033      	strb	r3, [r6, #0]
 8011ca8:	1e96      	subs	r6, r2, #2
 8011caa:	9b05      	ldr	r3, [sp, #20]
 8011cac:	003c      	movs	r4, r7
 8011cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8011cb0:	ab40      	add	r3, sp, #256	; 0x100
 8011cb2:	1b9b      	subs	r3, r3, r6
 8011cb4:	9305      	str	r3, [sp, #20]
 8011cb6:	e575      	b.n	80117a4 <_vfiprintf_r+0x484>
 8011cb8:	08014399 	.word	0x08014399

08011cbc <__sbprintf>:
 8011cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cbe:	0015      	movs	r5, r2
 8011cc0:	2202      	movs	r2, #2
 8011cc2:	4c1e      	ldr	r4, [pc, #120]	; (8011d3c <__sbprintf+0x80>)
 8011cc4:	001f      	movs	r7, r3
 8011cc6:	898b      	ldrh	r3, [r1, #12]
 8011cc8:	44a5      	add	sp, r4
 8011cca:	4393      	bics	r3, r2
 8011ccc:	466a      	mov	r2, sp
 8011cce:	8193      	strh	r3, [r2, #12]
 8011cd0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011cd2:	0006      	movs	r6, r0
 8011cd4:	9319      	str	r3, [sp, #100]	; 0x64
 8011cd6:	89cb      	ldrh	r3, [r1, #14]
 8011cd8:	a816      	add	r0, sp, #88	; 0x58
 8011cda:	81d3      	strh	r3, [r2, #14]
 8011cdc:	69cb      	ldr	r3, [r1, #28]
 8011cde:	000c      	movs	r4, r1
 8011ce0:	9307      	str	r3, [sp, #28]
 8011ce2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8011ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ce6:	ab1a      	add	r3, sp, #104	; 0x68
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	9304      	str	r3, [sp, #16]
 8011cec:	2380      	movs	r3, #128	; 0x80
 8011cee:	00db      	lsls	r3, r3, #3
 8011cf0:	9302      	str	r3, [sp, #8]
 8011cf2:	9305      	str	r3, [sp, #20]
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	9306      	str	r3, [sp, #24]
 8011cf8:	f7f9 ff8c 	bl	800bc14 <__retarget_lock_init_recursive>
 8011cfc:	002a      	movs	r2, r5
 8011cfe:	003b      	movs	r3, r7
 8011d00:	4669      	mov	r1, sp
 8011d02:	0030      	movs	r0, r6
 8011d04:	f7ff fb0c 	bl	8011320 <_vfiprintf_r>
 8011d08:	1e05      	subs	r5, r0, #0
 8011d0a:	db07      	blt.n	8011d1c <__sbprintf+0x60>
 8011d0c:	4669      	mov	r1, sp
 8011d0e:	0030      	movs	r0, r6
 8011d10:	f7fd fdf6 	bl	800f900 <_fflush_r>
 8011d14:	2800      	cmp	r0, #0
 8011d16:	d001      	beq.n	8011d1c <__sbprintf+0x60>
 8011d18:	2501      	movs	r5, #1
 8011d1a:	426d      	negs	r5, r5
 8011d1c:	466b      	mov	r3, sp
 8011d1e:	899a      	ldrh	r2, [r3, #12]
 8011d20:	2340      	movs	r3, #64	; 0x40
 8011d22:	421a      	tst	r2, r3
 8011d24:	d002      	beq.n	8011d2c <__sbprintf+0x70>
 8011d26:	89a2      	ldrh	r2, [r4, #12]
 8011d28:	4313      	orrs	r3, r2
 8011d2a:	81a3      	strh	r3, [r4, #12]
 8011d2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011d2e:	f7f9 ff72 	bl	800bc16 <__retarget_lock_close_recursive>
 8011d32:	0028      	movs	r0, r5
 8011d34:	4b02      	ldr	r3, [pc, #8]	; (8011d40 <__sbprintf+0x84>)
 8011d36:	449d      	add	sp, r3
 8011d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d3a:	46c0      	nop			; (mov r8, r8)
 8011d3c:	fffffb94 	.word	0xfffffb94
 8011d40:	0000046c 	.word	0x0000046c

08011d44 <__sfvwrite_r>:
 8011d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d46:	6893      	ldr	r3, [r2, #8]
 8011d48:	b087      	sub	sp, #28
 8011d4a:	000c      	movs	r4, r1
 8011d4c:	9002      	str	r0, [sp, #8]
 8011d4e:	9204      	str	r2, [sp, #16]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d102      	bne.n	8011d5a <__sfvwrite_r+0x16>
 8011d54:	2000      	movs	r0, #0
 8011d56:	b007      	add	sp, #28
 8011d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d5a:	898b      	ldrh	r3, [r1, #12]
 8011d5c:	071b      	lsls	r3, r3, #28
 8011d5e:	d557      	bpl.n	8011e10 <__sfvwrite_r+0xcc>
 8011d60:	690b      	ldr	r3, [r1, #16]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d054      	beq.n	8011e10 <__sfvwrite_r+0xcc>
 8011d66:	9b04      	ldr	r3, [sp, #16]
 8011d68:	2202      	movs	r2, #2
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	9301      	str	r3, [sp, #4]
 8011d6e:	89a3      	ldrh	r3, [r4, #12]
 8011d70:	001f      	movs	r7, r3
 8011d72:	4017      	ands	r7, r2
 8011d74:	4213      	tst	r3, r2
 8011d76:	d171      	bne.n	8011e5c <__sfvwrite_r+0x118>
 8011d78:	2201      	movs	r2, #1
 8011d7a:	2101      	movs	r1, #1
 8011d7c:	401a      	ands	r2, r3
 8011d7e:	420b      	tst	r3, r1
 8011d80:	d100      	bne.n	8011d84 <__sfvwrite_r+0x40>
 8011d82:	e0a5      	b.n	8011ed0 <__sfvwrite_r+0x18c>
 8011d84:	0038      	movs	r0, r7
 8011d86:	003e      	movs	r6, r7
 8011d88:	9703      	str	r7, [sp, #12]
 8011d8a:	9b03      	ldr	r3, [sp, #12]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d100      	bne.n	8011d92 <__sfvwrite_r+0x4e>
 8011d90:	e10b      	b.n	8011faa <__sfvwrite_r+0x266>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d10a      	bne.n	8011dac <__sfvwrite_r+0x68>
 8011d96:	001a      	movs	r2, r3
 8011d98:	210a      	movs	r1, #10
 8011d9a:	0030      	movs	r0, r6
 8011d9c:	f7fd fe2a 	bl	800f9f4 <memchr>
 8011da0:	9b03      	ldr	r3, [sp, #12]
 8011da2:	1c5f      	adds	r7, r3, #1
 8011da4:	2800      	cmp	r0, #0
 8011da6:	d001      	beq.n	8011dac <__sfvwrite_r+0x68>
 8011da8:	3001      	adds	r0, #1
 8011daa:	1b87      	subs	r7, r0, r6
 8011dac:	9b03      	ldr	r3, [sp, #12]
 8011dae:	9705      	str	r7, [sp, #20]
 8011db0:	429f      	cmp	r7, r3
 8011db2:	d900      	bls.n	8011db6 <__sfvwrite_r+0x72>
 8011db4:	9305      	str	r3, [sp, #20]
 8011db6:	6820      	ldr	r0, [r4, #0]
 8011db8:	6922      	ldr	r2, [r4, #16]
 8011dba:	68a5      	ldr	r5, [r4, #8]
 8011dbc:	6963      	ldr	r3, [r4, #20]
 8011dbe:	4290      	cmp	r0, r2
 8011dc0:	d800      	bhi.n	8011dc4 <__sfvwrite_r+0x80>
 8011dc2:	e0fb      	b.n	8011fbc <__sfvwrite_r+0x278>
 8011dc4:	9a05      	ldr	r2, [sp, #20]
 8011dc6:	18ed      	adds	r5, r5, r3
 8011dc8:	42aa      	cmp	r2, r5
 8011dca:	dc00      	bgt.n	8011dce <__sfvwrite_r+0x8a>
 8011dcc:	e0f6      	b.n	8011fbc <__sfvwrite_r+0x278>
 8011dce:	0031      	movs	r1, r6
 8011dd0:	002a      	movs	r2, r5
 8011dd2:	f000 fa1e 	bl	8012212 <memmove>
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	0021      	movs	r1, r4
 8011dda:	195b      	adds	r3, r3, r5
 8011ddc:	9802      	ldr	r0, [sp, #8]
 8011dde:	6023      	str	r3, [r4, #0]
 8011de0:	f7fd fd8e 	bl	800f900 <_fflush_r>
 8011de4:	2800      	cmp	r0, #0
 8011de6:	d16e      	bne.n	8011ec6 <__sfvwrite_r+0x182>
 8011de8:	2001      	movs	r0, #1
 8011dea:	1b7f      	subs	r7, r7, r5
 8011dec:	d105      	bne.n	8011dfa <__sfvwrite_r+0xb6>
 8011dee:	0021      	movs	r1, r4
 8011df0:	9802      	ldr	r0, [sp, #8]
 8011df2:	f7fd fd85 	bl	800f900 <_fflush_r>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d165      	bne.n	8011ec6 <__sfvwrite_r+0x182>
 8011dfa:	9b03      	ldr	r3, [sp, #12]
 8011dfc:	9a04      	ldr	r2, [sp, #16]
 8011dfe:	1b5b      	subs	r3, r3, r5
 8011e00:	9303      	str	r3, [sp, #12]
 8011e02:	9b04      	ldr	r3, [sp, #16]
 8011e04:	1976      	adds	r6, r6, r5
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	1b5b      	subs	r3, r3, r5
 8011e0a:	6093      	str	r3, [r2, #8]
 8011e0c:	d1bd      	bne.n	8011d8a <__sfvwrite_r+0x46>
 8011e0e:	e7a1      	b.n	8011d54 <__sfvwrite_r+0x10>
 8011e10:	0021      	movs	r1, r4
 8011e12:	9802      	ldr	r0, [sp, #8]
 8011e14:	f000 f932 	bl	801207c <__swsetup_r>
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	d0a4      	beq.n	8011d66 <__sfvwrite_r+0x22>
 8011e1c:	2001      	movs	r0, #1
 8011e1e:	4240      	negs	r0, r0
 8011e20:	e799      	b.n	8011d56 <__sfvwrite_r+0x12>
 8011e22:	9b01      	ldr	r3, [sp, #4]
 8011e24:	681e      	ldr	r6, [r3, #0]
 8011e26:	685d      	ldr	r5, [r3, #4]
 8011e28:	3308      	adds	r3, #8
 8011e2a:	9301      	str	r3, [sp, #4]
 8011e2c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8011e2e:	69e1      	ldr	r1, [r4, #28]
 8011e30:	2d00      	cmp	r5, #0
 8011e32:	d0f6      	beq.n	8011e22 <__sfvwrite_r+0xde>
 8011e34:	4a6e      	ldr	r2, [pc, #440]	; (8011ff0 <__sfvwrite_r+0x2ac>)
 8011e36:	002b      	movs	r3, r5
 8011e38:	4295      	cmp	r5, r2
 8011e3a:	d900      	bls.n	8011e3e <__sfvwrite_r+0xfa>
 8011e3c:	0013      	movs	r3, r2
 8011e3e:	0032      	movs	r2, r6
 8011e40:	9802      	ldr	r0, [sp, #8]
 8011e42:	47b8      	blx	r7
 8011e44:	2800      	cmp	r0, #0
 8011e46:	dd3e      	ble.n	8011ec6 <__sfvwrite_r+0x182>
 8011e48:	9b04      	ldr	r3, [sp, #16]
 8011e4a:	9a04      	ldr	r2, [sp, #16]
 8011e4c:	689b      	ldr	r3, [r3, #8]
 8011e4e:	1836      	adds	r6, r6, r0
 8011e50:	1a1b      	subs	r3, r3, r0
 8011e52:	1a2d      	subs	r5, r5, r0
 8011e54:	6093      	str	r3, [r2, #8]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d1e8      	bne.n	8011e2c <__sfvwrite_r+0xe8>
 8011e5a:	e77b      	b.n	8011d54 <__sfvwrite_r+0x10>
 8011e5c:	2600      	movs	r6, #0
 8011e5e:	0035      	movs	r5, r6
 8011e60:	e7e4      	b.n	8011e2c <__sfvwrite_r+0xe8>
 8011e62:	9b01      	ldr	r3, [sp, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	9303      	str	r3, [sp, #12]
 8011e68:	9b01      	ldr	r3, [sp, #4]
 8011e6a:	685d      	ldr	r5, [r3, #4]
 8011e6c:	3308      	adds	r3, #8
 8011e6e:	9301      	str	r3, [sp, #4]
 8011e70:	220c      	movs	r2, #12
 8011e72:	5ea3      	ldrsh	r3, [r4, r2]
 8011e74:	6820      	ldr	r0, [r4, #0]
 8011e76:	68a6      	ldr	r6, [r4, #8]
 8011e78:	2d00      	cmp	r5, #0
 8011e7a:	d0f2      	beq.n	8011e62 <__sfvwrite_r+0x11e>
 8011e7c:	2180      	movs	r1, #128	; 0x80
 8011e7e:	0089      	lsls	r1, r1, #2
 8011e80:	b29a      	uxth	r2, r3
 8011e82:	420b      	tst	r3, r1
 8011e84:	d062      	beq.n	8011f4c <__sfvwrite_r+0x208>
 8011e86:	42ae      	cmp	r6, r5
 8011e88:	d837      	bhi.n	8011efa <__sfvwrite_r+0x1b6>
 8011e8a:	2390      	movs	r3, #144	; 0x90
 8011e8c:	00db      	lsls	r3, r3, #3
 8011e8e:	421a      	tst	r2, r3
 8011e90:	d033      	beq.n	8011efa <__sfvwrite_r+0x1b6>
 8011e92:	6921      	ldr	r1, [r4, #16]
 8011e94:	1a43      	subs	r3, r0, r1
 8011e96:	2003      	movs	r0, #3
 8011e98:	9305      	str	r3, [sp, #20]
 8011e9a:	6963      	ldr	r3, [r4, #20]
 8011e9c:	4343      	muls	r3, r0
 8011e9e:	0fdf      	lsrs	r7, r3, #31
 8011ea0:	18ff      	adds	r7, r7, r3
 8011ea2:	9b05      	ldr	r3, [sp, #20]
 8011ea4:	107f      	asrs	r7, r7, #1
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	195b      	adds	r3, r3, r5
 8011eaa:	42bb      	cmp	r3, r7
 8011eac:	d900      	bls.n	8011eb0 <__sfvwrite_r+0x16c>
 8011eae:	001f      	movs	r7, r3
 8011eb0:	0552      	lsls	r2, r2, #21
 8011eb2:	d53c      	bpl.n	8011f2e <__sfvwrite_r+0x1ea>
 8011eb4:	0039      	movs	r1, r7
 8011eb6:	9802      	ldr	r0, [sp, #8]
 8011eb8:	f7f8 fb56 	bl	800a568 <_malloc_r>
 8011ebc:	1e06      	subs	r6, r0, #0
 8011ebe:	d10a      	bne.n	8011ed6 <__sfvwrite_r+0x192>
 8011ec0:	230c      	movs	r3, #12
 8011ec2:	9a02      	ldr	r2, [sp, #8]
 8011ec4:	6013      	str	r3, [r2, #0]
 8011ec6:	2340      	movs	r3, #64	; 0x40
 8011ec8:	89a2      	ldrh	r2, [r4, #12]
 8011eca:	4313      	orrs	r3, r2
 8011ecc:	81a3      	strh	r3, [r4, #12]
 8011ece:	e7a5      	b.n	8011e1c <__sfvwrite_r+0xd8>
 8011ed0:	0015      	movs	r5, r2
 8011ed2:	9203      	str	r2, [sp, #12]
 8011ed4:	e7cc      	b.n	8011e70 <__sfvwrite_r+0x12c>
 8011ed6:	9a05      	ldr	r2, [sp, #20]
 8011ed8:	6921      	ldr	r1, [r4, #16]
 8011eda:	f7f9 feaa 	bl	800bc32 <memcpy>
 8011ede:	89a2      	ldrh	r2, [r4, #12]
 8011ee0:	4b44      	ldr	r3, [pc, #272]	; (8011ff4 <__sfvwrite_r+0x2b0>)
 8011ee2:	401a      	ands	r2, r3
 8011ee4:	2380      	movs	r3, #128	; 0x80
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	81a3      	strh	r3, [r4, #12]
 8011eea:	9b05      	ldr	r3, [sp, #20]
 8011eec:	6126      	str	r6, [r4, #16]
 8011eee:	18f6      	adds	r6, r6, r3
 8011ef0:	6026      	str	r6, [r4, #0]
 8011ef2:	002e      	movs	r6, r5
 8011ef4:	6167      	str	r7, [r4, #20]
 8011ef6:	1aff      	subs	r7, r7, r3
 8011ef8:	60a7      	str	r7, [r4, #8]
 8011efa:	002f      	movs	r7, r5
 8011efc:	42ae      	cmp	r6, r5
 8011efe:	d900      	bls.n	8011f02 <__sfvwrite_r+0x1be>
 8011f00:	002e      	movs	r6, r5
 8011f02:	0032      	movs	r2, r6
 8011f04:	9903      	ldr	r1, [sp, #12]
 8011f06:	6820      	ldr	r0, [r4, #0]
 8011f08:	f000 f983 	bl	8012212 <memmove>
 8011f0c:	68a3      	ldr	r3, [r4, #8]
 8011f0e:	1b9b      	subs	r3, r3, r6
 8011f10:	60a3      	str	r3, [r4, #8]
 8011f12:	6823      	ldr	r3, [r4, #0]
 8011f14:	199b      	adds	r3, r3, r6
 8011f16:	6023      	str	r3, [r4, #0]
 8011f18:	9b03      	ldr	r3, [sp, #12]
 8011f1a:	9a04      	ldr	r2, [sp, #16]
 8011f1c:	19db      	adds	r3, r3, r7
 8011f1e:	9303      	str	r3, [sp, #12]
 8011f20:	9b04      	ldr	r3, [sp, #16]
 8011f22:	1bed      	subs	r5, r5, r7
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	1bdb      	subs	r3, r3, r7
 8011f28:	6093      	str	r3, [r2, #8]
 8011f2a:	d1a1      	bne.n	8011e70 <__sfvwrite_r+0x12c>
 8011f2c:	e712      	b.n	8011d54 <__sfvwrite_r+0x10>
 8011f2e:	003a      	movs	r2, r7
 8011f30:	9802      	ldr	r0, [sp, #8]
 8011f32:	f7fe fcd7 	bl	80108e4 <_realloc_r>
 8011f36:	1e06      	subs	r6, r0, #0
 8011f38:	d1d7      	bne.n	8011eea <__sfvwrite_r+0x1a6>
 8011f3a:	6921      	ldr	r1, [r4, #16]
 8011f3c:	9802      	ldr	r0, [sp, #8]
 8011f3e:	f7f9 fef3 	bl	800bd28 <_free_r>
 8011f42:	2280      	movs	r2, #128	; 0x80
 8011f44:	89a3      	ldrh	r3, [r4, #12]
 8011f46:	4393      	bics	r3, r2
 8011f48:	81a3      	strh	r3, [r4, #12]
 8011f4a:	e7b9      	b.n	8011ec0 <__sfvwrite_r+0x17c>
 8011f4c:	6923      	ldr	r3, [r4, #16]
 8011f4e:	4283      	cmp	r3, r0
 8011f50:	d302      	bcc.n	8011f58 <__sfvwrite_r+0x214>
 8011f52:	6967      	ldr	r7, [r4, #20]
 8011f54:	42af      	cmp	r7, r5
 8011f56:	d916      	bls.n	8011f86 <__sfvwrite_r+0x242>
 8011f58:	42ae      	cmp	r6, r5
 8011f5a:	d900      	bls.n	8011f5e <__sfvwrite_r+0x21a>
 8011f5c:	002e      	movs	r6, r5
 8011f5e:	0032      	movs	r2, r6
 8011f60:	9903      	ldr	r1, [sp, #12]
 8011f62:	f000 f956 	bl	8012212 <memmove>
 8011f66:	68a3      	ldr	r3, [r4, #8]
 8011f68:	6822      	ldr	r2, [r4, #0]
 8011f6a:	1b9b      	subs	r3, r3, r6
 8011f6c:	1992      	adds	r2, r2, r6
 8011f6e:	0037      	movs	r7, r6
 8011f70:	60a3      	str	r3, [r4, #8]
 8011f72:	6022      	str	r2, [r4, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d1cf      	bne.n	8011f18 <__sfvwrite_r+0x1d4>
 8011f78:	0021      	movs	r1, r4
 8011f7a:	9802      	ldr	r0, [sp, #8]
 8011f7c:	f7fd fcc0 	bl	800f900 <_fflush_r>
 8011f80:	2800      	cmp	r0, #0
 8011f82:	d0c9      	beq.n	8011f18 <__sfvwrite_r+0x1d4>
 8011f84:	e79f      	b.n	8011ec6 <__sfvwrite_r+0x182>
 8011f86:	4b1c      	ldr	r3, [pc, #112]	; (8011ff8 <__sfvwrite_r+0x2b4>)
 8011f88:	0028      	movs	r0, r5
 8011f8a:	429d      	cmp	r5, r3
 8011f8c:	d900      	bls.n	8011f90 <__sfvwrite_r+0x24c>
 8011f8e:	481b      	ldr	r0, [pc, #108]	; (8011ffc <__sfvwrite_r+0x2b8>)
 8011f90:	0039      	movs	r1, r7
 8011f92:	f7ee f95d 	bl	8000250 <__divsi3>
 8011f96:	003b      	movs	r3, r7
 8011f98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011f9a:	4343      	muls	r3, r0
 8011f9c:	9a03      	ldr	r2, [sp, #12]
 8011f9e:	69e1      	ldr	r1, [r4, #28]
 8011fa0:	9802      	ldr	r0, [sp, #8]
 8011fa2:	47b0      	blx	r6
 8011fa4:	1e07      	subs	r7, r0, #0
 8011fa6:	dcb7      	bgt.n	8011f18 <__sfvwrite_r+0x1d4>
 8011fa8:	e78d      	b.n	8011ec6 <__sfvwrite_r+0x182>
 8011faa:	9b01      	ldr	r3, [sp, #4]
 8011fac:	2000      	movs	r0, #0
 8011fae:	681e      	ldr	r6, [r3, #0]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	9303      	str	r3, [sp, #12]
 8011fb4:	9b01      	ldr	r3, [sp, #4]
 8011fb6:	3308      	adds	r3, #8
 8011fb8:	9301      	str	r3, [sp, #4]
 8011fba:	e6e6      	b.n	8011d8a <__sfvwrite_r+0x46>
 8011fbc:	9a05      	ldr	r2, [sp, #20]
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	dc08      	bgt.n	8011fd4 <__sfvwrite_r+0x290>
 8011fc2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011fc4:	0032      	movs	r2, r6
 8011fc6:	69e1      	ldr	r1, [r4, #28]
 8011fc8:	9802      	ldr	r0, [sp, #8]
 8011fca:	47a8      	blx	r5
 8011fcc:	1e05      	subs	r5, r0, #0
 8011fce:	dd00      	ble.n	8011fd2 <__sfvwrite_r+0x28e>
 8011fd0:	e70a      	b.n	8011de8 <__sfvwrite_r+0xa4>
 8011fd2:	e778      	b.n	8011ec6 <__sfvwrite_r+0x182>
 8011fd4:	9a05      	ldr	r2, [sp, #20]
 8011fd6:	0031      	movs	r1, r6
 8011fd8:	f000 f91b 	bl	8012212 <memmove>
 8011fdc:	9a05      	ldr	r2, [sp, #20]
 8011fde:	68a3      	ldr	r3, [r4, #8]
 8011fe0:	0015      	movs	r5, r2
 8011fe2:	1a9b      	subs	r3, r3, r2
 8011fe4:	60a3      	str	r3, [r4, #8]
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	189b      	adds	r3, r3, r2
 8011fea:	6023      	str	r3, [r4, #0]
 8011fec:	e6fc      	b.n	8011de8 <__sfvwrite_r+0xa4>
 8011fee:	46c0      	nop			; (mov r8, r8)
 8011ff0:	7ffffc00 	.word	0x7ffffc00
 8011ff4:	fffffb7f 	.word	0xfffffb7f
 8011ff8:	7ffffffe 	.word	0x7ffffffe
 8011ffc:	7fffffff 	.word	0x7fffffff

08012000 <__submore>:
 8012000:	000b      	movs	r3, r1
 8012002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012004:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8012006:	3340      	adds	r3, #64	; 0x40
 8012008:	000c      	movs	r4, r1
 801200a:	429d      	cmp	r5, r3
 801200c:	d11c      	bne.n	8012048 <__submore+0x48>
 801200e:	2680      	movs	r6, #128	; 0x80
 8012010:	00f6      	lsls	r6, r6, #3
 8012012:	0031      	movs	r1, r6
 8012014:	f7f8 faa8 	bl	800a568 <_malloc_r>
 8012018:	2800      	cmp	r0, #0
 801201a:	d102      	bne.n	8012022 <__submore+0x22>
 801201c:	2001      	movs	r0, #1
 801201e:	4240      	negs	r0, r0
 8012020:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012022:	0023      	movs	r3, r4
 8012024:	6320      	str	r0, [r4, #48]	; 0x30
 8012026:	6366      	str	r6, [r4, #52]	; 0x34
 8012028:	3342      	adds	r3, #66	; 0x42
 801202a:	781a      	ldrb	r2, [r3, #0]
 801202c:	4b10      	ldr	r3, [pc, #64]	; (8012070 <__submore+0x70>)
 801202e:	54c2      	strb	r2, [r0, r3]
 8012030:	0023      	movs	r3, r4
 8012032:	3341      	adds	r3, #65	; 0x41
 8012034:	781a      	ldrb	r2, [r3, #0]
 8012036:	4b0f      	ldr	r3, [pc, #60]	; (8012074 <__submore+0x74>)
 8012038:	54c2      	strb	r2, [r0, r3]
 801203a:	782a      	ldrb	r2, [r5, #0]
 801203c:	4b0e      	ldr	r3, [pc, #56]	; (8012078 <__submore+0x78>)
 801203e:	54c2      	strb	r2, [r0, r3]
 8012040:	18c0      	adds	r0, r0, r3
 8012042:	6020      	str	r0, [r4, #0]
 8012044:	2000      	movs	r0, #0
 8012046:	e7eb      	b.n	8012020 <__submore+0x20>
 8012048:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801204a:	0029      	movs	r1, r5
 801204c:	0073      	lsls	r3, r6, #1
 801204e:	001a      	movs	r2, r3
 8012050:	9301      	str	r3, [sp, #4]
 8012052:	f7fe fc47 	bl	80108e4 <_realloc_r>
 8012056:	1e05      	subs	r5, r0, #0
 8012058:	d0e0      	beq.n	801201c <__submore+0x1c>
 801205a:	1987      	adds	r7, r0, r6
 801205c:	0001      	movs	r1, r0
 801205e:	0032      	movs	r2, r6
 8012060:	0038      	movs	r0, r7
 8012062:	f7f9 fde6 	bl	800bc32 <memcpy>
 8012066:	9b01      	ldr	r3, [sp, #4]
 8012068:	6027      	str	r7, [r4, #0]
 801206a:	6325      	str	r5, [r4, #48]	; 0x30
 801206c:	6363      	str	r3, [r4, #52]	; 0x34
 801206e:	e7e9      	b.n	8012044 <__submore+0x44>
 8012070:	000003ff 	.word	0x000003ff
 8012074:	000003fe 	.word	0x000003fe
 8012078:	000003fd 	.word	0x000003fd

0801207c <__swsetup_r>:
 801207c:	4b30      	ldr	r3, [pc, #192]	; (8012140 <__swsetup_r+0xc4>)
 801207e:	b570      	push	{r4, r5, r6, lr}
 8012080:	0005      	movs	r5, r0
 8012082:	6818      	ldr	r0, [r3, #0]
 8012084:	000c      	movs	r4, r1
 8012086:	2800      	cmp	r0, #0
 8012088:	d004      	beq.n	8012094 <__swsetup_r+0x18>
 801208a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801208c:	2b00      	cmp	r3, #0
 801208e:	d101      	bne.n	8012094 <__swsetup_r+0x18>
 8012090:	f7f9 fbec 	bl	800b86c <__sinit>
 8012094:	230c      	movs	r3, #12
 8012096:	5ee2      	ldrsh	r2, [r4, r3]
 8012098:	b293      	uxth	r3, r2
 801209a:	0711      	lsls	r1, r2, #28
 801209c:	d423      	bmi.n	80120e6 <__swsetup_r+0x6a>
 801209e:	06d9      	lsls	r1, r3, #27
 80120a0:	d407      	bmi.n	80120b2 <__swsetup_r+0x36>
 80120a2:	2309      	movs	r3, #9
 80120a4:	2001      	movs	r0, #1
 80120a6:	602b      	str	r3, [r5, #0]
 80120a8:	3337      	adds	r3, #55	; 0x37
 80120aa:	4313      	orrs	r3, r2
 80120ac:	81a3      	strh	r3, [r4, #12]
 80120ae:	4240      	negs	r0, r0
 80120b0:	bd70      	pop	{r4, r5, r6, pc}
 80120b2:	075b      	lsls	r3, r3, #29
 80120b4:	d513      	bpl.n	80120de <__swsetup_r+0x62>
 80120b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80120b8:	2900      	cmp	r1, #0
 80120ba:	d008      	beq.n	80120ce <__swsetup_r+0x52>
 80120bc:	0023      	movs	r3, r4
 80120be:	3340      	adds	r3, #64	; 0x40
 80120c0:	4299      	cmp	r1, r3
 80120c2:	d002      	beq.n	80120ca <__swsetup_r+0x4e>
 80120c4:	0028      	movs	r0, r5
 80120c6:	f7f9 fe2f 	bl	800bd28 <_free_r>
 80120ca:	2300      	movs	r3, #0
 80120cc:	6323      	str	r3, [r4, #48]	; 0x30
 80120ce:	2224      	movs	r2, #36	; 0x24
 80120d0:	89a3      	ldrh	r3, [r4, #12]
 80120d2:	4393      	bics	r3, r2
 80120d4:	81a3      	strh	r3, [r4, #12]
 80120d6:	2300      	movs	r3, #0
 80120d8:	6063      	str	r3, [r4, #4]
 80120da:	6923      	ldr	r3, [r4, #16]
 80120dc:	6023      	str	r3, [r4, #0]
 80120de:	2308      	movs	r3, #8
 80120e0:	89a2      	ldrh	r2, [r4, #12]
 80120e2:	4313      	orrs	r3, r2
 80120e4:	81a3      	strh	r3, [r4, #12]
 80120e6:	6923      	ldr	r3, [r4, #16]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d10b      	bne.n	8012104 <__swsetup_r+0x88>
 80120ec:	21a0      	movs	r1, #160	; 0xa0
 80120ee:	2280      	movs	r2, #128	; 0x80
 80120f0:	89a3      	ldrh	r3, [r4, #12]
 80120f2:	0089      	lsls	r1, r1, #2
 80120f4:	0092      	lsls	r2, r2, #2
 80120f6:	400b      	ands	r3, r1
 80120f8:	4293      	cmp	r3, r2
 80120fa:	d003      	beq.n	8012104 <__swsetup_r+0x88>
 80120fc:	0021      	movs	r1, r4
 80120fe:	0028      	movs	r0, r5
 8012100:	f000 f8e8 	bl	80122d4 <__smakebuf_r>
 8012104:	220c      	movs	r2, #12
 8012106:	5ea3      	ldrsh	r3, [r4, r2]
 8012108:	2001      	movs	r0, #1
 801210a:	001a      	movs	r2, r3
 801210c:	b299      	uxth	r1, r3
 801210e:	4002      	ands	r2, r0
 8012110:	4203      	tst	r3, r0
 8012112:	d00f      	beq.n	8012134 <__swsetup_r+0xb8>
 8012114:	2200      	movs	r2, #0
 8012116:	60a2      	str	r2, [r4, #8]
 8012118:	6962      	ldr	r2, [r4, #20]
 801211a:	4252      	negs	r2, r2
 801211c:	61a2      	str	r2, [r4, #24]
 801211e:	2000      	movs	r0, #0
 8012120:	6922      	ldr	r2, [r4, #16]
 8012122:	4282      	cmp	r2, r0
 8012124:	d1c4      	bne.n	80120b0 <__swsetup_r+0x34>
 8012126:	0609      	lsls	r1, r1, #24
 8012128:	d5c2      	bpl.n	80120b0 <__swsetup_r+0x34>
 801212a:	2240      	movs	r2, #64	; 0x40
 801212c:	4313      	orrs	r3, r2
 801212e:	81a3      	strh	r3, [r4, #12]
 8012130:	3801      	subs	r0, #1
 8012132:	e7bd      	b.n	80120b0 <__swsetup_r+0x34>
 8012134:	0788      	lsls	r0, r1, #30
 8012136:	d400      	bmi.n	801213a <__swsetup_r+0xbe>
 8012138:	6962      	ldr	r2, [r4, #20]
 801213a:	60a2      	str	r2, [r4, #8]
 801213c:	e7ef      	b.n	801211e <__swsetup_r+0xa2>
 801213e:	46c0      	nop			; (mov r8, r8)
 8012140:	200006d8 	.word	0x200006d8

08012144 <__fputwc>:
 8012144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012146:	b085      	sub	sp, #20
 8012148:	000e      	movs	r6, r1
 801214a:	0015      	movs	r5, r2
 801214c:	9001      	str	r0, [sp, #4]
 801214e:	f7f9 fccf 	bl	800baf0 <__locale_mb_cur_max>
 8012152:	0004      	movs	r4, r0
 8012154:	2801      	cmp	r0, #1
 8012156:	d119      	bne.n	801218c <__fputwc+0x48>
 8012158:	1e73      	subs	r3, r6, #1
 801215a:	2bfe      	cmp	r3, #254	; 0xfe
 801215c:	d816      	bhi.n	801218c <__fputwc+0x48>
 801215e:	ab02      	add	r3, sp, #8
 8012160:	711e      	strb	r6, [r3, #4]
 8012162:	2700      	movs	r7, #0
 8012164:	42a7      	cmp	r7, r4
 8012166:	d020      	beq.n	80121aa <__fputwc+0x66>
 8012168:	ab03      	add	r3, sp, #12
 801216a:	5dd9      	ldrb	r1, [r3, r7]
 801216c:	68ab      	ldr	r3, [r5, #8]
 801216e:	3b01      	subs	r3, #1
 8012170:	60ab      	str	r3, [r5, #8]
 8012172:	2b00      	cmp	r3, #0
 8012174:	da04      	bge.n	8012180 <__fputwc+0x3c>
 8012176:	69aa      	ldr	r2, [r5, #24]
 8012178:	4293      	cmp	r3, r2
 801217a:	db19      	blt.n	80121b0 <__fputwc+0x6c>
 801217c:	290a      	cmp	r1, #10
 801217e:	d017      	beq.n	80121b0 <__fputwc+0x6c>
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	1c5a      	adds	r2, r3, #1
 8012184:	602a      	str	r2, [r5, #0]
 8012186:	7019      	strb	r1, [r3, #0]
 8012188:	3701      	adds	r7, #1
 801218a:	e7eb      	b.n	8012164 <__fputwc+0x20>
 801218c:	002b      	movs	r3, r5
 801218e:	0032      	movs	r2, r6
 8012190:	9801      	ldr	r0, [sp, #4]
 8012192:	335c      	adds	r3, #92	; 0x5c
 8012194:	a903      	add	r1, sp, #12
 8012196:	f000 f857 	bl	8012248 <_wcrtomb_r>
 801219a:	0004      	movs	r4, r0
 801219c:	1c43      	adds	r3, r0, #1
 801219e:	d1e0      	bne.n	8012162 <__fputwc+0x1e>
 80121a0:	2340      	movs	r3, #64	; 0x40
 80121a2:	0006      	movs	r6, r0
 80121a4:	89aa      	ldrh	r2, [r5, #12]
 80121a6:	4313      	orrs	r3, r2
 80121a8:	81ab      	strh	r3, [r5, #12]
 80121aa:	0030      	movs	r0, r6
 80121ac:	b005      	add	sp, #20
 80121ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121b0:	002a      	movs	r2, r5
 80121b2:	9801      	ldr	r0, [sp, #4]
 80121b4:	f000 f8cc 	bl	8012350 <__swbuf_r>
 80121b8:	1c43      	adds	r3, r0, #1
 80121ba:	d1e5      	bne.n	8012188 <__fputwc+0x44>
 80121bc:	0006      	movs	r6, r0
 80121be:	e7f4      	b.n	80121aa <__fputwc+0x66>

080121c0 <_fputwc_r>:
 80121c0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80121c2:	b570      	push	{r4, r5, r6, lr}
 80121c4:	0005      	movs	r5, r0
 80121c6:	000e      	movs	r6, r1
 80121c8:	0014      	movs	r4, r2
 80121ca:	07db      	lsls	r3, r3, #31
 80121cc:	d405      	bmi.n	80121da <_fputwc_r+0x1a>
 80121ce:	8993      	ldrh	r3, [r2, #12]
 80121d0:	059b      	lsls	r3, r3, #22
 80121d2:	d402      	bmi.n	80121da <_fputwc_r+0x1a>
 80121d4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80121d6:	f7f9 fd1f 	bl	800bc18 <__retarget_lock_acquire_recursive>
 80121da:	230c      	movs	r3, #12
 80121dc:	5ee2      	ldrsh	r2, [r4, r3]
 80121de:	2380      	movs	r3, #128	; 0x80
 80121e0:	019b      	lsls	r3, r3, #6
 80121e2:	421a      	tst	r2, r3
 80121e4:	d104      	bne.n	80121f0 <_fputwc_r+0x30>
 80121e6:	431a      	orrs	r2, r3
 80121e8:	81a2      	strh	r2, [r4, #12]
 80121ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121ec:	4313      	orrs	r3, r2
 80121ee:	6663      	str	r3, [r4, #100]	; 0x64
 80121f0:	0028      	movs	r0, r5
 80121f2:	0022      	movs	r2, r4
 80121f4:	0031      	movs	r1, r6
 80121f6:	f7ff ffa5 	bl	8012144 <__fputwc>
 80121fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121fc:	0005      	movs	r5, r0
 80121fe:	07db      	lsls	r3, r3, #31
 8012200:	d405      	bmi.n	801220e <_fputwc_r+0x4e>
 8012202:	89a3      	ldrh	r3, [r4, #12]
 8012204:	059b      	lsls	r3, r3, #22
 8012206:	d402      	bmi.n	801220e <_fputwc_r+0x4e>
 8012208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801220a:	f7f9 fd06 	bl	800bc1a <__retarget_lock_release_recursive>
 801220e:	0028      	movs	r0, r5
 8012210:	bd70      	pop	{r4, r5, r6, pc}

08012212 <memmove>:
 8012212:	b510      	push	{r4, lr}
 8012214:	4288      	cmp	r0, r1
 8012216:	d902      	bls.n	801221e <memmove+0xc>
 8012218:	188b      	adds	r3, r1, r2
 801221a:	4298      	cmp	r0, r3
 801221c:	d303      	bcc.n	8012226 <memmove+0x14>
 801221e:	2300      	movs	r3, #0
 8012220:	e007      	b.n	8012232 <memmove+0x20>
 8012222:	5c8b      	ldrb	r3, [r1, r2]
 8012224:	5483      	strb	r3, [r0, r2]
 8012226:	3a01      	subs	r2, #1
 8012228:	d2fb      	bcs.n	8012222 <memmove+0x10>
 801222a:	bd10      	pop	{r4, pc}
 801222c:	5ccc      	ldrb	r4, [r1, r3]
 801222e:	54c4      	strb	r4, [r0, r3]
 8012230:	3301      	adds	r3, #1
 8012232:	429a      	cmp	r2, r3
 8012234:	d1fa      	bne.n	801222c <memmove+0x1a>
 8012236:	e7f8      	b.n	801222a <memmove+0x18>

08012238 <abort>:
 8012238:	2006      	movs	r0, #6
 801223a:	b510      	push	{r4, lr}
 801223c:	f000 f906 	bl	801244c <raise>
 8012240:	2001      	movs	r0, #1
 8012242:	f7f1 f9db 	bl	80035fc <_exit>
	...

08012248 <_wcrtomb_r>:
 8012248:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801224a:	001d      	movs	r5, r3
 801224c:	4b09      	ldr	r3, [pc, #36]	; (8012274 <_wcrtomb_r+0x2c>)
 801224e:	0004      	movs	r4, r0
 8012250:	33e0      	adds	r3, #224	; 0xe0
 8012252:	681e      	ldr	r6, [r3, #0]
 8012254:	002b      	movs	r3, r5
 8012256:	2900      	cmp	r1, #0
 8012258:	d101      	bne.n	801225e <_wcrtomb_r+0x16>
 801225a:	000a      	movs	r2, r1
 801225c:	a901      	add	r1, sp, #4
 801225e:	0020      	movs	r0, r4
 8012260:	47b0      	blx	r6
 8012262:	1c43      	adds	r3, r0, #1
 8012264:	d103      	bne.n	801226e <_wcrtomb_r+0x26>
 8012266:	2300      	movs	r3, #0
 8012268:	602b      	str	r3, [r5, #0]
 801226a:	338a      	adds	r3, #138	; 0x8a
 801226c:	6023      	str	r3, [r4, #0]
 801226e:	b004      	add	sp, #16
 8012270:	bd70      	pop	{r4, r5, r6, pc}
 8012272:	46c0      	nop			; (mov r8, r8)
 8012274:	20000448 	.word	0x20000448

08012278 <__swhatbuf_r>:
 8012278:	b570      	push	{r4, r5, r6, lr}
 801227a:	000e      	movs	r6, r1
 801227c:	001d      	movs	r5, r3
 801227e:	230e      	movs	r3, #14
 8012280:	5ec9      	ldrsh	r1, [r1, r3]
 8012282:	0014      	movs	r4, r2
 8012284:	b096      	sub	sp, #88	; 0x58
 8012286:	2900      	cmp	r1, #0
 8012288:	da09      	bge.n	801229e <__swhatbuf_r+0x26>
 801228a:	89b2      	ldrh	r2, [r6, #12]
 801228c:	2380      	movs	r3, #128	; 0x80
 801228e:	0011      	movs	r1, r2
 8012290:	4019      	ands	r1, r3
 8012292:	421a      	tst	r2, r3
 8012294:	d018      	beq.n	80122c8 <__swhatbuf_r+0x50>
 8012296:	2100      	movs	r1, #0
 8012298:	3b40      	subs	r3, #64	; 0x40
 801229a:	0008      	movs	r0, r1
 801229c:	e010      	b.n	80122c0 <__swhatbuf_r+0x48>
 801229e:	466a      	mov	r2, sp
 80122a0:	f000 f8de 	bl	8012460 <_fstat_r>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	dbf0      	blt.n	801228a <__swhatbuf_r+0x12>
 80122a8:	23f0      	movs	r3, #240	; 0xf0
 80122aa:	9901      	ldr	r1, [sp, #4]
 80122ac:	021b      	lsls	r3, r3, #8
 80122ae:	4019      	ands	r1, r3
 80122b0:	4b07      	ldr	r3, [pc, #28]	; (80122d0 <__swhatbuf_r+0x58>)
 80122b2:	2080      	movs	r0, #128	; 0x80
 80122b4:	18c9      	adds	r1, r1, r3
 80122b6:	424b      	negs	r3, r1
 80122b8:	4159      	adcs	r1, r3
 80122ba:	2380      	movs	r3, #128	; 0x80
 80122bc:	0100      	lsls	r0, r0, #4
 80122be:	00db      	lsls	r3, r3, #3
 80122c0:	6029      	str	r1, [r5, #0]
 80122c2:	6023      	str	r3, [r4, #0]
 80122c4:	b016      	add	sp, #88	; 0x58
 80122c6:	bd70      	pop	{r4, r5, r6, pc}
 80122c8:	2380      	movs	r3, #128	; 0x80
 80122ca:	00db      	lsls	r3, r3, #3
 80122cc:	e7e5      	b.n	801229a <__swhatbuf_r+0x22>
 80122ce:	46c0      	nop			; (mov r8, r8)
 80122d0:	ffffe000 	.word	0xffffe000

080122d4 <__smakebuf_r>:
 80122d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122d6:	2602      	movs	r6, #2
 80122d8:	898b      	ldrh	r3, [r1, #12]
 80122da:	0005      	movs	r5, r0
 80122dc:	000c      	movs	r4, r1
 80122de:	4233      	tst	r3, r6
 80122e0:	d006      	beq.n	80122f0 <__smakebuf_r+0x1c>
 80122e2:	0023      	movs	r3, r4
 80122e4:	3343      	adds	r3, #67	; 0x43
 80122e6:	6023      	str	r3, [r4, #0]
 80122e8:	6123      	str	r3, [r4, #16]
 80122ea:	2301      	movs	r3, #1
 80122ec:	6163      	str	r3, [r4, #20]
 80122ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80122f0:	466a      	mov	r2, sp
 80122f2:	ab01      	add	r3, sp, #4
 80122f4:	f7ff ffc0 	bl	8012278 <__swhatbuf_r>
 80122f8:	9900      	ldr	r1, [sp, #0]
 80122fa:	0007      	movs	r7, r0
 80122fc:	0028      	movs	r0, r5
 80122fe:	f7f8 f933 	bl	800a568 <_malloc_r>
 8012302:	2800      	cmp	r0, #0
 8012304:	d108      	bne.n	8012318 <__smakebuf_r+0x44>
 8012306:	220c      	movs	r2, #12
 8012308:	5ea3      	ldrsh	r3, [r4, r2]
 801230a:	059a      	lsls	r2, r3, #22
 801230c:	d4ef      	bmi.n	80122ee <__smakebuf_r+0x1a>
 801230e:	2203      	movs	r2, #3
 8012310:	4393      	bics	r3, r2
 8012312:	431e      	orrs	r6, r3
 8012314:	81a6      	strh	r6, [r4, #12]
 8012316:	e7e4      	b.n	80122e2 <__smakebuf_r+0xe>
 8012318:	2380      	movs	r3, #128	; 0x80
 801231a:	89a2      	ldrh	r2, [r4, #12]
 801231c:	6020      	str	r0, [r4, #0]
 801231e:	4313      	orrs	r3, r2
 8012320:	81a3      	strh	r3, [r4, #12]
 8012322:	9b00      	ldr	r3, [sp, #0]
 8012324:	6120      	str	r0, [r4, #16]
 8012326:	6163      	str	r3, [r4, #20]
 8012328:	9b01      	ldr	r3, [sp, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d00c      	beq.n	8012348 <__smakebuf_r+0x74>
 801232e:	0028      	movs	r0, r5
 8012330:	230e      	movs	r3, #14
 8012332:	5ee1      	ldrsh	r1, [r4, r3]
 8012334:	f000 f8a6 	bl	8012484 <_isatty_r>
 8012338:	2800      	cmp	r0, #0
 801233a:	d005      	beq.n	8012348 <__smakebuf_r+0x74>
 801233c:	2303      	movs	r3, #3
 801233e:	89a2      	ldrh	r2, [r4, #12]
 8012340:	439a      	bics	r2, r3
 8012342:	3b02      	subs	r3, #2
 8012344:	4313      	orrs	r3, r2
 8012346:	81a3      	strh	r3, [r4, #12]
 8012348:	89a3      	ldrh	r3, [r4, #12]
 801234a:	433b      	orrs	r3, r7
 801234c:	81a3      	strh	r3, [r4, #12]
 801234e:	e7ce      	b.n	80122ee <__smakebuf_r+0x1a>

08012350 <__swbuf_r>:
 8012350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012352:	0006      	movs	r6, r0
 8012354:	000d      	movs	r5, r1
 8012356:	0014      	movs	r4, r2
 8012358:	2800      	cmp	r0, #0
 801235a:	d004      	beq.n	8012366 <__swbuf_r+0x16>
 801235c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801235e:	2b00      	cmp	r3, #0
 8012360:	d101      	bne.n	8012366 <__swbuf_r+0x16>
 8012362:	f7f9 fa83 	bl	800b86c <__sinit>
 8012366:	69a3      	ldr	r3, [r4, #24]
 8012368:	60a3      	str	r3, [r4, #8]
 801236a:	89a3      	ldrh	r3, [r4, #12]
 801236c:	071b      	lsls	r3, r3, #28
 801236e:	d52e      	bpl.n	80123ce <__swbuf_r+0x7e>
 8012370:	6923      	ldr	r3, [r4, #16]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d02b      	beq.n	80123ce <__swbuf_r+0x7e>
 8012376:	230c      	movs	r3, #12
 8012378:	5ee2      	ldrsh	r2, [r4, r3]
 801237a:	2380      	movs	r3, #128	; 0x80
 801237c:	019b      	lsls	r3, r3, #6
 801237e:	b2ef      	uxtb	r7, r5
 8012380:	b2ed      	uxtb	r5, r5
 8012382:	421a      	tst	r2, r3
 8012384:	d02c      	beq.n	80123e0 <__swbuf_r+0x90>
 8012386:	6923      	ldr	r3, [r4, #16]
 8012388:	6820      	ldr	r0, [r4, #0]
 801238a:	1ac0      	subs	r0, r0, r3
 801238c:	6963      	ldr	r3, [r4, #20]
 801238e:	4283      	cmp	r3, r0
 8012390:	dc05      	bgt.n	801239e <__swbuf_r+0x4e>
 8012392:	0021      	movs	r1, r4
 8012394:	0030      	movs	r0, r6
 8012396:	f7fd fab3 	bl	800f900 <_fflush_r>
 801239a:	2800      	cmp	r0, #0
 801239c:	d11d      	bne.n	80123da <__swbuf_r+0x8a>
 801239e:	68a3      	ldr	r3, [r4, #8]
 80123a0:	3001      	adds	r0, #1
 80123a2:	3b01      	subs	r3, #1
 80123a4:	60a3      	str	r3, [r4, #8]
 80123a6:	6823      	ldr	r3, [r4, #0]
 80123a8:	1c5a      	adds	r2, r3, #1
 80123aa:	6022      	str	r2, [r4, #0]
 80123ac:	701f      	strb	r7, [r3, #0]
 80123ae:	6963      	ldr	r3, [r4, #20]
 80123b0:	4283      	cmp	r3, r0
 80123b2:	d004      	beq.n	80123be <__swbuf_r+0x6e>
 80123b4:	89a3      	ldrh	r3, [r4, #12]
 80123b6:	07db      	lsls	r3, r3, #31
 80123b8:	d507      	bpl.n	80123ca <__swbuf_r+0x7a>
 80123ba:	2d0a      	cmp	r5, #10
 80123bc:	d105      	bne.n	80123ca <__swbuf_r+0x7a>
 80123be:	0021      	movs	r1, r4
 80123c0:	0030      	movs	r0, r6
 80123c2:	f7fd fa9d 	bl	800f900 <_fflush_r>
 80123c6:	2800      	cmp	r0, #0
 80123c8:	d107      	bne.n	80123da <__swbuf_r+0x8a>
 80123ca:	0028      	movs	r0, r5
 80123cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123ce:	0021      	movs	r1, r4
 80123d0:	0030      	movs	r0, r6
 80123d2:	f7ff fe53 	bl	801207c <__swsetup_r>
 80123d6:	2800      	cmp	r0, #0
 80123d8:	d0cd      	beq.n	8012376 <__swbuf_r+0x26>
 80123da:	2501      	movs	r5, #1
 80123dc:	426d      	negs	r5, r5
 80123de:	e7f4      	b.n	80123ca <__swbuf_r+0x7a>
 80123e0:	4313      	orrs	r3, r2
 80123e2:	81a3      	strh	r3, [r4, #12]
 80123e4:	4a02      	ldr	r2, [pc, #8]	; (80123f0 <__swbuf_r+0xa0>)
 80123e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123e8:	4013      	ands	r3, r2
 80123ea:	6663      	str	r3, [r4, #100]	; 0x64
 80123ec:	e7cb      	b.n	8012386 <__swbuf_r+0x36>
 80123ee:	46c0      	nop			; (mov r8, r8)
 80123f0:	ffffdfff 	.word	0xffffdfff

080123f4 <_raise_r>:
 80123f4:	b570      	push	{r4, r5, r6, lr}
 80123f6:	0004      	movs	r4, r0
 80123f8:	000d      	movs	r5, r1
 80123fa:	291f      	cmp	r1, #31
 80123fc:	d904      	bls.n	8012408 <_raise_r+0x14>
 80123fe:	2316      	movs	r3, #22
 8012400:	6003      	str	r3, [r0, #0]
 8012402:	2001      	movs	r0, #1
 8012404:	4240      	negs	r0, r0
 8012406:	bd70      	pop	{r4, r5, r6, pc}
 8012408:	0003      	movs	r3, r0
 801240a:	33fc      	adds	r3, #252	; 0xfc
 801240c:	69db      	ldr	r3, [r3, #28]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d004      	beq.n	801241c <_raise_r+0x28>
 8012412:	008a      	lsls	r2, r1, #2
 8012414:	189b      	adds	r3, r3, r2
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	2a00      	cmp	r2, #0
 801241a:	d108      	bne.n	801242e <_raise_r+0x3a>
 801241c:	0020      	movs	r0, r4
 801241e:	f000 f855 	bl	80124cc <_getpid_r>
 8012422:	002a      	movs	r2, r5
 8012424:	0001      	movs	r1, r0
 8012426:	0020      	movs	r0, r4
 8012428:	f000 f83e 	bl	80124a8 <_kill_r>
 801242c:	e7eb      	b.n	8012406 <_raise_r+0x12>
 801242e:	2000      	movs	r0, #0
 8012430:	2a01      	cmp	r2, #1
 8012432:	d0e8      	beq.n	8012406 <_raise_r+0x12>
 8012434:	1c51      	adds	r1, r2, #1
 8012436:	d103      	bne.n	8012440 <_raise_r+0x4c>
 8012438:	2316      	movs	r3, #22
 801243a:	3001      	adds	r0, #1
 801243c:	6023      	str	r3, [r4, #0]
 801243e:	e7e2      	b.n	8012406 <_raise_r+0x12>
 8012440:	2400      	movs	r4, #0
 8012442:	0028      	movs	r0, r5
 8012444:	601c      	str	r4, [r3, #0]
 8012446:	4790      	blx	r2
 8012448:	0020      	movs	r0, r4
 801244a:	e7dc      	b.n	8012406 <_raise_r+0x12>

0801244c <raise>:
 801244c:	b510      	push	{r4, lr}
 801244e:	4b03      	ldr	r3, [pc, #12]	; (801245c <raise+0x10>)
 8012450:	0001      	movs	r1, r0
 8012452:	6818      	ldr	r0, [r3, #0]
 8012454:	f7ff ffce 	bl	80123f4 <_raise_r>
 8012458:	bd10      	pop	{r4, pc}
 801245a:	46c0      	nop			; (mov r8, r8)
 801245c:	200006d8 	.word	0x200006d8

08012460 <_fstat_r>:
 8012460:	2300      	movs	r3, #0
 8012462:	b570      	push	{r4, r5, r6, lr}
 8012464:	4d06      	ldr	r5, [pc, #24]	; (8012480 <_fstat_r+0x20>)
 8012466:	0004      	movs	r4, r0
 8012468:	0008      	movs	r0, r1
 801246a:	0011      	movs	r1, r2
 801246c:	602b      	str	r3, [r5, #0]
 801246e:	f7f1 f914 	bl	800369a <_fstat>
 8012472:	1c43      	adds	r3, r0, #1
 8012474:	d103      	bne.n	801247e <_fstat_r+0x1e>
 8012476:	682b      	ldr	r3, [r5, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d000      	beq.n	801247e <_fstat_r+0x1e>
 801247c:	6023      	str	r3, [r4, #0]
 801247e:	bd70      	pop	{r4, r5, r6, pc}
 8012480:	20000cac 	.word	0x20000cac

08012484 <_isatty_r>:
 8012484:	2300      	movs	r3, #0
 8012486:	b570      	push	{r4, r5, r6, lr}
 8012488:	4d06      	ldr	r5, [pc, #24]	; (80124a4 <_isatty_r+0x20>)
 801248a:	0004      	movs	r4, r0
 801248c:	0008      	movs	r0, r1
 801248e:	602b      	str	r3, [r5, #0]
 8012490:	f7f1 f911 	bl	80036b6 <_isatty>
 8012494:	1c43      	adds	r3, r0, #1
 8012496:	d103      	bne.n	80124a0 <_isatty_r+0x1c>
 8012498:	682b      	ldr	r3, [r5, #0]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d000      	beq.n	80124a0 <_isatty_r+0x1c>
 801249e:	6023      	str	r3, [r4, #0]
 80124a0:	bd70      	pop	{r4, r5, r6, pc}
 80124a2:	46c0      	nop			; (mov r8, r8)
 80124a4:	20000cac 	.word	0x20000cac

080124a8 <_kill_r>:
 80124a8:	2300      	movs	r3, #0
 80124aa:	b570      	push	{r4, r5, r6, lr}
 80124ac:	4d06      	ldr	r5, [pc, #24]	; (80124c8 <_kill_r+0x20>)
 80124ae:	0004      	movs	r4, r0
 80124b0:	0008      	movs	r0, r1
 80124b2:	0011      	movs	r1, r2
 80124b4:	602b      	str	r3, [r5, #0]
 80124b6:	f7f1 f891 	bl	80035dc <_kill>
 80124ba:	1c43      	adds	r3, r0, #1
 80124bc:	d103      	bne.n	80124c6 <_kill_r+0x1e>
 80124be:	682b      	ldr	r3, [r5, #0]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d000      	beq.n	80124c6 <_kill_r+0x1e>
 80124c4:	6023      	str	r3, [r4, #0]
 80124c6:	bd70      	pop	{r4, r5, r6, pc}
 80124c8:	20000cac 	.word	0x20000cac

080124cc <_getpid_r>:
 80124cc:	b510      	push	{r4, lr}
 80124ce:	f7f1 f87f 	bl	80035d0 <_getpid>
 80124d2:	bd10      	pop	{r4, pc}

080124d4 <round>:
 80124d4:	b570      	push	{r4, r5, r6, lr}
 80124d6:	004a      	lsls	r2, r1, #1
 80124d8:	000d      	movs	r5, r1
 80124da:	4920      	ldr	r1, [pc, #128]	; (801255c <round+0x88>)
 80124dc:	0d52      	lsrs	r2, r2, #21
 80124de:	1851      	adds	r1, r2, r1
 80124e0:	0006      	movs	r6, r0
 80124e2:	2913      	cmp	r1, #19
 80124e4:	dc18      	bgt.n	8012518 <round+0x44>
 80124e6:	2900      	cmp	r1, #0
 80124e8:	da09      	bge.n	80124fe <round+0x2a>
 80124ea:	0feb      	lsrs	r3, r5, #31
 80124ec:	2200      	movs	r2, #0
 80124ee:	07db      	lsls	r3, r3, #31
 80124f0:	3101      	adds	r1, #1
 80124f2:	d101      	bne.n	80124f8 <round+0x24>
 80124f4:	491a      	ldr	r1, [pc, #104]	; (8012560 <round+0x8c>)
 80124f6:	430b      	orrs	r3, r1
 80124f8:	0019      	movs	r1, r3
 80124fa:	0010      	movs	r0, r2
 80124fc:	e017      	b.n	801252e <round+0x5a>
 80124fe:	4c19      	ldr	r4, [pc, #100]	; (8012564 <round+0x90>)
 8012500:	410c      	asrs	r4, r1
 8012502:	0022      	movs	r2, r4
 8012504:	402a      	ands	r2, r5
 8012506:	4302      	orrs	r2, r0
 8012508:	d013      	beq.n	8012532 <round+0x5e>
 801250a:	2280      	movs	r2, #128	; 0x80
 801250c:	0312      	lsls	r2, r2, #12
 801250e:	410a      	asrs	r2, r1
 8012510:	1953      	adds	r3, r2, r5
 8012512:	43a3      	bics	r3, r4
 8012514:	2200      	movs	r2, #0
 8012516:	e7ef      	b.n	80124f8 <round+0x24>
 8012518:	2933      	cmp	r1, #51	; 0x33
 801251a:	dd0d      	ble.n	8012538 <round+0x64>
 801251c:	2380      	movs	r3, #128	; 0x80
 801251e:	00db      	lsls	r3, r3, #3
 8012520:	4299      	cmp	r1, r3
 8012522:	d106      	bne.n	8012532 <round+0x5e>
 8012524:	0002      	movs	r2, r0
 8012526:	002b      	movs	r3, r5
 8012528:	0029      	movs	r1, r5
 801252a:	f7ee f945 	bl	80007b8 <__aeabi_dadd>
 801252e:	0006      	movs	r6, r0
 8012530:	000d      	movs	r5, r1
 8012532:	0030      	movs	r0, r6
 8012534:	0029      	movs	r1, r5
 8012536:	bd70      	pop	{r4, r5, r6, pc}
 8012538:	4c0b      	ldr	r4, [pc, #44]	; (8012568 <round+0x94>)
 801253a:	1912      	adds	r2, r2, r4
 801253c:	2401      	movs	r4, #1
 801253e:	4264      	negs	r4, r4
 8012540:	40d4      	lsrs	r4, r2
 8012542:	4220      	tst	r0, r4
 8012544:	d0f5      	beq.n	8012532 <round+0x5e>
 8012546:	2233      	movs	r2, #51	; 0x33
 8012548:	1a51      	subs	r1, r2, r1
 801254a:	3a32      	subs	r2, #50	; 0x32
 801254c:	408a      	lsls	r2, r1
 801254e:	1812      	adds	r2, r2, r0
 8012550:	4282      	cmp	r2, r0
 8012552:	4180      	sbcs	r0, r0
 8012554:	4240      	negs	r0, r0
 8012556:	182b      	adds	r3, r5, r0
 8012558:	43a2      	bics	r2, r4
 801255a:	e7cd      	b.n	80124f8 <round+0x24>
 801255c:	fffffc01 	.word	0xfffffc01
 8012560:	3ff00000 	.word	0x3ff00000
 8012564:	000fffff 	.word	0x000fffff
 8012568:	fffffbed 	.word	0xfffffbed

0801256c <_init>:
 801256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801256e:	46c0      	nop			; (mov r8, r8)
 8012570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012572:	bc08      	pop	{r3}
 8012574:	469e      	mov	lr, r3
 8012576:	4770      	bx	lr

08012578 <_fini>:
 8012578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801257a:	46c0      	nop			; (mov r8, r8)
 801257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801257e:	bc08      	pop	{r3}
 8012580:	469e      	mov	lr, r3
 8012582:	4770      	bx	lr
