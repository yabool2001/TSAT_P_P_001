
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5cc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800c688  0800c688  0001c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc44  0800cc44  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc44  0800cc44  0001cc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc4c  0800cc4c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc4c  0800cc4c  0001cc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc50  0800cc50  0001cc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cc54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200001e8  0800ce38  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  0800ce38  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000170b8  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003137  00000000  00000000  00037307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003a440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ad  00000000  00000000  0003b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bcd3  00000000  00000000  0003ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa20  00000000  00000000  00058700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad0de  00000000  00000000  00073120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006508  00000000  00000000  00120200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00126708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e8 	.word	0x200001e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c670 	.word	0x0800c670

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001ec 	.word	0x200001ec
 8000100:	0800c670 	.word	0x0800c670

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f885 	bl	8001548 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffd5 	bl	80013f8 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f877 	bl	8001548 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f86d 	bl	8001548 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fffd 	bl	800147c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fff3 	bl	800147c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 feeb 	bl	80022d4 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 fb44 	bl	8001b94 <__aeabi_dsub>
 800050c:	f001 fee2 	bl	80022d4 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 f853 	bl	8001610 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f001 ff16 	bl	80023a0 <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 f84a 	bl	8001610 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fb06 	bl	8001b94 <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f001 fecf 	bl	8002340 <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 f833 	bl	8001610 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f001 fef6 	bl	80023a0 <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 f8d0 	bl	800075c <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f001 ffa6 	bl	8002534 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f001 ffa1 	bl	8002534 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	d434      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fa:	469b      	mov	fp, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	465a      	mov	r2, fp
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83b      	bhi.n	8000688 <__udivmoddi4+0xc4>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e079      	b.n	800070a <__udivmoddi4+0x146>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e076      	b.n	8000710 <__udivmoddi4+0x14c>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e029      	b.n	8000690 <__udivmoddi4+0xcc>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	469b      	mov	fp, r3
 8000668:	2320      	movs	r3, #32
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	4652      	mov	r2, sl
 800066e:	40da      	lsrs	r2, r3
 8000670:	4641      	mov	r1, r8
 8000672:	0013      	movs	r3, r2
 8000674:	464a      	mov	r2, r9
 8000676:	408a      	lsls	r2, r1
 8000678:	0017      	movs	r7, r2
 800067a:	4642      	mov	r2, r8
 800067c:	431f      	orrs	r7, r3
 800067e:	4653      	mov	r3, sl
 8000680:	4093      	lsls	r3, r2
 8000682:	001e      	movs	r6, r3
 8000684:	42af      	cmp	r7, r5
 8000686:	d9c3      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000688:	2200      	movs	r2, #0
 800068a:	2300      	movs	r3, #0
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	4643      	mov	r3, r8
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0d8      	beq.n	8000648 <__udivmoddi4+0x84>
 8000696:	07fb      	lsls	r3, r7, #31
 8000698:	0872      	lsrs	r2, r6, #1
 800069a:	431a      	orrs	r2, r3
 800069c:	4646      	mov	r6, r8
 800069e:	087b      	lsrs	r3, r7, #1
 80006a0:	e00e      	b.n	80006c0 <__udivmoddi4+0xfc>
 80006a2:	42ab      	cmp	r3, r5
 80006a4:	d101      	bne.n	80006aa <__udivmoddi4+0xe6>
 80006a6:	42a2      	cmp	r2, r4
 80006a8:	d80c      	bhi.n	80006c4 <__udivmoddi4+0x100>
 80006aa:	1aa4      	subs	r4, r4, r2
 80006ac:	419d      	sbcs	r5, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	1924      	adds	r4, r4, r4
 80006b2:	416d      	adcs	r5, r5
 80006b4:	2100      	movs	r1, #0
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1824      	adds	r4, r4, r0
 80006ba:	414d      	adcs	r5, r1
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d006      	beq.n	80006ce <__udivmoddi4+0x10a>
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d9ee      	bls.n	80006a2 <__udivmoddi4+0xde>
 80006c4:	3e01      	subs	r6, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d1f8      	bne.n	80006c0 <__udivmoddi4+0xfc>
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	465b      	mov	r3, fp
 80006d4:	1900      	adds	r0, r0, r4
 80006d6:	4169      	adcs	r1, r5
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db24      	blt.n	8000726 <__udivmoddi4+0x162>
 80006dc:	002b      	movs	r3, r5
 80006de:	465a      	mov	r2, fp
 80006e0:	4644      	mov	r4, r8
 80006e2:	40d3      	lsrs	r3, r2
 80006e4:	002a      	movs	r2, r5
 80006e6:	40e2      	lsrs	r2, r4
 80006e8:	001c      	movs	r4, r3
 80006ea:	465b      	mov	r3, fp
 80006ec:	0015      	movs	r5, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db2a      	blt.n	8000748 <__udivmoddi4+0x184>
 80006f2:	0026      	movs	r6, r4
 80006f4:	409e      	lsls	r6, r3
 80006f6:	0033      	movs	r3, r6
 80006f8:	0026      	movs	r6, r4
 80006fa:	4647      	mov	r7, r8
 80006fc:	40be      	lsls	r6, r7
 80006fe:	0032      	movs	r2, r6
 8000700:	1a80      	subs	r0, r0, r2
 8000702:	4199      	sbcs	r1, r3
 8000704:	9000      	str	r0, [sp, #0]
 8000706:	9101      	str	r1, [sp, #4]
 8000708:	e79e      	b.n	8000648 <__udivmoddi4+0x84>
 800070a:	42a3      	cmp	r3, r4
 800070c:	d8bc      	bhi.n	8000688 <__udivmoddi4+0xc4>
 800070e:	e782      	b.n	8000616 <__udivmoddi4+0x52>
 8000710:	4642      	mov	r2, r8
 8000712:	2320      	movs	r3, #32
 8000714:	2100      	movs	r1, #0
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	9100      	str	r1, [sp, #0]
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	40da      	lsrs	r2, r3
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	e785      	b.n	8000632 <__udivmoddi4+0x6e>
 8000726:	4642      	mov	r2, r8
 8000728:	2320      	movs	r3, #32
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4646      	mov	r6, r8
 8000730:	409a      	lsls	r2, r3
 8000732:	0023      	movs	r3, r4
 8000734:	40f3      	lsrs	r3, r6
 8000736:	4644      	mov	r4, r8
 8000738:	4313      	orrs	r3, r2
 800073a:	002a      	movs	r2, r5
 800073c:	40e2      	lsrs	r2, r4
 800073e:	001c      	movs	r4, r3
 8000740:	465b      	mov	r3, fp
 8000742:	0015      	movs	r5, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	dad4      	bge.n	80006f2 <__udivmoddi4+0x12e>
 8000748:	4642      	mov	r2, r8
 800074a:	002f      	movs	r7, r5
 800074c:	2320      	movs	r3, #32
 800074e:	0026      	movs	r6, r4
 8000750:	4097      	lsls	r7, r2
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	40de      	lsrs	r6, r3
 8000756:	003b      	movs	r3, r7
 8000758:	4333      	orrs	r3, r6
 800075a:	e7cd      	b.n	80006f8 <__udivmoddi4+0x134>

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	0004      	movs	r4, r0
 8000766:	b5c0      	push	{r6, r7, lr}
 8000768:	001f      	movs	r7, r3
 800076a:	030b      	lsls	r3, r1, #12
 800076c:	0010      	movs	r0, r2
 800076e:	004e      	lsls	r6, r1, #1
 8000770:	0a5b      	lsrs	r3, r3, #9
 8000772:	0fcd      	lsrs	r5, r1, #31
 8000774:	0f61      	lsrs	r1, r4, #29
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	4319      	orrs	r1, r3
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	0fff      	lsrs	r7, r7, #31
 8000780:	46bc      	mov	ip, r7
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	0f47      	lsrs	r7, r0, #29
 8000786:	4327      	orrs	r7, r4
 8000788:	0d76      	lsrs	r6, r6, #21
 800078a:	0d52      	lsrs	r2, r2, #21
 800078c:	00c0      	lsls	r0, r0, #3
 800078e:	46b9      	mov	r9, r7
 8000790:	4680      	mov	r8, r0
 8000792:	1ab7      	subs	r7, r6, r2
 8000794:	4565      	cmp	r5, ip
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e09b      	b.n	80008d2 <__aeabi_dadd+0x176>
 800079a:	2f00      	cmp	r7, #0
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_dadd+0x44>
 800079e:	e084      	b.n	80008aa <__aeabi_dadd+0x14e>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e0be      	b.n	8000924 <__aeabi_dadd+0x1c8>
 80007a6:	4ac8      	ldr	r2, [pc, #800]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80007a8:	4296      	cmp	r6, r2
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e124      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	464c      	mov	r4, r9
 80007b2:	0412      	lsls	r2, r2, #16
 80007b4:	4314      	orrs	r4, r2
 80007b6:	46a1      	mov	r9, r4
 80007b8:	2f38      	cmp	r7, #56	; 0x38
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x62>
 80007bc:	e167      	b.n	8000a8e <__aeabi_dadd+0x332>
 80007be:	2f1f      	cmp	r7, #31
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_dadd+0x68>
 80007c2:	e1d6      	b.n	8000b72 <__aeabi_dadd+0x416>
 80007c4:	2220      	movs	r2, #32
 80007c6:	464c      	mov	r4, r9
 80007c8:	1bd2      	subs	r2, r2, r7
 80007ca:	4094      	lsls	r4, r2
 80007cc:	46a2      	mov	sl, r4
 80007ce:	4644      	mov	r4, r8
 80007d0:	40fc      	lsrs	r4, r7
 80007d2:	0020      	movs	r0, r4
 80007d4:	4654      	mov	r4, sl
 80007d6:	4304      	orrs	r4, r0
 80007d8:	4640      	mov	r0, r8
 80007da:	4090      	lsls	r0, r2
 80007dc:	1e42      	subs	r2, r0, #1
 80007de:	4190      	sbcs	r0, r2
 80007e0:	464a      	mov	r2, r9
 80007e2:	40fa      	lsrs	r2, r7
 80007e4:	4304      	orrs	r4, r0
 80007e6:	1a89      	subs	r1, r1, r2
 80007e8:	1b1c      	subs	r4, r3, r4
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	4192      	sbcs	r2, r2
 80007ee:	4252      	negs	r2, r2
 80007f0:	1a8b      	subs	r3, r1, r2
 80007f2:	469a      	mov	sl, r3
 80007f4:	4653      	mov	r3, sl
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0xa0>
 80007fa:	e0d4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 80007fc:	4653      	mov	r3, sl
 80007fe:	025a      	lsls	r2, r3, #9
 8000800:	0a53      	lsrs	r3, r2, #9
 8000802:	469a      	mov	sl, r3
 8000804:	4653      	mov	r3, sl
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0xb0>
 800080a:	e104      	b.n	8000a16 <__aeabi_dadd+0x2ba>
 800080c:	4650      	mov	r0, sl
 800080e:	f001 fe73 	bl	80024f8 <__clzsi2>
 8000812:	0003      	movs	r3, r0
 8000814:	3b08      	subs	r3, #8
 8000816:	2220      	movs	r2, #32
 8000818:	0020      	movs	r0, r4
 800081a:	1ad2      	subs	r2, r2, r3
 800081c:	4651      	mov	r1, sl
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4099      	lsls	r1, r3
 8000822:	0002      	movs	r2, r0
 8000824:	409c      	lsls	r4, r3
 8000826:	430a      	orrs	r2, r1
 8000828:	42b3      	cmp	r3, r6
 800082a:	da00      	bge.n	800082e <__aeabi_dadd+0xd2>
 800082c:	e102      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 800082e:	1b9b      	subs	r3, r3, r6
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	291f      	cmp	r1, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0xdc>
 8000836:	e0a7      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000838:	2320      	movs	r3, #32
 800083a:	0010      	movs	r0, r2
 800083c:	0026      	movs	r6, r4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	409c      	lsls	r4, r3
 8000842:	4098      	lsls	r0, r3
 8000844:	40ce      	lsrs	r6, r1
 8000846:	40ca      	lsrs	r2, r1
 8000848:	1e63      	subs	r3, r4, #1
 800084a:	419c      	sbcs	r4, r3
 800084c:	4330      	orrs	r0, r6
 800084e:	4692      	mov	sl, r2
 8000850:	2600      	movs	r6, #0
 8000852:	4304      	orrs	r4, r0
 8000854:	0763      	lsls	r3, r4, #29
 8000856:	d009      	beq.n	800086c <__aeabi_dadd+0x110>
 8000858:	230f      	movs	r3, #15
 800085a:	4023      	ands	r3, r4
 800085c:	2b04      	cmp	r3, #4
 800085e:	d005      	beq.n	800086c <__aeabi_dadd+0x110>
 8000860:	1d23      	adds	r3, r4, #4
 8000862:	42a3      	cmp	r3, r4
 8000864:	41a4      	sbcs	r4, r4
 8000866:	4264      	negs	r4, r4
 8000868:	44a2      	add	sl, r4
 800086a:	001c      	movs	r4, r3
 800086c:	4653      	mov	r3, sl
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	d400      	bmi.n	8000874 <__aeabi_dadd+0x118>
 8000872:	e09b      	b.n	80009ac <__aeabi_dadd+0x250>
 8000874:	4b94      	ldr	r3, [pc, #592]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000876:	3601      	adds	r6, #1
 8000878:	429e      	cmp	r6, r3
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x122>
 800087c:	e0b8      	b.n	80009f0 <__aeabi_dadd+0x294>
 800087e:	4653      	mov	r3, sl
 8000880:	4992      	ldr	r1, [pc, #584]	; (8000acc <__aeabi_dadd+0x370>)
 8000882:	08e4      	lsrs	r4, r4, #3
 8000884:	400b      	ands	r3, r1
 8000886:	0019      	movs	r1, r3
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	4323      	orrs	r3, r4
 800088c:	0572      	lsls	r2, r6, #21
 800088e:	024c      	lsls	r4, r1, #9
 8000890:	0b24      	lsrs	r4, r4, #12
 8000892:	0d52      	lsrs	r2, r2, #21
 8000894:	0512      	lsls	r2, r2, #20
 8000896:	07ed      	lsls	r5, r5, #31
 8000898:	4322      	orrs	r2, r4
 800089a:	432a      	orrs	r2, r5
 800089c:	0018      	movs	r0, r3
 800089e:	0011      	movs	r1, r2
 80008a0:	bce0      	pop	{r5, r6, r7}
 80008a2:	46ba      	mov	sl, r7
 80008a4:	46b1      	mov	r9, r6
 80008a6:	46a8      	mov	r8, r5
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	d048      	beq.n	8000940 <__aeabi_dadd+0x1e4>
 80008ae:	1b97      	subs	r7, r2, r6
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_dadd+0x15a>
 80008b4:	e10e      	b.n	8000ad4 <__aeabi_dadd+0x378>
 80008b6:	000c      	movs	r4, r1
 80008b8:	431c      	orrs	r4, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x162>
 80008bc:	e1b7      	b.n	8000c2e <__aeabi_dadd+0x4d2>
 80008be:	1e7c      	subs	r4, r7, #1
 80008c0:	2f01      	cmp	r7, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x16a>
 80008c4:	e226      	b.n	8000d14 <__aeabi_dadd+0x5b8>
 80008c6:	4d80      	ldr	r5, [pc, #512]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008c8:	42af      	cmp	r7, r5
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x172>
 80008cc:	e1d5      	b.n	8000c7a <__aeabi_dadd+0x51e>
 80008ce:	0027      	movs	r7, r4
 80008d0:	e107      	b.n	8000ae2 <__aeabi_dadd+0x386>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_dadd+0x17c>
 80008d6:	e0b2      	b.n	8000a3e <__aeabi_dadd+0x2e2>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d047      	beq.n	800096c <__aeabi_dadd+0x210>
 80008dc:	4a7a      	ldr	r2, [pc, #488]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008de:	4296      	cmp	r6, r2
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x188>
 80008e2:	e089      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	464c      	mov	r4, r9
 80008e8:	0412      	lsls	r2, r2, #16
 80008ea:	4314      	orrs	r4, r2
 80008ec:	46a1      	mov	r9, r4
 80008ee:	2f38      	cmp	r7, #56	; 0x38
 80008f0:	dc6b      	bgt.n	80009ca <__aeabi_dadd+0x26e>
 80008f2:	2f1f      	cmp	r7, #31
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_dadd+0x19c>
 80008f6:	e16e      	b.n	8000bd6 <__aeabi_dadd+0x47a>
 80008f8:	003a      	movs	r2, r7
 80008fa:	4648      	mov	r0, r9
 80008fc:	3a20      	subs	r2, #32
 80008fe:	40d0      	lsrs	r0, r2
 8000900:	4684      	mov	ip, r0
 8000902:	2f20      	cmp	r7, #32
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	4648      	mov	r0, r9
 800090a:	1bd2      	subs	r2, r2, r7
 800090c:	4090      	lsls	r0, r2
 800090e:	0002      	movs	r2, r0
 8000910:	4640      	mov	r0, r8
 8000912:	4310      	orrs	r0, r2
 8000914:	4680      	mov	r8, r0
 8000916:	4640      	mov	r0, r8
 8000918:	1e42      	subs	r2, r0, #1
 800091a:	4190      	sbcs	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	0004      	movs	r4, r0
 8000920:	4314      	orrs	r4, r2
 8000922:	e057      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000924:	464a      	mov	r2, r9
 8000926:	4302      	orrs	r2, r0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x1d0>
 800092a:	e103      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 800092c:	1e7a      	subs	r2, r7, #1
 800092e:	2f01      	cmp	r7, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x1d8>
 8000932:	e193      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000934:	4c64      	ldr	r4, [pc, #400]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000936:	42a7      	cmp	r7, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x1e0>
 800093a:	e18a      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 800093c:	0017      	movs	r7, r2
 800093e:	e73b      	b.n	80007b8 <__aeabi_dadd+0x5c>
 8000940:	4c63      	ldr	r4, [pc, #396]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000942:	1c72      	adds	r2, r6, #1
 8000944:	4222      	tst	r2, r4
 8000946:	d000      	beq.n	800094a <__aeabi_dadd+0x1ee>
 8000948:	e0e0      	b.n	8000b0c <__aeabi_dadd+0x3b0>
 800094a:	000a      	movs	r2, r1
 800094c:	431a      	orrs	r2, r3
 800094e:	2e00      	cmp	r6, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_dadd+0x1f8>
 8000952:	e174      	b.n	8000c3e <__aeabi_dadd+0x4e2>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x1fe>
 8000958:	e1d0      	b.n	8000cfc <__aeabi_dadd+0x5a0>
 800095a:	464a      	mov	r2, r9
 800095c:	4302      	orrs	r2, r0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x206>
 8000960:	e1e3      	b.n	8000d2a <__aeabi_dadd+0x5ce>
 8000962:	074a      	lsls	r2, r1, #29
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	4313      	orrs	r3, r2
 8000968:	08c9      	lsrs	r1, r1, #3
 800096a:	e029      	b.n	80009c0 <__aeabi_dadd+0x264>
 800096c:	464a      	mov	r2, r9
 800096e:	4302      	orrs	r2, r0
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x218>
 8000972:	e17d      	b.n	8000c70 <__aeabi_dadd+0x514>
 8000974:	1e7a      	subs	r2, r7, #1
 8000976:	2f01      	cmp	r7, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c52      	ldr	r4, [pc, #328]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800097e:	42a7      	cmp	r7, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e166      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000984:	0017      	movs	r7, r2
 8000986:	e7b2      	b.n	80008ee <__aeabi_dadd+0x192>
 8000988:	0010      	movs	r0, r2
 800098a:	3b1f      	subs	r3, #31
 800098c:	40d8      	lsrs	r0, r3
 800098e:	2920      	cmp	r1, #32
 8000990:	d003      	beq.n	800099a <__aeabi_dadd+0x23e>
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	1a5b      	subs	r3, r3, r1
 8000996:	409a      	lsls	r2, r3
 8000998:	4314      	orrs	r4, r2
 800099a:	1e63      	subs	r3, r4, #1
 800099c:	419c      	sbcs	r4, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	2600      	movs	r6, #0
 80009a2:	469a      	mov	sl, r3
 80009a4:	4304      	orrs	r4, r0
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e755      	b.n	8000858 <__aeabi_dadd+0xfc>
 80009ac:	4652      	mov	r2, sl
 80009ae:	08e3      	lsrs	r3, r4, #3
 80009b0:	0752      	lsls	r2, r2, #29
 80009b2:	4313      	orrs	r3, r2
 80009b4:	4652      	mov	r2, sl
 80009b6:	0037      	movs	r7, r6
 80009b8:	08d1      	lsrs	r1, r2, #3
 80009ba:	4a43      	ldr	r2, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009bc:	4297      	cmp	r7, r2
 80009be:	d01f      	beq.n	8000a00 <__aeabi_dadd+0x2a4>
 80009c0:	0309      	lsls	r1, r1, #12
 80009c2:	057a      	lsls	r2, r7, #21
 80009c4:	0b0c      	lsrs	r4, r1, #12
 80009c6:	0d52      	lsrs	r2, r2, #21
 80009c8:	e764      	b.n	8000894 <__aeabi_dadd+0x138>
 80009ca:	4642      	mov	r2, r8
 80009cc:	464c      	mov	r4, r9
 80009ce:	4314      	orrs	r4, r2
 80009d0:	1e62      	subs	r2, r4, #1
 80009d2:	4194      	sbcs	r4, r2
 80009d4:	18e4      	adds	r4, r4, r3
 80009d6:	429c      	cmp	r4, r3
 80009d8:	4192      	sbcs	r2, r2
 80009da:	4252      	negs	r2, r2
 80009dc:	4692      	mov	sl, r2
 80009de:	448a      	add	sl, r1
 80009e0:	4653      	mov	r3, sl
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	d5df      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009e8:	3601      	adds	r6, #1
 80009ea:	429e      	cmp	r6, r3
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x294>
 80009ee:	e0b3      	b.n	8000b58 <__aeabi_dadd+0x3fc>
 80009f0:	0032      	movs	r2, r6
 80009f2:	2400      	movs	r4, #0
 80009f4:	2300      	movs	r3, #0
 80009f6:	e74d      	b.n	8000894 <__aeabi_dadd+0x138>
 80009f8:	074a      	lsls	r2, r1, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	001a      	movs	r2, r3
 8000a02:	430a      	orrs	r2, r1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x2ac>
 8000a06:	e200      	b.n	8000e0a <__aeabi_dadd+0x6ae>
 8000a08:	2480      	movs	r4, #128	; 0x80
 8000a0a:	0324      	lsls	r4, r4, #12
 8000a0c:	430c      	orrs	r4, r1
 8000a0e:	0324      	lsls	r4, r4, #12
 8000a10:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a12:	0b24      	lsrs	r4, r4, #12
 8000a14:	e73e      	b.n	8000894 <__aeabi_dadd+0x138>
 8000a16:	0020      	movs	r0, r4
 8000a18:	f001 fd6e 	bl	80024f8 <__clzsi2>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	3318      	adds	r3, #24
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_dadd+0x2ca>
 8000a24:	e6f7      	b.n	8000816 <__aeabi_dadd+0xba>
 8000a26:	0022      	movs	r2, r4
 8000a28:	3808      	subs	r0, #8
 8000a2a:	4082      	lsls	r2, r0
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	42b3      	cmp	r3, r6
 8000a30:	db00      	blt.n	8000a34 <__aeabi_dadd+0x2d8>
 8000a32:	e6fc      	b.n	800082e <__aeabi_dadd+0xd2>
 8000a34:	1af6      	subs	r6, r6, r3
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <__aeabi_dadd+0x370>)
 8000a38:	401a      	ands	r2, r3
 8000a3a:	4692      	mov	sl, r2
 8000a3c:	e70a      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d02b      	beq.n	8000a9a <__aeabi_dadd+0x33e>
 8000a42:	1b97      	subs	r7, r2, r6
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x2ee>
 8000a48:	e0b8      	b.n	8000bbc <__aeabi_dadd+0x460>
 8000a4a:	4c1f      	ldr	r4, [pc, #124]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a4c:	42a2      	cmp	r2, r4
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x2f6>
 8000a50:	e11c      	b.n	8000c8c <__aeabi_dadd+0x530>
 8000a52:	2480      	movs	r4, #128	; 0x80
 8000a54:	0424      	lsls	r4, r4, #16
 8000a56:	4321      	orrs	r1, r4
 8000a58:	2f38      	cmp	r7, #56	; 0x38
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dadd+0x302>
 8000a5c:	e11e      	b.n	8000c9c <__aeabi_dadd+0x540>
 8000a5e:	2f1f      	cmp	r7, #31
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x308>
 8000a62:	e19e      	b.n	8000da2 <__aeabi_dadd+0x646>
 8000a64:	2620      	movs	r6, #32
 8000a66:	000c      	movs	r4, r1
 8000a68:	1bf6      	subs	r6, r6, r7
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	40b3      	lsls	r3, r6
 8000a6e:	40b4      	lsls	r4, r6
 8000a70:	40f8      	lsrs	r0, r7
 8000a72:	1e5e      	subs	r6, r3, #1
 8000a74:	41b3      	sbcs	r3, r6
 8000a76:	40f9      	lsrs	r1, r7
 8000a78:	4304      	orrs	r4, r0
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4489      	add	r9, r1
 8000a7e:	4444      	add	r4, r8
 8000a80:	4544      	cmp	r4, r8
 8000a82:	419b      	sbcs	r3, r3
 8000a84:	425b      	negs	r3, r3
 8000a86:	444b      	add	r3, r9
 8000a88:	469a      	mov	sl, r3
 8000a8a:	0016      	movs	r6, r2
 8000a8c:	e7a8      	b.n	80009e0 <__aeabi_dadd+0x284>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	464c      	mov	r4, r9
 8000a92:	4314      	orrs	r4, r2
 8000a94:	1e62      	subs	r2, r4, #1
 8000a96:	4194      	sbcs	r4, r2
 8000a98:	e6a6      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000a9a:	4c0d      	ldr	r4, [pc, #52]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000a9c:	1c72      	adds	r2, r6, #1
 8000a9e:	4222      	tst	r2, r4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x348>
 8000aa2:	e0a8      	b.n	8000bf6 <__aeabi_dadd+0x49a>
 8000aa4:	000a      	movs	r2, r1
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x352>
 8000aac:	e10a      	b.n	8000cc4 <__aeabi_dadd+0x568>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x358>
 8000ab2:	e15e      	b.n	8000d72 <__aeabi_dadd+0x616>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	4302      	orrs	r2, r0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_dadd+0x360>
 8000aba:	e161      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000abc:	074a      	lsls	r2, r1, #29
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	08c9      	lsrs	r1, r1, #3
 8000ac4:	e77c      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	000007ff 	.word	0x000007ff
 8000acc:	ff7fffff 	.word	0xff7fffff
 8000ad0:	000007fe 	.word	0x000007fe
 8000ad4:	4ccf      	ldr	r4, [pc, #828]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000ad6:	42a2      	cmp	r2, r4
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x380>
 8000ada:	e0ce      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	0424      	lsls	r4, r4, #16
 8000ae0:	4321      	orrs	r1, r4
 8000ae2:	2f38      	cmp	r7, #56	; 0x38
 8000ae4:	dc5b      	bgt.n	8000b9e <__aeabi_dadd+0x442>
 8000ae6:	2f1f      	cmp	r7, #31
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dadd+0x390>
 8000aea:	e0dc      	b.n	8000ca6 <__aeabi_dadd+0x54a>
 8000aec:	2520      	movs	r5, #32
 8000aee:	000c      	movs	r4, r1
 8000af0:	1bed      	subs	r5, r5, r7
 8000af2:	001e      	movs	r6, r3
 8000af4:	40ab      	lsls	r3, r5
 8000af6:	40ac      	lsls	r4, r5
 8000af8:	40fe      	lsrs	r6, r7
 8000afa:	1e5d      	subs	r5, r3, #1
 8000afc:	41ab      	sbcs	r3, r5
 8000afe:	4334      	orrs	r4, r6
 8000b00:	40f9      	lsrs	r1, r7
 8000b02:	431c      	orrs	r4, r3
 8000b04:	464b      	mov	r3, r9
 8000b06:	1a5b      	subs	r3, r3, r1
 8000b08:	4699      	mov	r9, r3
 8000b0a:	e04c      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	1a1c      	subs	r4, r3, r0
 8000b10:	1a88      	subs	r0, r1, r2
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	4192      	sbcs	r2, r2
 8000b16:	4252      	negs	r2, r2
 8000b18:	4692      	mov	sl, r2
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	4650      	mov	r0, sl
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	4692      	mov	sl, r2
 8000b22:	0212      	lsls	r2, r2, #8
 8000b24:	d478      	bmi.n	8000c18 <__aeabi_dadd+0x4bc>
 8000b26:	4653      	mov	r3, sl
 8000b28:	4323      	orrs	r3, r4
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x3d2>
 8000b2c:	e66a      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2500      	movs	r5, #0
 8000b32:	e745      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000b34:	074a      	lsls	r2, r1, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c9      	lsrs	r1, r1, #3
 8000b3c:	e73d      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000b3e:	181c      	adds	r4, r3, r0
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4449      	add	r1, r9
 8000b46:	468a      	mov	sl, r1
 8000b48:	425b      	negs	r3, r3
 8000b4a:	449a      	add	sl, r3
 8000b4c:	4653      	mov	r3, sl
 8000b4e:	2601      	movs	r6, #1
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_dadd+0x3fa>
 8000b54:	e727      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b56:	2602      	movs	r6, #2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	4baf      	ldr	r3, [pc, #700]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	4021      	ands	r1, r4
 8000b64:	0862      	lsrs	r2, r4, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	07dc      	lsls	r4, r3, #31
 8000b6a:	085b      	lsrs	r3, r3, #1
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	4314      	orrs	r4, r2
 8000b70:	e670      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000b72:	003a      	movs	r2, r7
 8000b74:	464c      	mov	r4, r9
 8000b76:	3a20      	subs	r2, #32
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	46a4      	mov	ip, r4
 8000b7c:	2f20      	cmp	r7, #32
 8000b7e:	d007      	beq.n	8000b90 <__aeabi_dadd+0x434>
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	4648      	mov	r0, r9
 8000b84:	1bd2      	subs	r2, r2, r7
 8000b86:	4090      	lsls	r0, r2
 8000b88:	0002      	movs	r2, r0
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	4310      	orrs	r0, r2
 8000b8e:	4680      	mov	r8, r0
 8000b90:	4640      	mov	r0, r8
 8000b92:	1e42      	subs	r2, r0, #1
 8000b94:	4190      	sbcs	r0, r2
 8000b96:	4662      	mov	r2, ip
 8000b98:	0004      	movs	r4, r0
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	e624      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	1e63      	subs	r3, r4, #1
 8000ba4:	419c      	sbcs	r4, r3
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1b1c      	subs	r4, r3, r4
 8000baa:	45a0      	cmp	r8, r4
 8000bac:	419b      	sbcs	r3, r3
 8000bae:	4649      	mov	r1, r9
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	1acb      	subs	r3, r1, r3
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	0016      	movs	r6, r2
 8000bba:	e61b      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000bbc:	000c      	movs	r4, r1
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x468>
 8000bc2:	e0c7      	b.n	8000d54 <__aeabi_dadd+0x5f8>
 8000bc4:	1e7c      	subs	r4, r7, #1
 8000bc6:	2f01      	cmp	r7, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x470>
 8000bca:	e0f9      	b.n	8000dc0 <__aeabi_dadd+0x664>
 8000bcc:	4e91      	ldr	r6, [pc, #580]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bce:	42b7      	cmp	r7, r6
 8000bd0:	d05c      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000bd2:	0027      	movs	r7, r4
 8000bd4:	e740      	b.n	8000a58 <__aeabi_dadd+0x2fc>
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	464c      	mov	r4, r9
 8000bda:	4640      	mov	r0, r8
 8000bdc:	1bd2      	subs	r2, r2, r7
 8000bde:	4094      	lsls	r4, r2
 8000be0:	40f8      	lsrs	r0, r7
 8000be2:	4304      	orrs	r4, r0
 8000be4:	4640      	mov	r0, r8
 8000be6:	4090      	lsls	r0, r2
 8000be8:	1e42      	subs	r2, r0, #1
 8000bea:	4190      	sbcs	r0, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	40fa      	lsrs	r2, r7
 8000bf0:	4304      	orrs	r4, r0
 8000bf2:	1889      	adds	r1, r1, r2
 8000bf4:	e6ee      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000bf6:	4c87      	ldr	r4, [pc, #540]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bf8:	42a2      	cmp	r2, r4
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x4a2>
 8000bfc:	e6f9      	b.n	80009f2 <__aeabi_dadd+0x296>
 8000bfe:	1818      	adds	r0, r3, r0
 8000c00:	4298      	cmp	r0, r3
 8000c02:	419b      	sbcs	r3, r3
 8000c04:	4449      	add	r1, r9
 8000c06:	425b      	negs	r3, r3
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	07dc      	lsls	r4, r3, #31
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	469a      	mov	sl, r3
 8000c12:	0016      	movs	r6, r2
 8000c14:	4304      	orrs	r4, r0
 8000c16:	e6c6      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	1ad4      	subs	r4, r2, r3
 8000c1c:	45a0      	cmp	r8, r4
 8000c1e:	4180      	sbcs	r0, r0
 8000c20:	464b      	mov	r3, r9
 8000c22:	4240      	negs	r0, r0
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	1a0b      	subs	r3, r1, r0
 8000c28:	469a      	mov	sl, r3
 8000c2a:	4665      	mov	r5, ip
 8000c2c:	e5ea      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000c2e:	464b      	mov	r3, r9
 8000c30:	464a      	mov	r2, r9
 8000c32:	08c0      	lsrs	r0, r0, #3
 8000c34:	075b      	lsls	r3, r3, #29
 8000c36:	4665      	mov	r5, ip
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	08d1      	lsrs	r1, r2, #3
 8000c3c:	e6bd      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x4e8>
 8000c42:	e08e      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000c44:	464b      	mov	r3, r9
 8000c46:	4303      	orrs	r3, r0
 8000c48:	d117      	bne.n	8000c7a <__aeabi_dadd+0x51e>
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	0309      	lsls	r1, r1, #12
 8000c50:	e6da      	b.n	8000a08 <__aeabi_dadd+0x2ac>
 8000c52:	074a      	lsls	r2, r1, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c9      	lsrs	r1, r1, #3
 8000c5a:	e6d1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c5c:	1a1c      	subs	r4, r3, r0
 8000c5e:	464a      	mov	r2, r9
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	1a89      	subs	r1, r1, r2
 8000c66:	425b      	negs	r3, r3
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	469a      	mov	sl, r3
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	e5c1      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	e69f      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	08d8      	lsrs	r0, r3, #3
 8000c7e:	464b      	mov	r3, r9
 8000c80:	464a      	mov	r2, r9
 8000c82:	075b      	lsls	r3, r3, #29
 8000c84:	4665      	mov	r5, ip
 8000c86:	4303      	orrs	r3, r0
 8000c88:	08d1      	lsrs	r1, r2, #3
 8000c8a:	e6b9      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	08d8      	lsrs	r0, r3, #3
 8000c90:	464b      	mov	r3, r9
 8000c92:	464a      	mov	r2, r9
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4303      	orrs	r3, r0
 8000c98:	08d1      	lsrs	r1, r2, #3
 8000c9a:	e6b1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	1e63      	subs	r3, r4, #1
 8000ca2:	419c      	sbcs	r4, r3
 8000ca4:	e6eb      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000ca6:	003c      	movs	r4, r7
 8000ca8:	000d      	movs	r5, r1
 8000caa:	3c20      	subs	r4, #32
 8000cac:	40e5      	lsrs	r5, r4
 8000cae:	2f20      	cmp	r7, #32
 8000cb0:	d003      	beq.n	8000cba <__aeabi_dadd+0x55e>
 8000cb2:	2440      	movs	r4, #64	; 0x40
 8000cb4:	1be4      	subs	r4, r4, r7
 8000cb6:	40a1      	lsls	r1, r4
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	001c      	movs	r4, r3
 8000cbc:	1e63      	subs	r3, r4, #1
 8000cbe:	419c      	sbcs	r4, r3
 8000cc0:	432c      	orrs	r4, r5
 8000cc2:	e770      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d0e1      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	4302      	orrs	r2, r0
 8000ccc:	d0c1      	beq.n	8000c52 <__aeabi_dadd+0x4f6>
 8000cce:	074a      	lsls	r2, r1, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	0312      	lsls	r2, r2, #12
 8000cda:	4211      	tst	r1, r2
 8000cdc:	d008      	beq.n	8000cf0 <__aeabi_dadd+0x594>
 8000cde:	4648      	mov	r0, r9
 8000ce0:	08c4      	lsrs	r4, r0, #3
 8000ce2:	4214      	tst	r4, r2
 8000ce4:	d104      	bne.n	8000cf0 <__aeabi_dadd+0x594>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	0021      	movs	r1, r4
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	0742      	lsls	r2, r0, #29
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	0f5a      	lsrs	r2, r3, #29
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	0752      	lsls	r2, r2, #29
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	e681      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	4303      	orrs	r3, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x5a8>
 8000d02:	e714      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	075b      	lsls	r3, r3, #29
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	4303      	orrs	r3, r0
 8000d10:	08d1      	lsrs	r1, r2, #3
 8000d12:	e655      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d14:	1ac4      	subs	r4, r0, r3
 8000d16:	45a0      	cmp	r8, r4
 8000d18:	4180      	sbcs	r0, r0
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	4240      	negs	r0, r0
 8000d1e:	1a59      	subs	r1, r3, r1
 8000d20:	1a0b      	subs	r3, r1, r0
 8000d22:	469a      	mov	sl, r3
 8000d24:	4665      	mov	r5, ip
 8000d26:	2601      	movs	r6, #1
 8000d28:	e564      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000d2a:	1a1c      	subs	r4, r3, r0
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	4180      	sbcs	r0, r0
 8000d32:	1a8a      	subs	r2, r1, r2
 8000d34:	4240      	negs	r0, r0
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	4692      	mov	sl, r2
 8000d3a:	0212      	lsls	r2, r2, #8
 8000d3c:	d549      	bpl.n	8000dd2 <__aeabi_dadd+0x676>
 8000d3e:	4642      	mov	r2, r8
 8000d40:	1ad4      	subs	r4, r2, r3
 8000d42:	45a0      	cmp	r8, r4
 8000d44:	4180      	sbcs	r0, r0
 8000d46:	464b      	mov	r3, r9
 8000d48:	4240      	negs	r0, r0
 8000d4a:	1a59      	subs	r1, r3, r1
 8000d4c:	1a0b      	subs	r3, r1, r0
 8000d4e:	469a      	mov	sl, r3
 8000d50:	4665      	mov	r5, ip
 8000d52:	e57f      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000d54:	464b      	mov	r3, r9
 8000d56:	464a      	mov	r2, r9
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	075b      	lsls	r3, r3, #29
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	08d1      	lsrs	r1, r2, #3
 8000d60:	e62b      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000d62:	464a      	mov	r2, r9
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	4302      	orrs	r2, r0
 8000d68:	d138      	bne.n	8000ddc <__aeabi_dadd+0x680>
 8000d6a:	074a      	lsls	r2, r1, #29
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	08c9      	lsrs	r1, r1, #3
 8000d70:	e646      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000d72:	464b      	mov	r3, r9
 8000d74:	464a      	mov	r2, r9
 8000d76:	08c0      	lsrs	r0, r0, #3
 8000d78:	075b      	lsls	r3, r3, #29
 8000d7a:	4303      	orrs	r3, r0
 8000d7c:	08d1      	lsrs	r1, r2, #3
 8000d7e:	e61f      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d80:	181c      	adds	r4, r3, r0
 8000d82:	429c      	cmp	r4, r3
 8000d84:	419b      	sbcs	r3, r3
 8000d86:	4449      	add	r1, r9
 8000d88:	468a      	mov	sl, r1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	449a      	add	sl, r3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	d400      	bmi.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e607      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d96:	4652      	mov	r2, sl
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4692      	mov	sl, r2
 8000da0:	e601      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000da2:	003c      	movs	r4, r7
 8000da4:	000e      	movs	r6, r1
 8000da6:	3c20      	subs	r4, #32
 8000da8:	40e6      	lsrs	r6, r4
 8000daa:	2f20      	cmp	r7, #32
 8000dac:	d003      	beq.n	8000db6 <__aeabi_dadd+0x65a>
 8000dae:	2440      	movs	r4, #64	; 0x40
 8000db0:	1be4      	subs	r4, r4, r7
 8000db2:	40a1      	lsls	r1, r4
 8000db4:	430b      	orrs	r3, r1
 8000db6:	001c      	movs	r4, r3
 8000db8:	1e63      	subs	r3, r4, #1
 8000dba:	419c      	sbcs	r4, r3
 8000dbc:	4334      	orrs	r4, r6
 8000dbe:	e65e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000dc0:	4443      	add	r3, r8
 8000dc2:	4283      	cmp	r3, r0
 8000dc4:	4180      	sbcs	r0, r0
 8000dc6:	4449      	add	r1, r9
 8000dc8:	468a      	mov	sl, r1
 8000dca:	4240      	negs	r0, r0
 8000dcc:	001c      	movs	r4, r3
 8000dce:	4482      	add	sl, r0
 8000dd0:	e6bc      	b.n	8000b4c <__aeabi_dadd+0x3f0>
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	4323      	orrs	r3, r4
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x67e>
 8000dd8:	e6a9      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000dda:	e5e4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000ddc:	074a      	lsls	r2, r1, #29
 8000dde:	4313      	orrs	r3, r2
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	08c9      	lsrs	r1, r1, #3
 8000de4:	0312      	lsls	r2, r2, #12
 8000de6:	4211      	tst	r1, r2
 8000de8:	d009      	beq.n	8000dfe <__aeabi_dadd+0x6a2>
 8000dea:	4648      	mov	r0, r9
 8000dec:	08c4      	lsrs	r4, r0, #3
 8000dee:	4214      	tst	r4, r2
 8000df0:	d105      	bne.n	8000dfe <__aeabi_dadd+0x6a2>
 8000df2:	4643      	mov	r3, r8
 8000df4:	4665      	mov	r5, ip
 8000df6:	0021      	movs	r1, r4
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	0742      	lsls	r2, r0, #29
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	0f5a      	lsrs	r2, r3, #29
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	08db      	lsrs	r3, r3, #3
 8000e04:	0752      	lsls	r2, r2, #29
 8000e06:	4313      	orrs	r3, r2
 8000e08:	e5fa      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4a01      	ldr	r2, [pc, #4]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000e0e:	001c      	movs	r4, r3
 8000e10:	e540      	b.n	8000894 <__aeabi_dadd+0x138>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007ff 	.word	0x000007ff
 8000e18:	ff7fffff 	.word	0xff7fffff

08000e1c <__aeabi_ddiv>:
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	4657      	mov	r7, sl
 8000e20:	464e      	mov	r6, r9
 8000e22:	4645      	mov	r5, r8
 8000e24:	46de      	mov	lr, fp
 8000e26:	b5e0      	push	{r5, r6, r7, lr}
 8000e28:	030c      	lsls	r4, r1, #12
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	004b      	lsls	r3, r1, #1
 8000e2e:	4681      	mov	r9, r0
 8000e30:	4692      	mov	sl, r2
 8000e32:	0005      	movs	r5, r0
 8000e34:	b085      	sub	sp, #20
 8000e36:	0b24      	lsrs	r4, r4, #12
 8000e38:	0d5b      	lsrs	r3, r3, #21
 8000e3a:	0fce      	lsrs	r6, r1, #31
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x26>
 8000e40:	e152      	b.n	80010e8 <__aeabi_ddiv+0x2cc>
 8000e42:	4ad2      	ldr	r2, [pc, #840]	; (800118c <__aeabi_ddiv+0x370>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0x2e>
 8000e48:	e16e      	b.n	8001128 <__aeabi_ddiv+0x30c>
 8000e4a:	0f42      	lsrs	r2, r0, #29
 8000e4c:	00e4      	lsls	r4, r4, #3
 8000e4e:	4314      	orrs	r4, r2
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	4322      	orrs	r2, r4
 8000e56:	4690      	mov	r8, r2
 8000e58:	4acd      	ldr	r2, [pc, #820]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e5a:	00c5      	lsls	r5, r0, #3
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	449b      	add	fp, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	4699      	mov	r9, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	033c      	lsls	r4, r7, #12
 8000e68:	007b      	lsls	r3, r7, #1
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	0b24      	lsrs	r4, r4, #12
 8000e6e:	0d5b      	lsrs	r3, r3, #21
 8000e70:	0fff      	lsrs	r7, r7, #31
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x5c>
 8000e76:	e11a      	b.n	80010ae <__aeabi_ddiv+0x292>
 8000e78:	4ac4      	ldr	r2, [pc, #784]	; (800118c <__aeabi_ddiv+0x370>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x64>
 8000e7e:	e15e      	b.n	800113e <__aeabi_ddiv+0x322>
 8000e80:	0f42      	lsrs	r2, r0, #29
 8000e82:	00e4      	lsls	r4, r4, #3
 8000e84:	4322      	orrs	r2, r4
 8000e86:	2480      	movs	r4, #128	; 0x80
 8000e88:	0424      	lsls	r4, r4, #16
 8000e8a:	4314      	orrs	r4, r2
 8000e8c:	4ac0      	ldr	r2, [pc, #768]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e8e:	00c1      	lsls	r1, r0, #3
 8000e90:	4694      	mov	ip, r2
 8000e92:	465a      	mov	r2, fp
 8000e94:	4463      	add	r3, ip
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	469b      	mov	fp, r3
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	407b      	eors	r3, r7
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d827      	bhi.n	8000ef8 <__aeabi_ddiv+0xdc>
 8000ea8:	4aba      	ldr	r2, [pc, #744]	; (8001194 <__aeabi_ddiv+0x378>)
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	469f      	mov	pc, r3
 8000eb0:	46b2      	mov	sl, r6
 8000eb2:	9b00      	ldr	r3, [sp, #0]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d016      	beq.n	8000ee6 <__aeabi_ddiv+0xca>
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0xa2>
 8000ebc:	e287      	b.n	80013ce <__aeabi_ddiv+0x5b2>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_ddiv+0xa8>
 8000ec2:	e0d5      	b.n	8001070 <__aeabi_ddiv+0x254>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2500      	movs	r5, #0
 8000eca:	051b      	lsls	r3, r3, #20
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	4652      	mov	r2, sl
 8000ed0:	07d2      	lsls	r2, r2, #31
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	b005      	add	sp, #20
 8000eda:	bcf0      	pop	{r4, r5, r6, r7}
 8000edc:	46bb      	mov	fp, r7
 8000ede:	46b2      	mov	sl, r6
 8000ee0:	46a9      	mov	r9, r5
 8000ee2:	46a0      	mov	r8, r4
 8000ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2500      	movs	r5, #0
 8000eea:	4ba8      	ldr	r3, [pc, #672]	; (800118c <__aeabi_ddiv+0x370>)
 8000eec:	e7ed      	b.n	8000eca <__aeabi_ddiv+0xae>
 8000eee:	46ba      	mov	sl, r7
 8000ef0:	46a0      	mov	r8, r4
 8000ef2:	000d      	movs	r5, r1
 8000ef4:	9000      	str	r0, [sp, #0]
 8000ef6:	e7dc      	b.n	8000eb2 <__aeabi_ddiv+0x96>
 8000ef8:	4544      	cmp	r4, r8
 8000efa:	d200      	bcs.n	8000efe <__aeabi_ddiv+0xe2>
 8000efc:	e1c4      	b.n	8001288 <__aeabi_ddiv+0x46c>
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0xe6>
 8000f00:	e1bf      	b.n	8001282 <__aeabi_ddiv+0x466>
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	469c      	mov	ip, r3
 8000f08:	002e      	movs	r6, r5
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	44e3      	add	fp, ip
 8000f10:	0223      	lsls	r3, r4, #8
 8000f12:	0e0c      	lsrs	r4, r1, #24
 8000f14:	431c      	orrs	r4, r3
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	4699      	mov	r9, r3
 8000f1a:	0423      	lsls	r3, r4, #16
 8000f1c:	020a      	lsls	r2, r1, #8
 8000f1e:	0c1f      	lsrs	r7, r3, #16
 8000f20:	4649      	mov	r1, r9
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	9701      	str	r7, [sp, #4]
 8000f26:	f7ff f98f 	bl	8000248 <__aeabi_uidivmod>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	437a      	muls	r2, r7
 8000f2e:	040b      	lsls	r3, r1, #16
 8000f30:	0c31      	lsrs	r1, r6, #16
 8000f32:	4680      	mov	r8, r0
 8000f34:	4319      	orrs	r1, r3
 8000f36:	428a      	cmp	r2, r1
 8000f38:	d907      	bls.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	469c      	mov	ip, r3
 8000f40:	1909      	adds	r1, r1, r4
 8000f42:	44e0      	add	r8, ip
 8000f44:	428c      	cmp	r4, r1
 8000f46:	d800      	bhi.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f48:	e201      	b.n	800134e <__aeabi_ddiv+0x532>
 8000f4a:	1a88      	subs	r0, r1, r2
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	f7ff f97b 	bl	8000248 <__aeabi_uidivmod>
 8000f52:	9a01      	ldr	r2, [sp, #4]
 8000f54:	0436      	lsls	r6, r6, #16
 8000f56:	4342      	muls	r2, r0
 8000f58:	0409      	lsls	r1, r1, #16
 8000f5a:	0c36      	lsrs	r6, r6, #16
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	430e      	orrs	r6, r1
 8000f60:	42b2      	cmp	r2, r6
 8000f62:	d904      	bls.n	8000f6e <__aeabi_ddiv+0x152>
 8000f64:	1936      	adds	r6, r6, r4
 8000f66:	3b01      	subs	r3, #1
 8000f68:	42b4      	cmp	r4, r6
 8000f6a:	d800      	bhi.n	8000f6e <__aeabi_ddiv+0x152>
 8000f6c:	e1e9      	b.n	8001342 <__aeabi_ddiv+0x526>
 8000f6e:	1ab0      	subs	r0, r6, r2
 8000f70:	4642      	mov	r2, r8
 8000f72:	9e00      	ldr	r6, [sp, #0]
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	431a      	orrs	r2, r3
 8000f78:	0c33      	lsrs	r3, r6, #16
 8000f7a:	001f      	movs	r7, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	4690      	mov	r8, r2
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	0413      	lsls	r3, r2, #16
 8000f84:	0432      	lsls	r2, r6, #16
 8000f86:	0c16      	lsrs	r6, r2, #16
 8000f88:	0032      	movs	r2, r6
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	435a      	muls	r2, r3
 8000f8e:	9603      	str	r6, [sp, #12]
 8000f90:	437b      	muls	r3, r7
 8000f92:	434e      	muls	r6, r1
 8000f94:	4379      	muls	r1, r7
 8000f96:	0c17      	lsrs	r7, r2, #16
 8000f98:	46bc      	mov	ip, r7
 8000f9a:	199b      	adds	r3, r3, r6
 8000f9c:	4463      	add	r3, ip
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	d903      	bls.n	8000faa <__aeabi_ddiv+0x18e>
 8000fa2:	2680      	movs	r6, #128	; 0x80
 8000fa4:	0276      	lsls	r6, r6, #9
 8000fa6:	46b4      	mov	ip, r6
 8000fa8:	4461      	add	r1, ip
 8000faa:	0c1e      	lsrs	r6, r3, #16
 8000fac:	1871      	adds	r1, r6, r1
 8000fae:	0416      	lsls	r6, r2, #16
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	0c36      	lsrs	r6, r6, #16
 8000fb4:	199e      	adds	r6, r3, r6
 8000fb6:	4288      	cmp	r0, r1
 8000fb8:	d302      	bcc.n	8000fc0 <__aeabi_ddiv+0x1a4>
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fbc:	42b5      	cmp	r5, r6
 8000fbe:	d210      	bcs.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	9b00      	ldr	r3, [sp, #0]
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	4465      	add	r5, ip
 8000fca:	001f      	movs	r7, r3
 8000fcc:	429d      	cmp	r5, r3
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	191b      	adds	r3, r3, r4
 8000fd4:	18c0      	adds	r0, r0, r3
 8000fd6:	4284      	cmp	r4, r0
 8000fd8:	d200      	bcs.n	8000fdc <__aeabi_ddiv+0x1c0>
 8000fda:	e19e      	b.n	800131a <__aeabi_ddiv+0x4fe>
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8000fde:	e199      	b.n	8001314 <__aeabi_ddiv+0x4f8>
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	1bae      	subs	r6, r5, r6
 8000fe4:	42b5      	cmp	r5, r6
 8000fe6:	41ad      	sbcs	r5, r5
 8000fe8:	1a40      	subs	r0, r0, r1
 8000fea:	426d      	negs	r5, r5
 8000fec:	1b40      	subs	r0, r0, r5
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0x1d8>
 8000ff2:	e1d2      	b.n	800139a <__aeabi_ddiv+0x57e>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f927 	bl	8000248 <__aeabi_uidivmod>
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	040b      	lsls	r3, r1, #16
 8000ffe:	4342      	muls	r2, r0
 8001000:	0c31      	lsrs	r1, r6, #16
 8001002:	0005      	movs	r5, r0
 8001004:	4319      	orrs	r1, r3
 8001006:	428a      	cmp	r2, r1
 8001008:	d900      	bls.n	800100c <__aeabi_ddiv+0x1f0>
 800100a:	e16c      	b.n	80012e6 <__aeabi_ddiv+0x4ca>
 800100c:	1a88      	subs	r0, r1, r2
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff f91a 	bl	8000248 <__aeabi_uidivmod>
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	0436      	lsls	r6, r6, #16
 8001018:	4342      	muls	r2, r0
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	0c36      	lsrs	r6, r6, #16
 800101e:	0003      	movs	r3, r0
 8001020:	430e      	orrs	r6, r1
 8001022:	42b2      	cmp	r2, r6
 8001024:	d900      	bls.n	8001028 <__aeabi_ddiv+0x20c>
 8001026:	e153      	b.n	80012d0 <__aeabi_ddiv+0x4b4>
 8001028:	9803      	ldr	r0, [sp, #12]
 800102a:	1ab6      	subs	r6, r6, r2
 800102c:	0002      	movs	r2, r0
 800102e:	042d      	lsls	r5, r5, #16
 8001030:	431d      	orrs	r5, r3
 8001032:	9f02      	ldr	r7, [sp, #8]
 8001034:	042b      	lsls	r3, r5, #16
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	435a      	muls	r2, r3
 800103a:	437b      	muls	r3, r7
 800103c:	469c      	mov	ip, r3
 800103e:	0c29      	lsrs	r1, r5, #16
 8001040:	4348      	muls	r0, r1
 8001042:	0c13      	lsrs	r3, r2, #16
 8001044:	4484      	add	ip, r0
 8001046:	4463      	add	r3, ip
 8001048:	4379      	muls	r1, r7
 800104a:	4298      	cmp	r0, r3
 800104c:	d903      	bls.n	8001056 <__aeabi_ddiv+0x23a>
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	0240      	lsls	r0, r0, #9
 8001052:	4684      	mov	ip, r0
 8001054:	4461      	add	r1, ip
 8001056:	0c18      	lsrs	r0, r3, #16
 8001058:	0412      	lsls	r2, r2, #16
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	0c12      	lsrs	r2, r2, #16
 800105e:	1840      	adds	r0, r0, r1
 8001060:	189b      	adds	r3, r3, r2
 8001062:	4286      	cmp	r6, r0
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x24c>
 8001066:	e100      	b.n	800126a <__aeabi_ddiv+0x44e>
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x250>
 800106a:	e0fb      	b.n	8001264 <__aeabi_ddiv+0x448>
 800106c:	2301      	movs	r3, #1
 800106e:	431d      	orrs	r5, r3
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <__aeabi_ddiv+0x37c>)
 8001072:	445b      	add	r3, fp
 8001074:	2b00      	cmp	r3, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_ddiv+0x25e>
 8001078:	e0aa      	b.n	80011d0 <__aeabi_ddiv+0x3b4>
 800107a:	076a      	lsls	r2, r5, #29
 800107c:	d000      	beq.n	8001080 <__aeabi_ddiv+0x264>
 800107e:	e13d      	b.n	80012fc <__aeabi_ddiv+0x4e0>
 8001080:	08e9      	lsrs	r1, r5, #3
 8001082:	4642      	mov	r2, r8
 8001084:	01d2      	lsls	r2, r2, #7
 8001086:	d506      	bpl.n	8001096 <__aeabi_ddiv+0x27a>
 8001088:	4642      	mov	r2, r8
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <__aeabi_ddiv+0x380>)
 800108c:	401a      	ands	r2, r3
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	4690      	mov	r8, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	445b      	add	r3, fp
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <__aeabi_ddiv+0x384>)
 8001098:	4293      	cmp	r3, r2
 800109a:	dd00      	ble.n	800109e <__aeabi_ddiv+0x282>
 800109c:	e723      	b.n	8000ee6 <__aeabi_ddiv+0xca>
 800109e:	4642      	mov	r2, r8
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	0755      	lsls	r5, r2, #29
 80010a4:	0252      	lsls	r2, r2, #9
 80010a6:	430d      	orrs	r5, r1
 80010a8:	0b12      	lsrs	r2, r2, #12
 80010aa:	0d5b      	lsrs	r3, r3, #21
 80010ac:	e70d      	b.n	8000eca <__aeabi_ddiv+0xae>
 80010ae:	4651      	mov	r1, sl
 80010b0:	4321      	orrs	r1, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x29a>
 80010b4:	e07c      	b.n	80011b0 <__aeabi_ddiv+0x394>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_ddiv+0x2a0>
 80010ba:	e0fb      	b.n	80012b4 <__aeabi_ddiv+0x498>
 80010bc:	0020      	movs	r0, r4
 80010be:	f001 fa1b 	bl	80024f8 <__clzsi2>
 80010c2:	0002      	movs	r2, r0
 80010c4:	3a0b      	subs	r2, #11
 80010c6:	231d      	movs	r3, #29
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	4652      	mov	r2, sl
 80010cc:	0001      	movs	r1, r0
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	4653      	mov	r3, sl
 80010d2:	3908      	subs	r1, #8
 80010d4:	408b      	lsls	r3, r1
 80010d6:	408c      	lsls	r4, r1
 80010d8:	0019      	movs	r1, r3
 80010da:	4314      	orrs	r4, r2
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <__aeabi_ddiv+0x388>)
 80010de:	4458      	add	r0, fp
 80010e0:	469b      	mov	fp, r3
 80010e2:	4483      	add	fp, r0
 80010e4:	2000      	movs	r0, #0
 80010e6:	e6d9      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80010e8:	0003      	movs	r3, r0
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d044      	beq.n	800117a <__aeabi_ddiv+0x35e>
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x2da>
 80010f4:	e0cf      	b.n	8001296 <__aeabi_ddiv+0x47a>
 80010f6:	0020      	movs	r0, r4
 80010f8:	f001 f9fe 	bl	80024f8 <__clzsi2>
 80010fc:	0001      	movs	r1, r0
 80010fe:	0002      	movs	r2, r0
 8001100:	390b      	subs	r1, #11
 8001102:	231d      	movs	r3, #29
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	4649      	mov	r1, r9
 8001108:	0010      	movs	r0, r2
 800110a:	40d9      	lsrs	r1, r3
 800110c:	3808      	subs	r0, #8
 800110e:	4084      	lsls	r4, r0
 8001110:	000b      	movs	r3, r1
 8001112:	464d      	mov	r5, r9
 8001114:	4323      	orrs	r3, r4
 8001116:	4698      	mov	r8, r3
 8001118:	4085      	lsls	r5, r0
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <__aeabi_ddiv+0x38c>)
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	469b      	mov	fp, r3
 8001120:	2300      	movs	r3, #0
 8001122:	4699      	mov	r9, r3
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	e69e      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 8001128:	0002      	movs	r2, r0
 800112a:	4322      	orrs	r2, r4
 800112c:	4690      	mov	r8, r2
 800112e:	d11d      	bne.n	800116c <__aeabi_ddiv+0x350>
 8001130:	2208      	movs	r2, #8
 8001132:	469b      	mov	fp, r3
 8001134:	2302      	movs	r3, #2
 8001136:	2500      	movs	r5, #0
 8001138:	4691      	mov	r9, r2
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	e693      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800113e:	4651      	mov	r1, sl
 8001140:	4321      	orrs	r1, r4
 8001142:	d109      	bne.n	8001158 <__aeabi_ddiv+0x33c>
 8001144:	2302      	movs	r3, #2
 8001146:	464a      	mov	r2, r9
 8001148:	431a      	orrs	r2, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <__aeabi_ddiv+0x390>)
 800114c:	4691      	mov	r9, r2
 800114e:	469c      	mov	ip, r3
 8001150:	2400      	movs	r4, #0
 8001152:	2002      	movs	r0, #2
 8001154:	44e3      	add	fp, ip
 8001156:	e6a1      	b.n	8000e9c <__aeabi_ddiv+0x80>
 8001158:	2303      	movs	r3, #3
 800115a:	464a      	mov	r2, r9
 800115c:	431a      	orrs	r2, r3
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <__aeabi_ddiv+0x390>)
 8001160:	4691      	mov	r9, r2
 8001162:	469c      	mov	ip, r3
 8001164:	4651      	mov	r1, sl
 8001166:	2003      	movs	r0, #3
 8001168:	44e3      	add	fp, ip
 800116a:	e697      	b.n	8000e9c <__aeabi_ddiv+0x80>
 800116c:	220c      	movs	r2, #12
 800116e:	469b      	mov	fp, r3
 8001170:	2303      	movs	r3, #3
 8001172:	46a0      	mov	r8, r4
 8001174:	4691      	mov	r9, r2
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	e675      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800117a:	2304      	movs	r3, #4
 800117c:	4699      	mov	r9, r3
 800117e:	2300      	movs	r3, #0
 8001180:	469b      	mov	fp, r3
 8001182:	3301      	adds	r3, #1
 8001184:	2500      	movs	r5, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	e66d      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	fffffc01 	.word	0xfffffc01
 8001194:	0800c738 	.word	0x0800c738
 8001198:	000003ff 	.word	0x000003ff
 800119c:	feffffff 	.word	0xfeffffff
 80011a0:	000007fe 	.word	0x000007fe
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	fffffc0d 	.word	0xfffffc0d
 80011ac:	fffff801 	.word	0xfffff801
 80011b0:	464a      	mov	r2, r9
 80011b2:	2301      	movs	r3, #1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	4691      	mov	r9, r2
 80011b8:	2400      	movs	r4, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	e66e      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80011be:	2300      	movs	r3, #0
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	469a      	mov	sl, r3
 80011c4:	2500      	movs	r5, #0
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80011c8:	0312      	lsls	r2, r2, #12
 80011ca:	e67e      	b.n	8000eca <__aeabi_ddiv+0xae>
 80011cc:	2501      	movs	r5, #1
 80011ce:	426d      	negs	r5, r5
 80011d0:	2201      	movs	r2, #1
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	2a38      	cmp	r2, #56	; 0x38
 80011d6:	dd00      	ble.n	80011da <__aeabi_ddiv+0x3be>
 80011d8:	e674      	b.n	8000ec4 <__aeabi_ddiv+0xa8>
 80011da:	2a1f      	cmp	r2, #31
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_ddiv+0x3c4>
 80011de:	e0bd      	b.n	800135c <__aeabi_ddiv+0x540>
 80011e0:	211f      	movs	r1, #31
 80011e2:	4249      	negs	r1, r1
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	4641      	mov	r1, r8
 80011e8:	40d9      	lsrs	r1, r3
 80011ea:	000b      	movs	r3, r1
 80011ec:	2a20      	cmp	r2, #32
 80011ee:	d004      	beq.n	80011fa <__aeabi_ddiv+0x3de>
 80011f0:	4641      	mov	r1, r8
 80011f2:	4a7e      	ldr	r2, [pc, #504]	; (80013ec <__aeabi_ddiv+0x5d0>)
 80011f4:	445a      	add	r2, fp
 80011f6:	4091      	lsls	r1, r2
 80011f8:	430d      	orrs	r5, r1
 80011fa:	0029      	movs	r1, r5
 80011fc:	1e4a      	subs	r2, r1, #1
 80011fe:	4191      	sbcs	r1, r2
 8001200:	4319      	orrs	r1, r3
 8001202:	2307      	movs	r3, #7
 8001204:	001d      	movs	r5, r3
 8001206:	2200      	movs	r2, #0
 8001208:	400d      	ands	r5, r1
 800120a:	420b      	tst	r3, r1
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x3f4>
 800120e:	e0d0      	b.n	80013b2 <__aeabi_ddiv+0x596>
 8001210:	220f      	movs	r2, #15
 8001212:	2300      	movs	r3, #0
 8001214:	400a      	ands	r2, r1
 8001216:	2a04      	cmp	r2, #4
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x400>
 800121a:	e0c7      	b.n	80013ac <__aeabi_ddiv+0x590>
 800121c:	1d0a      	adds	r2, r1, #4
 800121e:	428a      	cmp	r2, r1
 8001220:	4189      	sbcs	r1, r1
 8001222:	4249      	negs	r1, r1
 8001224:	185b      	adds	r3, r3, r1
 8001226:	0011      	movs	r1, r2
 8001228:	021a      	lsls	r2, r3, #8
 800122a:	d400      	bmi.n	800122e <__aeabi_ddiv+0x412>
 800122c:	e0be      	b.n	80013ac <__aeabi_ddiv+0x590>
 800122e:	2301      	movs	r3, #1
 8001230:	2200      	movs	r2, #0
 8001232:	2500      	movs	r5, #0
 8001234:	e649      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	4643      	mov	r3, r8
 800123a:	0312      	lsls	r2, r2, #12
 800123c:	4213      	tst	r3, r2
 800123e:	d008      	beq.n	8001252 <__aeabi_ddiv+0x436>
 8001240:	4214      	tst	r4, r2
 8001242:	d106      	bne.n	8001252 <__aeabi_ddiv+0x436>
 8001244:	4322      	orrs	r2, r4
 8001246:	0312      	lsls	r2, r2, #12
 8001248:	46ba      	mov	sl, r7
 800124a:	000d      	movs	r5, r1
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	e63b      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	4643      	mov	r3, r8
 8001256:	0312      	lsls	r2, r2, #12
 8001258:	431a      	orrs	r2, r3
 800125a:	0312      	lsls	r2, r2, #12
 800125c:	46b2      	mov	sl, r6
 800125e:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 8001260:	0b12      	lsrs	r2, r2, #12
 8001262:	e632      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001264:	2b00      	cmp	r3, #0
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x44e>
 8001268:	e702      	b.n	8001070 <__aeabi_ddiv+0x254>
 800126a:	19a6      	adds	r6, r4, r6
 800126c:	1e6a      	subs	r2, r5, #1
 800126e:	42a6      	cmp	r6, r4
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x458>
 8001272:	e089      	b.n	8001388 <__aeabi_ddiv+0x56c>
 8001274:	4286      	cmp	r6, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x45e>
 8001278:	e09f      	b.n	80013ba <__aeabi_ddiv+0x59e>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x462>
 800127c:	e0af      	b.n	80013de <__aeabi_ddiv+0x5c2>
 800127e:	0015      	movs	r5, r2
 8001280:	e6f4      	b.n	800106c <__aeabi_ddiv+0x250>
 8001282:	42a9      	cmp	r1, r5
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x46c>
 8001286:	e63c      	b.n	8000f02 <__aeabi_ddiv+0xe6>
 8001288:	4643      	mov	r3, r8
 800128a:	07de      	lsls	r6, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	086b      	lsrs	r3, r5, #1
 8001290:	431e      	orrs	r6, r3
 8001292:	07ed      	lsls	r5, r5, #31
 8001294:	e63c      	b.n	8000f10 <__aeabi_ddiv+0xf4>
 8001296:	f001 f92f 	bl	80024f8 <__clzsi2>
 800129a:	0001      	movs	r1, r0
 800129c:	0002      	movs	r2, r0
 800129e:	3115      	adds	r1, #21
 80012a0:	3220      	adds	r2, #32
 80012a2:	291c      	cmp	r1, #28
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_ddiv+0x48c>
 80012a6:	e72c      	b.n	8001102 <__aeabi_ddiv+0x2e6>
 80012a8:	464b      	mov	r3, r9
 80012aa:	3808      	subs	r0, #8
 80012ac:	4083      	lsls	r3, r0
 80012ae:	2500      	movs	r5, #0
 80012b0:	4698      	mov	r8, r3
 80012b2:	e732      	b.n	800111a <__aeabi_ddiv+0x2fe>
 80012b4:	f001 f920 	bl	80024f8 <__clzsi2>
 80012b8:	0003      	movs	r3, r0
 80012ba:	001a      	movs	r2, r3
 80012bc:	3215      	adds	r2, #21
 80012be:	3020      	adds	r0, #32
 80012c0:	2a1c      	cmp	r2, #28
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x4aa>
 80012c4:	e6ff      	b.n	80010c6 <__aeabi_ddiv+0x2aa>
 80012c6:	4654      	mov	r4, sl
 80012c8:	3b08      	subs	r3, #8
 80012ca:	2100      	movs	r1, #0
 80012cc:	409c      	lsls	r4, r3
 80012ce:	e705      	b.n	80010dc <__aeabi_ddiv+0x2c0>
 80012d0:	1936      	adds	r6, r6, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	42b4      	cmp	r4, r6
 80012d6:	d900      	bls.n	80012da <__aeabi_ddiv+0x4be>
 80012d8:	e6a6      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012da:	42b2      	cmp	r2, r6
 80012dc:	d800      	bhi.n	80012e0 <__aeabi_ddiv+0x4c4>
 80012de:	e6a3      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e0:	1e83      	subs	r3, r0, #2
 80012e2:	1936      	adds	r6, r6, r4
 80012e4:	e6a0      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e6:	1909      	adds	r1, r1, r4
 80012e8:	3d01      	subs	r5, #1
 80012ea:	428c      	cmp	r4, r1
 80012ec:	d900      	bls.n	80012f0 <__aeabi_ddiv+0x4d4>
 80012ee:	e68d      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f0:	428a      	cmp	r2, r1
 80012f2:	d800      	bhi.n	80012f6 <__aeabi_ddiv+0x4da>
 80012f4:	e68a      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f6:	1e85      	subs	r5, r0, #2
 80012f8:	1909      	adds	r1, r1, r4
 80012fa:	e687      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012fc:	220f      	movs	r2, #15
 80012fe:	402a      	ands	r2, r5
 8001300:	2a04      	cmp	r2, #4
 8001302:	d100      	bne.n	8001306 <__aeabi_ddiv+0x4ea>
 8001304:	e6bc      	b.n	8001080 <__aeabi_ddiv+0x264>
 8001306:	1d29      	adds	r1, r5, #4
 8001308:	42a9      	cmp	r1, r5
 800130a:	41ad      	sbcs	r5, r5
 800130c:	426d      	negs	r5, r5
 800130e:	08c9      	lsrs	r1, r1, #3
 8001310:	44a8      	add	r8, r5
 8001312:	e6b6      	b.n	8001082 <__aeabi_ddiv+0x266>
 8001314:	42af      	cmp	r7, r5
 8001316:	d900      	bls.n	800131a <__aeabi_ddiv+0x4fe>
 8001318:	e662      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 800131a:	4281      	cmp	r1, r0
 800131c:	d804      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 800131e:	d000      	beq.n	8001322 <__aeabi_ddiv+0x506>
 8001320:	e65e      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001322:	42ae      	cmp	r6, r5
 8001324:	d800      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 8001326:	e65b      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001328:	2302      	movs	r3, #2
 800132a:	425b      	negs	r3, r3
 800132c:	469c      	mov	ip, r3
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	44e0      	add	r8, ip
 8001332:	469c      	mov	ip, r3
 8001334:	4465      	add	r5, ip
 8001336:	429d      	cmp	r5, r3
 8001338:	419b      	sbcs	r3, r3
 800133a:	425b      	negs	r3, r3
 800133c:	191b      	adds	r3, r3, r4
 800133e:	18c0      	adds	r0, r0, r3
 8001340:	e64f      	b.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8001342:	42b2      	cmp	r2, r6
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x52c>
 8001346:	e612      	b.n	8000f6e <__aeabi_ddiv+0x152>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	1936      	adds	r6, r6, r4
 800134c:	e60f      	b.n	8000f6e <__aeabi_ddiv+0x152>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x538>
 8001352:	e5fa      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 8001354:	1e83      	subs	r3, r0, #2
 8001356:	4698      	mov	r8, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e5f6      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <__aeabi_ddiv+0x5d4>)
 800135e:	0028      	movs	r0, r5
 8001360:	445b      	add	r3, fp
 8001362:	4641      	mov	r1, r8
 8001364:	409d      	lsls	r5, r3
 8001366:	4099      	lsls	r1, r3
 8001368:	40d0      	lsrs	r0, r2
 800136a:	1e6b      	subs	r3, r5, #1
 800136c:	419d      	sbcs	r5, r3
 800136e:	4643      	mov	r3, r8
 8001370:	4301      	orrs	r1, r0
 8001372:	4329      	orrs	r1, r5
 8001374:	40d3      	lsrs	r3, r2
 8001376:	074a      	lsls	r2, r1, #29
 8001378:	d100      	bne.n	800137c <__aeabi_ddiv+0x560>
 800137a:	e755      	b.n	8001228 <__aeabi_ddiv+0x40c>
 800137c:	220f      	movs	r2, #15
 800137e:	400a      	ands	r2, r1
 8001380:	2a04      	cmp	r2, #4
 8001382:	d000      	beq.n	8001386 <__aeabi_ddiv+0x56a>
 8001384:	e74a      	b.n	800121c <__aeabi_ddiv+0x400>
 8001386:	e74f      	b.n	8001228 <__aeabi_ddiv+0x40c>
 8001388:	0015      	movs	r5, r2
 800138a:	4286      	cmp	r6, r0
 800138c:	d000      	beq.n	8001390 <__aeabi_ddiv+0x574>
 800138e:	e66d      	b.n	800106c <__aeabi_ddiv+0x250>
 8001390:	9a00      	ldr	r2, [sp, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d000      	beq.n	8001398 <__aeabi_ddiv+0x57c>
 8001396:	e669      	b.n	800106c <__aeabi_ddiv+0x250>
 8001398:	e66a      	b.n	8001070 <__aeabi_ddiv+0x254>
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <__aeabi_ddiv+0x5d8>)
 800139c:	445b      	add	r3, fp
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_ddiv+0x588>
 80013a2:	e713      	b.n	80011cc <__aeabi_ddiv+0x3b0>
 80013a4:	2501      	movs	r5, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	44a8      	add	r8, r5
 80013aa:	e66a      	b.n	8001082 <__aeabi_ddiv+0x266>
 80013ac:	075d      	lsls	r5, r3, #29
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	0b1a      	lsrs	r2, r3, #12
 80013b2:	08c9      	lsrs	r1, r1, #3
 80013b4:	2300      	movs	r3, #0
 80013b6:	430d      	orrs	r5, r1
 80013b8:	e587      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013ba:	9900      	ldr	r1, [sp, #0]
 80013bc:	3d02      	subs	r5, #2
 80013be:	004a      	lsls	r2, r1, #1
 80013c0:	428a      	cmp	r2, r1
 80013c2:	41bf      	sbcs	r7, r7
 80013c4:	427f      	negs	r7, r7
 80013c6:	193f      	adds	r7, r7, r4
 80013c8:	19f6      	adds	r6, r6, r7
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	e7dd      	b.n	800138a <__aeabi_ddiv+0x56e>
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	4643      	mov	r3, r8
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	431a      	orrs	r2, r3
 80013d6:	0312      	lsls	r2, r2, #12
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80013da:	0b12      	lsrs	r2, r2, #12
 80013dc:	e575      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013de:	9900      	ldr	r1, [sp, #0]
 80013e0:	4299      	cmp	r1, r3
 80013e2:	d3ea      	bcc.n	80013ba <__aeabi_ddiv+0x59e>
 80013e4:	0015      	movs	r5, r2
 80013e6:	e7d3      	b.n	8001390 <__aeabi_ddiv+0x574>
 80013e8:	000007ff 	.word	0x000007ff
 80013ec:	0000043e 	.word	0x0000043e
 80013f0:	0000041e 	.word	0x0000041e
 80013f4:	000003ff 	.word	0x000003ff

080013f8 <__eqdf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	46de      	mov	lr, fp
 8001400:	4657      	mov	r7, sl
 8001402:	4690      	mov	r8, r2
 8001404:	b5e0      	push	{r5, r6, r7, lr}
 8001406:	0017      	movs	r7, r2
 8001408:	031a      	lsls	r2, r3, #12
 800140a:	0b12      	lsrs	r2, r2, #12
 800140c:	0005      	movs	r5, r0
 800140e:	4684      	mov	ip, r0
 8001410:	4819      	ldr	r0, [pc, #100]	; (8001478 <__eqdf2+0x80>)
 8001412:	030e      	lsls	r6, r1, #12
 8001414:	004c      	lsls	r4, r1, #1
 8001416:	4691      	mov	r9, r2
 8001418:	005a      	lsls	r2, r3, #1
 800141a:	0fdb      	lsrs	r3, r3, #31
 800141c:	469b      	mov	fp, r3
 800141e:	0b36      	lsrs	r6, r6, #12
 8001420:	0d64      	lsrs	r4, r4, #21
 8001422:	0fc9      	lsrs	r1, r1, #31
 8001424:	0d52      	lsrs	r2, r2, #21
 8001426:	4284      	cmp	r4, r0
 8001428:	d019      	beq.n	800145e <__eqdf2+0x66>
 800142a:	4282      	cmp	r2, r0
 800142c:	d010      	beq.n	8001450 <__eqdf2+0x58>
 800142e:	2001      	movs	r0, #1
 8001430:	4294      	cmp	r4, r2
 8001432:	d10e      	bne.n	8001452 <__eqdf2+0x5a>
 8001434:	454e      	cmp	r6, r9
 8001436:	d10c      	bne.n	8001452 <__eqdf2+0x5a>
 8001438:	2001      	movs	r0, #1
 800143a:	45c4      	cmp	ip, r8
 800143c:	d109      	bne.n	8001452 <__eqdf2+0x5a>
 800143e:	4559      	cmp	r1, fp
 8001440:	d017      	beq.n	8001472 <__eqdf2+0x7a>
 8001442:	2c00      	cmp	r4, #0
 8001444:	d105      	bne.n	8001452 <__eqdf2+0x5a>
 8001446:	0030      	movs	r0, r6
 8001448:	4328      	orrs	r0, r5
 800144a:	1e43      	subs	r3, r0, #1
 800144c:	4198      	sbcs	r0, r3
 800144e:	e000      	b.n	8001452 <__eqdf2+0x5a>
 8001450:	2001      	movs	r0, #1
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	0033      	movs	r3, r6
 8001460:	2001      	movs	r0, #1
 8001462:	432b      	orrs	r3, r5
 8001464:	d1f5      	bne.n	8001452 <__eqdf2+0x5a>
 8001466:	42a2      	cmp	r2, r4
 8001468:	d1f3      	bne.n	8001452 <__eqdf2+0x5a>
 800146a:	464b      	mov	r3, r9
 800146c:	433b      	orrs	r3, r7
 800146e:	d1f0      	bne.n	8001452 <__eqdf2+0x5a>
 8001470:	e7e2      	b.n	8001438 <__eqdf2+0x40>
 8001472:	2000      	movs	r0, #0
 8001474:	e7ed      	b.n	8001452 <__eqdf2+0x5a>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4647      	mov	r7, r8
 8001480:	46ce      	mov	lr, r9
 8001482:	0004      	movs	r4, r0
 8001484:	0018      	movs	r0, r3
 8001486:	0016      	movs	r6, r2
 8001488:	031b      	lsls	r3, r3, #12
 800148a:	0b1b      	lsrs	r3, r3, #12
 800148c:	4d2d      	ldr	r5, [pc, #180]	; (8001544 <__gedf2+0xc8>)
 800148e:	004a      	lsls	r2, r1, #1
 8001490:	4699      	mov	r9, r3
 8001492:	b580      	push	{r7, lr}
 8001494:	0043      	lsls	r3, r0, #1
 8001496:	030f      	lsls	r7, r1, #12
 8001498:	46a4      	mov	ip, r4
 800149a:	46b0      	mov	r8, r6
 800149c:	0b3f      	lsrs	r7, r7, #12
 800149e:	0d52      	lsrs	r2, r2, #21
 80014a0:	0fc9      	lsrs	r1, r1, #31
 80014a2:	0d5b      	lsrs	r3, r3, #21
 80014a4:	0fc0      	lsrs	r0, r0, #31
 80014a6:	42aa      	cmp	r2, r5
 80014a8:	d021      	beq.n	80014ee <__gedf2+0x72>
 80014aa:	42ab      	cmp	r3, r5
 80014ac:	d013      	beq.n	80014d6 <__gedf2+0x5a>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d122      	bne.n	80014f8 <__gedf2+0x7c>
 80014b2:	433c      	orrs	r4, r7
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <__gedf2+0x42>
 80014b8:	464d      	mov	r5, r9
 80014ba:	432e      	orrs	r6, r5
 80014bc:	d022      	beq.n	8001504 <__gedf2+0x88>
 80014be:	2c00      	cmp	r4, #0
 80014c0:	d010      	beq.n	80014e4 <__gedf2+0x68>
 80014c2:	4281      	cmp	r1, r0
 80014c4:	d022      	beq.n	800150c <__gedf2+0x90>
 80014c6:	2002      	movs	r0, #2
 80014c8:	3901      	subs	r1, #1
 80014ca:	4008      	ands	r0, r1
 80014cc:	3801      	subs	r0, #1
 80014ce:	bcc0      	pop	{r6, r7}
 80014d0:	46b9      	mov	r9, r7
 80014d2:	46b0      	mov	r8, r6
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d6:	464d      	mov	r5, r9
 80014d8:	432e      	orrs	r6, r5
 80014da:	d129      	bne.n	8001530 <__gedf2+0xb4>
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d1f0      	bne.n	80014c2 <__gedf2+0x46>
 80014e0:	433c      	orrs	r4, r7
 80014e2:	d1ee      	bne.n	80014c2 <__gedf2+0x46>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f2      	bne.n	80014ce <__gedf2+0x52>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7ef      	b.n	80014ce <__gedf2+0x52>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d11d      	bne.n	8001530 <__gedf2+0xb4>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d0ee      	beq.n	80014d6 <__gedf2+0x5a>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e2      	bne.n	80014c2 <__gedf2+0x46>
 80014fc:	464c      	mov	r4, r9
 80014fe:	4326      	orrs	r6, r4
 8001500:	d1df      	bne.n	80014c2 <__gedf2+0x46>
 8001502:	e7e0      	b.n	80014c6 <__gedf2+0x4a>
 8001504:	2000      	movs	r0, #0
 8001506:	2c00      	cmp	r4, #0
 8001508:	d0e1      	beq.n	80014ce <__gedf2+0x52>
 800150a:	e7dc      	b.n	80014c6 <__gedf2+0x4a>
 800150c:	429a      	cmp	r2, r3
 800150e:	dc0a      	bgt.n	8001526 <__gedf2+0xaa>
 8001510:	dbe8      	blt.n	80014e4 <__gedf2+0x68>
 8001512:	454f      	cmp	r7, r9
 8001514:	d8d7      	bhi.n	80014c6 <__gedf2+0x4a>
 8001516:	d00e      	beq.n	8001536 <__gedf2+0xba>
 8001518:	2000      	movs	r0, #0
 800151a:	454f      	cmp	r7, r9
 800151c:	d2d7      	bcs.n	80014ce <__gedf2+0x52>
 800151e:	2900      	cmp	r1, #0
 8001520:	d0e2      	beq.n	80014e8 <__gedf2+0x6c>
 8001522:	0008      	movs	r0, r1
 8001524:	e7d3      	b.n	80014ce <__gedf2+0x52>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7ce      	b.n	80014ce <__gedf2+0x52>
 8001530:	2002      	movs	r0, #2
 8001532:	4240      	negs	r0, r0
 8001534:	e7cb      	b.n	80014ce <__gedf2+0x52>
 8001536:	45c4      	cmp	ip, r8
 8001538:	d8c5      	bhi.n	80014c6 <__gedf2+0x4a>
 800153a:	2000      	movs	r0, #0
 800153c:	45c4      	cmp	ip, r8
 800153e:	d2c6      	bcs.n	80014ce <__gedf2+0x52>
 8001540:	e7ed      	b.n	800151e <__gedf2+0xa2>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff

08001548 <__ledf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	4647      	mov	r7, r8
 800154c:	46ce      	mov	lr, r9
 800154e:	0004      	movs	r4, r0
 8001550:	0018      	movs	r0, r3
 8001552:	0016      	movs	r6, r2
 8001554:	031b      	lsls	r3, r3, #12
 8001556:	0b1b      	lsrs	r3, r3, #12
 8001558:	4d2c      	ldr	r5, [pc, #176]	; (800160c <__ledf2+0xc4>)
 800155a:	004a      	lsls	r2, r1, #1
 800155c:	4699      	mov	r9, r3
 800155e:	b580      	push	{r7, lr}
 8001560:	0043      	lsls	r3, r0, #1
 8001562:	030f      	lsls	r7, r1, #12
 8001564:	46a4      	mov	ip, r4
 8001566:	46b0      	mov	r8, r6
 8001568:	0b3f      	lsrs	r7, r7, #12
 800156a:	0d52      	lsrs	r2, r2, #21
 800156c:	0fc9      	lsrs	r1, r1, #31
 800156e:	0d5b      	lsrs	r3, r3, #21
 8001570:	0fc0      	lsrs	r0, r0, #31
 8001572:	42aa      	cmp	r2, r5
 8001574:	d00d      	beq.n	8001592 <__ledf2+0x4a>
 8001576:	42ab      	cmp	r3, r5
 8001578:	d010      	beq.n	800159c <__ledf2+0x54>
 800157a:	2a00      	cmp	r2, #0
 800157c:	d127      	bne.n	80015ce <__ledf2+0x86>
 800157e:	433c      	orrs	r4, r7
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <__ledf2+0x60>
 8001584:	464d      	mov	r5, r9
 8001586:	432e      	orrs	r6, r5
 8001588:	d10e      	bne.n	80015a8 <__ledf2+0x60>
 800158a:	2000      	movs	r0, #0
 800158c:	2c00      	cmp	r4, #0
 800158e:	d015      	beq.n	80015bc <__ledf2+0x74>
 8001590:	e00e      	b.n	80015b0 <__ledf2+0x68>
 8001592:	003d      	movs	r5, r7
 8001594:	4325      	orrs	r5, r4
 8001596:	d110      	bne.n	80015ba <__ledf2+0x72>
 8001598:	4293      	cmp	r3, r2
 800159a:	d118      	bne.n	80015ce <__ledf2+0x86>
 800159c:	464d      	mov	r5, r9
 800159e:	432e      	orrs	r6, r5
 80015a0:	d10b      	bne.n	80015ba <__ledf2+0x72>
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <__ledf2+0x64>
 80015a6:	433c      	orrs	r4, r7
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d00b      	beq.n	80015c4 <__ledf2+0x7c>
 80015ac:	4281      	cmp	r1, r0
 80015ae:	d014      	beq.n	80015da <__ledf2+0x92>
 80015b0:	2002      	movs	r0, #2
 80015b2:	3901      	subs	r1, #1
 80015b4:	4008      	ands	r0, r1
 80015b6:	3801      	subs	r0, #1
 80015b8:	e000      	b.n	80015bc <__ledf2+0x74>
 80015ba:	2002      	movs	r0, #2
 80015bc:	bcc0      	pop	{r6, r7}
 80015be:	46b9      	mov	r9, r7
 80015c0:	46b0      	mov	r8, r6
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d1f9      	bne.n	80015bc <__ledf2+0x74>
 80015c8:	2001      	movs	r0, #1
 80015ca:	4240      	negs	r0, r0
 80015cc:	e7f6      	b.n	80015bc <__ledf2+0x74>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ec      	bne.n	80015ac <__ledf2+0x64>
 80015d2:	464c      	mov	r4, r9
 80015d4:	4326      	orrs	r6, r4
 80015d6:	d1e9      	bne.n	80015ac <__ledf2+0x64>
 80015d8:	e7ea      	b.n	80015b0 <__ledf2+0x68>
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd04      	ble.n	80015e8 <__ledf2+0xa0>
 80015de:	4243      	negs	r3, r0
 80015e0:	4158      	adcs	r0, r3
 80015e2:	0040      	lsls	r0, r0, #1
 80015e4:	3801      	subs	r0, #1
 80015e6:	e7e9      	b.n	80015bc <__ledf2+0x74>
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbeb      	blt.n	80015c4 <__ledf2+0x7c>
 80015ec:	454f      	cmp	r7, r9
 80015ee:	d8df      	bhi.n	80015b0 <__ledf2+0x68>
 80015f0:	d006      	beq.n	8001600 <__ledf2+0xb8>
 80015f2:	2000      	movs	r0, #0
 80015f4:	454f      	cmp	r7, r9
 80015f6:	d2e1      	bcs.n	80015bc <__ledf2+0x74>
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d0e5      	beq.n	80015c8 <__ledf2+0x80>
 80015fc:	0008      	movs	r0, r1
 80015fe:	e7dd      	b.n	80015bc <__ledf2+0x74>
 8001600:	45c4      	cmp	ip, r8
 8001602:	d8d5      	bhi.n	80015b0 <__ledf2+0x68>
 8001604:	2000      	movs	r0, #0
 8001606:	45c4      	cmp	ip, r8
 8001608:	d2d8      	bcs.n	80015bc <__ledf2+0x74>
 800160a:	e7f5      	b.n	80015f8 <__ledf2+0xb0>
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_dmul>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4645      	mov	r5, r8
 8001614:	46de      	mov	lr, fp
 8001616:	4657      	mov	r7, sl
 8001618:	464e      	mov	r6, r9
 800161a:	b5e0      	push	{r5, r6, r7, lr}
 800161c:	001f      	movs	r7, r3
 800161e:	030b      	lsls	r3, r1, #12
 8001620:	0b1b      	lsrs	r3, r3, #12
 8001622:	469b      	mov	fp, r3
 8001624:	004d      	lsls	r5, r1, #1
 8001626:	0fcb      	lsrs	r3, r1, #31
 8001628:	0004      	movs	r4, r0
 800162a:	4691      	mov	r9, r2
 800162c:	4698      	mov	r8, r3
 800162e:	b087      	sub	sp, #28
 8001630:	0d6d      	lsrs	r5, r5, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x26>
 8001634:	e1cd      	b.n	80019d2 <__aeabi_dmul+0x3c2>
 8001636:	4bce      	ldr	r3, [pc, #824]	; (8001970 <__aeabi_dmul+0x360>)
 8001638:	429d      	cmp	r5, r3
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2e>
 800163c:	e1e9      	b.n	8001a12 <__aeabi_dmul+0x402>
 800163e:	465a      	mov	r2, fp
 8001640:	0f43      	lsrs	r3, r0, #29
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	4313      	orrs	r3, r2
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	00c3      	lsls	r3, r0, #3
 800164e:	469a      	mov	sl, r3
 8001650:	4bc8      	ldr	r3, [pc, #800]	; (8001974 <__aeabi_dmul+0x364>)
 8001652:	4693      	mov	fp, r2
 8001654:	469c      	mov	ip, r3
 8001656:	2300      	movs	r3, #0
 8001658:	2600      	movs	r6, #0
 800165a:	4465      	add	r5, ip
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	033c      	lsls	r4, r7, #12
 8001660:	007b      	lsls	r3, r7, #1
 8001662:	4648      	mov	r0, r9
 8001664:	0b24      	lsrs	r4, r4, #12
 8001666:	0d5b      	lsrs	r3, r3, #21
 8001668:	0fff      	lsrs	r7, r7, #31
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dmul+0x60>
 800166e:	e189      	b.n	8001984 <__aeabi_dmul+0x374>
 8001670:	4abf      	ldr	r2, [pc, #764]	; (8001970 <__aeabi_dmul+0x360>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <__aeabi_dmul+0x9a>
 8001676:	0f42      	lsrs	r2, r0, #29
 8001678:	00e4      	lsls	r4, r4, #3
 800167a:	4322      	orrs	r2, r4
 800167c:	2480      	movs	r4, #128	; 0x80
 800167e:	0424      	lsls	r4, r4, #16
 8001680:	4314      	orrs	r4, r2
 8001682:	4abc      	ldr	r2, [pc, #752]	; (8001974 <__aeabi_dmul+0x364>)
 8001684:	2100      	movs	r1, #0
 8001686:	4694      	mov	ip, r2
 8001688:	4642      	mov	r2, r8
 800168a:	4463      	add	r3, ip
 800168c:	195b      	adds	r3, r3, r5
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	407a      	eors	r2, r7
 8001694:	3301      	adds	r3, #1
 8001696:	00c0      	lsls	r0, r0, #3
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2e0a      	cmp	r6, #10
 800169e:	dd1c      	ble.n	80016da <__aeabi_dmul+0xca>
 80016a0:	003a      	movs	r2, r7
 80016a2:	2e0b      	cmp	r6, #11
 80016a4:	d05e      	beq.n	8001764 <__aeabi_dmul+0x154>
 80016a6:	4647      	mov	r7, r8
 80016a8:	e056      	b.n	8001758 <__aeabi_dmul+0x148>
 80016aa:	4649      	mov	r1, r9
 80016ac:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <__aeabi_dmul+0x360>)
 80016ae:	4321      	orrs	r1, r4
 80016b0:	18eb      	adds	r3, r5, r3
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d12a      	bne.n	800170e <__aeabi_dmul+0xfe>
 80016b8:	2080      	movs	r0, #128	; 0x80
 80016ba:	2202      	movs	r2, #2
 80016bc:	0100      	lsls	r0, r0, #4
 80016be:	002b      	movs	r3, r5
 80016c0:	4684      	mov	ip, r0
 80016c2:	4316      	orrs	r6, r2
 80016c4:	4642      	mov	r2, r8
 80016c6:	4463      	add	r3, ip
 80016c8:	407a      	eors	r2, r7
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2e0a      	cmp	r6, #10
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dmul+0xc4>
 80016d2:	e231      	b.n	8001b38 <__aeabi_dmul+0x528>
 80016d4:	2000      	movs	r0, #0
 80016d6:	2400      	movs	r4, #0
 80016d8:	2102      	movs	r1, #2
 80016da:	2e02      	cmp	r6, #2
 80016dc:	dc26      	bgt.n	800172c <__aeabi_dmul+0x11c>
 80016de:	3e01      	subs	r6, #1
 80016e0:	2e01      	cmp	r6, #1
 80016e2:	d852      	bhi.n	800178a <__aeabi_dmul+0x17a>
 80016e4:	2902      	cmp	r1, #2
 80016e6:	d04c      	beq.n	8001782 <__aeabi_dmul+0x172>
 80016e8:	2901      	cmp	r1, #1
 80016ea:	d000      	beq.n	80016ee <__aeabi_dmul+0xde>
 80016ec:	e118      	b.n	8001920 <__aeabi_dmul+0x310>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2500      	movs	r5, #0
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	4323      	orrs	r3, r4
 80016f8:	07d2      	lsls	r2, r2, #31
 80016fa:	4313      	orrs	r3, r2
 80016fc:	0028      	movs	r0, r5
 80016fe:	0019      	movs	r1, r3
 8001700:	b007      	add	sp, #28
 8001702:	bcf0      	pop	{r4, r5, r6, r7}
 8001704:	46bb      	mov	fp, r7
 8001706:	46b2      	mov	sl, r6
 8001708:	46a9      	mov	r9, r5
 800170a:	46a0      	mov	r8, r4
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	2203      	movs	r2, #3
 8001712:	0109      	lsls	r1, r1, #4
 8001714:	002b      	movs	r3, r5
 8001716:	468c      	mov	ip, r1
 8001718:	4316      	orrs	r6, r2
 800171a:	4642      	mov	r2, r8
 800171c:	4463      	add	r3, ip
 800171e:	407a      	eors	r2, r7
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2e0a      	cmp	r6, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x11a>
 8001728:	e228      	b.n	8001b7c <__aeabi_dmul+0x56c>
 800172a:	2103      	movs	r1, #3
 800172c:	2501      	movs	r5, #1
 800172e:	40b5      	lsls	r5, r6
 8001730:	46ac      	mov	ip, r5
 8001732:	26a6      	movs	r6, #166	; 0xa6
 8001734:	4663      	mov	r3, ip
 8001736:	00f6      	lsls	r6, r6, #3
 8001738:	4035      	ands	r5, r6
 800173a:	4233      	tst	r3, r6
 800173c:	d10b      	bne.n	8001756 <__aeabi_dmul+0x146>
 800173e:	2690      	movs	r6, #144	; 0x90
 8001740:	00b6      	lsls	r6, r6, #2
 8001742:	4233      	tst	r3, r6
 8001744:	d118      	bne.n	8001778 <__aeabi_dmul+0x168>
 8001746:	3eb9      	subs	r6, #185	; 0xb9
 8001748:	3eff      	subs	r6, #255	; 0xff
 800174a:	421e      	tst	r6, r3
 800174c:	d01d      	beq.n	800178a <__aeabi_dmul+0x17a>
 800174e:	46a3      	mov	fp, r4
 8001750:	4682      	mov	sl, r0
 8001752:	9100      	str	r1, [sp, #0]
 8001754:	e000      	b.n	8001758 <__aeabi_dmul+0x148>
 8001756:	0017      	movs	r7, r2
 8001758:	9900      	ldr	r1, [sp, #0]
 800175a:	003a      	movs	r2, r7
 800175c:	2902      	cmp	r1, #2
 800175e:	d010      	beq.n	8001782 <__aeabi_dmul+0x172>
 8001760:	465c      	mov	r4, fp
 8001762:	4650      	mov	r0, sl
 8001764:	2903      	cmp	r1, #3
 8001766:	d1bf      	bne.n	80016e8 <__aeabi_dmul+0xd8>
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	431c      	orrs	r4, r3
 800176e:	0324      	lsls	r4, r4, #12
 8001770:	0005      	movs	r5, r0
 8001772:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <__aeabi_dmul+0x360>)
 8001774:	0b24      	lsrs	r4, r4, #12
 8001776:	e7bd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001778:	2480      	movs	r4, #128	; 0x80
 800177a:	2200      	movs	r2, #0
 800177c:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <__aeabi_dmul+0x360>)
 800177e:	0324      	lsls	r4, r4, #12
 8001780:	e7b8      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001782:	2400      	movs	r4, #0
 8001784:	2500      	movs	r5, #0
 8001786:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <__aeabi_dmul+0x360>)
 8001788:	e7b4      	b.n	80016f4 <__aeabi_dmul+0xe4>
 800178a:	4653      	mov	r3, sl
 800178c:	041e      	lsls	r6, r3, #16
 800178e:	0c36      	lsrs	r6, r6, #16
 8001790:	0c1f      	lsrs	r7, r3, #16
 8001792:	0033      	movs	r3, r6
 8001794:	0c01      	lsrs	r1, r0, #16
 8001796:	0400      	lsls	r0, r0, #16
 8001798:	0c00      	lsrs	r0, r0, #16
 800179a:	4343      	muls	r3, r0
 800179c:	4698      	mov	r8, r3
 800179e:	0003      	movs	r3, r0
 80017a0:	437b      	muls	r3, r7
 80017a2:	4699      	mov	r9, r3
 80017a4:	0033      	movs	r3, r6
 80017a6:	434b      	muls	r3, r1
 80017a8:	469c      	mov	ip, r3
 80017aa:	4643      	mov	r3, r8
 80017ac:	000d      	movs	r5, r1
 80017ae:	0c1b      	lsrs	r3, r3, #16
 80017b0:	469a      	mov	sl, r3
 80017b2:	437d      	muls	r5, r7
 80017b4:	44cc      	add	ip, r9
 80017b6:	44d4      	add	ip, sl
 80017b8:	9500      	str	r5, [sp, #0]
 80017ba:	45e1      	cmp	r9, ip
 80017bc:	d904      	bls.n	80017c8 <__aeabi_dmul+0x1b8>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4699      	mov	r9, r3
 80017c4:	444d      	add	r5, r9
 80017c6:	9500      	str	r5, [sp, #0]
 80017c8:	4663      	mov	r3, ip
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	001d      	movs	r5, r3
 80017ce:	4663      	mov	r3, ip
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	469c      	mov	ip, r3
 80017d4:	4643      	mov	r3, r8
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	4698      	mov	r8, r3
 80017dc:	4663      	mov	r3, ip
 80017de:	4443      	add	r3, r8
 80017e0:	9303      	str	r3, [sp, #12]
 80017e2:	0c23      	lsrs	r3, r4, #16
 80017e4:	4698      	mov	r8, r3
 80017e6:	0033      	movs	r3, r6
 80017e8:	0424      	lsls	r4, r4, #16
 80017ea:	0c24      	lsrs	r4, r4, #16
 80017ec:	4363      	muls	r3, r4
 80017ee:	469c      	mov	ip, r3
 80017f0:	0023      	movs	r3, r4
 80017f2:	437b      	muls	r3, r7
 80017f4:	4699      	mov	r9, r3
 80017f6:	4643      	mov	r3, r8
 80017f8:	435e      	muls	r6, r3
 80017fa:	435f      	muls	r7, r3
 80017fc:	444e      	add	r6, r9
 80017fe:	4663      	mov	r3, ip
 8001800:	46b2      	mov	sl, r6
 8001802:	0c1e      	lsrs	r6, r3, #16
 8001804:	4456      	add	r6, sl
 8001806:	45b1      	cmp	r9, r6
 8001808:	d903      	bls.n	8001812 <__aeabi_dmul+0x202>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4699      	mov	r9, r3
 8001810:	444f      	add	r7, r9
 8001812:	0c33      	lsrs	r3, r6, #16
 8001814:	4699      	mov	r9, r3
 8001816:	003b      	movs	r3, r7
 8001818:	444b      	add	r3, r9
 800181a:	9305      	str	r3, [sp, #20]
 800181c:	4663      	mov	r3, ip
 800181e:	46ac      	mov	ip, r5
 8001820:	041f      	lsls	r7, r3, #16
 8001822:	0c3f      	lsrs	r7, r7, #16
 8001824:	0436      	lsls	r6, r6, #16
 8001826:	19f6      	adds	r6, r6, r7
 8001828:	44b4      	add	ip, r6
 800182a:	4663      	mov	r3, ip
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	465b      	mov	r3, fp
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	465b      	mov	r3, fp
 8001836:	041f      	lsls	r7, r3, #16
 8001838:	0c3f      	lsrs	r7, r7, #16
 800183a:	003b      	movs	r3, r7
 800183c:	4343      	muls	r3, r0
 800183e:	4699      	mov	r9, r3
 8001840:	4663      	mov	r3, ip
 8001842:	4343      	muls	r3, r0
 8001844:	469a      	mov	sl, r3
 8001846:	464b      	mov	r3, r9
 8001848:	4660      	mov	r0, ip
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	469b      	mov	fp, r3
 800184e:	4348      	muls	r0, r1
 8001850:	4379      	muls	r1, r7
 8001852:	4451      	add	r1, sl
 8001854:	4459      	add	r1, fp
 8001856:	458a      	cmp	sl, r1
 8001858:	d903      	bls.n	8001862 <__aeabi_dmul+0x252>
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	469a      	mov	sl, r3
 8001860:	4450      	add	r0, sl
 8001862:	0c0b      	lsrs	r3, r1, #16
 8001864:	469a      	mov	sl, r3
 8001866:	464b      	mov	r3, r9
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	4699      	mov	r9, r3
 800186e:	003b      	movs	r3, r7
 8001870:	4363      	muls	r3, r4
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	4645      	mov	r5, r8
 8001876:	4449      	add	r1, r9
 8001878:	4699      	mov	r9, r3
 800187a:	4663      	mov	r3, ip
 800187c:	435c      	muls	r4, r3
 800187e:	436b      	muls	r3, r5
 8001880:	469c      	mov	ip, r3
 8001882:	464b      	mov	r3, r9
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	4698      	mov	r8, r3
 8001888:	436f      	muls	r7, r5
 800188a:	193f      	adds	r7, r7, r4
 800188c:	4447      	add	r7, r8
 800188e:	4450      	add	r0, sl
 8001890:	42bc      	cmp	r4, r7
 8001892:	d903      	bls.n	800189c <__aeabi_dmul+0x28c>
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	4698      	mov	r8, r3
 800189a:	44c4      	add	ip, r8
 800189c:	9b04      	ldr	r3, [sp, #16]
 800189e:	9d00      	ldr	r5, [sp, #0]
 80018a0:	4698      	mov	r8, r3
 80018a2:	4445      	add	r5, r8
 80018a4:	42b5      	cmp	r5, r6
 80018a6:	41b6      	sbcs	r6, r6
 80018a8:	4273      	negs	r3, r6
 80018aa:	4698      	mov	r8, r3
 80018ac:	464b      	mov	r3, r9
 80018ae:	041e      	lsls	r6, r3, #16
 80018b0:	9b05      	ldr	r3, [sp, #20]
 80018b2:	043c      	lsls	r4, r7, #16
 80018b4:	4699      	mov	r9, r3
 80018b6:	0c36      	lsrs	r6, r6, #16
 80018b8:	19a4      	adds	r4, r4, r6
 80018ba:	444c      	add	r4, r9
 80018bc:	46a1      	mov	r9, r4
 80018be:	4683      	mov	fp, r0
 80018c0:	186e      	adds	r6, r5, r1
 80018c2:	44c1      	add	r9, r8
 80018c4:	428e      	cmp	r6, r1
 80018c6:	4189      	sbcs	r1, r1
 80018c8:	44cb      	add	fp, r9
 80018ca:	465d      	mov	r5, fp
 80018cc:	4249      	negs	r1, r1
 80018ce:	186d      	adds	r5, r5, r1
 80018d0:	429c      	cmp	r4, r3
 80018d2:	41a4      	sbcs	r4, r4
 80018d4:	45c1      	cmp	r9, r8
 80018d6:	419b      	sbcs	r3, r3
 80018d8:	4583      	cmp	fp, r0
 80018da:	4180      	sbcs	r0, r0
 80018dc:	428d      	cmp	r5, r1
 80018de:	4189      	sbcs	r1, r1
 80018e0:	425b      	negs	r3, r3
 80018e2:	4264      	negs	r4, r4
 80018e4:	431c      	orrs	r4, r3
 80018e6:	4240      	negs	r0, r0
 80018e8:	9b03      	ldr	r3, [sp, #12]
 80018ea:	4249      	negs	r1, r1
 80018ec:	4301      	orrs	r1, r0
 80018ee:	0270      	lsls	r0, r6, #9
 80018f0:	0c3f      	lsrs	r7, r7, #16
 80018f2:	4318      	orrs	r0, r3
 80018f4:	19e4      	adds	r4, r4, r7
 80018f6:	1e47      	subs	r7, r0, #1
 80018f8:	41b8      	sbcs	r0, r7
 80018fa:	1864      	adds	r4, r4, r1
 80018fc:	4464      	add	r4, ip
 80018fe:	0df6      	lsrs	r6, r6, #23
 8001900:	0261      	lsls	r1, r4, #9
 8001902:	4330      	orrs	r0, r6
 8001904:	0dec      	lsrs	r4, r5, #23
 8001906:	026e      	lsls	r6, r5, #9
 8001908:	430c      	orrs	r4, r1
 800190a:	4330      	orrs	r0, r6
 800190c:	01c9      	lsls	r1, r1, #7
 800190e:	d400      	bmi.n	8001912 <__aeabi_dmul+0x302>
 8001910:	e0f1      	b.n	8001af6 <__aeabi_dmul+0x4e6>
 8001912:	2101      	movs	r1, #1
 8001914:	0843      	lsrs	r3, r0, #1
 8001916:	4001      	ands	r1, r0
 8001918:	430b      	orrs	r3, r1
 800191a:	07e0      	lsls	r0, r4, #31
 800191c:	4318      	orrs	r0, r3
 800191e:	0864      	lsrs	r4, r4, #1
 8001920:	4915      	ldr	r1, [pc, #84]	; (8001978 <__aeabi_dmul+0x368>)
 8001922:	9b02      	ldr	r3, [sp, #8]
 8001924:	468c      	mov	ip, r1
 8001926:	4463      	add	r3, ip
 8001928:	2b00      	cmp	r3, #0
 800192a:	dc00      	bgt.n	800192e <__aeabi_dmul+0x31e>
 800192c:	e097      	b.n	8001a5e <__aeabi_dmul+0x44e>
 800192e:	0741      	lsls	r1, r0, #29
 8001930:	d009      	beq.n	8001946 <__aeabi_dmul+0x336>
 8001932:	210f      	movs	r1, #15
 8001934:	4001      	ands	r1, r0
 8001936:	2904      	cmp	r1, #4
 8001938:	d005      	beq.n	8001946 <__aeabi_dmul+0x336>
 800193a:	1d01      	adds	r1, r0, #4
 800193c:	4281      	cmp	r1, r0
 800193e:	4180      	sbcs	r0, r0
 8001940:	4240      	negs	r0, r0
 8001942:	1824      	adds	r4, r4, r0
 8001944:	0008      	movs	r0, r1
 8001946:	01e1      	lsls	r1, r4, #7
 8001948:	d506      	bpl.n	8001958 <__aeabi_dmul+0x348>
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	00c9      	lsls	r1, r1, #3
 800194e:	468c      	mov	ip, r1
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <__aeabi_dmul+0x36c>)
 8001952:	401c      	ands	r4, r3
 8001954:	9b02      	ldr	r3, [sp, #8]
 8001956:	4463      	add	r3, ip
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <__aeabi_dmul+0x370>)
 800195a:	428b      	cmp	r3, r1
 800195c:	dd00      	ble.n	8001960 <__aeabi_dmul+0x350>
 800195e:	e710      	b.n	8001782 <__aeabi_dmul+0x172>
 8001960:	0761      	lsls	r1, r4, #29
 8001962:	08c5      	lsrs	r5, r0, #3
 8001964:	0264      	lsls	r4, r4, #9
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	430d      	orrs	r5, r1
 800196a:	0b24      	lsrs	r4, r4, #12
 800196c:	0d5b      	lsrs	r3, r3, #21
 800196e:	e6c1      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001970:	000007ff 	.word	0x000007ff
 8001974:	fffffc01 	.word	0xfffffc01
 8001978:	000003ff 	.word	0x000003ff
 800197c:	feffffff 	.word	0xfeffffff
 8001980:	000007fe 	.word	0x000007fe
 8001984:	464b      	mov	r3, r9
 8001986:	4323      	orrs	r3, r4
 8001988:	d059      	beq.n	8001a3e <__aeabi_dmul+0x42e>
 800198a:	2c00      	cmp	r4, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dmul+0x380>
 800198e:	e0a3      	b.n	8001ad8 <__aeabi_dmul+0x4c8>
 8001990:	0020      	movs	r0, r4
 8001992:	f000 fdb1 	bl	80024f8 <__clzsi2>
 8001996:	0001      	movs	r1, r0
 8001998:	0003      	movs	r3, r0
 800199a:	390b      	subs	r1, #11
 800199c:	221d      	movs	r2, #29
 800199e:	1a52      	subs	r2, r2, r1
 80019a0:	4649      	mov	r1, r9
 80019a2:	0018      	movs	r0, r3
 80019a4:	40d1      	lsrs	r1, r2
 80019a6:	464a      	mov	r2, r9
 80019a8:	3808      	subs	r0, #8
 80019aa:	4082      	lsls	r2, r0
 80019ac:	4084      	lsls	r4, r0
 80019ae:	0010      	movs	r0, r2
 80019b0:	430c      	orrs	r4, r1
 80019b2:	4a74      	ldr	r2, [pc, #464]	; (8001b84 <__aeabi_dmul+0x574>)
 80019b4:	1aeb      	subs	r3, r5, r3
 80019b6:	4694      	mov	ip, r2
 80019b8:	4642      	mov	r2, r8
 80019ba:	4463      	add	r3, ip
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	407a      	eors	r2, r7
 80019c2:	3301      	adds	r3, #1
 80019c4:	2100      	movs	r1, #0
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2e0a      	cmp	r6, #10
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dmul+0x3c0>
 80019ce:	e667      	b.n	80016a0 <__aeabi_dmul+0x90>
 80019d0:	e683      	b.n	80016da <__aeabi_dmul+0xca>
 80019d2:	465b      	mov	r3, fp
 80019d4:	4303      	orrs	r3, r0
 80019d6:	469a      	mov	sl, r3
 80019d8:	d02a      	beq.n	8001a30 <__aeabi_dmul+0x420>
 80019da:	465b      	mov	r3, fp
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d06d      	beq.n	8001abc <__aeabi_dmul+0x4ac>
 80019e0:	4658      	mov	r0, fp
 80019e2:	f000 fd89 	bl	80024f8 <__clzsi2>
 80019e6:	0001      	movs	r1, r0
 80019e8:	0003      	movs	r3, r0
 80019ea:	390b      	subs	r1, #11
 80019ec:	221d      	movs	r2, #29
 80019ee:	1a52      	subs	r2, r2, r1
 80019f0:	0021      	movs	r1, r4
 80019f2:	0018      	movs	r0, r3
 80019f4:	465d      	mov	r5, fp
 80019f6:	40d1      	lsrs	r1, r2
 80019f8:	3808      	subs	r0, #8
 80019fa:	4085      	lsls	r5, r0
 80019fc:	000a      	movs	r2, r1
 80019fe:	4084      	lsls	r4, r0
 8001a00:	432a      	orrs	r2, r5
 8001a02:	4693      	mov	fp, r2
 8001a04:	46a2      	mov	sl, r4
 8001a06:	4d5f      	ldr	r5, [pc, #380]	; (8001b84 <__aeabi_dmul+0x574>)
 8001a08:	2600      	movs	r6, #0
 8001a0a:	1aed      	subs	r5, r5, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	e625      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a12:	465b      	mov	r3, fp
 8001a14:	4303      	orrs	r3, r0
 8001a16:	469a      	mov	sl, r3
 8001a18:	d105      	bne.n	8001a26 <__aeabi_dmul+0x416>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	469b      	mov	fp, r3
 8001a1e:	3302      	adds	r3, #2
 8001a20:	2608      	movs	r6, #8
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	e61b      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a26:	2303      	movs	r3, #3
 8001a28:	4682      	mov	sl, r0
 8001a2a:	260c      	movs	r6, #12
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	e616      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a30:	2300      	movs	r3, #0
 8001a32:	469b      	mov	fp, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	2604      	movs	r6, #4
 8001a38:	2500      	movs	r5, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e60f      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a3e:	4642      	mov	r2, r8
 8001a40:	3301      	adds	r3, #1
 8001a42:	9501      	str	r5, [sp, #4]
 8001a44:	431e      	orrs	r6, r3
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	407a      	eors	r2, r7
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2e0a      	cmp	r6, #10
 8001a58:	dd00      	ble.n	8001a5c <__aeabi_dmul+0x44c>
 8001a5a:	e621      	b.n	80016a0 <__aeabi_dmul+0x90>
 8001a5c:	e63d      	b.n	80016da <__aeabi_dmul+0xca>
 8001a5e:	2101      	movs	r1, #1
 8001a60:	1ac9      	subs	r1, r1, r3
 8001a62:	2938      	cmp	r1, #56	; 0x38
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x458>
 8001a66:	e642      	b.n	80016ee <__aeabi_dmul+0xde>
 8001a68:	291f      	cmp	r1, #31
 8001a6a:	dd47      	ble.n	8001afc <__aeabi_dmul+0x4ec>
 8001a6c:	261f      	movs	r6, #31
 8001a6e:	0025      	movs	r5, r4
 8001a70:	4276      	negs	r6, r6
 8001a72:	1af3      	subs	r3, r6, r3
 8001a74:	40dd      	lsrs	r5, r3
 8001a76:	002b      	movs	r3, r5
 8001a78:	2920      	cmp	r1, #32
 8001a7a:	d005      	beq.n	8001a88 <__aeabi_dmul+0x478>
 8001a7c:	4942      	ldr	r1, [pc, #264]	; (8001b88 <__aeabi_dmul+0x578>)
 8001a7e:	9d02      	ldr	r5, [sp, #8]
 8001a80:	468c      	mov	ip, r1
 8001a82:	4465      	add	r5, ip
 8001a84:	40ac      	lsls	r4, r5
 8001a86:	4320      	orrs	r0, r4
 8001a88:	1e41      	subs	r1, r0, #1
 8001a8a:	4188      	sbcs	r0, r1
 8001a8c:	4318      	orrs	r0, r3
 8001a8e:	2307      	movs	r3, #7
 8001a90:	001d      	movs	r5, r3
 8001a92:	2400      	movs	r4, #0
 8001a94:	4005      	ands	r5, r0
 8001a96:	4203      	tst	r3, r0
 8001a98:	d04a      	beq.n	8001b30 <__aeabi_dmul+0x520>
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d042      	beq.n	8001b2a <__aeabi_dmul+0x51a>
 8001aa4:	1d03      	adds	r3, r0, #4
 8001aa6:	4283      	cmp	r3, r0
 8001aa8:	4180      	sbcs	r0, r0
 8001aaa:	4240      	negs	r0, r0
 8001aac:	1824      	adds	r4, r4, r0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	0223      	lsls	r3, r4, #8
 8001ab2:	d53a      	bpl.n	8001b2a <__aeabi_dmul+0x51a>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	2500      	movs	r5, #0
 8001aba:	e61b      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001abc:	f000 fd1c 	bl	80024f8 <__clzsi2>
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	3115      	adds	r1, #21
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	291c      	cmp	r1, #28
 8001aca:	dd8f      	ble.n	80019ec <__aeabi_dmul+0x3dc>
 8001acc:	3808      	subs	r0, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4084      	lsls	r4, r0
 8001ad2:	4692      	mov	sl, r2
 8001ad4:	46a3      	mov	fp, r4
 8001ad6:	e796      	b.n	8001a06 <__aeabi_dmul+0x3f6>
 8001ad8:	f000 fd0e 	bl	80024f8 <__clzsi2>
 8001adc:	0001      	movs	r1, r0
 8001ade:	0003      	movs	r3, r0
 8001ae0:	3115      	adds	r1, #21
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	291c      	cmp	r1, #28
 8001ae6:	dc00      	bgt.n	8001aea <__aeabi_dmul+0x4da>
 8001ae8:	e758      	b.n	800199c <__aeabi_dmul+0x38c>
 8001aea:	0002      	movs	r2, r0
 8001aec:	464c      	mov	r4, r9
 8001aee:	3a08      	subs	r2, #8
 8001af0:	2000      	movs	r0, #0
 8001af2:	4094      	lsls	r4, r2
 8001af4:	e75d      	b.n	80019b2 <__aeabi_dmul+0x3a2>
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	e711      	b.n	8001920 <__aeabi_dmul+0x310>
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <__aeabi_dmul+0x57c>)
 8001afe:	0026      	movs	r6, r4
 8001b00:	469c      	mov	ip, r3
 8001b02:	0003      	movs	r3, r0
 8001b04:	9d02      	ldr	r5, [sp, #8]
 8001b06:	40cb      	lsrs	r3, r1
 8001b08:	4465      	add	r5, ip
 8001b0a:	40ae      	lsls	r6, r5
 8001b0c:	431e      	orrs	r6, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	40ab      	lsls	r3, r5
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	4183      	sbcs	r3, r0
 8001b16:	0030      	movs	r0, r6
 8001b18:	4318      	orrs	r0, r3
 8001b1a:	40cc      	lsrs	r4, r1
 8001b1c:	0743      	lsls	r3, r0, #29
 8001b1e:	d0c7      	beq.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b20:	230f      	movs	r3, #15
 8001b22:	4003      	ands	r3, r0
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d1bd      	bne.n	8001aa4 <__aeabi_dmul+0x494>
 8001b28:	e7c2      	b.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b2a:	0765      	lsls	r5, r4, #29
 8001b2c:	0264      	lsls	r4, r4, #9
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	08c0      	lsrs	r0, r0, #3
 8001b32:	2300      	movs	r3, #0
 8001b34:	4305      	orrs	r5, r0
 8001b36:	e5dd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b38:	2500      	movs	r5, #0
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	2e0f      	cmp	r6, #15
 8001b3e:	d10c      	bne.n	8001b5a <__aeabi_dmul+0x54a>
 8001b40:	2480      	movs	r4, #128	; 0x80
 8001b42:	465b      	mov	r3, fp
 8001b44:	0324      	lsls	r4, r4, #12
 8001b46:	4223      	tst	r3, r4
 8001b48:	d00e      	beq.n	8001b68 <__aeabi_dmul+0x558>
 8001b4a:	4221      	tst	r1, r4
 8001b4c:	d10c      	bne.n	8001b68 <__aeabi_dmul+0x558>
 8001b4e:	430c      	orrs	r4, r1
 8001b50:	0324      	lsls	r4, r4, #12
 8001b52:	003a      	movs	r2, r7
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b56:	0b24      	lsrs	r4, r4, #12
 8001b58:	e5cc      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b5a:	2e0b      	cmp	r6, #11
 8001b5c:	d000      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b5e:	e5a2      	b.n	80016a6 <__aeabi_dmul+0x96>
 8001b60:	468b      	mov	fp, r1
 8001b62:	46aa      	mov	sl, r5
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	e5f7      	b.n	8001758 <__aeabi_dmul+0x148>
 8001b68:	2480      	movs	r4, #128	; 0x80
 8001b6a:	465b      	mov	r3, fp
 8001b6c:	0324      	lsls	r4, r4, #12
 8001b6e:	431c      	orrs	r4, r3
 8001b70:	0324      	lsls	r4, r4, #12
 8001b72:	4642      	mov	r2, r8
 8001b74:	4655      	mov	r5, sl
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b78:	0b24      	lsrs	r4, r4, #12
 8001b7a:	e5bb      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	0021      	movs	r1, r4
 8001b80:	2303      	movs	r3, #3
 8001b82:	e7db      	b.n	8001b3c <__aeabi_dmul+0x52c>
 8001b84:	fffffc0d 	.word	0xfffffc0d
 8001b88:	0000043e 	.word	0x0000043e
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	000007ff 	.word	0x000007ff

08001b94 <__aeabi_dsub>:
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	4657      	mov	r7, sl
 8001b98:	464e      	mov	r6, r9
 8001b9a:	4645      	mov	r5, r8
 8001b9c:	46de      	mov	lr, fp
 8001b9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ba0:	000d      	movs	r5, r1
 8001ba2:	0004      	movs	r4, r0
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	032b      	lsls	r3, r5, #12
 8001baa:	0a5b      	lsrs	r3, r3, #9
 8001bac:	0f62      	lsrs	r2, r4, #29
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	00e3      	lsls	r3, r4, #3
 8001bb2:	030c      	lsls	r4, r1, #12
 8001bb4:	0a64      	lsrs	r4, r4, #9
 8001bb6:	0f47      	lsrs	r7, r0, #29
 8001bb8:	4327      	orrs	r7, r4
 8001bba:	4cd0      	ldr	r4, [pc, #832]	; (8001efc <__aeabi_dsub+0x368>)
 8001bbc:	006e      	lsls	r6, r5, #1
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	004a      	lsls	r2, r1, #1
 8001bc4:	00c0      	lsls	r0, r0, #3
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	46a2      	mov	sl, r4
 8001bca:	0d76      	lsrs	r6, r6, #21
 8001bcc:	0fed      	lsrs	r5, r5, #31
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	9001      	str	r0, [sp, #4]
 8001bd4:	42a2      	cmp	r2, r4
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x46>
 8001bd8:	e0b9      	b.n	8001d4e <__aeabi_dsub+0x1ba>
 8001bda:	2401      	movs	r4, #1
 8001bdc:	4061      	eors	r1, r4
 8001bde:	468b      	mov	fp, r1
 8001be0:	428d      	cmp	r5, r1
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x52>
 8001be4:	e08d      	b.n	8001d02 <__aeabi_dsub+0x16e>
 8001be6:	1ab4      	subs	r4, r6, r2
 8001be8:	46a4      	mov	ip, r4
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_dsub+0x5c>
 8001bee:	e0b7      	b.n	8001d60 <__aeabi_dsub+0x1cc>
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x62>
 8001bf4:	e0cb      	b.n	8001d8e <__aeabi_dsub+0x1fa>
 8001bf6:	4ac1      	ldr	r2, [pc, #772]	; (8001efc <__aeabi_dsub+0x368>)
 8001bf8:	4296      	cmp	r6, r2
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x6a>
 8001bfc:	e186      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	0412      	lsls	r2, r2, #16
 8001c02:	4317      	orrs	r7, r2
 8001c04:	4662      	mov	r2, ip
 8001c06:	2a38      	cmp	r2, #56	; 0x38
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x78>
 8001c0a:	e1a4      	b.n	8001f56 <__aeabi_dsub+0x3c2>
 8001c0c:	2a1f      	cmp	r2, #31
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dsub+0x7e>
 8001c10:	e21d      	b.n	800204e <__aeabi_dsub+0x4ba>
 8001c12:	4661      	mov	r1, ip
 8001c14:	2220      	movs	r2, #32
 8001c16:	003c      	movs	r4, r7
 8001c18:	1a52      	subs	r2, r2, r1
 8001c1a:	0001      	movs	r1, r0
 8001c1c:	4090      	lsls	r0, r2
 8001c1e:	4094      	lsls	r4, r2
 8001c20:	1e42      	subs	r2, r0, #1
 8001c22:	4190      	sbcs	r0, r2
 8001c24:	4662      	mov	r2, ip
 8001c26:	46a0      	mov	r8, r4
 8001c28:	4664      	mov	r4, ip
 8001c2a:	40d7      	lsrs	r7, r2
 8001c2c:	464a      	mov	r2, r9
 8001c2e:	40e1      	lsrs	r1, r4
 8001c30:	4644      	mov	r4, r8
 8001c32:	1bd2      	subs	r2, r2, r7
 8001c34:	4691      	mov	r9, r2
 8001c36:	430c      	orrs	r4, r1
 8001c38:	4304      	orrs	r4, r0
 8001c3a:	1b1c      	subs	r4, r3, r4
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	4192      	sbcs	r2, r2
 8001c40:	464b      	mov	r3, r9
 8001c42:	4252      	negs	r2, r2
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	469a      	mov	sl, r3
 8001c48:	4653      	mov	r3, sl
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	d400      	bmi.n	8001c50 <__aeabi_dsub+0xbc>
 8001c4e:	e12b      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001c50:	4653      	mov	r3, sl
 8001c52:	025a      	lsls	r2, r3, #9
 8001c54:	0a53      	lsrs	r3, r2, #9
 8001c56:	469a      	mov	sl, r3
 8001c58:	4653      	mov	r3, sl
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0xcc>
 8001c5e:	e166      	b.n	8001f2e <__aeabi_dsub+0x39a>
 8001c60:	4650      	mov	r0, sl
 8001c62:	f000 fc49 	bl	80024f8 <__clzsi2>
 8001c66:	0003      	movs	r3, r0
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	0020      	movs	r0, r4
 8001c6e:	1ad2      	subs	r2, r2, r3
 8001c70:	4651      	mov	r1, sl
 8001c72:	40d0      	lsrs	r0, r2
 8001c74:	4099      	lsls	r1, r3
 8001c76:	0002      	movs	r2, r0
 8001c78:	409c      	lsls	r4, r3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	429e      	cmp	r6, r3
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_dsub+0xee>
 8001c80:	e164      	b.n	8001f4c <__aeabi_dsub+0x3b8>
 8001c82:	1b9b      	subs	r3, r3, r6
 8001c84:	1c59      	adds	r1, r3, #1
 8001c86:	291f      	cmp	r1, #31
 8001c88:	dd00      	ble.n	8001c8c <__aeabi_dsub+0xf8>
 8001c8a:	e0fe      	b.n	8001e8a <__aeabi_dsub+0x2f6>
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0026      	movs	r6, r4
 8001c92:	1a5b      	subs	r3, r3, r1
 8001c94:	409c      	lsls	r4, r3
 8001c96:	4098      	lsls	r0, r3
 8001c98:	40ce      	lsrs	r6, r1
 8001c9a:	40ca      	lsrs	r2, r1
 8001c9c:	1e63      	subs	r3, r4, #1
 8001c9e:	419c      	sbcs	r4, r3
 8001ca0:	4330      	orrs	r0, r6
 8001ca2:	4692      	mov	sl, r2
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	4304      	orrs	r4, r0
 8001ca8:	0763      	lsls	r3, r4, #29
 8001caa:	d009      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cac:	230f      	movs	r3, #15
 8001cae:	4023      	ands	r3, r4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cb4:	1d23      	adds	r3, r4, #4
 8001cb6:	42a3      	cmp	r3, r4
 8001cb8:	41a4      	sbcs	r4, r4
 8001cba:	4264      	negs	r4, r4
 8001cbc:	44a2      	add	sl, r4
 8001cbe:	001c      	movs	r4, r3
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	d400      	bmi.n	8001cc8 <__aeabi_dsub+0x134>
 8001cc6:	e0f2      	b.n	8001eae <__aeabi_dsub+0x31a>
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <__aeabi_dsub+0x368>)
 8001cca:	3601      	adds	r6, #1
 8001ccc:	429e      	cmp	r6, r3
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x13e>
 8001cd0:	e10f      	b.n	8001ef2 <__aeabi_dsub+0x35e>
 8001cd2:	4653      	mov	r3, sl
 8001cd4:	498a      	ldr	r1, [pc, #552]	; (8001f00 <__aeabi_dsub+0x36c>)
 8001cd6:	08e4      	lsrs	r4, r4, #3
 8001cd8:	400b      	ands	r3, r1
 8001cda:	0019      	movs	r1, r3
 8001cdc:	075b      	lsls	r3, r3, #29
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	0572      	lsls	r2, r6, #21
 8001ce2:	024c      	lsls	r4, r1, #9
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	0d52      	lsrs	r2, r2, #21
 8001ce8:	0512      	lsls	r2, r2, #20
 8001cea:	4322      	orrs	r2, r4
 8001cec:	07ed      	lsls	r5, r5, #31
 8001cee:	432a      	orrs	r2, r5
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf8:	46bb      	mov	fp, r7
 8001cfa:	46b2      	mov	sl, r6
 8001cfc:	46a9      	mov	r9, r5
 8001cfe:	46a0      	mov	r8, r4
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	1ab4      	subs	r4, r6, r2
 8001d04:	46a4      	mov	ip, r4
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	dd59      	ble.n	8001dbe <__aeabi_dsub+0x22a>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x17c>
 8001d0e:	e0b0      	b.n	8001e72 <__aeabi_dsub+0x2de>
 8001d10:	4556      	cmp	r6, sl
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x182>
 8001d14:	e0fa      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0412      	lsls	r2, r2, #16
 8001d1a:	4317      	orrs	r7, r2
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	2a38      	cmp	r2, #56	; 0x38
 8001d20:	dd00      	ble.n	8001d24 <__aeabi_dsub+0x190>
 8001d22:	e0d4      	b.n	8001ece <__aeabi_dsub+0x33a>
 8001d24:	2a1f      	cmp	r2, #31
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dsub+0x196>
 8001d28:	e1c0      	b.n	80020ac <__aeabi_dsub+0x518>
 8001d2a:	0039      	movs	r1, r7
 8001d2c:	3a20      	subs	r2, #32
 8001d2e:	40d1      	lsrs	r1, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	2a20      	cmp	r2, #32
 8001d34:	d006      	beq.n	8001d44 <__aeabi_dsub+0x1b0>
 8001d36:	4664      	mov	r4, ip
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	1b12      	subs	r2, r2, r4
 8001d3c:	003c      	movs	r4, r7
 8001d3e:	4094      	lsls	r4, r2
 8001d40:	4304      	orrs	r4, r0
 8001d42:	9401      	str	r4, [sp, #4]
 8001d44:	9c01      	ldr	r4, [sp, #4]
 8001d46:	1e62      	subs	r2, r4, #1
 8001d48:	4194      	sbcs	r4, r2
 8001d4a:	430c      	orrs	r4, r1
 8001d4c:	e0c3      	b.n	8001ed6 <__aeabi_dsub+0x342>
 8001d4e:	003c      	movs	r4, r7
 8001d50:	4304      	orrs	r4, r0
 8001d52:	d02b      	beq.n	8001dac <__aeabi_dsub+0x218>
 8001d54:	468b      	mov	fp, r1
 8001d56:	428d      	cmp	r5, r1
 8001d58:	d02e      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001d5a:	4c6a      	ldr	r4, [pc, #424]	; (8001f04 <__aeabi_dsub+0x370>)
 8001d5c:	46a4      	mov	ip, r4
 8001d5e:	44b4      	add	ip, r6
 8001d60:	4664      	mov	r4, ip
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d05f      	beq.n	8001e26 <__aeabi_dsub+0x292>
 8001d66:	1b94      	subs	r4, r2, r6
 8001d68:	46a4      	mov	ip, r4
 8001d6a:	2e00      	cmp	r6, #0
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x1dc>
 8001d6e:	e120      	b.n	8001fb2 <__aeabi_dsub+0x41e>
 8001d70:	464c      	mov	r4, r9
 8001d72:	431c      	orrs	r4, r3
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x1e4>
 8001d76:	e1c7      	b.n	8002108 <__aeabi_dsub+0x574>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	1e4c      	subs	r4, r1, #1
 8001d7c:	2901      	cmp	r1, #1
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x1ee>
 8001d80:	e223      	b.n	80021ca <__aeabi_dsub+0x636>
 8001d82:	4d5e      	ldr	r5, [pc, #376]	; (8001efc <__aeabi_dsub+0x368>)
 8001d84:	45ac      	cmp	ip, r5
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x1f6>
 8001d88:	e1d8      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001d8a:	46a4      	mov	ip, r4
 8001d8c:	e11a      	b.n	8001fc4 <__aeabi_dsub+0x430>
 8001d8e:	003a      	movs	r2, r7
 8001d90:	4302      	orrs	r2, r0
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dsub+0x202>
 8001d94:	e0e4      	b.n	8001f60 <__aeabi_dsub+0x3cc>
 8001d96:	0022      	movs	r2, r4
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	2c01      	cmp	r4, #1
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x20c>
 8001d9e:	e1c3      	b.n	8002128 <__aeabi_dsub+0x594>
 8001da0:	4956      	ldr	r1, [pc, #344]	; (8001efc <__aeabi_dsub+0x368>)
 8001da2:	428c      	cmp	r4, r1
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x214>
 8001da6:	e0b1      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001da8:	4694      	mov	ip, r2
 8001daa:	e72b      	b.n	8001c04 <__aeabi_dsub+0x70>
 8001dac:	2401      	movs	r4, #1
 8001dae:	4061      	eors	r1, r4
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d000      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001db6:	e716      	b.n	8001be6 <__aeabi_dsub+0x52>
 8001db8:	4952      	ldr	r1, [pc, #328]	; (8001f04 <__aeabi_dsub+0x370>)
 8001dba:	468c      	mov	ip, r1
 8001dbc:	44b4      	add	ip, r6
 8001dbe:	4664      	mov	r4, ip
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x232>
 8001dc4:	e0d3      	b.n	8001f6e <__aeabi_dsub+0x3da>
 8001dc6:	1b91      	subs	r1, r2, r6
 8001dc8:	468c      	mov	ip, r1
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x23c>
 8001dce:	e15e      	b.n	800208e <__aeabi_dsub+0x4fa>
 8001dd0:	494a      	ldr	r1, [pc, #296]	; (8001efc <__aeabi_dsub+0x368>)
 8001dd2:	428a      	cmp	r2, r1
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x244>
 8001dd6:	e1be      	b.n	8002156 <__aeabi_dsub+0x5c2>
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	464c      	mov	r4, r9
 8001ddc:	0409      	lsls	r1, r1, #16
 8001dde:	430c      	orrs	r4, r1
 8001de0:	46a1      	mov	r9, r4
 8001de2:	4661      	mov	r1, ip
 8001de4:	2938      	cmp	r1, #56	; 0x38
 8001de6:	dd00      	ble.n	8001dea <__aeabi_dsub+0x256>
 8001de8:	e1ba      	b.n	8002160 <__aeabi_dsub+0x5cc>
 8001dea:	291f      	cmp	r1, #31
 8001dec:	dd00      	ble.n	8001df0 <__aeabi_dsub+0x25c>
 8001dee:	e227      	b.n	8002240 <__aeabi_dsub+0x6ac>
 8001df0:	2420      	movs	r4, #32
 8001df2:	1a64      	subs	r4, r4, r1
 8001df4:	4649      	mov	r1, r9
 8001df6:	40a1      	lsls	r1, r4
 8001df8:	001e      	movs	r6, r3
 8001dfa:	4688      	mov	r8, r1
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	40a3      	lsls	r3, r4
 8001e00:	40ce      	lsrs	r6, r1
 8001e02:	4641      	mov	r1, r8
 8001e04:	1e5c      	subs	r4, r3, #1
 8001e06:	41a3      	sbcs	r3, r4
 8001e08:	4331      	orrs	r1, r6
 8001e0a:	4319      	orrs	r1, r3
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	4663      	mov	r3, ip
 8001e10:	4649      	mov	r1, r9
 8001e12:	40d9      	lsrs	r1, r3
 8001e14:	187f      	adds	r7, r7, r1
 8001e16:	1824      	adds	r4, r4, r0
 8001e18:	4284      	cmp	r4, r0
 8001e1a:	419b      	sbcs	r3, r3
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	469a      	mov	sl, r3
 8001e20:	0016      	movs	r6, r2
 8001e22:	44ba      	add	sl, r7
 8001e24:	e05d      	b.n	8001ee2 <__aeabi_dsub+0x34e>
 8001e26:	4c38      	ldr	r4, [pc, #224]	; (8001f08 <__aeabi_dsub+0x374>)
 8001e28:	1c72      	adds	r2, r6, #1
 8001e2a:	4222      	tst	r2, r4
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x29c>
 8001e2e:	e0df      	b.n	8001ff0 <__aeabi_dsub+0x45c>
 8001e30:	464a      	mov	r2, r9
 8001e32:	431a      	orrs	r2, r3
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x2a6>
 8001e38:	e15c      	b.n	80020f4 <__aeabi_dsub+0x560>
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x2ac>
 8001e3e:	e1cf      	b.n	80021e0 <__aeabi_dsub+0x64c>
 8001e40:	003a      	movs	r2, r7
 8001e42:	4302      	orrs	r2, r0
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x2b4>
 8001e46:	e17f      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001e48:	1a1c      	subs	r4, r3, r0
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	42a3      	cmp	r3, r4
 8001e4e:	4189      	sbcs	r1, r1
 8001e50:	1bd2      	subs	r2, r2, r7
 8001e52:	4249      	negs	r1, r1
 8001e54:	1a52      	subs	r2, r2, r1
 8001e56:	4692      	mov	sl, r2
 8001e58:	0212      	lsls	r2, r2, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x2ca>
 8001e5c:	e20a      	b.n	8002274 <__aeabi_dsub+0x6e0>
 8001e5e:	1ac4      	subs	r4, r0, r3
 8001e60:	42a0      	cmp	r0, r4
 8001e62:	4180      	sbcs	r0, r0
 8001e64:	464b      	mov	r3, r9
 8001e66:	4240      	negs	r0, r0
 8001e68:	1aff      	subs	r7, r7, r3
 8001e6a:	1a3b      	subs	r3, r7, r0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	465d      	mov	r5, fp
 8001e70:	e71a      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001e72:	003a      	movs	r2, r7
 8001e74:	4302      	orrs	r2, r0
 8001e76:	d073      	beq.n	8001f60 <__aeabi_dsub+0x3cc>
 8001e78:	0022      	movs	r2, r4
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	2c01      	cmp	r4, #1
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x2ee>
 8001e80:	e0cb      	b.n	800201a <__aeabi_dsub+0x486>
 8001e82:	4554      	cmp	r4, sl
 8001e84:	d042      	beq.n	8001f0c <__aeabi_dsub+0x378>
 8001e86:	4694      	mov	ip, r2
 8001e88:	e748      	b.n	8001d1c <__aeabi_dsub+0x188>
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	3b1f      	subs	r3, #31
 8001e8e:	40d8      	lsrs	r0, r3
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d003      	beq.n	8001e9c <__aeabi_dsub+0x308>
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	1a5b      	subs	r3, r3, r1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	4314      	orrs	r4, r2
 8001e9c:	1e63      	subs	r3, r4, #1
 8001e9e:	419c      	sbcs	r4, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	469a      	mov	sl, r3
 8001ea6:	4304      	orrs	r4, r0
 8001ea8:	0763      	lsls	r3, r4, #29
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x31a>
 8001eac:	e6fe      	b.n	8001cac <__aeabi_dsub+0x118>
 8001eae:	4652      	mov	r2, sl
 8001eb0:	08e3      	lsrs	r3, r4, #3
 8001eb2:	0752      	lsls	r2, r2, #29
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	46b4      	mov	ip, r6
 8001eba:	08d2      	lsrs	r2, r2, #3
 8001ebc:	490f      	ldr	r1, [pc, #60]	; (8001efc <__aeabi_dsub+0x368>)
 8001ebe:	458c      	cmp	ip, r1
 8001ec0:	d02a      	beq.n	8001f18 <__aeabi_dsub+0x384>
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	0b14      	lsrs	r4, r2, #12
 8001ec6:	4662      	mov	r2, ip
 8001ec8:	0552      	lsls	r2, r2, #21
 8001eca:	0d52      	lsrs	r2, r2, #21
 8001ecc:	e70c      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4304      	orrs	r4, r0
 8001ed2:	1e62      	subs	r2, r4, #1
 8001ed4:	4194      	sbcs	r4, r2
 8001ed6:	18e4      	adds	r4, r4, r3
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	4252      	negs	r2, r2
 8001ede:	444a      	add	r2, r9
 8001ee0:	4692      	mov	sl, r2
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	d5df      	bpl.n	8001ea8 <__aeabi_dsub+0x314>
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__aeabi_dsub+0x368>)
 8001eea:	3601      	adds	r6, #1
 8001eec:	429e      	cmp	r6, r3
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x35e>
 8001ef0:	e0a0      	b.n	8002034 <__aeabi_dsub+0x4a0>
 8001ef2:	0032      	movs	r2, r6
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e6f6      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	ff7fffff 	.word	0xff7fffff
 8001f04:	fffff801 	.word	0xfffff801
 8001f08:	000007fe 	.word	0x000007fe
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	464a      	mov	r2, r9
 8001f10:	0752      	lsls	r2, r2, #29
 8001f12:	4313      	orrs	r3, r2
 8001f14:	464a      	mov	r2, r9
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x38c>
 8001f1e:	e1b5      	b.n	800228c <__aeabi_dsub+0x6f8>
 8001f20:	2480      	movs	r4, #128	; 0x80
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4314      	orrs	r4, r2
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	4ad5      	ldr	r2, [pc, #852]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	e6dc      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f000 fae2 	bl	80024f8 <__clzsi2>
 8001f34:	0003      	movs	r3, r0
 8001f36:	3318      	adds	r3, #24
 8001f38:	2b1f      	cmp	r3, #31
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dsub+0x3aa>
 8001f3c:	e695      	b.n	8001c6a <__aeabi_dsub+0xd6>
 8001f3e:	0022      	movs	r2, r4
 8001f40:	3808      	subs	r0, #8
 8001f42:	4082      	lsls	r2, r0
 8001f44:	2400      	movs	r4, #0
 8001f46:	429e      	cmp	r6, r3
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x3b8>
 8001f4a:	e69a      	b.n	8001c82 <__aeabi_dsub+0xee>
 8001f4c:	1af6      	subs	r6, r6, r3
 8001f4e:	4bcd      	ldr	r3, [pc, #820]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001f50:	401a      	ands	r2, r3
 8001f52:	4692      	mov	sl, r2
 8001f54:	e6a8      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001f56:	003c      	movs	r4, r7
 8001f58:	4304      	orrs	r4, r0
 8001f5a:	1e62      	subs	r2, r4, #1
 8001f5c:	4194      	sbcs	r4, r2
 8001f5e:	e66c      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8001f60:	464a      	mov	r2, r9
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	0752      	lsls	r2, r2, #29
 8001f66:	4313      	orrs	r3, r2
 8001f68:	464a      	mov	r2, r9
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	e7a6      	b.n	8001ebc <__aeabi_dsub+0x328>
 8001f6e:	4cc6      	ldr	r4, [pc, #792]	; (8002288 <__aeabi_dsub+0x6f4>)
 8001f70:	1c72      	adds	r2, r6, #1
 8001f72:	4222      	tst	r2, r4
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dsub+0x3e4>
 8001f76:	e0ac      	b.n	80020d2 <__aeabi_dsub+0x53e>
 8001f78:	464a      	mov	r2, r9
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	2e00      	cmp	r6, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x3ee>
 8001f80:	e105      	b.n	800218e <__aeabi_dsub+0x5fa>
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x3f4>
 8001f86:	e156      	b.n	8002236 <__aeabi_dsub+0x6a2>
 8001f88:	003a      	movs	r2, r7
 8001f8a:	4302      	orrs	r2, r0
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x3fc>
 8001f8e:	e0db      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001f90:	181c      	adds	r4, r3, r0
 8001f92:	429c      	cmp	r4, r3
 8001f94:	419b      	sbcs	r3, r3
 8001f96:	444f      	add	r7, r9
 8001f98:	46ba      	mov	sl, r7
 8001f9a:	425b      	negs	r3, r3
 8001f9c:	449a      	add	sl, r3
 8001f9e:	4653      	mov	r3, sl
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	d400      	bmi.n	8001fa6 <__aeabi_dsub+0x412>
 8001fa4:	e780      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	4bb6      	ldr	r3, [pc, #728]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001faa:	2601      	movs	r6, #1
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e77a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fb2:	4cb3      	ldr	r4, [pc, #716]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001fb4:	42a2      	cmp	r2, r4
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x426>
 8001fb8:	e0c0      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001fba:	2480      	movs	r4, #128	; 0x80
 8001fbc:	464d      	mov	r5, r9
 8001fbe:	0424      	lsls	r4, r4, #16
 8001fc0:	4325      	orrs	r5, r4
 8001fc2:	46a9      	mov	r9, r5
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	2c38      	cmp	r4, #56	; 0x38
 8001fc8:	dc53      	bgt.n	8002072 <__aeabi_dsub+0x4de>
 8001fca:	4661      	mov	r1, ip
 8001fcc:	2c1f      	cmp	r4, #31
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0x43e>
 8001fd0:	e0cd      	b.n	800216e <__aeabi_dsub+0x5da>
 8001fd2:	2520      	movs	r5, #32
 8001fd4:	001e      	movs	r6, r3
 8001fd6:	1b2d      	subs	r5, r5, r4
 8001fd8:	464c      	mov	r4, r9
 8001fda:	40ab      	lsls	r3, r5
 8001fdc:	40ac      	lsls	r4, r5
 8001fde:	40ce      	lsrs	r6, r1
 8001fe0:	1e5d      	subs	r5, r3, #1
 8001fe2:	41ab      	sbcs	r3, r5
 8001fe4:	4334      	orrs	r4, r6
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	464c      	mov	r4, r9
 8001fea:	40cc      	lsrs	r4, r1
 8001fec:	1b3f      	subs	r7, r7, r4
 8001fee:	e045      	b.n	800207c <__aeabi_dsub+0x4e8>
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	1a1c      	subs	r4, r3, r0
 8001ff4:	1bd1      	subs	r1, r2, r7
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	4192      	sbcs	r2, r2
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	4692      	mov	sl, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	4651      	mov	r1, sl
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4692      	mov	sl, r2
 8002006:	0212      	lsls	r2, r2, #8
 8002008:	d500      	bpl.n	800200c <__aeabi_dsub+0x478>
 800200a:	e083      	b.n	8002114 <__aeabi_dsub+0x580>
 800200c:	4653      	mov	r3, sl
 800200e:	4323      	orrs	r3, r4
 8002010:	d000      	beq.n	8002014 <__aeabi_dsub+0x480>
 8002012:	e621      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002014:	2200      	movs	r2, #0
 8002016:	2500      	movs	r5, #0
 8002018:	e753      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 800201a:	181c      	adds	r4, r3, r0
 800201c:	429c      	cmp	r4, r3
 800201e:	419b      	sbcs	r3, r3
 8002020:	444f      	add	r7, r9
 8002022:	46ba      	mov	sl, r7
 8002024:	425b      	negs	r3, r3
 8002026:	449a      	add	sl, r3
 8002028:	4653      	mov	r3, sl
 800202a:	2601      	movs	r6, #1
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	d400      	bmi.n	8002032 <__aeabi_dsub+0x49e>
 8002030:	e73a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8002032:	2602      	movs	r6, #2
 8002034:	4652      	mov	r2, sl
 8002036:	4b93      	ldr	r3, [pc, #588]	; (8002284 <__aeabi_dsub+0x6f0>)
 8002038:	2101      	movs	r1, #1
 800203a:	401a      	ands	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	4021      	ands	r1, r4
 8002040:	0862      	lsrs	r2, r4, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	07dc      	lsls	r4, r3, #31
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	469a      	mov	sl, r3
 800204a:	4314      	orrs	r4, r2
 800204c:	e62c      	b.n	8001ca8 <__aeabi_dsub+0x114>
 800204e:	0039      	movs	r1, r7
 8002050:	3a20      	subs	r2, #32
 8002052:	40d1      	lsrs	r1, r2
 8002054:	4662      	mov	r2, ip
 8002056:	2a20      	cmp	r2, #32
 8002058:	d006      	beq.n	8002068 <__aeabi_dsub+0x4d4>
 800205a:	4664      	mov	r4, ip
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	1b12      	subs	r2, r2, r4
 8002060:	003c      	movs	r4, r7
 8002062:	4094      	lsls	r4, r2
 8002064:	4304      	orrs	r4, r0
 8002066:	9401      	str	r4, [sp, #4]
 8002068:	9c01      	ldr	r4, [sp, #4]
 800206a:	1e62      	subs	r2, r4, #1
 800206c:	4194      	sbcs	r4, r2
 800206e:	430c      	orrs	r4, r1
 8002070:	e5e3      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8002072:	4649      	mov	r1, r9
 8002074:	4319      	orrs	r1, r3
 8002076:	000b      	movs	r3, r1
 8002078:	1e5c      	subs	r4, r3, #1
 800207a:	41a3      	sbcs	r3, r4
 800207c:	1ac4      	subs	r4, r0, r3
 800207e:	42a0      	cmp	r0, r4
 8002080:	419b      	sbcs	r3, r3
 8002082:	425b      	negs	r3, r3
 8002084:	1afb      	subs	r3, r7, r3
 8002086:	469a      	mov	sl, r3
 8002088:	465d      	mov	r5, fp
 800208a:	0016      	movs	r6, r2
 800208c:	e5dc      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800208e:	4649      	mov	r1, r9
 8002090:	4319      	orrs	r1, r3
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x502>
 8002094:	e0ae      	b.n	80021f4 <__aeabi_dsub+0x660>
 8002096:	4661      	mov	r1, ip
 8002098:	4664      	mov	r4, ip
 800209a:	3901      	subs	r1, #1
 800209c:	2c01      	cmp	r4, #1
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x50e>
 80020a0:	e0e0      	b.n	8002264 <__aeabi_dsub+0x6d0>
 80020a2:	4c77      	ldr	r4, [pc, #476]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020a4:	45a4      	cmp	ip, r4
 80020a6:	d056      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 80020a8:	468c      	mov	ip, r1
 80020aa:	e69a      	b.n	8001de2 <__aeabi_dsub+0x24e>
 80020ac:	4661      	mov	r1, ip
 80020ae:	2220      	movs	r2, #32
 80020b0:	003c      	movs	r4, r7
 80020b2:	1a52      	subs	r2, r2, r1
 80020b4:	4094      	lsls	r4, r2
 80020b6:	0001      	movs	r1, r0
 80020b8:	4090      	lsls	r0, r2
 80020ba:	46a0      	mov	r8, r4
 80020bc:	4664      	mov	r4, ip
 80020be:	1e42      	subs	r2, r0, #1
 80020c0:	4190      	sbcs	r0, r2
 80020c2:	4662      	mov	r2, ip
 80020c4:	40e1      	lsrs	r1, r4
 80020c6:	4644      	mov	r4, r8
 80020c8:	40d7      	lsrs	r7, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	4304      	orrs	r4, r0
 80020ce:	44b9      	add	r9, r7
 80020d0:	e701      	b.n	8001ed6 <__aeabi_dsub+0x342>
 80020d2:	496b      	ldr	r1, [pc, #428]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020d4:	428a      	cmp	r2, r1
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x546>
 80020d8:	e70c      	b.n	8001ef4 <__aeabi_dsub+0x360>
 80020da:	1818      	adds	r0, r3, r0
 80020dc:	4298      	cmp	r0, r3
 80020de:	419b      	sbcs	r3, r3
 80020e0:	444f      	add	r7, r9
 80020e2:	425b      	negs	r3, r3
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	07dc      	lsls	r4, r3, #31
 80020e8:	0840      	lsrs	r0, r0, #1
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	469a      	mov	sl, r3
 80020ee:	0016      	movs	r6, r2
 80020f0:	4304      	orrs	r4, r0
 80020f2:	e6d9      	b.n	8001ea8 <__aeabi_dsub+0x314>
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x566>
 80020f8:	e081      	b.n	80021fe <__aeabi_dsub+0x66a>
 80020fa:	003b      	movs	r3, r7
 80020fc:	4303      	orrs	r3, r0
 80020fe:	d11d      	bne.n	800213c <__aeabi_dsub+0x5a8>
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	2500      	movs	r5, #0
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	e70b      	b.n	8001f20 <__aeabi_dsub+0x38c>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e6d3      	b.n	8001ebc <__aeabi_dsub+0x328>
 8002114:	1ac4      	subs	r4, r0, r3
 8002116:	42a0      	cmp	r0, r4
 8002118:	4180      	sbcs	r0, r0
 800211a:	464b      	mov	r3, r9
 800211c:	4240      	negs	r0, r0
 800211e:	1aff      	subs	r7, r7, r3
 8002120:	1a3b      	subs	r3, r7, r0
 8002122:	469a      	mov	sl, r3
 8002124:	465d      	mov	r5, fp
 8002126:	e597      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002128:	1a1c      	subs	r4, r3, r0
 800212a:	464a      	mov	r2, r9
 800212c:	42a3      	cmp	r3, r4
 800212e:	419b      	sbcs	r3, r3
 8002130:	1bd7      	subs	r7, r2, r7
 8002132:	425b      	negs	r3, r3
 8002134:	1afb      	subs	r3, r7, r3
 8002136:	469a      	mov	sl, r3
 8002138:	2601      	movs	r6, #1
 800213a:	e585      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800213c:	08c0      	lsrs	r0, r0, #3
 800213e:	077b      	lsls	r3, r7, #29
 8002140:	465d      	mov	r5, fp
 8002142:	4303      	orrs	r3, r0
 8002144:	08fa      	lsrs	r2, r7, #3
 8002146:	e6e7      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002148:	464a      	mov	r2, r9
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4313      	orrs	r3, r2
 8002150:	464a      	mov	r2, r9
 8002152:	08d2      	lsrs	r2, r2, #3
 8002154:	e6b5      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e6db      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002160:	4649      	mov	r1, r9
 8002162:	4319      	orrs	r1, r3
 8002164:	000b      	movs	r3, r1
 8002166:	1e59      	subs	r1, r3, #1
 8002168:	418b      	sbcs	r3, r1
 800216a:	001c      	movs	r4, r3
 800216c:	e653      	b.n	8001e16 <__aeabi_dsub+0x282>
 800216e:	464d      	mov	r5, r9
 8002170:	3c20      	subs	r4, #32
 8002172:	40e5      	lsrs	r5, r4
 8002174:	2920      	cmp	r1, #32
 8002176:	d005      	beq.n	8002184 <__aeabi_dsub+0x5f0>
 8002178:	2440      	movs	r4, #64	; 0x40
 800217a:	1a64      	subs	r4, r4, r1
 800217c:	4649      	mov	r1, r9
 800217e:	40a1      	lsls	r1, r4
 8002180:	430b      	orrs	r3, r1
 8002182:	4698      	mov	r8, r3
 8002184:	4643      	mov	r3, r8
 8002186:	1e5c      	subs	r4, r3, #1
 8002188:	41a3      	sbcs	r3, r4
 800218a:	432b      	orrs	r3, r5
 800218c:	e776      	b.n	800207c <__aeabi_dsub+0x4e8>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d0e1      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 8002192:	003a      	movs	r2, r7
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	4302      	orrs	r2, r0
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x608>
 800219a:	e6b8      	b.n	8001f0e <__aeabi_dsub+0x37a>
 800219c:	464a      	mov	r2, r9
 800219e:	0752      	lsls	r2, r2, #29
 80021a0:	2480      	movs	r4, #128	; 0x80
 80021a2:	4313      	orrs	r3, r2
 80021a4:	464a      	mov	r2, r9
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	08d2      	lsrs	r2, r2, #3
 80021aa:	4222      	tst	r2, r4
 80021ac:	d007      	beq.n	80021be <__aeabi_dsub+0x62a>
 80021ae:	08fe      	lsrs	r6, r7, #3
 80021b0:	4226      	tst	r6, r4
 80021b2:	d104      	bne.n	80021be <__aeabi_dsub+0x62a>
 80021b4:	465d      	mov	r5, fp
 80021b6:	0032      	movs	r2, r6
 80021b8:	08c3      	lsrs	r3, r0, #3
 80021ba:	077f      	lsls	r7, r7, #29
 80021bc:	433b      	orrs	r3, r7
 80021be:	0f59      	lsrs	r1, r3, #29
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	0749      	lsls	r1, r1, #29
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	430b      	orrs	r3, r1
 80021c8:	e6a6      	b.n	8001f18 <__aeabi_dsub+0x384>
 80021ca:	1ac4      	subs	r4, r0, r3
 80021cc:	42a0      	cmp	r0, r4
 80021ce:	4180      	sbcs	r0, r0
 80021d0:	464b      	mov	r3, r9
 80021d2:	4240      	negs	r0, r0
 80021d4:	1aff      	subs	r7, r7, r3
 80021d6:	1a3b      	subs	r3, r7, r0
 80021d8:	469a      	mov	sl, r3
 80021da:	465d      	mov	r5, fp
 80021dc:	2601      	movs	r6, #1
 80021de:	e533      	b.n	8001c48 <__aeabi_dsub+0xb4>
 80021e0:	003b      	movs	r3, r7
 80021e2:	4303      	orrs	r3, r0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x654>
 80021e6:	e715      	b.n	8002014 <__aeabi_dsub+0x480>
 80021e8:	08c0      	lsrs	r0, r0, #3
 80021ea:	077b      	lsls	r3, r7, #29
 80021ec:	465d      	mov	r5, fp
 80021ee:	4303      	orrs	r3, r0
 80021f0:	08fa      	lsrs	r2, r7, #3
 80021f2:	e666      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 80021f4:	08c0      	lsrs	r0, r0, #3
 80021f6:	077b      	lsls	r3, r7, #29
 80021f8:	4303      	orrs	r3, r0
 80021fa:	08fa      	lsrs	r2, r7, #3
 80021fc:	e65e      	b.n	8001ebc <__aeabi_dsub+0x328>
 80021fe:	003a      	movs	r2, r7
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	4302      	orrs	r2, r0
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x674>
 8002206:	e682      	b.n	8001f0e <__aeabi_dsub+0x37a>
 8002208:	464a      	mov	r2, r9
 800220a:	0752      	lsls	r2, r2, #29
 800220c:	2480      	movs	r4, #128	; 0x80
 800220e:	4313      	orrs	r3, r2
 8002210:	464a      	mov	r2, r9
 8002212:	0324      	lsls	r4, r4, #12
 8002214:	08d2      	lsrs	r2, r2, #3
 8002216:	4222      	tst	r2, r4
 8002218:	d007      	beq.n	800222a <__aeabi_dsub+0x696>
 800221a:	08fe      	lsrs	r6, r7, #3
 800221c:	4226      	tst	r6, r4
 800221e:	d104      	bne.n	800222a <__aeabi_dsub+0x696>
 8002220:	465d      	mov	r5, fp
 8002222:	0032      	movs	r2, r6
 8002224:	08c3      	lsrs	r3, r0, #3
 8002226:	077f      	lsls	r7, r7, #29
 8002228:	433b      	orrs	r3, r7
 800222a:	0f59      	lsrs	r1, r3, #29
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	0749      	lsls	r1, r1, #29
 8002232:	430b      	orrs	r3, r1
 8002234:	e670      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002236:	08c0      	lsrs	r0, r0, #3
 8002238:	077b      	lsls	r3, r7, #29
 800223a:	4303      	orrs	r3, r0
 800223c:	08fa      	lsrs	r2, r7, #3
 800223e:	e640      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002240:	464c      	mov	r4, r9
 8002242:	3920      	subs	r1, #32
 8002244:	40cc      	lsrs	r4, r1
 8002246:	4661      	mov	r1, ip
 8002248:	2920      	cmp	r1, #32
 800224a:	d006      	beq.n	800225a <__aeabi_dsub+0x6c6>
 800224c:	4666      	mov	r6, ip
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	1b89      	subs	r1, r1, r6
 8002252:	464e      	mov	r6, r9
 8002254:	408e      	lsls	r6, r1
 8002256:	4333      	orrs	r3, r6
 8002258:	4698      	mov	r8, r3
 800225a:	4643      	mov	r3, r8
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	418b      	sbcs	r3, r1
 8002260:	431c      	orrs	r4, r3
 8002262:	e5d8      	b.n	8001e16 <__aeabi_dsub+0x282>
 8002264:	181c      	adds	r4, r3, r0
 8002266:	4284      	cmp	r4, r0
 8002268:	4180      	sbcs	r0, r0
 800226a:	444f      	add	r7, r9
 800226c:	46ba      	mov	sl, r7
 800226e:	4240      	negs	r0, r0
 8002270:	4482      	add	sl, r0
 8002272:	e6d9      	b.n	8002028 <__aeabi_dsub+0x494>
 8002274:	4653      	mov	r3, sl
 8002276:	4323      	orrs	r3, r4
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x6e8>
 800227a:	e6cb      	b.n	8002014 <__aeabi_dsub+0x480>
 800227c:	e614      	b.n	8001ea8 <__aeabi_dsub+0x314>
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	000007ff 	.word	0x000007ff
 8002284:	ff7fffff 	.word	0xff7fffff
 8002288:	000007fe 	.word	0x000007fe
 800228c:	2300      	movs	r3, #0
 800228e:	4a01      	ldr	r2, [pc, #4]	; (8002294 <__aeabi_dsub+0x700>)
 8002290:	001c      	movs	r4, r3
 8002292:	e529      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8002294:	000007ff 	.word	0x000007ff

08002298 <__aeabi_dcmpun>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	0005      	movs	r5, r0
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <__aeabi_dcmpun+0x38>)
 800229e:	031c      	lsls	r4, r3, #12
 80022a0:	0016      	movs	r6, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	030a      	lsls	r2, r1, #12
 80022a6:	0049      	lsls	r1, r1, #1
 80022a8:	0b12      	lsrs	r2, r2, #12
 80022aa:	0d49      	lsrs	r1, r1, #21
 80022ac:	0b24      	lsrs	r4, r4, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	4281      	cmp	r1, r0
 80022b2:	d008      	beq.n	80022c6 <__aeabi_dcmpun+0x2e>
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <__aeabi_dcmpun+0x38>)
 80022b6:	2000      	movs	r0, #0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022bc:	0020      	movs	r0, r4
 80022be:	4330      	orrs	r0, r6
 80022c0:	1e43      	subs	r3, r0, #1
 80022c2:	4198      	sbcs	r0, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	2001      	movs	r0, #1
 80022c8:	432a      	orrs	r2, r5
 80022ca:	d1fb      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022cc:	e7f2      	b.n	80022b4 <__aeabi_dcmpun+0x1c>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_d2iz>:
 80022d4:	000a      	movs	r2, r1
 80022d6:	b530      	push	{r4, r5, lr}
 80022d8:	4c13      	ldr	r4, [pc, #76]	; (8002328 <__aeabi_d2iz+0x54>)
 80022da:	0053      	lsls	r3, r2, #1
 80022dc:	0309      	lsls	r1, r1, #12
 80022de:	0005      	movs	r5, r0
 80022e0:	0b09      	lsrs	r1, r1, #12
 80022e2:	2000      	movs	r0, #0
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	0fd2      	lsrs	r2, r2, #31
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	dd04      	ble.n	80022f6 <__aeabi_d2iz+0x22>
 80022ec:	480f      	ldr	r0, [pc, #60]	; (800232c <__aeabi_d2iz+0x58>)
 80022ee:	4283      	cmp	r3, r0
 80022f0:	dd02      	ble.n	80022f8 <__aeabi_d2iz+0x24>
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <__aeabi_d2iz+0x5c>)
 80022f4:	18d0      	adds	r0, r2, r3
 80022f6:	bd30      	pop	{r4, r5, pc}
 80022f8:	2080      	movs	r0, #128	; 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4301      	orrs	r1, r0
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <__aeabi_d2iz+0x60>)
 8002300:	1ac0      	subs	r0, r0, r3
 8002302:	281f      	cmp	r0, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x44>
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <__aeabi_d2iz+0x64>)
 8002308:	1ac3      	subs	r3, r0, r3
 800230a:	40d9      	lsrs	r1, r3
 800230c:	000b      	movs	r3, r1
 800230e:	4258      	negs	r0, r3
 8002310:	2a00      	cmp	r2, #0
 8002312:	d1f0      	bne.n	80022f6 <__aeabi_d2iz+0x22>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ee      	b.n	80022f6 <__aeabi_d2iz+0x22>
 8002318:	4c08      	ldr	r4, [pc, #32]	; (800233c <__aeabi_d2iz+0x68>)
 800231a:	40c5      	lsrs	r5, r0
 800231c:	46a4      	mov	ip, r4
 800231e:	4463      	add	r3, ip
 8002320:	4099      	lsls	r1, r3
 8002322:	000b      	movs	r3, r1
 8002324:	432b      	orrs	r3, r5
 8002326:	e7f2      	b.n	800230e <__aeabi_d2iz+0x3a>
 8002328:	000003fe 	.word	0x000003fe
 800232c:	0000041d 	.word	0x0000041d
 8002330:	7fffffff 	.word	0x7fffffff
 8002334:	00000433 	.word	0x00000433
 8002338:	00000413 	.word	0x00000413
 800233c:	fffffbed 	.word	0xfffffbed

08002340 <__aeabi_i2d>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	2800      	cmp	r0, #0
 8002344:	d016      	beq.n	8002374 <__aeabi_i2d+0x34>
 8002346:	17c3      	asrs	r3, r0, #31
 8002348:	18c5      	adds	r5, r0, r3
 800234a:	405d      	eors	r5, r3
 800234c:	0fc4      	lsrs	r4, r0, #31
 800234e:	0028      	movs	r0, r5
 8002350:	f000 f8d2 	bl	80024f8 <__clzsi2>
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <__aeabi_i2d+0x5c>)
 8002356:	1a1b      	subs	r3, r3, r0
 8002358:	280a      	cmp	r0, #10
 800235a:	dc16      	bgt.n	800238a <__aeabi_i2d+0x4a>
 800235c:	0002      	movs	r2, r0
 800235e:	002e      	movs	r6, r5
 8002360:	3215      	adds	r2, #21
 8002362:	4096      	lsls	r6, r2
 8002364:	220b      	movs	r2, #11
 8002366:	1a12      	subs	r2, r2, r0
 8002368:	40d5      	lsrs	r5, r2
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	032d      	lsls	r5, r5, #12
 800236e:	0b2d      	lsrs	r5, r5, #12
 8002370:	0d5b      	lsrs	r3, r3, #21
 8002372:	e003      	b.n	800237c <__aeabi_i2d+0x3c>
 8002374:	2400      	movs	r4, #0
 8002376:	2300      	movs	r3, #0
 8002378:	2500      	movs	r5, #0
 800237a:	2600      	movs	r6, #0
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	432b      	orrs	r3, r5
 8002380:	07e4      	lsls	r4, r4, #31
 8002382:	4323      	orrs	r3, r4
 8002384:	0030      	movs	r0, r6
 8002386:	0019      	movs	r1, r3
 8002388:	bd70      	pop	{r4, r5, r6, pc}
 800238a:	380b      	subs	r0, #11
 800238c:	4085      	lsls	r5, r0
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	032d      	lsls	r5, r5, #12
 8002392:	2600      	movs	r6, #0
 8002394:	0b2d      	lsrs	r5, r5, #12
 8002396:	0d5b      	lsrs	r3, r3, #21
 8002398:	e7f0      	b.n	800237c <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f8a7 	bl	80024f8 <__clzsi2>
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <__aeabi_ui2d+0x48>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	280a      	cmp	r0, #10
 80023b0:	dc11      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b2:	220b      	movs	r2, #11
 80023b4:	0021      	movs	r1, r4
 80023b6:	1a12      	subs	r2, r2, r0
 80023b8:	40d1      	lsrs	r1, r2
 80023ba:	3015      	adds	r0, #21
 80023bc:	030a      	lsls	r2, r1, #12
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	4084      	lsls	r4, r0
 80023c2:	0b12      	lsrs	r2, r2, #12
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	055b      	lsls	r3, r3, #21
 80023de:	0312      	lsls	r2, r2, #12
 80023e0:	2400      	movs	r4, #0
 80023e2:	0b12      	lsrs	r2, r2, #12
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	e7f1      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e8:	0000041e 	.word	0x0000041e

080023ec <__aeabi_d2f>:
 80023ec:	0002      	movs	r2, r0
 80023ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f0:	004b      	lsls	r3, r1, #1
 80023f2:	030d      	lsls	r5, r1, #12
 80023f4:	0f40      	lsrs	r0, r0, #29
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	0fcc      	lsrs	r4, r1, #31
 80023fa:	0a6d      	lsrs	r5, r5, #9
 80023fc:	493a      	ldr	r1, [pc, #232]	; (80024e8 <__aeabi_d2f+0xfc>)
 80023fe:	4305      	orrs	r5, r0
 8002400:	1c58      	adds	r0, r3, #1
 8002402:	00d7      	lsls	r7, r2, #3
 8002404:	4208      	tst	r0, r1
 8002406:	d00a      	beq.n	800241e <__aeabi_d2f+0x32>
 8002408:	4938      	ldr	r1, [pc, #224]	; (80024ec <__aeabi_d2f+0x100>)
 800240a:	1859      	adds	r1, r3, r1
 800240c:	29fe      	cmp	r1, #254	; 0xfe
 800240e:	dd16      	ble.n	800243e <__aeabi_d2f+0x52>
 8002410:	20ff      	movs	r0, #255	; 0xff
 8002412:	2200      	movs	r2, #0
 8002414:	05c0      	lsls	r0, r0, #23
 8002416:	4310      	orrs	r0, r2
 8002418:	07e4      	lsls	r4, r4, #31
 800241a:	4320      	orrs	r0, r4
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <__aeabi_d2f+0x44>
 8002422:	433d      	orrs	r5, r7
 8002424:	d026      	beq.n	8002474 <__aeabi_d2f+0x88>
 8002426:	2205      	movs	r2, #5
 8002428:	0192      	lsls	r2, r2, #6
 800242a:	0a52      	lsrs	r2, r2, #9
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	e7f1      	b.n	8002414 <__aeabi_d2f+0x28>
 8002430:	432f      	orrs	r7, r5
 8002432:	d0ed      	beq.n	8002410 <__aeabi_d2f+0x24>
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	03d2      	lsls	r2, r2, #15
 8002438:	20ff      	movs	r0, #255	; 0xff
 800243a:	432a      	orrs	r2, r5
 800243c:	e7ea      	b.n	8002414 <__aeabi_d2f+0x28>
 800243e:	2900      	cmp	r1, #0
 8002440:	dd1b      	ble.n	800247a <__aeabi_d2f+0x8e>
 8002442:	0192      	lsls	r2, r2, #6
 8002444:	1e50      	subs	r0, r2, #1
 8002446:	4182      	sbcs	r2, r0
 8002448:	00ed      	lsls	r5, r5, #3
 800244a:	0f7f      	lsrs	r7, r7, #29
 800244c:	432a      	orrs	r2, r5
 800244e:	433a      	orrs	r2, r7
 8002450:	0753      	lsls	r3, r2, #29
 8002452:	d047      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002454:	230f      	movs	r3, #15
 8002456:	4013      	ands	r3, r2
 8002458:	2b04      	cmp	r3, #4
 800245a:	d000      	beq.n	800245e <__aeabi_d2f+0x72>
 800245c:	3204      	adds	r2, #4
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	04db      	lsls	r3, r3, #19
 8002462:	4013      	ands	r3, r2
 8002464:	d03e      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002466:	1c48      	adds	r0, r1, #1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	d0d1      	beq.n	8002410 <__aeabi_d2f+0x24>
 800246c:	0192      	lsls	r2, r2, #6
 800246e:	0a52      	lsrs	r2, r2, #9
 8002470:	b2c0      	uxtb	r0, r0
 8002472:	e7cf      	b.n	8002414 <__aeabi_d2f+0x28>
 8002474:	2000      	movs	r0, #0
 8002476:	2200      	movs	r2, #0
 8002478:	e7cc      	b.n	8002414 <__aeabi_d2f+0x28>
 800247a:	000a      	movs	r2, r1
 800247c:	3217      	adds	r2, #23
 800247e:	db2f      	blt.n	80024e0 <__aeabi_d2f+0xf4>
 8002480:	2680      	movs	r6, #128	; 0x80
 8002482:	0436      	lsls	r6, r6, #16
 8002484:	432e      	orrs	r6, r5
 8002486:	251e      	movs	r5, #30
 8002488:	1a6d      	subs	r5, r5, r1
 800248a:	2d1f      	cmp	r5, #31
 800248c:	dd11      	ble.n	80024b2 <__aeabi_d2f+0xc6>
 800248e:	2202      	movs	r2, #2
 8002490:	4252      	negs	r2, r2
 8002492:	1a52      	subs	r2, r2, r1
 8002494:	0031      	movs	r1, r6
 8002496:	40d1      	lsrs	r1, r2
 8002498:	2d20      	cmp	r5, #32
 800249a:	d004      	beq.n	80024a6 <__aeabi_d2f+0xba>
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <__aeabi_d2f+0x104>)
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	409e      	lsls	r6, r3
 80024a4:	4337      	orrs	r7, r6
 80024a6:	003a      	movs	r2, r7
 80024a8:	1e53      	subs	r3, r2, #1
 80024aa:	419a      	sbcs	r2, r3
 80024ac:	430a      	orrs	r2, r1
 80024ae:	2100      	movs	r1, #0
 80024b0:	e7ce      	b.n	8002450 <__aeabi_d2f+0x64>
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <__aeabi_d2f+0x108>)
 80024b4:	0038      	movs	r0, r7
 80024b6:	4694      	mov	ip, r2
 80024b8:	4463      	add	r3, ip
 80024ba:	4098      	lsls	r0, r3
 80024bc:	003a      	movs	r2, r7
 80024be:	1e41      	subs	r1, r0, #1
 80024c0:	4188      	sbcs	r0, r1
 80024c2:	409e      	lsls	r6, r3
 80024c4:	40ea      	lsrs	r2, r5
 80024c6:	4330      	orrs	r0, r6
 80024c8:	4302      	orrs	r2, r0
 80024ca:	2100      	movs	r1, #0
 80024cc:	0753      	lsls	r3, r2, #29
 80024ce:	d1c1      	bne.n	8002454 <__aeabi_d2f+0x68>
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0013      	movs	r3, r2
 80024d4:	04c9      	lsls	r1, r1, #19
 80024d6:	2001      	movs	r0, #1
 80024d8:	400b      	ands	r3, r1
 80024da:	420a      	tst	r2, r1
 80024dc:	d1c6      	bne.n	800246c <__aeabi_d2f+0x80>
 80024de:	e7a3      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e0:	2300      	movs	r3, #0
 80024e2:	e7a0      	b.n	8002426 <__aeabi_d2f+0x3a>
 80024e4:	000b      	movs	r3, r1
 80024e6:	e79f      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e8:	000007fe 	.word	0x000007fe
 80024ec:	fffffc80 	.word	0xfffffc80
 80024f0:	fffffca2 	.word	0xfffffca2
 80024f4:	fffffc82 	.word	0xfffffc82

080024f8 <__clzsi2>:
 80024f8:	211c      	movs	r1, #28
 80024fa:	2301      	movs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	4298      	cmp	r0, r3
 8002500:	d301      	bcc.n	8002506 <__clzsi2+0xe>
 8002502:	0c00      	lsrs	r0, r0, #16
 8002504:	3910      	subs	r1, #16
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	4298      	cmp	r0, r3
 800250a:	d301      	bcc.n	8002510 <__clzsi2+0x18>
 800250c:	0a00      	lsrs	r0, r0, #8
 800250e:	3908      	subs	r1, #8
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	4298      	cmp	r0, r3
 8002514:	d301      	bcc.n	800251a <__clzsi2+0x22>
 8002516:	0900      	lsrs	r0, r0, #4
 8002518:	3904      	subs	r1, #4
 800251a:	a202      	add	r2, pc, #8	; (adr r2, 8002524 <__clzsi2+0x2c>)
 800251c:	5c10      	ldrb	r0, [r2, r0]
 800251e:	1840      	adds	r0, r0, r1
 8002520:	4770      	bx	lr
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	02020304 	.word	0x02020304
 8002528:	01010101 	.word	0x01010101
	...

08002534 <__clzdi2>:
 8002534:	b510      	push	{r4, lr}
 8002536:	2900      	cmp	r1, #0
 8002538:	d103      	bne.n	8002542 <__clzdi2+0xe>
 800253a:	f7ff ffdd 	bl	80024f8 <__clzsi2>
 800253e:	3020      	adds	r0, #32
 8002540:	e002      	b.n	8002548 <__clzdi2+0x14>
 8002542:	0008      	movs	r0, r1
 8002544:	f7ff ffd8 	bl	80024f8 <__clzsi2>
 8002548:	bd10      	pop	{r4, pc}
 800254a:	46c0      	nop			; (mov r8, r8)

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b5b0      	push	{r4, r5, r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002552:	f000 ff65 	bl	8003420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002556:	f000 f913 	bl	8002780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800255a:	f000 fb4f 	bl	8002bfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800255e:	f000 facb 	bl	8002af8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002562:	f000 fa7b 	bl	8002a5c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002566:	f000 fb15 	bl	8002b94 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800256a:	f000 f955 	bl	8002818 <MX_I2C1_Init>
  MX_TIM6_Init();
 800256e:	f000 fa37 	bl	80029e0 <MX_TIM6_Init>
  MX_RTC_Init();
 8002572:	f000 f991 	bl	8002898 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 8002576:	4b6d      	ldr	r3, [pc, #436]	; (800272c <main+0x1e0>)
 8002578:	681c      	ldr	r4, [r3, #0]
 800257a:	4b6c      	ldr	r3, [pc, #432]	; (800272c <main+0x1e0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0018      	movs	r0, r3
 8002580:	f7fd fdc0 	bl	8000104 <strlen>
 8002584:	0003      	movs	r3, r0
 8002586:	b29a      	uxth	r2, r3
 8002588:	23fa      	movs	r3, #250	; 0xfa
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4868      	ldr	r0, [pc, #416]	; (8002730 <main+0x1e4>)
 800258e:	0021      	movs	r1, r4
 8002590:	f003 fb02 	bl	8005b98 <HAL_UART_Transmit>
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 8002594:	4b67      	ldr	r3, [pc, #412]	; (8002734 <main+0x1e8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	4252      	negs	r2, r2
 800259c:	611a      	str	r2, [r3, #16]
  my_astro_off () ;
 800259e:	f000 fbc7 	bl	8002d30 <my_astro_off>
  my_astro_off () ;
  */



  my_lx6_on () ;
 80025a2:	f000 fbd7 	bl	8002d54 <my_lx6_on>
  my_ldg_on () ;
 80025a6:	f000 fbb7 	bl	8002d18 <my_ldg_on>
  fix_quality = 0 ;
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <main+0x1ec>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
  nmea_latitude[0] = 0 ;
 80025b0:	4b62      	ldr	r3, [pc, #392]	; (800273c <main+0x1f0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
  nmea_longitude[0] = 0 ;
 80025b6:	4b62      	ldr	r3, [pc, #392]	; (8002740 <main+0x1f4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
  received_nmea_rmc_flag = false ;
 80025bc:	4b61      	ldr	r3, [pc, #388]	; (8002744 <main+0x1f8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
  tim_seconds = 0 ;
 80025c2:	4b61      	ldr	r3, [pc, #388]	; (8002748 <main+0x1fc>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 80025c8:	4b5a      	ldr	r3, [pc, #360]	; (8002734 <main+0x1e8>)
 80025ca:	0018      	movs	r0, r3
 80025cc:	f002 ff6c 	bl	80054a8 <HAL_TIM_Base_Start_IT>
  while ( tim_seconds < 120 ) // 1200 = 10 min.
 80025d0:	e087      	b.n	80026e2 <main+0x196>
  {
	  HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 80025d2:	23fa      	movs	r3, #250	; 0xfa
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	495d      	ldr	r1, [pc, #372]	; (800274c <main+0x200>)
 80025d8:	485d      	ldr	r0, [pc, #372]	; (8002750 <main+0x204>)
 80025da:	2201      	movs	r2, #1
 80025dc:	f003 fb78 	bl	8005cd0 <HAL_UART_Receive>
	  //HAL_UART_Receive ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Receive nmea from DBG "sim_nmea_uart" python script
	  HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 80025e0:	23fa      	movs	r3, #250	; 0xfa
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4959      	ldr	r1, [pc, #356]	; (800274c <main+0x200>)
 80025e6:	4852      	ldr	r0, [pc, #328]	; (8002730 <main+0x1e4>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	f003 fad5 	bl	8005b98 <HAL_UART_Transmit>
	  if ( rxd_byte )
 80025ee:	4b57      	ldr	r3, [pc, #348]	; (800274c <main+0x200>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d05b      	beq.n	80026ae <main+0x162>
	  {
		  //HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
		  if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 80025f6:	4a57      	ldr	r2, [pc, #348]	; (8002754 <main+0x208>)
 80025f8:	4957      	ldr	r1, [pc, #348]	; (8002758 <main+0x20c>)
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <main+0x200>)
 80025fc:	0018      	movs	r0, r3
 80025fe:	f004 fa98 	bl	8006b32 <my_nmea_message>
 8002602:	0003      	movs	r3, r0
 8002604:	2b02      	cmp	r3, #2
 8002606:	d152      	bne.n	80026ae <main+0x162>
		  {
			  if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <main+0x20c>)
 800260a:	0018      	movs	r0, r3
 800260c:	f004 fb51 	bl	8006cb2 <is_my_nmea_checksum_ok>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d04c      	beq.n	80026ae <main+0x162>
			  {
				  if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8002614:	4b51      	ldr	r3, [pc, #324]	; (800275c <main+0x210>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <main+0x20c>)
 800261a:	0011      	movs	r1, r2
 800261c:	0018      	movs	r0, r3
 800261e:	f006 fe4c 	bl	80092ba <strstr>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d006      	beq.n	8002634 <main+0xe8>
				  {
					  set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ;
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <main+0x20c>)
 8002628:	0018      	movs	r0, r3
 800262a:	f004 f9d5 	bl	80069d8 <set_my_rtc_from_nmea_rmc>
					  received_nmea_rmc_flag = true ;
 800262e:	4b45      	ldr	r3, [pc, #276]	; (8002744 <main+0x1f8>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 8002634:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <main+0x214>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b47      	ldr	r3, [pc, #284]	; (8002758 <main+0x20c>)
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f006 fe3c 	bl	80092ba <strstr>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d024      	beq.n	8002690 <main+0x144>
				  {
					  nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8002646:	4b44      	ldr	r3, [pc, #272]	; (8002758 <main+0x20c>)
 8002648:	0018      	movs	r0, r3
 800264a:	f004 fade 	bl	8006c0a <get_my_nmea_gngsa_fixed_mode_s>
 800264e:	0003      	movs	r3, r0
 8002650:	001a      	movs	r2, r3
 8002652:	4b44      	ldr	r3, [pc, #272]	; (8002764 <main+0x218>)
 8002654:	701a      	strb	r2, [r3, #0]
					  nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8002656:	4b40      	ldr	r3, [pc, #256]	; (8002758 <main+0x20c>)
 8002658:	0018      	movs	r0, r3
 800265a:	f004 fae1 	bl	8006c20 <get_my_nmea_gngsa_pdop_d>
 800265e:	0002      	movs	r2, r0
 8002660:	000b      	movs	r3, r1
 8002662:	4941      	ldr	r1, [pc, #260]	; (8002768 <main+0x21c>)
 8002664:	600a      	str	r2, [r1, #0]
 8002666:	604b      	str	r3, [r1, #4]
					  if ( nmea_fixed_mode_s == NMEA_3D_FIX )
 8002668:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <main+0x218>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b33      	cmp	r3, #51	; 0x33
 800266e:	d10f      	bne.n	8002690 <main+0x144>
					  {
						  if ( nmea_fixed_pdop_d <= NMEA_PDOP_MIN_THS_D )
 8002670:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <main+0x21c>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	4b3c      	ldr	r3, [pc, #240]	; (800276c <main+0x220>)
 800267a:	f7fd fef5 	bl	8000468 <__aeabi_dcmple>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d003      	beq.n	800268a <main+0x13e>
						  {
							  fix_quality = 2 ;
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <main+0x1ec>)
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e002      	b.n	8002690 <main+0x144>
						  }
						  else
						  {
							  fix_quality = 1 ;
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <main+0x1ec>)
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
						  }

					  }
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngll_label ) )
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <main+0x224>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <main+0x20c>)
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f006 fe0e 	bl	80092ba <strstr>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d005      	beq.n	80026ae <main+0x162>
				  {
					  get_my_nmea_gngll_coordinates_s ( (char*) nmea_message , nmea_latitude , nmea_longitude ) ;
 80026a2:	4a27      	ldr	r2, [pc, #156]	; (8002740 <main+0x1f4>)
 80026a4:	4925      	ldr	r1, [pc, #148]	; (800273c <main+0x1f0>)
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <main+0x20c>)
 80026a8:	0018      	movs	r0, r3
 80026aa:	f004 fbbd 	bl	8006e28 <get_my_nmea_gngll_coordinates_s>
				  }
			  }
		  }
	  }
	  rxd_byte = 0 ;
 80026ae:	4b27      	ldr	r3, [pc, #156]	; (800274c <main+0x200>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
	  if ( tim_seconds > 10 && !received_nmea_rmc_flag )
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <main+0x1fc>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	2b0a      	cmp	r3, #10
 80026ba:	d906      	bls.n	80026ca <main+0x17e>
 80026bc:	4b21      	ldr	r3, [pc, #132]	; (8002744 <main+0x1f8>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4053      	eors	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d111      	bne.n	80026ee <main+0x1a2>
	  {
		  break ;
	  }
	  if ( fix_quality >= 2 && received_nmea_rmc_flag && nmea_latitude[0] != 0 )
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <main+0x1ec>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d907      	bls.n	80026e2 <main+0x196>
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <main+0x1f8>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <main+0x196>
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <main+0x1f0>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <main+0x1a6>
  while ( tim_seconds < 120 ) // 1200 = 10 min.
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <main+0x1fc>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	2b77      	cmp	r3, #119	; 0x77
 80026e8:	d800      	bhi.n	80026ec <main+0x1a0>
 80026ea:	e772      	b.n	80025d2 <main+0x86>
 80026ec:	e002      	b.n	80026f4 <main+0x1a8>
		  break ;
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	e000      	b.n	80026f4 <main+0x1a8>
	  {
		  break ;
 80026f2:	46c0      	nop			; (mov r8, r8)
	  }
  }
  HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <main+0x1e8>)
 80026f6:	0018      	movs	r0, r3
 80026f8:	f002 ff32 	bl	8005560 <HAL_TIM_Base_Stop_IT>

  if ( fix_quality >= 1 )
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <main+0x1ec>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d012      	beq.n	800272a <main+0x1de>
  {
	  sprintf ( payload , "%.1f,%s,%s,%d,%lu" , nmea_fixed_pdop_d , nmea_latitude , nmea_longitude , tim_seconds , agg_tim_seconds ) ;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <main+0x21c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	490f      	ldr	r1, [pc, #60]	; (8002748 <main+0x1fc>)
 800270c:	8809      	ldrh	r1, [r1, #0]
 800270e:	000d      	movs	r5, r1
 8002710:	4918      	ldr	r1, [pc, #96]	; (8002774 <main+0x228>)
 8002712:	6809      	ldr	r1, [r1, #0]
 8002714:	4c18      	ldr	r4, [pc, #96]	; (8002778 <main+0x22c>)
 8002716:	4819      	ldr	r0, [pc, #100]	; (800277c <main+0x230>)
 8002718:	9103      	str	r1, [sp, #12]
 800271a:	9502      	str	r5, [sp, #8]
 800271c:	4908      	ldr	r1, [pc, #32]	; (8002740 <main+0x1f4>)
 800271e:	9101      	str	r1, [sp, #4]
 8002720:	4906      	ldr	r1, [pc, #24]	; (800273c <main+0x1f0>)
 8002722:	9100      	str	r1, [sp, #0]
 8002724:	0021      	movs	r1, r4
 8002726:	f006 fd05 	bl	8009134 <siprintf>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800272a:	e7fe      	b.n	800272a <main+0x1de>
 800272c:	20000000 	.word	0x20000000
 8002730:	20000364 	.word	0x20000364
 8002734:	20000284 	.word	0x20000284
 8002738:	200005a4 	.word	0x200005a4
 800273c:	2000058c 	.word	0x2000058c
 8002740:	20000598 	.word	0x20000598
 8002744:	20000658 	.word	0x20000658
 8002748:	200005b0 	.word	0x200005b0
 800274c:	2000048c 	.word	0x2000048c
 8002750:	200003f8 	.word	0x200003f8
 8002754:	2000058a 	.word	0x2000058a
 8002758:	20000490 	.word	0x20000490
 800275c:	2000000c 	.word	0x2000000c
 8002760:	20000004 	.word	0x20000004
 8002764:	200005a5 	.word	0x200005a5
 8002768:	200005a8 	.word	0x200005a8
 800276c:	40140000 	.word	0x40140000
 8002770:	20000008 	.word	0x20000008
 8002774:	200005b4 	.word	0x200005b4
 8002778:	0800c6b0 	.word	0x0800c6b0
 800277c:	200005b8 	.word	0x200005b8

08002780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b093      	sub	sp, #76	; 0x4c
 8002784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002786:	2410      	movs	r4, #16
 8002788:	193b      	adds	r3, r7, r4
 800278a:	0018      	movs	r0, r3
 800278c:	2338      	movs	r3, #56	; 0x38
 800278e:	001a      	movs	r2, r3
 8002790:	2100      	movs	r1, #0
 8002792:	f006 fd65 	bl	8009260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002796:	003b      	movs	r3, r7
 8002798:	0018      	movs	r0, r3
 800279a:	2310      	movs	r3, #16
 800279c:	001a      	movs	r2, r3
 800279e:	2100      	movs	r1, #0
 80027a0:	f006 fd5e 	bl	8009260 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f001 fb1d 	bl	8003de8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	220a      	movs	r2, #10
 80027b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b4:	193b      	adds	r3, r7, r4
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0052      	lsls	r2, r2, #1
 80027ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80027bc:	0021      	movs	r1, r4
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2201      	movs	r2, #1
 80027ce:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	0018      	movs	r0, r3
 80027da:	f001 fb51 	bl	8003e80 <HAL_RCC_OscConfig>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027e2:	f000 fae7 	bl	8002db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e6:	003b      	movs	r3, r7
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027ec:	003b      	movs	r3, r7
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f2:	003b      	movs	r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027f8:	003b      	movs	r3, r7
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027fe:	003b      	movs	r3, r7
 8002800:	2100      	movs	r1, #0
 8002802:	0018      	movs	r0, r3
 8002804:	f001 fe56 	bl	80044b4 <HAL_RCC_ClockConfig>
 8002808:	1e03      	subs	r3, r0, #0
 800280a:	d001      	beq.n	8002810 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800280c:	f000 fad2 	bl	8002db4 <Error_Handler>
  }
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b013      	add	sp, #76	; 0x4c
 8002816:	bd90      	pop	{r4, r7, pc}

08002818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <MX_I2C1_Init+0x74>)
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <MX_I2C1_Init+0x78>)
 8002820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <MX_I2C1_Init+0x74>)
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <MX_I2C1_Init+0x7c>)
 8002826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <MX_I2C1_Init+0x74>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <MX_I2C1_Init+0x74>)
 8002830:	2201      	movs	r2, #1
 8002832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <MX_I2C1_Init+0x74>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <MX_I2C1_Init+0x74>)
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <MX_I2C1_Init+0x74>)
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_I2C1_Init+0x74>)
 8002848:	2200      	movs	r2, #0
 800284a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_I2C1_Init+0x74>)
 800284e:	2200      	movs	r2, #0
 8002850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <MX_I2C1_Init+0x74>)
 8002854:	0018      	movs	r0, r3
 8002856:	f001 f999 	bl	8003b8c <HAL_I2C_Init>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d001      	beq.n	8002862 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800285e:	f000 faa9 	bl	8002db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <MX_I2C1_Init+0x74>)
 8002864:	2100      	movs	r1, #0
 8002866:	0018      	movs	r0, r3
 8002868:	f001 fa26 	bl	8003cb8 <HAL_I2CEx_ConfigAnalogFilter>
 800286c:	1e03      	subs	r3, r0, #0
 800286e:	d001      	beq.n	8002874 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002870:	f000 faa0 	bl	8002db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <MX_I2C1_Init+0x74>)
 8002876:	2100      	movs	r1, #0
 8002878:	0018      	movs	r0, r3
 800287a:	f001 fa69 	bl	8003d50 <HAL_I2CEx_ConfigDigitalFilter>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d001      	beq.n	8002886 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002882:	f000 fa97 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000204 	.word	0x20000204
 8002890:	40005400 	.word	0x40005400
 8002894:	00303d5b 	.word	0x00303d5b

08002898 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b090      	sub	sp, #64	; 0x40
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800289e:	232c      	movs	r3, #44	; 0x2c
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	0018      	movs	r0, r3
 80028a4:	2314      	movs	r3, #20
 80028a6:	001a      	movs	r2, r3
 80028a8:	2100      	movs	r1, #0
 80028aa:	f006 fcd9 	bl	8009260 <memset>
  RTC_DateTypeDef sDate = {0};
 80028ae:	2328      	movs	r3, #40	; 0x28
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80028b6:	003b      	movs	r3, r7
 80028b8:	0018      	movs	r0, r3
 80028ba:	2328      	movs	r3, #40	; 0x28
 80028bc:	001a      	movs	r2, r3
 80028be:	2100      	movs	r1, #0
 80028c0:	f006 fcce 	bl	8009260 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028c4:	4b44      	ldr	r3, [pc, #272]	; (80029d8 <MX_RTC_Init+0x140>)
 80028c6:	4a45      	ldr	r2, [pc, #276]	; (80029dc <MX_RTC_Init+0x144>)
 80028c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028ca:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <MX_RTC_Init+0x140>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80028d0:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <MX_RTC_Init+0x140>)
 80028d2:	227f      	movs	r2, #127	; 0x7f
 80028d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80028d6:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <MX_RTC_Init+0x140>)
 80028d8:	22ff      	movs	r2, #255	; 0xff
 80028da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028dc:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <MX_RTC_Init+0x140>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028e2:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <MX_RTC_Init+0x140>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <MX_RTC_Init+0x140>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028ee:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <MX_RTC_Init+0x140>)
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	05d2      	lsls	r2, r2, #23
 80028f4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <MX_RTC_Init+0x140>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <MX_RTC_Init+0x140>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f002 f93a 	bl	8004b78 <HAL_RTC_Init>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d001      	beq.n	800290c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002908:	f000 fa54 	bl	8002db4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	187b      	adds	r3, r7, r1
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002914:	187b      	adds	r3, r7, r1
 8002916:	2200      	movs	r2, #0
 8002918:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2200      	movs	r2, #0
 800291e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2200      	movs	r2, #0
 8002924:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800292c:	187b      	adds	r3, r7, r1
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002932:	1879      	adds	r1, r7, r1
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <MX_RTC_Init+0x140>)
 8002936:	2201      	movs	r2, #1
 8002938:	0018      	movs	r0, r3
 800293a:	f002 f9bf 	bl	8004cbc <HAL_RTC_SetTime>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d001      	beq.n	8002946 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002942:	f000 fa37 	bl	8002db4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002946:	2128      	movs	r1, #40	; 0x28
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800294e:	187b      	adds	r3, r7, r1
 8002950:	2201      	movs	r2, #1
 8002952:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002954:	187b      	adds	r3, r7, r1
 8002956:	2201      	movs	r2, #1
 8002958:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2224      	movs	r2, #36	; 0x24
 800295e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002960:	1879      	adds	r1, r7, r1
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <MX_RTC_Init+0x140>)
 8002964:	2201      	movs	r2, #1
 8002966:	0018      	movs	r0, r3
 8002968:	f002 fa50 	bl	8004e0c <HAL_RTC_SetDate>
 800296c:	1e03      	subs	r3, r0, #0
 800296e:	d001      	beq.n	8002974 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002970:	f000 fa20 	bl	8002db4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002974:	003b      	movs	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800297a:	003b      	movs	r3, r7
 800297c:	2200      	movs	r2, #0
 800297e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002980:	003b      	movs	r3, r7
 8002982:	2200      	movs	r2, #0
 8002984:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002986:	003b      	movs	r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800298c:	003b      	movs	r3, r7
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002992:	003b      	movs	r3, r7
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002998:	003b      	movs	r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800299e:	003b      	movs	r3, r7
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80029a4:	003b      	movs	r3, r7
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80029aa:	003b      	movs	r3, r7
 80029ac:	2220      	movs	r2, #32
 80029ae:	2101      	movs	r1, #1
 80029b0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80029b2:	003b      	movs	r3, r7
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	0052      	lsls	r2, r2, #1
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029ba:	0039      	movs	r1, r7
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <MX_RTC_Init+0x140>)
 80029be:	2201      	movs	r2, #1
 80029c0:	0018      	movs	r0, r3
 80029c2:	f002 fab5 	bl	8004f30 <HAL_RTC_SetAlarm>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d001      	beq.n	80029ce <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80029ca:	f000 f9f3 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b010      	add	sp, #64	; 0x40
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	20000258 	.word	0x20000258
 80029dc:	40002800 	.word	0x40002800

080029e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	0018      	movs	r0, r3
 80029ea:	230c      	movs	r3, #12
 80029ec:	001a      	movs	r2, r3
 80029ee:	2100      	movs	r1, #0
 80029f0:	f006 fc36 	bl	8009260 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <MX_TIM6_Init+0x6c>)
 80029f6:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <MX_TIM6_Init+0x70>)
 80029f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <MX_TIM6_Init+0x6c>)
 80029fc:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <MX_TIM6_Init+0x74>)
 80029fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <MX_TIM6_Init+0x6c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_TIM6_Init+0x6c>)
 8002a08:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <MX_TIM6_Init+0x78>)
 8002a0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_TIM6_Init+0x6c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_TIM6_Init+0x6c>)
 8002a14:	0018      	movs	r0, r3
 8002a16:	f002 fcef 	bl	80053f8 <HAL_TIM_Base_Init>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a1e:	f000 f9c9 	bl	8002db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a2e:	1d3a      	adds	r2, r7, #4
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_TIM6_Init+0x6c>)
 8002a32:	0011      	movs	r1, r2
 8002a34:	0018      	movs	r0, r3
 8002a36:	f002 ff93 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8002a3a:	1e03      	subs	r3, r0, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002a3e:	f000 f9b9 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b004      	add	sp, #16
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	20000284 	.word	0x20000284
 8002a50:	40001000 	.word	0x40001000
 8002a54:	00003e7f 	.word	0x00003e7f
 8002a58:	000003e7 	.word	0x000003e7

08002a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a62:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <MX_USART1_UART_Init+0x98>)
 8002a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a68:	2296      	movs	r2, #150	; 0x96
 8002a6a:	0192      	lsls	r2, r2, #6
 8002a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a82:	220c      	movs	r2, #12
 8002a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f002 ffe0 	bl	8005a6c <HAL_UART_Init>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ab0:	f000 f980 	bl	8002db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f003 fead 	bl	8006818 <HAL_UARTEx_SetTxFifoThreshold>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ac2:	f000 f977 	bl	8002db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002ac8:	2100      	movs	r1, #0
 8002aca:	0018      	movs	r0, r3
 8002acc:	f003 fee4 	bl	8006898 <HAL_UARTEx_SetRxFifoThreshold>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ad4:	f000 f96e 	bl	8002db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <MX_USART1_UART_Init+0x94>)
 8002ada:	0018      	movs	r0, r3
 8002adc:	f003 fe62 	bl	80067a4 <HAL_UARTEx_DisableFifoMode>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ae4:	f000 f966 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	200002d0 	.word	0x200002d0
 8002af4:	40013800 	.word	0x40013800

08002af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <MX_USART2_UART_Init+0x98>)
 8002b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b02:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b04:	22e1      	movs	r2, #225	; 0xe1
 8002b06:	0252      	lsls	r2, r2, #9
 8002b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b10:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b1e:	220c      	movs	r2, #12
 8002b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b42:	0018      	movs	r0, r3
 8002b44:	f002 ff92 	bl	8005a6c <HAL_UART_Init>
 8002b48:	1e03      	subs	r3, r0, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b4c:	f000 f932 	bl	8002db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b52:	2100      	movs	r1, #0
 8002b54:	0018      	movs	r0, r3
 8002b56:	f003 fe5f 	bl	8006818 <HAL_UARTEx_SetTxFifoThreshold>
 8002b5a:	1e03      	subs	r3, r0, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b5e:	f000 f929 	bl	8002db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b64:	2100      	movs	r1, #0
 8002b66:	0018      	movs	r0, r3
 8002b68:	f003 fe96 	bl	8006898 <HAL_UARTEx_SetRxFifoThreshold>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b70:	f000 f920 	bl	8002db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <MX_USART2_UART_Init+0x94>)
 8002b76:	0018      	movs	r0, r3
 8002b78:	f003 fe14 	bl	80067a4 <HAL_UARTEx_DisableFifoMode>
 8002b7c:	1e03      	subs	r3, r0, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b80:	f000 f918 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	20000364 	.word	0x20000364
 8002b90:	40004400 	.word	0x40004400

08002b94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002b9a:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <MX_USART3_UART_Init+0x64>)
 8002b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002ba0:	2296      	movs	r2, #150	; 0x96
 8002ba2:	0192      	lsls	r2, r2, #6
 8002ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002bba:	220c      	movs	r2, #12
 8002bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <MX_USART3_UART_Init+0x60>)
 8002bde:	0018      	movs	r0, r3
 8002be0:	f002 ff44 	bl	8005a6c <HAL_UART_Init>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d001      	beq.n	8002bec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002be8:	f000 f8e4 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	200003f8 	.word	0x200003f8
 8002bf8:	40004800 	.word	0x40004800

08002bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b08b      	sub	sp, #44	; 0x2c
 8002c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c02:	2414      	movs	r4, #20
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	0018      	movs	r0, r3
 8002c08:	2314      	movs	r3, #20
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	f006 fb27 	bl	8009260 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c12:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c16:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c18:	2104      	movs	r1, #4
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	2204      	movs	r2, #4
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2e:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c30:	2120      	movs	r1, #32
 8002c32:	430a      	orrs	r2, r1
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c46:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c48:	2101      	movs	r1, #1
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c4e:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	2201      	movs	r2, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c60:	2102      	movs	r1, #2
 8002c62:	430a      	orrs	r2, r1
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34
 8002c66:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <MX_GPIO_Init+0x10c>)
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002c72:	238c      	movs	r3, #140	; 0x8c
 8002c74:	015b      	lsls	r3, r3, #5
 8002c76:	4825      	ldr	r0, [pc, #148]	; (8002d0c <MX_GPIO_Init+0x110>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	f000 ff68 	bl	8003b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002c80:	4923      	ldr	r1, [pc, #140]	; (8002d10 <MX_GPIO_Init+0x114>)
 8002c82:	23a0      	movs	r3, #160	; 0xa0
 8002c84:	05db      	lsls	r3, r3, #23
 8002c86:	2200      	movs	r2, #0
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 ff61 	bl	8003b50 <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8002c8e:	193b      	adds	r3, r7, r4
 8002c90:	228c      	movs	r2, #140	; 0x8c
 8002c92:	0152      	lsls	r2, r2, #5
 8002c94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	2201      	movs	r2, #1
 8002c9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <MX_GPIO_Init+0x110>)
 8002cac:	0019      	movs	r1, r3
 8002cae:	0010      	movs	r0, r2
 8002cb0:	f000 fd1a 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	4a16      	ldr	r2, [pc, #88]	; (8002d10 <MX_GPIO_Init+0x114>)
 8002cb8:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	193a      	adds	r2, r7, r4
 8002cce:	23a0      	movs	r3, #160	; 0xa0
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 fd07 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002cda:	0021      	movs	r1, r4
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	22c0      	movs	r2, #192	; 0xc0
 8002ce0:	0092      	lsls	r2, r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	2288      	movs	r2, #136	; 0x88
 8002ce8:	0352      	lsls	r2, r2, #13
 8002cea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <MX_GPIO_Init+0x118>)
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	0010      	movs	r0, r2
 8002cfa:	f000 fcf5 	bl	80036e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b00b      	add	sp, #44	; 0x2c
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	50000800 	.word	0x50000800
 8002d10:	00009860 	.word	0x00009860
 8002d14:	50000400 	.word	0x50000400

08002d18 <my_ldg_on>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
    return ( get_systick () - starting_value > duration ) ? true : false ;
}
void my_ldg_on ( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_SET ) ;
 8002d1c:	23a0      	movs	r3, #160	; 0xa0
 8002d1e:	05db      	lsls	r3, r3, #23
 8002d20:	2201      	movs	r2, #1
 8002d22:	2120      	movs	r1, #32
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 ff13 	bl	8003b50 <HAL_GPIO_WritePin>
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <my_astro_off>:
{
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
	MX_USART1_UART_Init () ;
}
void my_astro_off ( void )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002d34:	23a0      	movs	r3, #160	; 0xa0
 8002d36:	05db      	lsls	r3, r3, #23
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 ff07 	bl	8003b50 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 8002d42:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <my_astro_off+0x20>)
 8002d44:	0018      	movs	r0, r3
 8002d46:	f002 fee7 	bl	8005b18 <HAL_UART_DeInit>
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200002d0 	.word	0x200002d0

08002d54 <my_lx6_on>:
void my_lx6_on ( void )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4808      	ldr	r0, [pc, #32]	; (8002d80 <my_lx6_on+0x2c>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	0019      	movs	r1, r3
 8002d62:	f000 fef5 	bl	8003b50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	4805      	ldr	r0, [pc, #20]	; (8002d80 <my_lx6_on+0x2c>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	0019      	movs	r1, r3
 8002d70:	f000 feee 	bl	8003b50 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002d74:	f7ff ff0e 	bl	8002b94 <MX_USART3_UART_Init>
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	50000800 	.word	0x50000800

08002d84 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( HUART_Lx6 ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a06      	ldr	r2, [pc, #24]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d105      	bne.n	8002da2 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		tim_seconds++ ;
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002da0:	801a      	strh	r2, [r3, #0]
	}
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40001000 	.word	0x40001000
 8002db0:	200005b0 	.word	0x200005b0

08002db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002db8:	b672      	cpsid	i
}
 8002dba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <Error_Handler+0x8>
	...

08002dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_MspInit+0x44>)
 8002dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_MspInit+0x44>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_MspInit+0x44>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4013      	ands	r3, r2
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_MspInit+0x44>)
 8002de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_MspInit+0x44>)
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	0549      	lsls	r1, r1, #21
 8002de8:	430a      	orrs	r2, r1
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_MspInit+0x44>)
 8002dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	055b      	lsls	r3, r3, #21
 8002df4:	4013      	ands	r3, r2
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	40021000 	.word	0x40021000

08002e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b097      	sub	sp, #92	; 0x5c
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	2344      	movs	r3, #68	; 0x44
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	0018      	movs	r0, r3
 8002e16:	2314      	movs	r3, #20
 8002e18:	001a      	movs	r2, r3
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	f006 fa20 	bl	8009260 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e20:	2410      	movs	r4, #16
 8002e22:	193b      	adds	r3, r7, r4
 8002e24:	0018      	movs	r0, r3
 8002e26:	2334      	movs	r3, #52	; 0x34
 8002e28:	001a      	movs	r2, r3
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	f006 fa18 	bl	8009260 <memset>
  if(hi2c->Instance==I2C1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <HAL_I2C_MspInit+0xb8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d13d      	bne.n	8002eb6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e40:	193b      	adds	r3, r7, r4
 8002e42:	2200      	movs	r2, #0
 8002e44:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f001 fcdd 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8002e4e:	1e03      	subs	r3, r0, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e52:	f7ff ffaf 	bl	8002db4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_I2C_MspInit+0xbc>)
 8002e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <HAL_I2C_MspInit+0xbc>)
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	635a      	str	r2, [r3, #52]	; 0x34
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_I2C_MspInit+0xbc>)
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	2202      	movs	r2, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 8002e6e:	2144      	movs	r1, #68	; 0x44
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	22c0      	movs	r2, #192	; 0xc0
 8002e74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e76:	187b      	adds	r3, r7, r1
 8002e78:	2212      	movs	r2, #18
 8002e7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	2206      	movs	r2, #6
 8002e8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <HAL_I2C_MspInit+0xc0>)
 8002e92:	0019      	movs	r1, r3
 8002e94:	0010      	movs	r0, r2
 8002e96:	f000 fc27 	bl	80036e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_I2C_MspInit+0xbc>)
 8002e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_I2C_MspInit+0xbc>)
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	0389      	lsls	r1, r1, #14
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_I2C_MspInit+0xbc>)
 8002eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	039b      	lsls	r3, r3, #14
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b017      	add	sp, #92	; 0x5c
 8002ebc:	bd90      	pop	{r4, r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	40005400 	.word	0x40005400
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	50000400 	.word	0x50000400

08002ecc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b091      	sub	sp, #68	; 0x44
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ed4:	240c      	movs	r4, #12
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	0018      	movs	r0, r3
 8002eda:	2334      	movs	r3, #52	; 0x34
 8002edc:	001a      	movs	r2, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f006 f9be 	bl	8009260 <memset>
  if(hrtc->Instance==RTC)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_RTC_MspInit+0x74>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d124      	bne.n	8002f38 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	0292      	lsls	r2, r2, #10
 8002ef4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ef6:	193b      	adds	r3, r7, r4
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	0092      	lsls	r2, r2, #2
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	0018      	movs	r0, r3
 8002f02:	f001 fc81 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8002f06:	1e03      	subs	r3, r0, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002f0a:	f7ff ff53 	bl	8002db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_RTC_MspInit+0x78>)
 8002f10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_RTC_MspInit+0x78>)
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	0209      	lsls	r1, r1, #8
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RTC_MspInit+0x78>)
 8002f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_RTC_MspInit+0x78>)
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	00c9      	lsls	r1, r1, #3
 8002f26:	430a      	orrs	r2, r1
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RTC_MspInit+0x78>)
 8002f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4013      	ands	r3, r2
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b011      	add	sp, #68	; 0x44
 8002f3e:	bd90      	pop	{r4, r7, pc}
 8002f40:	40002800 	.word	0x40002800
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_TIM_Base_MspInit+0x44>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d113      	bne.n	8002f82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <HAL_TIM_Base_MspInit+0x48>)
 8002f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <HAL_TIM_Base_MspInit+0x48>)
 8002f60:	2110      	movs	r1, #16
 8002f62:	430a      	orrs	r2, r1
 8002f64:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_TIM_Base_MspInit+0x48>)
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2100      	movs	r1, #0
 8002f76:	2011      	movs	r0, #17
 8002f78:	f000 fb84 	bl	8003684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002f7c:	2011      	movs	r0, #17
 8002f7e:	f000 fb96 	bl	80036ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	40001000 	.word	0x40001000
 8002f90:	40021000 	.word	0x40021000

08002f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b09b      	sub	sp, #108	; 0x6c
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	2354      	movs	r3, #84	; 0x54
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	2314      	movs	r3, #20
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	f006 f95a 	bl	8009260 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fac:	2420      	movs	r4, #32
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	2334      	movs	r3, #52	; 0x34
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	f006 f952 	bl	8009260 <memset>
  if(huart->Instance==USART1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a61      	ldr	r2, [pc, #388]	; (8003148 <HAL_UART_MspInit+0x1b4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d140      	bne.n	8003048 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	2200      	movs	r2, #0
 8002fd0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f001 fc17 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002fde:	f7ff fee9 	bl	8002db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8002fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe6:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	01c9      	lsls	r1, r1, #7
 8002fec:	430a      	orrs	r2, r1
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff0:	4b56      	ldr	r3, [pc, #344]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8002ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	01db      	lsls	r3, r3, #7
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8003000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003002:	4b52      	ldr	r3, [pc, #328]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8003004:	2101      	movs	r1, #1
 8003006:	430a      	orrs	r2, r1
 8003008:	635a      	str	r2, [r3, #52]	; 0x34
 800300a:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_UART_MspInit+0x1b8>)
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	2201      	movs	r2, #1
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 8003016:	2154      	movs	r1, #84	; 0x54
 8003018:	187b      	adds	r3, r7, r1
 800301a:	22c0      	movs	r2, #192	; 0xc0
 800301c:	00d2      	lsls	r2, r2, #3
 800301e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	187b      	adds	r3, r7, r1
 8003022:	2202      	movs	r2, #2
 8003024:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	187b      	adds	r3, r7, r1
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	187b      	adds	r3, r7, r1
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003032:	187b      	adds	r3, r7, r1
 8003034:	2201      	movs	r2, #1
 8003036:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003038:	187a      	adds	r2, r7, r1
 800303a:	23a0      	movs	r3, #160	; 0xa0
 800303c:	05db      	lsls	r3, r3, #23
 800303e:	0011      	movs	r1, r2
 8003040:	0018      	movs	r0, r3
 8003042:	f000 fb51 	bl	80036e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003046:	e07b      	b.n	8003140 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a40      	ldr	r2, [pc, #256]	; (8003150 <HAL_UART_MspInit+0x1bc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d140      	bne.n	80030d4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003052:	2120      	movs	r1, #32
 8003054:	187b      	adds	r3, r7, r1
 8003056:	2202      	movs	r2, #2
 8003058:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800305a:	187b      	adds	r3, r7, r1
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003060:	187b      	adds	r3, r7, r1
 8003062:	0018      	movs	r0, r3
 8003064:	f001 fbd0 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d001      	beq.n	8003070 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 800306c:	f7ff fea2 	bl	8002db4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003070:	4b36      	ldr	r3, [pc, #216]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8003072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003074:	4b35      	ldr	r3, [pc, #212]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0289      	lsls	r1, r1, #10
 800307a:	430a      	orrs	r2, r1
 800307c:	63da      	str	r2, [r3, #60]	; 0x3c
 800307e:	4b33      	ldr	r3, [pc, #204]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8003080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	029b      	lsls	r3, r3, #10
 8003086:	4013      	ands	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308c:	4b2f      	ldr	r3, [pc, #188]	; (800314c <HAL_UART_MspInit+0x1b8>)
 800308e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8003092:	2101      	movs	r1, #1
 8003094:	430a      	orrs	r2, r1
 8003096:	635a      	str	r2, [r3, #52]	; 0x34
 8003098:	4b2c      	ldr	r3, [pc, #176]	; (800314c <HAL_UART_MspInit+0x1b8>)
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	2201      	movs	r2, #1
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 80030a4:	2154      	movs	r1, #84	; 0x54
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	220c      	movs	r2, #12
 80030aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	2202      	movs	r2, #2
 80030b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	2201      	movs	r2, #1
 80030b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	2201      	movs	r2, #1
 80030c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c4:	187a      	adds	r2, r7, r1
 80030c6:	23a0      	movs	r3, #160	; 0xa0
 80030c8:	05db      	lsls	r3, r3, #23
 80030ca:	0011      	movs	r1, r2
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 fb0b 	bl	80036e8 <HAL_GPIO_Init>
}
 80030d2:	e035      	b.n	8003140 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_UART_MspInit+0x1c0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d130      	bne.n	8003140 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_UART_MspInit+0x1b8>)
 80030e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <HAL_UART_MspInit+0x1b8>)
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	02c9      	lsls	r1, r1, #11
 80030e8:	430a      	orrs	r2, r1
 80030ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_UART_MspInit+0x1b8>)
 80030ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	02db      	lsls	r3, r3, #11
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_UART_MspInit+0x1b8>)
 80030fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8003100:	2104      	movs	r1, #4
 8003102:	430a      	orrs	r2, r1
 8003104:	635a      	str	r2, [r3, #52]	; 0x34
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_UART_MspInit+0x1b8>)
 8003108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310a:	2204      	movs	r2, #4
 800310c:	4013      	ands	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8003112:	2154      	movs	r1, #84	; 0x54
 8003114:	187b      	adds	r3, r7, r1
 8003116:	22c0      	movs	r2, #192	; 0xc0
 8003118:	0112      	lsls	r2, r2, #4
 800311a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2202      	movs	r2, #2
 8003120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	187b      	adds	r3, r7, r1
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	187b      	adds	r3, r7, r1
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 800312e:	187b      	adds	r3, r7, r1
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003134:	187b      	adds	r3, r7, r1
 8003136:	4a08      	ldr	r2, [pc, #32]	; (8003158 <HAL_UART_MspInit+0x1c4>)
 8003138:	0019      	movs	r1, r3
 800313a:	0010      	movs	r0, r2
 800313c:	f000 fad4 	bl	80036e8 <HAL_GPIO_Init>
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b01b      	add	sp, #108	; 0x6c
 8003146:	bd90      	pop	{r4, r7, pc}
 8003148:	40013800 	.word	0x40013800
 800314c:	40021000 	.word	0x40021000
 8003150:	40004400 	.word	0x40004400
 8003154:	40004800 	.word	0x40004800
 8003158:	50000800 	.word	0x50000800

0800315c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_UART_MspDeInit+0x80>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10e      	bne.n	800318c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_UART_MspDeInit+0x84>)
 8003170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003172:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_UART_MspDeInit+0x84>)
 8003174:	491b      	ldr	r1, [pc, #108]	; (80031e4 <HAL_UART_MspDeInit+0x88>)
 8003176:	400a      	ands	r2, r1
 8003178:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 800317a:	23c0      	movs	r3, #192	; 0xc0
 800317c:	00da      	lsls	r2, r3, #3
 800317e:	23a0      	movs	r3, #160	; 0xa0
 8003180:	05db      	lsls	r3, r3, #23
 8003182:	0011      	movs	r1, r2
 8003184:	0018      	movs	r0, r3
 8003186:	f000 fc13 	bl	80039b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800318a:	e023      	b.n	80031d4 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <HAL_UART_MspDeInit+0x8c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10c      	bne.n	80031b0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_UART_MspDeInit+0x84>)
 8003198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_UART_MspDeInit+0x84>)
 800319c:	4913      	ldr	r1, [pc, #76]	; (80031ec <HAL_UART_MspDeInit+0x90>)
 800319e:	400a      	ands	r2, r1
 80031a0:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 80031a2:	23a0      	movs	r3, #160	; 0xa0
 80031a4:	05db      	lsls	r3, r3, #23
 80031a6:	210c      	movs	r1, #12
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 fc01 	bl	80039b0 <HAL_GPIO_DeInit>
}
 80031ae:	e011      	b.n	80031d4 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <HAL_UART_MspDeInit+0x94>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10c      	bne.n	80031d4 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_UART_MspDeInit+0x84>)
 80031bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_UART_MspDeInit+0x84>)
 80031c0:	490c      	ldr	r1, [pc, #48]	; (80031f4 <HAL_UART_MspDeInit+0x98>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 80031c6:	23c0      	movs	r3, #192	; 0xc0
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	4a0b      	ldr	r2, [pc, #44]	; (80031f8 <HAL_UART_MspDeInit+0x9c>)
 80031cc:	0019      	movs	r1, r3
 80031ce:	0010      	movs	r0, r2
 80031d0:	f000 fbee 	bl	80039b0 <HAL_GPIO_DeInit>
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40013800 	.word	0x40013800
 80031e0:	40021000 	.word	0x40021000
 80031e4:	ffffbfff 	.word	0xffffbfff
 80031e8:	40004400 	.word	0x40004400
 80031ec:	fffdffff 	.word	0xfffdffff
 80031f0:	40004800 	.word	0x40004800
 80031f4:	fffbffff 	.word	0xfffbffff
 80031f8:	50000800 	.word	0x50000800

080031fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <NMI_Handler+0x4>

08003202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003206:	e7fe      	b.n	8003206 <HardFault_Handler+0x4>

08003208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003220:	f000 f968 	bl	80034f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003232:	0018      	movs	r0, r3
 8003234:	f002 f9c2 	bl	80055bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000284 	.word	0x20000284

08003244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  return 1;
 8003248:	2301      	movs	r3, #1
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <_kill>:

int _kill(int pid, int sig)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800325a:	f006 f8a9 	bl	80093b0 <__errno>
 800325e:	0003      	movs	r3, r0
 8003260:	2216      	movs	r2, #22
 8003262:	601a      	str	r2, [r3, #0]
  return -1;
 8003264:	2301      	movs	r3, #1
 8003266:	425b      	negs	r3, r3
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}

08003270 <_exit>:

void _exit (int status)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003278:	2301      	movs	r3, #1
 800327a:	425a      	negs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	0011      	movs	r1, r2
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff ffe5 	bl	8003250 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003286:	e7fe      	b.n	8003286 <_exit+0x16>

08003288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e00a      	b.n	80032b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800329a:	e000      	b.n	800329e <_read+0x16>
 800329c:	bf00      	nop
 800329e:	0001      	movs	r1, r0
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	60ba      	str	r2, [r7, #8]
 80032a6:	b2ca      	uxtb	r2, r1
 80032a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	3301      	adds	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	dbf0      	blt.n	800329a <_read+0x12>
  }

  return len;
 80032b8:	687b      	ldr	r3, [r7, #4]
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e009      	b.n	80032e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	60ba      	str	r2, [r7, #8]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	0018      	movs	r0, r3
 80032de:	e000      	b.n	80032e2 <_write+0x20>
 80032e0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3301      	adds	r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	dbf1      	blt.n	80032d4 <_write+0x12>
  }
  return len;
 80032f0:	687b      	ldr	r3, [r7, #4]
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b006      	add	sp, #24
 80032f8:	bd80      	pop	{r7, pc}

080032fa <_close>:

int _close(int file)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003302:	2301      	movs	r3, #1
 8003304:	425b      	negs	r3, r3
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	b002      	add	sp, #8
 800330c:	bd80      	pop	{r7, pc}

0800330e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	0192      	lsls	r2, r2, #6
 800331e:	605a      	str	r2, [r3, #4]
  return 0;
 8003320:	2300      	movs	r3, #0
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}

0800332a <_isatty>:

int _isatty(int file)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003332:	2301      	movs	r3, #1
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b004      	add	sp, #16
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <_sbrk+0x5c>)
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <_sbrk+0x60>)
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <_sbrk+0x64>)
 8003372:	4a12      	ldr	r2, [pc, #72]	; (80033bc <_sbrk+0x68>)
 8003374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <_sbrk+0x64>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	18d3      	adds	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d207      	bcs.n	8003394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003384:	f006 f814 	bl	80093b0 <__errno>
 8003388:	0003      	movs	r3, r0
 800338a:	220c      	movs	r2, #12
 800338c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800338e:	2301      	movs	r3, #1
 8003390:	425b      	negs	r3, r3
 8003392:	e009      	b.n	80033a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <_sbrk+0x64>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <_sbrk+0x64>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	18d2      	adds	r2, r2, r3
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <_sbrk+0x64>)
 80033a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b006      	add	sp, #24
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20009000 	.word	0x20009000
 80033b4:	00000400 	.word	0x00000400
 80033b8:	2000065c 	.word	0x2000065c
 80033bc:	200007b0 	.word	0x200007b0

080033c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033cc:	480d      	ldr	r0, [pc, #52]	; (8003404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033d0:	f7ff fff6 	bl	80033c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d4:	480c      	ldr	r0, [pc, #48]	; (8003408 <LoopForever+0x6>)
  ldr r1, =_edata
 80033d6:	490d      	ldr	r1, [pc, #52]	; (800340c <LoopForever+0xa>)
  ldr r2, =_sidata
 80033d8:	4a0d      	ldr	r2, [pc, #52]	; (8003410 <LoopForever+0xe>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033dc:	e002      	b.n	80033e4 <LoopCopyDataInit>

080033de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e2:	3304      	adds	r3, #4

080033e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e8:	d3f9      	bcc.n	80033de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033ec:	4c0a      	ldr	r4, [pc, #40]	; (8003418 <LoopForever+0x16>)
  movs r3, #0
 80033ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f0:	e001      	b.n	80033f6 <LoopFillZerobss>

080033f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f4:	3204      	adds	r2, #4

080033f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f8:	d3fb      	bcc.n	80033f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033fa:	f005 ffdf 	bl	80093bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80033fe:	f7ff f8a5 	bl	800254c <main>

08003402 <LoopForever>:

LoopForever:
  b LoopForever
 8003402:	e7fe      	b.n	8003402 <LoopForever>
  ldr   r0, =_estack
 8003404:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800340c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003410:	0800cc54 	.word	0x0800cc54
  ldr r2, =_sbss
 8003414:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003418:	200007b0 	.word	0x200007b0

0800341c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800341c:	e7fe      	b.n	800341c <ADC1_COMP_IRQHandler>
	...

08003420 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_Init+0x3c>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <HAL_Init+0x3c>)
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	0049      	lsls	r1, r1, #1
 8003436:	430a      	orrs	r2, r1
 8003438:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800343a:	2000      	movs	r0, #0
 800343c:	f000 f810 	bl	8003460 <HAL_InitTick>
 8003440:	1e03      	subs	r3, r0, #0
 8003442:	d003      	beq.n	800344c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e001      	b.n	8003450 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800344c:	f7ff fcb8 	bl	8002dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	781b      	ldrb	r3, [r3, #0]
}
 8003454:	0018      	movs	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40022000 	.word	0x40022000

08003460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003468:	230f      	movs	r3, #15
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_InitTick+0x88>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02b      	beq.n	80034d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <HAL_InitTick+0x8c>)
 800347a:	681c      	ldr	r4, [r3, #0]
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_InitTick+0x88>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	0019      	movs	r1, r3
 8003482:	23fa      	movs	r3, #250	; 0xfa
 8003484:	0098      	lsls	r0, r3, #2
 8003486:	f7fc fe59 	bl	800013c <__udivsi3>
 800348a:	0003      	movs	r3, r0
 800348c:	0019      	movs	r1, r3
 800348e:	0020      	movs	r0, r4
 8003490:	f7fc fe54 	bl	800013c <__udivsi3>
 8003494:	0003      	movs	r3, r0
 8003496:	0018      	movs	r0, r3
 8003498:	f000 f919 	bl	80036ce <HAL_SYSTICK_Config>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d112      	bne.n	80034c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d80a      	bhi.n	80034bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	2301      	movs	r3, #1
 80034aa:	425b      	negs	r3, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	0018      	movs	r0, r3
 80034b0:	f000 f8e8 	bl	8003684 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_InitTick+0x90>)
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e00d      	b.n	80034d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034bc:	230f      	movs	r3, #15
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e008      	b.n	80034d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034c6:	230f      	movs	r3, #15
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e003      	b.n	80034d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034d0:	230f      	movs	r3, #15
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034d8:	230f      	movs	r3, #15
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	781b      	ldrb	r3, [r3, #0]
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b005      	add	sp, #20
 80034e4:	bd90      	pop	{r4, r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	20000018 	.word	0x20000018
 80034ec:	20000010 	.word	0x20000010
 80034f0:	20000014 	.word	0x20000014

080034f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_IncTick+0x1c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	001a      	movs	r2, r3
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_IncTick+0x20>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	18d2      	adds	r2, r2, r3
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_IncTick+0x20>)
 8003506:	601a      	str	r2, [r3, #0]
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	20000018 	.word	0x20000018
 8003514:	20000660 	.word	0x20000660

08003518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  return uwTick;
 800351c:	4b02      	ldr	r3, [pc, #8]	; (8003528 <HAL_GetTick+0x10>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000660 	.word	0x20000660

0800352c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	0002      	movs	r2, r0
 8003534:	1dfb      	adds	r3, r7, #7
 8003536:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003538:	1dfb      	adds	r3, r7, #7
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b7f      	cmp	r3, #127	; 0x7f
 800353e:	d809      	bhi.n	8003554 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003540:	1dfb      	adds	r3, r7, #7
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	001a      	movs	r2, r3
 8003546:	231f      	movs	r3, #31
 8003548:	401a      	ands	r2, r3
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <__NVIC_EnableIRQ+0x30>)
 800354c:	2101      	movs	r1, #1
 800354e:	4091      	lsls	r1, r2
 8003550:	000a      	movs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}
 800355c:	e000e100 	.word	0xe000e100

08003560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	0002      	movs	r2, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b7f      	cmp	r3, #127	; 0x7f
 8003574:	d828      	bhi.n	80035c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003576:	4a2f      	ldr	r2, [pc, #188]	; (8003634 <__NVIC_SetPriority+0xd4>)
 8003578:	1dfb      	adds	r3, r7, #7
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b25b      	sxtb	r3, r3
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	33c0      	adds	r3, #192	; 0xc0
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	589b      	ldr	r3, [r3, r2]
 8003586:	1dfa      	adds	r2, r7, #7
 8003588:	7812      	ldrb	r2, [r2, #0]
 800358a:	0011      	movs	r1, r2
 800358c:	2203      	movs	r2, #3
 800358e:	400a      	ands	r2, r1
 8003590:	00d2      	lsls	r2, r2, #3
 8003592:	21ff      	movs	r1, #255	; 0xff
 8003594:	4091      	lsls	r1, r2
 8003596:	000a      	movs	r2, r1
 8003598:	43d2      	mvns	r2, r2
 800359a:	401a      	ands	r2, r3
 800359c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	22ff      	movs	r2, #255	; 0xff
 80035a4:	401a      	ands	r2, r3
 80035a6:	1dfb      	adds	r3, r7, #7
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	0018      	movs	r0, r3
 80035ac:	2303      	movs	r3, #3
 80035ae:	4003      	ands	r3, r0
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035b4:	481f      	ldr	r0, [pc, #124]	; (8003634 <__NVIC_SetPriority+0xd4>)
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	430a      	orrs	r2, r1
 80035c0:	33c0      	adds	r3, #192	; 0xc0
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80035c6:	e031      	b.n	800362c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <__NVIC_SetPriority+0xd8>)
 80035ca:	1dfb      	adds	r3, r7, #7
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	0019      	movs	r1, r3
 80035d0:	230f      	movs	r3, #15
 80035d2:	400b      	ands	r3, r1
 80035d4:	3b08      	subs	r3, #8
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3306      	adds	r3, #6
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	18d3      	adds	r3, r2, r3
 80035de:	3304      	adds	r3, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1dfa      	adds	r2, r7, #7
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	0011      	movs	r1, r2
 80035e8:	2203      	movs	r2, #3
 80035ea:	400a      	ands	r2, r1
 80035ec:	00d2      	lsls	r2, r2, #3
 80035ee:	21ff      	movs	r1, #255	; 0xff
 80035f0:	4091      	lsls	r1, r2
 80035f2:	000a      	movs	r2, r1
 80035f4:	43d2      	mvns	r2, r2
 80035f6:	401a      	ands	r2, r3
 80035f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	22ff      	movs	r2, #255	; 0xff
 8003600:	401a      	ands	r2, r3
 8003602:	1dfb      	adds	r3, r7, #7
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	0018      	movs	r0, r3
 8003608:	2303      	movs	r3, #3
 800360a:	4003      	ands	r3, r0
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003610:	4809      	ldr	r0, [pc, #36]	; (8003638 <__NVIC_SetPriority+0xd8>)
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	001c      	movs	r4, r3
 8003618:	230f      	movs	r3, #15
 800361a:	4023      	ands	r3, r4
 800361c:	3b08      	subs	r3, #8
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	430a      	orrs	r2, r1
 8003622:	3306      	adds	r3, #6
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	18c3      	adds	r3, r0, r3
 8003628:	3304      	adds	r3, #4
 800362a:	601a      	str	r2, [r3, #0]
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b003      	add	sp, #12
 8003632:	bd90      	pop	{r4, r7, pc}
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	1e5a      	subs	r2, r3, #1
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	045b      	lsls	r3, r3, #17
 800364c:	429a      	cmp	r2, r3
 800364e:	d301      	bcc.n	8003654 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003650:	2301      	movs	r3, #1
 8003652:	e010      	b.n	8003676 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <SysTick_Config+0x44>)
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	3a01      	subs	r2, #1
 800365a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365c:	2301      	movs	r3, #1
 800365e:	425b      	negs	r3, r3
 8003660:	2103      	movs	r1, #3
 8003662:	0018      	movs	r0, r3
 8003664:	f7ff ff7c 	bl	8003560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <SysTick_Config+0x44>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <SysTick_Config+0x44>)
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003674:	2300      	movs	r3, #0
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b002      	add	sp, #8
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	e000e010 	.word	0xe000e010

08003684 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	210f      	movs	r1, #15
 8003690:	187b      	adds	r3, r7, r1
 8003692:	1c02      	adds	r2, r0, #0
 8003694:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	187b      	adds	r3, r7, r1
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	b25b      	sxtb	r3, r3
 800369e:	0011      	movs	r1, r2
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7ff ff5d 	bl	8003560 <__NVIC_SetPriority>
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b004      	add	sp, #16
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	0002      	movs	r2, r0
 80036b6:	1dfb      	adds	r3, r7, #7
 80036b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ba:	1dfb      	adds	r3, r7, #7
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b25b      	sxtb	r3, r3
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff ff33 	bl	800352c <__NVIC_EnableIRQ>
}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b002      	add	sp, #8
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f7ff ffaf 	bl	800363c <SysTick_Config>
 80036de:	0003      	movs	r3, r0
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f6:	e147      	b.n	8003988 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4091      	lsls	r1, r2
 8003702:	000a      	movs	r2, r1
 8003704:	4013      	ands	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d100      	bne.n	8003710 <HAL_GPIO_Init+0x28>
 800370e:	e138      	b.n	8003982 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2203      	movs	r2, #3
 8003716:	4013      	ands	r3, r2
 8003718:	2b01      	cmp	r3, #1
 800371a:	d005      	beq.n	8003728 <HAL_GPIO_Init+0x40>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2203      	movs	r2, #3
 8003722:	4013      	ands	r3, r2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d130      	bne.n	800378a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	409a      	lsls	r2, r3
 8003736:	0013      	movs	r3, r2
 8003738:	43da      	mvns	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	409a      	lsls	r2, r3
 800374a:	0013      	movs	r3, r2
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800375e:	2201      	movs	r2, #1
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
 8003764:	0013      	movs	r3, r2
 8003766:	43da      	mvns	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	2201      	movs	r2, #1
 8003776:	401a      	ands	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	409a      	lsls	r2, r3
 800377c:	0013      	movs	r3, r2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2203      	movs	r2, #3
 8003790:	4013      	ands	r3, r2
 8003792:	2b03      	cmp	r3, #3
 8003794:	d017      	beq.n	80037c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2203      	movs	r2, #3
 80037a2:	409a      	lsls	r2, r3
 80037a4:	0013      	movs	r3, r2
 80037a6:	43da      	mvns	r2, r3
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	409a      	lsls	r2, r3
 80037b8:	0013      	movs	r3, r2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2203      	movs	r2, #3
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d123      	bne.n	800381a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	08da      	lsrs	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3208      	adds	r2, #8
 80037da:	0092      	lsls	r2, r2, #2
 80037dc:	58d3      	ldr	r3, [r2, r3]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2207      	movs	r2, #7
 80037e4:	4013      	ands	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	220f      	movs	r2, #15
 80037ea:	409a      	lsls	r2, r3
 80037ec:	0013      	movs	r3, r2
 80037ee:	43da      	mvns	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2107      	movs	r1, #7
 80037fe:	400b      	ands	r3, r1
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	409a      	lsls	r2, r3
 8003804:	0013      	movs	r3, r2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	0092      	lsls	r2, r2, #2
 8003816:	6939      	ldr	r1, [r7, #16]
 8003818:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	2203      	movs	r2, #3
 8003826:	409a      	lsls	r2, r3
 8003828:	0013      	movs	r3, r2
 800382a:	43da      	mvns	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2203      	movs	r2, #3
 8003838:	401a      	ands	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	0013      	movs	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	23c0      	movs	r3, #192	; 0xc0
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	4013      	ands	r3, r2
 8003858:	d100      	bne.n	800385c <HAL_GPIO_Init+0x174>
 800385a:	e092      	b.n	8003982 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800385c:	4a50      	ldr	r2, [pc, #320]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	3318      	adds	r3, #24
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	589b      	ldr	r3, [r3, r2]
 8003868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2203      	movs	r2, #3
 800386e:	4013      	ands	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	220f      	movs	r2, #15
 8003874:	409a      	lsls	r2, r3
 8003876:	0013      	movs	r3, r2
 8003878:	43da      	mvns	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	23a0      	movs	r3, #160	; 0xa0
 8003884:	05db      	lsls	r3, r3, #23
 8003886:	429a      	cmp	r2, r3
 8003888:	d013      	beq.n	80038b2 <HAL_GPIO_Init+0x1ca>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a45      	ldr	r2, [pc, #276]	; (80039a4 <HAL_GPIO_Init+0x2bc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_GPIO_Init+0x1c6>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a44      	ldr	r2, [pc, #272]	; (80039a8 <HAL_GPIO_Init+0x2c0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <HAL_GPIO_Init+0x1c2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a43      	ldr	r2, [pc, #268]	; (80039ac <HAL_GPIO_Init+0x2c4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_GPIO_Init+0x1be>
 80038a2:	2303      	movs	r3, #3
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x1cc>
 80038a6:	2305      	movs	r3, #5
 80038a8:	e004      	b.n	80038b4 <HAL_GPIO_Init+0x1cc>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_Init+0x1cc>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x1cc>
 80038b2:	2300      	movs	r3, #0
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	2103      	movs	r1, #3
 80038b8:	400a      	ands	r2, r1
 80038ba:	00d2      	lsls	r2, r2, #3
 80038bc:	4093      	lsls	r3, r2
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80038c4:	4936      	ldr	r1, [pc, #216]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3318      	adds	r3, #24
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038d2:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	43da      	mvns	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	035b      	lsls	r3, r3, #13
 80038ea:	4013      	ands	r3, r2
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80038fc:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	43da      	mvns	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	039b      	lsls	r3, r3, #14
 8003914:	4013      	ands	r3, r2
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003920:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003926:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 8003928:	2384      	movs	r3, #132	; 0x84
 800392a:	58d3      	ldr	r3, [r2, r3]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	43da      	mvns	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	4013      	ands	r3, r2
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800394c:	4914      	ldr	r1, [pc, #80]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 800394e:	2284      	movs	r2, #132	; 0x84
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003954:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	58d3      	ldr	r3, [r2, r3]
 800395a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	43da      	mvns	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4013      	ands	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	025b      	lsls	r3, r3, #9
 800396e:	4013      	ands	r3, r2
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800397a:	4909      	ldr	r1, [pc, #36]	; (80039a0 <HAL_GPIO_Init+0x2b8>)
 800397c:	2280      	movs	r2, #128	; 0x80
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3301      	adds	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	40da      	lsrs	r2, r3
 8003990:	1e13      	subs	r3, r2, #0
 8003992:	d000      	beq.n	8003996 <HAL_GPIO_Init+0x2ae>
 8003994:	e6b0      	b.n	80036f8 <HAL_GPIO_Init+0x10>
  }
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b006      	add	sp, #24
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021800 	.word	0x40021800
 80039a4:	50000400 	.word	0x50000400
 80039a8:	50000800 	.word	0x50000800
 80039ac:	50000c00 	.word	0x50000c00

080039b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80039be:	e0b4      	b.n	8003b2a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80039c0:	2201      	movs	r2, #1
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	409a      	lsls	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d100      	bne.n	80039d4 <HAL_GPIO_DeInit+0x24>
 80039d2:	e0a7      	b.n	8003b24 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80039d4:	4a5a      	ldr	r2, [pc, #360]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	089b      	lsrs	r3, r3, #2
 80039da:	3318      	adds	r3, #24
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	589b      	ldr	r3, [r3, r2]
 80039e0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2203      	movs	r2, #3
 80039e6:	4013      	ands	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	220f      	movs	r2, #15
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	23a0      	movs	r3, #160	; 0xa0
 80039f8:	05db      	lsls	r3, r3, #23
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_DeInit+0x76>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a50      	ldr	r2, [pc, #320]	; (8003b44 <HAL_GPIO_DeInit+0x194>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_DeInit+0x72>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4f      	ldr	r2, [pc, #316]	; (8003b48 <HAL_GPIO_DeInit+0x198>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_GPIO_DeInit+0x6e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4e      	ldr	r2, [pc, #312]	; (8003b4c <HAL_GPIO_DeInit+0x19c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_GPIO_DeInit+0x6a>
 8003a16:	2303      	movs	r3, #3
 8003a18:	e006      	b.n	8003a28 <HAL_GPIO_DeInit+0x78>
 8003a1a:	2305      	movs	r3, #5
 8003a1c:	e004      	b.n	8003a28 <HAL_GPIO_DeInit+0x78>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e002      	b.n	8003a28 <HAL_GPIO_DeInit+0x78>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_GPIO_DeInit+0x78>
 8003a26:	2300      	movs	r3, #0
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	00d2      	lsls	r2, r2, #3
 8003a30:	4093      	lsls	r3, r2
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d136      	bne.n	8003aa6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003a38:	4a41      	ldr	r2, [pc, #260]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	58d3      	ldr	r3, [r2, r3]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	43d2      	mvns	r2, r2
 8003a42:	493f      	ldr	r1, [pc, #252]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003a4a:	4a3d      	ldr	r2, [pc, #244]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a4c:	2384      	movs	r3, #132	; 0x84
 8003a4e:	58d3      	ldr	r3, [r2, r3]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	43d2      	mvns	r2, r2
 8003a54:	493a      	ldr	r1, [pc, #232]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	2284      	movs	r2, #132	; 0x84
 8003a5a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003a5c:	4b38      	ldr	r3, [pc, #224]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43d9      	mvns	r1, r3
 8003a64:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003a6a:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	43d9      	mvns	r1, r3
 8003a72:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a74:	400a      	ands	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	220f      	movs	r2, #15
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003a88:	4a2d      	ldr	r2, [pc, #180]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	3318      	adds	r3, #24
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	589a      	ldr	r2, [r3, r2]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	43d9      	mvns	r1, r3
 8003a98:	4829      	ldr	r0, [pc, #164]	; (8003b40 <HAL_GPIO_DeInit+0x190>)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	2103      	movs	r1, #3
 8003ab0:	4099      	lsls	r1, r3
 8003ab2:	000b      	movs	r3, r1
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	58d3      	ldr	r3, [r2, r3]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	2107      	movs	r1, #7
 8003aca:	400a      	ands	r2, r1
 8003acc:	0092      	lsls	r2, r2, #2
 8003ace:	210f      	movs	r1, #15
 8003ad0:	4091      	lsls	r1, r2
 8003ad2:	000a      	movs	r2, r1
 8003ad4:	43d1      	mvns	r1, r2
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	08d2      	lsrs	r2, r2, #3
 8003ada:	4019      	ands	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	0092      	lsls	r2, r2, #2
 8003ae2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	0052      	lsls	r2, r2, #1
 8003aec:	2103      	movs	r1, #3
 8003aee:	4091      	lsls	r1, r2
 8003af0:	000a      	movs	r2, r1
 8003af2:	43d2      	mvns	r2, r2
 8003af4:	401a      	ands	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2101      	movs	r1, #1
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4091      	lsls	r1, r2
 8003b04:	000a      	movs	r2, r1
 8003b06:	43d2      	mvns	r2, r2
 8003b08:	401a      	ands	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	0052      	lsls	r2, r2, #1
 8003b16:	2103      	movs	r1, #3
 8003b18:	4091      	lsls	r1, r2
 8003b1a:	000a      	movs	r2, r1
 8003b1c:	43d2      	mvns	r2, r2
 8003b1e:	401a      	ands	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3301      	adds	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	40da      	lsrs	r2, r3
 8003b30:	1e13      	subs	r3, r2, #0
 8003b32:	d000      	beq.n	8003b36 <HAL_GPIO_DeInit+0x186>
 8003b34:	e744      	b.n	80039c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b006      	add	sp, #24
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021800 	.word	0x40021800
 8003b44:	50000400 	.word	0x50000400
 8003b48:	50000800 	.word	0x50000800
 8003b4c:	50000c00 	.word	0x50000c00

08003b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	0008      	movs	r0, r1
 8003b5a:	0011      	movs	r1, r2
 8003b5c:	1cbb      	adds	r3, r7, #2
 8003b5e:	1c02      	adds	r2, r0, #0
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	1c7b      	adds	r3, r7, #1
 8003b64:	1c0a      	adds	r2, r1, #0
 8003b66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b68:	1c7b      	adds	r3, r7, #1
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b70:	1cbb      	adds	r3, r7, #2
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b7a:	1cbb      	adds	r3, r7, #2
 8003b7c:	881a      	ldrh	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e082      	b.n	8003ca4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2241      	movs	r2, #65	; 0x41
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2240      	movs	r2, #64	; 0x40
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff f927 	bl	8002e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2241      	movs	r2, #65	; 0x41
 8003bbe:	2124      	movs	r1, #36	; 0x24
 8003bc0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	438a      	bics	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4934      	ldr	r1, [pc, #208]	; (8003cac <HAL_I2C_Init+0x120>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4931      	ldr	r1, [pc, #196]	; (8003cb0 <HAL_I2C_Init+0x124>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d108      	bne.n	8003c0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2180      	movs	r1, #128	; 0x80
 8003c02:	0209      	lsls	r1, r1, #8
 8003c04:	430a      	orrs	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	e007      	b.n	8003c1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2184      	movs	r1, #132	; 0x84
 8003c14:	0209      	lsls	r1, r1, #8
 8003c16:	430a      	orrs	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d104      	bne.n	8003c2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	491f      	ldr	r1, [pc, #124]	; (8003cb4 <HAL_I2C_Init+0x128>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	491a      	ldr	r1, [pc, #104]	; (8003cb0 <HAL_I2C_Init+0x124>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69d9      	ldr	r1, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2101      	movs	r1, #1
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2241      	movs	r2, #65	; 0x41
 8003c90:	2120      	movs	r1, #32
 8003c92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2242      	movs	r2, #66	; 0x42
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	f0ffffff 	.word	0xf0ffffff
 8003cb0:	ffff7fff 	.word	0xffff7fff
 8003cb4:	02008000 	.word	0x02008000

08003cb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2241      	movs	r2, #65	; 0x41
 8003cc6:	5c9b      	ldrb	r3, [r3, r2]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d138      	bne.n	8003d40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2240      	movs	r2, #64	; 0x40
 8003cd2:	5c9b      	ldrb	r3, [r3, r2]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e032      	b.n	8003d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2240      	movs	r2, #64	; 0x40
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2241      	movs	r2, #65	; 0x41
 8003ce8:	2124      	movs	r1, #36	; 0x24
 8003cea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4911      	ldr	r1, [pc, #68]	; (8003d4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d08:	400a      	ands	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2101      	movs	r1, #1
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2241      	movs	r2, #65	; 0x41
 8003d30:	2120      	movs	r1, #32
 8003d32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2240      	movs	r2, #64	; 0x40
 8003d38:	2100      	movs	r1, #0
 8003d3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	ffffefff 	.word	0xffffefff

08003d50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2241      	movs	r2, #65	; 0x41
 8003d5e:	5c9b      	ldrb	r3, [r3, r2]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d139      	bne.n	8003dda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2240      	movs	r2, #64	; 0x40
 8003d6a:	5c9b      	ldrb	r3, [r3, r2]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e033      	b.n	8003ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	2101      	movs	r1, #1
 8003d7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2241      	movs	r2, #65	; 0x41
 8003d80:	2124      	movs	r1, #36	; 0x24
 8003d82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2101      	movs	r1, #1
 8003d90:	438a      	bics	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2241      	movs	r2, #65	; 0x41
 8003dca:	2120      	movs	r1, #32
 8003dcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2240      	movs	r2, #64	; 0x40
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	fffff0ff 	.word	0xfffff0ff

08003de8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	0019      	movs	r1, r3
 8003dfa:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d11f      	bne.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	0013      	movs	r3, r2
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	189b      	adds	r3, r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4912      	ldr	r1, [pc, #72]	; (8003e64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f7fc f98e 	bl	800013c <__udivsi3>
 8003e20:	0003      	movs	r3, r0
 8003e22:	3301      	adds	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e26:	e008      	b.n	8003e3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e001      	b.n	8003e3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e009      	b.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	401a      	ands	r2, r3
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d0ed      	beq.n	8003e28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	fffff9ff 	.word	0xfffff9ff
 8003e60:	20000010 	.word	0x20000010
 8003e64:	000f4240 	.word	0x000f4240

08003e68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	23e0      	movs	r3, #224	; 0xe0
 8003e72:	01db      	lsls	r3, r3, #7
 8003e74:	4013      	ands	r3, r2
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000

08003e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e2fe      	b.n	8004490 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2201      	movs	r2, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <HAL_RCC_OscConfig+0x1e>
 8003e9c:	e07c      	b.n	8003f98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9e:	4bc3      	ldr	r3, [pc, #780]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2238      	movs	r2, #56	; 0x38
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea8:	4bc0      	ldr	r3, [pc, #768]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2203      	movs	r2, #3
 8003eae:	4013      	ands	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d102      	bne.n	8003ebe <HAL_RCC_OscConfig+0x3e>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d002      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec4:	4bb9      	ldr	r3, [pc, #740]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	029b      	lsls	r3, r3, #10
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d062      	beq.n	8003f96 <HAL_RCC_OscConfig+0x116>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d15e      	bne.n	8003f96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e2d9      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	025b      	lsls	r3, r3, #9
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x78>
 8003ee8:	4bb0      	ldr	r3, [pc, #704]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4baf      	ldr	r3, [pc, #700]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	0249      	lsls	r1, r1, #9
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e020      	b.n	8003f3a <HAL_RCC_OscConfig+0xba>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	23a0      	movs	r3, #160	; 0xa0
 8003efe:	02db      	lsls	r3, r3, #11
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d10e      	bne.n	8003f22 <HAL_RCC_OscConfig+0xa2>
 8003f04:	4ba9      	ldr	r3, [pc, #676]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4ba8      	ldr	r3, [pc, #672]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f0a:	2180      	movs	r1, #128	; 0x80
 8003f0c:	02c9      	lsls	r1, r1, #11
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	4ba6      	ldr	r3, [pc, #664]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4ba5      	ldr	r3, [pc, #660]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	0249      	lsls	r1, r1, #9
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e00b      	b.n	8003f3a <HAL_RCC_OscConfig+0xba>
 8003f22:	4ba2      	ldr	r3, [pc, #648]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4ba1      	ldr	r3, [pc, #644]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f28:	49a1      	ldr	r1, [pc, #644]	; (80041b0 <HAL_RCC_OscConfig+0x330>)
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	4b9f      	ldr	r3, [pc, #636]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b9e      	ldr	r3, [pc, #632]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f34:	499f      	ldr	r1, [pc, #636]	; (80041b4 <HAL_RCC_OscConfig+0x334>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d014      	beq.n	8003f6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7ff fae9 	bl	8003518 <HAL_GetTick>
 8003f46:	0003      	movs	r3, r0
 8003f48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7ff fae4 	bl	8003518 <HAL_GetTick>
 8003f50:	0002      	movs	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e298      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f5e:	4b93      	ldr	r3, [pc, #588]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	029b      	lsls	r3, r3, #10
 8003f66:	4013      	ands	r3, r2
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0xcc>
 8003f6a:	e015      	b.n	8003f98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7ff fad4 	bl	8003518 <HAL_GetTick>
 8003f70:	0003      	movs	r3, r0
 8003f72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f76:	f7ff facf 	bl	8003518 <HAL_GetTick>
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b64      	cmp	r3, #100	; 0x64
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e283      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f88:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	029b      	lsls	r3, r3, #10
 8003f90:	4013      	ands	r3, r2
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCC_OscConfig+0xf6>
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d100      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x124>
 8003fa2:	e099      	b.n	80040d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa4:	4b81      	ldr	r3, [pc, #516]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2238      	movs	r2, #56	; 0x38
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fae:	4b7f      	ldr	r3, [pc, #508]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d102      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x144>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d002      	beq.n	8003fca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d135      	bne.n	8004036 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fca:	4b78      	ldr	r3, [pc, #480]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x162>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e256      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe2:	4b72      	ldr	r3, [pc, #456]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4a74      	ldr	r2, [pc, #464]	; (80041b8 <HAL_RCC_OscConfig+0x338>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	021a      	lsls	r2, r3, #8
 8003ff2:	4b6e      	ldr	r3, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d112      	bne.n	8004024 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ffe:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6e      	ldr	r2, [pc, #440]	; (80041bc <HAL_RCC_OscConfig+0x33c>)
 8004004:	4013      	ands	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004012:	4b66      	ldr	r3, [pc, #408]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0adb      	lsrs	r3, r3, #11
 8004018:	2207      	movs	r2, #7
 800401a:	4013      	ands	r3, r2
 800401c:	4a68      	ldr	r2, [pc, #416]	; (80041c0 <HAL_RCC_OscConfig+0x340>)
 800401e:	40da      	lsrs	r2, r3
 8004020:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <HAL_RCC_OscConfig+0x344>)
 8004022:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004024:	4b68      	ldr	r3, [pc, #416]	; (80041c8 <HAL_RCC_OscConfig+0x348>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	0018      	movs	r0, r3
 800402a:	f7ff fa19 	bl	8003460 <HAL_InitTick>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d051      	beq.n	80040d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e22c      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d030      	beq.n	80040a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800403e:	4b5b      	ldr	r3, [pc, #364]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a5e      	ldr	r2, [pc, #376]	; (80041bc <HAL_RCC_OscConfig+0x33c>)
 8004044:	4013      	ands	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	4b57      	ldr	r3, [pc, #348]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004052:	4b56      	ldr	r3, [pc, #344]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b55      	ldr	r3, [pc, #340]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	0049      	lsls	r1, r1, #1
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7ff fa5a 	bl	8003518 <HAL_GetTick>
 8004064:	0003      	movs	r3, r0
 8004066:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406a:	f7ff fa55 	bl	8003518 <HAL_GetTick>
 800406e:	0002      	movs	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e209      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800407c:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4013      	ands	r3, r2
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b48      	ldr	r3, [pc, #288]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4a4a      	ldr	r2, [pc, #296]	; (80041b8 <HAL_RCC_OscConfig+0x338>)
 800408e:	4013      	ands	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	4b44      	ldr	r3, [pc, #272]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	e01b      	b.n	80040d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80040a0:	4b42      	ldr	r3, [pc, #264]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 80040a6:	4949      	ldr	r1, [pc, #292]	; (80041cc <HAL_RCC_OscConfig+0x34c>)
 80040a8:	400a      	ands	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7ff fa34 	bl	8003518 <HAL_GetTick>
 80040b0:	0003      	movs	r3, r0
 80040b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b6:	f7ff fa2f 	bl	8003518 <HAL_GetTick>
 80040ba:	0002      	movs	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e1e3      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c8:	4b38      	ldr	r3, [pc, #224]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4013      	ands	r3, r2
 80040d2:	d1f0      	bne.n	80040b6 <HAL_RCC_OscConfig+0x236>
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2208      	movs	r2, #8
 80040de:	4013      	ands	r3, r2
 80040e0:	d047      	beq.n	8004172 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040e2:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2238      	movs	r2, #56	; 0x38
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b18      	cmp	r3, #24
 80040ec:	d10a      	bne.n	8004104 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	2202      	movs	r2, #2
 80040f4:	4013      	ands	r3, r2
 80040f6:	d03c      	beq.n	8004172 <HAL_RCC_OscConfig+0x2f2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d138      	bne.n	8004172 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e1c5      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d019      	beq.n	8004140 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 800410e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004110:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004112:	2101      	movs	r1, #1
 8004114:	430a      	orrs	r2, r1
 8004116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7ff f9fe 	bl	8003518 <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004122:	f7ff f9f9 	bl	8003518 <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e1ad      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004134:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004138:	2202      	movs	r2, #2
 800413a:	4013      	ands	r3, r2
 800413c:	d0f1      	beq.n	8004122 <HAL_RCC_OscConfig+0x2a2>
 800413e:	e018      	b.n	8004172 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004142:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004146:	2101      	movs	r1, #1
 8004148:	438a      	bics	r2, r1
 800414a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7ff f9e4 	bl	8003518 <HAL_GetTick>
 8004150:	0003      	movs	r3, r0
 8004152:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004156:	f7ff f9df 	bl	8003518 <HAL_GetTick>
 800415a:	0002      	movs	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e193      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 800416a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416c:	2202      	movs	r2, #2
 800416e:	4013      	ands	r3, r2
 8004170:	d1f1      	bne.n	8004156 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2204      	movs	r2, #4
 8004178:	4013      	ands	r3, r2
 800417a:	d100      	bne.n	800417e <HAL_RCC_OscConfig+0x2fe>
 800417c:	e0c6      	b.n	800430c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417e:	231f      	movs	r3, #31
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2238      	movs	r2, #56	; 0x38
 800418c:	4013      	ands	r3, r2
 800418e:	2b20      	cmp	r3, #32
 8004190:	d11e      	bne.n	80041d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_OscConfig+0x32c>)
 8004194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004196:	2202      	movs	r2, #2
 8004198:	4013      	ands	r3, r2
 800419a:	d100      	bne.n	800419e <HAL_RCC_OscConfig+0x31e>
 800419c:	e0b6      	b.n	800430c <HAL_RCC_OscConfig+0x48c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d000      	beq.n	80041a8 <HAL_RCC_OscConfig+0x328>
 80041a6:	e0b1      	b.n	800430c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e171      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
 80041ac:	40021000 	.word	0x40021000
 80041b0:	fffeffff 	.word	0xfffeffff
 80041b4:	fffbffff 	.word	0xfffbffff
 80041b8:	ffff80ff 	.word	0xffff80ff
 80041bc:	ffffc7ff 	.word	0xffffc7ff
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	20000010 	.word	0x20000010
 80041c8:	20000014 	.word	0x20000014
 80041cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041d0:	4bb1      	ldr	r3, [pc, #708]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80041d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	055b      	lsls	r3, r3, #21
 80041d8:	4013      	ands	r3, r2
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_OscConfig+0x360>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x362>
 80041e0:	2300      	movs	r3, #0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d011      	beq.n	800420a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	4bac      	ldr	r3, [pc, #688]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80041e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ea:	4bab      	ldr	r3, [pc, #684]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80041ec:	2180      	movs	r1, #128	; 0x80
 80041ee:	0549      	lsls	r1, r1, #21
 80041f0:	430a      	orrs	r2, r1
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80041f4:	4ba8      	ldr	r3, [pc, #672]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80041f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	055b      	lsls	r3, r3, #21
 80041fc:	4013      	ands	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004202:	231f      	movs	r3, #31
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420a:	4ba4      	ldr	r3, [pc, #656]	; (800449c <HAL_RCC_OscConfig+0x61c>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4013      	ands	r3, r2
 8004214:	d11a      	bne.n	800424c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004216:	4ba1      	ldr	r3, [pc, #644]	; (800449c <HAL_RCC_OscConfig+0x61c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4ba0      	ldr	r3, [pc, #640]	; (800449c <HAL_RCC_OscConfig+0x61c>)
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	0049      	lsls	r1, r1, #1
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004224:	f7ff f978 	bl	8003518 <HAL_GetTick>
 8004228:	0003      	movs	r3, r0
 800422a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7ff f973 	bl	8003518 <HAL_GetTick>
 8004232:	0002      	movs	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e127      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004240:	4b96      	ldr	r3, [pc, #600]	; (800449c <HAL_RCC_OscConfig+0x61c>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4013      	ands	r3, r2
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x3e2>
 8004254:	4b90      	ldr	r3, [pc, #576]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004258:	4b8f      	ldr	r3, [pc, #572]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 800425a:	2101      	movs	r1, #1
 800425c:	430a      	orrs	r2, r1
 800425e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004260:	e01c      	b.n	800429c <HAL_RCC_OscConfig+0x41c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b05      	cmp	r3, #5
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x404>
 800426a:	4b8b      	ldr	r3, [pc, #556]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 800426c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800426e:	4b8a      	ldr	r3, [pc, #552]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004270:	2104      	movs	r1, #4
 8004272:	430a      	orrs	r2, r1
 8004274:	65da      	str	r2, [r3, #92]	; 0x5c
 8004276:	4b88      	ldr	r3, [pc, #544]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004278:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800427a:	4b87      	ldr	r3, [pc, #540]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 800427c:	2101      	movs	r1, #1
 800427e:	430a      	orrs	r2, r1
 8004280:	65da      	str	r2, [r3, #92]	; 0x5c
 8004282:	e00b      	b.n	800429c <HAL_RCC_OscConfig+0x41c>
 8004284:	4b84      	ldr	r3, [pc, #528]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004286:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004288:	4b83      	ldr	r3, [pc, #524]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 800428a:	2101      	movs	r1, #1
 800428c:	438a      	bics	r2, r1
 800428e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004290:	4b81      	ldr	r3, [pc, #516]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004294:	4b80      	ldr	r3, [pc, #512]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004296:	2104      	movs	r1, #4
 8004298:	438a      	bics	r2, r1
 800429a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d014      	beq.n	80042ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7ff f938 	bl	8003518 <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ac:	e009      	b.n	80042c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7ff f933 	bl	8003518 <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	4a79      	ldr	r2, [pc, #484]	; (80044a0 <HAL_RCC_OscConfig+0x620>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0e6      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c2:	4b75      	ldr	r3, [pc, #468]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	2202      	movs	r2, #2
 80042c8:	4013      	ands	r3, r2
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x42e>
 80042cc:	e013      	b.n	80042f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7ff f923 	bl	8003518 <HAL_GetTick>
 80042d2:	0003      	movs	r3, r0
 80042d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d6:	e009      	b.n	80042ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f7ff f91e 	bl	8003518 <HAL_GetTick>
 80042dc:	0002      	movs	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	4a6f      	ldr	r2, [pc, #444]	; (80044a0 <HAL_RCC_OscConfig+0x620>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e0d1      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042ec:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	2202      	movs	r2, #2
 80042f2:	4013      	ands	r3, r2
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80042f6:	231f      	movs	r3, #31
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d105      	bne.n	800430c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004300:	4b65      	ldr	r3, [pc, #404]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004304:	4b64      	ldr	r3, [pc, #400]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004306:	4967      	ldr	r1, [pc, #412]	; (80044a4 <HAL_RCC_OscConfig+0x624>)
 8004308:	400a      	ands	r2, r1
 800430a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d100      	bne.n	8004316 <HAL_RCC_OscConfig+0x496>
 8004314:	e0bb      	b.n	800448e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004316:	4b60      	ldr	r3, [pc, #384]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2238      	movs	r2, #56	; 0x38
 800431c:	4013      	ands	r3, r2
 800431e:	2b10      	cmp	r3, #16
 8004320:	d100      	bne.n	8004324 <HAL_RCC_OscConfig+0x4a4>
 8004322:	e07b      	b.n	800441c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d156      	bne.n	80043da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432c:	4b5a      	ldr	r3, [pc, #360]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b59      	ldr	r3, [pc, #356]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004332:	495d      	ldr	r1, [pc, #372]	; (80044a8 <HAL_RCC_OscConfig+0x628>)
 8004334:	400a      	ands	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7ff f8ee 	bl	8003518 <HAL_GetTick>
 800433c:	0003      	movs	r3, r0
 800433e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004342:	f7ff f8e9 	bl	8003518 <HAL_GetTick>
 8004346:	0002      	movs	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e09d      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004354:	4b50      	ldr	r3, [pc, #320]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	049b      	lsls	r3, r3, #18
 800435c:	4013      	ands	r3, r2
 800435e:	d1f0      	bne.n	8004342 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004360:	4b4d      	ldr	r3, [pc, #308]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4a51      	ldr	r2, [pc, #324]	; (80044ac <HAL_RCC_OscConfig+0x62c>)
 8004366:	4013      	ands	r3, r2
 8004368:	0019      	movs	r1, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1a      	ldr	r2, [r3, #32]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438c:	431a      	orrs	r2, r3
 800438e:	4b42      	ldr	r3, [pc, #264]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004390:	430a      	orrs	r2, r1
 8004392:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004394:	4b40      	ldr	r3, [pc, #256]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 800439a:	2180      	movs	r1, #128	; 0x80
 800439c:	0449      	lsls	r1, r1, #17
 800439e:	430a      	orrs	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80043a2:	4b3d      	ldr	r3, [pc, #244]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	4b3c      	ldr	r3, [pc, #240]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	0549      	lsls	r1, r1, #21
 80043ac:	430a      	orrs	r2, r1
 80043ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7ff f8b2 	bl	8003518 <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ba:	f7ff f8ad 	bl	8003518 <HAL_GetTick>
 80043be:	0002      	movs	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e061      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043cc:	4b32      	ldr	r3, [pc, #200]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	049b      	lsls	r3, r3, #18
 80043d4:	4013      	ands	r3, r2
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCC_OscConfig+0x53a>
 80043d8:	e059      	b.n	800448e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043da:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b2e      	ldr	r3, [pc, #184]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 80043e0:	4931      	ldr	r1, [pc, #196]	; (80044a8 <HAL_RCC_OscConfig+0x628>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7ff f897 	bl	8003518 <HAL_GetTick>
 80043ea:	0003      	movs	r3, r0
 80043ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7ff f892 	bl	8003518 <HAL_GetTick>
 80043f4:	0002      	movs	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e046      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004402:	4b25      	ldr	r3, [pc, #148]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	049b      	lsls	r3, r3, #18
 800440a:	4013      	ands	r3, r2
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800440e:	4b22      	ldr	r3, [pc, #136]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	4b21      	ldr	r3, [pc, #132]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 8004414:	4926      	ldr	r1, [pc, #152]	; (80044b0 <HAL_RCC_OscConfig+0x630>)
 8004416:	400a      	ands	r2, r1
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	e038      	b.n	800448e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e033      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCC_OscConfig+0x618>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2203      	movs	r2, #3
 8004432:	401a      	ands	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	429a      	cmp	r2, r3
 800443a:	d126      	bne.n	800448a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2270      	movs	r2, #112	; 0x70
 8004440:	401a      	ands	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d11f      	bne.n	800448a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	23fe      	movs	r3, #254	; 0xfe
 800444e:	01db      	lsls	r3, r3, #7
 8004450:	401a      	ands	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d116      	bne.n	800448a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	23f8      	movs	r3, #248	; 0xf8
 8004460:	039b      	lsls	r3, r3, #14
 8004462:	401a      	ands	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d10e      	bne.n	800448a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	23e0      	movs	r3, #224	; 0xe0
 8004470:	051b      	lsls	r3, r3, #20
 8004472:	401a      	ands	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	0f5b      	lsrs	r3, r3, #29
 8004480:	075a      	lsls	r2, r3, #29
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	b008      	add	sp, #32
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	40007000 	.word	0x40007000
 80044a0:	00001388 	.word	0x00001388
 80044a4:	efffffff 	.word	0xefffffff
 80044a8:	feffffff 	.word	0xfeffffff
 80044ac:	11c1808c 	.word	0x11c1808c
 80044b0:	eefefffc 	.word	0xeefefffc

080044b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0e9      	b.n	800469c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c8:	4b76      	ldr	r3, [pc, #472]	; (80046a4 <HAL_RCC_ClockConfig+0x1f0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2207      	movs	r2, #7
 80044ce:	4013      	ands	r3, r2
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d91e      	bls.n	8004514 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b73      	ldr	r3, [pc, #460]	; (80046a4 <HAL_RCC_ClockConfig+0x1f0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2207      	movs	r2, #7
 80044dc:	4393      	bics	r3, r2
 80044de:	0019      	movs	r1, r3
 80044e0:	4b70      	ldr	r3, [pc, #448]	; (80046a4 <HAL_RCC_ClockConfig+0x1f0>)
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044e8:	f7ff f816 	bl	8003518 <HAL_GetTick>
 80044ec:	0003      	movs	r3, r0
 80044ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044f0:	e009      	b.n	8004506 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f2:	f7ff f811 	bl	8003518 <HAL_GetTick>
 80044f6:	0002      	movs	r2, r0
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	4a6a      	ldr	r2, [pc, #424]	; (80046a8 <HAL_RCC_ClockConfig+0x1f4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0ca      	b.n	800469c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004506:	4b67      	ldr	r3, [pc, #412]	; (80046a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2207      	movs	r2, #7
 800450c:	4013      	ands	r3, r2
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d1ee      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2202      	movs	r2, #2
 800451a:	4013      	ands	r3, r2
 800451c:	d015      	beq.n	800454a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2204      	movs	r2, #4
 8004524:	4013      	ands	r3, r2
 8004526:	d006      	beq.n	8004536 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004528:	4b60      	ldr	r3, [pc, #384]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	4b5f      	ldr	r3, [pc, #380]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 800452e:	21e0      	movs	r1, #224	; 0xe0
 8004530:	01c9      	lsls	r1, r1, #7
 8004532:	430a      	orrs	r2, r1
 8004534:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004536:	4b5d      	ldr	r3, [pc, #372]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	4a5d      	ldr	r2, [pc, #372]	; (80046b0 <HAL_RCC_ClockConfig+0x1fc>)
 800453c:	4013      	ands	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2201      	movs	r2, #1
 8004550:	4013      	ands	r3, r2
 8004552:	d057      	beq.n	8004604 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	029b      	lsls	r3, r3, #10
 8004564:	4013      	ands	r3, r2
 8004566:	d12b      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e097      	b.n	800469c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d107      	bne.n	8004584 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004574:	4b4d      	ldr	r3, [pc, #308]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	049b      	lsls	r3, r3, #18
 800457c:	4013      	ands	r3, r2
 800457e:	d11f      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e08b      	b.n	800469c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d107      	bne.n	800459c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800458c:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4013      	ands	r3, r2
 8004596:	d113      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e07f      	b.n	800469c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045a4:	4b41      	ldr	r3, [pc, #260]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 80045a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a8:	2202      	movs	r2, #2
 80045aa:	4013      	ands	r3, r2
 80045ac:	d108      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e074      	b.n	800469c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b2:	4b3e      	ldr	r3, [pc, #248]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 80045b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b6:	2202      	movs	r2, #2
 80045b8:	4013      	ands	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e06d      	b.n	800469c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c0:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2207      	movs	r2, #7
 80045c6:	4393      	bics	r3, r2
 80045c8:	0019      	movs	r1, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d4:	f7fe ffa0 	bl	8003518 <HAL_GetTick>
 80045d8:	0003      	movs	r3, r0
 80045da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045dc:	e009      	b.n	80045f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045de:	f7fe ff9b 	bl	8003518 <HAL_GetTick>
 80045e2:	0002      	movs	r2, r0
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	4a2f      	ldr	r2, [pc, #188]	; (80046a8 <HAL_RCC_ClockConfig+0x1f4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e054      	b.n	800469c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2238      	movs	r2, #56	; 0x38
 80045f8:	401a      	ands	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	429a      	cmp	r2, r3
 8004602:	d1ec      	bne.n	80045de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004604:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2207      	movs	r2, #7
 800460a:	4013      	ands	r3, r2
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d21e      	bcs.n	8004650 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2207      	movs	r2, #7
 8004618:	4393      	bics	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCC_ClockConfig+0x1f0>)
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004624:	f7fe ff78 	bl	8003518 <HAL_GetTick>
 8004628:	0003      	movs	r3, r0
 800462a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800462c:	e009      	b.n	8004642 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462e:	f7fe ff73 	bl	8003518 <HAL_GetTick>
 8004632:	0002      	movs	r2, r0
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <HAL_RCC_ClockConfig+0x1f4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e02c      	b.n	800469c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004642:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2207      	movs	r2, #7
 8004648:	4013      	ands	r3, r2
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d1ee      	bne.n	800462e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2204      	movs	r2, #4
 8004656:	4013      	ands	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800465a:	4b14      	ldr	r3, [pc, #80]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <HAL_RCC_ClockConfig+0x200>)
 8004660:	4013      	ands	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	4b10      	ldr	r3, [pc, #64]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800466e:	f000 f829 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8004672:	0001      	movs	r1, r0
 8004674:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <HAL_RCC_ClockConfig+0x1f8>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	220f      	movs	r2, #15
 800467c:	401a      	ands	r2, r3
 800467e:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_RCC_ClockConfig+0x204>)
 8004680:	0092      	lsls	r2, r2, #2
 8004682:	58d3      	ldr	r3, [r2, r3]
 8004684:	221f      	movs	r2, #31
 8004686:	4013      	ands	r3, r2
 8004688:	000a      	movs	r2, r1
 800468a:	40da      	lsrs	r2, r3
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCC_ClockConfig+0x208>)
 800468e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_ClockConfig+0x20c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0018      	movs	r0, r3
 8004696:	f7fe fee3 	bl	8003460 <HAL_InitTick>
 800469a:	0003      	movs	r3, r0
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b004      	add	sp, #16
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40022000 	.word	0x40022000
 80046a8:	00001388 	.word	0x00001388
 80046ac:	40021000 	.word	0x40021000
 80046b0:	fffff0ff 	.word	0xfffff0ff
 80046b4:	ffff8fff 	.word	0xffff8fff
 80046b8:	0800c778 	.word	0x0800c778
 80046bc:	20000010 	.word	0x20000010
 80046c0:	20000014 	.word	0x20000014

080046c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ca:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2238      	movs	r2, #56	; 0x38
 80046d0:	4013      	ands	r3, r2
 80046d2:	d10f      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046d4:	4b39      	ldr	r3, [pc, #228]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	0adb      	lsrs	r3, r3, #11
 80046da:	2207      	movs	r2, #7
 80046dc:	4013      	ands	r3, r2
 80046de:	2201      	movs	r2, #1
 80046e0:	409a      	lsls	r2, r3
 80046e2:	0013      	movs	r3, r2
 80046e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	4835      	ldr	r0, [pc, #212]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046ea:	f7fb fd27 	bl	800013c <__udivsi3>
 80046ee:	0003      	movs	r3, r0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	e05d      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f4:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2238      	movs	r2, #56	; 0x38
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d102      	bne.n	8004706 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004700:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	e054      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2238      	movs	r2, #56	; 0x38
 800470c:	4013      	ands	r3, r2
 800470e:	2b10      	cmp	r3, #16
 8004710:	d138      	bne.n	8004784 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004712:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2203      	movs	r2, #3
 8004718:	4013      	ands	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	2207      	movs	r2, #7
 8004724:	4013      	ands	r3, r2
 8004726:	3301      	adds	r3, #1
 8004728:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d10d      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4824      	ldr	r0, [pc, #144]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004734:	f7fb fd02 	bl	800013c <__udivsi3>
 8004738:	0003      	movs	r3, r0
 800473a:	0019      	movs	r1, r3
 800473c:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	227f      	movs	r2, #127	; 0x7f
 8004744:	4013      	ands	r3, r2
 8004746:	434b      	muls	r3, r1
 8004748:	617b      	str	r3, [r7, #20]
        break;
 800474a:	e00d      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	481c      	ldr	r0, [pc, #112]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004750:	f7fb fcf4 	bl	800013c <__udivsi3>
 8004754:	0003      	movs	r3, r0
 8004756:	0019      	movs	r1, r3
 8004758:	4b18      	ldr	r3, [pc, #96]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	227f      	movs	r2, #127	; 0x7f
 8004760:	4013      	ands	r3, r2
 8004762:	434b      	muls	r3, r1
 8004764:	617b      	str	r3, [r7, #20]
        break;
 8004766:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	0f5b      	lsrs	r3, r3, #29
 800476e:	2207      	movs	r2, #7
 8004770:	4013      	ands	r3, r2
 8004772:	3301      	adds	r3, #1
 8004774:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	f7fb fcdf 	bl	800013c <__udivsi3>
 800477e:	0003      	movs	r3, r0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	e015      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2238      	movs	r2, #56	; 0x38
 800478a:	4013      	ands	r3, r2
 800478c:	2b20      	cmp	r3, #32
 800478e:	d103      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004798:	4b08      	ldr	r3, [pc, #32]	; (80047bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2238      	movs	r2, #56	; 0x38
 800479e:	4013      	ands	r3, r2
 80047a0:	2b18      	cmp	r3, #24
 80047a2:	d103      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80047a4:	23fa      	movs	r3, #250	; 0xfa
 80047a6:	01db      	lsls	r3, r3, #7
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e001      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047b0:	693b      	ldr	r3, [r7, #16]
}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b006      	add	sp, #24
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	40021000 	.word	0x40021000
 80047c0:	00f42400 	.word	0x00f42400
 80047c4:	007a1200 	.word	0x007a1200

080047c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047cc:	4b02      	ldr	r3, [pc, #8]	; (80047d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ce:	681b      	ldr	r3, [r3, #0]
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	20000010 	.word	0x20000010

080047dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047dc:	b5b0      	push	{r4, r5, r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80047e0:	f7ff fff2 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 80047e4:	0004      	movs	r4, r0
 80047e6:	f7ff fb3f 	bl	8003e68 <LL_RCC_GetAPB1Prescaler>
 80047ea:	0003      	movs	r3, r0
 80047ec:	0b1a      	lsrs	r2, r3, #12
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047f0:	0092      	lsls	r2, r2, #2
 80047f2:	58d3      	ldr	r3, [r2, r3]
 80047f4:	221f      	movs	r2, #31
 80047f6:	4013      	ands	r3, r2
 80047f8:	40dc      	lsrs	r4, r3
 80047fa:	0023      	movs	r3, r4
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	bdb0      	pop	{r4, r5, r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	0800c7b8 	.word	0x0800c7b8

08004808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004810:	2313      	movs	r3, #19
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004818:	2312      	movs	r3, #18
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	029b      	lsls	r3, r3, #10
 8004828:	4013      	ands	r3, r2
 800482a:	d100      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800482c:	e0a3      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482e:	2011      	movs	r0, #17
 8004830:	183b      	adds	r3, r7, r0
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004836:	4bc3      	ldr	r3, [pc, #780]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483a:	2380      	movs	r3, #128	; 0x80
 800483c:	055b      	lsls	r3, r3, #21
 800483e:	4013      	ands	r3, r2
 8004840:	d110      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004842:	4bc0      	ldr	r3, [pc, #768]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004846:	4bbf      	ldr	r3, [pc, #764]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004848:	2180      	movs	r1, #128	; 0x80
 800484a:	0549      	lsls	r1, r1, #21
 800484c:	430a      	orrs	r2, r1
 800484e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004850:	4bbc      	ldr	r3, [pc, #752]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	055b      	lsls	r3, r3, #21
 8004858:	4013      	ands	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800485e:	183b      	adds	r3, r7, r0
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004864:	4bb8      	ldr	r3, [pc, #736]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4bb7      	ldr	r3, [pc, #732]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800486a:	2180      	movs	r1, #128	; 0x80
 800486c:	0049      	lsls	r1, r1, #1
 800486e:	430a      	orrs	r2, r1
 8004870:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004872:	f7fe fe51 	bl	8003518 <HAL_GetTick>
 8004876:	0003      	movs	r3, r0
 8004878:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800487a:	e00b      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487c:	f7fe fe4c 	bl	8003518 <HAL_GetTick>
 8004880:	0002      	movs	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d904      	bls.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800488a:	2313      	movs	r3, #19
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	2203      	movs	r2, #3
 8004890:	701a      	strb	r2, [r3, #0]
        break;
 8004892:	e005      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004894:	4bac      	ldr	r3, [pc, #688]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4013      	ands	r3, r2
 800489e:	d0ed      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80048a0:	2313      	movs	r3, #19
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d154      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048aa:	4ba6      	ldr	r3, [pc, #664]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048ae:	23c0      	movs	r3, #192	; 0xc0
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4013      	ands	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d019      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d014      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048c6:	4b9f      	ldr	r3, [pc, #636]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	4aa0      	ldr	r2, [pc, #640]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048d0:	4b9c      	ldr	r3, [pc, #624]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048d4:	4b9b      	ldr	r3, [pc, #620]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	0249      	lsls	r1, r1, #9
 80048da:	430a      	orrs	r2, r1
 80048dc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048de:	4b99      	ldr	r3, [pc, #612]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048e2:	4b98      	ldr	r3, [pc, #608]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048e4:	499a      	ldr	r1, [pc, #616]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80048e6:	400a      	ands	r2, r1
 80048e8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048ea:	4b96      	ldr	r3, [pc, #600]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2201      	movs	r2, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	d016      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fe fe0e 	bl	8003518 <HAL_GetTick>
 80048fc:	0003      	movs	r3, r0
 80048fe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004900:	e00c      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004902:	f7fe fe09 	bl	8003518 <HAL_GetTick>
 8004906:	0002      	movs	r2, r0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	4a91      	ldr	r2, [pc, #580]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d904      	bls.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004912:	2313      	movs	r3, #19
 8004914:	18fb      	adds	r3, r7, r3
 8004916:	2203      	movs	r2, #3
 8004918:	701a      	strb	r2, [r3, #0]
            break;
 800491a:	e004      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800491c:	4b89      	ldr	r3, [pc, #548]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	2202      	movs	r2, #2
 8004922:	4013      	ands	r3, r2
 8004924:	d0ed      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004926:	2313      	movs	r3, #19
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004930:	4b84      	ldr	r3, [pc, #528]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004934:	4a85      	ldr	r2, [pc, #532]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004936:	4013      	ands	r3, r2
 8004938:	0019      	movs	r1, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493e:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004940:	430a      	orrs	r2, r1
 8004942:	65da      	str	r2, [r3, #92]	; 0x5c
 8004944:	e00c      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004946:	2312      	movs	r3, #18
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	2213      	movs	r2, #19
 800494c:	18ba      	adds	r2, r7, r2
 800494e:	7812      	ldrb	r2, [r2, #0]
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e005      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	2312      	movs	r3, #18
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	2213      	movs	r2, #19
 800495a:	18ba      	adds	r2, r7, r2
 800495c:	7812      	ldrb	r2, [r2, #0]
 800495e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004960:	2311      	movs	r3, #17
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496a:	4b76      	ldr	r3, [pc, #472]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800496c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800496e:	4b75      	ldr	r3, [pc, #468]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004970:	4979      	ldr	r1, [pc, #484]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004972:	400a      	ands	r2, r1
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2201      	movs	r2, #1
 800497c:	4013      	ands	r3, r2
 800497e:	d009      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004980:	4b70      	ldr	r3, [pc, #448]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	2203      	movs	r2, #3
 8004986:	4393      	bics	r3, r2
 8004988:	0019      	movs	r1, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004990:	430a      	orrs	r2, r1
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2202      	movs	r2, #2
 800499a:	4013      	ands	r3, r2
 800499c:	d009      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800499e:	4b69      	ldr	r3, [pc, #420]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	220c      	movs	r2, #12
 80049a4:	4393      	bics	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	4b65      	ldr	r3, [pc, #404]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ae:	430a      	orrs	r2, r1
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2210      	movs	r2, #16
 80049b8:	4013      	ands	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049bc:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	4a66      	ldr	r2, [pc, #408]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	4b5e      	ldr	r3, [pc, #376]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049cc:	430a      	orrs	r2, r1
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4013      	ands	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	4a5f      	ldr	r2, [pc, #380]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	4b56      	ldr	r3, [pc, #344]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ec:	430a      	orrs	r2, r1
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4013      	ands	r3, r2
 80049fa:	d009      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049fc:	4b51      	ldr	r3, [pc, #324]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	4a58      	ldr	r2, [pc, #352]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	4b4e      	ldr	r3, [pc, #312]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2220      	movs	r2, #32
 8004a16:	4013      	ands	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a1a:	4b4a      	ldr	r3, [pc, #296]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	4a52      	ldr	r2, [pc, #328]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	4b46      	ldr	r3, [pc, #280]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	4013      	ands	r3, r2
 8004a38:	d015      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a3a:	4b42      	ldr	r3, [pc, #264]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	0899      	lsrs	r1, r3, #2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	05db      	lsls	r3, r3, #23
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d106      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a58:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	0249      	lsls	r1, r1, #9
 8004a62:	430a      	orrs	r2, r1
 8004a64:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	031b      	lsls	r3, r3, #12
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a72:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	2240      	movs	r2, #64	; 0x40
 8004a78:	4393      	bics	r3, r2
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a80:	4b30      	ldr	r3, [pc, #192]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a82:	430a      	orrs	r2, r1
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	2380      	movs	r3, #128	; 0x80
 8004a8c:	039b      	lsls	r3, r3, #14
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a92:	4b2c      	ldr	r3, [pc, #176]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	4a35      	ldr	r2, [pc, #212]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aa0:	4b28      	ldr	r3, [pc, #160]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	03db      	lsls	r3, r3, #15
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d106      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ab2:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab8:	2180      	movs	r1, #128	; 0x80
 8004aba:	0449      	lsls	r1, r1, #17
 8004abc:	430a      	orrs	r2, r1
 8004abe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	03db      	lsls	r3, r3, #15
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d016      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	0019      	movs	r1, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ada:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004adc:	430a      	orrs	r2, r1
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	045b      	lsls	r3, r3, #17
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d106      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004aec:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004af2:	2180      	movs	r1, #128	; 0x80
 8004af4:	0449      	lsls	r1, r1, #17
 8004af6:	430a      	orrs	r2, r1
 8004af8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	4013      	ands	r3, r2
 8004b04:	d016      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	0019      	movs	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b16:	430a      	orrs	r2, r1
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	01db      	lsls	r3, r3, #7
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d106      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b2c:	2180      	movs	r1, #128	; 0x80
 8004b2e:	0249      	lsls	r1, r1, #9
 8004b30:	430a      	orrs	r2, r1
 8004b32:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004b34:	2312      	movs	r3, #18
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	781b      	ldrb	r3, [r3, #0]
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b006      	add	sp, #24
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	fffffcff 	.word	0xfffffcff
 8004b50:	fffeffff 	.word	0xfffeffff
 8004b54:	00001388 	.word	0x00001388
 8004b58:	efffffff 	.word	0xefffffff
 8004b5c:	fffff3ff 	.word	0xfffff3ff
 8004b60:	fff3ffff 	.word	0xfff3ffff
 8004b64:	ffcfffff 	.word	0xffcfffff
 8004b68:	ffffcfff 	.word	0xffffcfff
 8004b6c:	ffbfffff 	.word	0xffbfffff
 8004b70:	feffffff 	.word	0xfeffffff
 8004b74:	ffff3fff 	.word	0xffff3fff

08004b78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b78:	b5b0      	push	{r4, r5, r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b80:	230f      	movs	r3, #15
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d100      	bne.n	8004b90 <HAL_RTC_Init+0x18>
 8004b8e:	e08c      	b.n	8004caa <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2229      	movs	r2, #41	; 0x29
 8004b94:	5c9b      	ldrb	r3, [r3, r2]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2228      	movs	r2, #40	; 0x28
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2288      	movs	r2, #136	; 0x88
 8004ba8:	0212      	lsls	r2, r2, #8
 8004baa:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7fe f98c 	bl	8002ecc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2229      	movs	r2, #41	; 0x29
 8004bb8:	2102      	movs	r1, #2
 8004bba:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d062      	beq.n	8004c90 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	22ca      	movs	r2, #202	; 0xca
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2253      	movs	r2, #83	; 0x53
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004bda:	250f      	movs	r5, #15
 8004bdc:	197c      	adds	r4, r7, r5
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f000 faf2 	bl	80051ca <RTC_EnterInitMode>
 8004be6:	0003      	movs	r3, r0
 8004be8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004bea:	0028      	movs	r0, r5
 8004bec:	183b      	adds	r3, r7, r0
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d12c      	bne.n	8004c4e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	492e      	ldr	r1, [pc, #184]	; (8004cb8 <HAL_RTC_Init+0x140>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6999      	ldr	r1, [r3, #24]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6912      	ldr	r2, [r2, #16]
 8004c2a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6919      	ldr	r1, [r3, #16]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	041a      	lsls	r2, r3, #16
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004c40:	183c      	adds	r4, r7, r0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f000 fb03 	bl	8005250 <RTC_ExitInitMode>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004c4e:	230f      	movs	r3, #15
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d116      	bne.n	8004c86 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	00d2      	lsls	r2, r2, #3
 8004c64:	08d2      	lsrs	r2, r2, #3
 8004c66:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6999      	ldr	r1, [r3, #24]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	22ff      	movs	r2, #255	; 0xff
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c8e:	e003      	b.n	8004c98 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004c90:	230f      	movs	r3, #15
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004c98:	230f      	movs	r3, #15
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2229      	movs	r2, #41	; 0x29
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004caa:	230f      	movs	r3, #15
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	781b      	ldrb	r3, [r3, #0]
}
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b004      	add	sp, #16
 8004cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb8:	fb8fffbf 	.word	0xfb8fffbf

08004cbc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cbc:	b5b0      	push	{r4, r5, r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2228      	movs	r2, #40	; 0x28
 8004ccc:	5c9b      	ldrb	r3, [r3, r2]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RTC_SetTime+0x1a>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e092      	b.n	8004dfc <HAL_RTC_SetTime+0x140>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2228      	movs	r2, #40	; 0x28
 8004cda:	2101      	movs	r1, #1
 8004cdc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2229      	movs	r2, #41	; 0x29
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	22ca      	movs	r2, #202	; 0xca
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2253      	movs	r2, #83	; 0x53
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cf6:	2513      	movs	r5, #19
 8004cf8:	197c      	adds	r4, r7, r5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f000 fa64 	bl	80051ca <RTC_EnterInitMode>
 8004d02:	0003      	movs	r3, r0
 8004d04:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004d06:	197b      	adds	r3, r7, r5
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d162      	bne.n	8004dd4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d125      	bne.n	8004d60 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d102      	bne.n	8004d26 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2200      	movs	r2, #0
 8004d24:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f000 fad4 	bl	80052d8 <RTC_ByteToBcd2>
 8004d30:	0003      	movs	r3, r0
 8004d32:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f000 facd 	bl	80052d8 <RTC_ByteToBcd2>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d42:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	789b      	ldrb	r3, [r3, #2]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f000 fac5 	bl	80052d8 <RTC_ByteToBcd2>
 8004d4e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d50:	0022      	movs	r2, r4
 8004d52:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	78db      	ldrb	r3, [r3, #3]
 8004d58:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e017      	b.n	8004d90 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2240      	movs	r2, #64	; 0x40
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d102      	bne.n	8004d72 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d7e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d84:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	78db      	ldrb	r3, [r3, #3]
 8004d8a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	491b      	ldr	r1, [pc, #108]	; (8004e04 <HAL_RTC_SetTime+0x148>)
 8004d98:	400a      	ands	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4918      	ldr	r1, [pc, #96]	; (8004e08 <HAL_RTC_SetTime+0x14c>)
 8004da8:	400a      	ands	r2, r1
 8004daa:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6999      	ldr	r1, [r3, #24]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004dc4:	2313      	movs	r3, #19
 8004dc6:	18fc      	adds	r4, r7, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f000 fa40 	bl	8005250 <RTC_ExitInitMode>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004ddc:	2313      	movs	r3, #19
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2229      	movs	r2, #41	; 0x29
 8004dea:	2101      	movs	r1, #1
 8004dec:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2228      	movs	r2, #40	; 0x28
 8004df2:	2100      	movs	r1, #0
 8004df4:	5499      	strb	r1, [r3, r2]

  return status;
 8004df6:	2313      	movs	r3, #19
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
}
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b006      	add	sp, #24
 8004e02:	bdb0      	pop	{r4, r5, r7, pc}
 8004e04:	007f7f7f 	.word	0x007f7f7f
 8004e08:	fffbffff 	.word	0xfffbffff

08004e0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e0c:	b5b0      	push	{r4, r5, r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2228      	movs	r2, #40	; 0x28
 8004e1c:	5c9b      	ldrb	r3, [r3, r2]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_RTC_SetDate+0x1a>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e07e      	b.n	8004f24 <HAL_RTC_SetDate+0x118>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2228      	movs	r2, #40	; 0x28
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2229      	movs	r2, #41	; 0x29
 8004e32:	2102      	movs	r1, #2
 8004e34:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10e      	bne.n	8004e5a <HAL_RTC_SetDate+0x4e>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	001a      	movs	r2, r3
 8004e42:	2310      	movs	r3, #16
 8004e44:	4013      	ands	r3, r2
 8004e46:	d008      	beq.n	8004e5a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2210      	movs	r2, #16
 8004e4e:	4393      	bics	r3, r2
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	330a      	adds	r3, #10
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d11c      	bne.n	8004e9a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	78db      	ldrb	r3, [r3, #3]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fa37 	bl	80052d8 <RTC_ByteToBcd2>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	785b      	ldrb	r3, [r3, #1]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 fa30 	bl	80052d8 <RTC_ByteToBcd2>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e7c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	789b      	ldrb	r3, [r3, #2]
 8004e82:	0018      	movs	r0, r3
 8004e84:	f000 fa28 	bl	80052d8 <RTC_ByteToBcd2>
 8004e88:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e8a:	0022      	movs	r2, r4
 8004e8c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e00e      	b.n	8004eb8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	78db      	ldrb	r3, [r3, #3]
 8004e9e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	785b      	ldrb	r3, [r3, #1]
 8004ea4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ea6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004eac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	22ca      	movs	r2, #202	; 0xca
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2253      	movs	r2, #83	; 0x53
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ec8:	2513      	movs	r5, #19
 8004eca:	197c      	adds	r4, r7, r5
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 f97b 	bl	80051ca <RTC_EnterInitMode>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004ed8:	0028      	movs	r0, r5
 8004eda:	183b      	adds	r3, r7, r0
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10c      	bne.n	8004efc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4910      	ldr	r1, [pc, #64]	; (8004f2c <HAL_RTC_SetDate+0x120>)
 8004eea:	400a      	ands	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004eee:	183c      	adds	r4, r7, r0
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 f9ac 	bl	8005250 <RTC_ExitInitMode>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	22ff      	movs	r2, #255	; 0xff
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004f04:	2313      	movs	r3, #19
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d103      	bne.n	8004f16 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2229      	movs	r2, #41	; 0x29
 8004f12:	2101      	movs	r1, #1
 8004f14:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2228      	movs	r2, #40	; 0x28
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5499      	strb	r1, [r3, r2]

  return status;
 8004f1e:	2313      	movs	r3, #19
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	781b      	ldrb	r3, [r3, #0]
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b006      	add	sp, #24
 8004f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f2c:	00ffff3f 	.word	0x00ffff3f

08004f30 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b089      	sub	sp, #36	; 0x24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2228      	movs	r2, #40	; 0x28
 8004f40:	5c9b      	ldrb	r3, [r3, r2]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_RTC_SetAlarm+0x1a>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e10c      	b.n	8005164 <HAL_RTC_SetAlarm+0x234>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2228      	movs	r2, #40	; 0x28
 8004f4e:	2101      	movs	r1, #1
 8004f50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2229      	movs	r2, #41	; 0x29
 8004f56:	2102      	movs	r1, #2
 8004f58:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d136      	bne.n	8004fce <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2240      	movs	r2, #64	; 0x40
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d102      	bne.n	8004f72 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	0018      	movs	r0, r3
 8004f78:	f000 f9ae 	bl	80052d8 <RTC_ByteToBcd2>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	785b      	ldrb	r3, [r3, #1]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f000 f9a7 	bl	80052d8 <RTC_ByteToBcd2>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f8e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	789b      	ldrb	r3, [r3, #2]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f000 f99f 	bl	80052d8 <RTC_ByteToBcd2>
 8004f9a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f9c:	0022      	movs	r2, r4
 8004f9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	78db      	ldrb	r3, [r3, #3]
 8004fa4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2220      	movs	r2, #32
 8004fae:	5c9b      	ldrb	r3, [r3, r2]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f000 f991 	bl	80052d8 <RTC_ByteToBcd2>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004fba:	0022      	movs	r2, r4
 8004fbc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004fc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e022      	b.n	8005014 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2240      	movs	r2, #64	; 0x40
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fec:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ff2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	78db      	ldrb	r3, [r3, #3]
 8004ff8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ffa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2120      	movs	r1, #32
 8005000:	5c5b      	ldrb	r3, [r3, r1]
 8005002:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005004:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800500a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005010:	4313      	orrs	r3, r2
 8005012:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	4313      	orrs	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	22ca      	movs	r2, #202	; 0xca
 8005026:	625a      	str	r2, [r3, #36]	; 0x24
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2253      	movs	r2, #83	; 0x53
 800502e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	429a      	cmp	r2, r3
 800503a:	d143      	bne.n	80050c4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4949      	ldr	r1, [pc, #292]	; (800516c <HAL_RTC_SetAlarm+0x23c>)
 8005048:	400a      	ands	r2, r1
 800504a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4946      	ldr	r1, [pc, #280]	; (8005170 <HAL_RTC_SetAlarm+0x240>)
 8005058:	400a      	ands	r2, r1
 800505a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 800505c:	f7fe fa5c 	bl	8003518 <HAL_GetTick>
 8005060:	0003      	movs	r3, r0
 8005062:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005064:	e016      	b.n	8005094 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005066:	f7fe fa57 	bl	8003518 <HAL_GetTick>
 800506a:	0002      	movs	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad2      	subs	r2, r2, r3
 8005070:	23fa      	movs	r3, #250	; 0xfa
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	429a      	cmp	r2, r3
 8005076:	d90d      	bls.n	8005094 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	22ff      	movs	r2, #255	; 0xff
 800507e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2229      	movs	r2, #41	; 0x29
 8005084:	2103      	movs	r1, #3
 8005086:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2228      	movs	r2, #40	; 0x28
 800508c:	2100      	movs	r1, #0
 800508e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e067      	b.n	8005164 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	4013      	ands	r3, r2
 800509e:	d0e2      	beq.n	8005066 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	0049      	lsls	r1, r1, #1
 80050be:	430a      	orrs	r2, r1
 80050c0:	619a      	str	r2, [r3, #24]
 80050c2:	e042      	b.n	800514a <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4929      	ldr	r1, [pc, #164]	; (8005174 <HAL_RTC_SetAlarm+0x244>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4926      	ldr	r1, [pc, #152]	; (8005178 <HAL_RTC_SetAlarm+0x248>)
 80050e0:	400a      	ands	r2, r1
 80050e2:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80050e4:	f7fe fa18 	bl	8003518 <HAL_GetTick>
 80050e8:	0003      	movs	r3, r0
 80050ea:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80050ec:	e016      	b.n	800511c <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80050ee:	f7fe fa13 	bl	8003518 <HAL_GetTick>
 80050f2:	0002      	movs	r2, r0
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	23fa      	movs	r3, #250	; 0xfa
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d90d      	bls.n	800511c <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	22ff      	movs	r2, #255	; 0xff
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2229      	movs	r2, #41	; 0x29
 800510c:	2103      	movs	r1, #3
 800510e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2228      	movs	r2, #40	; 0x28
 8005114:	2100      	movs	r1, #0
 8005116:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e023      	b.n	8005164 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2202      	movs	r2, #2
 8005124:	4013      	ands	r3, r2
 8005126:	d0e2      	beq.n	80050ee <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2180      	movs	r1, #128	; 0x80
 8005144:	0089      	lsls	r1, r1, #2
 8005146:	430a      	orrs	r2, r1
 8005148:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	22ff      	movs	r2, #255	; 0xff
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2229      	movs	r2, #41	; 0x29
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2228      	movs	r2, #40	; 0x28
 800515e:	2100      	movs	r1, #0
 8005160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b009      	add	sp, #36	; 0x24
 800516a:	bd90      	pop	{r4, r7, pc}
 800516c:	fffffeff 	.word	0xfffffeff
 8005170:	ffffefff 	.word	0xffffefff
 8005174:	fffffdff 	.word	0xfffffdff
 8005178:	ffffdfff 	.word	0xffffdfff

0800517c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	21a0      	movs	r1, #160	; 0xa0
 8005190:	438a      	bics	r2, r1
 8005192:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005194:	f7fe f9c0 	bl	8003518 <HAL_GetTick>
 8005198:	0003      	movs	r3, r0
 800519a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800519c:	e00a      	b.n	80051b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800519e:	f7fe f9bb 	bl	8003518 <HAL_GetTick>
 80051a2:	0002      	movs	r2, r0
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1ad2      	subs	r2, r2, r3
 80051a8:	23fa      	movs	r3, #250	; 0xfa
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d901      	bls.n	80051b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e006      	b.n	80051c2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	4013      	ands	r3, r2
 80051be:	d0ee      	beq.n	800519e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	0018      	movs	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b004      	add	sp, #16
 80051c8:	bd80      	pop	{r7, pc}

080051ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80051d2:	230f      	movs	r3, #15
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2240      	movs	r2, #64	; 0x40
 80051e2:	4013      	ands	r3, r2
 80051e4:	d12c      	bne.n	8005240 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2180      	movs	r1, #128	; 0x80
 80051f2:	430a      	orrs	r2, r1
 80051f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80051f6:	f7fe f98f 	bl	8003518 <HAL_GetTick>
 80051fa:	0003      	movs	r3, r0
 80051fc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051fe:	e014      	b.n	800522a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005200:	f7fe f98a 	bl	8003518 <HAL_GetTick>
 8005204:	0002      	movs	r2, r0
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	1ad2      	subs	r2, r2, r3
 800520a:	200f      	movs	r0, #15
 800520c:	183b      	adds	r3, r7, r0
 800520e:	1839      	adds	r1, r7, r0
 8005210:	7809      	ldrb	r1, [r1, #0]
 8005212:	7019      	strb	r1, [r3, #0]
 8005214:	23fa      	movs	r3, #250	; 0xfa
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	429a      	cmp	r2, r3
 800521a:	d906      	bls.n	800522a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800521c:	183b      	adds	r3, r7, r0
 800521e:	2203      	movs	r2, #3
 8005220:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2229      	movs	r2, #41	; 0x29
 8005226:	2103      	movs	r1, #3
 8005228:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2240      	movs	r2, #64	; 0x40
 8005232:	4013      	ands	r3, r2
 8005234:	d104      	bne.n	8005240 <RTC_EnterInitMode+0x76>
 8005236:	230f      	movs	r3, #15
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d1df      	bne.n	8005200 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005240:	230f      	movs	r3, #15
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	781b      	ldrb	r3, [r3, #0]
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b004      	add	sp, #16
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005258:	240f      	movs	r4, #15
 800525a:	193b      	adds	r3, r7, r4
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005260:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <RTC_ExitInitMode+0x84>)
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <RTC_ExitInitMode+0x84>)
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	438a      	bics	r2, r1
 800526a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <RTC_ExitInitMode+0x84>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	2220      	movs	r2, #32
 8005272:	4013      	ands	r3, r2
 8005274:	d10d      	bne.n	8005292 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0018      	movs	r0, r3
 800527a:	f7ff ff7f 	bl	800517c <HAL_RTC_WaitForSynchro>
 800527e:	1e03      	subs	r3, r0, #0
 8005280:	d021      	beq.n	80052c6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2229      	movs	r2, #41	; 0x29
 8005286:	2103      	movs	r1, #3
 8005288:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800528a:	193b      	adds	r3, r7, r4
 800528c:	2203      	movs	r2, #3
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e019      	b.n	80052c6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <RTC_ExitInitMode+0x84>)
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <RTC_ExitInitMode+0x84>)
 8005298:	2120      	movs	r1, #32
 800529a:	438a      	bics	r2, r1
 800529c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f7ff ff6b 	bl	800517c <HAL_RTC_WaitForSynchro>
 80052a6:	1e03      	subs	r3, r0, #0
 80052a8:	d007      	beq.n	80052ba <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2229      	movs	r2, #41	; 0x29
 80052ae:	2103      	movs	r1, #3
 80052b0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80052b2:	230f      	movs	r3, #15
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	2203      	movs	r2, #3
 80052b8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <RTC_ExitInitMode+0x84>)
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <RTC_ExitInitMode+0x84>)
 80052c0:	2120      	movs	r1, #32
 80052c2:	430a      	orrs	r2, r1
 80052c4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80052c6:	230f      	movs	r3, #15
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	781b      	ldrb	r3, [r3, #0]
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b005      	add	sp, #20
 80052d2:	bd90      	pop	{r4, r7, pc}
 80052d4:	40002800 	.word	0x40002800

080052d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	0002      	movs	r2, r0
 80052e0:	1dfb      	adds	r3, r7, #7
 80052e2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80052e8:	230b      	movs	r3, #11
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	1dfa      	adds	r2, r7, #7
 80052ee:	7812      	ldrb	r2, [r2, #0]
 80052f0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80052f2:	e008      	b.n	8005306 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80052fa:	220b      	movs	r2, #11
 80052fc:	18bb      	adds	r3, r7, r2
 80052fe:	18ba      	adds	r2, r7, r2
 8005300:	7812      	ldrb	r2, [r2, #0]
 8005302:	3a0a      	subs	r2, #10
 8005304:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005306:	210b      	movs	r1, #11
 8005308:	187b      	adds	r3, r7, r1
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b09      	cmp	r3, #9
 800530e:	d8f1      	bhi.n	80052f4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	b2da      	uxtb	r2, r3
 8005318:	187b      	adds	r3, r7, r1
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	4313      	orrs	r3, r2
 800531e:	b2db      	uxtb	r3, r3
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	b004      	add	sp, #16
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2228      	movs	r2, #40	; 0x28
 8005334:	5c9b      	ldrb	r3, [r3, r2]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_RTCEx_EnableBypassShadow+0x16>
 800533a:	2302      	movs	r3, #2
 800533c:	e024      	b.n	8005388 <HAL_RTCEx_EnableBypassShadow+0x60>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2228      	movs	r2, #40	; 0x28
 8005342:	2101      	movs	r1, #1
 8005344:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2229      	movs	r2, #41	; 0x29
 800534a:	2102      	movs	r1, #2
 800534c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	22ca      	movs	r2, #202	; 0xca
 8005354:	625a      	str	r2, [r3, #36]	; 0x24
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2253      	movs	r2, #83	; 0x53
 800535c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699a      	ldr	r2, [r3, #24]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2120      	movs	r1, #32
 800536a:	430a      	orrs	r2, r1
 800536c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	22ff      	movs	r2, #255	; 0xff
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2229      	movs	r2, #41	; 0x29
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2228      	movs	r2, #40	; 0x28
 8005382:	2100      	movs	r1, #0
 8005384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b002      	add	sp, #8
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2228      	movs	r2, #40	; 0x28
 800539c:	5c9b      	ldrb	r3, [r3, r2]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_RTCEx_DisableBypassShadow+0x16>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e024      	b.n	80053f0 <HAL_RTCEx_DisableBypassShadow+0x60>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2228      	movs	r2, #40	; 0x28
 80053aa:	2101      	movs	r1, #1
 80053ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2229      	movs	r2, #41	; 0x29
 80053b2:	2102      	movs	r1, #2
 80053b4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	22ca      	movs	r2, #202	; 0xca
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2253      	movs	r2, #83	; 0x53
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	21df      	movs	r1, #223	; 0xdf
 80053d2:	400a      	ands	r2, r1
 80053d4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	22ff      	movs	r2, #255	; 0xff
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2229      	movs	r2, #41	; 0x29
 80053e2:	2101      	movs	r1, #1
 80053e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2228      	movs	r2, #40	; 0x28
 80053ea:	2100      	movs	r1, #0
 80053ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	0018      	movs	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b002      	add	sp, #8
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e04a      	b.n	80054a0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	223d      	movs	r2, #61	; 0x3d
 800540e:	5c9b      	ldrb	r3, [r3, r2]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d107      	bne.n	8005426 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	223c      	movs	r2, #60	; 0x3c
 800541a:	2100      	movs	r1, #0
 800541c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	0018      	movs	r0, r3
 8005422:	f7fd fd91 	bl	8002f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	223d      	movs	r2, #61	; 0x3d
 800542a:	2102      	movs	r1, #2
 800542c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	0019      	movs	r1, r3
 8005438:	0010      	movs	r0, r2
 800543a:	f000 fa11 	bl	8005860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2248      	movs	r2, #72	; 0x48
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	223e      	movs	r2, #62	; 0x3e
 800544a:	2101      	movs	r1, #1
 800544c:	5499      	strb	r1, [r3, r2]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	223f      	movs	r2, #63	; 0x3f
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2240      	movs	r2, #64	; 0x40
 800545a:	2101      	movs	r1, #1
 800545c:	5499      	strb	r1, [r3, r2]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2241      	movs	r2, #65	; 0x41
 8005462:	2101      	movs	r1, #1
 8005464:	5499      	strb	r1, [r3, r2]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2242      	movs	r2, #66	; 0x42
 800546a:	2101      	movs	r1, #1
 800546c:	5499      	strb	r1, [r3, r2]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2243      	movs	r2, #67	; 0x43
 8005472:	2101      	movs	r1, #1
 8005474:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2244      	movs	r2, #68	; 0x44
 800547a:	2101      	movs	r1, #1
 800547c:	5499      	strb	r1, [r3, r2]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2245      	movs	r2, #69	; 0x45
 8005482:	2101      	movs	r1, #1
 8005484:	5499      	strb	r1, [r3, r2]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2246      	movs	r2, #70	; 0x46
 800548a:	2101      	movs	r1, #1
 800548c:	5499      	strb	r1, [r3, r2]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2247      	movs	r2, #71	; 0x47
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	223d      	movs	r2, #61	; 0x3d
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b002      	add	sp, #8
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	223d      	movs	r2, #61	; 0x3d
 80054b4:	5c9b      	ldrb	r3, [r3, r2]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d001      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e042      	b.n	8005546 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	223d      	movs	r2, #61	; 0x3d
 80054c4:	2102      	movs	r1, #2
 80054c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2101      	movs	r1, #1
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1c      	ldr	r2, [pc, #112]	; (8005550 <HAL_TIM_Base_Start_IT+0xa8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00f      	beq.n	8005502 <HAL_TIM_Base_Start_IT+0x5a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	05db      	lsls	r3, r3, #23
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d009      	beq.n	8005502 <HAL_TIM_Base_Start_IT+0x5a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a18      	ldr	r2, [pc, #96]	; (8005554 <HAL_TIM_Base_Start_IT+0xac>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d004      	beq.n	8005502 <HAL_TIM_Base_Start_IT+0x5a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a16      	ldr	r2, [pc, #88]	; (8005558 <HAL_TIM_Base_Start_IT+0xb0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d116      	bne.n	8005530 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4a14      	ldr	r2, [pc, #80]	; (800555c <HAL_TIM_Base_Start_IT+0xb4>)
 800550a:	4013      	ands	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b06      	cmp	r3, #6
 8005512:	d016      	beq.n	8005542 <HAL_TIM_Base_Start_IT+0x9a>
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	025b      	lsls	r3, r3, #9
 800551a:	429a      	cmp	r2, r3
 800551c:	d011      	beq.n	8005542 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2101      	movs	r1, #1
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	e008      	b.n	8005542 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2101      	movs	r1, #1
 800553c:	430a      	orrs	r2, r1
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	e000      	b.n	8005544 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005542:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	0018      	movs	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	b004      	add	sp, #16
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	40012c00 	.word	0x40012c00
 8005554:	40000400 	.word	0x40000400
 8005558:	40014000 	.word	0x40014000
 800555c:	00010007 	.word	0x00010007

08005560 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2101      	movs	r1, #1
 8005574:	438a      	bics	r2, r1
 8005576:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	4a0d      	ldr	r2, [pc, #52]	; (80055b4 <HAL_TIM_Base_Stop_IT+0x54>)
 8005580:	4013      	ands	r3, r2
 8005582:	d10d      	bne.n	80055a0 <HAL_TIM_Base_Stop_IT+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	4a0b      	ldr	r2, [pc, #44]	; (80055b8 <HAL_TIM_Base_Stop_IT+0x58>)
 800558c:	4013      	ands	r3, r2
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_Base_Stop_IT+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2101      	movs	r1, #1
 800559c:	438a      	bics	r2, r1
 800559e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	223d      	movs	r2, #61	; 0x3d
 80055a4:	2101      	movs	r1, #1
 80055a6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	0018      	movs	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b002      	add	sp, #8
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	00001111 	.word	0x00001111
 80055b8:	00000444 	.word	0x00000444

080055bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2202      	movs	r2, #2
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d124      	bne.n	800561c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2202      	movs	r2, #2
 80055da:	4013      	ands	r3, r2
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d11d      	bne.n	800561c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2203      	movs	r2, #3
 80055e6:	4252      	negs	r2, r2
 80055e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	2203      	movs	r2, #3
 80055f8:	4013      	ands	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	0018      	movs	r0, r3
 8005600:	f000 f916 	bl	8005830 <HAL_TIM_IC_CaptureCallback>
 8005604:	e007      	b.n	8005616 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0018      	movs	r0, r3
 800560a:	f000 f909 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0018      	movs	r0, r3
 8005612:	f000 f915 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2204      	movs	r2, #4
 8005624:	4013      	ands	r3, r2
 8005626:	2b04      	cmp	r3, #4
 8005628:	d125      	bne.n	8005676 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2204      	movs	r2, #4
 8005632:	4013      	ands	r3, r2
 8005634:	2b04      	cmp	r3, #4
 8005636:	d11e      	bne.n	8005676 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2205      	movs	r2, #5
 800563e:	4252      	negs	r2, r2
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2202      	movs	r2, #2
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	23c0      	movs	r3, #192	; 0xc0
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4013      	ands	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	0018      	movs	r0, r3
 800565a:	f000 f8e9 	bl	8005830 <HAL_TIM_IC_CaptureCallback>
 800565e:	e007      	b.n	8005670 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	0018      	movs	r0, r3
 8005664:	f000 f8dc 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	0018      	movs	r0, r3
 800566c:	f000 f8e8 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	2208      	movs	r2, #8
 800567e:	4013      	ands	r3, r2
 8005680:	2b08      	cmp	r3, #8
 8005682:	d124      	bne.n	80056ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2208      	movs	r2, #8
 800568c:	4013      	ands	r3, r2
 800568e:	2b08      	cmp	r3, #8
 8005690:	d11d      	bne.n	80056ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2209      	movs	r2, #9
 8005698:	4252      	negs	r2, r2
 800569a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2204      	movs	r2, #4
 80056a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	2203      	movs	r2, #3
 80056aa:	4013      	ands	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f000 f8bd 	bl	8005830 <HAL_TIM_IC_CaptureCallback>
 80056b6:	e007      	b.n	80056c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f000 f8b0 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 f8bc 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2210      	movs	r2, #16
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d125      	bne.n	8005728 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2210      	movs	r2, #16
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d11e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2211      	movs	r2, #17
 80056f0:	4252      	negs	r2, r2
 80056f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2208      	movs	r2, #8
 80056f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	23c0      	movs	r3, #192	; 0xc0
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4013      	ands	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f890 	bl	8005830 <HAL_TIM_IC_CaptureCallback>
 8005710:	e007      	b.n	8005722 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0018      	movs	r0, r3
 8005716:	f000 f883 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f000 f88f 	bl	8005840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	2201      	movs	r2, #1
 8005730:	4013      	ands	r3, r2
 8005732:	2b01      	cmp	r3, #1
 8005734:	d10f      	bne.n	8005756 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	4013      	ands	r3, r2
 8005740:	2b01      	cmp	r3, #1
 8005742:	d108      	bne.n	8005756 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2202      	movs	r2, #2
 800574a:	4252      	negs	r2, r2
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	0018      	movs	r0, r3
 8005752:	f7fd fb17 	bl	8002d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2280      	movs	r2, #128	; 0x80
 800575e:	4013      	ands	r3, r2
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	d10f      	bne.n	8005784 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2280      	movs	r2, #128	; 0x80
 800576c:	4013      	ands	r3, r2
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d108      	bne.n	8005784 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2281      	movs	r2, #129	; 0x81
 8005778:	4252      	negs	r2, r2
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	0018      	movs	r0, r3
 8005780:	f000 f964 	bl	8005a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	2380      	movs	r3, #128	; 0x80
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	401a      	ands	r2, r3
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	429a      	cmp	r2, r3
 8005796:	d10e      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1c      	ldr	r2, [pc, #112]	; (800581c <HAL_TIM_IRQHandler+0x260>)
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	0018      	movs	r0, r3
 80057b2:	f000 f953 	bl	8005a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2240      	movs	r2, #64	; 0x40
 80057be:	4013      	ands	r3, r2
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d10f      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2240      	movs	r2, #64	; 0x40
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b40      	cmp	r3, #64	; 0x40
 80057d0:	d108      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2241      	movs	r2, #65	; 0x41
 80057d8:	4252      	negs	r2, r2
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	0018      	movs	r0, r3
 80057e0:	f000 f836 	bl	8005850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2220      	movs	r2, #32
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d10f      	bne.n	8005812 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d108      	bne.n	8005812 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2221      	movs	r2, #33	; 0x21
 8005806:	4252      	negs	r2, r2
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0018      	movs	r0, r3
 800580e:	f000 f915 	bl	8005a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	46bd      	mov	sp, r7
 8005816:	b002      	add	sp, #8
 8005818:	bd80      	pop	{r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	fffffeff 	.word	0xfffffeff

08005820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005828:	46c0      	nop			; (mov r8, r8)
 800582a:	46bd      	mov	sp, r7
 800582c:	b002      	add	sp, #8
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	46bd      	mov	sp, r7
 800583c:	b002      	add	sp, #8
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005848:	46c0      	nop			; (mov r8, r8)
 800584a:	46bd      	mov	sp, r7
 800584c:	b002      	add	sp, #8
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b002      	add	sp, #8
 800585e:	bd80      	pop	{r7, pc}

08005860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a34      	ldr	r2, [pc, #208]	; (8005944 <TIM_Base_SetConfig+0xe4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d008      	beq.n	800588a <TIM_Base_SetConfig+0x2a>
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	05db      	lsls	r3, r3, #23
 800587e:	429a      	cmp	r2, r3
 8005880:	d003      	beq.n	800588a <TIM_Base_SetConfig+0x2a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a30      	ldr	r2, [pc, #192]	; (8005948 <TIM_Base_SetConfig+0xe8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d108      	bne.n	800589c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2270      	movs	r2, #112	; 0x70
 800588e:	4393      	bics	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a29      	ldr	r2, [pc, #164]	; (8005944 <TIM_Base_SetConfig+0xe4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d018      	beq.n	80058d6 <TIM_Base_SetConfig+0x76>
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	05db      	lsls	r3, r3, #23
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d013      	beq.n	80058d6 <TIM_Base_SetConfig+0x76>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a25      	ldr	r2, [pc, #148]	; (8005948 <TIM_Base_SetConfig+0xe8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00f      	beq.n	80058d6 <TIM_Base_SetConfig+0x76>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a24      	ldr	r2, [pc, #144]	; (800594c <TIM_Base_SetConfig+0xec>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00b      	beq.n	80058d6 <TIM_Base_SetConfig+0x76>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a23      	ldr	r2, [pc, #140]	; (8005950 <TIM_Base_SetConfig+0xf0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d007      	beq.n	80058d6 <TIM_Base_SetConfig+0x76>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a22      	ldr	r2, [pc, #136]	; (8005954 <TIM_Base_SetConfig+0xf4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_Base_SetConfig+0x76>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a21      	ldr	r2, [pc, #132]	; (8005958 <TIM_Base_SetConfig+0xf8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d108      	bne.n	80058e8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a20      	ldr	r2, [pc, #128]	; (800595c <TIM_Base_SetConfig+0xfc>)
 80058da:	4013      	ands	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	4393      	bics	r3, r2
 80058ee:	001a      	movs	r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <TIM_Base_SetConfig+0xe4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_Base_SetConfig+0xce>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a0d      	ldr	r2, [pc, #52]	; (8005950 <TIM_Base_SetConfig+0xf0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d007      	beq.n	800592e <TIM_Base_SetConfig+0xce>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <TIM_Base_SetConfig+0xf4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_Base_SetConfig+0xce>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a0b      	ldr	r2, [pc, #44]	; (8005958 <TIM_Base_SetConfig+0xf8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d103      	bne.n	8005936 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	615a      	str	r2, [r3, #20]
}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	b004      	add	sp, #16
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40000400 	.word	0x40000400
 800594c:	40002000 	.word	0x40002000
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800
 800595c:	fffffcff 	.word	0xfffffcff

08005960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	223c      	movs	r2, #60	; 0x3c
 800596e:	5c9b      	ldrb	r3, [r3, r2]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e055      	b.n	8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	223c      	movs	r2, #60	; 0x3c
 800597c:	2101      	movs	r1, #1
 800597e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	223d      	movs	r2, #61	; 0x3d
 8005984:	2102      	movs	r1, #2
 8005986:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a23      	ldr	r2, [pc, #140]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d108      	bne.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2270      	movs	r2, #112	; 0x70
 80059b8:	4393      	bics	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00f      	beq.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	05db      	lsls	r3, r3, #23
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d009      	beq.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d004      	beq.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a11      	ldr	r2, [pc, #68]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d10c      	bne.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	4393      	bics	r3, r2
 80059fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	223d      	movs	r2, #61	; 0x3d
 8005a16:	2101      	movs	r1, #1
 8005a18:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	223c      	movs	r2, #60	; 0x3c
 8005a1e:	2100      	movs	r1, #0
 8005a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	0018      	movs	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b004      	add	sp, #16
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	ff0fffff 	.word	0xff0fffff
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40014000 	.word	0x40014000

08005a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b002      	add	sp, #8
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a54:	46c0      	nop			; (mov r8, r8)
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b002      	add	sp, #8
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a64:	46c0      	nop			; (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e046      	b.n	8005b0c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2288      	movs	r2, #136	; 0x88
 8005a82:	589b      	ldr	r3, [r3, r2]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2284      	movs	r2, #132	; 0x84
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7fd fa7e 	bl	8002f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2288      	movs	r2, #136	; 0x88
 8005a9c:	2124      	movs	r1, #36	; 0x24
 8005a9e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2101      	movs	r1, #1
 8005aac:	438a      	bics	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 f9ee 	bl	8005e94 <UART_SetConfig>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e024      	b.n	8005b0c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	0018      	movs	r0, r3
 8005ace:	f000 fc9f 	bl	8006410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	490d      	ldr	r1, [pc, #52]	; (8005b14 <HAL_UART_Init+0xa8>)
 8005ade:	400a      	ands	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	212a      	movs	r1, #42	; 0x2a
 8005aee:	438a      	bics	r2, r1
 8005af0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2101      	movs	r1, #1
 8005afe:	430a      	orrs	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 fd37 	bl	8006578 <UART_CheckIdleState>
 8005b0a:	0003      	movs	r3, r0
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b002      	add	sp, #8
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	ffffb7ff 	.word	0xffffb7ff

08005b18 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e032      	b.n	8005b90 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2288      	movs	r2, #136	; 0x88
 8005b2e:	2124      	movs	r1, #36	; 0x24
 8005b30:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	438a      	bics	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f7fd fafd 	bl	800315c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2290      	movs	r2, #144	; 0x90
 8005b66:	2100      	movs	r1, #0
 8005b68:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2288      	movs	r2, #136	; 0x88
 8005b6e:	2100      	movs	r1, #0
 8005b70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	228c      	movs	r2, #140	; 0x8c
 8005b76:	2100      	movs	r1, #0
 8005b78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2284      	movs	r2, #132	; 0x84
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	0018      	movs	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b002      	add	sp, #8
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	1dbb      	adds	r3, r7, #6
 8005ba6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2288      	movs	r2, #136	; 0x88
 8005bac:	589b      	ldr	r3, [r3, r2]
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d000      	beq.n	8005bb4 <HAL_UART_Transmit+0x1c>
 8005bb2:	e088      	b.n	8005cc6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_UART_Transmit+0x2a>
 8005bba:	1dbb      	adds	r3, r7, #6
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e080      	b.n	8005cc8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	2380      	movs	r3, #128	; 0x80
 8005bcc:	015b      	lsls	r3, r3, #5
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d109      	bne.n	8005be6 <HAL_UART_Transmit+0x4e>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d105      	bne.n	8005be6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	4013      	ands	r3, r2
 8005be0:	d001      	beq.n	8005be6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e070      	b.n	8005cc8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2290      	movs	r2, #144	; 0x90
 8005bea:	2100      	movs	r1, #0
 8005bec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2288      	movs	r2, #136	; 0x88
 8005bf2:	2121      	movs	r1, #33	; 0x21
 8005bf4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf6:	f7fd fc8f 	bl	8003518 <HAL_GetTick>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1dba      	adds	r2, r7, #6
 8005c02:	2154      	movs	r1, #84	; 0x54
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1dba      	adds	r2, r7, #6
 8005c0c:	2156      	movs	r1, #86	; 0x56
 8005c0e:	8812      	ldrh	r2, [r2, #0]
 8005c10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	015b      	lsls	r3, r3, #5
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d108      	bne.n	8005c30 <HAL_UART_Transmit+0x98>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e003      	b.n	8005c38 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c38:	e02c      	b.n	8005c94 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	0013      	movs	r3, r2
 8005c44:	2200      	movs	r2, #0
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	f000 fce4 	bl	8006614 <UART_WaitOnFlagUntilTimeout>
 8005c4c:	1e03      	subs	r3, r0, #0
 8005c4e:	d001      	beq.n	8005c54 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e039      	b.n	8005cc8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	001a      	movs	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	05d2      	lsls	r2, r2, #23
 8005c66:	0dd2      	lsrs	r2, r2, #23
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	e007      	b.n	8005c82 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2256      	movs	r2, #86	; 0x56
 8005c86:	5a9b      	ldrh	r3, [r3, r2]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b299      	uxth	r1, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2256      	movs	r2, #86	; 0x56
 8005c92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2256      	movs	r2, #86	; 0x56
 8005c98:	5a9b      	ldrh	r3, [r3, r2]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1cc      	bne.n	8005c3a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	0013      	movs	r3, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	f000 fcb1 	bl	8006614 <UART_WaitOnFlagUntilTimeout>
 8005cb2:	1e03      	subs	r3, r0, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e006      	b.n	8005cc8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2288      	movs	r2, #136	; 0x88
 8005cbe:	2120      	movs	r1, #32
 8005cc0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e000      	b.n	8005cc8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
  }
}
 8005cc8:	0018      	movs	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b008      	add	sp, #32
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	; 0x28
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	1dbb      	adds	r3, r7, #6
 8005cde:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	228c      	movs	r2, #140	; 0x8c
 8005ce4:	589b      	ldr	r3, [r3, r2]
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d000      	beq.n	8005cec <HAL_UART_Receive+0x1c>
 8005cea:	e0cc      	b.n	8005e86 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_UART_Receive+0x2a>
 8005cf2:	1dbb      	adds	r3, r7, #6
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e0c4      	b.n	8005e88 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	015b      	lsls	r3, r3, #5
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d109      	bne.n	8005d1e <HAL_UART_Receive+0x4e>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2201      	movs	r2, #1
 8005d16:	4013      	ands	r3, r2
 8005d18:	d001      	beq.n	8005d1e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e0b4      	b.n	8005e88 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2290      	movs	r2, #144	; 0x90
 8005d22:	2100      	movs	r1, #0
 8005d24:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	228c      	movs	r2, #140	; 0x8c
 8005d2a:	2122      	movs	r1, #34	; 0x22
 8005d2c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d34:	f7fd fbf0 	bl	8003518 <HAL_GetTick>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1dba      	adds	r2, r7, #6
 8005d40:	215c      	movs	r1, #92	; 0x5c
 8005d42:	8812      	ldrh	r2, [r2, #0]
 8005d44:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1dba      	adds	r2, r7, #6
 8005d4a:	215e      	movs	r1, #94	; 0x5e
 8005d4c:	8812      	ldrh	r2, [r2, #0]
 8005d4e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	015b      	lsls	r3, r3, #5
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d10d      	bne.n	8005d78 <HAL_UART_Receive+0xa8>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d104      	bne.n	8005d6e <HAL_UART_Receive+0x9e>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2260      	movs	r2, #96	; 0x60
 8005d68:	4949      	ldr	r1, [pc, #292]	; (8005e90 <HAL_UART_Receive+0x1c0>)
 8005d6a:	5299      	strh	r1, [r3, r2]
 8005d6c:	e02e      	b.n	8005dcc <HAL_UART_Receive+0xfc>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2260      	movs	r2, #96	; 0x60
 8005d72:	21ff      	movs	r1, #255	; 0xff
 8005d74:	5299      	strh	r1, [r3, r2]
 8005d76:	e029      	b.n	8005dcc <HAL_UART_Receive+0xfc>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10d      	bne.n	8005d9c <HAL_UART_Receive+0xcc>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <HAL_UART_Receive+0xc2>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2260      	movs	r2, #96	; 0x60
 8005d8c:	21ff      	movs	r1, #255	; 0xff
 8005d8e:	5299      	strh	r1, [r3, r2]
 8005d90:	e01c      	b.n	8005dcc <HAL_UART_Receive+0xfc>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2260      	movs	r2, #96	; 0x60
 8005d96:	217f      	movs	r1, #127	; 0x7f
 8005d98:	5299      	strh	r1, [r3, r2]
 8005d9a:	e017      	b.n	8005dcc <HAL_UART_Receive+0xfc>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	2380      	movs	r3, #128	; 0x80
 8005da2:	055b      	lsls	r3, r3, #21
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d10d      	bne.n	8005dc4 <HAL_UART_Receive+0xf4>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <HAL_UART_Receive+0xea>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2260      	movs	r2, #96	; 0x60
 8005db4:	217f      	movs	r1, #127	; 0x7f
 8005db6:	5299      	strh	r1, [r3, r2]
 8005db8:	e008      	b.n	8005dcc <HAL_UART_Receive+0xfc>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2260      	movs	r2, #96	; 0x60
 8005dbe:	213f      	movs	r1, #63	; 0x3f
 8005dc0:	5299      	strh	r1, [r3, r2]
 8005dc2:	e003      	b.n	8005dcc <HAL_UART_Receive+0xfc>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2260      	movs	r2, #96	; 0x60
 8005dc8:	2100      	movs	r1, #0
 8005dca:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005dcc:	2312      	movs	r3, #18
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	2160      	movs	r1, #96	; 0x60
 8005dd4:	5a52      	ldrh	r2, [r2, r1]
 8005dd6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	015b      	lsls	r3, r3, #5
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d108      	bne.n	8005df6 <HAL_UART_Receive+0x126>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	e003      	b.n	8005dfe <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005dfe:	e036      	b.n	8005e6e <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	0013      	movs	r3, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2120      	movs	r1, #32
 8005e0e:	f000 fc01 	bl	8006614 <UART_WaitOnFlagUntilTimeout>
 8005e12:	1e03      	subs	r3, r0, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e036      	b.n	8005e88 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10e      	bne.n	8005e3e <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2212      	movs	r2, #18
 8005e2a:	18ba      	adds	r2, r7, r2
 8005e2c:	8812      	ldrh	r2, [r2, #0]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	3302      	adds	r3, #2
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	e00e      	b.n	8005e5c <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2212      	movs	r2, #18
 8005e48:	18ba      	adds	r2, r7, r2
 8005e4a:	8812      	ldrh	r2, [r2, #0]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	4013      	ands	r3, r2
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	225e      	movs	r2, #94	; 0x5e
 8005e60:	5a9b      	ldrh	r3, [r3, r2]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b299      	uxth	r1, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	225e      	movs	r2, #94	; 0x5e
 8005e6c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	225e      	movs	r2, #94	; 0x5e
 8005e72:	5a9b      	ldrh	r3, [r3, r2]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1c2      	bne.n	8005e00 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	228c      	movs	r2, #140	; 0x8c
 8005e7e:	2120      	movs	r1, #32
 8005e80:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e000      	b.n	8005e88 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8005e86:	2302      	movs	r3, #2
  }
}
 8005e88:	0018      	movs	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b008      	add	sp, #32
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	000001ff 	.word	0x000001ff

08005e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e94:	b5b0      	push	{r4, r5, r7, lr}
 8005e96:	b090      	sub	sp, #64	; 0x40
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e9c:	231a      	movs	r3, #26
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	189b      	adds	r3, r3, r2
 8005ea2:	19db      	adds	r3, r3, r7
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4aaf      	ldr	r2, [pc, #700]	; (8006184 <UART_SetConfig+0x2f0>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	0019      	movs	r1, r3
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	4aaa      	ldr	r2, [pc, #680]	; (8006188 <UART_SetConfig+0x2f4>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	68d9      	ldr	r1, [r3, #12]
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	0003      	movs	r3, r0
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4aa4      	ldr	r2, [pc, #656]	; (800618c <UART_SetConfig+0x2f8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f06:	4313      	orrs	r3, r2
 8005f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a9f      	ldr	r2, [pc, #636]	; (8006190 <UART_SetConfig+0x2fc>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	0019      	movs	r1, r3
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	220f      	movs	r2, #15
 8005f28:	4393      	bics	r3, r2
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	0003      	movs	r3, r0
 8005f36:	430b      	orrs	r3, r1
 8005f38:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a95      	ldr	r2, [pc, #596]	; (8006194 <UART_SetConfig+0x300>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d131      	bne.n	8005fa8 <UART_SetConfig+0x114>
 8005f44:	4b94      	ldr	r3, [pc, #592]	; (8006198 <UART_SetConfig+0x304>)
 8005f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f48:	2203      	movs	r2, #3
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d01d      	beq.n	8005f8c <UART_SetConfig+0xf8>
 8005f50:	d823      	bhi.n	8005f9a <UART_SetConfig+0x106>
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d00c      	beq.n	8005f70 <UART_SetConfig+0xdc>
 8005f56:	d820      	bhi.n	8005f9a <UART_SetConfig+0x106>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <UART_SetConfig+0xce>
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d00e      	beq.n	8005f7e <UART_SetConfig+0xea>
 8005f60:	e01b      	b.n	8005f9a <UART_SetConfig+0x106>
 8005f62:	231b      	movs	r3, #27
 8005f64:	2220      	movs	r2, #32
 8005f66:	189b      	adds	r3, r3, r2
 8005f68:	19db      	adds	r3, r3, r7
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	e0b4      	b.n	80060da <UART_SetConfig+0x246>
 8005f70:	231b      	movs	r3, #27
 8005f72:	2220      	movs	r2, #32
 8005f74:	189b      	adds	r3, r3, r2
 8005f76:	19db      	adds	r3, r3, r7
 8005f78:	2202      	movs	r2, #2
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	e0ad      	b.n	80060da <UART_SetConfig+0x246>
 8005f7e:	231b      	movs	r3, #27
 8005f80:	2220      	movs	r2, #32
 8005f82:	189b      	adds	r3, r3, r2
 8005f84:	19db      	adds	r3, r3, r7
 8005f86:	2204      	movs	r2, #4
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e0a6      	b.n	80060da <UART_SetConfig+0x246>
 8005f8c:	231b      	movs	r3, #27
 8005f8e:	2220      	movs	r2, #32
 8005f90:	189b      	adds	r3, r3, r2
 8005f92:	19db      	adds	r3, r3, r7
 8005f94:	2208      	movs	r2, #8
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	e09f      	b.n	80060da <UART_SetConfig+0x246>
 8005f9a:	231b      	movs	r3, #27
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	189b      	adds	r3, r3, r2
 8005fa0:	19db      	adds	r3, r3, r7
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	e098      	b.n	80060da <UART_SetConfig+0x246>
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a7b      	ldr	r2, [pc, #492]	; (800619c <UART_SetConfig+0x308>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d131      	bne.n	8006016 <UART_SetConfig+0x182>
 8005fb2:	4b79      	ldr	r3, [pc, #484]	; (8006198 <UART_SetConfig+0x304>)
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	220c      	movs	r2, #12
 8005fb8:	4013      	ands	r3, r2
 8005fba:	2b0c      	cmp	r3, #12
 8005fbc:	d01d      	beq.n	8005ffa <UART_SetConfig+0x166>
 8005fbe:	d823      	bhi.n	8006008 <UART_SetConfig+0x174>
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d00c      	beq.n	8005fde <UART_SetConfig+0x14a>
 8005fc4:	d820      	bhi.n	8006008 <UART_SetConfig+0x174>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <UART_SetConfig+0x13c>
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d00e      	beq.n	8005fec <UART_SetConfig+0x158>
 8005fce:	e01b      	b.n	8006008 <UART_SetConfig+0x174>
 8005fd0:	231b      	movs	r3, #27
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	189b      	adds	r3, r3, r2
 8005fd6:	19db      	adds	r3, r3, r7
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e07d      	b.n	80060da <UART_SetConfig+0x246>
 8005fde:	231b      	movs	r3, #27
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	189b      	adds	r3, r3, r2
 8005fe4:	19db      	adds	r3, r3, r7
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	e076      	b.n	80060da <UART_SetConfig+0x246>
 8005fec:	231b      	movs	r3, #27
 8005fee:	2220      	movs	r2, #32
 8005ff0:	189b      	adds	r3, r3, r2
 8005ff2:	19db      	adds	r3, r3, r7
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e06f      	b.n	80060da <UART_SetConfig+0x246>
 8005ffa:	231b      	movs	r3, #27
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	189b      	adds	r3, r3, r2
 8006000:	19db      	adds	r3, r3, r7
 8006002:	2208      	movs	r2, #8
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e068      	b.n	80060da <UART_SetConfig+0x246>
 8006008:	231b      	movs	r3, #27
 800600a:	2220      	movs	r2, #32
 800600c:	189b      	adds	r3, r3, r2
 800600e:	19db      	adds	r3, r3, r7
 8006010:	2210      	movs	r2, #16
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e061      	b.n	80060da <UART_SetConfig+0x246>
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a61      	ldr	r2, [pc, #388]	; (80061a0 <UART_SetConfig+0x30c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d106      	bne.n	800602e <UART_SetConfig+0x19a>
 8006020:	231b      	movs	r3, #27
 8006022:	2220      	movs	r2, #32
 8006024:	189b      	adds	r3, r3, r2
 8006026:	19db      	adds	r3, r3, r7
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	e055      	b.n	80060da <UART_SetConfig+0x246>
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a5c      	ldr	r2, [pc, #368]	; (80061a4 <UART_SetConfig+0x310>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d106      	bne.n	8006046 <UART_SetConfig+0x1b2>
 8006038:	231b      	movs	r3, #27
 800603a:	2220      	movs	r2, #32
 800603c:	189b      	adds	r3, r3, r2
 800603e:	19db      	adds	r3, r3, r7
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e049      	b.n	80060da <UART_SetConfig+0x246>
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a50      	ldr	r2, [pc, #320]	; (800618c <UART_SetConfig+0x2f8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d13e      	bne.n	80060ce <UART_SetConfig+0x23a>
 8006050:	4b51      	ldr	r3, [pc, #324]	; (8006198 <UART_SetConfig+0x304>)
 8006052:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006054:	23c0      	movs	r3, #192	; 0xc0
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	4013      	ands	r3, r2
 800605a:	22c0      	movs	r2, #192	; 0xc0
 800605c:	0112      	lsls	r2, r2, #4
 800605e:	4293      	cmp	r3, r2
 8006060:	d027      	beq.n	80060b2 <UART_SetConfig+0x21e>
 8006062:	22c0      	movs	r2, #192	; 0xc0
 8006064:	0112      	lsls	r2, r2, #4
 8006066:	4293      	cmp	r3, r2
 8006068:	d82a      	bhi.n	80060c0 <UART_SetConfig+0x22c>
 800606a:	2280      	movs	r2, #128	; 0x80
 800606c:	0112      	lsls	r2, r2, #4
 800606e:	4293      	cmp	r3, r2
 8006070:	d011      	beq.n	8006096 <UART_SetConfig+0x202>
 8006072:	2280      	movs	r2, #128	; 0x80
 8006074:	0112      	lsls	r2, r2, #4
 8006076:	4293      	cmp	r3, r2
 8006078:	d822      	bhi.n	80060c0 <UART_SetConfig+0x22c>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <UART_SetConfig+0x1f4>
 800607e:	2280      	movs	r2, #128	; 0x80
 8006080:	00d2      	lsls	r2, r2, #3
 8006082:	4293      	cmp	r3, r2
 8006084:	d00e      	beq.n	80060a4 <UART_SetConfig+0x210>
 8006086:	e01b      	b.n	80060c0 <UART_SetConfig+0x22c>
 8006088:	231b      	movs	r3, #27
 800608a:	2220      	movs	r2, #32
 800608c:	189b      	adds	r3, r3, r2
 800608e:	19db      	adds	r3, r3, r7
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e021      	b.n	80060da <UART_SetConfig+0x246>
 8006096:	231b      	movs	r3, #27
 8006098:	2220      	movs	r2, #32
 800609a:	189b      	adds	r3, r3, r2
 800609c:	19db      	adds	r3, r3, r7
 800609e:	2202      	movs	r2, #2
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e01a      	b.n	80060da <UART_SetConfig+0x246>
 80060a4:	231b      	movs	r3, #27
 80060a6:	2220      	movs	r2, #32
 80060a8:	189b      	adds	r3, r3, r2
 80060aa:	19db      	adds	r3, r3, r7
 80060ac:	2204      	movs	r2, #4
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	e013      	b.n	80060da <UART_SetConfig+0x246>
 80060b2:	231b      	movs	r3, #27
 80060b4:	2220      	movs	r2, #32
 80060b6:	189b      	adds	r3, r3, r2
 80060b8:	19db      	adds	r3, r3, r7
 80060ba:	2208      	movs	r2, #8
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e00c      	b.n	80060da <UART_SetConfig+0x246>
 80060c0:	231b      	movs	r3, #27
 80060c2:	2220      	movs	r2, #32
 80060c4:	189b      	adds	r3, r3, r2
 80060c6:	19db      	adds	r3, r3, r7
 80060c8:	2210      	movs	r2, #16
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	e005      	b.n	80060da <UART_SetConfig+0x246>
 80060ce:	231b      	movs	r3, #27
 80060d0:	2220      	movs	r2, #32
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	19db      	adds	r3, r3, r7
 80060d6:	2210      	movs	r2, #16
 80060d8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a2b      	ldr	r2, [pc, #172]	; (800618c <UART_SetConfig+0x2f8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d000      	beq.n	80060e6 <UART_SetConfig+0x252>
 80060e4:	e0a9      	b.n	800623a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060e6:	231b      	movs	r3, #27
 80060e8:	2220      	movs	r2, #32
 80060ea:	189b      	adds	r3, r3, r2
 80060ec:	19db      	adds	r3, r3, r7
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d015      	beq.n	8006120 <UART_SetConfig+0x28c>
 80060f4:	dc18      	bgt.n	8006128 <UART_SetConfig+0x294>
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d00d      	beq.n	8006116 <UART_SetConfig+0x282>
 80060fa:	dc15      	bgt.n	8006128 <UART_SetConfig+0x294>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <UART_SetConfig+0x272>
 8006100:	2b02      	cmp	r3, #2
 8006102:	d005      	beq.n	8006110 <UART_SetConfig+0x27c>
 8006104:	e010      	b.n	8006128 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006106:	f7fe fb69 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
 800610a:	0003      	movs	r3, r0
 800610c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800610e:	e014      	b.n	800613a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <UART_SetConfig+0x314>)
 8006112:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006114:	e011      	b.n	800613a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006116:	f7fe fad5 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 800611a:	0003      	movs	r3, r0
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800611e:	e00c      	b.n	800613a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006126:	e008      	b.n	800613a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800612c:	231a      	movs	r3, #26
 800612e:	2220      	movs	r2, #32
 8006130:	189b      	adds	r3, r3, r2
 8006132:	19db      	adds	r3, r3, r7
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
        break;
 8006138:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	2b00      	cmp	r3, #0
 800613e:	d100      	bne.n	8006142 <UART_SetConfig+0x2ae>
 8006140:	e14b      	b.n	80063da <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006146:	4b19      	ldr	r3, [pc, #100]	; (80061ac <UART_SetConfig+0x318>)
 8006148:	0052      	lsls	r2, r2, #1
 800614a:	5ad3      	ldrh	r3, [r2, r3]
 800614c:	0019      	movs	r1, r3
 800614e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006150:	f7f9 fff4 	bl	800013c <__udivsi3>
 8006154:	0003      	movs	r3, r0
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	0013      	movs	r3, r2
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	189b      	adds	r3, r3, r2
 8006162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006164:	429a      	cmp	r2, r3
 8006166:	d305      	bcc.n	8006174 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800616e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006170:	429a      	cmp	r2, r3
 8006172:	d91d      	bls.n	80061b0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006174:	231a      	movs	r3, #26
 8006176:	2220      	movs	r2, #32
 8006178:	189b      	adds	r3, r3, r2
 800617a:	19db      	adds	r3, r3, r7
 800617c:	2201      	movs	r2, #1
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e12b      	b.n	80063da <UART_SetConfig+0x546>
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	cfff69f3 	.word	0xcfff69f3
 8006188:	ffffcfff 	.word	0xffffcfff
 800618c:	40008000 	.word	0x40008000
 8006190:	11fff4ff 	.word	0x11fff4ff
 8006194:	40013800 	.word	0x40013800
 8006198:	40021000 	.word	0x40021000
 800619c:	40004400 	.word	0x40004400
 80061a0:	40004800 	.word	0x40004800
 80061a4:	40004c00 	.word	0x40004c00
 80061a8:	00f42400 	.word	0x00f42400
 80061ac:	0800c7d8 	.word	0x0800c7d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	2300      	movs	r3, #0
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061bc:	4b92      	ldr	r3, [pc, #584]	; (8006408 <UART_SetConfig+0x574>)
 80061be:	0052      	lsls	r2, r2, #1
 80061c0:	5ad3      	ldrh	r3, [r2, r3]
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	69b8      	ldr	r0, [r7, #24]
 80061ce:	69f9      	ldr	r1, [r7, #28]
 80061d0:	f7fa f968 	bl	80004a4 <__aeabi_uldivmod>
 80061d4:	0002      	movs	r2, r0
 80061d6:	000b      	movs	r3, r1
 80061d8:	0e11      	lsrs	r1, r2, #24
 80061da:	021d      	lsls	r5, r3, #8
 80061dc:	430d      	orrs	r5, r1
 80061de:	0214      	lsls	r4, r2, #8
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	085b      	lsrs	r3, r3, #1
 80061e6:	60bb      	str	r3, [r7, #8]
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68b8      	ldr	r0, [r7, #8]
 80061ee:	68f9      	ldr	r1, [r7, #12]
 80061f0:	1900      	adds	r0, r0, r4
 80061f2:	4169      	adcs	r1, r5
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	2300      	movs	r3, #0
 80061fc:	607b      	str	r3, [r7, #4]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f7fa f94f 	bl	80004a4 <__aeabi_uldivmod>
 8006206:	0002      	movs	r2, r0
 8006208:	000b      	movs	r3, r1
 800620a:	0013      	movs	r3, r2
 800620c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800620e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006210:	23c0      	movs	r3, #192	; 0xc0
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	429a      	cmp	r2, r3
 8006216:	d309      	bcc.n	800622c <UART_SetConfig+0x398>
 8006218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	035b      	lsls	r3, r3, #13
 800621e:	429a      	cmp	r2, r3
 8006220:	d204      	bcs.n	800622c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006228:	60da      	str	r2, [r3, #12]
 800622a:	e0d6      	b.n	80063da <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800622c:	231a      	movs	r3, #26
 800622e:	2220      	movs	r2, #32
 8006230:	189b      	adds	r3, r3, r2
 8006232:	19db      	adds	r3, r3, r7
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	e0cf      	b.n	80063da <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	429a      	cmp	r2, r3
 8006244:	d000      	beq.n	8006248 <UART_SetConfig+0x3b4>
 8006246:	e070      	b.n	800632a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006248:	231b      	movs	r3, #27
 800624a:	2220      	movs	r2, #32
 800624c:	189b      	adds	r3, r3, r2
 800624e:	19db      	adds	r3, r3, r7
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b08      	cmp	r3, #8
 8006254:	d015      	beq.n	8006282 <UART_SetConfig+0x3ee>
 8006256:	dc18      	bgt.n	800628a <UART_SetConfig+0x3f6>
 8006258:	2b04      	cmp	r3, #4
 800625a:	d00d      	beq.n	8006278 <UART_SetConfig+0x3e4>
 800625c:	dc15      	bgt.n	800628a <UART_SetConfig+0x3f6>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <UART_SetConfig+0x3d4>
 8006262:	2b02      	cmp	r3, #2
 8006264:	d005      	beq.n	8006272 <UART_SetConfig+0x3de>
 8006266:	e010      	b.n	800628a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006268:	f7fe fab8 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
 800626c:	0003      	movs	r3, r0
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006270:	e014      	b.n	800629c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006272:	4b66      	ldr	r3, [pc, #408]	; (800640c <UART_SetConfig+0x578>)
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006276:	e011      	b.n	800629c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006278:	f7fe fa24 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 800627c:	0003      	movs	r3, r0
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006280:	e00c      	b.n	800629c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006282:	2380      	movs	r3, #128	; 0x80
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006288:	e008      	b.n	800629c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800628e:	231a      	movs	r3, #26
 8006290:	2220      	movs	r2, #32
 8006292:	189b      	adds	r3, r3, r2
 8006294:	19db      	adds	r3, r3, r7
 8006296:	2201      	movs	r2, #1
 8006298:	701a      	strb	r2, [r3, #0]
        break;
 800629a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d100      	bne.n	80062a4 <UART_SetConfig+0x410>
 80062a2:	e09a      	b.n	80063da <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a8:	4b57      	ldr	r3, [pc, #348]	; (8006408 <UART_SetConfig+0x574>)
 80062aa:	0052      	lsls	r2, r2, #1
 80062ac:	5ad3      	ldrh	r3, [r2, r3]
 80062ae:	0019      	movs	r1, r3
 80062b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062b2:	f7f9 ff43 	bl	800013c <__udivsi3>
 80062b6:	0003      	movs	r3, r0
 80062b8:	005a      	lsls	r2, r3, #1
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	18d2      	adds	r2, r2, r3
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	0019      	movs	r1, r3
 80062c8:	0010      	movs	r0, r2
 80062ca:	f7f9 ff37 	bl	800013c <__udivsi3>
 80062ce:	0003      	movs	r3, r0
 80062d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	2b0f      	cmp	r3, #15
 80062d6:	d921      	bls.n	800631c <UART_SetConfig+0x488>
 80062d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	025b      	lsls	r3, r3, #9
 80062de:	429a      	cmp	r2, r3
 80062e0:	d21c      	bcs.n	800631c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	200e      	movs	r0, #14
 80062e8:	2420      	movs	r4, #32
 80062ea:	1903      	adds	r3, r0, r4
 80062ec:	19db      	adds	r3, r3, r7
 80062ee:	210f      	movs	r1, #15
 80062f0:	438a      	bics	r2, r1
 80062f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2207      	movs	r2, #7
 80062fc:	4013      	ands	r3, r2
 80062fe:	b299      	uxth	r1, r3
 8006300:	1903      	adds	r3, r0, r4
 8006302:	19db      	adds	r3, r3, r7
 8006304:	1902      	adds	r2, r0, r4
 8006306:	19d2      	adds	r2, r2, r7
 8006308:	8812      	ldrh	r2, [r2, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1902      	adds	r2, r0, r4
 8006314:	19d2      	adds	r2, r2, r7
 8006316:	8812      	ldrh	r2, [r2, #0]
 8006318:	60da      	str	r2, [r3, #12]
 800631a:	e05e      	b.n	80063da <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800631c:	231a      	movs	r3, #26
 800631e:	2220      	movs	r2, #32
 8006320:	189b      	adds	r3, r3, r2
 8006322:	19db      	adds	r3, r3, r7
 8006324:	2201      	movs	r2, #1
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	e057      	b.n	80063da <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800632a:	231b      	movs	r3, #27
 800632c:	2220      	movs	r2, #32
 800632e:	189b      	adds	r3, r3, r2
 8006330:	19db      	adds	r3, r3, r7
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d015      	beq.n	8006364 <UART_SetConfig+0x4d0>
 8006338:	dc18      	bgt.n	800636c <UART_SetConfig+0x4d8>
 800633a:	2b04      	cmp	r3, #4
 800633c:	d00d      	beq.n	800635a <UART_SetConfig+0x4c6>
 800633e:	dc15      	bgt.n	800636c <UART_SetConfig+0x4d8>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <UART_SetConfig+0x4b6>
 8006344:	2b02      	cmp	r3, #2
 8006346:	d005      	beq.n	8006354 <UART_SetConfig+0x4c0>
 8006348:	e010      	b.n	800636c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800634a:	f7fe fa47 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
 800634e:	0003      	movs	r3, r0
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006352:	e014      	b.n	800637e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006354:	4b2d      	ldr	r3, [pc, #180]	; (800640c <UART_SetConfig+0x578>)
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006358:	e011      	b.n	800637e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635a:	f7fe f9b3 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 800635e:	0003      	movs	r3, r0
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006362:	e00c      	b.n	800637e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006364:	2380      	movs	r3, #128	; 0x80
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800636a:	e008      	b.n	800637e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006370:	231a      	movs	r3, #26
 8006372:	2220      	movs	r2, #32
 8006374:	189b      	adds	r3, r3, r2
 8006376:	19db      	adds	r3, r3, r7
 8006378:	2201      	movs	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]
        break;
 800637c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006380:	2b00      	cmp	r3, #0
 8006382:	d02a      	beq.n	80063da <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006388:	4b1f      	ldr	r3, [pc, #124]	; (8006408 <UART_SetConfig+0x574>)
 800638a:	0052      	lsls	r2, r2, #1
 800638c:	5ad3      	ldrh	r3, [r2, r3]
 800638e:	0019      	movs	r1, r3
 8006390:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006392:	f7f9 fed3 	bl	800013c <__udivsi3>
 8006396:	0003      	movs	r3, r0
 8006398:	001a      	movs	r2, r3
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	18d2      	adds	r2, r2, r3
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	0019      	movs	r1, r3
 80063a8:	0010      	movs	r0, r2
 80063aa:	f7f9 fec7 	bl	800013c <__udivsi3>
 80063ae:	0003      	movs	r3, r0
 80063b0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	2b0f      	cmp	r3, #15
 80063b6:	d90a      	bls.n	80063ce <UART_SetConfig+0x53a>
 80063b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ba:	2380      	movs	r3, #128	; 0x80
 80063bc:	025b      	lsls	r3, r3, #9
 80063be:	429a      	cmp	r2, r3
 80063c0:	d205      	bcs.n	80063ce <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60da      	str	r2, [r3, #12]
 80063cc:	e005      	b.n	80063da <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80063ce:	231a      	movs	r3, #26
 80063d0:	2220      	movs	r2, #32
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	19db      	adds	r3, r3, r7
 80063d6:	2201      	movs	r2, #1
 80063d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	226a      	movs	r2, #106	; 0x6a
 80063de:	2101      	movs	r1, #1
 80063e0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	2268      	movs	r2, #104	; 0x68
 80063e6:	2101      	movs	r1, #1
 80063e8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	2200      	movs	r2, #0
 80063ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	2200      	movs	r2, #0
 80063f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80063f6:	231a      	movs	r3, #26
 80063f8:	2220      	movs	r2, #32
 80063fa:	189b      	adds	r3, r3, r2
 80063fc:	19db      	adds	r3, r3, r7
 80063fe:	781b      	ldrb	r3, [r3, #0]
}
 8006400:	0018      	movs	r0, r3
 8006402:	46bd      	mov	sp, r7
 8006404:	b010      	add	sp, #64	; 0x40
 8006406:	bdb0      	pop	{r4, r5, r7, pc}
 8006408:	0800c7d8 	.word	0x0800c7d8
 800640c:	00f42400 	.word	0x00f42400

08006410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	2201      	movs	r2, #1
 800641e:	4013      	ands	r3, r2
 8006420:	d00b      	beq.n	800643a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4a4a      	ldr	r2, [pc, #296]	; (8006554 <UART_AdvFeatureConfig+0x144>)
 800642a:	4013      	ands	r3, r2
 800642c:	0019      	movs	r1, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	2202      	movs	r2, #2
 8006440:	4013      	ands	r3, r2
 8006442:	d00b      	beq.n	800645c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	4a43      	ldr	r2, [pc, #268]	; (8006558 <UART_AdvFeatureConfig+0x148>)
 800644c:	4013      	ands	r3, r2
 800644e:	0019      	movs	r1, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	2204      	movs	r2, #4
 8006462:	4013      	ands	r3, r2
 8006464:	d00b      	beq.n	800647e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	4a3b      	ldr	r2, [pc, #236]	; (800655c <UART_AdvFeatureConfig+0x14c>)
 800646e:	4013      	ands	r3, r2
 8006470:	0019      	movs	r1, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	2208      	movs	r2, #8
 8006484:	4013      	ands	r3, r2
 8006486:	d00b      	beq.n	80064a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	4a34      	ldr	r2, [pc, #208]	; (8006560 <UART_AdvFeatureConfig+0x150>)
 8006490:	4013      	ands	r3, r2
 8006492:	0019      	movs	r1, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	2210      	movs	r2, #16
 80064a6:	4013      	ands	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <UART_AdvFeatureConfig+0x154>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	0019      	movs	r1, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	2220      	movs	r2, #32
 80064c8:	4013      	ands	r3, r2
 80064ca:	d00b      	beq.n	80064e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	4a25      	ldr	r2, [pc, #148]	; (8006568 <UART_AdvFeatureConfig+0x158>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	0019      	movs	r1, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	2240      	movs	r2, #64	; 0x40
 80064ea:	4013      	ands	r3, r2
 80064ec:	d01d      	beq.n	800652a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4a1d      	ldr	r2, [pc, #116]	; (800656c <UART_AdvFeatureConfig+0x15c>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	0019      	movs	r1, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	035b      	lsls	r3, r3, #13
 800650e:	429a      	cmp	r2, r3
 8006510:	d10b      	bne.n	800652a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	4a15      	ldr	r2, [pc, #84]	; (8006570 <UART_AdvFeatureConfig+0x160>)
 800651a:	4013      	ands	r3, r2
 800651c:	0019      	movs	r1, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	2280      	movs	r2, #128	; 0x80
 8006530:	4013      	ands	r3, r2
 8006532:	d00b      	beq.n	800654c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4a0e      	ldr	r2, [pc, #56]	; (8006574 <UART_AdvFeatureConfig+0x164>)
 800653c:	4013      	ands	r3, r2
 800653e:	0019      	movs	r1, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	605a      	str	r2, [r3, #4]
  }
}
 800654c:	46c0      	nop			; (mov r8, r8)
 800654e:	46bd      	mov	sp, r7
 8006550:	b002      	add	sp, #8
 8006552:	bd80      	pop	{r7, pc}
 8006554:	fffdffff 	.word	0xfffdffff
 8006558:	fffeffff 	.word	0xfffeffff
 800655c:	fffbffff 	.word	0xfffbffff
 8006560:	ffff7fff 	.word	0xffff7fff
 8006564:	ffffefff 	.word	0xffffefff
 8006568:	ffffdfff 	.word	0xffffdfff
 800656c:	ffefffff 	.word	0xffefffff
 8006570:	ff9fffff 	.word	0xff9fffff
 8006574:	fff7ffff 	.word	0xfff7ffff

08006578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af02      	add	r7, sp, #8
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2290      	movs	r2, #144	; 0x90
 8006584:	2100      	movs	r1, #0
 8006586:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006588:	f7fc ffc6 	bl	8003518 <HAL_GetTick>
 800658c:	0003      	movs	r3, r0
 800658e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2208      	movs	r2, #8
 8006598:	4013      	ands	r3, r2
 800659a:	2b08      	cmp	r3, #8
 800659c:	d10c      	bne.n	80065b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2280      	movs	r2, #128	; 0x80
 80065a2:	0391      	lsls	r1, r2, #14
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4a1a      	ldr	r2, [pc, #104]	; (8006610 <UART_CheckIdleState+0x98>)
 80065a8:	9200      	str	r2, [sp, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f000 f832 	bl	8006614 <UART_WaitOnFlagUntilTimeout>
 80065b0:	1e03      	subs	r3, r0, #0
 80065b2:	d001      	beq.n	80065b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e026      	b.n	8006606 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2204      	movs	r2, #4
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d10c      	bne.n	80065e0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2280      	movs	r2, #128	; 0x80
 80065ca:	03d1      	lsls	r1, r2, #15
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4a10      	ldr	r2, [pc, #64]	; (8006610 <UART_CheckIdleState+0x98>)
 80065d0:	9200      	str	r2, [sp, #0]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f000 f81e 	bl	8006614 <UART_WaitOnFlagUntilTimeout>
 80065d8:	1e03      	subs	r3, r0, #0
 80065da:	d001      	beq.n	80065e0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e012      	b.n	8006606 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2288      	movs	r2, #136	; 0x88
 80065e4:	2120      	movs	r1, #32
 80065e6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	228c      	movs	r2, #140	; 0x8c
 80065ec:	2120      	movs	r1, #32
 80065ee:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2284      	movs	r2, #132	; 0x84
 8006600:	2100      	movs	r1, #0
 8006602:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	0018      	movs	r0, r3
 8006608:	46bd      	mov	sp, r7
 800660a:	b004      	add	sp, #16
 800660c:	bd80      	pop	{r7, pc}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	01ffffff 	.word	0x01ffffff

08006614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b094      	sub	sp, #80	; 0x50
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	1dfb      	adds	r3, r7, #7
 8006622:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006624:	e0a7      	b.n	8006776 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006628:	3301      	adds	r3, #1
 800662a:	d100      	bne.n	800662e <UART_WaitOnFlagUntilTimeout+0x1a>
 800662c:	e0a3      	b.n	8006776 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662e:	f7fc ff73 	bl	8003518 <HAL_GetTick>
 8006632:	0002      	movs	r2, r0
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800663a:	429a      	cmp	r2, r3
 800663c:	d302      	bcc.n	8006644 <UART_WaitOnFlagUntilTimeout+0x30>
 800663e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006640:	2b00      	cmp	r3, #0
 8006642:	d13f      	bne.n	80066c4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006644:	f3ef 8310 	mrs	r3, PRIMASK
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800664c:	647b      	str	r3, [r7, #68]	; 0x44
 800664e:	2301      	movs	r3, #1
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	f383 8810 	msr	PRIMASK, r3
}
 8006658:	46c0      	nop			; (mov r8, r8)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	494e      	ldr	r1, [pc, #312]	; (80067a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006666:	400a      	ands	r2, r1
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800666c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	f383 8810 	msr	PRIMASK, r3
}
 8006674:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006676:	f3ef 8310 	mrs	r3, PRIMASK
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667e:	643b      	str	r3, [r7, #64]	; 0x40
 8006680:	2301      	movs	r3, #1
 8006682:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	f383 8810 	msr	PRIMASK, r3
}
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2101      	movs	r1, #1
 8006698:	438a      	bics	r2, r1
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a2:	f383 8810 	msr	PRIMASK, r3
}
 80066a6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2288      	movs	r2, #136	; 0x88
 80066ac:	2120      	movs	r1, #32
 80066ae:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	228c      	movs	r2, #140	; 0x8c
 80066b4:	2120      	movs	r1, #32
 80066b6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2284      	movs	r2, #132	; 0x84
 80066bc:	2100      	movs	r1, #0
 80066be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e069      	b.n	8006798 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2204      	movs	r2, #4
 80066cc:	4013      	ands	r3, r2
 80066ce:	d052      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	2380      	movs	r3, #128	; 0x80
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	401a      	ands	r2, r3
 80066dc:	2380      	movs	r3, #128	; 0x80
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d148      	bne.n	8006776 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2280      	movs	r2, #128	; 0x80
 80066ea:	0112      	lsls	r2, r2, #4
 80066ec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ee:	f3ef 8310 	mrs	r3, PRIMASK
 80066f2:	613b      	str	r3, [r7, #16]
  return(result);
 80066f4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f8:	2301      	movs	r3, #1
 80066fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f383 8810 	msr	PRIMASK, r3
}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4924      	ldr	r1, [pc, #144]	; (80067a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006710:	400a      	ands	r2, r1
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006716:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f383 8810 	msr	PRIMASK, r3
}
 800671e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006720:	f3ef 8310 	mrs	r3, PRIMASK
 8006724:	61fb      	str	r3, [r7, #28]
  return(result);
 8006726:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006728:	64bb      	str	r3, [r7, #72]	; 0x48
 800672a:	2301      	movs	r3, #1
 800672c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	f383 8810 	msr	PRIMASK, r3
}
 8006734:	46c0      	nop			; (mov r8, r8)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2101      	movs	r1, #1
 8006742:	438a      	bics	r2, r1
 8006744:	609a      	str	r2, [r3, #8]
 8006746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	f383 8810 	msr	PRIMASK, r3
}
 8006750:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2288      	movs	r2, #136	; 0x88
 8006756:	2120      	movs	r1, #32
 8006758:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	228c      	movs	r2, #140	; 0x8c
 800675e:	2120      	movs	r1, #32
 8006760:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2290      	movs	r2, #144	; 0x90
 8006766:	2120      	movs	r1, #32
 8006768:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2284      	movs	r2, #132	; 0x84
 800676e:	2100      	movs	r1, #0
 8006770:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e010      	b.n	8006798 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	4013      	ands	r3, r2
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	425a      	negs	r2, r3
 8006786:	4153      	adcs	r3, r2
 8006788:	b2db      	uxtb	r3, r3
 800678a:	001a      	movs	r2, r3
 800678c:	1dfb      	adds	r3, r7, #7
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d100      	bne.n	8006796 <UART_WaitOnFlagUntilTimeout+0x182>
 8006794:	e747      	b.n	8006626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	0018      	movs	r0, r3
 800679a:	46bd      	mov	sp, r7
 800679c:	b014      	add	sp, #80	; 0x50
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	fffffe5f 	.word	0xfffffe5f

080067a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2284      	movs	r2, #132	; 0x84
 80067b0:	5c9b      	ldrb	r3, [r3, r2]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_UARTEx_DisableFifoMode+0x16>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e027      	b.n	800680a <HAL_UARTEx_DisableFifoMode+0x66>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2284      	movs	r2, #132	; 0x84
 80067be:	2101      	movs	r1, #1
 80067c0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2288      	movs	r2, #136	; 0x88
 80067c6:	2124      	movs	r1, #36	; 0x24
 80067c8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2101      	movs	r1, #1
 80067de:	438a      	bics	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a0b      	ldr	r2, [pc, #44]	; (8006814 <HAL_UARTEx_DisableFifoMode+0x70>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2288      	movs	r2, #136	; 0x88
 80067fc:	2120      	movs	r1, #32
 80067fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2284      	movs	r2, #132	; 0x84
 8006804:	2100      	movs	r1, #0
 8006806:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	0018      	movs	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	b004      	add	sp, #16
 8006810:	bd80      	pop	{r7, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	dfffffff 	.word	0xdfffffff

08006818 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2284      	movs	r2, #132	; 0x84
 8006826:	5c9b      	ldrb	r3, [r3, r2]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800682c:	2302      	movs	r3, #2
 800682e:	e02e      	b.n	800688e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2284      	movs	r2, #132	; 0x84
 8006834:	2101      	movs	r1, #1
 8006836:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2288      	movs	r2, #136	; 0x88
 800683c:	2124      	movs	r1, #36	; 0x24
 800683e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2101      	movs	r1, #1
 8006854:	438a      	bics	r2, r1
 8006856:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	08d9      	lsrs	r1, r3, #3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	0018      	movs	r0, r3
 8006870:	f000 f854 	bl	800691c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2288      	movs	r2, #136	; 0x88
 8006880:	2120      	movs	r1, #32
 8006882:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2284      	movs	r2, #132	; 0x84
 8006888:	2100      	movs	r1, #0
 800688a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	0018      	movs	r0, r3
 8006890:	46bd      	mov	sp, r7
 8006892:	b004      	add	sp, #16
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2284      	movs	r2, #132	; 0x84
 80068a6:	5c9b      	ldrb	r3, [r3, r2]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e02f      	b.n	8006910 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2284      	movs	r2, #132	; 0x84
 80068b4:	2101      	movs	r1, #1
 80068b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2288      	movs	r2, #136	; 0x88
 80068bc:	2124      	movs	r1, #36	; 0x24
 80068be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2101      	movs	r1, #1
 80068d4:	438a      	bics	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	4a0e      	ldr	r2, [pc, #56]	; (8006918 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	0019      	movs	r1, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0018      	movs	r0, r3
 80068f2:	f000 f813 	bl	800691c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2288      	movs	r2, #136	; 0x88
 8006902:	2120      	movs	r1, #32
 8006904:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2284      	movs	r2, #132	; 0x84
 800690a:	2100      	movs	r1, #0
 800690c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	0018      	movs	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	b004      	add	sp, #16
 8006916:	bd80      	pop	{r7, pc}
 8006918:	f1ffffff 	.word	0xf1ffffff

0800691c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006928:	2b00      	cmp	r3, #0
 800692a:	d108      	bne.n	800693e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	226a      	movs	r2, #106	; 0x6a
 8006930:	2101      	movs	r1, #1
 8006932:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2268      	movs	r2, #104	; 0x68
 8006938:	2101      	movs	r1, #1
 800693a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800693c:	e043      	b.n	80069c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800693e:	260f      	movs	r6, #15
 8006940:	19bb      	adds	r3, r7, r6
 8006942:	2208      	movs	r2, #8
 8006944:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006946:	200e      	movs	r0, #14
 8006948:	183b      	adds	r3, r7, r0
 800694a:	2208      	movs	r2, #8
 800694c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	0e5b      	lsrs	r3, r3, #25
 8006956:	b2da      	uxtb	r2, r3
 8006958:	240d      	movs	r4, #13
 800695a:	193b      	adds	r3, r7, r4
 800695c:	2107      	movs	r1, #7
 800695e:	400a      	ands	r2, r1
 8006960:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	0f5b      	lsrs	r3, r3, #29
 800696a:	b2da      	uxtb	r2, r3
 800696c:	250c      	movs	r5, #12
 800696e:	197b      	adds	r3, r7, r5
 8006970:	2107      	movs	r1, #7
 8006972:	400a      	ands	r2, r1
 8006974:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006976:	183b      	adds	r3, r7, r0
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	197a      	adds	r2, r7, r5
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	4914      	ldr	r1, [pc, #80]	; (80069d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006980:	5c8a      	ldrb	r2, [r1, r2]
 8006982:	435a      	muls	r2, r3
 8006984:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006986:	197b      	adds	r3, r7, r5
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800698c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800698e:	0019      	movs	r1, r3
 8006990:	f7f9 fc5e 	bl	8000250 <__divsi3>
 8006994:	0003      	movs	r3, r0
 8006996:	b299      	uxth	r1, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	226a      	movs	r2, #106	; 0x6a
 800699c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800699e:	19bb      	adds	r3, r7, r6
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	193a      	adds	r2, r7, r4
 80069a4:	7812      	ldrb	r2, [r2, #0]
 80069a6:	490a      	ldr	r1, [pc, #40]	; (80069d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80069a8:	5c8a      	ldrb	r2, [r1, r2]
 80069aa:	435a      	muls	r2, r3
 80069ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80069ae:	193b      	adds	r3, r7, r4
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	4a08      	ldr	r2, [pc, #32]	; (80069d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80069b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069b6:	0019      	movs	r1, r3
 80069b8:	f7f9 fc4a 	bl	8000250 <__divsi3>
 80069bc:	0003      	movs	r3, r0
 80069be:	b299      	uxth	r1, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2268      	movs	r2, #104	; 0x68
 80069c4:	5299      	strh	r1, [r3, r2]
}
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	46bd      	mov	sp, r7
 80069ca:	b005      	add	sp, #20
 80069cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	0800c7f0 	.word	0x0800c7f0
 80069d4:	0800c7f8 	.word	0x0800c7f8

080069d8 <set_my_rtc_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void set_my_rtc_from_nmea_rmc ( const char* m )
{
 80069d8:	b5b0      	push	{r4, r5, r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  get_my_nmea_rmc_date_yy ( m , &sDate.Year ) ;
 80069e0:	2508      	movs	r5, #8
 80069e2:	197b      	adds	r3, r7, r5
 80069e4:	1cda      	adds	r2, r3, #3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0011      	movs	r1, r2
 80069ea:	0018      	movs	r0, r3
 80069ec:	f000 fafe 	bl	8006fec <get_my_nmea_rmc_date_yy>
	  get_my_nmea_rmc_date_mm ( m , &sDate.Month ) ;
 80069f0:	197b      	adds	r3, r7, r5
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	0011      	movs	r1, r2
 80069f8:	0018      	movs	r0, r3
 80069fa:	f000 fb31 	bl	8007060 <get_my_nmea_rmc_date_mm>
	  get_my_nmea_rmc_date_dd ( m , &sDate.Date ) ;
 80069fe:	197b      	adds	r3, r7, r5
 8006a00:	1c9a      	adds	r2, r3, #2
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	0011      	movs	r1, r2
 8006a06:	0018      	movs	r0, r3
 8006a08:	f000 fb64 	bl	80070d4 <get_my_nmea_rmc_date_dd>
	  get_my_nmea_rmc_utc_hh ( m , &sTime.Hours ) ;
 8006a0c:	240c      	movs	r4, #12
 8006a0e:	193a      	adds	r2, r7, r4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	0011      	movs	r1, r2
 8006a14:	0018      	movs	r0, r3
 8006a16:	f000 fb97 	bl	8007148 <get_my_nmea_rmc_utc_hh>
	  get_my_nmea_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8006a1a:	193b      	adds	r3, r7, r4
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	0011      	movs	r1, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f000 fbca 	bl	80071bc <get_my_nmea_rmc_utc_mm>
	  get_my_nmea_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8006a28:	193b      	adds	r3, r7, r4
 8006a2a:	1c9a      	adds	r2, r3, #2
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	0011      	movs	r1, r2
 8006a30:	0018      	movs	r0, r3
 8006a32:	f000 fbfd 	bl	8007230 <get_my_nmea_rmc_utc_ss>
	  get_my_nmea_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8006a36:	193b      	adds	r3, r7, r4
 8006a38:	1d1a      	adds	r2, r3, #4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0011      	movs	r1, r2
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f000 fc30 	bl	80072a4 <get_my_nmea_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006a44:	193b      	adds	r3, r7, r4
 8006a46:	2200      	movs	r2, #0
 8006a48:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006a4a:	193b      	adds	r3, r7, r4
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <set_my_rtc_from_nmea_rmc+0xa8>)
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7fe fc68 	bl	8005328 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8006a58:	1939      	adds	r1, r7, r4
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <set_my_rtc_from_nmea_rmc+0xa8>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f7fe f92c 	bl	8004cbc <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8006a64:	1979      	adds	r1, r7, r5
 8006a66:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <set_my_rtc_from_nmea_rmc+0xa8>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f7fe f9ce 	bl	8004e0c <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8006a70:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <set_my_rtc_from_nmea_rmc+0xa8>)
 8006a72:	0018      	movs	r0, r3
 8006a74:	f7fe fc8c 	bl	8005390 <HAL_RTCEx_DisableBypassShadow>
}
 8006a78:	46c0      	nop			; (mov r8, r8)
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b008      	add	sp, #32
 8006a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8006a80:	20000258 	.word	0x20000258

08006a84 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2100      	movs	r1, #0
 8006a90:	0018      	movs	r0, r3
 8006a92:	f001 fb2d 	bl	80080f0 <strtod>
 8006a96:	0002      	movs	r2, r0
 8006a98:	000b      	movs	r3, r1
 8006a9a:	60ba      	str	r2, [r7, #8]
 8006a9c:	60fb      	str	r3, [r7, #12]
    return d ;
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
}
 8006aa2:	0010      	movs	r0, r2
 8006aa4:	0019      	movs	r1, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b004      	add	sp, #16
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	0008      	movs	r0, r1
 8006ab6:	0011      	movs	r1, r2
 8006ab8:	1cfb      	adds	r3, r7, #3
 8006aba:	1c02      	adds	r2, r0, #0
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	1cbb      	adds	r3, r7, #2
 8006ac0:	1c0a      	adds	r2, r1, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8006ac4:	230f      	movs	r3, #15
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8006acc:	230e      	movs	r3, #14
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8006ad4:	e01c      	b.n	8006b10 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8006ad6:	230f      	movs	r3, #15
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	18d3      	adds	r3, r2, r3
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	1cfa      	adds	r2, r7, #3
 8006ae4:	7812      	ldrb	r2, [r2, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d105      	bne.n	8006af6 <my_find_char_position+0x4a>
			p++ ;
 8006aea:	210e      	movs	r1, #14
 8006aec:	187b      	adds	r3, r7, r1
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	187b      	adds	r3, r7, r1
 8006af2:	3201      	adds	r2, #1
 8006af4:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8006af6:	230e      	movs	r3, #14
 8006af8:	18fa      	adds	r2, r7, r3
 8006afa:	1cbb      	adds	r3, r7, #2
 8006afc:	7812      	ldrb	r2, [r2, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d00e      	beq.n	8006b22 <my_find_char_position+0x76>
			break ;
		i++ ;
 8006b04:	210f      	movs	r1, #15
 8006b06:	187b      	adds	r3, r7, r1
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	3201      	adds	r2, #1
 8006b0e:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8006b10:	230f      	movs	r3, #15
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	18d3      	adds	r3, r2, r3
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1da      	bne.n	8006ad6 <my_find_char_position+0x2a>
 8006b20:	e000      	b.n	8006b24 <my_find_char_position+0x78>
			break ;
 8006b22:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8006b24:	230f      	movs	r3, #15
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	781b      	ldrb	r3, [r3, #0]
}
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b004      	add	sp, #16
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <my_nmea_message>:
    }
    return -1 ;
}
*/
int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b24      	cmp	r3, #36	; 0x24
 8006b44:	d117      	bne.n	8006b76 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	b2d1      	uxtb	r1, r2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	7011      	strb	r1, [r2, #0]
 8006b58:	001a      	movs	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	189b      	adds	r3, r3, r2
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	001a      	movs	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	189b      	adds	r3, r3, r2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e045      	b.n	8006c02 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b1f      	cmp	r3, #31
 8006b7c:	d907      	bls.n	8006b8e <my_nmea_message+0x5c>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b7e      	cmp	r3, #126	; 0x7e
 8006b84:	d803      	bhi.n	8006b8e <my_nmea_message+0x5c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d103      	bne.n	8006b96 <my_nmea_message+0x64>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b0d      	cmp	r3, #13
 8006b94:	d114      	bne.n	8006bc0 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	b2d1      	uxtb	r1, r2
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	7011      	strb	r1, [r2, #0]
 8006ba2:	001a      	movs	r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	189b      	adds	r3, r3, r2
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	7812      	ldrb	r2, [r2, #0]
 8006bac:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	189b      	adds	r3, r3, r2
 8006bb8:	2200      	movs	r2, #0
 8006bba:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e020      	b.n	8006c02 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b0a      	cmp	r3, #10
 8006bc6:	d11a      	bne.n	8006bfe <my_nmea_message+0xcc>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d916      	bls.n	8006bfe <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	001a      	movs	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	189b      	adds	r3, r3, r2
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b0d      	cmp	r3, #13
 8006bea:	d108      	bne.n	8006bfe <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	001a      	movs	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	189b      	adds	r3, r3, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e001      	b.n	8006c02 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	425b      	negs	r3, r3
}
 8006c02:	0018      	movs	r0, r3
 8006c04:	46bd      	mov	sp, r7
 8006c06:	b004      	add	sp, #16
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3309      	adds	r3, #9
 8006c16:	781b      	ldrb	r3, [r3, #0]
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b002      	add	sp, #8
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8006c20:	b5b0      	push	{r4, r5, r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	220f      	movs	r2, #15
 8006c2c:	212c      	movs	r1, #44	; 0x2c
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f7ff ff3c 	bl	8006aac <my_find_char_position>
 8006c34:	0003      	movs	r3, r0
 8006c36:	001a      	movs	r2, r3
 8006c38:	2517      	movs	r5, #23
 8006c3a:	197b      	adds	r3, r7, r5
 8006c3c:	3201      	adds	r2, #1
 8006c3e:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2210      	movs	r2, #16
 8006c44:	212c      	movs	r1, #44	; 0x2c
 8006c46:	0018      	movs	r0, r3
 8006c48:	f7ff ff30 	bl	8006aac <my_find_char_position>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	0019      	movs	r1, r3
 8006c50:	2416      	movs	r4, #22
 8006c52:	193b      	adds	r3, r7, r4
 8006c54:	197a      	adds	r2, r7, r5
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	1a8a      	subs	r2, r1, r2
 8006c5a:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8006c5c:	193b      	adds	r3, r7, r4
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	3301      	adds	r3, #1
 8006c62:	0018      	movs	r0, r3
 8006c64:	f000 fb52 	bl	800730c <malloc>
 8006c68:	0003      	movs	r3, r0
 8006c6a:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8006c6c:	197b      	adds	r3, r7, r5
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	18d1      	adds	r1, r2, r3
 8006c74:	193b      	adds	r3, r7, r4
 8006c76:	781a      	ldrb	r2, [r3, #0]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f002 fb09 	bl	8009292 <strncpy>
	pdop_s[pdop_length] = '\0';
 8006c80:	193b      	adds	r3, r7, r4
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	18d3      	adds	r3, r2, r3
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f7ff fef8 	bl	8006a84 <my_string2double_conv>
 8006c94:	0002      	movs	r2, r0
 8006c96:	000b      	movs	r3, r1
 8006c98:	60ba      	str	r2, [r7, #8]
 8006c9a:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 fb3e 	bl	8007320 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
}
 8006ca8:	0010      	movs	r0, r2
 8006caa:	0019      	movs	r1, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b006      	add	sp, #24
 8006cb0:	bdb0      	pop	{r4, r5, r7, pc}

08006cb2 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8006cb2:	b590      	push	{r4, r7, lr}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8006cba:	230f      	movs	r3, #15
 8006cbc:	18fb      	adds	r3, r7, r3
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8006cc2:	230e      	movs	r3, #14
 8006cc4:	18fb      	adds	r3, r7, r3
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006cca:	e00f      	b.n	8006cec <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8006ccc:	220e      	movs	r2, #14
 8006cce:	18bb      	adds	r3, r7, r2
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	18ba      	adds	r2, r7, r2
 8006cd4:	1c59      	adds	r1, r3, #1
 8006cd6:	7011      	strb	r1, [r2, #0]
 8006cd8:	001a      	movs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	189b      	adds	r3, r3, r2
 8006cde:	7819      	ldrb	r1, [r3, #0]
 8006ce0:	220f      	movs	r2, #15
 8006ce2:	18bb      	adds	r3, r7, r2
 8006ce4:	18ba      	adds	r2, r7, r2
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	404a      	eors	r2, r1
 8006cea:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006cec:	210e      	movs	r1, #14
 8006cee:	187b      	adds	r3, r7, r1
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	18d3      	adds	r3, r2, r3
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cfa:	d00a      	beq.n	8006d12 <is_my_nmea_checksum_ok+0x60>
 8006cfc:	187b      	adds	r3, r7, r1
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	18d3      	adds	r3, r2, r3
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <is_my_nmea_checksum_ok+0x60>
 8006d0a:	187b      	adds	r3, r7, r1
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1dc      	bne.n	8006ccc <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8006d12:	230f      	movs	r3, #15
 8006d14:	18fb      	adds	r3, r7, r3
 8006d16:	781c      	ldrb	r4, [r3, #0]
 8006d18:	210e      	movs	r1, #14
 8006d1a:	187b      	adds	r3, r7, r1
 8006d1c:	187a      	adds	r2, r7, r1
 8006d1e:	7812      	ldrb	r2, [r2, #0]
 8006d20:	3201      	adds	r2, #1
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	187b      	adds	r3, r7, r1
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	18d3      	adds	r3, r2, r3
 8006d2c:	2210      	movs	r2, #16
 8006d2e:	2100      	movs	r1, #0
 8006d30:	0018      	movs	r0, r3
 8006d32:	f001 fa75 	bl	8008220 <strtol>
 8006d36:	0003      	movs	r3, r0
 8006d38:	1ae3      	subs	r3, r4, r3
 8006d3a:	425a      	negs	r2, r3
 8006d3c:	4153      	adcs	r3, r2
 8006d3e:	b2db      	uxtb	r3, r3
}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b005      	add	sp, #20
 8006d46:	bd90      	pop	{r4, r7, pc}

08006d48 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8006d48:	b5b0      	push	{r4, r5, r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	000a      	movs	r2, r1
 8006d52:	1cfb      	adds	r3, r7, #3
 8006d54:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8006d56:	2308      	movs	r3, #8
 8006d58:	18fa      	adds	r2, r7, r3
 8006d5a:	492f      	ldr	r1, [pc, #188]	; (8006e18 <nmea2decimal+0xd0>)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f002 fa08 	bl	8009174 <siscanf>
    min = deg / 100 ;
 8006d64:	68b8      	ldr	r0, [r7, #8]
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4b2c      	ldr	r3, [pc, #176]	; (8006e1c <nmea2decimal+0xd4>)
 8006d6c:	f7fa f856 	bl	8000e1c <__aeabi_ddiv>
 8006d70:	0002      	movs	r2, r0
 8006d72:	000b      	movs	r3, r1
 8006d74:	613a      	str	r2, [r7, #16]
 8006d76:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8006d78:	6938      	ldr	r0, [r7, #16]
 8006d7a:	6979      	ldr	r1, [r7, #20]
 8006d7c:	f7fb faaa 	bl	80022d4 <__aeabi_d2iz>
 8006d80:	0003      	movs	r3, r0
 8006d82:	0018      	movs	r0, r3
 8006d84:	f7fb fadc 	bl	8002340 <__aeabi_i2d>
 8006d88:	0002      	movs	r2, r0
 8006d8a:	000b      	movs	r3, r1
 8006d8c:	60ba      	str	r2, [r7, #8]
 8006d8e:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6938      	ldr	r0, [r7, #16]
 8006d96:	6979      	ldr	r1, [r7, #20]
 8006d98:	f7fa fefc 	bl	8001b94 <__aeabi_dsub>
 8006d9c:	0002      	movs	r2, r0
 8006d9e:	000b      	movs	r3, r1
 8006da0:	0010      	movs	r0, r2
 8006da2:	0019      	movs	r1, r3
 8006da4:	2200      	movs	r2, #0
 8006da6:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <nmea2decimal+0xd8>)
 8006da8:	f7fa fc32 	bl	8001610 <__aeabi_dmul>
 8006dac:	0002      	movs	r2, r0
 8006dae:	000b      	movs	r3, r1
 8006db0:	613a      	str	r2, [r7, #16]
 8006db2:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8006db4:	2200      	movs	r2, #0
 8006db6:	4b1b      	ldr	r3, [pc, #108]	; (8006e24 <nmea2decimal+0xdc>)
 8006db8:	6938      	ldr	r0, [r7, #16]
 8006dba:	6979      	ldr	r1, [r7, #20]
 8006dbc:	f7fa f82e 	bl	8000e1c <__aeabi_ddiv>
 8006dc0:	0002      	movs	r2, r0
 8006dc2:	000b      	movs	r3, r1
 8006dc4:	613a      	str	r2, [r7, #16]
 8006dc6:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8006dc8:	1cfb      	adds	r3, r7, #3
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b53      	cmp	r3, #83	; 0x53
 8006dce:	d003      	beq.n	8006dd8 <nmea2decimal+0x90>
 8006dd0:	1cfb      	adds	r3, r7, #3
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b57      	cmp	r3, #87	; 0x57
 8006dd6:	d10e      	bne.n	8006df6 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8006dd8:	68b8      	ldr	r0, [r7, #8]
 8006dda:	68f9      	ldr	r1, [r7, #12]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f7f9 fcbc 	bl	800075c <__aeabi_dadd>
 8006de4:	0002      	movs	r2, r0
 8006de6:	000b      	movs	r3, r1
 8006de8:	0011      	movs	r1, r2
 8006dea:	000c      	movs	r4, r1
 8006dec:	2180      	movs	r1, #128	; 0x80
 8006dee:	0609      	lsls	r1, r1, #24
 8006df0:	4059      	eors	r1, r3
 8006df2:	000d      	movs	r5, r1
 8006df4:	e009      	b.n	8006e0a <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8006df6:	68b8      	ldr	r0, [r7, #8]
 8006df8:	68f9      	ldr	r1, [r7, #12]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f7f9 fcad 	bl	800075c <__aeabi_dadd>
 8006e02:	0002      	movs	r2, r0
 8006e04:	000b      	movs	r3, r1
 8006e06:	0014      	movs	r4, r2
 8006e08:	001d      	movs	r5, r3
}
 8006e0a:	0022      	movs	r2, r4
 8006e0c:	002b      	movs	r3, r5
 8006e0e:	0010      	movs	r0, r2
 8006e10:	0019      	movs	r1, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b006      	add	sp, #24
 8006e16:	bdb0      	pop	{r4, r5, r7, pc}
 8006e18:	0800c718 	.word	0x0800c718
 8006e1c:	40590000 	.word	0x40590000
 8006e20:	40240000 	.word	0x40240000
 8006e24:	40180000 	.word	0x40180000

08006e28 <get_my_nmea_gngll_coordinates_s>:
    //double c = ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
    //return ( deg + min / 0.6 ) * ( ( dir == 'S' || dir == 'W' ) ? -1 : 1 ) ;
}
*/
void get_my_nmea_gngll_coordinates_s ( const char* m , char* latitude , char* longitude )
{
 8006e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2a:	b091      	sub	sp, #68	; 0x44
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	212c      	movs	r1, #44	; 0x2c
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f7ff fe36 	bl	8006aac <my_find_char_position>
 8006e40:	0003      	movs	r3, r0
 8006e42:	001a      	movs	r2, r3
 8006e44:	2537      	movs	r5, #55	; 0x37
 8006e46:	197b      	adds	r3, r7, r5
 8006e48:	3201      	adds	r2, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	212c      	movs	r1, #44	; 0x2c
 8006e52:	0018      	movs	r0, r3
 8006e54:	f7ff fe2a 	bl	8006aac <my_find_char_position>
 8006e58:	0003      	movs	r3, r0
 8006e5a:	0019      	movs	r1, r3
 8006e5c:	2436      	movs	r4, #54	; 0x36
 8006e5e:	193b      	adds	r3, r7, r4
 8006e60:	197a      	adds	r2, r7, r5
 8006e62:	7812      	ldrb	r2, [r2, #0]
 8006e64:	1a8a      	subs	r2, r1, r2
 8006e66:	701a      	strb	r2, [r3, #0]

	char* latitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8006e68:	193b      	adds	r3, r7, r4
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f000 fa4c 	bl	800730c <malloc>
 8006e74:	0003      	movs	r3, r0
 8006e76:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8006e78:	197b      	adds	r3, r7, r5
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	18d1      	adds	r1, r2, r3
 8006e80:	193b      	adds	r3, r7, r4
 8006e82:	781a      	ldrb	r2, [r3, #0]
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	0018      	movs	r0, r3
 8006e88:	f002 fa03 	bl	8009292 <strncpy>
	latitude_s[coordinate_length] = '\0';
 8006e8c:	193b      	adds	r3, r7, r4
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e92:	18d3      	adds	r3, r2, r3
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8006e98:	197b      	adds	r3, r7, r5
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	193b      	adds	r3, r7, r4
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	18d3      	adds	r3, r2, r3
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	18d2      	adds	r2, r2, r3
 8006ea8:	262f      	movs	r6, #47	; 0x2f
 8006eaa:	19bb      	adds	r3, r7, r6
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s , direction ) ;
 8006eb0:	19bb      	adds	r3, r7, r6
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	0011      	movs	r1, r2
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f7ff ff45 	bl	8006d48 <nmea2decimal>
 8006ebe:	0002      	movs	r2, r0
 8006ec0:	000b      	movs	r3, r1
 8006ec2:	623a      	str	r2, [r7, #32]
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s ) ;
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f000 fa29 	bl	8007320 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8006ece:	2200      	movs	r2, #0
 8006ed0:	4b44      	ldr	r3, [pc, #272]	; (8006fe4 <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006ed2:	6a38      	ldr	r0, [r7, #32]
 8006ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ed6:	f7fa fb9b 	bl	8001610 <__aeabi_dmul>
 8006eda:	0002      	movs	r2, r0
 8006edc:	000b      	movs	r3, r1
 8006ede:	0010      	movs	r0, r2
 8006ee0:	0019      	movs	r1, r3
 8006ee2:	f005 fb79 	bl	800c5d8 <round>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4b3e      	ldr	r3, [pc, #248]	; (8006fe4 <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006eea:	f7f9 ff97 	bl	8000e1c <__aeabi_ddiv>
 8006eee:	0002      	movs	r2, r0
 8006ef0:	000b      	movs	r3, r1
 8006ef2:	623a      	str	r2, [r7, #32]
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude , 12 , "%.6lf" , latitude_d ) ;
 8006ef6:	493c      	ldr	r1, [pc, #240]	; (8006fe8 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8006ef8:	68b8      	ldr	r0, [r7, #8]
 8006efa:	6a3a      	ldr	r2, [r7, #32]
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	9200      	str	r2, [sp, #0]
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	000a      	movs	r2, r1
 8006f04:	210c      	movs	r1, #12
 8006f06:	f002 f8e1 	bl	80090cc <sniprintf>

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	212c      	movs	r1, #44	; 0x2c
 8006f10:	0018      	movs	r0, r3
 8006f12:	f7ff fdcb 	bl	8006aac <my_find_char_position>
 8006f16:	0003      	movs	r3, r0
 8006f18:	001a      	movs	r2, r3
 8006f1a:	197b      	adds	r3, r7, r5
 8006f1c:	3201      	adds	r2, #1
 8006f1e:	701a      	strb	r2, [r3, #0]
	//coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2204      	movs	r2, #4
 8006f24:	212c      	movs	r1, #44	; 0x2c
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7ff fdc0 	bl	8006aac <my_find_char_position>
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	0019      	movs	r1, r3
 8006f30:	193b      	adds	r3, r7, r4
 8006f32:	197a      	adds	r2, r7, r5
 8006f34:	7812      	ldrb	r2, [r2, #0]
 8006f36:	1a8a      	subs	r2, r1, r2
 8006f38:	701a      	strb	r2, [r3, #0]

	char* longitude_s = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8006f3a:	193b      	adds	r3, r7, r4
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	0018      	movs	r0, r3
 8006f42:	f000 f9e3 	bl	800730c <malloc>
 8006f46:	0003      	movs	r3, r0
 8006f48:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8006f4a:	197b      	adds	r3, r7, r5
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	18d1      	adds	r1, r2, r3
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	781a      	ldrb	r2, [r3, #0]
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f002 f99a 	bl	8009292 <strncpy>
	longitude_s[coordinate_length] = '\0';
 8006f5e:	193b      	adds	r3, r7, r4
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	18d3      	adds	r3, r2, r3
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8006f6a:	197b      	adds	r3, r7, r5
 8006f6c:	781a      	ldrb	r2, [r3, #0]
 8006f6e:	193b      	adds	r3, r7, r4
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	18d3      	adds	r3, r2, r3
 8006f74:	3301      	adds	r3, #1
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	18d2      	adds	r2, r2, r3
 8006f7a:	19bb      	adds	r3, r7, r6
 8006f7c:	7812      	ldrb	r2, [r2, #0]
 8006f7e:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s , direction ) ;
 8006f80:	19bb      	adds	r3, r7, r6
 8006f82:	781a      	ldrb	r2, [r3, #0]
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	0011      	movs	r1, r2
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7ff fedd 	bl	8006d48 <nmea2decimal>
 8006f8e:	0002      	movs	r2, r0
 8006f90:	000b      	movs	r3, r1
 8006f92:	613a      	str	r2, [r7, #16]
 8006f94:	617b      	str	r3, [r7, #20]
	free ( longitude_s ) ;
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f000 f9c1 	bl	8007320 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006fa2:	6938      	ldr	r0, [r7, #16]
 8006fa4:	6979      	ldr	r1, [r7, #20]
 8006fa6:	f7fa fb33 	bl	8001610 <__aeabi_dmul>
 8006faa:	0002      	movs	r2, r0
 8006fac:	000b      	movs	r3, r1
 8006fae:	0010      	movs	r0, r2
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	f005 fb11 	bl	800c5d8 <round>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <get_my_nmea_gngll_coordinates_s+0x1bc>)
 8006fba:	f7f9 ff2f 	bl	8000e1c <__aeabi_ddiv>
 8006fbe:	0002      	movs	r2, r0
 8006fc0:	000b      	movs	r3, r1
 8006fc2:	613a      	str	r2, [r7, #16]
 8006fc4:	617b      	str	r3, [r7, #20]
	snprintf ( longitude , 12 , "%.6lf" , longitude_d ) ;
 8006fc6:	4908      	ldr	r1, [pc, #32]	; (8006fe8 <get_my_nmea_gngll_coordinates_s+0x1c0>)
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	9200      	str	r2, [sp, #0]
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	000a      	movs	r2, r1
 8006fd4:	210c      	movs	r1, #12
 8006fd6:	f002 f879 	bl	80090cc <sniprintf>
}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	b00f      	add	sp, #60	; 0x3c
 8006fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	412e8480 	.word	0x412e8480
 8006fe8:	0800c71c 	.word	0x0800c71c

08006fec <get_my_nmea_rmc_date_yy>:

void get_my_nmea_rmc_date_yy ( const char* m , uint8_t* yy )
{
 8006fec:	b590      	push	{r4, r7, lr}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2209      	movs	r2, #9
 8006ffa:	212c      	movs	r1, #44	; 0x2c
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7ff fd55 	bl	8006aac <my_find_char_position>
 8007002:	0003      	movs	r3, r0
 8007004:	001a      	movs	r2, r3
 8007006:	2417      	movs	r4, #23
 8007008:	193b      	adds	r3, r7, r4
 800700a:	3205      	adds	r2, #5
 800700c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800700e:	2003      	movs	r0, #3
 8007010:	f000 f97c 	bl	800730c <malloc>
 8007014:	0003      	movs	r3, r0
 8007016:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007018:	193b      	adds	r3, r7, r4
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	18d1      	adds	r1, r2, r3
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2202      	movs	r2, #2
 8007024:	0018      	movs	r0, r3
 8007026:	f002 f934 	bl	8009292 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3302      	adds	r3, #2
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ;

	sscanf ( s , "%hu" , &temp ) ;
 8007032:	240e      	movs	r4, #14
 8007034:	193a      	adds	r2, r7, r4
 8007036:	4909      	ldr	r1, [pc, #36]	; (800705c <get_my_nmea_rmc_date_yy+0x70>)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	0018      	movs	r0, r3
 800703c:	f002 f89a 	bl	8009174 <siscanf>
	free ( s ) ;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	0018      	movs	r0, r3
 8007044:	f000 f96c 	bl	8007320 <free>
	*yy = (uint8_t) temp ;
 8007048:	193b      	adds	r3, r7, r4
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	701a      	strb	r2, [r3, #0]

}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	46bd      	mov	sp, r7
 8007056:	b007      	add	sp, #28
 8007058:	bd90      	pop	{r4, r7, pc}
 800705a:	46c0      	nop			; (mov r8, r8)
 800705c:	0800c724 	.word	0x0800c724

08007060 <get_my_nmea_rmc_date_mm>:
void get_my_nmea_rmc_date_mm ( const char* m , uint8_t* mm )
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2209      	movs	r2, #9
 800706e:	212c      	movs	r1, #44	; 0x2c
 8007070:	0018      	movs	r0, r3
 8007072:	f7ff fd1b 	bl	8006aac <my_find_char_position>
 8007076:	0003      	movs	r3, r0
 8007078:	001a      	movs	r2, r3
 800707a:	2417      	movs	r4, #23
 800707c:	193b      	adds	r3, r7, r4
 800707e:	3203      	adds	r2, #3
 8007080:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007082:	2003      	movs	r0, #3
 8007084:	f000 f942 	bl	800730c <malloc>
 8007088:	0003      	movs	r3, r0
 800708a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800708c:	193b      	adds	r3, r7, r4
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	18d1      	adds	r1, r2, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2202      	movs	r2, #2
 8007098:	0018      	movs	r0, r3
 800709a:	f002 f8fa 	bl	8009292 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3302      	adds	r3, #2
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]
	//sscanf ( date_s , "%hhu" , d ) ;
	sscanf ( s , "%hu" , &temp ) ;
 80070a6:	240e      	movs	r4, #14
 80070a8:	193a      	adds	r2, r7, r4
 80070aa:	4909      	ldr	r1, [pc, #36]	; (80070d0 <get_my_nmea_rmc_date_mm+0x70>)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	0018      	movs	r0, r3
 80070b0:	f002 f860 	bl	8009174 <siscanf>
	free ( s ) ;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	0018      	movs	r0, r3
 80070b8:	f000 f932 	bl	8007320 <free>
	*mm = (uint8_t) temp ;
 80070bc:	193b      	adds	r3, r7, r4
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	701a      	strb	r2, [r3, #0]
}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	46bd      	mov	sp, r7
 80070ca:	b007      	add	sp, #28
 80070cc:	bd90      	pop	{r4, r7, pc}
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	0800c724 	.word	0x0800c724

080070d4 <get_my_nmea_rmc_date_dd>:
void get_my_nmea_rmc_date_dd ( const char* m , uint8_t* dd )
{
 80070d4:	b590      	push	{r4, r7, lr}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2209      	movs	r2, #9
 80070e2:	212c      	movs	r1, #44	; 0x2c
 80070e4:	0018      	movs	r0, r3
 80070e6:	f7ff fce1 	bl	8006aac <my_find_char_position>
 80070ea:	0003      	movs	r3, r0
 80070ec:	001a      	movs	r2, r3
 80070ee:	2417      	movs	r4, #23
 80070f0:	193b      	adds	r3, r7, r4
 80070f2:	3201      	adds	r2, #1
 80070f4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80070f6:	2003      	movs	r0, #3
 80070f8:	f000 f908 	bl	800730c <malloc>
 80070fc:	0003      	movs	r3, r0
 80070fe:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007100:	193b      	adds	r3, r7, r4
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	18d1      	adds	r1, r2, r3
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2202      	movs	r2, #2
 800710c:	0018      	movs	r0, r3
 800710e:	f002 f8c0 	bl	8009292 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3302      	adds	r3, #2
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
	//sscanf ( date_s , "%hhu" , d ) ;
	sscanf ( s , "%hu" , &temp ) ;
 800711a:	240e      	movs	r4, #14
 800711c:	193a      	adds	r2, r7, r4
 800711e:	4909      	ldr	r1, [pc, #36]	; (8007144 <get_my_nmea_rmc_date_dd+0x70>)
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	0018      	movs	r0, r3
 8007124:	f002 f826 	bl	8009174 <siscanf>
	free ( s ) ;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	0018      	movs	r0, r3
 800712c:	f000 f8f8 	bl	8007320 <free>
	*dd = (uint8_t) temp ;
 8007130:	193b      	adds	r3, r7, r4
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b2da      	uxtb	r2, r3
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	701a      	strb	r2, [r3, #0]
}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	46bd      	mov	sp, r7
 800713e:	b007      	add	sp, #28
 8007140:	bd90      	pop	{r4, r7, pc}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	0800c724 	.word	0x0800c724

08007148 <get_my_nmea_rmc_utc_hh>:
void get_my_nmea_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	212c      	movs	r1, #44	; 0x2c
 8007158:	0018      	movs	r0, r3
 800715a:	f7ff fca7 	bl	8006aac <my_find_char_position>
 800715e:	0003      	movs	r3, r0
 8007160:	001a      	movs	r2, r3
 8007162:	2417      	movs	r4, #23
 8007164:	193b      	adds	r3, r7, r4
 8007166:	3201      	adds	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800716a:	2003      	movs	r0, #3
 800716c:	f000 f8ce 	bl	800730c <malloc>
 8007170:	0003      	movs	r3, r0
 8007172:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007174:	193b      	adds	r3, r7, r4
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	18d1      	adds	r1, r2, r3
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2202      	movs	r2, #2
 8007180:	0018      	movs	r0, r3
 8007182:	f002 f886 	bl	8009292 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3302      	adds	r3, #2
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
	//sscanf ( date_s , "%hhu" , d ) ;
	sscanf ( s , "%hu" , &temp ) ;
 800718e:	240e      	movs	r4, #14
 8007190:	193a      	adds	r2, r7, r4
 8007192:	4909      	ldr	r1, [pc, #36]	; (80071b8 <get_my_nmea_rmc_utc_hh+0x70>)
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	0018      	movs	r0, r3
 8007198:	f001 ffec 	bl	8009174 <siscanf>
	free ( s ) ;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	0018      	movs	r0, r3
 80071a0:	f000 f8be 	bl	8007320 <free>
	*hh = (uint8_t) temp ;
 80071a4:	193b      	adds	r3, r7, r4
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	701a      	strb	r2, [r3, #0]
}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	46bd      	mov	sp, r7
 80071b2:	b007      	add	sp, #28
 80071b4:	bd90      	pop	{r4, r7, pc}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	0800c724 	.word	0x0800c724

080071bc <get_my_nmea_rmc_utc_mm>:
void get_my_nmea_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 80071bc:	b590      	push	{r4, r7, lr}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	212c      	movs	r1, #44	; 0x2c
 80071cc:	0018      	movs	r0, r3
 80071ce:	f7ff fc6d 	bl	8006aac <my_find_char_position>
 80071d2:	0003      	movs	r3, r0
 80071d4:	001a      	movs	r2, r3
 80071d6:	2417      	movs	r4, #23
 80071d8:	193b      	adds	r3, r7, r4
 80071da:	3203      	adds	r2, #3
 80071dc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80071de:	2003      	movs	r0, #3
 80071e0:	f000 f894 	bl	800730c <malloc>
 80071e4:	0003      	movs	r3, r0
 80071e6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80071e8:	193b      	adds	r3, r7, r4
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	18d1      	adds	r1, r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2202      	movs	r2, #2
 80071f4:	0018      	movs	r0, r3
 80071f6:	f002 f84c 	bl	8009292 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	3302      	adds	r3, #2
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
	//sscanf ( date_s , "%hhu" , d ) ;
	sscanf ( s , "%hu" , &temp ) ;
 8007202:	240e      	movs	r4, #14
 8007204:	193a      	adds	r2, r7, r4
 8007206:	4909      	ldr	r1, [pc, #36]	; (800722c <get_my_nmea_rmc_utc_mm+0x70>)
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	0018      	movs	r0, r3
 800720c:	f001 ffb2 	bl	8009174 <siscanf>
	free ( s ) ;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	0018      	movs	r0, r3
 8007214:	f000 f884 	bl	8007320 <free>
	*mm = (uint8_t) temp ;
 8007218:	193b      	adds	r3, r7, r4
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b2da      	uxtb	r2, r3
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	701a      	strb	r2, [r3, #0]
}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	46bd      	mov	sp, r7
 8007226:	b007      	add	sp, #28
 8007228:	bd90      	pop	{r4, r7, pc}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	0800c724 	.word	0x0800c724

08007230 <get_my_nmea_rmc_utc_ss>:
void get_my_nmea_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 8007230:	b590      	push	{r4, r7, lr}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	212c      	movs	r1, #44	; 0x2c
 8007240:	0018      	movs	r0, r3
 8007242:	f7ff fc33 	bl	8006aac <my_find_char_position>
 8007246:	0003      	movs	r3, r0
 8007248:	001a      	movs	r2, r3
 800724a:	2417      	movs	r4, #23
 800724c:	193b      	adds	r3, r7, r4
 800724e:	3205      	adds	r2, #5
 8007250:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007252:	2003      	movs	r0, #3
 8007254:	f000 f85a 	bl	800730c <malloc>
 8007258:	0003      	movs	r3, r0
 800725a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800725c:	193b      	adds	r3, r7, r4
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	18d1      	adds	r1, r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	2202      	movs	r2, #2
 8007268:	0018      	movs	r0, r3
 800726a:	f002 f812 	bl	8009292 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3302      	adds	r3, #2
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
	//sscanf ( date_s , "%hhu" , d ) ;
	sscanf ( s , "%hu" , &temp ) ;
 8007276:	240e      	movs	r4, #14
 8007278:	193a      	adds	r2, r7, r4
 800727a:	4909      	ldr	r1, [pc, #36]	; (80072a0 <get_my_nmea_rmc_utc_ss+0x70>)
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	0018      	movs	r0, r3
 8007280:	f001 ff78 	bl	8009174 <siscanf>
	free ( s ) ;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	0018      	movs	r0, r3
 8007288:	f000 f84a 	bl	8007320 <free>
	*ss = (uint8_t) temp ;
 800728c:	193b      	adds	r3, r7, r4
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	701a      	strb	r2, [r3, #0]
}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	46bd      	mov	sp, r7
 800729a:	b007      	add	sp, #28
 800729c:	bd90      	pop	{r4, r7, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	0800c724 	.word	0x0800c724

080072a4 <get_my_nmea_rmc_utc_sss>:
void get_my_nmea_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 80072a4:	b590      	push	{r4, r7, lr}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	212c      	movs	r1, #44	; 0x2c
 80072b4:	0018      	movs	r0, r3
 80072b6:	f7ff fbf9 	bl	8006aac <my_find_char_position>
 80072ba:	0003      	movs	r3, r0
 80072bc:	001a      	movs	r2, r3
 80072be:	240f      	movs	r4, #15
 80072c0:	193b      	adds	r3, r7, r4
 80072c2:	3208      	adds	r2, #8
 80072c4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80072c6:	2004      	movs	r0, #4
 80072c8:	f000 f820 	bl	800730c <malloc>
 80072cc:	0003      	movs	r3, r0
 80072ce:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80072d0:	193b      	adds	r3, r7, r4
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	18d1      	adds	r1, r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2203      	movs	r2, #3
 80072dc:	0018      	movs	r0, r3
 80072de:	f001 ffd8 	bl	8009292 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	3303      	adds	r3, #3
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	4906      	ldr	r1, [pc, #24]	; (8007308 <get_my_nmea_rmc_utc_sss+0x64>)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f001 ff3f 	bl	8009174 <siscanf>
	free ( s ) ;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	0018      	movs	r0, r3
 80072fa:	f000 f811 	bl	8007320 <free>
}
 80072fe:	46c0      	nop			; (mov r8, r8)
 8007300:	46bd      	mov	sp, r7
 8007302:	b005      	add	sp, #20
 8007304:	bd90      	pop	{r4, r7, pc}
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	0800c728 	.word	0x0800c728

0800730c <malloc>:
 800730c:	b510      	push	{r4, lr}
 800730e:	4b03      	ldr	r3, [pc, #12]	; (800731c <malloc+0x10>)
 8007310:	0001      	movs	r1, r0
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	f000 f830 	bl	8007378 <_malloc_r>
 8007318:	bd10      	pop	{r4, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	200001e0 	.word	0x200001e0

08007320 <free>:
 8007320:	b510      	push	{r4, lr}
 8007322:	4b03      	ldr	r3, [pc, #12]	; (8007330 <free+0x10>)
 8007324:	0001      	movs	r1, r0
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	f002 ff2c 	bl	800a184 <_free_r>
 800732c:	bd10      	pop	{r4, pc}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	200001e0 	.word	0x200001e0

08007334 <sbrk_aligned>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4e0f      	ldr	r6, [pc, #60]	; (8007374 <sbrk_aligned+0x40>)
 8007338:	000d      	movs	r5, r1
 800733a:	6831      	ldr	r1, [r6, #0]
 800733c:	0004      	movs	r4, r0
 800733e:	2900      	cmp	r1, #0
 8007340:	d102      	bne.n	8007348 <sbrk_aligned+0x14>
 8007342:	f002 f80f 	bl	8009364 <_sbrk_r>
 8007346:	6030      	str	r0, [r6, #0]
 8007348:	0029      	movs	r1, r5
 800734a:	0020      	movs	r0, r4
 800734c:	f002 f80a 	bl	8009364 <_sbrk_r>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d00a      	beq.n	800736a <sbrk_aligned+0x36>
 8007354:	2303      	movs	r3, #3
 8007356:	1cc5      	adds	r5, r0, #3
 8007358:	439d      	bics	r5, r3
 800735a:	42a8      	cmp	r0, r5
 800735c:	d007      	beq.n	800736e <sbrk_aligned+0x3a>
 800735e:	1a29      	subs	r1, r5, r0
 8007360:	0020      	movs	r0, r4
 8007362:	f001 ffff 	bl	8009364 <_sbrk_r>
 8007366:	3001      	adds	r0, #1
 8007368:	d101      	bne.n	800736e <sbrk_aligned+0x3a>
 800736a:	2501      	movs	r5, #1
 800736c:	426d      	negs	r5, r5
 800736e:	0028      	movs	r0, r5
 8007370:	bd70      	pop	{r4, r5, r6, pc}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	20000668 	.word	0x20000668

08007378 <_malloc_r>:
 8007378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800737a:	2203      	movs	r2, #3
 800737c:	1ccb      	adds	r3, r1, #3
 800737e:	4393      	bics	r3, r2
 8007380:	3308      	adds	r3, #8
 8007382:	0006      	movs	r6, r0
 8007384:	001f      	movs	r7, r3
 8007386:	2b0c      	cmp	r3, #12
 8007388:	d238      	bcs.n	80073fc <_malloc_r+0x84>
 800738a:	270c      	movs	r7, #12
 800738c:	42b9      	cmp	r1, r7
 800738e:	d837      	bhi.n	8007400 <_malloc_r+0x88>
 8007390:	0030      	movs	r0, r6
 8007392:	f000 f873 	bl	800747c <__malloc_lock>
 8007396:	4b38      	ldr	r3, [pc, #224]	; (8007478 <_malloc_r+0x100>)
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	001c      	movs	r4, r3
 800739e:	2c00      	cmp	r4, #0
 80073a0:	d133      	bne.n	800740a <_malloc_r+0x92>
 80073a2:	0039      	movs	r1, r7
 80073a4:	0030      	movs	r0, r6
 80073a6:	f7ff ffc5 	bl	8007334 <sbrk_aligned>
 80073aa:	0004      	movs	r4, r0
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d15e      	bne.n	800746e <_malloc_r+0xf6>
 80073b0:	9b00      	ldr	r3, [sp, #0]
 80073b2:	681c      	ldr	r4, [r3, #0]
 80073b4:	0025      	movs	r5, r4
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	d14e      	bne.n	8007458 <_malloc_r+0xe0>
 80073ba:	2c00      	cmp	r4, #0
 80073bc:	d051      	beq.n	8007462 <_malloc_r+0xea>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	0029      	movs	r1, r5
 80073c2:	18e3      	adds	r3, r4, r3
 80073c4:	0030      	movs	r0, r6
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	f001 ffcc 	bl	8009364 <_sbrk_r>
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	4283      	cmp	r3, r0
 80073d0:	d147      	bne.n	8007462 <_malloc_r+0xea>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	0030      	movs	r0, r6
 80073d6:	1aff      	subs	r7, r7, r3
 80073d8:	0039      	movs	r1, r7
 80073da:	f7ff ffab 	bl	8007334 <sbrk_aligned>
 80073de:	3001      	adds	r0, #1
 80073e0:	d03f      	beq.n	8007462 <_malloc_r+0xea>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	19db      	adds	r3, r3, r7
 80073e6:	6023      	str	r3, [r4, #0]
 80073e8:	9b00      	ldr	r3, [sp, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d040      	beq.n	8007472 <_malloc_r+0xfa>
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	42a2      	cmp	r2, r4
 80073f4:	d133      	bne.n	800745e <_malloc_r+0xe6>
 80073f6:	2200      	movs	r2, #0
 80073f8:	605a      	str	r2, [r3, #4]
 80073fa:	e014      	b.n	8007426 <_malloc_r+0xae>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dac5      	bge.n	800738c <_malloc_r+0x14>
 8007400:	230c      	movs	r3, #12
 8007402:	2500      	movs	r5, #0
 8007404:	6033      	str	r3, [r6, #0]
 8007406:	0028      	movs	r0, r5
 8007408:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800740a:	6821      	ldr	r1, [r4, #0]
 800740c:	1bc9      	subs	r1, r1, r7
 800740e:	d420      	bmi.n	8007452 <_malloc_r+0xda>
 8007410:	290b      	cmp	r1, #11
 8007412:	d918      	bls.n	8007446 <_malloc_r+0xce>
 8007414:	19e2      	adds	r2, r4, r7
 8007416:	6027      	str	r7, [r4, #0]
 8007418:	42a3      	cmp	r3, r4
 800741a:	d112      	bne.n	8007442 <_malloc_r+0xca>
 800741c:	9b00      	ldr	r3, [sp, #0]
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	6863      	ldr	r3, [r4, #4]
 8007422:	6011      	str	r1, [r2, #0]
 8007424:	6053      	str	r3, [r2, #4]
 8007426:	0030      	movs	r0, r6
 8007428:	0025      	movs	r5, r4
 800742a:	f000 f82f 	bl	800748c <__malloc_unlock>
 800742e:	2207      	movs	r2, #7
 8007430:	350b      	adds	r5, #11
 8007432:	1d23      	adds	r3, r4, #4
 8007434:	4395      	bics	r5, r2
 8007436:	1aea      	subs	r2, r5, r3
 8007438:	429d      	cmp	r5, r3
 800743a:	d0e4      	beq.n	8007406 <_malloc_r+0x8e>
 800743c:	1b5b      	subs	r3, r3, r5
 800743e:	50a3      	str	r3, [r4, r2]
 8007440:	e7e1      	b.n	8007406 <_malloc_r+0x8e>
 8007442:	605a      	str	r2, [r3, #4]
 8007444:	e7ec      	b.n	8007420 <_malloc_r+0xa8>
 8007446:	6862      	ldr	r2, [r4, #4]
 8007448:	42a3      	cmp	r3, r4
 800744a:	d1d5      	bne.n	80073f8 <_malloc_r+0x80>
 800744c:	9b00      	ldr	r3, [sp, #0]
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	e7e9      	b.n	8007426 <_malloc_r+0xae>
 8007452:	0023      	movs	r3, r4
 8007454:	6864      	ldr	r4, [r4, #4]
 8007456:	e7a2      	b.n	800739e <_malloc_r+0x26>
 8007458:	002c      	movs	r4, r5
 800745a:	686d      	ldr	r5, [r5, #4]
 800745c:	e7ab      	b.n	80073b6 <_malloc_r+0x3e>
 800745e:	0013      	movs	r3, r2
 8007460:	e7c4      	b.n	80073ec <_malloc_r+0x74>
 8007462:	230c      	movs	r3, #12
 8007464:	0030      	movs	r0, r6
 8007466:	6033      	str	r3, [r6, #0]
 8007468:	f000 f810 	bl	800748c <__malloc_unlock>
 800746c:	e7cb      	b.n	8007406 <_malloc_r+0x8e>
 800746e:	6027      	str	r7, [r4, #0]
 8007470:	e7d9      	b.n	8007426 <_malloc_r+0xae>
 8007472:	605b      	str	r3, [r3, #4]
 8007474:	deff      	udf	#255	; 0xff
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	20000664 	.word	0x20000664

0800747c <__malloc_lock>:
 800747c:	b510      	push	{r4, lr}
 800747e:	4802      	ldr	r0, [pc, #8]	; (8007488 <__malloc_lock+0xc>)
 8007480:	f001 ffc1 	bl	8009406 <__retarget_lock_acquire_recursive>
 8007484:	bd10      	pop	{r4, pc}
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	200007ac 	.word	0x200007ac

0800748c <__malloc_unlock>:
 800748c:	b510      	push	{r4, lr}
 800748e:	4802      	ldr	r0, [pc, #8]	; (8007498 <__malloc_unlock+0xc>)
 8007490:	f001 ffba 	bl	8009408 <__retarget_lock_release_recursive>
 8007494:	bd10      	pop	{r4, pc}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	200007ac 	.word	0x200007ac

0800749c <sulp>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	0016      	movs	r6, r2
 80074a0:	000d      	movs	r5, r1
 80074a2:	f003 fdad 	bl	800b000 <__ulp>
 80074a6:	2e00      	cmp	r6, #0
 80074a8:	d00d      	beq.n	80074c6 <sulp+0x2a>
 80074aa:	236b      	movs	r3, #107	; 0x6b
 80074ac:	006a      	lsls	r2, r5, #1
 80074ae:	0d52      	lsrs	r2, r2, #21
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	dd07      	ble.n	80074c6 <sulp+0x2a>
 80074b6:	2400      	movs	r4, #0
 80074b8:	4a03      	ldr	r2, [pc, #12]	; (80074c8 <sulp+0x2c>)
 80074ba:	051b      	lsls	r3, r3, #20
 80074bc:	189d      	adds	r5, r3, r2
 80074be:	002b      	movs	r3, r5
 80074c0:	0022      	movs	r2, r4
 80074c2:	f7fa f8a5 	bl	8001610 <__aeabi_dmul>
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	3ff00000 	.word	0x3ff00000

080074cc <_strtod_l>:
 80074cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ce:	b0a1      	sub	sp, #132	; 0x84
 80074d0:	9219      	str	r2, [sp, #100]	; 0x64
 80074d2:	2200      	movs	r2, #0
 80074d4:	2600      	movs	r6, #0
 80074d6:	2700      	movs	r7, #0
 80074d8:	9004      	str	r0, [sp, #16]
 80074da:	9107      	str	r1, [sp, #28]
 80074dc:	921c      	str	r2, [sp, #112]	; 0x70
 80074de:	911b      	str	r1, [sp, #108]	; 0x6c
 80074e0:	780a      	ldrb	r2, [r1, #0]
 80074e2:	2a2b      	cmp	r2, #43	; 0x2b
 80074e4:	d055      	beq.n	8007592 <_strtod_l+0xc6>
 80074e6:	d841      	bhi.n	800756c <_strtod_l+0xa0>
 80074e8:	2a0d      	cmp	r2, #13
 80074ea:	d83b      	bhi.n	8007564 <_strtod_l+0x98>
 80074ec:	2a08      	cmp	r2, #8
 80074ee:	d83b      	bhi.n	8007568 <_strtod_l+0x9c>
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d044      	beq.n	800757e <_strtod_l+0xb2>
 80074f4:	2200      	movs	r2, #0
 80074f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80074f8:	2100      	movs	r1, #0
 80074fa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80074fc:	9109      	str	r1, [sp, #36]	; 0x24
 80074fe:	782a      	ldrb	r2, [r5, #0]
 8007500:	2a30      	cmp	r2, #48	; 0x30
 8007502:	d000      	beq.n	8007506 <_strtod_l+0x3a>
 8007504:	e085      	b.n	8007612 <_strtod_l+0x146>
 8007506:	786a      	ldrb	r2, [r5, #1]
 8007508:	3120      	adds	r1, #32
 800750a:	438a      	bics	r2, r1
 800750c:	2a58      	cmp	r2, #88	; 0x58
 800750e:	d000      	beq.n	8007512 <_strtod_l+0x46>
 8007510:	e075      	b.n	80075fe <_strtod_l+0x132>
 8007512:	9302      	str	r3, [sp, #8]
 8007514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007516:	4a97      	ldr	r2, [pc, #604]	; (8007774 <_strtod_l+0x2a8>)
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	ab1c      	add	r3, sp, #112	; 0x70
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	9804      	ldr	r0, [sp, #16]
 8007520:	ab1d      	add	r3, sp, #116	; 0x74
 8007522:	a91b      	add	r1, sp, #108	; 0x6c
 8007524:	f002 fee2 	bl	800a2ec <__gethex>
 8007528:	230f      	movs	r3, #15
 800752a:	0002      	movs	r2, r0
 800752c:	401a      	ands	r2, r3
 800752e:	0004      	movs	r4, r0
 8007530:	9205      	str	r2, [sp, #20]
 8007532:	4218      	tst	r0, r3
 8007534:	d005      	beq.n	8007542 <_strtod_l+0x76>
 8007536:	2a06      	cmp	r2, #6
 8007538:	d12d      	bne.n	8007596 <_strtod_l+0xca>
 800753a:	1c6b      	adds	r3, r5, #1
 800753c:	931b      	str	r3, [sp, #108]	; 0x6c
 800753e:	2300      	movs	r3, #0
 8007540:	930f      	str	r3, [sp, #60]	; 0x3c
 8007542:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <_strtod_l+0x82>
 8007548:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800754a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01b      	beq.n	800758c <_strtod_l+0xc0>
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	0032      	movs	r2, r6
 8007558:	061b      	lsls	r3, r3, #24
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	0010      	movs	r0, r2
 800755e:	0019      	movs	r1, r3
 8007560:	b021      	add	sp, #132	; 0x84
 8007562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007564:	2a20      	cmp	r2, #32
 8007566:	d1c5      	bne.n	80074f4 <_strtod_l+0x28>
 8007568:	3101      	adds	r1, #1
 800756a:	e7b8      	b.n	80074de <_strtod_l+0x12>
 800756c:	2a2d      	cmp	r2, #45	; 0x2d
 800756e:	d1c1      	bne.n	80074f4 <_strtod_l+0x28>
 8007570:	3a2c      	subs	r2, #44	; 0x2c
 8007572:	920f      	str	r2, [sp, #60]	; 0x3c
 8007574:	1c4a      	adds	r2, r1, #1
 8007576:	921b      	str	r2, [sp, #108]	; 0x6c
 8007578:	784a      	ldrb	r2, [r1, #1]
 800757a:	2a00      	cmp	r2, #0
 800757c:	d1bc      	bne.n	80074f8 <_strtod_l+0x2c>
 800757e:	9b07      	ldr	r3, [sp, #28]
 8007580:	931b      	str	r3, [sp, #108]	; 0x6c
 8007582:	2300      	movs	r3, #0
 8007584:	930f      	str	r3, [sp, #60]	; 0x3c
 8007586:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1dd      	bne.n	8007548 <_strtod_l+0x7c>
 800758c:	0032      	movs	r2, r6
 800758e:	003b      	movs	r3, r7
 8007590:	e7e4      	b.n	800755c <_strtod_l+0x90>
 8007592:	2200      	movs	r2, #0
 8007594:	e7ed      	b.n	8007572 <_strtod_l+0xa6>
 8007596:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007598:	2a00      	cmp	r2, #0
 800759a:	d007      	beq.n	80075ac <_strtod_l+0xe0>
 800759c:	2135      	movs	r1, #53	; 0x35
 800759e:	a81e      	add	r0, sp, #120	; 0x78
 80075a0:	f003 fe1f 	bl	800b1e2 <__copybits>
 80075a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80075a6:	9804      	ldr	r0, [sp, #16]
 80075a8:	f003 f9e8 	bl	800a97c <_Bfree>
 80075ac:	9805      	ldr	r0, [sp, #20]
 80075ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075b0:	3801      	subs	r0, #1
 80075b2:	2804      	cmp	r0, #4
 80075b4:	d806      	bhi.n	80075c4 <_strtod_l+0xf8>
 80075b6:	f7f8 fdad 	bl	8000114 <__gnu_thumb1_case_uqi>
 80075ba:	0312      	.short	0x0312
 80075bc:	1e1c      	.short	0x1e1c
 80075be:	12          	.byte	0x12
 80075bf:	00          	.byte	0x00
 80075c0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80075c2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80075c4:	05e4      	lsls	r4, r4, #23
 80075c6:	d502      	bpl.n	80075ce <_strtod_l+0x102>
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	431f      	orrs	r7, r3
 80075ce:	4b6a      	ldr	r3, [pc, #424]	; (8007778 <_strtod_l+0x2ac>)
 80075d0:	423b      	tst	r3, r7
 80075d2:	d1b6      	bne.n	8007542 <_strtod_l+0x76>
 80075d4:	f001 feec 	bl	80093b0 <__errno>
 80075d8:	2322      	movs	r3, #34	; 0x22
 80075da:	6003      	str	r3, [r0, #0]
 80075dc:	e7b1      	b.n	8007542 <_strtod_l+0x76>
 80075de:	4967      	ldr	r1, [pc, #412]	; (800777c <_strtod_l+0x2b0>)
 80075e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80075e2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80075e4:	400a      	ands	r2, r1
 80075e6:	4966      	ldr	r1, [pc, #408]	; (8007780 <_strtod_l+0x2b4>)
 80075e8:	185b      	adds	r3, r3, r1
 80075ea:	051b      	lsls	r3, r3, #20
 80075ec:	431a      	orrs	r2, r3
 80075ee:	0017      	movs	r7, r2
 80075f0:	e7e8      	b.n	80075c4 <_strtod_l+0xf8>
 80075f2:	4f61      	ldr	r7, [pc, #388]	; (8007778 <_strtod_l+0x2ac>)
 80075f4:	e7e6      	b.n	80075c4 <_strtod_l+0xf8>
 80075f6:	2601      	movs	r6, #1
 80075f8:	4f62      	ldr	r7, [pc, #392]	; (8007784 <_strtod_l+0x2b8>)
 80075fa:	4276      	negs	r6, r6
 80075fc:	e7e2      	b.n	80075c4 <_strtod_l+0xf8>
 80075fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	921b      	str	r2, [sp, #108]	; 0x6c
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b30      	cmp	r3, #48	; 0x30
 8007608:	d0f9      	beq.n	80075fe <_strtod_l+0x132>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d099      	beq.n	8007542 <_strtod_l+0x76>
 800760e:	2301      	movs	r3, #1
 8007610:	9309      	str	r3, [sp, #36]	; 0x24
 8007612:	2500      	movs	r5, #0
 8007614:	220a      	movs	r2, #10
 8007616:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007618:	950d      	str	r5, [sp, #52]	; 0x34
 800761a:	9310      	str	r3, [sp, #64]	; 0x40
 800761c:	9508      	str	r5, [sp, #32]
 800761e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007620:	7804      	ldrb	r4, [r0, #0]
 8007622:	0023      	movs	r3, r4
 8007624:	3b30      	subs	r3, #48	; 0x30
 8007626:	b2d9      	uxtb	r1, r3
 8007628:	2909      	cmp	r1, #9
 800762a:	d927      	bls.n	800767c <_strtod_l+0x1b0>
 800762c:	2201      	movs	r2, #1
 800762e:	4956      	ldr	r1, [pc, #344]	; (8007788 <_strtod_l+0x2bc>)
 8007630:	f001 fe1e 	bl	8009270 <strncmp>
 8007634:	2800      	cmp	r0, #0
 8007636:	d031      	beq.n	800769c <_strtod_l+0x1d0>
 8007638:	2000      	movs	r0, #0
 800763a:	0023      	movs	r3, r4
 800763c:	4684      	mov	ip, r0
 800763e:	9a08      	ldr	r2, [sp, #32]
 8007640:	900c      	str	r0, [sp, #48]	; 0x30
 8007642:	9205      	str	r2, [sp, #20]
 8007644:	2220      	movs	r2, #32
 8007646:	0019      	movs	r1, r3
 8007648:	4391      	bics	r1, r2
 800764a:	000a      	movs	r2, r1
 800764c:	2100      	movs	r1, #0
 800764e:	9106      	str	r1, [sp, #24]
 8007650:	2a45      	cmp	r2, #69	; 0x45
 8007652:	d000      	beq.n	8007656 <_strtod_l+0x18a>
 8007654:	e0c2      	b.n	80077dc <_strtod_l+0x310>
 8007656:	9b05      	ldr	r3, [sp, #20]
 8007658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800765a:	4303      	orrs	r3, r0
 800765c:	4313      	orrs	r3, r2
 800765e:	428b      	cmp	r3, r1
 8007660:	d08d      	beq.n	800757e <_strtod_l+0xb2>
 8007662:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007664:	9307      	str	r3, [sp, #28]
 8007666:	3301      	adds	r3, #1
 8007668:	931b      	str	r3, [sp, #108]	; 0x6c
 800766a:	9b07      	ldr	r3, [sp, #28]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b2b      	cmp	r3, #43	; 0x2b
 8007670:	d071      	beq.n	8007756 <_strtod_l+0x28a>
 8007672:	000c      	movs	r4, r1
 8007674:	2b2d      	cmp	r3, #45	; 0x2d
 8007676:	d174      	bne.n	8007762 <_strtod_l+0x296>
 8007678:	2401      	movs	r4, #1
 800767a:	e06d      	b.n	8007758 <_strtod_l+0x28c>
 800767c:	9908      	ldr	r1, [sp, #32]
 800767e:	2908      	cmp	r1, #8
 8007680:	dc09      	bgt.n	8007696 <_strtod_l+0x1ca>
 8007682:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007684:	4351      	muls	r1, r2
 8007686:	185b      	adds	r3, r3, r1
 8007688:	930d      	str	r3, [sp, #52]	; 0x34
 800768a:	9b08      	ldr	r3, [sp, #32]
 800768c:	3001      	adds	r0, #1
 800768e:	3301      	adds	r3, #1
 8007690:	9308      	str	r3, [sp, #32]
 8007692:	901b      	str	r0, [sp, #108]	; 0x6c
 8007694:	e7c3      	b.n	800761e <_strtod_l+0x152>
 8007696:	4355      	muls	r5, r2
 8007698:	195d      	adds	r5, r3, r5
 800769a:	e7f6      	b.n	800768a <_strtod_l+0x1be>
 800769c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80076a2:	9a08      	ldr	r2, [sp, #32]
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	d03a      	beq.n	8007720 <_strtod_l+0x254>
 80076aa:	900c      	str	r0, [sp, #48]	; 0x30
 80076ac:	9205      	str	r2, [sp, #20]
 80076ae:	001a      	movs	r2, r3
 80076b0:	3a30      	subs	r2, #48	; 0x30
 80076b2:	2a09      	cmp	r2, #9
 80076b4:	d912      	bls.n	80076dc <_strtod_l+0x210>
 80076b6:	2201      	movs	r2, #1
 80076b8:	4694      	mov	ip, r2
 80076ba:	e7c3      	b.n	8007644 <_strtod_l+0x178>
 80076bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076be:	3001      	adds	r0, #1
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b30      	cmp	r3, #48	; 0x30
 80076c8:	d0f8      	beq.n	80076bc <_strtod_l+0x1f0>
 80076ca:	001a      	movs	r2, r3
 80076cc:	3a31      	subs	r2, #49	; 0x31
 80076ce:	2a08      	cmp	r2, #8
 80076d0:	d83c      	bhi.n	800774c <_strtod_l+0x280>
 80076d2:	900c      	str	r0, [sp, #48]	; 0x30
 80076d4:	2000      	movs	r0, #0
 80076d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80076d8:	9005      	str	r0, [sp, #20]
 80076da:	9210      	str	r2, [sp, #64]	; 0x40
 80076dc:	001a      	movs	r2, r3
 80076de:	1c41      	adds	r1, r0, #1
 80076e0:	3a30      	subs	r2, #48	; 0x30
 80076e2:	2b30      	cmp	r3, #48	; 0x30
 80076e4:	d016      	beq.n	8007714 <_strtod_l+0x248>
 80076e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076e8:	185b      	adds	r3, r3, r1
 80076ea:	930c      	str	r3, [sp, #48]	; 0x30
 80076ec:	9b05      	ldr	r3, [sp, #20]
 80076ee:	210a      	movs	r1, #10
 80076f0:	469c      	mov	ip, r3
 80076f2:	4484      	add	ip, r0
 80076f4:	4563      	cmp	r3, ip
 80076f6:	d115      	bne.n	8007724 <_strtod_l+0x258>
 80076f8:	9905      	ldr	r1, [sp, #20]
 80076fa:	9b05      	ldr	r3, [sp, #20]
 80076fc:	3101      	adds	r1, #1
 80076fe:	1809      	adds	r1, r1, r0
 8007700:	181b      	adds	r3, r3, r0
 8007702:	9105      	str	r1, [sp, #20]
 8007704:	2b08      	cmp	r3, #8
 8007706:	dc19      	bgt.n	800773c <_strtod_l+0x270>
 8007708:	230a      	movs	r3, #10
 800770a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800770c:	434b      	muls	r3, r1
 800770e:	2100      	movs	r1, #0
 8007710:	18d3      	adds	r3, r2, r3
 8007712:	930d      	str	r3, [sp, #52]	; 0x34
 8007714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007716:	0008      	movs	r0, r1
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	921b      	str	r2, [sp, #108]	; 0x6c
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	e7c6      	b.n	80076ae <_strtod_l+0x1e2>
 8007720:	9808      	ldr	r0, [sp, #32]
 8007722:	e7d0      	b.n	80076c6 <_strtod_l+0x1fa>
 8007724:	1c5c      	adds	r4, r3, #1
 8007726:	2b08      	cmp	r3, #8
 8007728:	dc04      	bgt.n	8007734 <_strtod_l+0x268>
 800772a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800772c:	434b      	muls	r3, r1
 800772e:	930d      	str	r3, [sp, #52]	; 0x34
 8007730:	0023      	movs	r3, r4
 8007732:	e7df      	b.n	80076f4 <_strtod_l+0x228>
 8007734:	2c10      	cmp	r4, #16
 8007736:	dcfb      	bgt.n	8007730 <_strtod_l+0x264>
 8007738:	434d      	muls	r5, r1
 800773a:	e7f9      	b.n	8007730 <_strtod_l+0x264>
 800773c:	9b05      	ldr	r3, [sp, #20]
 800773e:	2100      	movs	r1, #0
 8007740:	2b10      	cmp	r3, #16
 8007742:	dce7      	bgt.n	8007714 <_strtod_l+0x248>
 8007744:	230a      	movs	r3, #10
 8007746:	435d      	muls	r5, r3
 8007748:	1955      	adds	r5, r2, r5
 800774a:	e7e3      	b.n	8007714 <_strtod_l+0x248>
 800774c:	2200      	movs	r2, #0
 800774e:	920c      	str	r2, [sp, #48]	; 0x30
 8007750:	9205      	str	r2, [sp, #20]
 8007752:	3201      	adds	r2, #1
 8007754:	e7b0      	b.n	80076b8 <_strtod_l+0x1ec>
 8007756:	2400      	movs	r4, #0
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	3302      	adds	r3, #2
 800775c:	931b      	str	r3, [sp, #108]	; 0x6c
 800775e:	9b07      	ldr	r3, [sp, #28]
 8007760:	789b      	ldrb	r3, [r3, #2]
 8007762:	001a      	movs	r2, r3
 8007764:	3a30      	subs	r2, #48	; 0x30
 8007766:	2a09      	cmp	r2, #9
 8007768:	d914      	bls.n	8007794 <_strtod_l+0x2c8>
 800776a:	9a07      	ldr	r2, [sp, #28]
 800776c:	921b      	str	r2, [sp, #108]	; 0x6c
 800776e:	2200      	movs	r2, #0
 8007770:	e033      	b.n	80077da <_strtod_l+0x30e>
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	0800c804 	.word	0x0800c804
 8007778:	7ff00000 	.word	0x7ff00000
 800777c:	ffefffff 	.word	0xffefffff
 8007780:	00000433 	.word	0x00000433
 8007784:	7fffffff 	.word	0x7fffffff
 8007788:	0800c800 	.word	0x0800c800
 800778c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	921b      	str	r2, [sp, #108]	; 0x6c
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	2b30      	cmp	r3, #48	; 0x30
 8007796:	d0f9      	beq.n	800778c <_strtod_l+0x2c0>
 8007798:	2200      	movs	r2, #0
 800779a:	9206      	str	r2, [sp, #24]
 800779c:	001a      	movs	r2, r3
 800779e:	3a31      	subs	r2, #49	; 0x31
 80077a0:	2a08      	cmp	r2, #8
 80077a2:	d81b      	bhi.n	80077dc <_strtod_l+0x310>
 80077a4:	3b30      	subs	r3, #48	; 0x30
 80077a6:	930e      	str	r3, [sp, #56]	; 0x38
 80077a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077aa:	9306      	str	r3, [sp, #24]
 80077ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077ae:	1c59      	adds	r1, r3, #1
 80077b0:	911b      	str	r1, [sp, #108]	; 0x6c
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	001a      	movs	r2, r3
 80077b6:	3a30      	subs	r2, #48	; 0x30
 80077b8:	2a09      	cmp	r2, #9
 80077ba:	d93a      	bls.n	8007832 <_strtod_l+0x366>
 80077bc:	9a06      	ldr	r2, [sp, #24]
 80077be:	1a8a      	subs	r2, r1, r2
 80077c0:	49b2      	ldr	r1, [pc, #712]	; (8007a8c <_strtod_l+0x5c0>)
 80077c2:	9106      	str	r1, [sp, #24]
 80077c4:	2a08      	cmp	r2, #8
 80077c6:	dc04      	bgt.n	80077d2 <_strtod_l+0x306>
 80077c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077ca:	9206      	str	r2, [sp, #24]
 80077cc:	428a      	cmp	r2, r1
 80077ce:	dd00      	ble.n	80077d2 <_strtod_l+0x306>
 80077d0:	9106      	str	r1, [sp, #24]
 80077d2:	2c00      	cmp	r4, #0
 80077d4:	d002      	beq.n	80077dc <_strtod_l+0x310>
 80077d6:	9a06      	ldr	r2, [sp, #24]
 80077d8:	4252      	negs	r2, r2
 80077da:	9206      	str	r2, [sp, #24]
 80077dc:	9a05      	ldr	r2, [sp, #20]
 80077de:	2a00      	cmp	r2, #0
 80077e0:	d14d      	bne.n	800787e <_strtod_l+0x3b2>
 80077e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e4:	4310      	orrs	r0, r2
 80077e6:	d000      	beq.n	80077ea <_strtod_l+0x31e>
 80077e8:	e6ab      	b.n	8007542 <_strtod_l+0x76>
 80077ea:	4662      	mov	r2, ip
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	d000      	beq.n	80077f2 <_strtod_l+0x326>
 80077f0:	e6c5      	b.n	800757e <_strtod_l+0xb2>
 80077f2:	2b69      	cmp	r3, #105	; 0x69
 80077f4:	d027      	beq.n	8007846 <_strtod_l+0x37a>
 80077f6:	dc23      	bgt.n	8007840 <_strtod_l+0x374>
 80077f8:	2b49      	cmp	r3, #73	; 0x49
 80077fa:	d024      	beq.n	8007846 <_strtod_l+0x37a>
 80077fc:	2b4e      	cmp	r3, #78	; 0x4e
 80077fe:	d000      	beq.n	8007802 <_strtod_l+0x336>
 8007800:	e6bd      	b.n	800757e <_strtod_l+0xb2>
 8007802:	49a3      	ldr	r1, [pc, #652]	; (8007a90 <_strtod_l+0x5c4>)
 8007804:	a81b      	add	r0, sp, #108	; 0x6c
 8007806:	f002 ffa7 	bl	800a758 <__match>
 800780a:	2800      	cmp	r0, #0
 800780c:	d100      	bne.n	8007810 <_strtod_l+0x344>
 800780e:	e6b6      	b.n	800757e <_strtod_l+0xb2>
 8007810:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b28      	cmp	r3, #40	; 0x28
 8007816:	d12c      	bne.n	8007872 <_strtod_l+0x3a6>
 8007818:	499e      	ldr	r1, [pc, #632]	; (8007a94 <_strtod_l+0x5c8>)
 800781a:	aa1e      	add	r2, sp, #120	; 0x78
 800781c:	a81b      	add	r0, sp, #108	; 0x6c
 800781e:	f002 ffaf 	bl	800a780 <__hexnan>
 8007822:	2805      	cmp	r0, #5
 8007824:	d125      	bne.n	8007872 <_strtod_l+0x3a6>
 8007826:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007828:	4a9b      	ldr	r2, [pc, #620]	; (8007a98 <_strtod_l+0x5cc>)
 800782a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800782c:	431a      	orrs	r2, r3
 800782e:	0017      	movs	r7, r2
 8007830:	e687      	b.n	8007542 <_strtod_l+0x76>
 8007832:	220a      	movs	r2, #10
 8007834:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007836:	434a      	muls	r2, r1
 8007838:	18d2      	adds	r2, r2, r3
 800783a:	3a30      	subs	r2, #48	; 0x30
 800783c:	920e      	str	r2, [sp, #56]	; 0x38
 800783e:	e7b5      	b.n	80077ac <_strtod_l+0x2e0>
 8007840:	2b6e      	cmp	r3, #110	; 0x6e
 8007842:	d0de      	beq.n	8007802 <_strtod_l+0x336>
 8007844:	e69b      	b.n	800757e <_strtod_l+0xb2>
 8007846:	4995      	ldr	r1, [pc, #596]	; (8007a9c <_strtod_l+0x5d0>)
 8007848:	a81b      	add	r0, sp, #108	; 0x6c
 800784a:	f002 ff85 	bl	800a758 <__match>
 800784e:	2800      	cmp	r0, #0
 8007850:	d100      	bne.n	8007854 <_strtod_l+0x388>
 8007852:	e694      	b.n	800757e <_strtod_l+0xb2>
 8007854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007856:	4992      	ldr	r1, [pc, #584]	; (8007aa0 <_strtod_l+0x5d4>)
 8007858:	3b01      	subs	r3, #1
 800785a:	a81b      	add	r0, sp, #108	; 0x6c
 800785c:	931b      	str	r3, [sp, #108]	; 0x6c
 800785e:	f002 ff7b 	bl	800a758 <__match>
 8007862:	2800      	cmp	r0, #0
 8007864:	d102      	bne.n	800786c <_strtod_l+0x3a0>
 8007866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007868:	3301      	adds	r3, #1
 800786a:	931b      	str	r3, [sp, #108]	; 0x6c
 800786c:	2600      	movs	r6, #0
 800786e:	4f8a      	ldr	r7, [pc, #552]	; (8007a98 <_strtod_l+0x5cc>)
 8007870:	e667      	b.n	8007542 <_strtod_l+0x76>
 8007872:	488c      	ldr	r0, [pc, #560]	; (8007aa4 <_strtod_l+0x5d8>)
 8007874:	f001 fdde 	bl	8009434 <nan>
 8007878:	0006      	movs	r6, r0
 800787a:	000f      	movs	r7, r1
 800787c:	e661      	b.n	8007542 <_strtod_l+0x76>
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	9309      	str	r3, [sp, #36]	; 0x24
 8007886:	9b08      	ldr	r3, [sp, #32]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <_strtod_l+0x3c4>
 800788c:	9b05      	ldr	r3, [sp, #20]
 800788e:	9308      	str	r3, [sp, #32]
 8007890:	9c05      	ldr	r4, [sp, #20]
 8007892:	2c10      	cmp	r4, #16
 8007894:	dd00      	ble.n	8007898 <_strtod_l+0x3cc>
 8007896:	2410      	movs	r4, #16
 8007898:	980d      	ldr	r0, [sp, #52]	; 0x34
 800789a:	f7fa fd81 	bl	80023a0 <__aeabi_ui2d>
 800789e:	9b05      	ldr	r3, [sp, #20]
 80078a0:	0006      	movs	r6, r0
 80078a2:	000f      	movs	r7, r1
 80078a4:	2b09      	cmp	r3, #9
 80078a6:	dd15      	ble.n	80078d4 <_strtod_l+0x408>
 80078a8:	0022      	movs	r2, r4
 80078aa:	4b7f      	ldr	r3, [pc, #508]	; (8007aa8 <_strtod_l+0x5dc>)
 80078ac:	3a09      	subs	r2, #9
 80078ae:	00d2      	lsls	r2, r2, #3
 80078b0:	189b      	adds	r3, r3, r2
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f7f9 feab 	bl	8001610 <__aeabi_dmul>
 80078ba:	0006      	movs	r6, r0
 80078bc:	0028      	movs	r0, r5
 80078be:	000f      	movs	r7, r1
 80078c0:	f7fa fd6e 	bl	80023a0 <__aeabi_ui2d>
 80078c4:	0002      	movs	r2, r0
 80078c6:	000b      	movs	r3, r1
 80078c8:	0030      	movs	r0, r6
 80078ca:	0039      	movs	r1, r7
 80078cc:	f7f8 ff46 	bl	800075c <__aeabi_dadd>
 80078d0:	0006      	movs	r6, r0
 80078d2:	000f      	movs	r7, r1
 80078d4:	9b05      	ldr	r3, [sp, #20]
 80078d6:	2b0f      	cmp	r3, #15
 80078d8:	dc39      	bgt.n	800794e <_strtod_l+0x482>
 80078da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d100      	bne.n	80078e2 <_strtod_l+0x416>
 80078e0:	e62f      	b.n	8007542 <_strtod_l+0x76>
 80078e2:	dd24      	ble.n	800792e <_strtod_l+0x462>
 80078e4:	2b16      	cmp	r3, #22
 80078e6:	dc09      	bgt.n	80078fc <_strtod_l+0x430>
 80078e8:	496f      	ldr	r1, [pc, #444]	; (8007aa8 <_strtod_l+0x5dc>)
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	18c9      	adds	r1, r1, r3
 80078ee:	0032      	movs	r2, r6
 80078f0:	6808      	ldr	r0, [r1, #0]
 80078f2:	6849      	ldr	r1, [r1, #4]
 80078f4:	003b      	movs	r3, r7
 80078f6:	f7f9 fe8b 	bl	8001610 <__aeabi_dmul>
 80078fa:	e7bd      	b.n	8007878 <_strtod_l+0x3ac>
 80078fc:	2325      	movs	r3, #37	; 0x25
 80078fe:	9a05      	ldr	r2, [sp, #20]
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007904:	4293      	cmp	r3, r2
 8007906:	db22      	blt.n	800794e <_strtod_l+0x482>
 8007908:	240f      	movs	r4, #15
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	4d66      	ldr	r5, [pc, #408]	; (8007aa8 <_strtod_l+0x5dc>)
 800790e:	1ae4      	subs	r4, r4, r3
 8007910:	00e1      	lsls	r1, r4, #3
 8007912:	1869      	adds	r1, r5, r1
 8007914:	0032      	movs	r2, r6
 8007916:	6808      	ldr	r0, [r1, #0]
 8007918:	6849      	ldr	r1, [r1, #4]
 800791a:	003b      	movs	r3, r7
 800791c:	f7f9 fe78 	bl	8001610 <__aeabi_dmul>
 8007920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007922:	1b1c      	subs	r4, r3, r4
 8007924:	00e4      	lsls	r4, r4, #3
 8007926:	192d      	adds	r5, r5, r4
 8007928:	682a      	ldr	r2, [r5, #0]
 800792a:	686b      	ldr	r3, [r5, #4]
 800792c:	e7e3      	b.n	80078f6 <_strtod_l+0x42a>
 800792e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007930:	3316      	adds	r3, #22
 8007932:	db0c      	blt.n	800794e <_strtod_l+0x482>
 8007934:	9906      	ldr	r1, [sp, #24]
 8007936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007938:	4b5b      	ldr	r3, [pc, #364]	; (8007aa8 <_strtod_l+0x5dc>)
 800793a:	1a52      	subs	r2, r2, r1
 800793c:	00d2      	lsls	r2, r2, #3
 800793e:	189b      	adds	r3, r3, r2
 8007940:	0030      	movs	r0, r6
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	0039      	movs	r1, r7
 8007948:	f7f9 fa68 	bl	8000e1c <__aeabi_ddiv>
 800794c:	e794      	b.n	8007878 <_strtod_l+0x3ac>
 800794e:	9b05      	ldr	r3, [sp, #20]
 8007950:	1b1c      	subs	r4, r3, r4
 8007952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007954:	18e4      	adds	r4, r4, r3
 8007956:	2c00      	cmp	r4, #0
 8007958:	dd72      	ble.n	8007a40 <_strtod_l+0x574>
 800795a:	220f      	movs	r2, #15
 800795c:	0023      	movs	r3, r4
 800795e:	4013      	ands	r3, r2
 8007960:	4214      	tst	r4, r2
 8007962:	d00a      	beq.n	800797a <_strtod_l+0x4ae>
 8007964:	4950      	ldr	r1, [pc, #320]	; (8007aa8 <_strtod_l+0x5dc>)
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	18c9      	adds	r1, r1, r3
 800796a:	0032      	movs	r2, r6
 800796c:	6808      	ldr	r0, [r1, #0]
 800796e:	6849      	ldr	r1, [r1, #4]
 8007970:	003b      	movs	r3, r7
 8007972:	f7f9 fe4d 	bl	8001610 <__aeabi_dmul>
 8007976:	0006      	movs	r6, r0
 8007978:	000f      	movs	r7, r1
 800797a:	230f      	movs	r3, #15
 800797c:	439c      	bics	r4, r3
 800797e:	d04a      	beq.n	8007a16 <_strtod_l+0x54a>
 8007980:	3326      	adds	r3, #38	; 0x26
 8007982:	33ff      	adds	r3, #255	; 0xff
 8007984:	429c      	cmp	r4, r3
 8007986:	dd22      	ble.n	80079ce <_strtod_l+0x502>
 8007988:	2300      	movs	r3, #0
 800798a:	9305      	str	r3, [sp, #20]
 800798c:	9306      	str	r3, [sp, #24]
 800798e:	930d      	str	r3, [sp, #52]	; 0x34
 8007990:	9308      	str	r3, [sp, #32]
 8007992:	2322      	movs	r3, #34	; 0x22
 8007994:	2600      	movs	r6, #0
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	4f3f      	ldr	r7, [pc, #252]	; (8007a98 <_strtod_l+0x5cc>)
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800799e:	42b3      	cmp	r3, r6
 80079a0:	d100      	bne.n	80079a4 <_strtod_l+0x4d8>
 80079a2:	e5ce      	b.n	8007542 <_strtod_l+0x76>
 80079a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079a6:	9804      	ldr	r0, [sp, #16]
 80079a8:	f002 ffe8 	bl	800a97c <_Bfree>
 80079ac:	9908      	ldr	r1, [sp, #32]
 80079ae:	9804      	ldr	r0, [sp, #16]
 80079b0:	f002 ffe4 	bl	800a97c <_Bfree>
 80079b4:	9906      	ldr	r1, [sp, #24]
 80079b6:	9804      	ldr	r0, [sp, #16]
 80079b8:	f002 ffe0 	bl	800a97c <_Bfree>
 80079bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079be:	9804      	ldr	r0, [sp, #16]
 80079c0:	f002 ffdc 	bl	800a97c <_Bfree>
 80079c4:	9905      	ldr	r1, [sp, #20]
 80079c6:	9804      	ldr	r0, [sp, #16]
 80079c8:	f002 ffd8 	bl	800a97c <_Bfree>
 80079cc:	e5b9      	b.n	8007542 <_strtod_l+0x76>
 80079ce:	2300      	movs	r3, #0
 80079d0:	0030      	movs	r0, r6
 80079d2:	0039      	movs	r1, r7
 80079d4:	4d35      	ldr	r5, [pc, #212]	; (8007aac <_strtod_l+0x5e0>)
 80079d6:	1124      	asrs	r4, r4, #4
 80079d8:	9307      	str	r3, [sp, #28]
 80079da:	2c01      	cmp	r4, #1
 80079dc:	dc1e      	bgt.n	8007a1c <_strtod_l+0x550>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <_strtod_l+0x51a>
 80079e2:	0006      	movs	r6, r0
 80079e4:	000f      	movs	r7, r1
 80079e6:	4b32      	ldr	r3, [pc, #200]	; (8007ab0 <_strtod_l+0x5e4>)
 80079e8:	9a07      	ldr	r2, [sp, #28]
 80079ea:	18ff      	adds	r7, r7, r3
 80079ec:	4b2f      	ldr	r3, [pc, #188]	; (8007aac <_strtod_l+0x5e0>)
 80079ee:	00d2      	lsls	r2, r2, #3
 80079f0:	189d      	adds	r5, r3, r2
 80079f2:	6828      	ldr	r0, [r5, #0]
 80079f4:	6869      	ldr	r1, [r5, #4]
 80079f6:	0032      	movs	r2, r6
 80079f8:	003b      	movs	r3, r7
 80079fa:	f7f9 fe09 	bl	8001610 <__aeabi_dmul>
 80079fe:	4b26      	ldr	r3, [pc, #152]	; (8007a98 <_strtod_l+0x5cc>)
 8007a00:	4a2c      	ldr	r2, [pc, #176]	; (8007ab4 <_strtod_l+0x5e8>)
 8007a02:	0006      	movs	r6, r0
 8007a04:	400b      	ands	r3, r1
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d8be      	bhi.n	8007988 <_strtod_l+0x4bc>
 8007a0a:	4a2b      	ldr	r2, [pc, #172]	; (8007ab8 <_strtod_l+0x5ec>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d913      	bls.n	8007a38 <_strtod_l+0x56c>
 8007a10:	2601      	movs	r6, #1
 8007a12:	4f2a      	ldr	r7, [pc, #168]	; (8007abc <_strtod_l+0x5f0>)
 8007a14:	4276      	negs	r6, r6
 8007a16:	2300      	movs	r3, #0
 8007a18:	9307      	str	r3, [sp, #28]
 8007a1a:	e088      	b.n	8007b2e <_strtod_l+0x662>
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	4214      	tst	r4, r2
 8007a20:	d004      	beq.n	8007a2c <_strtod_l+0x560>
 8007a22:	682a      	ldr	r2, [r5, #0]
 8007a24:	686b      	ldr	r3, [r5, #4]
 8007a26:	f7f9 fdf3 	bl	8001610 <__aeabi_dmul>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	9a07      	ldr	r2, [sp, #28]
 8007a2e:	1064      	asrs	r4, r4, #1
 8007a30:	3201      	adds	r2, #1
 8007a32:	9207      	str	r2, [sp, #28]
 8007a34:	3508      	adds	r5, #8
 8007a36:	e7d0      	b.n	80079da <_strtod_l+0x50e>
 8007a38:	23d4      	movs	r3, #212	; 0xd4
 8007a3a:	049b      	lsls	r3, r3, #18
 8007a3c:	18cf      	adds	r7, r1, r3
 8007a3e:	e7ea      	b.n	8007a16 <_strtod_l+0x54a>
 8007a40:	2c00      	cmp	r4, #0
 8007a42:	d0e8      	beq.n	8007a16 <_strtod_l+0x54a>
 8007a44:	4264      	negs	r4, r4
 8007a46:	230f      	movs	r3, #15
 8007a48:	0022      	movs	r2, r4
 8007a4a:	401a      	ands	r2, r3
 8007a4c:	421c      	tst	r4, r3
 8007a4e:	d00a      	beq.n	8007a66 <_strtod_l+0x59a>
 8007a50:	4b15      	ldr	r3, [pc, #84]	; (8007aa8 <_strtod_l+0x5dc>)
 8007a52:	00d2      	lsls	r2, r2, #3
 8007a54:	189b      	adds	r3, r3, r2
 8007a56:	0030      	movs	r0, r6
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	0039      	movs	r1, r7
 8007a5e:	f7f9 f9dd 	bl	8000e1c <__aeabi_ddiv>
 8007a62:	0006      	movs	r6, r0
 8007a64:	000f      	movs	r7, r1
 8007a66:	1124      	asrs	r4, r4, #4
 8007a68:	d0d5      	beq.n	8007a16 <_strtod_l+0x54a>
 8007a6a:	2c1f      	cmp	r4, #31
 8007a6c:	dd28      	ble.n	8007ac0 <_strtod_l+0x5f4>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9305      	str	r3, [sp, #20]
 8007a72:	9306      	str	r3, [sp, #24]
 8007a74:	930d      	str	r3, [sp, #52]	; 0x34
 8007a76:	9308      	str	r3, [sp, #32]
 8007a78:	2322      	movs	r3, #34	; 0x22
 8007a7a:	9a04      	ldr	r2, [sp, #16]
 8007a7c:	2600      	movs	r6, #0
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a82:	2700      	movs	r7, #0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d18d      	bne.n	80079a4 <_strtod_l+0x4d8>
 8007a88:	e55b      	b.n	8007542 <_strtod_l+0x76>
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	00004e1f 	.word	0x00004e1f
 8007a90:	0800c966 	.word	0x0800c966
 8007a94:	0800c818 	.word	0x0800c818
 8007a98:	7ff00000 	.word	0x7ff00000
 8007a9c:	0800c95e 	.word	0x0800c95e
 8007aa0:	0800c99b 	.word	0x0800c99b
 8007aa4:	0800cc43 	.word	0x0800cc43
 8007aa8:	0800cb08 	.word	0x0800cb08
 8007aac:	0800cae0 	.word	0x0800cae0
 8007ab0:	fcb00000 	.word	0xfcb00000
 8007ab4:	7ca00000 	.word	0x7ca00000
 8007ab8:	7c900000 	.word	0x7c900000
 8007abc:	7fefffff 	.word	0x7fefffff
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	0022      	movs	r2, r4
 8007ac4:	401a      	ands	r2, r3
 8007ac6:	9207      	str	r2, [sp, #28]
 8007ac8:	421c      	tst	r4, r3
 8007aca:	d001      	beq.n	8007ad0 <_strtod_l+0x604>
 8007acc:	335a      	adds	r3, #90	; 0x5a
 8007ace:	9307      	str	r3, [sp, #28]
 8007ad0:	0030      	movs	r0, r6
 8007ad2:	0039      	movs	r1, r7
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4dc4      	ldr	r5, [pc, #784]	; (8007de8 <_strtod_l+0x91c>)
 8007ad8:	2201      	movs	r2, #1
 8007ada:	4214      	tst	r4, r2
 8007adc:	d004      	beq.n	8007ae8 <_strtod_l+0x61c>
 8007ade:	682a      	ldr	r2, [r5, #0]
 8007ae0:	686b      	ldr	r3, [r5, #4]
 8007ae2:	f7f9 fd95 	bl	8001610 <__aeabi_dmul>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	1064      	asrs	r4, r4, #1
 8007aea:	3508      	adds	r5, #8
 8007aec:	2c00      	cmp	r4, #0
 8007aee:	d1f3      	bne.n	8007ad8 <_strtod_l+0x60c>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <_strtod_l+0x62c>
 8007af4:	0006      	movs	r6, r0
 8007af6:	000f      	movs	r7, r1
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00f      	beq.n	8007b1e <_strtod_l+0x652>
 8007afe:	236b      	movs	r3, #107	; 0x6b
 8007b00:	007a      	lsls	r2, r7, #1
 8007b02:	0d52      	lsrs	r2, r2, #21
 8007b04:	0039      	movs	r1, r7
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	dd08      	ble.n	8007b1e <_strtod_l+0x652>
 8007b0c:	2b1f      	cmp	r3, #31
 8007b0e:	dc00      	bgt.n	8007b12 <_strtod_l+0x646>
 8007b10:	e121      	b.n	8007d56 <_strtod_l+0x88a>
 8007b12:	2600      	movs	r6, #0
 8007b14:	2b34      	cmp	r3, #52	; 0x34
 8007b16:	dc00      	bgt.n	8007b1a <_strtod_l+0x64e>
 8007b18:	e116      	b.n	8007d48 <_strtod_l+0x87c>
 8007b1a:	27dc      	movs	r7, #220	; 0xdc
 8007b1c:	04bf      	lsls	r7, r7, #18
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2300      	movs	r3, #0
 8007b22:	0030      	movs	r0, r6
 8007b24:	0039      	movs	r1, r7
 8007b26:	f7f8 fc8f 	bl	8000448 <__aeabi_dcmpeq>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d19f      	bne.n	8007a6e <_strtod_l+0x5a2>
 8007b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b30:	9a08      	ldr	r2, [sp, #32]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007b36:	9b05      	ldr	r3, [sp, #20]
 8007b38:	9804      	ldr	r0, [sp, #16]
 8007b3a:	f002 ff87 	bl	800aa4c <__s2b>
 8007b3e:	900d      	str	r0, [sp, #52]	; 0x34
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d100      	bne.n	8007b46 <_strtod_l+0x67a>
 8007b44:	e720      	b.n	8007988 <_strtod_l+0x4bc>
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	9906      	ldr	r1, [sp, #24]
 8007b4a:	17da      	asrs	r2, r3, #31
 8007b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b4e:	1a5b      	subs	r3, r3, r1
 8007b50:	401a      	ands	r2, r3
 8007b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b54:	9215      	str	r2, [sp, #84]	; 0x54
 8007b56:	43db      	mvns	r3, r3
 8007b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b5a:	17db      	asrs	r3, r3, #31
 8007b5c:	401a      	ands	r2, r3
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9218      	str	r2, [sp, #96]	; 0x60
 8007b62:	9305      	str	r3, [sp, #20]
 8007b64:	9306      	str	r3, [sp, #24]
 8007b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b68:	9804      	ldr	r0, [sp, #16]
 8007b6a:	6859      	ldr	r1, [r3, #4]
 8007b6c:	f002 fec2 	bl	800a8f4 <_Balloc>
 8007b70:	9008      	str	r0, [sp, #32]
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d100      	bne.n	8007b78 <_strtod_l+0x6ac>
 8007b76:	e70c      	b.n	8007992 <_strtod_l+0x4c6>
 8007b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b7a:	300c      	adds	r0, #12
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	310c      	adds	r1, #12
 8007b82:	3202      	adds	r2, #2
 8007b84:	0092      	lsls	r2, r2, #2
 8007b86:	f001 fc4b 	bl	8009420 <memcpy>
 8007b8a:	ab1e      	add	r3, sp, #120	; 0x78
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	0032      	movs	r2, r6
 8007b94:	003b      	movs	r3, r7
 8007b96:	9804      	ldr	r0, [sp, #16]
 8007b98:	9610      	str	r6, [sp, #64]	; 0x40
 8007b9a:	9711      	str	r7, [sp, #68]	; 0x44
 8007b9c:	f003 fa98 	bl	800b0d0 <__d2b>
 8007ba0:	901c      	str	r0, [sp, #112]	; 0x70
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d100      	bne.n	8007ba8 <_strtod_l+0x6dc>
 8007ba6:	e6f4      	b.n	8007992 <_strtod_l+0x4c6>
 8007ba8:	2101      	movs	r1, #1
 8007baa:	9804      	ldr	r0, [sp, #16]
 8007bac:	f002 ffe2 	bl	800ab74 <__i2b>
 8007bb0:	9006      	str	r0, [sp, #24]
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d100      	bne.n	8007bb8 <_strtod_l+0x6ec>
 8007bb6:	e6ec      	b.n	8007992 <_strtod_l+0x4c6>
 8007bb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007bbc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007bbe:	1ad4      	subs	r4, r2, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	db01      	blt.n	8007bc8 <_strtod_l+0x6fc>
 8007bc4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007bc6:	195d      	adds	r5, r3, r5
 8007bc8:	9907      	ldr	r1, [sp, #28]
 8007bca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007bcc:	1a5b      	subs	r3, r3, r1
 8007bce:	2136      	movs	r1, #54	; 0x36
 8007bd0:	189b      	adds	r3, r3, r2
 8007bd2:	1a8a      	subs	r2, r1, r2
 8007bd4:	4985      	ldr	r1, [pc, #532]	; (8007dec <_strtod_l+0x920>)
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	468c      	mov	ip, r1
 8007bda:	2100      	movs	r1, #0
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	9114      	str	r1, [sp, #80]	; 0x50
 8007be0:	9012      	str	r0, [sp, #72]	; 0x48
 8007be2:	4563      	cmp	r3, ip
 8007be4:	da07      	bge.n	8007bf6 <_strtod_l+0x72a>
 8007be6:	4661      	mov	r1, ip
 8007be8:	1ac9      	subs	r1, r1, r3
 8007bea:	1a52      	subs	r2, r2, r1
 8007bec:	291f      	cmp	r1, #31
 8007bee:	dd00      	ble.n	8007bf2 <_strtod_l+0x726>
 8007bf0:	e0b6      	b.n	8007d60 <_strtod_l+0x894>
 8007bf2:	4088      	lsls	r0, r1
 8007bf4:	9012      	str	r0, [sp, #72]	; 0x48
 8007bf6:	18ab      	adds	r3, r5, r2
 8007bf8:	930c      	str	r3, [sp, #48]	; 0x30
 8007bfa:	18a4      	adds	r4, r4, r2
 8007bfc:	9b07      	ldr	r3, [sp, #28]
 8007bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c00:	191c      	adds	r4, r3, r4
 8007c02:	002b      	movs	r3, r5
 8007c04:	4295      	cmp	r5, r2
 8007c06:	dd00      	ble.n	8007c0a <_strtod_l+0x73e>
 8007c08:	0013      	movs	r3, r2
 8007c0a:	42a3      	cmp	r3, r4
 8007c0c:	dd00      	ble.n	8007c10 <_strtod_l+0x744>
 8007c0e:	0023      	movs	r3, r4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dd04      	ble.n	8007c1e <_strtod_l+0x752>
 8007c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c16:	1ae4      	subs	r4, r4, r3
 8007c18:	1ad2      	subs	r2, r2, r3
 8007c1a:	920c      	str	r2, [sp, #48]	; 0x30
 8007c1c:	1aed      	subs	r5, r5, r3
 8007c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dd17      	ble.n	8007c54 <_strtod_l+0x788>
 8007c24:	001a      	movs	r2, r3
 8007c26:	9906      	ldr	r1, [sp, #24]
 8007c28:	9804      	ldr	r0, [sp, #16]
 8007c2a:	f003 f86b 	bl	800ad04 <__pow5mult>
 8007c2e:	9006      	str	r0, [sp, #24]
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d100      	bne.n	8007c36 <_strtod_l+0x76a>
 8007c34:	e6ad      	b.n	8007992 <_strtod_l+0x4c6>
 8007c36:	0001      	movs	r1, r0
 8007c38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c3a:	9804      	ldr	r0, [sp, #16]
 8007c3c:	f002 ffb2 	bl	800aba4 <__multiply>
 8007c40:	900e      	str	r0, [sp, #56]	; 0x38
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d100      	bne.n	8007c48 <_strtod_l+0x77c>
 8007c46:	e6a4      	b.n	8007992 <_strtod_l+0x4c6>
 8007c48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c4a:	9804      	ldr	r0, [sp, #16]
 8007c4c:	f002 fe96 	bl	800a97c <_Bfree>
 8007c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c52:	931c      	str	r3, [sp, #112]	; 0x70
 8007c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dd00      	ble.n	8007c5c <_strtod_l+0x790>
 8007c5a:	e087      	b.n	8007d6c <_strtod_l+0x8a0>
 8007c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	dd08      	ble.n	8007c74 <_strtod_l+0x7a8>
 8007c62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c64:	9908      	ldr	r1, [sp, #32]
 8007c66:	9804      	ldr	r0, [sp, #16]
 8007c68:	f003 f84c 	bl	800ad04 <__pow5mult>
 8007c6c:	9008      	str	r0, [sp, #32]
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d100      	bne.n	8007c74 <_strtod_l+0x7a8>
 8007c72:	e68e      	b.n	8007992 <_strtod_l+0x4c6>
 8007c74:	2c00      	cmp	r4, #0
 8007c76:	dd08      	ble.n	8007c8a <_strtod_l+0x7be>
 8007c78:	0022      	movs	r2, r4
 8007c7a:	9908      	ldr	r1, [sp, #32]
 8007c7c:	9804      	ldr	r0, [sp, #16]
 8007c7e:	f003 f89d 	bl	800adbc <__lshift>
 8007c82:	9008      	str	r0, [sp, #32]
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d100      	bne.n	8007c8a <_strtod_l+0x7be>
 8007c88:	e683      	b.n	8007992 <_strtod_l+0x4c6>
 8007c8a:	2d00      	cmp	r5, #0
 8007c8c:	dd08      	ble.n	8007ca0 <_strtod_l+0x7d4>
 8007c8e:	002a      	movs	r2, r5
 8007c90:	9906      	ldr	r1, [sp, #24]
 8007c92:	9804      	ldr	r0, [sp, #16]
 8007c94:	f003 f892 	bl	800adbc <__lshift>
 8007c98:	9006      	str	r0, [sp, #24]
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d100      	bne.n	8007ca0 <_strtod_l+0x7d4>
 8007c9e:	e678      	b.n	8007992 <_strtod_l+0x4c6>
 8007ca0:	9a08      	ldr	r2, [sp, #32]
 8007ca2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ca4:	9804      	ldr	r0, [sp, #16]
 8007ca6:	f003 f913 	bl	800aed0 <__mdiff>
 8007caa:	9005      	str	r0, [sp, #20]
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d100      	bne.n	8007cb2 <_strtod_l+0x7e6>
 8007cb0:	e66f      	b.n	8007992 <_strtod_l+0x4c6>
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	68c3      	ldr	r3, [r0, #12]
 8007cb6:	9906      	ldr	r1, [sp, #24]
 8007cb8:	60c2      	str	r2, [r0, #12]
 8007cba:	930c      	str	r3, [sp, #48]	; 0x30
 8007cbc:	f003 f8ec 	bl	800ae98 <__mcmp>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	da5d      	bge.n	8007d80 <_strtod_l+0x8b4>
 8007cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cc6:	4333      	orrs	r3, r6
 8007cc8:	d000      	beq.n	8007ccc <_strtod_l+0x800>
 8007cca:	e088      	b.n	8007dde <_strtod_l+0x912>
 8007ccc:	033b      	lsls	r3, r7, #12
 8007cce:	d000      	beq.n	8007cd2 <_strtod_l+0x806>
 8007cd0:	e085      	b.n	8007dde <_strtod_l+0x912>
 8007cd2:	22d6      	movs	r2, #214	; 0xd6
 8007cd4:	4b46      	ldr	r3, [pc, #280]	; (8007df0 <_strtod_l+0x924>)
 8007cd6:	04d2      	lsls	r2, r2, #19
 8007cd8:	403b      	ands	r3, r7
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d97f      	bls.n	8007dde <_strtod_l+0x912>
 8007cde:	9b05      	ldr	r3, [sp, #20]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d103      	bne.n	8007cee <_strtod_l+0x822>
 8007ce6:	9b05      	ldr	r3, [sp, #20]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	dd77      	ble.n	8007dde <_strtod_l+0x912>
 8007cee:	9905      	ldr	r1, [sp, #20]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	9804      	ldr	r0, [sp, #16]
 8007cf4:	f003 f862 	bl	800adbc <__lshift>
 8007cf8:	9906      	ldr	r1, [sp, #24]
 8007cfa:	9005      	str	r0, [sp, #20]
 8007cfc:	f003 f8cc 	bl	800ae98 <__mcmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	dd6c      	ble.n	8007dde <_strtod_l+0x912>
 8007d04:	9907      	ldr	r1, [sp, #28]
 8007d06:	003b      	movs	r3, r7
 8007d08:	4a39      	ldr	r2, [pc, #228]	; (8007df0 <_strtod_l+0x924>)
 8007d0a:	2900      	cmp	r1, #0
 8007d0c:	d100      	bne.n	8007d10 <_strtod_l+0x844>
 8007d0e:	e094      	b.n	8007e3a <_strtod_l+0x96e>
 8007d10:	0011      	movs	r1, r2
 8007d12:	20d6      	movs	r0, #214	; 0xd6
 8007d14:	4039      	ands	r1, r7
 8007d16:	04c0      	lsls	r0, r0, #19
 8007d18:	4281      	cmp	r1, r0
 8007d1a:	dd00      	ble.n	8007d1e <_strtod_l+0x852>
 8007d1c:	e08d      	b.n	8007e3a <_strtod_l+0x96e>
 8007d1e:	23dc      	movs	r3, #220	; 0xdc
 8007d20:	049b      	lsls	r3, r3, #18
 8007d22:	4299      	cmp	r1, r3
 8007d24:	dc00      	bgt.n	8007d28 <_strtod_l+0x85c>
 8007d26:	e6a7      	b.n	8007a78 <_strtod_l+0x5ac>
 8007d28:	0030      	movs	r0, r6
 8007d2a:	0039      	movs	r1, r7
 8007d2c:	4b31      	ldr	r3, [pc, #196]	; (8007df4 <_strtod_l+0x928>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f7f9 fc6e 	bl	8001610 <__aeabi_dmul>
 8007d34:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <_strtod_l+0x924>)
 8007d36:	0006      	movs	r6, r0
 8007d38:	000f      	movs	r7, r1
 8007d3a:	420b      	tst	r3, r1
 8007d3c:	d000      	beq.n	8007d40 <_strtod_l+0x874>
 8007d3e:	e631      	b.n	80079a4 <_strtod_l+0x4d8>
 8007d40:	2322      	movs	r3, #34	; 0x22
 8007d42:	9a04      	ldr	r2, [sp, #16]
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	e62d      	b.n	80079a4 <_strtod_l+0x4d8>
 8007d48:	234b      	movs	r3, #75	; 0x4b
 8007d4a:	1a9a      	subs	r2, r3, r2
 8007d4c:	3b4c      	subs	r3, #76	; 0x4c
 8007d4e:	4093      	lsls	r3, r2
 8007d50:	4019      	ands	r1, r3
 8007d52:	000f      	movs	r7, r1
 8007d54:	e6e3      	b.n	8007b1e <_strtod_l+0x652>
 8007d56:	2201      	movs	r2, #1
 8007d58:	4252      	negs	r2, r2
 8007d5a:	409a      	lsls	r2, r3
 8007d5c:	4016      	ands	r6, r2
 8007d5e:	e6de      	b.n	8007b1e <_strtod_l+0x652>
 8007d60:	4925      	ldr	r1, [pc, #148]	; (8007df8 <_strtod_l+0x92c>)
 8007d62:	1acb      	subs	r3, r1, r3
 8007d64:	0001      	movs	r1, r0
 8007d66:	4099      	lsls	r1, r3
 8007d68:	9114      	str	r1, [sp, #80]	; 0x50
 8007d6a:	e743      	b.n	8007bf4 <_strtod_l+0x728>
 8007d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d70:	9804      	ldr	r0, [sp, #16]
 8007d72:	f003 f823 	bl	800adbc <__lshift>
 8007d76:	901c      	str	r0, [sp, #112]	; 0x70
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d000      	beq.n	8007d7e <_strtod_l+0x8b2>
 8007d7c:	e76e      	b.n	8007c5c <_strtod_l+0x790>
 8007d7e:	e608      	b.n	8007992 <_strtod_l+0x4c6>
 8007d80:	970e      	str	r7, [sp, #56]	; 0x38
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d177      	bne.n	8007e76 <_strtod_l+0x9aa>
 8007d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d88:	033b      	lsls	r3, r7, #12
 8007d8a:	0b1b      	lsrs	r3, r3, #12
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	d039      	beq.n	8007e04 <_strtod_l+0x938>
 8007d90:	4a1a      	ldr	r2, [pc, #104]	; (8007dfc <_strtod_l+0x930>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d139      	bne.n	8007e0a <_strtod_l+0x93e>
 8007d96:	2101      	movs	r1, #1
 8007d98:	9b07      	ldr	r3, [sp, #28]
 8007d9a:	4249      	negs	r1, r1
 8007d9c:	0032      	movs	r2, r6
 8007d9e:	0008      	movs	r0, r1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <_strtod_l+0x8f0>
 8007da4:	24d4      	movs	r4, #212	; 0xd4
 8007da6:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <_strtod_l+0x924>)
 8007da8:	0008      	movs	r0, r1
 8007daa:	403b      	ands	r3, r7
 8007dac:	04e4      	lsls	r4, r4, #19
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	d804      	bhi.n	8007dbc <_strtod_l+0x8f0>
 8007db2:	306c      	adds	r0, #108	; 0x6c
 8007db4:	0d1b      	lsrs	r3, r3, #20
 8007db6:	1ac3      	subs	r3, r0, r3
 8007db8:	4099      	lsls	r1, r3
 8007dba:	0008      	movs	r0, r1
 8007dbc:	4282      	cmp	r2, r0
 8007dbe:	d124      	bne.n	8007e0a <_strtod_l+0x93e>
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <_strtod_l+0x934>)
 8007dc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007dc4:	4299      	cmp	r1, r3
 8007dc6:	d102      	bne.n	8007dce <_strtod_l+0x902>
 8007dc8:	3201      	adds	r2, #1
 8007dca:	d100      	bne.n	8007dce <_strtod_l+0x902>
 8007dcc:	e5e1      	b.n	8007992 <_strtod_l+0x4c6>
 8007dce:	4b08      	ldr	r3, [pc, #32]	; (8007df0 <_strtod_l+0x924>)
 8007dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dd2:	2600      	movs	r6, #0
 8007dd4:	401a      	ands	r2, r3
 8007dd6:	0013      	movs	r3, r2
 8007dd8:	2280      	movs	r2, #128	; 0x80
 8007dda:	0352      	lsls	r2, r2, #13
 8007ddc:	189f      	adds	r7, r3, r2
 8007dde:	9b07      	ldr	r3, [sp, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1a1      	bne.n	8007d28 <_strtod_l+0x85c>
 8007de4:	e5de      	b.n	80079a4 <_strtod_l+0x4d8>
 8007de6:	46c0      	nop			; (mov r8, r8)
 8007de8:	0800c830 	.word	0x0800c830
 8007dec:	fffffc02 	.word	0xfffffc02
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	39500000 	.word	0x39500000
 8007df8:	fffffbe2 	.word	0xfffffbe2
 8007dfc:	000fffff 	.word	0x000fffff
 8007e00:	7fefffff 	.word	0x7fefffff
 8007e04:	4333      	orrs	r3, r6
 8007e06:	d100      	bne.n	8007e0a <_strtod_l+0x93e>
 8007e08:	e77c      	b.n	8007d04 <_strtod_l+0x838>
 8007e0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01d      	beq.n	8007e4c <_strtod_l+0x980>
 8007e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e14:	4213      	tst	r3, r2
 8007e16:	d0e2      	beq.n	8007dde <_strtod_l+0x912>
 8007e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e1a:	0030      	movs	r0, r6
 8007e1c:	0039      	movs	r1, r7
 8007e1e:	9a07      	ldr	r2, [sp, #28]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d017      	beq.n	8007e54 <_strtod_l+0x988>
 8007e24:	f7ff fb3a 	bl	800749c <sulp>
 8007e28:	0002      	movs	r2, r0
 8007e2a:	000b      	movs	r3, r1
 8007e2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007e30:	f7f8 fc94 	bl	800075c <__aeabi_dadd>
 8007e34:	0006      	movs	r6, r0
 8007e36:	000f      	movs	r7, r1
 8007e38:	e7d1      	b.n	8007dde <_strtod_l+0x912>
 8007e3a:	2601      	movs	r6, #1
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	4a98      	ldr	r2, [pc, #608]	; (80080a0 <_strtod_l+0xbd4>)
 8007e40:	4276      	negs	r6, r6
 8007e42:	189b      	adds	r3, r3, r2
 8007e44:	4a97      	ldr	r2, [pc, #604]	; (80080a4 <_strtod_l+0xbd8>)
 8007e46:	431a      	orrs	r2, r3
 8007e48:	0017      	movs	r7, r2
 8007e4a:	e7c8      	b.n	8007dde <_strtod_l+0x912>
 8007e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e4e:	4233      	tst	r3, r6
 8007e50:	d0c5      	beq.n	8007dde <_strtod_l+0x912>
 8007e52:	e7e1      	b.n	8007e18 <_strtod_l+0x94c>
 8007e54:	f7ff fb22 	bl	800749c <sulp>
 8007e58:	0002      	movs	r2, r0
 8007e5a:	000b      	movs	r3, r1
 8007e5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007e60:	f7f9 fe98 	bl	8001b94 <__aeabi_dsub>
 8007e64:	2200      	movs	r2, #0
 8007e66:	2300      	movs	r3, #0
 8007e68:	0006      	movs	r6, r0
 8007e6a:	000f      	movs	r7, r1
 8007e6c:	f7f8 faec 	bl	8000448 <__aeabi_dcmpeq>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d0b4      	beq.n	8007dde <_strtod_l+0x912>
 8007e74:	e600      	b.n	8007a78 <_strtod_l+0x5ac>
 8007e76:	9906      	ldr	r1, [sp, #24]
 8007e78:	9805      	ldr	r0, [sp, #20]
 8007e7a:	f003 f989 	bl	800b190 <__ratio>
 8007e7e:	2380      	movs	r3, #128	; 0x80
 8007e80:	2200      	movs	r2, #0
 8007e82:	05db      	lsls	r3, r3, #23
 8007e84:	0004      	movs	r4, r0
 8007e86:	000d      	movs	r5, r1
 8007e88:	f7f8 faee 	bl	8000468 <__aeabi_dcmple>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d06d      	beq.n	8007f6c <_strtod_l+0xaa0>
 8007e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d000      	beq.n	8007e98 <_strtod_l+0x9cc>
 8007e96:	e07e      	b.n	8007f96 <_strtod_l+0xaca>
 8007e98:	2e00      	cmp	r6, #0
 8007e9a:	d158      	bne.n	8007f4e <_strtod_l+0xa82>
 8007e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e9e:	031b      	lsls	r3, r3, #12
 8007ea0:	d000      	beq.n	8007ea4 <_strtod_l+0x9d8>
 8007ea2:	e07f      	b.n	8007fa4 <_strtod_l+0xad8>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	0020      	movs	r0, r4
 8007ea8:	0029      	movs	r1, r5
 8007eaa:	4b7f      	ldr	r3, [pc, #508]	; (80080a8 <_strtod_l+0xbdc>)
 8007eac:	f7f8 fad2 	bl	8000454 <__aeabi_dcmplt>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d158      	bne.n	8007f66 <_strtod_l+0xa9a>
 8007eb4:	0020      	movs	r0, r4
 8007eb6:	0029      	movs	r1, r5
 8007eb8:	2200      	movs	r2, #0
 8007eba:	4b7c      	ldr	r3, [pc, #496]	; (80080ac <_strtod_l+0xbe0>)
 8007ebc:	f7f9 fba8 	bl	8001610 <__aeabi_dmul>
 8007ec0:	0004      	movs	r4, r0
 8007ec2:	000d      	movs	r5, r1
 8007ec4:	2380      	movs	r3, #128	; 0x80
 8007ec6:	061b      	lsls	r3, r3, #24
 8007ec8:	940a      	str	r4, [sp, #40]	; 0x28
 8007eca:	18eb      	adds	r3, r5, r3
 8007ecc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed2:	9212      	str	r2, [sp, #72]	; 0x48
 8007ed4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ed6:	4a76      	ldr	r2, [pc, #472]	; (80080b0 <_strtod_l+0xbe4>)
 8007ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eda:	4013      	ands	r3, r2
 8007edc:	9314      	str	r3, [sp, #80]	; 0x50
 8007ede:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ee0:	4b74      	ldr	r3, [pc, #464]	; (80080b4 <_strtod_l+0xbe8>)
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d000      	beq.n	8007ee8 <_strtod_l+0xa1c>
 8007ee6:	e091      	b.n	800800c <_strtod_l+0xb40>
 8007ee8:	4a73      	ldr	r2, [pc, #460]	; (80080b8 <_strtod_l+0xbec>)
 8007eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eec:	4694      	mov	ip, r2
 8007eee:	4463      	add	r3, ip
 8007ef0:	001f      	movs	r7, r3
 8007ef2:	0030      	movs	r0, r6
 8007ef4:	0019      	movs	r1, r3
 8007ef6:	f003 f883 	bl	800b000 <__ulp>
 8007efa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007efe:	f7f9 fb87 	bl	8001610 <__aeabi_dmul>
 8007f02:	0032      	movs	r2, r6
 8007f04:	003b      	movs	r3, r7
 8007f06:	f7f8 fc29 	bl	800075c <__aeabi_dadd>
 8007f0a:	4a69      	ldr	r2, [pc, #420]	; (80080b0 <_strtod_l+0xbe4>)
 8007f0c:	4b6b      	ldr	r3, [pc, #428]	; (80080bc <_strtod_l+0xbf0>)
 8007f0e:	0006      	movs	r6, r0
 8007f10:	400a      	ands	r2, r1
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d949      	bls.n	8007faa <_strtod_l+0xade>
 8007f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f18:	4b69      	ldr	r3, [pc, #420]	; (80080c0 <_strtod_l+0xbf4>)
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d103      	bne.n	8007f26 <_strtod_l+0xa5a>
 8007f1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f20:	3301      	adds	r3, #1
 8007f22:	d100      	bne.n	8007f26 <_strtod_l+0xa5a>
 8007f24:	e535      	b.n	8007992 <_strtod_l+0x4c6>
 8007f26:	2601      	movs	r6, #1
 8007f28:	4f65      	ldr	r7, [pc, #404]	; (80080c0 <_strtod_l+0xbf4>)
 8007f2a:	4276      	negs	r6, r6
 8007f2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f2e:	9804      	ldr	r0, [sp, #16]
 8007f30:	f002 fd24 	bl	800a97c <_Bfree>
 8007f34:	9908      	ldr	r1, [sp, #32]
 8007f36:	9804      	ldr	r0, [sp, #16]
 8007f38:	f002 fd20 	bl	800a97c <_Bfree>
 8007f3c:	9906      	ldr	r1, [sp, #24]
 8007f3e:	9804      	ldr	r0, [sp, #16]
 8007f40:	f002 fd1c 	bl	800a97c <_Bfree>
 8007f44:	9905      	ldr	r1, [sp, #20]
 8007f46:	9804      	ldr	r0, [sp, #16]
 8007f48:	f002 fd18 	bl	800a97c <_Bfree>
 8007f4c:	e60b      	b.n	8007b66 <_strtod_l+0x69a>
 8007f4e:	2e01      	cmp	r6, #1
 8007f50:	d103      	bne.n	8007f5a <_strtod_l+0xa8e>
 8007f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d100      	bne.n	8007f5a <_strtod_l+0xa8e>
 8007f58:	e58e      	b.n	8007a78 <_strtod_l+0x5ac>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	4c59      	ldr	r4, [pc, #356]	; (80080c4 <_strtod_l+0xbf8>)
 8007f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f60:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007f64:	e01c      	b.n	8007fa0 <_strtod_l+0xad4>
 8007f66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007f68:	4d50      	ldr	r5, [pc, #320]	; (80080ac <_strtod_l+0xbe0>)
 8007f6a:	e7ab      	b.n	8007ec4 <_strtod_l+0x9f8>
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	0020      	movs	r0, r4
 8007f70:	0029      	movs	r1, r5
 8007f72:	4b4e      	ldr	r3, [pc, #312]	; (80080ac <_strtod_l+0xbe0>)
 8007f74:	f7f9 fb4c 	bl	8001610 <__aeabi_dmul>
 8007f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f7a:	0004      	movs	r4, r0
 8007f7c:	000b      	movs	r3, r1
 8007f7e:	000d      	movs	r5, r1
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	d104      	bne.n	8007f8e <_strtod_l+0xac2>
 8007f84:	2280      	movs	r2, #128	; 0x80
 8007f86:	0612      	lsls	r2, r2, #24
 8007f88:	900a      	str	r0, [sp, #40]	; 0x28
 8007f8a:	188b      	adds	r3, r1, r2
 8007f8c:	e79e      	b.n	8007ecc <_strtod_l+0xa00>
 8007f8e:	0002      	movs	r2, r0
 8007f90:	920a      	str	r2, [sp, #40]	; 0x28
 8007f92:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f94:	e79b      	b.n	8007ece <_strtod_l+0xa02>
 8007f96:	2300      	movs	r3, #0
 8007f98:	4c43      	ldr	r4, [pc, #268]	; (80080a8 <_strtod_l+0xbdc>)
 8007f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f9c:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f9e:	2400      	movs	r4, #0
 8007fa0:	4d41      	ldr	r5, [pc, #260]	; (80080a8 <_strtod_l+0xbdc>)
 8007fa2:	e794      	b.n	8007ece <_strtod_l+0xa02>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4c47      	ldr	r4, [pc, #284]	; (80080c4 <_strtod_l+0xbf8>)
 8007fa8:	e7f7      	b.n	8007f9a <_strtod_l+0xace>
 8007faa:	23d4      	movs	r3, #212	; 0xd4
 8007fac:	049b      	lsls	r3, r3, #18
 8007fae:	18cf      	adds	r7, r1, r3
 8007fb0:	9b07      	ldr	r3, [sp, #28]
 8007fb2:	970e      	str	r7, [sp, #56]	; 0x38
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1b9      	bne.n	8007f2c <_strtod_l+0xa60>
 8007fb8:	4b3d      	ldr	r3, [pc, #244]	; (80080b0 <_strtod_l+0xbe4>)
 8007fba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fbc:	403b      	ands	r3, r7
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d1b4      	bne.n	8007f2c <_strtod_l+0xa60>
 8007fc2:	0020      	movs	r0, r4
 8007fc4:	0029      	movs	r1, r5
 8007fc6:	f7f8 faab 	bl	8000520 <__aeabi_d2lz>
 8007fca:	f7f8 fae5 	bl	8000598 <__aeabi_l2d>
 8007fce:	0002      	movs	r2, r0
 8007fd0:	000b      	movs	r3, r1
 8007fd2:	0020      	movs	r0, r4
 8007fd4:	0029      	movs	r1, r5
 8007fd6:	f7f9 fddd 	bl	8001b94 <__aeabi_dsub>
 8007fda:	033b      	lsls	r3, r7, #12
 8007fdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fde:	0b1b      	lsrs	r3, r3, #12
 8007fe0:	4333      	orrs	r3, r6
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	0004      	movs	r4, r0
 8007fe6:	000d      	movs	r5, r1
 8007fe8:	4a37      	ldr	r2, [pc, #220]	; (80080c8 <_strtod_l+0xbfc>)
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d054      	beq.n	8008098 <_strtod_l+0xbcc>
 8007fee:	4b37      	ldr	r3, [pc, #220]	; (80080cc <_strtod_l+0xc00>)
 8007ff0:	f7f8 fa30 	bl	8000454 <__aeabi_dcmplt>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d000      	beq.n	8007ffa <_strtod_l+0xb2e>
 8007ff8:	e4d4      	b.n	80079a4 <_strtod_l+0x4d8>
 8007ffa:	0020      	movs	r0, r4
 8007ffc:	0029      	movs	r1, r5
 8007ffe:	4a34      	ldr	r2, [pc, #208]	; (80080d0 <_strtod_l+0xc04>)
 8008000:	4b2a      	ldr	r3, [pc, #168]	; (80080ac <_strtod_l+0xbe0>)
 8008002:	f7f8 fa3b 	bl	800047c <__aeabi_dcmpgt>
 8008006:	2800      	cmp	r0, #0
 8008008:	d090      	beq.n	8007f2c <_strtod_l+0xa60>
 800800a:	e4cb      	b.n	80079a4 <_strtod_l+0x4d8>
 800800c:	9b07      	ldr	r3, [sp, #28]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d02b      	beq.n	800806a <_strtod_l+0xb9e>
 8008012:	23d4      	movs	r3, #212	; 0xd4
 8008014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008016:	04db      	lsls	r3, r3, #19
 8008018:	429a      	cmp	r2, r3
 800801a:	d826      	bhi.n	800806a <_strtod_l+0xb9e>
 800801c:	0020      	movs	r0, r4
 800801e:	0029      	movs	r1, r5
 8008020:	4a2c      	ldr	r2, [pc, #176]	; (80080d4 <_strtod_l+0xc08>)
 8008022:	4b2d      	ldr	r3, [pc, #180]	; (80080d8 <_strtod_l+0xc0c>)
 8008024:	f7f8 fa20 	bl	8000468 <__aeabi_dcmple>
 8008028:	2800      	cmp	r0, #0
 800802a:	d017      	beq.n	800805c <_strtod_l+0xb90>
 800802c:	0020      	movs	r0, r4
 800802e:	0029      	movs	r1, r5
 8008030:	f7f8 fa58 	bl	80004e4 <__aeabi_d2uiz>
 8008034:	2800      	cmp	r0, #0
 8008036:	d100      	bne.n	800803a <_strtod_l+0xb6e>
 8008038:	3001      	adds	r0, #1
 800803a:	f7fa f9b1 	bl	80023a0 <__aeabi_ui2d>
 800803e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008040:	0004      	movs	r4, r0
 8008042:	000b      	movs	r3, r1
 8008044:	000d      	movs	r5, r1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d122      	bne.n	8008090 <_strtod_l+0xbc4>
 800804a:	2280      	movs	r2, #128	; 0x80
 800804c:	0612      	lsls	r2, r2, #24
 800804e:	188b      	adds	r3, r1, r2
 8008050:	9016      	str	r0, [sp, #88]	; 0x58
 8008052:	9317      	str	r3, [sp, #92]	; 0x5c
 8008054:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008058:	9212      	str	r2, [sp, #72]	; 0x48
 800805a:	9313      	str	r3, [sp, #76]	; 0x4c
 800805c:	22d6      	movs	r2, #214	; 0xd6
 800805e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008060:	04d2      	lsls	r2, r2, #19
 8008062:	189b      	adds	r3, r3, r2
 8008064:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008066:	1a9b      	subs	r3, r3, r2
 8008068:	9313      	str	r3, [sp, #76]	; 0x4c
 800806a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800806c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800806e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008070:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8008072:	f002 ffc5 	bl	800b000 <__ulp>
 8008076:	0002      	movs	r2, r0
 8008078:	000b      	movs	r3, r1
 800807a:	0030      	movs	r0, r6
 800807c:	0039      	movs	r1, r7
 800807e:	f7f9 fac7 	bl	8001610 <__aeabi_dmul>
 8008082:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008086:	f7f8 fb69 	bl	800075c <__aeabi_dadd>
 800808a:	0006      	movs	r6, r0
 800808c:	000f      	movs	r7, r1
 800808e:	e78f      	b.n	8007fb0 <_strtod_l+0xae4>
 8008090:	0002      	movs	r2, r0
 8008092:	9216      	str	r2, [sp, #88]	; 0x58
 8008094:	9317      	str	r3, [sp, #92]	; 0x5c
 8008096:	e7dd      	b.n	8008054 <_strtod_l+0xb88>
 8008098:	4b10      	ldr	r3, [pc, #64]	; (80080dc <_strtod_l+0xc10>)
 800809a:	f7f8 f9db 	bl	8000454 <__aeabi_dcmplt>
 800809e:	e7b2      	b.n	8008006 <_strtod_l+0xb3a>
 80080a0:	fff00000 	.word	0xfff00000
 80080a4:	000fffff 	.word	0x000fffff
 80080a8:	3ff00000 	.word	0x3ff00000
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	7ff00000 	.word	0x7ff00000
 80080b4:	7fe00000 	.word	0x7fe00000
 80080b8:	fcb00000 	.word	0xfcb00000
 80080bc:	7c9fffff 	.word	0x7c9fffff
 80080c0:	7fefffff 	.word	0x7fefffff
 80080c4:	bff00000 	.word	0xbff00000
 80080c8:	94a03595 	.word	0x94a03595
 80080cc:	3fdfffff 	.word	0x3fdfffff
 80080d0:	35afe535 	.word	0x35afe535
 80080d4:	ffc00000 	.word	0xffc00000
 80080d8:	41dfffff 	.word	0x41dfffff
 80080dc:	3fcfffff 	.word	0x3fcfffff

080080e0 <_strtod_r>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	4b02      	ldr	r3, [pc, #8]	; (80080ec <_strtod_r+0xc>)
 80080e4:	f7ff f9f2 	bl	80074cc <_strtod_l>
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	20000028 	.word	0x20000028

080080f0 <strtod>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	4c04      	ldr	r4, [pc, #16]	; (8008104 <strtod+0x14>)
 80080f4:	000a      	movs	r2, r1
 80080f6:	0001      	movs	r1, r0
 80080f8:	4b03      	ldr	r3, [pc, #12]	; (8008108 <strtod+0x18>)
 80080fa:	6820      	ldr	r0, [r4, #0]
 80080fc:	f7ff f9e6 	bl	80074cc <_strtod_l>
 8008100:	bd10      	pop	{r4, pc}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	200001e0 	.word	0x200001e0
 8008108:	20000028 	.word	0x20000028

0800810c <_strtol_l.constprop.0>:
 800810c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810e:	b087      	sub	sp, #28
 8008110:	001e      	movs	r6, r3
 8008112:	9005      	str	r0, [sp, #20]
 8008114:	9101      	str	r1, [sp, #4]
 8008116:	9202      	str	r2, [sp, #8]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d048      	beq.n	80081ae <_strtol_l.constprop.0+0xa2>
 800811c:	000b      	movs	r3, r1
 800811e:	2e24      	cmp	r6, #36	; 0x24
 8008120:	d845      	bhi.n	80081ae <_strtol_l.constprop.0+0xa2>
 8008122:	4a3b      	ldr	r2, [pc, #236]	; (8008210 <_strtol_l.constprop.0+0x104>)
 8008124:	2108      	movs	r1, #8
 8008126:	4694      	mov	ip, r2
 8008128:	001a      	movs	r2, r3
 800812a:	4660      	mov	r0, ip
 800812c:	7814      	ldrb	r4, [r2, #0]
 800812e:	3301      	adds	r3, #1
 8008130:	5d00      	ldrb	r0, [r0, r4]
 8008132:	001d      	movs	r5, r3
 8008134:	0007      	movs	r7, r0
 8008136:	400f      	ands	r7, r1
 8008138:	4208      	tst	r0, r1
 800813a:	d1f5      	bne.n	8008128 <_strtol_l.constprop.0+0x1c>
 800813c:	2c2d      	cmp	r4, #45	; 0x2d
 800813e:	d13d      	bne.n	80081bc <_strtol_l.constprop.0+0xb0>
 8008140:	2701      	movs	r7, #1
 8008142:	781c      	ldrb	r4, [r3, #0]
 8008144:	1c95      	adds	r5, r2, #2
 8008146:	2e00      	cmp	r6, #0
 8008148:	d05e      	beq.n	8008208 <_strtol_l.constprop.0+0xfc>
 800814a:	2e10      	cmp	r6, #16
 800814c:	d109      	bne.n	8008162 <_strtol_l.constprop.0+0x56>
 800814e:	2c30      	cmp	r4, #48	; 0x30
 8008150:	d107      	bne.n	8008162 <_strtol_l.constprop.0+0x56>
 8008152:	2220      	movs	r2, #32
 8008154:	782b      	ldrb	r3, [r5, #0]
 8008156:	4393      	bics	r3, r2
 8008158:	2b58      	cmp	r3, #88	; 0x58
 800815a:	d150      	bne.n	80081fe <_strtol_l.constprop.0+0xf2>
 800815c:	2610      	movs	r6, #16
 800815e:	786c      	ldrb	r4, [r5, #1]
 8008160:	3502      	adds	r5, #2
 8008162:	4b2c      	ldr	r3, [pc, #176]	; (8008214 <_strtol_l.constprop.0+0x108>)
 8008164:	0031      	movs	r1, r6
 8008166:	18fb      	adds	r3, r7, r3
 8008168:	0018      	movs	r0, r3
 800816a:	9303      	str	r3, [sp, #12]
 800816c:	f7f8 f86c 	bl	8000248 <__aeabi_uidivmod>
 8008170:	2200      	movs	r2, #0
 8008172:	9104      	str	r1, [sp, #16]
 8008174:	2101      	movs	r1, #1
 8008176:	4684      	mov	ip, r0
 8008178:	0010      	movs	r0, r2
 800817a:	4249      	negs	r1, r1
 800817c:	0023      	movs	r3, r4
 800817e:	3b30      	subs	r3, #48	; 0x30
 8008180:	2b09      	cmp	r3, #9
 8008182:	d903      	bls.n	800818c <_strtol_l.constprop.0+0x80>
 8008184:	3b11      	subs	r3, #17
 8008186:	2b19      	cmp	r3, #25
 8008188:	d81d      	bhi.n	80081c6 <_strtol_l.constprop.0+0xba>
 800818a:	330a      	adds	r3, #10
 800818c:	429e      	cmp	r6, r3
 800818e:	dd1e      	ble.n	80081ce <_strtol_l.constprop.0+0xc2>
 8008190:	1c54      	adds	r4, r2, #1
 8008192:	d009      	beq.n	80081a8 <_strtol_l.constprop.0+0x9c>
 8008194:	000a      	movs	r2, r1
 8008196:	4584      	cmp	ip, r0
 8008198:	d306      	bcc.n	80081a8 <_strtol_l.constprop.0+0x9c>
 800819a:	d102      	bne.n	80081a2 <_strtol_l.constprop.0+0x96>
 800819c:	9c04      	ldr	r4, [sp, #16]
 800819e:	429c      	cmp	r4, r3
 80081a0:	db02      	blt.n	80081a8 <_strtol_l.constprop.0+0x9c>
 80081a2:	2201      	movs	r2, #1
 80081a4:	4370      	muls	r0, r6
 80081a6:	1818      	adds	r0, r3, r0
 80081a8:	782c      	ldrb	r4, [r5, #0]
 80081aa:	3501      	adds	r5, #1
 80081ac:	e7e6      	b.n	800817c <_strtol_l.constprop.0+0x70>
 80081ae:	f001 f8ff 	bl	80093b0 <__errno>
 80081b2:	2316      	movs	r3, #22
 80081b4:	6003      	str	r3, [r0, #0]
 80081b6:	2000      	movs	r0, #0
 80081b8:	b007      	add	sp, #28
 80081ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081bc:	2c2b      	cmp	r4, #43	; 0x2b
 80081be:	d1c2      	bne.n	8008146 <_strtol_l.constprop.0+0x3a>
 80081c0:	781c      	ldrb	r4, [r3, #0]
 80081c2:	1c95      	adds	r5, r2, #2
 80081c4:	e7bf      	b.n	8008146 <_strtol_l.constprop.0+0x3a>
 80081c6:	0023      	movs	r3, r4
 80081c8:	3b61      	subs	r3, #97	; 0x61
 80081ca:	2b19      	cmp	r3, #25
 80081cc:	d9dd      	bls.n	800818a <_strtol_l.constprop.0+0x7e>
 80081ce:	1c53      	adds	r3, r2, #1
 80081d0:	d109      	bne.n	80081e6 <_strtol_l.constprop.0+0xda>
 80081d2:	2322      	movs	r3, #34	; 0x22
 80081d4:	9a05      	ldr	r2, [sp, #20]
 80081d6:	9803      	ldr	r0, [sp, #12]
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	9b02      	ldr	r3, [sp, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0eb      	beq.n	80081b8 <_strtol_l.constprop.0+0xac>
 80081e0:	1e6b      	subs	r3, r5, #1
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	e007      	b.n	80081f6 <_strtol_l.constprop.0+0xea>
 80081e6:	2f00      	cmp	r7, #0
 80081e8:	d000      	beq.n	80081ec <_strtol_l.constprop.0+0xe0>
 80081ea:	4240      	negs	r0, r0
 80081ec:	9b02      	ldr	r3, [sp, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0e2      	beq.n	80081b8 <_strtol_l.constprop.0+0xac>
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	d1f4      	bne.n	80081e0 <_strtol_l.constprop.0+0xd4>
 80081f6:	9b02      	ldr	r3, [sp, #8]
 80081f8:	9a01      	ldr	r2, [sp, #4]
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	e7dc      	b.n	80081b8 <_strtol_l.constprop.0+0xac>
 80081fe:	2430      	movs	r4, #48	; 0x30
 8008200:	2e00      	cmp	r6, #0
 8008202:	d1ae      	bne.n	8008162 <_strtol_l.constprop.0+0x56>
 8008204:	3608      	adds	r6, #8
 8008206:	e7ac      	b.n	8008162 <_strtol_l.constprop.0+0x56>
 8008208:	2c30      	cmp	r4, #48	; 0x30
 800820a:	d0a2      	beq.n	8008152 <_strtol_l.constprop.0+0x46>
 800820c:	260a      	movs	r6, #10
 800820e:	e7a8      	b.n	8008162 <_strtol_l.constprop.0+0x56>
 8008210:	0800c859 	.word	0x0800c859
 8008214:	7fffffff 	.word	0x7fffffff

08008218 <_strtol_r>:
 8008218:	b510      	push	{r4, lr}
 800821a:	f7ff ff77 	bl	800810c <_strtol_l.constprop.0>
 800821e:	bd10      	pop	{r4, pc}

08008220 <strtol>:
 8008220:	b510      	push	{r4, lr}
 8008222:	4c04      	ldr	r4, [pc, #16]	; (8008234 <strtol+0x14>)
 8008224:	0013      	movs	r3, r2
 8008226:	000a      	movs	r2, r1
 8008228:	0001      	movs	r1, r0
 800822a:	6820      	ldr	r0, [r4, #0]
 800822c:	f7ff ff6e 	bl	800810c <_strtol_l.constprop.0>
 8008230:	bd10      	pop	{r4, pc}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	200001e0 	.word	0x200001e0

08008238 <__cvt>:
 8008238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800823a:	001e      	movs	r6, r3
 800823c:	2300      	movs	r3, #0
 800823e:	0014      	movs	r4, r2
 8008240:	b08b      	sub	sp, #44	; 0x2c
 8008242:	429e      	cmp	r6, r3
 8008244:	da04      	bge.n	8008250 <__cvt+0x18>
 8008246:	2180      	movs	r1, #128	; 0x80
 8008248:	0609      	lsls	r1, r1, #24
 800824a:	1873      	adds	r3, r6, r1
 800824c:	001e      	movs	r6, r3
 800824e:	232d      	movs	r3, #45	; 0x2d
 8008250:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008252:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008254:	7013      	strb	r3, [r2, #0]
 8008256:	2320      	movs	r3, #32
 8008258:	2203      	movs	r2, #3
 800825a:	439f      	bics	r7, r3
 800825c:	2f46      	cmp	r7, #70	; 0x46
 800825e:	d007      	beq.n	8008270 <__cvt+0x38>
 8008260:	003b      	movs	r3, r7
 8008262:	3b45      	subs	r3, #69	; 0x45
 8008264:	4259      	negs	r1, r3
 8008266:	414b      	adcs	r3, r1
 8008268:	9910      	ldr	r1, [sp, #64]	; 0x40
 800826a:	3a01      	subs	r2, #1
 800826c:	18cb      	adds	r3, r1, r3
 800826e:	9310      	str	r3, [sp, #64]	; 0x40
 8008270:	ab09      	add	r3, sp, #36	; 0x24
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	ab08      	add	r3, sp, #32
 8008276:	9303      	str	r3, [sp, #12]
 8008278:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800827a:	9200      	str	r2, [sp, #0]
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008280:	0022      	movs	r2, r4
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	0033      	movs	r3, r6
 8008286:	f001 f96f 	bl	8009568 <_dtoa_r>
 800828a:	0005      	movs	r5, r0
 800828c:	2f47      	cmp	r7, #71	; 0x47
 800828e:	d102      	bne.n	8008296 <__cvt+0x5e>
 8008290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008292:	07db      	lsls	r3, r3, #31
 8008294:	d528      	bpl.n	80082e8 <__cvt+0xb0>
 8008296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008298:	18eb      	adds	r3, r5, r3
 800829a:	9307      	str	r3, [sp, #28]
 800829c:	2f46      	cmp	r7, #70	; 0x46
 800829e:	d114      	bne.n	80082ca <__cvt+0x92>
 80082a0:	782b      	ldrb	r3, [r5, #0]
 80082a2:	2b30      	cmp	r3, #48	; 0x30
 80082a4:	d10c      	bne.n	80082c0 <__cvt+0x88>
 80082a6:	2200      	movs	r2, #0
 80082a8:	2300      	movs	r3, #0
 80082aa:	0020      	movs	r0, r4
 80082ac:	0031      	movs	r1, r6
 80082ae:	f7f8 f8cb 	bl	8000448 <__aeabi_dcmpeq>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d104      	bne.n	80082c0 <__cvt+0x88>
 80082b6:	2301      	movs	r3, #1
 80082b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082c2:	9a07      	ldr	r2, [sp, #28]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	18d3      	adds	r3, r2, r3
 80082c8:	9307      	str	r3, [sp, #28]
 80082ca:	2200      	movs	r2, #0
 80082cc:	2300      	movs	r3, #0
 80082ce:	0020      	movs	r0, r4
 80082d0:	0031      	movs	r1, r6
 80082d2:	f7f8 f8b9 	bl	8000448 <__aeabi_dcmpeq>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d001      	beq.n	80082de <__cvt+0xa6>
 80082da:	9b07      	ldr	r3, [sp, #28]
 80082dc:	9309      	str	r3, [sp, #36]	; 0x24
 80082de:	2230      	movs	r2, #48	; 0x30
 80082e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e2:	9907      	ldr	r1, [sp, #28]
 80082e4:	428b      	cmp	r3, r1
 80082e6:	d306      	bcc.n	80082f6 <__cvt+0xbe>
 80082e8:	0028      	movs	r0, r5
 80082ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082ee:	1b5b      	subs	r3, r3, r5
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	b00b      	add	sp, #44	; 0x2c
 80082f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f6:	1c59      	adds	r1, r3, #1
 80082f8:	9109      	str	r1, [sp, #36]	; 0x24
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e7f0      	b.n	80082e0 <__cvt+0xa8>

080082fe <__exponent>:
 80082fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008300:	1c83      	adds	r3, r0, #2
 8008302:	b087      	sub	sp, #28
 8008304:	9303      	str	r3, [sp, #12]
 8008306:	0005      	movs	r5, r0
 8008308:	000c      	movs	r4, r1
 800830a:	232b      	movs	r3, #43	; 0x2b
 800830c:	7002      	strb	r2, [r0, #0]
 800830e:	2900      	cmp	r1, #0
 8008310:	da01      	bge.n	8008316 <__exponent+0x18>
 8008312:	424c      	negs	r4, r1
 8008314:	3302      	adds	r3, #2
 8008316:	706b      	strb	r3, [r5, #1]
 8008318:	2c09      	cmp	r4, #9
 800831a:	dd2f      	ble.n	800837c <__exponent+0x7e>
 800831c:	270a      	movs	r7, #10
 800831e:	ab04      	add	r3, sp, #16
 8008320:	1dde      	adds	r6, r3, #7
 8008322:	0020      	movs	r0, r4
 8008324:	0039      	movs	r1, r7
 8008326:	9601      	str	r6, [sp, #4]
 8008328:	f7f8 f878 	bl	800041c <__aeabi_idivmod>
 800832c:	3e01      	subs	r6, #1
 800832e:	3130      	adds	r1, #48	; 0x30
 8008330:	0020      	movs	r0, r4
 8008332:	7031      	strb	r1, [r6, #0]
 8008334:	0039      	movs	r1, r7
 8008336:	9402      	str	r4, [sp, #8]
 8008338:	f7f7 ff8a 	bl	8000250 <__divsi3>
 800833c:	9b02      	ldr	r3, [sp, #8]
 800833e:	0004      	movs	r4, r0
 8008340:	2b63      	cmp	r3, #99	; 0x63
 8008342:	dcee      	bgt.n	8008322 <__exponent+0x24>
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	3430      	adds	r4, #48	; 0x30
 8008348:	1e9a      	subs	r2, r3, #2
 800834a:	0013      	movs	r3, r2
 800834c:	9903      	ldr	r1, [sp, #12]
 800834e:	7014      	strb	r4, [r2, #0]
 8008350:	a804      	add	r0, sp, #16
 8008352:	3007      	adds	r0, #7
 8008354:	4298      	cmp	r0, r3
 8008356:	d80c      	bhi.n	8008372 <__exponent+0x74>
 8008358:	2300      	movs	r3, #0
 800835a:	4282      	cmp	r2, r0
 800835c:	d804      	bhi.n	8008368 <__exponent+0x6a>
 800835e:	aa04      	add	r2, sp, #16
 8008360:	3309      	adds	r3, #9
 8008362:	189b      	adds	r3, r3, r2
 8008364:	9a01      	ldr	r2, [sp, #4]
 8008366:	1a9b      	subs	r3, r3, r2
 8008368:	9a03      	ldr	r2, [sp, #12]
 800836a:	18d3      	adds	r3, r2, r3
 800836c:	1b58      	subs	r0, r3, r5
 800836e:	b007      	add	sp, #28
 8008370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008372:	7818      	ldrb	r0, [r3, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	7008      	strb	r0, [r1, #0]
 8008378:	3101      	adds	r1, #1
 800837a:	e7e9      	b.n	8008350 <__exponent+0x52>
 800837c:	2330      	movs	r3, #48	; 0x30
 800837e:	3430      	adds	r4, #48	; 0x30
 8008380:	70ab      	strb	r3, [r5, #2]
 8008382:	70ec      	strb	r4, [r5, #3]
 8008384:	1d2b      	adds	r3, r5, #4
 8008386:	e7f1      	b.n	800836c <__exponent+0x6e>

08008388 <_printf_float>:
 8008388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838a:	b095      	sub	sp, #84	; 0x54
 800838c:	000c      	movs	r4, r1
 800838e:	9208      	str	r2, [sp, #32]
 8008390:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008392:	9309      	str	r3, [sp, #36]	; 0x24
 8008394:	0007      	movs	r7, r0
 8008396:	f000 ffa7 	bl	80092e8 <_localeconv_r>
 800839a:	6803      	ldr	r3, [r0, #0]
 800839c:	0018      	movs	r0, r3
 800839e:	930c      	str	r3, [sp, #48]	; 0x30
 80083a0:	f7f7 feb0 	bl	8000104 <strlen>
 80083a4:	2300      	movs	r3, #0
 80083a6:	9312      	str	r3, [sp, #72]	; 0x48
 80083a8:	7e23      	ldrb	r3, [r4, #24]
 80083aa:	2207      	movs	r2, #7
 80083ac:	930a      	str	r3, [sp, #40]	; 0x28
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	900d      	str	r0, [sp, #52]	; 0x34
 80083b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80083b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	05c9      	lsls	r1, r1, #23
 80083ba:	d547      	bpl.n	800844c <_printf_float+0xc4>
 80083bc:	189b      	adds	r3, r3, r2
 80083be:	4393      	bics	r3, r2
 80083c0:	001a      	movs	r2, r3
 80083c2:	3208      	adds	r2, #8
 80083c4:	602a      	str	r2, [r5, #0]
 80083c6:	681e      	ldr	r6, [r3, #0]
 80083c8:	685d      	ldr	r5, [r3, #4]
 80083ca:	0032      	movs	r2, r6
 80083cc:	002b      	movs	r3, r5
 80083ce:	64a2      	str	r2, [r4, #72]	; 0x48
 80083d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80083d2:	2201      	movs	r2, #1
 80083d4:	006b      	lsls	r3, r5, #1
 80083d6:	085b      	lsrs	r3, r3, #1
 80083d8:	930e      	str	r3, [sp, #56]	; 0x38
 80083da:	0030      	movs	r0, r6
 80083dc:	4bab      	ldr	r3, [pc, #684]	; (800868c <_printf_float+0x304>)
 80083de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80083e0:	4252      	negs	r2, r2
 80083e2:	f7f9 ff59 	bl	8002298 <__aeabi_dcmpun>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d132      	bne.n	8008450 <_printf_float+0xc8>
 80083ea:	2201      	movs	r2, #1
 80083ec:	0030      	movs	r0, r6
 80083ee:	4ba7      	ldr	r3, [pc, #668]	; (800868c <_printf_float+0x304>)
 80083f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80083f2:	4252      	negs	r2, r2
 80083f4:	f7f8 f838 	bl	8000468 <__aeabi_dcmple>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d129      	bne.n	8008450 <_printf_float+0xc8>
 80083fc:	2200      	movs	r2, #0
 80083fe:	2300      	movs	r3, #0
 8008400:	0030      	movs	r0, r6
 8008402:	0029      	movs	r1, r5
 8008404:	f7f8 f826 	bl	8000454 <__aeabi_dcmplt>
 8008408:	2800      	cmp	r0, #0
 800840a:	d003      	beq.n	8008414 <_printf_float+0x8c>
 800840c:	0023      	movs	r3, r4
 800840e:	222d      	movs	r2, #45	; 0x2d
 8008410:	3343      	adds	r3, #67	; 0x43
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008416:	4d9e      	ldr	r5, [pc, #632]	; (8008690 <_printf_float+0x308>)
 8008418:	2b47      	cmp	r3, #71	; 0x47
 800841a:	d900      	bls.n	800841e <_printf_float+0x96>
 800841c:	4d9d      	ldr	r5, [pc, #628]	; (8008694 <_printf_float+0x30c>)
 800841e:	2303      	movs	r3, #3
 8008420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	3301      	adds	r3, #1
 8008426:	439a      	bics	r2, r3
 8008428:	2300      	movs	r3, #0
 800842a:	6022      	str	r2, [r4, #0]
 800842c:	930b      	str	r3, [sp, #44]	; 0x2c
 800842e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008430:	0021      	movs	r1, r4
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	0038      	movs	r0, r7
 8008436:	9b08      	ldr	r3, [sp, #32]
 8008438:	aa13      	add	r2, sp, #76	; 0x4c
 800843a:	f000 f9fb 	bl	8008834 <_printf_common>
 800843e:	3001      	adds	r0, #1
 8008440:	d000      	beq.n	8008444 <_printf_float+0xbc>
 8008442:	e0a3      	b.n	800858c <_printf_float+0x204>
 8008444:	2001      	movs	r0, #1
 8008446:	4240      	negs	r0, r0
 8008448:	b015      	add	sp, #84	; 0x54
 800844a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800844c:	3307      	adds	r3, #7
 800844e:	e7b6      	b.n	80083be <_printf_float+0x36>
 8008450:	0032      	movs	r2, r6
 8008452:	002b      	movs	r3, r5
 8008454:	0030      	movs	r0, r6
 8008456:	0029      	movs	r1, r5
 8008458:	f7f9 ff1e 	bl	8002298 <__aeabi_dcmpun>
 800845c:	2800      	cmp	r0, #0
 800845e:	d00b      	beq.n	8008478 <_printf_float+0xf0>
 8008460:	2d00      	cmp	r5, #0
 8008462:	da03      	bge.n	800846c <_printf_float+0xe4>
 8008464:	0023      	movs	r3, r4
 8008466:	222d      	movs	r2, #45	; 0x2d
 8008468:	3343      	adds	r3, #67	; 0x43
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846e:	4d8a      	ldr	r5, [pc, #552]	; (8008698 <_printf_float+0x310>)
 8008470:	2b47      	cmp	r3, #71	; 0x47
 8008472:	d9d4      	bls.n	800841e <_printf_float+0x96>
 8008474:	4d89      	ldr	r5, [pc, #548]	; (800869c <_printf_float+0x314>)
 8008476:	e7d2      	b.n	800841e <_printf_float+0x96>
 8008478:	2220      	movs	r2, #32
 800847a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800847c:	6863      	ldr	r3, [r4, #4]
 800847e:	4391      	bics	r1, r2
 8008480:	910e      	str	r1, [sp, #56]	; 0x38
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	d14a      	bne.n	800851c <_printf_float+0x194>
 8008486:	3307      	adds	r3, #7
 8008488:	6063      	str	r3, [r4, #4]
 800848a:	2380      	movs	r3, #128	; 0x80
 800848c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	4313      	orrs	r3, r2
 8008492:	2200      	movs	r2, #0
 8008494:	9206      	str	r2, [sp, #24]
 8008496:	aa12      	add	r2, sp, #72	; 0x48
 8008498:	9205      	str	r2, [sp, #20]
 800849a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	9204      	str	r2, [sp, #16]
 80084a0:	aa11      	add	r2, sp, #68	; 0x44
 80084a2:	9203      	str	r2, [sp, #12]
 80084a4:	2223      	movs	r2, #35	; 0x23
 80084a6:	a908      	add	r1, sp, #32
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	1852      	adds	r2, r2, r1
 80084ae:	9202      	str	r2, [sp, #8]
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	0032      	movs	r2, r6
 80084b4:	002b      	movs	r3, r5
 80084b6:	0038      	movs	r0, r7
 80084b8:	f7ff febe 	bl	8008238 <__cvt>
 80084bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084be:	0005      	movs	r5, r0
 80084c0:	2b47      	cmp	r3, #71	; 0x47
 80084c2:	d109      	bne.n	80084d8 <_printf_float+0x150>
 80084c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084c6:	1cda      	adds	r2, r3, #3
 80084c8:	db02      	blt.n	80084d0 <_printf_float+0x148>
 80084ca:	6862      	ldr	r2, [r4, #4]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	dd49      	ble.n	8008564 <_printf_float+0x1dc>
 80084d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d2:	3b02      	subs	r3, #2
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	930a      	str	r3, [sp, #40]	; 0x28
 80084d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084dc:	2b65      	cmp	r3, #101	; 0x65
 80084de:	d824      	bhi.n	800852a <_printf_float+0x1a2>
 80084e0:	0020      	movs	r0, r4
 80084e2:	001a      	movs	r2, r3
 80084e4:	3901      	subs	r1, #1
 80084e6:	3050      	adds	r0, #80	; 0x50
 80084e8:	9111      	str	r1, [sp, #68]	; 0x44
 80084ea:	f7ff ff08 	bl	80082fe <__exponent>
 80084ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80084f2:	1813      	adds	r3, r2, r0
 80084f4:	6123      	str	r3, [r4, #16]
 80084f6:	2a01      	cmp	r2, #1
 80084f8:	dc02      	bgt.n	8008500 <_printf_float+0x178>
 80084fa:	6822      	ldr	r2, [r4, #0]
 80084fc:	07d2      	lsls	r2, r2, #31
 80084fe:	d501      	bpl.n	8008504 <_printf_float+0x17c>
 8008500:	3301      	adds	r3, #1
 8008502:	6123      	str	r3, [r4, #16]
 8008504:	2323      	movs	r3, #35	; 0x23
 8008506:	aa08      	add	r2, sp, #32
 8008508:	189b      	adds	r3, r3, r2
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d100      	bne.n	8008512 <_printf_float+0x18a>
 8008510:	e78d      	b.n	800842e <_printf_float+0xa6>
 8008512:	0023      	movs	r3, r4
 8008514:	222d      	movs	r2, #45	; 0x2d
 8008516:	3343      	adds	r3, #67	; 0x43
 8008518:	701a      	strb	r2, [r3, #0]
 800851a:	e788      	b.n	800842e <_printf_float+0xa6>
 800851c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800851e:	2a47      	cmp	r2, #71	; 0x47
 8008520:	d1b3      	bne.n	800848a <_printf_float+0x102>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1b1      	bne.n	800848a <_printf_float+0x102>
 8008526:	3301      	adds	r3, #1
 8008528:	e7ae      	b.n	8008488 <_printf_float+0x100>
 800852a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852c:	2b66      	cmp	r3, #102	; 0x66
 800852e:	d11b      	bne.n	8008568 <_printf_float+0x1e0>
 8008530:	6863      	ldr	r3, [r4, #4]
 8008532:	2900      	cmp	r1, #0
 8008534:	dd09      	ble.n	800854a <_printf_float+0x1c2>
 8008536:	6121      	str	r1, [r4, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d102      	bne.n	8008542 <_printf_float+0x1ba>
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	07d2      	lsls	r2, r2, #31
 8008540:	d50b      	bpl.n	800855a <_printf_float+0x1d2>
 8008542:	3301      	adds	r3, #1
 8008544:	185b      	adds	r3, r3, r1
 8008546:	6123      	str	r3, [r4, #16]
 8008548:	e007      	b.n	800855a <_printf_float+0x1d2>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <_printf_float+0x1ce>
 800854e:	2201      	movs	r2, #1
 8008550:	6821      	ldr	r1, [r4, #0]
 8008552:	4211      	tst	r1, r2
 8008554:	d000      	beq.n	8008558 <_printf_float+0x1d0>
 8008556:	1c9a      	adds	r2, r3, #2
 8008558:	6122      	str	r2, [r4, #16]
 800855a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800855c:	65a3      	str	r3, [r4, #88]	; 0x58
 800855e:	2300      	movs	r3, #0
 8008560:	930b      	str	r3, [sp, #44]	; 0x2c
 8008562:	e7cf      	b.n	8008504 <_printf_float+0x17c>
 8008564:	2367      	movs	r3, #103	; 0x67
 8008566:	930a      	str	r3, [sp, #40]	; 0x28
 8008568:	9911      	ldr	r1, [sp, #68]	; 0x44
 800856a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800856c:	4299      	cmp	r1, r3
 800856e:	db06      	blt.n	800857e <_printf_float+0x1f6>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	6121      	str	r1, [r4, #16]
 8008574:	07db      	lsls	r3, r3, #31
 8008576:	d5f0      	bpl.n	800855a <_printf_float+0x1d2>
 8008578:	3101      	adds	r1, #1
 800857a:	6121      	str	r1, [r4, #16]
 800857c:	e7ed      	b.n	800855a <_printf_float+0x1d2>
 800857e:	2201      	movs	r2, #1
 8008580:	2900      	cmp	r1, #0
 8008582:	dc01      	bgt.n	8008588 <_printf_float+0x200>
 8008584:	1892      	adds	r2, r2, r2
 8008586:	1a52      	subs	r2, r2, r1
 8008588:	189b      	adds	r3, r3, r2
 800858a:	e7dc      	b.n	8008546 <_printf_float+0x1be>
 800858c:	6822      	ldr	r2, [r4, #0]
 800858e:	0553      	lsls	r3, r2, #21
 8008590:	d408      	bmi.n	80085a4 <_printf_float+0x21c>
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	002a      	movs	r2, r5
 8008596:	0038      	movs	r0, r7
 8008598:	9908      	ldr	r1, [sp, #32]
 800859a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800859c:	47a8      	blx	r5
 800859e:	3001      	adds	r0, #1
 80085a0:	d12a      	bne.n	80085f8 <_printf_float+0x270>
 80085a2:	e74f      	b.n	8008444 <_printf_float+0xbc>
 80085a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a6:	2b65      	cmp	r3, #101	; 0x65
 80085a8:	d800      	bhi.n	80085ac <_printf_float+0x224>
 80085aa:	e0ec      	b.n	8008786 <_printf_float+0x3fe>
 80085ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80085ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80085b0:	2200      	movs	r2, #0
 80085b2:	2300      	movs	r3, #0
 80085b4:	f7f7 ff48 	bl	8000448 <__aeabi_dcmpeq>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d034      	beq.n	8008626 <_printf_float+0x29e>
 80085bc:	2301      	movs	r3, #1
 80085be:	0038      	movs	r0, r7
 80085c0:	4a37      	ldr	r2, [pc, #220]	; (80086a0 <_printf_float+0x318>)
 80085c2:	9908      	ldr	r1, [sp, #32]
 80085c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085c6:	47a8      	blx	r5
 80085c8:	3001      	adds	r0, #1
 80085ca:	d100      	bne.n	80085ce <_printf_float+0x246>
 80085cc:	e73a      	b.n	8008444 <_printf_float+0xbc>
 80085ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085d2:	429a      	cmp	r2, r3
 80085d4:	db02      	blt.n	80085dc <_printf_float+0x254>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	07db      	lsls	r3, r3, #31
 80085da:	d50d      	bpl.n	80085f8 <_printf_float+0x270>
 80085dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085de:	0038      	movs	r0, r7
 80085e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085e4:	9908      	ldr	r1, [sp, #32]
 80085e6:	47a8      	blx	r5
 80085e8:	2500      	movs	r5, #0
 80085ea:	3001      	adds	r0, #1
 80085ec:	d100      	bne.n	80085f0 <_printf_float+0x268>
 80085ee:	e729      	b.n	8008444 <_printf_float+0xbc>
 80085f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085f2:	3b01      	subs	r3, #1
 80085f4:	42ab      	cmp	r3, r5
 80085f6:	dc0a      	bgt.n	800860e <_printf_float+0x286>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	079b      	lsls	r3, r3, #30
 80085fc:	d500      	bpl.n	8008600 <_printf_float+0x278>
 80085fe:	e116      	b.n	800882e <_printf_float+0x4a6>
 8008600:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008602:	68e0      	ldr	r0, [r4, #12]
 8008604:	4298      	cmp	r0, r3
 8008606:	db00      	blt.n	800860a <_printf_float+0x282>
 8008608:	e71e      	b.n	8008448 <_printf_float+0xc0>
 800860a:	0018      	movs	r0, r3
 800860c:	e71c      	b.n	8008448 <_printf_float+0xc0>
 800860e:	0022      	movs	r2, r4
 8008610:	2301      	movs	r3, #1
 8008612:	0038      	movs	r0, r7
 8008614:	9908      	ldr	r1, [sp, #32]
 8008616:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008618:	321a      	adds	r2, #26
 800861a:	47b0      	blx	r6
 800861c:	3001      	adds	r0, #1
 800861e:	d100      	bne.n	8008622 <_printf_float+0x29a>
 8008620:	e710      	b.n	8008444 <_printf_float+0xbc>
 8008622:	3501      	adds	r5, #1
 8008624:	e7e4      	b.n	80085f0 <_printf_float+0x268>
 8008626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008628:	2b00      	cmp	r3, #0
 800862a:	dc3b      	bgt.n	80086a4 <_printf_float+0x31c>
 800862c:	2301      	movs	r3, #1
 800862e:	0038      	movs	r0, r7
 8008630:	4a1b      	ldr	r2, [pc, #108]	; (80086a0 <_printf_float+0x318>)
 8008632:	9908      	ldr	r1, [sp, #32]
 8008634:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008636:	47b0      	blx	r6
 8008638:	3001      	adds	r0, #1
 800863a:	d100      	bne.n	800863e <_printf_float+0x2b6>
 800863c:	e702      	b.n	8008444 <_printf_float+0xbc>
 800863e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008640:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008642:	4313      	orrs	r3, r2
 8008644:	d102      	bne.n	800864c <_printf_float+0x2c4>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	07db      	lsls	r3, r3, #31
 800864a:	d5d5      	bpl.n	80085f8 <_printf_float+0x270>
 800864c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800864e:	0038      	movs	r0, r7
 8008650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008652:	9908      	ldr	r1, [sp, #32]
 8008654:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008656:	47b0      	blx	r6
 8008658:	2300      	movs	r3, #0
 800865a:	3001      	adds	r0, #1
 800865c:	d100      	bne.n	8008660 <_printf_float+0x2d8>
 800865e:	e6f1      	b.n	8008444 <_printf_float+0xbc>
 8008660:	930a      	str	r3, [sp, #40]	; 0x28
 8008662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008666:	425b      	negs	r3, r3
 8008668:	4293      	cmp	r3, r2
 800866a:	dc01      	bgt.n	8008670 <_printf_float+0x2e8>
 800866c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800866e:	e791      	b.n	8008594 <_printf_float+0x20c>
 8008670:	0022      	movs	r2, r4
 8008672:	2301      	movs	r3, #1
 8008674:	0038      	movs	r0, r7
 8008676:	9908      	ldr	r1, [sp, #32]
 8008678:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800867a:	321a      	adds	r2, #26
 800867c:	47b0      	blx	r6
 800867e:	3001      	adds	r0, #1
 8008680:	d100      	bne.n	8008684 <_printf_float+0x2fc>
 8008682:	e6df      	b.n	8008444 <_printf_float+0xbc>
 8008684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008686:	3301      	adds	r3, #1
 8008688:	e7ea      	b.n	8008660 <_printf_float+0x2d8>
 800868a:	46c0      	nop			; (mov r8, r8)
 800868c:	7fefffff 	.word	0x7fefffff
 8008690:	0800c959 	.word	0x0800c959
 8008694:	0800c95d 	.word	0x0800c95d
 8008698:	0800c961 	.word	0x0800c961
 800869c:	0800c965 	.word	0x0800c965
 80086a0:	0800cc03 	.word	0x0800cc03
 80086a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086a8:	920a      	str	r2, [sp, #40]	; 0x28
 80086aa:	429a      	cmp	r2, r3
 80086ac:	dd00      	ble.n	80086b0 <_printf_float+0x328>
 80086ae:	930a      	str	r3, [sp, #40]	; 0x28
 80086b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dc3d      	bgt.n	8008732 <_printf_float+0x3aa>
 80086b6:	2300      	movs	r3, #0
 80086b8:	930e      	str	r3, [sp, #56]	; 0x38
 80086ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086bc:	43db      	mvns	r3, r3
 80086be:	17db      	asrs	r3, r3, #31
 80086c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80086c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80086c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086ca:	4013      	ands	r3, r2
 80086cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086d2:	4293      	cmp	r3, r2
 80086d4:	dc36      	bgt.n	8008744 <_printf_float+0x3bc>
 80086d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086da:	429a      	cmp	r2, r3
 80086dc:	db40      	blt.n	8008760 <_printf_float+0x3d8>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	07db      	lsls	r3, r3, #31
 80086e2:	d43d      	bmi.n	8008760 <_printf_float+0x3d8>
 80086e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80086e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ea:	1af3      	subs	r3, r6, r3
 80086ec:	1ab6      	subs	r6, r6, r2
 80086ee:	429e      	cmp	r6, r3
 80086f0:	dd00      	ble.n	80086f4 <_printf_float+0x36c>
 80086f2:	001e      	movs	r6, r3
 80086f4:	2e00      	cmp	r6, #0
 80086f6:	dc3c      	bgt.n	8008772 <_printf_float+0x3ea>
 80086f8:	2300      	movs	r3, #0
 80086fa:	930a      	str	r3, [sp, #40]	; 0x28
 80086fc:	43f3      	mvns	r3, r6
 80086fe:	17db      	asrs	r3, r3, #31
 8008700:	930b      	str	r3, [sp, #44]	; 0x2c
 8008702:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800870a:	4032      	ands	r2, r6
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008710:	4293      	cmp	r3, r2
 8008712:	dc00      	bgt.n	8008716 <_printf_float+0x38e>
 8008714:	e770      	b.n	80085f8 <_printf_float+0x270>
 8008716:	0022      	movs	r2, r4
 8008718:	2301      	movs	r3, #1
 800871a:	0038      	movs	r0, r7
 800871c:	9908      	ldr	r1, [sp, #32]
 800871e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008720:	321a      	adds	r2, #26
 8008722:	47a8      	blx	r5
 8008724:	3001      	adds	r0, #1
 8008726:	d100      	bne.n	800872a <_printf_float+0x3a2>
 8008728:	e68c      	b.n	8008444 <_printf_float+0xbc>
 800872a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872c:	3301      	adds	r3, #1
 800872e:	930a      	str	r3, [sp, #40]	; 0x28
 8008730:	e7e7      	b.n	8008702 <_printf_float+0x37a>
 8008732:	002a      	movs	r2, r5
 8008734:	0038      	movs	r0, r7
 8008736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008738:	9908      	ldr	r1, [sp, #32]
 800873a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800873c:	47b0      	blx	r6
 800873e:	3001      	adds	r0, #1
 8008740:	d1b9      	bne.n	80086b6 <_printf_float+0x32e>
 8008742:	e67f      	b.n	8008444 <_printf_float+0xbc>
 8008744:	0022      	movs	r2, r4
 8008746:	2301      	movs	r3, #1
 8008748:	0038      	movs	r0, r7
 800874a:	9908      	ldr	r1, [sp, #32]
 800874c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800874e:	321a      	adds	r2, #26
 8008750:	47b0      	blx	r6
 8008752:	3001      	adds	r0, #1
 8008754:	d100      	bne.n	8008758 <_printf_float+0x3d0>
 8008756:	e675      	b.n	8008444 <_printf_float+0xbc>
 8008758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800875a:	3301      	adds	r3, #1
 800875c:	930e      	str	r3, [sp, #56]	; 0x38
 800875e:	e7b0      	b.n	80086c2 <_printf_float+0x33a>
 8008760:	0038      	movs	r0, r7
 8008762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008766:	9908      	ldr	r1, [sp, #32]
 8008768:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800876a:	47b0      	blx	r6
 800876c:	3001      	adds	r0, #1
 800876e:	d1b9      	bne.n	80086e4 <_printf_float+0x35c>
 8008770:	e668      	b.n	8008444 <_printf_float+0xbc>
 8008772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008774:	0038      	movs	r0, r7
 8008776:	18ea      	adds	r2, r5, r3
 8008778:	9908      	ldr	r1, [sp, #32]
 800877a:	0033      	movs	r3, r6
 800877c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800877e:	47a8      	blx	r5
 8008780:	3001      	adds	r0, #1
 8008782:	d1b9      	bne.n	80086f8 <_printf_float+0x370>
 8008784:	e65e      	b.n	8008444 <_printf_float+0xbc>
 8008786:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008788:	2b01      	cmp	r3, #1
 800878a:	dc02      	bgt.n	8008792 <_printf_float+0x40a>
 800878c:	2301      	movs	r3, #1
 800878e:	421a      	tst	r2, r3
 8008790:	d03a      	beq.n	8008808 <_printf_float+0x480>
 8008792:	2301      	movs	r3, #1
 8008794:	002a      	movs	r2, r5
 8008796:	0038      	movs	r0, r7
 8008798:	9908      	ldr	r1, [sp, #32]
 800879a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800879c:	47b0      	blx	r6
 800879e:	3001      	adds	r0, #1
 80087a0:	d100      	bne.n	80087a4 <_printf_float+0x41c>
 80087a2:	e64f      	b.n	8008444 <_printf_float+0xbc>
 80087a4:	0038      	movs	r0, r7
 80087a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087aa:	9908      	ldr	r1, [sp, #32]
 80087ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80087ae:	47b0      	blx	r6
 80087b0:	3001      	adds	r0, #1
 80087b2:	d100      	bne.n	80087b6 <_printf_float+0x42e>
 80087b4:	e646      	b.n	8008444 <_printf_float+0xbc>
 80087b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80087b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80087ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087bc:	2200      	movs	r2, #0
 80087be:	001e      	movs	r6, r3
 80087c0:	2300      	movs	r3, #0
 80087c2:	f7f7 fe41 	bl	8000448 <__aeabi_dcmpeq>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d11c      	bne.n	8008804 <_printf_float+0x47c>
 80087ca:	0033      	movs	r3, r6
 80087cc:	1c6a      	adds	r2, r5, #1
 80087ce:	3b01      	subs	r3, #1
 80087d0:	0038      	movs	r0, r7
 80087d2:	9908      	ldr	r1, [sp, #32]
 80087d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087d6:	47a8      	blx	r5
 80087d8:	3001      	adds	r0, #1
 80087da:	d10f      	bne.n	80087fc <_printf_float+0x474>
 80087dc:	e632      	b.n	8008444 <_printf_float+0xbc>
 80087de:	0022      	movs	r2, r4
 80087e0:	2301      	movs	r3, #1
 80087e2:	0038      	movs	r0, r7
 80087e4:	9908      	ldr	r1, [sp, #32]
 80087e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80087e8:	321a      	adds	r2, #26
 80087ea:	47b0      	blx	r6
 80087ec:	3001      	adds	r0, #1
 80087ee:	d100      	bne.n	80087f2 <_printf_float+0x46a>
 80087f0:	e628      	b.n	8008444 <_printf_float+0xbc>
 80087f2:	3501      	adds	r5, #1
 80087f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087f6:	3b01      	subs	r3, #1
 80087f8:	42ab      	cmp	r3, r5
 80087fa:	dcf0      	bgt.n	80087de <_printf_float+0x456>
 80087fc:	0022      	movs	r2, r4
 80087fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008800:	3250      	adds	r2, #80	; 0x50
 8008802:	e6c8      	b.n	8008596 <_printf_float+0x20e>
 8008804:	2500      	movs	r5, #0
 8008806:	e7f5      	b.n	80087f4 <_printf_float+0x46c>
 8008808:	002a      	movs	r2, r5
 800880a:	e7e1      	b.n	80087d0 <_printf_float+0x448>
 800880c:	0022      	movs	r2, r4
 800880e:	2301      	movs	r3, #1
 8008810:	0038      	movs	r0, r7
 8008812:	9908      	ldr	r1, [sp, #32]
 8008814:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008816:	3219      	adds	r2, #25
 8008818:	47b0      	blx	r6
 800881a:	3001      	adds	r0, #1
 800881c:	d100      	bne.n	8008820 <_printf_float+0x498>
 800881e:	e611      	b.n	8008444 <_printf_float+0xbc>
 8008820:	3501      	adds	r5, #1
 8008822:	68e3      	ldr	r3, [r4, #12]
 8008824:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	42ab      	cmp	r3, r5
 800882a:	dcef      	bgt.n	800880c <_printf_float+0x484>
 800882c:	e6e8      	b.n	8008600 <_printf_float+0x278>
 800882e:	2500      	movs	r5, #0
 8008830:	e7f7      	b.n	8008822 <_printf_float+0x49a>
 8008832:	46c0      	nop			; (mov r8, r8)

08008834 <_printf_common>:
 8008834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008836:	0016      	movs	r6, r2
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	688a      	ldr	r2, [r1, #8]
 800883c:	690b      	ldr	r3, [r1, #16]
 800883e:	000c      	movs	r4, r1
 8008840:	9000      	str	r0, [sp, #0]
 8008842:	4293      	cmp	r3, r2
 8008844:	da00      	bge.n	8008848 <_printf_common+0x14>
 8008846:	0013      	movs	r3, r2
 8008848:	0022      	movs	r2, r4
 800884a:	6033      	str	r3, [r6, #0]
 800884c:	3243      	adds	r2, #67	; 0x43
 800884e:	7812      	ldrb	r2, [r2, #0]
 8008850:	2a00      	cmp	r2, #0
 8008852:	d001      	beq.n	8008858 <_printf_common+0x24>
 8008854:	3301      	adds	r3, #1
 8008856:	6033      	str	r3, [r6, #0]
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	069b      	lsls	r3, r3, #26
 800885c:	d502      	bpl.n	8008864 <_printf_common+0x30>
 800885e:	6833      	ldr	r3, [r6, #0]
 8008860:	3302      	adds	r3, #2
 8008862:	6033      	str	r3, [r6, #0]
 8008864:	6822      	ldr	r2, [r4, #0]
 8008866:	2306      	movs	r3, #6
 8008868:	0015      	movs	r5, r2
 800886a:	401d      	ands	r5, r3
 800886c:	421a      	tst	r2, r3
 800886e:	d027      	beq.n	80088c0 <_printf_common+0x8c>
 8008870:	0023      	movs	r3, r4
 8008872:	3343      	adds	r3, #67	; 0x43
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	1e5a      	subs	r2, r3, #1
 8008878:	4193      	sbcs	r3, r2
 800887a:	6822      	ldr	r2, [r4, #0]
 800887c:	0692      	lsls	r2, r2, #26
 800887e:	d430      	bmi.n	80088e2 <_printf_common+0xae>
 8008880:	0022      	movs	r2, r4
 8008882:	9901      	ldr	r1, [sp, #4]
 8008884:	9800      	ldr	r0, [sp, #0]
 8008886:	9d08      	ldr	r5, [sp, #32]
 8008888:	3243      	adds	r2, #67	; 0x43
 800888a:	47a8      	blx	r5
 800888c:	3001      	adds	r0, #1
 800888e:	d025      	beq.n	80088dc <_printf_common+0xa8>
 8008890:	2206      	movs	r2, #6
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	2500      	movs	r5, #0
 8008896:	4013      	ands	r3, r2
 8008898:	2b04      	cmp	r3, #4
 800889a:	d105      	bne.n	80088a8 <_printf_common+0x74>
 800889c:	6833      	ldr	r3, [r6, #0]
 800889e:	68e5      	ldr	r5, [r4, #12]
 80088a0:	1aed      	subs	r5, r5, r3
 80088a2:	43eb      	mvns	r3, r5
 80088a4:	17db      	asrs	r3, r3, #31
 80088a6:	401d      	ands	r5, r3
 80088a8:	68a3      	ldr	r3, [r4, #8]
 80088aa:	6922      	ldr	r2, [r4, #16]
 80088ac:	4293      	cmp	r3, r2
 80088ae:	dd01      	ble.n	80088b4 <_printf_common+0x80>
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	18ed      	adds	r5, r5, r3
 80088b4:	2600      	movs	r6, #0
 80088b6:	42b5      	cmp	r5, r6
 80088b8:	d120      	bne.n	80088fc <_printf_common+0xc8>
 80088ba:	2000      	movs	r0, #0
 80088bc:	e010      	b.n	80088e0 <_printf_common+0xac>
 80088be:	3501      	adds	r5, #1
 80088c0:	68e3      	ldr	r3, [r4, #12]
 80088c2:	6832      	ldr	r2, [r6, #0]
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	42ab      	cmp	r3, r5
 80088c8:	ddd2      	ble.n	8008870 <_printf_common+0x3c>
 80088ca:	0022      	movs	r2, r4
 80088cc:	2301      	movs	r3, #1
 80088ce:	9901      	ldr	r1, [sp, #4]
 80088d0:	9800      	ldr	r0, [sp, #0]
 80088d2:	9f08      	ldr	r7, [sp, #32]
 80088d4:	3219      	adds	r2, #25
 80088d6:	47b8      	blx	r7
 80088d8:	3001      	adds	r0, #1
 80088da:	d1f0      	bne.n	80088be <_printf_common+0x8a>
 80088dc:	2001      	movs	r0, #1
 80088de:	4240      	negs	r0, r0
 80088e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088e2:	2030      	movs	r0, #48	; 0x30
 80088e4:	18e1      	adds	r1, r4, r3
 80088e6:	3143      	adds	r1, #67	; 0x43
 80088e8:	7008      	strb	r0, [r1, #0]
 80088ea:	0021      	movs	r1, r4
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	3145      	adds	r1, #69	; 0x45
 80088f0:	7809      	ldrb	r1, [r1, #0]
 80088f2:	18a2      	adds	r2, r4, r2
 80088f4:	3243      	adds	r2, #67	; 0x43
 80088f6:	3302      	adds	r3, #2
 80088f8:	7011      	strb	r1, [r2, #0]
 80088fa:	e7c1      	b.n	8008880 <_printf_common+0x4c>
 80088fc:	0022      	movs	r2, r4
 80088fe:	2301      	movs	r3, #1
 8008900:	9901      	ldr	r1, [sp, #4]
 8008902:	9800      	ldr	r0, [sp, #0]
 8008904:	9f08      	ldr	r7, [sp, #32]
 8008906:	321a      	adds	r2, #26
 8008908:	47b8      	blx	r7
 800890a:	3001      	adds	r0, #1
 800890c:	d0e6      	beq.n	80088dc <_printf_common+0xa8>
 800890e:	3601      	adds	r6, #1
 8008910:	e7d1      	b.n	80088b6 <_printf_common+0x82>
	...

08008914 <_printf_i>:
 8008914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008916:	b08b      	sub	sp, #44	; 0x2c
 8008918:	9206      	str	r2, [sp, #24]
 800891a:	000a      	movs	r2, r1
 800891c:	3243      	adds	r2, #67	; 0x43
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	9005      	str	r0, [sp, #20]
 8008922:	9204      	str	r2, [sp, #16]
 8008924:	7e0a      	ldrb	r2, [r1, #24]
 8008926:	000c      	movs	r4, r1
 8008928:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800892a:	2a78      	cmp	r2, #120	; 0x78
 800892c:	d809      	bhi.n	8008942 <_printf_i+0x2e>
 800892e:	2a62      	cmp	r2, #98	; 0x62
 8008930:	d80b      	bhi.n	800894a <_printf_i+0x36>
 8008932:	2a00      	cmp	r2, #0
 8008934:	d100      	bne.n	8008938 <_printf_i+0x24>
 8008936:	e0be      	b.n	8008ab6 <_printf_i+0x1a2>
 8008938:	497c      	ldr	r1, [pc, #496]	; (8008b2c <_printf_i+0x218>)
 800893a:	9103      	str	r1, [sp, #12]
 800893c:	2a58      	cmp	r2, #88	; 0x58
 800893e:	d100      	bne.n	8008942 <_printf_i+0x2e>
 8008940:	e093      	b.n	8008a6a <_printf_i+0x156>
 8008942:	0026      	movs	r6, r4
 8008944:	3642      	adds	r6, #66	; 0x42
 8008946:	7032      	strb	r2, [r6, #0]
 8008948:	e022      	b.n	8008990 <_printf_i+0x7c>
 800894a:	0010      	movs	r0, r2
 800894c:	3863      	subs	r0, #99	; 0x63
 800894e:	2815      	cmp	r0, #21
 8008950:	d8f7      	bhi.n	8008942 <_printf_i+0x2e>
 8008952:	f7f7 fbe9 	bl	8000128 <__gnu_thumb1_case_shi>
 8008956:	0016      	.short	0x0016
 8008958:	fff6001f 	.word	0xfff6001f
 800895c:	fff6fff6 	.word	0xfff6fff6
 8008960:	001ffff6 	.word	0x001ffff6
 8008964:	fff6fff6 	.word	0xfff6fff6
 8008968:	fff6fff6 	.word	0xfff6fff6
 800896c:	003600a3 	.word	0x003600a3
 8008970:	fff60083 	.word	0xfff60083
 8008974:	00b4fff6 	.word	0x00b4fff6
 8008978:	0036fff6 	.word	0x0036fff6
 800897c:	fff6fff6 	.word	0xfff6fff6
 8008980:	0087      	.short	0x0087
 8008982:	0026      	movs	r6, r4
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	3642      	adds	r6, #66	; 0x42
 8008988:	1d11      	adds	r1, r2, #4
 800898a:	6019      	str	r1, [r3, #0]
 800898c:	6813      	ldr	r3, [r2, #0]
 800898e:	7033      	strb	r3, [r6, #0]
 8008990:	2301      	movs	r3, #1
 8008992:	e0a2      	b.n	8008ada <_printf_i+0x1c6>
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	6809      	ldr	r1, [r1, #0]
 8008998:	1d02      	adds	r2, r0, #4
 800899a:	060d      	lsls	r5, r1, #24
 800899c:	d50b      	bpl.n	80089b6 <_printf_i+0xa2>
 800899e:	6805      	ldr	r5, [r0, #0]
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	2d00      	cmp	r5, #0
 80089a4:	da03      	bge.n	80089ae <_printf_i+0x9a>
 80089a6:	232d      	movs	r3, #45	; 0x2d
 80089a8:	9a04      	ldr	r2, [sp, #16]
 80089aa:	426d      	negs	r5, r5
 80089ac:	7013      	strb	r3, [r2, #0]
 80089ae:	4b5f      	ldr	r3, [pc, #380]	; (8008b2c <_printf_i+0x218>)
 80089b0:	270a      	movs	r7, #10
 80089b2:	9303      	str	r3, [sp, #12]
 80089b4:	e01b      	b.n	80089ee <_printf_i+0xda>
 80089b6:	6805      	ldr	r5, [r0, #0]
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	0649      	lsls	r1, r1, #25
 80089bc:	d5f1      	bpl.n	80089a2 <_printf_i+0x8e>
 80089be:	b22d      	sxth	r5, r5
 80089c0:	e7ef      	b.n	80089a2 <_printf_i+0x8e>
 80089c2:	680d      	ldr	r5, [r1, #0]
 80089c4:	6819      	ldr	r1, [r3, #0]
 80089c6:	1d08      	adds	r0, r1, #4
 80089c8:	6018      	str	r0, [r3, #0]
 80089ca:	062e      	lsls	r6, r5, #24
 80089cc:	d501      	bpl.n	80089d2 <_printf_i+0xbe>
 80089ce:	680d      	ldr	r5, [r1, #0]
 80089d0:	e003      	b.n	80089da <_printf_i+0xc6>
 80089d2:	066d      	lsls	r5, r5, #25
 80089d4:	d5fb      	bpl.n	80089ce <_printf_i+0xba>
 80089d6:	680d      	ldr	r5, [r1, #0]
 80089d8:	b2ad      	uxth	r5, r5
 80089da:	4b54      	ldr	r3, [pc, #336]	; (8008b2c <_printf_i+0x218>)
 80089dc:	2708      	movs	r7, #8
 80089de:	9303      	str	r3, [sp, #12]
 80089e0:	2a6f      	cmp	r2, #111	; 0x6f
 80089e2:	d000      	beq.n	80089e6 <_printf_i+0xd2>
 80089e4:	3702      	adds	r7, #2
 80089e6:	0023      	movs	r3, r4
 80089e8:	2200      	movs	r2, #0
 80089ea:	3343      	adds	r3, #67	; 0x43
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	6863      	ldr	r3, [r4, #4]
 80089f0:	60a3      	str	r3, [r4, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	db03      	blt.n	80089fe <_printf_i+0xea>
 80089f6:	2104      	movs	r1, #4
 80089f8:	6822      	ldr	r2, [r4, #0]
 80089fa:	438a      	bics	r2, r1
 80089fc:	6022      	str	r2, [r4, #0]
 80089fe:	2d00      	cmp	r5, #0
 8008a00:	d102      	bne.n	8008a08 <_printf_i+0xf4>
 8008a02:	9e04      	ldr	r6, [sp, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00c      	beq.n	8008a22 <_printf_i+0x10e>
 8008a08:	9e04      	ldr	r6, [sp, #16]
 8008a0a:	0028      	movs	r0, r5
 8008a0c:	0039      	movs	r1, r7
 8008a0e:	f7f7 fc1b 	bl	8000248 <__aeabi_uidivmod>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	3e01      	subs	r6, #1
 8008a16:	5c5b      	ldrb	r3, [r3, r1]
 8008a18:	7033      	strb	r3, [r6, #0]
 8008a1a:	002b      	movs	r3, r5
 8008a1c:	0005      	movs	r5, r0
 8008a1e:	429f      	cmp	r7, r3
 8008a20:	d9f3      	bls.n	8008a0a <_printf_i+0xf6>
 8008a22:	2f08      	cmp	r7, #8
 8008a24:	d109      	bne.n	8008a3a <_printf_i+0x126>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	07db      	lsls	r3, r3, #31
 8008a2a:	d506      	bpl.n	8008a3a <_printf_i+0x126>
 8008a2c:	6862      	ldr	r2, [r4, #4]
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	dc02      	bgt.n	8008a3a <_printf_i+0x126>
 8008a34:	2330      	movs	r3, #48	; 0x30
 8008a36:	3e01      	subs	r6, #1
 8008a38:	7033      	strb	r3, [r6, #0]
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	1b9b      	subs	r3, r3, r6
 8008a3e:	6123      	str	r3, [r4, #16]
 8008a40:	9b07      	ldr	r3, [sp, #28]
 8008a42:	0021      	movs	r1, r4
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	9805      	ldr	r0, [sp, #20]
 8008a48:	9b06      	ldr	r3, [sp, #24]
 8008a4a:	aa09      	add	r2, sp, #36	; 0x24
 8008a4c:	f7ff fef2 	bl	8008834 <_printf_common>
 8008a50:	3001      	adds	r0, #1
 8008a52:	d147      	bne.n	8008ae4 <_printf_i+0x1d0>
 8008a54:	2001      	movs	r0, #1
 8008a56:	4240      	negs	r0, r0
 8008a58:	b00b      	add	sp, #44	; 0x2c
 8008a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	6809      	ldr	r1, [r1, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	2278      	movs	r2, #120	; 0x78
 8008a66:	4932      	ldr	r1, [pc, #200]	; (8008b30 <_printf_i+0x21c>)
 8008a68:	9103      	str	r1, [sp, #12]
 8008a6a:	0021      	movs	r1, r4
 8008a6c:	3145      	adds	r1, #69	; 0x45
 8008a6e:	700a      	strb	r2, [r1, #0]
 8008a70:	6819      	ldr	r1, [r3, #0]
 8008a72:	6822      	ldr	r2, [r4, #0]
 8008a74:	c920      	ldmia	r1!, {r5}
 8008a76:	0610      	lsls	r0, r2, #24
 8008a78:	d402      	bmi.n	8008a80 <_printf_i+0x16c>
 8008a7a:	0650      	lsls	r0, r2, #25
 8008a7c:	d500      	bpl.n	8008a80 <_printf_i+0x16c>
 8008a7e:	b2ad      	uxth	r5, r5
 8008a80:	6019      	str	r1, [r3, #0]
 8008a82:	07d3      	lsls	r3, r2, #31
 8008a84:	d502      	bpl.n	8008a8c <_printf_i+0x178>
 8008a86:	2320      	movs	r3, #32
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	6023      	str	r3, [r4, #0]
 8008a8c:	2710      	movs	r7, #16
 8008a8e:	2d00      	cmp	r5, #0
 8008a90:	d1a9      	bne.n	80089e6 <_printf_i+0xd2>
 8008a92:	2220      	movs	r2, #32
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	4393      	bics	r3, r2
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	e7a4      	b.n	80089e6 <_printf_i+0xd2>
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	680d      	ldr	r5, [r1, #0]
 8008aa0:	1d10      	adds	r0, r2, #4
 8008aa2:	6949      	ldr	r1, [r1, #20]
 8008aa4:	6018      	str	r0, [r3, #0]
 8008aa6:	6813      	ldr	r3, [r2, #0]
 8008aa8:	062e      	lsls	r6, r5, #24
 8008aaa:	d501      	bpl.n	8008ab0 <_printf_i+0x19c>
 8008aac:	6019      	str	r1, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <_printf_i+0x1a2>
 8008ab0:	066d      	lsls	r5, r5, #25
 8008ab2:	d5fb      	bpl.n	8008aac <_printf_i+0x198>
 8008ab4:	8019      	strh	r1, [r3, #0]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9e04      	ldr	r6, [sp, #16]
 8008aba:	6123      	str	r3, [r4, #16]
 8008abc:	e7c0      	b.n	8008a40 <_printf_i+0x12c>
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	1d11      	adds	r1, r2, #4
 8008ac2:	6019      	str	r1, [r3, #0]
 8008ac4:	6816      	ldr	r6, [r2, #0]
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	0030      	movs	r0, r6
 8008aca:	6862      	ldr	r2, [r4, #4]
 8008acc:	f000 fc9d 	bl	800940a <memchr>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d001      	beq.n	8008ad8 <_printf_i+0x1c4>
 8008ad4:	1b80      	subs	r0, r0, r6
 8008ad6:	6060      	str	r0, [r4, #4]
 8008ad8:	6863      	ldr	r3, [r4, #4]
 8008ada:	6123      	str	r3, [r4, #16]
 8008adc:	2300      	movs	r3, #0
 8008ade:	9a04      	ldr	r2, [sp, #16]
 8008ae0:	7013      	strb	r3, [r2, #0]
 8008ae2:	e7ad      	b.n	8008a40 <_printf_i+0x12c>
 8008ae4:	0032      	movs	r2, r6
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	9906      	ldr	r1, [sp, #24]
 8008aea:	9805      	ldr	r0, [sp, #20]
 8008aec:	9d07      	ldr	r5, [sp, #28]
 8008aee:	47a8      	blx	r5
 8008af0:	3001      	adds	r0, #1
 8008af2:	d0af      	beq.n	8008a54 <_printf_i+0x140>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	079b      	lsls	r3, r3, #30
 8008af8:	d415      	bmi.n	8008b26 <_printf_i+0x212>
 8008afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afc:	68e0      	ldr	r0, [r4, #12]
 8008afe:	4298      	cmp	r0, r3
 8008b00:	daaa      	bge.n	8008a58 <_printf_i+0x144>
 8008b02:	0018      	movs	r0, r3
 8008b04:	e7a8      	b.n	8008a58 <_printf_i+0x144>
 8008b06:	0022      	movs	r2, r4
 8008b08:	2301      	movs	r3, #1
 8008b0a:	9906      	ldr	r1, [sp, #24]
 8008b0c:	9805      	ldr	r0, [sp, #20]
 8008b0e:	9e07      	ldr	r6, [sp, #28]
 8008b10:	3219      	adds	r2, #25
 8008b12:	47b0      	blx	r6
 8008b14:	3001      	adds	r0, #1
 8008b16:	d09d      	beq.n	8008a54 <_printf_i+0x140>
 8008b18:	3501      	adds	r5, #1
 8008b1a:	68e3      	ldr	r3, [r4, #12]
 8008b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	42ab      	cmp	r3, r5
 8008b22:	dcf0      	bgt.n	8008b06 <_printf_i+0x1f2>
 8008b24:	e7e9      	b.n	8008afa <_printf_i+0x1e6>
 8008b26:	2500      	movs	r5, #0
 8008b28:	e7f7      	b.n	8008b1a <_printf_i+0x206>
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	0800c969 	.word	0x0800c969
 8008b30:	0800c97a 	.word	0x0800c97a

08008b34 <_scanf_float>:
 8008b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b36:	b08b      	sub	sp, #44	; 0x2c
 8008b38:	0016      	movs	r6, r2
 8008b3a:	9002      	str	r0, [sp, #8]
 8008b3c:	22ae      	movs	r2, #174	; 0xae
 8008b3e:	2000      	movs	r0, #0
 8008b40:	9307      	str	r3, [sp, #28]
 8008b42:	688b      	ldr	r3, [r1, #8]
 8008b44:	000f      	movs	r7, r1
 8008b46:	1e59      	subs	r1, r3, #1
 8008b48:	0052      	lsls	r2, r2, #1
 8008b4a:	9006      	str	r0, [sp, #24]
 8008b4c:	4291      	cmp	r1, r2
 8008b4e:	d905      	bls.n	8008b5c <_scanf_float+0x28>
 8008b50:	3b5e      	subs	r3, #94	; 0x5e
 8008b52:	3bff      	subs	r3, #255	; 0xff
 8008b54:	9306      	str	r3, [sp, #24]
 8008b56:	235e      	movs	r3, #94	; 0x5e
 8008b58:	33ff      	adds	r3, #255	; 0xff
 8008b5a:	60bb      	str	r3, [r7, #8]
 8008b5c:	23f0      	movs	r3, #240	; 0xf0
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	4313      	orrs	r3, r2
 8008b64:	603b      	str	r3, [r7, #0]
 8008b66:	003b      	movs	r3, r7
 8008b68:	2400      	movs	r4, #0
 8008b6a:	331c      	adds	r3, #28
 8008b6c:	001d      	movs	r5, r3
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	9403      	str	r4, [sp, #12]
 8008b72:	9409      	str	r4, [sp, #36]	; 0x24
 8008b74:	9408      	str	r4, [sp, #32]
 8008b76:	9401      	str	r4, [sp, #4]
 8008b78:	9405      	str	r4, [sp, #20]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	d00a      	beq.n	8008b96 <_scanf_float+0x62>
 8008b80:	6833      	ldr	r3, [r6, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b4e      	cmp	r3, #78	; 0x4e
 8008b86:	d844      	bhi.n	8008c12 <_scanf_float+0xde>
 8008b88:	0018      	movs	r0, r3
 8008b8a:	2b40      	cmp	r3, #64	; 0x40
 8008b8c:	d82c      	bhi.n	8008be8 <_scanf_float+0xb4>
 8008b8e:	382b      	subs	r0, #43	; 0x2b
 8008b90:	b2c1      	uxtb	r1, r0
 8008b92:	290e      	cmp	r1, #14
 8008b94:	d92a      	bls.n	8008bec <_scanf_float+0xb8>
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <_scanf_float+0x70>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	4aa3      	ldr	r2, [pc, #652]	; (8008e2c <_scanf_float+0x2f8>)
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d900      	bls.n	8008bae <_scanf_float+0x7a>
 8008bac:	e0f9      	b.n	8008da2 <_scanf_float+0x26e>
 8008bae:	24be      	movs	r4, #190	; 0xbe
 8008bb0:	0064      	lsls	r4, r4, #1
 8008bb2:	9b04      	ldr	r3, [sp, #16]
 8008bb4:	429d      	cmp	r5, r3
 8008bb6:	d900      	bls.n	8008bba <_scanf_float+0x86>
 8008bb8:	e0e9      	b.n	8008d8e <_scanf_float+0x25a>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	e183      	b.n	8008ec8 <_scanf_float+0x394>
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	3861      	subs	r0, #97	; 0x61
 8008bc4:	280d      	cmp	r0, #13
 8008bc6:	d8e6      	bhi.n	8008b96 <_scanf_float+0x62>
 8008bc8:	f7f7 faae 	bl	8000128 <__gnu_thumb1_case_shi>
 8008bcc:	ffe50083 	.word	0xffe50083
 8008bd0:	ffe5ffe5 	.word	0xffe5ffe5
 8008bd4:	00a200b6 	.word	0x00a200b6
 8008bd8:	ffe5ffe5 	.word	0xffe5ffe5
 8008bdc:	ffe50089 	.word	0xffe50089
 8008be0:	ffe5ffe5 	.word	0xffe5ffe5
 8008be4:	0065ffe5 	.word	0x0065ffe5
 8008be8:	3841      	subs	r0, #65	; 0x41
 8008bea:	e7eb      	b.n	8008bc4 <_scanf_float+0x90>
 8008bec:	280e      	cmp	r0, #14
 8008bee:	d8d2      	bhi.n	8008b96 <_scanf_float+0x62>
 8008bf0:	f7f7 fa9a 	bl	8000128 <__gnu_thumb1_case_shi>
 8008bf4:	ffd1004b 	.word	0xffd1004b
 8008bf8:	0098004b 	.word	0x0098004b
 8008bfc:	0020ffd1 	.word	0x0020ffd1
 8008c00:	00400040 	.word	0x00400040
 8008c04:	00400040 	.word	0x00400040
 8008c08:	00400040 	.word	0x00400040
 8008c0c:	00400040 	.word	0x00400040
 8008c10:	0040      	.short	0x0040
 8008c12:	2b6e      	cmp	r3, #110	; 0x6e
 8008c14:	d809      	bhi.n	8008c2a <_scanf_float+0xf6>
 8008c16:	2b60      	cmp	r3, #96	; 0x60
 8008c18:	d8d2      	bhi.n	8008bc0 <_scanf_float+0x8c>
 8008c1a:	2b54      	cmp	r3, #84	; 0x54
 8008c1c:	d07d      	beq.n	8008d1a <_scanf_float+0x1e6>
 8008c1e:	2b59      	cmp	r3, #89	; 0x59
 8008c20:	d1b9      	bne.n	8008b96 <_scanf_float+0x62>
 8008c22:	2c07      	cmp	r4, #7
 8008c24:	d1b7      	bne.n	8008b96 <_scanf_float+0x62>
 8008c26:	2408      	movs	r4, #8
 8008c28:	e02c      	b.n	8008c84 <_scanf_float+0x150>
 8008c2a:	2b74      	cmp	r3, #116	; 0x74
 8008c2c:	d075      	beq.n	8008d1a <_scanf_float+0x1e6>
 8008c2e:	2b79      	cmp	r3, #121	; 0x79
 8008c30:	d0f7      	beq.n	8008c22 <_scanf_float+0xee>
 8008c32:	e7b0      	b.n	8008b96 <_scanf_float+0x62>
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	05c8      	lsls	r0, r1, #23
 8008c38:	d51c      	bpl.n	8008c74 <_scanf_float+0x140>
 8008c3a:	2380      	movs	r3, #128	; 0x80
 8008c3c:	4399      	bics	r1, r3
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	6039      	str	r1, [r7, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	9b06      	ldr	r3, [sp, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <_scanf_float+0x120>
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	3201      	adds	r2, #1
 8008c50:	9306      	str	r3, [sp, #24]
 8008c52:	60ba      	str	r2, [r7, #8]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	60bb      	str	r3, [r7, #8]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	6873      	ldr	r3, [r6, #4]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	6073      	str	r3, [r6, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dc00      	bgt.n	8008c6c <_scanf_float+0x138>
 8008c6a:	e086      	b.n	8008d7a <_scanf_float+0x246>
 8008c6c:	6833      	ldr	r3, [r6, #0]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	6033      	str	r3, [r6, #0]
 8008c72:	e782      	b.n	8008b7a <_scanf_float+0x46>
 8008c74:	9a03      	ldr	r2, [sp, #12]
 8008c76:	1912      	adds	r2, r2, r4
 8008c78:	2a00      	cmp	r2, #0
 8008c7a:	d18c      	bne.n	8008b96 <_scanf_float+0x62>
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	496c      	ldr	r1, [pc, #432]	; (8008e30 <_scanf_float+0x2fc>)
 8008c80:	400a      	ands	r2, r1
 8008c82:	603a      	str	r2, [r7, #0]
 8008c84:	702b      	strb	r3, [r5, #0]
 8008c86:	3501      	adds	r5, #1
 8008c88:	e7e4      	b.n	8008c54 <_scanf_float+0x120>
 8008c8a:	2180      	movs	r1, #128	; 0x80
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	420a      	tst	r2, r1
 8008c90:	d081      	beq.n	8008b96 <_scanf_float+0x62>
 8008c92:	438a      	bics	r2, r1
 8008c94:	e7f5      	b.n	8008c82 <_scanf_float+0x14e>
 8008c96:	9a03      	ldr	r2, [sp, #12]
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	d10f      	bne.n	8008cbc <_scanf_float+0x188>
 8008c9c:	9a01      	ldr	r2, [sp, #4]
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	d10f      	bne.n	8008cc2 <_scanf_float+0x18e>
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	21e0      	movs	r1, #224	; 0xe0
 8008ca6:	0010      	movs	r0, r2
 8008ca8:	00c9      	lsls	r1, r1, #3
 8008caa:	4008      	ands	r0, r1
 8008cac:	4288      	cmp	r0, r1
 8008cae:	d108      	bne.n	8008cc2 <_scanf_float+0x18e>
 8008cb0:	4960      	ldr	r1, [pc, #384]	; (8008e34 <_scanf_float+0x300>)
 8008cb2:	400a      	ands	r2, r1
 8008cb4:	603a      	str	r2, [r7, #0]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	9203      	str	r2, [sp, #12]
 8008cba:	e7e3      	b.n	8008c84 <_scanf_float+0x150>
 8008cbc:	9a03      	ldr	r2, [sp, #12]
 8008cbe:	2a02      	cmp	r2, #2
 8008cc0:	d059      	beq.n	8008d76 <_scanf_float+0x242>
 8008cc2:	2c01      	cmp	r4, #1
 8008cc4:	d002      	beq.n	8008ccc <_scanf_float+0x198>
 8008cc6:	2c04      	cmp	r4, #4
 8008cc8:	d000      	beq.n	8008ccc <_scanf_float+0x198>
 8008cca:	e764      	b.n	8008b96 <_scanf_float+0x62>
 8008ccc:	3401      	adds	r4, #1
 8008cce:	b2e4      	uxtb	r4, r4
 8008cd0:	e7d8      	b.n	8008c84 <_scanf_float+0x150>
 8008cd2:	9a03      	ldr	r2, [sp, #12]
 8008cd4:	2a01      	cmp	r2, #1
 8008cd6:	d000      	beq.n	8008cda <_scanf_float+0x1a6>
 8008cd8:	e75d      	b.n	8008b96 <_scanf_float+0x62>
 8008cda:	2202      	movs	r2, #2
 8008cdc:	e7ec      	b.n	8008cb8 <_scanf_float+0x184>
 8008cde:	2c00      	cmp	r4, #0
 8008ce0:	d110      	bne.n	8008d04 <_scanf_float+0x1d0>
 8008ce2:	9a01      	ldr	r2, [sp, #4]
 8008ce4:	2a00      	cmp	r2, #0
 8008ce6:	d000      	beq.n	8008cea <_scanf_float+0x1b6>
 8008ce8:	e758      	b.n	8008b9c <_scanf_float+0x68>
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	21e0      	movs	r1, #224	; 0xe0
 8008cee:	0010      	movs	r0, r2
 8008cf0:	00c9      	lsls	r1, r1, #3
 8008cf2:	4008      	ands	r0, r1
 8008cf4:	4288      	cmp	r0, r1
 8008cf6:	d000      	beq.n	8008cfa <_scanf_float+0x1c6>
 8008cf8:	e754      	b.n	8008ba4 <_scanf_float+0x70>
 8008cfa:	494e      	ldr	r1, [pc, #312]	; (8008e34 <_scanf_float+0x300>)
 8008cfc:	3401      	adds	r4, #1
 8008cfe:	400a      	ands	r2, r1
 8008d00:	603a      	str	r2, [r7, #0]
 8008d02:	e7bf      	b.n	8008c84 <_scanf_float+0x150>
 8008d04:	21fd      	movs	r1, #253	; 0xfd
 8008d06:	1ee2      	subs	r2, r4, #3
 8008d08:	420a      	tst	r2, r1
 8008d0a:	d000      	beq.n	8008d0e <_scanf_float+0x1da>
 8008d0c:	e743      	b.n	8008b96 <_scanf_float+0x62>
 8008d0e:	e7dd      	b.n	8008ccc <_scanf_float+0x198>
 8008d10:	2c02      	cmp	r4, #2
 8008d12:	d000      	beq.n	8008d16 <_scanf_float+0x1e2>
 8008d14:	e73f      	b.n	8008b96 <_scanf_float+0x62>
 8008d16:	2403      	movs	r4, #3
 8008d18:	e7b4      	b.n	8008c84 <_scanf_float+0x150>
 8008d1a:	2c06      	cmp	r4, #6
 8008d1c:	d000      	beq.n	8008d20 <_scanf_float+0x1ec>
 8008d1e:	e73a      	b.n	8008b96 <_scanf_float+0x62>
 8008d20:	2407      	movs	r4, #7
 8008d22:	e7af      	b.n	8008c84 <_scanf_float+0x150>
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	0591      	lsls	r1, r2, #22
 8008d28:	d400      	bmi.n	8008d2c <_scanf_float+0x1f8>
 8008d2a:	e734      	b.n	8008b96 <_scanf_float+0x62>
 8008d2c:	4942      	ldr	r1, [pc, #264]	; (8008e38 <_scanf_float+0x304>)
 8008d2e:	400a      	ands	r2, r1
 8008d30:	603a      	str	r2, [r7, #0]
 8008d32:	9a01      	ldr	r2, [sp, #4]
 8008d34:	9205      	str	r2, [sp, #20]
 8008d36:	e7a5      	b.n	8008c84 <_scanf_float+0x150>
 8008d38:	21a0      	movs	r1, #160	; 0xa0
 8008d3a:	2080      	movs	r0, #128	; 0x80
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	00c9      	lsls	r1, r1, #3
 8008d40:	4011      	ands	r1, r2
 8008d42:	00c0      	lsls	r0, r0, #3
 8008d44:	4281      	cmp	r1, r0
 8008d46:	d006      	beq.n	8008d56 <_scanf_float+0x222>
 8008d48:	4202      	tst	r2, r0
 8008d4a:	d100      	bne.n	8008d4e <_scanf_float+0x21a>
 8008d4c:	e723      	b.n	8008b96 <_scanf_float+0x62>
 8008d4e:	9901      	ldr	r1, [sp, #4]
 8008d50:	2900      	cmp	r1, #0
 8008d52:	d100      	bne.n	8008d56 <_scanf_float+0x222>
 8008d54:	e726      	b.n	8008ba4 <_scanf_float+0x70>
 8008d56:	0591      	lsls	r1, r2, #22
 8008d58:	d404      	bmi.n	8008d64 <_scanf_float+0x230>
 8008d5a:	9901      	ldr	r1, [sp, #4]
 8008d5c:	9805      	ldr	r0, [sp, #20]
 8008d5e:	9509      	str	r5, [sp, #36]	; 0x24
 8008d60:	1a09      	subs	r1, r1, r0
 8008d62:	9108      	str	r1, [sp, #32]
 8008d64:	4933      	ldr	r1, [pc, #204]	; (8008e34 <_scanf_float+0x300>)
 8008d66:	400a      	ands	r2, r1
 8008d68:	21c0      	movs	r1, #192	; 0xc0
 8008d6a:	0049      	lsls	r1, r1, #1
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	603a      	str	r2, [r7, #0]
 8008d70:	2200      	movs	r2, #0
 8008d72:	9201      	str	r2, [sp, #4]
 8008d74:	e786      	b.n	8008c84 <_scanf_float+0x150>
 8008d76:	2203      	movs	r2, #3
 8008d78:	e79e      	b.n	8008cb8 <_scanf_float+0x184>
 8008d7a:	23c0      	movs	r3, #192	; 0xc0
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	0031      	movs	r1, r6
 8008d80:	58fb      	ldr	r3, [r7, r3]
 8008d82:	9802      	ldr	r0, [sp, #8]
 8008d84:	4798      	blx	r3
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d100      	bne.n	8008d8c <_scanf_float+0x258>
 8008d8a:	e6f6      	b.n	8008b7a <_scanf_float+0x46>
 8008d8c:	e703      	b.n	8008b96 <_scanf_float+0x62>
 8008d8e:	3d01      	subs	r5, #1
 8008d90:	593b      	ldr	r3, [r7, r4]
 8008d92:	0032      	movs	r2, r6
 8008d94:	7829      	ldrb	r1, [r5, #0]
 8008d96:	9802      	ldr	r0, [sp, #8]
 8008d98:	4798      	blx	r3
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	613b      	str	r3, [r7, #16]
 8008da0:	e707      	b.n	8008bb2 <_scanf_float+0x7e>
 8008da2:	1e63      	subs	r3, r4, #1
 8008da4:	2b06      	cmp	r3, #6
 8008da6:	d80e      	bhi.n	8008dc6 <_scanf_float+0x292>
 8008da8:	9503      	str	r5, [sp, #12]
 8008daa:	2c02      	cmp	r4, #2
 8008dac:	d920      	bls.n	8008df0 <_scanf_float+0x2bc>
 8008dae:	1b63      	subs	r3, r4, r5
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	9306      	str	r3, [sp, #24]
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	9a06      	ldr	r2, [sp, #24]
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d827      	bhi.n	8008e10 <_scanf_float+0x2dc>
 8008dc0:	3c03      	subs	r4, #3
 8008dc2:	b2e4      	uxtb	r4, r4
 8008dc4:	1b2d      	subs	r5, r5, r4
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	05da      	lsls	r2, r3, #23
 8008dca:	d552      	bpl.n	8008e72 <_scanf_float+0x33e>
 8008dcc:	055b      	lsls	r3, r3, #21
 8008dce:	d535      	bpl.n	8008e3c <_scanf_float+0x308>
 8008dd0:	24be      	movs	r4, #190	; 0xbe
 8008dd2:	0064      	lsls	r4, r4, #1
 8008dd4:	9b04      	ldr	r3, [sp, #16]
 8008dd6:	429d      	cmp	r5, r3
 8008dd8:	d800      	bhi.n	8008ddc <_scanf_float+0x2a8>
 8008dda:	e6ee      	b.n	8008bba <_scanf_float+0x86>
 8008ddc:	3d01      	subs	r5, #1
 8008dde:	593b      	ldr	r3, [r7, r4]
 8008de0:	0032      	movs	r2, r6
 8008de2:	7829      	ldrb	r1, [r5, #0]
 8008de4:	9802      	ldr	r0, [sp, #8]
 8008de6:	4798      	blx	r3
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	613b      	str	r3, [r7, #16]
 8008dee:	e7f1      	b.n	8008dd4 <_scanf_float+0x2a0>
 8008df0:	24be      	movs	r4, #190	; 0xbe
 8008df2:	0064      	lsls	r4, r4, #1
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	429d      	cmp	r5, r3
 8008df8:	d800      	bhi.n	8008dfc <_scanf_float+0x2c8>
 8008dfa:	e6de      	b.n	8008bba <_scanf_float+0x86>
 8008dfc:	3d01      	subs	r5, #1
 8008dfe:	593b      	ldr	r3, [r7, r4]
 8008e00:	0032      	movs	r2, r6
 8008e02:	7829      	ldrb	r1, [r5, #0]
 8008e04:	9802      	ldr	r0, [sp, #8]
 8008e06:	4798      	blx	r3
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	e7f1      	b.n	8008df4 <_scanf_float+0x2c0>
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	0032      	movs	r2, r6
 8008e14:	3b01      	subs	r3, #1
 8008e16:	7819      	ldrb	r1, [r3, #0]
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	23be      	movs	r3, #190	; 0xbe
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	58fb      	ldr	r3, [r7, r3]
 8008e20:	9802      	ldr	r0, [sp, #8]
 8008e22:	4798      	blx	r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	613b      	str	r3, [r7, #16]
 8008e2a:	e7c3      	b.n	8008db4 <_scanf_float+0x280>
 8008e2c:	fffffeff 	.word	0xfffffeff
 8008e30:	fffffe7f 	.word	0xfffffe7f
 8008e34:	fffff87f 	.word	0xfffff87f
 8008e38:	fffffd7f 	.word	0xfffffd7f
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	1e6c      	subs	r4, r5, #1
 8008e40:	7821      	ldrb	r1, [r4, #0]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	613b      	str	r3, [r7, #16]
 8008e46:	2965      	cmp	r1, #101	; 0x65
 8008e48:	d00c      	beq.n	8008e64 <_scanf_float+0x330>
 8008e4a:	2945      	cmp	r1, #69	; 0x45
 8008e4c:	d00a      	beq.n	8008e64 <_scanf_float+0x330>
 8008e4e:	23be      	movs	r3, #190	; 0xbe
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	58fb      	ldr	r3, [r7, r3]
 8008e54:	0032      	movs	r2, r6
 8008e56:	9802      	ldr	r0, [sp, #8]
 8008e58:	4798      	blx	r3
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	1eac      	subs	r4, r5, #2
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	7821      	ldrb	r1, [r4, #0]
 8008e62:	613b      	str	r3, [r7, #16]
 8008e64:	23be      	movs	r3, #190	; 0xbe
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	0032      	movs	r2, r6
 8008e6a:	58fb      	ldr	r3, [r7, r3]
 8008e6c:	9802      	ldr	r0, [sp, #8]
 8008e6e:	4798      	blx	r3
 8008e70:	0025      	movs	r5, r4
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	2310      	movs	r3, #16
 8008e76:	0011      	movs	r1, r2
 8008e78:	4019      	ands	r1, r3
 8008e7a:	9103      	str	r1, [sp, #12]
 8008e7c:	421a      	tst	r2, r3
 8008e7e:	d15b      	bne.n	8008f38 <_scanf_float+0x404>
 8008e80:	22c0      	movs	r2, #192	; 0xc0
 8008e82:	7029      	strb	r1, [r5, #0]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	00d2      	lsls	r2, r2, #3
 8008e88:	4013      	ands	r3, r2
 8008e8a:	2280      	movs	r2, #128	; 0x80
 8008e8c:	00d2      	lsls	r2, r2, #3
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d11d      	bne.n	8008ece <_scanf_float+0x39a>
 8008e92:	9b05      	ldr	r3, [sp, #20]
 8008e94:	9a01      	ldr	r2, [sp, #4]
 8008e96:	9901      	ldr	r1, [sp, #4]
 8008e98:	1a9a      	subs	r2, r3, r2
 8008e9a:	428b      	cmp	r3, r1
 8008e9c:	d124      	bne.n	8008ee8 <_scanf_float+0x3b4>
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	9904      	ldr	r1, [sp, #16]
 8008ea2:	9802      	ldr	r0, [sp, #8]
 8008ea4:	f7ff f91c 	bl	80080e0 <_strtod_r>
 8008ea8:	9b07      	ldr	r3, [sp, #28]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	0004      	movs	r4, r0
 8008eae:	000d      	movs	r5, r1
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	0791      	lsls	r1, r2, #30
 8008eb4:	d525      	bpl.n	8008f02 <_scanf_float+0x3ce>
 8008eb6:	9907      	ldr	r1, [sp, #28]
 8008eb8:	1d1a      	adds	r2, r3, #4
 8008eba:	600a      	str	r2, [r1, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	601c      	str	r4, [r3, #0]
 8008ec0:	605d      	str	r5, [r3, #4]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	9803      	ldr	r0, [sp, #12]
 8008eca:	b00b      	add	sp, #44	; 0x2c
 8008ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ece:	9b08      	ldr	r3, [sp, #32]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0e4      	beq.n	8008e9e <_scanf_float+0x36a>
 8008ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed6:	9a03      	ldr	r2, [sp, #12]
 8008ed8:	1c59      	adds	r1, r3, #1
 8008eda:	9802      	ldr	r0, [sp, #8]
 8008edc:	230a      	movs	r3, #10
 8008ede:	f7ff f99b 	bl	8008218 <_strtol_r>
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ee6:	1ac2      	subs	r2, r0, r3
 8008ee8:	003b      	movs	r3, r7
 8008eea:	3370      	adds	r3, #112	; 0x70
 8008eec:	33ff      	adds	r3, #255	; 0xff
 8008eee:	429d      	cmp	r5, r3
 8008ef0:	d302      	bcc.n	8008ef8 <_scanf_float+0x3c4>
 8008ef2:	003d      	movs	r5, r7
 8008ef4:	356f      	adds	r5, #111	; 0x6f
 8008ef6:	35ff      	adds	r5, #255	; 0xff
 8008ef8:	0028      	movs	r0, r5
 8008efa:	4910      	ldr	r1, [pc, #64]	; (8008f3c <_scanf_float+0x408>)
 8008efc:	f000 f91a 	bl	8009134 <siprintf>
 8008f00:	e7cd      	b.n	8008e9e <_scanf_float+0x36a>
 8008f02:	1d19      	adds	r1, r3, #4
 8008f04:	0752      	lsls	r2, r2, #29
 8008f06:	d502      	bpl.n	8008f0e <_scanf_float+0x3da>
 8008f08:	9a07      	ldr	r2, [sp, #28]
 8008f0a:	6011      	str	r1, [r2, #0]
 8008f0c:	e7d6      	b.n	8008ebc <_scanf_float+0x388>
 8008f0e:	9a07      	ldr	r2, [sp, #28]
 8008f10:	0020      	movs	r0, r4
 8008f12:	6011      	str	r1, [r2, #0]
 8008f14:	681e      	ldr	r6, [r3, #0]
 8008f16:	0022      	movs	r2, r4
 8008f18:	002b      	movs	r3, r5
 8008f1a:	0029      	movs	r1, r5
 8008f1c:	f7f9 f9bc 	bl	8002298 <__aeabi_dcmpun>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d004      	beq.n	8008f2e <_scanf_float+0x3fa>
 8008f24:	4806      	ldr	r0, [pc, #24]	; (8008f40 <_scanf_float+0x40c>)
 8008f26:	f000 fa8b 	bl	8009440 <nanf>
 8008f2a:	6030      	str	r0, [r6, #0]
 8008f2c:	e7c9      	b.n	8008ec2 <_scanf_float+0x38e>
 8008f2e:	0020      	movs	r0, r4
 8008f30:	0029      	movs	r1, r5
 8008f32:	f7f9 fa5b 	bl	80023ec <__aeabi_d2f>
 8008f36:	e7f8      	b.n	8008f2a <_scanf_float+0x3f6>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e63f      	b.n	8008bbc <_scanf_float+0x88>
 8008f3c:	0800c98b 	.word	0x0800c98b
 8008f40:	0800cc43 	.word	0x0800cc43

08008f44 <std>:
 8008f44:	2300      	movs	r3, #0
 8008f46:	b510      	push	{r4, lr}
 8008f48:	0004      	movs	r4, r0
 8008f4a:	6003      	str	r3, [r0, #0]
 8008f4c:	6043      	str	r3, [r0, #4]
 8008f4e:	6083      	str	r3, [r0, #8]
 8008f50:	8181      	strh	r1, [r0, #12]
 8008f52:	6643      	str	r3, [r0, #100]	; 0x64
 8008f54:	81c2      	strh	r2, [r0, #14]
 8008f56:	6103      	str	r3, [r0, #16]
 8008f58:	6143      	str	r3, [r0, #20]
 8008f5a:	6183      	str	r3, [r0, #24]
 8008f5c:	0019      	movs	r1, r3
 8008f5e:	2208      	movs	r2, #8
 8008f60:	305c      	adds	r0, #92	; 0x5c
 8008f62:	f000 f97d 	bl	8009260 <memset>
 8008f66:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <std+0x50>)
 8008f68:	6224      	str	r4, [r4, #32]
 8008f6a:	6263      	str	r3, [r4, #36]	; 0x24
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <std+0x54>)
 8008f6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f70:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <std+0x58>)
 8008f72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <std+0x5c>)
 8008f76:	6323      	str	r3, [r4, #48]	; 0x30
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <std+0x60>)
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d005      	beq.n	8008f8a <std+0x46>
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <std+0x64>)
 8008f80:	429c      	cmp	r4, r3
 8008f82:	d002      	beq.n	8008f8a <std+0x46>
 8008f84:	4b09      	ldr	r3, [pc, #36]	; (8008fac <std+0x68>)
 8008f86:	429c      	cmp	r4, r3
 8008f88:	d103      	bne.n	8008f92 <std+0x4e>
 8008f8a:	0020      	movs	r0, r4
 8008f8c:	3058      	adds	r0, #88	; 0x58
 8008f8e:	f000 fa39 	bl	8009404 <__retarget_lock_init_recursive>
 8008f92:	bd10      	pop	{r4, pc}
 8008f94:	080091c5 	.word	0x080091c5
 8008f98:	080091f1 	.word	0x080091f1
 8008f9c:	08009229 	.word	0x08009229
 8008fa0:	08009255 	.word	0x08009255
 8008fa4:	2000066c 	.word	0x2000066c
 8008fa8:	200006d4 	.word	0x200006d4
 8008fac:	2000073c 	.word	0x2000073c

08008fb0 <stdio_exit_handler>:
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	4a03      	ldr	r2, [pc, #12]	; (8008fc0 <stdio_exit_handler+0x10>)
 8008fb4:	4903      	ldr	r1, [pc, #12]	; (8008fc4 <stdio_exit_handler+0x14>)
 8008fb6:	4804      	ldr	r0, [pc, #16]	; (8008fc8 <stdio_exit_handler+0x18>)
 8008fb8:	f000 f86c 	bl	8009094 <_fwalk_sglue>
 8008fbc:	bd10      	pop	{r4, pc}
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	2000001c 	.word	0x2000001c
 8008fc4:	0800bcad 	.word	0x0800bcad
 8008fc8:	20000194 	.word	0x20000194

08008fcc <cleanup_stdio>:
 8008fcc:	6841      	ldr	r1, [r0, #4]
 8008fce:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <cleanup_stdio+0x30>)
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	0004      	movs	r4, r0
 8008fd4:	4299      	cmp	r1, r3
 8008fd6:	d001      	beq.n	8008fdc <cleanup_stdio+0x10>
 8008fd8:	f002 fe68 	bl	800bcac <_fflush_r>
 8008fdc:	68a1      	ldr	r1, [r4, #8]
 8008fde:	4b08      	ldr	r3, [pc, #32]	; (8009000 <cleanup_stdio+0x34>)
 8008fe0:	4299      	cmp	r1, r3
 8008fe2:	d002      	beq.n	8008fea <cleanup_stdio+0x1e>
 8008fe4:	0020      	movs	r0, r4
 8008fe6:	f002 fe61 	bl	800bcac <_fflush_r>
 8008fea:	68e1      	ldr	r1, [r4, #12]
 8008fec:	4b05      	ldr	r3, [pc, #20]	; (8009004 <cleanup_stdio+0x38>)
 8008fee:	4299      	cmp	r1, r3
 8008ff0:	d002      	beq.n	8008ff8 <cleanup_stdio+0x2c>
 8008ff2:	0020      	movs	r0, r4
 8008ff4:	f002 fe5a 	bl	800bcac <_fflush_r>
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	46c0      	nop			; (mov r8, r8)
 8008ffc:	2000066c 	.word	0x2000066c
 8009000:	200006d4 	.word	0x200006d4
 8009004:	2000073c 	.word	0x2000073c

08009008 <global_stdio_init.part.0>:
 8009008:	b510      	push	{r4, lr}
 800900a:	4b09      	ldr	r3, [pc, #36]	; (8009030 <global_stdio_init.part.0+0x28>)
 800900c:	4a09      	ldr	r2, [pc, #36]	; (8009034 <global_stdio_init.part.0+0x2c>)
 800900e:	2104      	movs	r1, #4
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	4809      	ldr	r0, [pc, #36]	; (8009038 <global_stdio_init.part.0+0x30>)
 8009014:	2200      	movs	r2, #0
 8009016:	f7ff ff95 	bl	8008f44 <std>
 800901a:	2201      	movs	r2, #1
 800901c:	2109      	movs	r1, #9
 800901e:	4807      	ldr	r0, [pc, #28]	; (800903c <global_stdio_init.part.0+0x34>)
 8009020:	f7ff ff90 	bl	8008f44 <std>
 8009024:	2202      	movs	r2, #2
 8009026:	2112      	movs	r1, #18
 8009028:	4805      	ldr	r0, [pc, #20]	; (8009040 <global_stdio_init.part.0+0x38>)
 800902a:	f7ff ff8b 	bl	8008f44 <std>
 800902e:	bd10      	pop	{r4, pc}
 8009030:	200007a4 	.word	0x200007a4
 8009034:	08008fb1 	.word	0x08008fb1
 8009038:	2000066c 	.word	0x2000066c
 800903c:	200006d4 	.word	0x200006d4
 8009040:	2000073c 	.word	0x2000073c

08009044 <__sfp_lock_acquire>:
 8009044:	b510      	push	{r4, lr}
 8009046:	4802      	ldr	r0, [pc, #8]	; (8009050 <__sfp_lock_acquire+0xc>)
 8009048:	f000 f9dd 	bl	8009406 <__retarget_lock_acquire_recursive>
 800904c:	bd10      	pop	{r4, pc}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	200007ad 	.word	0x200007ad

08009054 <__sfp_lock_release>:
 8009054:	b510      	push	{r4, lr}
 8009056:	4802      	ldr	r0, [pc, #8]	; (8009060 <__sfp_lock_release+0xc>)
 8009058:	f000 f9d6 	bl	8009408 <__retarget_lock_release_recursive>
 800905c:	bd10      	pop	{r4, pc}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	200007ad 	.word	0x200007ad

08009064 <__sinit>:
 8009064:	b510      	push	{r4, lr}
 8009066:	0004      	movs	r4, r0
 8009068:	f7ff ffec 	bl	8009044 <__sfp_lock_acquire>
 800906c:	6a23      	ldr	r3, [r4, #32]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <__sinit+0x14>
 8009072:	f7ff ffef 	bl	8009054 <__sfp_lock_release>
 8009076:	bd10      	pop	{r4, pc}
 8009078:	4b04      	ldr	r3, [pc, #16]	; (800908c <__sinit+0x28>)
 800907a:	6223      	str	r3, [r4, #32]
 800907c:	4b04      	ldr	r3, [pc, #16]	; (8009090 <__sinit+0x2c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1f6      	bne.n	8009072 <__sinit+0xe>
 8009084:	f7ff ffc0 	bl	8009008 <global_stdio_init.part.0>
 8009088:	e7f3      	b.n	8009072 <__sinit+0xe>
 800908a:	46c0      	nop			; (mov r8, r8)
 800908c:	08008fcd 	.word	0x08008fcd
 8009090:	200007a4 	.word	0x200007a4

08009094 <_fwalk_sglue>:
 8009094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009096:	0014      	movs	r4, r2
 8009098:	2600      	movs	r6, #0
 800909a:	9000      	str	r0, [sp, #0]
 800909c:	9101      	str	r1, [sp, #4]
 800909e:	68a5      	ldr	r5, [r4, #8]
 80090a0:	6867      	ldr	r7, [r4, #4]
 80090a2:	3f01      	subs	r7, #1
 80090a4:	d504      	bpl.n	80090b0 <_fwalk_sglue+0x1c>
 80090a6:	6824      	ldr	r4, [r4, #0]
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	d1f8      	bne.n	800909e <_fwalk_sglue+0xa>
 80090ac:	0030      	movs	r0, r6
 80090ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090b0:	89ab      	ldrh	r3, [r5, #12]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d908      	bls.n	80090c8 <_fwalk_sglue+0x34>
 80090b6:	220e      	movs	r2, #14
 80090b8:	5eab      	ldrsh	r3, [r5, r2]
 80090ba:	3301      	adds	r3, #1
 80090bc:	d004      	beq.n	80090c8 <_fwalk_sglue+0x34>
 80090be:	0029      	movs	r1, r5
 80090c0:	9800      	ldr	r0, [sp, #0]
 80090c2:	9b01      	ldr	r3, [sp, #4]
 80090c4:	4798      	blx	r3
 80090c6:	4306      	orrs	r6, r0
 80090c8:	3568      	adds	r5, #104	; 0x68
 80090ca:	e7ea      	b.n	80090a2 <_fwalk_sglue+0xe>

080090cc <sniprintf>:
 80090cc:	b40c      	push	{r2, r3}
 80090ce:	b530      	push	{r4, r5, lr}
 80090d0:	4b17      	ldr	r3, [pc, #92]	; (8009130 <sniprintf+0x64>)
 80090d2:	000c      	movs	r4, r1
 80090d4:	681d      	ldr	r5, [r3, #0]
 80090d6:	b09d      	sub	sp, #116	; 0x74
 80090d8:	2900      	cmp	r1, #0
 80090da:	da08      	bge.n	80090ee <sniprintf+0x22>
 80090dc:	238b      	movs	r3, #139	; 0x8b
 80090de:	2001      	movs	r0, #1
 80090e0:	602b      	str	r3, [r5, #0]
 80090e2:	4240      	negs	r0, r0
 80090e4:	b01d      	add	sp, #116	; 0x74
 80090e6:	bc30      	pop	{r4, r5}
 80090e8:	bc08      	pop	{r3}
 80090ea:	b002      	add	sp, #8
 80090ec:	4718      	bx	r3
 80090ee:	2382      	movs	r3, #130	; 0x82
 80090f0:	466a      	mov	r2, sp
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	8293      	strh	r3, [r2, #20]
 80090f6:	2300      	movs	r3, #0
 80090f8:	9002      	str	r0, [sp, #8]
 80090fa:	9006      	str	r0, [sp, #24]
 80090fc:	4299      	cmp	r1, r3
 80090fe:	d000      	beq.n	8009102 <sniprintf+0x36>
 8009100:	1e4b      	subs	r3, r1, #1
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	9307      	str	r3, [sp, #28]
 8009106:	2301      	movs	r3, #1
 8009108:	466a      	mov	r2, sp
 800910a:	425b      	negs	r3, r3
 800910c:	82d3      	strh	r3, [r2, #22]
 800910e:	0028      	movs	r0, r5
 8009110:	ab21      	add	r3, sp, #132	; 0x84
 8009112:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009114:	a902      	add	r1, sp, #8
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	f002 f916 	bl	800b348 <_svfiprintf_r>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	da01      	bge.n	8009124 <sniprintf+0x58>
 8009120:	238b      	movs	r3, #139	; 0x8b
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	2c00      	cmp	r4, #0
 8009126:	d0dd      	beq.n	80090e4 <sniprintf+0x18>
 8009128:	2200      	movs	r2, #0
 800912a:	9b02      	ldr	r3, [sp, #8]
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	e7d9      	b.n	80090e4 <sniprintf+0x18>
 8009130:	200001e0 	.word	0x200001e0

08009134 <siprintf>:
 8009134:	b40e      	push	{r1, r2, r3}
 8009136:	b500      	push	{lr}
 8009138:	490b      	ldr	r1, [pc, #44]	; (8009168 <siprintf+0x34>)
 800913a:	b09c      	sub	sp, #112	; 0x70
 800913c:	ab1d      	add	r3, sp, #116	; 0x74
 800913e:	9002      	str	r0, [sp, #8]
 8009140:	9006      	str	r0, [sp, #24]
 8009142:	9107      	str	r1, [sp, #28]
 8009144:	9104      	str	r1, [sp, #16]
 8009146:	4809      	ldr	r0, [pc, #36]	; (800916c <siprintf+0x38>)
 8009148:	4909      	ldr	r1, [pc, #36]	; (8009170 <siprintf+0x3c>)
 800914a:	cb04      	ldmia	r3!, {r2}
 800914c:	9105      	str	r1, [sp, #20]
 800914e:	6800      	ldr	r0, [r0, #0]
 8009150:	a902      	add	r1, sp, #8
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	f002 f8f8 	bl	800b348 <_svfiprintf_r>
 8009158:	2200      	movs	r2, #0
 800915a:	9b02      	ldr	r3, [sp, #8]
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	b01c      	add	sp, #112	; 0x70
 8009160:	bc08      	pop	{r3}
 8009162:	b003      	add	sp, #12
 8009164:	4718      	bx	r3
 8009166:	46c0      	nop			; (mov r8, r8)
 8009168:	7fffffff 	.word	0x7fffffff
 800916c:	200001e0 	.word	0x200001e0
 8009170:	ffff0208 	.word	0xffff0208

08009174 <siscanf>:
 8009174:	b40e      	push	{r1, r2, r3}
 8009176:	b530      	push	{r4, r5, lr}
 8009178:	2381      	movs	r3, #129	; 0x81
 800917a:	b09c      	sub	sp, #112	; 0x70
 800917c:	466a      	mov	r2, sp
 800917e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	cc20      	ldmia	r4!, {r5}
 8009184:	8293      	strh	r3, [r2, #20]
 8009186:	9002      	str	r0, [sp, #8]
 8009188:	9006      	str	r0, [sp, #24]
 800918a:	f7f6 ffbb 	bl	8000104 <strlen>
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <siscanf+0x48>)
 8009190:	466a      	mov	r2, sp
 8009192:	930b      	str	r3, [sp, #44]	; 0x2c
 8009194:	2300      	movs	r3, #0
 8009196:	9003      	str	r0, [sp, #12]
 8009198:	9007      	str	r0, [sp, #28]
 800919a:	4809      	ldr	r0, [pc, #36]	; (80091c0 <siscanf+0x4c>)
 800919c:	930f      	str	r3, [sp, #60]	; 0x3c
 800919e:	9314      	str	r3, [sp, #80]	; 0x50
 80091a0:	3b01      	subs	r3, #1
 80091a2:	82d3      	strh	r3, [r2, #22]
 80091a4:	a902      	add	r1, sp, #8
 80091a6:	0023      	movs	r3, r4
 80091a8:	002a      	movs	r2, r5
 80091aa:	6800      	ldr	r0, [r0, #0]
 80091ac:	9401      	str	r4, [sp, #4]
 80091ae:	f002 fa27 	bl	800b600 <__ssvfiscanf_r>
 80091b2:	b01c      	add	sp, #112	; 0x70
 80091b4:	bc30      	pop	{r4, r5}
 80091b6:	bc08      	pop	{r3}
 80091b8:	b003      	add	sp, #12
 80091ba:	4718      	bx	r3
 80091bc:	080091ed 	.word	0x080091ed
 80091c0:	200001e0 	.word	0x200001e0

080091c4 <__sread>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	000c      	movs	r4, r1
 80091c8:	250e      	movs	r5, #14
 80091ca:	5f49      	ldrsh	r1, [r1, r5]
 80091cc:	f000 f8b6 	bl	800933c <_read_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	db03      	blt.n	80091dc <__sread+0x18>
 80091d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80091d6:	181b      	adds	r3, r3, r0
 80091d8:	6563      	str	r3, [r4, #84]	; 0x54
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	4a02      	ldr	r2, [pc, #8]	; (80091e8 <__sread+0x24>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	e7f9      	b.n	80091da <__sread+0x16>
 80091e6:	46c0      	nop			; (mov r8, r8)
 80091e8:	ffffefff 	.word	0xffffefff

080091ec <__seofread>:
 80091ec:	2000      	movs	r0, #0
 80091ee:	4770      	bx	lr

080091f0 <__swrite>:
 80091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f2:	001f      	movs	r7, r3
 80091f4:	898b      	ldrh	r3, [r1, #12]
 80091f6:	0005      	movs	r5, r0
 80091f8:	000c      	movs	r4, r1
 80091fa:	0016      	movs	r6, r2
 80091fc:	05db      	lsls	r3, r3, #23
 80091fe:	d505      	bpl.n	800920c <__swrite+0x1c>
 8009200:	230e      	movs	r3, #14
 8009202:	5ec9      	ldrsh	r1, [r1, r3]
 8009204:	2200      	movs	r2, #0
 8009206:	2302      	movs	r3, #2
 8009208:	f000 f884 	bl	8009314 <_lseek_r>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	4a05      	ldr	r2, [pc, #20]	; (8009224 <__swrite+0x34>)
 8009210:	0028      	movs	r0, r5
 8009212:	4013      	ands	r3, r2
 8009214:	81a3      	strh	r3, [r4, #12]
 8009216:	0032      	movs	r2, r6
 8009218:	230e      	movs	r3, #14
 800921a:	5ee1      	ldrsh	r1, [r4, r3]
 800921c:	003b      	movs	r3, r7
 800921e:	f000 f8b3 	bl	8009388 <_write_r>
 8009222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009224:	ffffefff 	.word	0xffffefff

08009228 <__sseek>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	000c      	movs	r4, r1
 800922c:	250e      	movs	r5, #14
 800922e:	5f49      	ldrsh	r1, [r1, r5]
 8009230:	f000 f870 	bl	8009314 <_lseek_r>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	1c42      	adds	r2, r0, #1
 8009238:	d103      	bne.n	8009242 <__sseek+0x1a>
 800923a:	4a05      	ldr	r2, [pc, #20]	; (8009250 <__sseek+0x28>)
 800923c:	4013      	ands	r3, r2
 800923e:	81a3      	strh	r3, [r4, #12]
 8009240:	bd70      	pop	{r4, r5, r6, pc}
 8009242:	2280      	movs	r2, #128	; 0x80
 8009244:	0152      	lsls	r2, r2, #5
 8009246:	4313      	orrs	r3, r2
 8009248:	81a3      	strh	r3, [r4, #12]
 800924a:	6560      	str	r0, [r4, #84]	; 0x54
 800924c:	e7f8      	b.n	8009240 <__sseek+0x18>
 800924e:	46c0      	nop			; (mov r8, r8)
 8009250:	ffffefff 	.word	0xffffefff

08009254 <__sclose>:
 8009254:	b510      	push	{r4, lr}
 8009256:	230e      	movs	r3, #14
 8009258:	5ec9      	ldrsh	r1, [r1, r3]
 800925a:	f000 f849 	bl	80092f0 <_close_r>
 800925e:	bd10      	pop	{r4, pc}

08009260 <memset>:
 8009260:	0003      	movs	r3, r0
 8009262:	1882      	adds	r2, r0, r2
 8009264:	4293      	cmp	r3, r2
 8009266:	d100      	bne.n	800926a <memset+0xa>
 8009268:	4770      	bx	lr
 800926a:	7019      	strb	r1, [r3, #0]
 800926c:	3301      	adds	r3, #1
 800926e:	e7f9      	b.n	8009264 <memset+0x4>

08009270 <strncmp>:
 8009270:	b530      	push	{r4, r5, lr}
 8009272:	0005      	movs	r5, r0
 8009274:	1e10      	subs	r0, r2, #0
 8009276:	d00b      	beq.n	8009290 <strncmp+0x20>
 8009278:	2400      	movs	r4, #0
 800927a:	3a01      	subs	r2, #1
 800927c:	5d2b      	ldrb	r3, [r5, r4]
 800927e:	5d08      	ldrb	r0, [r1, r4]
 8009280:	4283      	cmp	r3, r0
 8009282:	d104      	bne.n	800928e <strncmp+0x1e>
 8009284:	42a2      	cmp	r2, r4
 8009286:	d002      	beq.n	800928e <strncmp+0x1e>
 8009288:	3401      	adds	r4, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f6      	bne.n	800927c <strncmp+0xc>
 800928e:	1a18      	subs	r0, r3, r0
 8009290:	bd30      	pop	{r4, r5, pc}

08009292 <strncpy>:
 8009292:	0003      	movs	r3, r0
 8009294:	b530      	push	{r4, r5, lr}
 8009296:	001d      	movs	r5, r3
 8009298:	2a00      	cmp	r2, #0
 800929a:	d006      	beq.n	80092aa <strncpy+0x18>
 800929c:	780c      	ldrb	r4, [r1, #0]
 800929e:	3a01      	subs	r2, #1
 80092a0:	3301      	adds	r3, #1
 80092a2:	702c      	strb	r4, [r5, #0]
 80092a4:	3101      	adds	r1, #1
 80092a6:	2c00      	cmp	r4, #0
 80092a8:	d1f5      	bne.n	8009296 <strncpy+0x4>
 80092aa:	2100      	movs	r1, #0
 80092ac:	189a      	adds	r2, r3, r2
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d100      	bne.n	80092b4 <strncpy+0x22>
 80092b2:	bd30      	pop	{r4, r5, pc}
 80092b4:	7019      	strb	r1, [r3, #0]
 80092b6:	3301      	adds	r3, #1
 80092b8:	e7f9      	b.n	80092ae <strncpy+0x1c>

080092ba <strstr>:
 80092ba:	780a      	ldrb	r2, [r1, #0]
 80092bc:	b530      	push	{r4, r5, lr}
 80092be:	2a00      	cmp	r2, #0
 80092c0:	d10c      	bne.n	80092dc <strstr+0x22>
 80092c2:	bd30      	pop	{r4, r5, pc}
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d108      	bne.n	80092da <strstr+0x20>
 80092c8:	2301      	movs	r3, #1
 80092ca:	5ccc      	ldrb	r4, [r1, r3]
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	d0f8      	beq.n	80092c2 <strstr+0x8>
 80092d0:	5cc5      	ldrb	r5, [r0, r3]
 80092d2:	42a5      	cmp	r5, r4
 80092d4:	d101      	bne.n	80092da <strstr+0x20>
 80092d6:	3301      	adds	r3, #1
 80092d8:	e7f7      	b.n	80092ca <strstr+0x10>
 80092da:	3001      	adds	r0, #1
 80092dc:	7803      	ldrb	r3, [r0, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1f0      	bne.n	80092c4 <strstr+0xa>
 80092e2:	0018      	movs	r0, r3
 80092e4:	e7ed      	b.n	80092c2 <strstr+0x8>
	...

080092e8 <_localeconv_r>:
 80092e8:	4800      	ldr	r0, [pc, #0]	; (80092ec <_localeconv_r+0x4>)
 80092ea:	4770      	bx	lr
 80092ec:	20000118 	.word	0x20000118

080092f0 <_close_r>:
 80092f0:	2300      	movs	r3, #0
 80092f2:	b570      	push	{r4, r5, r6, lr}
 80092f4:	4d06      	ldr	r5, [pc, #24]	; (8009310 <_close_r+0x20>)
 80092f6:	0004      	movs	r4, r0
 80092f8:	0008      	movs	r0, r1
 80092fa:	602b      	str	r3, [r5, #0]
 80092fc:	f7f9 fffd 	bl	80032fa <_close>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d103      	bne.n	800930c <_close_r+0x1c>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d000      	beq.n	800930c <_close_r+0x1c>
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	bd70      	pop	{r4, r5, r6, pc}
 800930e:	46c0      	nop			; (mov r8, r8)
 8009310:	200007a8 	.word	0x200007a8

08009314 <_lseek_r>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	0004      	movs	r4, r0
 8009318:	0008      	movs	r0, r1
 800931a:	0011      	movs	r1, r2
 800931c:	001a      	movs	r2, r3
 800931e:	2300      	movs	r3, #0
 8009320:	4d05      	ldr	r5, [pc, #20]	; (8009338 <_lseek_r+0x24>)
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	f7fa f80a 	bl	800333c <_lseek>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d103      	bne.n	8009334 <_lseek_r+0x20>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d000      	beq.n	8009334 <_lseek_r+0x20>
 8009332:	6023      	str	r3, [r4, #0]
 8009334:	bd70      	pop	{r4, r5, r6, pc}
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	200007a8 	.word	0x200007a8

0800933c <_read_r>:
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	0004      	movs	r4, r0
 8009340:	0008      	movs	r0, r1
 8009342:	0011      	movs	r1, r2
 8009344:	001a      	movs	r2, r3
 8009346:	2300      	movs	r3, #0
 8009348:	4d05      	ldr	r5, [pc, #20]	; (8009360 <_read_r+0x24>)
 800934a:	602b      	str	r3, [r5, #0]
 800934c:	f7f9 ff9c 	bl	8003288 <_read>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d103      	bne.n	800935c <_read_r+0x20>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d000      	beq.n	800935c <_read_r+0x20>
 800935a:	6023      	str	r3, [r4, #0]
 800935c:	bd70      	pop	{r4, r5, r6, pc}
 800935e:	46c0      	nop			; (mov r8, r8)
 8009360:	200007a8 	.word	0x200007a8

08009364 <_sbrk_r>:
 8009364:	2300      	movs	r3, #0
 8009366:	b570      	push	{r4, r5, r6, lr}
 8009368:	4d06      	ldr	r5, [pc, #24]	; (8009384 <_sbrk_r+0x20>)
 800936a:	0004      	movs	r4, r0
 800936c:	0008      	movs	r0, r1
 800936e:	602b      	str	r3, [r5, #0]
 8009370:	f7f9 fff0 	bl	8003354 <_sbrk>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d103      	bne.n	8009380 <_sbrk_r+0x1c>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d000      	beq.n	8009380 <_sbrk_r+0x1c>
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	bd70      	pop	{r4, r5, r6, pc}
 8009382:	46c0      	nop			; (mov r8, r8)
 8009384:	200007a8 	.word	0x200007a8

08009388 <_write_r>:
 8009388:	b570      	push	{r4, r5, r6, lr}
 800938a:	0004      	movs	r4, r0
 800938c:	0008      	movs	r0, r1
 800938e:	0011      	movs	r1, r2
 8009390:	001a      	movs	r2, r3
 8009392:	2300      	movs	r3, #0
 8009394:	4d05      	ldr	r5, [pc, #20]	; (80093ac <_write_r+0x24>)
 8009396:	602b      	str	r3, [r5, #0]
 8009398:	f7f9 ff93 	bl	80032c2 <_write>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	d103      	bne.n	80093a8 <_write_r+0x20>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d000      	beq.n	80093a8 <_write_r+0x20>
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	bd70      	pop	{r4, r5, r6, pc}
 80093aa:	46c0      	nop			; (mov r8, r8)
 80093ac:	200007a8 	.word	0x200007a8

080093b0 <__errno>:
 80093b0:	4b01      	ldr	r3, [pc, #4]	; (80093b8 <__errno+0x8>)
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	4770      	bx	lr
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	200001e0 	.word	0x200001e0

080093bc <__libc_init_array>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	2600      	movs	r6, #0
 80093c0:	4c0c      	ldr	r4, [pc, #48]	; (80093f4 <__libc_init_array+0x38>)
 80093c2:	4d0d      	ldr	r5, [pc, #52]	; (80093f8 <__libc_init_array+0x3c>)
 80093c4:	1b64      	subs	r4, r4, r5
 80093c6:	10a4      	asrs	r4, r4, #2
 80093c8:	42a6      	cmp	r6, r4
 80093ca:	d109      	bne.n	80093e0 <__libc_init_array+0x24>
 80093cc:	2600      	movs	r6, #0
 80093ce:	f003 f94f 	bl	800c670 <_init>
 80093d2:	4c0a      	ldr	r4, [pc, #40]	; (80093fc <__libc_init_array+0x40>)
 80093d4:	4d0a      	ldr	r5, [pc, #40]	; (8009400 <__libc_init_array+0x44>)
 80093d6:	1b64      	subs	r4, r4, r5
 80093d8:	10a4      	asrs	r4, r4, #2
 80093da:	42a6      	cmp	r6, r4
 80093dc:	d105      	bne.n	80093ea <__libc_init_array+0x2e>
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	00b3      	lsls	r3, r6, #2
 80093e2:	58eb      	ldr	r3, [r5, r3]
 80093e4:	4798      	blx	r3
 80093e6:	3601      	adds	r6, #1
 80093e8:	e7ee      	b.n	80093c8 <__libc_init_array+0xc>
 80093ea:	00b3      	lsls	r3, r6, #2
 80093ec:	58eb      	ldr	r3, [r5, r3]
 80093ee:	4798      	blx	r3
 80093f0:	3601      	adds	r6, #1
 80093f2:	e7f2      	b.n	80093da <__libc_init_array+0x1e>
 80093f4:	0800cc4c 	.word	0x0800cc4c
 80093f8:	0800cc4c 	.word	0x0800cc4c
 80093fc:	0800cc50 	.word	0x0800cc50
 8009400:	0800cc4c 	.word	0x0800cc4c

08009404 <__retarget_lock_init_recursive>:
 8009404:	4770      	bx	lr

08009406 <__retarget_lock_acquire_recursive>:
 8009406:	4770      	bx	lr

08009408 <__retarget_lock_release_recursive>:
 8009408:	4770      	bx	lr

0800940a <memchr>:
 800940a:	b2c9      	uxtb	r1, r1
 800940c:	1882      	adds	r2, r0, r2
 800940e:	4290      	cmp	r0, r2
 8009410:	d101      	bne.n	8009416 <memchr+0xc>
 8009412:	2000      	movs	r0, #0
 8009414:	4770      	bx	lr
 8009416:	7803      	ldrb	r3, [r0, #0]
 8009418:	428b      	cmp	r3, r1
 800941a:	d0fb      	beq.n	8009414 <memchr+0xa>
 800941c:	3001      	adds	r0, #1
 800941e:	e7f6      	b.n	800940e <memchr+0x4>

08009420 <memcpy>:
 8009420:	2300      	movs	r3, #0
 8009422:	b510      	push	{r4, lr}
 8009424:	429a      	cmp	r2, r3
 8009426:	d100      	bne.n	800942a <memcpy+0xa>
 8009428:	bd10      	pop	{r4, pc}
 800942a:	5ccc      	ldrb	r4, [r1, r3]
 800942c:	54c4      	strb	r4, [r0, r3]
 800942e:	3301      	adds	r3, #1
 8009430:	e7f8      	b.n	8009424 <memcpy+0x4>
	...

08009434 <nan>:
 8009434:	2000      	movs	r0, #0
 8009436:	4901      	ldr	r1, [pc, #4]	; (800943c <nan+0x8>)
 8009438:	4770      	bx	lr
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	7ff80000 	.word	0x7ff80000

08009440 <nanf>:
 8009440:	4800      	ldr	r0, [pc, #0]	; (8009444 <nanf+0x4>)
 8009442:	4770      	bx	lr
 8009444:	7fc00000 	.word	0x7fc00000

08009448 <quorem>:
 8009448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800944a:	6902      	ldr	r2, [r0, #16]
 800944c:	690b      	ldr	r3, [r1, #16]
 800944e:	b089      	sub	sp, #36	; 0x24
 8009450:	0007      	movs	r7, r0
 8009452:	9104      	str	r1, [sp, #16]
 8009454:	2000      	movs	r0, #0
 8009456:	429a      	cmp	r2, r3
 8009458:	db69      	blt.n	800952e <quorem+0xe6>
 800945a:	3b01      	subs	r3, #1
 800945c:	009c      	lsls	r4, r3, #2
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	000b      	movs	r3, r1
 8009462:	3314      	adds	r3, #20
 8009464:	9306      	str	r3, [sp, #24]
 8009466:	191b      	adds	r3, r3, r4
 8009468:	9305      	str	r3, [sp, #20]
 800946a:	003b      	movs	r3, r7
 800946c:	3314      	adds	r3, #20
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	191c      	adds	r4, r3, r4
 8009472:	9b05      	ldr	r3, [sp, #20]
 8009474:	6826      	ldr	r6, [r4, #0]
 8009476:	681d      	ldr	r5, [r3, #0]
 8009478:	0030      	movs	r0, r6
 800947a:	3501      	adds	r5, #1
 800947c:	0029      	movs	r1, r5
 800947e:	f7f6 fe5d 	bl	800013c <__udivsi3>
 8009482:	9002      	str	r0, [sp, #8]
 8009484:	42ae      	cmp	r6, r5
 8009486:	d329      	bcc.n	80094dc <quorem+0x94>
 8009488:	9b06      	ldr	r3, [sp, #24]
 800948a:	2600      	movs	r6, #0
 800948c:	469c      	mov	ip, r3
 800948e:	9d03      	ldr	r5, [sp, #12]
 8009490:	9606      	str	r6, [sp, #24]
 8009492:	4662      	mov	r2, ip
 8009494:	ca08      	ldmia	r2!, {r3}
 8009496:	6828      	ldr	r0, [r5, #0]
 8009498:	4694      	mov	ip, r2
 800949a:	9a02      	ldr	r2, [sp, #8]
 800949c:	b299      	uxth	r1, r3
 800949e:	4351      	muls	r1, r2
 80094a0:	0c1b      	lsrs	r3, r3, #16
 80094a2:	4353      	muls	r3, r2
 80094a4:	1989      	adds	r1, r1, r6
 80094a6:	0c0a      	lsrs	r2, r1, #16
 80094a8:	189b      	adds	r3, r3, r2
 80094aa:	9307      	str	r3, [sp, #28]
 80094ac:	0c1e      	lsrs	r6, r3, #16
 80094ae:	9b06      	ldr	r3, [sp, #24]
 80094b0:	b282      	uxth	r2, r0
 80094b2:	18d2      	adds	r2, r2, r3
 80094b4:	466b      	mov	r3, sp
 80094b6:	b289      	uxth	r1, r1
 80094b8:	8b9b      	ldrh	r3, [r3, #28]
 80094ba:	1a52      	subs	r2, r2, r1
 80094bc:	0c01      	lsrs	r1, r0, #16
 80094be:	1ac9      	subs	r1, r1, r3
 80094c0:	1413      	asrs	r3, r2, #16
 80094c2:	18cb      	adds	r3, r1, r3
 80094c4:	1419      	asrs	r1, r3, #16
 80094c6:	b292      	uxth	r2, r2
 80094c8:	041b      	lsls	r3, r3, #16
 80094ca:	4313      	orrs	r3, r2
 80094cc:	c508      	stmia	r5!, {r3}
 80094ce:	9b05      	ldr	r3, [sp, #20]
 80094d0:	9106      	str	r1, [sp, #24]
 80094d2:	4563      	cmp	r3, ip
 80094d4:	d2dd      	bcs.n	8009492 <quorem+0x4a>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d030      	beq.n	800953e <quorem+0xf6>
 80094dc:	0038      	movs	r0, r7
 80094de:	9904      	ldr	r1, [sp, #16]
 80094e0:	f001 fcda 	bl	800ae98 <__mcmp>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	db21      	blt.n	800952c <quorem+0xe4>
 80094e8:	0038      	movs	r0, r7
 80094ea:	2600      	movs	r6, #0
 80094ec:	9b02      	ldr	r3, [sp, #8]
 80094ee:	9c04      	ldr	r4, [sp, #16]
 80094f0:	3301      	adds	r3, #1
 80094f2:	9302      	str	r3, [sp, #8]
 80094f4:	3014      	adds	r0, #20
 80094f6:	3414      	adds	r4, #20
 80094f8:	6803      	ldr	r3, [r0, #0]
 80094fa:	cc02      	ldmia	r4!, {r1}
 80094fc:	b29d      	uxth	r5, r3
 80094fe:	19ad      	adds	r5, r5, r6
 8009500:	b28a      	uxth	r2, r1
 8009502:	1aaa      	subs	r2, r5, r2
 8009504:	0c09      	lsrs	r1, r1, #16
 8009506:	0c1b      	lsrs	r3, r3, #16
 8009508:	1a5b      	subs	r3, r3, r1
 800950a:	1411      	asrs	r1, r2, #16
 800950c:	185b      	adds	r3, r3, r1
 800950e:	141e      	asrs	r6, r3, #16
 8009510:	b292      	uxth	r2, r2
 8009512:	041b      	lsls	r3, r3, #16
 8009514:	4313      	orrs	r3, r2
 8009516:	c008      	stmia	r0!, {r3}
 8009518:	9b05      	ldr	r3, [sp, #20]
 800951a:	42a3      	cmp	r3, r4
 800951c:	d2ec      	bcs.n	80094f8 <quorem+0xb0>
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	9a03      	ldr	r2, [sp, #12]
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	18d3      	adds	r3, r2, r3
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	2a00      	cmp	r2, #0
 800952a:	d015      	beq.n	8009558 <quorem+0x110>
 800952c:	9802      	ldr	r0, [sp, #8]
 800952e:	b009      	add	sp, #36	; 0x24
 8009530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <quorem+0xfe>
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	3b01      	subs	r3, #1
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	9b03      	ldr	r3, [sp, #12]
 8009540:	3c04      	subs	r4, #4
 8009542:	42a3      	cmp	r3, r4
 8009544:	d3f5      	bcc.n	8009532 <quorem+0xea>
 8009546:	9b01      	ldr	r3, [sp, #4]
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	e7c7      	b.n	80094dc <quorem+0x94>
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	2a00      	cmp	r2, #0
 8009550:	d106      	bne.n	8009560 <quorem+0x118>
 8009552:	9a01      	ldr	r2, [sp, #4]
 8009554:	3a01      	subs	r2, #1
 8009556:	9201      	str	r2, [sp, #4]
 8009558:	9a03      	ldr	r2, [sp, #12]
 800955a:	3b04      	subs	r3, #4
 800955c:	429a      	cmp	r2, r3
 800955e:	d3f5      	bcc.n	800954c <quorem+0x104>
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	e7e2      	b.n	800952c <quorem+0xe4>
	...

08009568 <_dtoa_r>:
 8009568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800956a:	0014      	movs	r4, r2
 800956c:	001d      	movs	r5, r3
 800956e:	69c6      	ldr	r6, [r0, #28]
 8009570:	b09d      	sub	sp, #116	; 0x74
 8009572:	9408      	str	r4, [sp, #32]
 8009574:	9509      	str	r5, [sp, #36]	; 0x24
 8009576:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009578:	9004      	str	r0, [sp, #16]
 800957a:	2e00      	cmp	r6, #0
 800957c:	d10f      	bne.n	800959e <_dtoa_r+0x36>
 800957e:	2010      	movs	r0, #16
 8009580:	f7fd fec4 	bl	800730c <malloc>
 8009584:	9b04      	ldr	r3, [sp, #16]
 8009586:	1e02      	subs	r2, r0, #0
 8009588:	61d8      	str	r0, [r3, #28]
 800958a:	d104      	bne.n	8009596 <_dtoa_r+0x2e>
 800958c:	21ef      	movs	r1, #239	; 0xef
 800958e:	4bc6      	ldr	r3, [pc, #792]	; (80098a8 <_dtoa_r+0x340>)
 8009590:	48c6      	ldr	r0, [pc, #792]	; (80098ac <_dtoa_r+0x344>)
 8009592:	f002 fc45 	bl	800be20 <__assert_func>
 8009596:	6046      	str	r6, [r0, #4]
 8009598:	6086      	str	r6, [r0, #8]
 800959a:	6006      	str	r6, [r0, #0]
 800959c:	60c6      	str	r6, [r0, #12]
 800959e:	9b04      	ldr	r3, [sp, #16]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d00b      	beq.n	80095c0 <_dtoa_r+0x58>
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	2301      	movs	r3, #1
 80095ac:	4093      	lsls	r3, r2
 80095ae:	604a      	str	r2, [r1, #4]
 80095b0:	608b      	str	r3, [r1, #8]
 80095b2:	9804      	ldr	r0, [sp, #16]
 80095b4:	f001 f9e2 	bl	800a97c <_Bfree>
 80095b8:	2200      	movs	r2, #0
 80095ba:	9b04      	ldr	r3, [sp, #16]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	da1e      	bge.n	8009602 <_dtoa_r+0x9a>
 80095c4:	2301      	movs	r3, #1
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	006b      	lsls	r3, r5, #1
 80095ca:	085b      	lsrs	r3, r3, #1
 80095cc:	9309      	str	r3, [sp, #36]	; 0x24
 80095ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80095d0:	4bb7      	ldr	r3, [pc, #732]	; (80098b0 <_dtoa_r+0x348>)
 80095d2:	4ab7      	ldr	r2, [pc, #732]	; (80098b0 <_dtoa_r+0x348>)
 80095d4:	403b      	ands	r3, r7
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d116      	bne.n	8009608 <_dtoa_r+0xa0>
 80095da:	4bb6      	ldr	r3, [pc, #728]	; (80098b4 <_dtoa_r+0x34c>)
 80095dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	033b      	lsls	r3, r7, #12
 80095e2:	0b1b      	lsrs	r3, r3, #12
 80095e4:	4323      	orrs	r3, r4
 80095e6:	d101      	bne.n	80095ec <_dtoa_r+0x84>
 80095e8:	f000 fdb5 	bl	800a156 <_dtoa_r+0xbee>
 80095ec:	4bb2      	ldr	r3, [pc, #712]	; (80098b8 <_dtoa_r+0x350>)
 80095ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095f0:	9306      	str	r3, [sp, #24]
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	d002      	beq.n	80095fc <_dtoa_r+0x94>
 80095f6:	4bb1      	ldr	r3, [pc, #708]	; (80098bc <_dtoa_r+0x354>)
 80095f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	9806      	ldr	r0, [sp, #24]
 80095fe:	b01d      	add	sp, #116	; 0x74
 8009600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009602:	2300      	movs	r3, #0
 8009604:	603b      	str	r3, [r7, #0]
 8009606:	e7e2      	b.n	80095ce <_dtoa_r+0x66>
 8009608:	9a08      	ldr	r2, [sp, #32]
 800960a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960c:	9210      	str	r2, [sp, #64]	; 0x40
 800960e:	9311      	str	r3, [sp, #68]	; 0x44
 8009610:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009612:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009614:	2200      	movs	r2, #0
 8009616:	2300      	movs	r3, #0
 8009618:	f7f6 ff16 	bl	8000448 <__aeabi_dcmpeq>
 800961c:	1e06      	subs	r6, r0, #0
 800961e:	d009      	beq.n	8009634 <_dtoa_r+0xcc>
 8009620:	2301      	movs	r3, #1
 8009622:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	4ba6      	ldr	r3, [pc, #664]	; (80098c0 <_dtoa_r+0x358>)
 8009628:	9306      	str	r3, [sp, #24]
 800962a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800962c:	2b00      	cmp	r3, #0
 800962e:	d0e5      	beq.n	80095fc <_dtoa_r+0x94>
 8009630:	4ba4      	ldr	r3, [pc, #656]	; (80098c4 <_dtoa_r+0x35c>)
 8009632:	e7e1      	b.n	80095f8 <_dtoa_r+0x90>
 8009634:	ab1a      	add	r3, sp, #104	; 0x68
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	ab1b      	add	r3, sp, #108	; 0x6c
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	9804      	ldr	r0, [sp, #16]
 800963e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009640:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009642:	f001 fd45 	bl	800b0d0 <__d2b>
 8009646:	007a      	lsls	r2, r7, #1
 8009648:	9005      	str	r0, [sp, #20]
 800964a:	0d52      	lsrs	r2, r2, #21
 800964c:	d100      	bne.n	8009650 <_dtoa_r+0xe8>
 800964e:	e07b      	b.n	8009748 <_dtoa_r+0x1e0>
 8009650:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009652:	9617      	str	r6, [sp, #92]	; 0x5c
 8009654:	0319      	lsls	r1, r3, #12
 8009656:	4b9c      	ldr	r3, [pc, #624]	; (80098c8 <_dtoa_r+0x360>)
 8009658:	0b09      	lsrs	r1, r1, #12
 800965a:	430b      	orrs	r3, r1
 800965c:	499b      	ldr	r1, [pc, #620]	; (80098cc <_dtoa_r+0x364>)
 800965e:	1857      	adds	r7, r2, r1
 8009660:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009662:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009664:	0019      	movs	r1, r3
 8009666:	2200      	movs	r2, #0
 8009668:	4b99      	ldr	r3, [pc, #612]	; (80098d0 <_dtoa_r+0x368>)
 800966a:	f7f8 fa93 	bl	8001b94 <__aeabi_dsub>
 800966e:	4a99      	ldr	r2, [pc, #612]	; (80098d4 <_dtoa_r+0x36c>)
 8009670:	4b99      	ldr	r3, [pc, #612]	; (80098d8 <_dtoa_r+0x370>)
 8009672:	f7f7 ffcd 	bl	8001610 <__aeabi_dmul>
 8009676:	4a99      	ldr	r2, [pc, #612]	; (80098dc <_dtoa_r+0x374>)
 8009678:	4b99      	ldr	r3, [pc, #612]	; (80098e0 <_dtoa_r+0x378>)
 800967a:	f7f7 f86f 	bl	800075c <__aeabi_dadd>
 800967e:	0004      	movs	r4, r0
 8009680:	0038      	movs	r0, r7
 8009682:	000d      	movs	r5, r1
 8009684:	f7f8 fe5c 	bl	8002340 <__aeabi_i2d>
 8009688:	4a96      	ldr	r2, [pc, #600]	; (80098e4 <_dtoa_r+0x37c>)
 800968a:	4b97      	ldr	r3, [pc, #604]	; (80098e8 <_dtoa_r+0x380>)
 800968c:	f7f7 ffc0 	bl	8001610 <__aeabi_dmul>
 8009690:	0002      	movs	r2, r0
 8009692:	000b      	movs	r3, r1
 8009694:	0020      	movs	r0, r4
 8009696:	0029      	movs	r1, r5
 8009698:	f7f7 f860 	bl	800075c <__aeabi_dadd>
 800969c:	0004      	movs	r4, r0
 800969e:	000d      	movs	r5, r1
 80096a0:	f7f8 fe18 	bl	80022d4 <__aeabi_d2iz>
 80096a4:	2200      	movs	r2, #0
 80096a6:	9003      	str	r0, [sp, #12]
 80096a8:	2300      	movs	r3, #0
 80096aa:	0020      	movs	r0, r4
 80096ac:	0029      	movs	r1, r5
 80096ae:	f7f6 fed1 	bl	8000454 <__aeabi_dcmplt>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d00b      	beq.n	80096ce <_dtoa_r+0x166>
 80096b6:	9803      	ldr	r0, [sp, #12]
 80096b8:	f7f8 fe42 	bl	8002340 <__aeabi_i2d>
 80096bc:	002b      	movs	r3, r5
 80096be:	0022      	movs	r2, r4
 80096c0:	f7f6 fec2 	bl	8000448 <__aeabi_dcmpeq>
 80096c4:	4243      	negs	r3, r0
 80096c6:	4158      	adcs	r0, r3
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	1a1b      	subs	r3, r3, r0
 80096cc:	9303      	str	r3, [sp, #12]
 80096ce:	2301      	movs	r3, #1
 80096d0:	9316      	str	r3, [sp, #88]	; 0x58
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	2b16      	cmp	r3, #22
 80096d6:	d810      	bhi.n	80096fa <_dtoa_r+0x192>
 80096d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80096da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80096dc:	9a03      	ldr	r2, [sp, #12]
 80096de:	4b83      	ldr	r3, [pc, #524]	; (80098ec <_dtoa_r+0x384>)
 80096e0:	00d2      	lsls	r2, r2, #3
 80096e2:	189b      	adds	r3, r3, r2
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f7f6 feb4 	bl	8000454 <__aeabi_dcmplt>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d047      	beq.n	8009780 <_dtoa_r+0x218>
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	9303      	str	r3, [sp, #12]
 80096f6:	2300      	movs	r3, #0
 80096f8:	9316      	str	r3, [sp, #88]	; 0x58
 80096fa:	2200      	movs	r2, #0
 80096fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80096fe:	920a      	str	r2, [sp, #40]	; 0x28
 8009700:	1bdb      	subs	r3, r3, r7
 8009702:	1e5a      	subs	r2, r3, #1
 8009704:	d53e      	bpl.n	8009784 <_dtoa_r+0x21c>
 8009706:	2201      	movs	r2, #1
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	930a      	str	r3, [sp, #40]	; 0x28
 800970c:	2300      	movs	r3, #0
 800970e:	930c      	str	r3, [sp, #48]	; 0x30
 8009710:	9b03      	ldr	r3, [sp, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	db38      	blt.n	8009788 <_dtoa_r+0x220>
 8009716:	9a03      	ldr	r2, [sp, #12]
 8009718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800971a:	4694      	mov	ip, r2
 800971c:	4463      	add	r3, ip
 800971e:	930c      	str	r3, [sp, #48]	; 0x30
 8009720:	2300      	movs	r3, #0
 8009722:	9213      	str	r2, [sp, #76]	; 0x4c
 8009724:	930d      	str	r3, [sp, #52]	; 0x34
 8009726:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009728:	2401      	movs	r4, #1
 800972a:	2b09      	cmp	r3, #9
 800972c:	d867      	bhi.n	80097fe <_dtoa_r+0x296>
 800972e:	2b05      	cmp	r3, #5
 8009730:	dd02      	ble.n	8009738 <_dtoa_r+0x1d0>
 8009732:	2400      	movs	r4, #0
 8009734:	3b04      	subs	r3, #4
 8009736:	9322      	str	r3, [sp, #136]	; 0x88
 8009738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800973a:	1e98      	subs	r0, r3, #2
 800973c:	2803      	cmp	r0, #3
 800973e:	d867      	bhi.n	8009810 <_dtoa_r+0x2a8>
 8009740:	f7f6 fce8 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009744:	5b383a2b 	.word	0x5b383a2b
 8009748:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800974a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800974c:	18f6      	adds	r6, r6, r3
 800974e:	4b68      	ldr	r3, [pc, #416]	; (80098f0 <_dtoa_r+0x388>)
 8009750:	18f2      	adds	r2, r6, r3
 8009752:	2a20      	cmp	r2, #32
 8009754:	dd0f      	ble.n	8009776 <_dtoa_r+0x20e>
 8009756:	2340      	movs	r3, #64	; 0x40
 8009758:	1a9b      	subs	r3, r3, r2
 800975a:	409f      	lsls	r7, r3
 800975c:	4b65      	ldr	r3, [pc, #404]	; (80098f4 <_dtoa_r+0x38c>)
 800975e:	0038      	movs	r0, r7
 8009760:	18f3      	adds	r3, r6, r3
 8009762:	40dc      	lsrs	r4, r3
 8009764:	4320      	orrs	r0, r4
 8009766:	f7f8 fe1b 	bl	80023a0 <__aeabi_ui2d>
 800976a:	2201      	movs	r2, #1
 800976c:	4b62      	ldr	r3, [pc, #392]	; (80098f8 <_dtoa_r+0x390>)
 800976e:	1e77      	subs	r7, r6, #1
 8009770:	18cb      	adds	r3, r1, r3
 8009772:	9217      	str	r2, [sp, #92]	; 0x5c
 8009774:	e776      	b.n	8009664 <_dtoa_r+0xfc>
 8009776:	2320      	movs	r3, #32
 8009778:	0020      	movs	r0, r4
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	4098      	lsls	r0, r3
 800977e:	e7f2      	b.n	8009766 <_dtoa_r+0x1fe>
 8009780:	9016      	str	r0, [sp, #88]	; 0x58
 8009782:	e7ba      	b.n	80096fa <_dtoa_r+0x192>
 8009784:	920c      	str	r2, [sp, #48]	; 0x30
 8009786:	e7c3      	b.n	8009710 <_dtoa_r+0x1a8>
 8009788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800978a:	9a03      	ldr	r2, [sp, #12]
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	930a      	str	r3, [sp, #40]	; 0x28
 8009790:	4253      	negs	r3, r2
 8009792:	930d      	str	r3, [sp, #52]	; 0x34
 8009794:	2300      	movs	r3, #0
 8009796:	9313      	str	r3, [sp, #76]	; 0x4c
 8009798:	e7c5      	b.n	8009726 <_dtoa_r+0x1be>
 800979a:	2300      	movs	r3, #0
 800979c:	930f      	str	r3, [sp, #60]	; 0x3c
 800979e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80097a2:	9307      	str	r3, [sp, #28]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dc13      	bgt.n	80097d0 <_dtoa_r+0x268>
 80097a8:	2301      	movs	r3, #1
 80097aa:	001a      	movs	r2, r3
 80097ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ae:	9307      	str	r3, [sp, #28]
 80097b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80097b2:	e00d      	b.n	80097d0 <_dtoa_r+0x268>
 80097b4:	2301      	movs	r3, #1
 80097b6:	e7f1      	b.n	800979c <_dtoa_r+0x234>
 80097b8:	2300      	movs	r3, #0
 80097ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80097bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80097be:	4694      	mov	ip, r2
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	4463      	add	r3, ip
 80097c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80097c6:	3301      	adds	r3, #1
 80097c8:	9307      	str	r3, [sp, #28]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	dc00      	bgt.n	80097d0 <_dtoa_r+0x268>
 80097ce:	2301      	movs	r3, #1
 80097d0:	9a04      	ldr	r2, [sp, #16]
 80097d2:	2100      	movs	r1, #0
 80097d4:	69d0      	ldr	r0, [r2, #28]
 80097d6:	2204      	movs	r2, #4
 80097d8:	0015      	movs	r5, r2
 80097da:	3514      	adds	r5, #20
 80097dc:	429d      	cmp	r5, r3
 80097de:	d91b      	bls.n	8009818 <_dtoa_r+0x2b0>
 80097e0:	6041      	str	r1, [r0, #4]
 80097e2:	9804      	ldr	r0, [sp, #16]
 80097e4:	f001 f886 	bl	800a8f4 <_Balloc>
 80097e8:	9006      	str	r0, [sp, #24]
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d117      	bne.n	800981e <_dtoa_r+0x2b6>
 80097ee:	21b0      	movs	r1, #176	; 0xb0
 80097f0:	4b42      	ldr	r3, [pc, #264]	; (80098fc <_dtoa_r+0x394>)
 80097f2:	482e      	ldr	r0, [pc, #184]	; (80098ac <_dtoa_r+0x344>)
 80097f4:	9a06      	ldr	r2, [sp, #24]
 80097f6:	31ff      	adds	r1, #255	; 0xff
 80097f8:	e6cb      	b.n	8009592 <_dtoa_r+0x2a>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e7dd      	b.n	80097ba <_dtoa_r+0x252>
 80097fe:	2300      	movs	r3, #0
 8009800:	940f      	str	r4, [sp, #60]	; 0x3c
 8009802:	9322      	str	r3, [sp, #136]	; 0x88
 8009804:	3b01      	subs	r3, #1
 8009806:	930b      	str	r3, [sp, #44]	; 0x2c
 8009808:	9307      	str	r3, [sp, #28]
 800980a:	2200      	movs	r2, #0
 800980c:	3313      	adds	r3, #19
 800980e:	e7cf      	b.n	80097b0 <_dtoa_r+0x248>
 8009810:	2301      	movs	r3, #1
 8009812:	930f      	str	r3, [sp, #60]	; 0x3c
 8009814:	3b02      	subs	r3, #2
 8009816:	e7f6      	b.n	8009806 <_dtoa_r+0x29e>
 8009818:	3101      	adds	r1, #1
 800981a:	0052      	lsls	r2, r2, #1
 800981c:	e7dc      	b.n	80097d8 <_dtoa_r+0x270>
 800981e:	9b04      	ldr	r3, [sp, #16]
 8009820:	9a06      	ldr	r2, [sp, #24]
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	9b07      	ldr	r3, [sp, #28]
 8009828:	2b0e      	cmp	r3, #14
 800982a:	d900      	bls.n	800982e <_dtoa_r+0x2c6>
 800982c:	e0e5      	b.n	80099fa <_dtoa_r+0x492>
 800982e:	2c00      	cmp	r4, #0
 8009830:	d100      	bne.n	8009834 <_dtoa_r+0x2cc>
 8009832:	e0e2      	b.n	80099fa <_dtoa_r+0x492>
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	dd64      	ble.n	8009904 <_dtoa_r+0x39c>
 800983a:	210f      	movs	r1, #15
 800983c:	9a03      	ldr	r2, [sp, #12]
 800983e:	4b2b      	ldr	r3, [pc, #172]	; (80098ec <_dtoa_r+0x384>)
 8009840:	400a      	ands	r2, r1
 8009842:	00d2      	lsls	r2, r2, #3
 8009844:	189b      	adds	r3, r3, r2
 8009846:	681e      	ldr	r6, [r3, #0]
 8009848:	685f      	ldr	r7, [r3, #4]
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	2402      	movs	r4, #2
 800984e:	111d      	asrs	r5, r3, #4
 8009850:	05db      	lsls	r3, r3, #23
 8009852:	d50a      	bpl.n	800986a <_dtoa_r+0x302>
 8009854:	4b2a      	ldr	r3, [pc, #168]	; (8009900 <_dtoa_r+0x398>)
 8009856:	400d      	ands	r5, r1
 8009858:	6a1a      	ldr	r2, [r3, #32]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800985e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009860:	f7f7 fadc 	bl	8000e1c <__aeabi_ddiv>
 8009864:	9008      	str	r0, [sp, #32]
 8009866:	9109      	str	r1, [sp, #36]	; 0x24
 8009868:	3401      	adds	r4, #1
 800986a:	4b25      	ldr	r3, [pc, #148]	; (8009900 <_dtoa_r+0x398>)
 800986c:	930e      	str	r3, [sp, #56]	; 0x38
 800986e:	2d00      	cmp	r5, #0
 8009870:	d108      	bne.n	8009884 <_dtoa_r+0x31c>
 8009872:	9808      	ldr	r0, [sp, #32]
 8009874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009876:	0032      	movs	r2, r6
 8009878:	003b      	movs	r3, r7
 800987a:	f7f7 facf 	bl	8000e1c <__aeabi_ddiv>
 800987e:	9008      	str	r0, [sp, #32]
 8009880:	9109      	str	r1, [sp, #36]	; 0x24
 8009882:	e05a      	b.n	800993a <_dtoa_r+0x3d2>
 8009884:	2301      	movs	r3, #1
 8009886:	421d      	tst	r5, r3
 8009888:	d009      	beq.n	800989e <_dtoa_r+0x336>
 800988a:	18e4      	adds	r4, r4, r3
 800988c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800988e:	0030      	movs	r0, r6
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	0039      	movs	r1, r7
 8009896:	f7f7 febb 	bl	8001610 <__aeabi_dmul>
 800989a:	0006      	movs	r6, r0
 800989c:	000f      	movs	r7, r1
 800989e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098a0:	106d      	asrs	r5, r5, #1
 80098a2:	3308      	adds	r3, #8
 80098a4:	e7e2      	b.n	800986c <_dtoa_r+0x304>
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	0800c9a5 	.word	0x0800c9a5
 80098ac:	0800c9bc 	.word	0x0800c9bc
 80098b0:	7ff00000 	.word	0x7ff00000
 80098b4:	0000270f 	.word	0x0000270f
 80098b8:	0800c9a1 	.word	0x0800c9a1
 80098bc:	0800c9a4 	.word	0x0800c9a4
 80098c0:	0800cc03 	.word	0x0800cc03
 80098c4:	0800cc04 	.word	0x0800cc04
 80098c8:	3ff00000 	.word	0x3ff00000
 80098cc:	fffffc01 	.word	0xfffffc01
 80098d0:	3ff80000 	.word	0x3ff80000
 80098d4:	636f4361 	.word	0x636f4361
 80098d8:	3fd287a7 	.word	0x3fd287a7
 80098dc:	8b60c8b3 	.word	0x8b60c8b3
 80098e0:	3fc68a28 	.word	0x3fc68a28
 80098e4:	509f79fb 	.word	0x509f79fb
 80098e8:	3fd34413 	.word	0x3fd34413
 80098ec:	0800cb08 	.word	0x0800cb08
 80098f0:	00000432 	.word	0x00000432
 80098f4:	00000412 	.word	0x00000412
 80098f8:	fe100000 	.word	0xfe100000
 80098fc:	0800ca14 	.word	0x0800ca14
 8009900:	0800cae0 	.word	0x0800cae0
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	2402      	movs	r4, #2
 8009908:	2b00      	cmp	r3, #0
 800990a:	d016      	beq.n	800993a <_dtoa_r+0x3d2>
 800990c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800990e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009910:	220f      	movs	r2, #15
 8009912:	425d      	negs	r5, r3
 8009914:	402a      	ands	r2, r5
 8009916:	4bdd      	ldr	r3, [pc, #884]	; (8009c8c <_dtoa_r+0x724>)
 8009918:	00d2      	lsls	r2, r2, #3
 800991a:	189b      	adds	r3, r3, r2
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f7f7 fe76 	bl	8001610 <__aeabi_dmul>
 8009924:	2701      	movs	r7, #1
 8009926:	2300      	movs	r3, #0
 8009928:	9008      	str	r0, [sp, #32]
 800992a:	9109      	str	r1, [sp, #36]	; 0x24
 800992c:	4ed8      	ldr	r6, [pc, #864]	; (8009c90 <_dtoa_r+0x728>)
 800992e:	112d      	asrs	r5, r5, #4
 8009930:	2d00      	cmp	r5, #0
 8009932:	d000      	beq.n	8009936 <_dtoa_r+0x3ce>
 8009934:	e091      	b.n	8009a5a <_dtoa_r+0x4f2>
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1a1      	bne.n	800987e <_dtoa_r+0x316>
 800993a:	9e08      	ldr	r6, [sp, #32]
 800993c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800993e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009940:	2b00      	cmp	r3, #0
 8009942:	d100      	bne.n	8009946 <_dtoa_r+0x3de>
 8009944:	e094      	b.n	8009a70 <_dtoa_r+0x508>
 8009946:	2200      	movs	r2, #0
 8009948:	0030      	movs	r0, r6
 800994a:	0039      	movs	r1, r7
 800994c:	4bd1      	ldr	r3, [pc, #836]	; (8009c94 <_dtoa_r+0x72c>)
 800994e:	f7f6 fd81 	bl	8000454 <__aeabi_dcmplt>
 8009952:	2800      	cmp	r0, #0
 8009954:	d100      	bne.n	8009958 <_dtoa_r+0x3f0>
 8009956:	e08b      	b.n	8009a70 <_dtoa_r+0x508>
 8009958:	9b07      	ldr	r3, [sp, #28]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d100      	bne.n	8009960 <_dtoa_r+0x3f8>
 800995e:	e087      	b.n	8009a70 <_dtoa_r+0x508>
 8009960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009962:	2b00      	cmp	r3, #0
 8009964:	dd45      	ble.n	80099f2 <_dtoa_r+0x48a>
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	3b01      	subs	r3, #1
 800996c:	930e      	str	r3, [sp, #56]	; 0x38
 800996e:	0030      	movs	r0, r6
 8009970:	4bc9      	ldr	r3, [pc, #804]	; (8009c98 <_dtoa_r+0x730>)
 8009972:	0039      	movs	r1, r7
 8009974:	f7f7 fe4c 	bl	8001610 <__aeabi_dmul>
 8009978:	9008      	str	r0, [sp, #32]
 800997a:	9109      	str	r1, [sp, #36]	; 0x24
 800997c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800997e:	3401      	adds	r4, #1
 8009980:	0020      	movs	r0, r4
 8009982:	9e08      	ldr	r6, [sp, #32]
 8009984:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009986:	9312      	str	r3, [sp, #72]	; 0x48
 8009988:	f7f8 fcda 	bl	8002340 <__aeabi_i2d>
 800998c:	0032      	movs	r2, r6
 800998e:	003b      	movs	r3, r7
 8009990:	f7f7 fe3e 	bl	8001610 <__aeabi_dmul>
 8009994:	2200      	movs	r2, #0
 8009996:	4bc1      	ldr	r3, [pc, #772]	; (8009c9c <_dtoa_r+0x734>)
 8009998:	f7f6 fee0 	bl	800075c <__aeabi_dadd>
 800999c:	4ac0      	ldr	r2, [pc, #768]	; (8009ca0 <_dtoa_r+0x738>)
 800999e:	9014      	str	r0, [sp, #80]	; 0x50
 80099a0:	9115      	str	r1, [sp, #84]	; 0x54
 80099a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80099a6:	4694      	mov	ip, r2
 80099a8:	9308      	str	r3, [sp, #32]
 80099aa:	9409      	str	r4, [sp, #36]	; 0x24
 80099ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099ae:	4463      	add	r3, ip
 80099b0:	9318      	str	r3, [sp, #96]	; 0x60
 80099b2:	9309      	str	r3, [sp, #36]	; 0x24
 80099b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d15e      	bne.n	8009a78 <_dtoa_r+0x510>
 80099ba:	2200      	movs	r2, #0
 80099bc:	4bb9      	ldr	r3, [pc, #740]	; (8009ca4 <_dtoa_r+0x73c>)
 80099be:	0030      	movs	r0, r6
 80099c0:	0039      	movs	r1, r7
 80099c2:	f7f8 f8e7 	bl	8001b94 <__aeabi_dsub>
 80099c6:	9a08      	ldr	r2, [sp, #32]
 80099c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80099ca:	0004      	movs	r4, r0
 80099cc:	000d      	movs	r5, r1
 80099ce:	f7f6 fd55 	bl	800047c <__aeabi_dcmpgt>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d000      	beq.n	80099d8 <_dtoa_r+0x470>
 80099d6:	e2b3      	b.n	8009f40 <_dtoa_r+0x9d8>
 80099d8:	48b3      	ldr	r0, [pc, #716]	; (8009ca8 <_dtoa_r+0x740>)
 80099da:	9915      	ldr	r1, [sp, #84]	; 0x54
 80099dc:	4684      	mov	ip, r0
 80099de:	4461      	add	r1, ip
 80099e0:	000b      	movs	r3, r1
 80099e2:	0020      	movs	r0, r4
 80099e4:	0029      	movs	r1, r5
 80099e6:	9a08      	ldr	r2, [sp, #32]
 80099e8:	f7f6 fd34 	bl	8000454 <__aeabi_dcmplt>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d000      	beq.n	80099f2 <_dtoa_r+0x48a>
 80099f0:	e2a3      	b.n	8009f3a <_dtoa_r+0x9d2>
 80099f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80099f6:	9308      	str	r3, [sp, #32]
 80099f8:	9409      	str	r4, [sp, #36]	; 0x24
 80099fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	da00      	bge.n	8009a02 <_dtoa_r+0x49a>
 8009a00:	e179      	b.n	8009cf6 <_dtoa_r+0x78e>
 8009a02:	9a03      	ldr	r2, [sp, #12]
 8009a04:	2a0e      	cmp	r2, #14
 8009a06:	dd00      	ble.n	8009a0a <_dtoa_r+0x4a2>
 8009a08:	e175      	b.n	8009cf6 <_dtoa_r+0x78e>
 8009a0a:	4ba0      	ldr	r3, [pc, #640]	; (8009c8c <_dtoa_r+0x724>)
 8009a0c:	00d2      	lsls	r2, r2, #3
 8009a0e:	189b      	adds	r3, r3, r2
 8009a10:	681e      	ldr	r6, [r3, #0]
 8009a12:	685f      	ldr	r7, [r3, #4]
 8009a14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	db00      	blt.n	8009a1c <_dtoa_r+0x4b4>
 8009a1a:	e0e5      	b.n	8009be8 <_dtoa_r+0x680>
 8009a1c:	9b07      	ldr	r3, [sp, #28]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	dd00      	ble.n	8009a24 <_dtoa_r+0x4bc>
 8009a22:	e0e1      	b.n	8009be8 <_dtoa_r+0x680>
 8009a24:	d000      	beq.n	8009a28 <_dtoa_r+0x4c0>
 8009a26:	e288      	b.n	8009f3a <_dtoa_r+0x9d2>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	0030      	movs	r0, r6
 8009a2c:	0039      	movs	r1, r7
 8009a2e:	4b9d      	ldr	r3, [pc, #628]	; (8009ca4 <_dtoa_r+0x73c>)
 8009a30:	f7f7 fdee 	bl	8001610 <__aeabi_dmul>
 8009a34:	9a08      	ldr	r2, [sp, #32]
 8009a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a38:	f7f6 fd2a 	bl	8000490 <__aeabi_dcmpge>
 8009a3c:	9e07      	ldr	r6, [sp, #28]
 8009a3e:	0037      	movs	r7, r6
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d000      	beq.n	8009a46 <_dtoa_r+0x4de>
 8009a44:	e25f      	b.n	8009f06 <_dtoa_r+0x99e>
 8009a46:	9b06      	ldr	r3, [sp, #24]
 8009a48:	9a06      	ldr	r2, [sp, #24]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	9308      	str	r3, [sp, #32]
 8009a4e:	2331      	movs	r3, #49	; 0x31
 8009a50:	7013      	strb	r3, [r2, #0]
 8009a52:	9b03      	ldr	r3, [sp, #12]
 8009a54:	3301      	adds	r3, #1
 8009a56:	9303      	str	r3, [sp, #12]
 8009a58:	e25a      	b.n	8009f10 <_dtoa_r+0x9a8>
 8009a5a:	423d      	tst	r5, r7
 8009a5c:	d005      	beq.n	8009a6a <_dtoa_r+0x502>
 8009a5e:	6832      	ldr	r2, [r6, #0]
 8009a60:	6873      	ldr	r3, [r6, #4]
 8009a62:	f7f7 fdd5 	bl	8001610 <__aeabi_dmul>
 8009a66:	003b      	movs	r3, r7
 8009a68:	3401      	adds	r4, #1
 8009a6a:	106d      	asrs	r5, r5, #1
 8009a6c:	3608      	adds	r6, #8
 8009a6e:	e75f      	b.n	8009930 <_dtoa_r+0x3c8>
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	930e      	str	r3, [sp, #56]	; 0x38
 8009a74:	9b07      	ldr	r3, [sp, #28]
 8009a76:	e783      	b.n	8009980 <_dtoa_r+0x418>
 8009a78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a7a:	4b84      	ldr	r3, [pc, #528]	; (8009c8c <_dtoa_r+0x724>)
 8009a7c:	3a01      	subs	r2, #1
 8009a7e:	00d2      	lsls	r2, r2, #3
 8009a80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a82:	189b      	adds	r3, r3, r2
 8009a84:	9c08      	ldr	r4, [sp, #32]
 8009a86:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	d051      	beq.n	8009b34 <_dtoa_r+0x5cc>
 8009a90:	2000      	movs	r0, #0
 8009a92:	4986      	ldr	r1, [pc, #536]	; (8009cac <_dtoa_r+0x744>)
 8009a94:	f7f7 f9c2 	bl	8000e1c <__aeabi_ddiv>
 8009a98:	0022      	movs	r2, r4
 8009a9a:	002b      	movs	r3, r5
 8009a9c:	f7f8 f87a 	bl	8001b94 <__aeabi_dsub>
 8009aa0:	9a06      	ldr	r2, [sp, #24]
 8009aa2:	0004      	movs	r4, r0
 8009aa4:	4694      	mov	ip, r2
 8009aa6:	000d      	movs	r5, r1
 8009aa8:	9b06      	ldr	r3, [sp, #24]
 8009aaa:	9314      	str	r3, [sp, #80]	; 0x50
 8009aac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009aae:	4463      	add	r3, ip
 8009ab0:	9318      	str	r3, [sp, #96]	; 0x60
 8009ab2:	0039      	movs	r1, r7
 8009ab4:	0030      	movs	r0, r6
 8009ab6:	f7f8 fc0d 	bl	80022d4 <__aeabi_d2iz>
 8009aba:	9012      	str	r0, [sp, #72]	; 0x48
 8009abc:	f7f8 fc40 	bl	8002340 <__aeabi_i2d>
 8009ac0:	0002      	movs	r2, r0
 8009ac2:	000b      	movs	r3, r1
 8009ac4:	0030      	movs	r0, r6
 8009ac6:	0039      	movs	r1, r7
 8009ac8:	f7f8 f864 	bl	8001b94 <__aeabi_dsub>
 8009acc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ace:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	9308      	str	r3, [sp, #32]
 8009ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ad6:	0006      	movs	r6, r0
 8009ad8:	3330      	adds	r3, #48	; 0x30
 8009ada:	7013      	strb	r3, [r2, #0]
 8009adc:	0022      	movs	r2, r4
 8009ade:	002b      	movs	r3, r5
 8009ae0:	000f      	movs	r7, r1
 8009ae2:	f7f6 fcb7 	bl	8000454 <__aeabi_dcmplt>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d174      	bne.n	8009bd4 <_dtoa_r+0x66c>
 8009aea:	0032      	movs	r2, r6
 8009aec:	003b      	movs	r3, r7
 8009aee:	2000      	movs	r0, #0
 8009af0:	4968      	ldr	r1, [pc, #416]	; (8009c94 <_dtoa_r+0x72c>)
 8009af2:	f7f8 f84f 	bl	8001b94 <__aeabi_dsub>
 8009af6:	0022      	movs	r2, r4
 8009af8:	002b      	movs	r3, r5
 8009afa:	f7f6 fcab 	bl	8000454 <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d000      	beq.n	8009b04 <_dtoa_r+0x59c>
 8009b02:	e0d7      	b.n	8009cb4 <_dtoa_r+0x74c>
 8009b04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009b06:	9a08      	ldr	r2, [sp, #32]
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d100      	bne.n	8009b0e <_dtoa_r+0x5a6>
 8009b0c:	e771      	b.n	80099f2 <_dtoa_r+0x48a>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	0020      	movs	r0, r4
 8009b12:	0029      	movs	r1, r5
 8009b14:	4b60      	ldr	r3, [pc, #384]	; (8009c98 <_dtoa_r+0x730>)
 8009b16:	f7f7 fd7b 	bl	8001610 <__aeabi_dmul>
 8009b1a:	4b5f      	ldr	r3, [pc, #380]	; (8009c98 <_dtoa_r+0x730>)
 8009b1c:	0004      	movs	r4, r0
 8009b1e:	000d      	movs	r5, r1
 8009b20:	0030      	movs	r0, r6
 8009b22:	0039      	movs	r1, r7
 8009b24:	2200      	movs	r2, #0
 8009b26:	f7f7 fd73 	bl	8001610 <__aeabi_dmul>
 8009b2a:	9b08      	ldr	r3, [sp, #32]
 8009b2c:	0006      	movs	r6, r0
 8009b2e:	000f      	movs	r7, r1
 8009b30:	9314      	str	r3, [sp, #80]	; 0x50
 8009b32:	e7be      	b.n	8009ab2 <_dtoa_r+0x54a>
 8009b34:	0020      	movs	r0, r4
 8009b36:	0029      	movs	r1, r5
 8009b38:	f7f7 fd6a 	bl	8001610 <__aeabi_dmul>
 8009b3c:	9a06      	ldr	r2, [sp, #24]
 8009b3e:	9b06      	ldr	r3, [sp, #24]
 8009b40:	4694      	mov	ip, r2
 8009b42:	9308      	str	r3, [sp, #32]
 8009b44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b46:	9014      	str	r0, [sp, #80]	; 0x50
 8009b48:	9115      	str	r1, [sp, #84]	; 0x54
 8009b4a:	4463      	add	r3, ip
 8009b4c:	9319      	str	r3, [sp, #100]	; 0x64
 8009b4e:	0030      	movs	r0, r6
 8009b50:	0039      	movs	r1, r7
 8009b52:	f7f8 fbbf 	bl	80022d4 <__aeabi_d2iz>
 8009b56:	9018      	str	r0, [sp, #96]	; 0x60
 8009b58:	f7f8 fbf2 	bl	8002340 <__aeabi_i2d>
 8009b5c:	0002      	movs	r2, r0
 8009b5e:	000b      	movs	r3, r1
 8009b60:	0030      	movs	r0, r6
 8009b62:	0039      	movs	r1, r7
 8009b64:	f7f8 f816 	bl	8001b94 <__aeabi_dsub>
 8009b68:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009b6a:	9b08      	ldr	r3, [sp, #32]
 8009b6c:	3630      	adds	r6, #48	; 0x30
 8009b6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b70:	701e      	strb	r6, [r3, #0]
 8009b72:	3301      	adds	r3, #1
 8009b74:	0004      	movs	r4, r0
 8009b76:	000d      	movs	r5, r1
 8009b78:	9308      	str	r3, [sp, #32]
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d12d      	bne.n	8009bda <_dtoa_r+0x672>
 8009b7e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009b80:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009b82:	9a06      	ldr	r2, [sp, #24]
 8009b84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b86:	4694      	mov	ip, r2
 8009b88:	4463      	add	r3, ip
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	9308      	str	r3, [sp, #32]
 8009b8e:	4b47      	ldr	r3, [pc, #284]	; (8009cac <_dtoa_r+0x744>)
 8009b90:	f7f6 fde4 	bl	800075c <__aeabi_dadd>
 8009b94:	0002      	movs	r2, r0
 8009b96:	000b      	movs	r3, r1
 8009b98:	0020      	movs	r0, r4
 8009b9a:	0029      	movs	r1, r5
 8009b9c:	f7f6 fc6e 	bl	800047c <__aeabi_dcmpgt>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d000      	beq.n	8009ba6 <_dtoa_r+0x63e>
 8009ba4:	e086      	b.n	8009cb4 <_dtoa_r+0x74c>
 8009ba6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009baa:	2000      	movs	r0, #0
 8009bac:	493f      	ldr	r1, [pc, #252]	; (8009cac <_dtoa_r+0x744>)
 8009bae:	f7f7 fff1 	bl	8001b94 <__aeabi_dsub>
 8009bb2:	0002      	movs	r2, r0
 8009bb4:	000b      	movs	r3, r1
 8009bb6:	0020      	movs	r0, r4
 8009bb8:	0029      	movs	r1, r5
 8009bba:	f7f6 fc4b 	bl	8000454 <__aeabi_dcmplt>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d100      	bne.n	8009bc4 <_dtoa_r+0x65c>
 8009bc2:	e716      	b.n	80099f2 <_dtoa_r+0x48a>
 8009bc4:	9b08      	ldr	r3, [sp, #32]
 8009bc6:	001a      	movs	r2, r3
 8009bc8:	3a01      	subs	r2, #1
 8009bca:	9208      	str	r2, [sp, #32]
 8009bcc:	7812      	ldrb	r2, [r2, #0]
 8009bce:	2a30      	cmp	r2, #48	; 0x30
 8009bd0:	d0f8      	beq.n	8009bc4 <_dtoa_r+0x65c>
 8009bd2:	9308      	str	r3, [sp, #32]
 8009bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	e046      	b.n	8009c68 <_dtoa_r+0x700>
 8009bda:	2200      	movs	r2, #0
 8009bdc:	4b2e      	ldr	r3, [pc, #184]	; (8009c98 <_dtoa_r+0x730>)
 8009bde:	f7f7 fd17 	bl	8001610 <__aeabi_dmul>
 8009be2:	0006      	movs	r6, r0
 8009be4:	000f      	movs	r7, r1
 8009be6:	e7b2      	b.n	8009b4e <_dtoa_r+0x5e6>
 8009be8:	9b06      	ldr	r3, [sp, #24]
 8009bea:	9a06      	ldr	r2, [sp, #24]
 8009bec:	930a      	str	r3, [sp, #40]	; 0x28
 8009bee:	9b07      	ldr	r3, [sp, #28]
 8009bf0:	9c08      	ldr	r4, [sp, #32]
 8009bf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	189b      	adds	r3, r3, r2
 8009bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bfa:	0032      	movs	r2, r6
 8009bfc:	003b      	movs	r3, r7
 8009bfe:	0020      	movs	r0, r4
 8009c00:	0029      	movs	r1, r5
 8009c02:	f7f7 f90b 	bl	8000e1c <__aeabi_ddiv>
 8009c06:	f7f8 fb65 	bl	80022d4 <__aeabi_d2iz>
 8009c0a:	9007      	str	r0, [sp, #28]
 8009c0c:	f7f8 fb98 	bl	8002340 <__aeabi_i2d>
 8009c10:	0032      	movs	r2, r6
 8009c12:	003b      	movs	r3, r7
 8009c14:	f7f7 fcfc 	bl	8001610 <__aeabi_dmul>
 8009c18:	0002      	movs	r2, r0
 8009c1a:	000b      	movs	r3, r1
 8009c1c:	0020      	movs	r0, r4
 8009c1e:	0029      	movs	r1, r5
 8009c20:	f7f7 ffb8 	bl	8001b94 <__aeabi_dsub>
 8009c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c26:	001a      	movs	r2, r3
 8009c28:	3201      	adds	r2, #1
 8009c2a:	920a      	str	r2, [sp, #40]	; 0x28
 8009c2c:	9208      	str	r2, [sp, #32]
 8009c2e:	9a07      	ldr	r2, [sp, #28]
 8009c30:	3230      	adds	r2, #48	; 0x30
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d14f      	bne.n	8009cda <_dtoa_r+0x772>
 8009c3a:	0002      	movs	r2, r0
 8009c3c:	000b      	movs	r3, r1
 8009c3e:	f7f6 fd8d 	bl	800075c <__aeabi_dadd>
 8009c42:	0032      	movs	r2, r6
 8009c44:	003b      	movs	r3, r7
 8009c46:	0004      	movs	r4, r0
 8009c48:	000d      	movs	r5, r1
 8009c4a:	f7f6 fc17 	bl	800047c <__aeabi_dcmpgt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d12e      	bne.n	8009cb0 <_dtoa_r+0x748>
 8009c52:	0032      	movs	r2, r6
 8009c54:	003b      	movs	r3, r7
 8009c56:	0020      	movs	r0, r4
 8009c58:	0029      	movs	r1, r5
 8009c5a:	f7f6 fbf5 	bl	8000448 <__aeabi_dcmpeq>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d002      	beq.n	8009c68 <_dtoa_r+0x700>
 8009c62:	9b07      	ldr	r3, [sp, #28]
 8009c64:	07de      	lsls	r6, r3, #31
 8009c66:	d423      	bmi.n	8009cb0 <_dtoa_r+0x748>
 8009c68:	9905      	ldr	r1, [sp, #20]
 8009c6a:	9804      	ldr	r0, [sp, #16]
 8009c6c:	f000 fe86 	bl	800a97c <_Bfree>
 8009c70:	2300      	movs	r3, #0
 8009c72:	9a08      	ldr	r2, [sp, #32]
 8009c74:	7013      	strb	r3, [r2, #0]
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	6013      	str	r3, [r2, #0]
 8009c7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d100      	bne.n	8009c86 <_dtoa_r+0x71e>
 8009c84:	e4ba      	b.n	80095fc <_dtoa_r+0x94>
 8009c86:	9a08      	ldr	r2, [sp, #32]
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	e4b7      	b.n	80095fc <_dtoa_r+0x94>
 8009c8c:	0800cb08 	.word	0x0800cb08
 8009c90:	0800cae0 	.word	0x0800cae0
 8009c94:	3ff00000 	.word	0x3ff00000
 8009c98:	40240000 	.word	0x40240000
 8009c9c:	401c0000 	.word	0x401c0000
 8009ca0:	fcc00000 	.word	0xfcc00000
 8009ca4:	40140000 	.word	0x40140000
 8009ca8:	7cc00000 	.word	0x7cc00000
 8009cac:	3fe00000 	.word	0x3fe00000
 8009cb0:	9b03      	ldr	r3, [sp, #12]
 8009cb2:	930e      	str	r3, [sp, #56]	; 0x38
 8009cb4:	9b08      	ldr	r3, [sp, #32]
 8009cb6:	9308      	str	r3, [sp, #32]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	781a      	ldrb	r2, [r3, #0]
 8009cbc:	2a39      	cmp	r2, #57	; 0x39
 8009cbe:	d108      	bne.n	8009cd2 <_dtoa_r+0x76a>
 8009cc0:	9a06      	ldr	r2, [sp, #24]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d1f7      	bne.n	8009cb6 <_dtoa_r+0x74e>
 8009cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cc8:	9906      	ldr	r1, [sp, #24]
 8009cca:	3201      	adds	r2, #1
 8009ccc:	920e      	str	r2, [sp, #56]	; 0x38
 8009cce:	2230      	movs	r2, #48	; 0x30
 8009cd0:	700a      	strb	r2, [r1, #0]
 8009cd2:	781a      	ldrb	r2, [r3, #0]
 8009cd4:	3201      	adds	r2, #1
 8009cd6:	701a      	strb	r2, [r3, #0]
 8009cd8:	e77c      	b.n	8009bd4 <_dtoa_r+0x66c>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	4ba9      	ldr	r3, [pc, #676]	; (8009f84 <_dtoa_r+0xa1c>)
 8009cde:	f7f7 fc97 	bl	8001610 <__aeabi_dmul>
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	0004      	movs	r4, r0
 8009ce8:	000d      	movs	r5, r1
 8009cea:	f7f6 fbad 	bl	8000448 <__aeabi_dcmpeq>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d100      	bne.n	8009cf4 <_dtoa_r+0x78c>
 8009cf2:	e782      	b.n	8009bfa <_dtoa_r+0x692>
 8009cf4:	e7b8      	b.n	8009c68 <_dtoa_r+0x700>
 8009cf6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009cf8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009cfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009cfc:	2f00      	cmp	r7, #0
 8009cfe:	d012      	beq.n	8009d26 <_dtoa_r+0x7be>
 8009d00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d02:	2a01      	cmp	r2, #1
 8009d04:	dc6e      	bgt.n	8009de4 <_dtoa_r+0x87c>
 8009d06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d08:	2a00      	cmp	r2, #0
 8009d0a:	d065      	beq.n	8009dd8 <_dtoa_r+0x870>
 8009d0c:	4a9e      	ldr	r2, [pc, #632]	; (8009f88 <_dtoa_r+0xa20>)
 8009d0e:	189b      	adds	r3, r3, r2
 8009d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d12:	2101      	movs	r1, #1
 8009d14:	18d2      	adds	r2, r2, r3
 8009d16:	920a      	str	r2, [sp, #40]	; 0x28
 8009d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d1a:	9804      	ldr	r0, [sp, #16]
 8009d1c:	18d3      	adds	r3, r2, r3
 8009d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d20:	f000 ff28 	bl	800ab74 <__i2b>
 8009d24:	0007      	movs	r7, r0
 8009d26:	2c00      	cmp	r4, #0
 8009d28:	d00e      	beq.n	8009d48 <_dtoa_r+0x7e0>
 8009d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dd0b      	ble.n	8009d48 <_dtoa_r+0x7e0>
 8009d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d32:	0023      	movs	r3, r4
 8009d34:	4294      	cmp	r4, r2
 8009d36:	dd00      	ble.n	8009d3a <_dtoa_r+0x7d2>
 8009d38:	0013      	movs	r3, r2
 8009d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d3c:	1ae4      	subs	r4, r4, r3
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	920a      	str	r2, [sp, #40]	; 0x28
 8009d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	930c      	str	r3, [sp, #48]	; 0x30
 8009d48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d01e      	beq.n	8009d8c <_dtoa_r+0x824>
 8009d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d05c      	beq.n	8009e0e <_dtoa_r+0x8a6>
 8009d54:	2d00      	cmp	r5, #0
 8009d56:	dd10      	ble.n	8009d7a <_dtoa_r+0x812>
 8009d58:	0039      	movs	r1, r7
 8009d5a:	002a      	movs	r2, r5
 8009d5c:	9804      	ldr	r0, [sp, #16]
 8009d5e:	f000 ffd1 	bl	800ad04 <__pow5mult>
 8009d62:	9a05      	ldr	r2, [sp, #20]
 8009d64:	0001      	movs	r1, r0
 8009d66:	0007      	movs	r7, r0
 8009d68:	9804      	ldr	r0, [sp, #16]
 8009d6a:	f000 ff1b 	bl	800aba4 <__multiply>
 8009d6e:	0006      	movs	r6, r0
 8009d70:	9905      	ldr	r1, [sp, #20]
 8009d72:	9804      	ldr	r0, [sp, #16]
 8009d74:	f000 fe02 	bl	800a97c <_Bfree>
 8009d78:	9605      	str	r6, [sp, #20]
 8009d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d7c:	1b5a      	subs	r2, r3, r5
 8009d7e:	42ab      	cmp	r3, r5
 8009d80:	d004      	beq.n	8009d8c <_dtoa_r+0x824>
 8009d82:	9905      	ldr	r1, [sp, #20]
 8009d84:	9804      	ldr	r0, [sp, #16]
 8009d86:	f000 ffbd 	bl	800ad04 <__pow5mult>
 8009d8a:	9005      	str	r0, [sp, #20]
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	9804      	ldr	r0, [sp, #16]
 8009d90:	f000 fef0 	bl	800ab74 <__i2b>
 8009d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d96:	0006      	movs	r6, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	dd3a      	ble.n	8009e12 <_dtoa_r+0x8aa>
 8009d9c:	001a      	movs	r2, r3
 8009d9e:	0001      	movs	r1, r0
 8009da0:	9804      	ldr	r0, [sp, #16]
 8009da2:	f000 ffaf 	bl	800ad04 <__pow5mult>
 8009da6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009da8:	0006      	movs	r6, r0
 8009daa:	2500      	movs	r5, #0
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	dc38      	bgt.n	8009e22 <_dtoa_r+0x8ba>
 8009db0:	2500      	movs	r5, #0
 8009db2:	9b08      	ldr	r3, [sp, #32]
 8009db4:	42ab      	cmp	r3, r5
 8009db6:	d130      	bne.n	8009e1a <_dtoa_r+0x8b2>
 8009db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dba:	031b      	lsls	r3, r3, #12
 8009dbc:	42ab      	cmp	r3, r5
 8009dbe:	d12c      	bne.n	8009e1a <_dtoa_r+0x8b2>
 8009dc0:	4b72      	ldr	r3, [pc, #456]	; (8009f8c <_dtoa_r+0xa24>)
 8009dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dc4:	4213      	tst	r3, r2
 8009dc6:	d028      	beq.n	8009e1a <_dtoa_r+0x8b2>
 8009dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dca:	3501      	adds	r5, #1
 8009dcc:	3301      	adds	r3, #1
 8009dce:	930a      	str	r3, [sp, #40]	; 0x28
 8009dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd6:	e020      	b.n	8009e1a <_dtoa_r+0x8b2>
 8009dd8:	2336      	movs	r3, #54	; 0x36
 8009dda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009ddc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009dde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009de0:	1a9b      	subs	r3, r3, r2
 8009de2:	e795      	b.n	8009d10 <_dtoa_r+0x7a8>
 8009de4:	9b07      	ldr	r3, [sp, #28]
 8009de6:	1e5d      	subs	r5, r3, #1
 8009de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dea:	42ab      	cmp	r3, r5
 8009dec:	db07      	blt.n	8009dfe <_dtoa_r+0x896>
 8009dee:	1b5d      	subs	r5, r3, r5
 8009df0:	9b07      	ldr	r3, [sp, #28]
 8009df2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	da8b      	bge.n	8009d10 <_dtoa_r+0x7a8>
 8009df8:	1ae4      	subs	r4, r4, r3
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e788      	b.n	8009d10 <_dtoa_r+0x7a8>
 8009dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e02:	1aeb      	subs	r3, r5, r3
 8009e04:	18d3      	adds	r3, r2, r3
 8009e06:	950d      	str	r5, [sp, #52]	; 0x34
 8009e08:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e0a:	2500      	movs	r5, #0
 8009e0c:	e7f0      	b.n	8009df0 <_dtoa_r+0x888>
 8009e0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e10:	e7b7      	b.n	8009d82 <_dtoa_r+0x81a>
 8009e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e14:	2500      	movs	r5, #0
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	ddca      	ble.n	8009db0 <_dtoa_r+0x848>
 8009e1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d008      	beq.n	8009e34 <_dtoa_r+0x8cc>
 8009e22:	6933      	ldr	r3, [r6, #16]
 8009e24:	3303      	adds	r3, #3
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	18f3      	adds	r3, r6, r3
 8009e2a:	6858      	ldr	r0, [r3, #4]
 8009e2c:	f000 fe5a 	bl	800aae4 <__hi0bits>
 8009e30:	2320      	movs	r3, #32
 8009e32:	1a18      	subs	r0, r3, r0
 8009e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e36:	1818      	adds	r0, r3, r0
 8009e38:	0002      	movs	r2, r0
 8009e3a:	231f      	movs	r3, #31
 8009e3c:	401a      	ands	r2, r3
 8009e3e:	4218      	tst	r0, r3
 8009e40:	d047      	beq.n	8009ed2 <_dtoa_r+0x96a>
 8009e42:	3301      	adds	r3, #1
 8009e44:	1a9b      	subs	r3, r3, r2
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	dd3f      	ble.n	8009eca <_dtoa_r+0x962>
 8009e4a:	231c      	movs	r3, #28
 8009e4c:	1a9b      	subs	r3, r3, r2
 8009e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e50:	18e4      	adds	r4, r4, r3
 8009e52:	18d2      	adds	r2, r2, r3
 8009e54:	920a      	str	r2, [sp, #40]	; 0x28
 8009e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e58:	18d3      	adds	r3, r2, r3
 8009e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	dd05      	ble.n	8009e6e <_dtoa_r+0x906>
 8009e62:	001a      	movs	r2, r3
 8009e64:	9905      	ldr	r1, [sp, #20]
 8009e66:	9804      	ldr	r0, [sp, #16]
 8009e68:	f000 ffa8 	bl	800adbc <__lshift>
 8009e6c:	9005      	str	r0, [sp, #20]
 8009e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	dd05      	ble.n	8009e80 <_dtoa_r+0x918>
 8009e74:	0031      	movs	r1, r6
 8009e76:	001a      	movs	r2, r3
 8009e78:	9804      	ldr	r0, [sp, #16]
 8009e7a:	f000 ff9f 	bl	800adbc <__lshift>
 8009e7e:	0006      	movs	r6, r0
 8009e80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d027      	beq.n	8009ed6 <_dtoa_r+0x96e>
 8009e86:	0031      	movs	r1, r6
 8009e88:	9805      	ldr	r0, [sp, #20]
 8009e8a:	f001 f805 	bl	800ae98 <__mcmp>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	da21      	bge.n	8009ed6 <_dtoa_r+0x96e>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	220a      	movs	r2, #10
 8009e96:	3b01      	subs	r3, #1
 8009e98:	9303      	str	r3, [sp, #12]
 8009e9a:	9905      	ldr	r1, [sp, #20]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9804      	ldr	r0, [sp, #16]
 8009ea0:	f000 fd90 	bl	800a9c4 <__multadd>
 8009ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ea6:	9005      	str	r0, [sp, #20]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d100      	bne.n	8009eae <_dtoa_r+0x946>
 8009eac:	e15d      	b.n	800a16a <_dtoa_r+0xc02>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	0039      	movs	r1, r7
 8009eb2:	220a      	movs	r2, #10
 8009eb4:	9804      	ldr	r0, [sp, #16]
 8009eb6:	f000 fd85 	bl	800a9c4 <__multadd>
 8009eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ebc:	0007      	movs	r7, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dc49      	bgt.n	8009f56 <_dtoa_r+0x9ee>
 8009ec2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	dc0e      	bgt.n	8009ee6 <_dtoa_r+0x97e>
 8009ec8:	e045      	b.n	8009f56 <_dtoa_r+0x9ee>
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d0c6      	beq.n	8009e5c <_dtoa_r+0x8f4>
 8009ece:	331c      	adds	r3, #28
 8009ed0:	e7bd      	b.n	8009e4e <_dtoa_r+0x8e6>
 8009ed2:	0013      	movs	r3, r2
 8009ed4:	e7fb      	b.n	8009ece <_dtoa_r+0x966>
 8009ed6:	9b07      	ldr	r3, [sp, #28]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dc36      	bgt.n	8009f4a <_dtoa_r+0x9e2>
 8009edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	dd33      	ble.n	8009f4a <_dtoa_r+0x9e2>
 8009ee2:	9b07      	ldr	r3, [sp, #28]
 8009ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10c      	bne.n	8009f06 <_dtoa_r+0x99e>
 8009eec:	0031      	movs	r1, r6
 8009eee:	2205      	movs	r2, #5
 8009ef0:	9804      	ldr	r0, [sp, #16]
 8009ef2:	f000 fd67 	bl	800a9c4 <__multadd>
 8009ef6:	0006      	movs	r6, r0
 8009ef8:	0001      	movs	r1, r0
 8009efa:	9805      	ldr	r0, [sp, #20]
 8009efc:	f000 ffcc 	bl	800ae98 <__mcmp>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	dd00      	ble.n	8009f06 <_dtoa_r+0x99e>
 8009f04:	e59f      	b.n	8009a46 <_dtoa_r+0x4de>
 8009f06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f08:	43db      	mvns	r3, r3
 8009f0a:	9303      	str	r3, [sp, #12]
 8009f0c:	9b06      	ldr	r3, [sp, #24]
 8009f0e:	9308      	str	r3, [sp, #32]
 8009f10:	2500      	movs	r5, #0
 8009f12:	0031      	movs	r1, r6
 8009f14:	9804      	ldr	r0, [sp, #16]
 8009f16:	f000 fd31 	bl	800a97c <_Bfree>
 8009f1a:	2f00      	cmp	r7, #0
 8009f1c:	d100      	bne.n	8009f20 <_dtoa_r+0x9b8>
 8009f1e:	e6a3      	b.n	8009c68 <_dtoa_r+0x700>
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	d005      	beq.n	8009f30 <_dtoa_r+0x9c8>
 8009f24:	42bd      	cmp	r5, r7
 8009f26:	d003      	beq.n	8009f30 <_dtoa_r+0x9c8>
 8009f28:	0029      	movs	r1, r5
 8009f2a:	9804      	ldr	r0, [sp, #16]
 8009f2c:	f000 fd26 	bl	800a97c <_Bfree>
 8009f30:	0039      	movs	r1, r7
 8009f32:	9804      	ldr	r0, [sp, #16]
 8009f34:	f000 fd22 	bl	800a97c <_Bfree>
 8009f38:	e696      	b.n	8009c68 <_dtoa_r+0x700>
 8009f3a:	2600      	movs	r6, #0
 8009f3c:	0037      	movs	r7, r6
 8009f3e:	e7e2      	b.n	8009f06 <_dtoa_r+0x99e>
 8009f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f42:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009f44:	9303      	str	r3, [sp, #12]
 8009f46:	0037      	movs	r7, r6
 8009f48:	e57d      	b.n	8009a46 <_dtoa_r+0x4de>
 8009f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d100      	bne.n	8009f52 <_dtoa_r+0x9ea>
 8009f50:	e0c3      	b.n	800a0da <_dtoa_r+0xb72>
 8009f52:	9b07      	ldr	r3, [sp, #28]
 8009f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f56:	2c00      	cmp	r4, #0
 8009f58:	dd05      	ble.n	8009f66 <_dtoa_r+0x9fe>
 8009f5a:	0039      	movs	r1, r7
 8009f5c:	0022      	movs	r2, r4
 8009f5e:	9804      	ldr	r0, [sp, #16]
 8009f60:	f000 ff2c 	bl	800adbc <__lshift>
 8009f64:	0007      	movs	r7, r0
 8009f66:	0038      	movs	r0, r7
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	d024      	beq.n	8009fb6 <_dtoa_r+0xa4e>
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	9804      	ldr	r0, [sp, #16]
 8009f70:	f000 fcc0 	bl	800a8f4 <_Balloc>
 8009f74:	1e04      	subs	r4, r0, #0
 8009f76:	d111      	bne.n	8009f9c <_dtoa_r+0xa34>
 8009f78:	0022      	movs	r2, r4
 8009f7a:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <_dtoa_r+0xa28>)
 8009f7c:	4805      	ldr	r0, [pc, #20]	; (8009f94 <_dtoa_r+0xa2c>)
 8009f7e:	4906      	ldr	r1, [pc, #24]	; (8009f98 <_dtoa_r+0xa30>)
 8009f80:	f7ff fb07 	bl	8009592 <_dtoa_r+0x2a>
 8009f84:	40240000 	.word	0x40240000
 8009f88:	00000433 	.word	0x00000433
 8009f8c:	7ff00000 	.word	0x7ff00000
 8009f90:	0800ca14 	.word	0x0800ca14
 8009f94:	0800c9bc 	.word	0x0800c9bc
 8009f98:	000002ef 	.word	0x000002ef
 8009f9c:	0039      	movs	r1, r7
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	310c      	adds	r1, #12
 8009fa2:	3202      	adds	r2, #2
 8009fa4:	0092      	lsls	r2, r2, #2
 8009fa6:	300c      	adds	r0, #12
 8009fa8:	f7ff fa3a 	bl	8009420 <memcpy>
 8009fac:	2201      	movs	r2, #1
 8009fae:	0021      	movs	r1, r4
 8009fb0:	9804      	ldr	r0, [sp, #16]
 8009fb2:	f000 ff03 	bl	800adbc <__lshift>
 8009fb6:	9b06      	ldr	r3, [sp, #24]
 8009fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fba:	9307      	str	r3, [sp, #28]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	189b      	adds	r3, r3, r2
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	003d      	movs	r5, r7
 8009fc4:	0007      	movs	r7, r0
 8009fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8009fc8:	9b08      	ldr	r3, [sp, #32]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	930d      	str	r3, [sp, #52]	; 0x34
 8009fce:	0031      	movs	r1, r6
 8009fd0:	9805      	ldr	r0, [sp, #20]
 8009fd2:	f7ff fa39 	bl	8009448 <quorem>
 8009fd6:	0029      	movs	r1, r5
 8009fd8:	0004      	movs	r4, r0
 8009fda:	900b      	str	r0, [sp, #44]	; 0x2c
 8009fdc:	9805      	ldr	r0, [sp, #20]
 8009fde:	f000 ff5b 	bl	800ae98 <__mcmp>
 8009fe2:	003a      	movs	r2, r7
 8009fe4:	900c      	str	r0, [sp, #48]	; 0x30
 8009fe6:	0031      	movs	r1, r6
 8009fe8:	9804      	ldr	r0, [sp, #16]
 8009fea:	f000 ff71 	bl	800aed0 <__mdiff>
 8009fee:	2201      	movs	r2, #1
 8009ff0:	68c3      	ldr	r3, [r0, #12]
 8009ff2:	3430      	adds	r4, #48	; 0x30
 8009ff4:	9008      	str	r0, [sp, #32]
 8009ff6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d104      	bne.n	800a006 <_dtoa_r+0xa9e>
 8009ffc:	0001      	movs	r1, r0
 8009ffe:	9805      	ldr	r0, [sp, #20]
 800a000:	f000 ff4a 	bl	800ae98 <__mcmp>
 800a004:	900a      	str	r0, [sp, #40]	; 0x28
 800a006:	9908      	ldr	r1, [sp, #32]
 800a008:	9804      	ldr	r0, [sp, #16]
 800a00a:	f000 fcb7 	bl	800a97c <_Bfree>
 800a00e:	9b07      	ldr	r3, [sp, #28]
 800a010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a012:	3301      	adds	r3, #1
 800a014:	9308      	str	r3, [sp, #32]
 800a016:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a018:	4313      	orrs	r3, r2
 800a01a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a01c:	4313      	orrs	r3, r2
 800a01e:	d109      	bne.n	800a034 <_dtoa_r+0xacc>
 800a020:	2c39      	cmp	r4, #57	; 0x39
 800a022:	d022      	beq.n	800a06a <_dtoa_r+0xb02>
 800a024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a026:	2b00      	cmp	r3, #0
 800a028:	dd01      	ble.n	800a02e <_dtoa_r+0xac6>
 800a02a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a02c:	3431      	adds	r4, #49	; 0x31
 800a02e:	9b07      	ldr	r3, [sp, #28]
 800a030:	701c      	strb	r4, [r3, #0]
 800a032:	e76e      	b.n	8009f12 <_dtoa_r+0x9aa>
 800a034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a036:	2b00      	cmp	r3, #0
 800a038:	db04      	blt.n	800a044 <_dtoa_r+0xadc>
 800a03a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a03c:	4313      	orrs	r3, r2
 800a03e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a040:	4313      	orrs	r3, r2
 800a042:	d11e      	bne.n	800a082 <_dtoa_r+0xb1a>
 800a044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a046:	2b00      	cmp	r3, #0
 800a048:	ddf1      	ble.n	800a02e <_dtoa_r+0xac6>
 800a04a:	9905      	ldr	r1, [sp, #20]
 800a04c:	2201      	movs	r2, #1
 800a04e:	9804      	ldr	r0, [sp, #16]
 800a050:	f000 feb4 	bl	800adbc <__lshift>
 800a054:	0031      	movs	r1, r6
 800a056:	9005      	str	r0, [sp, #20]
 800a058:	f000 ff1e 	bl	800ae98 <__mcmp>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	dc02      	bgt.n	800a066 <_dtoa_r+0xafe>
 800a060:	d1e5      	bne.n	800a02e <_dtoa_r+0xac6>
 800a062:	07e3      	lsls	r3, r4, #31
 800a064:	d5e3      	bpl.n	800a02e <_dtoa_r+0xac6>
 800a066:	2c39      	cmp	r4, #57	; 0x39
 800a068:	d1df      	bne.n	800a02a <_dtoa_r+0xac2>
 800a06a:	2339      	movs	r3, #57	; 0x39
 800a06c:	9a07      	ldr	r2, [sp, #28]
 800a06e:	7013      	strb	r3, [r2, #0]
 800a070:	9b08      	ldr	r3, [sp, #32]
 800a072:	9308      	str	r3, [sp, #32]
 800a074:	3b01      	subs	r3, #1
 800a076:	781a      	ldrb	r2, [r3, #0]
 800a078:	2a39      	cmp	r2, #57	; 0x39
 800a07a:	d063      	beq.n	800a144 <_dtoa_r+0xbdc>
 800a07c:	3201      	adds	r2, #1
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e747      	b.n	8009f12 <_dtoa_r+0x9aa>
 800a082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a084:	2b00      	cmp	r3, #0
 800a086:	dd03      	ble.n	800a090 <_dtoa_r+0xb28>
 800a088:	2c39      	cmp	r4, #57	; 0x39
 800a08a:	d0ee      	beq.n	800a06a <_dtoa_r+0xb02>
 800a08c:	3401      	adds	r4, #1
 800a08e:	e7ce      	b.n	800a02e <_dtoa_r+0xac6>
 800a090:	9b07      	ldr	r3, [sp, #28]
 800a092:	9a07      	ldr	r2, [sp, #28]
 800a094:	701c      	strb	r4, [r3, #0]
 800a096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a098:	4293      	cmp	r3, r2
 800a09a:	d03e      	beq.n	800a11a <_dtoa_r+0xbb2>
 800a09c:	2300      	movs	r3, #0
 800a09e:	220a      	movs	r2, #10
 800a0a0:	9905      	ldr	r1, [sp, #20]
 800a0a2:	9804      	ldr	r0, [sp, #16]
 800a0a4:	f000 fc8e 	bl	800a9c4 <__multadd>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	9005      	str	r0, [sp, #20]
 800a0ac:	220a      	movs	r2, #10
 800a0ae:	0029      	movs	r1, r5
 800a0b0:	9804      	ldr	r0, [sp, #16]
 800a0b2:	42bd      	cmp	r5, r7
 800a0b4:	d106      	bne.n	800a0c4 <_dtoa_r+0xb5c>
 800a0b6:	f000 fc85 	bl	800a9c4 <__multadd>
 800a0ba:	0005      	movs	r5, r0
 800a0bc:	0007      	movs	r7, r0
 800a0be:	9b08      	ldr	r3, [sp, #32]
 800a0c0:	9307      	str	r3, [sp, #28]
 800a0c2:	e784      	b.n	8009fce <_dtoa_r+0xa66>
 800a0c4:	f000 fc7e 	bl	800a9c4 <__multadd>
 800a0c8:	0039      	movs	r1, r7
 800a0ca:	0005      	movs	r5, r0
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	220a      	movs	r2, #10
 800a0d0:	9804      	ldr	r0, [sp, #16]
 800a0d2:	f000 fc77 	bl	800a9c4 <__multadd>
 800a0d6:	0007      	movs	r7, r0
 800a0d8:	e7f1      	b.n	800a0be <_dtoa_r+0xb56>
 800a0da:	9b07      	ldr	r3, [sp, #28]
 800a0dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0de:	2500      	movs	r5, #0
 800a0e0:	0031      	movs	r1, r6
 800a0e2:	9805      	ldr	r0, [sp, #20]
 800a0e4:	f7ff f9b0 	bl	8009448 <quorem>
 800a0e8:	9b06      	ldr	r3, [sp, #24]
 800a0ea:	3030      	adds	r0, #48	; 0x30
 800a0ec:	5558      	strb	r0, [r3, r5]
 800a0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0f0:	3501      	adds	r5, #1
 800a0f2:	0004      	movs	r4, r0
 800a0f4:	42ab      	cmp	r3, r5
 800a0f6:	dd07      	ble.n	800a108 <_dtoa_r+0xba0>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	220a      	movs	r2, #10
 800a0fc:	9905      	ldr	r1, [sp, #20]
 800a0fe:	9804      	ldr	r0, [sp, #16]
 800a100:	f000 fc60 	bl	800a9c4 <__multadd>
 800a104:	9005      	str	r0, [sp, #20]
 800a106:	e7eb      	b.n	800a0e0 <_dtoa_r+0xb78>
 800a108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a10a:	2301      	movs	r3, #1
 800a10c:	2a00      	cmp	r2, #0
 800a10e:	dd00      	ble.n	800a112 <_dtoa_r+0xbaa>
 800a110:	0013      	movs	r3, r2
 800a112:	2500      	movs	r5, #0
 800a114:	9a06      	ldr	r2, [sp, #24]
 800a116:	18d3      	adds	r3, r2, r3
 800a118:	9308      	str	r3, [sp, #32]
 800a11a:	9905      	ldr	r1, [sp, #20]
 800a11c:	2201      	movs	r2, #1
 800a11e:	9804      	ldr	r0, [sp, #16]
 800a120:	f000 fe4c 	bl	800adbc <__lshift>
 800a124:	0031      	movs	r1, r6
 800a126:	9005      	str	r0, [sp, #20]
 800a128:	f000 feb6 	bl	800ae98 <__mcmp>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	dc9f      	bgt.n	800a070 <_dtoa_r+0xb08>
 800a130:	d101      	bne.n	800a136 <_dtoa_r+0xbce>
 800a132:	07e4      	lsls	r4, r4, #31
 800a134:	d49c      	bmi.n	800a070 <_dtoa_r+0xb08>
 800a136:	9b08      	ldr	r3, [sp, #32]
 800a138:	9308      	str	r3, [sp, #32]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	781a      	ldrb	r2, [r3, #0]
 800a13e:	2a30      	cmp	r2, #48	; 0x30
 800a140:	d0fa      	beq.n	800a138 <_dtoa_r+0xbd0>
 800a142:	e6e6      	b.n	8009f12 <_dtoa_r+0x9aa>
 800a144:	9a06      	ldr	r2, [sp, #24]
 800a146:	429a      	cmp	r2, r3
 800a148:	d193      	bne.n	800a072 <_dtoa_r+0xb0a>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	3301      	adds	r3, #1
 800a14e:	9303      	str	r3, [sp, #12]
 800a150:	2331      	movs	r3, #49	; 0x31
 800a152:	7013      	strb	r3, [r2, #0]
 800a154:	e6dd      	b.n	8009f12 <_dtoa_r+0x9aa>
 800a156:	4b09      	ldr	r3, [pc, #36]	; (800a17c <_dtoa_r+0xc14>)
 800a158:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a15a:	9306      	str	r3, [sp, #24]
 800a15c:	4b08      	ldr	r3, [pc, #32]	; (800a180 <_dtoa_r+0xc18>)
 800a15e:	2a00      	cmp	r2, #0
 800a160:	d001      	beq.n	800a166 <_dtoa_r+0xbfe>
 800a162:	f7ff fa49 	bl	80095f8 <_dtoa_r+0x90>
 800a166:	f7ff fa49 	bl	80095fc <_dtoa_r+0x94>
 800a16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	dcb6      	bgt.n	800a0de <_dtoa_r+0xb76>
 800a170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a172:	2b02      	cmp	r3, #2
 800a174:	dd00      	ble.n	800a178 <_dtoa_r+0xc10>
 800a176:	e6b6      	b.n	8009ee6 <_dtoa_r+0x97e>
 800a178:	e7b1      	b.n	800a0de <_dtoa_r+0xb76>
 800a17a:	46c0      	nop			; (mov r8, r8)
 800a17c:	0800c998 	.word	0x0800c998
 800a180:	0800c9a0 	.word	0x0800c9a0

0800a184 <_free_r>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	0005      	movs	r5, r0
 800a188:	2900      	cmp	r1, #0
 800a18a:	d010      	beq.n	800a1ae <_free_r+0x2a>
 800a18c:	1f0c      	subs	r4, r1, #4
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	da00      	bge.n	800a196 <_free_r+0x12>
 800a194:	18e4      	adds	r4, r4, r3
 800a196:	0028      	movs	r0, r5
 800a198:	f7fd f970 	bl	800747c <__malloc_lock>
 800a19c:	4a1d      	ldr	r2, [pc, #116]	; (800a214 <_free_r+0x90>)
 800a19e:	6813      	ldr	r3, [r2, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d105      	bne.n	800a1b0 <_free_r+0x2c>
 800a1a4:	6063      	str	r3, [r4, #4]
 800a1a6:	6014      	str	r4, [r2, #0]
 800a1a8:	0028      	movs	r0, r5
 800a1aa:	f7fd f96f 	bl	800748c <__malloc_unlock>
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	d908      	bls.n	800a1c6 <_free_r+0x42>
 800a1b4:	6820      	ldr	r0, [r4, #0]
 800a1b6:	1821      	adds	r1, r4, r0
 800a1b8:	428b      	cmp	r3, r1
 800a1ba:	d1f3      	bne.n	800a1a4 <_free_r+0x20>
 800a1bc:	6819      	ldr	r1, [r3, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	1809      	adds	r1, r1, r0
 800a1c2:	6021      	str	r1, [r4, #0]
 800a1c4:	e7ee      	b.n	800a1a4 <_free_r+0x20>
 800a1c6:	001a      	movs	r2, r3
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <_free_r+0x4e>
 800a1ce:	42a3      	cmp	r3, r4
 800a1d0:	d9f9      	bls.n	800a1c6 <_free_r+0x42>
 800a1d2:	6811      	ldr	r1, [r2, #0]
 800a1d4:	1850      	adds	r0, r2, r1
 800a1d6:	42a0      	cmp	r0, r4
 800a1d8:	d10b      	bne.n	800a1f2 <_free_r+0x6e>
 800a1da:	6820      	ldr	r0, [r4, #0]
 800a1dc:	1809      	adds	r1, r1, r0
 800a1de:	1850      	adds	r0, r2, r1
 800a1e0:	6011      	str	r1, [r2, #0]
 800a1e2:	4283      	cmp	r3, r0
 800a1e4:	d1e0      	bne.n	800a1a8 <_free_r+0x24>
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	1841      	adds	r1, r0, r1
 800a1ec:	6011      	str	r1, [r2, #0]
 800a1ee:	6053      	str	r3, [r2, #4]
 800a1f0:	e7da      	b.n	800a1a8 <_free_r+0x24>
 800a1f2:	42a0      	cmp	r0, r4
 800a1f4:	d902      	bls.n	800a1fc <_free_r+0x78>
 800a1f6:	230c      	movs	r3, #12
 800a1f8:	602b      	str	r3, [r5, #0]
 800a1fa:	e7d5      	b.n	800a1a8 <_free_r+0x24>
 800a1fc:	6820      	ldr	r0, [r4, #0]
 800a1fe:	1821      	adds	r1, r4, r0
 800a200:	428b      	cmp	r3, r1
 800a202:	d103      	bne.n	800a20c <_free_r+0x88>
 800a204:	6819      	ldr	r1, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	1809      	adds	r1, r1, r0
 800a20a:	6021      	str	r1, [r4, #0]
 800a20c:	6063      	str	r3, [r4, #4]
 800a20e:	6054      	str	r4, [r2, #4]
 800a210:	e7ca      	b.n	800a1a8 <_free_r+0x24>
 800a212:	46c0      	nop			; (mov r8, r8)
 800a214:	20000664 	.word	0x20000664

0800a218 <rshift>:
 800a218:	0002      	movs	r2, r0
 800a21a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a21c:	6904      	ldr	r4, [r0, #16]
 800a21e:	114b      	asrs	r3, r1, #5
 800a220:	b085      	sub	sp, #20
 800a222:	3214      	adds	r2, #20
 800a224:	9302      	str	r3, [sp, #8]
 800a226:	114d      	asrs	r5, r1, #5
 800a228:	0013      	movs	r3, r2
 800a22a:	42ac      	cmp	r4, r5
 800a22c:	dd32      	ble.n	800a294 <rshift+0x7c>
 800a22e:	261f      	movs	r6, #31
 800a230:	000f      	movs	r7, r1
 800a232:	114b      	asrs	r3, r1, #5
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	00a5      	lsls	r5, r4, #2
 800a238:	18d3      	adds	r3, r2, r3
 800a23a:	4037      	ands	r7, r6
 800a23c:	1955      	adds	r5, r2, r5
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	9701      	str	r7, [sp, #4]
 800a242:	4231      	tst	r1, r6
 800a244:	d10d      	bne.n	800a262 <rshift+0x4a>
 800a246:	0016      	movs	r6, r2
 800a248:	0019      	movs	r1, r3
 800a24a:	428d      	cmp	r5, r1
 800a24c:	d836      	bhi.n	800a2bc <rshift+0xa4>
 800a24e:	9900      	ldr	r1, [sp, #0]
 800a250:	2300      	movs	r3, #0
 800a252:	3903      	subs	r1, #3
 800a254:	428d      	cmp	r5, r1
 800a256:	d302      	bcc.n	800a25e <rshift+0x46>
 800a258:	9b02      	ldr	r3, [sp, #8]
 800a25a:	1ae4      	subs	r4, r4, r3
 800a25c:	00a3      	lsls	r3, r4, #2
 800a25e:	18d3      	adds	r3, r2, r3
 800a260:	e018      	b.n	800a294 <rshift+0x7c>
 800a262:	2120      	movs	r1, #32
 800a264:	9e01      	ldr	r6, [sp, #4]
 800a266:	9f01      	ldr	r7, [sp, #4]
 800a268:	1b89      	subs	r1, r1, r6
 800a26a:	9e00      	ldr	r6, [sp, #0]
 800a26c:	9103      	str	r1, [sp, #12]
 800a26e:	ce02      	ldmia	r6!, {r1}
 800a270:	4694      	mov	ip, r2
 800a272:	40f9      	lsrs	r1, r7
 800a274:	42b5      	cmp	r5, r6
 800a276:	d816      	bhi.n	800a2a6 <rshift+0x8e>
 800a278:	9e00      	ldr	r6, [sp, #0]
 800a27a:	2300      	movs	r3, #0
 800a27c:	3601      	adds	r6, #1
 800a27e:	42b5      	cmp	r5, r6
 800a280:	d303      	bcc.n	800a28a <rshift+0x72>
 800a282:	9b02      	ldr	r3, [sp, #8]
 800a284:	1ae3      	subs	r3, r4, r3
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	3b04      	subs	r3, #4
 800a28a:	18d3      	adds	r3, r2, r3
 800a28c:	6019      	str	r1, [r3, #0]
 800a28e:	2900      	cmp	r1, #0
 800a290:	d000      	beq.n	800a294 <rshift+0x7c>
 800a292:	3304      	adds	r3, #4
 800a294:	1a99      	subs	r1, r3, r2
 800a296:	1089      	asrs	r1, r1, #2
 800a298:	6101      	str	r1, [r0, #16]
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d101      	bne.n	800a2a2 <rshift+0x8a>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	6143      	str	r3, [r0, #20]
 800a2a2:	b005      	add	sp, #20
 800a2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a6:	6837      	ldr	r7, [r6, #0]
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	409f      	lsls	r7, r3
 800a2ac:	430f      	orrs	r7, r1
 800a2ae:	4661      	mov	r1, ip
 800a2b0:	c180      	stmia	r1!, {r7}
 800a2b2:	468c      	mov	ip, r1
 800a2b4:	9b01      	ldr	r3, [sp, #4]
 800a2b6:	ce02      	ldmia	r6!, {r1}
 800a2b8:	40d9      	lsrs	r1, r3
 800a2ba:	e7db      	b.n	800a274 <rshift+0x5c>
 800a2bc:	c980      	ldmia	r1!, {r7}
 800a2be:	c680      	stmia	r6!, {r7}
 800a2c0:	e7c3      	b.n	800a24a <rshift+0x32>

0800a2c2 <__hexdig_fun>:
 800a2c2:	0002      	movs	r2, r0
 800a2c4:	3a30      	subs	r2, #48	; 0x30
 800a2c6:	0003      	movs	r3, r0
 800a2c8:	2a09      	cmp	r2, #9
 800a2ca:	d802      	bhi.n	800a2d2 <__hexdig_fun+0x10>
 800a2cc:	3b20      	subs	r3, #32
 800a2ce:	b2d8      	uxtb	r0, r3
 800a2d0:	4770      	bx	lr
 800a2d2:	0002      	movs	r2, r0
 800a2d4:	3a61      	subs	r2, #97	; 0x61
 800a2d6:	2a05      	cmp	r2, #5
 800a2d8:	d801      	bhi.n	800a2de <__hexdig_fun+0x1c>
 800a2da:	3b47      	subs	r3, #71	; 0x47
 800a2dc:	e7f7      	b.n	800a2ce <__hexdig_fun+0xc>
 800a2de:	001a      	movs	r2, r3
 800a2e0:	3a41      	subs	r2, #65	; 0x41
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	2a05      	cmp	r2, #5
 800a2e6:	d8f3      	bhi.n	800a2d0 <__hexdig_fun+0xe>
 800a2e8:	3b27      	subs	r3, #39	; 0x27
 800a2ea:	e7f0      	b.n	800a2ce <__hexdig_fun+0xc>

0800a2ec <__gethex>:
 800a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ee:	b089      	sub	sp, #36	; 0x24
 800a2f0:	9307      	str	r3, [sp, #28]
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	9201      	str	r2, [sp, #4]
 800a2f6:	680a      	ldr	r2, [r1, #0]
 800a2f8:	425b      	negs	r3, r3
 800a2fa:	9003      	str	r0, [sp, #12]
 800a2fc:	9106      	str	r1, [sp, #24]
 800a2fe:	1c96      	adds	r6, r2, #2
 800a300:	1a9b      	subs	r3, r3, r2
 800a302:	199a      	adds	r2, r3, r6
 800a304:	9600      	str	r6, [sp, #0]
 800a306:	9205      	str	r2, [sp, #20]
 800a308:	9a00      	ldr	r2, [sp, #0]
 800a30a:	3601      	adds	r6, #1
 800a30c:	7810      	ldrb	r0, [r2, #0]
 800a30e:	2830      	cmp	r0, #48	; 0x30
 800a310:	d0f7      	beq.n	800a302 <__gethex+0x16>
 800a312:	f7ff ffd6 	bl	800a2c2 <__hexdig_fun>
 800a316:	2300      	movs	r3, #0
 800a318:	001d      	movs	r5, r3
 800a31a:	9302      	str	r3, [sp, #8]
 800a31c:	4298      	cmp	r0, r3
 800a31e:	d11d      	bne.n	800a35c <__gethex+0x70>
 800a320:	2201      	movs	r2, #1
 800a322:	49a6      	ldr	r1, [pc, #664]	; (800a5bc <__gethex+0x2d0>)
 800a324:	9800      	ldr	r0, [sp, #0]
 800a326:	f7fe ffa3 	bl	8009270 <strncmp>
 800a32a:	0007      	movs	r7, r0
 800a32c:	42a8      	cmp	r0, r5
 800a32e:	d169      	bne.n	800a404 <__gethex+0x118>
 800a330:	9b00      	ldr	r3, [sp, #0]
 800a332:	0034      	movs	r4, r6
 800a334:	7858      	ldrb	r0, [r3, #1]
 800a336:	f7ff ffc4 	bl	800a2c2 <__hexdig_fun>
 800a33a:	2301      	movs	r3, #1
 800a33c:	9302      	str	r3, [sp, #8]
 800a33e:	42a8      	cmp	r0, r5
 800a340:	d02f      	beq.n	800a3a2 <__gethex+0xb6>
 800a342:	9600      	str	r6, [sp, #0]
 800a344:	9b00      	ldr	r3, [sp, #0]
 800a346:	7818      	ldrb	r0, [r3, #0]
 800a348:	2830      	cmp	r0, #48	; 0x30
 800a34a:	d009      	beq.n	800a360 <__gethex+0x74>
 800a34c:	f7ff ffb9 	bl	800a2c2 <__hexdig_fun>
 800a350:	4242      	negs	r2, r0
 800a352:	4142      	adcs	r2, r0
 800a354:	2301      	movs	r3, #1
 800a356:	0035      	movs	r5, r6
 800a358:	9202      	str	r2, [sp, #8]
 800a35a:	9305      	str	r3, [sp, #20]
 800a35c:	9c00      	ldr	r4, [sp, #0]
 800a35e:	e004      	b.n	800a36a <__gethex+0x7e>
 800a360:	9b00      	ldr	r3, [sp, #0]
 800a362:	3301      	adds	r3, #1
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	e7ed      	b.n	800a344 <__gethex+0x58>
 800a368:	3401      	adds	r4, #1
 800a36a:	7820      	ldrb	r0, [r4, #0]
 800a36c:	f7ff ffa9 	bl	800a2c2 <__hexdig_fun>
 800a370:	1e07      	subs	r7, r0, #0
 800a372:	d1f9      	bne.n	800a368 <__gethex+0x7c>
 800a374:	2201      	movs	r2, #1
 800a376:	0020      	movs	r0, r4
 800a378:	4990      	ldr	r1, [pc, #576]	; (800a5bc <__gethex+0x2d0>)
 800a37a:	f7fe ff79 	bl	8009270 <strncmp>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d10d      	bne.n	800a39e <__gethex+0xb2>
 800a382:	2d00      	cmp	r5, #0
 800a384:	d106      	bne.n	800a394 <__gethex+0xa8>
 800a386:	3401      	adds	r4, #1
 800a388:	0025      	movs	r5, r4
 800a38a:	7820      	ldrb	r0, [r4, #0]
 800a38c:	f7ff ff99 	bl	800a2c2 <__hexdig_fun>
 800a390:	2800      	cmp	r0, #0
 800a392:	d102      	bne.n	800a39a <__gethex+0xae>
 800a394:	1b2d      	subs	r5, r5, r4
 800a396:	00af      	lsls	r7, r5, #2
 800a398:	e003      	b.n	800a3a2 <__gethex+0xb6>
 800a39a:	3401      	adds	r4, #1
 800a39c:	e7f5      	b.n	800a38a <__gethex+0x9e>
 800a39e:	2d00      	cmp	r5, #0
 800a3a0:	d1f8      	bne.n	800a394 <__gethex+0xa8>
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	7823      	ldrb	r3, [r4, #0]
 800a3a6:	0026      	movs	r6, r4
 800a3a8:	4393      	bics	r3, r2
 800a3aa:	2b50      	cmp	r3, #80	; 0x50
 800a3ac:	d11d      	bne.n	800a3ea <__gethex+0xfe>
 800a3ae:	7863      	ldrb	r3, [r4, #1]
 800a3b0:	2b2b      	cmp	r3, #43	; 0x2b
 800a3b2:	d02c      	beq.n	800a40e <__gethex+0x122>
 800a3b4:	2b2d      	cmp	r3, #45	; 0x2d
 800a3b6:	d02e      	beq.n	800a416 <__gethex+0x12a>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	1c66      	adds	r6, r4, #1
 800a3bc:	9304      	str	r3, [sp, #16]
 800a3be:	7830      	ldrb	r0, [r6, #0]
 800a3c0:	f7ff ff7f 	bl	800a2c2 <__hexdig_fun>
 800a3c4:	1e43      	subs	r3, r0, #1
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b18      	cmp	r3, #24
 800a3ca:	d82b      	bhi.n	800a424 <__gethex+0x138>
 800a3cc:	3810      	subs	r0, #16
 800a3ce:	0005      	movs	r5, r0
 800a3d0:	7870      	ldrb	r0, [r6, #1]
 800a3d2:	f7ff ff76 	bl	800a2c2 <__hexdig_fun>
 800a3d6:	1e43      	subs	r3, r0, #1
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	3601      	adds	r6, #1
 800a3dc:	2b18      	cmp	r3, #24
 800a3de:	d91c      	bls.n	800a41a <__gethex+0x12e>
 800a3e0:	9b04      	ldr	r3, [sp, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d000      	beq.n	800a3e8 <__gethex+0xfc>
 800a3e6:	426d      	negs	r5, r5
 800a3e8:	197f      	adds	r7, r7, r5
 800a3ea:	9b06      	ldr	r3, [sp, #24]
 800a3ec:	601e      	str	r6, [r3, #0]
 800a3ee:	9b02      	ldr	r3, [sp, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d019      	beq.n	800a428 <__gethex+0x13c>
 800a3f4:	2600      	movs	r6, #0
 800a3f6:	9b05      	ldr	r3, [sp, #20]
 800a3f8:	42b3      	cmp	r3, r6
 800a3fa:	d100      	bne.n	800a3fe <__gethex+0x112>
 800a3fc:	3606      	adds	r6, #6
 800a3fe:	0030      	movs	r0, r6
 800a400:	b009      	add	sp, #36	; 0x24
 800a402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a404:	2301      	movs	r3, #1
 800a406:	2700      	movs	r7, #0
 800a408:	9c00      	ldr	r4, [sp, #0]
 800a40a:	9302      	str	r3, [sp, #8]
 800a40c:	e7c9      	b.n	800a3a2 <__gethex+0xb6>
 800a40e:	2300      	movs	r3, #0
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	1ca6      	adds	r6, r4, #2
 800a414:	e7d3      	b.n	800a3be <__gethex+0xd2>
 800a416:	2301      	movs	r3, #1
 800a418:	e7fa      	b.n	800a410 <__gethex+0x124>
 800a41a:	230a      	movs	r3, #10
 800a41c:	435d      	muls	r5, r3
 800a41e:	182d      	adds	r5, r5, r0
 800a420:	3d10      	subs	r5, #16
 800a422:	e7d5      	b.n	800a3d0 <__gethex+0xe4>
 800a424:	0026      	movs	r6, r4
 800a426:	e7e0      	b.n	800a3ea <__gethex+0xfe>
 800a428:	9b00      	ldr	r3, [sp, #0]
 800a42a:	9902      	ldr	r1, [sp, #8]
 800a42c:	1ae3      	subs	r3, r4, r3
 800a42e:	3b01      	subs	r3, #1
 800a430:	2b07      	cmp	r3, #7
 800a432:	dc0a      	bgt.n	800a44a <__gethex+0x15e>
 800a434:	9803      	ldr	r0, [sp, #12]
 800a436:	f000 fa5d 	bl	800a8f4 <_Balloc>
 800a43a:	1e05      	subs	r5, r0, #0
 800a43c:	d108      	bne.n	800a450 <__gethex+0x164>
 800a43e:	002a      	movs	r2, r5
 800a440:	21e4      	movs	r1, #228	; 0xe4
 800a442:	4b5f      	ldr	r3, [pc, #380]	; (800a5c0 <__gethex+0x2d4>)
 800a444:	485f      	ldr	r0, [pc, #380]	; (800a5c4 <__gethex+0x2d8>)
 800a446:	f001 fceb 	bl	800be20 <__assert_func>
 800a44a:	3101      	adds	r1, #1
 800a44c:	105b      	asrs	r3, r3, #1
 800a44e:	e7ef      	b.n	800a430 <__gethex+0x144>
 800a450:	0003      	movs	r3, r0
 800a452:	3314      	adds	r3, #20
 800a454:	9302      	str	r3, [sp, #8]
 800a456:	9305      	str	r3, [sp, #20]
 800a458:	2300      	movs	r3, #0
 800a45a:	001e      	movs	r6, r3
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	9b00      	ldr	r3, [sp, #0]
 800a460:	42a3      	cmp	r3, r4
 800a462:	d33f      	bcc.n	800a4e4 <__gethex+0x1f8>
 800a464:	9c05      	ldr	r4, [sp, #20]
 800a466:	9b02      	ldr	r3, [sp, #8]
 800a468:	c440      	stmia	r4!, {r6}
 800a46a:	1ae4      	subs	r4, r4, r3
 800a46c:	10a4      	asrs	r4, r4, #2
 800a46e:	0030      	movs	r0, r6
 800a470:	612c      	str	r4, [r5, #16]
 800a472:	f000 fb37 	bl	800aae4 <__hi0bits>
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	0164      	lsls	r4, r4, #5
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	1a26      	subs	r6, r4, r0
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	429e      	cmp	r6, r3
 800a482:	dd51      	ble.n	800a528 <__gethex+0x23c>
 800a484:	1af6      	subs	r6, r6, r3
 800a486:	0031      	movs	r1, r6
 800a488:	0028      	movs	r0, r5
 800a48a:	f000 fecb 	bl	800b224 <__any_on>
 800a48e:	1e04      	subs	r4, r0, #0
 800a490:	d016      	beq.n	800a4c0 <__gethex+0x1d4>
 800a492:	2401      	movs	r4, #1
 800a494:	231f      	movs	r3, #31
 800a496:	0020      	movs	r0, r4
 800a498:	1e72      	subs	r2, r6, #1
 800a49a:	4013      	ands	r3, r2
 800a49c:	4098      	lsls	r0, r3
 800a49e:	0003      	movs	r3, r0
 800a4a0:	1151      	asrs	r1, r2, #5
 800a4a2:	9802      	ldr	r0, [sp, #8]
 800a4a4:	0089      	lsls	r1, r1, #2
 800a4a6:	5809      	ldr	r1, [r1, r0]
 800a4a8:	4219      	tst	r1, r3
 800a4aa:	d009      	beq.n	800a4c0 <__gethex+0x1d4>
 800a4ac:	42a2      	cmp	r2, r4
 800a4ae:	dd06      	ble.n	800a4be <__gethex+0x1d2>
 800a4b0:	0028      	movs	r0, r5
 800a4b2:	1eb1      	subs	r1, r6, #2
 800a4b4:	f000 feb6 	bl	800b224 <__any_on>
 800a4b8:	3402      	adds	r4, #2
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d100      	bne.n	800a4c0 <__gethex+0x1d4>
 800a4be:	2402      	movs	r4, #2
 800a4c0:	0031      	movs	r1, r6
 800a4c2:	0028      	movs	r0, r5
 800a4c4:	f7ff fea8 	bl	800a218 <rshift>
 800a4c8:	19bf      	adds	r7, r7, r6
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	42bb      	cmp	r3, r7
 800a4d0:	da3a      	bge.n	800a548 <__gethex+0x25c>
 800a4d2:	0029      	movs	r1, r5
 800a4d4:	9803      	ldr	r0, [sp, #12]
 800a4d6:	f000 fa51 	bl	800a97c <_Bfree>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4de:	26a3      	movs	r6, #163	; 0xa3
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	e78c      	b.n	800a3fe <__gethex+0x112>
 800a4e4:	3c01      	subs	r4, #1
 800a4e6:	7823      	ldrb	r3, [r4, #0]
 800a4e8:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ea:	d012      	beq.n	800a512 <__gethex+0x226>
 800a4ec:	9b04      	ldr	r3, [sp, #16]
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d104      	bne.n	800a4fc <__gethex+0x210>
 800a4f2:	9b05      	ldr	r3, [sp, #20]
 800a4f4:	c340      	stmia	r3!, {r6}
 800a4f6:	2600      	movs	r6, #0
 800a4f8:	9305      	str	r3, [sp, #20]
 800a4fa:	9604      	str	r6, [sp, #16]
 800a4fc:	7820      	ldrb	r0, [r4, #0]
 800a4fe:	f7ff fee0 	bl	800a2c2 <__hexdig_fun>
 800a502:	230f      	movs	r3, #15
 800a504:	4018      	ands	r0, r3
 800a506:	9b04      	ldr	r3, [sp, #16]
 800a508:	4098      	lsls	r0, r3
 800a50a:	3304      	adds	r3, #4
 800a50c:	4306      	orrs	r6, r0
 800a50e:	9304      	str	r3, [sp, #16]
 800a510:	e7a5      	b.n	800a45e <__gethex+0x172>
 800a512:	9b00      	ldr	r3, [sp, #0]
 800a514:	42a3      	cmp	r3, r4
 800a516:	d8e9      	bhi.n	800a4ec <__gethex+0x200>
 800a518:	2201      	movs	r2, #1
 800a51a:	0020      	movs	r0, r4
 800a51c:	4927      	ldr	r1, [pc, #156]	; (800a5bc <__gethex+0x2d0>)
 800a51e:	f7fe fea7 	bl	8009270 <strncmp>
 800a522:	2800      	cmp	r0, #0
 800a524:	d1e2      	bne.n	800a4ec <__gethex+0x200>
 800a526:	e79a      	b.n	800a45e <__gethex+0x172>
 800a528:	9b00      	ldr	r3, [sp, #0]
 800a52a:	2400      	movs	r4, #0
 800a52c:	429e      	cmp	r6, r3
 800a52e:	dacc      	bge.n	800a4ca <__gethex+0x1de>
 800a530:	1b9e      	subs	r6, r3, r6
 800a532:	0029      	movs	r1, r5
 800a534:	0032      	movs	r2, r6
 800a536:	9803      	ldr	r0, [sp, #12]
 800a538:	f000 fc40 	bl	800adbc <__lshift>
 800a53c:	0003      	movs	r3, r0
 800a53e:	3314      	adds	r3, #20
 800a540:	0005      	movs	r5, r0
 800a542:	1bbf      	subs	r7, r7, r6
 800a544:	9302      	str	r3, [sp, #8]
 800a546:	e7c0      	b.n	800a4ca <__gethex+0x1de>
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	685e      	ldr	r6, [r3, #4]
 800a54c:	42be      	cmp	r6, r7
 800a54e:	dd70      	ble.n	800a632 <__gethex+0x346>
 800a550:	9b00      	ldr	r3, [sp, #0]
 800a552:	1bf6      	subs	r6, r6, r7
 800a554:	42b3      	cmp	r3, r6
 800a556:	dc37      	bgt.n	800a5c8 <__gethex+0x2dc>
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d024      	beq.n	800a5aa <__gethex+0x2be>
 800a560:	2b03      	cmp	r3, #3
 800a562:	d026      	beq.n	800a5b2 <__gethex+0x2c6>
 800a564:	2b01      	cmp	r3, #1
 800a566:	d117      	bne.n	800a598 <__gethex+0x2ac>
 800a568:	9b00      	ldr	r3, [sp, #0]
 800a56a:	42b3      	cmp	r3, r6
 800a56c:	d114      	bne.n	800a598 <__gethex+0x2ac>
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d10b      	bne.n	800a58a <__gethex+0x29e>
 800a572:	9b01      	ldr	r3, [sp, #4]
 800a574:	9a07      	ldr	r2, [sp, #28]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	2662      	movs	r6, #98	; 0x62
 800a57a:	6013      	str	r3, [r2, #0]
 800a57c:	2301      	movs	r3, #1
 800a57e:	9a02      	ldr	r2, [sp, #8]
 800a580:	612b      	str	r3, [r5, #16]
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a586:	601d      	str	r5, [r3, #0]
 800a588:	e739      	b.n	800a3fe <__gethex+0x112>
 800a58a:	9900      	ldr	r1, [sp, #0]
 800a58c:	0028      	movs	r0, r5
 800a58e:	3901      	subs	r1, #1
 800a590:	f000 fe48 	bl	800b224 <__any_on>
 800a594:	2800      	cmp	r0, #0
 800a596:	d1ec      	bne.n	800a572 <__gethex+0x286>
 800a598:	0029      	movs	r1, r5
 800a59a:	9803      	ldr	r0, [sp, #12]
 800a59c:	f000 f9ee 	bl	800a97c <_Bfree>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5a4:	2650      	movs	r6, #80	; 0x50
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	e729      	b.n	800a3fe <__gethex+0x112>
 800a5aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1f3      	bne.n	800a598 <__gethex+0x2ac>
 800a5b0:	e7df      	b.n	800a572 <__gethex+0x286>
 800a5b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1dc      	bne.n	800a572 <__gethex+0x286>
 800a5b8:	e7ee      	b.n	800a598 <__gethex+0x2ac>
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	0800c800 	.word	0x0800c800
 800a5c0:	0800ca14 	.word	0x0800ca14
 800a5c4:	0800ca25 	.word	0x0800ca25
 800a5c8:	1e77      	subs	r7, r6, #1
 800a5ca:	2c00      	cmp	r4, #0
 800a5cc:	d12f      	bne.n	800a62e <__gethex+0x342>
 800a5ce:	2f00      	cmp	r7, #0
 800a5d0:	d004      	beq.n	800a5dc <__gethex+0x2f0>
 800a5d2:	0039      	movs	r1, r7
 800a5d4:	0028      	movs	r0, r5
 800a5d6:	f000 fe25 	bl	800b224 <__any_on>
 800a5da:	0004      	movs	r4, r0
 800a5dc:	231f      	movs	r3, #31
 800a5de:	117a      	asrs	r2, r7, #5
 800a5e0:	401f      	ands	r7, r3
 800a5e2:	3b1e      	subs	r3, #30
 800a5e4:	40bb      	lsls	r3, r7
 800a5e6:	9902      	ldr	r1, [sp, #8]
 800a5e8:	0092      	lsls	r2, r2, #2
 800a5ea:	5852      	ldr	r2, [r2, r1]
 800a5ec:	421a      	tst	r2, r3
 800a5ee:	d001      	beq.n	800a5f4 <__gethex+0x308>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	431c      	orrs	r4, r3
 800a5f4:	9b00      	ldr	r3, [sp, #0]
 800a5f6:	0031      	movs	r1, r6
 800a5f8:	1b9b      	subs	r3, r3, r6
 800a5fa:	2602      	movs	r6, #2
 800a5fc:	0028      	movs	r0, r5
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	f7ff fe0a 	bl	800a218 <rshift>
 800a604:	9b01      	ldr	r3, [sp, #4]
 800a606:	685f      	ldr	r7, [r3, #4]
 800a608:	2c00      	cmp	r4, #0
 800a60a:	d041      	beq.n	800a690 <__gethex+0x3a4>
 800a60c:	9b01      	ldr	r3, [sp, #4]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	2b02      	cmp	r3, #2
 800a612:	d010      	beq.n	800a636 <__gethex+0x34a>
 800a614:	2b03      	cmp	r3, #3
 800a616:	d012      	beq.n	800a63e <__gethex+0x352>
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d106      	bne.n	800a62a <__gethex+0x33e>
 800a61c:	07a2      	lsls	r2, r4, #30
 800a61e:	d504      	bpl.n	800a62a <__gethex+0x33e>
 800a620:	9a02      	ldr	r2, [sp, #8]
 800a622:	6812      	ldr	r2, [r2, #0]
 800a624:	4314      	orrs	r4, r2
 800a626:	421c      	tst	r4, r3
 800a628:	d10c      	bne.n	800a644 <__gethex+0x358>
 800a62a:	2310      	movs	r3, #16
 800a62c:	e02f      	b.n	800a68e <__gethex+0x3a2>
 800a62e:	2401      	movs	r4, #1
 800a630:	e7d4      	b.n	800a5dc <__gethex+0x2f0>
 800a632:	2601      	movs	r6, #1
 800a634:	e7e8      	b.n	800a608 <__gethex+0x31c>
 800a636:	2301      	movs	r3, #1
 800a638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a63a:	1a9b      	subs	r3, r3, r2
 800a63c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a63e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0f2      	beq.n	800a62a <__gethex+0x33e>
 800a644:	692b      	ldr	r3, [r5, #16]
 800a646:	2000      	movs	r0, #0
 800a648:	9302      	str	r3, [sp, #8]
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	9304      	str	r3, [sp, #16]
 800a64e:	002b      	movs	r3, r5
 800a650:	9a04      	ldr	r2, [sp, #16]
 800a652:	3314      	adds	r3, #20
 800a654:	1899      	adds	r1, r3, r2
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	1c54      	adds	r4, r2, #1
 800a65a:	d01e      	beq.n	800a69a <__gethex+0x3ae>
 800a65c:	3201      	adds	r2, #1
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	002b      	movs	r3, r5
 800a662:	3314      	adds	r3, #20
 800a664:	2e02      	cmp	r6, #2
 800a666:	d141      	bne.n	800a6ec <__gethex+0x400>
 800a668:	9a01      	ldr	r2, [sp, #4]
 800a66a:	9900      	ldr	r1, [sp, #0]
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	3a01      	subs	r2, #1
 800a670:	428a      	cmp	r2, r1
 800a672:	d10b      	bne.n	800a68c <__gethex+0x3a0>
 800a674:	221f      	movs	r2, #31
 800a676:	9800      	ldr	r0, [sp, #0]
 800a678:	1149      	asrs	r1, r1, #5
 800a67a:	4002      	ands	r2, r0
 800a67c:	2001      	movs	r0, #1
 800a67e:	0004      	movs	r4, r0
 800a680:	4094      	lsls	r4, r2
 800a682:	0089      	lsls	r1, r1, #2
 800a684:	58cb      	ldr	r3, [r1, r3]
 800a686:	4223      	tst	r3, r4
 800a688:	d000      	beq.n	800a68c <__gethex+0x3a0>
 800a68a:	2601      	movs	r6, #1
 800a68c:	2320      	movs	r3, #32
 800a68e:	431e      	orrs	r6, r3
 800a690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a692:	601d      	str	r5, [r3, #0]
 800a694:	9b07      	ldr	r3, [sp, #28]
 800a696:	601f      	str	r7, [r3, #0]
 800a698:	e6b1      	b.n	800a3fe <__gethex+0x112>
 800a69a:	c301      	stmia	r3!, {r0}
 800a69c:	4299      	cmp	r1, r3
 800a69e:	d8da      	bhi.n	800a656 <__gethex+0x36a>
 800a6a0:	68ab      	ldr	r3, [r5, #8]
 800a6a2:	9a02      	ldr	r2, [sp, #8]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	db18      	blt.n	800a6da <__gethex+0x3ee>
 800a6a8:	6869      	ldr	r1, [r5, #4]
 800a6aa:	9803      	ldr	r0, [sp, #12]
 800a6ac:	3101      	adds	r1, #1
 800a6ae:	f000 f921 	bl	800a8f4 <_Balloc>
 800a6b2:	1e04      	subs	r4, r0, #0
 800a6b4:	d104      	bne.n	800a6c0 <__gethex+0x3d4>
 800a6b6:	0022      	movs	r2, r4
 800a6b8:	2184      	movs	r1, #132	; 0x84
 800a6ba:	4b1c      	ldr	r3, [pc, #112]	; (800a72c <__gethex+0x440>)
 800a6bc:	481c      	ldr	r0, [pc, #112]	; (800a730 <__gethex+0x444>)
 800a6be:	e6c2      	b.n	800a446 <__gethex+0x15a>
 800a6c0:	0029      	movs	r1, r5
 800a6c2:	692a      	ldr	r2, [r5, #16]
 800a6c4:	310c      	adds	r1, #12
 800a6c6:	3202      	adds	r2, #2
 800a6c8:	0092      	lsls	r2, r2, #2
 800a6ca:	300c      	adds	r0, #12
 800a6cc:	f7fe fea8 	bl	8009420 <memcpy>
 800a6d0:	0029      	movs	r1, r5
 800a6d2:	9803      	ldr	r0, [sp, #12]
 800a6d4:	f000 f952 	bl	800a97c <_Bfree>
 800a6d8:	0025      	movs	r5, r4
 800a6da:	692b      	ldr	r3, [r5, #16]
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	612a      	str	r2, [r5, #16]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	18eb      	adds	r3, r5, r3
 800a6e8:	605a      	str	r2, [r3, #4]
 800a6ea:	e7b9      	b.n	800a660 <__gethex+0x374>
 800a6ec:	692a      	ldr	r2, [r5, #16]
 800a6ee:	9902      	ldr	r1, [sp, #8]
 800a6f0:	428a      	cmp	r2, r1
 800a6f2:	dd09      	ble.n	800a708 <__gethex+0x41c>
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	0028      	movs	r0, r5
 800a6f8:	f7ff fd8e 	bl	800a218 <rshift>
 800a6fc:	9b01      	ldr	r3, [sp, #4]
 800a6fe:	3701      	adds	r7, #1
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	42bb      	cmp	r3, r7
 800a704:	dac1      	bge.n	800a68a <__gethex+0x39e>
 800a706:	e6e4      	b.n	800a4d2 <__gethex+0x1e6>
 800a708:	221f      	movs	r2, #31
 800a70a:	9c00      	ldr	r4, [sp, #0]
 800a70c:	9900      	ldr	r1, [sp, #0]
 800a70e:	2601      	movs	r6, #1
 800a710:	4014      	ands	r4, r2
 800a712:	4211      	tst	r1, r2
 800a714:	d0ba      	beq.n	800a68c <__gethex+0x3a0>
 800a716:	9a04      	ldr	r2, [sp, #16]
 800a718:	189b      	adds	r3, r3, r2
 800a71a:	3b04      	subs	r3, #4
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	f000 f9e1 	bl	800aae4 <__hi0bits>
 800a722:	2320      	movs	r3, #32
 800a724:	1b1b      	subs	r3, r3, r4
 800a726:	4298      	cmp	r0, r3
 800a728:	dbe4      	blt.n	800a6f4 <__gethex+0x408>
 800a72a:	e7af      	b.n	800a68c <__gethex+0x3a0>
 800a72c:	0800ca14 	.word	0x0800ca14
 800a730:	0800ca25 	.word	0x0800ca25

0800a734 <L_shift>:
 800a734:	2308      	movs	r3, #8
 800a736:	b570      	push	{r4, r5, r6, lr}
 800a738:	2520      	movs	r5, #32
 800a73a:	1a9a      	subs	r2, r3, r2
 800a73c:	0092      	lsls	r2, r2, #2
 800a73e:	1aad      	subs	r5, r5, r2
 800a740:	6843      	ldr	r3, [r0, #4]
 800a742:	6804      	ldr	r4, [r0, #0]
 800a744:	001e      	movs	r6, r3
 800a746:	40ae      	lsls	r6, r5
 800a748:	40d3      	lsrs	r3, r2
 800a74a:	4334      	orrs	r4, r6
 800a74c:	6004      	str	r4, [r0, #0]
 800a74e:	6043      	str	r3, [r0, #4]
 800a750:	3004      	adds	r0, #4
 800a752:	4288      	cmp	r0, r1
 800a754:	d3f4      	bcc.n	800a740 <L_shift+0xc>
 800a756:	bd70      	pop	{r4, r5, r6, pc}

0800a758 <__match>:
 800a758:	b530      	push	{r4, r5, lr}
 800a75a:	6803      	ldr	r3, [r0, #0]
 800a75c:	780c      	ldrb	r4, [r1, #0]
 800a75e:	3301      	adds	r3, #1
 800a760:	2c00      	cmp	r4, #0
 800a762:	d102      	bne.n	800a76a <__match+0x12>
 800a764:	6003      	str	r3, [r0, #0]
 800a766:	2001      	movs	r0, #1
 800a768:	bd30      	pop	{r4, r5, pc}
 800a76a:	781a      	ldrb	r2, [r3, #0]
 800a76c:	0015      	movs	r5, r2
 800a76e:	3d41      	subs	r5, #65	; 0x41
 800a770:	2d19      	cmp	r5, #25
 800a772:	d800      	bhi.n	800a776 <__match+0x1e>
 800a774:	3220      	adds	r2, #32
 800a776:	3101      	adds	r1, #1
 800a778:	42a2      	cmp	r2, r4
 800a77a:	d0ef      	beq.n	800a75c <__match+0x4>
 800a77c:	2000      	movs	r0, #0
 800a77e:	e7f3      	b.n	800a768 <__match+0x10>

0800a780 <__hexnan>:
 800a780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a782:	680b      	ldr	r3, [r1, #0]
 800a784:	b08b      	sub	sp, #44	; 0x2c
 800a786:	9201      	str	r2, [sp, #4]
 800a788:	9901      	ldr	r1, [sp, #4]
 800a78a:	115a      	asrs	r2, r3, #5
 800a78c:	0092      	lsls	r2, r2, #2
 800a78e:	188a      	adds	r2, r1, r2
 800a790:	9202      	str	r2, [sp, #8]
 800a792:	0019      	movs	r1, r3
 800a794:	221f      	movs	r2, #31
 800a796:	4011      	ands	r1, r2
 800a798:	9008      	str	r0, [sp, #32]
 800a79a:	9106      	str	r1, [sp, #24]
 800a79c:	4213      	tst	r3, r2
 800a79e:	d002      	beq.n	800a7a6 <__hexnan+0x26>
 800a7a0:	9b02      	ldr	r3, [sp, #8]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	9302      	str	r3, [sp, #8]
 800a7a6:	9b02      	ldr	r3, [sp, #8]
 800a7a8:	2500      	movs	r5, #0
 800a7aa:	1f1f      	subs	r7, r3, #4
 800a7ac:	003e      	movs	r6, r7
 800a7ae:	003c      	movs	r4, r7
 800a7b0:	9b08      	ldr	r3, [sp, #32]
 800a7b2:	603d      	str	r5, [r7, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	9507      	str	r5, [sp, #28]
 800a7b8:	9305      	str	r3, [sp, #20]
 800a7ba:	9503      	str	r5, [sp, #12]
 800a7bc:	9b05      	ldr	r3, [sp, #20]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c2:	9b05      	ldr	r3, [sp, #20]
 800a7c4:	785b      	ldrb	r3, [r3, #1]
 800a7c6:	9304      	str	r3, [sp, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d028      	beq.n	800a81e <__hexnan+0x9e>
 800a7cc:	9804      	ldr	r0, [sp, #16]
 800a7ce:	f7ff fd78 	bl	800a2c2 <__hexdig_fun>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d154      	bne.n	800a880 <__hexnan+0x100>
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	2b20      	cmp	r3, #32
 800a7da:	d819      	bhi.n	800a810 <__hexnan+0x90>
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	9a07      	ldr	r2, [sp, #28]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	dd12      	ble.n	800a80a <__hexnan+0x8a>
 800a7e4:	42b4      	cmp	r4, r6
 800a7e6:	d206      	bcs.n	800a7f6 <__hexnan+0x76>
 800a7e8:	2d07      	cmp	r5, #7
 800a7ea:	dc04      	bgt.n	800a7f6 <__hexnan+0x76>
 800a7ec:	002a      	movs	r2, r5
 800a7ee:	0031      	movs	r1, r6
 800a7f0:	0020      	movs	r0, r4
 800a7f2:	f7ff ff9f 	bl	800a734 <L_shift>
 800a7f6:	9b01      	ldr	r3, [sp, #4]
 800a7f8:	2508      	movs	r5, #8
 800a7fa:	429c      	cmp	r4, r3
 800a7fc:	d905      	bls.n	800a80a <__hexnan+0x8a>
 800a7fe:	1f26      	subs	r6, r4, #4
 800a800:	2500      	movs	r5, #0
 800a802:	0034      	movs	r4, r6
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	6035      	str	r5, [r6, #0]
 800a808:	9307      	str	r3, [sp, #28]
 800a80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80c:	9305      	str	r3, [sp, #20]
 800a80e:	e7d5      	b.n	800a7bc <__hexnan+0x3c>
 800a810:	9b04      	ldr	r3, [sp, #16]
 800a812:	2b29      	cmp	r3, #41	; 0x29
 800a814:	d159      	bne.n	800a8ca <__hexnan+0x14a>
 800a816:	9b05      	ldr	r3, [sp, #20]
 800a818:	9a08      	ldr	r2, [sp, #32]
 800a81a:	3302      	adds	r3, #2
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	9b03      	ldr	r3, [sp, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d052      	beq.n	800a8ca <__hexnan+0x14a>
 800a824:	42b4      	cmp	r4, r6
 800a826:	d206      	bcs.n	800a836 <__hexnan+0xb6>
 800a828:	2d07      	cmp	r5, #7
 800a82a:	dc04      	bgt.n	800a836 <__hexnan+0xb6>
 800a82c:	002a      	movs	r2, r5
 800a82e:	0031      	movs	r1, r6
 800a830:	0020      	movs	r0, r4
 800a832:	f7ff ff7f 	bl	800a734 <L_shift>
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	429c      	cmp	r4, r3
 800a83a:	d935      	bls.n	800a8a8 <__hexnan+0x128>
 800a83c:	001a      	movs	r2, r3
 800a83e:	0023      	movs	r3, r4
 800a840:	cb02      	ldmia	r3!, {r1}
 800a842:	c202      	stmia	r2!, {r1}
 800a844:	429f      	cmp	r7, r3
 800a846:	d2fb      	bcs.n	800a840 <__hexnan+0xc0>
 800a848:	9b02      	ldr	r3, [sp, #8]
 800a84a:	1c62      	adds	r2, r4, #1
 800a84c:	1ed9      	subs	r1, r3, #3
 800a84e:	2304      	movs	r3, #4
 800a850:	4291      	cmp	r1, r2
 800a852:	d305      	bcc.n	800a860 <__hexnan+0xe0>
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	3b04      	subs	r3, #4
 800a858:	1b1b      	subs	r3, r3, r4
 800a85a:	089b      	lsrs	r3, r3, #2
 800a85c:	3301      	adds	r3, #1
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	9a01      	ldr	r2, [sp, #4]
 800a862:	18d3      	adds	r3, r2, r3
 800a864:	2200      	movs	r2, #0
 800a866:	c304      	stmia	r3!, {r2}
 800a868:	429f      	cmp	r7, r3
 800a86a:	d2fc      	bcs.n	800a866 <__hexnan+0xe6>
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d104      	bne.n	800a87c <__hexnan+0xfc>
 800a872:	9b01      	ldr	r3, [sp, #4]
 800a874:	429f      	cmp	r7, r3
 800a876:	d126      	bne.n	800a8c6 <__hexnan+0x146>
 800a878:	2301      	movs	r3, #1
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	2005      	movs	r0, #5
 800a87e:	e025      	b.n	800a8cc <__hexnan+0x14c>
 800a880:	9b03      	ldr	r3, [sp, #12]
 800a882:	3501      	adds	r5, #1
 800a884:	3301      	adds	r3, #1
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	2d08      	cmp	r5, #8
 800a88a:	dd06      	ble.n	800a89a <__hexnan+0x11a>
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	429c      	cmp	r4, r3
 800a890:	d9bb      	bls.n	800a80a <__hexnan+0x8a>
 800a892:	2300      	movs	r3, #0
 800a894:	2501      	movs	r5, #1
 800a896:	3c04      	subs	r4, #4
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	220f      	movs	r2, #15
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	4010      	ands	r0, r2
 800a8a0:	011b      	lsls	r3, r3, #4
 800a8a2:	4303      	orrs	r3, r0
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	e7b0      	b.n	800a80a <__hexnan+0x8a>
 800a8a8:	9b06      	ldr	r3, [sp, #24]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0de      	beq.n	800a86c <__hexnan+0xec>
 800a8ae:	2320      	movs	r3, #32
 800a8b0:	9a06      	ldr	r2, [sp, #24]
 800a8b2:	9902      	ldr	r1, [sp, #8]
 800a8b4:	1a9b      	subs	r3, r3, r2
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4252      	negs	r2, r2
 800a8ba:	40da      	lsrs	r2, r3
 800a8bc:	3904      	subs	r1, #4
 800a8be:	680b      	ldr	r3, [r1, #0]
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	600b      	str	r3, [r1, #0]
 800a8c4:	e7d2      	b.n	800a86c <__hexnan+0xec>
 800a8c6:	3f04      	subs	r7, #4
 800a8c8:	e7d0      	b.n	800a86c <__hexnan+0xec>
 800a8ca:	2004      	movs	r0, #4
 800a8cc:	b00b      	add	sp, #44	; 0x2c
 800a8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8d0 <__ascii_mbtowc>:
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	2900      	cmp	r1, #0
 800a8d4:	d100      	bne.n	800a8d8 <__ascii_mbtowc+0x8>
 800a8d6:	a901      	add	r1, sp, #4
 800a8d8:	1e10      	subs	r0, r2, #0
 800a8da:	d006      	beq.n	800a8ea <__ascii_mbtowc+0x1a>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d006      	beq.n	800a8ee <__ascii_mbtowc+0x1e>
 800a8e0:	7813      	ldrb	r3, [r2, #0]
 800a8e2:	600b      	str	r3, [r1, #0]
 800a8e4:	7810      	ldrb	r0, [r2, #0]
 800a8e6:	1e43      	subs	r3, r0, #1
 800a8e8:	4198      	sbcs	r0, r3
 800a8ea:	b002      	add	sp, #8
 800a8ec:	4770      	bx	lr
 800a8ee:	2002      	movs	r0, #2
 800a8f0:	4240      	negs	r0, r0
 800a8f2:	e7fa      	b.n	800a8ea <__ascii_mbtowc+0x1a>

0800a8f4 <_Balloc>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	69c5      	ldr	r5, [r0, #28]
 800a8f8:	0006      	movs	r6, r0
 800a8fa:	000c      	movs	r4, r1
 800a8fc:	2d00      	cmp	r5, #0
 800a8fe:	d10e      	bne.n	800a91e <_Balloc+0x2a>
 800a900:	2010      	movs	r0, #16
 800a902:	f7fc fd03 	bl	800730c <malloc>
 800a906:	1e02      	subs	r2, r0, #0
 800a908:	61f0      	str	r0, [r6, #28]
 800a90a:	d104      	bne.n	800a916 <_Balloc+0x22>
 800a90c:	216b      	movs	r1, #107	; 0x6b
 800a90e:	4b19      	ldr	r3, [pc, #100]	; (800a974 <_Balloc+0x80>)
 800a910:	4819      	ldr	r0, [pc, #100]	; (800a978 <_Balloc+0x84>)
 800a912:	f001 fa85 	bl	800be20 <__assert_func>
 800a916:	6045      	str	r5, [r0, #4]
 800a918:	6085      	str	r5, [r0, #8]
 800a91a:	6005      	str	r5, [r0, #0]
 800a91c:	60c5      	str	r5, [r0, #12]
 800a91e:	69f5      	ldr	r5, [r6, #28]
 800a920:	68eb      	ldr	r3, [r5, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d013      	beq.n	800a94e <_Balloc+0x5a>
 800a926:	69f3      	ldr	r3, [r6, #28]
 800a928:	00a2      	lsls	r2, r4, #2
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	189b      	adds	r3, r3, r2
 800a92e:	6818      	ldr	r0, [r3, #0]
 800a930:	2800      	cmp	r0, #0
 800a932:	d118      	bne.n	800a966 <_Balloc+0x72>
 800a934:	2101      	movs	r1, #1
 800a936:	000d      	movs	r5, r1
 800a938:	40a5      	lsls	r5, r4
 800a93a:	1d6a      	adds	r2, r5, #5
 800a93c:	0030      	movs	r0, r6
 800a93e:	0092      	lsls	r2, r2, #2
 800a940:	f001 fa8c 	bl	800be5c <_calloc_r>
 800a944:	2800      	cmp	r0, #0
 800a946:	d00c      	beq.n	800a962 <_Balloc+0x6e>
 800a948:	6044      	str	r4, [r0, #4]
 800a94a:	6085      	str	r5, [r0, #8]
 800a94c:	e00d      	b.n	800a96a <_Balloc+0x76>
 800a94e:	2221      	movs	r2, #33	; 0x21
 800a950:	2104      	movs	r1, #4
 800a952:	0030      	movs	r0, r6
 800a954:	f001 fa82 	bl	800be5c <_calloc_r>
 800a958:	69f3      	ldr	r3, [r6, #28]
 800a95a:	60e8      	str	r0, [r5, #12]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e1      	bne.n	800a926 <_Balloc+0x32>
 800a962:	2000      	movs	r0, #0
 800a964:	bd70      	pop	{r4, r5, r6, pc}
 800a966:	6802      	ldr	r2, [r0, #0]
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	2300      	movs	r3, #0
 800a96c:	6103      	str	r3, [r0, #16]
 800a96e:	60c3      	str	r3, [r0, #12]
 800a970:	e7f8      	b.n	800a964 <_Balloc+0x70>
 800a972:	46c0      	nop			; (mov r8, r8)
 800a974:	0800c9a5 	.word	0x0800c9a5
 800a978:	0800ca85 	.word	0x0800ca85

0800a97c <_Bfree>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	69c6      	ldr	r6, [r0, #28]
 800a980:	0005      	movs	r5, r0
 800a982:	000c      	movs	r4, r1
 800a984:	2e00      	cmp	r6, #0
 800a986:	d10e      	bne.n	800a9a6 <_Bfree+0x2a>
 800a988:	2010      	movs	r0, #16
 800a98a:	f7fc fcbf 	bl	800730c <malloc>
 800a98e:	1e02      	subs	r2, r0, #0
 800a990:	61e8      	str	r0, [r5, #28]
 800a992:	d104      	bne.n	800a99e <_Bfree+0x22>
 800a994:	218f      	movs	r1, #143	; 0x8f
 800a996:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <_Bfree+0x40>)
 800a998:	4809      	ldr	r0, [pc, #36]	; (800a9c0 <_Bfree+0x44>)
 800a99a:	f001 fa41 	bl	800be20 <__assert_func>
 800a99e:	6046      	str	r6, [r0, #4]
 800a9a0:	6086      	str	r6, [r0, #8]
 800a9a2:	6006      	str	r6, [r0, #0]
 800a9a4:	60c6      	str	r6, [r0, #12]
 800a9a6:	2c00      	cmp	r4, #0
 800a9a8:	d007      	beq.n	800a9ba <_Bfree+0x3e>
 800a9aa:	69eb      	ldr	r3, [r5, #28]
 800a9ac:	6862      	ldr	r2, [r4, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	0092      	lsls	r2, r2, #2
 800a9b2:	189b      	adds	r3, r3, r2
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	6022      	str	r2, [r4, #0]
 800a9b8:	601c      	str	r4, [r3, #0]
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}
 800a9bc:	0800c9a5 	.word	0x0800c9a5
 800a9c0:	0800ca85 	.word	0x0800ca85

0800a9c4 <__multadd>:
 800a9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9c6:	000e      	movs	r6, r1
 800a9c8:	9001      	str	r0, [sp, #4]
 800a9ca:	000c      	movs	r4, r1
 800a9cc:	001d      	movs	r5, r3
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	690f      	ldr	r7, [r1, #16]
 800a9d2:	3614      	adds	r6, #20
 800a9d4:	6833      	ldr	r3, [r6, #0]
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	b299      	uxth	r1, r3
 800a9da:	4351      	muls	r1, r2
 800a9dc:	0c1b      	lsrs	r3, r3, #16
 800a9de:	4353      	muls	r3, r2
 800a9e0:	1949      	adds	r1, r1, r5
 800a9e2:	0c0d      	lsrs	r5, r1, #16
 800a9e4:	195b      	adds	r3, r3, r5
 800a9e6:	0c1d      	lsrs	r5, r3, #16
 800a9e8:	b289      	uxth	r1, r1
 800a9ea:	041b      	lsls	r3, r3, #16
 800a9ec:	185b      	adds	r3, r3, r1
 800a9ee:	c608      	stmia	r6!, {r3}
 800a9f0:	4287      	cmp	r7, r0
 800a9f2:	dcef      	bgt.n	800a9d4 <__multadd+0x10>
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	d022      	beq.n	800aa3e <__multadd+0x7a>
 800a9f8:	68a3      	ldr	r3, [r4, #8]
 800a9fa:	42bb      	cmp	r3, r7
 800a9fc:	dc19      	bgt.n	800aa32 <__multadd+0x6e>
 800a9fe:	6861      	ldr	r1, [r4, #4]
 800aa00:	9801      	ldr	r0, [sp, #4]
 800aa02:	3101      	adds	r1, #1
 800aa04:	f7ff ff76 	bl	800a8f4 <_Balloc>
 800aa08:	1e06      	subs	r6, r0, #0
 800aa0a:	d105      	bne.n	800aa18 <__multadd+0x54>
 800aa0c:	0032      	movs	r2, r6
 800aa0e:	21ba      	movs	r1, #186	; 0xba
 800aa10:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <__multadd+0x80>)
 800aa12:	480d      	ldr	r0, [pc, #52]	; (800aa48 <__multadd+0x84>)
 800aa14:	f001 fa04 	bl	800be20 <__assert_func>
 800aa18:	0021      	movs	r1, r4
 800aa1a:	6922      	ldr	r2, [r4, #16]
 800aa1c:	310c      	adds	r1, #12
 800aa1e:	3202      	adds	r2, #2
 800aa20:	0092      	lsls	r2, r2, #2
 800aa22:	300c      	adds	r0, #12
 800aa24:	f7fe fcfc 	bl	8009420 <memcpy>
 800aa28:	0021      	movs	r1, r4
 800aa2a:	9801      	ldr	r0, [sp, #4]
 800aa2c:	f7ff ffa6 	bl	800a97c <_Bfree>
 800aa30:	0034      	movs	r4, r6
 800aa32:	1d3b      	adds	r3, r7, #4
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	18e3      	adds	r3, r4, r3
 800aa38:	605d      	str	r5, [r3, #4]
 800aa3a:	1c7b      	adds	r3, r7, #1
 800aa3c:	6123      	str	r3, [r4, #16]
 800aa3e:	0020      	movs	r0, r4
 800aa40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa42:	46c0      	nop			; (mov r8, r8)
 800aa44:	0800ca14 	.word	0x0800ca14
 800aa48:	0800ca85 	.word	0x0800ca85

0800aa4c <__s2b>:
 800aa4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa4e:	0006      	movs	r6, r0
 800aa50:	0018      	movs	r0, r3
 800aa52:	000c      	movs	r4, r1
 800aa54:	3008      	adds	r0, #8
 800aa56:	2109      	movs	r1, #9
 800aa58:	9301      	str	r3, [sp, #4]
 800aa5a:	0015      	movs	r5, r2
 800aa5c:	f7f5 fbf8 	bl	8000250 <__divsi3>
 800aa60:	2301      	movs	r3, #1
 800aa62:	2100      	movs	r1, #0
 800aa64:	4283      	cmp	r3, r0
 800aa66:	db0a      	blt.n	800aa7e <__s2b+0x32>
 800aa68:	0030      	movs	r0, r6
 800aa6a:	f7ff ff43 	bl	800a8f4 <_Balloc>
 800aa6e:	1e01      	subs	r1, r0, #0
 800aa70:	d108      	bne.n	800aa84 <__s2b+0x38>
 800aa72:	000a      	movs	r2, r1
 800aa74:	4b19      	ldr	r3, [pc, #100]	; (800aadc <__s2b+0x90>)
 800aa76:	481a      	ldr	r0, [pc, #104]	; (800aae0 <__s2b+0x94>)
 800aa78:	31d3      	adds	r1, #211	; 0xd3
 800aa7a:	f001 f9d1 	bl	800be20 <__assert_func>
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	3101      	adds	r1, #1
 800aa82:	e7ef      	b.n	800aa64 <__s2b+0x18>
 800aa84:	9b08      	ldr	r3, [sp, #32]
 800aa86:	6143      	str	r3, [r0, #20]
 800aa88:	2301      	movs	r3, #1
 800aa8a:	6103      	str	r3, [r0, #16]
 800aa8c:	2d09      	cmp	r5, #9
 800aa8e:	dd18      	ble.n	800aac2 <__s2b+0x76>
 800aa90:	0023      	movs	r3, r4
 800aa92:	3309      	adds	r3, #9
 800aa94:	001f      	movs	r7, r3
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	1964      	adds	r4, r4, r5
 800aa9a:	783b      	ldrb	r3, [r7, #0]
 800aa9c:	220a      	movs	r2, #10
 800aa9e:	0030      	movs	r0, r6
 800aaa0:	3b30      	subs	r3, #48	; 0x30
 800aaa2:	f7ff ff8f 	bl	800a9c4 <__multadd>
 800aaa6:	3701      	adds	r7, #1
 800aaa8:	0001      	movs	r1, r0
 800aaaa:	42a7      	cmp	r7, r4
 800aaac:	d1f5      	bne.n	800aa9a <__s2b+0x4e>
 800aaae:	002c      	movs	r4, r5
 800aab0:	9b00      	ldr	r3, [sp, #0]
 800aab2:	3c08      	subs	r4, #8
 800aab4:	191c      	adds	r4, r3, r4
 800aab6:	002f      	movs	r7, r5
 800aab8:	9b01      	ldr	r3, [sp, #4]
 800aaba:	429f      	cmp	r7, r3
 800aabc:	db04      	blt.n	800aac8 <__s2b+0x7c>
 800aabe:	0008      	movs	r0, r1
 800aac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aac2:	2509      	movs	r5, #9
 800aac4:	340a      	adds	r4, #10
 800aac6:	e7f6      	b.n	800aab6 <__s2b+0x6a>
 800aac8:	1b63      	subs	r3, r4, r5
 800aaca:	5ddb      	ldrb	r3, [r3, r7]
 800aacc:	220a      	movs	r2, #10
 800aace:	0030      	movs	r0, r6
 800aad0:	3b30      	subs	r3, #48	; 0x30
 800aad2:	f7ff ff77 	bl	800a9c4 <__multadd>
 800aad6:	3701      	adds	r7, #1
 800aad8:	0001      	movs	r1, r0
 800aada:	e7ed      	b.n	800aab8 <__s2b+0x6c>
 800aadc:	0800ca14 	.word	0x0800ca14
 800aae0:	0800ca85 	.word	0x0800ca85

0800aae4 <__hi0bits>:
 800aae4:	0003      	movs	r3, r0
 800aae6:	0c02      	lsrs	r2, r0, #16
 800aae8:	2000      	movs	r0, #0
 800aaea:	4282      	cmp	r2, r0
 800aaec:	d101      	bne.n	800aaf2 <__hi0bits+0xe>
 800aaee:	041b      	lsls	r3, r3, #16
 800aaf0:	3010      	adds	r0, #16
 800aaf2:	0e1a      	lsrs	r2, r3, #24
 800aaf4:	d101      	bne.n	800aafa <__hi0bits+0x16>
 800aaf6:	3008      	adds	r0, #8
 800aaf8:	021b      	lsls	r3, r3, #8
 800aafa:	0f1a      	lsrs	r2, r3, #28
 800aafc:	d101      	bne.n	800ab02 <__hi0bits+0x1e>
 800aafe:	3004      	adds	r0, #4
 800ab00:	011b      	lsls	r3, r3, #4
 800ab02:	0f9a      	lsrs	r2, r3, #30
 800ab04:	d101      	bne.n	800ab0a <__hi0bits+0x26>
 800ab06:	3002      	adds	r0, #2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	db03      	blt.n	800ab16 <__hi0bits+0x32>
 800ab0e:	3001      	adds	r0, #1
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	d400      	bmi.n	800ab16 <__hi0bits+0x32>
 800ab14:	2020      	movs	r0, #32
 800ab16:	4770      	bx	lr

0800ab18 <__lo0bits>:
 800ab18:	6803      	ldr	r3, [r0, #0]
 800ab1a:	0001      	movs	r1, r0
 800ab1c:	2207      	movs	r2, #7
 800ab1e:	0018      	movs	r0, r3
 800ab20:	4010      	ands	r0, r2
 800ab22:	4213      	tst	r3, r2
 800ab24:	d00d      	beq.n	800ab42 <__lo0bits+0x2a>
 800ab26:	3a06      	subs	r2, #6
 800ab28:	2000      	movs	r0, #0
 800ab2a:	4213      	tst	r3, r2
 800ab2c:	d105      	bne.n	800ab3a <__lo0bits+0x22>
 800ab2e:	3002      	adds	r0, #2
 800ab30:	4203      	tst	r3, r0
 800ab32:	d003      	beq.n	800ab3c <__lo0bits+0x24>
 800ab34:	40d3      	lsrs	r3, r2
 800ab36:	0010      	movs	r0, r2
 800ab38:	600b      	str	r3, [r1, #0]
 800ab3a:	4770      	bx	lr
 800ab3c:	089b      	lsrs	r3, r3, #2
 800ab3e:	600b      	str	r3, [r1, #0]
 800ab40:	e7fb      	b.n	800ab3a <__lo0bits+0x22>
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	2a00      	cmp	r2, #0
 800ab46:	d101      	bne.n	800ab4c <__lo0bits+0x34>
 800ab48:	2010      	movs	r0, #16
 800ab4a:	0c1b      	lsrs	r3, r3, #16
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	2a00      	cmp	r2, #0
 800ab50:	d101      	bne.n	800ab56 <__lo0bits+0x3e>
 800ab52:	3008      	adds	r0, #8
 800ab54:	0a1b      	lsrs	r3, r3, #8
 800ab56:	071a      	lsls	r2, r3, #28
 800ab58:	d101      	bne.n	800ab5e <__lo0bits+0x46>
 800ab5a:	3004      	adds	r0, #4
 800ab5c:	091b      	lsrs	r3, r3, #4
 800ab5e:	079a      	lsls	r2, r3, #30
 800ab60:	d101      	bne.n	800ab66 <__lo0bits+0x4e>
 800ab62:	3002      	adds	r0, #2
 800ab64:	089b      	lsrs	r3, r3, #2
 800ab66:	07da      	lsls	r2, r3, #31
 800ab68:	d4e9      	bmi.n	800ab3e <__lo0bits+0x26>
 800ab6a:	3001      	adds	r0, #1
 800ab6c:	085b      	lsrs	r3, r3, #1
 800ab6e:	d1e6      	bne.n	800ab3e <__lo0bits+0x26>
 800ab70:	2020      	movs	r0, #32
 800ab72:	e7e2      	b.n	800ab3a <__lo0bits+0x22>

0800ab74 <__i2b>:
 800ab74:	b510      	push	{r4, lr}
 800ab76:	000c      	movs	r4, r1
 800ab78:	2101      	movs	r1, #1
 800ab7a:	f7ff febb 	bl	800a8f4 <_Balloc>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d107      	bne.n	800ab92 <__i2b+0x1e>
 800ab82:	2146      	movs	r1, #70	; 0x46
 800ab84:	4c05      	ldr	r4, [pc, #20]	; (800ab9c <__i2b+0x28>)
 800ab86:	0002      	movs	r2, r0
 800ab88:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <__i2b+0x2c>)
 800ab8a:	0020      	movs	r0, r4
 800ab8c:	31ff      	adds	r1, #255	; 0xff
 800ab8e:	f001 f947 	bl	800be20 <__assert_func>
 800ab92:	2301      	movs	r3, #1
 800ab94:	6144      	str	r4, [r0, #20]
 800ab96:	6103      	str	r3, [r0, #16]
 800ab98:	bd10      	pop	{r4, pc}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	0800ca85 	.word	0x0800ca85
 800aba0:	0800ca14 	.word	0x0800ca14

0800aba4 <__multiply>:
 800aba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aba6:	0015      	movs	r5, r2
 800aba8:	690a      	ldr	r2, [r1, #16]
 800abaa:	692b      	ldr	r3, [r5, #16]
 800abac:	000c      	movs	r4, r1
 800abae:	b08b      	sub	sp, #44	; 0x2c
 800abb0:	429a      	cmp	r2, r3
 800abb2:	da01      	bge.n	800abb8 <__multiply+0x14>
 800abb4:	002c      	movs	r4, r5
 800abb6:	000d      	movs	r5, r1
 800abb8:	6927      	ldr	r7, [r4, #16]
 800abba:	692e      	ldr	r6, [r5, #16]
 800abbc:	6861      	ldr	r1, [r4, #4]
 800abbe:	19bb      	adds	r3, r7, r6
 800abc0:	9303      	str	r3, [sp, #12]
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	19ba      	adds	r2, r7, r6
 800abc6:	4293      	cmp	r3, r2
 800abc8:	da00      	bge.n	800abcc <__multiply+0x28>
 800abca:	3101      	adds	r1, #1
 800abcc:	f7ff fe92 	bl	800a8f4 <_Balloc>
 800abd0:	9002      	str	r0, [sp, #8]
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d106      	bne.n	800abe4 <__multiply+0x40>
 800abd6:	21b1      	movs	r1, #177	; 0xb1
 800abd8:	4b48      	ldr	r3, [pc, #288]	; (800acfc <__multiply+0x158>)
 800abda:	4849      	ldr	r0, [pc, #292]	; (800ad00 <__multiply+0x15c>)
 800abdc:	9a02      	ldr	r2, [sp, #8]
 800abde:	0049      	lsls	r1, r1, #1
 800abe0:	f001 f91e 	bl	800be20 <__assert_func>
 800abe4:	9b02      	ldr	r3, [sp, #8]
 800abe6:	2200      	movs	r2, #0
 800abe8:	3314      	adds	r3, #20
 800abea:	469c      	mov	ip, r3
 800abec:	19bb      	adds	r3, r7, r6
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4463      	add	r3, ip
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	4663      	mov	r3, ip
 800abf6:	9904      	ldr	r1, [sp, #16]
 800abf8:	428b      	cmp	r3, r1
 800abfa:	d32a      	bcc.n	800ac52 <__multiply+0xae>
 800abfc:	0023      	movs	r3, r4
 800abfe:	00bf      	lsls	r7, r7, #2
 800ac00:	3314      	adds	r3, #20
 800ac02:	3514      	adds	r5, #20
 800ac04:	9308      	str	r3, [sp, #32]
 800ac06:	00b6      	lsls	r6, r6, #2
 800ac08:	19db      	adds	r3, r3, r7
 800ac0a:	9305      	str	r3, [sp, #20]
 800ac0c:	19ab      	adds	r3, r5, r6
 800ac0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac10:	2304      	movs	r3, #4
 800ac12:	9306      	str	r3, [sp, #24]
 800ac14:	0023      	movs	r3, r4
 800ac16:	9a05      	ldr	r2, [sp, #20]
 800ac18:	3315      	adds	r3, #21
 800ac1a:	9501      	str	r5, [sp, #4]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d305      	bcc.n	800ac2c <__multiply+0x88>
 800ac20:	1b13      	subs	r3, r2, r4
 800ac22:	3b15      	subs	r3, #21
 800ac24:	089b      	lsrs	r3, r3, #2
 800ac26:	3301      	adds	r3, #1
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	9306      	str	r3, [sp, #24]
 800ac2c:	9b01      	ldr	r3, [sp, #4]
 800ac2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d310      	bcc.n	800ac56 <__multiply+0xb2>
 800ac34:	9b03      	ldr	r3, [sp, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	dd05      	ble.n	800ac46 <__multiply+0xa2>
 800ac3a:	9b04      	ldr	r3, [sp, #16]
 800ac3c:	3b04      	subs	r3, #4
 800ac3e:	9304      	str	r3, [sp, #16]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d056      	beq.n	800acf4 <__multiply+0x150>
 800ac46:	9b02      	ldr	r3, [sp, #8]
 800ac48:	9a03      	ldr	r2, [sp, #12]
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	611a      	str	r2, [r3, #16]
 800ac4e:	b00b      	add	sp, #44	; 0x2c
 800ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac52:	c304      	stmia	r3!, {r2}
 800ac54:	e7cf      	b.n	800abf6 <__multiply+0x52>
 800ac56:	9b01      	ldr	r3, [sp, #4]
 800ac58:	6818      	ldr	r0, [r3, #0]
 800ac5a:	b280      	uxth	r0, r0
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d01e      	beq.n	800ac9e <__multiply+0xfa>
 800ac60:	4667      	mov	r7, ip
 800ac62:	2500      	movs	r5, #0
 800ac64:	9e08      	ldr	r6, [sp, #32]
 800ac66:	ce02      	ldmia	r6!, {r1}
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	9307      	str	r3, [sp, #28]
 800ac6c:	b28b      	uxth	r3, r1
 800ac6e:	4343      	muls	r3, r0
 800ac70:	001a      	movs	r2, r3
 800ac72:	466b      	mov	r3, sp
 800ac74:	8b9b      	ldrh	r3, [r3, #28]
 800ac76:	18d3      	adds	r3, r2, r3
 800ac78:	195b      	adds	r3, r3, r5
 800ac7a:	0c0d      	lsrs	r5, r1, #16
 800ac7c:	4345      	muls	r5, r0
 800ac7e:	9a07      	ldr	r2, [sp, #28]
 800ac80:	0c11      	lsrs	r1, r2, #16
 800ac82:	1869      	adds	r1, r5, r1
 800ac84:	0c1a      	lsrs	r2, r3, #16
 800ac86:	188a      	adds	r2, r1, r2
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	0c15      	lsrs	r5, r2, #16
 800ac8c:	0412      	lsls	r2, r2, #16
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	9b05      	ldr	r3, [sp, #20]
 800ac92:	c704      	stmia	r7!, {r2}
 800ac94:	42b3      	cmp	r3, r6
 800ac96:	d8e6      	bhi.n	800ac66 <__multiply+0xc2>
 800ac98:	4663      	mov	r3, ip
 800ac9a:	9a06      	ldr	r2, [sp, #24]
 800ac9c:	509d      	str	r5, [r3, r2]
 800ac9e:	9b01      	ldr	r3, [sp, #4]
 800aca0:	6818      	ldr	r0, [r3, #0]
 800aca2:	0c00      	lsrs	r0, r0, #16
 800aca4:	d020      	beq.n	800ace8 <__multiply+0x144>
 800aca6:	4663      	mov	r3, ip
 800aca8:	0025      	movs	r5, r4
 800acaa:	4661      	mov	r1, ip
 800acac:	2700      	movs	r7, #0
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	3514      	adds	r5, #20
 800acb2:	682a      	ldr	r2, [r5, #0]
 800acb4:	680e      	ldr	r6, [r1, #0]
 800acb6:	b292      	uxth	r2, r2
 800acb8:	4342      	muls	r2, r0
 800acba:	0c36      	lsrs	r6, r6, #16
 800acbc:	1992      	adds	r2, r2, r6
 800acbe:	19d2      	adds	r2, r2, r7
 800acc0:	0416      	lsls	r6, r2, #16
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	431e      	orrs	r6, r3
 800acc6:	600e      	str	r6, [r1, #0]
 800acc8:	cd40      	ldmia	r5!, {r6}
 800acca:	684b      	ldr	r3, [r1, #4]
 800accc:	0c36      	lsrs	r6, r6, #16
 800acce:	4346      	muls	r6, r0
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	0c12      	lsrs	r2, r2, #16
 800acd4:	18f3      	adds	r3, r6, r3
 800acd6:	189b      	adds	r3, r3, r2
 800acd8:	9a05      	ldr	r2, [sp, #20]
 800acda:	0c1f      	lsrs	r7, r3, #16
 800acdc:	3104      	adds	r1, #4
 800acde:	42aa      	cmp	r2, r5
 800ace0:	d8e7      	bhi.n	800acb2 <__multiply+0x10e>
 800ace2:	4662      	mov	r2, ip
 800ace4:	9906      	ldr	r1, [sp, #24]
 800ace6:	5053      	str	r3, [r2, r1]
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	3304      	adds	r3, #4
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	2304      	movs	r3, #4
 800acf0:	449c      	add	ip, r3
 800acf2:	e79b      	b.n	800ac2c <__multiply+0x88>
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	9303      	str	r3, [sp, #12]
 800acfa:	e79b      	b.n	800ac34 <__multiply+0x90>
 800acfc:	0800ca14 	.word	0x0800ca14
 800ad00:	0800ca85 	.word	0x0800ca85

0800ad04 <__pow5mult>:
 800ad04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad06:	2303      	movs	r3, #3
 800ad08:	0015      	movs	r5, r2
 800ad0a:	0007      	movs	r7, r0
 800ad0c:	000e      	movs	r6, r1
 800ad0e:	401a      	ands	r2, r3
 800ad10:	421d      	tst	r5, r3
 800ad12:	d008      	beq.n	800ad26 <__pow5mult+0x22>
 800ad14:	4925      	ldr	r1, [pc, #148]	; (800adac <__pow5mult+0xa8>)
 800ad16:	3a01      	subs	r2, #1
 800ad18:	0092      	lsls	r2, r2, #2
 800ad1a:	5852      	ldr	r2, [r2, r1]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	0031      	movs	r1, r6
 800ad20:	f7ff fe50 	bl	800a9c4 <__multadd>
 800ad24:	0006      	movs	r6, r0
 800ad26:	10ad      	asrs	r5, r5, #2
 800ad28:	d03d      	beq.n	800ada6 <__pow5mult+0xa2>
 800ad2a:	69fc      	ldr	r4, [r7, #28]
 800ad2c:	2c00      	cmp	r4, #0
 800ad2e:	d10f      	bne.n	800ad50 <__pow5mult+0x4c>
 800ad30:	2010      	movs	r0, #16
 800ad32:	f7fc faeb 	bl	800730c <malloc>
 800ad36:	1e02      	subs	r2, r0, #0
 800ad38:	61f8      	str	r0, [r7, #28]
 800ad3a:	d105      	bne.n	800ad48 <__pow5mult+0x44>
 800ad3c:	21b4      	movs	r1, #180	; 0xb4
 800ad3e:	4b1c      	ldr	r3, [pc, #112]	; (800adb0 <__pow5mult+0xac>)
 800ad40:	481c      	ldr	r0, [pc, #112]	; (800adb4 <__pow5mult+0xb0>)
 800ad42:	31ff      	adds	r1, #255	; 0xff
 800ad44:	f001 f86c 	bl	800be20 <__assert_func>
 800ad48:	6044      	str	r4, [r0, #4]
 800ad4a:	6084      	str	r4, [r0, #8]
 800ad4c:	6004      	str	r4, [r0, #0]
 800ad4e:	60c4      	str	r4, [r0, #12]
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	689c      	ldr	r4, [r3, #8]
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	2c00      	cmp	r4, #0
 800ad58:	d108      	bne.n	800ad6c <__pow5mult+0x68>
 800ad5a:	0038      	movs	r0, r7
 800ad5c:	4916      	ldr	r1, [pc, #88]	; (800adb8 <__pow5mult+0xb4>)
 800ad5e:	f7ff ff09 	bl	800ab74 <__i2b>
 800ad62:	9b01      	ldr	r3, [sp, #4]
 800ad64:	0004      	movs	r4, r0
 800ad66:	6098      	str	r0, [r3, #8]
 800ad68:	2300      	movs	r3, #0
 800ad6a:	6003      	str	r3, [r0, #0]
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	421d      	tst	r5, r3
 800ad70:	d00a      	beq.n	800ad88 <__pow5mult+0x84>
 800ad72:	0031      	movs	r1, r6
 800ad74:	0022      	movs	r2, r4
 800ad76:	0038      	movs	r0, r7
 800ad78:	f7ff ff14 	bl	800aba4 <__multiply>
 800ad7c:	0031      	movs	r1, r6
 800ad7e:	9001      	str	r0, [sp, #4]
 800ad80:	0038      	movs	r0, r7
 800ad82:	f7ff fdfb 	bl	800a97c <_Bfree>
 800ad86:	9e01      	ldr	r6, [sp, #4]
 800ad88:	106d      	asrs	r5, r5, #1
 800ad8a:	d00c      	beq.n	800ada6 <__pow5mult+0xa2>
 800ad8c:	6820      	ldr	r0, [r4, #0]
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d107      	bne.n	800ada2 <__pow5mult+0x9e>
 800ad92:	0022      	movs	r2, r4
 800ad94:	0021      	movs	r1, r4
 800ad96:	0038      	movs	r0, r7
 800ad98:	f7ff ff04 	bl	800aba4 <__multiply>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	6020      	str	r0, [r4, #0]
 800ada0:	6003      	str	r3, [r0, #0]
 800ada2:	0004      	movs	r4, r0
 800ada4:	e7e2      	b.n	800ad6c <__pow5mult+0x68>
 800ada6:	0030      	movs	r0, r6
 800ada8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adaa:	46c0      	nop			; (mov r8, r8)
 800adac:	0800cbd0 	.word	0x0800cbd0
 800adb0:	0800c9a5 	.word	0x0800c9a5
 800adb4:	0800ca85 	.word	0x0800ca85
 800adb8:	00000271 	.word	0x00000271

0800adbc <__lshift>:
 800adbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adbe:	000c      	movs	r4, r1
 800adc0:	0017      	movs	r7, r2
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	1155      	asrs	r5, r2, #5
 800adc6:	b087      	sub	sp, #28
 800adc8:	18eb      	adds	r3, r5, r3
 800adca:	9302      	str	r3, [sp, #8]
 800adcc:	3301      	adds	r3, #1
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	6849      	ldr	r1, [r1, #4]
 800add2:	68a3      	ldr	r3, [r4, #8]
 800add4:	9004      	str	r0, [sp, #16]
 800add6:	9a01      	ldr	r2, [sp, #4]
 800add8:	4293      	cmp	r3, r2
 800adda:	db10      	blt.n	800adfe <__lshift+0x42>
 800addc:	9804      	ldr	r0, [sp, #16]
 800adde:	f7ff fd89 	bl	800a8f4 <_Balloc>
 800ade2:	2300      	movs	r3, #0
 800ade4:	0002      	movs	r2, r0
 800ade6:	0006      	movs	r6, r0
 800ade8:	0019      	movs	r1, r3
 800adea:	3214      	adds	r2, #20
 800adec:	4298      	cmp	r0, r3
 800adee:	d10c      	bne.n	800ae0a <__lshift+0x4e>
 800adf0:	31df      	adds	r1, #223	; 0xdf
 800adf2:	0032      	movs	r2, r6
 800adf4:	4b26      	ldr	r3, [pc, #152]	; (800ae90 <__lshift+0xd4>)
 800adf6:	4827      	ldr	r0, [pc, #156]	; (800ae94 <__lshift+0xd8>)
 800adf8:	31ff      	adds	r1, #255	; 0xff
 800adfa:	f001 f811 	bl	800be20 <__assert_func>
 800adfe:	3101      	adds	r1, #1
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	e7e8      	b.n	800add6 <__lshift+0x1a>
 800ae04:	0098      	lsls	r0, r3, #2
 800ae06:	5011      	str	r1, [r2, r0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	42ab      	cmp	r3, r5
 800ae0c:	dbfa      	blt.n	800ae04 <__lshift+0x48>
 800ae0e:	43eb      	mvns	r3, r5
 800ae10:	17db      	asrs	r3, r3, #31
 800ae12:	401d      	ands	r5, r3
 800ae14:	211f      	movs	r1, #31
 800ae16:	0023      	movs	r3, r4
 800ae18:	0038      	movs	r0, r7
 800ae1a:	00ad      	lsls	r5, r5, #2
 800ae1c:	1955      	adds	r5, r2, r5
 800ae1e:	6922      	ldr	r2, [r4, #16]
 800ae20:	3314      	adds	r3, #20
 800ae22:	0092      	lsls	r2, r2, #2
 800ae24:	4008      	ands	r0, r1
 800ae26:	4684      	mov	ip, r0
 800ae28:	189a      	adds	r2, r3, r2
 800ae2a:	420f      	tst	r7, r1
 800ae2c:	d02a      	beq.n	800ae84 <__lshift+0xc8>
 800ae2e:	3101      	adds	r1, #1
 800ae30:	1a09      	subs	r1, r1, r0
 800ae32:	9105      	str	r1, [sp, #20]
 800ae34:	2100      	movs	r1, #0
 800ae36:	9503      	str	r5, [sp, #12]
 800ae38:	4667      	mov	r7, ip
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	40b8      	lsls	r0, r7
 800ae3e:	4308      	orrs	r0, r1
 800ae40:	9903      	ldr	r1, [sp, #12]
 800ae42:	c101      	stmia	r1!, {r0}
 800ae44:	9103      	str	r1, [sp, #12]
 800ae46:	9805      	ldr	r0, [sp, #20]
 800ae48:	cb02      	ldmia	r3!, {r1}
 800ae4a:	40c1      	lsrs	r1, r0
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d8f3      	bhi.n	800ae38 <__lshift+0x7c>
 800ae50:	0020      	movs	r0, r4
 800ae52:	3015      	adds	r0, #21
 800ae54:	2304      	movs	r3, #4
 800ae56:	4282      	cmp	r2, r0
 800ae58:	d304      	bcc.n	800ae64 <__lshift+0xa8>
 800ae5a:	1b13      	subs	r3, r2, r4
 800ae5c:	3b15      	subs	r3, #21
 800ae5e:	089b      	lsrs	r3, r3, #2
 800ae60:	3301      	adds	r3, #1
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	50e9      	str	r1, [r5, r3]
 800ae66:	2900      	cmp	r1, #0
 800ae68:	d002      	beq.n	800ae70 <__lshift+0xb4>
 800ae6a:	9b02      	ldr	r3, [sp, #8]
 800ae6c:	3302      	adds	r3, #2
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	9b01      	ldr	r3, [sp, #4]
 800ae72:	9804      	ldr	r0, [sp, #16]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	0021      	movs	r1, r4
 800ae78:	6133      	str	r3, [r6, #16]
 800ae7a:	f7ff fd7f 	bl	800a97c <_Bfree>
 800ae7e:	0030      	movs	r0, r6
 800ae80:	b007      	add	sp, #28
 800ae82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae84:	cb02      	ldmia	r3!, {r1}
 800ae86:	c502      	stmia	r5!, {r1}
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d8fb      	bhi.n	800ae84 <__lshift+0xc8>
 800ae8c:	e7f0      	b.n	800ae70 <__lshift+0xb4>
 800ae8e:	46c0      	nop			; (mov r8, r8)
 800ae90:	0800ca14 	.word	0x0800ca14
 800ae94:	0800ca85 	.word	0x0800ca85

0800ae98 <__mcmp>:
 800ae98:	b530      	push	{r4, r5, lr}
 800ae9a:	690b      	ldr	r3, [r1, #16]
 800ae9c:	6904      	ldr	r4, [r0, #16]
 800ae9e:	0002      	movs	r2, r0
 800aea0:	1ae0      	subs	r0, r4, r3
 800aea2:	429c      	cmp	r4, r3
 800aea4:	d10e      	bne.n	800aec4 <__mcmp+0x2c>
 800aea6:	3214      	adds	r2, #20
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	3114      	adds	r1, #20
 800aeac:	0014      	movs	r4, r2
 800aeae:	18c9      	adds	r1, r1, r3
 800aeb0:	18d2      	adds	r2, r2, r3
 800aeb2:	3a04      	subs	r2, #4
 800aeb4:	3904      	subs	r1, #4
 800aeb6:	6815      	ldr	r5, [r2, #0]
 800aeb8:	680b      	ldr	r3, [r1, #0]
 800aeba:	429d      	cmp	r5, r3
 800aebc:	d003      	beq.n	800aec6 <__mcmp+0x2e>
 800aebe:	2001      	movs	r0, #1
 800aec0:	429d      	cmp	r5, r3
 800aec2:	d303      	bcc.n	800aecc <__mcmp+0x34>
 800aec4:	bd30      	pop	{r4, r5, pc}
 800aec6:	4294      	cmp	r4, r2
 800aec8:	d3f3      	bcc.n	800aeb2 <__mcmp+0x1a>
 800aeca:	e7fb      	b.n	800aec4 <__mcmp+0x2c>
 800aecc:	4240      	negs	r0, r0
 800aece:	e7f9      	b.n	800aec4 <__mcmp+0x2c>

0800aed0 <__mdiff>:
 800aed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aed2:	000e      	movs	r6, r1
 800aed4:	0007      	movs	r7, r0
 800aed6:	0011      	movs	r1, r2
 800aed8:	0030      	movs	r0, r6
 800aeda:	b087      	sub	sp, #28
 800aedc:	0014      	movs	r4, r2
 800aede:	f7ff ffdb 	bl	800ae98 <__mcmp>
 800aee2:	1e05      	subs	r5, r0, #0
 800aee4:	d110      	bne.n	800af08 <__mdiff+0x38>
 800aee6:	0001      	movs	r1, r0
 800aee8:	0038      	movs	r0, r7
 800aeea:	f7ff fd03 	bl	800a8f4 <_Balloc>
 800aeee:	1e02      	subs	r2, r0, #0
 800aef0:	d104      	bne.n	800aefc <__mdiff+0x2c>
 800aef2:	4b3f      	ldr	r3, [pc, #252]	; (800aff0 <__mdiff+0x120>)
 800aef4:	483f      	ldr	r0, [pc, #252]	; (800aff4 <__mdiff+0x124>)
 800aef6:	4940      	ldr	r1, [pc, #256]	; (800aff8 <__mdiff+0x128>)
 800aef8:	f000 ff92 	bl	800be20 <__assert_func>
 800aefc:	2301      	movs	r3, #1
 800aefe:	6145      	str	r5, [r0, #20]
 800af00:	6103      	str	r3, [r0, #16]
 800af02:	0010      	movs	r0, r2
 800af04:	b007      	add	sp, #28
 800af06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af08:	2301      	movs	r3, #1
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	2800      	cmp	r0, #0
 800af0e:	db04      	blt.n	800af1a <__mdiff+0x4a>
 800af10:	0023      	movs	r3, r4
 800af12:	0034      	movs	r4, r6
 800af14:	001e      	movs	r6, r3
 800af16:	2300      	movs	r3, #0
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	0038      	movs	r0, r7
 800af1c:	6861      	ldr	r1, [r4, #4]
 800af1e:	f7ff fce9 	bl	800a8f4 <_Balloc>
 800af22:	1e02      	subs	r2, r0, #0
 800af24:	d103      	bne.n	800af2e <__mdiff+0x5e>
 800af26:	4b32      	ldr	r3, [pc, #200]	; (800aff0 <__mdiff+0x120>)
 800af28:	4832      	ldr	r0, [pc, #200]	; (800aff4 <__mdiff+0x124>)
 800af2a:	4934      	ldr	r1, [pc, #208]	; (800affc <__mdiff+0x12c>)
 800af2c:	e7e4      	b.n	800aef8 <__mdiff+0x28>
 800af2e:	9b01      	ldr	r3, [sp, #4]
 800af30:	2700      	movs	r7, #0
 800af32:	60c3      	str	r3, [r0, #12]
 800af34:	6920      	ldr	r0, [r4, #16]
 800af36:	3414      	adds	r4, #20
 800af38:	0083      	lsls	r3, r0, #2
 800af3a:	18e3      	adds	r3, r4, r3
 800af3c:	0021      	movs	r1, r4
 800af3e:	9401      	str	r4, [sp, #4]
 800af40:	0034      	movs	r4, r6
 800af42:	9302      	str	r3, [sp, #8]
 800af44:	6933      	ldr	r3, [r6, #16]
 800af46:	3414      	adds	r4, #20
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	18e3      	adds	r3, r4, r3
 800af4c:	9303      	str	r3, [sp, #12]
 800af4e:	0013      	movs	r3, r2
 800af50:	3314      	adds	r3, #20
 800af52:	469c      	mov	ip, r3
 800af54:	9305      	str	r3, [sp, #20]
 800af56:	9104      	str	r1, [sp, #16]
 800af58:	9b04      	ldr	r3, [sp, #16]
 800af5a:	cc02      	ldmia	r4!, {r1}
 800af5c:	cb20      	ldmia	r3!, {r5}
 800af5e:	9304      	str	r3, [sp, #16]
 800af60:	b2ab      	uxth	r3, r5
 800af62:	19df      	adds	r7, r3, r7
 800af64:	b28b      	uxth	r3, r1
 800af66:	1afb      	subs	r3, r7, r3
 800af68:	0c09      	lsrs	r1, r1, #16
 800af6a:	0c2d      	lsrs	r5, r5, #16
 800af6c:	1a6d      	subs	r5, r5, r1
 800af6e:	1419      	asrs	r1, r3, #16
 800af70:	1869      	adds	r1, r5, r1
 800af72:	b29b      	uxth	r3, r3
 800af74:	140f      	asrs	r7, r1, #16
 800af76:	0409      	lsls	r1, r1, #16
 800af78:	4319      	orrs	r1, r3
 800af7a:	4663      	mov	r3, ip
 800af7c:	c302      	stmia	r3!, {r1}
 800af7e:	469c      	mov	ip, r3
 800af80:	9b03      	ldr	r3, [sp, #12]
 800af82:	42a3      	cmp	r3, r4
 800af84:	d8e8      	bhi.n	800af58 <__mdiff+0x88>
 800af86:	0031      	movs	r1, r6
 800af88:	9c03      	ldr	r4, [sp, #12]
 800af8a:	3115      	adds	r1, #21
 800af8c:	2304      	movs	r3, #4
 800af8e:	428c      	cmp	r4, r1
 800af90:	d304      	bcc.n	800af9c <__mdiff+0xcc>
 800af92:	1ba3      	subs	r3, r4, r6
 800af94:	3b15      	subs	r3, #21
 800af96:	089b      	lsrs	r3, r3, #2
 800af98:	3301      	adds	r3, #1
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	9901      	ldr	r1, [sp, #4]
 800af9e:	18cd      	adds	r5, r1, r3
 800afa0:	9905      	ldr	r1, [sp, #20]
 800afa2:	002e      	movs	r6, r5
 800afa4:	18cb      	adds	r3, r1, r3
 800afa6:	469c      	mov	ip, r3
 800afa8:	9902      	ldr	r1, [sp, #8]
 800afaa:	428e      	cmp	r6, r1
 800afac:	d310      	bcc.n	800afd0 <__mdiff+0x100>
 800afae:	9e02      	ldr	r6, [sp, #8]
 800afb0:	1ee9      	subs	r1, r5, #3
 800afb2:	2400      	movs	r4, #0
 800afb4:	428e      	cmp	r6, r1
 800afb6:	d304      	bcc.n	800afc2 <__mdiff+0xf2>
 800afb8:	0031      	movs	r1, r6
 800afba:	3103      	adds	r1, #3
 800afbc:	1b49      	subs	r1, r1, r5
 800afbe:	0889      	lsrs	r1, r1, #2
 800afc0:	008c      	lsls	r4, r1, #2
 800afc2:	191b      	adds	r3, r3, r4
 800afc4:	3b04      	subs	r3, #4
 800afc6:	6819      	ldr	r1, [r3, #0]
 800afc8:	2900      	cmp	r1, #0
 800afca:	d00f      	beq.n	800afec <__mdiff+0x11c>
 800afcc:	6110      	str	r0, [r2, #16]
 800afce:	e798      	b.n	800af02 <__mdiff+0x32>
 800afd0:	ce02      	ldmia	r6!, {r1}
 800afd2:	b28c      	uxth	r4, r1
 800afd4:	19e4      	adds	r4, r4, r7
 800afd6:	0c0f      	lsrs	r7, r1, #16
 800afd8:	1421      	asrs	r1, r4, #16
 800afda:	1879      	adds	r1, r7, r1
 800afdc:	b2a4      	uxth	r4, r4
 800afde:	140f      	asrs	r7, r1, #16
 800afe0:	0409      	lsls	r1, r1, #16
 800afe2:	4321      	orrs	r1, r4
 800afe4:	4664      	mov	r4, ip
 800afe6:	c402      	stmia	r4!, {r1}
 800afe8:	46a4      	mov	ip, r4
 800afea:	e7dd      	b.n	800afa8 <__mdiff+0xd8>
 800afec:	3801      	subs	r0, #1
 800afee:	e7e9      	b.n	800afc4 <__mdiff+0xf4>
 800aff0:	0800ca14 	.word	0x0800ca14
 800aff4:	0800ca85 	.word	0x0800ca85
 800aff8:	00000237 	.word	0x00000237
 800affc:	00000245 	.word	0x00000245

0800b000 <__ulp>:
 800b000:	2000      	movs	r0, #0
 800b002:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <__ulp+0x30>)
 800b004:	4019      	ands	r1, r3
 800b006:	4b0b      	ldr	r3, [pc, #44]	; (800b034 <__ulp+0x34>)
 800b008:	18c9      	adds	r1, r1, r3
 800b00a:	4281      	cmp	r1, r0
 800b00c:	dc06      	bgt.n	800b01c <__ulp+0x1c>
 800b00e:	4249      	negs	r1, r1
 800b010:	150b      	asrs	r3, r1, #20
 800b012:	2b13      	cmp	r3, #19
 800b014:	dc03      	bgt.n	800b01e <__ulp+0x1e>
 800b016:	2180      	movs	r1, #128	; 0x80
 800b018:	0309      	lsls	r1, r1, #12
 800b01a:	4119      	asrs	r1, r3
 800b01c:	4770      	bx	lr
 800b01e:	3b14      	subs	r3, #20
 800b020:	2001      	movs	r0, #1
 800b022:	2b1e      	cmp	r3, #30
 800b024:	dc02      	bgt.n	800b02c <__ulp+0x2c>
 800b026:	2080      	movs	r0, #128	; 0x80
 800b028:	0600      	lsls	r0, r0, #24
 800b02a:	40d8      	lsrs	r0, r3
 800b02c:	2100      	movs	r1, #0
 800b02e:	e7f5      	b.n	800b01c <__ulp+0x1c>
 800b030:	7ff00000 	.word	0x7ff00000
 800b034:	fcc00000 	.word	0xfcc00000

0800b038 <__b2d>:
 800b038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b03a:	0006      	movs	r6, r0
 800b03c:	6903      	ldr	r3, [r0, #16]
 800b03e:	3614      	adds	r6, #20
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	18f3      	adds	r3, r6, r3
 800b044:	1f1d      	subs	r5, r3, #4
 800b046:	682c      	ldr	r4, [r5, #0]
 800b048:	000f      	movs	r7, r1
 800b04a:	0020      	movs	r0, r4
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	f7ff fd49 	bl	800aae4 <__hi0bits>
 800b052:	2220      	movs	r2, #32
 800b054:	1a12      	subs	r2, r2, r0
 800b056:	603a      	str	r2, [r7, #0]
 800b058:	0003      	movs	r3, r0
 800b05a:	4a1c      	ldr	r2, [pc, #112]	; (800b0cc <__b2d+0x94>)
 800b05c:	280a      	cmp	r0, #10
 800b05e:	dc15      	bgt.n	800b08c <__b2d+0x54>
 800b060:	210b      	movs	r1, #11
 800b062:	0027      	movs	r7, r4
 800b064:	1a09      	subs	r1, r1, r0
 800b066:	40cf      	lsrs	r7, r1
 800b068:	433a      	orrs	r2, r7
 800b06a:	468c      	mov	ip, r1
 800b06c:	0011      	movs	r1, r2
 800b06e:	2200      	movs	r2, #0
 800b070:	42ae      	cmp	r6, r5
 800b072:	d202      	bcs.n	800b07a <__b2d+0x42>
 800b074:	9a01      	ldr	r2, [sp, #4]
 800b076:	3a08      	subs	r2, #8
 800b078:	6812      	ldr	r2, [r2, #0]
 800b07a:	3315      	adds	r3, #21
 800b07c:	409c      	lsls	r4, r3
 800b07e:	4663      	mov	r3, ip
 800b080:	0027      	movs	r7, r4
 800b082:	40da      	lsrs	r2, r3
 800b084:	4317      	orrs	r7, r2
 800b086:	0038      	movs	r0, r7
 800b088:	b003      	add	sp, #12
 800b08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b08c:	2700      	movs	r7, #0
 800b08e:	42ae      	cmp	r6, r5
 800b090:	d202      	bcs.n	800b098 <__b2d+0x60>
 800b092:	9d01      	ldr	r5, [sp, #4]
 800b094:	3d08      	subs	r5, #8
 800b096:	682f      	ldr	r7, [r5, #0]
 800b098:	210b      	movs	r1, #11
 800b09a:	4249      	negs	r1, r1
 800b09c:	468c      	mov	ip, r1
 800b09e:	449c      	add	ip, r3
 800b0a0:	2b0b      	cmp	r3, #11
 800b0a2:	d010      	beq.n	800b0c6 <__b2d+0x8e>
 800b0a4:	4661      	mov	r1, ip
 800b0a6:	2320      	movs	r3, #32
 800b0a8:	408c      	lsls	r4, r1
 800b0aa:	1a5b      	subs	r3, r3, r1
 800b0ac:	0039      	movs	r1, r7
 800b0ae:	40d9      	lsrs	r1, r3
 800b0b0:	430c      	orrs	r4, r1
 800b0b2:	4322      	orrs	r2, r4
 800b0b4:	0011      	movs	r1, r2
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	42b5      	cmp	r5, r6
 800b0ba:	d901      	bls.n	800b0c0 <__b2d+0x88>
 800b0bc:	3d04      	subs	r5, #4
 800b0be:	682a      	ldr	r2, [r5, #0]
 800b0c0:	4664      	mov	r4, ip
 800b0c2:	40a7      	lsls	r7, r4
 800b0c4:	e7dd      	b.n	800b082 <__b2d+0x4a>
 800b0c6:	4322      	orrs	r2, r4
 800b0c8:	0011      	movs	r1, r2
 800b0ca:	e7dc      	b.n	800b086 <__b2d+0x4e>
 800b0cc:	3ff00000 	.word	0x3ff00000

0800b0d0 <__d2b>:
 800b0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0d2:	2101      	movs	r1, #1
 800b0d4:	0014      	movs	r4, r2
 800b0d6:	001d      	movs	r5, r3
 800b0d8:	9f08      	ldr	r7, [sp, #32]
 800b0da:	f7ff fc0b 	bl	800a8f4 <_Balloc>
 800b0de:	1e06      	subs	r6, r0, #0
 800b0e0:	d105      	bne.n	800b0ee <__d2b+0x1e>
 800b0e2:	0032      	movs	r2, r6
 800b0e4:	4b24      	ldr	r3, [pc, #144]	; (800b178 <__d2b+0xa8>)
 800b0e6:	4825      	ldr	r0, [pc, #148]	; (800b17c <__d2b+0xac>)
 800b0e8:	4925      	ldr	r1, [pc, #148]	; (800b180 <__d2b+0xb0>)
 800b0ea:	f000 fe99 	bl	800be20 <__assert_func>
 800b0ee:	032b      	lsls	r3, r5, #12
 800b0f0:	006d      	lsls	r5, r5, #1
 800b0f2:	0b1b      	lsrs	r3, r3, #12
 800b0f4:	0d6d      	lsrs	r5, r5, #21
 800b0f6:	d125      	bne.n	800b144 <__d2b+0x74>
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	2c00      	cmp	r4, #0
 800b0fc:	d028      	beq.n	800b150 <__d2b+0x80>
 800b0fe:	4668      	mov	r0, sp
 800b100:	9400      	str	r4, [sp, #0]
 800b102:	f7ff fd09 	bl	800ab18 <__lo0bits>
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	9900      	ldr	r1, [sp, #0]
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d01e      	beq.n	800b14c <__d2b+0x7c>
 800b10e:	2220      	movs	r2, #32
 800b110:	001c      	movs	r4, r3
 800b112:	1a12      	subs	r2, r2, r0
 800b114:	4094      	lsls	r4, r2
 800b116:	0022      	movs	r2, r4
 800b118:	40c3      	lsrs	r3, r0
 800b11a:	430a      	orrs	r2, r1
 800b11c:	6172      	str	r2, [r6, #20]
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	9c01      	ldr	r4, [sp, #4]
 800b122:	61b4      	str	r4, [r6, #24]
 800b124:	1e63      	subs	r3, r4, #1
 800b126:	419c      	sbcs	r4, r3
 800b128:	3401      	adds	r4, #1
 800b12a:	6134      	str	r4, [r6, #16]
 800b12c:	2d00      	cmp	r5, #0
 800b12e:	d017      	beq.n	800b160 <__d2b+0x90>
 800b130:	2435      	movs	r4, #53	; 0x35
 800b132:	4b14      	ldr	r3, [pc, #80]	; (800b184 <__d2b+0xb4>)
 800b134:	18ed      	adds	r5, r5, r3
 800b136:	182d      	adds	r5, r5, r0
 800b138:	603d      	str	r5, [r7, #0]
 800b13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13c:	1a24      	subs	r4, r4, r0
 800b13e:	601c      	str	r4, [r3, #0]
 800b140:	0030      	movs	r0, r6
 800b142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b144:	2280      	movs	r2, #128	; 0x80
 800b146:	0352      	lsls	r2, r2, #13
 800b148:	4313      	orrs	r3, r2
 800b14a:	e7d5      	b.n	800b0f8 <__d2b+0x28>
 800b14c:	6171      	str	r1, [r6, #20]
 800b14e:	e7e7      	b.n	800b120 <__d2b+0x50>
 800b150:	a801      	add	r0, sp, #4
 800b152:	f7ff fce1 	bl	800ab18 <__lo0bits>
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	2401      	movs	r4, #1
 800b15a:	6173      	str	r3, [r6, #20]
 800b15c:	3020      	adds	r0, #32
 800b15e:	e7e4      	b.n	800b12a <__d2b+0x5a>
 800b160:	4b09      	ldr	r3, [pc, #36]	; (800b188 <__d2b+0xb8>)
 800b162:	18c0      	adds	r0, r0, r3
 800b164:	4b09      	ldr	r3, [pc, #36]	; (800b18c <__d2b+0xbc>)
 800b166:	6038      	str	r0, [r7, #0]
 800b168:	18e3      	adds	r3, r4, r3
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	18f3      	adds	r3, r6, r3
 800b16e:	6958      	ldr	r0, [r3, #20]
 800b170:	f7ff fcb8 	bl	800aae4 <__hi0bits>
 800b174:	0164      	lsls	r4, r4, #5
 800b176:	e7e0      	b.n	800b13a <__d2b+0x6a>
 800b178:	0800ca14 	.word	0x0800ca14
 800b17c:	0800ca85 	.word	0x0800ca85
 800b180:	0000030f 	.word	0x0000030f
 800b184:	fffffbcd 	.word	0xfffffbcd
 800b188:	fffffbce 	.word	0xfffffbce
 800b18c:	3fffffff 	.word	0x3fffffff

0800b190 <__ratio>:
 800b190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b192:	b087      	sub	sp, #28
 800b194:	000f      	movs	r7, r1
 800b196:	a904      	add	r1, sp, #16
 800b198:	0006      	movs	r6, r0
 800b19a:	f7ff ff4d 	bl	800b038 <__b2d>
 800b19e:	9000      	str	r0, [sp, #0]
 800b1a0:	9101      	str	r1, [sp, #4]
 800b1a2:	9c00      	ldr	r4, [sp, #0]
 800b1a4:	9d01      	ldr	r5, [sp, #4]
 800b1a6:	0038      	movs	r0, r7
 800b1a8:	a905      	add	r1, sp, #20
 800b1aa:	f7ff ff45 	bl	800b038 <__b2d>
 800b1ae:	9002      	str	r0, [sp, #8]
 800b1b0:	9103      	str	r1, [sp, #12]
 800b1b2:	9a02      	ldr	r2, [sp, #8]
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	6930      	ldr	r0, [r6, #16]
 800b1b8:	6939      	ldr	r1, [r7, #16]
 800b1ba:	9e04      	ldr	r6, [sp, #16]
 800b1bc:	1a40      	subs	r0, r0, r1
 800b1be:	9905      	ldr	r1, [sp, #20]
 800b1c0:	0140      	lsls	r0, r0, #5
 800b1c2:	1a71      	subs	r1, r6, r1
 800b1c4:	1841      	adds	r1, r0, r1
 800b1c6:	0508      	lsls	r0, r1, #20
 800b1c8:	2900      	cmp	r1, #0
 800b1ca:	dd07      	ble.n	800b1dc <__ratio+0x4c>
 800b1cc:	9901      	ldr	r1, [sp, #4]
 800b1ce:	1845      	adds	r5, r0, r1
 800b1d0:	0020      	movs	r0, r4
 800b1d2:	0029      	movs	r1, r5
 800b1d4:	f7f5 fe22 	bl	8000e1c <__aeabi_ddiv>
 800b1d8:	b007      	add	sp, #28
 800b1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1dc:	9903      	ldr	r1, [sp, #12]
 800b1de:	1a0b      	subs	r3, r1, r0
 800b1e0:	e7f6      	b.n	800b1d0 <__ratio+0x40>

0800b1e2 <__copybits>:
 800b1e2:	b570      	push	{r4, r5, r6, lr}
 800b1e4:	0014      	movs	r4, r2
 800b1e6:	0005      	movs	r5, r0
 800b1e8:	3901      	subs	r1, #1
 800b1ea:	6913      	ldr	r3, [r2, #16]
 800b1ec:	1149      	asrs	r1, r1, #5
 800b1ee:	3101      	adds	r1, #1
 800b1f0:	0089      	lsls	r1, r1, #2
 800b1f2:	3414      	adds	r4, #20
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	1841      	adds	r1, r0, r1
 800b1f8:	18e3      	adds	r3, r4, r3
 800b1fa:	42a3      	cmp	r3, r4
 800b1fc:	d80d      	bhi.n	800b21a <__copybits+0x38>
 800b1fe:	0014      	movs	r4, r2
 800b200:	3411      	adds	r4, #17
 800b202:	2500      	movs	r5, #0
 800b204:	429c      	cmp	r4, r3
 800b206:	d803      	bhi.n	800b210 <__copybits+0x2e>
 800b208:	1a9b      	subs	r3, r3, r2
 800b20a:	3b11      	subs	r3, #17
 800b20c:	089b      	lsrs	r3, r3, #2
 800b20e:	009d      	lsls	r5, r3, #2
 800b210:	2300      	movs	r3, #0
 800b212:	1940      	adds	r0, r0, r5
 800b214:	4281      	cmp	r1, r0
 800b216:	d803      	bhi.n	800b220 <__copybits+0x3e>
 800b218:	bd70      	pop	{r4, r5, r6, pc}
 800b21a:	cc40      	ldmia	r4!, {r6}
 800b21c:	c540      	stmia	r5!, {r6}
 800b21e:	e7ec      	b.n	800b1fa <__copybits+0x18>
 800b220:	c008      	stmia	r0!, {r3}
 800b222:	e7f7      	b.n	800b214 <__copybits+0x32>

0800b224 <__any_on>:
 800b224:	0002      	movs	r2, r0
 800b226:	6900      	ldr	r0, [r0, #16]
 800b228:	b510      	push	{r4, lr}
 800b22a:	3214      	adds	r2, #20
 800b22c:	114b      	asrs	r3, r1, #5
 800b22e:	4298      	cmp	r0, r3
 800b230:	db13      	blt.n	800b25a <__any_on+0x36>
 800b232:	dd0c      	ble.n	800b24e <__any_on+0x2a>
 800b234:	241f      	movs	r4, #31
 800b236:	0008      	movs	r0, r1
 800b238:	4020      	ands	r0, r4
 800b23a:	4221      	tst	r1, r4
 800b23c:	d007      	beq.n	800b24e <__any_on+0x2a>
 800b23e:	0099      	lsls	r1, r3, #2
 800b240:	588c      	ldr	r4, [r1, r2]
 800b242:	0021      	movs	r1, r4
 800b244:	40c1      	lsrs	r1, r0
 800b246:	4081      	lsls	r1, r0
 800b248:	2001      	movs	r0, #1
 800b24a:	428c      	cmp	r4, r1
 800b24c:	d104      	bne.n	800b258 <__any_on+0x34>
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	18d3      	adds	r3, r2, r3
 800b252:	4293      	cmp	r3, r2
 800b254:	d803      	bhi.n	800b25e <__any_on+0x3a>
 800b256:	2000      	movs	r0, #0
 800b258:	bd10      	pop	{r4, pc}
 800b25a:	0003      	movs	r3, r0
 800b25c:	e7f7      	b.n	800b24e <__any_on+0x2a>
 800b25e:	3b04      	subs	r3, #4
 800b260:	6819      	ldr	r1, [r3, #0]
 800b262:	2900      	cmp	r1, #0
 800b264:	d0f5      	beq.n	800b252 <__any_on+0x2e>
 800b266:	2001      	movs	r0, #1
 800b268:	e7f6      	b.n	800b258 <__any_on+0x34>

0800b26a <__ascii_wctomb>:
 800b26a:	0003      	movs	r3, r0
 800b26c:	1e08      	subs	r0, r1, #0
 800b26e:	d005      	beq.n	800b27c <__ascii_wctomb+0x12>
 800b270:	2aff      	cmp	r2, #255	; 0xff
 800b272:	d904      	bls.n	800b27e <__ascii_wctomb+0x14>
 800b274:	228a      	movs	r2, #138	; 0x8a
 800b276:	2001      	movs	r0, #1
 800b278:	601a      	str	r2, [r3, #0]
 800b27a:	4240      	negs	r0, r0
 800b27c:	4770      	bx	lr
 800b27e:	2001      	movs	r0, #1
 800b280:	700a      	strb	r2, [r1, #0]
 800b282:	e7fb      	b.n	800b27c <__ascii_wctomb+0x12>

0800b284 <__ssputs_r>:
 800b284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b286:	b085      	sub	sp, #20
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	9203      	str	r2, [sp, #12]
 800b28c:	688e      	ldr	r6, [r1, #8]
 800b28e:	9a01      	ldr	r2, [sp, #4]
 800b290:	0007      	movs	r7, r0
 800b292:	000c      	movs	r4, r1
 800b294:	680b      	ldr	r3, [r1, #0]
 800b296:	4296      	cmp	r6, r2
 800b298:	d831      	bhi.n	800b2fe <__ssputs_r+0x7a>
 800b29a:	898a      	ldrh	r2, [r1, #12]
 800b29c:	2190      	movs	r1, #144	; 0x90
 800b29e:	00c9      	lsls	r1, r1, #3
 800b2a0:	420a      	tst	r2, r1
 800b2a2:	d029      	beq.n	800b2f8 <__ssputs_r+0x74>
 800b2a4:	2003      	movs	r0, #3
 800b2a6:	6921      	ldr	r1, [r4, #16]
 800b2a8:	1a5b      	subs	r3, r3, r1
 800b2aa:	9302      	str	r3, [sp, #8]
 800b2ac:	6963      	ldr	r3, [r4, #20]
 800b2ae:	4343      	muls	r3, r0
 800b2b0:	0fdd      	lsrs	r5, r3, #31
 800b2b2:	18ed      	adds	r5, r5, r3
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	9802      	ldr	r0, [sp, #8]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	181b      	adds	r3, r3, r0
 800b2bc:	106d      	asrs	r5, r5, #1
 800b2be:	42ab      	cmp	r3, r5
 800b2c0:	d900      	bls.n	800b2c4 <__ssputs_r+0x40>
 800b2c2:	001d      	movs	r5, r3
 800b2c4:	0552      	lsls	r2, r2, #21
 800b2c6:	d529      	bpl.n	800b31c <__ssputs_r+0x98>
 800b2c8:	0029      	movs	r1, r5
 800b2ca:	0038      	movs	r0, r7
 800b2cc:	f7fc f854 	bl	8007378 <_malloc_r>
 800b2d0:	1e06      	subs	r6, r0, #0
 800b2d2:	d02d      	beq.n	800b330 <__ssputs_r+0xac>
 800b2d4:	9a02      	ldr	r2, [sp, #8]
 800b2d6:	6921      	ldr	r1, [r4, #16]
 800b2d8:	f7fe f8a2 	bl	8009420 <memcpy>
 800b2dc:	89a2      	ldrh	r2, [r4, #12]
 800b2de:	4b19      	ldr	r3, [pc, #100]	; (800b344 <__ssputs_r+0xc0>)
 800b2e0:	401a      	ands	r2, r3
 800b2e2:	2380      	movs	r3, #128	; 0x80
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	81a3      	strh	r3, [r4, #12]
 800b2e8:	9b02      	ldr	r3, [sp, #8]
 800b2ea:	6126      	str	r6, [r4, #16]
 800b2ec:	18f6      	adds	r6, r6, r3
 800b2ee:	6026      	str	r6, [r4, #0]
 800b2f0:	6165      	str	r5, [r4, #20]
 800b2f2:	9e01      	ldr	r6, [sp, #4]
 800b2f4:	1aed      	subs	r5, r5, r3
 800b2f6:	60a5      	str	r5, [r4, #8]
 800b2f8:	9b01      	ldr	r3, [sp, #4]
 800b2fa:	429e      	cmp	r6, r3
 800b2fc:	d900      	bls.n	800b300 <__ssputs_r+0x7c>
 800b2fe:	9e01      	ldr	r6, [sp, #4]
 800b300:	0032      	movs	r2, r6
 800b302:	9903      	ldr	r1, [sp, #12]
 800b304:	6820      	ldr	r0, [r4, #0]
 800b306:	f000 fd77 	bl	800bdf8 <memmove>
 800b30a:	2000      	movs	r0, #0
 800b30c:	68a3      	ldr	r3, [r4, #8]
 800b30e:	1b9b      	subs	r3, r3, r6
 800b310:	60a3      	str	r3, [r4, #8]
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	199b      	adds	r3, r3, r6
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	b005      	add	sp, #20
 800b31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b31c:	002a      	movs	r2, r5
 800b31e:	0038      	movs	r0, r7
 800b320:	f000 fdc9 	bl	800beb6 <_realloc_r>
 800b324:	1e06      	subs	r6, r0, #0
 800b326:	d1df      	bne.n	800b2e8 <__ssputs_r+0x64>
 800b328:	0038      	movs	r0, r7
 800b32a:	6921      	ldr	r1, [r4, #16]
 800b32c:	f7fe ff2a 	bl	800a184 <_free_r>
 800b330:	230c      	movs	r3, #12
 800b332:	2001      	movs	r0, #1
 800b334:	603b      	str	r3, [r7, #0]
 800b336:	89a2      	ldrh	r2, [r4, #12]
 800b338:	3334      	adds	r3, #52	; 0x34
 800b33a:	4313      	orrs	r3, r2
 800b33c:	81a3      	strh	r3, [r4, #12]
 800b33e:	4240      	negs	r0, r0
 800b340:	e7ea      	b.n	800b318 <__ssputs_r+0x94>
 800b342:	46c0      	nop			; (mov r8, r8)
 800b344:	fffffb7f 	.word	0xfffffb7f

0800b348 <_svfiprintf_r>:
 800b348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b34a:	b0a1      	sub	sp, #132	; 0x84
 800b34c:	9003      	str	r0, [sp, #12]
 800b34e:	001d      	movs	r5, r3
 800b350:	898b      	ldrh	r3, [r1, #12]
 800b352:	000f      	movs	r7, r1
 800b354:	0016      	movs	r6, r2
 800b356:	061b      	lsls	r3, r3, #24
 800b358:	d511      	bpl.n	800b37e <_svfiprintf_r+0x36>
 800b35a:	690b      	ldr	r3, [r1, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10e      	bne.n	800b37e <_svfiprintf_r+0x36>
 800b360:	2140      	movs	r1, #64	; 0x40
 800b362:	f7fc f809 	bl	8007378 <_malloc_r>
 800b366:	6038      	str	r0, [r7, #0]
 800b368:	6138      	str	r0, [r7, #16]
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d105      	bne.n	800b37a <_svfiprintf_r+0x32>
 800b36e:	230c      	movs	r3, #12
 800b370:	9a03      	ldr	r2, [sp, #12]
 800b372:	3801      	subs	r0, #1
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	b021      	add	sp, #132	; 0x84
 800b378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b37a:	2340      	movs	r3, #64	; 0x40
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	2300      	movs	r3, #0
 800b380:	ac08      	add	r4, sp, #32
 800b382:	6163      	str	r3, [r4, #20]
 800b384:	3320      	adds	r3, #32
 800b386:	7663      	strb	r3, [r4, #25]
 800b388:	3310      	adds	r3, #16
 800b38a:	76a3      	strb	r3, [r4, #26]
 800b38c:	9507      	str	r5, [sp, #28]
 800b38e:	0035      	movs	r5, r6
 800b390:	782b      	ldrb	r3, [r5, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <_svfiprintf_r+0x52>
 800b396:	2b25      	cmp	r3, #37	; 0x25
 800b398:	d148      	bne.n	800b42c <_svfiprintf_r+0xe4>
 800b39a:	1bab      	subs	r3, r5, r6
 800b39c:	9305      	str	r3, [sp, #20]
 800b39e:	42b5      	cmp	r5, r6
 800b3a0:	d00b      	beq.n	800b3ba <_svfiprintf_r+0x72>
 800b3a2:	0032      	movs	r2, r6
 800b3a4:	0039      	movs	r1, r7
 800b3a6:	9803      	ldr	r0, [sp, #12]
 800b3a8:	f7ff ff6c 	bl	800b284 <__ssputs_r>
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	d100      	bne.n	800b3b2 <_svfiprintf_r+0x6a>
 800b3b0:	e0af      	b.n	800b512 <_svfiprintf_r+0x1ca>
 800b3b2:	6963      	ldr	r3, [r4, #20]
 800b3b4:	9a05      	ldr	r2, [sp, #20]
 800b3b6:	189b      	adds	r3, r3, r2
 800b3b8:	6163      	str	r3, [r4, #20]
 800b3ba:	782b      	ldrb	r3, [r5, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d100      	bne.n	800b3c2 <_svfiprintf_r+0x7a>
 800b3c0:	e0a7      	b.n	800b512 <_svfiprintf_r+0x1ca>
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	4252      	negs	r2, r2
 800b3c8:	6062      	str	r2, [r4, #4]
 800b3ca:	a904      	add	r1, sp, #16
 800b3cc:	3254      	adds	r2, #84	; 0x54
 800b3ce:	1852      	adds	r2, r2, r1
 800b3d0:	1c6e      	adds	r6, r5, #1
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	60e3      	str	r3, [r4, #12]
 800b3d6:	60a3      	str	r3, [r4, #8]
 800b3d8:	7013      	strb	r3, [r2, #0]
 800b3da:	65a3      	str	r3, [r4, #88]	; 0x58
 800b3dc:	4b55      	ldr	r3, [pc, #340]	; (800b534 <_svfiprintf_r+0x1ec>)
 800b3de:	2205      	movs	r2, #5
 800b3e0:	0018      	movs	r0, r3
 800b3e2:	7831      	ldrb	r1, [r6, #0]
 800b3e4:	9305      	str	r3, [sp, #20]
 800b3e6:	f7fe f810 	bl	800940a <memchr>
 800b3ea:	1c75      	adds	r5, r6, #1
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d11f      	bne.n	800b430 <_svfiprintf_r+0xe8>
 800b3f0:	6822      	ldr	r2, [r4, #0]
 800b3f2:	06d3      	lsls	r3, r2, #27
 800b3f4:	d504      	bpl.n	800b400 <_svfiprintf_r+0xb8>
 800b3f6:	2353      	movs	r3, #83	; 0x53
 800b3f8:	a904      	add	r1, sp, #16
 800b3fa:	185b      	adds	r3, r3, r1
 800b3fc:	2120      	movs	r1, #32
 800b3fe:	7019      	strb	r1, [r3, #0]
 800b400:	0713      	lsls	r3, r2, #28
 800b402:	d504      	bpl.n	800b40e <_svfiprintf_r+0xc6>
 800b404:	2353      	movs	r3, #83	; 0x53
 800b406:	a904      	add	r1, sp, #16
 800b408:	185b      	adds	r3, r3, r1
 800b40a:	212b      	movs	r1, #43	; 0x2b
 800b40c:	7019      	strb	r1, [r3, #0]
 800b40e:	7833      	ldrb	r3, [r6, #0]
 800b410:	2b2a      	cmp	r3, #42	; 0x2a
 800b412:	d016      	beq.n	800b442 <_svfiprintf_r+0xfa>
 800b414:	0035      	movs	r5, r6
 800b416:	2100      	movs	r1, #0
 800b418:	200a      	movs	r0, #10
 800b41a:	68e3      	ldr	r3, [r4, #12]
 800b41c:	782a      	ldrb	r2, [r5, #0]
 800b41e:	1c6e      	adds	r6, r5, #1
 800b420:	3a30      	subs	r2, #48	; 0x30
 800b422:	2a09      	cmp	r2, #9
 800b424:	d94e      	bls.n	800b4c4 <_svfiprintf_r+0x17c>
 800b426:	2900      	cmp	r1, #0
 800b428:	d111      	bne.n	800b44e <_svfiprintf_r+0x106>
 800b42a:	e017      	b.n	800b45c <_svfiprintf_r+0x114>
 800b42c:	3501      	adds	r5, #1
 800b42e:	e7af      	b.n	800b390 <_svfiprintf_r+0x48>
 800b430:	9b05      	ldr	r3, [sp, #20]
 800b432:	6822      	ldr	r2, [r4, #0]
 800b434:	1ac0      	subs	r0, r0, r3
 800b436:	2301      	movs	r3, #1
 800b438:	4083      	lsls	r3, r0
 800b43a:	4313      	orrs	r3, r2
 800b43c:	002e      	movs	r6, r5
 800b43e:	6023      	str	r3, [r4, #0]
 800b440:	e7cc      	b.n	800b3dc <_svfiprintf_r+0x94>
 800b442:	9b07      	ldr	r3, [sp, #28]
 800b444:	1d19      	adds	r1, r3, #4
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	9107      	str	r1, [sp, #28]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	db01      	blt.n	800b452 <_svfiprintf_r+0x10a>
 800b44e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b450:	e004      	b.n	800b45c <_svfiprintf_r+0x114>
 800b452:	425b      	negs	r3, r3
 800b454:	60e3      	str	r3, [r4, #12]
 800b456:	2302      	movs	r3, #2
 800b458:	4313      	orrs	r3, r2
 800b45a:	6023      	str	r3, [r4, #0]
 800b45c:	782b      	ldrb	r3, [r5, #0]
 800b45e:	2b2e      	cmp	r3, #46	; 0x2e
 800b460:	d10a      	bne.n	800b478 <_svfiprintf_r+0x130>
 800b462:	786b      	ldrb	r3, [r5, #1]
 800b464:	2b2a      	cmp	r3, #42	; 0x2a
 800b466:	d135      	bne.n	800b4d4 <_svfiprintf_r+0x18c>
 800b468:	9b07      	ldr	r3, [sp, #28]
 800b46a:	3502      	adds	r5, #2
 800b46c:	1d1a      	adds	r2, r3, #4
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	9207      	str	r2, [sp, #28]
 800b472:	2b00      	cmp	r3, #0
 800b474:	db2b      	blt.n	800b4ce <_svfiprintf_r+0x186>
 800b476:	9309      	str	r3, [sp, #36]	; 0x24
 800b478:	4e2f      	ldr	r6, [pc, #188]	; (800b538 <_svfiprintf_r+0x1f0>)
 800b47a:	2203      	movs	r2, #3
 800b47c:	0030      	movs	r0, r6
 800b47e:	7829      	ldrb	r1, [r5, #0]
 800b480:	f7fd ffc3 	bl	800940a <memchr>
 800b484:	2800      	cmp	r0, #0
 800b486:	d006      	beq.n	800b496 <_svfiprintf_r+0x14e>
 800b488:	2340      	movs	r3, #64	; 0x40
 800b48a:	1b80      	subs	r0, r0, r6
 800b48c:	4083      	lsls	r3, r0
 800b48e:	6822      	ldr	r2, [r4, #0]
 800b490:	3501      	adds	r5, #1
 800b492:	4313      	orrs	r3, r2
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	7829      	ldrb	r1, [r5, #0]
 800b498:	2206      	movs	r2, #6
 800b49a:	4828      	ldr	r0, [pc, #160]	; (800b53c <_svfiprintf_r+0x1f4>)
 800b49c:	1c6e      	adds	r6, r5, #1
 800b49e:	7621      	strb	r1, [r4, #24]
 800b4a0:	f7fd ffb3 	bl	800940a <memchr>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d03c      	beq.n	800b522 <_svfiprintf_r+0x1da>
 800b4a8:	4b25      	ldr	r3, [pc, #148]	; (800b540 <_svfiprintf_r+0x1f8>)
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d125      	bne.n	800b4fa <_svfiprintf_r+0x1b2>
 800b4ae:	2207      	movs	r2, #7
 800b4b0:	9b07      	ldr	r3, [sp, #28]
 800b4b2:	3307      	adds	r3, #7
 800b4b4:	4393      	bics	r3, r2
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	9307      	str	r3, [sp, #28]
 800b4ba:	6963      	ldr	r3, [r4, #20]
 800b4bc:	9a04      	ldr	r2, [sp, #16]
 800b4be:	189b      	adds	r3, r3, r2
 800b4c0:	6163      	str	r3, [r4, #20]
 800b4c2:	e764      	b.n	800b38e <_svfiprintf_r+0x46>
 800b4c4:	4343      	muls	r3, r0
 800b4c6:	0035      	movs	r5, r6
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	189b      	adds	r3, r3, r2
 800b4cc:	e7a6      	b.n	800b41c <_svfiprintf_r+0xd4>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	425b      	negs	r3, r3
 800b4d2:	e7d0      	b.n	800b476 <_svfiprintf_r+0x12e>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	200a      	movs	r0, #10
 800b4d8:	001a      	movs	r2, r3
 800b4da:	3501      	adds	r5, #1
 800b4dc:	6063      	str	r3, [r4, #4]
 800b4de:	7829      	ldrb	r1, [r5, #0]
 800b4e0:	1c6e      	adds	r6, r5, #1
 800b4e2:	3930      	subs	r1, #48	; 0x30
 800b4e4:	2909      	cmp	r1, #9
 800b4e6:	d903      	bls.n	800b4f0 <_svfiprintf_r+0x1a8>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d0c5      	beq.n	800b478 <_svfiprintf_r+0x130>
 800b4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b4ee:	e7c3      	b.n	800b478 <_svfiprintf_r+0x130>
 800b4f0:	4342      	muls	r2, r0
 800b4f2:	0035      	movs	r5, r6
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	1852      	adds	r2, r2, r1
 800b4f8:	e7f1      	b.n	800b4de <_svfiprintf_r+0x196>
 800b4fa:	aa07      	add	r2, sp, #28
 800b4fc:	9200      	str	r2, [sp, #0]
 800b4fe:	0021      	movs	r1, r4
 800b500:	003a      	movs	r2, r7
 800b502:	4b10      	ldr	r3, [pc, #64]	; (800b544 <_svfiprintf_r+0x1fc>)
 800b504:	9803      	ldr	r0, [sp, #12]
 800b506:	f7fc ff3f 	bl	8008388 <_printf_float>
 800b50a:	9004      	str	r0, [sp, #16]
 800b50c:	9b04      	ldr	r3, [sp, #16]
 800b50e:	3301      	adds	r3, #1
 800b510:	d1d3      	bne.n	800b4ba <_svfiprintf_r+0x172>
 800b512:	89bb      	ldrh	r3, [r7, #12]
 800b514:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b516:	065b      	lsls	r3, r3, #25
 800b518:	d400      	bmi.n	800b51c <_svfiprintf_r+0x1d4>
 800b51a:	e72c      	b.n	800b376 <_svfiprintf_r+0x2e>
 800b51c:	2001      	movs	r0, #1
 800b51e:	4240      	negs	r0, r0
 800b520:	e729      	b.n	800b376 <_svfiprintf_r+0x2e>
 800b522:	aa07      	add	r2, sp, #28
 800b524:	9200      	str	r2, [sp, #0]
 800b526:	0021      	movs	r1, r4
 800b528:	003a      	movs	r2, r7
 800b52a:	4b06      	ldr	r3, [pc, #24]	; (800b544 <_svfiprintf_r+0x1fc>)
 800b52c:	9803      	ldr	r0, [sp, #12]
 800b52e:	f7fd f9f1 	bl	8008914 <_printf_i>
 800b532:	e7ea      	b.n	800b50a <_svfiprintf_r+0x1c2>
 800b534:	0800cbdc 	.word	0x0800cbdc
 800b538:	0800cbe2 	.word	0x0800cbe2
 800b53c:	0800cbe6 	.word	0x0800cbe6
 800b540:	08008389 	.word	0x08008389
 800b544:	0800b285 	.word	0x0800b285

0800b548 <_sungetc_r>:
 800b548:	b570      	push	{r4, r5, r6, lr}
 800b54a:	0014      	movs	r4, r2
 800b54c:	1c4b      	adds	r3, r1, #1
 800b54e:	d103      	bne.n	800b558 <_sungetc_r+0x10>
 800b550:	2501      	movs	r5, #1
 800b552:	426d      	negs	r5, r5
 800b554:	0028      	movs	r0, r5
 800b556:	bd70      	pop	{r4, r5, r6, pc}
 800b558:	8993      	ldrh	r3, [r2, #12]
 800b55a:	2220      	movs	r2, #32
 800b55c:	4393      	bics	r3, r2
 800b55e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	b2ce      	uxtb	r6, r1
 800b564:	6863      	ldr	r3, [r4, #4]
 800b566:	b2cd      	uxtb	r5, r1
 800b568:	2a00      	cmp	r2, #0
 800b56a:	d010      	beq.n	800b58e <_sungetc_r+0x46>
 800b56c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b56e:	429a      	cmp	r2, r3
 800b570:	dd07      	ble.n	800b582 <_sungetc_r+0x3a>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	3b01      	subs	r3, #1
 800b576:	6023      	str	r3, [r4, #0]
 800b578:	701e      	strb	r6, [r3, #0]
 800b57a:	6863      	ldr	r3, [r4, #4]
 800b57c:	3301      	adds	r3, #1
 800b57e:	6063      	str	r3, [r4, #4]
 800b580:	e7e8      	b.n	800b554 <_sungetc_r+0xc>
 800b582:	0021      	movs	r1, r4
 800b584:	f000 fbfa 	bl	800bd7c <__submore>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d0f2      	beq.n	800b572 <_sungetc_r+0x2a>
 800b58c:	e7e0      	b.n	800b550 <_sungetc_r+0x8>
 800b58e:	6921      	ldr	r1, [r4, #16]
 800b590:	6822      	ldr	r2, [r4, #0]
 800b592:	2900      	cmp	r1, #0
 800b594:	d007      	beq.n	800b5a6 <_sungetc_r+0x5e>
 800b596:	4291      	cmp	r1, r2
 800b598:	d205      	bcs.n	800b5a6 <_sungetc_r+0x5e>
 800b59a:	1e51      	subs	r1, r2, #1
 800b59c:	7808      	ldrb	r0, [r1, #0]
 800b59e:	42a8      	cmp	r0, r5
 800b5a0:	d101      	bne.n	800b5a6 <_sungetc_r+0x5e>
 800b5a2:	6021      	str	r1, [r4, #0]
 800b5a4:	e7ea      	b.n	800b57c <_sungetc_r+0x34>
 800b5a6:	6423      	str	r3, [r4, #64]	; 0x40
 800b5a8:	0023      	movs	r3, r4
 800b5aa:	3344      	adds	r3, #68	; 0x44
 800b5ac:	6363      	str	r3, [r4, #52]	; 0x34
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b5b2:	0023      	movs	r3, r4
 800b5b4:	3346      	adds	r3, #70	; 0x46
 800b5b6:	63e2      	str	r2, [r4, #60]	; 0x3c
 800b5b8:	701e      	strb	r6, [r3, #0]
 800b5ba:	6023      	str	r3, [r4, #0]
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e7de      	b.n	800b57e <_sungetc_r+0x36>

0800b5c0 <__ssrefill_r>:
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	000c      	movs	r4, r1
 800b5c4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b5c6:	2900      	cmp	r1, #0
 800b5c8:	d00e      	beq.n	800b5e8 <__ssrefill_r+0x28>
 800b5ca:	0023      	movs	r3, r4
 800b5cc:	3344      	adds	r3, #68	; 0x44
 800b5ce:	4299      	cmp	r1, r3
 800b5d0:	d001      	beq.n	800b5d6 <__ssrefill_r+0x16>
 800b5d2:	f7fe fdd7 	bl	800a184 <_free_r>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5da:	6360      	str	r0, [r4, #52]	; 0x34
 800b5dc:	6063      	str	r3, [r4, #4]
 800b5de:	4283      	cmp	r3, r0
 800b5e0:	d002      	beq.n	800b5e8 <__ssrefill_r+0x28>
 800b5e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd10      	pop	{r4, pc}
 800b5e8:	6923      	ldr	r3, [r4, #16]
 800b5ea:	2001      	movs	r0, #1
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	89a2      	ldrh	r2, [r4, #12]
 800b5f2:	6063      	str	r3, [r4, #4]
 800b5f4:	3320      	adds	r3, #32
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	4240      	negs	r0, r0
 800b5fc:	e7f3      	b.n	800b5e6 <__ssrefill_r+0x26>
	...

0800b600 <__ssvfiscanf_r>:
 800b600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b602:	4cae      	ldr	r4, [pc, #696]	; (800b8bc <__ssvfiscanf_r+0x2bc>)
 800b604:	0006      	movs	r6, r0
 800b606:	44a5      	add	sp, r4
 800b608:	000c      	movs	r4, r1
 800b60a:	2100      	movs	r1, #0
 800b60c:	20be      	movs	r0, #190	; 0xbe
 800b60e:	9146      	str	r1, [sp, #280]	; 0x118
 800b610:	9147      	str	r1, [sp, #284]	; 0x11c
 800b612:	a903      	add	r1, sp, #12
 800b614:	9148      	str	r1, [sp, #288]	; 0x120
 800b616:	49aa      	ldr	r1, [pc, #680]	; (800b8c0 <__ssvfiscanf_r+0x2c0>)
 800b618:	0040      	lsls	r0, r0, #1
 800b61a:	ad43      	add	r5, sp, #268	; 0x10c
 800b61c:	5029      	str	r1, [r5, r0]
 800b61e:	25c0      	movs	r5, #192	; 0xc0
 800b620:	49a8      	ldr	r1, [pc, #672]	; (800b8c4 <__ssvfiscanf_r+0x2c4>)
 800b622:	006d      	lsls	r5, r5, #1
 800b624:	a843      	add	r0, sp, #268	; 0x10c
 800b626:	5141      	str	r1, [r0, r5]
 800b628:	9302      	str	r3, [sp, #8]
 800b62a:	7815      	ldrb	r5, [r2, #0]
 800b62c:	2d00      	cmp	r5, #0
 800b62e:	d100      	bne.n	800b632 <__ssvfiscanf_r+0x32>
 800b630:	e141      	b.n	800b8b6 <__ssvfiscanf_r+0x2b6>
 800b632:	4ba5      	ldr	r3, [pc, #660]	; (800b8c8 <__ssvfiscanf_r+0x2c8>)
 800b634:	2008      	movs	r0, #8
 800b636:	5d59      	ldrb	r1, [r3, r5]
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	2308      	movs	r3, #8
 800b63c:	1c57      	adds	r7, r2, #1
 800b63e:	400b      	ands	r3, r1
 800b640:	4201      	tst	r1, r0
 800b642:	d01e      	beq.n	800b682 <__ssvfiscanf_r+0x82>
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	dd11      	ble.n	800b66e <__ssvfiscanf_r+0x6e>
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	9900      	ldr	r1, [sp, #0]
 800b64e:	781a      	ldrb	r2, [r3, #0]
 800b650:	5c8a      	ldrb	r2, [r1, r2]
 800b652:	2108      	movs	r1, #8
 800b654:	420a      	tst	r2, r1
 800b656:	d101      	bne.n	800b65c <__ssvfiscanf_r+0x5c>
 800b658:	003a      	movs	r2, r7
 800b65a:	e7e6      	b.n	800b62a <__ssvfiscanf_r+0x2a>
 800b65c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800b65e:	3301      	adds	r3, #1
 800b660:	3201      	adds	r2, #1
 800b662:	9247      	str	r2, [sp, #284]	; 0x11c
 800b664:	6862      	ldr	r2, [r4, #4]
 800b666:	6023      	str	r3, [r4, #0]
 800b668:	3a01      	subs	r2, #1
 800b66a:	6062      	str	r2, [r4, #4]
 800b66c:	e7ea      	b.n	800b644 <__ssvfiscanf_r+0x44>
 800b66e:	22c0      	movs	r2, #192	; 0xc0
 800b670:	ab43      	add	r3, sp, #268	; 0x10c
 800b672:	0052      	lsls	r2, r2, #1
 800b674:	0021      	movs	r1, r4
 800b676:	0030      	movs	r0, r6
 800b678:	589b      	ldr	r3, [r3, r2]
 800b67a:	4798      	blx	r3
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d0e4      	beq.n	800b64a <__ssvfiscanf_r+0x4a>
 800b680:	e7ea      	b.n	800b658 <__ssvfiscanf_r+0x58>
 800b682:	2d25      	cmp	r5, #37	; 0x25
 800b684:	d162      	bne.n	800b74c <__ssvfiscanf_r+0x14c>
 800b686:	9345      	str	r3, [sp, #276]	; 0x114
 800b688:	9343      	str	r3, [sp, #268]	; 0x10c
 800b68a:	7853      	ldrb	r3, [r2, #1]
 800b68c:	2b2a      	cmp	r3, #42	; 0x2a
 800b68e:	d102      	bne.n	800b696 <__ssvfiscanf_r+0x96>
 800b690:	3b1a      	subs	r3, #26
 800b692:	9343      	str	r3, [sp, #268]	; 0x10c
 800b694:	1c97      	adds	r7, r2, #2
 800b696:	003d      	movs	r5, r7
 800b698:	220a      	movs	r2, #10
 800b69a:	7829      	ldrb	r1, [r5, #0]
 800b69c:	1c6b      	adds	r3, r5, #1
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	000b      	movs	r3, r1
 800b6a2:	3b30      	subs	r3, #48	; 0x30
 800b6a4:	2b09      	cmp	r3, #9
 800b6a6:	d91e      	bls.n	800b6e6 <__ssvfiscanf_r+0xe6>
 800b6a8:	4f88      	ldr	r7, [pc, #544]	; (800b8cc <__ssvfiscanf_r+0x2cc>)
 800b6aa:	2203      	movs	r2, #3
 800b6ac:	0038      	movs	r0, r7
 800b6ae:	f7fd feac 	bl	800940a <memchr>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d006      	beq.n	800b6c4 <__ssvfiscanf_r+0xc4>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	1bc0      	subs	r0, r0, r7
 800b6ba:	4083      	lsls	r3, r0
 800b6bc:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b6be:	9d01      	ldr	r5, [sp, #4]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	9343      	str	r3, [sp, #268]	; 0x10c
 800b6c4:	1c6f      	adds	r7, r5, #1
 800b6c6:	782d      	ldrb	r5, [r5, #0]
 800b6c8:	2d78      	cmp	r5, #120	; 0x78
 800b6ca:	d807      	bhi.n	800b6dc <__ssvfiscanf_r+0xdc>
 800b6cc:	2d57      	cmp	r5, #87	; 0x57
 800b6ce:	d811      	bhi.n	800b6f4 <__ssvfiscanf_r+0xf4>
 800b6d0:	2d25      	cmp	r5, #37	; 0x25
 800b6d2:	d03b      	beq.n	800b74c <__ssvfiscanf_r+0x14c>
 800b6d4:	d835      	bhi.n	800b742 <__ssvfiscanf_r+0x142>
 800b6d6:	2d00      	cmp	r5, #0
 800b6d8:	d100      	bne.n	800b6dc <__ssvfiscanf_r+0xdc>
 800b6da:	e0e9      	b.n	800b8b0 <__ssvfiscanf_r+0x2b0>
 800b6dc:	2303      	movs	r3, #3
 800b6de:	9349      	str	r3, [sp, #292]	; 0x124
 800b6e0:	3307      	adds	r3, #7
 800b6e2:	9344      	str	r3, [sp, #272]	; 0x110
 800b6e4:	e06d      	b.n	800b7c2 <__ssvfiscanf_r+0x1c2>
 800b6e6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b6e8:	9d01      	ldr	r5, [sp, #4]
 800b6ea:	4353      	muls	r3, r2
 800b6ec:	3b30      	subs	r3, #48	; 0x30
 800b6ee:	185b      	adds	r3, r3, r1
 800b6f0:	9345      	str	r3, [sp, #276]	; 0x114
 800b6f2:	e7d2      	b.n	800b69a <__ssvfiscanf_r+0x9a>
 800b6f4:	0028      	movs	r0, r5
 800b6f6:	3858      	subs	r0, #88	; 0x58
 800b6f8:	2820      	cmp	r0, #32
 800b6fa:	d8ef      	bhi.n	800b6dc <__ssvfiscanf_r+0xdc>
 800b6fc:	f7f4 fd14 	bl	8000128 <__gnu_thumb1_case_shi>
 800b700:	ffee004d 	.word	0xffee004d
 800b704:	007fffee 	.word	0x007fffee
 800b708:	ffeeffee 	.word	0xffeeffee
 800b70c:	ffeeffee 	.word	0xffeeffee
 800b710:	ffeeffee 	.word	0xffeeffee
 800b714:	008affee 	.word	0x008affee
 800b718:	0024007d 	.word	0x0024007d
 800b71c:	00240024 	.word	0x00240024
 800b720:	0059ffee 	.word	0x0059ffee
 800b724:	ffeeffee 	.word	0xffeeffee
 800b728:	ffeeffee 	.word	0xffeeffee
 800b72c:	005d0092 	.word	0x005d0092
 800b730:	ffee0049 	.word	0xffee0049
 800b734:	0090ffee 	.word	0x0090ffee
 800b738:	007dffee 	.word	0x007dffee
 800b73c:	ffeeffee 	.word	0xffeeffee
 800b740:	004d      	.short	0x004d
 800b742:	3d45      	subs	r5, #69	; 0x45
 800b744:	2d02      	cmp	r5, #2
 800b746:	d8c9      	bhi.n	800b6dc <__ssvfiscanf_r+0xdc>
 800b748:	2305      	movs	r3, #5
 800b74a:	e039      	b.n	800b7c0 <__ssvfiscanf_r+0x1c0>
 800b74c:	6863      	ldr	r3, [r4, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	dd0d      	ble.n	800b76e <__ssvfiscanf_r+0x16e>
 800b752:	6823      	ldr	r3, [r4, #0]
 800b754:	781a      	ldrb	r2, [r3, #0]
 800b756:	42aa      	cmp	r2, r5
 800b758:	d000      	beq.n	800b75c <__ssvfiscanf_r+0x15c>
 800b75a:	e0ac      	b.n	800b8b6 <__ssvfiscanf_r+0x2b6>
 800b75c:	3301      	adds	r3, #1
 800b75e:	6862      	ldr	r2, [r4, #4]
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b764:	3a01      	subs	r2, #1
 800b766:	3301      	adds	r3, #1
 800b768:	6062      	str	r2, [r4, #4]
 800b76a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b76c:	e774      	b.n	800b658 <__ssvfiscanf_r+0x58>
 800b76e:	22c0      	movs	r2, #192	; 0xc0
 800b770:	ab43      	add	r3, sp, #268	; 0x10c
 800b772:	0052      	lsls	r2, r2, #1
 800b774:	0021      	movs	r1, r4
 800b776:	0030      	movs	r0, r6
 800b778:	589b      	ldr	r3, [r3, r2]
 800b77a:	4798      	blx	r3
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d0e8      	beq.n	800b752 <__ssvfiscanf_r+0x152>
 800b780:	9846      	ldr	r0, [sp, #280]	; 0x118
 800b782:	2800      	cmp	r0, #0
 800b784:	d000      	beq.n	800b788 <__ssvfiscanf_r+0x188>
 800b786:	e08f      	b.n	800b8a8 <__ssvfiscanf_r+0x2a8>
 800b788:	3801      	subs	r0, #1
 800b78a:	23a5      	movs	r3, #165	; 0xa5
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	449d      	add	sp, r3
 800b790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b792:	2320      	movs	r3, #32
 800b794:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b796:	4313      	orrs	r3, r2
 800b798:	9343      	str	r3, [sp, #268]	; 0x10c
 800b79a:	2380      	movs	r3, #128	; 0x80
 800b79c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	9343      	str	r3, [sp, #268]	; 0x10c
 800b7a4:	2310      	movs	r3, #16
 800b7a6:	9344      	str	r3, [sp, #272]	; 0x110
 800b7a8:	236e      	movs	r3, #110	; 0x6e
 800b7aa:	42ab      	cmp	r3, r5
 800b7ac:	419b      	sbcs	r3, r3
 800b7ae:	425b      	negs	r3, r3
 800b7b0:	e001      	b.n	800b7b6 <__ssvfiscanf_r+0x1b6>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	9344      	str	r3, [sp, #272]	; 0x110
 800b7b6:	3303      	adds	r3, #3
 800b7b8:	e002      	b.n	800b7c0 <__ssvfiscanf_r+0x1c0>
 800b7ba:	2308      	movs	r3, #8
 800b7bc:	9344      	str	r3, [sp, #272]	; 0x110
 800b7be:	3b04      	subs	r3, #4
 800b7c0:	9349      	str	r3, [sp, #292]	; 0x124
 800b7c2:	6863      	ldr	r3, [r4, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dd3c      	ble.n	800b842 <__ssvfiscanf_r+0x242>
 800b7c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b7ca:	065b      	lsls	r3, r3, #25
 800b7cc:	d406      	bmi.n	800b7dc <__ssvfiscanf_r+0x1dc>
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	9900      	ldr	r1, [sp, #0]
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	5c8a      	ldrb	r2, [r1, r2]
 800b7d6:	2108      	movs	r1, #8
 800b7d8:	420a      	tst	r2, r1
 800b7da:	d13c      	bne.n	800b856 <__ssvfiscanf_r+0x256>
 800b7dc:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	dc4e      	bgt.n	800b880 <__ssvfiscanf_r+0x280>
 800b7e2:	0022      	movs	r2, r4
 800b7e4:	0030      	movs	r0, r6
 800b7e6:	ab02      	add	r3, sp, #8
 800b7e8:	a943      	add	r1, sp, #268	; 0x10c
 800b7ea:	f000 f873 	bl	800b8d4 <_scanf_chars>
 800b7ee:	2801      	cmp	r0, #1
 800b7f0:	d061      	beq.n	800b8b6 <__ssvfiscanf_r+0x2b6>
 800b7f2:	2802      	cmp	r0, #2
 800b7f4:	d000      	beq.n	800b7f8 <__ssvfiscanf_r+0x1f8>
 800b7f6:	e72f      	b.n	800b658 <__ssvfiscanf_r+0x58>
 800b7f8:	e7c2      	b.n	800b780 <__ssvfiscanf_r+0x180>
 800b7fa:	230a      	movs	r3, #10
 800b7fc:	e7d3      	b.n	800b7a6 <__ssvfiscanf_r+0x1a6>
 800b7fe:	0039      	movs	r1, r7
 800b800:	a803      	add	r0, sp, #12
 800b802:	f000 fa7e 	bl	800bd02 <__sccl>
 800b806:	2340      	movs	r3, #64	; 0x40
 800b808:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b80a:	0007      	movs	r7, r0
 800b80c:	4313      	orrs	r3, r2
 800b80e:	9343      	str	r3, [sp, #268]	; 0x10c
 800b810:	2301      	movs	r3, #1
 800b812:	e7d5      	b.n	800b7c0 <__ssvfiscanf_r+0x1c0>
 800b814:	2340      	movs	r3, #64	; 0x40
 800b816:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b818:	4313      	orrs	r3, r2
 800b81a:	9343      	str	r3, [sp, #268]	; 0x10c
 800b81c:	2300      	movs	r3, #0
 800b81e:	e7cf      	b.n	800b7c0 <__ssvfiscanf_r+0x1c0>
 800b820:	2302      	movs	r3, #2
 800b822:	e7cd      	b.n	800b7c0 <__ssvfiscanf_r+0x1c0>
 800b824:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b826:	06d3      	lsls	r3, r2, #27
 800b828:	d500      	bpl.n	800b82c <__ssvfiscanf_r+0x22c>
 800b82a:	e715      	b.n	800b658 <__ssvfiscanf_r+0x58>
 800b82c:	9b02      	ldr	r3, [sp, #8]
 800b82e:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800b830:	1d18      	adds	r0, r3, #4
 800b832:	9002      	str	r0, [sp, #8]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	07d5      	lsls	r5, r2, #31
 800b838:	d501      	bpl.n	800b83e <__ssvfiscanf_r+0x23e>
 800b83a:	8019      	strh	r1, [r3, #0]
 800b83c:	e70c      	b.n	800b658 <__ssvfiscanf_r+0x58>
 800b83e:	6019      	str	r1, [r3, #0]
 800b840:	e70a      	b.n	800b658 <__ssvfiscanf_r+0x58>
 800b842:	22c0      	movs	r2, #192	; 0xc0
 800b844:	ab43      	add	r3, sp, #268	; 0x10c
 800b846:	0052      	lsls	r2, r2, #1
 800b848:	0021      	movs	r1, r4
 800b84a:	0030      	movs	r0, r6
 800b84c:	589b      	ldr	r3, [r3, r2]
 800b84e:	4798      	blx	r3
 800b850:	2800      	cmp	r0, #0
 800b852:	d0b9      	beq.n	800b7c8 <__ssvfiscanf_r+0x1c8>
 800b854:	e794      	b.n	800b780 <__ssvfiscanf_r+0x180>
 800b856:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800b858:	3201      	adds	r2, #1
 800b85a:	9247      	str	r2, [sp, #284]	; 0x11c
 800b85c:	6862      	ldr	r2, [r4, #4]
 800b85e:	3a01      	subs	r2, #1
 800b860:	6062      	str	r2, [r4, #4]
 800b862:	2a00      	cmp	r2, #0
 800b864:	dd02      	ble.n	800b86c <__ssvfiscanf_r+0x26c>
 800b866:	3301      	adds	r3, #1
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	e7b0      	b.n	800b7ce <__ssvfiscanf_r+0x1ce>
 800b86c:	22c0      	movs	r2, #192	; 0xc0
 800b86e:	ab43      	add	r3, sp, #268	; 0x10c
 800b870:	0052      	lsls	r2, r2, #1
 800b872:	0021      	movs	r1, r4
 800b874:	0030      	movs	r0, r6
 800b876:	589b      	ldr	r3, [r3, r2]
 800b878:	4798      	blx	r3
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d0a7      	beq.n	800b7ce <__ssvfiscanf_r+0x1ce>
 800b87e:	e77f      	b.n	800b780 <__ssvfiscanf_r+0x180>
 800b880:	2b04      	cmp	r3, #4
 800b882:	dc06      	bgt.n	800b892 <__ssvfiscanf_r+0x292>
 800b884:	0022      	movs	r2, r4
 800b886:	0030      	movs	r0, r6
 800b888:	ab02      	add	r3, sp, #8
 800b88a:	a943      	add	r1, sp, #268	; 0x10c
 800b88c:	f000 f880 	bl	800b990 <_scanf_i>
 800b890:	e7ad      	b.n	800b7ee <__ssvfiscanf_r+0x1ee>
 800b892:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <__ssvfiscanf_r+0x2d0>)
 800b894:	2b00      	cmp	r3, #0
 800b896:	d100      	bne.n	800b89a <__ssvfiscanf_r+0x29a>
 800b898:	e6de      	b.n	800b658 <__ssvfiscanf_r+0x58>
 800b89a:	0022      	movs	r2, r4
 800b89c:	0030      	movs	r0, r6
 800b89e:	ab02      	add	r3, sp, #8
 800b8a0:	a943      	add	r1, sp, #268	; 0x10c
 800b8a2:	f7fd f947 	bl	8008b34 <_scanf_float>
 800b8a6:	e7a2      	b.n	800b7ee <__ssvfiscanf_r+0x1ee>
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	065b      	lsls	r3, r3, #25
 800b8ac:	d400      	bmi.n	800b8b0 <__ssvfiscanf_r+0x2b0>
 800b8ae:	e76c      	b.n	800b78a <__ssvfiscanf_r+0x18a>
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	4240      	negs	r0, r0
 800b8b4:	e769      	b.n	800b78a <__ssvfiscanf_r+0x18a>
 800b8b6:	9846      	ldr	r0, [sp, #280]	; 0x118
 800b8b8:	e767      	b.n	800b78a <__ssvfiscanf_r+0x18a>
 800b8ba:	46c0      	nop			; (mov r8, r8)
 800b8bc:	fffffd6c 	.word	0xfffffd6c
 800b8c0:	0800b549 	.word	0x0800b549
 800b8c4:	0800b5c1 	.word	0x0800b5c1
 800b8c8:	0800c859 	.word	0x0800c859
 800b8cc:	0800cbe2 	.word	0x0800cbe2
 800b8d0:	08008b35 	.word	0x08008b35

0800b8d4 <_scanf_chars>:
 800b8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8d6:	0015      	movs	r5, r2
 800b8d8:	688a      	ldr	r2, [r1, #8]
 800b8da:	000c      	movs	r4, r1
 800b8dc:	9001      	str	r0, [sp, #4]
 800b8de:	2a00      	cmp	r2, #0
 800b8e0:	d105      	bne.n	800b8ee <_scanf_chars+0x1a>
 800b8e2:	6989      	ldr	r1, [r1, #24]
 800b8e4:	3201      	adds	r2, #1
 800b8e6:	2900      	cmp	r1, #0
 800b8e8:	d000      	beq.n	800b8ec <_scanf_chars+0x18>
 800b8ea:	3a02      	subs	r2, #2
 800b8ec:	60a2      	str	r2, [r4, #8]
 800b8ee:	6822      	ldr	r2, [r4, #0]
 800b8f0:	06d2      	lsls	r2, r2, #27
 800b8f2:	d403      	bmi.n	800b8fc <_scanf_chars+0x28>
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	1d11      	adds	r1, r2, #4
 800b8f8:	6019      	str	r1, [r3, #0]
 800b8fa:	6817      	ldr	r7, [r2, #0]
 800b8fc:	2600      	movs	r6, #0
 800b8fe:	69a0      	ldr	r0, [r4, #24]
 800b900:	2800      	cmp	r0, #0
 800b902:	d013      	beq.n	800b92c <_scanf_chars+0x58>
 800b904:	2801      	cmp	r0, #1
 800b906:	d108      	bne.n	800b91a <_scanf_chars+0x46>
 800b908:	682b      	ldr	r3, [r5, #0]
 800b90a:	6962      	ldr	r2, [r4, #20]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	5cd3      	ldrb	r3, [r2, r3]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10b      	bne.n	800b92c <_scanf_chars+0x58>
 800b914:	2e00      	cmp	r6, #0
 800b916:	d038      	beq.n	800b98a <_scanf_chars+0xb6>
 800b918:	e026      	b.n	800b968 <_scanf_chars+0x94>
 800b91a:	2802      	cmp	r0, #2
 800b91c:	d124      	bne.n	800b968 <_scanf_chars+0x94>
 800b91e:	682b      	ldr	r3, [r5, #0]
 800b920:	4a1a      	ldr	r2, [pc, #104]	; (800b98c <_scanf_chars+0xb8>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	5cd3      	ldrb	r3, [r2, r3]
 800b926:	2208      	movs	r2, #8
 800b928:	4213      	tst	r3, r2
 800b92a:	d11d      	bne.n	800b968 <_scanf_chars+0x94>
 800b92c:	2210      	movs	r2, #16
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	3601      	adds	r6, #1
 800b932:	4213      	tst	r3, r2
 800b934:	d103      	bne.n	800b93e <_scanf_chars+0x6a>
 800b936:	682b      	ldr	r3, [r5, #0]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	703b      	strb	r3, [r7, #0]
 800b93c:	3701      	adds	r7, #1
 800b93e:	682a      	ldr	r2, [r5, #0]
 800b940:	686b      	ldr	r3, [r5, #4]
 800b942:	3201      	adds	r2, #1
 800b944:	602a      	str	r2, [r5, #0]
 800b946:	68a2      	ldr	r2, [r4, #8]
 800b948:	3b01      	subs	r3, #1
 800b94a:	3a01      	subs	r2, #1
 800b94c:	606b      	str	r3, [r5, #4]
 800b94e:	60a2      	str	r2, [r4, #8]
 800b950:	2a00      	cmp	r2, #0
 800b952:	d009      	beq.n	800b968 <_scanf_chars+0x94>
 800b954:	2b00      	cmp	r3, #0
 800b956:	dcd2      	bgt.n	800b8fe <_scanf_chars+0x2a>
 800b958:	23c0      	movs	r3, #192	; 0xc0
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	0029      	movs	r1, r5
 800b95e:	58e3      	ldr	r3, [r4, r3]
 800b960:	9801      	ldr	r0, [sp, #4]
 800b962:	4798      	blx	r3
 800b964:	2800      	cmp	r0, #0
 800b966:	d0ca      	beq.n	800b8fe <_scanf_chars+0x2a>
 800b968:	6822      	ldr	r2, [r4, #0]
 800b96a:	2310      	movs	r3, #16
 800b96c:	0011      	movs	r1, r2
 800b96e:	4019      	ands	r1, r3
 800b970:	421a      	tst	r2, r3
 800b972:	d106      	bne.n	800b982 <_scanf_chars+0xae>
 800b974:	68e3      	ldr	r3, [r4, #12]
 800b976:	3301      	adds	r3, #1
 800b978:	60e3      	str	r3, [r4, #12]
 800b97a:	69a3      	ldr	r3, [r4, #24]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d000      	beq.n	800b982 <_scanf_chars+0xae>
 800b980:	7039      	strb	r1, [r7, #0]
 800b982:	2000      	movs	r0, #0
 800b984:	6923      	ldr	r3, [r4, #16]
 800b986:	199b      	adds	r3, r3, r6
 800b988:	6123      	str	r3, [r4, #16]
 800b98a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b98c:	0800c859 	.word	0x0800c859

0800b990 <_scanf_i>:
 800b990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b992:	b08b      	sub	sp, #44	; 0x2c
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	4b7a      	ldr	r3, [pc, #488]	; (800bb80 <_scanf_i+0x1f0>)
 800b998:	0016      	movs	r6, r2
 800b99a:	9004      	str	r0, [sp, #16]
 800b99c:	aa07      	add	r2, sp, #28
 800b99e:	cba1      	ldmia	r3!, {r0, r5, r7}
 800b9a0:	c2a1      	stmia	r2!, {r0, r5, r7}
 800b9a2:	4a78      	ldr	r2, [pc, #480]	; (800bb84 <_scanf_i+0x1f4>)
 800b9a4:	698b      	ldr	r3, [r1, #24]
 800b9a6:	000c      	movs	r4, r1
 800b9a8:	9205      	str	r2, [sp, #20]
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	d001      	beq.n	800b9b2 <_scanf_i+0x22>
 800b9ae:	4b76      	ldr	r3, [pc, #472]	; (800bb88 <_scanf_i+0x1f8>)
 800b9b0:	9305      	str	r3, [sp, #20]
 800b9b2:	22ae      	movs	r2, #174	; 0xae
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	68a3      	ldr	r3, [r4, #8]
 800b9b8:	0052      	lsls	r2, r2, #1
 800b9ba:	1e59      	subs	r1, r3, #1
 800b9bc:	9003      	str	r0, [sp, #12]
 800b9be:	4291      	cmp	r1, r2
 800b9c0:	d905      	bls.n	800b9ce <_scanf_i+0x3e>
 800b9c2:	3b5e      	subs	r3, #94	; 0x5e
 800b9c4:	3bff      	subs	r3, #255	; 0xff
 800b9c6:	9303      	str	r3, [sp, #12]
 800b9c8:	235e      	movs	r3, #94	; 0x5e
 800b9ca:	33ff      	adds	r3, #255	; 0xff
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	0023      	movs	r3, r4
 800b9d0:	331c      	adds	r3, #28
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	23d0      	movs	r3, #208	; 0xd0
 800b9d6:	2700      	movs	r7, #0
 800b9d8:	6822      	ldr	r2, [r4, #0]
 800b9da:	011b      	lsls	r3, r3, #4
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	9b00      	ldr	r3, [sp, #0]
 800b9e2:	9302      	str	r3, [sp, #8]
 800b9e4:	6833      	ldr	r3, [r6, #0]
 800b9e6:	a807      	add	r0, sp, #28
 800b9e8:	7819      	ldrb	r1, [r3, #0]
 800b9ea:	00bb      	lsls	r3, r7, #2
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	5818      	ldr	r0, [r3, r0]
 800b9f0:	f7fd fd0b 	bl	800940a <memchr>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d02a      	beq.n	800ba4e <_scanf_i+0xbe>
 800b9f8:	2f01      	cmp	r7, #1
 800b9fa:	d161      	bne.n	800bac0 <_scanf_i+0x130>
 800b9fc:	6863      	ldr	r3, [r4, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d106      	bne.n	800ba10 <_scanf_i+0x80>
 800ba02:	3308      	adds	r3, #8
 800ba04:	6822      	ldr	r2, [r4, #0]
 800ba06:	6063      	str	r3, [r4, #4]
 800ba08:	33f9      	adds	r3, #249	; 0xf9
 800ba0a:	33ff      	adds	r3, #255	; 0xff
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	4a5e      	ldr	r2, [pc, #376]	; (800bb8c <_scanf_i+0x1fc>)
 800ba14:	4013      	ands	r3, r2
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	68a3      	ldr	r3, [r4, #8]
 800ba1a:	1e5a      	subs	r2, r3, #1
 800ba1c:	60a2      	str	r2, [r4, #8]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d015      	beq.n	800ba4e <_scanf_i+0xbe>
 800ba22:	6833      	ldr	r3, [r6, #0]
 800ba24:	1c5a      	adds	r2, r3, #1
 800ba26:	6032      	str	r2, [r6, #0]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	9a02      	ldr	r2, [sp, #8]
 800ba2c:	7013      	strb	r3, [r2, #0]
 800ba2e:	6873      	ldr	r3, [r6, #4]
 800ba30:	1c55      	adds	r5, r2, #1
 800ba32:	3b01      	subs	r3, #1
 800ba34:	6073      	str	r3, [r6, #4]
 800ba36:	9502      	str	r5, [sp, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	dc08      	bgt.n	800ba4e <_scanf_i+0xbe>
 800ba3c:	23c0      	movs	r3, #192	; 0xc0
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	0031      	movs	r1, r6
 800ba42:	58e3      	ldr	r3, [r4, r3]
 800ba44:	9804      	ldr	r0, [sp, #16]
 800ba46:	4798      	blx	r3
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d000      	beq.n	800ba4e <_scanf_i+0xbe>
 800ba4c:	e080      	b.n	800bb50 <_scanf_i+0x1c0>
 800ba4e:	3701      	adds	r7, #1
 800ba50:	2f03      	cmp	r7, #3
 800ba52:	d1c7      	bne.n	800b9e4 <_scanf_i+0x54>
 800ba54:	6863      	ldr	r3, [r4, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <_scanf_i+0xce>
 800ba5a:	330a      	adds	r3, #10
 800ba5c:	6063      	str	r3, [r4, #4]
 800ba5e:	2110      	movs	r1, #16
 800ba60:	2700      	movs	r7, #0
 800ba62:	6863      	ldr	r3, [r4, #4]
 800ba64:	6960      	ldr	r0, [r4, #20]
 800ba66:	1ac9      	subs	r1, r1, r3
 800ba68:	4b49      	ldr	r3, [pc, #292]	; (800bb90 <_scanf_i+0x200>)
 800ba6a:	18c9      	adds	r1, r1, r3
 800ba6c:	f000 f949 	bl	800bd02 <__sccl>
 800ba70:	9d02      	ldr	r5, [sp, #8]
 800ba72:	68a3      	ldr	r3, [r4, #8]
 800ba74:	6820      	ldr	r0, [r4, #0]
 800ba76:	9302      	str	r3, [sp, #8]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d040      	beq.n	800bafe <_scanf_i+0x16e>
 800ba7c:	6831      	ldr	r1, [r6, #0]
 800ba7e:	6963      	ldr	r3, [r4, #20]
 800ba80:	780a      	ldrb	r2, [r1, #0]
 800ba82:	5c9b      	ldrb	r3, [r3, r2]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d03a      	beq.n	800bafe <_scanf_i+0x16e>
 800ba88:	2a30      	cmp	r2, #48	; 0x30
 800ba8a:	d129      	bne.n	800bae0 <_scanf_i+0x150>
 800ba8c:	2380      	movs	r3, #128	; 0x80
 800ba8e:	011b      	lsls	r3, r3, #4
 800ba90:	4218      	tst	r0, r3
 800ba92:	d025      	beq.n	800bae0 <_scanf_i+0x150>
 800ba94:	9b03      	ldr	r3, [sp, #12]
 800ba96:	3701      	adds	r7, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d005      	beq.n	800baa8 <_scanf_i+0x118>
 800ba9c:	001a      	movs	r2, r3
 800ba9e:	9b02      	ldr	r3, [sp, #8]
 800baa0:	3a01      	subs	r2, #1
 800baa2:	3301      	adds	r3, #1
 800baa4:	9203      	str	r2, [sp, #12]
 800baa6:	60a3      	str	r3, [r4, #8]
 800baa8:	6873      	ldr	r3, [r6, #4]
 800baaa:	3b01      	subs	r3, #1
 800baac:	6073      	str	r3, [r6, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd1d      	ble.n	800baee <_scanf_i+0x15e>
 800bab2:	6833      	ldr	r3, [r6, #0]
 800bab4:	3301      	adds	r3, #1
 800bab6:	6033      	str	r3, [r6, #0]
 800bab8:	68a3      	ldr	r3, [r4, #8]
 800baba:	3b01      	subs	r3, #1
 800babc:	60a3      	str	r3, [r4, #8]
 800babe:	e7d8      	b.n	800ba72 <_scanf_i+0xe2>
 800bac0:	2f02      	cmp	r7, #2
 800bac2:	d1a9      	bne.n	800ba18 <_scanf_i+0x88>
 800bac4:	21c0      	movs	r1, #192	; 0xc0
 800bac6:	2380      	movs	r3, #128	; 0x80
 800bac8:	6822      	ldr	r2, [r4, #0]
 800baca:	00c9      	lsls	r1, r1, #3
 800bacc:	4011      	ands	r1, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4299      	cmp	r1, r3
 800bad2:	d1bf      	bne.n	800ba54 <_scanf_i+0xc4>
 800bad4:	3bf1      	subs	r3, #241	; 0xf1
 800bad6:	3bff      	subs	r3, #255	; 0xff
 800bad8:	6063      	str	r3, [r4, #4]
 800bada:	33f0      	adds	r3, #240	; 0xf0
 800badc:	4313      	orrs	r3, r2
 800bade:	e79a      	b.n	800ba16 <_scanf_i+0x86>
 800bae0:	4b2c      	ldr	r3, [pc, #176]	; (800bb94 <_scanf_i+0x204>)
 800bae2:	4003      	ands	r3, r0
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	780b      	ldrb	r3, [r1, #0]
 800bae8:	702b      	strb	r3, [r5, #0]
 800baea:	3501      	adds	r5, #1
 800baec:	e7dc      	b.n	800baa8 <_scanf_i+0x118>
 800baee:	23c0      	movs	r3, #192	; 0xc0
 800baf0:	005b      	lsls	r3, r3, #1
 800baf2:	0031      	movs	r1, r6
 800baf4:	58e3      	ldr	r3, [r4, r3]
 800baf6:	9804      	ldr	r0, [sp, #16]
 800baf8:	4798      	blx	r3
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d0dc      	beq.n	800bab8 <_scanf_i+0x128>
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	05db      	lsls	r3, r3, #23
 800bb02:	d50e      	bpl.n	800bb22 <_scanf_i+0x192>
 800bb04:	9b00      	ldr	r3, [sp, #0]
 800bb06:	429d      	cmp	r5, r3
 800bb08:	d907      	bls.n	800bb1a <_scanf_i+0x18a>
 800bb0a:	23be      	movs	r3, #190	; 0xbe
 800bb0c:	3d01      	subs	r5, #1
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	0032      	movs	r2, r6
 800bb12:	7829      	ldrb	r1, [r5, #0]
 800bb14:	58e3      	ldr	r3, [r4, r3]
 800bb16:	9804      	ldr	r0, [sp, #16]
 800bb18:	4798      	blx	r3
 800bb1a:	9b00      	ldr	r3, [sp, #0]
 800bb1c:	2001      	movs	r0, #1
 800bb1e:	429d      	cmp	r5, r3
 800bb20:	d029      	beq.n	800bb76 <_scanf_i+0x1e6>
 800bb22:	6821      	ldr	r1, [r4, #0]
 800bb24:	2310      	movs	r3, #16
 800bb26:	000a      	movs	r2, r1
 800bb28:	401a      	ands	r2, r3
 800bb2a:	4219      	tst	r1, r3
 800bb2c:	d11c      	bne.n	800bb68 <_scanf_i+0x1d8>
 800bb2e:	702a      	strb	r2, [r5, #0]
 800bb30:	6863      	ldr	r3, [r4, #4]
 800bb32:	9900      	ldr	r1, [sp, #0]
 800bb34:	9804      	ldr	r0, [sp, #16]
 800bb36:	9e05      	ldr	r6, [sp, #20]
 800bb38:	47b0      	blx	r6
 800bb3a:	9b01      	ldr	r3, [sp, #4]
 800bb3c:	6822      	ldr	r2, [r4, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	0691      	lsls	r1, r2, #26
 800bb42:	d507      	bpl.n	800bb54 <_scanf_i+0x1c4>
 800bb44:	9901      	ldr	r1, [sp, #4]
 800bb46:	1d1a      	adds	r2, r3, #4
 800bb48:	600a      	str	r2, [r1, #0]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	6018      	str	r0, [r3, #0]
 800bb4e:	e008      	b.n	800bb62 <_scanf_i+0x1d2>
 800bb50:	2700      	movs	r7, #0
 800bb52:	e7d4      	b.n	800bafe <_scanf_i+0x16e>
 800bb54:	1d19      	adds	r1, r3, #4
 800bb56:	07d6      	lsls	r6, r2, #31
 800bb58:	d50f      	bpl.n	800bb7a <_scanf_i+0x1ea>
 800bb5a:	9a01      	ldr	r2, [sp, #4]
 800bb5c:	6011      	str	r1, [r2, #0]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	8018      	strh	r0, [r3, #0]
 800bb62:	68e3      	ldr	r3, [r4, #12]
 800bb64:	3301      	adds	r3, #1
 800bb66:	60e3      	str	r3, [r4, #12]
 800bb68:	2000      	movs	r0, #0
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	1aed      	subs	r5, r5, r3
 800bb6e:	6923      	ldr	r3, [r4, #16]
 800bb70:	19ed      	adds	r5, r5, r7
 800bb72:	195b      	adds	r3, r3, r5
 800bb74:	6123      	str	r3, [r4, #16]
 800bb76:	b00b      	add	sp, #44	; 0x2c
 800bb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb7a:	9a01      	ldr	r2, [sp, #4]
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	e7e4      	b.n	800bb4a <_scanf_i+0x1ba>
 800bb80:	0800c72c 	.word	0x0800c72c
 800bb84:	08008219 	.word	0x08008219
 800bb88:	0800c019 	.word	0x0800c019
 800bb8c:	fffffaff 	.word	0xfffffaff
 800bb90:	0800cbed 	.word	0x0800cbed
 800bb94:	fffff6ff 	.word	0xfffff6ff

0800bb98 <__sflush_r>:
 800bb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb9a:	898b      	ldrh	r3, [r1, #12]
 800bb9c:	0005      	movs	r5, r0
 800bb9e:	000c      	movs	r4, r1
 800bba0:	071a      	lsls	r2, r3, #28
 800bba2:	d45c      	bmi.n	800bc5e <__sflush_r+0xc6>
 800bba4:	684a      	ldr	r2, [r1, #4]
 800bba6:	2a00      	cmp	r2, #0
 800bba8:	dc04      	bgt.n	800bbb4 <__sflush_r+0x1c>
 800bbaa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800bbac:	2a00      	cmp	r2, #0
 800bbae:	dc01      	bgt.n	800bbb4 <__sflush_r+0x1c>
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbb4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bbb6:	2f00      	cmp	r7, #0
 800bbb8:	d0fa      	beq.n	800bbb0 <__sflush_r+0x18>
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2080      	movs	r0, #128	; 0x80
 800bbbe:	682e      	ldr	r6, [r5, #0]
 800bbc0:	602a      	str	r2, [r5, #0]
 800bbc2:	001a      	movs	r2, r3
 800bbc4:	0140      	lsls	r0, r0, #5
 800bbc6:	6a21      	ldr	r1, [r4, #32]
 800bbc8:	4002      	ands	r2, r0
 800bbca:	4203      	tst	r3, r0
 800bbcc:	d034      	beq.n	800bc38 <__sflush_r+0xa0>
 800bbce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbd0:	89a3      	ldrh	r3, [r4, #12]
 800bbd2:	075b      	lsls	r3, r3, #29
 800bbd4:	d506      	bpl.n	800bbe4 <__sflush_r+0x4c>
 800bbd6:	6863      	ldr	r3, [r4, #4]
 800bbd8:	1ac0      	subs	r0, r0, r3
 800bbda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <__sflush_r+0x4c>
 800bbe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbe2:	1ac0      	subs	r0, r0, r3
 800bbe4:	0002      	movs	r2, r0
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	0028      	movs	r0, r5
 800bbea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bbec:	6a21      	ldr	r1, [r4, #32]
 800bbee:	47b8      	blx	r7
 800bbf0:	89a2      	ldrh	r2, [r4, #12]
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	d106      	bne.n	800bc04 <__sflush_r+0x6c>
 800bbf6:	6829      	ldr	r1, [r5, #0]
 800bbf8:	291d      	cmp	r1, #29
 800bbfa:	d82c      	bhi.n	800bc56 <__sflush_r+0xbe>
 800bbfc:	4b2a      	ldr	r3, [pc, #168]	; (800bca8 <__sflush_r+0x110>)
 800bbfe:	410b      	asrs	r3, r1
 800bc00:	07db      	lsls	r3, r3, #31
 800bc02:	d428      	bmi.n	800bc56 <__sflush_r+0xbe>
 800bc04:	2300      	movs	r3, #0
 800bc06:	6063      	str	r3, [r4, #4]
 800bc08:	6923      	ldr	r3, [r4, #16]
 800bc0a:	6023      	str	r3, [r4, #0]
 800bc0c:	04d2      	lsls	r2, r2, #19
 800bc0e:	d505      	bpl.n	800bc1c <__sflush_r+0x84>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d102      	bne.n	800bc1a <__sflush_r+0x82>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d100      	bne.n	800bc1c <__sflush_r+0x84>
 800bc1a:	6560      	str	r0, [r4, #84]	; 0x54
 800bc1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc1e:	602e      	str	r6, [r5, #0]
 800bc20:	2900      	cmp	r1, #0
 800bc22:	d0c5      	beq.n	800bbb0 <__sflush_r+0x18>
 800bc24:	0023      	movs	r3, r4
 800bc26:	3344      	adds	r3, #68	; 0x44
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	d002      	beq.n	800bc32 <__sflush_r+0x9a>
 800bc2c:	0028      	movs	r0, r5
 800bc2e:	f7fe faa9 	bl	800a184 <_free_r>
 800bc32:	2000      	movs	r0, #0
 800bc34:	6360      	str	r0, [r4, #52]	; 0x34
 800bc36:	e7bc      	b.n	800bbb2 <__sflush_r+0x1a>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	0028      	movs	r0, r5
 800bc3c:	47b8      	blx	r7
 800bc3e:	1c43      	adds	r3, r0, #1
 800bc40:	d1c6      	bne.n	800bbd0 <__sflush_r+0x38>
 800bc42:	682b      	ldr	r3, [r5, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d0c3      	beq.n	800bbd0 <__sflush_r+0x38>
 800bc48:	2b1d      	cmp	r3, #29
 800bc4a:	d001      	beq.n	800bc50 <__sflush_r+0xb8>
 800bc4c:	2b16      	cmp	r3, #22
 800bc4e:	d101      	bne.n	800bc54 <__sflush_r+0xbc>
 800bc50:	602e      	str	r6, [r5, #0]
 800bc52:	e7ad      	b.n	800bbb0 <__sflush_r+0x18>
 800bc54:	89a2      	ldrh	r2, [r4, #12]
 800bc56:	2340      	movs	r3, #64	; 0x40
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	81a3      	strh	r3, [r4, #12]
 800bc5c:	e7a9      	b.n	800bbb2 <__sflush_r+0x1a>
 800bc5e:	690e      	ldr	r6, [r1, #16]
 800bc60:	2e00      	cmp	r6, #0
 800bc62:	d0a5      	beq.n	800bbb0 <__sflush_r+0x18>
 800bc64:	680f      	ldr	r7, [r1, #0]
 800bc66:	600e      	str	r6, [r1, #0]
 800bc68:	1bba      	subs	r2, r7, r6
 800bc6a:	9201      	str	r2, [sp, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	079b      	lsls	r3, r3, #30
 800bc70:	d100      	bne.n	800bc74 <__sflush_r+0xdc>
 800bc72:	694a      	ldr	r2, [r1, #20]
 800bc74:	60a2      	str	r2, [r4, #8]
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	dd99      	ble.n	800bbb0 <__sflush_r+0x18>
 800bc7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc7e:	0032      	movs	r2, r6
 800bc80:	001f      	movs	r7, r3
 800bc82:	0028      	movs	r0, r5
 800bc84:	9b01      	ldr	r3, [sp, #4]
 800bc86:	6a21      	ldr	r1, [r4, #32]
 800bc88:	47b8      	blx	r7
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	dc06      	bgt.n	800bc9c <__sflush_r+0x104>
 800bc8e:	2340      	movs	r3, #64	; 0x40
 800bc90:	2001      	movs	r0, #1
 800bc92:	89a2      	ldrh	r2, [r4, #12]
 800bc94:	4240      	negs	r0, r0
 800bc96:	4313      	orrs	r3, r2
 800bc98:	81a3      	strh	r3, [r4, #12]
 800bc9a:	e78a      	b.n	800bbb2 <__sflush_r+0x1a>
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	1836      	adds	r6, r6, r0
 800bca0:	1a1b      	subs	r3, r3, r0
 800bca2:	9301      	str	r3, [sp, #4]
 800bca4:	e7e7      	b.n	800bc76 <__sflush_r+0xde>
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	dfbffffe 	.word	0xdfbffffe

0800bcac <_fflush_r>:
 800bcac:	690b      	ldr	r3, [r1, #16]
 800bcae:	b570      	push	{r4, r5, r6, lr}
 800bcb0:	0005      	movs	r5, r0
 800bcb2:	000c      	movs	r4, r1
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d102      	bne.n	800bcbe <_fflush_r+0x12>
 800bcb8:	2500      	movs	r5, #0
 800bcba:	0028      	movs	r0, r5
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d004      	beq.n	800bccc <_fflush_r+0x20>
 800bcc2:	6a03      	ldr	r3, [r0, #32]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <_fflush_r+0x20>
 800bcc8:	f7fd f9cc 	bl	8009064 <__sinit>
 800bccc:	220c      	movs	r2, #12
 800bcce:	5ea3      	ldrsh	r3, [r4, r2]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d0f1      	beq.n	800bcb8 <_fflush_r+0xc>
 800bcd4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcd6:	07d2      	lsls	r2, r2, #31
 800bcd8:	d404      	bmi.n	800bce4 <_fflush_r+0x38>
 800bcda:	059b      	lsls	r3, r3, #22
 800bcdc:	d402      	bmi.n	800bce4 <_fflush_r+0x38>
 800bcde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bce0:	f7fd fb91 	bl	8009406 <__retarget_lock_acquire_recursive>
 800bce4:	0028      	movs	r0, r5
 800bce6:	0021      	movs	r1, r4
 800bce8:	f7ff ff56 	bl	800bb98 <__sflush_r>
 800bcec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcee:	0005      	movs	r5, r0
 800bcf0:	07db      	lsls	r3, r3, #31
 800bcf2:	d4e2      	bmi.n	800bcba <_fflush_r+0xe>
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	059b      	lsls	r3, r3, #22
 800bcf8:	d4df      	bmi.n	800bcba <_fflush_r+0xe>
 800bcfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcfc:	f7fd fb84 	bl	8009408 <__retarget_lock_release_recursive>
 800bd00:	e7db      	b.n	800bcba <_fflush_r+0xe>

0800bd02 <__sccl>:
 800bd02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd04:	780b      	ldrb	r3, [r1, #0]
 800bd06:	0004      	movs	r4, r0
 800bd08:	2b5e      	cmp	r3, #94	; 0x5e
 800bd0a:	d019      	beq.n	800bd40 <__sccl+0x3e>
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	1c4d      	adds	r5, r1, #1
 800bd10:	0021      	movs	r1, r4
 800bd12:	1c60      	adds	r0, r4, #1
 800bd14:	30ff      	adds	r0, #255	; 0xff
 800bd16:	700a      	strb	r2, [r1, #0]
 800bd18:	3101      	adds	r1, #1
 800bd1a:	4281      	cmp	r1, r0
 800bd1c:	d1fb      	bne.n	800bd16 <__sccl+0x14>
 800bd1e:	1e68      	subs	r0, r5, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00c      	beq.n	800bd3e <__sccl+0x3c>
 800bd24:	2101      	movs	r1, #1
 800bd26:	262d      	movs	r6, #45	; 0x2d
 800bd28:	404a      	eors	r2, r1
 800bd2a:	0028      	movs	r0, r5
 800bd2c:	54e2      	strb	r2, [r4, r3]
 800bd2e:	7801      	ldrb	r1, [r0, #0]
 800bd30:	1c45      	adds	r5, r0, #1
 800bd32:	292d      	cmp	r1, #45	; 0x2d
 800bd34:	d00c      	beq.n	800bd50 <__sccl+0x4e>
 800bd36:	295d      	cmp	r1, #93	; 0x5d
 800bd38:	d01d      	beq.n	800bd76 <__sccl+0x74>
 800bd3a:	2900      	cmp	r1, #0
 800bd3c:	d104      	bne.n	800bd48 <__sccl+0x46>
 800bd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd40:	2201      	movs	r2, #1
 800bd42:	784b      	ldrb	r3, [r1, #1]
 800bd44:	1c8d      	adds	r5, r1, #2
 800bd46:	e7e3      	b.n	800bd10 <__sccl+0xe>
 800bd48:	000b      	movs	r3, r1
 800bd4a:	e7ee      	b.n	800bd2a <__sccl+0x28>
 800bd4c:	0033      	movs	r3, r6
 800bd4e:	e7ec      	b.n	800bd2a <__sccl+0x28>
 800bd50:	7841      	ldrb	r1, [r0, #1]
 800bd52:	295d      	cmp	r1, #93	; 0x5d
 800bd54:	d0fa      	beq.n	800bd4c <__sccl+0x4a>
 800bd56:	428b      	cmp	r3, r1
 800bd58:	dcf8      	bgt.n	800bd4c <__sccl+0x4a>
 800bd5a:	001d      	movs	r5, r3
 800bd5c:	3002      	adds	r0, #2
 800bd5e:	3501      	adds	r5, #1
 800bd60:	5562      	strb	r2, [r4, r5]
 800bd62:	42a9      	cmp	r1, r5
 800bd64:	dcfb      	bgt.n	800bd5e <__sccl+0x5c>
 800bd66:	2500      	movs	r5, #0
 800bd68:	1c5f      	adds	r7, r3, #1
 800bd6a:	428b      	cmp	r3, r1
 800bd6c:	da01      	bge.n	800bd72 <__sccl+0x70>
 800bd6e:	1acd      	subs	r5, r1, r3
 800bd70:	3d01      	subs	r5, #1
 800bd72:	197b      	adds	r3, r7, r5
 800bd74:	e7db      	b.n	800bd2e <__sccl+0x2c>
 800bd76:	0028      	movs	r0, r5
 800bd78:	e7e1      	b.n	800bd3e <__sccl+0x3c>
	...

0800bd7c <__submore>:
 800bd7c:	000b      	movs	r3, r1
 800bd7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd80:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800bd82:	3344      	adds	r3, #68	; 0x44
 800bd84:	000c      	movs	r4, r1
 800bd86:	429d      	cmp	r5, r3
 800bd88:	d11c      	bne.n	800bdc4 <__submore+0x48>
 800bd8a:	2680      	movs	r6, #128	; 0x80
 800bd8c:	00f6      	lsls	r6, r6, #3
 800bd8e:	0031      	movs	r1, r6
 800bd90:	f7fb faf2 	bl	8007378 <_malloc_r>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d102      	bne.n	800bd9e <__submore+0x22>
 800bd98:	2001      	movs	r0, #1
 800bd9a:	4240      	negs	r0, r0
 800bd9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd9e:	0023      	movs	r3, r4
 800bda0:	6360      	str	r0, [r4, #52]	; 0x34
 800bda2:	63a6      	str	r6, [r4, #56]	; 0x38
 800bda4:	3346      	adds	r3, #70	; 0x46
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	4b10      	ldr	r3, [pc, #64]	; (800bdec <__submore+0x70>)
 800bdaa:	54c2      	strb	r2, [r0, r3]
 800bdac:	0023      	movs	r3, r4
 800bdae:	3345      	adds	r3, #69	; 0x45
 800bdb0:	781a      	ldrb	r2, [r3, #0]
 800bdb2:	4b0f      	ldr	r3, [pc, #60]	; (800bdf0 <__submore+0x74>)
 800bdb4:	54c2      	strb	r2, [r0, r3]
 800bdb6:	782a      	ldrb	r2, [r5, #0]
 800bdb8:	4b0e      	ldr	r3, [pc, #56]	; (800bdf4 <__submore+0x78>)
 800bdba:	54c2      	strb	r2, [r0, r3]
 800bdbc:	18c0      	adds	r0, r0, r3
 800bdbe:	6020      	str	r0, [r4, #0]
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e7eb      	b.n	800bd9c <__submore+0x20>
 800bdc4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800bdc6:	0029      	movs	r1, r5
 800bdc8:	0073      	lsls	r3, r6, #1
 800bdca:	001a      	movs	r2, r3
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	f000 f872 	bl	800beb6 <_realloc_r>
 800bdd2:	1e05      	subs	r5, r0, #0
 800bdd4:	d0e0      	beq.n	800bd98 <__submore+0x1c>
 800bdd6:	1987      	adds	r7, r0, r6
 800bdd8:	0001      	movs	r1, r0
 800bdda:	0032      	movs	r2, r6
 800bddc:	0038      	movs	r0, r7
 800bdde:	f7fd fb1f 	bl	8009420 <memcpy>
 800bde2:	9b01      	ldr	r3, [sp, #4]
 800bde4:	6027      	str	r7, [r4, #0]
 800bde6:	6365      	str	r5, [r4, #52]	; 0x34
 800bde8:	63a3      	str	r3, [r4, #56]	; 0x38
 800bdea:	e7e9      	b.n	800bdc0 <__submore+0x44>
 800bdec:	000003ff 	.word	0x000003ff
 800bdf0:	000003fe 	.word	0x000003fe
 800bdf4:	000003fd 	.word	0x000003fd

0800bdf8 <memmove>:
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	4288      	cmp	r0, r1
 800bdfc:	d902      	bls.n	800be04 <memmove+0xc>
 800bdfe:	188b      	adds	r3, r1, r2
 800be00:	4298      	cmp	r0, r3
 800be02:	d303      	bcc.n	800be0c <memmove+0x14>
 800be04:	2300      	movs	r3, #0
 800be06:	e007      	b.n	800be18 <memmove+0x20>
 800be08:	5c8b      	ldrb	r3, [r1, r2]
 800be0a:	5483      	strb	r3, [r0, r2]
 800be0c:	3a01      	subs	r2, #1
 800be0e:	d2fb      	bcs.n	800be08 <memmove+0x10>
 800be10:	bd10      	pop	{r4, pc}
 800be12:	5ccc      	ldrb	r4, [r1, r3]
 800be14:	54c4      	strb	r4, [r0, r3]
 800be16:	3301      	adds	r3, #1
 800be18:	429a      	cmp	r2, r3
 800be1a:	d1fa      	bne.n	800be12 <memmove+0x1a>
 800be1c:	e7f8      	b.n	800be10 <memmove+0x18>
	...

0800be20 <__assert_func>:
 800be20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800be22:	0014      	movs	r4, r2
 800be24:	001a      	movs	r2, r3
 800be26:	4b09      	ldr	r3, [pc, #36]	; (800be4c <__assert_func+0x2c>)
 800be28:	0005      	movs	r5, r0
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	000e      	movs	r6, r1
 800be2e:	68d8      	ldr	r0, [r3, #12]
 800be30:	4b07      	ldr	r3, [pc, #28]	; (800be50 <__assert_func+0x30>)
 800be32:	2c00      	cmp	r4, #0
 800be34:	d101      	bne.n	800be3a <__assert_func+0x1a>
 800be36:	4b07      	ldr	r3, [pc, #28]	; (800be54 <__assert_func+0x34>)
 800be38:	001c      	movs	r4, r3
 800be3a:	4907      	ldr	r1, [pc, #28]	; (800be58 <__assert_func+0x38>)
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	9402      	str	r4, [sp, #8]
 800be40:	002b      	movs	r3, r5
 800be42:	9600      	str	r6, [sp, #0]
 800be44:	f000 f8ec 	bl	800c020 <fiprintf>
 800be48:	f000 f8fa 	bl	800c040 <abort>
 800be4c:	200001e0 	.word	0x200001e0
 800be50:	0800cc08 	.word	0x0800cc08
 800be54:	0800cc43 	.word	0x0800cc43
 800be58:	0800cc15 	.word	0x0800cc15

0800be5c <_calloc_r>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	0c0b      	lsrs	r3, r1, #16
 800be60:	0c15      	lsrs	r5, r2, #16
 800be62:	2b00      	cmp	r3, #0
 800be64:	d11e      	bne.n	800bea4 <_calloc_r+0x48>
 800be66:	2d00      	cmp	r5, #0
 800be68:	d10c      	bne.n	800be84 <_calloc_r+0x28>
 800be6a:	b289      	uxth	r1, r1
 800be6c:	b294      	uxth	r4, r2
 800be6e:	434c      	muls	r4, r1
 800be70:	0021      	movs	r1, r4
 800be72:	f7fb fa81 	bl	8007378 <_malloc_r>
 800be76:	1e05      	subs	r5, r0, #0
 800be78:	d01b      	beq.n	800beb2 <_calloc_r+0x56>
 800be7a:	0022      	movs	r2, r4
 800be7c:	2100      	movs	r1, #0
 800be7e:	f7fd f9ef 	bl	8009260 <memset>
 800be82:	e016      	b.n	800beb2 <_calloc_r+0x56>
 800be84:	1c2b      	adds	r3, r5, #0
 800be86:	1c0c      	adds	r4, r1, #0
 800be88:	b289      	uxth	r1, r1
 800be8a:	b292      	uxth	r2, r2
 800be8c:	434a      	muls	r2, r1
 800be8e:	b2a1      	uxth	r1, r4
 800be90:	b29c      	uxth	r4, r3
 800be92:	434c      	muls	r4, r1
 800be94:	0c13      	lsrs	r3, r2, #16
 800be96:	18e4      	adds	r4, r4, r3
 800be98:	0c23      	lsrs	r3, r4, #16
 800be9a:	d107      	bne.n	800beac <_calloc_r+0x50>
 800be9c:	0424      	lsls	r4, r4, #16
 800be9e:	b292      	uxth	r2, r2
 800bea0:	4314      	orrs	r4, r2
 800bea2:	e7e5      	b.n	800be70 <_calloc_r+0x14>
 800bea4:	2d00      	cmp	r5, #0
 800bea6:	d101      	bne.n	800beac <_calloc_r+0x50>
 800bea8:	1c14      	adds	r4, r2, #0
 800beaa:	e7ed      	b.n	800be88 <_calloc_r+0x2c>
 800beac:	230c      	movs	r3, #12
 800beae:	2500      	movs	r5, #0
 800beb0:	6003      	str	r3, [r0, #0]
 800beb2:	0028      	movs	r0, r5
 800beb4:	bd70      	pop	{r4, r5, r6, pc}

0800beb6 <_realloc_r>:
 800beb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beb8:	0007      	movs	r7, r0
 800beba:	000e      	movs	r6, r1
 800bebc:	0014      	movs	r4, r2
 800bebe:	2900      	cmp	r1, #0
 800bec0:	d105      	bne.n	800bece <_realloc_r+0x18>
 800bec2:	0011      	movs	r1, r2
 800bec4:	f7fb fa58 	bl	8007378 <_malloc_r>
 800bec8:	0005      	movs	r5, r0
 800beca:	0028      	movs	r0, r5
 800becc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bece:	2a00      	cmp	r2, #0
 800bed0:	d103      	bne.n	800beda <_realloc_r+0x24>
 800bed2:	f7fe f957 	bl	800a184 <_free_r>
 800bed6:	0025      	movs	r5, r4
 800bed8:	e7f7      	b.n	800beca <_realloc_r+0x14>
 800beda:	f000 f8b8 	bl	800c04e <_malloc_usable_size_r>
 800bede:	9001      	str	r0, [sp, #4]
 800bee0:	4284      	cmp	r4, r0
 800bee2:	d803      	bhi.n	800beec <_realloc_r+0x36>
 800bee4:	0035      	movs	r5, r6
 800bee6:	0843      	lsrs	r3, r0, #1
 800bee8:	42a3      	cmp	r3, r4
 800beea:	d3ee      	bcc.n	800beca <_realloc_r+0x14>
 800beec:	0021      	movs	r1, r4
 800beee:	0038      	movs	r0, r7
 800bef0:	f7fb fa42 	bl	8007378 <_malloc_r>
 800bef4:	1e05      	subs	r5, r0, #0
 800bef6:	d0e8      	beq.n	800beca <_realloc_r+0x14>
 800bef8:	9b01      	ldr	r3, [sp, #4]
 800befa:	0022      	movs	r2, r4
 800befc:	429c      	cmp	r4, r3
 800befe:	d900      	bls.n	800bf02 <_realloc_r+0x4c>
 800bf00:	001a      	movs	r2, r3
 800bf02:	0031      	movs	r1, r6
 800bf04:	0028      	movs	r0, r5
 800bf06:	f7fd fa8b 	bl	8009420 <memcpy>
 800bf0a:	0031      	movs	r1, r6
 800bf0c:	0038      	movs	r0, r7
 800bf0e:	f7fe f939 	bl	800a184 <_free_r>
 800bf12:	e7da      	b.n	800beca <_realloc_r+0x14>

0800bf14 <_strtoul_l.constprop.0>:
 800bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf16:	b087      	sub	sp, #28
 800bf18:	9202      	str	r2, [sp, #8]
 800bf1a:	4a3e      	ldr	r2, [pc, #248]	; (800c014 <_strtoul_l.constprop.0+0x100>)
 800bf1c:	001e      	movs	r6, r3
 800bf1e:	9101      	str	r1, [sp, #4]
 800bf20:	000b      	movs	r3, r1
 800bf22:	4694      	mov	ip, r2
 800bf24:	2108      	movs	r1, #8
 800bf26:	9005      	str	r0, [sp, #20]
 800bf28:	001a      	movs	r2, r3
 800bf2a:	4660      	mov	r0, ip
 800bf2c:	7814      	ldrb	r4, [r2, #0]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	5d00      	ldrb	r0, [r0, r4]
 800bf32:	001d      	movs	r5, r3
 800bf34:	0007      	movs	r7, r0
 800bf36:	400f      	ands	r7, r1
 800bf38:	4208      	tst	r0, r1
 800bf3a:	d1f5      	bne.n	800bf28 <_strtoul_l.constprop.0+0x14>
 800bf3c:	2c2d      	cmp	r4, #45	; 0x2d
 800bf3e:	d13d      	bne.n	800bfbc <_strtoul_l.constprop.0+0xa8>
 800bf40:	2701      	movs	r7, #1
 800bf42:	781c      	ldrb	r4, [r3, #0]
 800bf44:	1c95      	adds	r5, r2, #2
 800bf46:	2e00      	cmp	r6, #0
 800bf48:	d05f      	beq.n	800c00a <_strtoul_l.constprop.0+0xf6>
 800bf4a:	2e10      	cmp	r6, #16
 800bf4c:	d109      	bne.n	800bf62 <_strtoul_l.constprop.0+0x4e>
 800bf4e:	2c30      	cmp	r4, #48	; 0x30
 800bf50:	d107      	bne.n	800bf62 <_strtoul_l.constprop.0+0x4e>
 800bf52:	2220      	movs	r2, #32
 800bf54:	782b      	ldrb	r3, [r5, #0]
 800bf56:	4393      	bics	r3, r2
 800bf58:	2b58      	cmp	r3, #88	; 0x58
 800bf5a:	d151      	bne.n	800c000 <_strtoul_l.constprop.0+0xec>
 800bf5c:	2610      	movs	r6, #16
 800bf5e:	786c      	ldrb	r4, [r5, #1]
 800bf60:	3502      	adds	r5, #2
 800bf62:	2001      	movs	r0, #1
 800bf64:	0031      	movs	r1, r6
 800bf66:	4240      	negs	r0, r0
 800bf68:	f7f4 f8e8 	bl	800013c <__udivsi3>
 800bf6c:	9003      	str	r0, [sp, #12]
 800bf6e:	2001      	movs	r0, #1
 800bf70:	0031      	movs	r1, r6
 800bf72:	4240      	negs	r0, r0
 800bf74:	f7f4 f968 	bl	8000248 <__aeabi_uidivmod>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	9104      	str	r1, [sp, #16]
 800bf7e:	2101      	movs	r1, #1
 800bf80:	0018      	movs	r0, r3
 800bf82:	4694      	mov	ip, r2
 800bf84:	4249      	negs	r1, r1
 800bf86:	0022      	movs	r2, r4
 800bf88:	3a30      	subs	r2, #48	; 0x30
 800bf8a:	2a09      	cmp	r2, #9
 800bf8c:	d903      	bls.n	800bf96 <_strtoul_l.constprop.0+0x82>
 800bf8e:	3a11      	subs	r2, #17
 800bf90:	2a19      	cmp	r2, #25
 800bf92:	d818      	bhi.n	800bfc6 <_strtoul_l.constprop.0+0xb2>
 800bf94:	320a      	adds	r2, #10
 800bf96:	4296      	cmp	r6, r2
 800bf98:	dd19      	ble.n	800bfce <_strtoul_l.constprop.0+0xba>
 800bf9a:	1c5c      	adds	r4, r3, #1
 800bf9c:	d00b      	beq.n	800bfb6 <_strtoul_l.constprop.0+0xa2>
 800bf9e:	9c03      	ldr	r4, [sp, #12]
 800bfa0:	000b      	movs	r3, r1
 800bfa2:	4284      	cmp	r4, r0
 800bfa4:	d307      	bcc.n	800bfb6 <_strtoul_l.constprop.0+0xa2>
 800bfa6:	d103      	bne.n	800bfb0 <_strtoul_l.constprop.0+0x9c>
 800bfa8:	9c04      	ldr	r4, [sp, #16]
 800bfaa:	000b      	movs	r3, r1
 800bfac:	4294      	cmp	r4, r2
 800bfae:	db02      	blt.n	800bfb6 <_strtoul_l.constprop.0+0xa2>
 800bfb0:	4663      	mov	r3, ip
 800bfb2:	4370      	muls	r0, r6
 800bfb4:	1810      	adds	r0, r2, r0
 800bfb6:	782c      	ldrb	r4, [r5, #0]
 800bfb8:	3501      	adds	r5, #1
 800bfba:	e7e4      	b.n	800bf86 <_strtoul_l.constprop.0+0x72>
 800bfbc:	2c2b      	cmp	r4, #43	; 0x2b
 800bfbe:	d1c2      	bne.n	800bf46 <_strtoul_l.constprop.0+0x32>
 800bfc0:	781c      	ldrb	r4, [r3, #0]
 800bfc2:	1c95      	adds	r5, r2, #2
 800bfc4:	e7bf      	b.n	800bf46 <_strtoul_l.constprop.0+0x32>
 800bfc6:	0022      	movs	r2, r4
 800bfc8:	3a61      	subs	r2, #97	; 0x61
 800bfca:	2a19      	cmp	r2, #25
 800bfcc:	d9e2      	bls.n	800bf94 <_strtoul_l.constprop.0+0x80>
 800bfce:	1c5a      	adds	r2, r3, #1
 800bfd0:	d108      	bne.n	800bfe4 <_strtoul_l.constprop.0+0xd0>
 800bfd2:	2222      	movs	r2, #34	; 0x22
 800bfd4:	9905      	ldr	r1, [sp, #20]
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	600a      	str	r2, [r1, #0]
 800bfda:	9a02      	ldr	r2, [sp, #8]
 800bfdc:	2a00      	cmp	r2, #0
 800bfde:	d109      	bne.n	800bff4 <_strtoul_l.constprop.0+0xe0>
 800bfe0:	b007      	add	sp, #28
 800bfe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfe4:	2f00      	cmp	r7, #0
 800bfe6:	d000      	beq.n	800bfea <_strtoul_l.constprop.0+0xd6>
 800bfe8:	4240      	negs	r0, r0
 800bfea:	9a02      	ldr	r2, [sp, #8]
 800bfec:	2a00      	cmp	r2, #0
 800bfee:	d0f7      	beq.n	800bfe0 <_strtoul_l.constprop.0+0xcc>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d001      	beq.n	800bff8 <_strtoul_l.constprop.0+0xe4>
 800bff4:	1e6b      	subs	r3, r5, #1
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	9b02      	ldr	r3, [sp, #8]
 800bffa:	9a01      	ldr	r2, [sp, #4]
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	e7ef      	b.n	800bfe0 <_strtoul_l.constprop.0+0xcc>
 800c000:	2430      	movs	r4, #48	; 0x30
 800c002:	2e00      	cmp	r6, #0
 800c004:	d1ad      	bne.n	800bf62 <_strtoul_l.constprop.0+0x4e>
 800c006:	3608      	adds	r6, #8
 800c008:	e7ab      	b.n	800bf62 <_strtoul_l.constprop.0+0x4e>
 800c00a:	2c30      	cmp	r4, #48	; 0x30
 800c00c:	d0a1      	beq.n	800bf52 <_strtoul_l.constprop.0+0x3e>
 800c00e:	260a      	movs	r6, #10
 800c010:	e7a7      	b.n	800bf62 <_strtoul_l.constprop.0+0x4e>
 800c012:	46c0      	nop			; (mov r8, r8)
 800c014:	0800c859 	.word	0x0800c859

0800c018 <_strtoul_r>:
 800c018:	b510      	push	{r4, lr}
 800c01a:	f7ff ff7b 	bl	800bf14 <_strtoul_l.constprop.0>
 800c01e:	bd10      	pop	{r4, pc}

0800c020 <fiprintf>:
 800c020:	b40e      	push	{r1, r2, r3}
 800c022:	b517      	push	{r0, r1, r2, r4, lr}
 800c024:	4c05      	ldr	r4, [pc, #20]	; (800c03c <fiprintf+0x1c>)
 800c026:	ab05      	add	r3, sp, #20
 800c028:	cb04      	ldmia	r3!, {r2}
 800c02a:	0001      	movs	r1, r0
 800c02c:	6820      	ldr	r0, [r4, #0]
 800c02e:	9301      	str	r3, [sp, #4]
 800c030:	f000 f83c 	bl	800c0ac <_vfiprintf_r>
 800c034:	bc1e      	pop	{r1, r2, r3, r4}
 800c036:	bc08      	pop	{r3}
 800c038:	b003      	add	sp, #12
 800c03a:	4718      	bx	r3
 800c03c:	200001e0 	.word	0x200001e0

0800c040 <abort>:
 800c040:	2006      	movs	r0, #6
 800c042:	b510      	push	{r4, lr}
 800c044:	f000 fa1e 	bl	800c484 <raise>
 800c048:	2001      	movs	r0, #1
 800c04a:	f7f7 f911 	bl	8003270 <_exit>

0800c04e <_malloc_usable_size_r>:
 800c04e:	1f0b      	subs	r3, r1, #4
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	1f18      	subs	r0, r3, #4
 800c054:	2b00      	cmp	r3, #0
 800c056:	da01      	bge.n	800c05c <_malloc_usable_size_r+0xe>
 800c058:	580b      	ldr	r3, [r1, r0]
 800c05a:	18c0      	adds	r0, r0, r3
 800c05c:	4770      	bx	lr

0800c05e <__sfputc_r>:
 800c05e:	6893      	ldr	r3, [r2, #8]
 800c060:	b510      	push	{r4, lr}
 800c062:	3b01      	subs	r3, #1
 800c064:	6093      	str	r3, [r2, #8]
 800c066:	2b00      	cmp	r3, #0
 800c068:	da04      	bge.n	800c074 <__sfputc_r+0x16>
 800c06a:	6994      	ldr	r4, [r2, #24]
 800c06c:	42a3      	cmp	r3, r4
 800c06e:	db07      	blt.n	800c080 <__sfputc_r+0x22>
 800c070:	290a      	cmp	r1, #10
 800c072:	d005      	beq.n	800c080 <__sfputc_r+0x22>
 800c074:	6813      	ldr	r3, [r2, #0]
 800c076:	1c58      	adds	r0, r3, #1
 800c078:	6010      	str	r0, [r2, #0]
 800c07a:	7019      	strb	r1, [r3, #0]
 800c07c:	0008      	movs	r0, r1
 800c07e:	bd10      	pop	{r4, pc}
 800c080:	f000 f930 	bl	800c2e4 <__swbuf_r>
 800c084:	0001      	movs	r1, r0
 800c086:	e7f9      	b.n	800c07c <__sfputc_r+0x1e>

0800c088 <__sfputs_r>:
 800c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08a:	0006      	movs	r6, r0
 800c08c:	000f      	movs	r7, r1
 800c08e:	0014      	movs	r4, r2
 800c090:	18d5      	adds	r5, r2, r3
 800c092:	42ac      	cmp	r4, r5
 800c094:	d101      	bne.n	800c09a <__sfputs_r+0x12>
 800c096:	2000      	movs	r0, #0
 800c098:	e007      	b.n	800c0aa <__sfputs_r+0x22>
 800c09a:	7821      	ldrb	r1, [r4, #0]
 800c09c:	003a      	movs	r2, r7
 800c09e:	0030      	movs	r0, r6
 800c0a0:	f7ff ffdd 	bl	800c05e <__sfputc_r>
 800c0a4:	3401      	adds	r4, #1
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	d1f3      	bne.n	800c092 <__sfputs_r+0xa>
 800c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c0ac <_vfiprintf_r>:
 800c0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ae:	b0a1      	sub	sp, #132	; 0x84
 800c0b0:	000f      	movs	r7, r1
 800c0b2:	0015      	movs	r5, r2
 800c0b4:	001e      	movs	r6, r3
 800c0b6:	9003      	str	r0, [sp, #12]
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d004      	beq.n	800c0c6 <_vfiprintf_r+0x1a>
 800c0bc:	6a03      	ldr	r3, [r0, #32]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <_vfiprintf_r+0x1a>
 800c0c2:	f7fc ffcf 	bl	8009064 <__sinit>
 800c0c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0c8:	07db      	lsls	r3, r3, #31
 800c0ca:	d405      	bmi.n	800c0d8 <_vfiprintf_r+0x2c>
 800c0cc:	89bb      	ldrh	r3, [r7, #12]
 800c0ce:	059b      	lsls	r3, r3, #22
 800c0d0:	d402      	bmi.n	800c0d8 <_vfiprintf_r+0x2c>
 800c0d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c0d4:	f7fd f997 	bl	8009406 <__retarget_lock_acquire_recursive>
 800c0d8:	89bb      	ldrh	r3, [r7, #12]
 800c0da:	071b      	lsls	r3, r3, #28
 800c0dc:	d502      	bpl.n	800c0e4 <_vfiprintf_r+0x38>
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d113      	bne.n	800c10c <_vfiprintf_r+0x60>
 800c0e4:	0039      	movs	r1, r7
 800c0e6:	9803      	ldr	r0, [sp, #12]
 800c0e8:	f000 f93e 	bl	800c368 <__swsetup_r>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d00d      	beq.n	800c10c <_vfiprintf_r+0x60>
 800c0f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0f2:	07db      	lsls	r3, r3, #31
 800c0f4:	d503      	bpl.n	800c0fe <_vfiprintf_r+0x52>
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	4240      	negs	r0, r0
 800c0fa:	b021      	add	sp, #132	; 0x84
 800c0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0fe:	89bb      	ldrh	r3, [r7, #12]
 800c100:	059b      	lsls	r3, r3, #22
 800c102:	d4f8      	bmi.n	800c0f6 <_vfiprintf_r+0x4a>
 800c104:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c106:	f7fd f97f 	bl	8009408 <__retarget_lock_release_recursive>
 800c10a:	e7f4      	b.n	800c0f6 <_vfiprintf_r+0x4a>
 800c10c:	2300      	movs	r3, #0
 800c10e:	ac08      	add	r4, sp, #32
 800c110:	6163      	str	r3, [r4, #20]
 800c112:	3320      	adds	r3, #32
 800c114:	7663      	strb	r3, [r4, #25]
 800c116:	3310      	adds	r3, #16
 800c118:	76a3      	strb	r3, [r4, #26]
 800c11a:	9607      	str	r6, [sp, #28]
 800c11c:	002e      	movs	r6, r5
 800c11e:	7833      	ldrb	r3, [r6, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <_vfiprintf_r+0x7c>
 800c124:	2b25      	cmp	r3, #37	; 0x25
 800c126:	d148      	bne.n	800c1ba <_vfiprintf_r+0x10e>
 800c128:	1b73      	subs	r3, r6, r5
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	42ae      	cmp	r6, r5
 800c12e:	d00b      	beq.n	800c148 <_vfiprintf_r+0x9c>
 800c130:	002a      	movs	r2, r5
 800c132:	0039      	movs	r1, r7
 800c134:	9803      	ldr	r0, [sp, #12]
 800c136:	f7ff ffa7 	bl	800c088 <__sfputs_r>
 800c13a:	3001      	adds	r0, #1
 800c13c:	d100      	bne.n	800c140 <_vfiprintf_r+0x94>
 800c13e:	e0af      	b.n	800c2a0 <_vfiprintf_r+0x1f4>
 800c140:	6963      	ldr	r3, [r4, #20]
 800c142:	9a05      	ldr	r2, [sp, #20]
 800c144:	189b      	adds	r3, r3, r2
 800c146:	6163      	str	r3, [r4, #20]
 800c148:	7833      	ldrb	r3, [r6, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d100      	bne.n	800c150 <_vfiprintf_r+0xa4>
 800c14e:	e0a7      	b.n	800c2a0 <_vfiprintf_r+0x1f4>
 800c150:	2201      	movs	r2, #1
 800c152:	2300      	movs	r3, #0
 800c154:	4252      	negs	r2, r2
 800c156:	6062      	str	r2, [r4, #4]
 800c158:	a904      	add	r1, sp, #16
 800c15a:	3254      	adds	r2, #84	; 0x54
 800c15c:	1852      	adds	r2, r2, r1
 800c15e:	1c75      	adds	r5, r6, #1
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	60e3      	str	r3, [r4, #12]
 800c164:	60a3      	str	r3, [r4, #8]
 800c166:	7013      	strb	r3, [r2, #0]
 800c168:	65a3      	str	r3, [r4, #88]	; 0x58
 800c16a:	4b59      	ldr	r3, [pc, #356]	; (800c2d0 <_vfiprintf_r+0x224>)
 800c16c:	2205      	movs	r2, #5
 800c16e:	0018      	movs	r0, r3
 800c170:	7829      	ldrb	r1, [r5, #0]
 800c172:	9305      	str	r3, [sp, #20]
 800c174:	f7fd f949 	bl	800940a <memchr>
 800c178:	1c6e      	adds	r6, r5, #1
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d11f      	bne.n	800c1be <_vfiprintf_r+0x112>
 800c17e:	6822      	ldr	r2, [r4, #0]
 800c180:	06d3      	lsls	r3, r2, #27
 800c182:	d504      	bpl.n	800c18e <_vfiprintf_r+0xe2>
 800c184:	2353      	movs	r3, #83	; 0x53
 800c186:	a904      	add	r1, sp, #16
 800c188:	185b      	adds	r3, r3, r1
 800c18a:	2120      	movs	r1, #32
 800c18c:	7019      	strb	r1, [r3, #0]
 800c18e:	0713      	lsls	r3, r2, #28
 800c190:	d504      	bpl.n	800c19c <_vfiprintf_r+0xf0>
 800c192:	2353      	movs	r3, #83	; 0x53
 800c194:	a904      	add	r1, sp, #16
 800c196:	185b      	adds	r3, r3, r1
 800c198:	212b      	movs	r1, #43	; 0x2b
 800c19a:	7019      	strb	r1, [r3, #0]
 800c19c:	782b      	ldrb	r3, [r5, #0]
 800c19e:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a0:	d016      	beq.n	800c1d0 <_vfiprintf_r+0x124>
 800c1a2:	002e      	movs	r6, r5
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	200a      	movs	r0, #10
 800c1a8:	68e3      	ldr	r3, [r4, #12]
 800c1aa:	7832      	ldrb	r2, [r6, #0]
 800c1ac:	1c75      	adds	r5, r6, #1
 800c1ae:	3a30      	subs	r2, #48	; 0x30
 800c1b0:	2a09      	cmp	r2, #9
 800c1b2:	d94e      	bls.n	800c252 <_vfiprintf_r+0x1a6>
 800c1b4:	2900      	cmp	r1, #0
 800c1b6:	d111      	bne.n	800c1dc <_vfiprintf_r+0x130>
 800c1b8:	e017      	b.n	800c1ea <_vfiprintf_r+0x13e>
 800c1ba:	3601      	adds	r6, #1
 800c1bc:	e7af      	b.n	800c11e <_vfiprintf_r+0x72>
 800c1be:	9b05      	ldr	r3, [sp, #20]
 800c1c0:	6822      	ldr	r2, [r4, #0]
 800c1c2:	1ac0      	subs	r0, r0, r3
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4083      	lsls	r3, r0
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	0035      	movs	r5, r6
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	e7cc      	b.n	800c16a <_vfiprintf_r+0xbe>
 800c1d0:	9b07      	ldr	r3, [sp, #28]
 800c1d2:	1d19      	adds	r1, r3, #4
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	9107      	str	r1, [sp, #28]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	db01      	blt.n	800c1e0 <_vfiprintf_r+0x134>
 800c1dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1de:	e004      	b.n	800c1ea <_vfiprintf_r+0x13e>
 800c1e0:	425b      	negs	r3, r3
 800c1e2:	60e3      	str	r3, [r4, #12]
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	7833      	ldrb	r3, [r6, #0]
 800c1ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c1ee:	d10a      	bne.n	800c206 <_vfiprintf_r+0x15a>
 800c1f0:	7873      	ldrb	r3, [r6, #1]
 800c1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1f4:	d135      	bne.n	800c262 <_vfiprintf_r+0x1b6>
 800c1f6:	9b07      	ldr	r3, [sp, #28]
 800c1f8:	3602      	adds	r6, #2
 800c1fa:	1d1a      	adds	r2, r3, #4
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	9207      	str	r2, [sp, #28]
 800c200:	2b00      	cmp	r3, #0
 800c202:	db2b      	blt.n	800c25c <_vfiprintf_r+0x1b0>
 800c204:	9309      	str	r3, [sp, #36]	; 0x24
 800c206:	4d33      	ldr	r5, [pc, #204]	; (800c2d4 <_vfiprintf_r+0x228>)
 800c208:	2203      	movs	r2, #3
 800c20a:	0028      	movs	r0, r5
 800c20c:	7831      	ldrb	r1, [r6, #0]
 800c20e:	f7fd f8fc 	bl	800940a <memchr>
 800c212:	2800      	cmp	r0, #0
 800c214:	d006      	beq.n	800c224 <_vfiprintf_r+0x178>
 800c216:	2340      	movs	r3, #64	; 0x40
 800c218:	1b40      	subs	r0, r0, r5
 800c21a:	4083      	lsls	r3, r0
 800c21c:	6822      	ldr	r2, [r4, #0]
 800c21e:	3601      	adds	r6, #1
 800c220:	4313      	orrs	r3, r2
 800c222:	6023      	str	r3, [r4, #0]
 800c224:	7831      	ldrb	r1, [r6, #0]
 800c226:	2206      	movs	r2, #6
 800c228:	482b      	ldr	r0, [pc, #172]	; (800c2d8 <_vfiprintf_r+0x22c>)
 800c22a:	1c75      	adds	r5, r6, #1
 800c22c:	7621      	strb	r1, [r4, #24]
 800c22e:	f7fd f8ec 	bl	800940a <memchr>
 800c232:	2800      	cmp	r0, #0
 800c234:	d043      	beq.n	800c2be <_vfiprintf_r+0x212>
 800c236:	4b29      	ldr	r3, [pc, #164]	; (800c2dc <_vfiprintf_r+0x230>)
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d125      	bne.n	800c288 <_vfiprintf_r+0x1dc>
 800c23c:	2207      	movs	r2, #7
 800c23e:	9b07      	ldr	r3, [sp, #28]
 800c240:	3307      	adds	r3, #7
 800c242:	4393      	bics	r3, r2
 800c244:	3308      	adds	r3, #8
 800c246:	9307      	str	r3, [sp, #28]
 800c248:	6963      	ldr	r3, [r4, #20]
 800c24a:	9a04      	ldr	r2, [sp, #16]
 800c24c:	189b      	adds	r3, r3, r2
 800c24e:	6163      	str	r3, [r4, #20]
 800c250:	e764      	b.n	800c11c <_vfiprintf_r+0x70>
 800c252:	4343      	muls	r3, r0
 800c254:	002e      	movs	r6, r5
 800c256:	2101      	movs	r1, #1
 800c258:	189b      	adds	r3, r3, r2
 800c25a:	e7a6      	b.n	800c1aa <_vfiprintf_r+0xfe>
 800c25c:	2301      	movs	r3, #1
 800c25e:	425b      	negs	r3, r3
 800c260:	e7d0      	b.n	800c204 <_vfiprintf_r+0x158>
 800c262:	2300      	movs	r3, #0
 800c264:	200a      	movs	r0, #10
 800c266:	001a      	movs	r2, r3
 800c268:	3601      	adds	r6, #1
 800c26a:	6063      	str	r3, [r4, #4]
 800c26c:	7831      	ldrb	r1, [r6, #0]
 800c26e:	1c75      	adds	r5, r6, #1
 800c270:	3930      	subs	r1, #48	; 0x30
 800c272:	2909      	cmp	r1, #9
 800c274:	d903      	bls.n	800c27e <_vfiprintf_r+0x1d2>
 800c276:	2b00      	cmp	r3, #0
 800c278:	d0c5      	beq.n	800c206 <_vfiprintf_r+0x15a>
 800c27a:	9209      	str	r2, [sp, #36]	; 0x24
 800c27c:	e7c3      	b.n	800c206 <_vfiprintf_r+0x15a>
 800c27e:	4342      	muls	r2, r0
 800c280:	002e      	movs	r6, r5
 800c282:	2301      	movs	r3, #1
 800c284:	1852      	adds	r2, r2, r1
 800c286:	e7f1      	b.n	800c26c <_vfiprintf_r+0x1c0>
 800c288:	aa07      	add	r2, sp, #28
 800c28a:	9200      	str	r2, [sp, #0]
 800c28c:	0021      	movs	r1, r4
 800c28e:	003a      	movs	r2, r7
 800c290:	4b13      	ldr	r3, [pc, #76]	; (800c2e0 <_vfiprintf_r+0x234>)
 800c292:	9803      	ldr	r0, [sp, #12]
 800c294:	f7fc f878 	bl	8008388 <_printf_float>
 800c298:	9004      	str	r0, [sp, #16]
 800c29a:	9b04      	ldr	r3, [sp, #16]
 800c29c:	3301      	adds	r3, #1
 800c29e:	d1d3      	bne.n	800c248 <_vfiprintf_r+0x19c>
 800c2a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2a2:	07db      	lsls	r3, r3, #31
 800c2a4:	d405      	bmi.n	800c2b2 <_vfiprintf_r+0x206>
 800c2a6:	89bb      	ldrh	r3, [r7, #12]
 800c2a8:	059b      	lsls	r3, r3, #22
 800c2aa:	d402      	bmi.n	800c2b2 <_vfiprintf_r+0x206>
 800c2ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c2ae:	f7fd f8ab 	bl	8009408 <__retarget_lock_release_recursive>
 800c2b2:	89bb      	ldrh	r3, [r7, #12]
 800c2b4:	065b      	lsls	r3, r3, #25
 800c2b6:	d500      	bpl.n	800c2ba <_vfiprintf_r+0x20e>
 800c2b8:	e71d      	b.n	800c0f6 <_vfiprintf_r+0x4a>
 800c2ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c2bc:	e71d      	b.n	800c0fa <_vfiprintf_r+0x4e>
 800c2be:	aa07      	add	r2, sp, #28
 800c2c0:	9200      	str	r2, [sp, #0]
 800c2c2:	0021      	movs	r1, r4
 800c2c4:	003a      	movs	r2, r7
 800c2c6:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <_vfiprintf_r+0x234>)
 800c2c8:	9803      	ldr	r0, [sp, #12]
 800c2ca:	f7fc fb23 	bl	8008914 <_printf_i>
 800c2ce:	e7e3      	b.n	800c298 <_vfiprintf_r+0x1ec>
 800c2d0:	0800cbdc 	.word	0x0800cbdc
 800c2d4:	0800cbe2 	.word	0x0800cbe2
 800c2d8:	0800cbe6 	.word	0x0800cbe6
 800c2dc:	08008389 	.word	0x08008389
 800c2e0:	0800c089 	.word	0x0800c089

0800c2e4 <__swbuf_r>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	0006      	movs	r6, r0
 800c2e8:	000d      	movs	r5, r1
 800c2ea:	0014      	movs	r4, r2
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d004      	beq.n	800c2fa <__swbuf_r+0x16>
 800c2f0:	6a03      	ldr	r3, [r0, #32]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <__swbuf_r+0x16>
 800c2f6:	f7fc feb5 	bl	8009064 <__sinit>
 800c2fa:	69a3      	ldr	r3, [r4, #24]
 800c2fc:	60a3      	str	r3, [r4, #8]
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	071b      	lsls	r3, r3, #28
 800c302:	d528      	bpl.n	800c356 <__swbuf_r+0x72>
 800c304:	6923      	ldr	r3, [r4, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d025      	beq.n	800c356 <__swbuf_r+0x72>
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	6820      	ldr	r0, [r4, #0]
 800c30e:	b2ef      	uxtb	r7, r5
 800c310:	1ac0      	subs	r0, r0, r3
 800c312:	6963      	ldr	r3, [r4, #20]
 800c314:	b2ed      	uxtb	r5, r5
 800c316:	4283      	cmp	r3, r0
 800c318:	dc05      	bgt.n	800c326 <__swbuf_r+0x42>
 800c31a:	0021      	movs	r1, r4
 800c31c:	0030      	movs	r0, r6
 800c31e:	f7ff fcc5 	bl	800bcac <_fflush_r>
 800c322:	2800      	cmp	r0, #0
 800c324:	d11d      	bne.n	800c362 <__swbuf_r+0x7e>
 800c326:	68a3      	ldr	r3, [r4, #8]
 800c328:	3001      	adds	r0, #1
 800c32a:	3b01      	subs	r3, #1
 800c32c:	60a3      	str	r3, [r4, #8]
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	1c5a      	adds	r2, r3, #1
 800c332:	6022      	str	r2, [r4, #0]
 800c334:	701f      	strb	r7, [r3, #0]
 800c336:	6963      	ldr	r3, [r4, #20]
 800c338:	4283      	cmp	r3, r0
 800c33a:	d004      	beq.n	800c346 <__swbuf_r+0x62>
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	07db      	lsls	r3, r3, #31
 800c340:	d507      	bpl.n	800c352 <__swbuf_r+0x6e>
 800c342:	2d0a      	cmp	r5, #10
 800c344:	d105      	bne.n	800c352 <__swbuf_r+0x6e>
 800c346:	0021      	movs	r1, r4
 800c348:	0030      	movs	r0, r6
 800c34a:	f7ff fcaf 	bl	800bcac <_fflush_r>
 800c34e:	2800      	cmp	r0, #0
 800c350:	d107      	bne.n	800c362 <__swbuf_r+0x7e>
 800c352:	0028      	movs	r0, r5
 800c354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c356:	0021      	movs	r1, r4
 800c358:	0030      	movs	r0, r6
 800c35a:	f000 f805 	bl	800c368 <__swsetup_r>
 800c35e:	2800      	cmp	r0, #0
 800c360:	d0d3      	beq.n	800c30a <__swbuf_r+0x26>
 800c362:	2501      	movs	r5, #1
 800c364:	426d      	negs	r5, r5
 800c366:	e7f4      	b.n	800c352 <__swbuf_r+0x6e>

0800c368 <__swsetup_r>:
 800c368:	4b30      	ldr	r3, [pc, #192]	; (800c42c <__swsetup_r+0xc4>)
 800c36a:	b570      	push	{r4, r5, r6, lr}
 800c36c:	0005      	movs	r5, r0
 800c36e:	6818      	ldr	r0, [r3, #0]
 800c370:	000c      	movs	r4, r1
 800c372:	2800      	cmp	r0, #0
 800c374:	d004      	beq.n	800c380 <__swsetup_r+0x18>
 800c376:	6a03      	ldr	r3, [r0, #32]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <__swsetup_r+0x18>
 800c37c:	f7fc fe72 	bl	8009064 <__sinit>
 800c380:	230c      	movs	r3, #12
 800c382:	5ee2      	ldrsh	r2, [r4, r3]
 800c384:	b293      	uxth	r3, r2
 800c386:	0711      	lsls	r1, r2, #28
 800c388:	d423      	bmi.n	800c3d2 <__swsetup_r+0x6a>
 800c38a:	06d9      	lsls	r1, r3, #27
 800c38c:	d407      	bmi.n	800c39e <__swsetup_r+0x36>
 800c38e:	2309      	movs	r3, #9
 800c390:	2001      	movs	r0, #1
 800c392:	602b      	str	r3, [r5, #0]
 800c394:	3337      	adds	r3, #55	; 0x37
 800c396:	4313      	orrs	r3, r2
 800c398:	81a3      	strh	r3, [r4, #12]
 800c39a:	4240      	negs	r0, r0
 800c39c:	bd70      	pop	{r4, r5, r6, pc}
 800c39e:	075b      	lsls	r3, r3, #29
 800c3a0:	d513      	bpl.n	800c3ca <__swsetup_r+0x62>
 800c3a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3a4:	2900      	cmp	r1, #0
 800c3a6:	d008      	beq.n	800c3ba <__swsetup_r+0x52>
 800c3a8:	0023      	movs	r3, r4
 800c3aa:	3344      	adds	r3, #68	; 0x44
 800c3ac:	4299      	cmp	r1, r3
 800c3ae:	d002      	beq.n	800c3b6 <__swsetup_r+0x4e>
 800c3b0:	0028      	movs	r0, r5
 800c3b2:	f7fd fee7 	bl	800a184 <_free_r>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	6363      	str	r3, [r4, #52]	; 0x34
 800c3ba:	2224      	movs	r2, #36	; 0x24
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	4393      	bics	r3, r2
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	6063      	str	r3, [r4, #4]
 800c3c6:	6923      	ldr	r3, [r4, #16]
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	2308      	movs	r3, #8
 800c3cc:	89a2      	ldrh	r2, [r4, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	6923      	ldr	r3, [r4, #16]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10b      	bne.n	800c3f0 <__swsetup_r+0x88>
 800c3d8:	21a0      	movs	r1, #160	; 0xa0
 800c3da:	2280      	movs	r2, #128	; 0x80
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	0089      	lsls	r1, r1, #2
 800c3e0:	0092      	lsls	r2, r2, #2
 800c3e2:	400b      	ands	r3, r1
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d003      	beq.n	800c3f0 <__swsetup_r+0x88>
 800c3e8:	0021      	movs	r1, r4
 800c3ea:	0028      	movs	r0, r5
 800c3ec:	f000 f892 	bl	800c514 <__smakebuf_r>
 800c3f0:	220c      	movs	r2, #12
 800c3f2:	5ea3      	ldrsh	r3, [r4, r2]
 800c3f4:	2001      	movs	r0, #1
 800c3f6:	001a      	movs	r2, r3
 800c3f8:	b299      	uxth	r1, r3
 800c3fa:	4002      	ands	r2, r0
 800c3fc:	4203      	tst	r3, r0
 800c3fe:	d00f      	beq.n	800c420 <__swsetup_r+0xb8>
 800c400:	2200      	movs	r2, #0
 800c402:	60a2      	str	r2, [r4, #8]
 800c404:	6962      	ldr	r2, [r4, #20]
 800c406:	4252      	negs	r2, r2
 800c408:	61a2      	str	r2, [r4, #24]
 800c40a:	2000      	movs	r0, #0
 800c40c:	6922      	ldr	r2, [r4, #16]
 800c40e:	4282      	cmp	r2, r0
 800c410:	d1c4      	bne.n	800c39c <__swsetup_r+0x34>
 800c412:	0609      	lsls	r1, r1, #24
 800c414:	d5c2      	bpl.n	800c39c <__swsetup_r+0x34>
 800c416:	2240      	movs	r2, #64	; 0x40
 800c418:	4313      	orrs	r3, r2
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	3801      	subs	r0, #1
 800c41e:	e7bd      	b.n	800c39c <__swsetup_r+0x34>
 800c420:	0788      	lsls	r0, r1, #30
 800c422:	d400      	bmi.n	800c426 <__swsetup_r+0xbe>
 800c424:	6962      	ldr	r2, [r4, #20]
 800c426:	60a2      	str	r2, [r4, #8]
 800c428:	e7ef      	b.n	800c40a <__swsetup_r+0xa2>
 800c42a:	46c0      	nop			; (mov r8, r8)
 800c42c:	200001e0 	.word	0x200001e0

0800c430 <_raise_r>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	0004      	movs	r4, r0
 800c434:	000d      	movs	r5, r1
 800c436:	291f      	cmp	r1, #31
 800c438:	d904      	bls.n	800c444 <_raise_r+0x14>
 800c43a:	2316      	movs	r3, #22
 800c43c:	6003      	str	r3, [r0, #0]
 800c43e:	2001      	movs	r0, #1
 800c440:	4240      	negs	r0, r0
 800c442:	bd70      	pop	{r4, r5, r6, pc}
 800c444:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c446:	2b00      	cmp	r3, #0
 800c448:	d004      	beq.n	800c454 <_raise_r+0x24>
 800c44a:	008a      	lsls	r2, r1, #2
 800c44c:	189b      	adds	r3, r3, r2
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	2a00      	cmp	r2, #0
 800c452:	d108      	bne.n	800c466 <_raise_r+0x36>
 800c454:	0020      	movs	r0, r4
 800c456:	f000 f831 	bl	800c4bc <_getpid_r>
 800c45a:	002a      	movs	r2, r5
 800c45c:	0001      	movs	r1, r0
 800c45e:	0020      	movs	r0, r4
 800c460:	f000 f81a 	bl	800c498 <_kill_r>
 800c464:	e7ed      	b.n	800c442 <_raise_r+0x12>
 800c466:	2000      	movs	r0, #0
 800c468:	2a01      	cmp	r2, #1
 800c46a:	d0ea      	beq.n	800c442 <_raise_r+0x12>
 800c46c:	1c51      	adds	r1, r2, #1
 800c46e:	d103      	bne.n	800c478 <_raise_r+0x48>
 800c470:	2316      	movs	r3, #22
 800c472:	3001      	adds	r0, #1
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	e7e4      	b.n	800c442 <_raise_r+0x12>
 800c478:	2400      	movs	r4, #0
 800c47a:	0028      	movs	r0, r5
 800c47c:	601c      	str	r4, [r3, #0]
 800c47e:	4790      	blx	r2
 800c480:	0020      	movs	r0, r4
 800c482:	e7de      	b.n	800c442 <_raise_r+0x12>

0800c484 <raise>:
 800c484:	b510      	push	{r4, lr}
 800c486:	4b03      	ldr	r3, [pc, #12]	; (800c494 <raise+0x10>)
 800c488:	0001      	movs	r1, r0
 800c48a:	6818      	ldr	r0, [r3, #0]
 800c48c:	f7ff ffd0 	bl	800c430 <_raise_r>
 800c490:	bd10      	pop	{r4, pc}
 800c492:	46c0      	nop			; (mov r8, r8)
 800c494:	200001e0 	.word	0x200001e0

0800c498 <_kill_r>:
 800c498:	2300      	movs	r3, #0
 800c49a:	b570      	push	{r4, r5, r6, lr}
 800c49c:	4d06      	ldr	r5, [pc, #24]	; (800c4b8 <_kill_r+0x20>)
 800c49e:	0004      	movs	r4, r0
 800c4a0:	0008      	movs	r0, r1
 800c4a2:	0011      	movs	r1, r2
 800c4a4:	602b      	str	r3, [r5, #0]
 800c4a6:	f7f6 fed3 	bl	8003250 <_kill>
 800c4aa:	1c43      	adds	r3, r0, #1
 800c4ac:	d103      	bne.n	800c4b6 <_kill_r+0x1e>
 800c4ae:	682b      	ldr	r3, [r5, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d000      	beq.n	800c4b6 <_kill_r+0x1e>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	200007a8 	.word	0x200007a8

0800c4bc <_getpid_r>:
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	f7f6 fec1 	bl	8003244 <_getpid>
 800c4c2:	bd10      	pop	{r4, pc}

0800c4c4 <__swhatbuf_r>:
 800c4c4:	b570      	push	{r4, r5, r6, lr}
 800c4c6:	000e      	movs	r6, r1
 800c4c8:	001d      	movs	r5, r3
 800c4ca:	230e      	movs	r3, #14
 800c4cc:	5ec9      	ldrsh	r1, [r1, r3]
 800c4ce:	0014      	movs	r4, r2
 800c4d0:	b096      	sub	sp, #88	; 0x58
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	da0c      	bge.n	800c4f0 <__swhatbuf_r+0x2c>
 800c4d6:	89b2      	ldrh	r2, [r6, #12]
 800c4d8:	2380      	movs	r3, #128	; 0x80
 800c4da:	0011      	movs	r1, r2
 800c4dc:	4019      	ands	r1, r3
 800c4de:	421a      	tst	r2, r3
 800c4e0:	d013      	beq.n	800c50a <__swhatbuf_r+0x46>
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	3b40      	subs	r3, #64	; 0x40
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	6029      	str	r1, [r5, #0]
 800c4ea:	6023      	str	r3, [r4, #0]
 800c4ec:	b016      	add	sp, #88	; 0x58
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}
 800c4f0:	466a      	mov	r2, sp
 800c4f2:	f000 f84d 	bl	800c590 <_fstat_r>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	dbed      	blt.n	800c4d6 <__swhatbuf_r+0x12>
 800c4fa:	23f0      	movs	r3, #240	; 0xf0
 800c4fc:	9901      	ldr	r1, [sp, #4]
 800c4fe:	021b      	lsls	r3, r3, #8
 800c500:	4019      	ands	r1, r3
 800c502:	4b03      	ldr	r3, [pc, #12]	; (800c510 <__swhatbuf_r+0x4c>)
 800c504:	18c9      	adds	r1, r1, r3
 800c506:	424b      	negs	r3, r1
 800c508:	4159      	adcs	r1, r3
 800c50a:	2380      	movs	r3, #128	; 0x80
 800c50c:	00db      	lsls	r3, r3, #3
 800c50e:	e7ea      	b.n	800c4e6 <__swhatbuf_r+0x22>
 800c510:	ffffe000 	.word	0xffffe000

0800c514 <__smakebuf_r>:
 800c514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c516:	2602      	movs	r6, #2
 800c518:	898b      	ldrh	r3, [r1, #12]
 800c51a:	0005      	movs	r5, r0
 800c51c:	000c      	movs	r4, r1
 800c51e:	4233      	tst	r3, r6
 800c520:	d006      	beq.n	800c530 <__smakebuf_r+0x1c>
 800c522:	0023      	movs	r3, r4
 800c524:	3347      	adds	r3, #71	; 0x47
 800c526:	6023      	str	r3, [r4, #0]
 800c528:	6123      	str	r3, [r4, #16]
 800c52a:	2301      	movs	r3, #1
 800c52c:	6163      	str	r3, [r4, #20]
 800c52e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c530:	466a      	mov	r2, sp
 800c532:	ab01      	add	r3, sp, #4
 800c534:	f7ff ffc6 	bl	800c4c4 <__swhatbuf_r>
 800c538:	9900      	ldr	r1, [sp, #0]
 800c53a:	0007      	movs	r7, r0
 800c53c:	0028      	movs	r0, r5
 800c53e:	f7fa ff1b 	bl	8007378 <_malloc_r>
 800c542:	2800      	cmp	r0, #0
 800c544:	d108      	bne.n	800c558 <__smakebuf_r+0x44>
 800c546:	220c      	movs	r2, #12
 800c548:	5ea3      	ldrsh	r3, [r4, r2]
 800c54a:	059a      	lsls	r2, r3, #22
 800c54c:	d4ef      	bmi.n	800c52e <__smakebuf_r+0x1a>
 800c54e:	2203      	movs	r2, #3
 800c550:	4393      	bics	r3, r2
 800c552:	431e      	orrs	r6, r3
 800c554:	81a6      	strh	r6, [r4, #12]
 800c556:	e7e4      	b.n	800c522 <__smakebuf_r+0xe>
 800c558:	2380      	movs	r3, #128	; 0x80
 800c55a:	89a2      	ldrh	r2, [r4, #12]
 800c55c:	6020      	str	r0, [r4, #0]
 800c55e:	4313      	orrs	r3, r2
 800c560:	81a3      	strh	r3, [r4, #12]
 800c562:	9b00      	ldr	r3, [sp, #0]
 800c564:	6120      	str	r0, [r4, #16]
 800c566:	6163      	str	r3, [r4, #20]
 800c568:	9b01      	ldr	r3, [sp, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00c      	beq.n	800c588 <__smakebuf_r+0x74>
 800c56e:	0028      	movs	r0, r5
 800c570:	230e      	movs	r3, #14
 800c572:	5ee1      	ldrsh	r1, [r4, r3]
 800c574:	f000 f81e 	bl	800c5b4 <_isatty_r>
 800c578:	2800      	cmp	r0, #0
 800c57a:	d005      	beq.n	800c588 <__smakebuf_r+0x74>
 800c57c:	2303      	movs	r3, #3
 800c57e:	89a2      	ldrh	r2, [r4, #12]
 800c580:	439a      	bics	r2, r3
 800c582:	3b02      	subs	r3, #2
 800c584:	4313      	orrs	r3, r2
 800c586:	81a3      	strh	r3, [r4, #12]
 800c588:	89a3      	ldrh	r3, [r4, #12]
 800c58a:	433b      	orrs	r3, r7
 800c58c:	81a3      	strh	r3, [r4, #12]
 800c58e:	e7ce      	b.n	800c52e <__smakebuf_r+0x1a>

0800c590 <_fstat_r>:
 800c590:	2300      	movs	r3, #0
 800c592:	b570      	push	{r4, r5, r6, lr}
 800c594:	4d06      	ldr	r5, [pc, #24]	; (800c5b0 <_fstat_r+0x20>)
 800c596:	0004      	movs	r4, r0
 800c598:	0008      	movs	r0, r1
 800c59a:	0011      	movs	r1, r2
 800c59c:	602b      	str	r3, [r5, #0]
 800c59e:	f7f6 feb6 	bl	800330e <_fstat>
 800c5a2:	1c43      	adds	r3, r0, #1
 800c5a4:	d103      	bne.n	800c5ae <_fstat_r+0x1e>
 800c5a6:	682b      	ldr	r3, [r5, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d000      	beq.n	800c5ae <_fstat_r+0x1e>
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}
 800c5b0:	200007a8 	.word	0x200007a8

0800c5b4 <_isatty_r>:
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	b570      	push	{r4, r5, r6, lr}
 800c5b8:	4d06      	ldr	r5, [pc, #24]	; (800c5d4 <_isatty_r+0x20>)
 800c5ba:	0004      	movs	r4, r0
 800c5bc:	0008      	movs	r0, r1
 800c5be:	602b      	str	r3, [r5, #0]
 800c5c0:	f7f6 feb3 	bl	800332a <_isatty>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d103      	bne.n	800c5d0 <_isatty_r+0x1c>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d000      	beq.n	800c5d0 <_isatty_r+0x1c>
 800c5ce:	6023      	str	r3, [r4, #0]
 800c5d0:	bd70      	pop	{r4, r5, r6, pc}
 800c5d2:	46c0      	nop			; (mov r8, r8)
 800c5d4:	200007a8 	.word	0x200007a8

0800c5d8 <round>:
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	004a      	lsls	r2, r1, #1
 800c5dc:	000d      	movs	r5, r1
 800c5de:	4920      	ldr	r1, [pc, #128]	; (800c660 <round+0x88>)
 800c5e0:	0d52      	lsrs	r2, r2, #21
 800c5e2:	1851      	adds	r1, r2, r1
 800c5e4:	0006      	movs	r6, r0
 800c5e6:	2913      	cmp	r1, #19
 800c5e8:	dc18      	bgt.n	800c61c <round+0x44>
 800c5ea:	2900      	cmp	r1, #0
 800c5ec:	da09      	bge.n	800c602 <round+0x2a>
 800c5ee:	0feb      	lsrs	r3, r5, #31
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	07db      	lsls	r3, r3, #31
 800c5f4:	3101      	adds	r1, #1
 800c5f6:	d101      	bne.n	800c5fc <round+0x24>
 800c5f8:	491a      	ldr	r1, [pc, #104]	; (800c664 <round+0x8c>)
 800c5fa:	430b      	orrs	r3, r1
 800c5fc:	0019      	movs	r1, r3
 800c5fe:	0010      	movs	r0, r2
 800c600:	e017      	b.n	800c632 <round+0x5a>
 800c602:	4c19      	ldr	r4, [pc, #100]	; (800c668 <round+0x90>)
 800c604:	410c      	asrs	r4, r1
 800c606:	0022      	movs	r2, r4
 800c608:	402a      	ands	r2, r5
 800c60a:	4302      	orrs	r2, r0
 800c60c:	d013      	beq.n	800c636 <round+0x5e>
 800c60e:	2280      	movs	r2, #128	; 0x80
 800c610:	0312      	lsls	r2, r2, #12
 800c612:	410a      	asrs	r2, r1
 800c614:	1953      	adds	r3, r2, r5
 800c616:	43a3      	bics	r3, r4
 800c618:	2200      	movs	r2, #0
 800c61a:	e7ef      	b.n	800c5fc <round+0x24>
 800c61c:	2933      	cmp	r1, #51	; 0x33
 800c61e:	dd0d      	ble.n	800c63c <round+0x64>
 800c620:	2380      	movs	r3, #128	; 0x80
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	4299      	cmp	r1, r3
 800c626:	d106      	bne.n	800c636 <round+0x5e>
 800c628:	0002      	movs	r2, r0
 800c62a:	002b      	movs	r3, r5
 800c62c:	0029      	movs	r1, r5
 800c62e:	f7f4 f895 	bl	800075c <__aeabi_dadd>
 800c632:	0006      	movs	r6, r0
 800c634:	000d      	movs	r5, r1
 800c636:	0030      	movs	r0, r6
 800c638:	0029      	movs	r1, r5
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	4c0b      	ldr	r4, [pc, #44]	; (800c66c <round+0x94>)
 800c63e:	1912      	adds	r2, r2, r4
 800c640:	2401      	movs	r4, #1
 800c642:	4264      	negs	r4, r4
 800c644:	40d4      	lsrs	r4, r2
 800c646:	4220      	tst	r0, r4
 800c648:	d0f5      	beq.n	800c636 <round+0x5e>
 800c64a:	2233      	movs	r2, #51	; 0x33
 800c64c:	1a51      	subs	r1, r2, r1
 800c64e:	3a32      	subs	r2, #50	; 0x32
 800c650:	408a      	lsls	r2, r1
 800c652:	1812      	adds	r2, r2, r0
 800c654:	4282      	cmp	r2, r0
 800c656:	4180      	sbcs	r0, r0
 800c658:	4240      	negs	r0, r0
 800c65a:	182b      	adds	r3, r5, r0
 800c65c:	43a2      	bics	r2, r4
 800c65e:	e7cd      	b.n	800c5fc <round+0x24>
 800c660:	fffffc01 	.word	0xfffffc01
 800c664:	3ff00000 	.word	0x3ff00000
 800c668:	000fffff 	.word	0x000fffff
 800c66c:	fffffbed 	.word	0xfffffbed

0800c670 <_init>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	46c0      	nop			; (mov r8, r8)
 800c674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c676:	bc08      	pop	{r3}
 800c678:	469e      	mov	lr, r3
 800c67a:	4770      	bx	lr

0800c67c <_fini>:
 800c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67e:	46c0      	nop			; (mov r8, r8)
 800c680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c682:	bc08      	pop	{r3}
 800c684:	469e      	mov	lr, r3
 800c686:	4770      	bx	lr
