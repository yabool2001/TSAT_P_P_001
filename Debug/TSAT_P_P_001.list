
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001287c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e54  08012938  08012938  00022938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801478c  0801478c  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801478c  0801478c  0002478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014794  08014794  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014794  08014794  00024794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801479c  0801479c  0002479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  080147a0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  200006e0  08014e80  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e34  08014e80  00030e34  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d7ad  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d0f  00000000  00000000  0004def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a38  00000000  00000000  00051c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001482  00000000  00000000  00053640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ddd7  00000000  00000000  00054ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df4f  00000000  00000000  00072899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1543  00000000  00000000  000907e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007af0  00000000  00000000  00141d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014981c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012920 	.word	0x08012920

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	08012920 	.word	0x08012920

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08014248 	.word	0x08014248
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f869 	bl	8003684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f8e3 	bl	800277c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fb1d 	bl	8002bf4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fa99 	bl	8002af0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fa49 	bl	8002a54 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 fae3 	bl	8002b8c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c6:	f000 fa07 	bl	80029d8 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ca:	f000 f923 	bl	8002814 <MX_RTC_Init>
  MX_SPI1_Init();
 80025ce:	f000 f9c5 	bl	800295c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <main+0x17c>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4b53      	ldr	r3, [pc, #332]	; (8002724 <main+0x17c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	484f      	ldr	r0, [pc, #316]	; (8002728 <main+0x180>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f004 faf8 	bl	8006be0 <HAL_UART_Transmit>

  is_system_already_initialized = is_system_initialized () ;
 80025f0:	f000 fcea 	bl	8002fc8 <is_system_initialized>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	4b4c      	ldr	r3, [pc, #304]	; (800272c <main+0x184>)
 80025fa:	701a      	strb	r2, [r3, #0]

  my_lis2dw12_init ( &hspi1 ) ;
 80025fc:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <main+0x188>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f007 f97c 	bl	80098fc <my_lis2dw12_init>

  if ( !my_astro_init () )
 8002604:	f007 f8ac 	bl	8009760 <my_astro_init>
 8002608:	0003      	movs	r3, r0
 800260a:	001a      	movs	r2, r3
 800260c:	2301      	movs	r3, #1
 800260e:	4053      	eors	r3, r2
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <main+0x72>
  {
	  HAL_NVIC_SystemReset () ;
 8002616:	f001 f9c2 	bl	800399e <HAL_NVIC_SystemReset>
  }

  astro_geo_wr_latitude = 0 ;
 800261a:	4b46      	ldr	r3, [pc, #280]	; (8002734 <main+0x18c>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
  astro_geo_wr_longitude = 0 ;
 8002620:	4b45      	ldr	r3, [pc, #276]	; (8002738 <main+0x190>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
  if ( my_lx6_get_coordinates ( my_lx6_gnss_max_active_time , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 8002626:	4b45      	ldr	r3, [pc, #276]	; (800273c <main+0x194>)
 8002628:	8818      	ldrh	r0, [r3, #0]
 800262a:	4b45      	ldr	r3, [pc, #276]	; (8002740 <main+0x198>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4941      	ldr	r1, [pc, #260]	; (8002738 <main+0x190>)
 8002632:	9102      	str	r1, [sp, #8]
 8002634:	493f      	ldr	r1, [pc, #252]	; (8002734 <main+0x18c>)
 8002636:	9101      	str	r1, [sp, #4]
 8002638:	4942      	ldr	r1, [pc, #264]	; (8002744 <main+0x19c>)
 800263a:	9100      	str	r1, [sp, #0]
 800263c:	f007 fa3e 	bl	8009abc <my_lx6_get_coordinates>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d023      	beq.n	800268c <main+0xe4>
  {
	  my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <main+0x18c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <main+0x190>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0019      	movs	r1, r3
 800264e:	0010      	movs	r0, r2
 8002650:	f007 f944 	bl	80098dc <my_astro_write_coordinates>
	  get_my_rtc_time ( rtc_dt ) ;
 8002654:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <main+0x1a0>)
 8002656:	0018      	movs	r0, r3
 8002658:	f007 fc6e 	bl	8009f38 <get_my_rtc_time>
	  send_debug_logs ( rtc_dt ) ;
 800265c:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <main+0x1a0>)
 800265e:	0018      	movs	r0, r3
 8002660:	f000 fb82 	bl	8002d68 <send_debug_logs>
	  if ( nmea_fixed_pdop_d < 100.0 )
 8002664:	4b37      	ldr	r3, [pc, #220]	; (8002744 <main+0x19c>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	4b37      	ldr	r3, [pc, #220]	; (800274c <main+0x1a4>)
 800266e:	f7fd fef1 	bl	8000454 <__aeabi_dcmplt>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d00a      	beq.n	800268c <main+0xe4>
	  {
		  snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 8002676:	4b33      	ldr	r3, [pc, #204]	; (8002744 <main+0x19c>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4934      	ldr	r1, [pc, #208]	; (8002750 <main+0x1a8>)
 800267e:	4835      	ldr	r0, [pc, #212]	; (8002754 <main+0x1ac>)
 8002680:	9200      	str	r2, [sp, #0]
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	000a      	movs	r2, r1
 8002686:	2105      	movs	r1, #5
 8002688:	f009 fafe 	bl	800bc88 <snprintf>
	  }
  }

  agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 800268c:	4b32      	ldr	r3, [pc, #200]	; (8002758 <main+0x1b0>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	001a      	movs	r2, r3
 8002692:	4b32      	ldr	r3, [pc, #200]	; (800275c <main+0x1b4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	18d2      	adds	r2, r2, r3
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <main+0x1b4>)
 800269a:	601a      	str	r2, [r3, #0]
  sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds ) ;
 800269c:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <main+0x1b0>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	001c      	movs	r4, r3
 80026a2:	4b2e      	ldr	r3, [pc, #184]	; (800275c <main+0x1b4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <main+0x1ac>)
 80026a8:	492d      	ldr	r1, [pc, #180]	; (8002760 <main+0x1b8>)
 80026aa:	482e      	ldr	r0, [pc, #184]	; (8002764 <main+0x1bc>)
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	0023      	movs	r3, r4
 80026b0:	f009 fb1e 	bl	800bcf0 <sprintf>
  sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 80026b4:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <main+0x1bc>)
 80026b6:	492c      	ldr	r1, [pc, #176]	; (8002768 <main+0x1c0>)
 80026b8:	4b2c      	ldr	r3, [pc, #176]	; (800276c <main+0x1c4>)
 80026ba:	0018      	movs	r0, r3
 80026bc:	f009 fb18 	bl	800bcf0 <sprintf>
  send_debug_logs ( astro_payload_log ) ;
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <main+0x1c4>)
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fb50 	bl	8002d68 <send_debug_logs>
  my_astro_add_payload_2_queue ( payload ) ;
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <main+0x1bc>)
 80026ca:	0018      	movs	r0, r3
 80026cc:	f007 f89e 	bl	800980c <my_astro_add_payload_2_queue>
  //HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 80026d0:	f000 fbda 	bl	8002e88 <get_systick>
 80026d4:	0002      	movs	r2, r0
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <main+0x1c8>)
 80026d8:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if ( is_evt_pin_high() )
 80026da:	f000 fbc3 	bl	8002e64 <is_evt_pin_high>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d001      	beq.n	80026e6 <main+0x13e>
	  {
		  my_astro_read_evt_reg () ;
 80026e2:	f007 f8bb 	bl	800985c <my_astro_read_evt_reg>
	  }
	  if ( get_systick () - astro_log_loop_timer >  ASTRO_LOG_TIMER )
 80026e6:	f000 fbcf 	bl	8002e88 <get_systick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <main+0x1c8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	4a20      	ldr	r2, [pc, #128]	; (8002774 <main+0x1cc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d9f0      	bls.n	80026da <main+0x132>
	  {
		  my_astro_log ();
 80026f8:	f007 f8e6 	bl	80098c8 <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 80026fc:	f000 fbc4 	bl	8002e88 <get_systick>
 8002700:	0002      	movs	r2, r0
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <main+0x1c8>)
 8002704:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <main+0x1d0>)
 8002708:	881c      	ldrh	r4, [r3, #0]
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <main+0x1bc>)
 800270c:	0018      	movs	r0, r3
 800270e:	f7fd fcf9 	bl	8000104 <strlen>
 8002712:	0003      	movs	r3, r0
 8002714:	b29a      	uxth	r2, r3
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <main+0x1bc>)
 8002718:	0019      	movs	r1, r3
 800271a:	0020      	movs	r0, r4
 800271c:	f005 fd58 	bl	80081d0 <astronode_send_pld_er>
	  if ( is_evt_pin_high() )
 8002720:	e7db      	b.n	80026da <main+0x132>
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	20000000 	.word	0x20000000
 8002728:	2000086c 	.word	0x2000086c
 800272c:	20000b19 	.word	0x20000b19
 8002730:	20000728 	.word	0x20000728
 8002734:	200009a8 	.word	0x200009a8
 8002738:	200009ac 	.word	0x200009ac
 800273c:	20000010 	.word	0x20000010
 8002740:	20000008 	.word	0x20000008
 8002744:	20000018 	.word	0x20000018
 8002748:	20000994 	.word	0x20000994
 800274c:	40590000 	.word	0x40590000
 8002750:	08012950 	.word	0x08012950
 8002754:	200009b0 	.word	0x200009b0
 8002758:	200009b6 	.word	0x200009b6
 800275c:	200009b8 	.word	0x200009b8
 8002760:	08012958 	.word	0x08012958
 8002764:	200009c4 	.word	0x200009c4
 8002768:	08012964 	.word	0x08012964
 800276c:	20000a64 	.word	0x20000a64
 8002770:	200009bc 	.word	0x200009bc
 8002774:	0000ea60 	.word	0x0000ea60
 8002778:	200009c0 	.word	0x200009c0

0800277c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b093      	sub	sp, #76	; 0x4c
 8002780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002782:	2410      	movs	r4, #16
 8002784:	193b      	adds	r3, r7, r4
 8002786:	0018      	movs	r0, r3
 8002788:	2338      	movs	r3, #56	; 0x38
 800278a:	001a      	movs	r2, r3
 800278c:	2100      	movs	r1, #0
 800278e:	f009 fb45 	bl	800be1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002792:	003b      	movs	r3, r7
 8002794:	0018      	movs	r0, r3
 8002796:	2310      	movs	r3, #16
 8002798:	001a      	movs	r2, r3
 800279a:	2100      	movs	r1, #0
 800279c:	f009 fb3e 	bl	800be1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	0018      	movs	r0, r3
 80027a6:	f001 fb79 	bl	8003e9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80027aa:	193b      	adds	r3, r7, r4
 80027ac:	220a      	movs	r2, #10
 80027ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b0:	193b      	adds	r3, r7, r4
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	0052      	lsls	r2, r2, #1
 80027b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80027b8:	0021      	movs	r1, r4
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	2201      	movs	r2, #1
 80027ca:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d2:	187b      	adds	r3, r7, r1
 80027d4:	0018      	movs	r0, r3
 80027d6:	f001 fbad 	bl	8003f34 <HAL_RCC_OscConfig>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d001      	beq.n	80027e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027de:	f000 fc31 	bl	8003044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e2:	003b      	movs	r3, r7
 80027e4:	2207      	movs	r2, #7
 80027e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027e8:	003b      	movs	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ee:	003b      	movs	r3, r7
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027f4:	003b      	movs	r3, r7
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027fa:	003b      	movs	r3, r7
 80027fc:	2100      	movs	r1, #0
 80027fe:	0018      	movs	r0, r3
 8002800:	f001 feb2 	bl	8004568 <HAL_RCC_ClockConfig>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d001      	beq.n	800280c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002808:	f000 fc1c 	bl	8003044 <Error_Handler>
  }
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b013      	add	sp, #76	; 0x4c
 8002812:	bd90      	pop	{r4, r7, pc}

08002814 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b090      	sub	sp, #64	; 0x40
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800281a:	232c      	movs	r3, #44	; 0x2c
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	0018      	movs	r0, r3
 8002820:	2314      	movs	r3, #20
 8002822:	001a      	movs	r2, r3
 8002824:	2100      	movs	r1, #0
 8002826:	f009 faf9 	bl	800be1c <memset>
  RTC_DateTypeDef sDate = {0};
 800282a:	2328      	movs	r3, #40	; 0x28
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002832:	003b      	movs	r3, r7
 8002834:	0018      	movs	r0, r3
 8002836:	2328      	movs	r3, #40	; 0x28
 8002838:	001a      	movs	r2, r3
 800283a:	2100      	movs	r1, #0
 800283c:	f009 faee 	bl	800be1c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002840:	4b44      	ldr	r3, [pc, #272]	; (8002954 <MX_RTC_Init+0x140>)
 8002842:	4a45      	ldr	r2, [pc, #276]	; (8002958 <MX_RTC_Init+0x144>)
 8002844:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002846:	4b43      	ldr	r3, [pc, #268]	; (8002954 <MX_RTC_Init+0x140>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800284c:	4b41      	ldr	r3, [pc, #260]	; (8002954 <MX_RTC_Init+0x140>)
 800284e:	227f      	movs	r2, #127	; 0x7f
 8002850:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002852:	4b40      	ldr	r3, [pc, #256]	; (8002954 <MX_RTC_Init+0x140>)
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002858:	4b3e      	ldr	r3, [pc, #248]	; (8002954 <MX_RTC_Init+0x140>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800285e:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <MX_RTC_Init+0x140>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002864:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <MX_RTC_Init+0x140>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800286a:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <MX_RTC_Init+0x140>)
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	05d2      	lsls	r2, r2, #23
 8002870:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002872:	4b38      	ldr	r3, [pc, #224]	; (8002954 <MX_RTC_Init+0x140>)
 8002874:	2200      	movs	r2, #0
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <MX_RTC_Init+0x140>)
 800287a:	0018      	movs	r0, r3
 800287c:	f002 f9d6 	bl	8004c2c <HAL_RTC_Init>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	d001      	beq.n	8002888 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002884:	f000 fbde 	bl	8003044 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002890:	187b      	adds	r3, r7, r1
 8002892:	2200      	movs	r2, #0
 8002894:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2200      	movs	r2, #0
 800289a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800289c:	187b      	adds	r3, r7, r1
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028ae:	1879      	adds	r1, r7, r1
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <MX_RTC_Init+0x140>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	0018      	movs	r0, r3
 80028b6:	f002 fa5b 	bl	8004d70 <HAL_RTC_SetTime>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80028be:	f000 fbc1 	bl	8003044 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80028c2:	2128      	movs	r1, #40	; 0x28
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	2206      	movs	r2, #6
 80028c8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2201      	movs	r2, #1
 80028ce:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	2201      	movs	r2, #1
 80028d4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80028dc:	1879      	adds	r1, r7, r1
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <MX_RTC_Init+0x140>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	0018      	movs	r0, r3
 80028e4:	f002 fb48 	bl	8004f78 <HAL_RTC_SetDate>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80028ec:	f000 fbaa 	bl	8003044 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80028f0:	003b      	movs	r3, r7
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80028f6:	003b      	movs	r3, r7
 80028f8:	2200      	movs	r2, #0
 80028fa:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80028fc:	003b      	movs	r3, r7
 80028fe:	2200      	movs	r2, #0
 8002900:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002902:	003b      	movs	r3, r7
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002908:	003b      	movs	r3, r7
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800290e:	003b      	movs	r3, r7
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002914:	003b      	movs	r3, r7
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800291a:	003b      	movs	r3, r7
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002920:	003b      	movs	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002926:	003b      	movs	r3, r7
 8002928:	2220      	movs	r2, #32
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800292e:	003b      	movs	r3, r7
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	0052      	lsls	r2, r2, #1
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002936:	0039      	movs	r1, r7
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <MX_RTC_Init+0x140>)
 800293a:	2201      	movs	r2, #1
 800293c:	0018      	movs	r0, r3
 800293e:	f002 fbfb 	bl	8005138 <HAL_RTC_SetAlarm>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d001      	beq.n	800294a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002946:	f000 fb7d 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b010      	add	sp, #64	; 0x40
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	200006fc 	.word	0x200006fc
 8002958:	40002800 	.word	0x40002800

0800295c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <MX_SPI1_Init+0x78>)
 8002964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002968:	2282      	movs	r2, #130	; 0x82
 800296a:	0052      	lsls	r2, r2, #1
 800296c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002976:	22e0      	movs	r2, #224	; 0xe0
 8002978:	00d2      	lsls	r2, r2, #3
 800297a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <MX_SPI1_Init+0x74>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <MX_SPI1_Init+0x74>)
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_SPI1_Init+0x74>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_SPI1_Init+0x74>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029aa:	2207      	movs	r2, #7
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029b6:	2208      	movs	r2, #8
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <MX_SPI1_Init+0x74>)
 80029bc:	0018      	movs	r0, r3
 80029be:	f002 fe3d 	bl	800563c <HAL_SPI_Init>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029c6:	f000 fb3d 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000728 	.word	0x20000728
 80029d4:	40013000 	.word	0x40013000

080029d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	0018      	movs	r0, r3
 80029e2:	230c      	movs	r3, #12
 80029e4:	001a      	movs	r2, r3
 80029e6:	2100      	movs	r1, #0
 80029e8:	f009 fa18 	bl	800be1c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <MX_TIM6_Init+0x6c>)
 80029ee:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <MX_TIM6_Init+0x70>)
 80029f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <MX_TIM6_Init+0x6c>)
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <MX_TIM6_Init+0x74>)
 80029f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <MX_TIM6_Init+0x6c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <MX_TIM6_Init+0x6c>)
 8002a00:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <MX_TIM6_Init+0x78>)
 8002a02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <MX_TIM6_Init+0x6c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_TIM6_Init+0x6c>)
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f003 fd17 	bl	8006440 <HAL_TIM_Base_Init>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a16:	f000 fb15 	bl	8003044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a26:	1d3a      	adds	r2, r7, #4
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_TIM6_Init+0x6c>)
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f003 ffbb 	bl	80069a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002a36:	f000 fb05 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	2000078c 	.word	0x2000078c
 8002a48:	40001000 	.word	0x40001000
 8002a4c:	00003e7f 	.word	0x00003e7f
 8002a50:	000003e7 	.word	0x000003e7

08002a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a58:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a5a:	4a24      	ldr	r2, [pc, #144]	; (8002aec <MX_USART1_UART_Init+0x98>)
 8002a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a60:	2296      	movs	r2, #150	; 0x96
 8002a62:	0192      	lsls	r2, r2, #6
 8002a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a90:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f004 f808 	bl	8006ab4 <HAL_UART_Init>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002aa8:	f000 facc 	bl	8003044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f004 fed5 	bl	8007860 <HAL_UARTEx_SetTxFifoThreshold>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002aba:	f000 fac3 	bl	8003044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f004 ff0c 	bl	80078e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002acc:	f000 faba 	bl	8003044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <MX_USART1_UART_Init+0x94>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f004 fe8a 	bl	80077ec <HAL_UARTEx_DisableFifoMode>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002adc:	f000 fab2 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	200007d8 	.word	0x200007d8
 8002aec:	40013800 	.word	0x40013800

08002af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002af4:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002af6:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <MX_USART2_UART_Init+0x98>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002afc:	22e1      	movs	r2, #225	; 0xe1
 8002afe:	0252      	lsls	r2, r2, #9
 8002b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f003 ffba 	bl	8006ab4 <HAL_UART_Init>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d001      	beq.n	8002b48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b44:	f000 fa7e 	bl	8003044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f004 fe87 	bl	8007860 <HAL_UARTEx_SetTxFifoThreshold>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d001      	beq.n	8002b5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b56:	f000 fa75 	bl	8003044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f004 febe 	bl	80078e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d001      	beq.n	8002b6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b68:	f000 fa6c 	bl	8003044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <MX_USART2_UART_Init+0x94>)
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f004 fe3c 	bl	80077ec <HAL_UARTEx_DisableFifoMode>
 8002b74:	1e03      	subs	r3, r0, #0
 8002b76:	d001      	beq.n	8002b7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b78:	f000 fa64 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	2000086c 	.word	0x2000086c
 8002b88:	40004400 	.word	0x40004400

08002b8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <MX_USART3_UART_Init+0x64>)
 8002b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002b98:	2296      	movs	r2, #150	; 0x96
 8002b9a:	0192      	lsls	r2, r2, #6
 8002b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <MX_USART3_UART_Init+0x60>)
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f003 ff6c 	bl	8006ab4 <HAL_UART_Init>
 8002bdc:	1e03      	subs	r3, r0, #0
 8002bde:	d001      	beq.n	8002be4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002be0:	f000 fa30 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	20000900 	.word	0x20000900
 8002bf0:	40004800 	.word	0x40004800

08002bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b08b      	sub	sp, #44	; 0x2c
 8002bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfa:	2414      	movs	r4, #20
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	0018      	movs	r0, r3
 8002c00:	2314      	movs	r3, #20
 8002c02:	001a      	movs	r2, r3
 8002c04:	2100      	movs	r1, #0
 8002c06:	f009 f909 	bl	800be1c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0a:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0e:	4b52      	ldr	r3, [pc, #328]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c10:	2104      	movs	r1, #4
 8002c12:	430a      	orrs	r2, r1
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34
 8002c16:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c22:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c26:	4b4c      	ldr	r3, [pc, #304]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c28:	2120      	movs	r1, #32
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	2220      	movs	r2, #32
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3e:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c40:	2101      	movs	r1, #1
 8002c42:	430a      	orrs	r2, r1
 8002c44:	635a      	str	r2, [r3, #52]	; 0x34
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c56:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c58:	2102      	movs	r1, #2
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <MX_GPIO_Init+0x164>)
 8002c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c62:	2202      	movs	r2, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002c6a:	2388      	movs	r3, #136	; 0x88
 8002c6c:	015b      	lsls	r3, r3, #5
 8002c6e:	483b      	ldr	r0, [pc, #236]	; (8002d5c <MX_GPIO_Init+0x168>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	0019      	movs	r1, r3
 8002c74:	f001 f8f5 	bl	8003e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8002c78:	4939      	ldr	r1, [pc, #228]	; (8002d60 <MX_GPIO_Init+0x16c>)
 8002c7a:	23a0      	movs	r3, #160	; 0xa0
 8002c7c:	05db      	lsls	r3, r3, #23
 8002c7e:	2200      	movs	r2, #0
 8002c80:	0018      	movs	r0, r3
 8002c82:	f001 f8ee 	bl	8003e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI1_CS_GPIO_Port, LIS_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	01db      	lsls	r3, r3, #7
 8002c8a:	4836      	ldr	r0, [pc, #216]	; (8002d64 <MX_GPIO_Init+0x170>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	0019      	movs	r1, r3
 8002c90:	f001 f8e7 	bl	8003e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L86_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|L86_PWR_SW_Pin;
 8002c94:	193b      	adds	r3, r7, r4
 8002c96:	2288      	movs	r2, #136	; 0x88
 8002c98:	0152      	lsls	r2, r2, #5
 8002c9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	2200      	movs	r2, #0
 8002cac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <MX_GPIO_Init+0x168>)
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	0010      	movs	r0, r2
 8002cb6:	f000 fe83 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <MX_GPIO_Init+0x16c>)
 8002cbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	193a      	adds	r2, r7, r4
 8002cd4:	23a0      	movs	r3, #160	; 0xa0
 8002cd6:	05db      	lsls	r3, r3, #23
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fe70 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LIS_SPI1_CS_Pin;
 8002ce0:	0021      	movs	r1, r4
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	01d2      	lsls	r2, r2, #7
 8002ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cea:	000c      	movs	r4, r1
 8002cec:	193b      	adds	r3, r7, r4
 8002cee:	2201      	movs	r2, #1
 8002cf0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIS_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <MX_GPIO_Init+0x170>)
 8002d02:	0019      	movs	r1, r3
 8002d04:	0010      	movs	r0, r2
 8002d06:	f000 fe5b 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	2280      	movs	r2, #128	; 0x80
 8002d0e:	0152      	lsls	r2, r2, #5
 8002d10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	2200      	movs	r2, #0
 8002d16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	193a      	adds	r2, r7, r4
 8002d20:	23a0      	movs	r3, #160	; 0xa0
 8002d22:	05db      	lsls	r3, r3, #23
 8002d24:	0011      	movs	r1, r2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fe4a 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002d2c:	0021      	movs	r1, r4
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	22c0      	movs	r2, #192	; 0xc0
 8002d32:	0092      	lsls	r2, r2, #2
 8002d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2288      	movs	r2, #136	; 0x88
 8002d3a:	0352      	lsls	r2, r2, #13
 8002d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <MX_GPIO_Init+0x170>)
 8002d48:	0019      	movs	r1, r3
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	f000 fe38 	bl	80039c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b00b      	add	sp, #44	; 0x2c
 8002d56:	bd90      	pop	{r4, r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	50000800 	.word	0x50000800
 8002d60:	00008860 	.word	0x00008860
 8002d64:	50000400 	.word	0x50000400

08002d68 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7fd f9c6 	bl	8000104 <strlen>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2bfa      	cmp	r3, #250	; 0xfa
 8002d80:	d908      	bls.n	8002d94 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002d82:	23fa      	movs	r3, #250	; 0xfa
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	490d      	ldr	r1, [pc, #52]	; (8002dbc <send_debug_logs+0x54>)
 8002d88:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <send_debug_logs+0x58>)
 8002d8a:	222a      	movs	r2, #42	; 0x2a
 8002d8c:	f003 ff28 	bl	8006be0 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002d90:	23fa      	movs	r3, #250	; 0xfa
 8002d92:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	23fa      	movs	r3, #250	; 0xfa
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4808      	ldr	r0, [pc, #32]	; (8002dc0 <send_debug_logs+0x58>)
 8002da0:	f003 ff1e 	bl	8006be0 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002da4:	23fa      	movs	r3, #250	; 0xfa
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4906      	ldr	r1, [pc, #24]	; (8002dc4 <send_debug_logs+0x5c>)
 8002daa:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <send_debug_logs+0x58>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	f003 ff17 	bl	8006be0 <HAL_UART_Transmit>
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	0801297c 	.word	0x0801297c
 8002dc0:	2000086c 	.word	0x2000086c
 8002dc4:	080129a8 	.word	0x080129a8

08002dc8 <reset_astronode>:
void reset_astronode ( void )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	0119      	lsls	r1, r3, #4
 8002dd0:	23a0      	movs	r3, #160	; 0xa0
 8002dd2:	05db      	lsls	r3, r3, #23
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f001 f843 	bl	8003e62 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f000 fcd7 	bl	8003790 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	0119      	lsls	r1, r3, #4
 8002de6:	23a0      	movs	r3, #160	; 0xa0
 8002de8:	05db      	lsls	r3, r3, #23
 8002dea:	2200      	movs	r2, #0
 8002dec:	0018      	movs	r0, r3
 8002dee:	f001 f838 	bl	8003e62 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002df2:	20fa      	movs	r0, #250	; 0xfa
 8002df4:	f000 fccc 	bl	8003790 <HAL_Delay>
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <send_astronode_request+0x34>)
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7ff ffab 	bl	8002d68 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff ffa7 	bl	8002d68 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	23fa      	movs	r3, #250	; 0xfa
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <send_astronode_request+0x38>)
 8002e26:	f003 fedb 	bl	8006be0 <HAL_UART_Transmit>
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b002      	add	sp, #8
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	080129ac 	.word	0x080129ac
 8002e38:	200007d8 	.word	0x200007d8

08002e3c <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4806      	ldr	r0, [pc, #24]	; (8002e60 <is_astronode_character_received+0x24>)
 8002e48:	2364      	movs	r3, #100	; 0x64
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f003 ff64 	bl	8006d18 <HAL_UART_Receive>
 8002e50:	0003      	movs	r3, r0
 8002e52:	425a      	negs	r2, r3
 8002e54:	4153      	adcs	r3, r2
 8002e56:	b2db      	uxtb	r3, r3
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	200007d8 	.word	0x200007d8

08002e64 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	23a0      	movs	r3, #160	; 0xa0
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	0011      	movs	r1, r2
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 ffd8 	bl	8003e28 <HAL_GPIO_ReadPin>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	425a      	negs	r2, r3
 8002e7e:	4153      	adcs	r3, r2
 8002e80:	b2db      	uxtb	r3, r3
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002e8c:	f000 fc76 	bl	800377c <HAL_GetTick>
 8002e90:	0003      	movs	r3, r0
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	1cbb      	adds	r3, r7, #2
 8002ea4:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002ea6:	f7ff ffef 	bl	8002e88 <get_systick>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	1cba      	adds	r2, r7, #2
 8002eb2:	8812      	ldrh	r2, [r2, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	419b      	sbcs	r3, r3
 8002eb8:	425b      	negs	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <my_astro_on+0x4c>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f003 fe48 	bl	8006b60 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	0219      	lsls	r1, r3, #8
 8002ed4:	23a0      	movs	r3, #160	; 0xa0
 8002ed6:	05db      	lsls	r3, r3, #23
 8002ed8:	2200      	movs	r2, #0
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 ffc1 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	0119      	lsls	r1, r3, #4
 8002ee4:	23a0      	movs	r3, #160	; 0xa0
 8002ee6:	05db      	lsls	r3, r3, #23
 8002ee8:	2200      	movs	r2, #0
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 ffb9 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2140      	movs	r1, #64	; 0x40
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f000 ffb2 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002efe:	2001      	movs	r0, #1
 8002f00:	f000 fc46 	bl	8003790 <HAL_Delay>
	MX_USART1_UART_Init () ;
 8002f04:	f7ff fda6 	bl	8002a54 <MX_USART1_UART_Init>
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	200007d8 	.word	0x200007d8

08002f14 <my_astro_off>:
void my_astro_off ( void )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002f18:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <my_astro_off+0x48>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f003 fe20 	bl	8006b60 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	0219      	lsls	r1, r3, #8
 8002f24:	23a0      	movs	r3, #160	; 0xa0
 8002f26:	05db      	lsls	r3, r3, #23
 8002f28:	2200      	movs	r2, #0
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f000 ff99 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	0119      	lsls	r1, r3, #4
 8002f34:	23a0      	movs	r3, #160	; 0xa0
 8002f36:	05db      	lsls	r3, r3, #23
 8002f38:	2200      	movs	r2, #0
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 ff91 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002f40:	2001      	movs	r0, #1
 8002f42:	f000 fc25 	bl	8003790 <HAL_Delay>
	HAL_GPIO_WritePin 	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002f46:	23a0      	movs	r3, #160	; 0xa0
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2140      	movs	r1, #64	; 0x40
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 ff87 	bl	8003e62 <HAL_GPIO_WritePin>
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	200007d8 	.word	0x200007d8

08002f60 <my_lx6_on>:
void my_lx6_on ( void )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4808      	ldr	r0, [pc, #32]	; (8002f8c <my_lx6_on+0x2c>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	f000 ff78 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	015b      	lsls	r3, r3, #5
 8002f76:	4805      	ldr	r0, [pc, #20]	; (8002f8c <my_lx6_on+0x2c>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	f000 ff71 	bl	8003e62 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002f80:	f7ff fe04 	bl	8002b8c <MX_USART3_UART_Init>
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	50000800 	.word	0x50000800

08002f90 <my_lx6_off>:
void my_lx6_off ( void )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4809      	ldr	r0, [pc, #36]	; (8002fc0 <my_lx6_off+0x30>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	f000 ff60 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	015b      	lsls	r3, r3, #5
 8002fa6:	4806      	ldr	r0, [pc, #24]	; (8002fc0 <my_lx6_off+0x30>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	0019      	movs	r1, r3
 8002fac:	f000 ff59 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <my_lx6_off+0x34>)
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f003 fdd4 	bl	8006b60 <HAL_UART_DeInit>
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	50000800 	.word	0x50000800
 8002fc4:	20000900 	.word	0x20000900

08002fc8 <is_system_initialized>:

bool is_system_initialized ( void )
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	yyyy = get_my_rtc_time ( rtc_dt ) ;
 8002fce:	1dbc      	adds	r4, r7, #6
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <is_system_initialized+0x34>)
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f006 ffb0 	bl	8009f38 <get_my_rtc_time>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt ) ;
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <is_system_initialized+0x34>)
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff fec2 	bl	8002d68 <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR )
 8002fe4:	1dbb      	adds	r3, r7, #6
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	4a05      	ldr	r2, [pc, #20]	; (8003000 <is_system_initialized+0x38>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <is_system_initialized+0x2a>
	{
		return true ;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <is_system_initialized+0x2c>
	}
	return false ;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b003      	add	sp, #12
 8002ffa:	bd90      	pop	{r4, r7, pc}
 8002ffc:	20000994 	.word	0x20000994
 8003000:	000007e6 	.word	0x000007e6

08003004 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10d      	bne.n	8003032 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003020:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003024:	881a      	ldrh	r2, [r3, #0]
 8003026:	23e1      	movs	r3, #225	; 0xe1
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	429a      	cmp	r2, r3
 800302c:	d901      	bls.n	8003032 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 800302e:	f000 fcb6 	bl	800399e <HAL_NVIC_SystemReset>
		  }
	}
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	40001000 	.word	0x40001000
 8003040:	200009b6 	.word	0x200009b6

08003044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003048:	b672      	cpsid	i
}
 800304a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800304c:	e7fe      	b.n	800304c <Error_Handler+0x8>
	...

08003050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_MspInit+0x44>)
 8003058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_MspInit+0x44>)
 800305c:	2101      	movs	r1, #1
 800305e:	430a      	orrs	r2, r1
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_MspInit+0x44>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_MspInit+0x44>)
 8003070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_MspInit+0x44>)
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	0549      	lsls	r1, r1, #21
 8003078:	430a      	orrs	r2, r1
 800307a:	63da      	str	r2, [r3, #60]	; 0x3c
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_MspInit+0x44>)
 800307e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4013      	ands	r3, r2
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b091      	sub	sp, #68	; 0x44
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a0:	240c      	movs	r4, #12
 80030a2:	193b      	adds	r3, r7, r4
 80030a4:	0018      	movs	r0, r3
 80030a6:	2334      	movs	r3, #52	; 0x34
 80030a8:	001a      	movs	r2, r3
 80030aa:	2100      	movs	r1, #0
 80030ac:	f008 feb6 	bl	800be1c <memset>
  if(hrtc->Instance==RTC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_RTC_MspInit+0x74>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d124      	bne.n	8003104 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	0292      	lsls	r2, r2, #10
 80030c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	0018      	movs	r0, r3
 80030ce:	f001 fbf5 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 80030d2:	1e03      	subs	r3, r0, #0
 80030d4:	d001      	beq.n	80030da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80030d6:	f7ff ffb5 	bl	8003044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <HAL_RTC_MspInit+0x78>)
 80030dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_RTC_MspInit+0x78>)
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	0209      	lsls	r1, r1, #8
 80030e4:	430a      	orrs	r2, r1
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RTC_MspInit+0x78>)
 80030ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_RTC_MspInit+0x78>)
 80030ee:	2180      	movs	r1, #128	; 0x80
 80030f0:	00c9      	lsls	r1, r1, #3
 80030f2:	430a      	orrs	r2, r1
 80030f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RTC_MspInit+0x78>)
 80030f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4013      	ands	r3, r2
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b011      	add	sp, #68	; 0x44
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	40002800 	.word	0x40002800
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b08b      	sub	sp, #44	; 0x2c
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	2414      	movs	r4, #20
 800311e:	193b      	adds	r3, r7, r4
 8003120:	0018      	movs	r0, r3
 8003122:	2314      	movs	r3, #20
 8003124:	001a      	movs	r2, r3
 8003126:	2100      	movs	r1, #0
 8003128:	f008 fe78 	bl	800be1c <memset>
  if(hspi->Instance==SPI1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_SPI_MspInit+0x8c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d12f      	bne.n	8003196 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_SPI_MspInit+0x90>)
 8003138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313a:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_SPI_MspInit+0x90>)
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	0149      	lsls	r1, r1, #5
 8003140:	430a      	orrs	r2, r1
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
 8003144:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_SPI_MspInit+0x90>)
 8003146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	015b      	lsls	r3, r3, #5
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_SPI_MspInit+0x90>)
 8003154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <HAL_SPI_MspInit+0x90>)
 8003158:	2102      	movs	r1, #2
 800315a:	430a      	orrs	r2, r1
 800315c:	635a      	str	r2, [r3, #52]	; 0x34
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_SPI_MspInit+0x90>)
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LIS_SPI1_SCK_Pin|LIS_SPI1_MISO_Pin|LIS_SPI1_MOSI_Pin;
 800316a:	0021      	movs	r1, r4
 800316c:	187b      	adds	r3, r7, r1
 800316e:	2238      	movs	r2, #56	; 0x38
 8003170:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	187b      	adds	r3, r7, r1
 8003174:	2202      	movs	r2, #2
 8003176:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	187b      	adds	r3, r7, r1
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	187b      	adds	r3, r7, r1
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003184:	187b      	adds	r3, r7, r1
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318a:	187b      	adds	r3, r7, r1
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_SPI_MspInit+0x94>)
 800318e:	0019      	movs	r1, r3
 8003190:	0010      	movs	r0, r2
 8003192:	f000 fc15 	bl	80039c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b00b      	add	sp, #44	; 0x2c
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	40013000 	.word	0x40013000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	50000400 	.word	0x50000400

080031ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <HAL_TIM_Base_MspInit+0x44>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d113      	bne.n	80031e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <HAL_TIM_Base_MspInit+0x48>)
 80031c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <HAL_TIM_Base_MspInit+0x48>)
 80031c4:	2110      	movs	r1, #16
 80031c6:	430a      	orrs	r2, r1
 80031c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_TIM_Base_MspInit+0x48>)
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	2210      	movs	r2, #16
 80031d0:	4013      	ands	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	2011      	movs	r0, #17
 80031dc:	f000 fbba 	bl	8003954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80031e0:	2011      	movs	r0, #17
 80031e2:	f000 fbcc 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	40001000 	.word	0x40001000
 80031f4:	40021000 	.word	0x40021000

080031f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b09b      	sub	sp, #108	; 0x6c
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003200:	2354      	movs	r3, #84	; 0x54
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	0018      	movs	r0, r3
 8003206:	2314      	movs	r3, #20
 8003208:	001a      	movs	r2, r3
 800320a:	2100      	movs	r1, #0
 800320c:	f008 fe06 	bl	800be1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003210:	2420      	movs	r4, #32
 8003212:	193b      	adds	r3, r7, r4
 8003214:	0018      	movs	r0, r3
 8003216:	2334      	movs	r3, #52	; 0x34
 8003218:	001a      	movs	r2, r3
 800321a:	2100      	movs	r1, #0
 800321c:	f008 fdfe 	bl	800be1c <memset>
  if(huart->Instance==USART1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a61      	ldr	r2, [pc, #388]	; (80033ac <HAL_UART_MspInit+0x1b4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d140      	bne.n	80032ac <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800322a:	193b      	adds	r3, r7, r4
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003230:	193b      	adds	r3, r7, r4
 8003232:	2200      	movs	r2, #0
 8003234:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003236:	193b      	adds	r3, r7, r4
 8003238:	0018      	movs	r0, r3
 800323a:	f001 fb3f 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 800323e:	1e03      	subs	r3, r0, #0
 8003240:	d001      	beq.n	8003246 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003242:	f7ff feff 	bl	8003044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003246:	4b5a      	ldr	r3, [pc, #360]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800324a:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	01c9      	lsls	r1, r1, #7
 8003250:	430a      	orrs	r2, r1
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
 8003254:	4b56      	ldr	r3, [pc, #344]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	01db      	lsls	r3, r3, #7
 800325c:	4013      	ands	r3, r2
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003262:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	4b52      	ldr	r3, [pc, #328]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	635a      	str	r2, [r3, #52]	; 0x34
 800326e:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	2201      	movs	r2, #1
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 800327a:	2154      	movs	r1, #84	; 0x54
 800327c:	187b      	adds	r3, r7, r1
 800327e:	22c0      	movs	r2, #192	; 0xc0
 8003280:	00d2      	lsls	r2, r2, #3
 8003282:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	187b      	adds	r3, r7, r1
 8003286:	2202      	movs	r2, #2
 8003288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	187b      	adds	r3, r7, r1
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003290:	187b      	adds	r3, r7, r1
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003296:	187b      	adds	r3, r7, r1
 8003298:	2201      	movs	r2, #1
 800329a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329c:	187a      	adds	r2, r7, r1
 800329e:	23a0      	movs	r3, #160	; 0xa0
 80032a0:	05db      	lsls	r3, r3, #23
 80032a2:	0011      	movs	r1, r2
 80032a4:	0018      	movs	r0, r3
 80032a6:	f000 fb8b 	bl	80039c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032aa:	e07b      	b.n	80033a4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <HAL_UART_MspInit+0x1bc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d140      	bne.n	8003338 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032b6:	2120      	movs	r1, #32
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	2202      	movs	r2, #2
 80032bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	2200      	movs	r2, #0
 80032c2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	0018      	movs	r0, r3
 80032c8:	f001 faf8 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80032d0:	f7ff feb8 	bl	8003044 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 80032d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	0289      	lsls	r1, r1, #10
 80032de:	430a      	orrs	r2, r1
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032e2:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 80032e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	029b      	lsls	r3, r3, #10
 80032ea:	4013      	ands	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f0:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 80032f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f4:	4b2e      	ldr	r3, [pc, #184]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	430a      	orrs	r2, r1
 80032fa:	635a      	str	r2, [r3, #52]	; 0x34
 80032fc:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	2201      	movs	r2, #1
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8003308:	2154      	movs	r1, #84	; 0x54
 800330a:	187b      	adds	r3, r7, r1
 800330c:	220c      	movs	r2, #12
 800330e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	187b      	adds	r3, r7, r1
 8003312:	2202      	movs	r2, #2
 8003314:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003316:	187b      	adds	r3, r7, r1
 8003318:	2201      	movs	r2, #1
 800331a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2201      	movs	r2, #1
 8003326:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003328:	187a      	adds	r2, r7, r1
 800332a:	23a0      	movs	r3, #160	; 0xa0
 800332c:	05db      	lsls	r3, r3, #23
 800332e:	0011      	movs	r1, r2
 8003330:	0018      	movs	r0, r3
 8003332:	f000 fb45 	bl	80039c0 <HAL_GPIO_Init>
}
 8003336:	e035      	b.n	80033a4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <HAL_UART_MspInit+0x1c0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d130      	bne.n	80033a4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003348:	2180      	movs	r1, #128	; 0x80
 800334a:	02c9      	lsls	r1, r1, #11
 800334c:	430a      	orrs	r2, r1
 800334e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003350:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	02db      	lsls	r3, r3, #11
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 8003364:	2104      	movs	r1, #4
 8003366:	430a      	orrs	r2, r1
 8003368:	635a      	str	r2, [r3, #52]	; 0x34
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_UART_MspInit+0x1b8>)
 800336c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336e:	2204      	movs	r2, #4
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8003376:	2154      	movs	r1, #84	; 0x54
 8003378:	187b      	adds	r3, r7, r1
 800337a:	22c0      	movs	r2, #192	; 0xc0
 800337c:	0112      	lsls	r2, r2, #4
 800337e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	187b      	adds	r3, r7, r1
 8003382:	2202      	movs	r2, #2
 8003384:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	187b      	adds	r3, r7, r1
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	187b      	adds	r3, r7, r1
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003398:	187b      	adds	r3, r7, r1
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <HAL_UART_MspInit+0x1c4>)
 800339c:	0019      	movs	r1, r3
 800339e:	0010      	movs	r0, r2
 80033a0:	f000 fb0e 	bl	80039c0 <HAL_GPIO_Init>
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b01b      	add	sp, #108	; 0x6c
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	40013800 	.word	0x40013800
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40004400 	.word	0x40004400
 80033b8:	40004800 	.word	0x40004800
 80033bc:	50000800 	.word	0x50000800

080033c0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_UART_MspDeInit+0x80>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10e      	bne.n	80033f0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <HAL_UART_MspDeInit+0x84>)
 80033d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_UART_MspDeInit+0x84>)
 80033d8:	491b      	ldr	r1, [pc, #108]	; (8003448 <HAL_UART_MspDeInit+0x88>)
 80033da:	400a      	ands	r2, r1
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 80033de:	23c0      	movs	r3, #192	; 0xc0
 80033e0:	00da      	lsls	r2, r3, #3
 80033e2:	23a0      	movs	r3, #160	; 0xa0
 80033e4:	05db      	lsls	r3, r3, #23
 80033e6:	0011      	movs	r1, r2
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 fc4d 	bl	8003c88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80033ee:	e023      	b.n	8003438 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a15      	ldr	r2, [pc, #84]	; (800344c <HAL_UART_MspDeInit+0x8c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10c      	bne.n	8003414 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_UART_MspDeInit+0x84>)
 80033fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_UART_MspDeInit+0x84>)
 8003400:	4913      	ldr	r1, [pc, #76]	; (8003450 <HAL_UART_MspDeInit+0x90>)
 8003402:	400a      	ands	r2, r1
 8003404:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 8003406:	23a0      	movs	r3, #160	; 0xa0
 8003408:	05db      	lsls	r3, r3, #23
 800340a:	210c      	movs	r1, #12
 800340c:	0018      	movs	r0, r3
 800340e:	f000 fc3b 	bl	8003c88 <HAL_GPIO_DeInit>
}
 8003412:	e011      	b.n	8003438 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <HAL_UART_MspDeInit+0x94>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10c      	bne.n	8003438 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_UART_MspDeInit+0x84>)
 8003420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_UART_MspDeInit+0x84>)
 8003424:	490c      	ldr	r1, [pc, #48]	; (8003458 <HAL_UART_MspDeInit+0x98>)
 8003426:	400a      	ands	r2, r1
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 800342a:	23c0      	movs	r3, #192	; 0xc0
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	4a0b      	ldr	r2, [pc, #44]	; (800345c <HAL_UART_MspDeInit+0x9c>)
 8003430:	0019      	movs	r1, r3
 8003432:	0010      	movs	r0, r2
 8003434:	f000 fc28 	bl	8003c88 <HAL_GPIO_DeInit>
}
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40013800 	.word	0x40013800
 8003444:	40021000 	.word	0x40021000
 8003448:	ffffbfff 	.word	0xffffbfff
 800344c:	40004400 	.word	0x40004400
 8003450:	fffdffff 	.word	0xfffdffff
 8003454:	40004800 	.word	0x40004800
 8003458:	fffbffff 	.word	0xfffbffff
 800345c:	50000800 	.word	0x50000800

08003460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003464:	e7fe      	b.n	8003464 <NMI_Handler+0x4>

08003466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800346a:	e7fe      	b.n	800346a <HardFault_Handler+0x4>

0800346c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003484:	f000 f968 	bl	8003758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003496:	0018      	movs	r0, r3
 8003498:	f003 f8b4 	bl	8006604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	2000078c 	.word	0x2000078c

080034a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  return 1;
 80034ac:	2301      	movs	r3, #1
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <_kill>:

int _kill(int pid, int sig)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034be:	f008 fd59 	bl	800bf74 <__errno>
 80034c2:	0003      	movs	r3, r0
 80034c4:	2216      	movs	r2, #22
 80034c6:	601a      	str	r2, [r3, #0]
  return -1;
 80034c8:	2301      	movs	r3, #1
 80034ca:	425b      	negs	r3, r3
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <_exit>:

void _exit (int status)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034dc:	2301      	movs	r3, #1
 80034de:	425a      	negs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	0011      	movs	r1, r2
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7ff ffe5 	bl	80034b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034ea:	e7fe      	b.n	80034ea <_exit+0x16>

080034ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e00a      	b.n	8003514 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034fe:	e000      	b.n	8003502 <_read+0x16>
 8003500:	bf00      	nop
 8003502:	0001      	movs	r1, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	60ba      	str	r2, [r7, #8]
 800350a:	b2ca      	uxtb	r2, r1
 800350c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3301      	adds	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	dbf0      	blt.n	80034fe <_read+0x12>
  }

  return len;
 800351c:	687b      	ldr	r3, [r7, #4]
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b006      	add	sp, #24
 8003524:	bd80      	pop	{r7, pc}

08003526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e009      	b.n	800354c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	60ba      	str	r2, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	0018      	movs	r0, r3
 8003542:	e000      	b.n	8003546 <_write+0x20>
 8003544:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3301      	adds	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	dbf1      	blt.n	8003538 <_write+0x12>
  }
  return len;
 8003554:	687b      	ldr	r3, [r7, #4]
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b006      	add	sp, #24
 800355c:	bd80      	pop	{r7, pc}

0800355e <_close>:

int _close(int file)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003566:	2301      	movs	r3, #1
 8003568:	425b      	negs	r3, r3
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}

08003572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	0192      	lsls	r2, r2, #6
 8003582:	605a      	str	r2, [r3, #4]
  return 0;
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}

0800358e <_isatty>:

int _isatty(int file)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003596:	2301      	movs	r3, #1
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b002      	add	sp, #8
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b004      	add	sp, #16
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <_sbrk+0x5c>)
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <_sbrk+0x60>)
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <_sbrk+0x64>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <_sbrk+0x64>)
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <_sbrk+0x68>)
 80035d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <_sbrk+0x64>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	18d3      	adds	r3, r2, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d207      	bcs.n	80035f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035e8:	f008 fcc4 	bl	800bf74 <__errno>
 80035ec:	0003      	movs	r3, r0
 80035ee:	220c      	movs	r2, #12
 80035f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	425b      	negs	r3, r3
 80035f6:	e009      	b.n	800360c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035f8:	4b08      	ldr	r3, [pc, #32]	; (800361c <_sbrk+0x64>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035fe:	4b07      	ldr	r3, [pc, #28]	; (800361c <_sbrk+0x64>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	18d2      	adds	r2, r2, r3
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <_sbrk+0x64>)
 8003608:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800360a:	68fb      	ldr	r3, [r7, #12]
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b006      	add	sp, #24
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20009000 	.word	0x20009000
 8003618:	00000400 	.word	0x00000400
 800361c:	20000b1c 	.word	0x20000b1c
 8003620:	20000e38 	.word	0x20000e38

08003624 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003630:	480d      	ldr	r0, [pc, #52]	; (8003668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003632:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003634:	f7ff fff6 	bl	8003624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003638:	480c      	ldr	r0, [pc, #48]	; (800366c <LoopForever+0x6>)
  ldr r1, =_edata
 800363a:	490d      	ldr	r1, [pc, #52]	; (8003670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800363c:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <LoopForever+0xe>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003640:	e002      	b.n	8003648 <LoopCopyDataInit>

08003642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003646:	3304      	adds	r3, #4

08003648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800364c:	d3f9      	bcc.n	8003642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003650:	4c0a      	ldr	r4, [pc, #40]	; (800367c <LoopForever+0x16>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003654:	e001      	b.n	800365a <LoopFillZerobss>

08003656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003658:	3204      	adds	r2, #4

0800365a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800365c:	d3fb      	bcc.n	8003656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800365e:	f008 fc8f 	bl	800bf80 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003662:	f7fe ffa1 	bl	80025a8 <main>

08003666 <LoopForever>:

LoopForever:
  b LoopForever
 8003666:	e7fe      	b.n	8003666 <LoopForever>
  ldr   r0, =_estack
 8003668:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800366c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003670:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 8003674:	080147a0 	.word	0x080147a0
  ldr r2, =_sbss
 8003678:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 800367c:	20000e34 	.word	0x20000e34

08003680 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003680:	e7fe      	b.n	8003680 <ADC1_COMP_IRQHandler>
	...

08003684 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_Init+0x3c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <HAL_Init+0x3c>)
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	0049      	lsls	r1, r1, #1
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800369e:	2000      	movs	r0, #0
 80036a0:	f000 f810 	bl	80036c4 <HAL_InitTick>
 80036a4:	1e03      	subs	r3, r0, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	e001      	b.n	80036b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80036b0:	f7ff fcce 	bl	8003050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036b4:	1dfb      	adds	r3, r7, #7
 80036b6:	781b      	ldrb	r3, [r3, #0]
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b002      	add	sp, #8
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40022000 	.word	0x40022000

080036c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036cc:	230f      	movs	r3, #15
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_InitTick+0x88>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02b      	beq.n	8003734 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80036dc:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <HAL_InitTick+0x8c>)
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_InitTick+0x88>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	0019      	movs	r1, r3
 80036e6:	23fa      	movs	r3, #250	; 0xfa
 80036e8:	0098      	lsls	r0, r3, #2
 80036ea:	f7fc fd27 	bl	800013c <__udivsi3>
 80036ee:	0003      	movs	r3, r0
 80036f0:	0019      	movs	r1, r3
 80036f2:	0020      	movs	r0, r4
 80036f4:	f7fc fd22 	bl	800013c <__udivsi3>
 80036f8:	0003      	movs	r3, r0
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 f953 	bl	80039a6 <HAL_SYSTICK_Config>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d112      	bne.n	800372a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d80a      	bhi.n	8003720 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	2301      	movs	r3, #1
 800370e:	425b      	negs	r3, r3
 8003710:	2200      	movs	r2, #0
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f91e 	bl	8003954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003718:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <HAL_InitTick+0x90>)
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e00d      	b.n	800373c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003720:	230f      	movs	r3, #15
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e008      	b.n	800373c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800372a:	230f      	movs	r3, #15
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e003      	b.n	800373c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003734:	230f      	movs	r3, #15
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800373c:	230f      	movs	r3, #15
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	781b      	ldrb	r3, [r3, #0]
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b005      	add	sp, #20
 8003748:	bd90      	pop	{r4, r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	20000028 	.word	0x20000028
 8003750:	20000020 	.word	0x20000020
 8003754:	20000024 	.word	0x20000024

08003758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_IncTick+0x1c>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	001a      	movs	r2, r3
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_IncTick+0x20>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	18d2      	adds	r2, r2, r3
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_IncTick+0x20>)
 800376a:	601a      	str	r2, [r3, #0]
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	20000028 	.word	0x20000028
 8003778:	20000b20 	.word	0x20000b20

0800377c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  return uwTick;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_GetTick+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	20000b20 	.word	0x20000b20

08003790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7ff fff0 	bl	800377c <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3301      	adds	r3, #1
 80037a8:	d005      	beq.n	80037b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_Delay+0x44>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	001a      	movs	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	f7ff ffe0 	bl	800377c <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d8f7      	bhi.n	80037b8 <HAL_Delay+0x28>
  {
  }
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	20000028 	.word	0x20000028

080037d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	0002      	movs	r2, r0
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037e4:	1dfb      	adds	r3, r7, #7
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b7f      	cmp	r3, #127	; 0x7f
 80037ea:	d809      	bhi.n	8003800 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ec:	1dfb      	adds	r3, r7, #7
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	001a      	movs	r2, r3
 80037f2:	231f      	movs	r3, #31
 80037f4:	401a      	ands	r2, r3
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <__NVIC_EnableIRQ+0x30>)
 80037f8:	2101      	movs	r1, #1
 80037fa:	4091      	lsls	r1, r2
 80037fc:	000a      	movs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	0002      	movs	r2, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b7f      	cmp	r3, #127	; 0x7f
 8003820:	d828      	bhi.n	8003874 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003822:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <__NVIC_SetPriority+0xd4>)
 8003824:	1dfb      	adds	r3, r7, #7
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b25b      	sxtb	r3, r3
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	33c0      	adds	r3, #192	; 0xc0
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	589b      	ldr	r3, [r3, r2]
 8003832:	1dfa      	adds	r2, r7, #7
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	0011      	movs	r1, r2
 8003838:	2203      	movs	r2, #3
 800383a:	400a      	ands	r2, r1
 800383c:	00d2      	lsls	r2, r2, #3
 800383e:	21ff      	movs	r1, #255	; 0xff
 8003840:	4091      	lsls	r1, r2
 8003842:	000a      	movs	r2, r1
 8003844:	43d2      	mvns	r2, r2
 8003846:	401a      	ands	r2, r3
 8003848:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	019b      	lsls	r3, r3, #6
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	401a      	ands	r2, r3
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	0018      	movs	r0, r3
 8003858:	2303      	movs	r3, #3
 800385a:	4003      	ands	r3, r0
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003860:	481f      	ldr	r0, [pc, #124]	; (80038e0 <__NVIC_SetPriority+0xd4>)
 8003862:	1dfb      	adds	r3, r7, #7
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b25b      	sxtb	r3, r3
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	430a      	orrs	r2, r1
 800386c:	33c0      	adds	r3, #192	; 0xc0
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003872:	e031      	b.n	80038d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003874:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <__NVIC_SetPriority+0xd8>)
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	0019      	movs	r1, r3
 800387c:	230f      	movs	r3, #15
 800387e:	400b      	ands	r3, r1
 8003880:	3b08      	subs	r3, #8
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3306      	adds	r3, #6
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	18d3      	adds	r3, r2, r3
 800388a:	3304      	adds	r3, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1dfa      	adds	r2, r7, #7
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	0011      	movs	r1, r2
 8003894:	2203      	movs	r2, #3
 8003896:	400a      	ands	r2, r1
 8003898:	00d2      	lsls	r2, r2, #3
 800389a:	21ff      	movs	r1, #255	; 0xff
 800389c:	4091      	lsls	r1, r2
 800389e:	000a      	movs	r2, r1
 80038a0:	43d2      	mvns	r2, r2
 80038a2:	401a      	ands	r2, r3
 80038a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	019b      	lsls	r3, r3, #6
 80038aa:	22ff      	movs	r2, #255	; 0xff
 80038ac:	401a      	ands	r2, r3
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	0018      	movs	r0, r3
 80038b4:	2303      	movs	r3, #3
 80038b6:	4003      	ands	r3, r0
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038bc:	4809      	ldr	r0, [pc, #36]	; (80038e4 <__NVIC_SetPriority+0xd8>)
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	001c      	movs	r4, r3
 80038c4:	230f      	movs	r3, #15
 80038c6:	4023      	ands	r3, r4
 80038c8:	3b08      	subs	r3, #8
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	430a      	orrs	r2, r1
 80038ce:	3306      	adds	r3, #6
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	18c3      	adds	r3, r0, r3
 80038d4:	3304      	adds	r3, #4
 80038d6:	601a      	str	r2, [r3, #0]
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b003      	add	sp, #12
 80038de:	bd90      	pop	{r4, r7, pc}
 80038e0:	e000e100 	.word	0xe000e100
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038ec:	f3bf 8f4f 	dsb	sy
}
 80038f0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f2:	4b04      	ldr	r3, [pc, #16]	; (8003904 <__NVIC_SystemReset+0x1c>)
 80038f4:	4a04      	ldr	r2, [pc, #16]	; (8003908 <__NVIC_SystemReset+0x20>)
 80038f6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80038f8:	f3bf 8f4f 	dsb	sy
}
 80038fc:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	e7fd      	b.n	80038fe <__NVIC_SystemReset+0x16>
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	e000ed00 	.word	0xe000ed00
 8003908:	05fa0004 	.word	0x05fa0004

0800390c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	1e5a      	subs	r2, r3, #1
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	045b      	lsls	r3, r3, #17
 800391c:	429a      	cmp	r2, r3
 800391e:	d301      	bcc.n	8003924 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003920:	2301      	movs	r3, #1
 8003922:	e010      	b.n	8003946 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <SysTick_Config+0x44>)
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	3a01      	subs	r2, #1
 800392a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800392c:	2301      	movs	r3, #1
 800392e:	425b      	negs	r3, r3
 8003930:	2103      	movs	r1, #3
 8003932:	0018      	movs	r0, r3
 8003934:	f7ff ff6a 	bl	800380c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <SysTick_Config+0x44>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <SysTick_Config+0x44>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003944:	2300      	movs	r3, #0
}
 8003946:	0018      	movs	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	b002      	add	sp, #8
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	e000e010 	.word	0xe000e010

08003954 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	210f      	movs	r1, #15
 8003960:	187b      	adds	r3, r7, r1
 8003962:	1c02      	adds	r2, r0, #0
 8003964:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	187b      	adds	r3, r7, r1
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b25b      	sxtb	r3, r3
 800396e:	0011      	movs	r1, r2
 8003970:	0018      	movs	r0, r3
 8003972:	f7ff ff4b 	bl	800380c <__NVIC_SetPriority>
}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	0002      	movs	r2, r0
 8003986:	1dfb      	adds	r3, r7, #7
 8003988:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b25b      	sxtb	r3, r3
 8003990:	0018      	movs	r0, r3
 8003992:	f7ff ff21 	bl	80037d8 <__NVIC_EnableIRQ>
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b002      	add	sp, #8
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80039a2:	f7ff ffa1 	bl	80038e8 <__NVIC_SystemReset>

080039a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7ff ffab 	bl	800390c <SysTick_Config>
 80039b6:	0003      	movs	r3, r0
}
 80039b8:	0018      	movs	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ce:	e147      	b.n	8003c60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4091      	lsls	r1, r2
 80039da:	000a      	movs	r2, r1
 80039dc:	4013      	ands	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d100      	bne.n	80039e8 <HAL_GPIO_Init+0x28>
 80039e6:	e138      	b.n	8003c5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2203      	movs	r2, #3
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d005      	beq.n	8003a00 <HAL_GPIO_Init+0x40>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2203      	movs	r2, #3
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d130      	bne.n	8003a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	0013      	movs	r3, r2
 8003a10:	43da      	mvns	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	409a      	lsls	r2, r3
 8003a22:	0013      	movs	r3, r2
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a36:	2201      	movs	r2, #1
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	0013      	movs	r3, r2
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	401a      	ands	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	409a      	lsls	r2, r3
 8003a54:	0013      	movs	r3, r2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2203      	movs	r2, #3
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d017      	beq.n	8003a9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	2203      	movs	r2, #3
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	0013      	movs	r3, r2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d123      	bne.n	8003af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	08da      	lsrs	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3208      	adds	r2, #8
 8003ab2:	0092      	lsls	r2, r2, #2
 8003ab4:	58d3      	ldr	r3, [r2, r3]
 8003ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2207      	movs	r2, #7
 8003abc:	4013      	ands	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	0013      	movs	r3, r2
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2107      	movs	r1, #7
 8003ad6:	400b      	ands	r3, r1
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	6939      	ldr	r1, [r7, #16]
 8003af0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	2203      	movs	r2, #3
 8003afe:	409a      	lsls	r2, r3
 8003b00:	0013      	movs	r3, r2
 8003b02:	43da      	mvns	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	401a      	ands	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	0013      	movs	r3, r2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	23c0      	movs	r3, #192	; 0xc0
 8003b2c:	029b      	lsls	r3, r3, #10
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d100      	bne.n	8003b34 <HAL_GPIO_Init+0x174>
 8003b32:	e092      	b.n	8003c5a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b34:	4a50      	ldr	r2, [pc, #320]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	3318      	adds	r3, #24
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	589b      	ldr	r3, [r3, r2]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2203      	movs	r2, #3
 8003b46:	4013      	ands	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	0013      	movs	r3, r2
 8003b50:	43da      	mvns	r2, r3
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	23a0      	movs	r3, #160	; 0xa0
 8003b5c:	05db      	lsls	r3, r3, #23
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d013      	beq.n	8003b8a <HAL_GPIO_Init+0x1ca>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a45      	ldr	r2, [pc, #276]	; (8003c7c <HAL_GPIO_Init+0x2bc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00d      	beq.n	8003b86 <HAL_GPIO_Init+0x1c6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a44      	ldr	r2, [pc, #272]	; (8003c80 <HAL_GPIO_Init+0x2c0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <HAL_GPIO_Init+0x1c2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a43      	ldr	r2, [pc, #268]	; (8003c84 <HAL_GPIO_Init+0x2c4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_GPIO_Init+0x1be>
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e006      	b.n	8003b8c <HAL_GPIO_Init+0x1cc>
 8003b7e:	2305      	movs	r3, #5
 8003b80:	e004      	b.n	8003b8c <HAL_GPIO_Init+0x1cc>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e002      	b.n	8003b8c <HAL_GPIO_Init+0x1cc>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_GPIO_Init+0x1cc>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	2103      	movs	r1, #3
 8003b90:	400a      	ands	r2, r1
 8003b92:	00d2      	lsls	r2, r2, #3
 8003b94:	4093      	lsls	r3, r2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b9c:	4936      	ldr	r1, [pc, #216]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	3318      	adds	r3, #24
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003baa:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	035b      	lsls	r3, r3, #13
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003bd4:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	039b      	lsls	r3, r3, #14
 8003bec:	4013      	ands	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003c00:	2384      	movs	r3, #132	; 0x84
 8003c02:	58d3      	ldr	r3, [r2, r3]
 8003c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	43da      	mvns	r2, r3
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	029b      	lsls	r3, r3, #10
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c24:	4914      	ldr	r1, [pc, #80]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003c26:	2284      	movs	r2, #132	; 0x84
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	58d3      	ldr	r3, [r2, r3]
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	43da      	mvns	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	025b      	lsls	r3, r3, #9
 8003c46:	4013      	ands	r3, r2
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c52:	4909      	ldr	r1, [pc, #36]	; (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	40da      	lsrs	r2, r3
 8003c68:	1e13      	subs	r3, r2, #0
 8003c6a:	d000      	beq.n	8003c6e <HAL_GPIO_Init+0x2ae>
 8003c6c:	e6b0      	b.n	80039d0 <HAL_GPIO_Init+0x10>
  }
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b006      	add	sp, #24
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021800 	.word	0x40021800
 8003c7c:	50000400 	.word	0x50000400
 8003c80:	50000800 	.word	0x50000800
 8003c84:	50000c00 	.word	0x50000c00

08003c88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c96:	e0b4      	b.n	8003e02 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c98:	2201      	movs	r2, #1
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d100      	bne.n	8003cac <HAL_GPIO_DeInit+0x24>
 8003caa:	e0a7      	b.n	8003dfc <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003cac:	4a5a      	ldr	r2, [pc, #360]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	3318      	adds	r3, #24
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	589b      	ldr	r3, [r3, r2]
 8003cb8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	23a0      	movs	r3, #160	; 0xa0
 8003cd0:	05db      	lsls	r3, r3, #23
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d013      	beq.n	8003cfe <HAL_GPIO_DeInit+0x76>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a50      	ldr	r2, [pc, #320]	; (8003e1c <HAL_GPIO_DeInit+0x194>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00d      	beq.n	8003cfa <HAL_GPIO_DeInit+0x72>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a4f      	ldr	r2, [pc, #316]	; (8003e20 <HAL_GPIO_DeInit+0x198>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <HAL_GPIO_DeInit+0x6e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a4e      	ldr	r2, [pc, #312]	; (8003e24 <HAL_GPIO_DeInit+0x19c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <HAL_GPIO_DeInit+0x6a>
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e006      	b.n	8003d00 <HAL_GPIO_DeInit+0x78>
 8003cf2:	2305      	movs	r3, #5
 8003cf4:	e004      	b.n	8003d00 <HAL_GPIO_DeInit+0x78>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e002      	b.n	8003d00 <HAL_GPIO_DeInit+0x78>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_GPIO_DeInit+0x78>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	2103      	movs	r1, #3
 8003d04:	400a      	ands	r2, r1
 8003d06:	00d2      	lsls	r2, r2, #3
 8003d08:	4093      	lsls	r3, r2
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d136      	bne.n	8003d7e <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003d10:	4a41      	ldr	r2, [pc, #260]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	58d3      	ldr	r3, [r2, r3]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	43d2      	mvns	r2, r2
 8003d1a:	493f      	ldr	r1, [pc, #252]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003d22:	4a3d      	ldr	r2, [pc, #244]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d24:	2384      	movs	r3, #132	; 0x84
 8003d26:	58d3      	ldr	r3, [r2, r3]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	43d2      	mvns	r2, r2
 8003d2c:	493a      	ldr	r1, [pc, #232]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2284      	movs	r2, #132	; 0x84
 8003d32:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003d34:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	43d9      	mvns	r1, r3
 8003d3c:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d3e:	400a      	ands	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d42:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43d9      	mvns	r1, r3
 8003d4a:	4b33      	ldr	r3, [pc, #204]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2203      	movs	r2, #3
 8003d54:	4013      	ands	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	220f      	movs	r2, #15
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	0013      	movs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003d60:	4a2d      	ldr	r2, [pc, #180]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3318      	adds	r3, #24
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	589a      	ldr	r2, [r3, r2]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43d9      	mvns	r1, r3
 8003d70:	4829      	ldr	r0, [pc, #164]	; (8003e18 <HAL_GPIO_DeInit+0x190>)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	400a      	ands	r2, r1
 8003d78:	3318      	adds	r3, #24
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2103      	movs	r1, #3
 8003d88:	4099      	lsls	r1, r3
 8003d8a:	000b      	movs	r3, r1
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	08da      	lsrs	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3208      	adds	r2, #8
 8003d9a:	0092      	lsls	r2, r2, #2
 8003d9c:	58d3      	ldr	r3, [r2, r3]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	2107      	movs	r1, #7
 8003da2:	400a      	ands	r2, r1
 8003da4:	0092      	lsls	r2, r2, #2
 8003da6:	210f      	movs	r1, #15
 8003da8:	4091      	lsls	r1, r2
 8003daa:	000a      	movs	r2, r1
 8003dac:	43d1      	mvns	r1, r2
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	08d2      	lsrs	r2, r2, #3
 8003db2:	4019      	ands	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3208      	adds	r2, #8
 8003db8:	0092      	lsls	r2, r2, #2
 8003dba:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	0052      	lsls	r2, r2, #1
 8003dc4:	2103      	movs	r1, #3
 8003dc6:	4091      	lsls	r1, r2
 8003dc8:	000a      	movs	r2, r1
 8003dca:	43d2      	mvns	r2, r2
 8003dcc:	401a      	ands	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4091      	lsls	r1, r2
 8003ddc:	000a      	movs	r2, r1
 8003dde:	43d2      	mvns	r2, r2
 8003de0:	401a      	ands	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	0052      	lsls	r2, r2, #1
 8003dee:	2103      	movs	r1, #3
 8003df0:	4091      	lsls	r1, r2
 8003df2:	000a      	movs	r2, r1
 8003df4:	43d2      	mvns	r2, r2
 8003df6:	401a      	ands	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	40da      	lsrs	r2, r3
 8003e08:	1e13      	subs	r3, r2, #0
 8003e0a:	d000      	beq.n	8003e0e <HAL_GPIO_DeInit+0x186>
 8003e0c:	e744      	b.n	8003c98 <HAL_GPIO_DeInit+0x10>
  }
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b006      	add	sp, #24
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021800 	.word	0x40021800
 8003e1c:	50000400 	.word	0x50000400
 8003e20:	50000800 	.word	0x50000800
 8003e24:	50000c00 	.word	0x50000c00

08003e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	000a      	movs	r2, r1
 8003e32:	1cbb      	adds	r3, r7, #2
 8003e34:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	1cba      	adds	r2, r7, #2
 8003e3c:	8812      	ldrh	r2, [r2, #0]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e003      	b.n	8003e54 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e4c:	230f      	movs	r3, #15
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003e54:	230f      	movs	r3, #15
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	781b      	ldrb	r3, [r3, #0]
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	0008      	movs	r0, r1
 8003e6c:	0011      	movs	r1, r2
 8003e6e:	1cbb      	adds	r3, r7, #2
 8003e70:	1c02      	adds	r2, r0, #0
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	1c7b      	adds	r3, r7, #1
 8003e76:	1c0a      	adds	r2, r1, #0
 8003e78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e7a:	1c7b      	adds	r3, r7, #1
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e82:	1cbb      	adds	r3, r7, #2
 8003e84:	881a      	ldrh	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e8a:	e003      	b.n	8003e94 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e8c:	1cbb      	adds	r3, r7, #2
 8003e8e:	881a      	ldrh	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	0019      	movs	r1, r3
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d11f      	bne.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003ec0:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	0013      	movs	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	189b      	adds	r3, r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4912      	ldr	r1, [pc, #72]	; (8003f18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fc f934 	bl	800013c <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eda:	e008      	b.n	8003eee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e001      	b.n	8003eee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e009      	b.n	8003f02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eee:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d0ed      	beq.n	8003edc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	fffff9ff 	.word	0xfffff9ff
 8003f14:	20000020 	.word	0x20000020
 8003f18:	000f4240 	.word	0x000f4240

08003f1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	23e0      	movs	r3, #224	; 0xe0
 8003f26:	01db      	lsls	r3, r3, #7
 8003f28:	4013      	ands	r3, r2
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000

08003f34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e2fe      	b.n	8004544 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <HAL_RCC_OscConfig+0x1e>
 8003f50:	e07c      	b.n	800404c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f52:	4bc3      	ldr	r3, [pc, #780]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2238      	movs	r2, #56	; 0x38
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f5c:	4bc0      	ldr	r3, [pc, #768]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2203      	movs	r2, #3
 8003f62:	4013      	ands	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d102      	bne.n	8003f72 <HAL_RCC_OscConfig+0x3e>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d002      	beq.n	8003f78 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	4bb9      	ldr	r3, [pc, #740]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	029b      	lsls	r3, r3, #10
 8003f80:	4013      	ands	r3, r2
 8003f82:	d062      	beq.n	800404a <HAL_RCC_OscConfig+0x116>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d15e      	bne.n	800404a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e2d9      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	025b      	lsls	r3, r3, #9
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_OscConfig+0x78>
 8003f9c:	4bb0      	ldr	r3, [pc, #704]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4baf      	ldr	r3, [pc, #700]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	0249      	lsls	r1, r1, #9
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e020      	b.n	8003fee <HAL_RCC_OscConfig+0xba>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	23a0      	movs	r3, #160	; 0xa0
 8003fb2:	02db      	lsls	r3, r3, #11
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_RCC_OscConfig+0xa2>
 8003fb8:	4ba9      	ldr	r3, [pc, #676]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4ba8      	ldr	r3, [pc, #672]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003fbe:	2180      	movs	r1, #128	; 0x80
 8003fc0:	02c9      	lsls	r1, r1, #11
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	4ba6      	ldr	r3, [pc, #664]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4ba5      	ldr	r3, [pc, #660]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	0249      	lsls	r1, r1, #9
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e00b      	b.n	8003fee <HAL_RCC_OscConfig+0xba>
 8003fd6:	4ba2      	ldr	r3, [pc, #648]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4ba1      	ldr	r3, [pc, #644]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003fdc:	49a1      	ldr	r1, [pc, #644]	; (8004264 <HAL_RCC_OscConfig+0x330>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	4b9f      	ldr	r3, [pc, #636]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b9e      	ldr	r3, [pc, #632]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8003fe8:	499f      	ldr	r1, [pc, #636]	; (8004268 <HAL_RCC_OscConfig+0x334>)
 8003fea:	400a      	ands	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d014      	beq.n	8004020 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff6:	f7ff fbc1 	bl	800377c <HAL_GetTick>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004000:	f7ff fbbc 	bl	800377c <HAL_GetTick>
 8004004:	0002      	movs	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e298      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004012:	4b93      	ldr	r3, [pc, #588]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	4013      	ands	r3, r2
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0xcc>
 800401e:	e015      	b.n	800404c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7ff fbac 	bl	800377c <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800402a:	f7ff fba7 	bl	800377c <HAL_GetTick>
 800402e:	0002      	movs	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b64      	cmp	r3, #100	; 0x64
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e283      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800403c:	4b88      	ldr	r3, [pc, #544]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	029b      	lsls	r3, r3, #10
 8004044:	4013      	ands	r3, r2
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0xf6>
 8004048:	e000      	b.n	800404c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2202      	movs	r2, #2
 8004052:	4013      	ands	r3, r2
 8004054:	d100      	bne.n	8004058 <HAL_RCC_OscConfig+0x124>
 8004056:	e099      	b.n	800418c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004058:	4b81      	ldr	r3, [pc, #516]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2238      	movs	r2, #56	; 0x38
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004062:	4b7f      	ldr	r3, [pc, #508]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2203      	movs	r2, #3
 8004068:	4013      	ands	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b10      	cmp	r3, #16
 8004070:	d102      	bne.n	8004078 <HAL_RCC_OscConfig+0x144>
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d002      	beq.n	800407e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d135      	bne.n	80040ea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800407e:	4b78      	ldr	r3, [pc, #480]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4013      	ands	r3, r2
 8004088:	d005      	beq.n	8004096 <HAL_RCC_OscConfig+0x162>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e256      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004096:	4b72      	ldr	r3, [pc, #456]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4a74      	ldr	r2, [pc, #464]	; (800426c <HAL_RCC_OscConfig+0x338>)
 800409c:	4013      	ands	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	021a      	lsls	r2, r3, #8
 80040a6:	4b6e      	ldr	r3, [pc, #440]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d112      	bne.n	80040d8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040b2:	4b6b      	ldr	r3, [pc, #428]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6e      	ldr	r2, [pc, #440]	; (8004270 <HAL_RCC_OscConfig+0x33c>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	4b67      	ldr	r3, [pc, #412]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80040c6:	4b66      	ldr	r3, [pc, #408]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	0adb      	lsrs	r3, r3, #11
 80040cc:	2207      	movs	r2, #7
 80040ce:	4013      	ands	r3, r2
 80040d0:	4a68      	ldr	r2, [pc, #416]	; (8004274 <HAL_RCC_OscConfig+0x340>)
 80040d2:	40da      	lsrs	r2, r3
 80040d4:	4b68      	ldr	r3, [pc, #416]	; (8004278 <HAL_RCC_OscConfig+0x344>)
 80040d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040d8:	4b68      	ldr	r3, [pc, #416]	; (800427c <HAL_RCC_OscConfig+0x348>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7ff faf1 	bl	80036c4 <HAL_InitTick>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d051      	beq.n	800418a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e22c      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d030      	beq.n	8004154 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040f2:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a5e      	ldr	r2, [pc, #376]	; (8004270 <HAL_RCC_OscConfig+0x33c>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	0019      	movs	r1, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	4b57      	ldr	r3, [pc, #348]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004106:	4b56      	ldr	r3, [pc, #344]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4b55      	ldr	r3, [pc, #340]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 800410c:	2180      	movs	r1, #128	; 0x80
 800410e:	0049      	lsls	r1, r1, #1
 8004110:	430a      	orrs	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7ff fb32 	bl	800377c <HAL_GetTick>
 8004118:	0003      	movs	r3, r0
 800411a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411e:	f7ff fb2d 	bl	800377c <HAL_GetTick>
 8004122:	0002      	movs	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e209      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004130:	4b4b      	ldr	r3, [pc, #300]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4013      	ands	r3, r2
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413c:	4b48      	ldr	r3, [pc, #288]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4a4a      	ldr	r2, [pc, #296]	; (800426c <HAL_RCC_OscConfig+0x338>)
 8004142:	4013      	ands	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	021a      	lsls	r2, r3, #8
 800414c:	4b44      	ldr	r3, [pc, #272]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	e01b      	b.n	800418c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004154:	4b42      	ldr	r3, [pc, #264]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4b41      	ldr	r3, [pc, #260]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 800415a:	4949      	ldr	r1, [pc, #292]	; (8004280 <HAL_RCC_OscConfig+0x34c>)
 800415c:	400a      	ands	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7ff fb0c 	bl	800377c <HAL_GetTick>
 8004164:	0003      	movs	r3, r0
 8004166:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416a:	f7ff fb07 	bl	800377c <HAL_GetTick>
 800416e:	0002      	movs	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e1e3      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800417c:	4b38      	ldr	r3, [pc, #224]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4013      	ands	r3, r2
 8004186:	d1f0      	bne.n	800416a <HAL_RCC_OscConfig+0x236>
 8004188:	e000      	b.n	800418c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800418a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2208      	movs	r2, #8
 8004192:	4013      	ands	r3, r2
 8004194:	d047      	beq.n	8004226 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004196:	4b32      	ldr	r3, [pc, #200]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2238      	movs	r2, #56	; 0x38
 800419c:	4013      	ands	r3, r2
 800419e:	2b18      	cmp	r3, #24
 80041a0:	d10a      	bne.n	80041b8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80041a2:	4b2f      	ldr	r3, [pc, #188]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80041a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a6:	2202      	movs	r2, #2
 80041a8:	4013      	ands	r3, r2
 80041aa:	d03c      	beq.n	8004226 <HAL_RCC_OscConfig+0x2f2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d138      	bne.n	8004226 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e1c5      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d019      	beq.n	80041f4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80041c0:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80041c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041c4:	4b26      	ldr	r3, [pc, #152]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80041c6:	2101      	movs	r1, #1
 80041c8:	430a      	orrs	r2, r1
 80041ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7ff fad6 	bl	800377c <HAL_GetTick>
 80041d0:	0003      	movs	r3, r0
 80041d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d6:	f7ff fad1 	bl	800377c <HAL_GetTick>
 80041da:	0002      	movs	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e1ad      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041e8:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80041ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ec:	2202      	movs	r2, #2
 80041ee:	4013      	ands	r3, r2
 80041f0:	d0f1      	beq.n	80041d6 <HAL_RCC_OscConfig+0x2a2>
 80041f2:	e018      	b.n	8004226 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80041f4:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80041f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041f8:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 80041fa:	2101      	movs	r1, #1
 80041fc:	438a      	bics	r2, r1
 80041fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7ff fabc 	bl	800377c <HAL_GetTick>
 8004204:	0003      	movs	r3, r0
 8004206:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420a:	f7ff fab7 	bl	800377c <HAL_GetTick>
 800420e:	0002      	movs	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e193      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 800421e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004220:	2202      	movs	r2, #2
 8004222:	4013      	ands	r3, r2
 8004224:	d1f1      	bne.n	800420a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2204      	movs	r2, #4
 800422c:	4013      	ands	r3, r2
 800422e:	d100      	bne.n	8004232 <HAL_RCC_OscConfig+0x2fe>
 8004230:	e0c6      	b.n	80043c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004232:	231f      	movs	r3, #31
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800423a:	4b09      	ldr	r3, [pc, #36]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2238      	movs	r2, #56	; 0x38
 8004240:	4013      	ands	r3, r2
 8004242:	2b20      	cmp	r3, #32
 8004244:	d11e      	bne.n	8004284 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_RCC_OscConfig+0x32c>)
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	2202      	movs	r2, #2
 800424c:	4013      	ands	r3, r2
 800424e:	d100      	bne.n	8004252 <HAL_RCC_OscConfig+0x31e>
 8004250:	e0b6      	b.n	80043c0 <HAL_RCC_OscConfig+0x48c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d000      	beq.n	800425c <HAL_RCC_OscConfig+0x328>
 800425a:	e0b1      	b.n	80043c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e171      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
 8004260:	40021000 	.word	0x40021000
 8004264:	fffeffff 	.word	0xfffeffff
 8004268:	fffbffff 	.word	0xfffbffff
 800426c:	ffff80ff 	.word	0xffff80ff
 8004270:	ffffc7ff 	.word	0xffffc7ff
 8004274:	00f42400 	.word	0x00f42400
 8004278:	20000020 	.word	0x20000020
 800427c:	20000024 	.word	0x20000024
 8004280:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004284:	4bb1      	ldr	r3, [pc, #708]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	055b      	lsls	r3, r3, #21
 800428c:	4013      	ands	r3, r2
 800428e:	d101      	bne.n	8004294 <HAL_RCC_OscConfig+0x360>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_RCC_OscConfig+0x362>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d011      	beq.n	80042be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	4bac      	ldr	r3, [pc, #688]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800429c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800429e:	4bab      	ldr	r3, [pc, #684]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80042a0:	2180      	movs	r1, #128	; 0x80
 80042a2:	0549      	lsls	r1, r1, #21
 80042a4:	430a      	orrs	r2, r1
 80042a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80042a8:	4ba8      	ldr	r3, [pc, #672]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80042aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	055b      	lsls	r3, r3, #21
 80042b0:	4013      	ands	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80042b6:	231f      	movs	r3, #31
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2201      	movs	r2, #1
 80042bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042be:	4ba4      	ldr	r3, [pc, #656]	; (8004550 <HAL_RCC_OscConfig+0x61c>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4013      	ands	r3, r2
 80042c8:	d11a      	bne.n	8004300 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ca:	4ba1      	ldr	r3, [pc, #644]	; (8004550 <HAL_RCC_OscConfig+0x61c>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4ba0      	ldr	r3, [pc, #640]	; (8004550 <HAL_RCC_OscConfig+0x61c>)
 80042d0:	2180      	movs	r1, #128	; 0x80
 80042d2:	0049      	lsls	r1, r1, #1
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80042d8:	f7ff fa50 	bl	800377c <HAL_GetTick>
 80042dc:	0003      	movs	r3, r0
 80042de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e2:	f7ff fa4b 	bl	800377c <HAL_GetTick>
 80042e6:	0002      	movs	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e127      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f4:	4b96      	ldr	r3, [pc, #600]	; (8004550 <HAL_RCC_OscConfig+0x61c>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4013      	ands	r3, r2
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x3e2>
 8004308:	4b90      	ldr	r3, [pc, #576]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800430a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800430c:	4b8f      	ldr	r3, [pc, #572]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800430e:	2101      	movs	r1, #1
 8004310:	430a      	orrs	r2, r1
 8004312:	65da      	str	r2, [r3, #92]	; 0x5c
 8004314:	e01c      	b.n	8004350 <HAL_RCC_OscConfig+0x41c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b05      	cmp	r3, #5
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x404>
 800431e:	4b8b      	ldr	r3, [pc, #556]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004320:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004322:	4b8a      	ldr	r3, [pc, #552]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004324:	2104      	movs	r1, #4
 8004326:	430a      	orrs	r2, r1
 8004328:	65da      	str	r2, [r3, #92]	; 0x5c
 800432a:	4b88      	ldr	r3, [pc, #544]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800432c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800432e:	4b87      	ldr	r3, [pc, #540]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004330:	2101      	movs	r1, #1
 8004332:	430a      	orrs	r2, r1
 8004334:	65da      	str	r2, [r3, #92]	; 0x5c
 8004336:	e00b      	b.n	8004350 <HAL_RCC_OscConfig+0x41c>
 8004338:	4b84      	ldr	r3, [pc, #528]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800433a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800433c:	4b83      	ldr	r3, [pc, #524]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800433e:	2101      	movs	r1, #1
 8004340:	438a      	bics	r2, r1
 8004342:	65da      	str	r2, [r3, #92]	; 0x5c
 8004344:	4b81      	ldr	r3, [pc, #516]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004346:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004348:	4b80      	ldr	r3, [pc, #512]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800434a:	2104      	movs	r1, #4
 800434c:	438a      	bics	r2, r1
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d014      	beq.n	8004382 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7ff fa10 	bl	800377c <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004360:	e009      	b.n	8004376 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7ff fa0b 	bl	800377c <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	4a79      	ldr	r2, [pc, #484]	; (8004554 <HAL_RCC_OscConfig+0x620>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0e6      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004376:	4b75      	ldr	r3, [pc, #468]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437a:	2202      	movs	r2, #2
 800437c:	4013      	ands	r3, r2
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x42e>
 8004380:	e013      	b.n	80043aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7ff f9fb 	bl	800377c <HAL_GetTick>
 8004386:	0003      	movs	r3, r0
 8004388:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800438a:	e009      	b.n	80043a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7ff f9f6 	bl	800377c <HAL_GetTick>
 8004390:	0002      	movs	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	4a6f      	ldr	r2, [pc, #444]	; (8004554 <HAL_RCC_OscConfig+0x620>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0d1      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a0:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	2202      	movs	r2, #2
 80043a6:	4013      	ands	r3, r2
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80043aa:	231f      	movs	r3, #31
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043b4:	4b65      	ldr	r3, [pc, #404]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80043b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b8:	4b64      	ldr	r3, [pc, #400]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80043ba:	4967      	ldr	r1, [pc, #412]	; (8004558 <HAL_RCC_OscConfig+0x624>)
 80043bc:	400a      	ands	r2, r1
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d100      	bne.n	80043ca <HAL_RCC_OscConfig+0x496>
 80043c8:	e0bb      	b.n	8004542 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ca:	4b60      	ldr	r3, [pc, #384]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2238      	movs	r2, #56	; 0x38
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d100      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4a4>
 80043d6:	e07b      	b.n	80044d0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d156      	bne.n	800448e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e0:	4b5a      	ldr	r3, [pc, #360]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b59      	ldr	r3, [pc, #356]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80043e6:	495d      	ldr	r1, [pc, #372]	; (800455c <HAL_RCC_OscConfig+0x628>)
 80043e8:	400a      	ands	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7ff f9c6 	bl	800377c <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f6:	f7ff f9c1 	bl	800377c <HAL_GetTick>
 80043fa:	0002      	movs	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e09d      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004408:	4b50      	ldr	r3, [pc, #320]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	049b      	lsls	r3, r3, #18
 8004410:	4013      	ands	r3, r2
 8004412:	d1f0      	bne.n	80043f6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004414:	4b4d      	ldr	r3, [pc, #308]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a51      	ldr	r2, [pc, #324]	; (8004560 <HAL_RCC_OscConfig+0x62c>)
 800441a:	4013      	ands	r3, r2
 800441c:	0019      	movs	r1, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1a      	ldr	r2, [r3, #32]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	431a      	orrs	r2, r3
 8004442:	4b42      	ldr	r3, [pc, #264]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004444:	430a      	orrs	r2, r1
 8004446:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004448:	4b40      	ldr	r3, [pc, #256]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b3f      	ldr	r3, [pc, #252]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	0449      	lsls	r1, r1, #17
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004456:	4b3d      	ldr	r3, [pc, #244]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	4b3c      	ldr	r3, [pc, #240]	; (800454c <HAL_RCC_OscConfig+0x618>)
 800445c:	2180      	movs	r1, #128	; 0x80
 800445e:	0549      	lsls	r1, r1, #21
 8004460:	430a      	orrs	r2, r1
 8004462:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7ff f98a 	bl	800377c <HAL_GetTick>
 8004468:	0003      	movs	r3, r0
 800446a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446e:	f7ff f985 	bl	800377c <HAL_GetTick>
 8004472:	0002      	movs	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e061      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004480:	4b32      	ldr	r3, [pc, #200]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	049b      	lsls	r3, r3, #18
 8004488:	4013      	ands	r3, r2
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x53a>
 800448c:	e059      	b.n	8004542 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b2e      	ldr	r3, [pc, #184]	; (800454c <HAL_RCC_OscConfig+0x618>)
 8004494:	4931      	ldr	r1, [pc, #196]	; (800455c <HAL_RCC_OscConfig+0x628>)
 8004496:	400a      	ands	r2, r1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7ff f96f 	bl	800377c <HAL_GetTick>
 800449e:	0003      	movs	r3, r0
 80044a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a4:	f7ff f96a 	bl	800377c <HAL_GetTick>
 80044a8:	0002      	movs	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e046      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b6:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	049b      	lsls	r3, r3, #18
 80044be:	4013      	ands	r3, r2
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80044c2:	4b22      	ldr	r3, [pc, #136]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	4b21      	ldr	r3, [pc, #132]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80044c8:	4926      	ldr	r1, [pc, #152]	; (8004564 <HAL_RCC_OscConfig+0x630>)
 80044ca:	400a      	ands	r2, r1
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	e038      	b.n	8004542 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e033      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80044dc:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_RCC_OscConfig+0x618>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2203      	movs	r2, #3
 80044e6:	401a      	ands	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d126      	bne.n	800453e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2270      	movs	r2, #112	; 0x70
 80044f4:	401a      	ands	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d11f      	bne.n	800453e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	23fe      	movs	r3, #254	; 0xfe
 8004502:	01db      	lsls	r3, r3, #7
 8004504:	401a      	ands	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d116      	bne.n	800453e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	23f8      	movs	r3, #248	; 0xf8
 8004514:	039b      	lsls	r3, r3, #14
 8004516:	401a      	ands	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d10e      	bne.n	800453e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	23e0      	movs	r3, #224	; 0xe0
 8004524:	051b      	lsls	r3, r3, #20
 8004526:	401a      	ands	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	0f5b      	lsrs	r3, r3, #29
 8004534:	075a      	lsls	r2, r3, #29
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	0018      	movs	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	b008      	add	sp, #32
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	40007000 	.word	0x40007000
 8004554:	00001388 	.word	0x00001388
 8004558:	efffffff 	.word	0xefffffff
 800455c:	feffffff 	.word	0xfeffffff
 8004560:	11c1808c 	.word	0x11c1808c
 8004564:	eefefffc 	.word	0xeefefffc

08004568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0e9      	b.n	8004750 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b76      	ldr	r3, [pc, #472]	; (8004758 <HAL_RCC_ClockConfig+0x1f0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2207      	movs	r2, #7
 8004582:	4013      	ands	r3, r2
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d91e      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b73      	ldr	r3, [pc, #460]	; (8004758 <HAL_RCC_ClockConfig+0x1f0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2207      	movs	r2, #7
 8004590:	4393      	bics	r3, r2
 8004592:	0019      	movs	r1, r3
 8004594:	4b70      	ldr	r3, [pc, #448]	; (8004758 <HAL_RCC_ClockConfig+0x1f0>)
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800459c:	f7ff f8ee 	bl	800377c <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045a4:	e009      	b.n	80045ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a6:	f7ff f8e9 	bl	800377c <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	4a6a      	ldr	r2, [pc, #424]	; (800475c <HAL_RCC_ClockConfig+0x1f4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e0ca      	b.n	8004750 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045ba:	4b67      	ldr	r3, [pc, #412]	; (8004758 <HAL_RCC_ClockConfig+0x1f0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2207      	movs	r2, #7
 80045c0:	4013      	ands	r3, r2
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1ee      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2202      	movs	r2, #2
 80045ce:	4013      	ands	r3, r2
 80045d0:	d015      	beq.n	80045fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2204      	movs	r2, #4
 80045d8:	4013      	ands	r3, r2
 80045da:	d006      	beq.n	80045ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045dc:	4b60      	ldr	r3, [pc, #384]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b5f      	ldr	r3, [pc, #380]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 80045e2:	21e0      	movs	r1, #224	; 0xe0
 80045e4:	01c9      	lsls	r1, r1, #7
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ea:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	4a5d      	ldr	r2, [pc, #372]	; (8004764 <HAL_RCC_ClockConfig+0x1fc>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	4b59      	ldr	r3, [pc, #356]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2201      	movs	r2, #1
 8004604:	4013      	ands	r3, r2
 8004606:	d057      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d107      	bne.n	8004620 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004610:	4b53      	ldr	r3, [pc, #332]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	029b      	lsls	r3, r3, #10
 8004618:	4013      	ands	r3, r2
 800461a:	d12b      	bne.n	8004674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e097      	b.n	8004750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d107      	bne.n	8004638 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004628:	4b4d      	ldr	r3, [pc, #308]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	049b      	lsls	r3, r3, #18
 8004630:	4013      	ands	r3, r2
 8004632:	d11f      	bne.n	8004674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e08b      	b.n	8004750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004640:	4b47      	ldr	r3, [pc, #284]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4013      	ands	r3, r2
 800464a:	d113      	bne.n	8004674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e07f      	b.n	8004750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d106      	bne.n	8004666 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004658:	4b41      	ldr	r3, [pc, #260]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 800465a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465c:	2202      	movs	r2, #2
 800465e:	4013      	ands	r3, r2
 8004660:	d108      	bne.n	8004674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e074      	b.n	8004750 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004666:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	2202      	movs	r2, #2
 800466c:	4013      	ands	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e06d      	b.n	8004750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004674:	4b3a      	ldr	r3, [pc, #232]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2207      	movs	r2, #7
 800467a:	4393      	bics	r3, r2
 800467c:	0019      	movs	r1, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004688:	f7ff f878 	bl	800377c <HAL_GetTick>
 800468c:	0003      	movs	r3, r0
 800468e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004690:	e009      	b.n	80046a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004692:	f7ff f873 	bl	800377c <HAL_GetTick>
 8004696:	0002      	movs	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	4a2f      	ldr	r2, [pc, #188]	; (800475c <HAL_RCC_ClockConfig+0x1f4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e054      	b.n	8004750 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2238      	movs	r2, #56	; 0x38
 80046ac:	401a      	ands	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1ec      	bne.n	8004692 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046b8:	4b27      	ldr	r3, [pc, #156]	; (8004758 <HAL_RCC_ClockConfig+0x1f0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2207      	movs	r2, #7
 80046be:	4013      	ands	r3, r2
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d21e      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_ClockConfig+0x1f0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2207      	movs	r2, #7
 80046cc:	4393      	bics	r3, r2
 80046ce:	0019      	movs	r1, r3
 80046d0:	4b21      	ldr	r3, [pc, #132]	; (8004758 <HAL_RCC_ClockConfig+0x1f0>)
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046d8:	f7ff f850 	bl	800377c <HAL_GetTick>
 80046dc:	0003      	movs	r3, r0
 80046de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046e0:	e009      	b.n	80046f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e2:	f7ff f84b 	bl	800377c <HAL_GetTick>
 80046e6:	0002      	movs	r2, r0
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	4a1b      	ldr	r2, [pc, #108]	; (800475c <HAL_RCC_ClockConfig+0x1f4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e02c      	b.n	8004750 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046f6:	4b18      	ldr	r3, [pc, #96]	; (8004758 <HAL_RCC_ClockConfig+0x1f0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2207      	movs	r2, #7
 80046fc:	4013      	ands	r3, r2
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d1ee      	bne.n	80046e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2204      	movs	r2, #4
 800470a:	4013      	ands	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	4a15      	ldr	r2, [pc, #84]	; (8004768 <HAL_RCC_ClockConfig+0x200>)
 8004714:	4013      	ands	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	4b10      	ldr	r3, [pc, #64]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 800471e:	430a      	orrs	r2, r1
 8004720:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004722:	f000 f829 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8004726:	0001      	movs	r1, r0
 8004728:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <HAL_RCC_ClockConfig+0x1f8>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	220f      	movs	r2, #15
 8004730:	401a      	ands	r2, r3
 8004732:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_RCC_ClockConfig+0x204>)
 8004734:	0092      	lsls	r2, r2, #2
 8004736:	58d3      	ldr	r3, [r2, r3]
 8004738:	221f      	movs	r2, #31
 800473a:	4013      	ands	r3, r2
 800473c:	000a      	movs	r2, r1
 800473e:	40da      	lsrs	r2, r3
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_ClockConfig+0x208>)
 8004742:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_ClockConfig+0x20c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	0018      	movs	r0, r3
 800474a:	f7fe ffbb 	bl	80036c4 <HAL_InitTick>
 800474e:	0003      	movs	r3, r0
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b004      	add	sp, #16
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40022000 	.word	0x40022000
 800475c:	00001388 	.word	0x00001388
 8004760:	40021000 	.word	0x40021000
 8004764:	fffff0ff 	.word	0xfffff0ff
 8004768:	ffff8fff 	.word	0xffff8fff
 800476c:	08014288 	.word	0x08014288
 8004770:	20000020 	.word	0x20000020
 8004774:	20000024 	.word	0x20000024

08004778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800477e:	4b3c      	ldr	r3, [pc, #240]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2238      	movs	r2, #56	; 0x38
 8004784:	4013      	ands	r3, r2
 8004786:	d10f      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004788:	4b39      	ldr	r3, [pc, #228]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0adb      	lsrs	r3, r3, #11
 800478e:	2207      	movs	r2, #7
 8004790:	4013      	ands	r3, r2
 8004792:	2201      	movs	r2, #1
 8004794:	409a      	lsls	r2, r3
 8004796:	0013      	movs	r3, r2
 8004798:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	4835      	ldr	r0, [pc, #212]	; (8004874 <HAL_RCC_GetSysClockFreq+0xfc>)
 800479e:	f7fb fccd 	bl	800013c <__udivsi3>
 80047a2:	0003      	movs	r3, r0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e05d      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047a8:	4b31      	ldr	r3, [pc, #196]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2238      	movs	r2, #56	; 0x38
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d102      	bne.n	80047ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047b4:	4b30      	ldr	r3, [pc, #192]	; (8004878 <HAL_RCC_GetSysClockFreq+0x100>)
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	e054      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2238      	movs	r2, #56	; 0x38
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d138      	bne.n	8004838 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80047c6:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2203      	movs	r2, #3
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	2207      	movs	r2, #7
 80047d8:	4013      	ands	r3, r2
 80047da:	3301      	adds	r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d10d      	bne.n	8004800 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4824      	ldr	r0, [pc, #144]	; (8004878 <HAL_RCC_GetSysClockFreq+0x100>)
 80047e8:	f7fb fca8 	bl	800013c <__udivsi3>
 80047ec:	0003      	movs	r3, r0
 80047ee:	0019      	movs	r1, r3
 80047f0:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	0a1b      	lsrs	r3, r3, #8
 80047f6:	227f      	movs	r2, #127	; 0x7f
 80047f8:	4013      	ands	r3, r2
 80047fa:	434b      	muls	r3, r1
 80047fc:	617b      	str	r3, [r7, #20]
        break;
 80047fe:	e00d      	b.n	800481c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	481c      	ldr	r0, [pc, #112]	; (8004874 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004804:	f7fb fc9a 	bl	800013c <__udivsi3>
 8004808:	0003      	movs	r3, r0
 800480a:	0019      	movs	r1, r3
 800480c:	4b18      	ldr	r3, [pc, #96]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	0a1b      	lsrs	r3, r3, #8
 8004812:	227f      	movs	r2, #127	; 0x7f
 8004814:	4013      	ands	r3, r2
 8004816:	434b      	muls	r3, r1
 8004818:	617b      	str	r3, [r7, #20]
        break;
 800481a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	0f5b      	lsrs	r3, r3, #29
 8004822:	2207      	movs	r2, #7
 8004824:	4013      	ands	r3, r2
 8004826:	3301      	adds	r3, #1
 8004828:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	6978      	ldr	r0, [r7, #20]
 800482e:	f7fb fc85 	bl	800013c <__udivsi3>
 8004832:	0003      	movs	r3, r0
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	e015      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004838:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2238      	movs	r2, #56	; 0x38
 800483e:	4013      	ands	r3, r2
 8004840:	2b20      	cmp	r3, #32
 8004842:	d103      	bne.n	800484c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e00b      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <HAL_RCC_GetSysClockFreq+0xf8>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2238      	movs	r2, #56	; 0x38
 8004852:	4013      	ands	r3, r2
 8004854:	2b18      	cmp	r3, #24
 8004856:	d103      	bne.n	8004860 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004858:	23fa      	movs	r3, #250	; 0xfa
 800485a:	01db      	lsls	r3, r3, #7
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	e001      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004864:	693b      	ldr	r3, [r7, #16]
}
 8004866:	0018      	movs	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	b006      	add	sp, #24
 800486c:	bd80      	pop	{r7, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	40021000 	.word	0x40021000
 8004874:	00f42400 	.word	0x00f42400
 8004878:	007a1200 	.word	0x007a1200

0800487c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004880:	4b02      	ldr	r3, [pc, #8]	; (800488c <HAL_RCC_GetHCLKFreq+0x10>)
 8004882:	681b      	ldr	r3, [r3, #0]
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	20000020 	.word	0x20000020

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004894:	f7ff fff2 	bl	800487c <HAL_RCC_GetHCLKFreq>
 8004898:	0004      	movs	r4, r0
 800489a:	f7ff fb3f 	bl	8003f1c <LL_RCC_GetAPB1Prescaler>
 800489e:	0003      	movs	r3, r0
 80048a0:	0b1a      	lsrs	r2, r3, #12
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048a4:	0092      	lsls	r2, r2, #2
 80048a6:	58d3      	ldr	r3, [r2, r3]
 80048a8:	221f      	movs	r2, #31
 80048aa:	4013      	ands	r3, r2
 80048ac:	40dc      	lsrs	r4, r3
 80048ae:	0023      	movs	r3, r4
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bdb0      	pop	{r4, r5, r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	080142c8 	.word	0x080142c8

080048bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80048c4:	2313      	movs	r3, #19
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048cc:	2312      	movs	r3, #18
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	029b      	lsls	r3, r3, #10
 80048dc:	4013      	ands	r3, r2
 80048de:	d100      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80048e0:	e0a3      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e2:	2011      	movs	r0, #17
 80048e4:	183b      	adds	r3, r7, r0
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ea:	4bc3      	ldr	r3, [pc, #780]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	055b      	lsls	r3, r3, #21
 80048f2:	4013      	ands	r3, r2
 80048f4:	d110      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f6:	4bc0      	ldr	r3, [pc, #768]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048fa:	4bbf      	ldr	r3, [pc, #764]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048fc:	2180      	movs	r1, #128	; 0x80
 80048fe:	0549      	lsls	r1, r1, #21
 8004900:	430a      	orrs	r2, r1
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c
 8004904:	4bbc      	ldr	r3, [pc, #752]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	055b      	lsls	r3, r3, #21
 800490c:	4013      	ands	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004912:	183b      	adds	r3, r7, r0
 8004914:	2201      	movs	r2, #1
 8004916:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004918:	4bb8      	ldr	r3, [pc, #736]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4bb7      	ldr	r3, [pc, #732]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	0049      	lsls	r1, r1, #1
 8004922:	430a      	orrs	r2, r1
 8004924:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004926:	f7fe ff29 	bl	800377c <HAL_GetTick>
 800492a:	0003      	movs	r3, r0
 800492c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492e:	e00b      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004930:	f7fe ff24 	bl	800377c <HAL_GetTick>
 8004934:	0002      	movs	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d904      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800493e:	2313      	movs	r3, #19
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	2203      	movs	r2, #3
 8004944:	701a      	strb	r2, [r3, #0]
        break;
 8004946:	e005      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004948:	4bac      	ldr	r3, [pc, #688]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4013      	ands	r3, r2
 8004952:	d0ed      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004954:	2313      	movs	r3, #19
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d154      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800495e:	4ba6      	ldr	r3, [pc, #664]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004960:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004962:	23c0      	movs	r3, #192	; 0xc0
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4013      	ands	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d019      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	429a      	cmp	r2, r3
 8004978:	d014      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800497a:	4b9f      	ldr	r3, [pc, #636]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	4aa0      	ldr	r2, [pc, #640]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004980:	4013      	ands	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004984:	4b9c      	ldr	r3, [pc, #624]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004986:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004988:	4b9b      	ldr	r3, [pc, #620]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	0249      	lsls	r1, r1, #9
 800498e:	430a      	orrs	r2, r1
 8004990:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004992:	4b99      	ldr	r3, [pc, #612]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004994:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004996:	4b98      	ldr	r3, [pc, #608]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004998:	499a      	ldr	r1, [pc, #616]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800499a:	400a      	ands	r2, r1
 800499c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800499e:	4b96      	ldr	r3, [pc, #600]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4013      	ands	r3, r2
 80049aa:	d016      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fe fee6 	bl	800377c <HAL_GetTick>
 80049b0:	0003      	movs	r3, r0
 80049b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b4:	e00c      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fe fee1 	bl	800377c <HAL_GetTick>
 80049ba:	0002      	movs	r2, r0
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	4a91      	ldr	r2, [pc, #580]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d904      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80049c6:	2313      	movs	r3, #19
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	2203      	movs	r2, #3
 80049cc:	701a      	strb	r2, [r3, #0]
            break;
 80049ce:	e004      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d0:	4b89      	ldr	r3, [pc, #548]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	2202      	movs	r2, #2
 80049d6:	4013      	ands	r3, r2
 80049d8:	d0ed      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80049da:	2313      	movs	r3, #19
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e4:	4b84      	ldr	r3, [pc, #528]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	4a85      	ldr	r2, [pc, #532]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	0019      	movs	r1, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f2:	4b81      	ldr	r3, [pc, #516]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049f4:	430a      	orrs	r2, r1
 80049f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80049f8:	e00c      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049fa:	2312      	movs	r3, #18
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	2213      	movs	r2, #19
 8004a00:	18ba      	adds	r2, r7, r2
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	e005      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a08:	2312      	movs	r3, #18
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	2213      	movs	r2, #19
 8004a0e:	18ba      	adds	r2, r7, r2
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a14:	2311      	movs	r3, #17
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d105      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1e:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a22:	4b75      	ldr	r3, [pc, #468]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a24:	4979      	ldr	r1, [pc, #484]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004a26:	400a      	ands	r2, r1
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4013      	ands	r3, r2
 8004a32:	d009      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a34:	4b70      	ldr	r3, [pc, #448]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	2203      	movs	r2, #3
 8004a3a:	4393      	bics	r3, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	4b6d      	ldr	r3, [pc, #436]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a44:	430a      	orrs	r2, r1
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a52:	4b69      	ldr	r3, [pc, #420]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	220c      	movs	r2, #12
 8004a58:	4393      	bics	r3, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	4b65      	ldr	r3, [pc, #404]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a62:	430a      	orrs	r2, r1
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a70:	4b61      	ldr	r3, [pc, #388]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a74:	4a66      	ldr	r2, [pc, #408]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	4b5e      	ldr	r3, [pc, #376]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a80:	430a      	orrs	r2, r1
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a90:	4b59      	ldr	r3, [pc, #356]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	4a5f      	ldr	r2, [pc, #380]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	0019      	movs	r1, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	4b56      	ldr	r3, [pc, #344]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4013      	ands	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ab0:	4b51      	ldr	r3, [pc, #324]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	4b4e      	ldr	r3, [pc, #312]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	4013      	ands	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ace:	4b4a      	ldr	r3, [pc, #296]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	4b46      	ldr	r3, [pc, #280]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	01db      	lsls	r3, r3, #7
 8004aea:	4013      	ands	r3, r2
 8004aec:	d015      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aee:	4b42      	ldr	r3, [pc, #264]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	0899      	lsrs	r1, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1a      	ldr	r2, [r3, #32]
 8004afa:	4b3f      	ldr	r3, [pc, #252]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004afc:	430a      	orrs	r2, r1
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	05db      	lsls	r3, r3, #23
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b0c:	4b3a      	ldr	r3, [pc, #232]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	0249      	lsls	r1, r1, #9
 8004b16:	430a      	orrs	r2, r1
 8004b18:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	4013      	ands	r3, r2
 8004b24:	d009      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b26:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	2240      	movs	r2, #64	; 0x40
 8004b2c:	4393      	bics	r3, r2
 8004b2e:	0019      	movs	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b34:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b36:	430a      	orrs	r2, r1
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	039b      	lsls	r3, r3, #14
 8004b42:	4013      	ands	r3, r2
 8004b44:	d016      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b46:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	4a35      	ldr	r2, [pc, #212]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b54:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b56:	430a      	orrs	r2, r1
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b5e:	2380      	movs	r3, #128	; 0x80
 8004b60:	03db      	lsls	r3, r3, #15
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d106      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b6c:	2180      	movs	r1, #128	; 0x80
 8004b6e:	0449      	lsls	r1, r1, #17
 8004b70:	430a      	orrs	r2, r1
 8004b72:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	03db      	lsls	r3, r3, #15
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d016      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	4a27      	ldr	r2, [pc, #156]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	0019      	movs	r1, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b90:	430a      	orrs	r2, r1
 8004b92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	045b      	lsls	r3, r3, #17
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d106      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ba0:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	0449      	lsls	r1, r1, #17
 8004baa:	430a      	orrs	r2, r1
 8004bac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d016      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004bba:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	4a1a      	ldr	r2, [pc, #104]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	01db      	lsls	r3, r3, #7
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d106      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bda:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	0249      	lsls	r1, r1, #9
 8004be4:	430a      	orrs	r2, r1
 8004be6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004be8:	2312      	movs	r3, #18
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	781b      	ldrb	r3, [r3, #0]
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b006      	add	sp, #24
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	fffffcff 	.word	0xfffffcff
 8004c04:	fffeffff 	.word	0xfffeffff
 8004c08:	00001388 	.word	0x00001388
 8004c0c:	efffffff 	.word	0xefffffff
 8004c10:	fffff3ff 	.word	0xfffff3ff
 8004c14:	fff3ffff 	.word	0xfff3ffff
 8004c18:	ffcfffff 	.word	0xffcfffff
 8004c1c:	ffffcfff 	.word	0xffffcfff
 8004c20:	ffbfffff 	.word	0xffbfffff
 8004c24:	feffffff 	.word	0xfeffffff
 8004c28:	ffff3fff 	.word	0xffff3fff

08004c2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c2c:	b5b0      	push	{r4, r5, r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c34:	230f      	movs	r3, #15
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d100      	bne.n	8004c44 <HAL_RTC_Init+0x18>
 8004c42:	e08c      	b.n	8004d5e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2229      	movs	r2, #41	; 0x29
 8004c48:	5c9b      	ldrb	r3, [r3, r2]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2228      	movs	r2, #40	; 0x28
 8004c54:	2100      	movs	r1, #0
 8004c56:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2288      	movs	r2, #136	; 0x88
 8004c5c:	0212      	lsls	r2, r2, #8
 8004c5e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f7fe fa18 	bl	8003098 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2229      	movs	r2, #41	; 0x29
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2210      	movs	r2, #16
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d062      	beq.n	8004d44 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	22ca      	movs	r2, #202	; 0xca
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2253      	movs	r2, #83	; 0x53
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004c8e:	250f      	movs	r5, #15
 8004c90:	197c      	adds	r4, r7, r5
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	0018      	movs	r0, r3
 8004c96:	f000 fb9c 	bl	80053d2 <RTC_EnterInitMode>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004c9e:	0028      	movs	r0, r5
 8004ca0:	183b      	adds	r3, r7, r0
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d12c      	bne.n	8004d02 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	492e      	ldr	r1, [pc, #184]	; (8004d6c <HAL_RTC_Init+0x140>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6999      	ldr	r1, [r3, #24]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6912      	ldr	r2, [r2, #16]
 8004cde:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6919      	ldr	r1, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	041a      	lsls	r2, r3, #16
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004cf4:	183c      	adds	r4, r7, r0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 fbad 	bl	8005458 <RTC_ExitInitMode>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004d02:	230f      	movs	r3, #15
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d116      	bne.n	8004d3a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	00d2      	lsls	r2, r2, #3
 8004d18:	08d2      	lsrs	r2, r2, #3
 8004d1a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6999      	ldr	r1, [r3, #24]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	22ff      	movs	r2, #255	; 0xff
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24
 8004d42:	e003      	b.n	8004d4c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004d44:	230f      	movs	r3, #15
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004d4c:	230f      	movs	r3, #15
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2229      	movs	r2, #41	; 0x29
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004d5e:	230f      	movs	r3, #15
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	781b      	ldrb	r3, [r3, #0]
}
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b004      	add	sp, #16
 8004d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d6c:	fb8fffbf 	.word	0xfb8fffbf

08004d70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d70:	b5b0      	push	{r4, r5, r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2228      	movs	r2, #40	; 0x28
 8004d80:	5c9b      	ldrb	r3, [r3, r2]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_RTC_SetTime+0x1a>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e092      	b.n	8004eb0 <HAL_RTC_SetTime+0x140>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2228      	movs	r2, #40	; 0x28
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2229      	movs	r2, #41	; 0x29
 8004d96:	2102      	movs	r1, #2
 8004d98:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	22ca      	movs	r2, #202	; 0xca
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2253      	movs	r2, #83	; 0x53
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004daa:	2513      	movs	r5, #19
 8004dac:	197c      	adds	r4, r7, r5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 fb0e 	bl	80053d2 <RTC_EnterInitMode>
 8004db6:	0003      	movs	r3, r0
 8004db8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004dba:	197b      	adds	r3, r7, r5
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d162      	bne.n	8004e88 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d125      	bne.n	8004e14 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2240      	movs	r2, #64	; 0x40
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d102      	bne.n	8004dda <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	0018      	movs	r0, r3
 8004de0:	f000 fb7e 	bl	80054e0 <RTC_ByteToBcd2>
 8004de4:	0003      	movs	r3, r0
 8004de6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f000 fb77 	bl	80054e0 <RTC_ByteToBcd2>
 8004df2:	0003      	movs	r3, r0
 8004df4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004df6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	789b      	ldrb	r3, [r3, #2]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 fb6f 	bl	80054e0 <RTC_ByteToBcd2>
 8004e02:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e04:	0022      	movs	r2, r4
 8004e06:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	78db      	ldrb	r3, [r3, #3]
 8004e0c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e017      	b.n	8004e44 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2240      	movs	r2, #64	; 0x40
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d102      	bne.n	8004e26 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2200      	movs	r2, #0
 8004e24:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e32:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e38:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	78db      	ldrb	r3, [r3, #3]
 8004e3e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	491b      	ldr	r1, [pc, #108]	; (8004eb8 <HAL_RTC_SetTime+0x148>)
 8004e4c:	400a      	ands	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4918      	ldr	r1, [pc, #96]	; (8004ebc <HAL_RTC_SetTime+0x14c>)
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e78:	2313      	movs	r3, #19
 8004e7a:	18fc      	adds	r4, r7, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f000 faea 	bl	8005458 <RTC_ExitInitMode>
 8004e84:	0003      	movs	r3, r0
 8004e86:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	22ff      	movs	r2, #255	; 0xff
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004e90:	2313      	movs	r3, #19
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d103      	bne.n	8004ea2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2229      	movs	r2, #41	; 0x29
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2228      	movs	r2, #40	; 0x28
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5499      	strb	r1, [r3, r2]

  return status;
 8004eaa:	2313      	movs	r3, #19
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	781b      	ldrb	r3, [r3, #0]
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b006      	add	sp, #24
 8004eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb8:	007f7f7f 	.word	0x007f7f7f
 8004ebc:	fffbffff 	.word	0xfffbffff

08004ec0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	045b      	lsls	r3, r3, #17
 8004ede:	0c5a      	lsrs	r2, r3, #17
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a22      	ldr	r2, [pc, #136]	; (8004f74 <HAL_RTC_GetTime+0xb4>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	223f      	movs	r2, #63	; 0x3f
 8004ef8:	4013      	ands	r3, r2
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	227f      	movs	r2, #127	; 0x7f
 8004f08:	4013      	ands	r3, r2
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	227f      	movs	r2, #127	; 0x7f
 8004f16:	4013      	ands	r3, r2
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	0d9b      	lsrs	r3, r3, #22
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2201      	movs	r2, #1
 8004f26:	4013      	ands	r3, r2
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11a      	bne.n	8004f6a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f000 faf9 	bl	8005530 <RTC_Bcd2ToByte>
 8004f3e:	0003      	movs	r3, r0
 8004f40:	001a      	movs	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f000 faf0 	bl	8005530 <RTC_Bcd2ToByte>
 8004f50:	0003      	movs	r3, r0
 8004f52:	001a      	movs	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	789b      	ldrb	r3, [r3, #2]
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f000 fae7 	bl	8005530 <RTC_Bcd2ToByte>
 8004f62:	0003      	movs	r3, r0
 8004f64:	001a      	movs	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b006      	add	sp, #24
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	007f7f7f 	.word	0x007f7f7f

08004f78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f78:	b5b0      	push	{r4, r5, r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2228      	movs	r2, #40	; 0x28
 8004f88:	5c9b      	ldrb	r3, [r3, r2]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_RTC_SetDate+0x1a>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e07e      	b.n	8005090 <HAL_RTC_SetDate+0x118>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2228      	movs	r2, #40	; 0x28
 8004f96:	2101      	movs	r1, #1
 8004f98:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2229      	movs	r2, #41	; 0x29
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10e      	bne.n	8004fc6 <HAL_RTC_SetDate+0x4e>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	001a      	movs	r2, r3
 8004fae:	2310      	movs	r3, #16
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	785b      	ldrb	r3, [r3, #1]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	4393      	bics	r3, r2
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	330a      	adds	r3, #10
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d11c      	bne.n	8005006 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	78db      	ldrb	r3, [r3, #3]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 fa85 	bl	80054e0 <RTC_ByteToBcd2>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f000 fa7e 	bl	80054e0 <RTC_ByteToBcd2>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fe8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	789b      	ldrb	r3, [r3, #2]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f000 fa76 	bl	80054e0 <RTC_ByteToBcd2>
 8004ff4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ff6:	0022      	movs	r2, r4
 8004ff8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	e00e      	b.n	8005024 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	78db      	ldrb	r3, [r3, #3]
 800500a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005012:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005018:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	22ca      	movs	r2, #202	; 0xca
 800502a:	625a      	str	r2, [r3, #36]	; 0x24
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2253      	movs	r2, #83	; 0x53
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005034:	2513      	movs	r5, #19
 8005036:	197c      	adds	r4, r7, r5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	0018      	movs	r0, r3
 800503c:	f000 f9c9 	bl	80053d2 <RTC_EnterInitMode>
 8005040:	0003      	movs	r3, r0
 8005042:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005044:	0028      	movs	r0, r5
 8005046:	183b      	adds	r3, r7, r0
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10c      	bne.n	8005068 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4910      	ldr	r1, [pc, #64]	; (8005098 <HAL_RTC_SetDate+0x120>)
 8005056:	400a      	ands	r2, r1
 8005058:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800505a:	183c      	adds	r4, r7, r0
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	0018      	movs	r0, r3
 8005060:	f000 f9fa 	bl	8005458 <RTC_ExitInitMode>
 8005064:	0003      	movs	r3, r0
 8005066:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	22ff      	movs	r2, #255	; 0xff
 800506e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005070:	2313      	movs	r3, #19
 8005072:	18fb      	adds	r3, r7, r3
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2229      	movs	r2, #41	; 0x29
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2228      	movs	r2, #40	; 0x28
 8005086:	2100      	movs	r1, #0
 8005088:	5499      	strb	r1, [r3, r2]

  return status;
 800508a:	2313      	movs	r3, #19
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	781b      	ldrb	r3, [r3, #0]
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b006      	add	sp, #24
 8005096:	bdb0      	pop	{r4, r5, r7, pc}
 8005098:	00ffff3f 	.word	0x00ffff3f

0800509c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4a21      	ldr	r2, [pc, #132]	; (8005134 <HAL_RTC_GetDate+0x98>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	221f      	movs	r2, #31
 80050c6:	4013      	ands	r3, r2
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	223f      	movs	r2, #63	; 0x3f
 80050d4:	4013      	ands	r3, r2
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	0b5b      	lsrs	r3, r3, #13
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2207      	movs	r2, #7
 80050e4:	4013      	ands	r3, r2
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d11a      	bne.n	8005128 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	78db      	ldrb	r3, [r3, #3]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 fa1a 	bl	8005530 <RTC_Bcd2ToByte>
 80050fc:	0003      	movs	r3, r0
 80050fe:	001a      	movs	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	785b      	ldrb	r3, [r3, #1]
 8005108:	0018      	movs	r0, r3
 800510a:	f000 fa11 	bl	8005530 <RTC_Bcd2ToByte>
 800510e:	0003      	movs	r3, r0
 8005110:	001a      	movs	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	789b      	ldrb	r3, [r3, #2]
 800511a:	0018      	movs	r0, r3
 800511c:	f000 fa08 	bl	8005530 <RTC_Bcd2ToByte>
 8005120:	0003      	movs	r3, r0
 8005122:	001a      	movs	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b006      	add	sp, #24
 8005130:	bd80      	pop	{r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	00ffff3f 	.word	0x00ffff3f

08005138 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b089      	sub	sp, #36	; 0x24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2228      	movs	r2, #40	; 0x28
 8005148:	5c9b      	ldrb	r3, [r3, r2]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_RTC_SetAlarm+0x1a>
 800514e:	2302      	movs	r3, #2
 8005150:	e10c      	b.n	800536c <HAL_RTC_SetAlarm+0x234>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2228      	movs	r2, #40	; 0x28
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2229      	movs	r2, #41	; 0x29
 800515e:	2102      	movs	r1, #2
 8005160:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d136      	bne.n	80051d6 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2240      	movs	r2, #64	; 0x40
 8005170:	4013      	ands	r3, r2
 8005172:	d102      	bne.n	800517a <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2200      	movs	r2, #0
 8005178:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	0018      	movs	r0, r3
 8005180:	f000 f9ae 	bl	80054e0 <RTC_ByteToBcd2>
 8005184:	0003      	movs	r3, r0
 8005186:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 f9a7 	bl	80054e0 <RTC_ByteToBcd2>
 8005192:	0003      	movs	r3, r0
 8005194:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005196:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	789b      	ldrb	r3, [r3, #2]
 800519c:	0018      	movs	r0, r3
 800519e:	f000 f99f 	bl	80054e0 <RTC_ByteToBcd2>
 80051a2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80051a4:	0022      	movs	r2, r4
 80051a6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	78db      	ldrb	r3, [r3, #3]
 80051ac:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80051ae:	431a      	orrs	r2, r3
 80051b0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2220      	movs	r2, #32
 80051b6:	5c9b      	ldrb	r3, [r3, r2]
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 f991 	bl	80054e0 <RTC_ByteToBcd2>
 80051be:	0003      	movs	r3, r0
 80051c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80051c2:	0022      	movs	r2, r4
 80051c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80051ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	e022      	b.n	800521c <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2240      	movs	r2, #64	; 0x40
 80051de:	4013      	ands	r3, r2
 80051e0:	d102      	bne.n	80051e8 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2200      	movs	r2, #0
 80051e6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051f4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80051fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005202:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2120      	movs	r1, #32
 8005208:	5c5b      	ldrb	r3, [r3, r1]
 800520a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800520c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005212:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005218:	4313      	orrs	r3, r2
 800521a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	22ca      	movs	r2, #202	; 0xca
 800522e:	625a      	str	r2, [r3, #36]	; 0x24
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2253      	movs	r2, #83	; 0x53
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	429a      	cmp	r2, r3
 8005242:	d143      	bne.n	80052cc <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4949      	ldr	r1, [pc, #292]	; (8005374 <HAL_RTC_SetAlarm+0x23c>)
 8005250:	400a      	ands	r2, r1
 8005252:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4946      	ldr	r1, [pc, #280]	; (8005378 <HAL_RTC_SetAlarm+0x240>)
 8005260:	400a      	ands	r2, r1
 8005262:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005264:	f7fe fa8a 	bl	800377c <HAL_GetTick>
 8005268:	0003      	movs	r3, r0
 800526a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800526c:	e016      	b.n	800529c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800526e:	f7fe fa85 	bl	800377c <HAL_GetTick>
 8005272:	0002      	movs	r2, r0
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	23fa      	movs	r3, #250	; 0xfa
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	429a      	cmp	r2, r3
 800527e:	d90d      	bls.n	800529c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	22ff      	movs	r2, #255	; 0xff
 8005286:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2229      	movs	r2, #41	; 0x29
 800528c:	2103      	movs	r1, #3
 800528e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2228      	movs	r2, #40	; 0x28
 8005294:	2100      	movs	r1, #0
 8005296:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e067      	b.n	800536c <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4013      	ands	r3, r2
 80052a6:	d0e2      	beq.n	800526e <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2180      	movs	r1, #128	; 0x80
 80052c4:	0049      	lsls	r1, r1, #1
 80052c6:	430a      	orrs	r2, r1
 80052c8:	619a      	str	r2, [r3, #24]
 80052ca:	e042      	b.n	8005352 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4929      	ldr	r1, [pc, #164]	; (800537c <HAL_RTC_SetAlarm+0x244>)
 80052d8:	400a      	ands	r2, r1
 80052da:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4926      	ldr	r1, [pc, #152]	; (8005380 <HAL_RTC_SetAlarm+0x248>)
 80052e8:	400a      	ands	r2, r1
 80052ea:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80052ec:	f7fe fa46 	bl	800377c <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80052f4:	e016      	b.n	8005324 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052f6:	f7fe fa41 	bl	800377c <HAL_GetTick>
 80052fa:	0002      	movs	r2, r0
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	23fa      	movs	r3, #250	; 0xfa
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	429a      	cmp	r2, r3
 8005306:	d90d      	bls.n	8005324 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	22ff      	movs	r2, #255	; 0xff
 800530e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2229      	movs	r2, #41	; 0x29
 8005314:	2103      	movs	r1, #3
 8005316:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2228      	movs	r2, #40	; 0x28
 800531c:	2100      	movs	r1, #0
 800531e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e023      	b.n	800536c <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2202      	movs	r2, #2
 800532c:	4013      	ands	r3, r2
 800532e:	d0e2      	beq.n	80052f6 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2180      	movs	r1, #128	; 0x80
 800534c:	0089      	lsls	r1, r1, #2
 800534e:	430a      	orrs	r2, r1
 8005350:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	22ff      	movs	r2, #255	; 0xff
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2229      	movs	r2, #41	; 0x29
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2228      	movs	r2, #40	; 0x28
 8005366:	2100      	movs	r1, #0
 8005368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b009      	add	sp, #36	; 0x24
 8005372:	bd90      	pop	{r4, r7, pc}
 8005374:	fffffeff 	.word	0xfffffeff
 8005378:	ffffefff 	.word	0xffffefff
 800537c:	fffffdff 	.word	0xfffffdff
 8005380:	ffffdfff 	.word	0xffffdfff

08005384 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	21a0      	movs	r1, #160	; 0xa0
 8005398:	438a      	bics	r2, r1
 800539a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800539c:	f7fe f9ee 	bl	800377c <HAL_GetTick>
 80053a0:	0003      	movs	r3, r0
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80053a4:	e00a      	b.n	80053bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053a6:	f7fe f9e9 	bl	800377c <HAL_GetTick>
 80053aa:	0002      	movs	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	23fa      	movs	r3, #250	; 0xfa
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d901      	bls.n	80053bc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e006      	b.n	80053ca <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	4013      	ands	r3, r2
 80053c6:	d0ee      	beq.n	80053a6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b004      	add	sp, #16
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80053da:	230f      	movs	r3, #15
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2240      	movs	r2, #64	; 0x40
 80053ea:	4013      	ands	r3, r2
 80053ec:	d12c      	bne.n	8005448 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2180      	movs	r1, #128	; 0x80
 80053fa:	430a      	orrs	r2, r1
 80053fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80053fe:	f7fe f9bd 	bl	800377c <HAL_GetTick>
 8005402:	0003      	movs	r3, r0
 8005404:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005406:	e014      	b.n	8005432 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005408:	f7fe f9b8 	bl	800377c <HAL_GetTick>
 800540c:	0002      	movs	r2, r0
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	1ad2      	subs	r2, r2, r3
 8005412:	200f      	movs	r0, #15
 8005414:	183b      	adds	r3, r7, r0
 8005416:	1839      	adds	r1, r7, r0
 8005418:	7809      	ldrb	r1, [r1, #0]
 800541a:	7019      	strb	r1, [r3, #0]
 800541c:	23fa      	movs	r3, #250	; 0xfa
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	429a      	cmp	r2, r3
 8005422:	d906      	bls.n	8005432 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005424:	183b      	adds	r3, r7, r0
 8005426:	2203      	movs	r2, #3
 8005428:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2229      	movs	r2, #41	; 0x29
 800542e:	2103      	movs	r1, #3
 8005430:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2240      	movs	r2, #64	; 0x40
 800543a:	4013      	ands	r3, r2
 800543c:	d104      	bne.n	8005448 <RTC_EnterInitMode+0x76>
 800543e:	230f      	movs	r3, #15
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d1df      	bne.n	8005408 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005448:	230f      	movs	r3, #15
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	781b      	ldrb	r3, [r3, #0]
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b004      	add	sp, #16
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005460:	240f      	movs	r4, #15
 8005462:	193b      	adds	r3, r7, r4
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005468:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <RTC_ExitInitMode+0x84>)
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <RTC_ExitInitMode+0x84>)
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	438a      	bics	r2, r1
 8005472:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <RTC_ExitInitMode+0x84>)
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2220      	movs	r2, #32
 800547a:	4013      	ands	r3, r2
 800547c:	d10d      	bne.n	800549a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	0018      	movs	r0, r3
 8005482:	f7ff ff7f 	bl	8005384 <HAL_RTC_WaitForSynchro>
 8005486:	1e03      	subs	r3, r0, #0
 8005488:	d021      	beq.n	80054ce <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2229      	movs	r2, #41	; 0x29
 800548e:	2103      	movs	r1, #3
 8005490:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005492:	193b      	adds	r3, r7, r4
 8005494:	2203      	movs	r2, #3
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e019      	b.n	80054ce <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <RTC_ExitInitMode+0x84>)
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <RTC_ExitInitMode+0x84>)
 80054a0:	2120      	movs	r1, #32
 80054a2:	438a      	bics	r2, r1
 80054a4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	0018      	movs	r0, r3
 80054aa:	f7ff ff6b 	bl	8005384 <HAL_RTC_WaitForSynchro>
 80054ae:	1e03      	subs	r3, r0, #0
 80054b0:	d007      	beq.n	80054c2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2229      	movs	r2, #41	; 0x29
 80054b6:	2103      	movs	r1, #3
 80054b8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80054ba:	230f      	movs	r3, #15
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	2203      	movs	r2, #3
 80054c0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <RTC_ExitInitMode+0x84>)
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <RTC_ExitInitMode+0x84>)
 80054c8:	2120      	movs	r1, #32
 80054ca:	430a      	orrs	r2, r1
 80054cc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80054ce:	230f      	movs	r3, #15
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	781b      	ldrb	r3, [r3, #0]
}
 80054d4:	0018      	movs	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b005      	add	sp, #20
 80054da:	bd90      	pop	{r4, r7, pc}
 80054dc:	40002800 	.word	0x40002800

080054e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	0002      	movs	r2, r0
 80054e8:	1dfb      	adds	r3, r7, #7
 80054ea:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80054f0:	230b      	movs	r3, #11
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	1dfa      	adds	r2, r7, #7
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80054fa:	e008      	b.n	800550e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005502:	220b      	movs	r2, #11
 8005504:	18bb      	adds	r3, r7, r2
 8005506:	18ba      	adds	r2, r7, r2
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	3a0a      	subs	r2, #10
 800550c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800550e:	210b      	movs	r1, #11
 8005510:	187b      	adds	r3, r7, r1
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b09      	cmp	r3, #9
 8005516:	d8f1      	bhi.n	80054fc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	b2da      	uxtb	r2, r3
 8005520:	187b      	adds	r3, r7, r1
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4313      	orrs	r3, r2
 8005526:	b2db      	uxtb	r3, r3
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b004      	add	sp, #16
 800552e:	bd80      	pop	{r7, pc}

08005530 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	0002      	movs	r2, r0
 8005538:	1dfb      	adds	r3, r7, #7
 800553a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800553c:	1dfb      	adds	r3, r7, #7
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	091b      	lsrs	r3, r3, #4
 8005542:	b2db      	uxtb	r3, r3
 8005544:	001a      	movs	r2, r3
 8005546:	0013      	movs	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	189b      	adds	r3, r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	b2da      	uxtb	r2, r3
 8005554:	1dfb      	adds	r3, r7, #7
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	210f      	movs	r1, #15
 800555a:	400b      	ands	r3, r1
 800555c:	b2db      	uxtb	r3, r3
 800555e:	18d3      	adds	r3, r2, r3
 8005560:	b2db      	uxtb	r3, r3
}
 8005562:	0018      	movs	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	b004      	add	sp, #16
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2228      	movs	r2, #40	; 0x28
 8005576:	5c9b      	ldrb	r3, [r3, r2]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_RTCEx_EnableBypassShadow+0x16>
 800557c:	2302      	movs	r3, #2
 800557e:	e024      	b.n	80055ca <HAL_RTCEx_EnableBypassShadow+0x60>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2228      	movs	r2, #40	; 0x28
 8005584:	2101      	movs	r1, #1
 8005586:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2229      	movs	r2, #41	; 0x29
 800558c:	2102      	movs	r1, #2
 800558e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	22ca      	movs	r2, #202	; 0xca
 8005596:	625a      	str	r2, [r3, #36]	; 0x24
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2253      	movs	r2, #83	; 0x53
 800559e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2120      	movs	r1, #32
 80055ac:	430a      	orrs	r2, r1
 80055ae:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	22ff      	movs	r2, #255	; 0xff
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2229      	movs	r2, #41	; 0x29
 80055bc:	2101      	movs	r1, #1
 80055be:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2228      	movs	r2, #40	; 0x28
 80055c4:	2100      	movs	r1, #0
 80055c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b002      	add	sp, #8
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2228      	movs	r2, #40	; 0x28
 80055de:	5c9b      	ldrb	r3, [r3, r2]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_RTCEx_DisableBypassShadow+0x16>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e024      	b.n	8005632 <HAL_RTCEx_DisableBypassShadow+0x60>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2228      	movs	r2, #40	; 0x28
 80055ec:	2101      	movs	r1, #1
 80055ee:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2229      	movs	r2, #41	; 0x29
 80055f4:	2102      	movs	r1, #2
 80055f6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	22ca      	movs	r2, #202	; 0xca
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2253      	movs	r2, #83	; 0x53
 8005606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	21df      	movs	r1, #223	; 0xdf
 8005614:	400a      	ands	r2, r1
 8005616:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	22ff      	movs	r2, #255	; 0xff
 800561e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2229      	movs	r2, #41	; 0x29
 8005624:	2101      	movs	r1, #1
 8005626:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2228      	movs	r2, #40	; 0x28
 800562c:	2100      	movs	r1, #0
 800562e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	0018      	movs	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	b002      	add	sp, #8
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e0a8      	b.n	80057a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	2382      	movs	r3, #130	; 0x82
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	429a      	cmp	r2, r3
 8005660:	d009      	beq.n	8005676 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	61da      	str	r2, [r3, #28]
 8005668:	e005      	b.n	8005676 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	225d      	movs	r2, #93	; 0x5d
 8005680:	5c9b      	ldrb	r3, [r3, r2]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d107      	bne.n	8005698 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	225c      	movs	r2, #92	; 0x5c
 800568c:	2100      	movs	r1, #0
 800568e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0018      	movs	r0, r3
 8005694:	f7fd fd3e 	bl	8003114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	225d      	movs	r2, #93	; 0x5d
 800569c:	2102      	movs	r1, #2
 800569e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2140      	movs	r1, #64	; 0x40
 80056ac:	438a      	bics	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	23e0      	movs	r3, #224	; 0xe0
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d902      	bls.n	80056c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e002      	b.n	80056c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	015b      	lsls	r3, r3, #5
 80056c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	23f0      	movs	r3, #240	; 0xf0
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d008      	beq.n	80056e6 <HAL_SPI_Init+0xaa>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	23e0      	movs	r3, #224	; 0xe0
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	429a      	cmp	r2, r3
 80056de:	d002      	beq.n	80056e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	2382      	movs	r3, #130	; 0x82
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	401a      	ands	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6899      	ldr	r1, [r3, #8]
 80056f4:	2384      	movs	r3, #132	; 0x84
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	400b      	ands	r3, r1
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2102      	movs	r1, #2
 8005702:	400b      	ands	r3, r1
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	2101      	movs	r1, #1
 800570c:	400b      	ands	r3, r1
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6999      	ldr	r1, [r3, #24]
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	400b      	ands	r3, r1
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	2138      	movs	r1, #56	; 0x38
 8005722:	400b      	ands	r3, r1
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	2180      	movs	r1, #128	; 0x80
 800572c:	400b      	ands	r3, r1
 800572e:	431a      	orrs	r2, r3
 8005730:	0011      	movs	r1, r2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	401a      	ands	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	2204      	movs	r2, #4
 800574c:	401a      	ands	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2110      	movs	r1, #16
 8005754:	400b      	ands	r3, r1
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	2108      	movs	r1, #8
 800575e:	400b      	ands	r3, r1
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68d9      	ldr	r1, [r3, #12]
 8005766:	23f0      	movs	r3, #240	; 0xf0
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	400b      	ands	r3, r1
 800576c:	431a      	orrs	r2, r3
 800576e:	0011      	movs	r1, r2
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	015b      	lsls	r3, r3, #5
 8005776:	401a      	ands	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4907      	ldr	r1, [pc, #28]	; (80057a8 <HAL_SPI_Init+0x16c>)
 800578c:	400a      	ands	r2, r1
 800578e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	225d      	movs	r2, #93	; 0x5d
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b004      	add	sp, #16
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	fffff7ff 	.word	0xfffff7ff

080057ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	1dbb      	adds	r3, r7, #6
 80057ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057bc:	231f      	movs	r3, #31
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	225c      	movs	r2, #92	; 0x5c
 80057c8:	5c9b      	ldrb	r3, [r3, r2]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_SPI_Transmit+0x26>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e140      	b.n	8005a54 <HAL_SPI_Transmit+0x2a8>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	225c      	movs	r2, #92	; 0x5c
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057da:	f7fd ffcf 	bl	800377c <HAL_GetTick>
 80057de:	0003      	movs	r3, r0
 80057e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80057e2:	2316      	movs	r3, #22
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	1dba      	adds	r2, r7, #6
 80057e8:	8812      	ldrh	r2, [r2, #0]
 80057ea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	225d      	movs	r2, #93	; 0x5d
 80057f0:	5c9b      	ldrb	r3, [r3, r2]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d004      	beq.n	8005802 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80057f8:	231f      	movs	r3, #31
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	2202      	movs	r2, #2
 80057fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8005800:	e11d      	b.n	8005a3e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_SPI_Transmit+0x64>
 8005808:	1dbb      	adds	r3, r7, #6
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005810:	231f      	movs	r3, #31
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
    goto error;
 8005818:	e111      	b.n	8005a3e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	225d      	movs	r2, #93	; 0x5d
 800581e:	2103      	movs	r1, #3
 8005820:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1dba      	adds	r2, r7, #6
 8005832:	8812      	ldrh	r2, [r2, #0]
 8005834:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1dba      	adds	r2, r7, #6
 800583a:	8812      	ldrh	r2, [r2, #0]
 800583c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2244      	movs	r2, #68	; 0x44
 8005848:	2100      	movs	r1, #0
 800584a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2246      	movs	r2, #70	; 0x46
 8005850:	2100      	movs	r1, #0
 8005852:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	429a      	cmp	r2, r3
 800586a:	d110      	bne.n	800588e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2140      	movs	r1, #64	; 0x40
 8005878:	438a      	bics	r2, r1
 800587a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2180      	movs	r1, #128	; 0x80
 8005888:	01c9      	lsls	r1, r1, #7
 800588a:	430a      	orrs	r2, r1
 800588c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2240      	movs	r2, #64	; 0x40
 8005896:	4013      	ands	r3, r2
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d007      	beq.n	80058ac <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2140      	movs	r1, #64	; 0x40
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	23e0      	movs	r3, #224	; 0xe0
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d94e      	bls.n	8005956 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <HAL_SPI_Transmit+0x11e>
 80058c0:	2316      	movs	r3, #22
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d13f      	bne.n	800594a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	881a      	ldrh	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	1c9a      	adds	r2, r3, #2
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058ee:	e02c      	b.n	800594a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2202      	movs	r2, #2
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d112      	bne.n	8005924 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	881a      	ldrh	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	1c9a      	adds	r2, r3, #2
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005922:	e012      	b.n	800594a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005924:	f7fd ff2a 	bl	800377c <HAL_GetTick>
 8005928:	0002      	movs	r2, r0
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d802      	bhi.n	800593a <HAL_SPI_Transmit+0x18e>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	3301      	adds	r3, #1
 8005938:	d102      	bne.n	8005940 <HAL_SPI_Transmit+0x194>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005940:	231f      	movs	r3, #31
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	2203      	movs	r2, #3
 8005946:	701a      	strb	r2, [r3, #0]
          goto error;
 8005948:	e079      	b.n	8005a3e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1cd      	bne.n	80058f0 <HAL_SPI_Transmit+0x144>
 8005954:	e04f      	b.n	80059f6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <HAL_SPI_Transmit+0x1bc>
 800595e:	2316      	movs	r3, #22
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d141      	bne.n	80059ec <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800598e:	e02d      	b.n	80059ec <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2202      	movs	r2, #2
 8005998:	4013      	ands	r3, r2
 800599a:	2b02      	cmp	r3, #2
 800599c:	d113      	bne.n	80059c6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c4:	e012      	b.n	80059ec <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c6:	f7fd fed9 	bl	800377c <HAL_GetTick>
 80059ca:	0002      	movs	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d802      	bhi.n	80059dc <HAL_SPI_Transmit+0x230>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	d102      	bne.n	80059e2 <HAL_SPI_Transmit+0x236>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80059e2:	231f      	movs	r3, #31
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	2203      	movs	r2, #3
 80059e8:	701a      	strb	r2, [r3, #0]
          goto error;
 80059ea:	e028      	b.n	8005a3e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1cc      	bne.n	8005990 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f000 fcd9 	bl	80063b4 <SPI_EndRxTxTransaction>
 8005a02:	1e03      	subs	r3, r0, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005a32:	231f      	movs	r3, #31
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e000      	b.n	8005a3e <HAL_SPI_Transmit+0x292>
  }

error:
 8005a3c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	225d      	movs	r2, #93	; 0x5d
 8005a42:	2101      	movs	r1, #1
 8005a44:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	225c      	movs	r2, #92	; 0x5c
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005a4e:	231f      	movs	r3, #31
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	781b      	ldrb	r3, [r3, #0]
}
 8005a54:	0018      	movs	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b008      	add	sp, #32
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b089      	sub	sp, #36	; 0x24
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	1dbb      	adds	r3, r7, #6
 8005a6a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a6c:	2317      	movs	r3, #23
 8005a6e:	18fb      	adds	r3, r7, r3
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	2382      	movs	r3, #130	; 0x82
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d113      	bne.n	8005aa8 <HAL_SPI_Receive+0x4c>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10f      	bne.n	8005aa8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	225d      	movs	r2, #93	; 0x5d
 8005a8c:	2104      	movs	r1, #4
 8005a8e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a90:	1dbb      	adds	r3, r7, #6
 8005a92:	881c      	ldrh	r4, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	0023      	movs	r3, r4
 8005aa0:	f000 f928 	bl	8005cf4 <HAL_SPI_TransmitReceive>
 8005aa4:	0003      	movs	r3, r0
 8005aa6:	e11c      	b.n	8005ce2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	225c      	movs	r2, #92	; 0x5c
 8005aac:	5c9b      	ldrb	r3, [r3, r2]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_SPI_Receive+0x5a>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e115      	b.n	8005ce2 <HAL_SPI_Receive+0x286>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	225c      	movs	r2, #92	; 0x5c
 8005aba:	2101      	movs	r1, #1
 8005abc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005abe:	f7fd fe5d 	bl	800377c <HAL_GetTick>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	225d      	movs	r2, #93	; 0x5d
 8005aca:	5c9b      	ldrb	r3, [r3, r2]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d004      	beq.n	8005adc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005ad2:	2317      	movs	r3, #23
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ada:	e0f7      	b.n	8005ccc <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_SPI_Receive+0x8e>
 8005ae2:	1dbb      	adds	r3, r7, #6
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005aea:	2317      	movs	r3, #23
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	2201      	movs	r2, #1
 8005af0:	701a      	strb	r2, [r3, #0]
    goto error;
 8005af2:	e0eb      	b.n	8005ccc <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	225d      	movs	r2, #93	; 0x5d
 8005af8:	2104      	movs	r1, #4
 8005afa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1dba      	adds	r2, r7, #6
 8005b0c:	2144      	movs	r1, #68	; 0x44
 8005b0e:	8812      	ldrh	r2, [r2, #0]
 8005b10:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1dba      	adds	r2, r7, #6
 8005b16:	2146      	movs	r1, #70	; 0x46
 8005b18:	8812      	ldrh	r2, [r2, #0]
 8005b1a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	23e0      	movs	r3, #224	; 0xe0
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d908      	bls.n	8005b58 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4966      	ldr	r1, [pc, #408]	; (8005cec <HAL_SPI_Receive+0x290>)
 8005b52:	400a      	ands	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	e008      	b.n	8005b6a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	0149      	lsls	r1, r1, #5
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d10f      	bne.n	8005b96 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2140      	movs	r1, #64	; 0x40
 8005b82:	438a      	bics	r2, r1
 8005b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4957      	ldr	r1, [pc, #348]	; (8005cf0 <HAL_SPI_Receive+0x294>)
 8005b92:	400a      	ands	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2240      	movs	r2, #64	; 0x40
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	d007      	beq.n	8005bb4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2140      	movs	r1, #64	; 0x40
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	23e0      	movs	r3, #224	; 0xe0
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d900      	bls.n	8005bc2 <HAL_SPI_Receive+0x166>
 8005bc0:	e069      	b.n	8005c96 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bc2:	e031      	b.n	8005c28 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4013      	ands	r3, r2
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d117      	bne.n	8005c02 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	001a      	movs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	7812      	ldrb	r2, [r2, #0]
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2246      	movs	r2, #70	; 0x46
 8005bf2:	5a9b      	ldrh	r3, [r3, r2]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b299      	uxth	r1, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2246      	movs	r2, #70	; 0x46
 8005bfe:	5299      	strh	r1, [r3, r2]
 8005c00:	e012      	b.n	8005c28 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c02:	f7fd fdbb 	bl	800377c <HAL_GetTick>
 8005c06:	0002      	movs	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d802      	bhi.n	8005c18 <HAL_SPI_Receive+0x1bc>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	d102      	bne.n	8005c1e <HAL_SPI_Receive+0x1c2>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005c1e:	2317      	movs	r3, #23
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	2203      	movs	r2, #3
 8005c24:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c26:	e051      	b.n	8005ccc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2246      	movs	r2, #70	; 0x46
 8005c2c:	5a9b      	ldrh	r3, [r3, r2]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1c7      	bne.n	8005bc4 <HAL_SPI_Receive+0x168>
 8005c34:	e035      	b.n	8005ca2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d115      	bne.n	8005c70 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	1c9a      	adds	r2, r3, #2
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2246      	movs	r2, #70	; 0x46
 8005c60:	5a9b      	ldrh	r3, [r3, r2]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b299      	uxth	r1, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2246      	movs	r2, #70	; 0x46
 8005c6c:	5299      	strh	r1, [r3, r2]
 8005c6e:	e012      	b.n	8005c96 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c70:	f7fd fd84 	bl	800377c <HAL_GetTick>
 8005c74:	0002      	movs	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d802      	bhi.n	8005c86 <HAL_SPI_Receive+0x22a>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	d102      	bne.n	8005c8c <HAL_SPI_Receive+0x230>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005c8c:	2317      	movs	r3, #23
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	2203      	movs	r2, #3
 8005c92:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c94:	e01a      	b.n	8005ccc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2246      	movs	r2, #70	; 0x46
 8005c9a:	5a9b      	ldrh	r3, [r3, r2]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1c9      	bne.n	8005c36 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 fb25 	bl	80062f8 <SPI_EndRxTransaction>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005cc0:	2317      	movs	r3, #23
 8005cc2:	18fb      	adds	r3, r7, r3
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	701a      	strb	r2, [r3, #0]
 8005cc8:	e000      	b.n	8005ccc <HAL_SPI_Receive+0x270>
  }

error :
 8005cca:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	225d      	movs	r2, #93	; 0x5d
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	225c      	movs	r2, #92	; 0x5c
 8005cd8:	2100      	movs	r1, #0
 8005cda:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005cdc:	2317      	movs	r3, #23
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	781b      	ldrb	r3, [r3, #0]
}
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b007      	add	sp, #28
 8005ce8:	bd90      	pop	{r4, r7, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	ffffefff 	.word	0xffffefff
 8005cf0:	ffffbfff 	.word	0xffffbfff

08005cf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	001a      	movs	r2, r3
 8005d02:	1cbb      	adds	r3, r7, #2
 8005d04:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d06:	2301      	movs	r3, #1
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d0a:	2323      	movs	r3, #35	; 0x23
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	225c      	movs	r2, #92	; 0x5c
 8005d16:	5c9b      	ldrb	r3, [r3, r2]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_SPI_TransmitReceive+0x2c>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e1b5      	b.n	800608c <HAL_SPI_TransmitReceive+0x398>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	225c      	movs	r2, #92	; 0x5c
 8005d24:	2101      	movs	r1, #1
 8005d26:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d28:	f7fd fd28 	bl	800377c <HAL_GetTick>
 8005d2c:	0003      	movs	r3, r0
 8005d2e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d30:	201b      	movs	r0, #27
 8005d32:	183b      	adds	r3, r7, r0
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	215d      	movs	r1, #93	; 0x5d
 8005d38:	5c52      	ldrb	r2, [r2, r1]
 8005d3a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005d42:	2312      	movs	r3, #18
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	1cba      	adds	r2, r7, #2
 8005d48:	8812      	ldrh	r2, [r2, #0]
 8005d4a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d4c:	183b      	adds	r3, r7, r0
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d011      	beq.n	8005d78 <HAL_SPI_TransmitReceive+0x84>
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	2382      	movs	r3, #130	; 0x82
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d107      	bne.n	8005d6e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d103      	bne.n	8005d6e <HAL_SPI_TransmitReceive+0x7a>
 8005d66:	183b      	adds	r3, r7, r0
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d004      	beq.n	8005d78 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005d6e:	2323      	movs	r3, #35	; 0x23
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	2202      	movs	r2, #2
 8005d74:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d76:	e17e      	b.n	8006076 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d006      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x98>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x98>
 8005d84:	1cbb      	adds	r3, r7, #2
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005d8c:	2323      	movs	r3, #35	; 0x23
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d94:	e16f      	b.n	8006076 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	225d      	movs	r2, #93	; 0x5d
 8005d9a:	5c9b      	ldrb	r3, [r3, r2]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d003      	beq.n	8005daa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	225d      	movs	r2, #93	; 0x5d
 8005da6:	2105      	movs	r1, #5
 8005da8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1cba      	adds	r2, r7, #2
 8005dba:	2146      	movs	r1, #70	; 0x46
 8005dbc:	8812      	ldrh	r2, [r2, #0]
 8005dbe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	1cba      	adds	r2, r7, #2
 8005dc4:	2144      	movs	r1, #68	; 0x44
 8005dc6:	8812      	ldrh	r2, [r2, #0]
 8005dc8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1cba      	adds	r2, r7, #2
 8005dd4:	8812      	ldrh	r2, [r2, #0]
 8005dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1cba      	adds	r2, r7, #2
 8005ddc:	8812      	ldrh	r2, [r2, #0]
 8005dde:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	23e0      	movs	r3, #224	; 0xe0
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d908      	bls.n	8005e0a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	49a4      	ldr	r1, [pc, #656]	; (8006094 <HAL_SPI_TransmitReceive+0x3a0>)
 8005e04:	400a      	ands	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	e008      	b.n	8005e1c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2180      	movs	r1, #128	; 0x80
 8005e16:	0149      	lsls	r1, r1, #5
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2240      	movs	r2, #64	; 0x40
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d007      	beq.n	8005e3a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2140      	movs	r1, #64	; 0x40
 8005e36:	430a      	orrs	r2, r1
 8005e38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	23e0      	movs	r3, #224	; 0xe0
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d800      	bhi.n	8005e48 <HAL_SPI_TransmitReceive+0x154>
 8005e46:	e07f      	b.n	8005f48 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x168>
 8005e50:	2312      	movs	r3, #18
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d000      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x168>
 8005e5a:	e069      	b.n	8005f30 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	881a      	ldrh	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	1c9a      	adds	r2, r3, #2
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e80:	e056      	b.n	8005f30 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x1d4>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0x1d4>
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d113      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	881a      	ldrh	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	1c9a      	adds	r2, r3, #2
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d11c      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x21c>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2246      	movs	r2, #70	; 0x46
 8005eda:	5a9b      	ldrh	r3, [r3, r2]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	b292      	uxth	r2, r2
 8005eee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	1c9a      	adds	r2, r3, #2
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2246      	movs	r2, #70	; 0x46
 8005efe:	5a9b      	ldrh	r3, [r3, r2]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b299      	uxth	r1, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2246      	movs	r2, #70	; 0x46
 8005f0a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f10:	f7fd fc34 	bl	800377c <HAL_GetTick>
 8005f14:	0002      	movs	r2, r0
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d807      	bhi.n	8005f30 <HAL_SPI_TransmitReceive+0x23c>
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	3301      	adds	r3, #1
 8005f24:	d004      	beq.n	8005f30 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005f26:	2323      	movs	r3, #35	; 0x23
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	2203      	movs	r2, #3
 8005f2c:	701a      	strb	r2, [r3, #0]
        goto error;
 8005f2e:	e0a2      	b.n	8006076 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1a3      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x18e>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2246      	movs	r2, #70	; 0x46
 8005f3e:	5a9b      	ldrh	r3, [r3, r2]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d19d      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x18e>
 8005f46:	e085      	b.n	8006054 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_SPI_TransmitReceive+0x268>
 8005f50:	2312      	movs	r3, #18
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d000      	beq.n	8005f5c <HAL_SPI_TransmitReceive+0x268>
 8005f5a:	e070      	b.n	800603e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	7812      	ldrb	r2, [r2, #0]
 8005f68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f82:	e05c      	b.n	800603e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d11c      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x2d8>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d017      	beq.n	8005fcc <HAL_SPI_TransmitReceive+0x2d8>
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d114      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	330c      	adds	r3, #12
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d11e      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x324>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2246      	movs	r2, #70	; 0x46
 8005fde:	5a9b      	ldrh	r3, [r3, r2]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d018      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	001a      	movs	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	7812      	ldrb	r2, [r2, #0]
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2246      	movs	r2, #70	; 0x46
 8006006:	5a9b      	ldrh	r3, [r3, r2]
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	b299      	uxth	r1, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2246      	movs	r2, #70	; 0x46
 8006012:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006014:	2301      	movs	r3, #1
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006018:	f7fd fbb0 	bl	800377c <HAL_GetTick>
 800601c:	0002      	movs	r2, r0
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006024:	429a      	cmp	r2, r3
 8006026:	d802      	bhi.n	800602e <HAL_SPI_TransmitReceive+0x33a>
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	3301      	adds	r3, #1
 800602c:	d102      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x340>
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006034:	2323      	movs	r3, #35	; 0x23
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	2203      	movs	r2, #3
 800603a:	701a      	strb	r2, [r3, #0]
        goto error;
 800603c:	e01b      	b.n	8006076 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d19d      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x290>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2246      	movs	r2, #70	; 0x46
 800604c:	5a9b      	ldrh	r3, [r3, r2]
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d197      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f9aa 	bl	80063b4 <SPI_EndRxTxTransaction>
 8006060:	1e03      	subs	r3, r0, #0
 8006062:	d007      	beq.n	8006074 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006064:	2323      	movs	r3, #35	; 0x23
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	661a      	str	r2, [r3, #96]	; 0x60
 8006072:	e000      	b.n	8006076 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006074:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	225d      	movs	r2, #93	; 0x5d
 800607a:	2101      	movs	r1, #1
 800607c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	225c      	movs	r2, #92	; 0x5c
 8006082:	2100      	movs	r1, #0
 8006084:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006086:	2323      	movs	r3, #35	; 0x23
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	781b      	ldrb	r3, [r3, #0]
}
 800608c:	0018      	movs	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	b00a      	add	sp, #40	; 0x28
 8006092:	bd80      	pop	{r7, pc}
 8006094:	ffffefff 	.word	0xffffefff

08006098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	1dfb      	adds	r3, r7, #7
 80060a6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060a8:	f7fd fb68 	bl	800377c <HAL_GetTick>
 80060ac:	0002      	movs	r2, r0
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	18d3      	adds	r3, r2, r3
 80060b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060b8:	f7fd fb60 	bl	800377c <HAL_GetTick>
 80060bc:	0003      	movs	r3, r0
 80060be:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060c0:	4b3a      	ldr	r3, [pc, #232]	; (80061ac <SPI_WaitFlagStateUntilTimeout+0x114>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	015b      	lsls	r3, r3, #5
 80060c6:	0d1b      	lsrs	r3, r3, #20
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	4353      	muls	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ce:	e058      	b.n	8006182 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	d055      	beq.n	8006182 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060d6:	f7fd fb51 	bl	800377c <HAL_GetTick>
 80060da:	0002      	movs	r2, r0
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d902      	bls.n	80060ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d142      	bne.n	8006172 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	21e0      	movs	r1, #224	; 0xe0
 80060f8:	438a      	bics	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	2382      	movs	r3, #130	; 0x82
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	429a      	cmp	r2, r3
 8006106:	d113      	bne.n	8006130 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	429a      	cmp	r2, r3
 8006112:	d005      	beq.n	8006120 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	429a      	cmp	r2, r3
 800611e:	d107      	bne.n	8006130 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2140      	movs	r1, #64	; 0x40
 800612c:	438a      	bics	r2, r1
 800612e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	019b      	lsls	r3, r3, #6
 8006138:	429a      	cmp	r2, r3
 800613a:	d110      	bne.n	800615e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	491a      	ldr	r1, [pc, #104]	; (80061b0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006148:	400a      	ands	r2, r1
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	0189      	lsls	r1, r1, #6
 800615a:	430a      	orrs	r2, r1
 800615c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	225d      	movs	r2, #93	; 0x5d
 8006162:	2101      	movs	r1, #1
 8006164:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	225c      	movs	r2, #92	; 0x5c
 800616a:	2100      	movs	r1, #0
 800616c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e017      	b.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	3b01      	subs	r3, #1
 8006180:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	425a      	negs	r2, r3
 8006192:	4153      	adcs	r3, r2
 8006194:	b2db      	uxtb	r3, r3
 8006196:	001a      	movs	r2, r3
 8006198:	1dfb      	adds	r3, r7, #7
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d197      	bne.n	80060d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	0018      	movs	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b008      	add	sp, #32
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	20000020 	.word	0x20000020
 80061b0:	ffffdfff 	.word	0xffffdfff

080061b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061c2:	2317      	movs	r3, #23
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2200      	movs	r2, #0
 80061c8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061ca:	f7fd fad7 	bl	800377c <HAL_GetTick>
 80061ce:	0002      	movs	r2, r0
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	18d3      	adds	r3, r2, r3
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80061da:	f7fd facf 	bl	800377c <HAL_GetTick>
 80061de:	0003      	movs	r3, r0
 80061e0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	0013      	movs	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	00da      	lsls	r2, r3, #3
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	0d1b      	lsrs	r3, r3, #20
 80061fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fc:	4353      	muls	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006200:	e068      	b.n	80062d4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	23c0      	movs	r3, #192	; 0xc0
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	429a      	cmp	r2, r3
 800620a:	d10a      	bne.n	8006222 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d107      	bne.n	8006222 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	2117      	movs	r1, #23
 800621a:	187b      	adds	r3, r7, r1
 800621c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800621e:	187b      	adds	r3, r7, r1
 8006220:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	d055      	beq.n	80062d4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006228:	f7fd faa8 	bl	800377c <HAL_GetTick>
 800622c:	0002      	movs	r2, r0
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006234:	429a      	cmp	r2, r3
 8006236:	d902      	bls.n	800623e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	2b00      	cmp	r3, #0
 800623c:	d142      	bne.n	80062c4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	21e0      	movs	r1, #224	; 0xe0
 800624a:	438a      	bics	r2, r1
 800624c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	2382      	movs	r3, #130	; 0x82
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	429a      	cmp	r2, r3
 8006258:	d113      	bne.n	8006282 <SPI_WaitFifoStateUntilTimeout+0xce>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	429a      	cmp	r2, r3
 8006264:	d005      	beq.n	8006272 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	429a      	cmp	r2, r3
 8006270:	d107      	bne.n	8006282 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2140      	movs	r1, #64	; 0x40
 800627e:	438a      	bics	r2, r1
 8006280:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	019b      	lsls	r3, r3, #6
 800628a:	429a      	cmp	r2, r3
 800628c:	d110      	bne.n	80062b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4916      	ldr	r1, [pc, #88]	; (80062f4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800629a:	400a      	ands	r2, r1
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2180      	movs	r1, #128	; 0x80
 80062aa:	0189      	lsls	r1, r1, #6
 80062ac:	430a      	orrs	r2, r1
 80062ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	225d      	movs	r2, #93	; 0x5d
 80062b4:	2101      	movs	r1, #1
 80062b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	225c      	movs	r2, #92	; 0x5c
 80062bc:	2100      	movs	r1, #0
 80062be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e010      	b.n	80062e6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	4013      	ands	r3, r2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d18e      	bne.n	8006202 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	0018      	movs	r0, r3
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b00a      	add	sp, #40	; 0x28
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	20000020 	.word	0x20000020
 80062f4:	ffffdfff 	.word	0xffffdfff

080062f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	2382      	movs	r3, #130	; 0x82
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	429a      	cmp	r2, r3
 800630e:	d113      	bne.n	8006338 <SPI_EndRxTransaction+0x40>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	429a      	cmp	r2, r3
 800631a:	d005      	beq.n	8006328 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	429a      	cmp	r2, r3
 8006326:	d107      	bne.n	8006338 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2140      	movs	r1, #64	; 0x40
 8006334:	438a      	bics	r2, r1
 8006336:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	0013      	movs	r3, r2
 8006342:	2200      	movs	r2, #0
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	f7ff fea7 	bl	8006098 <SPI_WaitFlagStateUntilTimeout>
 800634a:	1e03      	subs	r3, r0, #0
 800634c:	d007      	beq.n	800635e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006352:	2220      	movs	r2, #32
 8006354:	431a      	orrs	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e026      	b.n	80063ac <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	2382      	movs	r3, #130	; 0x82
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	429a      	cmp	r2, r3
 8006368:	d11f      	bne.n	80063aa <SPI_EndRxTransaction+0xb2>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	2380      	movs	r3, #128	; 0x80
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	429a      	cmp	r2, r3
 8006374:	d005      	beq.n	8006382 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	2380      	movs	r3, #128	; 0x80
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	429a      	cmp	r2, r3
 8006380:	d113      	bne.n	80063aa <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	23c0      	movs	r3, #192	; 0xc0
 8006386:	00d9      	lsls	r1, r3, #3
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	0013      	movs	r3, r2
 8006390:	2200      	movs	r2, #0
 8006392:	f7ff ff0f 	bl	80061b4 <SPI_WaitFifoStateUntilTimeout>
 8006396:	1e03      	subs	r3, r0, #0
 8006398:	d007      	beq.n	80063aa <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639e:	2220      	movs	r2, #32
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e000      	b.n	80063ac <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	0018      	movs	r0, r3
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b004      	add	sp, #16
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	23c0      	movs	r3, #192	; 0xc0
 80063c4:	0159      	lsls	r1, r3, #5
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	0013      	movs	r3, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	f7ff fef0 	bl	80061b4 <SPI_WaitFifoStateUntilTimeout>
 80063d4:	1e03      	subs	r3, r0, #0
 80063d6:	d007      	beq.n	80063e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063dc:	2220      	movs	r2, #32
 80063de:	431a      	orrs	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e027      	b.n	8006438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	0013      	movs	r3, r2
 80063f2:	2200      	movs	r2, #0
 80063f4:	2180      	movs	r1, #128	; 0x80
 80063f6:	f7ff fe4f 	bl	8006098 <SPI_WaitFlagStateUntilTimeout>
 80063fa:	1e03      	subs	r3, r0, #0
 80063fc:	d007      	beq.n	800640e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006402:	2220      	movs	r2, #32
 8006404:	431a      	orrs	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e014      	b.n	8006438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	23c0      	movs	r3, #192	; 0xc0
 8006412:	00d9      	lsls	r1, r3, #3
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	0013      	movs	r3, r2
 800641c:	2200      	movs	r2, #0
 800641e:	f7ff fec9 	bl	80061b4 <SPI_WaitFifoStateUntilTimeout>
 8006422:	1e03      	subs	r3, r0, #0
 8006424:	d007      	beq.n	8006436 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	2220      	movs	r2, #32
 800642c:	431a      	orrs	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e000      	b.n	8006438 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	0018      	movs	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	b004      	add	sp, #16
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e04a      	b.n	80064e8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	223d      	movs	r2, #61	; 0x3d
 8006456:	5c9b      	ldrb	r3, [r3, r2]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d107      	bne.n	800646e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	223c      	movs	r2, #60	; 0x3c
 8006462:	2100      	movs	r1, #0
 8006464:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	0018      	movs	r0, r3
 800646a:	f7fc fe9f 	bl	80031ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	223d      	movs	r2, #61	; 0x3d
 8006472:	2102      	movs	r1, #2
 8006474:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3304      	adds	r3, #4
 800647e:	0019      	movs	r1, r3
 8006480:	0010      	movs	r0, r2
 8006482:	f000 fa11 	bl	80068a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2248      	movs	r2, #72	; 0x48
 800648a:	2101      	movs	r1, #1
 800648c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	223e      	movs	r2, #62	; 0x3e
 8006492:	2101      	movs	r1, #1
 8006494:	5499      	strb	r1, [r3, r2]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	223f      	movs	r2, #63	; 0x3f
 800649a:	2101      	movs	r1, #1
 800649c:	5499      	strb	r1, [r3, r2]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2240      	movs	r2, #64	; 0x40
 80064a2:	2101      	movs	r1, #1
 80064a4:	5499      	strb	r1, [r3, r2]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2241      	movs	r2, #65	; 0x41
 80064aa:	2101      	movs	r1, #1
 80064ac:	5499      	strb	r1, [r3, r2]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2242      	movs	r2, #66	; 0x42
 80064b2:	2101      	movs	r1, #1
 80064b4:	5499      	strb	r1, [r3, r2]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2243      	movs	r2, #67	; 0x43
 80064ba:	2101      	movs	r1, #1
 80064bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2244      	movs	r2, #68	; 0x44
 80064c2:	2101      	movs	r1, #1
 80064c4:	5499      	strb	r1, [r3, r2]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2245      	movs	r2, #69	; 0x45
 80064ca:	2101      	movs	r1, #1
 80064cc:	5499      	strb	r1, [r3, r2]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2246      	movs	r2, #70	; 0x46
 80064d2:	2101      	movs	r1, #1
 80064d4:	5499      	strb	r1, [r3, r2]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2247      	movs	r2, #71	; 0x47
 80064da:	2101      	movs	r1, #1
 80064dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	223d      	movs	r2, #61	; 0x3d
 80064e2:	2101      	movs	r1, #1
 80064e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	0018      	movs	r0, r3
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b002      	add	sp, #8
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	223d      	movs	r2, #61	; 0x3d
 80064fc:	5c9b      	ldrb	r3, [r3, r2]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d001      	beq.n	8006508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e042      	b.n	800658e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	223d      	movs	r2, #61	; 0x3d
 800650c:	2102      	movs	r1, #2
 800650e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2101      	movs	r1, #1
 800651c:	430a      	orrs	r2, r1
 800651e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1c      	ldr	r2, [pc, #112]	; (8006598 <HAL_TIM_Base_Start_IT+0xa8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00f      	beq.n	800654a <HAL_TIM_Base_Start_IT+0x5a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	05db      	lsls	r3, r3, #23
 8006532:	429a      	cmp	r2, r3
 8006534:	d009      	beq.n	800654a <HAL_TIM_Base_Start_IT+0x5a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a18      	ldr	r2, [pc, #96]	; (800659c <HAL_TIM_Base_Start_IT+0xac>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_TIM_Base_Start_IT+0x5a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a16      	ldr	r2, [pc, #88]	; (80065a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d116      	bne.n	8006578 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4a14      	ldr	r2, [pc, #80]	; (80065a4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006552:	4013      	ands	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b06      	cmp	r3, #6
 800655a:	d016      	beq.n	800658a <HAL_TIM_Base_Start_IT+0x9a>
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	2380      	movs	r3, #128	; 0x80
 8006560:	025b      	lsls	r3, r3, #9
 8006562:	429a      	cmp	r2, r3
 8006564:	d011      	beq.n	800658a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2101      	movs	r1, #1
 8006572:	430a      	orrs	r2, r1
 8006574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	e008      	b.n	800658a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2101      	movs	r1, #1
 8006584:	430a      	orrs	r2, r1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e000      	b.n	800658c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	0018      	movs	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	b004      	add	sp, #16
 8006594:	bd80      	pop	{r7, pc}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40000400 	.word	0x40000400
 80065a0:	40014000 	.word	0x40014000
 80065a4:	00010007 	.word	0x00010007

080065a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2101      	movs	r1, #1
 80065bc:	438a      	bics	r2, r1
 80065be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	4a0d      	ldr	r2, [pc, #52]	; (80065fc <HAL_TIM_Base_Stop_IT+0x54>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	d10d      	bne.n	80065e8 <HAL_TIM_Base_Stop_IT+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	4a0b      	ldr	r2, [pc, #44]	; (8006600 <HAL_TIM_Base_Stop_IT+0x58>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	d107      	bne.n	80065e8 <HAL_TIM_Base_Stop_IT+0x40>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2101      	movs	r1, #1
 80065e4:	438a      	bics	r2, r1
 80065e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	223d      	movs	r2, #61	; 0x3d
 80065ec:	2101      	movs	r1, #1
 80065ee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	0018      	movs	r0, r3
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b002      	add	sp, #8
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	00001111 	.word	0x00001111
 8006600:	00000444 	.word	0x00000444

08006604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2202      	movs	r2, #2
 8006614:	4013      	ands	r3, r2
 8006616:	2b02      	cmp	r3, #2
 8006618:	d124      	bne.n	8006664 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	2202      	movs	r2, #2
 8006622:	4013      	ands	r3, r2
 8006624:	2b02      	cmp	r3, #2
 8006626:	d11d      	bne.n	8006664 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2203      	movs	r2, #3
 800662e:	4252      	negs	r2, r2
 8006630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2203      	movs	r2, #3
 8006640:	4013      	ands	r3, r2
 8006642:	d004      	beq.n	800664e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	0018      	movs	r0, r3
 8006648:	f000 f916 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 800664c:	e007      	b.n	800665e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f000 f909 	bl	8006868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	0018      	movs	r0, r3
 800665a:	f000 f915 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2204      	movs	r2, #4
 800666c:	4013      	ands	r3, r2
 800666e:	2b04      	cmp	r3, #4
 8006670:	d125      	bne.n	80066be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	2204      	movs	r2, #4
 800667a:	4013      	ands	r3, r2
 800667c:	2b04      	cmp	r3, #4
 800667e:	d11e      	bne.n	80066be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2205      	movs	r2, #5
 8006686:	4252      	negs	r2, r2
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	23c0      	movs	r3, #192	; 0xc0
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4013      	ands	r3, r2
 800669c:	d004      	beq.n	80066a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 f8e9 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 80066a6:	e007      	b.n	80066b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 f8dc 	bl	8006868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	0018      	movs	r0, r3
 80066b4:	f000 f8e8 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2208      	movs	r2, #8
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d124      	bne.n	8006716 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	2208      	movs	r2, #8
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d11d      	bne.n	8006716 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2209      	movs	r2, #9
 80066e0:	4252      	negs	r2, r2
 80066e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2204      	movs	r2, #4
 80066e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	2203      	movs	r2, #3
 80066f2:	4013      	ands	r3, r2
 80066f4:	d004      	beq.n	8006700 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	0018      	movs	r0, r3
 80066fa:	f000 f8bd 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 80066fe:	e007      	b.n	8006710 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	0018      	movs	r0, r3
 8006704:	f000 f8b0 	bl	8006868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	0018      	movs	r0, r3
 800670c:	f000 f8bc 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2210      	movs	r2, #16
 800671e:	4013      	ands	r3, r2
 8006720:	2b10      	cmp	r3, #16
 8006722:	d125      	bne.n	8006770 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2210      	movs	r2, #16
 800672c:	4013      	ands	r3, r2
 800672e:	2b10      	cmp	r3, #16
 8006730:	d11e      	bne.n	8006770 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2211      	movs	r2, #17
 8006738:	4252      	negs	r2, r2
 800673a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2208      	movs	r2, #8
 8006740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	23c0      	movs	r3, #192	; 0xc0
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4013      	ands	r3, r2
 800674e:	d004      	beq.n	800675a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	0018      	movs	r0, r3
 8006754:	f000 f890 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 8006758:	e007      	b.n	800676a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	0018      	movs	r0, r3
 800675e:	f000 f883 	bl	8006868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	0018      	movs	r0, r3
 8006766:	f000 f88f 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2201      	movs	r2, #1
 8006778:	4013      	ands	r3, r2
 800677a:	2b01      	cmp	r3, #1
 800677c:	d10f      	bne.n	800679e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	4013      	ands	r3, r2
 8006788:	2b01      	cmp	r3, #1
 800678a:	d108      	bne.n	800679e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2202      	movs	r2, #2
 8006792:	4252      	negs	r2, r2
 8006794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	0018      	movs	r0, r3
 800679a:	f7fc fc33 	bl	8003004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2280      	movs	r2, #128	; 0x80
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b80      	cmp	r3, #128	; 0x80
 80067aa:	d10f      	bne.n	80067cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2280      	movs	r2, #128	; 0x80
 80067b4:	4013      	ands	r3, r2
 80067b6:	2b80      	cmp	r3, #128	; 0x80
 80067b8:	d108      	bne.n	80067cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2281      	movs	r2, #129	; 0x81
 80067c0:	4252      	negs	r2, r2
 80067c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	0018      	movs	r0, r3
 80067c8:	f000 f964 	bl	8006a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691a      	ldr	r2, [r3, #16]
 80067d2:	2380      	movs	r3, #128	; 0x80
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	401a      	ands	r2, r3
 80067d8:	2380      	movs	r3, #128	; 0x80
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	429a      	cmp	r2, r3
 80067de:	d10e      	bne.n	80067fe <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	2280      	movs	r2, #128	; 0x80
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b80      	cmp	r3, #128	; 0x80
 80067ec:	d107      	bne.n	80067fe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1c      	ldr	r2, [pc, #112]	; (8006864 <HAL_TIM_IRQHandler+0x260>)
 80067f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	0018      	movs	r0, r3
 80067fa:	f000 f953 	bl	8006aa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2240      	movs	r2, #64	; 0x40
 8006806:	4013      	ands	r3, r2
 8006808:	2b40      	cmp	r3, #64	; 0x40
 800680a:	d10f      	bne.n	800682c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2240      	movs	r2, #64	; 0x40
 8006814:	4013      	ands	r3, r2
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d108      	bne.n	800682c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2241      	movs	r2, #65	; 0x41
 8006820:	4252      	negs	r2, r2
 8006822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	0018      	movs	r0, r3
 8006828:	f000 f836 	bl	8006898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2220      	movs	r2, #32
 8006834:	4013      	ands	r3, r2
 8006836:	2b20      	cmp	r3, #32
 8006838:	d10f      	bne.n	800685a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	4013      	ands	r3, r2
 8006844:	2b20      	cmp	r3, #32
 8006846:	d108      	bne.n	800685a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2221      	movs	r2, #33	; 0x21
 800684e:	4252      	negs	r2, r2
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	0018      	movs	r0, r3
 8006856:	f000 f915 	bl	8006a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800685a:	46c0      	nop			; (mov r8, r8)
 800685c:	46bd      	mov	sp, r7
 800685e:	b002      	add	sp, #8
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	fffffeff 	.word	0xfffffeff

08006868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006870:	46c0      	nop			; (mov r8, r8)
 8006872:	46bd      	mov	sp, r7
 8006874:	b002      	add	sp, #8
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006880:	46c0      	nop			; (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	b002      	add	sp, #8
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006890:	46c0      	nop			; (mov r8, r8)
 8006892:	46bd      	mov	sp, r7
 8006894:	b002      	add	sp, #8
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a0:	46c0      	nop			; (mov r8, r8)
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b002      	add	sp, #8
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a34      	ldr	r2, [pc, #208]	; (800698c <TIM_Base_SetConfig+0xe4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d008      	beq.n	80068d2 <TIM_Base_SetConfig+0x2a>
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	2380      	movs	r3, #128	; 0x80
 80068c4:	05db      	lsls	r3, r3, #23
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d003      	beq.n	80068d2 <TIM_Base_SetConfig+0x2a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a30      	ldr	r2, [pc, #192]	; (8006990 <TIM_Base_SetConfig+0xe8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d108      	bne.n	80068e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2270      	movs	r2, #112	; 0x70
 80068d6:	4393      	bics	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a29      	ldr	r2, [pc, #164]	; (800698c <TIM_Base_SetConfig+0xe4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d018      	beq.n	800691e <TIM_Base_SetConfig+0x76>
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	2380      	movs	r3, #128	; 0x80
 80068f0:	05db      	lsls	r3, r3, #23
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d013      	beq.n	800691e <TIM_Base_SetConfig+0x76>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a25      	ldr	r2, [pc, #148]	; (8006990 <TIM_Base_SetConfig+0xe8>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00f      	beq.n	800691e <TIM_Base_SetConfig+0x76>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a24      	ldr	r2, [pc, #144]	; (8006994 <TIM_Base_SetConfig+0xec>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00b      	beq.n	800691e <TIM_Base_SetConfig+0x76>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a23      	ldr	r2, [pc, #140]	; (8006998 <TIM_Base_SetConfig+0xf0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d007      	beq.n	800691e <TIM_Base_SetConfig+0x76>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a22      	ldr	r2, [pc, #136]	; (800699c <TIM_Base_SetConfig+0xf4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d003      	beq.n	800691e <TIM_Base_SetConfig+0x76>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a21      	ldr	r2, [pc, #132]	; (80069a0 <TIM_Base_SetConfig+0xf8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d108      	bne.n	8006930 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <TIM_Base_SetConfig+0xfc>)
 8006922:	4013      	ands	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2280      	movs	r2, #128	; 0x80
 8006934:	4393      	bics	r3, r2
 8006936:	001a      	movs	r2, r3
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a0c      	ldr	r2, [pc, #48]	; (800698c <TIM_Base_SetConfig+0xe4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00b      	beq.n	8006976 <TIM_Base_SetConfig+0xce>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a0d      	ldr	r2, [pc, #52]	; (8006998 <TIM_Base_SetConfig+0xf0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d007      	beq.n	8006976 <TIM_Base_SetConfig+0xce>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a0c      	ldr	r2, [pc, #48]	; (800699c <TIM_Base_SetConfig+0xf4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d003      	beq.n	8006976 <TIM_Base_SetConfig+0xce>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a0b      	ldr	r2, [pc, #44]	; (80069a0 <TIM_Base_SetConfig+0xf8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d103      	bne.n	800697e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	615a      	str	r2, [r3, #20]
}
 8006984:	46c0      	nop			; (mov r8, r8)
 8006986:	46bd      	mov	sp, r7
 8006988:	b004      	add	sp, #16
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40000400 	.word	0x40000400
 8006994:	40002000 	.word	0x40002000
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800
 80069a4:	fffffcff 	.word	0xfffffcff

080069a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	223c      	movs	r2, #60	; 0x3c
 80069b6:	5c9b      	ldrb	r3, [r3, r2]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069bc:	2302      	movs	r3, #2
 80069be:	e055      	b.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	223c      	movs	r2, #60	; 0x3c
 80069c4:	2101      	movs	r1, #1
 80069c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	223d      	movs	r2, #61	; 0x3d
 80069cc:	2102      	movs	r1, #2
 80069ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a23      	ldr	r2, [pc, #140]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d108      	bne.n	80069fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a22      	ldr	r2, [pc, #136]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2270      	movs	r2, #112	; 0x70
 8006a00:	4393      	bics	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a16      	ldr	r2, [pc, #88]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00f      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	05db      	lsls	r3, r3, #23
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d009      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a12      	ldr	r2, [pc, #72]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a11      	ldr	r2, [pc, #68]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10c      	bne.n	8006a5a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2280      	movs	r2, #128	; 0x80
 8006a44:	4393      	bics	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	223d      	movs	r2, #61	; 0x3d
 8006a5e:	2101      	movs	r1, #1
 8006a60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	223c      	movs	r2, #60	; 0x3c
 8006a66:	2100      	movs	r1, #0
 8006a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b004      	add	sp, #16
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	ff0fffff 	.word	0xff0fffff
 8006a7c:	40000400 	.word	0x40000400
 8006a80:	40014000 	.word	0x40014000

08006a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a8c:	46c0      	nop			; (mov r8, r8)
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b002      	add	sp, #8
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a9c:	46c0      	nop			; (mov r8, r8)
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	b002      	add	sp, #8
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006aac:	46c0      	nop			; (mov r8, r8)
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e046      	b.n	8006b54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2288      	movs	r2, #136	; 0x88
 8006aca:	589b      	ldr	r3, [r3, r2]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d107      	bne.n	8006ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2284      	movs	r2, #132	; 0x84
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	0018      	movs	r0, r3
 8006adc:	f7fc fb8c 	bl	80031f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2288      	movs	r2, #136	; 0x88
 8006ae4:	2124      	movs	r1, #36	; 0x24
 8006ae6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2101      	movs	r1, #1
 8006af4:	438a      	bics	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	0018      	movs	r0, r3
 8006afc:	f000 f9ee 	bl	8006edc <UART_SetConfig>
 8006b00:	0003      	movs	r3, r0
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e024      	b.n	8006b54 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	0018      	movs	r0, r3
 8006b16:	f000 fc9f 	bl	8007458 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	490d      	ldr	r1, [pc, #52]	; (8006b5c <HAL_UART_Init+0xa8>)
 8006b26:	400a      	ands	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	212a      	movs	r1, #42	; 0x2a
 8006b36:	438a      	bics	r2, r1
 8006b38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2101      	movs	r1, #1
 8006b46:	430a      	orrs	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f000 fd37 	bl	80075c0 <UART_CheckIdleState>
 8006b52:	0003      	movs	r3, r0
}
 8006b54:	0018      	movs	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	ffffb7ff 	.word	0xffffb7ff

08006b60 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e032      	b.n	8006bd8 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2288      	movs	r2, #136	; 0x88
 8006b76:	2124      	movs	r1, #36	; 0x24
 8006b78:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2101      	movs	r1, #1
 8006b86:	438a      	bics	r2, r1
 8006b88:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2200      	movs	r2, #0
 8006b98:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f7fc fc0b 	bl	80033c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2290      	movs	r2, #144	; 0x90
 8006bae:	2100      	movs	r1, #0
 8006bb0:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2288      	movs	r2, #136	; 0x88
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	228c      	movs	r2, #140	; 0x8c
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2284      	movs	r2, #132	; 0x84
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	0018      	movs	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	b002      	add	sp, #8
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	; 0x28
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	1dbb      	adds	r3, r7, #6
 8006bee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2288      	movs	r2, #136	; 0x88
 8006bf4:	589b      	ldr	r3, [r3, r2]
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d000      	beq.n	8006bfc <HAL_UART_Transmit+0x1c>
 8006bfa:	e088      	b.n	8006d0e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_UART_Transmit+0x2a>
 8006c02:	1dbb      	adds	r3, r7, #6
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e080      	b.n	8006d10 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	2380      	movs	r3, #128	; 0x80
 8006c14:	015b      	lsls	r3, r3, #5
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d109      	bne.n	8006c2e <HAL_UART_Transmit+0x4e>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2201      	movs	r2, #1
 8006c26:	4013      	ands	r3, r2
 8006c28:	d001      	beq.n	8006c2e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e070      	b.n	8006d10 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2290      	movs	r2, #144	; 0x90
 8006c32:	2100      	movs	r1, #0
 8006c34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2288      	movs	r2, #136	; 0x88
 8006c3a:	2121      	movs	r1, #33	; 0x21
 8006c3c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c3e:	f7fc fd9d 	bl	800377c <HAL_GetTick>
 8006c42:	0003      	movs	r3, r0
 8006c44:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	1dba      	adds	r2, r7, #6
 8006c4a:	2154      	movs	r1, #84	; 0x54
 8006c4c:	8812      	ldrh	r2, [r2, #0]
 8006c4e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	1dba      	adds	r2, r7, #6
 8006c54:	2156      	movs	r1, #86	; 0x56
 8006c56:	8812      	ldrh	r2, [r2, #0]
 8006c58:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	2380      	movs	r3, #128	; 0x80
 8006c60:	015b      	lsls	r3, r3, #5
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d108      	bne.n	8006c78 <HAL_UART_Transmit+0x98>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	e003      	b.n	8006c80 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c80:	e02c      	b.n	8006cdc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	0013      	movs	r3, r2
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2180      	movs	r1, #128	; 0x80
 8006c90:	f000 fce4 	bl	800765c <UART_WaitOnFlagUntilTimeout>
 8006c94:	1e03      	subs	r3, r0, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e039      	b.n	8006d10 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	05d2      	lsls	r2, r2, #23
 8006cae:	0dd2      	lsrs	r2, r2, #23
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e007      	b.n	8006cca <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2256      	movs	r2, #86	; 0x56
 8006cce:	5a9b      	ldrh	r3, [r3, r2]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b299      	uxth	r1, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2256      	movs	r2, #86	; 0x56
 8006cda:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2256      	movs	r2, #86	; 0x56
 8006ce0:	5a9b      	ldrh	r3, [r3, r2]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1cc      	bne.n	8006c82 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	0013      	movs	r3, r2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2140      	movs	r1, #64	; 0x40
 8006cf6:	f000 fcb1 	bl	800765c <UART_WaitOnFlagUntilTimeout>
 8006cfa:	1e03      	subs	r3, r0, #0
 8006cfc:	d001      	beq.n	8006d02 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e006      	b.n	8006d10 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2288      	movs	r2, #136	; 0x88
 8006d06:	2120      	movs	r1, #32
 8006d08:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e000      	b.n	8006d10 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006d0e:	2302      	movs	r3, #2
  }
}
 8006d10:	0018      	movs	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b008      	add	sp, #32
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	1dbb      	adds	r3, r7, #6
 8006d26:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	228c      	movs	r2, #140	; 0x8c
 8006d2c:	589b      	ldr	r3, [r3, r2]
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d000      	beq.n	8006d34 <HAL_UART_Receive+0x1c>
 8006d32:	e0cc      	b.n	8006ece <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_UART_Receive+0x2a>
 8006d3a:	1dbb      	adds	r3, r7, #6
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e0c4      	b.n	8006ed0 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	2380      	movs	r3, #128	; 0x80
 8006d4c:	015b      	lsls	r3, r3, #5
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d109      	bne.n	8006d66 <HAL_UART_Receive+0x4e>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d001      	beq.n	8006d66 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e0b4      	b.n	8006ed0 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2290      	movs	r2, #144	; 0x90
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	228c      	movs	r2, #140	; 0x8c
 8006d72:	2122      	movs	r1, #34	; 0x22
 8006d74:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d7c:	f7fc fcfe 	bl	800377c <HAL_GetTick>
 8006d80:	0003      	movs	r3, r0
 8006d82:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	1dba      	adds	r2, r7, #6
 8006d88:	215c      	movs	r1, #92	; 0x5c
 8006d8a:	8812      	ldrh	r2, [r2, #0]
 8006d8c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	1dba      	adds	r2, r7, #6
 8006d92:	215e      	movs	r1, #94	; 0x5e
 8006d94:	8812      	ldrh	r2, [r2, #0]
 8006d96:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	2380      	movs	r3, #128	; 0x80
 8006d9e:	015b      	lsls	r3, r3, #5
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d10d      	bne.n	8006dc0 <HAL_UART_Receive+0xa8>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <HAL_UART_Receive+0x9e>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2260      	movs	r2, #96	; 0x60
 8006db0:	4949      	ldr	r1, [pc, #292]	; (8006ed8 <HAL_UART_Receive+0x1c0>)
 8006db2:	5299      	strh	r1, [r3, r2]
 8006db4:	e02e      	b.n	8006e14 <HAL_UART_Receive+0xfc>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2260      	movs	r2, #96	; 0x60
 8006dba:	21ff      	movs	r1, #255	; 0xff
 8006dbc:	5299      	strh	r1, [r3, r2]
 8006dbe:	e029      	b.n	8006e14 <HAL_UART_Receive+0xfc>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10d      	bne.n	8006de4 <HAL_UART_Receive+0xcc>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d104      	bne.n	8006dda <HAL_UART_Receive+0xc2>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2260      	movs	r2, #96	; 0x60
 8006dd4:	21ff      	movs	r1, #255	; 0xff
 8006dd6:	5299      	strh	r1, [r3, r2]
 8006dd8:	e01c      	b.n	8006e14 <HAL_UART_Receive+0xfc>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2260      	movs	r2, #96	; 0x60
 8006dde:	217f      	movs	r1, #127	; 0x7f
 8006de0:	5299      	strh	r1, [r3, r2]
 8006de2:	e017      	b.n	8006e14 <HAL_UART_Receive+0xfc>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	2380      	movs	r3, #128	; 0x80
 8006dea:	055b      	lsls	r3, r3, #21
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d10d      	bne.n	8006e0c <HAL_UART_Receive+0xf4>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <HAL_UART_Receive+0xea>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2260      	movs	r2, #96	; 0x60
 8006dfc:	217f      	movs	r1, #127	; 0x7f
 8006dfe:	5299      	strh	r1, [r3, r2]
 8006e00:	e008      	b.n	8006e14 <HAL_UART_Receive+0xfc>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2260      	movs	r2, #96	; 0x60
 8006e06:	213f      	movs	r1, #63	; 0x3f
 8006e08:	5299      	strh	r1, [r3, r2]
 8006e0a:	e003      	b.n	8006e14 <HAL_UART_Receive+0xfc>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2260      	movs	r2, #96	; 0x60
 8006e10:	2100      	movs	r1, #0
 8006e12:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006e14:	2312      	movs	r3, #18
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	2160      	movs	r1, #96	; 0x60
 8006e1c:	5a52      	ldrh	r2, [r2, r1]
 8006e1e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	2380      	movs	r3, #128	; 0x80
 8006e26:	015b      	lsls	r3, r3, #5
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d108      	bne.n	8006e3e <HAL_UART_Receive+0x126>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e003      	b.n	8006e46 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e46:	e036      	b.n	8006eb6 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	0013      	movs	r3, r2
 8006e52:	2200      	movs	r2, #0
 8006e54:	2120      	movs	r1, #32
 8006e56:	f000 fc01 	bl	800765c <UART_WaitOnFlagUntilTimeout>
 8006e5a:	1e03      	subs	r3, r0, #0
 8006e5c:	d001      	beq.n	8006e62 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e036      	b.n	8006ed0 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10e      	bne.n	8006e86 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2212      	movs	r2, #18
 8006e72:	18ba      	adds	r2, r7, r2
 8006e74:	8812      	ldrh	r2, [r2, #0]
 8006e76:	4013      	ands	r3, r2
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	3302      	adds	r3, #2
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	e00e      	b.n	8006ea4 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2212      	movs	r2, #18
 8006e90:	18ba      	adds	r2, r7, r2
 8006e92:	8812      	ldrh	r2, [r2, #0]
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	4013      	ands	r3, r2
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	225e      	movs	r2, #94	; 0x5e
 8006ea8:	5a9b      	ldrh	r3, [r3, r2]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b299      	uxth	r1, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	225e      	movs	r2, #94	; 0x5e
 8006eb4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	225e      	movs	r2, #94	; 0x5e
 8006eba:	5a9b      	ldrh	r3, [r3, r2]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1c2      	bne.n	8006e48 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	228c      	movs	r2, #140	; 0x8c
 8006ec6:	2120      	movs	r1, #32
 8006ec8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e000      	b.n	8006ed0 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8006ece:	2302      	movs	r3, #2
  }
}
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b008      	add	sp, #32
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	000001ff 	.word	0x000001ff

08006edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006edc:	b5b0      	push	{r4, r5, r7, lr}
 8006ede:	b090      	sub	sp, #64	; 0x40
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ee4:	231a      	movs	r3, #26
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	19db      	adds	r3, r3, r7
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4aaf      	ldr	r2, [pc, #700]	; (80071cc <UART_SetConfig+0x2f0>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	0019      	movs	r1, r3
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4aaa      	ldr	r2, [pc, #680]	; (80071d0 <UART_SetConfig+0x2f4>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	0018      	movs	r0, r3
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	68d9      	ldr	r1, [r3, #12]
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	0003      	movs	r3, r0
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4aa4      	ldr	r2, [pc, #656]	; (80071d4 <UART_SetConfig+0x2f8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d004      	beq.n	8006f52 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4a9f      	ldr	r2, [pc, #636]	; (80071d8 <UART_SetConfig+0x2fc>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f64:	430b      	orrs	r3, r1
 8006f66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	220f      	movs	r2, #15
 8006f70:	4393      	bics	r3, r2
 8006f72:	0018      	movs	r0, r3
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a95      	ldr	r2, [pc, #596]	; (80071dc <UART_SetConfig+0x300>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d131      	bne.n	8006ff0 <UART_SetConfig+0x114>
 8006f8c:	4b94      	ldr	r3, [pc, #592]	; (80071e0 <UART_SetConfig+0x304>)
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f90:	2203      	movs	r2, #3
 8006f92:	4013      	ands	r3, r2
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d01d      	beq.n	8006fd4 <UART_SetConfig+0xf8>
 8006f98:	d823      	bhi.n	8006fe2 <UART_SetConfig+0x106>
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d00c      	beq.n	8006fb8 <UART_SetConfig+0xdc>
 8006f9e:	d820      	bhi.n	8006fe2 <UART_SetConfig+0x106>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <UART_SetConfig+0xce>
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d00e      	beq.n	8006fc6 <UART_SetConfig+0xea>
 8006fa8:	e01b      	b.n	8006fe2 <UART_SetConfig+0x106>
 8006faa:	231b      	movs	r3, #27
 8006fac:	2220      	movs	r2, #32
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	19db      	adds	r3, r3, r7
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	e0b4      	b.n	8007122 <UART_SetConfig+0x246>
 8006fb8:	231b      	movs	r3, #27
 8006fba:	2220      	movs	r2, #32
 8006fbc:	189b      	adds	r3, r3, r2
 8006fbe:	19db      	adds	r3, r3, r7
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	e0ad      	b.n	8007122 <UART_SetConfig+0x246>
 8006fc6:	231b      	movs	r3, #27
 8006fc8:	2220      	movs	r2, #32
 8006fca:	189b      	adds	r3, r3, r2
 8006fcc:	19db      	adds	r3, r3, r7
 8006fce:	2204      	movs	r2, #4
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	e0a6      	b.n	8007122 <UART_SetConfig+0x246>
 8006fd4:	231b      	movs	r3, #27
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	189b      	adds	r3, r3, r2
 8006fda:	19db      	adds	r3, r3, r7
 8006fdc:	2208      	movs	r2, #8
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	e09f      	b.n	8007122 <UART_SetConfig+0x246>
 8006fe2:	231b      	movs	r3, #27
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	189b      	adds	r3, r3, r2
 8006fe8:	19db      	adds	r3, r3, r7
 8006fea:	2210      	movs	r2, #16
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e098      	b.n	8007122 <UART_SetConfig+0x246>
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a7b      	ldr	r2, [pc, #492]	; (80071e4 <UART_SetConfig+0x308>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d131      	bne.n	800705e <UART_SetConfig+0x182>
 8006ffa:	4b79      	ldr	r3, [pc, #484]	; (80071e0 <UART_SetConfig+0x304>)
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffe:	220c      	movs	r2, #12
 8007000:	4013      	ands	r3, r2
 8007002:	2b0c      	cmp	r3, #12
 8007004:	d01d      	beq.n	8007042 <UART_SetConfig+0x166>
 8007006:	d823      	bhi.n	8007050 <UART_SetConfig+0x174>
 8007008:	2b08      	cmp	r3, #8
 800700a:	d00c      	beq.n	8007026 <UART_SetConfig+0x14a>
 800700c:	d820      	bhi.n	8007050 <UART_SetConfig+0x174>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <UART_SetConfig+0x13c>
 8007012:	2b04      	cmp	r3, #4
 8007014:	d00e      	beq.n	8007034 <UART_SetConfig+0x158>
 8007016:	e01b      	b.n	8007050 <UART_SetConfig+0x174>
 8007018:	231b      	movs	r3, #27
 800701a:	2220      	movs	r2, #32
 800701c:	189b      	adds	r3, r3, r2
 800701e:	19db      	adds	r3, r3, r7
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	e07d      	b.n	8007122 <UART_SetConfig+0x246>
 8007026:	231b      	movs	r3, #27
 8007028:	2220      	movs	r2, #32
 800702a:	189b      	adds	r3, r3, r2
 800702c:	19db      	adds	r3, r3, r7
 800702e:	2202      	movs	r2, #2
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	e076      	b.n	8007122 <UART_SetConfig+0x246>
 8007034:	231b      	movs	r3, #27
 8007036:	2220      	movs	r2, #32
 8007038:	189b      	adds	r3, r3, r2
 800703a:	19db      	adds	r3, r3, r7
 800703c:	2204      	movs	r2, #4
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e06f      	b.n	8007122 <UART_SetConfig+0x246>
 8007042:	231b      	movs	r3, #27
 8007044:	2220      	movs	r2, #32
 8007046:	189b      	adds	r3, r3, r2
 8007048:	19db      	adds	r3, r3, r7
 800704a:	2208      	movs	r2, #8
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	e068      	b.n	8007122 <UART_SetConfig+0x246>
 8007050:	231b      	movs	r3, #27
 8007052:	2220      	movs	r2, #32
 8007054:	189b      	adds	r3, r3, r2
 8007056:	19db      	adds	r3, r3, r7
 8007058:	2210      	movs	r2, #16
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e061      	b.n	8007122 <UART_SetConfig+0x246>
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a61      	ldr	r2, [pc, #388]	; (80071e8 <UART_SetConfig+0x30c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d106      	bne.n	8007076 <UART_SetConfig+0x19a>
 8007068:	231b      	movs	r3, #27
 800706a:	2220      	movs	r2, #32
 800706c:	189b      	adds	r3, r3, r2
 800706e:	19db      	adds	r3, r3, r7
 8007070:	2200      	movs	r2, #0
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e055      	b.n	8007122 <UART_SetConfig+0x246>
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a5c      	ldr	r2, [pc, #368]	; (80071ec <UART_SetConfig+0x310>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d106      	bne.n	800708e <UART_SetConfig+0x1b2>
 8007080:	231b      	movs	r3, #27
 8007082:	2220      	movs	r2, #32
 8007084:	189b      	adds	r3, r3, r2
 8007086:	19db      	adds	r3, r3, r7
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e049      	b.n	8007122 <UART_SetConfig+0x246>
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a50      	ldr	r2, [pc, #320]	; (80071d4 <UART_SetConfig+0x2f8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d13e      	bne.n	8007116 <UART_SetConfig+0x23a>
 8007098:	4b51      	ldr	r3, [pc, #324]	; (80071e0 <UART_SetConfig+0x304>)
 800709a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800709c:	23c0      	movs	r3, #192	; 0xc0
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	4013      	ands	r3, r2
 80070a2:	22c0      	movs	r2, #192	; 0xc0
 80070a4:	0112      	lsls	r2, r2, #4
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d027      	beq.n	80070fa <UART_SetConfig+0x21e>
 80070aa:	22c0      	movs	r2, #192	; 0xc0
 80070ac:	0112      	lsls	r2, r2, #4
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d82a      	bhi.n	8007108 <UART_SetConfig+0x22c>
 80070b2:	2280      	movs	r2, #128	; 0x80
 80070b4:	0112      	lsls	r2, r2, #4
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d011      	beq.n	80070de <UART_SetConfig+0x202>
 80070ba:	2280      	movs	r2, #128	; 0x80
 80070bc:	0112      	lsls	r2, r2, #4
 80070be:	4293      	cmp	r3, r2
 80070c0:	d822      	bhi.n	8007108 <UART_SetConfig+0x22c>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <UART_SetConfig+0x1f4>
 80070c6:	2280      	movs	r2, #128	; 0x80
 80070c8:	00d2      	lsls	r2, r2, #3
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00e      	beq.n	80070ec <UART_SetConfig+0x210>
 80070ce:	e01b      	b.n	8007108 <UART_SetConfig+0x22c>
 80070d0:	231b      	movs	r3, #27
 80070d2:	2220      	movs	r2, #32
 80070d4:	189b      	adds	r3, r3, r2
 80070d6:	19db      	adds	r3, r3, r7
 80070d8:	2200      	movs	r2, #0
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	e021      	b.n	8007122 <UART_SetConfig+0x246>
 80070de:	231b      	movs	r3, #27
 80070e0:	2220      	movs	r2, #32
 80070e2:	189b      	adds	r3, r3, r2
 80070e4:	19db      	adds	r3, r3, r7
 80070e6:	2202      	movs	r2, #2
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	e01a      	b.n	8007122 <UART_SetConfig+0x246>
 80070ec:	231b      	movs	r3, #27
 80070ee:	2220      	movs	r2, #32
 80070f0:	189b      	adds	r3, r3, r2
 80070f2:	19db      	adds	r3, r3, r7
 80070f4:	2204      	movs	r2, #4
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e013      	b.n	8007122 <UART_SetConfig+0x246>
 80070fa:	231b      	movs	r3, #27
 80070fc:	2220      	movs	r2, #32
 80070fe:	189b      	adds	r3, r3, r2
 8007100:	19db      	adds	r3, r3, r7
 8007102:	2208      	movs	r2, #8
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e00c      	b.n	8007122 <UART_SetConfig+0x246>
 8007108:	231b      	movs	r3, #27
 800710a:	2220      	movs	r2, #32
 800710c:	189b      	adds	r3, r3, r2
 800710e:	19db      	adds	r3, r3, r7
 8007110:	2210      	movs	r2, #16
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	e005      	b.n	8007122 <UART_SetConfig+0x246>
 8007116:	231b      	movs	r3, #27
 8007118:	2220      	movs	r2, #32
 800711a:	189b      	adds	r3, r3, r2
 800711c:	19db      	adds	r3, r3, r7
 800711e:	2210      	movs	r2, #16
 8007120:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2b      	ldr	r2, [pc, #172]	; (80071d4 <UART_SetConfig+0x2f8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d000      	beq.n	800712e <UART_SetConfig+0x252>
 800712c:	e0a9      	b.n	8007282 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800712e:	231b      	movs	r3, #27
 8007130:	2220      	movs	r2, #32
 8007132:	189b      	adds	r3, r3, r2
 8007134:	19db      	adds	r3, r3, r7
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b08      	cmp	r3, #8
 800713a:	d015      	beq.n	8007168 <UART_SetConfig+0x28c>
 800713c:	dc18      	bgt.n	8007170 <UART_SetConfig+0x294>
 800713e:	2b04      	cmp	r3, #4
 8007140:	d00d      	beq.n	800715e <UART_SetConfig+0x282>
 8007142:	dc15      	bgt.n	8007170 <UART_SetConfig+0x294>
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <UART_SetConfig+0x272>
 8007148:	2b02      	cmp	r3, #2
 800714a:	d005      	beq.n	8007158 <UART_SetConfig+0x27c>
 800714c:	e010      	b.n	8007170 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800714e:	f7fd fb9f 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8007152:	0003      	movs	r3, r0
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007156:	e014      	b.n	8007182 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007158:	4b25      	ldr	r3, [pc, #148]	; (80071f0 <UART_SetConfig+0x314>)
 800715a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800715c:	e011      	b.n	8007182 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715e:	f7fd fb0b 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8007162:	0003      	movs	r3, r0
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007166:	e00c      	b.n	8007182 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800716e:	e008      	b.n	8007182 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007174:	231a      	movs	r3, #26
 8007176:	2220      	movs	r2, #32
 8007178:	189b      	adds	r3, r3, r2
 800717a:	19db      	adds	r3, r3, r7
 800717c:	2201      	movs	r2, #1
 800717e:	701a      	strb	r2, [r3, #0]
        break;
 8007180:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007184:	2b00      	cmp	r3, #0
 8007186:	d100      	bne.n	800718a <UART_SetConfig+0x2ae>
 8007188:	e14b      	b.n	8007422 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800718e:	4b19      	ldr	r3, [pc, #100]	; (80071f4 <UART_SetConfig+0x318>)
 8007190:	0052      	lsls	r2, r2, #1
 8007192:	5ad3      	ldrh	r3, [r2, r3]
 8007194:	0019      	movs	r1, r3
 8007196:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007198:	f7f8 ffd0 	bl	800013c <__udivsi3>
 800719c:	0003      	movs	r3, r0
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	0013      	movs	r3, r2
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	189b      	adds	r3, r3, r2
 80071aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d305      	bcc.n	80071bc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d91d      	bls.n	80071f8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80071bc:	231a      	movs	r3, #26
 80071be:	2220      	movs	r2, #32
 80071c0:	189b      	adds	r3, r3, r2
 80071c2:	19db      	adds	r3, r3, r7
 80071c4:	2201      	movs	r2, #1
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e12b      	b.n	8007422 <UART_SetConfig+0x546>
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	cfff69f3 	.word	0xcfff69f3
 80071d0:	ffffcfff 	.word	0xffffcfff
 80071d4:	40008000 	.word	0x40008000
 80071d8:	11fff4ff 	.word	0x11fff4ff
 80071dc:	40013800 	.word	0x40013800
 80071e0:	40021000 	.word	0x40021000
 80071e4:	40004400 	.word	0x40004400
 80071e8:	40004800 	.word	0x40004800
 80071ec:	40004c00 	.word	0x40004c00
 80071f0:	00f42400 	.word	0x00f42400
 80071f4:	080142e8 	.word	0x080142e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007204:	4b92      	ldr	r3, [pc, #584]	; (8007450 <UART_SetConfig+0x574>)
 8007206:	0052      	lsls	r2, r2, #1
 8007208:	5ad3      	ldrh	r3, [r2, r3]
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	69b8      	ldr	r0, [r7, #24]
 8007216:	69f9      	ldr	r1, [r7, #28]
 8007218:	f7f9 f944 	bl	80004a4 <__aeabi_uldivmod>
 800721c:	0002      	movs	r2, r0
 800721e:	000b      	movs	r3, r1
 8007220:	0e11      	lsrs	r1, r2, #24
 8007222:	021d      	lsls	r5, r3, #8
 8007224:	430d      	orrs	r5, r1
 8007226:	0214      	lsls	r4, r2, #8
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	60bb      	str	r3, [r7, #8]
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68b8      	ldr	r0, [r7, #8]
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	1900      	adds	r0, r0, r4
 800723a:	4169      	adcs	r1, r5
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	2300      	movs	r3, #0
 8007244:	607b      	str	r3, [r7, #4]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f7f9 f92b 	bl	80004a4 <__aeabi_uldivmod>
 800724e:	0002      	movs	r2, r0
 8007250:	000b      	movs	r3, r1
 8007252:	0013      	movs	r3, r2
 8007254:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007258:	23c0      	movs	r3, #192	; 0xc0
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	429a      	cmp	r2, r3
 800725e:	d309      	bcc.n	8007274 <UART_SetConfig+0x398>
 8007260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007262:	2380      	movs	r3, #128	; 0x80
 8007264:	035b      	lsls	r3, r3, #13
 8007266:	429a      	cmp	r2, r3
 8007268:	d204      	bcs.n	8007274 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	e0d6      	b.n	8007422 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007274:	231a      	movs	r3, #26
 8007276:	2220      	movs	r2, #32
 8007278:	189b      	adds	r3, r3, r2
 800727a:	19db      	adds	r3, r3, r7
 800727c:	2201      	movs	r2, #1
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	e0cf      	b.n	8007422 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	69da      	ldr	r2, [r3, #28]
 8007286:	2380      	movs	r3, #128	; 0x80
 8007288:	021b      	lsls	r3, r3, #8
 800728a:	429a      	cmp	r2, r3
 800728c:	d000      	beq.n	8007290 <UART_SetConfig+0x3b4>
 800728e:	e070      	b.n	8007372 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007290:	231b      	movs	r3, #27
 8007292:	2220      	movs	r2, #32
 8007294:	189b      	adds	r3, r3, r2
 8007296:	19db      	adds	r3, r3, r7
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b08      	cmp	r3, #8
 800729c:	d015      	beq.n	80072ca <UART_SetConfig+0x3ee>
 800729e:	dc18      	bgt.n	80072d2 <UART_SetConfig+0x3f6>
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d00d      	beq.n	80072c0 <UART_SetConfig+0x3e4>
 80072a4:	dc15      	bgt.n	80072d2 <UART_SetConfig+0x3f6>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <UART_SetConfig+0x3d4>
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d005      	beq.n	80072ba <UART_SetConfig+0x3de>
 80072ae:	e010      	b.n	80072d2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b0:	f7fd faee 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 80072b4:	0003      	movs	r3, r0
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072b8:	e014      	b.n	80072e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ba:	4b66      	ldr	r3, [pc, #408]	; (8007454 <UART_SetConfig+0x578>)
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072be:	e011      	b.n	80072e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c0:	f7fd fa5a 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 80072c4:	0003      	movs	r3, r0
 80072c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072c8:	e00c      	b.n	80072e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ca:	2380      	movs	r3, #128	; 0x80
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072d0:	e008      	b.n	80072e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80072d6:	231a      	movs	r3, #26
 80072d8:	2220      	movs	r2, #32
 80072da:	189b      	adds	r3, r3, r2
 80072dc:	19db      	adds	r3, r3, r7
 80072de:	2201      	movs	r2, #1
 80072e0:	701a      	strb	r2, [r3, #0]
        break;
 80072e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d100      	bne.n	80072ec <UART_SetConfig+0x410>
 80072ea:	e09a      	b.n	8007422 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072f0:	4b57      	ldr	r3, [pc, #348]	; (8007450 <UART_SetConfig+0x574>)
 80072f2:	0052      	lsls	r2, r2, #1
 80072f4:	5ad3      	ldrh	r3, [r2, r3]
 80072f6:	0019      	movs	r1, r3
 80072f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80072fa:	f7f8 ff1f 	bl	800013c <__udivsi3>
 80072fe:	0003      	movs	r3, r0
 8007300:	005a      	lsls	r2, r3, #1
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	18d2      	adds	r2, r2, r3
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	0019      	movs	r1, r3
 8007310:	0010      	movs	r0, r2
 8007312:	f7f8 ff13 	bl	800013c <__udivsi3>
 8007316:	0003      	movs	r3, r0
 8007318:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	2b0f      	cmp	r3, #15
 800731e:	d921      	bls.n	8007364 <UART_SetConfig+0x488>
 8007320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007322:	2380      	movs	r3, #128	; 0x80
 8007324:	025b      	lsls	r3, r3, #9
 8007326:	429a      	cmp	r2, r3
 8007328:	d21c      	bcs.n	8007364 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	b29a      	uxth	r2, r3
 800732e:	200e      	movs	r0, #14
 8007330:	2420      	movs	r4, #32
 8007332:	1903      	adds	r3, r0, r4
 8007334:	19db      	adds	r3, r3, r7
 8007336:	210f      	movs	r1, #15
 8007338:	438a      	bics	r2, r1
 800733a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	b29b      	uxth	r3, r3
 8007342:	2207      	movs	r2, #7
 8007344:	4013      	ands	r3, r2
 8007346:	b299      	uxth	r1, r3
 8007348:	1903      	adds	r3, r0, r4
 800734a:	19db      	adds	r3, r3, r7
 800734c:	1902      	adds	r2, r0, r4
 800734e:	19d2      	adds	r2, r2, r7
 8007350:	8812      	ldrh	r2, [r2, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	1902      	adds	r2, r0, r4
 800735c:	19d2      	adds	r2, r2, r7
 800735e:	8812      	ldrh	r2, [r2, #0]
 8007360:	60da      	str	r2, [r3, #12]
 8007362:	e05e      	b.n	8007422 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007364:	231a      	movs	r3, #26
 8007366:	2220      	movs	r2, #32
 8007368:	189b      	adds	r3, r3, r2
 800736a:	19db      	adds	r3, r3, r7
 800736c:	2201      	movs	r2, #1
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	e057      	b.n	8007422 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007372:	231b      	movs	r3, #27
 8007374:	2220      	movs	r2, #32
 8007376:	189b      	adds	r3, r3, r2
 8007378:	19db      	adds	r3, r3, r7
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b08      	cmp	r3, #8
 800737e:	d015      	beq.n	80073ac <UART_SetConfig+0x4d0>
 8007380:	dc18      	bgt.n	80073b4 <UART_SetConfig+0x4d8>
 8007382:	2b04      	cmp	r3, #4
 8007384:	d00d      	beq.n	80073a2 <UART_SetConfig+0x4c6>
 8007386:	dc15      	bgt.n	80073b4 <UART_SetConfig+0x4d8>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <UART_SetConfig+0x4b6>
 800738c:	2b02      	cmp	r3, #2
 800738e:	d005      	beq.n	800739c <UART_SetConfig+0x4c0>
 8007390:	e010      	b.n	80073b4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007392:	f7fd fa7d 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8007396:	0003      	movs	r3, r0
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800739a:	e014      	b.n	80073c6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800739c:	4b2d      	ldr	r3, [pc, #180]	; (8007454 <UART_SetConfig+0x578>)
 800739e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073a0:	e011      	b.n	80073c6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073a2:	f7fd f9e9 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 80073a6:	0003      	movs	r3, r0
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073aa:	e00c      	b.n	80073c6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ac:	2380      	movs	r3, #128	; 0x80
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073b2:	e008      	b.n	80073c6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80073b8:	231a      	movs	r3, #26
 80073ba:	2220      	movs	r2, #32
 80073bc:	189b      	adds	r3, r3, r2
 80073be:	19db      	adds	r3, r3, r7
 80073c0:	2201      	movs	r2, #1
 80073c2:	701a      	strb	r2, [r3, #0]
        break;
 80073c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d02a      	beq.n	8007422 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073d0:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <UART_SetConfig+0x574>)
 80073d2:	0052      	lsls	r2, r2, #1
 80073d4:	5ad3      	ldrh	r3, [r2, r3]
 80073d6:	0019      	movs	r1, r3
 80073d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80073da:	f7f8 feaf 	bl	800013c <__udivsi3>
 80073de:	0003      	movs	r3, r0
 80073e0:	001a      	movs	r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	18d2      	adds	r2, r2, r3
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	0019      	movs	r1, r3
 80073f0:	0010      	movs	r0, r2
 80073f2:	f7f8 fea3 	bl	800013c <__udivsi3>
 80073f6:	0003      	movs	r3, r0
 80073f8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2b0f      	cmp	r3, #15
 80073fe:	d90a      	bls.n	8007416 <UART_SetConfig+0x53a>
 8007400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007402:	2380      	movs	r3, #128	; 0x80
 8007404:	025b      	lsls	r3, r3, #9
 8007406:	429a      	cmp	r2, r3
 8007408:	d205      	bcs.n	8007416 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	b29a      	uxth	r2, r3
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60da      	str	r2, [r3, #12]
 8007414:	e005      	b.n	8007422 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007416:	231a      	movs	r3, #26
 8007418:	2220      	movs	r2, #32
 800741a:	189b      	adds	r3, r3, r2
 800741c:	19db      	adds	r3, r3, r7
 800741e:	2201      	movs	r2, #1
 8007420:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	226a      	movs	r2, #106	; 0x6a
 8007426:	2101      	movs	r1, #1
 8007428:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	2268      	movs	r2, #104	; 0x68
 800742e:	2101      	movs	r1, #1
 8007430:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	2200      	movs	r2, #0
 8007436:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	2200      	movs	r2, #0
 800743c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800743e:	231a      	movs	r3, #26
 8007440:	2220      	movs	r2, #32
 8007442:	189b      	adds	r3, r3, r2
 8007444:	19db      	adds	r3, r3, r7
 8007446:	781b      	ldrb	r3, [r3, #0]
}
 8007448:	0018      	movs	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	b010      	add	sp, #64	; 0x40
 800744e:	bdb0      	pop	{r4, r5, r7, pc}
 8007450:	080142e8 	.word	0x080142e8
 8007454:	00f42400 	.word	0x00f42400

08007458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	2201      	movs	r2, #1
 8007466:	4013      	ands	r3, r2
 8007468:	d00b      	beq.n	8007482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	4a4a      	ldr	r2, [pc, #296]	; (800759c <UART_AdvFeatureConfig+0x144>)
 8007472:	4013      	ands	r3, r2
 8007474:	0019      	movs	r1, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	2202      	movs	r2, #2
 8007488:	4013      	ands	r3, r2
 800748a:	d00b      	beq.n	80074a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	4a43      	ldr	r2, [pc, #268]	; (80075a0 <UART_AdvFeatureConfig+0x148>)
 8007494:	4013      	ands	r3, r2
 8007496:	0019      	movs	r1, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	2204      	movs	r2, #4
 80074aa:	4013      	ands	r3, r2
 80074ac:	d00b      	beq.n	80074c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	4a3b      	ldr	r2, [pc, #236]	; (80075a4 <UART_AdvFeatureConfig+0x14c>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	0019      	movs	r1, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	2208      	movs	r2, #8
 80074cc:	4013      	ands	r3, r2
 80074ce:	d00b      	beq.n	80074e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	4a34      	ldr	r2, [pc, #208]	; (80075a8 <UART_AdvFeatureConfig+0x150>)
 80074d8:	4013      	ands	r3, r2
 80074da:	0019      	movs	r1, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	2210      	movs	r2, #16
 80074ee:	4013      	ands	r3, r2
 80074f0:	d00b      	beq.n	800750a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4a2c      	ldr	r2, [pc, #176]	; (80075ac <UART_AdvFeatureConfig+0x154>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	0019      	movs	r1, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	2220      	movs	r2, #32
 8007510:	4013      	ands	r3, r2
 8007512:	d00b      	beq.n	800752c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	4a25      	ldr	r2, [pc, #148]	; (80075b0 <UART_AdvFeatureConfig+0x158>)
 800751c:	4013      	ands	r3, r2
 800751e:	0019      	movs	r1, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	2240      	movs	r2, #64	; 0x40
 8007532:	4013      	ands	r3, r2
 8007534:	d01d      	beq.n	8007572 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <UART_AdvFeatureConfig+0x15c>)
 800753e:	4013      	ands	r3, r2
 8007540:	0019      	movs	r1, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007552:	2380      	movs	r3, #128	; 0x80
 8007554:	035b      	lsls	r3, r3, #13
 8007556:	429a      	cmp	r2, r3
 8007558:	d10b      	bne.n	8007572 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	4a15      	ldr	r2, [pc, #84]	; (80075b8 <UART_AdvFeatureConfig+0x160>)
 8007562:	4013      	ands	r3, r2
 8007564:	0019      	movs	r1, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007576:	2280      	movs	r2, #128	; 0x80
 8007578:	4013      	ands	r3, r2
 800757a:	d00b      	beq.n	8007594 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	4a0e      	ldr	r2, [pc, #56]	; (80075bc <UART_AdvFeatureConfig+0x164>)
 8007584:	4013      	ands	r3, r2
 8007586:	0019      	movs	r1, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	605a      	str	r2, [r3, #4]
  }
}
 8007594:	46c0      	nop			; (mov r8, r8)
 8007596:	46bd      	mov	sp, r7
 8007598:	b002      	add	sp, #8
 800759a:	bd80      	pop	{r7, pc}
 800759c:	fffdffff 	.word	0xfffdffff
 80075a0:	fffeffff 	.word	0xfffeffff
 80075a4:	fffbffff 	.word	0xfffbffff
 80075a8:	ffff7fff 	.word	0xffff7fff
 80075ac:	ffffefff 	.word	0xffffefff
 80075b0:	ffffdfff 	.word	0xffffdfff
 80075b4:	ffefffff 	.word	0xffefffff
 80075b8:	ff9fffff 	.word	0xff9fffff
 80075bc:	fff7ffff 	.word	0xfff7ffff

080075c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2290      	movs	r2, #144	; 0x90
 80075cc:	2100      	movs	r1, #0
 80075ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d0:	f7fc f8d4 	bl	800377c <HAL_GetTick>
 80075d4:	0003      	movs	r3, r0
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2208      	movs	r2, #8
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	d10c      	bne.n	8007600 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2280      	movs	r2, #128	; 0x80
 80075ea:	0391      	lsls	r1, r2, #14
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <UART_CheckIdleState+0x98>)
 80075f0:	9200      	str	r2, [sp, #0]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f000 f832 	bl	800765c <UART_WaitOnFlagUntilTimeout>
 80075f8:	1e03      	subs	r3, r0, #0
 80075fa:	d001      	beq.n	8007600 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e026      	b.n	800764e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2204      	movs	r2, #4
 8007608:	4013      	ands	r3, r2
 800760a:	2b04      	cmp	r3, #4
 800760c:	d10c      	bne.n	8007628 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2280      	movs	r2, #128	; 0x80
 8007612:	03d1      	lsls	r1, r2, #15
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	4a10      	ldr	r2, [pc, #64]	; (8007658 <UART_CheckIdleState+0x98>)
 8007618:	9200      	str	r2, [sp, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	f000 f81e 	bl	800765c <UART_WaitOnFlagUntilTimeout>
 8007620:	1e03      	subs	r3, r0, #0
 8007622:	d001      	beq.n	8007628 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e012      	b.n	800764e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2288      	movs	r2, #136	; 0x88
 800762c:	2120      	movs	r1, #32
 800762e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	228c      	movs	r2, #140	; 0x8c
 8007634:	2120      	movs	r1, #32
 8007636:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2284      	movs	r2, #132	; 0x84
 8007648:	2100      	movs	r1, #0
 800764a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	0018      	movs	r0, r3
 8007650:	46bd      	mov	sp, r7
 8007652:	b004      	add	sp, #16
 8007654:	bd80      	pop	{r7, pc}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	01ffffff 	.word	0x01ffffff

0800765c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b094      	sub	sp, #80	; 0x50
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	603b      	str	r3, [r7, #0]
 8007668:	1dfb      	adds	r3, r7, #7
 800766a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800766c:	e0a7      	b.n	80077be <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800766e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007670:	3301      	adds	r3, #1
 8007672:	d100      	bne.n	8007676 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007674:	e0a3      	b.n	80077be <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007676:	f7fc f881 	bl	800377c <HAL_GetTick>
 800767a:	0002      	movs	r2, r0
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007682:	429a      	cmp	r2, r3
 8007684:	d302      	bcc.n	800768c <UART_WaitOnFlagUntilTimeout+0x30>
 8007686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007688:	2b00      	cmp	r3, #0
 800768a:	d13f      	bne.n	800770c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800768c:	f3ef 8310 	mrs	r3, PRIMASK
 8007690:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007694:	647b      	str	r3, [r7, #68]	; 0x44
 8007696:	2301      	movs	r3, #1
 8007698:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	f383 8810 	msr	PRIMASK, r3
}
 80076a0:	46c0      	nop			; (mov r8, r8)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	494e      	ldr	r1, [pc, #312]	; (80077e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80076ae:	400a      	ands	r2, r1
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	f383 8810 	msr	PRIMASK, r3
}
 80076bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076be:	f3ef 8310 	mrs	r3, PRIMASK
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80076c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c6:	643b      	str	r3, [r7, #64]	; 0x40
 80076c8:	2301      	movs	r3, #1
 80076ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	f383 8810 	msr	PRIMASK, r3
}
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2101      	movs	r1, #1
 80076e0:	438a      	bics	r2, r1
 80076e2:	609a      	str	r2, [r3, #8]
 80076e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ea:	f383 8810 	msr	PRIMASK, r3
}
 80076ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2288      	movs	r2, #136	; 0x88
 80076f4:	2120      	movs	r1, #32
 80076f6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	228c      	movs	r2, #140	; 0x8c
 80076fc:	2120      	movs	r1, #32
 80076fe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2284      	movs	r2, #132	; 0x84
 8007704:	2100      	movs	r1, #0
 8007706:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e069      	b.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2204      	movs	r2, #4
 8007714:	4013      	ands	r3, r2
 8007716:	d052      	beq.n	80077be <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69da      	ldr	r2, [r3, #28]
 800771e:	2380      	movs	r3, #128	; 0x80
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	401a      	ands	r2, r3
 8007724:	2380      	movs	r3, #128	; 0x80
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	429a      	cmp	r2, r3
 800772a:	d148      	bne.n	80077be <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2280      	movs	r2, #128	; 0x80
 8007732:	0112      	lsls	r2, r2, #4
 8007734:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007736:	f3ef 8310 	mrs	r3, PRIMASK
 800773a:	613b      	str	r3, [r7, #16]
  return(result);
 800773c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800773e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007740:	2301      	movs	r3, #1
 8007742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f383 8810 	msr	PRIMASK, r3
}
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4924      	ldr	r1, [pc, #144]	; (80077e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007758:	400a      	ands	r2, r1
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f383 8810 	msr	PRIMASK, r3
}
 8007766:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007768:	f3ef 8310 	mrs	r3, PRIMASK
 800776c:	61fb      	str	r3, [r7, #28]
  return(result);
 800776e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007770:	64bb      	str	r3, [r7, #72]	; 0x48
 8007772:	2301      	movs	r3, #1
 8007774:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	f383 8810 	msr	PRIMASK, r3
}
 800777c:	46c0      	nop			; (mov r8, r8)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2101      	movs	r1, #1
 800778a:	438a      	bics	r2, r1
 800778c:	609a      	str	r2, [r3, #8]
 800778e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	f383 8810 	msr	PRIMASK, r3
}
 8007798:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2288      	movs	r2, #136	; 0x88
 800779e:	2120      	movs	r1, #32
 80077a0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	228c      	movs	r2, #140	; 0x8c
 80077a6:	2120      	movs	r1, #32
 80077a8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2290      	movs	r2, #144	; 0x90
 80077ae:	2120      	movs	r1, #32
 80077b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2284      	movs	r2, #132	; 0x84
 80077b6:	2100      	movs	r1, #0
 80077b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e010      	b.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	4013      	ands	r3, r2
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	425a      	negs	r2, r3
 80077ce:	4153      	adcs	r3, r2
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	001a      	movs	r2, r3
 80077d4:	1dfb      	adds	r3, r7, #7
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d100      	bne.n	80077de <UART_WaitOnFlagUntilTimeout+0x182>
 80077dc:	e747      	b.n	800766e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	0018      	movs	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b014      	add	sp, #80	; 0x50
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	fffffe5f 	.word	0xfffffe5f

080077ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2284      	movs	r2, #132	; 0x84
 80077f8:	5c9b      	ldrb	r3, [r3, r2]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <HAL_UARTEx_DisableFifoMode+0x16>
 80077fe:	2302      	movs	r3, #2
 8007800:	e027      	b.n	8007852 <HAL_UARTEx_DisableFifoMode+0x66>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2284      	movs	r2, #132	; 0x84
 8007806:	2101      	movs	r1, #1
 8007808:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2288      	movs	r2, #136	; 0x88
 800780e:	2124      	movs	r1, #36	; 0x24
 8007810:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2101      	movs	r1, #1
 8007826:	438a      	bics	r2, r1
 8007828:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4a0b      	ldr	r2, [pc, #44]	; (800785c <HAL_UARTEx_DisableFifoMode+0x70>)
 800782e:	4013      	ands	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2288      	movs	r2, #136	; 0x88
 8007844:	2120      	movs	r1, #32
 8007846:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2284      	movs	r2, #132	; 0x84
 800784c:	2100      	movs	r1, #0
 800784e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	0018      	movs	r0, r3
 8007854:	46bd      	mov	sp, r7
 8007856:	b004      	add	sp, #16
 8007858:	bd80      	pop	{r7, pc}
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	dfffffff 	.word	0xdfffffff

08007860 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2284      	movs	r2, #132	; 0x84
 800786e:	5c9b      	ldrb	r3, [r3, r2]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007874:	2302      	movs	r3, #2
 8007876:	e02e      	b.n	80078d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2284      	movs	r2, #132	; 0x84
 800787c:	2101      	movs	r1, #1
 800787e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2288      	movs	r2, #136	; 0x88
 8007884:	2124      	movs	r1, #36	; 0x24
 8007886:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2101      	movs	r1, #1
 800789c:	438a      	bics	r2, r1
 800789e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	08d9      	lsrs	r1, r3, #3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	0018      	movs	r0, r3
 80078b8:	f000 f854 	bl	8007964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2288      	movs	r2, #136	; 0x88
 80078c8:	2120      	movs	r1, #32
 80078ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2284      	movs	r2, #132	; 0x84
 80078d0:	2100      	movs	r1, #0
 80078d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	0018      	movs	r0, r3
 80078d8:	46bd      	mov	sp, r7
 80078da:	b004      	add	sp, #16
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2284      	movs	r2, #132	; 0x84
 80078ee:	5c9b      	ldrb	r3, [r3, r2]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e02f      	b.n	8007958 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2284      	movs	r2, #132	; 0x84
 80078fc:	2101      	movs	r1, #1
 80078fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2288      	movs	r2, #136	; 0x88
 8007904:	2124      	movs	r1, #36	; 0x24
 8007906:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2101      	movs	r1, #1
 800791c:	438a      	bics	r2, r1
 800791e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	4a0e      	ldr	r2, [pc, #56]	; (8007960 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007928:	4013      	ands	r3, r2
 800792a:	0019      	movs	r1, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	0018      	movs	r0, r3
 800793a:	f000 f813 	bl	8007964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2288      	movs	r2, #136	; 0x88
 800794a:	2120      	movs	r1, #32
 800794c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2284      	movs	r2, #132	; 0x84
 8007952:	2100      	movs	r1, #0
 8007954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	0018      	movs	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	b004      	add	sp, #16
 800795e:	bd80      	pop	{r7, pc}
 8007960:	f1ffffff 	.word	0xf1ffffff

08007964 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007970:	2b00      	cmp	r3, #0
 8007972:	d108      	bne.n	8007986 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	226a      	movs	r2, #106	; 0x6a
 8007978:	2101      	movs	r1, #1
 800797a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2268      	movs	r2, #104	; 0x68
 8007980:	2101      	movs	r1, #1
 8007982:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007984:	e043      	b.n	8007a0e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007986:	260f      	movs	r6, #15
 8007988:	19bb      	adds	r3, r7, r6
 800798a:	2208      	movs	r2, #8
 800798c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800798e:	200e      	movs	r0, #14
 8007990:	183b      	adds	r3, r7, r0
 8007992:	2208      	movs	r2, #8
 8007994:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	0e5b      	lsrs	r3, r3, #25
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	240d      	movs	r4, #13
 80079a2:	193b      	adds	r3, r7, r4
 80079a4:	2107      	movs	r1, #7
 80079a6:	400a      	ands	r2, r1
 80079a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	0f5b      	lsrs	r3, r3, #29
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	250c      	movs	r5, #12
 80079b6:	197b      	adds	r3, r7, r5
 80079b8:	2107      	movs	r1, #7
 80079ba:	400a      	ands	r2, r1
 80079bc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079be:	183b      	adds	r3, r7, r0
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	197a      	adds	r2, r7, r5
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	4914      	ldr	r1, [pc, #80]	; (8007a18 <UARTEx_SetNbDataToProcess+0xb4>)
 80079c8:	5c8a      	ldrb	r2, [r1, r2]
 80079ca:	435a      	muls	r2, r3
 80079cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80079ce:	197b      	adds	r3, r7, r5
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	4a12      	ldr	r2, [pc, #72]	; (8007a1c <UARTEx_SetNbDataToProcess+0xb8>)
 80079d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079d6:	0019      	movs	r1, r3
 80079d8:	f7f8 fc3a 	bl	8000250 <__divsi3>
 80079dc:	0003      	movs	r3, r0
 80079de:	b299      	uxth	r1, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	226a      	movs	r2, #106	; 0x6a
 80079e4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079e6:	19bb      	adds	r3, r7, r6
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	193a      	adds	r2, r7, r4
 80079ec:	7812      	ldrb	r2, [r2, #0]
 80079ee:	490a      	ldr	r1, [pc, #40]	; (8007a18 <UARTEx_SetNbDataToProcess+0xb4>)
 80079f0:	5c8a      	ldrb	r2, [r1, r2]
 80079f2:	435a      	muls	r2, r3
 80079f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80079f6:	193b      	adds	r3, r7, r4
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	4a08      	ldr	r2, [pc, #32]	; (8007a1c <UARTEx_SetNbDataToProcess+0xb8>)
 80079fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079fe:	0019      	movs	r1, r3
 8007a00:	f7f8 fc26 	bl	8000250 <__divsi3>
 8007a04:	0003      	movs	r3, r0
 8007a06:	b299      	uxth	r1, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2268      	movs	r2, #104	; 0x68
 8007a0c:	5299      	strh	r1, [r3, r2]
}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b005      	add	sp, #20
 8007a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	08014300 	.word	0x08014300
 8007a1c:	08014308 	.word	0x08014308

08007a20 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007a20:	b5b0      	push	{r4, r5, r7, lr}
 8007a22:	b0e4      	sub	sp, #400	; 0x190
 8007a24:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007a26:	24c8      	movs	r4, #200	; 0xc8
 8007a28:	193b      	adds	r3, r7, r4
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	23c6      	movs	r3, #198	; 0xc6
 8007a2e:	001a      	movs	r2, r3
 8007a30:	2100      	movs	r1, #0
 8007a32:	f004 f9f3 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <astronode_send_cfg_sr+0x64>)
 8007a38:	25c8      	movs	r5, #200	; 0xc8
 8007a3a:	006d      	lsls	r5, r5, #1
 8007a3c:	195b      	adds	r3, r3, r5
 8007a3e:	19db      	adds	r3, r3, r7
 8007a40:	0018      	movs	r0, r3
 8007a42:	23c6      	movs	r3, #198	; 0xc6
 8007a44:	001a      	movs	r2, r3
 8007a46:	2100      	movs	r1, #0
 8007a48:	f004 f9e8 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007a4c:	193b      	adds	r3, r7, r4
 8007a4e:	2210      	movs	r2, #16
 8007a50:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007a52:	003a      	movs	r2, r7
 8007a54:	193b      	adds	r3, r7, r4
 8007a56:	0011      	movs	r1, r2
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f001 faa9 	bl	8008fb0 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007a5e:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <astronode_send_cfg_sr+0x64>)
 8007a60:	195b      	adds	r3, r3, r5
 8007a62:	19db      	adds	r3, r3, r7
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b90      	cmp	r3, #144	; 0x90
 8007a68:	d104      	bne.n	8007a74 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007a6a:	4b07      	ldr	r3, [pc, #28]	; (8007a88 <astronode_send_cfg_sr+0x68>)
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	f7fb f97b 	bl	8002d68 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007a72:	e003      	b.n	8007a7c <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <astronode_send_cfg_sr+0x6c>)
 8007a76:	0018      	movs	r0, r3
 8007a78:	f7fb f976 	bl	8002d68 <send_debug_logs>
}
 8007a7c:	46c0      	nop			; (mov r8, r8)
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b064      	add	sp, #400	; 0x190
 8007a82:	bdb0      	pop	{r4, r5, r7, pc}
 8007a84:	fffffe70 	.word	0xfffffe70
 8007a88:	08012e70 	.word	0x08012e70
 8007a8c:	08012ea4 	.word	0x08012ea4

08007a90 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a92:	b0e7      	sub	sp, #412	; 0x19c
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	0005      	movs	r5, r0
 8007a98:	000c      	movs	r4, r1
 8007a9a:	0010      	movs	r0, r2
 8007a9c:	0019      	movs	r1, r3
 8007a9e:	4b4b      	ldr	r3, [pc, #300]	; (8007bcc <astronode_send_cfg_wr+0x13c>)
 8007aa0:	26cc      	movs	r6, #204	; 0xcc
 8007aa2:	0076      	lsls	r6, r6, #1
 8007aa4:	199b      	adds	r3, r3, r6
 8007aa6:	19db      	adds	r3, r3, r7
 8007aa8:	1c2a      	adds	r2, r5, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	4b48      	ldr	r3, [pc, #288]	; (8007bd0 <astronode_send_cfg_wr+0x140>)
 8007aae:	0035      	movs	r5, r6
 8007ab0:	195b      	adds	r3, r3, r5
 8007ab2:	19db      	adds	r3, r3, r7
 8007ab4:	1c22      	adds	r2, r4, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	4b46      	ldr	r3, [pc, #280]	; (8007bd4 <astronode_send_cfg_wr+0x144>)
 8007aba:	002c      	movs	r4, r5
 8007abc:	191b      	adds	r3, r3, r4
 8007abe:	19db      	adds	r3, r3, r7
 8007ac0:	1c02      	adds	r2, r0, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
 8007ac4:	4b44      	ldr	r3, [pc, #272]	; (8007bd8 <astronode_send_cfg_wr+0x148>)
 8007ac6:	191b      	adds	r3, r3, r4
 8007ac8:	19db      	adds	r3, r3, r7
 8007aca:	1c0a      	adds	r2, r1, #0
 8007acc:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007ace:	25d0      	movs	r5, #208	; 0xd0
 8007ad0:	197b      	adds	r3, r7, r5
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	23c6      	movs	r3, #198	; 0xc6
 8007ad6:	001a      	movs	r2, r3
 8007ad8:	2100      	movs	r1, #0
 8007ada:	f004 f99f 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007ade:	4b3f      	ldr	r3, [pc, #252]	; (8007bdc <astronode_send_cfg_wr+0x14c>)
 8007ae0:	191b      	adds	r3, r3, r4
 8007ae2:	19db      	adds	r3, r3, r7
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	23c6      	movs	r3, #198	; 0xc6
 8007ae8:	001a      	movs	r2, r3
 8007aea:	2100      	movs	r1, #0
 8007aec:	f004 f996 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007af0:	0029      	movs	r1, r5
 8007af2:	187b      	adds	r3, r7, r1
 8007af4:	2205      	movs	r2, #5
 8007af6:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007af8:	4b34      	ldr	r3, [pc, #208]	; (8007bcc <astronode_send_cfg_wr+0x13c>)
 8007afa:	191b      	adds	r3, r3, r4
 8007afc:	19db      	adds	r3, r3, r7
 8007afe:	2200      	movs	r2, #0
 8007b00:	569a      	ldrsb	r2, [r3, r2]
 8007b02:	4b33      	ldr	r3, [pc, #204]	; (8007bd0 <astronode_send_cfg_wr+0x140>)
 8007b04:	191b      	adds	r3, r3, r4
 8007b06:	19db      	adds	r3, r3, r7
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	b25b      	sxtb	r3, r3
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007b12:	4b30      	ldr	r3, [pc, #192]	; (8007bd4 <astronode_send_cfg_wr+0x144>)
 8007b14:	191b      	adds	r3, r3, r4
 8007b16:	19db      	adds	r3, r3, r7
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	b25b      	sxtb	r3, r3
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007b22:	4b2d      	ldr	r3, [pc, #180]	; (8007bd8 <astronode_send_cfg_wr+0x148>)
 8007b24:	191b      	adds	r3, r3, r4
 8007b26:	19db      	adds	r3, r3, r7
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	b25b      	sxtb	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b25b      	sxtb	r3, r3
 8007b32:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007b34:	187b      	adds	r3, r7, r1
 8007b36:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007b38:	23d4      	movs	r3, #212	; 0xd4
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	2508      	movs	r5, #8
 8007b3e:	195b      	adds	r3, r3, r5
 8007b40:	19db      	adds	r3, r3, r7
 8007b42:	2200      	movs	r2, #0
 8007b44:	569a      	ldrsb	r2, [r3, r2]
 8007b46:	23d6      	movs	r3, #214	; 0xd6
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	195b      	adds	r3, r3, r5
 8007b4c:	19db      	adds	r3, r3, r7
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	b25b      	sxtb	r3, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007b58:	23d8      	movs	r3, #216	; 0xd8
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	195b      	adds	r3, r3, r5
 8007b5e:	19db      	adds	r3, r3, r7
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	b25b      	sxtb	r3, r3
 8007b66:	4313      	orrs	r3, r2
 8007b68:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007b6a:	23da      	movs	r3, #218	; 0xda
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	195b      	adds	r3, r3, r5
 8007b70:	19db      	adds	r3, r3, r7
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	b25b      	sxtb	r3, r3
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	b25b      	sxtb	r3, r3
 8007b7c:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007b7e:	187b      	adds	r3, r7, r1
 8007b80:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007b82:	0008      	movs	r0, r1
 8007b84:	187b      	adds	r3, r7, r1
 8007b86:	22c4      	movs	r2, #196	; 0xc4
 8007b88:	2103      	movs	r1, #3
 8007b8a:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007b8c:	002b      	movs	r3, r5
 8007b8e:	18fa      	adds	r2, r7, r3
 8007b90:	183b      	adds	r3, r7, r0
 8007b92:	0011      	movs	r1, r2
 8007b94:	0018      	movs	r0, r3
 8007b96:	f001 fa0b 	bl	8008fb0 <astronode_transport_send_receive>
 8007b9a:	0003      	movs	r3, r0
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d10f      	bne.n	8007bc0 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007ba0:	4b0e      	ldr	r3, [pc, #56]	; (8007bdc <astronode_send_cfg_wr+0x14c>)
 8007ba2:	191b      	adds	r3, r3, r4
 8007ba4:	19db      	adds	r3, r3, r7
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b85      	cmp	r3, #133	; 0x85
 8007baa:	d105      	bne.n	8007bb8 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007bac:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <astronode_send_cfg_wr+0x150>)
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f7fb f8da 	bl	8002d68 <send_debug_logs>
            return true ;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e004      	b.n	8007bc2 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <astronode_send_cfg_wr+0x154>)
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f7fb f8d4 	bl	8002d68 <send_debug_logs>
        }
    }
    return false ;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b067      	add	sp, #412	; 0x19c
 8007bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	fffffe6f 	.word	0xfffffe6f
 8007bd0:	fffffe6e 	.word	0xfffffe6e
 8007bd4:	fffffe6d 	.word	0xfffffe6d
 8007bd8:	fffffe6c 	.word	0xfffffe6c
 8007bdc:	fffffe70 	.word	0xfffffe70
 8007be0:	08012ed8 	.word	0x08012ed8
 8007be4:	08012f04 	.word	0x08012f04

08007be8 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bea:	b0ed      	sub	sp, #436	; 0x1b4
 8007bec:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007bee:	21c8      	movs	r1, #200	; 0xc8
 8007bf0:	2318      	movs	r3, #24
 8007bf2:	18cb      	adds	r3, r1, r3
 8007bf4:	19db      	adds	r3, r3, r7
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	23c6      	movs	r3, #198	; 0xc6
 8007bfa:	001a      	movs	r2, r3
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	f004 f90d 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007c02:	4b4a      	ldr	r3, [pc, #296]	; (8007d2c <astronode_send_mgi_rr+0x144>)
 8007c04:	26cc      	movs	r6, #204	; 0xcc
 8007c06:	0076      	lsls	r6, r6, #1
 8007c08:	199b      	adds	r3, r3, r6
 8007c0a:	2218      	movs	r2, #24
 8007c0c:	4694      	mov	ip, r2
 8007c0e:	44bc      	add	ip, r7
 8007c10:	4463      	add	r3, ip
 8007c12:	0018      	movs	r0, r3
 8007c14:	23c6      	movs	r3, #198	; 0xc6
 8007c16:	001a      	movs	r2, r3
 8007c18:	2100      	movs	r1, #0
 8007c1a:	f004 f8ff 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007c1e:	21c8      	movs	r1, #200	; 0xc8
 8007c20:	2318      	movs	r3, #24
 8007c22:	18cb      	adds	r3, r1, r3
 8007c24:	19db      	adds	r3, r3, r7
 8007c26:	2219      	movs	r2, #25
 8007c28:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007c2a:	2318      	movs	r3, #24
 8007c2c:	18fa      	adds	r2, r7, r3
 8007c2e:	2318      	movs	r3, #24
 8007c30:	18cb      	adds	r3, r1, r3
 8007c32:	19db      	adds	r3, r3, r7
 8007c34:	0011      	movs	r1, r2
 8007c36:	0018      	movs	r0, r3
 8007c38:	f001 f9ba 	bl	8008fb0 <astronode_transport_send_receive>
 8007c3c:	0003      	movs	r3, r0
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d16f      	bne.n	8007d22 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007c42:	4b3a      	ldr	r3, [pc, #232]	; (8007d2c <astronode_send_mgi_rr+0x144>)
 8007c44:	0032      	movs	r2, r6
 8007c46:	189b      	adds	r3, r3, r2
 8007c48:	2118      	movs	r1, #24
 8007c4a:	468c      	mov	ip, r1
 8007c4c:	44bc      	add	ip, r7
 8007c4e:	4463      	add	r3, ip
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b99      	cmp	r3, #153	; 0x99
 8007c54:	d161      	bne.n	8007d1a <astronode_send_mgi_rr+0x132>
        {
 8007c56:	466b      	mov	r3, sp
 8007c58:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007c5a:	4b34      	ldr	r3, [pc, #208]	; (8007d2c <astronode_send_mgi_rr+0x144>)
 8007c5c:	189b      	adds	r3, r3, r2
 8007c5e:	2218      	movs	r2, #24
 8007c60:	4694      	mov	ip, r2
 8007c62:	44bc      	add	ip, r7
 8007c64:	4463      	add	r3, ip
 8007c66:	22c4      	movs	r2, #196	; 0xc4
 8007c68:	5a9b      	ldrh	r3, [r3, r2]
 8007c6a:	001a      	movs	r2, r3
 8007c6c:	3a01      	subs	r2, #1
 8007c6e:	21ca      	movs	r1, #202	; 0xca
 8007c70:	0049      	lsls	r1, r1, #1
 8007c72:	2018      	movs	r0, #24
 8007c74:	1809      	adds	r1, r1, r0
 8007c76:	19c9      	adds	r1, r1, r7
 8007c78:	600a      	str	r2, [r1, #0]
 8007c7a:	001c      	movs	r4, r3
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	0015      	movs	r5, r2
 8007c80:	0020      	movs	r0, r4
 8007c82:	0029      	movs	r1, r5
 8007c84:	0004      	movs	r4, r0
 8007c86:	0f62      	lsrs	r2, r4, #29
 8007c88:	000c      	movs	r4, r1
 8007c8a:	00e4      	lsls	r4, r4, #3
 8007c8c:	617c      	str	r4, [r7, #20]
 8007c8e:	697c      	ldr	r4, [r7, #20]
 8007c90:	4314      	orrs	r4, r2
 8007c92:	617c      	str	r4, [r7, #20]
 8007c94:	0001      	movs	r1, r0
 8007c96:	00c9      	lsls	r1, r1, #3
 8007c98:	6139      	str	r1, [r7, #16]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	6838      	ldr	r0, [r7, #0]
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	0004      	movs	r4, r0
 8007ca6:	0f62      	lsrs	r2, r4, #29
 8007ca8:	000c      	movs	r4, r1
 8007caa:	00e4      	lsls	r4, r4, #3
 8007cac:	60fc      	str	r4, [r7, #12]
 8007cae:	68fc      	ldr	r4, [r7, #12]
 8007cb0:	4314      	orrs	r4, r2
 8007cb2:	60fc      	str	r4, [r7, #12]
 8007cb4:	0001      	movs	r1, r0
 8007cb6:	00ca      	lsls	r2, r1, #3
 8007cb8:	60ba      	str	r2, [r7, #8]
 8007cba:	3307      	adds	r3, #7
 8007cbc:	08db      	lsrs	r3, r3, #3
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	4669      	mov	r1, sp
 8007cc2:	1acb      	subs	r3, r1, r3
 8007cc4:	469d      	mov	sp, r3
 8007cc6:	466b      	mov	r3, sp
 8007cc8:	3300      	adds	r3, #0
 8007cca:	24c8      	movs	r4, #200	; 0xc8
 8007ccc:	0064      	lsls	r4, r4, #1
 8007cce:	2218      	movs	r2, #24
 8007cd0:	18a2      	adds	r2, r4, r2
 8007cd2:	19d1      	adds	r1, r2, r7
 8007cd4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007cd6:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <astronode_send_mgi_rr+0x148>)
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f7fb f845 	bl	8002d68 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <astronode_send_mgi_rr+0x144>)
 8007ce0:	22cc      	movs	r2, #204	; 0xcc
 8007ce2:	0052      	lsls	r2, r2, #1
 8007ce4:	189b      	adds	r3, r3, r2
 8007ce6:	2218      	movs	r2, #24
 8007ce8:	4694      	mov	ip, r2
 8007cea:	44bc      	add	ip, r7
 8007cec:	4463      	add	r3, ip
 8007cee:	22c4      	movs	r2, #196	; 0xc4
 8007cf0:	5a9b      	ldrh	r3, [r3, r2]
 8007cf2:	0019      	movs	r1, r3
 8007cf4:	2318      	movs	r3, #24
 8007cf6:	18fb      	adds	r3, r7, r3
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	4a0e      	ldr	r2, [pc, #56]	; (8007d34 <astronode_send_mgi_rr+0x14c>)
 8007cfc:	2018      	movs	r0, #24
 8007cfe:	1820      	adds	r0, r4, r0
 8007d00:	19c0      	adds	r0, r0, r7
 8007d02:	6800      	ldr	r0, [r0, #0]
 8007d04:	f003 ffc0 	bl	800bc88 <snprintf>
            send_debug_logs(guid);
 8007d08:	2318      	movs	r3, #24
 8007d0a:	18e3      	adds	r3, r4, r3
 8007d0c:	19db      	adds	r3, r3, r7
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	0018      	movs	r0, r3
 8007d12:	f7fb f829 	bl	8002d68 <send_debug_logs>
 8007d16:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007d18:	e003      	b.n	8007d22 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007d1a:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <astronode_send_mgi_rr+0x150>)
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f7fb f823 	bl	8002d68 <send_debug_logs>
}
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	46bd      	mov	sp, r7
 8007d26:	b06d      	add	sp, #436	; 0x1b4
 8007d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	fffffe68 	.word	0xfffffe68
 8007d30:	08012f90 	.word	0x08012f90
 8007d34:	08012fa0 	.word	0x08012fa0
 8007d38:	08012fa4 	.word	0x08012fa4

08007d3c <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d3e:	b0ed      	sub	sp, #436	; 0x1b4
 8007d40:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007d42:	21c8      	movs	r1, #200	; 0xc8
 8007d44:	2318      	movs	r3, #24
 8007d46:	18cb      	adds	r3, r1, r3
 8007d48:	19db      	adds	r3, r3, r7
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	23c6      	movs	r3, #198	; 0xc6
 8007d4e:	001a      	movs	r2, r3
 8007d50:	2100      	movs	r1, #0
 8007d52:	f004 f863 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007d56:	4b4a      	ldr	r3, [pc, #296]	; (8007e80 <astronode_send_msn_rr+0x144>)
 8007d58:	26cc      	movs	r6, #204	; 0xcc
 8007d5a:	0076      	lsls	r6, r6, #1
 8007d5c:	199b      	adds	r3, r3, r6
 8007d5e:	2218      	movs	r2, #24
 8007d60:	4694      	mov	ip, r2
 8007d62:	44bc      	add	ip, r7
 8007d64:	4463      	add	r3, ip
 8007d66:	0018      	movs	r0, r3
 8007d68:	23c6      	movs	r3, #198	; 0xc6
 8007d6a:	001a      	movs	r2, r3
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	f004 f855 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007d72:	21c8      	movs	r1, #200	; 0xc8
 8007d74:	2318      	movs	r3, #24
 8007d76:	18cb      	adds	r3, r1, r3
 8007d78:	19db      	adds	r3, r3, r7
 8007d7a:	221a      	movs	r2, #26
 8007d7c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007d7e:	2318      	movs	r3, #24
 8007d80:	18fa      	adds	r2, r7, r3
 8007d82:	2318      	movs	r3, #24
 8007d84:	18cb      	adds	r3, r1, r3
 8007d86:	19db      	adds	r3, r3, r7
 8007d88:	0011      	movs	r1, r2
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f001 f910 	bl	8008fb0 <astronode_transport_send_receive>
 8007d90:	0003      	movs	r3, r0
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d16f      	bne.n	8007e76 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007d96:	4b3a      	ldr	r3, [pc, #232]	; (8007e80 <astronode_send_msn_rr+0x144>)
 8007d98:	0032      	movs	r2, r6
 8007d9a:	189b      	adds	r3, r3, r2
 8007d9c:	2118      	movs	r1, #24
 8007d9e:	468c      	mov	ip, r1
 8007da0:	44bc      	add	ip, r7
 8007da2:	4463      	add	r3, ip
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b9a      	cmp	r3, #154	; 0x9a
 8007da8:	d161      	bne.n	8007e6e <astronode_send_msn_rr+0x132>
        {
 8007daa:	466b      	mov	r3, sp
 8007dac:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007dae:	4b34      	ldr	r3, [pc, #208]	; (8007e80 <astronode_send_msn_rr+0x144>)
 8007db0:	189b      	adds	r3, r3, r2
 8007db2:	2218      	movs	r2, #24
 8007db4:	4694      	mov	ip, r2
 8007db6:	44bc      	add	ip, r7
 8007db8:	4463      	add	r3, ip
 8007dba:	22c4      	movs	r2, #196	; 0xc4
 8007dbc:	5a9b      	ldrh	r3, [r3, r2]
 8007dbe:	001a      	movs	r2, r3
 8007dc0:	3a01      	subs	r2, #1
 8007dc2:	21ca      	movs	r1, #202	; 0xca
 8007dc4:	0049      	lsls	r1, r1, #1
 8007dc6:	2018      	movs	r0, #24
 8007dc8:	1809      	adds	r1, r1, r0
 8007dca:	19c9      	adds	r1, r1, r7
 8007dcc:	600a      	str	r2, [r1, #0]
 8007dce:	001c      	movs	r4, r3
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	0015      	movs	r5, r2
 8007dd4:	0020      	movs	r0, r4
 8007dd6:	0029      	movs	r1, r5
 8007dd8:	0004      	movs	r4, r0
 8007dda:	0f62      	lsrs	r2, r4, #29
 8007ddc:	000c      	movs	r4, r1
 8007dde:	00e4      	lsls	r4, r4, #3
 8007de0:	617c      	str	r4, [r7, #20]
 8007de2:	697c      	ldr	r4, [r7, #20]
 8007de4:	4314      	orrs	r4, r2
 8007de6:	617c      	str	r4, [r7, #20]
 8007de8:	0001      	movs	r1, r0
 8007dea:	00c9      	lsls	r1, r1, #3
 8007dec:	6139      	str	r1, [r7, #16]
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	2200      	movs	r2, #0
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	6838      	ldr	r0, [r7, #0]
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	0004      	movs	r4, r0
 8007dfa:	0f62      	lsrs	r2, r4, #29
 8007dfc:	000c      	movs	r4, r1
 8007dfe:	00e4      	lsls	r4, r4, #3
 8007e00:	60fc      	str	r4, [r7, #12]
 8007e02:	68fc      	ldr	r4, [r7, #12]
 8007e04:	4314      	orrs	r4, r2
 8007e06:	60fc      	str	r4, [r7, #12]
 8007e08:	0001      	movs	r1, r0
 8007e0a:	00ca      	lsls	r2, r1, #3
 8007e0c:	60ba      	str	r2, [r7, #8]
 8007e0e:	3307      	adds	r3, #7
 8007e10:	08db      	lsrs	r3, r3, #3
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4669      	mov	r1, sp
 8007e16:	1acb      	subs	r3, r1, r3
 8007e18:	469d      	mov	sp, r3
 8007e1a:	466b      	mov	r3, sp
 8007e1c:	3300      	adds	r3, #0
 8007e1e:	24c8      	movs	r4, #200	; 0xc8
 8007e20:	0064      	lsls	r4, r4, #1
 8007e22:	2218      	movs	r2, #24
 8007e24:	18a2      	adds	r2, r4, r2
 8007e26:	19d1      	adds	r1, r2, r7
 8007e28:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007e2a:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <astronode_send_msn_rr+0x148>)
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	f7fa ff9b 	bl	8002d68 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <astronode_send_msn_rr+0x144>)
 8007e34:	22cc      	movs	r2, #204	; 0xcc
 8007e36:	0052      	lsls	r2, r2, #1
 8007e38:	189b      	adds	r3, r3, r2
 8007e3a:	2218      	movs	r2, #24
 8007e3c:	4694      	mov	ip, r2
 8007e3e:	44bc      	add	ip, r7
 8007e40:	4463      	add	r3, ip
 8007e42:	22c4      	movs	r2, #196	; 0xc4
 8007e44:	5a9b      	ldrh	r3, [r3, r2]
 8007e46:	0019      	movs	r1, r3
 8007e48:	2318      	movs	r3, #24
 8007e4a:	18fb      	adds	r3, r7, r3
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	4a0e      	ldr	r2, [pc, #56]	; (8007e88 <astronode_send_msn_rr+0x14c>)
 8007e50:	2018      	movs	r0, #24
 8007e52:	1820      	adds	r0, r4, r0
 8007e54:	19c0      	adds	r0, r0, r7
 8007e56:	6800      	ldr	r0, [r0, #0]
 8007e58:	f003 ff16 	bl	800bc88 <snprintf>
            send_debug_logs(serial_number);
 8007e5c:	2318      	movs	r3, #24
 8007e5e:	18e3      	adds	r3, r4, r3
 8007e60:	19db      	adds	r3, r3, r7
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	0018      	movs	r0, r3
 8007e66:	f7fa ff7f 	bl	8002d68 <send_debug_logs>
 8007e6a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007e6c:	e003      	b.n	8007e76 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007e6e:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <astronode_send_msn_rr+0x150>)
 8007e70:	0018      	movs	r0, r3
 8007e72:	f7fa ff79 	bl	8002d68 <send_debug_logs>
}
 8007e76:	46c0      	nop			; (mov r8, r8)
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	b06d      	add	sp, #436	; 0x1b4
 8007e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e7e:	46c0      	nop			; (mov r8, r8)
 8007e80:	fffffe68 	.word	0xfffffe68
 8007e84:	08012fc0 	.word	0x08012fc0
 8007e88:	08012fa0 	.word	0x08012fa0
 8007e8c:	08012fdc 	.word	0x08012fdc

08007e90 <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 8007e90:	b5b0      	push	{r4, r5, r7, lr}
 8007e92:	b0fa      	sub	sp, #488	; 0x1e8
 8007e94:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007e96:	258e      	movs	r5, #142	; 0x8e
 8007e98:	006d      	lsls	r5, r5, #1
 8007e9a:	197b      	adds	r3, r7, r5
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	23c6      	movs	r3, #198	; 0xc6
 8007ea0:	001a      	movs	r2, r3
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	f003 ffba 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007ea8:	4b26      	ldr	r3, [pc, #152]	; (8007f44 <astronode_send_nco_rr+0xb4>)
 8007eaa:	24f4      	movs	r4, #244	; 0xf4
 8007eac:	0064      	lsls	r4, r4, #1
 8007eae:	191b      	adds	r3, r3, r4
 8007eb0:	19db      	adds	r3, r3, r7
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	23c6      	movs	r3, #198	; 0xc6
 8007eb6:	001a      	movs	r2, r3
 8007eb8:	2100      	movs	r1, #0
 8007eba:	f003 ffaf 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 8007ebe:	197b      	adds	r3, r7, r5
 8007ec0:	2218      	movs	r2, #24
 8007ec2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007ec4:	2354      	movs	r3, #84	; 0x54
 8007ec6:	18fa      	adds	r2, r7, r3
 8007ec8:	197b      	adds	r3, r7, r5
 8007eca:	0011      	movs	r1, r2
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f001 f86f 	bl	8008fb0 <astronode_transport_send_receive>
 8007ed2:	0003      	movs	r3, r0
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d131      	bne.n	8007f3c <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 8007ed8:	4b1a      	ldr	r3, [pc, #104]	; (8007f44 <astronode_send_nco_rr+0xb4>)
 8007eda:	0021      	movs	r1, r4
 8007edc:	185b      	adds	r3, r3, r1
 8007ede:	19db      	adds	r3, r3, r7
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b98      	cmp	r3, #152	; 0x98
 8007ee4:	d126      	bne.n	8007f34 <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 8007ee6:	4b17      	ldr	r3, [pc, #92]	; (8007f44 <astronode_send_nco_rr+0xb4>)
 8007ee8:	185b      	adds	r3, r3, r1
 8007eea:	19db      	adds	r3, r3, r7
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8007ef0:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <astronode_send_nco_rr+0xb4>)
 8007ef2:	185b      	adds	r3, r3, r1
 8007ef4:	19db      	adds	r3, r3, r7
 8007ef6:	789b      	ldrb	r3, [r3, #2]
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 8007efc:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <astronode_send_nco_rr+0xb4>)
 8007efe:	185b      	adds	r3, r3, r1
 8007f00:	19db      	adds	r3, r3, r7
 8007f02:	78db      	ldrb	r3, [r3, #3]
 8007f04:	041b      	lsls	r3, r3, #16
 8007f06:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 8007f08:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <astronode_send_nco_rr+0xb4>)
 8007f0a:	185b      	adds	r3, r3, r1
 8007f0c:	19db      	adds	r3, r3, r7
 8007f0e:	791b      	ldrb	r3, [r3, #4]
 8007f10:	061b      	lsls	r3, r3, #24
 8007f12:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 8007f14:	22f2      	movs	r2, #242	; 0xf2
 8007f16:	0052      	lsls	r2, r2, #1
 8007f18:	18b9      	adds	r1, r7, r2
 8007f1a:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 8007f1c:	18bb      	adds	r3, r7, r2
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	4909      	ldr	r1, [pc, #36]	; (8007f48 <astronode_send_nco_rr+0xb8>)
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	0018      	movs	r0, r3
 8007f26:	f003 fee3 	bl	800bcf0 <sprintf>
            send_debug_logs(str);
 8007f2a:	1d3b      	adds	r3, r7, #4
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f7fa ff1b 	bl	8002d68 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 8007f32:	e003      	b.n	8007f3c <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 8007f34:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <astronode_send_nco_rr+0xbc>)
 8007f36:	0018      	movs	r0, r3
 8007f38:	f7fa ff16 	bl	8002d68 <send_debug_logs>
}
 8007f3c:	46c0      	nop			; (mov r8, r8)
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b07a      	add	sp, #488	; 0x1e8
 8007f42:	bdb0      	pop	{r4, r5, r7, pc}
 8007f44:	fffffe6c 	.word	0xfffffe6c
 8007f48:	08013004 	.word	0x08013004
 8007f4c:	0801304c 	.word	0x0801304c

08007f50 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 8007f50:	b5b0      	push	{r4, r5, r7, lr}
 8007f52:	b0e4      	sub	sp, #400	; 0x190
 8007f54:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007f56:	24c8      	movs	r4, #200	; 0xc8
 8007f58:	193b      	adds	r3, r7, r4
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	23c6      	movs	r3, #198	; 0xc6
 8007f5e:	001a      	movs	r2, r3
 8007f60:	2100      	movs	r1, #0
 8007f62:	f003 ff5b 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007f66:	4b31      	ldr	r3, [pc, #196]	; (800802c <astronode_send_evt_rr+0xdc>)
 8007f68:	25c8      	movs	r5, #200	; 0xc8
 8007f6a:	006d      	lsls	r5, r5, #1
 8007f6c:	195b      	adds	r3, r3, r5
 8007f6e:	19db      	adds	r3, r3, r7
 8007f70:	0018      	movs	r0, r3
 8007f72:	23c6      	movs	r3, #198	; 0xc6
 8007f74:	001a      	movs	r2, r3
 8007f76:	2100      	movs	r1, #0
 8007f78:	f003 ff50 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007f7c:	193b      	adds	r3, r7, r4
 8007f7e:	2265      	movs	r2, #101	; 0x65
 8007f80:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f82:	003a      	movs	r2, r7
 8007f84:	193b      	adds	r3, r7, r4
 8007f86:	0011      	movs	r1, r2
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f001 f811 	bl	8008fb0 <astronode_transport_send_receive>
 8007f8e:	0003      	movs	r3, r0
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d147      	bne.n	8008024 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007f94:	4b25      	ldr	r3, [pc, #148]	; (800802c <astronode_send_evt_rr+0xdc>)
 8007f96:	195b      	adds	r3, r3, r5
 8007f98:	19db      	adds	r3, r3, r7
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2be5      	cmp	r3, #229	; 0xe5
 8007f9e:	d141      	bne.n	8008024 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007fa0:	4b22      	ldr	r3, [pc, #136]	; (800802c <astronode_send_evt_rr+0xdc>)
 8007fa2:	195b      	adds	r3, r3, r5
 8007fa4:	19db      	adds	r3, r3, r7
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	001a      	movs	r2, r3
 8007faa:	2301      	movs	r3, #1
 8007fac:	4013      	ands	r3, r2
 8007fae:	d006      	beq.n	8007fbe <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007fb0:	4b1f      	ldr	r3, [pc, #124]	; (8008030 <astronode_send_evt_rr+0xe0>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007fb6:	4b1f      	ldr	r3, [pc, #124]	; (8008034 <astronode_send_evt_rr+0xe4>)
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f7fa fed5 	bl	8002d68 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007fbe:	4b1b      	ldr	r3, [pc, #108]	; (800802c <astronode_send_evt_rr+0xdc>)
 8007fc0:	22c8      	movs	r2, #200	; 0xc8
 8007fc2:	0052      	lsls	r2, r2, #1
 8007fc4:	189b      	adds	r3, r3, r2
 8007fc6:	19db      	adds	r3, r3, r7
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	001a      	movs	r2, r3
 8007fcc:	2302      	movs	r3, #2
 8007fce:	4013      	ands	r3, r2
 8007fd0:	d006      	beq.n	8007fe0 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007fd2:	4b19      	ldr	r3, [pc, #100]	; (8008038 <astronode_send_evt_rr+0xe8>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007fd8:	4b18      	ldr	r3, [pc, #96]	; (800803c <astronode_send_evt_rr+0xec>)
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f7fa fec4 	bl	8002d68 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007fe0:	4b12      	ldr	r3, [pc, #72]	; (800802c <astronode_send_evt_rr+0xdc>)
 8007fe2:	22c8      	movs	r2, #200	; 0xc8
 8007fe4:	0052      	lsls	r2, r2, #1
 8007fe6:	189b      	adds	r3, r3, r2
 8007fe8:	19db      	adds	r3, r3, r7
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	001a      	movs	r2, r3
 8007fee:	2304      	movs	r3, #4
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	d006      	beq.n	8008002 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007ff4:	4b12      	ldr	r3, [pc, #72]	; (8008040 <astronode_send_evt_rr+0xf0>)
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <astronode_send_evt_rr+0xf4>)
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f7fa feb3 	bl	8002d68 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8008002:	4b0a      	ldr	r3, [pc, #40]	; (800802c <astronode_send_evt_rr+0xdc>)
 8008004:	22c8      	movs	r2, #200	; 0xc8
 8008006:	0052      	lsls	r2, r2, #1
 8008008:	189b      	adds	r3, r3, r2
 800800a:	19db      	adds	r3, r3, r7
 800800c:	785b      	ldrb	r3, [r3, #1]
 800800e:	001a      	movs	r2, r3
 8008010:	2308      	movs	r3, #8
 8008012:	4013      	ands	r3, r2
 8008014:	d006      	beq.n	8008024 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8008016:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <astronode_send_evt_rr+0xf8>)
 8008018:	2201      	movs	r2, #1
 800801a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <astronode_send_evt_rr+0xfc>)
 800801e:	0018      	movs	r0, r3
 8008020:	f7fa fea2 	bl	8002d68 <send_debug_logs>
            }

        }
    }
}
 8008024:	46c0      	nop			; (mov r8, r8)
 8008026:	46bd      	mov	sp, r7
 8008028:	b064      	add	sp, #400	; 0x190
 800802a:	bdb0      	pop	{r4, r5, r7, pc}
 800802c:	fffffe70 	.word	0xfffffe70
 8008030:	20000b24 	.word	0x20000b24
 8008034:	08013084 	.word	0x08013084
 8008038:	20000b25 	.word	0x20000b25
 800803c:	080130a8 	.word	0x080130a8
 8008040:	20000b26 	.word	0x20000b26
 8008044:	080130c0 	.word	0x080130c0
 8008048:	20000b27 	.word	0x20000b27
 800804c:	080130d4 	.word	0x080130d4

08008050 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8008050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008052:	b0e7      	sub	sp, #412	; 0x19c
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 800805a:	24d0      	movs	r4, #208	; 0xd0
 800805c:	193b      	adds	r3, r7, r4
 800805e:	0018      	movs	r0, r3
 8008060:	23c6      	movs	r3, #198	; 0xc6
 8008062:	001a      	movs	r2, r3
 8008064:	2100      	movs	r1, #0
 8008066:	f003 fed9 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 800806a:	4b56      	ldr	r3, [pc, #344]	; (80081c4 <astronode_send_geo_wr+0x174>)
 800806c:	26cc      	movs	r6, #204	; 0xcc
 800806e:	0076      	lsls	r6, r6, #1
 8008070:	199b      	adds	r3, r3, r6
 8008072:	19db      	adds	r3, r3, r7
 8008074:	0018      	movs	r0, r3
 8008076:	23c6      	movs	r3, #198	; 0xc6
 8008078:	001a      	movs	r2, r3
 800807a:	2100      	movs	r1, #0
 800807c:	f003 fece 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8008080:	193b      	adds	r3, r7, r4
 8008082:	2235      	movs	r2, #53	; 0x35
 8008084:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8008086:	193b      	adds	r3, r7, r4
 8008088:	22c4      	movs	r2, #196	; 0xc4
 800808a:	5a9b      	ldrh	r3, [r3, r2]
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	b290      	uxth	r0, r2
 8008090:	193a      	adds	r2, r7, r4
 8008092:	21c4      	movs	r1, #196	; 0xc4
 8008094:	5250      	strh	r0, [r2, r1]
 8008096:	0019      	movs	r1, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	b2da      	uxtb	r2, r3
 800809c:	193b      	adds	r3, r7, r4
 800809e:	185b      	adds	r3, r3, r1
 80080a0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	1218      	asrs	r0, r3, #8
 80080a6:	0025      	movs	r5, r4
 80080a8:	197b      	adds	r3, r7, r5
 80080aa:	22c4      	movs	r2, #196	; 0xc4
 80080ac:	5a9b      	ldrh	r3, [r3, r2]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	b294      	uxth	r4, r2
 80080b2:	197a      	adds	r2, r7, r5
 80080b4:	21c4      	movs	r1, #196	; 0xc4
 80080b6:	5254      	strh	r4, [r2, r1]
 80080b8:	0019      	movs	r1, r3
 80080ba:	b2c2      	uxtb	r2, r0
 80080bc:	002c      	movs	r4, r5
 80080be:	193b      	adds	r3, r7, r4
 80080c0:	185b      	adds	r3, r3, r1
 80080c2:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	1418      	asrs	r0, r3, #16
 80080c8:	0025      	movs	r5, r4
 80080ca:	197b      	adds	r3, r7, r5
 80080cc:	22c4      	movs	r2, #196	; 0xc4
 80080ce:	5a9b      	ldrh	r3, [r3, r2]
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	b294      	uxth	r4, r2
 80080d4:	197a      	adds	r2, r7, r5
 80080d6:	21c4      	movs	r1, #196	; 0xc4
 80080d8:	5254      	strh	r4, [r2, r1]
 80080da:	0019      	movs	r1, r3
 80080dc:	b2c2      	uxtb	r2, r0
 80080de:	002c      	movs	r4, r5
 80080e0:	193b      	adds	r3, r7, r4
 80080e2:	185b      	adds	r3, r3, r1
 80080e4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	1618      	asrs	r0, r3, #24
 80080ea:	0025      	movs	r5, r4
 80080ec:	197b      	adds	r3, r7, r5
 80080ee:	22c4      	movs	r2, #196	; 0xc4
 80080f0:	5a9b      	ldrh	r3, [r3, r2]
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	b294      	uxth	r4, r2
 80080f6:	197a      	adds	r2, r7, r5
 80080f8:	21c4      	movs	r1, #196	; 0xc4
 80080fa:	5254      	strh	r4, [r2, r1]
 80080fc:	0019      	movs	r1, r3
 80080fe:	b2c2      	uxtb	r2, r0
 8008100:	002c      	movs	r4, r5
 8008102:	193b      	adds	r3, r7, r4
 8008104:	185b      	adds	r3, r3, r1
 8008106:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008108:	193b      	adds	r3, r7, r4
 800810a:	22c4      	movs	r2, #196	; 0xc4
 800810c:	5a9b      	ldrh	r3, [r3, r2]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	b290      	uxth	r0, r2
 8008112:	193a      	adds	r2, r7, r4
 8008114:	21c4      	movs	r1, #196	; 0xc4
 8008116:	5250      	strh	r0, [r2, r1]
 8008118:	0019      	movs	r1, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	b2da      	uxtb	r2, r3
 800811e:	193b      	adds	r3, r7, r4
 8008120:	185b      	adds	r3, r3, r1
 8008122:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	1218      	asrs	r0, r3, #8
 8008128:	0025      	movs	r5, r4
 800812a:	197b      	adds	r3, r7, r5
 800812c:	22c4      	movs	r2, #196	; 0xc4
 800812e:	5a9b      	ldrh	r3, [r3, r2]
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	b294      	uxth	r4, r2
 8008134:	197a      	adds	r2, r7, r5
 8008136:	21c4      	movs	r1, #196	; 0xc4
 8008138:	5254      	strh	r4, [r2, r1]
 800813a:	0019      	movs	r1, r3
 800813c:	b2c2      	uxtb	r2, r0
 800813e:	002c      	movs	r4, r5
 8008140:	193b      	adds	r3, r7, r4
 8008142:	185b      	adds	r3, r3, r1
 8008144:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	1418      	asrs	r0, r3, #16
 800814a:	0025      	movs	r5, r4
 800814c:	197b      	adds	r3, r7, r5
 800814e:	22c4      	movs	r2, #196	; 0xc4
 8008150:	5a9b      	ldrh	r3, [r3, r2]
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	b294      	uxth	r4, r2
 8008156:	197a      	adds	r2, r7, r5
 8008158:	21c4      	movs	r1, #196	; 0xc4
 800815a:	5254      	strh	r4, [r2, r1]
 800815c:	0019      	movs	r1, r3
 800815e:	b2c2      	uxtb	r2, r0
 8008160:	002c      	movs	r4, r5
 8008162:	193b      	adds	r3, r7, r4
 8008164:	185b      	adds	r3, r3, r1
 8008166:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	1618      	asrs	r0, r3, #24
 800816c:	0025      	movs	r5, r4
 800816e:	197b      	adds	r3, r7, r5
 8008170:	22c4      	movs	r2, #196	; 0xc4
 8008172:	5a9b      	ldrh	r3, [r3, r2]
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	b294      	uxth	r4, r2
 8008178:	197a      	adds	r2, r7, r5
 800817a:	21c4      	movs	r1, #196	; 0xc4
 800817c:	5254      	strh	r4, [r2, r1]
 800817e:	0019      	movs	r1, r3
 8008180:	b2c2      	uxtb	r2, r0
 8008182:	0028      	movs	r0, r5
 8008184:	183b      	adds	r3, r7, r0
 8008186:	185b      	adds	r3, r3, r1
 8008188:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800818a:	2308      	movs	r3, #8
 800818c:	18fa      	adds	r2, r7, r3
 800818e:	183b      	adds	r3, r7, r0
 8008190:	0011      	movs	r1, r2
 8008192:	0018      	movs	r0, r3
 8008194:	f000 ff0c 	bl	8008fb0 <astronode_transport_send_receive>
 8008198:	0003      	movs	r3, r0
 800819a:	2b01      	cmp	r3, #1
 800819c:	d10e      	bne.n	80081bc <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 800819e:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <astronode_send_geo_wr+0x174>)
 80081a0:	199b      	adds	r3, r3, r6
 80081a2:	19db      	adds	r3, r3, r7
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2bb5      	cmp	r3, #181	; 0xb5
 80081a8:	d104      	bne.n	80081b4 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80081aa:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <astronode_send_geo_wr+0x178>)
 80081ac:	0018      	movs	r0, r3
 80081ae:	f7fa fddb 	bl	8002d68 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80081b2:	e003      	b.n	80081bc <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <astronode_send_geo_wr+0x17c>)
 80081b6:	0018      	movs	r0, r3
 80081b8:	f7fa fdd6 	bl	8002d68 <send_debug_logs>
}
 80081bc:	46c0      	nop			; (mov r8, r8)
 80081be:	46bd      	mov	sp, r7
 80081c0:	b067      	add	sp, #412	; 0x19c
 80081c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c4:	fffffe70 	.word	0xfffffe70
 80081c8:	080130e8 	.word	0x080130e8
 80081cc:	08013114 	.word	0x08013114

080081d0 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80081d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d2:	b0fb      	sub	sp, #492	; 0x1ec
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6039      	str	r1, [r7, #0]
 80081d8:	0011      	movs	r1, r2
 80081da:	4b4a      	ldr	r3, [pc, #296]	; (8008304 <astronode_send_pld_er+0x134>)
 80081dc:	26f4      	movs	r6, #244	; 0xf4
 80081de:	0076      	lsls	r6, r6, #1
 80081e0:	199b      	adds	r3, r3, r6
 80081e2:	19db      	adds	r3, r3, r7
 80081e4:	1c02      	adds	r2, r0, #0
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	4b47      	ldr	r3, [pc, #284]	; (8008308 <astronode_send_pld_er+0x138>)
 80081ea:	199b      	adds	r3, r3, r6
 80081ec:	19db      	adds	r3, r3, r7
 80081ee:	1c0a      	adds	r2, r1, #0
 80081f0:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80081f2:	2490      	movs	r4, #144	; 0x90
 80081f4:	0064      	lsls	r4, r4, #1
 80081f6:	193b      	adds	r3, r7, r4
 80081f8:	0018      	movs	r0, r3
 80081fa:	23c6      	movs	r3, #198	; 0xc6
 80081fc:	001a      	movs	r2, r3
 80081fe:	2100      	movs	r1, #0
 8008200:	f003 fe0c 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008204:	4b41      	ldr	r3, [pc, #260]	; (800830c <astronode_send_pld_er+0x13c>)
 8008206:	199b      	adds	r3, r3, r6
 8008208:	19db      	adds	r3, r3, r7
 800820a:	0018      	movs	r0, r3
 800820c:	23c6      	movs	r3, #198	; 0xc6
 800820e:	001a      	movs	r2, r3
 8008210:	2100      	movs	r1, #0
 8008212:	f003 fe03 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8008216:	193b      	adds	r3, r7, r4
 8008218:	2225      	movs	r2, #37	; 0x25
 800821a:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 800821c:	193b      	adds	r3, r7, r4
 800821e:	22c4      	movs	r2, #196	; 0xc4
 8008220:	5a9b      	ldrh	r3, [r3, r2]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	b290      	uxth	r0, r2
 8008226:	193a      	adds	r2, r7, r4
 8008228:	21c4      	movs	r1, #196	; 0xc4
 800822a:	5250      	strh	r0, [r2, r1]
 800822c:	0019      	movs	r1, r3
 800822e:	4b35      	ldr	r3, [pc, #212]	; (8008304 <astronode_send_pld_er+0x134>)
 8008230:	199b      	adds	r3, r3, r6
 8008232:	19db      	adds	r3, r3, r7
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b2da      	uxtb	r2, r3
 8008238:	193b      	adds	r3, r7, r4
 800823a:	185b      	adds	r3, r3, r1
 800823c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800823e:	4b31      	ldr	r3, [pc, #196]	; (8008304 <astronode_send_pld_er+0x134>)
 8008240:	199b      	adds	r3, r3, r6
 8008242:	19db      	adds	r3, r3, r7
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	b298      	uxth	r0, r3
 800824a:	0025      	movs	r5, r4
 800824c:	197b      	adds	r3, r7, r5
 800824e:	22c4      	movs	r2, #196	; 0xc4
 8008250:	5a9b      	ldrh	r3, [r3, r2]
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	b294      	uxth	r4, r2
 8008256:	197a      	adds	r2, r7, r5
 8008258:	21c4      	movs	r1, #196	; 0xc4
 800825a:	5254      	strh	r4, [r2, r1]
 800825c:	0019      	movs	r1, r3
 800825e:	b2c2      	uxtb	r2, r0
 8008260:	002c      	movs	r4, r5
 8008262:	193b      	adds	r3, r7, r4
 8008264:	185b      	adds	r3, r3, r1
 8008266:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8008268:	193b      	adds	r3, r7, r4
 800826a:	22c4      	movs	r2, #196	; 0xc4
 800826c:	5a9b      	ldrh	r3, [r3, r2]
 800826e:	001a      	movs	r2, r3
 8008270:	193b      	adds	r3, r7, r4
 8008272:	189b      	adds	r3, r3, r2
 8008274:	1c58      	adds	r0, r3, #1
 8008276:	4b24      	ldr	r3, [pc, #144]	; (8008308 <astronode_send_pld_er+0x138>)
 8008278:	199b      	adds	r3, r3, r6
 800827a:	19db      	adds	r3, r3, r7
 800827c:	881a      	ldrh	r2, [r3, #0]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	0019      	movs	r1, r3
 8008282:	f003 feb0 	bl	800bfe6 <memcpy>
    request.payload_len = 2 + payload_length;
 8008286:	4b20      	ldr	r3, [pc, #128]	; (8008308 <astronode_send_pld_er+0x138>)
 8008288:	199b      	adds	r3, r3, r6
 800828a:	19db      	adds	r3, r3, r7
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	3302      	adds	r3, #2
 8008290:	b299      	uxth	r1, r3
 8008292:	193b      	adds	r3, r7, r4
 8008294:	22c4      	movs	r2, #196	; 0xc4
 8008296:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008298:	2358      	movs	r3, #88	; 0x58
 800829a:	18fa      	adds	r2, r7, r3
 800829c:	193b      	adds	r3, r7, r4
 800829e:	0011      	movs	r1, r2
 80082a0:	0018      	movs	r0, r3
 80082a2:	f000 fe85 	bl	8008fb0 <astronode_transport_send_receive>
 80082a6:	0003      	movs	r3, r0
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d125      	bne.n	80082f8 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80082ac:	4b17      	ldr	r3, [pc, #92]	; (800830c <astronode_send_pld_er+0x13c>)
 80082ae:	199b      	adds	r3, r3, r6
 80082b0:	19db      	adds	r3, r3, r7
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2ba5      	cmp	r3, #165	; 0xa5
 80082b6:	d10f      	bne.n	80082d8 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 80082b8:	4b12      	ldr	r3, [pc, #72]	; (8008304 <astronode_send_pld_er+0x134>)
 80082ba:	199b      	adds	r3, r3, r6
 80082bc:	19db      	adds	r3, r3, r7
 80082be:	881a      	ldrh	r2, [r3, #0]
 80082c0:	4913      	ldr	r1, [pc, #76]	; (8008310 <astronode_send_pld_er+0x140>)
 80082c2:	2408      	movs	r4, #8
 80082c4:	193b      	adds	r3, r7, r4
 80082c6:	0018      	movs	r0, r3
 80082c8:	f003 fd12 	bl	800bcf0 <sprintf>
            send_debug_logs ( s ) ;
 80082cc:	193b      	adds	r3, r7, r4
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7fa fd4a 	bl	8002d68 <send_debug_logs>
            return true ;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e010      	b.n	80082fa <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80082d8:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <astronode_send_pld_er+0x134>)
 80082da:	22f4      	movs	r2, #244	; 0xf4
 80082dc:	0052      	lsls	r2, r2, #1
 80082de:	189b      	adds	r3, r3, r2
 80082e0:	19db      	adds	r3, r3, r7
 80082e2:	881a      	ldrh	r2, [r3, #0]
 80082e4:	490b      	ldr	r1, [pc, #44]	; (8008314 <astronode_send_pld_er+0x144>)
 80082e6:	2408      	movs	r4, #8
 80082e8:	193b      	adds	r3, r7, r4
 80082ea:	0018      	movs	r0, r3
 80082ec:	f003 fd00 	bl	800bcf0 <sprintf>
            send_debug_logs ( s ) ;
 80082f0:	193b      	adds	r3, r7, r4
 80082f2:	0018      	movs	r0, r3
 80082f4:	f7fa fd38 	bl	8002d68 <send_debug_logs>
        }
    }
    return false ;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	0018      	movs	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	b07b      	add	sp, #492	; 0x1ec
 8008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	fffffe1e 	.word	0xfffffe1e
 8008308:	fffffe1c 	.word	0xfffffe1c
 800830c:	fffffe70 	.word	0xfffffe70
 8008310:	0801318c 	.word	0x0801318c
 8008314:	080131b8 	.word	0x080131b8

08008318 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8008318:	b5b0      	push	{r4, r5, r7, lr}
 800831a:	b0e4      	sub	sp, #400	; 0x190
 800831c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800831e:	24c8      	movs	r4, #200	; 0xc8
 8008320:	193b      	adds	r3, r7, r4
 8008322:	0018      	movs	r0, r3
 8008324:	23c6      	movs	r3, #198	; 0xc6
 8008326:	001a      	movs	r2, r3
 8008328:	2100      	movs	r1, #0
 800832a:	f003 fd77 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 800832e:	4b15      	ldr	r3, [pc, #84]	; (8008384 <astronode_send_pld_fr+0x6c>)
 8008330:	25c8      	movs	r5, #200	; 0xc8
 8008332:	006d      	lsls	r5, r5, #1
 8008334:	195b      	adds	r3, r3, r5
 8008336:	19db      	adds	r3, r3, r7
 8008338:	0018      	movs	r0, r3
 800833a:	23c6      	movs	r3, #198	; 0xc6
 800833c:	001a      	movs	r2, r3
 800833e:	2100      	movs	r1, #0
 8008340:	f003 fd6c 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8008344:	193b      	adds	r3, r7, r4
 8008346:	2227      	movs	r2, #39	; 0x27
 8008348:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800834a:	003a      	movs	r2, r7
 800834c:	193b      	adds	r3, r7, r4
 800834e:	0011      	movs	r1, r2
 8008350:	0018      	movs	r0, r3
 8008352:	f000 fe2d 	bl	8008fb0 <astronode_transport_send_receive>
 8008356:	0003      	movs	r3, r0
 8008358:	2b01      	cmp	r3, #1
 800835a:	d10e      	bne.n	800837a <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 800835c:	4b09      	ldr	r3, [pc, #36]	; (8008384 <astronode_send_pld_fr+0x6c>)
 800835e:	195b      	adds	r3, r3, r5
 8008360:	19db      	adds	r3, r3, r7
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2ba7      	cmp	r3, #167	; 0xa7
 8008366:	d104      	bne.n	8008372 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8008368:	4b07      	ldr	r3, [pc, #28]	; (8008388 <astronode_send_pld_fr+0x70>)
 800836a:	0018      	movs	r0, r3
 800836c:	f7fa fcfc 	bl	8002d68 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008370:	e003      	b.n	800837a <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8008372:	4b06      	ldr	r3, [pc, #24]	; (800838c <astronode_send_pld_fr+0x74>)
 8008374:	0018      	movs	r0, r3
 8008376:	f7fa fcf7 	bl	8002d68 <send_debug_logs>
}
 800837a:	46c0      	nop			; (mov r8, r8)
 800837c:	46bd      	mov	sp, r7
 800837e:	b064      	add	sp, #400	; 0x190
 8008380:	bdb0      	pop	{r4, r5, r7, pc}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	fffffe70 	.word	0xfffffe70
 8008388:	080131e8 	.word	0x080131e8
 800838c:	08013220 	.word	0x08013220

08008390 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008390:	b5b0      	push	{r4, r5, r7, lr}
 8008392:	b0e4      	sub	sp, #400	; 0x190
 8008394:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008396:	24c8      	movs	r4, #200	; 0xc8
 8008398:	193b      	adds	r3, r7, r4
 800839a:	0018      	movs	r0, r3
 800839c:	23c6      	movs	r3, #198	; 0xc6
 800839e:	001a      	movs	r2, r3
 80083a0:	2100      	movs	r1, #0
 80083a2:	f003 fd3b 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 80083a6:	4b16      	ldr	r3, [pc, #88]	; (8008400 <astronode_send_res_cr+0x70>)
 80083a8:	25c8      	movs	r5, #200	; 0xc8
 80083aa:	006d      	lsls	r5, r5, #1
 80083ac:	195b      	adds	r3, r3, r5
 80083ae:	19db      	adds	r3, r3, r7
 80083b0:	0018      	movs	r0, r3
 80083b2:	23c6      	movs	r3, #198	; 0xc6
 80083b4:	001a      	movs	r2, r3
 80083b6:	2100      	movs	r1, #0
 80083b8:	f003 fd30 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80083bc:	193b      	adds	r3, r7, r4
 80083be:	2255      	movs	r2, #85	; 0x55
 80083c0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80083c2:	003a      	movs	r2, r7
 80083c4:	193b      	adds	r3, r7, r4
 80083c6:	0011      	movs	r1, r2
 80083c8:	0018      	movs	r0, r3
 80083ca:	f000 fdf1 	bl	8008fb0 <astronode_transport_send_receive>
 80083ce:	0003      	movs	r3, r0
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d111      	bne.n	80083f8 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80083d4:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <astronode_send_res_cr+0x70>)
 80083d6:	195b      	adds	r3, r3, r5
 80083d8:	19db      	adds	r3, r3, r7
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2bd5      	cmp	r3, #213	; 0xd5
 80083de:	d107      	bne.n	80083f0 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80083e0:	4b08      	ldr	r3, [pc, #32]	; (8008404 <astronode_send_res_cr+0x74>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80083e6:	4b08      	ldr	r3, [pc, #32]	; (8008408 <astronode_send_res_cr+0x78>)
 80083e8:	0018      	movs	r0, r3
 80083ea:	f7fa fcbd 	bl	8002d68 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 80083ee:	e003      	b.n	80083f8 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 80083f0:	4b06      	ldr	r3, [pc, #24]	; (800840c <astronode_send_res_cr+0x7c>)
 80083f2:	0018      	movs	r0, r3
 80083f4:	f7fa fcb8 	bl	8002d68 <send_debug_logs>
}
 80083f8:	46c0      	nop			; (mov r8, r8)
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b064      	add	sp, #400	; 0x190
 80083fe:	bdb0      	pop	{r4, r5, r7, pc}
 8008400:	fffffe70 	.word	0xfffffe70
 8008404:	20000b25 	.word	0x20000b25
 8008408:	0801325c 	.word	0x0801325c
 800840c:	08013290 	.word	0x08013290

08008410 <astronode_send_rtc_rr>:

void astronode_send_rtc_rr(void)
{
 8008410:	b5b0      	push	{r4, r5, r7, lr}
 8008412:	b0fa      	sub	sp, #488	; 0x1e8
 8008414:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008416:	258e      	movs	r5, #142	; 0x8e
 8008418:	006d      	lsls	r5, r5, #1
 800841a:	197b      	adds	r3, r7, r5
 800841c:	0018      	movs	r0, r3
 800841e:	23c6      	movs	r3, #198	; 0xc6
 8008420:	001a      	movs	r2, r3
 8008422:	2100      	movs	r1, #0
 8008424:	f003 fcfa 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008428:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <astronode_send_rtc_rr+0xb4>)
 800842a:	24f4      	movs	r4, #244	; 0xf4
 800842c:	0064      	lsls	r4, r4, #1
 800842e:	191b      	adds	r3, r3, r4
 8008430:	19db      	adds	r3, r3, r7
 8008432:	0018      	movs	r0, r3
 8008434:	23c6      	movs	r3, #198	; 0xc6
 8008436:	001a      	movs	r2, r3
 8008438:	2100      	movs	r1, #0
 800843a:	f003 fcef 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR;
 800843e:	197b      	adds	r3, r7, r5
 8008440:	2217      	movs	r2, #23
 8008442:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008444:	2354      	movs	r3, #84	; 0x54
 8008446:	18fa      	adds	r2, r7, r3
 8008448:	197b      	adds	r3, r7, r5
 800844a:	0011      	movs	r1, r2
 800844c:	0018      	movs	r0, r3
 800844e:	f000 fdaf 	bl	8008fb0 <astronode_transport_send_receive>
 8008452:	0003      	movs	r3, r0
 8008454:	2b01      	cmp	r3, #1
 8008456:	d131      	bne.n	80084bc <astronode_send_rtc_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RTC_RA)
 8008458:	4b1a      	ldr	r3, [pc, #104]	; (80084c4 <astronode_send_rtc_rr+0xb4>)
 800845a:	0021      	movs	r1, r4
 800845c:	185b      	adds	r3, r3, r1
 800845e:	19db      	adds	r3, r3, r7
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b97      	cmp	r3, #151	; 0x97
 8008464:	d126      	bne.n	80084b4 <astronode_send_rtc_rr+0xa4>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8008466:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <astronode_send_rtc_rr+0xb4>)
 8008468:	185b      	adds	r3, r3, r1
 800846a:	19db      	adds	r3, r3, r7
 800846c:	785b      	ldrb	r3, [r3, #1]
 800846e:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8008470:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <astronode_send_rtc_rr+0xb4>)
 8008472:	185b      	adds	r3, r3, r1
 8008474:	19db      	adds	r3, r3, r7
 8008476:	789b      	ldrb	r3, [r3, #2]
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 800847c:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <astronode_send_rtc_rr+0xb4>)
 800847e:	185b      	adds	r3, r3, r1
 8008480:	19db      	adds	r3, r3, r7
 8008482:	78db      	ldrb	r3, [r3, #3]
 8008484:	041b      	lsls	r3, r3, #16
 8008486:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 8008488:	4b0e      	ldr	r3, [pc, #56]	; (80084c4 <astronode_send_rtc_rr+0xb4>)
 800848a:	185b      	adds	r3, r3, r1
 800848c:	19db      	adds	r3, r3, r7
 800848e:	791b      	ldrb	r3, [r3, #4]
 8008490:	061b      	lsls	r3, r3, #24
 8008492:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008494:	22f2      	movs	r2, #242	; 0xf2
 8008496:	0052      	lsls	r2, r2, #1
 8008498:	18b9      	adds	r1, r7, r2
 800849a:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 800849c:	18bb      	adds	r3, r7, r2
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	4909      	ldr	r1, [pc, #36]	; (80084c8 <astronode_send_rtc_rr+0xb8>)
 80084a2:	1d3b      	adds	r3, r7, #4
 80084a4:	0018      	movs	r0, r3
 80084a6:	f003 fc23 	bl	800bcf0 <sprintf>
            send_debug_logs(str);
 80084aa:	1d3b      	adds	r3, r7, #4
 80084ac:	0018      	movs	r0, r3
 80084ae:	f7fa fc5b 	bl	8002d68 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read rtc time.");
        }
    }
}
 80084b2:	e003      	b.n	80084bc <astronode_send_rtc_rr+0xac>
            send_debug_logs("Failed to read rtc time.");
 80084b4:	4b05      	ldr	r3, [pc, #20]	; (80084cc <astronode_send_rtc_rr+0xbc>)
 80084b6:	0018      	movs	r0, r3
 80084b8:	f7fa fc56 	bl	8002d68 <send_debug_logs>
}
 80084bc:	46c0      	nop			; (mov r8, r8)
 80084be:	46bd      	mov	sp, r7
 80084c0:	b07a      	add	sp, #488	; 0x1e8
 80084c2:	bdb0      	pop	{r4, r5, r7, pc}
 80084c4:	fffffe6c 	.word	0xfffffe6c
 80084c8:	080132bc 	.word	0x080132bc
 80084cc:	080132fc 	.word	0x080132fc

080084d0 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80084d0:	b5b0      	push	{r4, r5, r7, lr}
 80084d2:	b0f8      	sub	sp, #480	; 0x1e0
 80084d4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80084d6:	258c      	movs	r5, #140	; 0x8c
 80084d8:	006d      	lsls	r5, r5, #1
 80084da:	197b      	adds	r3, r7, r5
 80084dc:	0018      	movs	r0, r3
 80084de:	23c6      	movs	r3, #198	; 0xc6
 80084e0:	001a      	movs	r2, r3
 80084e2:	2100      	movs	r1, #0
 80084e4:	f003 fc9a 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 80084e8:	4b21      	ldr	r3, [pc, #132]	; (8008570 <astronode_send_sak_rr+0xa0>)
 80084ea:	24f0      	movs	r4, #240	; 0xf0
 80084ec:	0064      	lsls	r4, r4, #1
 80084ee:	191b      	adds	r3, r3, r4
 80084f0:	19db      	adds	r3, r3, r7
 80084f2:	0018      	movs	r0, r3
 80084f4:	23c6      	movs	r3, #198	; 0xc6
 80084f6:	001a      	movs	r2, r3
 80084f8:	2100      	movs	r1, #0
 80084fa:	f003 fc8f 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80084fe:	197b      	adds	r3, r7, r5
 8008500:	2245      	movs	r2, #69	; 0x45
 8008502:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008504:	2350      	movs	r3, #80	; 0x50
 8008506:	18fa      	adds	r2, r7, r3
 8008508:	197b      	adds	r3, r7, r5
 800850a:	0011      	movs	r1, r2
 800850c:	0018      	movs	r0, r3
 800850e:	f000 fd4f 	bl	8008fb0 <astronode_transport_send_receive>
 8008512:	0003      	movs	r3, r0
 8008514:	2b01      	cmp	r3, #1
 8008516:	d126      	bne.n	8008566 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008518:	4b15      	ldr	r3, [pc, #84]	; (8008570 <astronode_send_sak_rr+0xa0>)
 800851a:	191b      	adds	r3, r3, r4
 800851c:	19db      	adds	r3, r3, r7
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2bc5      	cmp	r3, #197	; 0xc5
 8008522:	d11c      	bne.n	800855e <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008524:	4b12      	ldr	r3, [pc, #72]	; (8008570 <astronode_send_sak_rr+0xa0>)
 8008526:	191b      	adds	r3, r3, r4
 8008528:	19db      	adds	r3, r3, r7
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	b299      	uxth	r1, r3
 800852e:	4b10      	ldr	r3, [pc, #64]	; (8008570 <astronode_send_sak_rr+0xa0>)
 8008530:	191b      	adds	r3, r3, r4
 8008532:	19db      	adds	r3, r3, r7
 8008534:	789b      	ldrb	r3, [r3, #2]
 8008536:	b29b      	uxth	r3, r3
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	b29a      	uxth	r2, r3
 800853c:	20ef      	movs	r0, #239	; 0xef
 800853e:	0040      	lsls	r0, r0, #1
 8008540:	183b      	adds	r3, r7, r0
 8008542:	188a      	adds	r2, r1, r2
 8008544:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008546:	183b      	adds	r3, r7, r0
 8008548:	881a      	ldrh	r2, [r3, #0]
 800854a:	490a      	ldr	r1, [pc, #40]	; (8008574 <astronode_send_sak_rr+0xa4>)
 800854c:	003b      	movs	r3, r7
 800854e:	0018      	movs	r0, r3
 8008550:	f003 fbce 	bl	800bcf0 <sprintf>
            send_debug_logs(str);
 8008554:	003b      	movs	r3, r7
 8008556:	0018      	movs	r0, r3
 8008558:	f7fa fc06 	bl	8002d68 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 800855c:	e003      	b.n	8008566 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800855e:	4b06      	ldr	r3, [pc, #24]	; (8008578 <astronode_send_sak_rr+0xa8>)
 8008560:	0018      	movs	r0, r3
 8008562:	f7fa fc01 	bl	8002d68 <send_debug_logs>
}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	46bd      	mov	sp, r7
 800856a:	b078      	add	sp, #480	; 0x1e0
 800856c:	bdb0      	pop	{r4, r5, r7, pc}
 800856e:	46c0      	nop			; (mov r8, r8)
 8008570:	fffffe70 	.word	0xfffffe70
 8008574:	08013318 	.word	0x08013318
 8008578:	08013344 	.word	0x08013344

0800857c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 800857c:	b5b0      	push	{r4, r5, r7, lr}
 800857e:	b0e4      	sub	sp, #400	; 0x190
 8008580:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008582:	24c8      	movs	r4, #200	; 0xc8
 8008584:	193b      	adds	r3, r7, r4
 8008586:	0018      	movs	r0, r3
 8008588:	23c6      	movs	r3, #198	; 0xc6
 800858a:	001a      	movs	r2, r3
 800858c:	2100      	movs	r1, #0
 800858e:	f003 fc45 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008592:	4b16      	ldr	r3, [pc, #88]	; (80085ec <astronode_send_sak_cr+0x70>)
 8008594:	25c8      	movs	r5, #200	; 0xc8
 8008596:	006d      	lsls	r5, r5, #1
 8008598:	195b      	adds	r3, r3, r5
 800859a:	19db      	adds	r3, r3, r7
 800859c:	0018      	movs	r0, r3
 800859e:	23c6      	movs	r3, #198	; 0xc6
 80085a0:	001a      	movs	r2, r3
 80085a2:	2100      	movs	r1, #0
 80085a4:	f003 fc3a 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80085a8:	193b      	adds	r3, r7, r4
 80085aa:	2246      	movs	r2, #70	; 0x46
 80085ac:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80085ae:	003a      	movs	r2, r7
 80085b0:	193b      	adds	r3, r7, r4
 80085b2:	0011      	movs	r1, r2
 80085b4:	0018      	movs	r0, r3
 80085b6:	f000 fcfb 	bl	8008fb0 <astronode_transport_send_receive>
 80085ba:	0003      	movs	r3, r0
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d111      	bne.n	80085e4 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80085c0:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <astronode_send_sak_cr+0x70>)
 80085c2:	195b      	adds	r3, r3, r5
 80085c4:	19db      	adds	r3, r3, r7
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2bc6      	cmp	r3, #198	; 0xc6
 80085ca:	d107      	bne.n	80085dc <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80085cc:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <astronode_send_sak_cr+0x74>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80085d2:	4b08      	ldr	r3, [pc, #32]	; (80085f4 <astronode_send_sak_cr+0x78>)
 80085d4:	0018      	movs	r0, r3
 80085d6:	f7fa fbc7 	bl	8002d68 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80085da:	e003      	b.n	80085e4 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <astronode_send_sak_cr+0x7c>)
 80085de:	0018      	movs	r0, r3
 80085e0:	f7fa fbc2 	bl	8002d68 <send_debug_logs>
}
 80085e4:	46c0      	nop			; (mov r8, r8)
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b064      	add	sp, #400	; 0x190
 80085ea:	bdb0      	pop	{r4, r5, r7, pc}
 80085ec:	fffffe70 	.word	0xfffffe70
 80085f0:	20000b24 	.word	0x20000b24
 80085f4:	08013378 	.word	0x08013378
 80085f8:	080133a0 	.word	0x080133a0

080085fc <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80085fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085fe:	b0ed      	sub	sp, #436	; 0x1b4
 8008600:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008602:	21c8      	movs	r1, #200	; 0xc8
 8008604:	2318      	movs	r3, #24
 8008606:	18cb      	adds	r3, r1, r3
 8008608:	19db      	adds	r3, r3, r7
 800860a:	0018      	movs	r0, r3
 800860c:	23c6      	movs	r3, #198	; 0xc6
 800860e:	001a      	movs	r2, r3
 8008610:	2100      	movs	r1, #0
 8008612:	f003 fc03 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008616:	4b4a      	ldr	r3, [pc, #296]	; (8008740 <astronode_send_mpn_rr+0x144>)
 8008618:	26cc      	movs	r6, #204	; 0xcc
 800861a:	0076      	lsls	r6, r6, #1
 800861c:	199b      	adds	r3, r3, r6
 800861e:	2218      	movs	r2, #24
 8008620:	4694      	mov	ip, r2
 8008622:	44bc      	add	ip, r7
 8008624:	4463      	add	r3, ip
 8008626:	0018      	movs	r0, r3
 8008628:	23c6      	movs	r3, #198	; 0xc6
 800862a:	001a      	movs	r2, r3
 800862c:	2100      	movs	r1, #0
 800862e:	f003 fbf5 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008632:	21c8      	movs	r1, #200	; 0xc8
 8008634:	2318      	movs	r3, #24
 8008636:	18cb      	adds	r3, r1, r3
 8008638:	19db      	adds	r3, r3, r7
 800863a:	221b      	movs	r2, #27
 800863c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800863e:	2318      	movs	r3, #24
 8008640:	18fa      	adds	r2, r7, r3
 8008642:	2318      	movs	r3, #24
 8008644:	18cb      	adds	r3, r1, r3
 8008646:	19db      	adds	r3, r3, r7
 8008648:	0011      	movs	r1, r2
 800864a:	0018      	movs	r0, r3
 800864c:	f000 fcb0 	bl	8008fb0 <astronode_transport_send_receive>
 8008650:	0003      	movs	r3, r0
 8008652:	2b01      	cmp	r3, #1
 8008654:	d16f      	bne.n	8008736 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008656:	4b3a      	ldr	r3, [pc, #232]	; (8008740 <astronode_send_mpn_rr+0x144>)
 8008658:	0032      	movs	r2, r6
 800865a:	189b      	adds	r3, r3, r2
 800865c:	2118      	movs	r1, #24
 800865e:	468c      	mov	ip, r1
 8008660:	44bc      	add	ip, r7
 8008662:	4463      	add	r3, ip
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b9b      	cmp	r3, #155	; 0x9b
 8008668:	d161      	bne.n	800872e <astronode_send_mpn_rr+0x132>
        {
 800866a:	466b      	mov	r3, sp
 800866c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800866e:	4b34      	ldr	r3, [pc, #208]	; (8008740 <astronode_send_mpn_rr+0x144>)
 8008670:	189b      	adds	r3, r3, r2
 8008672:	2218      	movs	r2, #24
 8008674:	4694      	mov	ip, r2
 8008676:	44bc      	add	ip, r7
 8008678:	4463      	add	r3, ip
 800867a:	22c4      	movs	r2, #196	; 0xc4
 800867c:	5a9b      	ldrh	r3, [r3, r2]
 800867e:	001a      	movs	r2, r3
 8008680:	3a01      	subs	r2, #1
 8008682:	21ca      	movs	r1, #202	; 0xca
 8008684:	0049      	lsls	r1, r1, #1
 8008686:	2018      	movs	r0, #24
 8008688:	1809      	adds	r1, r1, r0
 800868a:	19c9      	adds	r1, r1, r7
 800868c:	600a      	str	r2, [r1, #0]
 800868e:	001c      	movs	r4, r3
 8008690:	2200      	movs	r2, #0
 8008692:	0015      	movs	r5, r2
 8008694:	0020      	movs	r0, r4
 8008696:	0029      	movs	r1, r5
 8008698:	0004      	movs	r4, r0
 800869a:	0f62      	lsrs	r2, r4, #29
 800869c:	000c      	movs	r4, r1
 800869e:	00e4      	lsls	r4, r4, #3
 80086a0:	617c      	str	r4, [r7, #20]
 80086a2:	697c      	ldr	r4, [r7, #20]
 80086a4:	4314      	orrs	r4, r2
 80086a6:	617c      	str	r4, [r7, #20]
 80086a8:	0001      	movs	r1, r0
 80086aa:	00c9      	lsls	r1, r1, #3
 80086ac:	6139      	str	r1, [r7, #16]
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	2200      	movs	r2, #0
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	6838      	ldr	r0, [r7, #0]
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	0004      	movs	r4, r0
 80086ba:	0f62      	lsrs	r2, r4, #29
 80086bc:	000c      	movs	r4, r1
 80086be:	00e4      	lsls	r4, r4, #3
 80086c0:	60fc      	str	r4, [r7, #12]
 80086c2:	68fc      	ldr	r4, [r7, #12]
 80086c4:	4314      	orrs	r4, r2
 80086c6:	60fc      	str	r4, [r7, #12]
 80086c8:	0001      	movs	r1, r0
 80086ca:	00ca      	lsls	r2, r1, #3
 80086cc:	60ba      	str	r2, [r7, #8]
 80086ce:	3307      	adds	r3, #7
 80086d0:	08db      	lsrs	r3, r3, #3
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	4669      	mov	r1, sp
 80086d6:	1acb      	subs	r3, r1, r3
 80086d8:	469d      	mov	sp, r3
 80086da:	466b      	mov	r3, sp
 80086dc:	3300      	adds	r3, #0
 80086de:	24c8      	movs	r4, #200	; 0xc8
 80086e0:	0064      	lsls	r4, r4, #1
 80086e2:	2218      	movs	r2, #24
 80086e4:	18a2      	adds	r2, r4, r2
 80086e6:	19d1      	adds	r1, r2, r7
 80086e8:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80086ea:	4b16      	ldr	r3, [pc, #88]	; (8008744 <astronode_send_mpn_rr+0x148>)
 80086ec:	0018      	movs	r0, r3
 80086ee:	f7fa fb3b 	bl	8002d68 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80086f2:	4b13      	ldr	r3, [pc, #76]	; (8008740 <astronode_send_mpn_rr+0x144>)
 80086f4:	22cc      	movs	r2, #204	; 0xcc
 80086f6:	0052      	lsls	r2, r2, #1
 80086f8:	189b      	adds	r3, r3, r2
 80086fa:	2218      	movs	r2, #24
 80086fc:	4694      	mov	ip, r2
 80086fe:	44bc      	add	ip, r7
 8008700:	4463      	add	r3, ip
 8008702:	22c4      	movs	r2, #196	; 0xc4
 8008704:	5a9b      	ldrh	r3, [r3, r2]
 8008706:	0019      	movs	r1, r3
 8008708:	2318      	movs	r3, #24
 800870a:	18fb      	adds	r3, r7, r3
 800870c:	3301      	adds	r3, #1
 800870e:	4a0e      	ldr	r2, [pc, #56]	; (8008748 <astronode_send_mpn_rr+0x14c>)
 8008710:	2018      	movs	r0, #24
 8008712:	1820      	adds	r0, r4, r0
 8008714:	19c0      	adds	r0, r0, r7
 8008716:	6800      	ldr	r0, [r0, #0]
 8008718:	f003 fab6 	bl	800bc88 <snprintf>
            send_debug_logs(product_number);
 800871c:	2318      	movs	r3, #24
 800871e:	18e3      	adds	r3, r4, r3
 8008720:	19db      	adds	r3, r3, r7
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	0018      	movs	r0, r3
 8008726:	f7fa fb1f 	bl	8002d68 <send_debug_logs>
 800872a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 800872c:	e003      	b.n	8008736 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800872e:	4b07      	ldr	r3, [pc, #28]	; (800874c <astronode_send_mpn_rr+0x150>)
 8008730:	0018      	movs	r0, r3
 8008732:	f7fa fb19 	bl	8002d68 <send_debug_logs>
}
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	46bd      	mov	sp, r7
 800873a:	b06d      	add	sp, #436	; 0x1b4
 800873c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800873e:	46c0      	nop			; (mov r8, r8)
 8008740:	fffffe68 	.word	0xfffffe68
 8008744:	08013468 	.word	0x08013468
 8008748:	08012fa0 	.word	0x08012fa0
 800874c:	08012fdc 	.word	0x08012fdc

08008750 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008750:	b5b0      	push	{r4, r5, r7, lr}
 8008752:	b0e4      	sub	sp, #400	; 0x190
 8008754:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008756:	24c8      	movs	r4, #200	; 0xc8
 8008758:	193b      	adds	r3, r7, r4
 800875a:	0018      	movs	r0, r3
 800875c:	23c6      	movs	r3, #198	; 0xc6
 800875e:	001a      	movs	r2, r3
 8008760:	2100      	movs	r1, #0
 8008762:	f003 fb5b 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008766:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <astronode_send_cmd_cr+0x70>)
 8008768:	25c8      	movs	r5, #200	; 0xc8
 800876a:	006d      	lsls	r5, r5, #1
 800876c:	195b      	adds	r3, r3, r5
 800876e:	19db      	adds	r3, r3, r7
 8008770:	0018      	movs	r0, r3
 8008772:	23c6      	movs	r3, #198	; 0xc6
 8008774:	001a      	movs	r2, r3
 8008776:	2100      	movs	r1, #0
 8008778:	f003 fb50 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 800877c:	193b      	adds	r3, r7, r4
 800877e:	2248      	movs	r2, #72	; 0x48
 8008780:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008782:	003a      	movs	r2, r7
 8008784:	193b      	adds	r3, r7, r4
 8008786:	0011      	movs	r1, r2
 8008788:	0018      	movs	r0, r3
 800878a:	f000 fc11 	bl	8008fb0 <astronode_transport_send_receive>
 800878e:	0003      	movs	r3, r0
 8008790:	2b01      	cmp	r3, #1
 8008792:	d111      	bne.n	80087b8 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <astronode_send_cmd_cr+0x70>)
 8008796:	195b      	adds	r3, r3, r5
 8008798:	19db      	adds	r3, r3, r7
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2bc8      	cmp	r3, #200	; 0xc8
 800879e:	d107      	bne.n	80087b0 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 80087a0:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <astronode_send_cmd_cr+0x74>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 80087a6:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <astronode_send_cmd_cr+0x78>)
 80087a8:	0018      	movs	r0, r3
 80087aa:	f7fa fadd 	bl	8002d68 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 80087ae:	e003      	b.n	80087b8 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <astronode_send_cmd_cr+0x7c>)
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7fa fad8 	bl	8002d68 <send_debug_logs>
}
 80087b8:	46c0      	nop			; (mov r8, r8)
 80087ba:	46bd      	mov	sp, r7
 80087bc:	b064      	add	sp, #400	; 0x190
 80087be:	bdb0      	pop	{r4, r5, r7, pc}
 80087c0:	fffffe70 	.word	0xfffffe70
 80087c4:	20000b26 	.word	0x20000b26
 80087c8:	080138b8 	.word	0x080138b8
 80087cc:	080138dc 	.word	0x080138dc

080087d0 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 80087d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d2:	4cac      	ldr	r4, [pc, #688]	; (8008a84 <astronode_send_cmd_rr+0x2b4>)
 80087d4:	44a5      	add	sp, r4
 80087d6:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80087d8:	218c      	movs	r1, #140	; 0x8c
 80087da:	0049      	lsls	r1, r1, #1
 80087dc:	2318      	movs	r3, #24
 80087de:	18cb      	adds	r3, r1, r3
 80087e0:	19db      	adds	r3, r3, r7
 80087e2:	0018      	movs	r0, r3
 80087e4:	23c6      	movs	r3, #198	; 0xc6
 80087e6:	001a      	movs	r2, r3
 80087e8:	2100      	movs	r1, #0
 80087ea:	f003 fb17 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 80087ee:	4ba6      	ldr	r3, [pc, #664]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 80087f0:	26f8      	movs	r6, #248	; 0xf8
 80087f2:	0076      	lsls	r6, r6, #1
 80087f4:	199b      	adds	r3, r3, r6
 80087f6:	2218      	movs	r2, #24
 80087f8:	4694      	mov	ip, r2
 80087fa:	44bc      	add	ip, r7
 80087fc:	4463      	add	r3, ip
 80087fe:	0018      	movs	r0, r3
 8008800:	23c6      	movs	r3, #198	; 0xc6
 8008802:	001a      	movs	r2, r3
 8008804:	2100      	movs	r1, #0
 8008806:	f003 fb09 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 800880a:	218c      	movs	r1, #140	; 0x8c
 800880c:	0049      	lsls	r1, r1, #1
 800880e:	2318      	movs	r3, #24
 8008810:	18cb      	adds	r3, r1, r3
 8008812:	19db      	adds	r3, r3, r7
 8008814:	2247      	movs	r2, #71	; 0x47
 8008816:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008818:	2350      	movs	r3, #80	; 0x50
 800881a:	2218      	movs	r2, #24
 800881c:	189b      	adds	r3, r3, r2
 800881e:	19da      	adds	r2, r3, r7
 8008820:	2318      	movs	r3, #24
 8008822:	18cb      	adds	r3, r1, r3
 8008824:	19db      	adds	r3, r3, r7
 8008826:	0011      	movs	r1, r2
 8008828:	0018      	movs	r0, r3
 800882a:	f000 fbc1 	bl	8008fb0 <astronode_transport_send_receive>
 800882e:	0003      	movs	r3, r0
 8008830:	2b01      	cmp	r3, #1
 8008832:	d000      	beq.n	8008836 <astronode_send_cmd_rr+0x66>
 8008834:	e121      	b.n	8008a7a <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008836:	4b94      	ldr	r3, [pc, #592]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 8008838:	199b      	adds	r3, r3, r6
 800883a:	2218      	movs	r2, #24
 800883c:	4694      	mov	ip, r2
 800883e:	44bc      	add	ip, r7
 8008840:	4463      	add	r3, ip
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2bc7      	cmp	r3, #199	; 0xc7
 8008846:	d000      	beq.n	800884a <astronode_send_cmd_rr+0x7a>
 8008848:	e113      	b.n	8008a72 <astronode_send_cmd_rr+0x2a2>
        {
 800884a:	466b      	mov	r3, sp
 800884c:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 800884e:	4b8f      	ldr	r3, [pc, #572]	; (8008a8c <astronode_send_cmd_rr+0x2bc>)
 8008850:	0018      	movs	r0, r3
 8008852:	f7fa fa89 	bl	8002d68 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008856:	4b8c      	ldr	r3, [pc, #560]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 8008858:	21f8      	movs	r1, #248	; 0xf8
 800885a:	0049      	lsls	r1, r1, #1
 800885c:	185b      	adds	r3, r3, r1
 800885e:	2218      	movs	r2, #24
 8008860:	4694      	mov	ip, r2
 8008862:	44bc      	add	ip, r7
 8008864:	4463      	add	r3, ip
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 800886a:	4b87      	ldr	r3, [pc, #540]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 800886c:	185b      	adds	r3, r3, r1
 800886e:	2018      	movs	r0, #24
 8008870:	4684      	mov	ip, r0
 8008872:	44bc      	add	ip, r7
 8008874:	4463      	add	r3, ip
 8008876:	789b      	ldrb	r3, [r3, #2]
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 800887c:	4b82      	ldr	r3, [pc, #520]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 800887e:	185b      	adds	r3, r3, r1
 8008880:	2018      	movs	r0, #24
 8008882:	4684      	mov	ip, r0
 8008884:	44bc      	add	ip, r7
 8008886:	4463      	add	r3, ip
 8008888:	78db      	ldrb	r3, [r3, #3]
 800888a:	041b      	lsls	r3, r3, #16
 800888c:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 800888e:	4b7e      	ldr	r3, [pc, #504]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 8008890:	185b      	adds	r3, r3, r1
 8008892:	2118      	movs	r1, #24
 8008894:	468c      	mov	ip, r1
 8008896:	44bc      	add	ip, r7
 8008898:	4463      	add	r3, ip
 800889a:	791b      	ldrb	r3, [r3, #4]
 800889c:	061b      	lsls	r3, r3, #24
 800889e:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80088a0:	22f4      	movs	r2, #244	; 0xf4
 80088a2:	0052      	lsls	r2, r2, #1
 80088a4:	2118      	movs	r1, #24
 80088a6:	1851      	adds	r1, r2, r1
 80088a8:	19c8      	adds	r0, r1, r7
 80088aa:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 80088ac:	2318      	movs	r3, #24
 80088ae:	18d3      	adds	r3, r2, r3
 80088b0:	19db      	adds	r3, r3, r7
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	4976      	ldr	r1, [pc, #472]	; (8008a90 <astronode_send_cmd_rr+0x2c0>)
 80088b6:	2318      	movs	r3, #24
 80088b8:	18fb      	adds	r3, r7, r3
 80088ba:	0018      	movs	r0, r3
 80088bc:	f003 fa18 	bl	800bcf0 <sprintf>
            send_debug_logs(str);
 80088c0:	2318      	movs	r3, #24
 80088c2:	18fb      	adds	r3, r7, r3
 80088c4:	0018      	movs	r0, r3
 80088c6:	f7fa fa4f 	bl	8002d68 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 80088ca:	4b6f      	ldr	r3, [pc, #444]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 80088cc:	21f8      	movs	r1, #248	; 0xf8
 80088ce:	0049      	lsls	r1, r1, #1
 80088d0:	185b      	adds	r3, r3, r1
 80088d2:	2218      	movs	r2, #24
 80088d4:	4694      	mov	ip, r2
 80088d6:	44bc      	add	ip, r7
 80088d8:	4463      	add	r3, ip
 80088da:	22c4      	movs	r2, #196	; 0xc4
 80088dc:	5a9b      	ldrh	r3, [r3, r2]
 80088de:	2b2c      	cmp	r3, #44	; 0x2c
 80088e0:	d00e      	beq.n	8008900 <astronode_send_cmd_rr+0x130>
 80088e2:	4b69      	ldr	r3, [pc, #420]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 80088e4:	185b      	adds	r3, r3, r1
 80088e6:	2218      	movs	r2, #24
 80088e8:	4694      	mov	ip, r2
 80088ea:	44bc      	add	ip, r7
 80088ec:	4463      	add	r3, ip
 80088ee:	22c4      	movs	r2, #196	; 0xc4
 80088f0:	5a9b      	ldrh	r3, [r3, r2]
 80088f2:	2b0c      	cmp	r3, #12
 80088f4:	d004      	beq.n	8008900 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 80088f6:	4b67      	ldr	r3, [pc, #412]	; (8008a94 <astronode_send_cmd_rr+0x2c4>)
 80088f8:	0018      	movs	r0, r3
 80088fa:	f7fa fa35 	bl	8002d68 <send_debug_logs>
                return;
 80088fe:	e0b6      	b.n	8008a6e <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008900:	4b61      	ldr	r3, [pc, #388]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 8008902:	22f8      	movs	r2, #248	; 0xf8
 8008904:	0052      	lsls	r2, r2, #1
 8008906:	189b      	adds	r3, r3, r2
 8008908:	2218      	movs	r2, #24
 800890a:	4694      	mov	ip, r2
 800890c:	44bc      	add	ip, r7
 800890e:	4463      	add	r3, ip
 8008910:	22c4      	movs	r2, #196	; 0xc4
 8008912:	5a9b      	ldrh	r3, [r3, r2]
 8008914:	001a      	movs	r2, r3
 8008916:	3a01      	subs	r2, #1
 8008918:	21f2      	movs	r1, #242	; 0xf2
 800891a:	0049      	lsls	r1, r1, #1
 800891c:	2018      	movs	r0, #24
 800891e:	1809      	adds	r1, r1, r0
 8008920:	19c9      	adds	r1, r1, r7
 8008922:	600a      	str	r2, [r1, #0]
 8008924:	001c      	movs	r4, r3
 8008926:	2200      	movs	r2, #0
 8008928:	0015      	movs	r5, r2
 800892a:	0020      	movs	r0, r4
 800892c:	0029      	movs	r1, r5
 800892e:	0004      	movs	r4, r0
 8008930:	0f62      	lsrs	r2, r4, #29
 8008932:	000c      	movs	r4, r1
 8008934:	00e4      	lsls	r4, r4, #3
 8008936:	617c      	str	r4, [r7, #20]
 8008938:	697c      	ldr	r4, [r7, #20]
 800893a:	4314      	orrs	r4, r2
 800893c:	617c      	str	r4, [r7, #20]
 800893e:	0001      	movs	r1, r0
 8008940:	00c9      	lsls	r1, r1, #3
 8008942:	6139      	str	r1, [r7, #16]
 8008944:	603b      	str	r3, [r7, #0]
 8008946:	2200      	movs	r2, #0
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	6838      	ldr	r0, [r7, #0]
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	0004      	movs	r4, r0
 8008950:	0f62      	lsrs	r2, r4, #29
 8008952:	000c      	movs	r4, r1
 8008954:	00e4      	lsls	r4, r4, #3
 8008956:	60fc      	str	r4, [r7, #12]
 8008958:	68fc      	ldr	r4, [r7, #12]
 800895a:	4314      	orrs	r4, r2
 800895c:	60fc      	str	r4, [r7, #12]
 800895e:	0001      	movs	r1, r0
 8008960:	00ca      	lsls	r2, r1, #3
 8008962:	60ba      	str	r2, [r7, #8]
 8008964:	3307      	adds	r3, #7
 8008966:	08db      	lsrs	r3, r3, #3
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	4669      	mov	r1, sp
 800896c:	1acb      	subs	r3, r1, r3
 800896e:	469d      	mov	sp, r3
 8008970:	466b      	mov	r3, sp
 8008972:	3300      	adds	r3, #0
 8008974:	20f0      	movs	r0, #240	; 0xf0
 8008976:	0040      	lsls	r0, r0, #1
 8008978:	2218      	movs	r2, #24
 800897a:	1882      	adds	r2, r0, r2
 800897c:	19d1      	adds	r1, r2, r7
 800897e:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008980:	4b41      	ldr	r3, [pc, #260]	; (8008a88 <astronode_send_cmd_rr+0x2b8>)
 8008982:	22f8      	movs	r2, #248	; 0xf8
 8008984:	0052      	lsls	r2, r2, #1
 8008986:	189b      	adds	r3, r3, r2
 8008988:	2218      	movs	r2, #24
 800898a:	4694      	mov	ip, r2
 800898c:	44bc      	add	ip, r7
 800898e:	4463      	add	r3, ip
 8008990:	22c4      	movs	r2, #196	; 0xc4
 8008992:	5a9b      	ldrh	r3, [r3, r2]
 8008994:	3b03      	subs	r3, #3
 8008996:	0019      	movs	r1, r3
 8008998:	2350      	movs	r3, #80	; 0x50
 800899a:	2218      	movs	r2, #24
 800899c:	189b      	adds	r3, r3, r2
 800899e:	19db      	adds	r3, r3, r7
 80089a0:	3305      	adds	r3, #5
 80089a2:	4a3d      	ldr	r2, [pc, #244]	; (8008a98 <astronode_send_cmd_rr+0x2c8>)
 80089a4:	2418      	movs	r4, #24
 80089a6:	1900      	adds	r0, r0, r4
 80089a8:	19c0      	adds	r0, r0, r7
 80089aa:	6800      	ldr	r0, [r0, #0]
 80089ac:	f003 f96c 	bl	800bc88 <snprintf>
 80089b0:	0002      	movs	r2, r0
 80089b2:	23ef      	movs	r3, #239	; 0xef
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	2118      	movs	r1, #24
 80089b8:	185b      	adds	r3, r3, r1
 80089ba:	19db      	adds	r3, r3, r7
 80089bc:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 80089be:	23f0      	movs	r3, #240	; 0xf0
 80089c0:	33ff      	adds	r3, #255	; 0xff
 80089c2:	2218      	movs	r2, #24
 80089c4:	189b      	adds	r3, r3, r2
 80089c6:	19db      	adds	r3, r3, r7
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	e024      	b.n	8008a18 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 80089ce:	23f0      	movs	r3, #240	; 0xf0
 80089d0:	33ff      	adds	r3, #255	; 0xff
 80089d2:	2218      	movs	r2, #24
 80089d4:	189b      	adds	r3, r3, r2
 80089d6:	19db      	adds	r3, r3, r7
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	22f0      	movs	r2, #240	; 0xf0
 80089dc:	0052      	lsls	r2, r2, #1
 80089de:	2118      	movs	r1, #24
 80089e0:	1852      	adds	r2, r2, r1
 80089e2:	19d2      	adds	r2, r2, r7
 80089e4:	6812      	ldr	r2, [r2, #0]
 80089e6:	5cd3      	ldrb	r3, [r2, r3]
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	4b2c      	ldr	r3, [pc, #176]	; (8008a9c <astronode_send_cmd_rr+0x2cc>)
 80089ec:	18d3      	adds	r3, r2, r3
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	001a      	movs	r2, r3
 80089f2:	2397      	movs	r3, #151	; 0x97
 80089f4:	4013      	ands	r3, r2
 80089f6:	d104      	bne.n	8008a02 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 80089f8:	4b29      	ldr	r3, [pc, #164]	; (8008aa0 <astronode_send_cmd_rr+0x2d0>)
 80089fa:	0018      	movs	r0, r3
 80089fc:	f7fa f9b4 	bl	8002d68 <send_debug_logs>
                    return;
 8008a00:	e035      	b.n	8008a6e <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8008a02:	21f0      	movs	r1, #240	; 0xf0
 8008a04:	31ff      	adds	r1, #255	; 0xff
 8008a06:	2318      	movs	r3, #24
 8008a08:	18cb      	adds	r3, r1, r3
 8008a0a:	19db      	adds	r3, r3, r7
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	2318      	movs	r3, #24
 8008a10:	18cb      	adds	r3, r1, r3
 8008a12:	19db      	adds	r3, r3, r7
 8008a14:	3201      	adds	r2, #1
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	23f0      	movs	r3, #240	; 0xf0
 8008a1a:	33ff      	adds	r3, #255	; 0xff
 8008a1c:	2218      	movs	r2, #24
 8008a1e:	189b      	adds	r3, r3, r2
 8008a20:	19db      	adds	r3, r3, r7
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	22ef      	movs	r2, #239	; 0xef
 8008a28:	0052      	lsls	r2, r2, #1
 8008a2a:	2118      	movs	r1, #24
 8008a2c:	1852      	adds	r2, r2, r1
 8008a2e:	19d2      	adds	r2, r2, r7
 8008a30:	8812      	ldrh	r2, [r2, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d8cb      	bhi.n	80089ce <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008a36:	4b1b      	ldr	r3, [pc, #108]	; (8008aa4 <astronode_send_cmd_rr+0x2d4>)
 8008a38:	0018      	movs	r0, r3
 8008a3a:	f7fa f995 	bl	8002d68 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008a3e:	2350      	movs	r3, #80	; 0x50
 8008a40:	2218      	movs	r2, #24
 8008a42:	189b      	adds	r3, r3, r2
 8008a44:	19db      	adds	r3, r3, r7
 8008a46:	1d5a      	adds	r2, r3, #5
 8008a48:	4917      	ldr	r1, [pc, #92]	; (8008aa8 <astronode_send_cmd_rr+0x2d8>)
 8008a4a:	24f0      	movs	r4, #240	; 0xf0
 8008a4c:	0064      	lsls	r4, r4, #1
 8008a4e:	2318      	movs	r3, #24
 8008a50:	18e3      	adds	r3, r4, r3
 8008a52:	19db      	adds	r3, r3, r7
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	0018      	movs	r0, r3
 8008a58:	f003 f94a 	bl	800bcf0 <sprintf>
            send_debug_logs(command_content);
 8008a5c:	2318      	movs	r3, #24
 8008a5e:	18e3      	adds	r3, r4, r3
 8008a60:	19db      	adds	r3, r3, r7
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	0018      	movs	r0, r3
 8008a66:	f7fa f97f 	bl	8002d68 <send_debug_logs>
 8008a6a:	46b5      	mov	sp, r6
 8008a6c:	e005      	b.n	8008a7a <astronode_send_cmd_rr+0x2aa>
                return;
 8008a6e:	46b5      	mov	sp, r6
 8008a70:	e003      	b.n	8008a7a <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008a72:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <astronode_send_cmd_rr+0x2dc>)
 8008a74:	0018      	movs	r0, r3
 8008a76:	f7fa f977 	bl	8002d68 <send_debug_logs>
        }
    }
}
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	2383      	movs	r3, #131	; 0x83
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	449d      	add	sp, r3
 8008a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a84:	fffffdf4 	.word	0xfffffdf4
 8008a88:	fffffe60 	.word	0xfffffe60
 8008a8c:	080138f4 	.word	0x080138f4
 8008a90:	08013910 	.word	0x08013910
 8008a94:	08013960 	.word	0x08013960
 8008a98:	08012fa0 	.word	0x08012fa0
 8008a9c:	08014378 	.word	0x08014378
 8008aa0:	08013974 	.word	0x08013974
 8008aa4:	080139a0 	.word	0x080139a0
 8008aa8:	080139b8 	.word	0x080139b8
 8008aac:	080139bc 	.word	0x080139bc

08008ab0 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008ab4:	4b02      	ldr	r3, [pc, #8]	; (8008ac0 <is_sak_available+0x10>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
}
 8008ab8:	0018      	movs	r0, r3
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	46c0      	nop			; (mov r8, r8)
 8008ac0:	20000b24 	.word	0x20000b24

08008ac4 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008ac8:	4b02      	ldr	r3, [pc, #8]	; (8008ad4 <is_astronode_reset+0x10>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
}
 8008acc:	0018      	movs	r0, r3
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	46c0      	nop			; (mov r8, r8)
 8008ad4:	20000b25 	.word	0x20000b25

08008ad8 <is_command_available>:

bool is_command_available()
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008adc:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <is_command_available+0x10>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
}
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	46c0      	nop			; (mov r8, r8)
 8008ae8:	20000b26 	.word	0x20000b26

08008aec <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	0002      	movs	r2, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	1dfb      	adds	r3, r7, #7
 8008af8:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008afa:	1dfb      	adds	r3, r7, #7
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b2f      	cmp	r3, #47	; 0x2f
 8008b00:	d90b      	bls.n	8008b1a <ascii_to_value+0x2e>
 8008b02:	1dfb      	adds	r3, r7, #7
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b39      	cmp	r3, #57	; 0x39
 8008b08:	d807      	bhi.n	8008b1a <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008b0a:	1dfb      	adds	r3, r7, #7
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	3b30      	subs	r3, #48	; 0x30
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	701a      	strb	r2, [r3, #0]
        return true;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e010      	b.n	8008b3c <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008b1a:	1dfb      	adds	r3, r7, #7
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b40      	cmp	r3, #64	; 0x40
 8008b20:	d90b      	bls.n	8008b3a <ascii_to_value+0x4e>
 8008b22:	1dfb      	adds	r3, r7, #7
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b46      	cmp	r3, #70	; 0x46
 8008b28:	d807      	bhi.n	8008b3a <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008b2a:	1dfb      	adds	r3, r7, #7
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	3b37      	subs	r3, #55	; 0x37
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	701a      	strb	r2, [r3, #0]
        return true;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e000      	b.n	8008b3c <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008b3a:	2300      	movs	r3, #0
    }
}
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b002      	add	sp, #8
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008b4e:	250e      	movs	r5, #14
 8008b50:	197b      	adds	r3, r7, r5
 8008b52:	2200      	movs	r2, #0
 8008b54:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008b56:	197b      	adds	r3, r7, r5
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	197a      	adds	r2, r7, r5
 8008b5c:	1c59      	adds	r1, r3, #1
 8008b5e:	8011      	strh	r1, [r2, #0]
 8008b60:	001a      	movs	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	189b      	adds	r3, r3, r2
 8008b66:	2202      	movs	r2, #2
 8008b68:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	260a      	movs	r6, #10
 8008b6e:	19bc      	adds	r4, r7, r6
 8008b70:	4a44      	ldr	r2, [pc, #272]	; (8008c84 <astronode_create_request_transport+0x140>)
 8008b72:	2101      	movs	r1, #1
 8008b74:	0018      	movs	r0, r3
 8008b76:	f000 fa7d 	bl	8009074 <calculate_crc>
 8008b7a:	0003      	movs	r3, r0
 8008b7c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	1c58      	adds	r0, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	22c4      	movs	r2, #196	; 0xc4
 8008b86:	5a99      	ldrh	r1, [r3, r2]
 8008b88:	19bc      	adds	r4, r7, r6
 8008b8a:	19bb      	adds	r3, r7, r6
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	001a      	movs	r2, r3
 8008b90:	f000 fa70 	bl	8009074 <calculate_crc>
 8008b94:	0003      	movs	r3, r0
 8008b96:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008b98:	19bb      	adds	r3, r7, r6
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	b21a      	sxth	r2, r3
 8008ba0:	0031      	movs	r1, r6
 8008ba2:	19bb      	adds	r3, r7, r6
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	0a1b      	lsrs	r3, r3, #8
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	b21b      	sxth	r3, r3
 8008bac:	4313      	orrs	r3, r2
 8008bae:	b21a      	sxth	r2, r3
 8008bb0:	187b      	adds	r3, r7, r1
 8008bb2:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	7818      	ldrb	r0, [r3, #0]
 8008bb8:	197b      	adds	r3, r7, r5
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	18d3      	adds	r3, r2, r3
 8008bc0:	0019      	movs	r1, r3
 8008bc2:	f000 fbeb 	bl	800939c <uint8_to_ascii_buffer>
    index += 2;
 8008bc6:	197b      	adds	r3, r7, r5
 8008bc8:	197a      	adds	r2, r7, r5
 8008bca:	8812      	ldrh	r2, [r2, #0]
 8008bcc:	3202      	adds	r2, #2
 8008bce:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008bd0:	230c      	movs	r3, #12
 8008bd2:	18fb      	adds	r3, r7, r3
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	801a      	strh	r2, [r3, #0]
 8008bd8:	e017      	b.n	8008c0a <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008bda:	240c      	movs	r4, #12
 8008bdc:	193b      	adds	r3, r7, r4
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	18d3      	adds	r3, r2, r3
 8008be4:	7858      	ldrb	r0, [r3, #1]
 8008be6:	250e      	movs	r5, #14
 8008be8:	197b      	adds	r3, r7, r5
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	18d3      	adds	r3, r2, r3
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	f000 fbd3 	bl	800939c <uint8_to_ascii_buffer>
        index += 2;
 8008bf6:	197b      	adds	r3, r7, r5
 8008bf8:	197a      	adds	r2, r7, r5
 8008bfa:	8812      	ldrh	r2, [r2, #0]
 8008bfc:	3202      	adds	r2, #2
 8008bfe:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008c00:	193b      	adds	r3, r7, r4
 8008c02:	881a      	ldrh	r2, [r3, #0]
 8008c04:	193b      	adds	r3, r7, r4
 8008c06:	3201      	adds	r2, #1
 8008c08:	801a      	strh	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	22c4      	movs	r2, #196	; 0xc4
 8008c0e:	5a9b      	ldrh	r3, [r3, r2]
 8008c10:	220c      	movs	r2, #12
 8008c12:	18ba      	adds	r2, r7, r2
 8008c14:	8812      	ldrh	r2, [r2, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d3df      	bcc.n	8008bda <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008c1a:	250a      	movs	r5, #10
 8008c1c:	197b      	adds	r3, r7, r5
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	0a1b      	lsrs	r3, r3, #8
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	b2d8      	uxtb	r0, r3
 8008c26:	240e      	movs	r4, #14
 8008c28:	193b      	adds	r3, r7, r4
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	18d3      	adds	r3, r2, r3
 8008c30:	0019      	movs	r1, r3
 8008c32:	f000 fbb3 	bl	800939c <uint8_to_ascii_buffer>
    index += 2;
 8008c36:	0021      	movs	r1, r4
 8008c38:	187b      	adds	r3, r7, r1
 8008c3a:	187a      	adds	r2, r7, r1
 8008c3c:	8812      	ldrh	r2, [r2, #0]
 8008c3e:	3202      	adds	r2, #2
 8008c40:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008c42:	197b      	adds	r3, r7, r5
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	b2d8      	uxtb	r0, r3
 8008c48:	000c      	movs	r4, r1
 8008c4a:	187b      	adds	r3, r7, r1
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	18d3      	adds	r3, r2, r3
 8008c52:	0019      	movs	r1, r3
 8008c54:	f000 fba2 	bl	800939c <uint8_to_ascii_buffer>
    index += 2;
 8008c58:	0020      	movs	r0, r4
 8008c5a:	183b      	adds	r3, r7, r0
 8008c5c:	183a      	adds	r2, r7, r0
 8008c5e:	8812      	ldrh	r2, [r2, #0]
 8008c60:	3202      	adds	r2, #2
 8008c62:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008c64:	183b      	adds	r3, r7, r0
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	183a      	adds	r2, r7, r0
 8008c6a:	1c59      	adds	r1, r3, #1
 8008c6c:	8011      	strh	r1, [r2, #0]
 8008c6e:	001a      	movs	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	189b      	adds	r3, r3, r2
 8008c74:	2203      	movs	r2, #3
 8008c76:	701a      	strb	r2, [r3, #0]

    return index;
 8008c78:	183b      	adds	r3, r7, r0
 8008c7a:	881b      	ldrh	r3, [r3, #0]
}
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b005      	add	sp, #20
 8008c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c84:	0000ffff 	.word	0x0000ffff

08008c88 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8a:	b089      	sub	sp, #36	; 0x24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	607a      	str	r2, [r7, #4]
 8008c92:	230a      	movs	r3, #10
 8008c94:	18fb      	adds	r3, r7, r3
 8008c96:	1c0a      	adds	r2, r1, #0
 8008c98:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d005      	beq.n	8008cae <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008ca2:	4bbd      	ldr	r3, [pc, #756]	; (8008f98 <astronode_decode_answer_transport+0x310>)
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f7fa f85f 	bl	8002d68 <send_debug_logs>
        return RS_FAILURE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	e170      	b.n	8008f90 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008cae:	210a      	movs	r1, #10
 8008cb0:	187b      	adds	r3, r7, r1
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d103      	bne.n	8008cc6 <astronode_decode_answer_transport+0x3e>
 8008cbe:	187b      	adds	r3, r7, r1
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	2b07      	cmp	r3, #7
 8008cc4:	d805      	bhi.n	8008cd2 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008cc6:	4bb5      	ldr	r3, [pc, #724]	; (8008f9c <astronode_decode_answer_transport+0x314>)
 8008cc8:	0018      	movs	r0, r3
 8008cca:	f7fa f84d 	bl	8002d68 <send_debug_logs>
        return RS_FAILURE;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e15e      	b.n	8008f90 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008cd2:	230a      	movs	r3, #10
 8008cd4:	18fb      	adds	r3, r7, r3
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	3b08      	subs	r3, #8
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	da00      	bge.n	8008ce0 <astronode_decode_answer_transport+0x58>
 8008cde:	3301      	adds	r3, #1
 8008ce0:	105b      	asrs	r3, r3, #1
 8008ce2:	b299      	uxth	r1, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	22c4      	movs	r2, #196	; 0xc4
 8008ce8:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008cea:	230a      	movs	r3, #10
 8008cec:	18fb      	adds	r3, r7, r3
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	18d3      	adds	r3, r2, r3
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d005      	beq.n	8008d08 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008cfc:	4ba8      	ldr	r3, [pc, #672]	; (8008fa0 <astronode_decode_answer_transport+0x318>)
 8008cfe:	0018      	movs	r0, r3
 8008d00:	f7fa f832 	bl	8002d68 <send_debug_logs>
        return RS_FAILURE;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e143      	b.n	8008f90 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008d08:	2117      	movs	r1, #23
 8008d0a:	187b      	adds	r3, r7, r1
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008d10:	2416      	movs	r4, #22
 8008d12:	193b      	adds	r3, r7, r4
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	187a      	adds	r2, r7, r1
 8008d20:	0011      	movs	r1, r2
 8008d22:	0018      	movs	r0, r3
 8008d24:	f7ff fee2 	bl	8008aec <ascii_to_value>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	001a      	movs	r2, r3
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	4053      	eors	r3, r2
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10e      	bne.n	8008d54 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3302      	adds	r3, #2
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	193a      	adds	r2, r7, r4
 8008d3e:	0011      	movs	r1, r2
 8008d40:	0018      	movs	r0, r3
 8008d42:	f7ff fed3 	bl	8008aec <ascii_to_value>
 8008d46:	0003      	movs	r3, r0
 8008d48:	001a      	movs	r2, r3
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4053      	eors	r3, r2
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d005      	beq.n	8008d60 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008d54:	4b93      	ldr	r3, [pc, #588]	; (8008fa4 <astronode_decode_answer_transport+0x31c>)
 8008d56:	0018      	movs	r0, r3
 8008d58:	f7fa f806 	bl	8002d68 <send_debug_logs>
        return RS_FAILURE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e117      	b.n	8008f90 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008d60:	2317      	movs	r3, #23
 8008d62:	18fb      	adds	r3, r7, r3
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	2316      	movs	r3, #22
 8008d6c:	18fb      	adds	r3, r7, r3
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	18d3      	adds	r3, r2, r3
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008d78:	231e      	movs	r3, #30
 8008d7a:	18fb      	adds	r3, r7, r3
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	801a      	strh	r2, [r3, #0]
 8008d80:	231c      	movs	r3, #28
 8008d82:	18fb      	adds	r3, r7, r3
 8008d84:	2200      	movs	r2, #0
 8008d86:	801a      	strh	r2, [r3, #0]
 8008d88:	e045      	b.n	8008e16 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008d8a:	241e      	movs	r4, #30
 8008d8c:	193b      	adds	r3, r7, r4
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	18d3      	adds	r3, r2, r3
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2217      	movs	r2, #23
 8008d98:	18ba      	adds	r2, r7, r2
 8008d9a:	0011      	movs	r1, r2
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f7ff fea5 	bl	8008aec <ascii_to_value>
 8008da2:	0003      	movs	r3, r0
 8008da4:	001a      	movs	r2, r3
 8008da6:	2301      	movs	r3, #1
 8008da8:	4053      	eors	r3, r2
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d112      	bne.n	8008dd6 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008db0:	193b      	adds	r3, r7, r4
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	3301      	adds	r3, #1
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	18d3      	adds	r3, r2, r3
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2216      	movs	r2, #22
 8008dbe:	18ba      	adds	r2, r7, r2
 8008dc0:	0011      	movs	r1, r2
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f7ff fe92 	bl	8008aec <ascii_to_value>
 8008dc8:	0003      	movs	r3, r0
 8008dca:	001a      	movs	r2, r3
 8008dcc:	2301      	movs	r3, #1
 8008dce:	4053      	eors	r3, r2
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008dd6:	4b73      	ldr	r3, [pc, #460]	; (8008fa4 <astronode_decode_answer_transport+0x31c>)
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f7f9 ffc5 	bl	8002d68 <send_debug_logs>
            return RS_FAILURE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e0d6      	b.n	8008f90 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008de2:	2317      	movs	r3, #23
 8008de4:	18fb      	adds	r3, r7, r3
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	011b      	lsls	r3, r3, #4
 8008dea:	b2d9      	uxtb	r1, r3
 8008dec:	2316      	movs	r3, #22
 8008dee:	18fb      	adds	r3, r7, r3
 8008df0:	781a      	ldrb	r2, [r3, #0]
 8008df2:	201c      	movs	r0, #28
 8008df4:	183b      	adds	r3, r7, r0
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	1838      	adds	r0, r7, r0
 8008dfa:	1c5c      	adds	r4, r3, #1
 8008dfc:	8004      	strh	r4, [r0, #0]
 8008dfe:	0018      	movs	r0, r3
 8008e00:	188b      	adds	r3, r1, r2
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	181b      	adds	r3, r3, r0
 8008e08:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008e0a:	221e      	movs	r2, #30
 8008e0c:	18bb      	adds	r3, r7, r2
 8008e0e:	18ba      	adds	r2, r7, r2
 8008e10:	8812      	ldrh	r2, [r2, #0]
 8008e12:	3202      	adds	r2, #2
 8008e14:	801a      	strh	r2, [r3, #0]
 8008e16:	231e      	movs	r3, #30
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	881a      	ldrh	r2, [r3, #0]
 8008e1c:	260a      	movs	r6, #10
 8008e1e:	19bb      	adds	r3, r7, r6
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	3b05      	subs	r3, #5
 8008e24:	429a      	cmp	r2, r3
 8008e26:	dbb0      	blt.n	8008d8a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	251a      	movs	r5, #26
 8008e2c:	197c      	adds	r4, r7, r5
 8008e2e:	4a5e      	ldr	r2, [pc, #376]	; (8008fa8 <astronode_decode_answer_transport+0x320>)
 8008e30:	2101      	movs	r1, #1
 8008e32:	0018      	movs	r0, r3
 8008e34:	f000 f91e 	bl	8009074 <calculate_crc>
 8008e38:	0003      	movs	r3, r0
 8008e3a:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	1c58      	adds	r0, r3, #1
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	22c4      	movs	r2, #196	; 0xc4
 8008e44:	5a99      	ldrh	r1, [r3, r2]
 8008e46:	197c      	adds	r4, r7, r5
 8008e48:	197b      	adds	r3, r7, r5
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	001a      	movs	r2, r3
 8008e4e:	f000 f911 	bl	8009074 <calculate_crc>
 8008e52:	0003      	movs	r3, r0
 8008e54:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008e56:	197b      	adds	r3, r7, r5
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	b21a      	sxth	r2, r3
 8008e5e:	0029      	movs	r1, r5
 8008e60:	197b      	adds	r3, r7, r5
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	0a1b      	lsrs	r3, r3, #8
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	b21b      	sxth	r3, r3
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	b21a      	sxth	r2, r3
 8008e6e:	187b      	adds	r3, r7, r1
 8008e70:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008e72:	19bb      	adds	r3, r7, r6
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	3b05      	subs	r3, #5
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	18d3      	adds	r3, r2, r3
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2217      	movs	r2, #23
 8008e80:	18ba      	adds	r2, r7, r2
 8008e82:	0011      	movs	r1, r2
 8008e84:	0018      	movs	r0, r3
 8008e86:	f7ff fe31 	bl	8008aec <ascii_to_value>
 8008e8a:	0003      	movs	r3, r0
 8008e8c:	001a      	movs	r2, r3
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4053      	eors	r3, r2
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d112      	bne.n	8008ebe <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008e98:	19bb      	adds	r3, r7, r6
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	3b04      	subs	r3, #4
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	18d3      	adds	r3, r2, r3
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2216      	movs	r2, #22
 8008ea6:	18ba      	adds	r2, r7, r2
 8008ea8:	0011      	movs	r1, r2
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f7ff fe1e 	bl	8008aec <ascii_to_value>
 8008eb0:	0003      	movs	r3, r0
 8008eb2:	001a      	movs	r2, r3
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	4053      	eors	r3, r2
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008ebe:	4b39      	ldr	r3, [pc, #228]	; (8008fa4 <astronode_decode_answer_transport+0x31c>)
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	f7f9 ff51 	bl	8002d68 <send_debug_logs>
        return RS_FAILURE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e062      	b.n	8008f90 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008eca:	2017      	movs	r0, #23
 8008ecc:	183b      	adds	r3, r7, r0
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	031b      	lsls	r3, r3, #12
 8008ed4:	b299      	uxth	r1, r3
 8008ed6:	2416      	movs	r4, #22
 8008ed8:	193b      	adds	r3, r7, r4
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	021b      	lsls	r3, r3, #8
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	2318      	movs	r3, #24
 8008ee4:	18fb      	adds	r3, r7, r3
 8008ee6:	188a      	adds	r2, r1, r2
 8008ee8:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008eea:	250a      	movs	r5, #10
 8008eec:	197b      	adds	r3, r7, r5
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	3b03      	subs	r3, #3
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	18d3      	adds	r3, r2, r3
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	183a      	adds	r2, r7, r0
 8008efa:	0011      	movs	r1, r2
 8008efc:	0018      	movs	r0, r3
 8008efe:	f7ff fdf5 	bl	8008aec <ascii_to_value>
 8008f02:	0003      	movs	r3, r0
 8008f04:	001a      	movs	r2, r3
 8008f06:	2301      	movs	r3, #1
 8008f08:	4053      	eors	r3, r2
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d111      	bne.n	8008f34 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008f10:	197b      	adds	r3, r7, r5
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	3b02      	subs	r3, #2
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	18d3      	adds	r3, r2, r3
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	193a      	adds	r2, r7, r4
 8008f1e:	0011      	movs	r1, r2
 8008f20:	0018      	movs	r0, r3
 8008f22:	f7ff fde3 	bl	8008aec <ascii_to_value>
 8008f26:	0003      	movs	r3, r0
 8008f28:	001a      	movs	r2, r3
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4053      	eors	r3, r2
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008f34:	4b1b      	ldr	r3, [pc, #108]	; (8008fa4 <astronode_decode_answer_transport+0x31c>)
 8008f36:	0018      	movs	r0, r3
 8008f38:	f7f9 ff16 	bl	8002d68 <send_debug_logs>
        return RS_FAILURE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	e027      	b.n	8008f90 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008f40:	2317      	movs	r3, #23
 8008f42:	18fb      	adds	r3, r7, r3
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	2316      	movs	r3, #22
 8008f4e:	18fb      	adds	r3, r7, r3
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	18d3      	adds	r3, r2, r3
 8008f56:	b299      	uxth	r1, r3
 8008f58:	2018      	movs	r0, #24
 8008f5a:	183b      	adds	r3, r7, r0
 8008f5c:	183a      	adds	r2, r7, r0
 8008f5e:	8812      	ldrh	r2, [r2, #0]
 8008f60:	188a      	adds	r2, r1, r2
 8008f62:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008f64:	183a      	adds	r2, r7, r0
 8008f66:	231a      	movs	r3, #26
 8008f68:	18fb      	adds	r3, r7, r3
 8008f6a:	8812      	ldrh	r2, [r2, #0]
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d005      	beq.n	8008f7e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008f72:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <astronode_decode_answer_transport+0x324>)
 8008f74:	0018      	movs	r0, r3
 8008f76:	f7f9 fef7 	bl	8002d68 <send_debug_logs>
        return RS_FAILURE;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e008      	b.n	8008f90 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2bff      	cmp	r3, #255	; 0xff
 8008f84:	d103      	bne.n	8008f8e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f000 f8c3 	bl	8009114 <check_for_error>
    }

    return RS_SUCCESS;
 8008f8e:	2301      	movs	r3, #1
}
 8008f90:	0018      	movs	r0, r3
 8008f92:	46bd      	mov	sp, r7
 8008f94:	b009      	add	sp, #36	; 0x24
 8008f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f98:	08013a4c 	.word	0x08013a4c
 8008f9c:	08013a9c 	.word	0x08013a9c
 8008fa0:	08013aec 	.word	0x08013aec
 8008fa4:	08013b3c 	.word	0x08013b3c
 8008fa8:	0000ffff 	.word	0x0000ffff
 8008fac:	08013b88 	.word	0x08013b88

08008fb0 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fb2:	4c2b      	ldr	r4, [pc, #172]	; (8009060 <astronode_transport_send_receive+0xb0>)
 8008fb4:	44a5      	add	sp, r4
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008fbc:	4b29      	ldr	r3, [pc, #164]	; (8009064 <astronode_transport_send_receive+0xb4>)
 8008fbe:	25ca      	movs	r5, #202	; 0xca
 8008fc0:	00ad      	lsls	r5, r5, #2
 8008fc2:	195b      	adds	r3, r3, r5
 8008fc4:	19db      	adds	r3, r3, r7
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	22c4      	movs	r2, #196	; 0xc4
 8008fce:	0052      	lsls	r2, r2, #1
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f002 ff22 	bl	800be1c <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008fd8:	4b23      	ldr	r3, [pc, #140]	; (8009068 <astronode_transport_send_receive+0xb8>)
 8008fda:	195b      	adds	r3, r3, r5
 8008fdc:	19db      	adds	r3, r3, r7
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	22c4      	movs	r2, #196	; 0xc4
 8008fe6:	0052      	lsls	r2, r2, #1
 8008fe8:	2100      	movs	r1, #0
 8008fea:	0018      	movs	r0, r3
 8008fec:	f002 ff16 	bl	800be1c <memset>
    uint16_t answer_length =  0;
 8008ff0:	4b1e      	ldr	r3, [pc, #120]	; (800906c <astronode_transport_send_receive+0xbc>)
 8008ff2:	195b      	adds	r3, r3, r5
 8008ff4:	19db      	adds	r3, r3, r7
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8008ffa:	4e1d      	ldr	r6, [pc, #116]	; (8009070 <astronode_transport_send_receive+0xc0>)
 8008ffc:	19bc      	adds	r4, r7, r6
 8008ffe:	23cc      	movs	r3, #204	; 0xcc
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	18fa      	adds	r2, r7, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	0011      	movs	r1, r2
 8009008:	0018      	movs	r0, r3
 800900a:	f7ff fd9b 	bl	8008b44 <astronode_create_request_transport>
 800900e:	0003      	movs	r3, r0
 8009010:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8009012:	19bb      	adds	r3, r7, r6
 8009014:	881a      	ldrh	r2, [r3, #0]
 8009016:	23cc      	movs	r3, #204	; 0xcc
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	18fb      	adds	r3, r7, r3
 800901c:	0011      	movs	r1, r2
 800901e:	0018      	movs	r0, r3
 8009020:	f7f9 feee 	bl	8002e00 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8009024:	230a      	movs	r3, #10
 8009026:	18fa      	adds	r2, r7, r3
 8009028:	240c      	movs	r4, #12
 800902a:	193b      	adds	r3, r7, r4
 800902c:	0011      	movs	r1, r2
 800902e:	0018      	movs	r0, r3
 8009030:	f000 f92c 	bl	800928c <receive_astronode_answer>
 8009034:	0003      	movs	r3, r0
 8009036:	2b01      	cmp	r3, #1
 8009038:	d10a      	bne.n	8009050 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800903a:	4b0c      	ldr	r3, [pc, #48]	; (800906c <astronode_transport_send_receive+0xbc>)
 800903c:	195b      	adds	r3, r3, r5
 800903e:	19db      	adds	r3, r3, r7
 8009040:	8819      	ldrh	r1, [r3, #0]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	193b      	adds	r3, r7, r4
 8009046:	0018      	movs	r0, r3
 8009048:	f7ff fe1e 	bl	8008c88 <astronode_decode_answer_transport>
 800904c:	0003      	movs	r3, r0
 800904e:	e000      	b.n	8009052 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009050:	2300      	movs	r3, #0
    }
}
 8009052:	0018      	movs	r0, r3
 8009054:	46bd      	mov	sp, r7
 8009056:	23cb      	movs	r3, #203	; 0xcb
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	449d      	add	sp, r3
 800905c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	fffffcd4 	.word	0xfffffcd4
 8009064:	fffffe70 	.word	0xfffffe70
 8009068:	fffffce4 	.word	0xfffffce4
 800906c:	fffffce2 	.word	0xfffffce2
 8009070:	00000326 	.word	0x00000326

08009074 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8009074:	b590      	push	{r4, r7, lr}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	0008      	movs	r0, r1
 800907e:	0011      	movs	r1, r2
 8009080:	1cbb      	adds	r3, r7, #2
 8009082:	1c02      	adds	r2, r0, #0
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	003b      	movs	r3, r7
 8009088:	1c0a      	adds	r2, r1, #0
 800908a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800908c:	230e      	movs	r3, #14
 800908e:	18fb      	adds	r3, r7, r3
 8009090:	003a      	movs	r2, r7
 8009092:	8812      	ldrh	r2, [r2, #0]
 8009094:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8009096:	e02e      	b.n	80090f6 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8009098:	240e      	movs	r4, #14
 800909a:	193b      	adds	r3, r7, r4
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	0a1b      	lsrs	r3, r3, #8
 80090a0:	b299      	uxth	r1, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	200c      	movs	r0, #12
 80090ae:	183b      	adds	r3, r7, r0
 80090b0:	404a      	eors	r2, r1
 80090b2:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80090b4:	183b      	adds	r3, r7, r0
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	091b      	lsrs	r3, r3, #4
 80090ba:	b299      	uxth	r1, r3
 80090bc:	183b      	adds	r3, r7, r0
 80090be:	183a      	adds	r2, r7, r0
 80090c0:	8812      	ldrh	r2, [r2, #0]
 80090c2:	404a      	eors	r2, r1
 80090c4:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80090c6:	0021      	movs	r1, r4
 80090c8:	187b      	adds	r3, r7, r1
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	021b      	lsls	r3, r3, #8
 80090ce:	b21a      	sxth	r2, r3
 80090d0:	183b      	adds	r3, r7, r0
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	031b      	lsls	r3, r3, #12
 80090d6:	b21b      	sxth	r3, r3
 80090d8:	4053      	eors	r3, r2
 80090da:	b21a      	sxth	r2, r3
 80090dc:	183b      	adds	r3, r7, r0
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	015b      	lsls	r3, r3, #5
 80090e2:	b21b      	sxth	r3, r3
 80090e4:	4053      	eors	r3, r2
 80090e6:	b21a      	sxth	r2, r3
 80090e8:	183b      	adds	r3, r7, r0
 80090ea:	2000      	movs	r0, #0
 80090ec:	5e1b      	ldrsh	r3, [r3, r0]
 80090ee:	4053      	eors	r3, r2
 80090f0:	b21a      	sxth	r2, r3
 80090f2:	187b      	adds	r3, r7, r1
 80090f4:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80090f6:	1cbb      	adds	r3, r7, #2
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	1cba      	adds	r2, r7, #2
 80090fc:	1e59      	subs	r1, r3, #1
 80090fe:	8011      	strh	r1, [r2, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1c9      	bne.n	8009098 <calculate_crc+0x24>
    }
    return crc;
 8009104:	230e      	movs	r3, #14
 8009106:	18fb      	adds	r3, r7, r3
 8009108:	881b      	ldrh	r3, [r3, #0]
}
 800910a:	0018      	movs	r0, r3
 800910c:	46bd      	mov	sp, r7
 800910e:	b005      	add	sp, #20
 8009110:	bd90      	pop	{r4, r7, pc}
	...

08009114 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	785b      	ldrb	r3, [r3, #1]
 8009120:	b299      	uxth	r1, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	789b      	ldrb	r3, [r3, #2]
 8009126:	b29b      	uxth	r3, r3
 8009128:	021b      	lsls	r3, r3, #8
 800912a:	b29a      	uxth	r2, r3
 800912c:	200e      	movs	r0, #14
 800912e:	183b      	adds	r3, r7, r0
 8009130:	188a      	adds	r2, r1, r2
 8009132:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8009134:	183b      	adds	r3, r7, r0
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	4a40      	ldr	r2, [pc, #256]	; (800923c <check_for_error+0x128>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d100      	bne.n	8009140 <check_for_error+0x2c>
 800913e:	e06f      	b.n	8009220 <check_for_error+0x10c>
 8009140:	4a3e      	ldr	r2, [pc, #248]	; (800923c <check_for_error+0x128>)
 8009142:	4293      	cmp	r3, r2
 8009144:	dd00      	ble.n	8009148 <check_for_error+0x34>
 8009146:	e070      	b.n	800922a <check_for_error+0x116>
 8009148:	4a3d      	ldr	r2, [pc, #244]	; (8009240 <check_for_error+0x12c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d100      	bne.n	8009150 <check_for_error+0x3c>
 800914e:	e062      	b.n	8009216 <check_for_error+0x102>
 8009150:	4a3b      	ldr	r2, [pc, #236]	; (8009240 <check_for_error+0x12c>)
 8009152:	4293      	cmp	r3, r2
 8009154:	dd00      	ble.n	8009158 <check_for_error+0x44>
 8009156:	e068      	b.n	800922a <check_for_error+0x116>
 8009158:	4a3a      	ldr	r2, [pc, #232]	; (8009244 <check_for_error+0x130>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d056      	beq.n	800920c <check_for_error+0xf8>
 800915e:	4a39      	ldr	r2, [pc, #228]	; (8009244 <check_for_error+0x130>)
 8009160:	4293      	cmp	r3, r2
 8009162:	dd00      	ble.n	8009166 <check_for_error+0x52>
 8009164:	e061      	b.n	800922a <check_for_error+0x116>
 8009166:	4a38      	ldr	r2, [pc, #224]	; (8009248 <check_for_error+0x134>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d04a      	beq.n	8009202 <check_for_error+0xee>
 800916c:	4a36      	ldr	r2, [pc, #216]	; (8009248 <check_for_error+0x134>)
 800916e:	4293      	cmp	r3, r2
 8009170:	dc5b      	bgt.n	800922a <check_for_error+0x116>
 8009172:	4a36      	ldr	r2, [pc, #216]	; (800924c <check_for_error+0x138>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d03f      	beq.n	80091f8 <check_for_error+0xe4>
 8009178:	4a34      	ldr	r2, [pc, #208]	; (800924c <check_for_error+0x138>)
 800917a:	4293      	cmp	r3, r2
 800917c:	dc55      	bgt.n	800922a <check_for_error+0x116>
 800917e:	4a34      	ldr	r2, [pc, #208]	; (8009250 <check_for_error+0x13c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d034      	beq.n	80091ee <check_for_error+0xda>
 8009184:	4a32      	ldr	r2, [pc, #200]	; (8009250 <check_for_error+0x13c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	dc4f      	bgt.n	800922a <check_for_error+0x116>
 800918a:	4a32      	ldr	r2, [pc, #200]	; (8009254 <check_for_error+0x140>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d029      	beq.n	80091e4 <check_for_error+0xd0>
 8009190:	4a30      	ldr	r2, [pc, #192]	; (8009254 <check_for_error+0x140>)
 8009192:	4293      	cmp	r3, r2
 8009194:	dc49      	bgt.n	800922a <check_for_error+0x116>
 8009196:	4a30      	ldr	r2, [pc, #192]	; (8009258 <check_for_error+0x144>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d01e      	beq.n	80091da <check_for_error+0xc6>
 800919c:	4a2e      	ldr	r2, [pc, #184]	; (8009258 <check_for_error+0x144>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	dc43      	bgt.n	800922a <check_for_error+0x116>
 80091a2:	2222      	movs	r2, #34	; 0x22
 80091a4:	32ff      	adds	r2, #255	; 0xff
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d012      	beq.n	80091d0 <check_for_error+0xbc>
 80091aa:	2291      	movs	r2, #145	; 0x91
 80091ac:	0052      	lsls	r2, r2, #1
 80091ae:	4293      	cmp	r3, r2
 80091b0:	da3b      	bge.n	800922a <check_for_error+0x116>
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d002      	beq.n	80091bc <check_for_error+0xa8>
 80091b6:	2b11      	cmp	r3, #17
 80091b8:	d005      	beq.n	80091c6 <check_for_error+0xb2>
 80091ba:	e036      	b.n	800922a <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80091bc:	4b27      	ldr	r3, [pc, #156]	; (800925c <check_for_error+0x148>)
 80091be:	0018      	movs	r0, r3
 80091c0:	f7f9 fdd2 	bl	8002d68 <send_debug_logs>
            break;
 80091c4:	e036      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80091c6:	4b26      	ldr	r3, [pc, #152]	; (8009260 <check_for_error+0x14c>)
 80091c8:	0018      	movs	r0, r3
 80091ca:	f7f9 fdcd 	bl	8002d68 <send_debug_logs>
            break;
 80091ce:	e031      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80091d0:	4b24      	ldr	r3, [pc, #144]	; (8009264 <check_for_error+0x150>)
 80091d2:	0018      	movs	r0, r3
 80091d4:	f7f9 fdc8 	bl	8002d68 <send_debug_logs>
            break;
 80091d8:	e02c      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80091da:	4b23      	ldr	r3, [pc, #140]	; (8009268 <check_for_error+0x154>)
 80091dc:	0018      	movs	r0, r3
 80091de:	f7f9 fdc3 	bl	8002d68 <send_debug_logs>
            break;
 80091e2:	e027      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80091e4:	4b21      	ldr	r3, [pc, #132]	; (800926c <check_for_error+0x158>)
 80091e6:	0018      	movs	r0, r3
 80091e8:	f7f9 fdbe 	bl	8002d68 <send_debug_logs>
            break;
 80091ec:	e022      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80091ee:	4b20      	ldr	r3, [pc, #128]	; (8009270 <check_for_error+0x15c>)
 80091f0:	0018      	movs	r0, r3
 80091f2:	f7f9 fdb9 	bl	8002d68 <send_debug_logs>
            break;
 80091f6:	e01d      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80091f8:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <check_for_error+0x160>)
 80091fa:	0018      	movs	r0, r3
 80091fc:	f7f9 fdb4 	bl	8002d68 <send_debug_logs>
            break;
 8009200:	e018      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8009202:	4b1d      	ldr	r3, [pc, #116]	; (8009278 <check_for_error+0x164>)
 8009204:	0018      	movs	r0, r3
 8009206:	f7f9 fdaf 	bl	8002d68 <send_debug_logs>
            break;
 800920a:	e013      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 800920c:	4b1b      	ldr	r3, [pc, #108]	; (800927c <check_for_error+0x168>)
 800920e:	0018      	movs	r0, r3
 8009210:	f7f9 fdaa 	bl	8002d68 <send_debug_logs>
            break;
 8009214:	e00e      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8009216:	4b1a      	ldr	r3, [pc, #104]	; (8009280 <check_for_error+0x16c>)
 8009218:	0018      	movs	r0, r3
 800921a:	f7f9 fda5 	bl	8002d68 <send_debug_logs>
            break;
 800921e:	e009      	b.n	8009234 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8009220:	4b18      	ldr	r3, [pc, #96]	; (8009284 <check_for_error+0x170>)
 8009222:	0018      	movs	r0, r3
 8009224:	f7f9 fda0 	bl	8002d68 <send_debug_logs>
            break;
 8009228:	e004      	b.n	8009234 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800922a:	4b17      	ldr	r3, [pc, #92]	; (8009288 <check_for_error+0x174>)
 800922c:	0018      	movs	r0, r3
 800922e:	f7f9 fd9b 	bl	8002d68 <send_debug_logs>
            break;
 8009232:	46c0      	nop			; (mov r8, r8)
    }
}
 8009234:	46c0      	nop			; (mov r8, r8)
 8009236:	46bd      	mov	sp, r7
 8009238:	b004      	add	sp, #16
 800923a:	bd80      	pop	{r7, pc}
 800923c:	00004601 	.word	0x00004601
 8009240:	00004501 	.word	0x00004501
 8009244:	00003501 	.word	0x00003501
 8009248:	00002601 	.word	0x00002601
 800924c:	00002511 	.word	0x00002511
 8009250:	00002501 	.word	0x00002501
 8009254:	00000611 	.word	0x00000611
 8009258:	00000601 	.word	0x00000601
 800925c:	08013bcc 	.word	0x08013bcc
 8009260:	08013c18 	.word	0x08013c18
 8009264:	08013c7c 	.word	0x08013c7c
 8009268:	08013cb4 	.word	0x08013cb4
 800926c:	08013d58 	.word	0x08013d58
 8009270:	08013dc0 	.word	0x08013dc0
 8009274:	08013e20 	.word	0x08013e20
 8009278:	08013eac 	.word	0x08013eac
 800927c:	08013f0c 	.word	0x08013f0c
 8009280:	08013fb8 	.word	0x08013fb8
 8009284:	08014004 	.word	0x08014004
 8009288:	0801404c 	.word	0x0801404c

0800928c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800928c:	b5b0      	push	{r4, r5, r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8009296:	230f      	movs	r3, #15
 8009298:	18fb      	adds	r3, r7, r3
 800929a:	2200      	movs	r2, #0
 800929c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800929e:	2316      	movs	r3, #22
 80092a0:	18fb      	adds	r3, r7, r3
 80092a2:	2200      	movs	r2, #0
 80092a4:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80092a6:	f7f9 fdef 	bl	8002e88 <get_systick>
 80092aa:	0003      	movs	r3, r0
 80092ac:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80092ae:	2315      	movs	r3, #21
 80092b0:	18fb      	adds	r3, r7, r3
 80092b2:	2200      	movs	r2, #0
 80092b4:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80092b6:	e054      	b.n	8009362 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80092b8:	4a34      	ldr	r2, [pc, #208]	; (800938c <receive_astronode_answer+0x100>)
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	0011      	movs	r1, r2
 80092be:	0018      	movs	r0, r3
 80092c0:	f7f9 fdea 	bl	8002e98 <is_systick_timeout_over>
 80092c4:	1e03      	subs	r3, r0, #0
 80092c6:	d005      	beq.n	80092d4 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80092c8:	4b31      	ldr	r3, [pc, #196]	; (8009390 <receive_astronode_answer+0x104>)
 80092ca:	0018      	movs	r0, r3
 80092cc:	f7f9 fd4c 	bl	8002d68 <send_debug_logs>
            return RS_FAILURE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	e057      	b.n	8009384 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80092d4:	250f      	movs	r5, #15
 80092d6:	197b      	adds	r3, r7, r5
 80092d8:	0018      	movs	r0, r3
 80092da:	f7f9 fdaf 	bl	8002e3c <is_astronode_character_received>
 80092de:	0003      	movs	r3, r0
 80092e0:	0019      	movs	r1, r3
 80092e2:	2016      	movs	r0, #22
 80092e4:	183b      	adds	r3, r7, r0
 80092e6:	183a      	adds	r2, r7, r0
 80092e8:	8812      	ldrh	r2, [r2, #0]
 80092ea:	801a      	strh	r2, [r3, #0]
 80092ec:	2415      	movs	r4, #21
 80092ee:	193b      	adds	r3, r7, r4
 80092f0:	193a      	adds	r2, r7, r4
 80092f2:	7812      	ldrb	r2, [r2, #0]
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	2900      	cmp	r1, #0
 80092f8:	d033      	beq.n	8009362 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80092fa:	197b      	adds	r3, r7, r5
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d105      	bne.n	800930e <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8009302:	193b      	adds	r3, r7, r4
 8009304:	2200      	movs	r2, #0
 8009306:	701a      	strb	r2, [r3, #0]
                length = 0;
 8009308:	183b      	adds	r3, r7, r0
 800930a:	2200      	movs	r2, #0
 800930c:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800930e:	2116      	movs	r1, #22
 8009310:	187b      	adds	r3, r7, r1
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	18d3      	adds	r3, r2, r3
 8009318:	220f      	movs	r2, #15
 800931a:	18ba      	adds	r2, r7, r2
 800931c:	7812      	ldrb	r2, [r2, #0]
 800931e:	701a      	strb	r2, [r3, #0]
            length++;
 8009320:	187b      	adds	r3, r7, r1
 8009322:	881a      	ldrh	r2, [r3, #0]
 8009324:	187b      	adds	r3, r7, r1
 8009326:	3201      	adds	r2, #1
 8009328:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800932a:	187b      	adds	r3, r7, r1
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	2bb2      	cmp	r3, #178	; 0xb2
 8009330:	d905      	bls.n	800933e <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8009332:	4b18      	ldr	r3, [pc, #96]	; (8009394 <receive_astronode_answer+0x108>)
 8009334:	0018      	movs	r0, r3
 8009336:	f7f9 fd17 	bl	8002d68 <send_debug_logs>
                return RS_FAILURE;
 800933a:	2300      	movs	r3, #0
 800933c:	e022      	b.n	8009384 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800933e:	230f      	movs	r3, #15
 8009340:	18fb      	adds	r3, r7, r3
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d10c      	bne.n	8009362 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8009348:	2216      	movs	r2, #22
 800934a:	18bb      	adds	r3, r7, r2
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d907      	bls.n	8009362 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	18ba      	adds	r2, r7, r2
 8009356:	8812      	ldrh	r2, [r2, #0]
 8009358:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800935a:	2315      	movs	r3, #21
 800935c:	18fb      	adds	r3, r7, r3
 800935e:	2201      	movs	r2, #1
 8009360:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8009362:	2315      	movs	r3, #21
 8009364:	18fb      	adds	r3, r7, r3
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2201      	movs	r2, #1
 800936a:	4053      	eors	r3, r2
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1a2      	bne.n	80092b8 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <receive_astronode_answer+0x10c>)
 8009374:	0018      	movs	r0, r3
 8009376:	f7f9 fcf7 	bl	8002d68 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	0018      	movs	r0, r3
 800937e:	f7f9 fcf3 	bl	8002d68 <send_debug_logs>

    return RS_SUCCESS;
 8009382:	2301      	movs	r3, #1
}
 8009384:	0018      	movs	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	b006      	add	sp, #24
 800938a:	bdb0      	pop	{r4, r5, r7, pc}
 800938c:	000005dc 	.word	0x000005dc
 8009390:	08014070 	.word	0x08014070
 8009394:	08014094 	.word	0x08014094
 8009398:	080140e0 	.word	0x080140e0

0800939c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	0002      	movs	r2, r0
 80093a4:	6039      	str	r1, [r7, #0]
 80093a6:	1dfb      	adds	r3, r7, #7
 80093a8:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 80093aa:	1dfb      	adds	r3, r7, #7
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	091b      	lsrs	r3, r3, #4
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	001a      	movs	r2, r3
 80093b4:	4b08      	ldr	r3, [pc, #32]	; (80093d8 <uint8_to_ascii_buffer+0x3c>)
 80093b6:	5c9a      	ldrb	r2, [r3, r2]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80093bc:	1dfb      	adds	r3, r7, #7
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	220f      	movs	r2, #15
 80093c2:	401a      	ands	r2, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	3301      	adds	r3, #1
 80093c8:	4903      	ldr	r1, [pc, #12]	; (80093d8 <uint8_to_ascii_buffer+0x3c>)
 80093ca:	5c8a      	ldrb	r2, [r1, r2]
 80093cc:	701a      	strb	r2, [r3, #0]
}
 80093ce:	46c0      	nop			; (mov r8, r8)
 80093d0:	46bd      	mov	sp, r7
 80093d2:	b002      	add	sp, #8
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	08014310 	.word	0x08014310

080093dc <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80093dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	0008      	movs	r0, r1
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	0019      	movs	r1, r3
 80093ea:	260b      	movs	r6, #11
 80093ec:	19bb      	adds	r3, r7, r6
 80093ee:	1c02      	adds	r2, r0, #0
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	2508      	movs	r5, #8
 80093f4:	197b      	adds	r3, r7, r5
 80093f6:	1c0a      	adds	r2, r1, #0
 80093f8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	685c      	ldr	r4, [r3, #4]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	68d8      	ldr	r0, [r3, #12]
 8009402:	197b      	adds	r3, r7, r5
 8009404:	881d      	ldrh	r5, [r3, #0]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	19bb      	adds	r3, r7, r6
 800940a:	7819      	ldrb	r1, [r3, #0]
 800940c:	002b      	movs	r3, r5
 800940e:	47a0      	blx	r4
 8009410:	0003      	movs	r3, r0
 8009412:	617b      	str	r3, [r7, #20]

  return ret;
 8009414:	697b      	ldr	r3, [r7, #20]
}
 8009416:	0018      	movs	r0, r3
 8009418:	46bd      	mov	sp, r7
 800941a:	b007      	add	sp, #28
 800941c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800941e <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 800941e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009420:	b087      	sub	sp, #28
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	0008      	movs	r0, r1
 8009428:	607a      	str	r2, [r7, #4]
 800942a:	0019      	movs	r1, r3
 800942c:	260b      	movs	r6, #11
 800942e:	19bb      	adds	r3, r7, r6
 8009430:	1c02      	adds	r2, r0, #0
 8009432:	701a      	strb	r2, [r3, #0]
 8009434:	2508      	movs	r5, #8
 8009436:	197b      	adds	r3, r7, r5
 8009438:	1c0a      	adds	r2, r1, #0
 800943a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681c      	ldr	r4, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68d8      	ldr	r0, [r3, #12]
 8009444:	197b      	adds	r3, r7, r5
 8009446:	881d      	ldrh	r5, [r3, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	19bb      	adds	r3, r7, r6
 800944c:	7819      	ldrb	r1, [r3, #0]
 800944e:	002b      	movs	r3, r5
 8009450:	47a0      	blx	r4
 8009452:	0003      	movs	r3, r0
 8009454:	617b      	str	r3, [r7, #20]

  return ret;
 8009456:	697b      	ldr	r3, [r7, #20]
}
 8009458:	0018      	movs	r0, r3
 800945a:	46bd      	mov	sp, r7
 800945c:	b007      	add	sp, #28
 800945e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009460 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8009460:	b590      	push	{r4, r7, lr}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	000a      	movs	r2, r1
 800946a:	1cfb      	adds	r3, r7, #3
 800946c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800946e:	2410      	movs	r4, #16
 8009470:	193a      	adds	r2, r7, r4
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	2301      	movs	r3, #1
 8009476:	2120      	movs	r1, #32
 8009478:	f7ff ffb0 	bl	80093dc <lis2dw12_read_reg>
 800947c:	0003      	movs	r3, r0
 800947e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d129      	bne.n	80094da <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8009486:	1cfb      	adds	r3, r7, #3
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	089b      	lsrs	r3, r3, #2
 800948c:	1c1a      	adds	r2, r3, #0
 800948e:	2303      	movs	r3, #3
 8009490:	4013      	ands	r3, r2
 8009492:	b2da      	uxtb	r2, r3
 8009494:	193b      	adds	r3, r7, r4
 8009496:	2103      	movs	r1, #3
 8009498:	400a      	ands	r2, r1
 800949a:	0090      	lsls	r0, r2, #2
 800949c:	781a      	ldrb	r2, [r3, #0]
 800949e:	210c      	movs	r1, #12
 80094a0:	438a      	bics	r2, r1
 80094a2:	1c11      	adds	r1, r2, #0
 80094a4:	1c02      	adds	r2, r0, #0
 80094a6:	430a      	orrs	r2, r1
 80094a8:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80094aa:	1cfb      	adds	r3, r7, #3
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	2203      	movs	r2, #3
 80094b0:	4013      	ands	r3, r2
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	193b      	adds	r3, r7, r4
 80094b6:	2103      	movs	r1, #3
 80094b8:	400a      	ands	r2, r1
 80094ba:	0010      	movs	r0, r2
 80094bc:	781a      	ldrb	r2, [r3, #0]
 80094be:	2103      	movs	r1, #3
 80094c0:	438a      	bics	r2, r1
 80094c2:	1c11      	adds	r1, r2, #0
 80094c4:	1c02      	adds	r2, r0, #0
 80094c6:	430a      	orrs	r2, r1
 80094c8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80094ca:	193a      	adds	r2, r7, r4
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	2301      	movs	r3, #1
 80094d0:	2120      	movs	r1, #32
 80094d2:	f7ff ffa4 	bl	800941e <lis2dw12_write_reg>
 80094d6:	0003      	movs	r3, r0
 80094d8:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d108      	bne.n	80094f2 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80094e0:	230c      	movs	r3, #12
 80094e2:	18fa      	adds	r2, r7, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	2301      	movs	r3, #1
 80094e8:	2125      	movs	r1, #37	; 0x25
 80094ea:	f7ff ff77 	bl	80093dc <lis2dw12_read_reg>
 80094ee:	0003      	movs	r3, r0
 80094f0:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d11a      	bne.n	800952e <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80094f8:	1cfb      	adds	r3, r7, #3
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	091b      	lsrs	r3, r3, #4
 80094fe:	1c1a      	adds	r2, r3, #0
 8009500:	2301      	movs	r3, #1
 8009502:	4013      	ands	r3, r2
 8009504:	b2da      	uxtb	r2, r3
 8009506:	240c      	movs	r4, #12
 8009508:	193b      	adds	r3, r7, r4
 800950a:	2101      	movs	r1, #1
 800950c:	400a      	ands	r2, r1
 800950e:	0090      	lsls	r0, r2, #2
 8009510:	781a      	ldrb	r2, [r3, #0]
 8009512:	2104      	movs	r1, #4
 8009514:	438a      	bics	r2, r1
 8009516:	1c11      	adds	r1, r2, #0
 8009518:	1c02      	adds	r2, r0, #0
 800951a:	430a      	orrs	r2, r1
 800951c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800951e:	193a      	adds	r2, r7, r4
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	2301      	movs	r3, #1
 8009524:	2125      	movs	r1, #37	; 0x25
 8009526:	f7ff ff7a 	bl	800941e <lis2dw12_write_reg>
 800952a:	0003      	movs	r3, r0
 800952c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800952e:	697b      	ldr	r3, [r7, #20]
}
 8009530:	0018      	movs	r0, r3
 8009532:	46bd      	mov	sp, r7
 8009534:	b007      	add	sp, #28
 8009536:	bd90      	pop	{r4, r7, pc}

08009538 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	000a      	movs	r2, r1
 8009542:	1cfb      	adds	r3, r7, #3
 8009544:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8009546:	2408      	movs	r4, #8
 8009548:	193a      	adds	r2, r7, r4
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	2301      	movs	r3, #1
 800954e:	2125      	movs	r1, #37	; 0x25
 8009550:	f7ff ff44 	bl	80093dc <lis2dw12_read_reg>
 8009554:	0003      	movs	r3, r0
 8009556:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d117      	bne.n	800958e <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 800955e:	1cfb      	adds	r3, r7, #3
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2203      	movs	r2, #3
 8009564:	4013      	ands	r3, r2
 8009566:	b2da      	uxtb	r2, r3
 8009568:	193b      	adds	r3, r7, r4
 800956a:	2103      	movs	r1, #3
 800956c:	400a      	ands	r2, r1
 800956e:	0110      	lsls	r0, r2, #4
 8009570:	781a      	ldrb	r2, [r3, #0]
 8009572:	2130      	movs	r1, #48	; 0x30
 8009574:	438a      	bics	r2, r1
 8009576:	1c11      	adds	r1, r2, #0
 8009578:	1c02      	adds	r2, r0, #0
 800957a:	430a      	orrs	r2, r1
 800957c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800957e:	193a      	adds	r2, r7, r4
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	2301      	movs	r3, #1
 8009584:	2125      	movs	r1, #37	; 0x25
 8009586:	f7ff ff4a 	bl	800941e <lis2dw12_write_reg>
 800958a:	0003      	movs	r3, r0
 800958c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800958e:	68fb      	ldr	r3, [r7, #12]
}
 8009590:	0018      	movs	r0, r3
 8009592:	46bd      	mov	sp, r7
 8009594:	b005      	add	sp, #20
 8009596:	bd90      	pop	{r4, r7, pc}

08009598 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	2301      	movs	r3, #1
 80095a8:	210f      	movs	r1, #15
 80095aa:	f7ff ff17 	bl	80093dc <lis2dw12_read_reg>
 80095ae:	0003      	movs	r3, r0
 80095b0:	60fb      	str	r3, [r7, #12]

  return ret;
 80095b2:	68fb      	ldr	r3, [r7, #12]
}
 80095b4:	0018      	movs	r0, r3
 80095b6:	46bd      	mov	sp, r7
 80095b8:	b004      	add	sp, #16
 80095ba:	bd80      	pop	{r7, pc}

080095bc <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	000a      	movs	r2, r1
 80095c6:	1cfb      	adds	r3, r7, #3
 80095c8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80095ca:	2408      	movs	r4, #8
 80095cc:	193a      	adds	r2, r7, r4
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	2301      	movs	r3, #1
 80095d2:	2121      	movs	r1, #33	; 0x21
 80095d4:	f7ff ff02 	bl	80093dc <lis2dw12_read_reg>
 80095d8:	0003      	movs	r3, r0
 80095da:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d117      	bne.n	8009612 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 80095e2:	1cfb      	adds	r3, r7, #3
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2201      	movs	r2, #1
 80095e8:	4013      	ands	r3, r2
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	193b      	adds	r3, r7, r4
 80095ee:	2101      	movs	r1, #1
 80095f0:	400a      	ands	r2, r1
 80095f2:	0190      	lsls	r0, r2, #6
 80095f4:	781a      	ldrb	r2, [r3, #0]
 80095f6:	2140      	movs	r1, #64	; 0x40
 80095f8:	438a      	bics	r2, r1
 80095fa:	1c11      	adds	r1, r2, #0
 80095fc:	1c02      	adds	r2, r0, #0
 80095fe:	430a      	orrs	r2, r1
 8009600:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009602:	193a      	adds	r2, r7, r4
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	2301      	movs	r3, #1
 8009608:	2121      	movs	r1, #33	; 0x21
 800960a:	f7ff ff08 	bl	800941e <lis2dw12_write_reg>
 800960e:	0003      	movs	r3, r0
 8009610:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009612:	68fb      	ldr	r3, [r7, #12]
}
 8009614:	0018      	movs	r0, r3
 8009616:	46bd      	mov	sp, r7
 8009618:	b005      	add	sp, #20
 800961a:	bd90      	pop	{r4, r7, pc}

0800961c <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800961c:	b590      	push	{r4, r7, lr}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009626:	2408      	movs	r4, #8
 8009628:	193a      	adds	r2, r7, r4
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	2301      	movs	r3, #1
 800962e:	2121      	movs	r1, #33	; 0x21
 8009630:	f7ff fed4 	bl	80093dc <lis2dw12_read_reg>
 8009634:	0003      	movs	r3, r0
 8009636:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 8009638:	193b      	adds	r3, r7, r4
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	065b      	lsls	r3, r3, #25
 800963e:	0fdb      	lsrs	r3, r3, #31
 8009640:	b2db      	uxtb	r3, r3
 8009642:	001a      	movs	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	701a      	strb	r2, [r3, #0]

  return ret;
 8009648:	68fb      	ldr	r3, [r7, #12]
}
 800964a:	0018      	movs	r0, r3
 800964c:	46bd      	mov	sp, r7
 800964e:	b005      	add	sp, #20
 8009650:	bd90      	pop	{r4, r7, pc}

08009652 <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 800965c:	2310      	movs	r3, #16
 800965e:	18fa      	adds	r2, r7, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	2301      	movs	r3, #1
 8009664:	2124      	movs	r1, #36	; 0x24
 8009666:	f7ff feb9 	bl	80093dc <lis2dw12_read_reg>
 800966a:	0003      	movs	r3, r0
 800966c:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d108      	bne.n	8009686 <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009674:	230c      	movs	r3, #12
 8009676:	18fa      	adds	r2, r7, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	2301      	movs	r3, #1
 800967c:	213f      	movs	r1, #63	; 0x3f
 800967e:	f7ff fead 	bl	80093dc <lis2dw12_read_reg>
 8009682:	0003      	movs	r3, r0
 8009684:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d146      	bne.n	800971a <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	071b      	lsls	r3, r3, #28
 8009692:	0fdb      	lsrs	r3, r3, #31
 8009694:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	06db      	lsls	r3, r3, #27
 800969c:	0fdb      	lsrs	r3, r3, #31
 800969e:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 80096a0:	4313      	orrs	r3, r2
 80096a2:	b2da      	uxtb	r2, r3
         val->int1_wu |
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	069b      	lsls	r3, r3, #26
 80096aa:	0fdb      	lsrs	r3, r3, #31
 80096ac:	b2db      	uxtb	r3, r3
         val->int1_ff |
 80096ae:	4313      	orrs	r3, r2
 80096b0:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	065b      	lsls	r3, r3, #25
 80096b8:	0fdb      	lsrs	r3, r3, #31
 80096ba:	b2db      	uxtb	r3, r3
         val->int1_wu |
 80096bc:	4313      	orrs	r3, r2
 80096be:	b2da      	uxtb	r2, r3
         val->int1_6d |
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	061b      	lsls	r3, r3, #24
 80096c6:	0fdb      	lsrs	r3, r3, #31
 80096c8:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 80096ca:	4313      	orrs	r3, r2
 80096cc:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80096ce:	2110      	movs	r1, #16
 80096d0:	187b      	adds	r3, r7, r1
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	061b      	lsls	r3, r3, #24
 80096d6:	0fdb      	lsrs	r3, r3, #31
 80096d8:	b2db      	uxtb	r3, r3
         val->int1_6d |
 80096da:	4313      	orrs	r3, r2
 80096dc:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 80096de:	187b      	adds	r3, r7, r1
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	065b      	lsls	r3, r3, #25
 80096e4:	0fdb      	lsrs	r3, r3, #31
 80096e6:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80096e8:	4313      	orrs	r3, r2
 80096ea:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d006      	beq.n	80096fe <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 80096f0:	230c      	movs	r3, #12
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	781a      	ldrb	r2, [r3, #0]
 80096f6:	2120      	movs	r1, #32
 80096f8:	430a      	orrs	r2, r1
 80096fa:	701a      	strb	r2, [r3, #0]
 80096fc:	e005      	b.n	800970a <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 80096fe:	230c      	movs	r3, #12
 8009700:	18fb      	adds	r3, r7, r3
 8009702:	781a      	ldrb	r2, [r3, #0]
 8009704:	2120      	movs	r1, #32
 8009706:	438a      	bics	r2, r1
 8009708:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	2301      	movs	r3, #1
 8009710:	2123      	movs	r1, #35	; 0x23
 8009712:	f7ff fe84 	bl	800941e <lis2dw12_write_reg>
 8009716:	0003      	movs	r3, r0
 8009718:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d108      	bne.n	8009732 <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009720:	230c      	movs	r3, #12
 8009722:	18fa      	adds	r2, r7, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	2301      	movs	r3, #1
 8009728:	213f      	movs	r1, #63	; 0x3f
 800972a:	f7ff fe78 	bl	800941e <lis2dw12_write_reg>
 800972e:	0003      	movs	r3, r0
 8009730:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009732:	697b      	ldr	r3, [r7, #20]
}
 8009734:	0018      	movs	r0, r3
 8009736:	46bd      	mov	sp, r7
 8009738:	b006      	add	sp, #24
 800973a:	bd80      	pop	{r7, pc}

0800973c <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	2301      	movs	r3, #1
 800974c:	2123      	movs	r1, #35	; 0x23
 800974e:	f7ff fe45 	bl	80093dc <lis2dw12_read_reg>
 8009752:	0003      	movs	r3, r0
 8009754:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8009756:	68fb      	ldr	r3, [r7, #12]
}
 8009758:	0018      	movs	r0, r3
 800975a:	46bd      	mov	sp, r7
 800975c:	b004      	add	sp, #16
 800975e:	bd80      	pop	{r7, pc}

08009760 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ( void )
{
 8009760:	b590      	push	{r4, r7, lr}
 8009762:	b087      	sub	sp, #28
 8009764:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009766:	1dfb      	adds	r3, r7, #7
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 800976c:	4b24      	ldr	r3, [pc, #144]	; (8009800 <my_astro_init+0xa0>)
 800976e:	2200      	movs	r2, #0
 8009770:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 8009772:	4b24      	ldr	r3, [pc, #144]	; (8009804 <my_astro_init+0xa4>)
 8009774:	0018      	movs	r0, r3
 8009776:	f7fc febb 	bl	80064f0 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 800977a:	e01a      	b.n	80097b2 <my_astro_init+0x52>
	{
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 800977c:	1dfc      	adds	r4, r7, #7
 800977e:	2300      	movs	r3, #0
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	2301      	movs	r3, #1
 8009784:	9302      	str	r3, [sp, #8]
 8009786:	2301      	movs	r3, #1
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	2301      	movs	r3, #1
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	2300      	movs	r3, #0
 8009790:	2201      	movs	r2, #1
 8009792:	2101      	movs	r1, #1
 8009794:	2001      	movs	r0, #1
 8009796:	f7fe f97b 	bl	8007a90 <astronode_send_cfg_wr>
 800979a:	0003      	movs	r3, r0
 800979c:	7023      	strb	r3, [r4, #0]
		my_astro_off () ;
 800979e:	f7f9 fbb9 	bl	8002f14 <my_astro_off>
		HAL_Delay ( 3000 ) ;
 80097a2:	4b19      	ldr	r3, [pc, #100]	; (8009808 <my_astro_init+0xa8>)
 80097a4:	0018      	movs	r0, r3
 80097a6:	f7f9 fff3 	bl	8003790 <HAL_Delay>
		my_astro_on () ;
 80097aa:	f7f9 fb8b 	bl	8002ec4 <my_astro_on>
		reset_astronode () ;
 80097ae:	f7f9 fb0b 	bl	8002dc8 <reset_astronode>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 80097b2:	4b13      	ldr	r3, [pc, #76]	; (8009800 <my_astro_init+0xa0>)
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	2b3b      	cmp	r3, #59	; 0x3b
 80097b8:	d806      	bhi.n	80097c8 <my_astro_init+0x68>
 80097ba:	1dfb      	adds	r3, r7, #7
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2201      	movs	r2, #1
 80097c0:	4053      	eors	r3, r2
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1d9      	bne.n	800977c <my_astro_init+0x1c>
	}
	tim_seconds = 0 ;
 80097c8:	4b0d      	ldr	r3, [pc, #52]	; (8009800 <my_astro_init+0xa0>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <my_astro_init+0xa4>)
 80097d0:	0018      	movs	r0, r3
 80097d2:	f7fc fee9 	bl	80065a8 <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 80097d6:	1dfb      	adds	r3, r7, #7
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <my_astro_init+0x96>
	{
		astronode_send_cfg_sr () ;
 80097de:	f7fe f91f 	bl	8007a20 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80097e2:	f7fe ff0b 	bl	80085fc <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80097e6:	f7fe faa9 	bl	8007d3c <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80097ea:	f7fe f9fd 	bl	8007be8 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80097ee:	f7fe fd93 	bl	8008318 <astronode_send_pld_fr>
		return true ;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e000      	b.n	80097f8 <my_astro_init+0x98>
	}
	else
	{
		return false ;
 80097f6:	2300      	movs	r3, #0
	}
}
 80097f8:	0018      	movs	r0, r3
 80097fa:	46bd      	mov	sp, r7
 80097fc:	b003      	add	sp, #12
 80097fe:	bd90      	pop	{r4, r7, pc}
 8009800:	200009b6 	.word	0x200009b6
 8009804:	2000078c 	.word	0x2000078c
 8009808:	00000bb8 	.word	0x00000bb8

0800980c <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( char* payload )
{
 800980c:	b590      	push	{r4, r7, lr}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
	uint16_t id = 0 ;
 8009814:	240e      	movs	r4, #14
 8009816:	193b      	adds	r3, r7, r4
 8009818:	2200      	movs	r2, #0
 800981a:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	0018      	movs	r0, r3
 8009820:	f7f6 fc70 	bl	8000104 <strlen>
 8009824:	0003      	movs	r3, r0
 8009826:	60bb      	str	r3, [r7, #8]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2ba0      	cmp	r3, #160	; 0xa0
 800982c:	d80b      	bhi.n	8009846 <my_astro_add_payload_2_queue+0x3a>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	b29a      	uxth	r2, r3
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	193b      	adds	r3, r7, r4
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	0018      	movs	r0, r3
 800983a:	f7fe fcc9 	bl	80081d0 <astronode_send_pld_er>
 800983e:	1e03      	subs	r3, r0, #0
 8009840:	d005      	beq.n	800984e <my_astro_add_payload_2_queue+0x42>
		{
			return true ;
 8009842:	2301      	movs	r3, #1
 8009844:	e004      	b.n	8009850 <my_astro_add_payload_2_queue+0x44>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009846:	4b04      	ldr	r3, [pc, #16]	; (8009858 <my_astro_add_payload_2_queue+0x4c>)
 8009848:	0018      	movs	r0, r3
 800984a:	f7f9 fa8d 	bl	8002d68 <send_debug_logs>
	}
	return false ;
 800984e:	2300      	movs	r3, #0
}
 8009850:	0018      	movs	r0, r3
 8009852:	46bd      	mov	sp, r7
 8009854:	b005      	add	sp, #20
 8009856:	bd90      	pop	{r4, r7, pc}
 8009858:	0801410c 	.word	0x0801410c

0800985c <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8009860:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <my_astro_read_evt_reg+0x5c>)
 8009862:	0018      	movs	r0, r3
 8009864:	f7f9 fa80 	bl	8002d68 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009868:	f7fe fb72 	bl	8007f50 <astronode_send_evt_rr>
	if (is_sak_available () )
 800986c:	f7ff f920 	bl	8008ab0 <is_sak_available>
 8009870:	1e03      	subs	r3, r0, #0
 8009872:	d007      	beq.n	8009884 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8009874:	f7fe fe2c 	bl	80084d0 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009878:	f7fe fe80 	bl	800857c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 800987c:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <my_astro_read_evt_reg+0x60>)
 800987e:	0018      	movs	r0, r3
 8009880:	f7f9 fa72 	bl	8002d68 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009884:	f7ff f91e 	bl	8008ac4 <is_astronode_reset>
 8009888:	1e03      	subs	r3, r0, #0
 800988a:	d005      	beq.n	8009898 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 800988c:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <my_astro_read_evt_reg+0x64>)
 800988e:	0018      	movs	r0, r3
 8009890:	f7f9 fa6a 	bl	8002d68 <send_debug_logs>
	  astronode_send_res_cr () ;
 8009894:	f7fe fd7c 	bl	8008390 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009898:	f7ff f91e 	bl	8008ad8 <is_command_available>
 800989c:	1e03      	subs	r3, r0, #0
 800989e:	d007      	beq.n	80098b0 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 80098a0:	4b08      	ldr	r3, [pc, #32]	; (80098c4 <my_astro_read_evt_reg+0x68>)
 80098a2:	0018      	movs	r0, r3
 80098a4:	f7f9 fa60 	bl	8002d68 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 80098a8:	f7fe ff92 	bl	80087d0 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 80098ac:	f7fe ff50 	bl	8008750 <astronode_send_cmd_cr>
	}
	return true ;
 80098b0:	2301      	movs	r3, #1
}
 80098b2:	0018      	movs	r0, r3
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	08014150 	.word	0x08014150
 80098bc:	0801416c 	.word	0x0801416c
 80098c0:	08014198 	.word	0x08014198
 80098c4:	080141bc 	.word	0x080141bc

080098c8 <my_astro_log>:
bool my_astro_log ( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 80098cc:	f7fe fda0 	bl	8008410 <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 80098d0:	f7fe fade 	bl	8007e90 <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 80098d4:	2301      	movs	r3, #1
}
 80098d6:	0018      	movs	r0, r3
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	0011      	movs	r1, r2
 80098ec:	0018      	movs	r0, r3
 80098ee:	f7fe fbaf 	bl	8008050 <astronode_send_geo_wr>
}
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	46bd      	mov	sp, r7
 80098f6:	b002      	add	sp, #8
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( void* h )
{
 80098fc:	b5b0      	push	{r4, r5, r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t my_lis2dw12_ctx ;
	uint8_t rst = 1 ;
 8009904:	230f      	movs	r3, #15
 8009906:	18fb      	adds	r3, r7, r3
 8009908:	2201      	movs	r2, #1
 800990a:	701a      	strb	r2, [r3, #0]
	lis2dw12_reg_t int_route ;

	my_lis2dw12_ctx.write_reg = my_lis2dw12_platform_write ;
 800990c:	2110      	movs	r1, #16
 800990e:	187b      	adds	r3, r7, r1
 8009910:	4a21      	ldr	r2, [pc, #132]	; (8009998 <my_lis2dw12_init+0x9c>)
 8009912:	601a      	str	r2, [r3, #0]
	my_lis2dw12_ctx.read_reg = my_lis2dw12_platform_read ;
 8009914:	187b      	adds	r3, r7, r1
 8009916:	4a21      	ldr	r2, [pc, #132]	; (800999c <my_lis2dw12_init+0xa0>)
 8009918:	605a      	str	r2, [r3, #4]
	my_lis2dw12_ctx.handle = h ;
 800991a:	187b      	adds	r3, r7, r1
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	60da      	str	r2, [r3, #12]

	/*Restore default configuration */
	lis2dw12_reset_set ( &my_lis2dw12_ctx , PROPERTY_ENABLE ) ;
 8009920:	187b      	adds	r3, r7, r1
 8009922:	2101      	movs	r1, #1
 8009924:	0018      	movs	r0, r3
 8009926:	f7ff fe49 	bl	80095bc <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( &my_lis2dw12_ctx, &rst ) ;
 800992a:	250f      	movs	r5, #15
 800992c:	197a      	adds	r2, r7, r5
 800992e:	2410      	movs	r4, #16
 8009930:	193b      	adds	r3, r7, r4
 8009932:	0011      	movs	r1, r2
 8009934:	0018      	movs	r0, r3
 8009936:	f7ff fe71 	bl	800961c <lis2dw12_reset_get>
	} while ( rst ) ;
 800993a:	197b      	adds	r3, r7, r5
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1f3      	bne.n	800992a <my_lis2dw12_init+0x2e>

	if ( my_lis2dw12_get_id ( &my_lis2dw12_ctx ) == LIS2DW12_ID )
 8009942:	193b      	adds	r3, r7, r4
 8009944:	0018      	movs	r0, r3
 8009946:	f000 f82b 	bl	80099a0 <my_lis2dw12_get_id>
 800994a:	0003      	movs	r3, r0
 800994c:	2b44      	cmp	r3, #68	; 0x44
 800994e:	d11e      	bne.n	800998e <my_lis2dw12_init+0x92>
	{
		lis2dw12_full_scale_set ( &my_lis2dw12_ctx , LIS2DW12_2g ) ;
 8009950:	193b      	adds	r3, r7, r4
 8009952:	2100      	movs	r1, #0
 8009954:	0018      	movs	r0, r3
 8009956:	f7ff fdef 	bl	8009538 <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set ( &my_lis2dw12_ctx , LIS2DW12_HIGH_PERFORMANCE ) ;
 800995a:	193b      	adds	r3, r7, r4
 800995c:	2104      	movs	r1, #4
 800995e:	0018      	movs	r0, r3
 8009960:	f7ff fd7e 	bl	8009460 <lis2dw12_power_mode_set>
		/*Enable interrupt generation on Wake-Up INT1 pin */
		lis2dw12_pin_int1_route_get ( &my_lis2dw12_ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 8009964:	250c      	movs	r5, #12
 8009966:	197a      	adds	r2, r7, r5
 8009968:	193b      	adds	r3, r7, r4
 800996a:	0011      	movs	r1, r2
 800996c:	0018      	movs	r0, r3
 800996e:	f7ff fee5 	bl	800973c <lis2dw12_pin_int1_route_get>
		int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 8009972:	0028      	movs	r0, r5
 8009974:	183b      	adds	r3, r7, r0
 8009976:	781a      	ldrb	r2, [r3, #0]
 8009978:	2120      	movs	r1, #32
 800997a:	430a      	orrs	r2, r1
 800997c:	701a      	strb	r2, [r3, #0]
		lis2dw12_pin_int1_route_set ( &my_lis2dw12_ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 800997e:	183a      	adds	r2, r7, r0
 8009980:	193b      	adds	r3, r7, r4
 8009982:	0011      	movs	r1, r2
 8009984:	0018      	movs	r0, r3
 8009986:	f7ff fe64 	bl	8009652 <lis2dw12_pin_int1_route_set>

		return true ;
 800998a:	2301      	movs	r3, #1
 800998c:	e000      	b.n	8009990 <my_lis2dw12_init+0x94>
	}

	return false ;
 800998e:	2300      	movs	r3, #0

}
 8009990:	0018      	movs	r0, r3
 8009992:	46bd      	mov	sp, r7
 8009994:	b008      	add	sp, #32
 8009996:	bdb0      	pop	{r4, r5, r7, pc}
 8009998:	080099cd 	.word	0x080099cd
 800999c:	08009a3d 	.word	0x08009a3d

080099a0 <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 80099a8:	210f      	movs	r1, #15
 80099aa:	187b      	adds	r3, r7, r1
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 80099b0:	000c      	movs	r4, r1
 80099b2:	187a      	adds	r2, r7, r1
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	0011      	movs	r1, r2
 80099b8:	0018      	movs	r0, r3
 80099ba:	f7ff fded 	bl	8009598 <lis2dw12_device_id_get>
	return id ;
 80099be:	193b      	adds	r3, r7, r4
 80099c0:	781b      	ldrb	r3, [r3, #0]
}
 80099c2:	0018      	movs	r0, r3
 80099c4:	46bd      	mov	sp, r7
 80099c6:	b005      	add	sp, #20
 80099c8:	bd90      	pop	{r4, r7, pc}
	...

080099cc <my_lis2dw12_platform_write>:

int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 80099cc:	b5b0      	push	{r4, r5, r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	0008      	movs	r0, r1
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	0019      	movs	r1, r3
 80099da:	240b      	movs	r4, #11
 80099dc:	193b      	adds	r3, r7, r4
 80099de:	1c02      	adds	r2, r0, #0
 80099e0:	701a      	strb	r2, [r3, #0]
 80099e2:	2508      	movs	r5, #8
 80099e4:	197b      	adds	r3, r7, r5
 80099e6:	1c0a      	adds	r2, r1, #0
 80099e8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 80099ea:	2380      	movs	r3, #128	; 0x80
 80099ec:	01db      	lsls	r3, r3, #7
 80099ee:	4812      	ldr	r0, [pc, #72]	; (8009a38 <my_lis2dw12_platform_write+0x6c>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	0019      	movs	r1, r3
 80099f4:	f7fa fa35 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80099f8:	2014      	movs	r0, #20
 80099fa:	f7f9 fec9 	bl	8003790 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 80099fe:	23fa      	movs	r3, #250	; 0xfa
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	1939      	adds	r1, r7, r4
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f7fb fed0 	bl	80057ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8009a0c:	23fa      	movs	r3, #250	; 0xfa
 8009a0e:	009c      	lsls	r4, r3, #2
 8009a10:	197b      	adds	r3, r7, r5
 8009a12:	881a      	ldrh	r2, [r3, #0]
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	0023      	movs	r3, r4
 8009a1a:	f7fb fec7 	bl	80057ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8009a1e:	2380      	movs	r3, #128	; 0x80
 8009a20:	01db      	lsls	r3, r3, #7
 8009a22:	4805      	ldr	r0, [pc, #20]	; (8009a38 <my_lis2dw12_platform_write+0x6c>)
 8009a24:	2201      	movs	r2, #1
 8009a26:	0019      	movs	r1, r3
 8009a28:	f7fa fa1b 	bl	8003e62 <HAL_GPIO_WritePin>

	return 0;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	0018      	movs	r0, r3
 8009a30:	46bd      	mov	sp, r7
 8009a32:	b004      	add	sp, #16
 8009a34:	bdb0      	pop	{r4, r5, r7, pc}
 8009a36:	46c0      	nop			; (mov r8, r8)
 8009a38:	50000400 	.word	0x50000400

08009a3c <my_lis2dw12_platform_read>:
int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8009a3c:	b5b0      	push	{r4, r5, r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	0008      	movs	r0, r1
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	0019      	movs	r1, r3
 8009a4a:	240b      	movs	r4, #11
 8009a4c:	193b      	adds	r3, r7, r4
 8009a4e:	1c02      	adds	r2, r0, #0
 8009a50:	701a      	strb	r2, [r3, #0]
 8009a52:	2508      	movs	r5, #8
 8009a54:	197b      	adds	r3, r7, r5
 8009a56:	1c0a      	adds	r2, r1, #0
 8009a58:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8009a5a:	193b      	adds	r3, r7, r4
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2280      	movs	r2, #128	; 0x80
 8009a60:	4252      	negs	r2, r2
 8009a62:	4313      	orrs	r3, r2
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	193b      	adds	r3, r7, r4
 8009a68:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 8009a6a:	2380      	movs	r3, #128	; 0x80
 8009a6c:	01db      	lsls	r3, r3, #7
 8009a6e:	4812      	ldr	r0, [pc, #72]	; (8009ab8 <my_lis2dw12_platform_read+0x7c>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	0019      	movs	r1, r3
 8009a74:	f7fa f9f5 	bl	8003e62 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8009a78:	2014      	movs	r0, #20
 8009a7a:	f7f9 fe89 	bl	8003790 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8009a7e:	23fa      	movs	r3, #250	; 0xfa
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	1939      	adds	r1, r7, r4
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f7fb fe90 	bl	80057ac <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8009a8c:	23fa      	movs	r3, #250	; 0xfa
 8009a8e:	009c      	lsls	r4, r3, #2
 8009a90:	197b      	adds	r3, r7, r5
 8009a92:	881a      	ldrh	r2, [r3, #0]
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	0023      	movs	r3, r4
 8009a9a:	f7fb ffdf 	bl	8005a5c <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8009a9e:	2380      	movs	r3, #128	; 0x80
 8009aa0:	01db      	lsls	r3, r3, #7
 8009aa2:	4805      	ldr	r0, [pc, #20]	; (8009ab8 <my_lis2dw12_platform_read+0x7c>)
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	0019      	movs	r1, r3
 8009aa8:	f7fa f9db 	bl	8003e62 <HAL_GPIO_WritePin>

	return 0;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	0018      	movs	r0, r3
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	b004      	add	sp, #16
 8009ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ab6:	46c0      	nop			; (mov r8, r8)
 8009ab8:	50000400 	.word	0x50000400

08009abc <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 8009abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009abe:	4cde      	ldr	r4, [pc, #888]	; (8009e38 <my_lx6_get_coordinates+0x37c>)
 8009ac0:	44a5      	add	sp, r4
 8009ac2:	af02      	add	r7, sp, #8
 8009ac4:	0001      	movs	r1, r0
 8009ac6:	603a      	str	r2, [r7, #0]
 8009ac8:	607b      	str	r3, [r7, #4]
 8009aca:	4bdc      	ldr	r3, [pc, #880]	; (8009e3c <my_lx6_get_coordinates+0x380>)
 8009acc:	20da      	movs	r0, #218	; 0xda
 8009ace:	0080      	lsls	r0, r0, #2
 8009ad0:	181b      	adds	r3, r3, r0
 8009ad2:	19db      	adds	r3, r3, r7
 8009ad4:	1c0a      	adds	r2, r1, #0
 8009ad6:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 8009ad8:	4bd9      	ldr	r3, [pc, #868]	; (8009e40 <my_lx6_get_coordinates+0x384>)
 8009ada:	18fb      	adds	r3, r7, r3
 8009adc:	2200      	movs	r2, #0
 8009ade:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 8009ae0:	4bd8      	ldr	r3, [pc, #864]	; (8009e44 <my_lx6_get_coordinates+0x388>)
 8009ae2:	18fb      	adds	r3, r7, r3
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009ae8:	4bd7      	ldr	r3, [pc, #860]	; (8009e48 <my_lx6_get_coordinates+0x38c>)
 8009aea:	0004      	movs	r4, r0
 8009aec:	191b      	adds	r3, r3, r4
 8009aee:	19db      	adds	r3, r3, r7
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	3304      	adds	r3, #4
 8009af6:	22f6      	movs	r2, #246	; 0xf6
 8009af8:	2100      	movs	r1, #0
 8009afa:	0018      	movs	r0, r3
 8009afc:	f002 f98e 	bl	800be1c <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009b00:	4bd2      	ldr	r3, [pc, #840]	; (8009e4c <my_lx6_get_coordinates+0x390>)
 8009b02:	191b      	adds	r3, r3, r4
 8009b04:	19db      	adds	r3, r3, r7
 8009b06:	2200      	movs	r2, #0
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	22f6      	movs	r2, #246	; 0xf6
 8009b0e:	2100      	movs	r1, #0
 8009b10:	0018      	movs	r0, r3
 8009b12:	f002 f983 	bl	800be1c <memset>
	uint8_t		rmc_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009b16:	4bce      	ldr	r3, [pc, #824]	; (8009e50 <my_lx6_get_coordinates+0x394>)
 8009b18:	191b      	adds	r3, r3, r4
 8009b1a:	19db      	adds	r3, r3, r7
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	3304      	adds	r3, #4
 8009b22:	22f6      	movs	r2, #246	; 0xf6
 8009b24:	2100      	movs	r1, #0
 8009b26:	0018      	movs	r0, r3
 8009b28:	f002 f978 	bl	800be1c <memset>
	uint8_t		i_nmea = 0 ;
 8009b2c:	4bc9      	ldr	r3, [pc, #804]	; (8009e54 <my_lx6_get_coordinates+0x398>)
 8009b2e:	0021      	movs	r1, r4
 8009b30:	185b      	adds	r3, r3, r1
 8009b32:	19db      	adds	r3, r3, r7
 8009b34:	2200      	movs	r2, #0
 8009b36:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009b38:	4bc7      	ldr	r3, [pc, #796]	; (8009e58 <my_lx6_get_coordinates+0x39c>)
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009b40:	4bc6      	ldr	r3, [pc, #792]	; (8009e5c <my_lx6_get_coordinates+0x3a0>)
 8009b42:	000c      	movs	r4, r1
 8009b44:	185b      	adds	r3, r3, r1
 8009b46:	19db      	adds	r3, r3, r7
 8009b48:	2200      	movs	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	2208      	movs	r2, #8
 8009b50:	2100      	movs	r1, #0
 8009b52:	0018      	movs	r0, r3
 8009b54:	f002 f962 	bl	800be1c <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009b58:	4bc1      	ldr	r3, [pc, #772]	; (8009e60 <my_lx6_get_coordinates+0x3a4>)
 8009b5a:	191b      	adds	r3, r3, r4
 8009b5c:	19db      	adds	r3, r3, r7
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	3304      	adds	r3, #4
 8009b64:	2208      	movs	r2, #8
 8009b66:	2100      	movs	r1, #0
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f002 f957 	bl	800be1c <memset>
	char 		nmea_coordinates_log[52] ; // Nagłowek + 12 + ew. znak minus + '\0'
	char* 		nmea_gngsa_label = "GNGSA" ;
 8009b6e:	4bbd      	ldr	r3, [pc, #756]	; (8009e64 <my_lx6_get_coordinates+0x3a8>)
 8009b70:	22d8      	movs	r2, #216	; 0xd8
 8009b72:	0092      	lsls	r2, r2, #2
 8009b74:	18ba      	adds	r2, r7, r2
 8009b76:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009b78:	4bbb      	ldr	r3, [pc, #748]	; (8009e68 <my_lx6_get_coordinates+0x3ac>)
 8009b7a:	22d7      	movs	r2, #215	; 0xd7
 8009b7c:	0092      	lsls	r2, r2, #2
 8009b7e:	18ba      	adds	r2, r7, r2
 8009b80:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 8009b82:	4bba      	ldr	r3, [pc, #744]	; (8009e6c <my_lx6_get_coordinates+0x3b0>)
 8009b84:	22d6      	movs	r2, #214	; 0xd6
 8009b86:	0092      	lsls	r2, r2, #2
 8009b88:	18ba      	adds	r2, r7, r2
 8009b8a:	6013      	str	r3, [r2, #0]
	char* 		nmea_gsv_label = "GSV" ;
 8009b8c:	4bb8      	ldr	r3, [pc, #736]	; (8009e70 <my_lx6_get_coordinates+0x3b4>)
 8009b8e:	22d5      	movs	r2, #213	; 0xd5
 8009b90:	0092      	lsls	r2, r2, #2
 8009b92:	18ba      	adds	r2, r7, r2
 8009b94:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 8009b96:	4bb7      	ldr	r3, [pc, #732]	; (8009e74 <my_lx6_get_coordinates+0x3b8>)
 8009b98:	18fb      	adds	r3, r7, r3
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 8009b9e:	4bb6      	ldr	r3, [pc, #728]	; (8009e78 <my_lx6_get_coordinates+0x3bc>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8009ba4:	4bb5      	ldr	r3, [pc, #724]	; (8009e7c <my_lx6_get_coordinates+0x3c0>)
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	f7fc fca2 	bl	80064f0 <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 8009bac:	f7f9 f9d8 	bl	8002f60 <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 8009bb0:	e0ea      	b.n	8009d88 <my_lx6_get_coordinates+0x2cc>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 8009bb2:	23fa      	movs	r3, #250	; 0xfa
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4ca3      	ldr	r4, [pc, #652]	; (8009e44 <my_lx6_get_coordinates+0x388>)
 8009bb8:	1939      	adds	r1, r7, r4
 8009bba:	48b1      	ldr	r0, [pc, #708]	; (8009e80 <my_lx6_get_coordinates+0x3c4>)
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f7fd f8ab 	bl	8006d18 <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 8009bc2:	23fa      	movs	r3, #250	; 0xfa
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	1939      	adds	r1, r7, r4
 8009bc8:	48ae      	ldr	r0, [pc, #696]	; (8009e84 <my_lx6_get_coordinates+0x3c8>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f7fd f808 	bl	8006be0 <HAL_UART_Transmit>
		if ( rxd_byte )
 8009bd0:	0020      	movs	r0, r4
 8009bd2:	193b      	adds	r3, r7, r4
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	4ca0      	ldr	r4, [pc, #640]	; (8009e58 <my_lx6_get_coordinates+0x39c>)
 8009bd8:	193a      	adds	r2, r7, r4
 8009bda:	1939      	adds	r1, r7, r4
 8009bdc:	7809      	ldrb	r1, [r1, #0]
 8009bde:	7011      	strb	r1, [r2, #0]
 8009be0:	4da4      	ldr	r5, [pc, #656]	; (8009e74 <my_lx6_get_coordinates+0x3b8>)
 8009be2:	197a      	adds	r2, r7, r5
 8009be4:	1979      	adds	r1, r7, r5
 8009be6:	7809      	ldrb	r1, [r1, #0]
 8009be8:	7011      	strb	r1, [r2, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d100      	bne.n	8009bf0 <my_lx6_get_coordinates+0x134>
 8009bee:	e0cb      	b.n	8009d88 <my_lx6_get_coordinates+0x2cc>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 8009bf0:	235f      	movs	r3, #95	; 0x5f
 8009bf2:	18fa      	adds	r2, r7, r3
 8009bf4:	2696      	movs	r6, #150	; 0x96
 8009bf6:	00b6      	lsls	r6, r6, #2
 8009bf8:	19b9      	adds	r1, r7, r6
 8009bfa:	183b      	adds	r3, r7, r0
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f000 fa34 	bl	800a06a <my_nmea_message>
 8009c02:	0001      	movs	r1, r0
 8009c04:	193b      	adds	r3, r7, r4
 8009c06:	193a      	adds	r2, r7, r4
 8009c08:	7812      	ldrb	r2, [r2, #0]
 8009c0a:	701a      	strb	r2, [r3, #0]
 8009c0c:	197b      	adds	r3, r7, r5
 8009c0e:	197a      	adds	r2, r7, r5
 8009c10:	7812      	ldrb	r2, [r2, #0]
 8009c12:	701a      	strb	r2, [r3, #0]
 8009c14:	2902      	cmp	r1, #2
 8009c16:	d000      	beq.n	8009c1a <my_lx6_get_coordinates+0x15e>
 8009c18:	e0b6      	b.n	8009d88 <my_lx6_get_coordinates+0x2cc>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8009c1a:	19bb      	adds	r3, r7, r6
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	f000 fae4 	bl	800a1ea <is_my_nmea_checksum_ok>
 8009c22:	0003      	movs	r3, r0
 8009c24:	0019      	movs	r1, r3
 8009c26:	193b      	adds	r3, r7, r4
 8009c28:	193a      	adds	r2, r7, r4
 8009c2a:	7812      	ldrb	r2, [r2, #0]
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	197b      	adds	r3, r7, r5
 8009c30:	197a      	adds	r2, r7, r5
 8009c32:	7812      	ldrb	r2, [r2, #0]
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	2900      	cmp	r1, #0
 8009c38:	d100      	bne.n	8009c3c <my_lx6_get_coordinates+0x180>
 8009c3a:	e0a5      	b.n	8009d88 <my_lx6_get_coordinates+0x2cc>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009c3c:	23d6      	movs	r3, #214	; 0xd6
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	18fb      	adds	r3, r7, r3
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	19bb      	adds	r3, r7, r6
 8009c46:	0011      	movs	r1, r2
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f002 f914 	bl	800be76 <strstr>
 8009c4e:	1e03      	subs	r3, r0, #0
 8009c50:	d00d      	beq.n	8009c6e <my_lx6_get_coordinates+0x1b2>
					{
						memcpy ( rmc_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby skorzystać z czasu jak najdokładniejszego, bo przed fix ten czas jest fake.
 8009c52:	4b7f      	ldr	r3, [pc, #508]	; (8009e50 <my_lx6_get_coordinates+0x394>)
 8009c54:	21da      	movs	r1, #218	; 0xda
 8009c56:	0089      	lsls	r1, r1, #2
 8009c58:	185b      	adds	r3, r3, r1
 8009c5a:	19da      	adds	r2, r3, r7
 8009c5c:	4b7a      	ldr	r3, [pc, #488]	; (8009e48 <my_lx6_get_coordinates+0x38c>)
 8009c5e:	185b      	adds	r3, r3, r1
 8009c60:	19db      	adds	r3, r3, r7
 8009c62:	0010      	movs	r0, r2
 8009c64:	0019      	movs	r1, r3
 8009c66:	23fa      	movs	r3, #250	; 0xfa
 8009c68:	001a      	movs	r2, r3
 8009c6a:	f002 f9bc 	bl	800bfe6 <memcpy>
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MY_GNSS_MIN_TNS )
 8009c6e:	23d5      	movs	r3, #213	; 0xd5
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	18fb      	adds	r3, r7, r3
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	2496      	movs	r4, #150	; 0x96
 8009c78:	00a4      	lsls	r4, r4, #2
 8009c7a:	193b      	adds	r3, r7, r4
 8009c7c:	0011      	movs	r1, r2
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f002 f8f9 	bl	800be76 <strstr>
 8009c84:	1e03      	subs	r3, r0, #0
 8009c86:	d011      	beq.n	8009cac <my_lx6_get_coordinates+0x1f0>
 8009c88:	4d73      	ldr	r5, [pc, #460]	; (8009e58 <my_lx6_get_coordinates+0x39c>)
 8009c8a:	197b      	adds	r3, r7, r5
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d80c      	bhi.n	8009cac <my_lx6_get_coordinates+0x1f0>
					{
						if ( tim_seconds > MY_GNSS_MIN_TNS_TIME_THS )
 8009c92:	4b79      	ldr	r3, [pc, #484]	; (8009e78 <my_lx6_get_coordinates+0x3bc>)
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	2b0a      	cmp	r3, #10
 8009c98:	d900      	bls.n	8009c9c <my_lx6_get_coordinates+0x1e0>
 8009c9a:	e081      	b.n	8009da0 <my_lx6_get_coordinates+0x2e4>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8009c9c:	193b      	adds	r3, r7, r4
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	f000 fc60 	bl	800a564 <my_nmea_get_gsv_tns>
 8009ca4:	0003      	movs	r3, r0
 8009ca6:	001a      	movs	r2, r3
 8009ca8:	197b      	adds	r3, r7, r5
 8009caa:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 8009cac:	23d8      	movs	r3, #216	; 0xd8
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	18fb      	adds	r3, r7, r3
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	2596      	movs	r5, #150	; 0x96
 8009cb6:	00ad      	lsls	r5, r5, #2
 8009cb8:	197b      	adds	r3, r7, r5
 8009cba:	0011      	movs	r1, r2
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	f002 f8da 	bl	800be76 <strstr>
 8009cc2:	1e03      	subs	r3, r0, #0
 8009cc4:	d015      	beq.n	8009cf2 <my_lx6_get_coordinates+0x236>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8009cc6:	4b6b      	ldr	r3, [pc, #428]	; (8009e74 <my_lx6_get_coordinates+0x3b8>)
 8009cc8:	18fc      	adds	r4, r7, r3
 8009cca:	197b      	adds	r3, r7, r5
 8009ccc:	0018      	movs	r0, r3
 8009cce:	f000 fa38 	bl	800a142 <get_my_nmea_gngsa_fixed_mode_s>
 8009cd2:	0003      	movs	r3, r0
 8009cd4:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009cd6:	197b      	adds	r3, r7, r5
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f000 fa3d 	bl	800a158 <get_my_nmea_gngsa_pdop_d>
 8009cde:	0002      	movs	r2, r0
 8009ce0:	000b      	movs	r3, r1
 8009ce2:	21de      	movs	r1, #222	; 0xde
 8009ce4:	0089      	lsls	r1, r1, #2
 8009ce6:	2008      	movs	r0, #8
 8009ce8:	1809      	adds	r1, r1, r0
 8009cea:	19c9      	adds	r1, r1, r7
 8009cec:	6809      	ldr	r1, [r1, #0]
 8009cee:	600a      	str	r2, [r1, #0]
 8009cf0:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 8009cf2:	23d7      	movs	r3, #215	; 0xd7
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	18fb      	adds	r3, r7, r3
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	2596      	movs	r5, #150	; 0x96
 8009cfc:	00ad      	lsls	r5, r5, #2
 8009cfe:	197b      	adds	r3, r7, r5
 8009d00:	0011      	movs	r1, r2
 8009d02:	0018      	movs	r0, r3
 8009d04:	f002 f8b7 	bl	800be76 <strstr>
 8009d08:	1e03      	subs	r3, r0, #0
 8009d0a:	d03d      	beq.n	8009d88 <my_lx6_get_coordinates+0x2cc>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths && nmea_fixed_mode_s == NMEA_3D_FIX )
 8009d0c:	23de      	movs	r3, #222	; 0xde
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	2408      	movs	r4, #8
 8009d12:	191b      	adds	r3, r3, r4
 8009d14:	19db      	adds	r3, r3, r7
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	6838      	ldr	r0, [r7, #0]
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	f7f6 fbb6 	bl	8000490 <__aeabi_dcmpge>
 8009d24:	1e03      	subs	r3, r0, #0
 8009d26:	d021      	beq.n	8009d6c <my_lx6_get_coordinates+0x2b0>
 8009d28:	4b52      	ldr	r3, [pc, #328]	; (8009e74 <my_lx6_get_coordinates+0x3b8>)
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b33      	cmp	r3, #51	; 0x33
 8009d30:	d11c      	bne.n	8009d6c <my_lx6_get_coordinates+0x2b0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 8009d32:	23df      	movs	r3, #223	; 0xdf
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	0026      	movs	r6, r4
 8009d38:	191b      	adds	r3, r3, r4
 8009d3a:	19db      	adds	r3, r3, r7
 8009d3c:	681c      	ldr	r4, [r3, #0]
 8009d3e:	2344      	movs	r3, #68	; 0x44
 8009d40:	18fa      	adds	r2, r7, r3
 8009d42:	2350      	movs	r3, #80	; 0x50
 8009d44:	18f9      	adds	r1, r7, r3
 8009d46:	1978      	adds	r0, r7, r5
 8009d48:	23e0      	movs	r3, #224	; 0xe0
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	199b      	adds	r3, r3, r6
 8009d4e:	19db      	adds	r3, r3, r7
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	0023      	movs	r3, r4
 8009d56:	f000 fb03 	bl	800a360 <get_my_nmea_gngll_coordinates>
							set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009d5a:	197b      	adds	r3, r7, r5
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	f000 f895 	bl	8009e8c <set_my_rtc_from_nmea_rmc>
							r = true ;
 8009d62:	4b37      	ldr	r3, [pc, #220]	; (8009e40 <my_lx6_get_coordinates+0x384>)
 8009d64:	18fb      	adds	r3, r7, r3
 8009d66:	2201      	movs	r2, #1
 8009d68:	701a      	strb	r2, [r3, #0]
							break ;
 8009d6a:	e01a      	b.n	8009da2 <my_lx6_get_coordinates+0x2e6>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 8009d6c:	4b37      	ldr	r3, [pc, #220]	; (8009e4c <my_lx6_get_coordinates+0x390>)
 8009d6e:	21da      	movs	r1, #218	; 0xda
 8009d70:	0089      	lsls	r1, r1, #2
 8009d72:	185b      	adds	r3, r3, r1
 8009d74:	19da      	adds	r2, r3, r7
 8009d76:	4b34      	ldr	r3, [pc, #208]	; (8009e48 <my_lx6_get_coordinates+0x38c>)
 8009d78:	185b      	adds	r3, r3, r1
 8009d7a:	19db      	adds	r3, r3, r7
 8009d7c:	0010      	movs	r0, r2
 8009d7e:	0019      	movs	r1, r3
 8009d80:	23fa      	movs	r3, #250	; 0xfa
 8009d82:	001a      	movs	r2, r3
 8009d84:	f002 f92f 	bl	800bfe6 <memcpy>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 8009d88:	4b3b      	ldr	r3, [pc, #236]	; (8009e78 <my_lx6_get_coordinates+0x3bc>)
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	4a2b      	ldr	r2, [pc, #172]	; (8009e3c <my_lx6_get_coordinates+0x380>)
 8009d8e:	21da      	movs	r1, #218	; 0xda
 8009d90:	0089      	lsls	r1, r1, #2
 8009d92:	1852      	adds	r2, r2, r1
 8009d94:	19d2      	adds	r2, r2, r7
 8009d96:	8812      	ldrh	r2, [r2, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d900      	bls.n	8009d9e <my_lx6_get_coordinates+0x2e2>
 8009d9c:	e709      	b.n	8009bb2 <my_lx6_get_coordinates+0xf6>
 8009d9e:	e000      	b.n	8009da2 <my_lx6_get_coordinates+0x2e6>
							break ;
 8009da0:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 8009da2:	4b36      	ldr	r3, [pc, #216]	; (8009e7c <my_lx6_get_coordinates+0x3c0>)
 8009da4:	0018      	movs	r0, r3
 8009da6:	f7fc fbff 	bl	80065a8 <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 8009daa:	f7f9 f8f1 	bl	8002f90 <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 8009dae:	4b2b      	ldr	r3, [pc, #172]	; (8009e5c <my_lx6_get_coordinates+0x3a0>)
 8009db0:	22da      	movs	r2, #218	; 0xda
 8009db2:	0092      	lsls	r2, r2, #2
 8009db4:	189b      	adds	r3, r3, r2
 8009db6:	19db      	adds	r3, r3, r7
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d125      	bne.n	8009e0a <my_lx6_get_coordinates+0x34e>
 8009dbe:	4b23      	ldr	r3, [pc, #140]	; (8009e4c <my_lx6_get_coordinates+0x390>)
 8009dc0:	189b      	adds	r3, r3, r2
 8009dc2:	19db      	adds	r3, r3, r7
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d01f      	beq.n	8009e0a <my_lx6_get_coordinates+0x34e>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009dca:	23df      	movs	r3, #223	; 0xdf
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	2508      	movs	r5, #8
 8009dd0:	195b      	adds	r3, r3, r5
 8009dd2:	19db      	adds	r3, r3, r7
 8009dd4:	681c      	ldr	r4, [r3, #0]
 8009dd6:	2344      	movs	r3, #68	; 0x44
 8009dd8:	18fa      	adds	r2, r7, r3
 8009dda:	2350      	movs	r3, #80	; 0x50
 8009ddc:	18f9      	adds	r1, r7, r3
 8009dde:	23ae      	movs	r3, #174	; 0xae
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	18f8      	adds	r0, r7, r3
 8009de4:	23e0      	movs	r3, #224	; 0xe0
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	195b      	adds	r3, r3, r5
 8009dea:	19db      	adds	r3, r3, r7
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	0023      	movs	r3, r4
 8009df2:	f000 fab5 	bl	800a360 <get_my_nmea_gngll_coordinates>
		set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009df6:	2396      	movs	r3, #150	; 0x96
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	18fb      	adds	r3, r7, r3
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	f000 f845 	bl	8009e8c <set_my_rtc_from_nmea_rmc>
		r = true ;
 8009e02:	4b0f      	ldr	r3, [pc, #60]	; (8009e40 <my_lx6_get_coordinates+0x384>)
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	2201      	movs	r2, #1
 8009e08:	701a      	strb	r2, [r3, #0]
	}
	sprintf ( nmea_coordinates_log , "NMEA coordinates: %s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 8009e0a:	2344      	movs	r3, #68	; 0x44
 8009e0c:	18fb      	adds	r3, r7, r3
 8009e0e:	2250      	movs	r2, #80	; 0x50
 8009e10:	18ba      	adds	r2, r7, r2
 8009e12:	491d      	ldr	r1, [pc, #116]	; (8009e88 <my_lx6_get_coordinates+0x3cc>)
 8009e14:	2410      	movs	r4, #16
 8009e16:	1938      	adds	r0, r7, r4
 8009e18:	f001 ff6a 	bl	800bcf0 <sprintf>
	send_debug_logs ( nmea_coordinates_log ) ;
 8009e1c:	193b      	adds	r3, r7, r4
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f7f8 ffa2 	bl	8002d68 <send_debug_logs>
	return r ;
 8009e24:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <my_lx6_get_coordinates+0x384>)
 8009e26:	18fb      	adds	r3, r7, r3
 8009e28:	781b      	ldrb	r3, [r3, #0]
}
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	23db      	movs	r3, #219	; 0xdb
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	449d      	add	sp, r3
 8009e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	fffffc8c 	.word	0xfffffc8c
 8009e3c:	fffffca6 	.word	0xfffffca6
 8009e40:	00000367 	.word	0x00000367
 8009e44:	00000353 	.word	0x00000353
 8009e48:	fffffef0 	.word	0xfffffef0
 8009e4c:	fffffdf4 	.word	0xfffffdf4
 8009e50:	fffffcf8 	.word	0xfffffcf8
 8009e54:	fffffcf7 	.word	0xfffffcf7
 8009e58:	00000366 	.word	0x00000366
 8009e5c:	fffffce8 	.word	0xfffffce8
 8009e60:	fffffcdc 	.word	0xfffffcdc
 8009e64:	080141e4 	.word	0x080141e4
 8009e68:	080141ec 	.word	0x080141ec
 8009e6c:	080141f4 	.word	0x080141f4
 8009e70:	080141f8 	.word	0x080141f8
 8009e74:	00000365 	.word	0x00000365
 8009e78:	200009b6 	.word	0x200009b6
 8009e7c:	2000078c 	.word	0x2000078c
 8009e80:	20000900 	.word	0x20000900
 8009e84:	2000086c 	.word	0x2000086c
 8009e88:	080141fc 	.word	0x080141fc

08009e8c <set_my_rtc_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void set_my_rtc_from_nmea_rmc ( const char* m )
{
 8009e8c:	b5b0      	push	{r4, r5, r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  get_my_nmea_rmc_date_yy ( m , &sDate.Year ) ;
 8009e94:	2508      	movs	r5, #8
 8009e96:	197b      	adds	r3, r7, r5
 8009e98:	1cda      	adds	r2, r3, #3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	0011      	movs	r1, r2
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f000 fb98 	bl	800a5d4 <get_my_nmea_rmc_date_yy>
	  get_my_nmea_rmc_date_mm ( m , &sDate.Month ) ;
 8009ea4:	197b      	adds	r3, r7, r5
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	0011      	movs	r1, r2
 8009eac:	0018      	movs	r0, r3
 8009eae:	f000 fbcb 	bl	800a648 <get_my_nmea_rmc_date_mm>
	  get_my_nmea_rmc_date_dd ( m , &sDate.Date ) ;
 8009eb2:	197b      	adds	r3, r7, r5
 8009eb4:	1c9a      	adds	r2, r3, #2
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	0011      	movs	r1, r2
 8009eba:	0018      	movs	r0, r3
 8009ebc:	f000 fbfe 	bl	800a6bc <get_my_nmea_rmc_date_dd>
	  get_my_nmea_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009ec0:	240c      	movs	r4, #12
 8009ec2:	193a      	adds	r2, r7, r4
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	0011      	movs	r1, r2
 8009ec8:	0018      	movs	r0, r3
 8009eca:	f000 fc31 	bl	800a730 <get_my_nmea_rmc_utc_hh>
	  get_my_nmea_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009ece:	193b      	adds	r3, r7, r4
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	0011      	movs	r1, r2
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f000 fc64 	bl	800a7a4 <get_my_nmea_rmc_utc_mm>
	  get_my_nmea_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009edc:	193b      	adds	r3, r7, r4
 8009ede:	1c9a      	adds	r2, r3, #2
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	0011      	movs	r1, r2
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f000 fc97 	bl	800a818 <get_my_nmea_rmc_utc_ss>
	  get_my_nmea_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009eea:	193b      	adds	r3, r7, r4
 8009eec:	1d1a      	adds	r2, r3, #4
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	0011      	movs	r1, r2
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	f000 fcca 	bl	800a88c <get_my_nmea_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009ef8:	193b      	adds	r3, r7, r4
 8009efa:	2200      	movs	r2, #0
 8009efc:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009efe:	193b      	adds	r3, r7, r4
 8009f00:	2200      	movs	r2, #0
 8009f02:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009f04:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <set_my_rtc_from_nmea_rmc+0xa8>)
 8009f06:	0018      	movs	r0, r3
 8009f08:	f7fb fb2f 	bl	800556a <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009f0c:	1939      	adds	r1, r7, r4
 8009f0e:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <set_my_rtc_from_nmea_rmc+0xa8>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	0018      	movs	r0, r3
 8009f14:	f7fa ff2c 	bl	8004d70 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009f18:	1979      	adds	r1, r7, r5
 8009f1a:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <set_my_rtc_from_nmea_rmc+0xa8>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f7fb f82a 	bl	8004f78 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009f24:	4b03      	ldr	r3, [pc, #12]	; (8009f34 <set_my_rtc_from_nmea_rmc+0xa8>)
 8009f26:	0018      	movs	r0, r3
 8009f28:	f7fb fb53 	bl	80055d2 <HAL_RTCEx_DisableBypassShadow>
}
 8009f2c:	46c0      	nop			; (mov r8, r8)
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	b008      	add	sp, #32
 8009f32:	bdb0      	pop	{r4, r5, r7, pc}
 8009f34:	200006fc 	.word	0x200006fc

08009f38 <get_my_rtc_time>:
uint16_t get_my_rtc_time ( char* dt_s )
{
 8009f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f3a:	b08d      	sub	sp, #52	; 0x34
 8009f3c:	af04      	add	r7, sp, #16
 8009f3e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8009f40:	2508      	movs	r5, #8
 8009f42:	1979      	adds	r1, r7, r5
 8009f44:	4b1b      	ldr	r3, [pc, #108]	; (8009fb4 <get_my_rtc_time+0x7c>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f7fa ffb9 	bl	8004ec0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8009f4e:	241c      	movs	r4, #28
 8009f50:	1939      	adds	r1, r7, r4
 8009f52:	4b18      	ldr	r3, [pc, #96]	; (8009fb4 <get_my_rtc_time+0x7c>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	0018      	movs	r0, r3
 8009f58:	f7fb f8a0 	bl	800509c <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 8009f5c:	0021      	movs	r1, r4
 8009f5e:	187b      	adds	r3, r7, r1
 8009f60:	78db      	ldrb	r3, [r3, #3]
 8009f62:	22fa      	movs	r2, #250	; 0xfa
 8009f64:	00d2      	lsls	r2, r2, #3
 8009f66:	189a      	adds	r2, r3, r2
 8009f68:	187b      	adds	r3, r7, r1
 8009f6a:	785b      	ldrb	r3, [r3, #1]
 8009f6c:	469c      	mov	ip, r3
 8009f6e:	187b      	adds	r3, r7, r1
 8009f70:	789b      	ldrb	r3, [r3, #2]
 8009f72:	001c      	movs	r4, r3
 8009f74:	0028      	movs	r0, r5
 8009f76:	183b      	adds	r3, r7, r0
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	001d      	movs	r5, r3
 8009f7c:	183b      	adds	r3, r7, r0
 8009f7e:	785b      	ldrb	r3, [r3, #1]
 8009f80:	001e      	movs	r6, r3
 8009f82:	183b      	adds	r3, r7, r0
 8009f84:	789b      	ldrb	r3, [r3, #2]
 8009f86:	490c      	ldr	r1, [pc, #48]	; (8009fb8 <get_my_rtc_time+0x80>)
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	9303      	str	r3, [sp, #12]
 8009f8c:	9602      	str	r6, [sp, #8]
 8009f8e:	9501      	str	r5, [sp, #4]
 8009f90:	9400      	str	r4, [sp, #0]
 8009f92:	4663      	mov	r3, ip
 8009f94:	f001 feac 	bl	800bcf0 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009f98:	211c      	movs	r1, #28
 8009f9a:	187b      	adds	r3, r7, r1
 8009f9c:	78db      	ldrb	r3, [r3, #3]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	22fa      	movs	r2, #250	; 0xfa
 8009fa2:	00d2      	lsls	r2, r2, #3
 8009fa4:	4694      	mov	ip, r2
 8009fa6:	4463      	add	r3, ip
 8009fa8:	b29b      	uxth	r3, r3
}
 8009faa:	0018      	movs	r0, r3
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b009      	add	sp, #36	; 0x24
 8009fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	200006fc 	.word	0x200006fc
 8009fb8:	08014214 	.word	0x08014214

08009fbc <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f001 fcf5 	bl	800b9b8 <strtod>
 8009fce:	0002      	movs	r2, r0
 8009fd0:	000b      	movs	r3, r1
 8009fd2:	60ba      	str	r2, [r7, #8]
 8009fd4:	60fb      	str	r3, [r7, #12]
    return d ;
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
}
 8009fda:	0010      	movs	r0, r2
 8009fdc:	0019      	movs	r1, r3
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	b004      	add	sp, #16
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	0008      	movs	r0, r1
 8009fee:	0011      	movs	r1, r2
 8009ff0:	1cfb      	adds	r3, r7, #3
 8009ff2:	1c02      	adds	r2, r0, #0
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	1cbb      	adds	r3, r7, #2
 8009ff8:	1c0a      	adds	r2, r1, #0
 8009ffa:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009ffc:	230f      	movs	r3, #15
 8009ffe:	18fb      	adds	r3, r7, r3
 800a000:	2200      	movs	r2, #0
 800a002:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800a004:	230e      	movs	r3, #14
 800a006:	18fb      	adds	r3, r7, r3
 800a008:	2200      	movs	r2, #0
 800a00a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800a00c:	e01c      	b.n	800a048 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800a00e:	230f      	movs	r3, #15
 800a010:	18fb      	adds	r3, r7, r3
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	18d3      	adds	r3, r2, r3
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	1cfa      	adds	r2, r7, #3
 800a01c:	7812      	ldrb	r2, [r2, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d105      	bne.n	800a02e <my_find_char_position+0x4a>
			p++ ;
 800a022:	210e      	movs	r1, #14
 800a024:	187b      	adds	r3, r7, r1
 800a026:	781a      	ldrb	r2, [r3, #0]
 800a028:	187b      	adds	r3, r7, r1
 800a02a:	3201      	adds	r2, #1
 800a02c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800a02e:	230e      	movs	r3, #14
 800a030:	18fa      	adds	r2, r7, r3
 800a032:	1cbb      	adds	r3, r7, #2
 800a034:	7812      	ldrb	r2, [r2, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d00e      	beq.n	800a05a <my_find_char_position+0x76>
			break ;
		i++ ;
 800a03c:	210f      	movs	r1, #15
 800a03e:	187b      	adds	r3, r7, r1
 800a040:	781a      	ldrb	r2, [r3, #0]
 800a042:	187b      	adds	r3, r7, r1
 800a044:	3201      	adds	r2, #1
 800a046:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800a048:	230f      	movs	r3, #15
 800a04a:	18fb      	adds	r3, r7, r3
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	18d3      	adds	r3, r2, r3
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1da      	bne.n	800a00e <my_find_char_position+0x2a>
 800a058:	e000      	b.n	800a05c <my_find_char_position+0x78>
			break ;
 800a05a:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800a05c:	230f      	movs	r3, #15
 800a05e:	18fb      	adds	r3, r7, r3
 800a060:	781b      	ldrb	r3, [r3, #0]
}
 800a062:	0018      	movs	r0, r3
 800a064:	46bd      	mov	sp, r7
 800a066:	b004      	add	sp, #16
 800a068:	bd80      	pop	{r7, pc}

0800a06a <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	60f8      	str	r0, [r7, #12]
 800a072:	60b9      	str	r1, [r7, #8]
 800a074:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b24      	cmp	r3, #36	; 0x24
 800a07c:	d117      	bne.n	800a0ae <my_nmea_message+0x44>
    {
        *i = 0 ;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	1c5a      	adds	r2, r3, #1
 800a08a:	b2d1      	uxtb	r1, r2
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	7011      	strb	r1, [r2, #0]
 800a090:	001a      	movs	r2, r3
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	189b      	adds	r3, r3, r2
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	7812      	ldrb	r2, [r2, #0]
 800a09a:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	001a      	movs	r2, r3
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	189b      	adds	r3, r3, r2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	e045      	b.n	800a13a <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b1f      	cmp	r3, #31
 800a0b4:	d907      	bls.n	800a0c6 <my_nmea_message+0x5c>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b7e      	cmp	r3, #126	; 0x7e
 800a0bc:	d803      	bhi.n	800a0c6 <my_nmea_message+0x5c>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d103      	bne.n	800a0ce <my_nmea_message+0x64>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b0d      	cmp	r3, #13
 800a0cc:	d114      	bne.n	800a0f8 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	b2d1      	uxtb	r1, r2
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	7011      	strb	r1, [r2, #0]
 800a0da:	001a      	movs	r2, r3
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	189b      	adds	r3, r3, r2
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	7812      	ldrb	r2, [r2, #0]
 800a0e4:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	001a      	movs	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	189b      	adds	r3, r3, r2
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e020      	b.n	800a13a <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	2b0a      	cmp	r3, #10
 800a0fe:	d11a      	bne.n	800a136 <my_nmea_message+0xcc>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d916      	bls.n	800a136 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	701a      	strb	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	001a      	movs	r2, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	189b      	adds	r3, r3, r2
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b0d      	cmp	r3, #13
 800a122:	d108      	bne.n	800a136 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	001a      	movs	r2, r3
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	189b      	adds	r3, r3, r2
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800a132:	2302      	movs	r3, #2
 800a134:	e001      	b.n	800a13a <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800a136:	2301      	movs	r3, #1
 800a138:	425b      	negs	r3, r3
}
 800a13a:	0018      	movs	r0, r3
 800a13c:	46bd      	mov	sp, r7
 800a13e:	b004      	add	sp, #16
 800a140:	bd80      	pop	{r7, pc}

0800a142 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3309      	adds	r3, #9
 800a14e:	781b      	ldrb	r3, [r3, #0]
}
 800a150:	0018      	movs	r0, r3
 800a152:	46bd      	mov	sp, r7
 800a154:	b002      	add	sp, #8
 800a156:	bd80      	pop	{r7, pc}

0800a158 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800a158:	b5b0      	push	{r4, r5, r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	220f      	movs	r2, #15
 800a164:	212c      	movs	r1, #44	; 0x2c
 800a166:	0018      	movs	r0, r3
 800a168:	f7ff ff3c 	bl	8009fe4 <my_find_char_position>
 800a16c:	0003      	movs	r3, r0
 800a16e:	001a      	movs	r2, r3
 800a170:	2517      	movs	r5, #23
 800a172:	197b      	adds	r3, r7, r5
 800a174:	3201      	adds	r2, #1
 800a176:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2210      	movs	r2, #16
 800a17c:	212c      	movs	r1, #44	; 0x2c
 800a17e:	0018      	movs	r0, r3
 800a180:	f7ff ff30 	bl	8009fe4 <my_find_char_position>
 800a184:	0003      	movs	r3, r0
 800a186:	0019      	movs	r1, r3
 800a188:	2416      	movs	r4, #22
 800a18a:	193b      	adds	r3, r7, r4
 800a18c:	197a      	adds	r2, r7, r5
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	1a8a      	subs	r2, r1, r2
 800a192:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800a194:	193b      	adds	r3, r7, r4
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	3301      	adds	r3, #1
 800a19a:	0018      	movs	r0, r3
 800a19c:	f000 fbaa 	bl	800a8f4 <malloc>
 800a1a0:	0003      	movs	r3, r0
 800a1a2:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800a1a4:	197b      	adds	r3, r7, r5
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	18d1      	adds	r1, r2, r3
 800a1ac:	193b      	adds	r3, r7, r4
 800a1ae:	781a      	ldrb	r2, [r3, #0]
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f001 fe4b 	bl	800be4e <strncpy>
	pdop_s[pdop_length] = '\0';
 800a1b8:	193b      	adds	r3, r7, r4
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	18d3      	adds	r3, r2, r3
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	0018      	movs	r0, r3
 800a1c8:	f7ff fef8 	bl	8009fbc <my_string2double_conv>
 800a1cc:	0002      	movs	r2, r0
 800a1ce:	000b      	movs	r3, r1
 800a1d0:	60ba      	str	r2, [r7, #8]
 800a1d2:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f000 fb96 	bl	800a908 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	68fb      	ldr	r3, [r7, #12]
}
 800a1e0:	0010      	movs	r0, r2
 800a1e2:	0019      	movs	r1, r3
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	b006      	add	sp, #24
 800a1e8:	bdb0      	pop	{r4, r5, r7, pc}

0800a1ea <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a1ea:	b590      	push	{r4, r7, lr}
 800a1ec:	b085      	sub	sp, #20
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a1f2:	230f      	movs	r3, #15
 800a1f4:	18fb      	adds	r3, r7, r3
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a1fa:	230e      	movs	r3, #14
 800a1fc:	18fb      	adds	r3, r7, r3
 800a1fe:	2201      	movs	r2, #1
 800a200:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a202:	e00f      	b.n	800a224 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a204:	220e      	movs	r2, #14
 800a206:	18bb      	adds	r3, r7, r2
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	18ba      	adds	r2, r7, r2
 800a20c:	1c59      	adds	r1, r3, #1
 800a20e:	7011      	strb	r1, [r2, #0]
 800a210:	001a      	movs	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	189b      	adds	r3, r3, r2
 800a216:	7819      	ldrb	r1, [r3, #0]
 800a218:	220f      	movs	r2, #15
 800a21a:	18bb      	adds	r3, r7, r2
 800a21c:	18ba      	adds	r2, r7, r2
 800a21e:	7812      	ldrb	r2, [r2, #0]
 800a220:	404a      	eors	r2, r1
 800a222:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a224:	210e      	movs	r1, #14
 800a226:	187b      	adds	r3, r7, r1
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	18d3      	adds	r3, r2, r3
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b2a      	cmp	r3, #42	; 0x2a
 800a232:	d00a      	beq.n	800a24a <is_my_nmea_checksum_ok+0x60>
 800a234:	187b      	adds	r3, r7, r1
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	18d3      	adds	r3, r2, r3
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <is_my_nmea_checksum_ok+0x60>
 800a242:	187b      	adds	r3, r7, r1
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1dc      	bne.n	800a204 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a24a:	230f      	movs	r3, #15
 800a24c:	18fb      	adds	r3, r7, r3
 800a24e:	781c      	ldrb	r4, [r3, #0]
 800a250:	210e      	movs	r1, #14
 800a252:	187b      	adds	r3, r7, r1
 800a254:	187a      	adds	r2, r7, r1
 800a256:	7812      	ldrb	r2, [r2, #0]
 800a258:	3201      	adds	r2, #1
 800a25a:	701a      	strb	r2, [r3, #0]
 800a25c:	187b      	adds	r3, r7, r1
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	18d3      	adds	r3, r2, r3
 800a264:	2210      	movs	r2, #16
 800a266:	2100      	movs	r1, #0
 800a268:	0018      	movs	r0, r3
 800a26a:	f001 fc3d 	bl	800bae8 <strtol>
 800a26e:	0003      	movs	r3, r0
 800a270:	1ae3      	subs	r3, r4, r3
 800a272:	425a      	negs	r2, r3
 800a274:	4153      	adcs	r3, r2
 800a276:	b2db      	uxtb	r3, r3
}
 800a278:	0018      	movs	r0, r3
 800a27a:	46bd      	mov	sp, r7
 800a27c:	b005      	add	sp, #20
 800a27e:	bd90      	pop	{r4, r7, pc}

0800a280 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a280:	b5b0      	push	{r4, r5, r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	000a      	movs	r2, r1
 800a28a:	1cfb      	adds	r3, r7, #3
 800a28c:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a28e:	2308      	movs	r3, #8
 800a290:	18fa      	adds	r2, r7, r3
 800a292:	492f      	ldr	r1, [pc, #188]	; (800a350 <nmea2decimal+0xd0>)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	0018      	movs	r0, r3
 800a298:	f001 fd4a 	bl	800bd30 <sscanf>
    min = deg / 100 ;
 800a29c:	68b8      	ldr	r0, [r7, #8]
 800a29e:	68f9      	ldr	r1, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4b2c      	ldr	r3, [pc, #176]	; (800a354 <nmea2decimal+0xd4>)
 800a2a4:	f7f6 fde8 	bl	8000e78 <__aeabi_ddiv>
 800a2a8:	0002      	movs	r2, r0
 800a2aa:	000b      	movs	r3, r1
 800a2ac:	613a      	str	r2, [r7, #16]
 800a2ae:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a2b0:	6938      	ldr	r0, [r7, #16]
 800a2b2:	6979      	ldr	r1, [r7, #20]
 800a2b4:	f7f8 f83c 	bl	8002330 <__aeabi_d2iz>
 800a2b8:	0003      	movs	r3, r0
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f7f8 f86e 	bl	800239c <__aeabi_i2d>
 800a2c0:	0002      	movs	r2, r0
 800a2c2:	000b      	movs	r3, r1
 800a2c4:	60ba      	str	r2, [r7, #8]
 800a2c6:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6938      	ldr	r0, [r7, #16]
 800a2ce:	6979      	ldr	r1, [r7, #20]
 800a2d0:	f7f7 fc8e 	bl	8001bf0 <__aeabi_dsub>
 800a2d4:	0002      	movs	r2, r0
 800a2d6:	000b      	movs	r3, r1
 800a2d8:	0010      	movs	r0, r2
 800a2da:	0019      	movs	r1, r3
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4b1e      	ldr	r3, [pc, #120]	; (800a358 <nmea2decimal+0xd8>)
 800a2e0:	f7f7 f9c4 	bl	800166c <__aeabi_dmul>
 800a2e4:	0002      	movs	r2, r0
 800a2e6:	000b      	movs	r3, r1
 800a2e8:	613a      	str	r2, [r7, #16]
 800a2ea:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	4b1b      	ldr	r3, [pc, #108]	; (800a35c <nmea2decimal+0xdc>)
 800a2f0:	6938      	ldr	r0, [r7, #16]
 800a2f2:	6979      	ldr	r1, [r7, #20]
 800a2f4:	f7f6 fdc0 	bl	8000e78 <__aeabi_ddiv>
 800a2f8:	0002      	movs	r2, r0
 800a2fa:	000b      	movs	r3, r1
 800a2fc:	613a      	str	r2, [r7, #16]
 800a2fe:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a300:	1cfb      	adds	r3, r7, #3
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b53      	cmp	r3, #83	; 0x53
 800a306:	d003      	beq.n	800a310 <nmea2decimal+0x90>
 800a308:	1cfb      	adds	r3, r7, #3
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b57      	cmp	r3, #87	; 0x57
 800a30e:	d10e      	bne.n	800a32e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a310:	68b8      	ldr	r0, [r7, #8]
 800a312:	68f9      	ldr	r1, [r7, #12]
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f7f6 fa4e 	bl	80007b8 <__aeabi_dadd>
 800a31c:	0002      	movs	r2, r0
 800a31e:	000b      	movs	r3, r1
 800a320:	0011      	movs	r1, r2
 800a322:	000c      	movs	r4, r1
 800a324:	2180      	movs	r1, #128	; 0x80
 800a326:	0609      	lsls	r1, r1, #24
 800a328:	4059      	eors	r1, r3
 800a32a:	000d      	movs	r5, r1
 800a32c:	e009      	b.n	800a342 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a32e:	68b8      	ldr	r0, [r7, #8]
 800a330:	68f9      	ldr	r1, [r7, #12]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f7f6 fa3f 	bl	80007b8 <__aeabi_dadd>
 800a33a:	0002      	movs	r2, r0
 800a33c:	000b      	movs	r3, r1
 800a33e:	0014      	movs	r4, r2
 800a340:	001d      	movs	r5, r3
}
 800a342:	0022      	movs	r2, r4
 800a344:	002b      	movs	r3, r5
 800a346:	0010      	movs	r0, r2
 800a348:	0019      	movs	r1, r3
 800a34a:	46bd      	mov	sp, r7
 800a34c:	b006      	add	sp, #24
 800a34e:	bdb0      	pop	{r4, r5, r7, pc}
 800a350:	08014234 	.word	0x08014234
 800a354:	40590000 	.word	0x40590000
 800a358:	40240000 	.word	0x40240000
 800a35c:	40180000 	.word	0x40180000

0800a360 <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 800a360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a362:	b091      	sub	sp, #68	; 0x44
 800a364:	af02      	add	r7, sp, #8
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2201      	movs	r2, #1
 800a372:	212c      	movs	r1, #44	; 0x2c
 800a374:	0018      	movs	r0, r3
 800a376:	f7ff fe35 	bl	8009fe4 <my_find_char_position>
 800a37a:	0003      	movs	r3, r0
 800a37c:	001a      	movs	r2, r3
 800a37e:	2537      	movs	r5, #55	; 0x37
 800a380:	197b      	adds	r3, r7, r5
 800a382:	3201      	adds	r2, #1
 800a384:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2202      	movs	r2, #2
 800a38a:	212c      	movs	r1, #44	; 0x2c
 800a38c:	0018      	movs	r0, r3
 800a38e:	f7ff fe29 	bl	8009fe4 <my_find_char_position>
 800a392:	0003      	movs	r3, r0
 800a394:	0019      	movs	r1, r3
 800a396:	2436      	movs	r4, #54	; 0x36
 800a398:	193b      	adds	r3, r7, r4
 800a39a:	197a      	adds	r2, r7, r5
 800a39c:	7812      	ldrb	r2, [r2, #0]
 800a39e:	1a8a      	subs	r2, r1, r2
 800a3a0:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a3a2:	193b      	adds	r3, r7, r4
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f000 faa3 	bl	800a8f4 <malloc>
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a3b2:	197b      	adds	r3, r7, r5
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	18d1      	adds	r1, r2, r3
 800a3ba:	193b      	adds	r3, r7, r4
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f001 fd44 	bl	800be4e <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a3c6:	193b      	adds	r3, r7, r4
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3cc:	18d3      	adds	r3, r2, r3
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a3d2:	197b      	adds	r3, r7, r5
 800a3d4:	781a      	ldrb	r2, [r3, #0]
 800a3d6:	193b      	adds	r3, r7, r4
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	18d3      	adds	r3, r2, r3
 800a3dc:	3301      	adds	r3, #1
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	18d2      	adds	r2, r2, r3
 800a3e2:	262f      	movs	r6, #47	; 0x2f
 800a3e4:	19bb      	adds	r3, r7, r6
 800a3e6:	7812      	ldrb	r2, [r2, #0]
 800a3e8:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a3ea:	19bb      	adds	r3, r7, r6
 800a3ec:	781a      	ldrb	r2, [r3, #0]
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	0011      	movs	r1, r2
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	f7ff ff44 	bl	800a280 <nmea2decimal>
 800a3f8:	0002      	movs	r2, r0
 800a3fa:	000b      	movs	r3, r1
 800a3fc:	623a      	str	r2, [r7, #32]
 800a3fe:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	0018      	movs	r0, r3
 800a404:	f000 fa80 	bl	800a908 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a408:	2200      	movs	r2, #0
 800a40a:	4b53      	ldr	r3, [pc, #332]	; (800a558 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a40c:	6a38      	ldr	r0, [r7, #32]
 800a40e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a410:	f7f7 f92c 	bl	800166c <__aeabi_dmul>
 800a414:	0002      	movs	r2, r0
 800a416:	000b      	movs	r3, r1
 800a418:	0010      	movs	r0, r2
 800a41a:	0019      	movs	r1, r3
 800a41c:	f008 fa34 	bl	8012888 <round>
 800a420:	2200      	movs	r2, #0
 800a422:	4b4d      	ldr	r3, [pc, #308]	; (800a558 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a424:	f7f6 fd28 	bl	8000e78 <__aeabi_ddiv>
 800a428:	0002      	movs	r2, r0
 800a42a:	000b      	movs	r3, r1
 800a42c:	623a      	str	r2, [r7, #32]
 800a42e:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 800a430:	494a      	ldr	r1, [pc, #296]	; (800a55c <get_my_nmea_gngll_coordinates+0x1fc>)
 800a432:	68b8      	ldr	r0, [r7, #8]
 800a434:	6a3a      	ldr	r2, [r7, #32]
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	9200      	str	r2, [sp, #0]
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	000a      	movs	r2, r1
 800a43e:	210c      	movs	r1, #12
 800a440:	f001 fc22 	bl	800bc88 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a444:	2200      	movs	r2, #0
 800a446:	4b46      	ldr	r3, [pc, #280]	; (800a560 <get_my_nmea_gngll_coordinates+0x200>)
 800a448:	6a38      	ldr	r0, [r7, #32]
 800a44a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a44c:	f7f7 f90e 	bl	800166c <__aeabi_dmul>
 800a450:	0002      	movs	r2, r0
 800a452:	000b      	movs	r3, r1
 800a454:	0010      	movs	r0, r2
 800a456:	0019      	movs	r1, r3
 800a458:	f7f7 ff6a 	bl	8002330 <__aeabi_d2iz>
 800a45c:	0002      	movs	r2, r0
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2203      	movs	r2, #3
 800a466:	212c      	movs	r1, #44	; 0x2c
 800a468:	0018      	movs	r0, r3
 800a46a:	f7ff fdbb 	bl	8009fe4 <my_find_char_position>
 800a46e:	0003      	movs	r3, r0
 800a470:	001a      	movs	r2, r3
 800a472:	197b      	adds	r3, r7, r5
 800a474:	3201      	adds	r2, #1
 800a476:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2204      	movs	r2, #4
 800a47c:	212c      	movs	r1, #44	; 0x2c
 800a47e:	0018      	movs	r0, r3
 800a480:	f7ff fdb0 	bl	8009fe4 <my_find_char_position>
 800a484:	0003      	movs	r3, r0
 800a486:	0019      	movs	r1, r3
 800a488:	193b      	adds	r3, r7, r4
 800a48a:	197a      	adds	r2, r7, r5
 800a48c:	7812      	ldrb	r2, [r2, #0]
 800a48e:	1a8a      	subs	r2, r1, r2
 800a490:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a492:	193b      	adds	r3, r7, r4
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	3301      	adds	r3, #1
 800a498:	0018      	movs	r0, r3
 800a49a:	f000 fa2b 	bl	800a8f4 <malloc>
 800a49e:	0003      	movs	r3, r0
 800a4a0:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a4a2:	197b      	adds	r3, r7, r5
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	18d1      	adds	r1, r2, r3
 800a4aa:	193b      	adds	r3, r7, r4
 800a4ac:	781a      	ldrb	r2, [r3, #0]
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	0018      	movs	r0, r3
 800a4b2:	f001 fccc 	bl	800be4e <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a4b6:	193b      	adds	r3, r7, r4
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	69fa      	ldr	r2, [r7, #28]
 800a4bc:	18d3      	adds	r3, r2, r3
 800a4be:	2200      	movs	r2, #0
 800a4c0:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a4c2:	197b      	adds	r3, r7, r5
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	193b      	adds	r3, r7, r4
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	18d3      	adds	r3, r2, r3
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	18d2      	adds	r2, r2, r3
 800a4d2:	19bb      	adds	r3, r7, r6
 800a4d4:	7812      	ldrb	r2, [r2, #0]
 800a4d6:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a4d8:	19bb      	adds	r3, r7, r6
 800a4da:	781a      	ldrb	r2, [r3, #0]
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	0011      	movs	r1, r2
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f7ff fecd 	bl	800a280 <nmea2decimal>
 800a4e6:	0002      	movs	r2, r0
 800a4e8:	000b      	movs	r3, r1
 800a4ea:	613a      	str	r2, [r7, #16]
 800a4ec:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	f000 fa09 	bl	800a908 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	4b17      	ldr	r3, [pc, #92]	; (800a558 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a4fa:	6938      	ldr	r0, [r7, #16]
 800a4fc:	6979      	ldr	r1, [r7, #20]
 800a4fe:	f7f7 f8b5 	bl	800166c <__aeabi_dmul>
 800a502:	0002      	movs	r2, r0
 800a504:	000b      	movs	r3, r1
 800a506:	0010      	movs	r0, r2
 800a508:	0019      	movs	r1, r3
 800a50a:	f008 f9bd 	bl	8012888 <round>
 800a50e:	2200      	movs	r2, #0
 800a510:	4b11      	ldr	r3, [pc, #68]	; (800a558 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a512:	f7f6 fcb1 	bl	8000e78 <__aeabi_ddiv>
 800a516:	0002      	movs	r2, r0
 800a518:	000b      	movs	r3, r1
 800a51a:	613a      	str	r2, [r7, #16]
 800a51c:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 800a51e:	490f      	ldr	r1, [pc, #60]	; (800a55c <get_my_nmea_gngll_coordinates+0x1fc>)
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	9200      	str	r2, [sp, #0]
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	000a      	movs	r2, r1
 800a52c:	210c      	movs	r1, #12
 800a52e:	f001 fbab 	bl	800bc88 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a532:	2200      	movs	r2, #0
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <get_my_nmea_gngll_coordinates+0x200>)
 800a536:	6938      	ldr	r0, [r7, #16]
 800a538:	6979      	ldr	r1, [r7, #20]
 800a53a:	f7f7 f897 	bl	800166c <__aeabi_dmul>
 800a53e:	0002      	movs	r2, r0
 800a540:	000b      	movs	r3, r1
 800a542:	0010      	movs	r0, r2
 800a544:	0019      	movs	r1, r3
 800a546:	f7f7 fef3 	bl	8002330 <__aeabi_d2iz>
 800a54a:	0002      	movs	r2, r0
 800a54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a54e:	601a      	str	r2, [r3, #0]
}
 800a550:	46c0      	nop			; (mov r8, r8)
 800a552:	46bd      	mov	sp, r7
 800a554:	b00f      	add	sp, #60	; 0x3c
 800a556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a558:	412e8480 	.word	0x412e8480
 800a55c:	08014238 	.word	0x08014238
 800a560:	416312d0 	.word	0x416312d0

0800a564 <my_nmea_get_gsv_tns>:
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a564:	b5b0      	push	{r4, r5, r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a56c:	240e      	movs	r4, #14
 800a56e:	193b      	adds	r3, r7, r4
 800a570:	2200      	movs	r2, #0
 800a572:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2203      	movs	r2, #3
 800a578:	212c      	movs	r1, #44	; 0x2c
 800a57a:	0018      	movs	r0, r3
 800a57c:	f7ff fd32 	bl	8009fe4 <my_find_char_position>
 800a580:	0003      	movs	r3, r0
 800a582:	001a      	movs	r2, r3
 800a584:	2517      	movs	r5, #23
 800a586:	197b      	adds	r3, r7, r5
 800a588:	3201      	adds	r2, #1
 800a58a:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a58c:	2003      	movs	r0, #3
 800a58e:	f000 f9b1 	bl	800a8f4 <malloc>
 800a592:	0003      	movs	r3, r0
 800a594:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a596:	197b      	adds	r3, r7, r5
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	18d1      	adds	r1, r2, r3
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	0018      	movs	r0, r3
 800a5a4:	f001 fc53 	bl	800be4e <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	3302      	adds	r3, #2
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a5b0:	193a      	adds	r2, r7, r4
 800a5b2:	4907      	ldr	r1, [pc, #28]	; (800a5d0 <my_nmea_get_gsv_tns+0x6c>)
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	f001 fbba 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	0018      	movs	r0, r3
 800a5c0:	f000 f9a2 	bl	800a908 <free>
	return tns ;
 800a5c4:	193b      	adds	r3, r7, r4
 800a5c6:	881b      	ldrh	r3, [r3, #0]
}
 800a5c8:	0018      	movs	r0, r3
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	b006      	add	sp, #24
 800a5ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a5d0:	08014240 	.word	0x08014240

0800a5d4 <get_my_nmea_rmc_date_yy>:

void get_my_nmea_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a5d4:	b590      	push	{r4, r7, lr}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2209      	movs	r2, #9
 800a5e2:	212c      	movs	r1, #44	; 0x2c
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	f7ff fcfd 	bl	8009fe4 <my_find_char_position>
 800a5ea:	0003      	movs	r3, r0
 800a5ec:	001a      	movs	r2, r3
 800a5ee:	2417      	movs	r4, #23
 800a5f0:	193b      	adds	r3, r7, r4
 800a5f2:	3205      	adds	r2, #5
 800a5f4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a5f6:	2003      	movs	r0, #3
 800a5f8:	f000 f97c 	bl	800a8f4 <malloc>
 800a5fc:	0003      	movs	r3, r0
 800a5fe:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a600:	193b      	adds	r3, r7, r4
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	18d1      	adds	r1, r2, r3
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	2202      	movs	r2, #2
 800a60c:	0018      	movs	r0, r3
 800a60e:	f001 fc1e 	bl	800be4e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	3302      	adds	r3, #2
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a61a:	240e      	movs	r4, #14
 800a61c:	193a      	adds	r2, r7, r4
 800a61e:	4909      	ldr	r1, [pc, #36]	; (800a644 <get_my_nmea_rmc_date_yy+0x70>)
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	0018      	movs	r0, r3
 800a624:	f001 fb84 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	0018      	movs	r0, r3
 800a62c:	f000 f96c 	bl	800a908 <free>
	*yy = (uint8_t) temp ;
 800a630:	193b      	adds	r3, r7, r4
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	b2da      	uxtb	r2, r3
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	701a      	strb	r2, [r3, #0]

}
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	46bd      	mov	sp, r7
 800a63e:	b007      	add	sp, #28
 800a640:	bd90      	pop	{r4, r7, pc}
 800a642:	46c0      	nop			; (mov r8, r8)
 800a644:	08014240 	.word	0x08014240

0800a648 <get_my_nmea_rmc_date_mm>:
void get_my_nmea_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a648:	b590      	push	{r4, r7, lr}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2209      	movs	r2, #9
 800a656:	212c      	movs	r1, #44	; 0x2c
 800a658:	0018      	movs	r0, r3
 800a65a:	f7ff fcc3 	bl	8009fe4 <my_find_char_position>
 800a65e:	0003      	movs	r3, r0
 800a660:	001a      	movs	r2, r3
 800a662:	2417      	movs	r4, #23
 800a664:	193b      	adds	r3, r7, r4
 800a666:	3203      	adds	r2, #3
 800a668:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a66a:	2003      	movs	r0, #3
 800a66c:	f000 f942 	bl	800a8f4 <malloc>
 800a670:	0003      	movs	r3, r0
 800a672:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a674:	193b      	adds	r3, r7, r4
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	18d1      	adds	r1, r2, r3
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	2202      	movs	r2, #2
 800a680:	0018      	movs	r0, r3
 800a682:	f001 fbe4 	bl	800be4e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	3302      	adds	r3, #2
 800a68a:	2200      	movs	r2, #0
 800a68c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a68e:	240e      	movs	r4, #14
 800a690:	193a      	adds	r2, r7, r4
 800a692:	4909      	ldr	r1, [pc, #36]	; (800a6b8 <get_my_nmea_rmc_date_mm+0x70>)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	0018      	movs	r0, r3
 800a698:	f001 fb4a 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f000 f932 	bl	800a908 <free>
	*mm = (uint8_t) temp ;
 800a6a4:	193b      	adds	r3, r7, r4
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	701a      	strb	r2, [r3, #0]

}
 800a6ae:	46c0      	nop			; (mov r8, r8)
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	b007      	add	sp, #28
 800a6b4:	bd90      	pop	{r4, r7, pc}
 800a6b6:	46c0      	nop			; (mov r8, r8)
 800a6b8:	08014240 	.word	0x08014240

0800a6bc <get_my_nmea_rmc_date_dd>:
void get_my_nmea_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a6bc:	b590      	push	{r4, r7, lr}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2209      	movs	r2, #9
 800a6ca:	212c      	movs	r1, #44	; 0x2c
 800a6cc:	0018      	movs	r0, r3
 800a6ce:	f7ff fc89 	bl	8009fe4 <my_find_char_position>
 800a6d2:	0003      	movs	r3, r0
 800a6d4:	001a      	movs	r2, r3
 800a6d6:	2417      	movs	r4, #23
 800a6d8:	193b      	adds	r3, r7, r4
 800a6da:	3201      	adds	r2, #1
 800a6dc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a6de:	2003      	movs	r0, #3
 800a6e0:	f000 f908 	bl	800a8f4 <malloc>
 800a6e4:	0003      	movs	r3, r0
 800a6e6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a6e8:	193b      	adds	r3, r7, r4
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	18d1      	adds	r1, r2, r3
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f001 fbaa 	bl	800be4e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	3302      	adds	r3, #2
 800a6fe:	2200      	movs	r2, #0
 800a700:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a702:	240e      	movs	r4, #14
 800a704:	193a      	adds	r2, r7, r4
 800a706:	4909      	ldr	r1, [pc, #36]	; (800a72c <get_my_nmea_rmc_date_dd+0x70>)
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	0018      	movs	r0, r3
 800a70c:	f001 fb10 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	0018      	movs	r0, r3
 800a714:	f000 f8f8 	bl	800a908 <free>
	*dd = (uint8_t) temp ;
 800a718:	193b      	adds	r3, r7, r4
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	701a      	strb	r2, [r3, #0]

}
 800a722:	46c0      	nop			; (mov r8, r8)
 800a724:	46bd      	mov	sp, r7
 800a726:	b007      	add	sp, #28
 800a728:	bd90      	pop	{r4, r7, pc}
 800a72a:	46c0      	nop			; (mov r8, r8)
 800a72c:	08014240 	.word	0x08014240

0800a730 <get_my_nmea_rmc_utc_hh>:
void get_my_nmea_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a730:	b590      	push	{r4, r7, lr}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	212c      	movs	r1, #44	; 0x2c
 800a740:	0018      	movs	r0, r3
 800a742:	f7ff fc4f 	bl	8009fe4 <my_find_char_position>
 800a746:	0003      	movs	r3, r0
 800a748:	001a      	movs	r2, r3
 800a74a:	2417      	movs	r4, #23
 800a74c:	193b      	adds	r3, r7, r4
 800a74e:	3201      	adds	r2, #1
 800a750:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a752:	2003      	movs	r0, #3
 800a754:	f000 f8ce 	bl	800a8f4 <malloc>
 800a758:	0003      	movs	r3, r0
 800a75a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a75c:	193b      	adds	r3, r7, r4
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	18d1      	adds	r1, r2, r3
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	2202      	movs	r2, #2
 800a768:	0018      	movs	r0, r3
 800a76a:	f001 fb70 	bl	800be4e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	3302      	adds	r3, #2
 800a772:	2200      	movs	r2, #0
 800a774:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a776:	240e      	movs	r4, #14
 800a778:	193a      	adds	r2, r7, r4
 800a77a:	4909      	ldr	r1, [pc, #36]	; (800a7a0 <get_my_nmea_rmc_utc_hh+0x70>)
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	0018      	movs	r0, r3
 800a780:	f001 fad6 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	0018      	movs	r0, r3
 800a788:	f000 f8be 	bl	800a908 <free>
	*hh = (uint8_t) temp ;
 800a78c:	193b      	adds	r3, r7, r4
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	b2da      	uxtb	r2, r3
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	701a      	strb	r2, [r3, #0]

}
 800a796:	46c0      	nop			; (mov r8, r8)
 800a798:	46bd      	mov	sp, r7
 800a79a:	b007      	add	sp, #28
 800a79c:	bd90      	pop	{r4, r7, pc}
 800a79e:	46c0      	nop			; (mov r8, r8)
 800a7a0:	08014240 	.word	0x08014240

0800a7a4 <get_my_nmea_rmc_utc_mm>:
void get_my_nmea_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a7a4:	b590      	push	{r4, r7, lr}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	212c      	movs	r1, #44	; 0x2c
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	f7ff fc15 	bl	8009fe4 <my_find_char_position>
 800a7ba:	0003      	movs	r3, r0
 800a7bc:	001a      	movs	r2, r3
 800a7be:	2417      	movs	r4, #23
 800a7c0:	193b      	adds	r3, r7, r4
 800a7c2:	3203      	adds	r2, #3
 800a7c4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a7c6:	2003      	movs	r0, #3
 800a7c8:	f000 f894 	bl	800a8f4 <malloc>
 800a7cc:	0003      	movs	r3, r0
 800a7ce:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a7d0:	193b      	adds	r3, r7, r4
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	18d1      	adds	r1, r2, r3
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	0018      	movs	r0, r3
 800a7de:	f001 fb36 	bl	800be4e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	3302      	adds	r3, #2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a7ea:	240e      	movs	r4, #14
 800a7ec:	193a      	adds	r2, r7, r4
 800a7ee:	4909      	ldr	r1, [pc, #36]	; (800a814 <get_my_nmea_rmc_utc_mm+0x70>)
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	f001 fa9c 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	0018      	movs	r0, r3
 800a7fc:	f000 f884 	bl	800a908 <free>
	*mm = (uint8_t) temp ;
 800a800:	193b      	adds	r3, r7, r4
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b2da      	uxtb	r2, r3
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	701a      	strb	r2, [r3, #0]

}
 800a80a:	46c0      	nop			; (mov r8, r8)
 800a80c:	46bd      	mov	sp, r7
 800a80e:	b007      	add	sp, #28
 800a810:	bd90      	pop	{r4, r7, pc}
 800a812:	46c0      	nop			; (mov r8, r8)
 800a814:	08014240 	.word	0x08014240

0800a818 <get_my_nmea_rmc_utc_ss>:
void get_my_nmea_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a818:	b590      	push	{r4, r7, lr}
 800a81a:	b087      	sub	sp, #28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	212c      	movs	r1, #44	; 0x2c
 800a828:	0018      	movs	r0, r3
 800a82a:	f7ff fbdb 	bl	8009fe4 <my_find_char_position>
 800a82e:	0003      	movs	r3, r0
 800a830:	001a      	movs	r2, r3
 800a832:	2417      	movs	r4, #23
 800a834:	193b      	adds	r3, r7, r4
 800a836:	3205      	adds	r2, #5
 800a838:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a83a:	2003      	movs	r0, #3
 800a83c:	f000 f85a 	bl	800a8f4 <malloc>
 800a840:	0003      	movs	r3, r0
 800a842:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a844:	193b      	adds	r3, r7, r4
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	18d1      	adds	r1, r2, r3
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	2202      	movs	r2, #2
 800a850:	0018      	movs	r0, r3
 800a852:	f001 fafc 	bl	800be4e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	3302      	adds	r3, #2
 800a85a:	2200      	movs	r2, #0
 800a85c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a85e:	240e      	movs	r4, #14
 800a860:	193a      	adds	r2, r7, r4
 800a862:	4909      	ldr	r1, [pc, #36]	; (800a888 <get_my_nmea_rmc_utc_ss+0x70>)
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	0018      	movs	r0, r3
 800a868:	f001 fa62 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	0018      	movs	r0, r3
 800a870:	f000 f84a 	bl	800a908 <free>
	*ss = (uint8_t) temp ;
 800a874:	193b      	adds	r3, r7, r4
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	701a      	strb	r2, [r3, #0]

}
 800a87e:	46c0      	nop			; (mov r8, r8)
 800a880:	46bd      	mov	sp, r7
 800a882:	b007      	add	sp, #28
 800a884:	bd90      	pop	{r4, r7, pc}
 800a886:	46c0      	nop			; (mov r8, r8)
 800a888:	08014240 	.word	0x08014240

0800a88c <get_my_nmea_rmc_utc_sss>:
void get_my_nmea_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a88c:	b590      	push	{r4, r7, lr}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	212c      	movs	r1, #44	; 0x2c
 800a89c:	0018      	movs	r0, r3
 800a89e:	f7ff fba1 	bl	8009fe4 <my_find_char_position>
 800a8a2:	0003      	movs	r3, r0
 800a8a4:	001a      	movs	r2, r3
 800a8a6:	240f      	movs	r4, #15
 800a8a8:	193b      	adds	r3, r7, r4
 800a8aa:	3208      	adds	r2, #8
 800a8ac:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a8ae:	2004      	movs	r0, #4
 800a8b0:	f000 f820 	bl	800a8f4 <malloc>
 800a8b4:	0003      	movs	r3, r0
 800a8b6:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a8b8:	193b      	adds	r3, r7, r4
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	18d1      	adds	r1, r2, r3
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2203      	movs	r2, #3
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	f001 fac2 	bl	800be4e <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	3303      	adds	r3, #3
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	4906      	ldr	r1, [pc, #24]	; (800a8f0 <get_my_nmea_rmc_utc_sss+0x64>)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	0018      	movs	r0, r3
 800a8da:	f001 fa29 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	0018      	movs	r0, r3
 800a8e2:	f000 f811 	bl	800a908 <free>
}
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	b005      	add	sp, #20
 800a8ec:	bd90      	pop	{r4, r7, pc}
 800a8ee:	46c0      	nop			; (mov r8, r8)
 800a8f0:	08014244 	.word	0x08014244

0800a8f4 <malloc>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	4b03      	ldr	r3, [pc, #12]	; (800a904 <malloc+0x10>)
 800a8f8:	0001      	movs	r1, r0
 800a8fa:	6818      	ldr	r0, [r3, #0]
 800a8fc:	f000 f80e 	bl	800a91c <_malloc_r>
 800a900:	bd10      	pop	{r4, pc}
 800a902:	46c0      	nop			; (mov r8, r8)
 800a904:	200006d8 	.word	0x200006d8

0800a908 <free>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	4b03      	ldr	r3, [pc, #12]	; (800a918 <free+0x10>)
 800a90c:	0001      	movs	r1, r0
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	f001 fbe4 	bl	800c0dc <_free_r>
 800a914:	bd10      	pop	{r4, pc}
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	200006d8 	.word	0x200006d8

0800a91c <_malloc_r>:
 800a91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a91e:	000d      	movs	r5, r1
 800a920:	b087      	sub	sp, #28
 800a922:	350b      	adds	r5, #11
 800a924:	9001      	str	r0, [sp, #4]
 800a926:	2d16      	cmp	r5, #22
 800a928:	d908      	bls.n	800a93c <_malloc_r+0x20>
 800a92a:	2207      	movs	r2, #7
 800a92c:	4395      	bics	r5, r2
 800a92e:	d506      	bpl.n	800a93e <_malloc_r+0x22>
 800a930:	230c      	movs	r3, #12
 800a932:	9a01      	ldr	r2, [sp, #4]
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	2000      	movs	r0, #0
 800a938:	b007      	add	sp, #28
 800a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a93c:	2510      	movs	r5, #16
 800a93e:	42a9      	cmp	r1, r5
 800a940:	d8f6      	bhi.n	800a930 <_malloc_r+0x14>
 800a942:	9801      	ldr	r0, [sp, #4]
 800a944:	f000 f9fe 	bl	800ad44 <__malloc_lock>
 800a948:	23fc      	movs	r3, #252	; 0xfc
 800a94a:	4ebe      	ldr	r6, [pc, #760]	; (800ac44 <_malloc_r+0x328>)
 800a94c:	005b      	lsls	r3, r3, #1
 800a94e:	429d      	cmp	r5, r3
 800a950:	d219      	bcs.n	800a986 <_malloc_r+0x6a>
 800a952:	002a      	movs	r2, r5
 800a954:	3208      	adds	r2, #8
 800a956:	18b2      	adds	r2, r6, r2
 800a958:	0011      	movs	r1, r2
 800a95a:	6854      	ldr	r4, [r2, #4]
 800a95c:	3908      	subs	r1, #8
 800a95e:	08eb      	lsrs	r3, r5, #3
 800a960:	428c      	cmp	r4, r1
 800a962:	d103      	bne.n	800a96c <_malloc_r+0x50>
 800a964:	68d4      	ldr	r4, [r2, #12]
 800a966:	3302      	adds	r3, #2
 800a968:	42a2      	cmp	r2, r4
 800a96a:	d022      	beq.n	800a9b2 <_malloc_r+0x96>
 800a96c:	2203      	movs	r2, #3
 800a96e:	6863      	ldr	r3, [r4, #4]
 800a970:	68a1      	ldr	r1, [r4, #8]
 800a972:	4393      	bics	r3, r2
 800a974:	68e2      	ldr	r2, [r4, #12]
 800a976:	18e3      	adds	r3, r4, r3
 800a978:	60ca      	str	r2, [r1, #12]
 800a97a:	6091      	str	r1, [r2, #8]
 800a97c:	2201      	movs	r2, #1
 800a97e:	6859      	ldr	r1, [r3, #4]
 800a980:	430a      	orrs	r2, r1
 800a982:	605a      	str	r2, [r3, #4]
 800a984:	e02a      	b.n	800a9dc <_malloc_r+0xc0>
 800a986:	233f      	movs	r3, #63	; 0x3f
 800a988:	0a6a      	lsrs	r2, r5, #9
 800a98a:	d003      	beq.n	800a994 <_malloc_r+0x78>
 800a98c:	2a04      	cmp	r2, #4
 800a98e:	d82b      	bhi.n	800a9e8 <_malloc_r+0xcc>
 800a990:	09ab      	lsrs	r3, r5, #6
 800a992:	3338      	adds	r3, #56	; 0x38
 800a994:	2203      	movs	r2, #3
 800a996:	4694      	mov	ip, r2
 800a998:	00d9      	lsls	r1, r3, #3
 800a99a:	1989      	adds	r1, r1, r6
 800a99c:	68cc      	ldr	r4, [r1, #12]
 800a99e:	428c      	cmp	r4, r1
 800a9a0:	d006      	beq.n	800a9b0 <_malloc_r+0x94>
 800a9a2:	4660      	mov	r0, ip
 800a9a4:	6862      	ldr	r2, [r4, #4]
 800a9a6:	4382      	bics	r2, r0
 800a9a8:	1b57      	subs	r7, r2, r5
 800a9aa:	2f0f      	cmp	r7, #15
 800a9ac:	dd34      	ble.n	800aa18 <_malloc_r+0xfc>
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	6934      	ldr	r4, [r6, #16]
 800a9b4:	49a4      	ldr	r1, [pc, #656]	; (800ac48 <_malloc_r+0x32c>)
 800a9b6:	428c      	cmp	r4, r1
 800a9b8:	d055      	beq.n	800aa66 <_malloc_r+0x14a>
 800a9ba:	2003      	movs	r0, #3
 800a9bc:	6862      	ldr	r2, [r4, #4]
 800a9be:	4382      	bics	r2, r0
 800a9c0:	1b50      	subs	r0, r2, r5
 800a9c2:	280f      	cmp	r0, #15
 800a9c4:	dd36      	ble.n	800aa34 <_malloc_r+0x118>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	1967      	adds	r7, r4, r5
 800a9ca:	431d      	orrs	r5, r3
 800a9cc:	4303      	orrs	r3, r0
 800a9ce:	6065      	str	r5, [r4, #4]
 800a9d0:	6177      	str	r7, [r6, #20]
 800a9d2:	6137      	str	r7, [r6, #16]
 800a9d4:	60f9      	str	r1, [r7, #12]
 800a9d6:	60b9      	str	r1, [r7, #8]
 800a9d8:	607b      	str	r3, [r7, #4]
 800a9da:	50a0      	str	r0, [r4, r2]
 800a9dc:	9801      	ldr	r0, [sp, #4]
 800a9de:	f000 f9b9 	bl	800ad54 <__malloc_unlock>
 800a9e2:	0020      	movs	r0, r4
 800a9e4:	3008      	adds	r0, #8
 800a9e6:	e7a7      	b.n	800a938 <_malloc_r+0x1c>
 800a9e8:	2a14      	cmp	r2, #20
 800a9ea:	d802      	bhi.n	800a9f2 <_malloc_r+0xd6>
 800a9ec:	0013      	movs	r3, r2
 800a9ee:	335b      	adds	r3, #91	; 0x5b
 800a9f0:	e7d0      	b.n	800a994 <_malloc_r+0x78>
 800a9f2:	2a54      	cmp	r2, #84	; 0x54
 800a9f4:	d802      	bhi.n	800a9fc <_malloc_r+0xe0>
 800a9f6:	0b2b      	lsrs	r3, r5, #12
 800a9f8:	336e      	adds	r3, #110	; 0x6e
 800a9fa:	e7cb      	b.n	800a994 <_malloc_r+0x78>
 800a9fc:	23aa      	movs	r3, #170	; 0xaa
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d802      	bhi.n	800aa0a <_malloc_r+0xee>
 800aa04:	0beb      	lsrs	r3, r5, #15
 800aa06:	3377      	adds	r3, #119	; 0x77
 800aa08:	e7c4      	b.n	800a994 <_malloc_r+0x78>
 800aa0a:	4990      	ldr	r1, [pc, #576]	; (800ac4c <_malloc_r+0x330>)
 800aa0c:	237e      	movs	r3, #126	; 0x7e
 800aa0e:	428a      	cmp	r2, r1
 800aa10:	d8c0      	bhi.n	800a994 <_malloc_r+0x78>
 800aa12:	0cab      	lsrs	r3, r5, #18
 800aa14:	337c      	adds	r3, #124	; 0x7c
 800aa16:	e7bd      	b.n	800a994 <_malloc_r+0x78>
 800aa18:	68e0      	ldr	r0, [r4, #12]
 800aa1a:	2f00      	cmp	r7, #0
 800aa1c:	db08      	blt.n	800aa30 <_malloc_r+0x114>
 800aa1e:	68a3      	ldr	r3, [r4, #8]
 800aa20:	60d8      	str	r0, [r3, #12]
 800aa22:	6083      	str	r3, [r0, #8]
 800aa24:	2301      	movs	r3, #1
 800aa26:	18a2      	adds	r2, r4, r2
 800aa28:	6851      	ldr	r1, [r2, #4]
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	6053      	str	r3, [r2, #4]
 800aa2e:	e7d5      	b.n	800a9dc <_malloc_r+0xc0>
 800aa30:	0004      	movs	r4, r0
 800aa32:	e7b4      	b.n	800a99e <_malloc_r+0x82>
 800aa34:	6171      	str	r1, [r6, #20]
 800aa36:	6131      	str	r1, [r6, #16]
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	daf3      	bge.n	800aa24 <_malloc_r+0x108>
 800aa3c:	6871      	ldr	r1, [r6, #4]
 800aa3e:	468c      	mov	ip, r1
 800aa40:	2180      	movs	r1, #128	; 0x80
 800aa42:	0089      	lsls	r1, r1, #2
 800aa44:	428a      	cmp	r2, r1
 800aa46:	d300      	bcc.n	800aa4a <_malloc_r+0x12e>
 800aa48:	e08c      	b.n	800ab64 <_malloc_r+0x248>
 800aa4a:	08d1      	lsrs	r1, r2, #3
 800aa4c:	0950      	lsrs	r0, r2, #5
 800aa4e:	2201      	movs	r2, #1
 800aa50:	4082      	lsls	r2, r0
 800aa52:	4660      	mov	r0, ip
 800aa54:	4302      	orrs	r2, r0
 800aa56:	6072      	str	r2, [r6, #4]
 800aa58:	00ca      	lsls	r2, r1, #3
 800aa5a:	1992      	adds	r2, r2, r6
 800aa5c:	6891      	ldr	r1, [r2, #8]
 800aa5e:	60e2      	str	r2, [r4, #12]
 800aa60:	60a1      	str	r1, [r4, #8]
 800aa62:	6094      	str	r4, [r2, #8]
 800aa64:	60cc      	str	r4, [r1, #12]
 800aa66:	2201      	movs	r2, #1
 800aa68:	4876      	ldr	r0, [pc, #472]	; (800ac44 <_malloc_r+0x328>)
 800aa6a:	1099      	asrs	r1, r3, #2
 800aa6c:	408a      	lsls	r2, r1
 800aa6e:	6841      	ldr	r1, [r0, #4]
 800aa70:	4291      	cmp	r1, r2
 800aa72:	d328      	bcc.n	800aac6 <_malloc_r+0x1aa>
 800aa74:	420a      	tst	r2, r1
 800aa76:	d105      	bne.n	800aa84 <_malloc_r+0x168>
 800aa78:	2403      	movs	r4, #3
 800aa7a:	43a3      	bics	r3, r4
 800aa7c:	0052      	lsls	r2, r2, #1
 800aa7e:	3304      	adds	r3, #4
 800aa80:	420a      	tst	r2, r1
 800aa82:	d0fb      	beq.n	800aa7c <_malloc_r+0x160>
 800aa84:	496f      	ldr	r1, [pc, #444]	; (800ac44 <_malloc_r+0x328>)
 800aa86:	9104      	str	r1, [sp, #16]
 800aa88:	00d9      	lsls	r1, r3, #3
 800aa8a:	1841      	adds	r1, r0, r1
 800aa8c:	468c      	mov	ip, r1
 800aa8e:	000f      	movs	r7, r1
 800aa90:	9302      	str	r3, [sp, #8]
 800aa92:	68fc      	ldr	r4, [r7, #12]
 800aa94:	42bc      	cmp	r4, r7
 800aa96:	d000      	beq.n	800aa9a <_malloc_r+0x17e>
 800aa98:	e09b      	b.n	800abd2 <_malloc_r+0x2b6>
 800aa9a:	2403      	movs	r4, #3
 800aa9c:	9902      	ldr	r1, [sp, #8]
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	3101      	adds	r1, #1
 800aaa2:	9102      	str	r1, [sp, #8]
 800aaa4:	4221      	tst	r1, r4
 800aaa6:	d1f4      	bne.n	800aa92 <_malloc_r+0x176>
 800aaa8:	2103      	movs	r1, #3
 800aaaa:	420b      	tst	r3, r1
 800aaac:	d000      	beq.n	800aab0 <_malloc_r+0x194>
 800aaae:	e0b7      	b.n	800ac20 <_malloc_r+0x304>
 800aab0:	6843      	ldr	r3, [r0, #4]
 800aab2:	4393      	bics	r3, r2
 800aab4:	6043      	str	r3, [r0, #4]
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	0052      	lsls	r2, r2, #1
 800aaba:	6859      	ldr	r1, [r3, #4]
 800aabc:	4291      	cmp	r1, r2
 800aabe:	d302      	bcc.n	800aac6 <_malloc_r+0x1aa>
 800aac0:	2a00      	cmp	r2, #0
 800aac2:	d000      	beq.n	800aac6 <_malloc_r+0x1aa>
 800aac4:	e0bb      	b.n	800ac3e <_malloc_r+0x322>
 800aac6:	2203      	movs	r2, #3
 800aac8:	6883      	ldr	r3, [r0, #8]
 800aaca:	9302      	str	r3, [sp, #8]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	4393      	bics	r3, r2
 800aad0:	9303      	str	r3, [sp, #12]
 800aad2:	42ab      	cmp	r3, r5
 800aad4:	d303      	bcc.n	800aade <_malloc_r+0x1c2>
 800aad6:	1b59      	subs	r1, r3, r5
 800aad8:	290f      	cmp	r1, #15
 800aada:	dd00      	ble.n	800aade <_malloc_r+0x1c2>
 800aadc:	e123      	b.n	800ad26 <_malloc_r+0x40a>
 800aade:	9b02      	ldr	r3, [sp, #8]
 800aae0:	9a03      	ldr	r2, [sp, #12]
 800aae2:	2008      	movs	r0, #8
 800aae4:	189e      	adds	r6, r3, r2
 800aae6:	4b5a      	ldr	r3, [pc, #360]	; (800ac50 <_malloc_r+0x334>)
 800aae8:	681f      	ldr	r7, [r3, #0]
 800aaea:	f001 fa71 	bl	800bfd0 <sysconf>
 800aaee:	4b59      	ldr	r3, [pc, #356]	; (800ac54 <_malloc_r+0x338>)
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	197f      	adds	r7, r7, r5
 800aaf6:	9004      	str	r0, [sp, #16]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	d003      	beq.n	800ab04 <_malloc_r+0x1e8>
 800aafc:	1e7b      	subs	r3, r7, #1
 800aafe:	181b      	adds	r3, r3, r0
 800ab00:	4247      	negs	r7, r0
 800ab02:	401f      	ands	r7, r3
 800ab04:	0039      	movs	r1, r7
 800ab06:	9801      	ldr	r0, [sp, #4]
 800ab08:	f001 fa0e 	bl	800bf28 <_sbrk_r>
 800ab0c:	0004      	movs	r4, r0
 800ab0e:	1c43      	adds	r3, r0, #1
 800ab10:	d100      	bne.n	800ab14 <_malloc_r+0x1f8>
 800ab12:	e0de      	b.n	800acd2 <_malloc_r+0x3b6>
 800ab14:	4286      	cmp	r6, r0
 800ab16:	d904      	bls.n	800ab22 <_malloc_r+0x206>
 800ab18:	4b4a      	ldr	r3, [pc, #296]	; (800ac44 <_malloc_r+0x328>)
 800ab1a:	9a02      	ldr	r2, [sp, #8]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d000      	beq.n	800ab22 <_malloc_r+0x206>
 800ab20:	e0d7      	b.n	800acd2 <_malloc_r+0x3b6>
 800ab22:	4a4d      	ldr	r2, [pc, #308]	; (800ac58 <_malloc_r+0x33c>)
 800ab24:	6813      	ldr	r3, [r2, #0]
 800ab26:	18fb      	adds	r3, r7, r3
 800ab28:	6013      	str	r3, [r2, #0]
 800ab2a:	9a04      	ldr	r2, [sp, #16]
 800ab2c:	3a01      	subs	r2, #1
 800ab2e:	42a6      	cmp	r6, r4
 800ab30:	d000      	beq.n	800ab34 <_malloc_r+0x218>
 800ab32:	e097      	b.n	800ac64 <_malloc_r+0x348>
 800ab34:	4216      	tst	r6, r2
 800ab36:	d000      	beq.n	800ab3a <_malloc_r+0x21e>
 800ab38:	e094      	b.n	800ac64 <_malloc_r+0x348>
 800ab3a:	4b42      	ldr	r3, [pc, #264]	; (800ac44 <_malloc_r+0x328>)
 800ab3c:	689a      	ldr	r2, [r3, #8]
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	19df      	adds	r7, r3, r7
 800ab42:	2301      	movs	r3, #1
 800ab44:	433b      	orrs	r3, r7
 800ab46:	6053      	str	r3, [r2, #4]
 800ab48:	4b43      	ldr	r3, [pc, #268]	; (800ac58 <_malloc_r+0x33c>)
 800ab4a:	4a44      	ldr	r2, [pc, #272]	; (800ac5c <_malloc_r+0x340>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6811      	ldr	r1, [r2, #0]
 800ab50:	428b      	cmp	r3, r1
 800ab52:	d900      	bls.n	800ab56 <_malloc_r+0x23a>
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	4a42      	ldr	r2, [pc, #264]	; (800ac60 <_malloc_r+0x344>)
 800ab58:	6811      	ldr	r1, [r2, #0]
 800ab5a:	428b      	cmp	r3, r1
 800ab5c:	d800      	bhi.n	800ab60 <_malloc_r+0x244>
 800ab5e:	e0b8      	b.n	800acd2 <_malloc_r+0x3b6>
 800ab60:	6013      	str	r3, [r2, #0]
 800ab62:	e0b6      	b.n	800acd2 <_malloc_r+0x3b6>
 800ab64:	0a50      	lsrs	r0, r2, #9
 800ab66:	2804      	cmp	r0, #4
 800ab68:	d811      	bhi.n	800ab8e <_malloc_r+0x272>
 800ab6a:	0991      	lsrs	r1, r2, #6
 800ab6c:	3138      	adds	r1, #56	; 0x38
 800ab6e:	00cf      	lsls	r7, r1, #3
 800ab70:	19bf      	adds	r7, r7, r6
 800ab72:	68b8      	ldr	r0, [r7, #8]
 800ab74:	4287      	cmp	r7, r0
 800ab76:	d125      	bne.n	800abc4 <_malloc_r+0x2a8>
 800ab78:	2201      	movs	r2, #1
 800ab7a:	1089      	asrs	r1, r1, #2
 800ab7c:	408a      	lsls	r2, r1
 800ab7e:	4661      	mov	r1, ip
 800ab80:	430a      	orrs	r2, r1
 800ab82:	6072      	str	r2, [r6, #4]
 800ab84:	60e7      	str	r7, [r4, #12]
 800ab86:	60a0      	str	r0, [r4, #8]
 800ab88:	60bc      	str	r4, [r7, #8]
 800ab8a:	60c4      	str	r4, [r0, #12]
 800ab8c:	e76b      	b.n	800aa66 <_malloc_r+0x14a>
 800ab8e:	2814      	cmp	r0, #20
 800ab90:	d802      	bhi.n	800ab98 <_malloc_r+0x27c>
 800ab92:	0001      	movs	r1, r0
 800ab94:	315b      	adds	r1, #91	; 0x5b
 800ab96:	e7ea      	b.n	800ab6e <_malloc_r+0x252>
 800ab98:	2854      	cmp	r0, #84	; 0x54
 800ab9a:	d802      	bhi.n	800aba2 <_malloc_r+0x286>
 800ab9c:	0b11      	lsrs	r1, r2, #12
 800ab9e:	316e      	adds	r1, #110	; 0x6e
 800aba0:	e7e5      	b.n	800ab6e <_malloc_r+0x252>
 800aba2:	21aa      	movs	r1, #170	; 0xaa
 800aba4:	0049      	lsls	r1, r1, #1
 800aba6:	4288      	cmp	r0, r1
 800aba8:	d802      	bhi.n	800abb0 <_malloc_r+0x294>
 800abaa:	0bd1      	lsrs	r1, r2, #15
 800abac:	3177      	adds	r1, #119	; 0x77
 800abae:	e7de      	b.n	800ab6e <_malloc_r+0x252>
 800abb0:	4f26      	ldr	r7, [pc, #152]	; (800ac4c <_malloc_r+0x330>)
 800abb2:	217e      	movs	r1, #126	; 0x7e
 800abb4:	42b8      	cmp	r0, r7
 800abb6:	d8da      	bhi.n	800ab6e <_malloc_r+0x252>
 800abb8:	0c91      	lsrs	r1, r2, #18
 800abba:	317c      	adds	r1, #124	; 0x7c
 800abbc:	e7d7      	b.n	800ab6e <_malloc_r+0x252>
 800abbe:	6880      	ldr	r0, [r0, #8]
 800abc0:	4287      	cmp	r7, r0
 800abc2:	d004      	beq.n	800abce <_malloc_r+0x2b2>
 800abc4:	2603      	movs	r6, #3
 800abc6:	6841      	ldr	r1, [r0, #4]
 800abc8:	43b1      	bics	r1, r6
 800abca:	4291      	cmp	r1, r2
 800abcc:	d8f7      	bhi.n	800abbe <_malloc_r+0x2a2>
 800abce:	68c7      	ldr	r7, [r0, #12]
 800abd0:	e7d8      	b.n	800ab84 <_malloc_r+0x268>
 800abd2:	2603      	movs	r6, #3
 800abd4:	6861      	ldr	r1, [r4, #4]
 800abd6:	43b1      	bics	r1, r6
 800abd8:	9103      	str	r1, [sp, #12]
 800abda:	68e6      	ldr	r6, [r4, #12]
 800abdc:	1b49      	subs	r1, r1, r5
 800abde:	290f      	cmp	r1, #15
 800abe0:	dd10      	ble.n	800ac04 <_malloc_r+0x2e8>
 800abe2:	2201      	movs	r2, #1
 800abe4:	1963      	adds	r3, r4, r5
 800abe6:	4315      	orrs	r5, r2
 800abe8:	6065      	str	r5, [r4, #4]
 800abea:	68a5      	ldr	r5, [r4, #8]
 800abec:	430a      	orrs	r2, r1
 800abee:	60ee      	str	r6, [r5, #12]
 800abf0:	60b5      	str	r5, [r6, #8]
 800abf2:	6143      	str	r3, [r0, #20]
 800abf4:	6103      	str	r3, [r0, #16]
 800abf6:	4814      	ldr	r0, [pc, #80]	; (800ac48 <_malloc_r+0x32c>)
 800abf8:	605a      	str	r2, [r3, #4]
 800abfa:	60d8      	str	r0, [r3, #12]
 800abfc:	6098      	str	r0, [r3, #8]
 800abfe:	9b03      	ldr	r3, [sp, #12]
 800ac00:	50e1      	str	r1, [r4, r3]
 800ac02:	e6eb      	b.n	800a9dc <_malloc_r+0xc0>
 800ac04:	2900      	cmp	r1, #0
 800ac06:	db09      	blt.n	800ac1c <_malloc_r+0x300>
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	18e1      	adds	r1, r4, r3
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	684a      	ldr	r2, [r1, #4]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	604b      	str	r3, [r1, #4]
 800ac14:	68a3      	ldr	r3, [r4, #8]
 800ac16:	60de      	str	r6, [r3, #12]
 800ac18:	60b3      	str	r3, [r6, #8]
 800ac1a:	e6df      	b.n	800a9dc <_malloc_r+0xc0>
 800ac1c:	0034      	movs	r4, r6
 800ac1e:	e739      	b.n	800aa94 <_malloc_r+0x178>
 800ac20:	2108      	movs	r1, #8
 800ac22:	4249      	negs	r1, r1
 800ac24:	448c      	add	ip, r1
 800ac26:	4661      	mov	r1, ip
 800ac28:	6889      	ldr	r1, [r1, #8]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	4561      	cmp	r1, ip
 800ac2e:	d100      	bne.n	800ac32 <_malloc_r+0x316>
 800ac30:	e73a      	b.n	800aaa8 <_malloc_r+0x18c>
 800ac32:	e740      	b.n	800aab6 <_malloc_r+0x19a>
 800ac34:	3304      	adds	r3, #4
 800ac36:	0052      	lsls	r2, r2, #1
 800ac38:	420a      	tst	r2, r1
 800ac3a:	d0fb      	beq.n	800ac34 <_malloc_r+0x318>
 800ac3c:	e724      	b.n	800aa88 <_malloc_r+0x16c>
 800ac3e:	9b02      	ldr	r3, [sp, #8]
 800ac40:	e7fa      	b.n	800ac38 <_malloc_r+0x31c>
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	2000002c 	.word	0x2000002c
 800ac48:	20000034 	.word	0x20000034
 800ac4c:	00000554 	.word	0x00000554
 800ac50:	20000b58 	.word	0x20000b58
 800ac54:	20000434 	.word	0x20000434
 800ac58:	20000b28 	.word	0x20000b28
 800ac5c:	20000b50 	.word	0x20000b50
 800ac60:	20000b54 	.word	0x20000b54
 800ac64:	4934      	ldr	r1, [pc, #208]	; (800ad38 <_malloc_r+0x41c>)
 800ac66:	6808      	ldr	r0, [r1, #0]
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d140      	bne.n	800acee <_malloc_r+0x3d2>
 800ac6c:	600c      	str	r4, [r1, #0]
 800ac6e:	2107      	movs	r1, #7
 800ac70:	0026      	movs	r6, r4
 800ac72:	2300      	movs	r3, #0
 800ac74:	400e      	ands	r6, r1
 800ac76:	420c      	tst	r4, r1
 800ac78:	d002      	beq.n	800ac80 <_malloc_r+0x364>
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	1b9b      	subs	r3, r3, r6
 800ac7e:	18e4      	adds	r4, r4, r3
 800ac80:	19e1      	adds	r1, r4, r7
 800ac82:	9105      	str	r1, [sp, #20]
 800ac84:	9f05      	ldr	r7, [sp, #20]
 800ac86:	9904      	ldr	r1, [sp, #16]
 800ac88:	4017      	ands	r7, r2
 800ac8a:	18cb      	adds	r3, r1, r3
 800ac8c:	1bdf      	subs	r7, r3, r7
 800ac8e:	4017      	ands	r7, r2
 800ac90:	0039      	movs	r1, r7
 800ac92:	9801      	ldr	r0, [sp, #4]
 800ac94:	f001 f948 	bl	800bf28 <_sbrk_r>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d107      	bne.n	800acac <_malloc_r+0x390>
 800ac9c:	1e37      	subs	r7, r6, #0
 800ac9e:	9805      	ldr	r0, [sp, #20]
 800aca0:	d004      	beq.n	800acac <_malloc_r+0x390>
 800aca2:	0030      	movs	r0, r6
 800aca4:	2700      	movs	r7, #0
 800aca6:	9b05      	ldr	r3, [sp, #20]
 800aca8:	3808      	subs	r0, #8
 800acaa:	1818      	adds	r0, r3, r0
 800acac:	4a23      	ldr	r2, [pc, #140]	; (800ad3c <_malloc_r+0x420>)
 800acae:	1b00      	subs	r0, r0, r4
 800acb0:	6813      	ldr	r3, [r2, #0]
 800acb2:	19c0      	adds	r0, r0, r7
 800acb4:	19db      	adds	r3, r3, r7
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	2201      	movs	r2, #1
 800acba:	4b21      	ldr	r3, [pc, #132]	; (800ad40 <_malloc_r+0x424>)
 800acbc:	9902      	ldr	r1, [sp, #8]
 800acbe:	4310      	orrs	r0, r2
 800acc0:	609c      	str	r4, [r3, #8]
 800acc2:	6060      	str	r0, [r4, #4]
 800acc4:	4299      	cmp	r1, r3
 800acc6:	d100      	bne.n	800acca <_malloc_r+0x3ae>
 800acc8:	e73e      	b.n	800ab48 <_malloc_r+0x22c>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	2b0f      	cmp	r3, #15
 800acce:	d813      	bhi.n	800acf8 <_malloc_r+0x3dc>
 800acd0:	6062      	str	r2, [r4, #4]
 800acd2:	2203      	movs	r2, #3
 800acd4:	4b1a      	ldr	r3, [pc, #104]	; (800ad40 <_malloc_r+0x424>)
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	4393      	bics	r3, r2
 800acdc:	1b59      	subs	r1, r3, r5
 800acde:	42ab      	cmp	r3, r5
 800ace0:	d301      	bcc.n	800ace6 <_malloc_r+0x3ca>
 800ace2:	290f      	cmp	r1, #15
 800ace4:	dc1f      	bgt.n	800ad26 <_malloc_r+0x40a>
 800ace6:	9801      	ldr	r0, [sp, #4]
 800ace8:	f000 f834 	bl	800ad54 <__malloc_unlock>
 800acec:	e623      	b.n	800a936 <_malloc_r+0x1a>
 800acee:	4913      	ldr	r1, [pc, #76]	; (800ad3c <_malloc_r+0x420>)
 800acf0:	1ba6      	subs	r6, r4, r6
 800acf2:	18f6      	adds	r6, r6, r3
 800acf4:	600e      	str	r6, [r1, #0]
 800acf6:	e7ba      	b.n	800ac6e <_malloc_r+0x352>
 800acf8:	2107      	movs	r1, #7
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	3b0c      	subs	r3, #12
 800acfe:	438b      	bics	r3, r1
 800ad00:	9902      	ldr	r1, [sp, #8]
 800ad02:	6849      	ldr	r1, [r1, #4]
 800ad04:	400a      	ands	r2, r1
 800ad06:	9902      	ldr	r1, [sp, #8]
 800ad08:	431a      	orrs	r2, r3
 800ad0a:	604a      	str	r2, [r1, #4]
 800ad0c:	18ca      	adds	r2, r1, r3
 800ad0e:	2105      	movs	r1, #5
 800ad10:	6051      	str	r1, [r2, #4]
 800ad12:	6091      	str	r1, [r2, #8]
 800ad14:	2b0f      	cmp	r3, #15
 800ad16:	d800      	bhi.n	800ad1a <_malloc_r+0x3fe>
 800ad18:	e716      	b.n	800ab48 <_malloc_r+0x22c>
 800ad1a:	9902      	ldr	r1, [sp, #8]
 800ad1c:	9801      	ldr	r0, [sp, #4]
 800ad1e:	3108      	adds	r1, #8
 800ad20:	f001 f9dc 	bl	800c0dc <_free_r>
 800ad24:	e710      	b.n	800ab48 <_malloc_r+0x22c>
 800ad26:	2201      	movs	r2, #1
 800ad28:	0013      	movs	r3, r2
 800ad2a:	4805      	ldr	r0, [pc, #20]	; (800ad40 <_malloc_r+0x424>)
 800ad2c:	432b      	orrs	r3, r5
 800ad2e:	6884      	ldr	r4, [r0, #8]
 800ad30:	6063      	str	r3, [r4, #4]
 800ad32:	1963      	adds	r3, r4, r5
 800ad34:	6083      	str	r3, [r0, #8]
 800ad36:	e623      	b.n	800a980 <_malloc_r+0x64>
 800ad38:	20000434 	.word	0x20000434
 800ad3c:	20000b28 	.word	0x20000b28
 800ad40:	2000002c 	.word	0x2000002c

0800ad44 <__malloc_lock>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	4802      	ldr	r0, [pc, #8]	; (800ad50 <__malloc_lock+0xc>)
 800ad48:	f001 f940 	bl	800bfcc <__retarget_lock_acquire_recursive>
 800ad4c:	bd10      	pop	{r4, pc}
 800ad4e:	46c0      	nop			; (mov r8, r8)
 800ad50:	20000c9d 	.word	0x20000c9d

0800ad54 <__malloc_unlock>:
 800ad54:	b510      	push	{r4, lr}
 800ad56:	4802      	ldr	r0, [pc, #8]	; (800ad60 <__malloc_unlock+0xc>)
 800ad58:	f001 f939 	bl	800bfce <__retarget_lock_release_recursive>
 800ad5c:	bd10      	pop	{r4, pc}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	20000c9d 	.word	0x20000c9d

0800ad64 <sulp>:
 800ad64:	b570      	push	{r4, r5, r6, lr}
 800ad66:	0016      	movs	r6, r2
 800ad68:	000d      	movs	r5, r1
 800ad6a:	f002 f90d 	bl	800cf88 <__ulp>
 800ad6e:	2e00      	cmp	r6, #0
 800ad70:	d00d      	beq.n	800ad8e <sulp+0x2a>
 800ad72:	236b      	movs	r3, #107	; 0x6b
 800ad74:	006a      	lsls	r2, r5, #1
 800ad76:	0d52      	lsrs	r2, r2, #21
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	dd07      	ble.n	800ad8e <sulp+0x2a>
 800ad7e:	2400      	movs	r4, #0
 800ad80:	4a03      	ldr	r2, [pc, #12]	; (800ad90 <sulp+0x2c>)
 800ad82:	051b      	lsls	r3, r3, #20
 800ad84:	189d      	adds	r5, r3, r2
 800ad86:	002b      	movs	r3, r5
 800ad88:	0022      	movs	r2, r4
 800ad8a:	f7f6 fc6f 	bl	800166c <__aeabi_dmul>
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	3ff00000 	.word	0x3ff00000

0800ad94 <_strtod_l>:
 800ad94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad96:	b0a1      	sub	sp, #132	; 0x84
 800ad98:	9219      	str	r2, [sp, #100]	; 0x64
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2600      	movs	r6, #0
 800ad9e:	2700      	movs	r7, #0
 800ada0:	9004      	str	r0, [sp, #16]
 800ada2:	9107      	str	r1, [sp, #28]
 800ada4:	921c      	str	r2, [sp, #112]	; 0x70
 800ada6:	911b      	str	r1, [sp, #108]	; 0x6c
 800ada8:	780a      	ldrb	r2, [r1, #0]
 800adaa:	2a2b      	cmp	r2, #43	; 0x2b
 800adac:	d055      	beq.n	800ae5a <_strtod_l+0xc6>
 800adae:	d841      	bhi.n	800ae34 <_strtod_l+0xa0>
 800adb0:	2a0d      	cmp	r2, #13
 800adb2:	d83b      	bhi.n	800ae2c <_strtod_l+0x98>
 800adb4:	2a08      	cmp	r2, #8
 800adb6:	d83b      	bhi.n	800ae30 <_strtod_l+0x9c>
 800adb8:	2a00      	cmp	r2, #0
 800adba:	d044      	beq.n	800ae46 <_strtod_l+0xb2>
 800adbc:	2200      	movs	r2, #0
 800adbe:	920f      	str	r2, [sp, #60]	; 0x3c
 800adc0:	2100      	movs	r1, #0
 800adc2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800adc4:	9109      	str	r1, [sp, #36]	; 0x24
 800adc6:	782a      	ldrb	r2, [r5, #0]
 800adc8:	2a30      	cmp	r2, #48	; 0x30
 800adca:	d000      	beq.n	800adce <_strtod_l+0x3a>
 800adcc:	e085      	b.n	800aeda <_strtod_l+0x146>
 800adce:	786a      	ldrb	r2, [r5, #1]
 800add0:	3120      	adds	r1, #32
 800add2:	438a      	bics	r2, r1
 800add4:	2a58      	cmp	r2, #88	; 0x58
 800add6:	d000      	beq.n	800adda <_strtod_l+0x46>
 800add8:	e075      	b.n	800aec6 <_strtod_l+0x132>
 800adda:	9302      	str	r3, [sp, #8]
 800addc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adde:	4a97      	ldr	r2, [pc, #604]	; (800b03c <_strtod_l+0x2a8>)
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	ab1c      	add	r3, sp, #112	; 0x70
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	9804      	ldr	r0, [sp, #16]
 800ade8:	ab1d      	add	r3, sp, #116	; 0x74
 800adea:	a91b      	add	r1, sp, #108	; 0x6c
 800adec:	f001 fa92 	bl	800c314 <__gethex>
 800adf0:	230f      	movs	r3, #15
 800adf2:	0002      	movs	r2, r0
 800adf4:	401a      	ands	r2, r3
 800adf6:	0004      	movs	r4, r0
 800adf8:	9205      	str	r2, [sp, #20]
 800adfa:	4218      	tst	r0, r3
 800adfc:	d005      	beq.n	800ae0a <_strtod_l+0x76>
 800adfe:	2a06      	cmp	r2, #6
 800ae00:	d12d      	bne.n	800ae5e <_strtod_l+0xca>
 800ae02:	1c6b      	adds	r3, r5, #1
 800ae04:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae06:	2300      	movs	r3, #0
 800ae08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d002      	beq.n	800ae16 <_strtod_l+0x82>
 800ae10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d01b      	beq.n	800ae54 <_strtod_l+0xc0>
 800ae1c:	2380      	movs	r3, #128	; 0x80
 800ae1e:	0032      	movs	r2, r6
 800ae20:	061b      	lsls	r3, r3, #24
 800ae22:	18fb      	adds	r3, r7, r3
 800ae24:	0010      	movs	r0, r2
 800ae26:	0019      	movs	r1, r3
 800ae28:	b021      	add	sp, #132	; 0x84
 800ae2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae2c:	2a20      	cmp	r2, #32
 800ae2e:	d1c5      	bne.n	800adbc <_strtod_l+0x28>
 800ae30:	3101      	adds	r1, #1
 800ae32:	e7b8      	b.n	800ada6 <_strtod_l+0x12>
 800ae34:	2a2d      	cmp	r2, #45	; 0x2d
 800ae36:	d1c1      	bne.n	800adbc <_strtod_l+0x28>
 800ae38:	3a2c      	subs	r2, #44	; 0x2c
 800ae3a:	920f      	str	r2, [sp, #60]	; 0x3c
 800ae3c:	1c4a      	adds	r2, r1, #1
 800ae3e:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae40:	784a      	ldrb	r2, [r1, #1]
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d1bc      	bne.n	800adc0 <_strtod_l+0x2c>
 800ae46:	9b07      	ldr	r3, [sp, #28]
 800ae48:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1dd      	bne.n	800ae10 <_strtod_l+0x7c>
 800ae54:	0032      	movs	r2, r6
 800ae56:	003b      	movs	r3, r7
 800ae58:	e7e4      	b.n	800ae24 <_strtod_l+0x90>
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	e7ed      	b.n	800ae3a <_strtod_l+0xa6>
 800ae5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ae60:	2a00      	cmp	r2, #0
 800ae62:	d007      	beq.n	800ae74 <_strtod_l+0xe0>
 800ae64:	2135      	movs	r1, #53	; 0x35
 800ae66:	a81e      	add	r0, sp, #120	; 0x78
 800ae68:	f002 f97f 	bl	800d16a <__copybits>
 800ae6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae6e:	9804      	ldr	r0, [sp, #16]
 800ae70:	f001 fd7c 	bl	800c96c <_Bfree>
 800ae74:	9805      	ldr	r0, [sp, #20]
 800ae76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae78:	3801      	subs	r0, #1
 800ae7a:	2804      	cmp	r0, #4
 800ae7c:	d806      	bhi.n	800ae8c <_strtod_l+0xf8>
 800ae7e:	f7f5 f949 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ae82:	0312      	.short	0x0312
 800ae84:	1e1c      	.short	0x1e1c
 800ae86:	12          	.byte	0x12
 800ae87:	00          	.byte	0x00
 800ae88:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ae8a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800ae8c:	05e4      	lsls	r4, r4, #23
 800ae8e:	d502      	bpl.n	800ae96 <_strtod_l+0x102>
 800ae90:	2380      	movs	r3, #128	; 0x80
 800ae92:	061b      	lsls	r3, r3, #24
 800ae94:	431f      	orrs	r7, r3
 800ae96:	4b6a      	ldr	r3, [pc, #424]	; (800b040 <_strtod_l+0x2ac>)
 800ae98:	423b      	tst	r3, r7
 800ae9a:	d1b6      	bne.n	800ae0a <_strtod_l+0x76>
 800ae9c:	f001 f86a 	bl	800bf74 <__errno>
 800aea0:	2322      	movs	r3, #34	; 0x22
 800aea2:	6003      	str	r3, [r0, #0]
 800aea4:	e7b1      	b.n	800ae0a <_strtod_l+0x76>
 800aea6:	4967      	ldr	r1, [pc, #412]	; (800b044 <_strtod_l+0x2b0>)
 800aea8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aeaa:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aeac:	400a      	ands	r2, r1
 800aeae:	4966      	ldr	r1, [pc, #408]	; (800b048 <_strtod_l+0x2b4>)
 800aeb0:	185b      	adds	r3, r3, r1
 800aeb2:	051b      	lsls	r3, r3, #20
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	0017      	movs	r7, r2
 800aeb8:	e7e8      	b.n	800ae8c <_strtod_l+0xf8>
 800aeba:	4f61      	ldr	r7, [pc, #388]	; (800b040 <_strtod_l+0x2ac>)
 800aebc:	e7e6      	b.n	800ae8c <_strtod_l+0xf8>
 800aebe:	2601      	movs	r6, #1
 800aec0:	4f62      	ldr	r7, [pc, #392]	; (800b04c <_strtod_l+0x2b8>)
 800aec2:	4276      	negs	r6, r6
 800aec4:	e7e2      	b.n	800ae8c <_strtod_l+0xf8>
 800aec6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	921b      	str	r2, [sp, #108]	; 0x6c
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	2b30      	cmp	r3, #48	; 0x30
 800aed0:	d0f9      	beq.n	800aec6 <_strtod_l+0x132>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d099      	beq.n	800ae0a <_strtod_l+0x76>
 800aed6:	2301      	movs	r3, #1
 800aed8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeda:	2500      	movs	r5, #0
 800aedc:	220a      	movs	r2, #10
 800aede:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aee0:	950d      	str	r5, [sp, #52]	; 0x34
 800aee2:	9310      	str	r3, [sp, #64]	; 0x40
 800aee4:	9508      	str	r5, [sp, #32]
 800aee6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800aee8:	7804      	ldrb	r4, [r0, #0]
 800aeea:	0023      	movs	r3, r4
 800aeec:	3b30      	subs	r3, #48	; 0x30
 800aeee:	b2d9      	uxtb	r1, r3
 800aef0:	2909      	cmp	r1, #9
 800aef2:	d927      	bls.n	800af44 <_strtod_l+0x1b0>
 800aef4:	2201      	movs	r2, #1
 800aef6:	4956      	ldr	r1, [pc, #344]	; (800b050 <_strtod_l+0x2bc>)
 800aef8:	f000 ff98 	bl	800be2c <strncmp>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d031      	beq.n	800af64 <_strtod_l+0x1d0>
 800af00:	2000      	movs	r0, #0
 800af02:	0023      	movs	r3, r4
 800af04:	4684      	mov	ip, r0
 800af06:	9a08      	ldr	r2, [sp, #32]
 800af08:	900c      	str	r0, [sp, #48]	; 0x30
 800af0a:	9205      	str	r2, [sp, #20]
 800af0c:	2220      	movs	r2, #32
 800af0e:	0019      	movs	r1, r3
 800af10:	4391      	bics	r1, r2
 800af12:	000a      	movs	r2, r1
 800af14:	2100      	movs	r1, #0
 800af16:	9106      	str	r1, [sp, #24]
 800af18:	2a45      	cmp	r2, #69	; 0x45
 800af1a:	d000      	beq.n	800af1e <_strtod_l+0x18a>
 800af1c:	e0c2      	b.n	800b0a4 <_strtod_l+0x310>
 800af1e:	9b05      	ldr	r3, [sp, #20]
 800af20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af22:	4303      	orrs	r3, r0
 800af24:	4313      	orrs	r3, r2
 800af26:	428b      	cmp	r3, r1
 800af28:	d08d      	beq.n	800ae46 <_strtod_l+0xb2>
 800af2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af2c:	9307      	str	r3, [sp, #28]
 800af2e:	3301      	adds	r3, #1
 800af30:	931b      	str	r3, [sp, #108]	; 0x6c
 800af32:	9b07      	ldr	r3, [sp, #28]
 800af34:	785b      	ldrb	r3, [r3, #1]
 800af36:	2b2b      	cmp	r3, #43	; 0x2b
 800af38:	d071      	beq.n	800b01e <_strtod_l+0x28a>
 800af3a:	000c      	movs	r4, r1
 800af3c:	2b2d      	cmp	r3, #45	; 0x2d
 800af3e:	d174      	bne.n	800b02a <_strtod_l+0x296>
 800af40:	2401      	movs	r4, #1
 800af42:	e06d      	b.n	800b020 <_strtod_l+0x28c>
 800af44:	9908      	ldr	r1, [sp, #32]
 800af46:	2908      	cmp	r1, #8
 800af48:	dc09      	bgt.n	800af5e <_strtod_l+0x1ca>
 800af4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800af4c:	4351      	muls	r1, r2
 800af4e:	185b      	adds	r3, r3, r1
 800af50:	930d      	str	r3, [sp, #52]	; 0x34
 800af52:	9b08      	ldr	r3, [sp, #32]
 800af54:	3001      	adds	r0, #1
 800af56:	3301      	adds	r3, #1
 800af58:	9308      	str	r3, [sp, #32]
 800af5a:	901b      	str	r0, [sp, #108]	; 0x6c
 800af5c:	e7c3      	b.n	800aee6 <_strtod_l+0x152>
 800af5e:	4355      	muls	r5, r2
 800af60:	195d      	adds	r5, r3, r5
 800af62:	e7f6      	b.n	800af52 <_strtod_l+0x1be>
 800af64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	921b      	str	r2, [sp, #108]	; 0x6c
 800af6a:	9a08      	ldr	r2, [sp, #32]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2a00      	cmp	r2, #0
 800af70:	d03a      	beq.n	800afe8 <_strtod_l+0x254>
 800af72:	900c      	str	r0, [sp, #48]	; 0x30
 800af74:	9205      	str	r2, [sp, #20]
 800af76:	001a      	movs	r2, r3
 800af78:	3a30      	subs	r2, #48	; 0x30
 800af7a:	2a09      	cmp	r2, #9
 800af7c:	d912      	bls.n	800afa4 <_strtod_l+0x210>
 800af7e:	2201      	movs	r2, #1
 800af80:	4694      	mov	ip, r2
 800af82:	e7c3      	b.n	800af0c <_strtod_l+0x178>
 800af84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af86:	3001      	adds	r0, #1
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	921b      	str	r2, [sp, #108]	; 0x6c
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b30      	cmp	r3, #48	; 0x30
 800af90:	d0f8      	beq.n	800af84 <_strtod_l+0x1f0>
 800af92:	001a      	movs	r2, r3
 800af94:	3a31      	subs	r2, #49	; 0x31
 800af96:	2a08      	cmp	r2, #8
 800af98:	d83c      	bhi.n	800b014 <_strtod_l+0x280>
 800af9a:	900c      	str	r0, [sp, #48]	; 0x30
 800af9c:	2000      	movs	r0, #0
 800af9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800afa0:	9005      	str	r0, [sp, #20]
 800afa2:	9210      	str	r2, [sp, #64]	; 0x40
 800afa4:	001a      	movs	r2, r3
 800afa6:	1c41      	adds	r1, r0, #1
 800afa8:	3a30      	subs	r2, #48	; 0x30
 800afaa:	2b30      	cmp	r3, #48	; 0x30
 800afac:	d016      	beq.n	800afdc <_strtod_l+0x248>
 800afae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afb0:	185b      	adds	r3, r3, r1
 800afb2:	930c      	str	r3, [sp, #48]	; 0x30
 800afb4:	9b05      	ldr	r3, [sp, #20]
 800afb6:	210a      	movs	r1, #10
 800afb8:	469c      	mov	ip, r3
 800afba:	4484      	add	ip, r0
 800afbc:	4563      	cmp	r3, ip
 800afbe:	d115      	bne.n	800afec <_strtod_l+0x258>
 800afc0:	9905      	ldr	r1, [sp, #20]
 800afc2:	9b05      	ldr	r3, [sp, #20]
 800afc4:	3101      	adds	r1, #1
 800afc6:	1809      	adds	r1, r1, r0
 800afc8:	181b      	adds	r3, r3, r0
 800afca:	9105      	str	r1, [sp, #20]
 800afcc:	2b08      	cmp	r3, #8
 800afce:	dc19      	bgt.n	800b004 <_strtod_l+0x270>
 800afd0:	230a      	movs	r3, #10
 800afd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800afd4:	434b      	muls	r3, r1
 800afd6:	2100      	movs	r1, #0
 800afd8:	18d3      	adds	r3, r2, r3
 800afda:	930d      	str	r3, [sp, #52]	; 0x34
 800afdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afde:	0008      	movs	r0, r1
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	921b      	str	r2, [sp, #108]	; 0x6c
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	e7c6      	b.n	800af76 <_strtod_l+0x1e2>
 800afe8:	9808      	ldr	r0, [sp, #32]
 800afea:	e7d0      	b.n	800af8e <_strtod_l+0x1fa>
 800afec:	1c5c      	adds	r4, r3, #1
 800afee:	2b08      	cmp	r3, #8
 800aff0:	dc04      	bgt.n	800affc <_strtod_l+0x268>
 800aff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aff4:	434b      	muls	r3, r1
 800aff6:	930d      	str	r3, [sp, #52]	; 0x34
 800aff8:	0023      	movs	r3, r4
 800affa:	e7df      	b.n	800afbc <_strtod_l+0x228>
 800affc:	2c10      	cmp	r4, #16
 800affe:	dcfb      	bgt.n	800aff8 <_strtod_l+0x264>
 800b000:	434d      	muls	r5, r1
 800b002:	e7f9      	b.n	800aff8 <_strtod_l+0x264>
 800b004:	9b05      	ldr	r3, [sp, #20]
 800b006:	2100      	movs	r1, #0
 800b008:	2b10      	cmp	r3, #16
 800b00a:	dce7      	bgt.n	800afdc <_strtod_l+0x248>
 800b00c:	230a      	movs	r3, #10
 800b00e:	435d      	muls	r5, r3
 800b010:	1955      	adds	r5, r2, r5
 800b012:	e7e3      	b.n	800afdc <_strtod_l+0x248>
 800b014:	2200      	movs	r2, #0
 800b016:	920c      	str	r2, [sp, #48]	; 0x30
 800b018:	9205      	str	r2, [sp, #20]
 800b01a:	3201      	adds	r2, #1
 800b01c:	e7b0      	b.n	800af80 <_strtod_l+0x1ec>
 800b01e:	2400      	movs	r4, #0
 800b020:	9b07      	ldr	r3, [sp, #28]
 800b022:	3302      	adds	r3, #2
 800b024:	931b      	str	r3, [sp, #108]	; 0x6c
 800b026:	9b07      	ldr	r3, [sp, #28]
 800b028:	789b      	ldrb	r3, [r3, #2]
 800b02a:	001a      	movs	r2, r3
 800b02c:	3a30      	subs	r2, #48	; 0x30
 800b02e:	2a09      	cmp	r2, #9
 800b030:	d914      	bls.n	800b05c <_strtod_l+0x2c8>
 800b032:	9a07      	ldr	r2, [sp, #28]
 800b034:	921b      	str	r2, [sp, #108]	; 0x6c
 800b036:	2200      	movs	r2, #0
 800b038:	e033      	b.n	800b0a2 <_strtod_l+0x30e>
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	08014324 	.word	0x08014324
 800b040:	7ff00000 	.word	0x7ff00000
 800b044:	ffefffff 	.word	0xffefffff
 800b048:	00000433 	.word	0x00000433
 800b04c:	7fffffff 	.word	0x7fffffff
 800b050:	08014320 	.word	0x08014320
 800b054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	921b      	str	r2, [sp, #108]	; 0x6c
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b30      	cmp	r3, #48	; 0x30
 800b05e:	d0f9      	beq.n	800b054 <_strtod_l+0x2c0>
 800b060:	2200      	movs	r2, #0
 800b062:	9206      	str	r2, [sp, #24]
 800b064:	001a      	movs	r2, r3
 800b066:	3a31      	subs	r2, #49	; 0x31
 800b068:	2a08      	cmp	r2, #8
 800b06a:	d81b      	bhi.n	800b0a4 <_strtod_l+0x310>
 800b06c:	3b30      	subs	r3, #48	; 0x30
 800b06e:	930e      	str	r3, [sp, #56]	; 0x38
 800b070:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b072:	9306      	str	r3, [sp, #24]
 800b074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b076:	1c59      	adds	r1, r3, #1
 800b078:	911b      	str	r1, [sp, #108]	; 0x6c
 800b07a:	785b      	ldrb	r3, [r3, #1]
 800b07c:	001a      	movs	r2, r3
 800b07e:	3a30      	subs	r2, #48	; 0x30
 800b080:	2a09      	cmp	r2, #9
 800b082:	d93a      	bls.n	800b0fa <_strtod_l+0x366>
 800b084:	9a06      	ldr	r2, [sp, #24]
 800b086:	1a8a      	subs	r2, r1, r2
 800b088:	49b2      	ldr	r1, [pc, #712]	; (800b354 <_strtod_l+0x5c0>)
 800b08a:	9106      	str	r1, [sp, #24]
 800b08c:	2a08      	cmp	r2, #8
 800b08e:	dc04      	bgt.n	800b09a <_strtod_l+0x306>
 800b090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b092:	9206      	str	r2, [sp, #24]
 800b094:	428a      	cmp	r2, r1
 800b096:	dd00      	ble.n	800b09a <_strtod_l+0x306>
 800b098:	9106      	str	r1, [sp, #24]
 800b09a:	2c00      	cmp	r4, #0
 800b09c:	d002      	beq.n	800b0a4 <_strtod_l+0x310>
 800b09e:	9a06      	ldr	r2, [sp, #24]
 800b0a0:	4252      	negs	r2, r2
 800b0a2:	9206      	str	r2, [sp, #24]
 800b0a4:	9a05      	ldr	r2, [sp, #20]
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	d14d      	bne.n	800b146 <_strtod_l+0x3b2>
 800b0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ac:	4310      	orrs	r0, r2
 800b0ae:	d000      	beq.n	800b0b2 <_strtod_l+0x31e>
 800b0b0:	e6ab      	b.n	800ae0a <_strtod_l+0x76>
 800b0b2:	4662      	mov	r2, ip
 800b0b4:	2a00      	cmp	r2, #0
 800b0b6:	d000      	beq.n	800b0ba <_strtod_l+0x326>
 800b0b8:	e6c5      	b.n	800ae46 <_strtod_l+0xb2>
 800b0ba:	2b69      	cmp	r3, #105	; 0x69
 800b0bc:	d027      	beq.n	800b10e <_strtod_l+0x37a>
 800b0be:	dc23      	bgt.n	800b108 <_strtod_l+0x374>
 800b0c0:	2b49      	cmp	r3, #73	; 0x49
 800b0c2:	d024      	beq.n	800b10e <_strtod_l+0x37a>
 800b0c4:	2b4e      	cmp	r3, #78	; 0x4e
 800b0c6:	d000      	beq.n	800b0ca <_strtod_l+0x336>
 800b0c8:	e6bd      	b.n	800ae46 <_strtod_l+0xb2>
 800b0ca:	49a3      	ldr	r1, [pc, #652]	; (800b358 <_strtod_l+0x5c4>)
 800b0cc:	a81b      	add	r0, sp, #108	; 0x6c
 800b0ce:	f001 fb57 	bl	800c780 <__match>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d100      	bne.n	800b0d8 <_strtod_l+0x344>
 800b0d6:	e6b6      	b.n	800ae46 <_strtod_l+0xb2>
 800b0d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2b28      	cmp	r3, #40	; 0x28
 800b0de:	d12c      	bne.n	800b13a <_strtod_l+0x3a6>
 800b0e0:	499e      	ldr	r1, [pc, #632]	; (800b35c <_strtod_l+0x5c8>)
 800b0e2:	aa1e      	add	r2, sp, #120	; 0x78
 800b0e4:	a81b      	add	r0, sp, #108	; 0x6c
 800b0e6:	f001 fb5f 	bl	800c7a8 <__hexnan>
 800b0ea:	2805      	cmp	r0, #5
 800b0ec:	d125      	bne.n	800b13a <_strtod_l+0x3a6>
 800b0ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b0f0:	4a9b      	ldr	r2, [pc, #620]	; (800b360 <_strtod_l+0x5cc>)
 800b0f2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	0017      	movs	r7, r2
 800b0f8:	e687      	b.n	800ae0a <_strtod_l+0x76>
 800b0fa:	220a      	movs	r2, #10
 800b0fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b0fe:	434a      	muls	r2, r1
 800b100:	18d2      	adds	r2, r2, r3
 800b102:	3a30      	subs	r2, #48	; 0x30
 800b104:	920e      	str	r2, [sp, #56]	; 0x38
 800b106:	e7b5      	b.n	800b074 <_strtod_l+0x2e0>
 800b108:	2b6e      	cmp	r3, #110	; 0x6e
 800b10a:	d0de      	beq.n	800b0ca <_strtod_l+0x336>
 800b10c:	e69b      	b.n	800ae46 <_strtod_l+0xb2>
 800b10e:	4995      	ldr	r1, [pc, #596]	; (800b364 <_strtod_l+0x5d0>)
 800b110:	a81b      	add	r0, sp, #108	; 0x6c
 800b112:	f001 fb35 	bl	800c780 <__match>
 800b116:	2800      	cmp	r0, #0
 800b118:	d100      	bne.n	800b11c <_strtod_l+0x388>
 800b11a:	e694      	b.n	800ae46 <_strtod_l+0xb2>
 800b11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b11e:	4992      	ldr	r1, [pc, #584]	; (800b368 <_strtod_l+0x5d4>)
 800b120:	3b01      	subs	r3, #1
 800b122:	a81b      	add	r0, sp, #108	; 0x6c
 800b124:	931b      	str	r3, [sp, #108]	; 0x6c
 800b126:	f001 fb2b 	bl	800c780 <__match>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d102      	bne.n	800b134 <_strtod_l+0x3a0>
 800b12e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b130:	3301      	adds	r3, #1
 800b132:	931b      	str	r3, [sp, #108]	; 0x6c
 800b134:	2600      	movs	r6, #0
 800b136:	4f8a      	ldr	r7, [pc, #552]	; (800b360 <_strtod_l+0x5cc>)
 800b138:	e667      	b.n	800ae0a <_strtod_l+0x76>
 800b13a:	488c      	ldr	r0, [pc, #560]	; (800b36c <_strtod_l+0x5d8>)
 800b13c:	f000 ff5c 	bl	800bff8 <nan>
 800b140:	0006      	movs	r6, r0
 800b142:	000f      	movs	r7, r1
 800b144:	e661      	b.n	800ae0a <_strtod_l+0x76>
 800b146:	9b06      	ldr	r3, [sp, #24]
 800b148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b14a:	1a9b      	subs	r3, r3, r2
 800b14c:	9309      	str	r3, [sp, #36]	; 0x24
 800b14e:	9b08      	ldr	r3, [sp, #32]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d101      	bne.n	800b158 <_strtod_l+0x3c4>
 800b154:	9b05      	ldr	r3, [sp, #20]
 800b156:	9308      	str	r3, [sp, #32]
 800b158:	9c05      	ldr	r4, [sp, #20]
 800b15a:	2c10      	cmp	r4, #16
 800b15c:	dd00      	ble.n	800b160 <_strtod_l+0x3cc>
 800b15e:	2410      	movs	r4, #16
 800b160:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b162:	f7f7 f94b 	bl	80023fc <__aeabi_ui2d>
 800b166:	9b05      	ldr	r3, [sp, #20]
 800b168:	0006      	movs	r6, r0
 800b16a:	000f      	movs	r7, r1
 800b16c:	2b09      	cmp	r3, #9
 800b16e:	dd15      	ble.n	800b19c <_strtod_l+0x408>
 800b170:	0022      	movs	r2, r4
 800b172:	4b7f      	ldr	r3, [pc, #508]	; (800b370 <_strtod_l+0x5dc>)
 800b174:	3a09      	subs	r2, #9
 800b176:	00d2      	lsls	r2, r2, #3
 800b178:	189b      	adds	r3, r3, r2
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f7f6 fa75 	bl	800166c <__aeabi_dmul>
 800b182:	0006      	movs	r6, r0
 800b184:	0028      	movs	r0, r5
 800b186:	000f      	movs	r7, r1
 800b188:	f7f7 f938 	bl	80023fc <__aeabi_ui2d>
 800b18c:	0002      	movs	r2, r0
 800b18e:	000b      	movs	r3, r1
 800b190:	0030      	movs	r0, r6
 800b192:	0039      	movs	r1, r7
 800b194:	f7f5 fb10 	bl	80007b8 <__aeabi_dadd>
 800b198:	0006      	movs	r6, r0
 800b19a:	000f      	movs	r7, r1
 800b19c:	9b05      	ldr	r3, [sp, #20]
 800b19e:	2b0f      	cmp	r3, #15
 800b1a0:	dc39      	bgt.n	800b216 <_strtod_l+0x482>
 800b1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d100      	bne.n	800b1aa <_strtod_l+0x416>
 800b1a8:	e62f      	b.n	800ae0a <_strtod_l+0x76>
 800b1aa:	dd24      	ble.n	800b1f6 <_strtod_l+0x462>
 800b1ac:	2b16      	cmp	r3, #22
 800b1ae:	dc09      	bgt.n	800b1c4 <_strtod_l+0x430>
 800b1b0:	496f      	ldr	r1, [pc, #444]	; (800b370 <_strtod_l+0x5dc>)
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	18c9      	adds	r1, r1, r3
 800b1b6:	0032      	movs	r2, r6
 800b1b8:	6808      	ldr	r0, [r1, #0]
 800b1ba:	6849      	ldr	r1, [r1, #4]
 800b1bc:	003b      	movs	r3, r7
 800b1be:	f7f6 fa55 	bl	800166c <__aeabi_dmul>
 800b1c2:	e7bd      	b.n	800b140 <_strtod_l+0x3ac>
 800b1c4:	2325      	movs	r3, #37	; 0x25
 800b1c6:	9a05      	ldr	r2, [sp, #20]
 800b1c8:	1a9b      	subs	r3, r3, r2
 800b1ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	db22      	blt.n	800b216 <_strtod_l+0x482>
 800b1d0:	240f      	movs	r4, #15
 800b1d2:	9b05      	ldr	r3, [sp, #20]
 800b1d4:	4d66      	ldr	r5, [pc, #408]	; (800b370 <_strtod_l+0x5dc>)
 800b1d6:	1ae4      	subs	r4, r4, r3
 800b1d8:	00e1      	lsls	r1, r4, #3
 800b1da:	1869      	adds	r1, r5, r1
 800b1dc:	0032      	movs	r2, r6
 800b1de:	6808      	ldr	r0, [r1, #0]
 800b1e0:	6849      	ldr	r1, [r1, #4]
 800b1e2:	003b      	movs	r3, r7
 800b1e4:	f7f6 fa42 	bl	800166c <__aeabi_dmul>
 800b1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ea:	1b1c      	subs	r4, r3, r4
 800b1ec:	00e4      	lsls	r4, r4, #3
 800b1ee:	192d      	adds	r5, r5, r4
 800b1f0:	682a      	ldr	r2, [r5, #0]
 800b1f2:	686b      	ldr	r3, [r5, #4]
 800b1f4:	e7e3      	b.n	800b1be <_strtod_l+0x42a>
 800b1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f8:	3316      	adds	r3, #22
 800b1fa:	db0c      	blt.n	800b216 <_strtod_l+0x482>
 800b1fc:	9906      	ldr	r1, [sp, #24]
 800b1fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b200:	4b5b      	ldr	r3, [pc, #364]	; (800b370 <_strtod_l+0x5dc>)
 800b202:	1a52      	subs	r2, r2, r1
 800b204:	00d2      	lsls	r2, r2, #3
 800b206:	189b      	adds	r3, r3, r2
 800b208:	0030      	movs	r0, r6
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	0039      	movs	r1, r7
 800b210:	f7f5 fe32 	bl	8000e78 <__aeabi_ddiv>
 800b214:	e794      	b.n	800b140 <_strtod_l+0x3ac>
 800b216:	9b05      	ldr	r3, [sp, #20]
 800b218:	1b1c      	subs	r4, r3, r4
 800b21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b21c:	18e4      	adds	r4, r4, r3
 800b21e:	2c00      	cmp	r4, #0
 800b220:	dd72      	ble.n	800b308 <_strtod_l+0x574>
 800b222:	220f      	movs	r2, #15
 800b224:	0023      	movs	r3, r4
 800b226:	4013      	ands	r3, r2
 800b228:	4214      	tst	r4, r2
 800b22a:	d00a      	beq.n	800b242 <_strtod_l+0x4ae>
 800b22c:	4950      	ldr	r1, [pc, #320]	; (800b370 <_strtod_l+0x5dc>)
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	18c9      	adds	r1, r1, r3
 800b232:	0032      	movs	r2, r6
 800b234:	6808      	ldr	r0, [r1, #0]
 800b236:	6849      	ldr	r1, [r1, #4]
 800b238:	003b      	movs	r3, r7
 800b23a:	f7f6 fa17 	bl	800166c <__aeabi_dmul>
 800b23e:	0006      	movs	r6, r0
 800b240:	000f      	movs	r7, r1
 800b242:	230f      	movs	r3, #15
 800b244:	439c      	bics	r4, r3
 800b246:	d04a      	beq.n	800b2de <_strtod_l+0x54a>
 800b248:	3326      	adds	r3, #38	; 0x26
 800b24a:	33ff      	adds	r3, #255	; 0xff
 800b24c:	429c      	cmp	r4, r3
 800b24e:	dd22      	ble.n	800b296 <_strtod_l+0x502>
 800b250:	2300      	movs	r3, #0
 800b252:	9305      	str	r3, [sp, #20]
 800b254:	9306      	str	r3, [sp, #24]
 800b256:	930d      	str	r3, [sp, #52]	; 0x34
 800b258:	9308      	str	r3, [sp, #32]
 800b25a:	2322      	movs	r3, #34	; 0x22
 800b25c:	2600      	movs	r6, #0
 800b25e:	9a04      	ldr	r2, [sp, #16]
 800b260:	4f3f      	ldr	r7, [pc, #252]	; (800b360 <_strtod_l+0x5cc>)
 800b262:	6013      	str	r3, [r2, #0]
 800b264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b266:	42b3      	cmp	r3, r6
 800b268:	d100      	bne.n	800b26c <_strtod_l+0x4d8>
 800b26a:	e5ce      	b.n	800ae0a <_strtod_l+0x76>
 800b26c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b26e:	9804      	ldr	r0, [sp, #16]
 800b270:	f001 fb7c 	bl	800c96c <_Bfree>
 800b274:	9908      	ldr	r1, [sp, #32]
 800b276:	9804      	ldr	r0, [sp, #16]
 800b278:	f001 fb78 	bl	800c96c <_Bfree>
 800b27c:	9906      	ldr	r1, [sp, #24]
 800b27e:	9804      	ldr	r0, [sp, #16]
 800b280:	f001 fb74 	bl	800c96c <_Bfree>
 800b284:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b286:	9804      	ldr	r0, [sp, #16]
 800b288:	f001 fb70 	bl	800c96c <_Bfree>
 800b28c:	9905      	ldr	r1, [sp, #20]
 800b28e:	9804      	ldr	r0, [sp, #16]
 800b290:	f001 fb6c 	bl	800c96c <_Bfree>
 800b294:	e5b9      	b.n	800ae0a <_strtod_l+0x76>
 800b296:	2300      	movs	r3, #0
 800b298:	0030      	movs	r0, r6
 800b29a:	0039      	movs	r1, r7
 800b29c:	4d35      	ldr	r5, [pc, #212]	; (800b374 <_strtod_l+0x5e0>)
 800b29e:	1124      	asrs	r4, r4, #4
 800b2a0:	9307      	str	r3, [sp, #28]
 800b2a2:	2c01      	cmp	r4, #1
 800b2a4:	dc1e      	bgt.n	800b2e4 <_strtod_l+0x550>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <_strtod_l+0x51a>
 800b2aa:	0006      	movs	r6, r0
 800b2ac:	000f      	movs	r7, r1
 800b2ae:	4b32      	ldr	r3, [pc, #200]	; (800b378 <_strtod_l+0x5e4>)
 800b2b0:	9a07      	ldr	r2, [sp, #28]
 800b2b2:	18ff      	adds	r7, r7, r3
 800b2b4:	4b2f      	ldr	r3, [pc, #188]	; (800b374 <_strtod_l+0x5e0>)
 800b2b6:	00d2      	lsls	r2, r2, #3
 800b2b8:	189d      	adds	r5, r3, r2
 800b2ba:	6828      	ldr	r0, [r5, #0]
 800b2bc:	6869      	ldr	r1, [r5, #4]
 800b2be:	0032      	movs	r2, r6
 800b2c0:	003b      	movs	r3, r7
 800b2c2:	f7f6 f9d3 	bl	800166c <__aeabi_dmul>
 800b2c6:	4b26      	ldr	r3, [pc, #152]	; (800b360 <_strtod_l+0x5cc>)
 800b2c8:	4a2c      	ldr	r2, [pc, #176]	; (800b37c <_strtod_l+0x5e8>)
 800b2ca:	0006      	movs	r6, r0
 800b2cc:	400b      	ands	r3, r1
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d8be      	bhi.n	800b250 <_strtod_l+0x4bc>
 800b2d2:	4a2b      	ldr	r2, [pc, #172]	; (800b380 <_strtod_l+0x5ec>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d913      	bls.n	800b300 <_strtod_l+0x56c>
 800b2d8:	2601      	movs	r6, #1
 800b2da:	4f2a      	ldr	r7, [pc, #168]	; (800b384 <_strtod_l+0x5f0>)
 800b2dc:	4276      	negs	r6, r6
 800b2de:	2300      	movs	r3, #0
 800b2e0:	9307      	str	r3, [sp, #28]
 800b2e2:	e088      	b.n	800b3f6 <_strtod_l+0x662>
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	4214      	tst	r4, r2
 800b2e8:	d004      	beq.n	800b2f4 <_strtod_l+0x560>
 800b2ea:	682a      	ldr	r2, [r5, #0]
 800b2ec:	686b      	ldr	r3, [r5, #4]
 800b2ee:	f7f6 f9bd 	bl	800166c <__aeabi_dmul>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	9a07      	ldr	r2, [sp, #28]
 800b2f6:	1064      	asrs	r4, r4, #1
 800b2f8:	3201      	adds	r2, #1
 800b2fa:	9207      	str	r2, [sp, #28]
 800b2fc:	3508      	adds	r5, #8
 800b2fe:	e7d0      	b.n	800b2a2 <_strtod_l+0x50e>
 800b300:	23d4      	movs	r3, #212	; 0xd4
 800b302:	049b      	lsls	r3, r3, #18
 800b304:	18cf      	adds	r7, r1, r3
 800b306:	e7ea      	b.n	800b2de <_strtod_l+0x54a>
 800b308:	2c00      	cmp	r4, #0
 800b30a:	d0e8      	beq.n	800b2de <_strtod_l+0x54a>
 800b30c:	4264      	negs	r4, r4
 800b30e:	230f      	movs	r3, #15
 800b310:	0022      	movs	r2, r4
 800b312:	401a      	ands	r2, r3
 800b314:	421c      	tst	r4, r3
 800b316:	d00a      	beq.n	800b32e <_strtod_l+0x59a>
 800b318:	4b15      	ldr	r3, [pc, #84]	; (800b370 <_strtod_l+0x5dc>)
 800b31a:	00d2      	lsls	r2, r2, #3
 800b31c:	189b      	adds	r3, r3, r2
 800b31e:	0030      	movs	r0, r6
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	0039      	movs	r1, r7
 800b326:	f7f5 fda7 	bl	8000e78 <__aeabi_ddiv>
 800b32a:	0006      	movs	r6, r0
 800b32c:	000f      	movs	r7, r1
 800b32e:	1124      	asrs	r4, r4, #4
 800b330:	d0d5      	beq.n	800b2de <_strtod_l+0x54a>
 800b332:	2c1f      	cmp	r4, #31
 800b334:	dd28      	ble.n	800b388 <_strtod_l+0x5f4>
 800b336:	2300      	movs	r3, #0
 800b338:	9305      	str	r3, [sp, #20]
 800b33a:	9306      	str	r3, [sp, #24]
 800b33c:	930d      	str	r3, [sp, #52]	; 0x34
 800b33e:	9308      	str	r3, [sp, #32]
 800b340:	2322      	movs	r3, #34	; 0x22
 800b342:	9a04      	ldr	r2, [sp, #16]
 800b344:	2600      	movs	r6, #0
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b34a:	2700      	movs	r7, #0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d18d      	bne.n	800b26c <_strtod_l+0x4d8>
 800b350:	e55b      	b.n	800ae0a <_strtod_l+0x76>
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	00004e1f 	.word	0x00004e1f
 800b358:	08014659 	.word	0x08014659
 800b35c:	08014338 	.word	0x08014338
 800b360:	7ff00000 	.word	0x7ff00000
 800b364:	08014651 	.word	0x08014651
 800b368:	08014707 	.word	0x08014707
 800b36c:	08014703 	.word	0x08014703
 800b370:	08014578 	.word	0x08014578
 800b374:	08014550 	.word	0x08014550
 800b378:	fcb00000 	.word	0xfcb00000
 800b37c:	7ca00000 	.word	0x7ca00000
 800b380:	7c900000 	.word	0x7c900000
 800b384:	7fefffff 	.word	0x7fefffff
 800b388:	2310      	movs	r3, #16
 800b38a:	0022      	movs	r2, r4
 800b38c:	401a      	ands	r2, r3
 800b38e:	9207      	str	r2, [sp, #28]
 800b390:	421c      	tst	r4, r3
 800b392:	d001      	beq.n	800b398 <_strtod_l+0x604>
 800b394:	335a      	adds	r3, #90	; 0x5a
 800b396:	9307      	str	r3, [sp, #28]
 800b398:	0030      	movs	r0, r6
 800b39a:	0039      	movs	r1, r7
 800b39c:	2300      	movs	r3, #0
 800b39e:	4dc4      	ldr	r5, [pc, #784]	; (800b6b0 <_strtod_l+0x91c>)
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	4214      	tst	r4, r2
 800b3a4:	d004      	beq.n	800b3b0 <_strtod_l+0x61c>
 800b3a6:	682a      	ldr	r2, [r5, #0]
 800b3a8:	686b      	ldr	r3, [r5, #4]
 800b3aa:	f7f6 f95f 	bl	800166c <__aeabi_dmul>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	1064      	asrs	r4, r4, #1
 800b3b2:	3508      	adds	r5, #8
 800b3b4:	2c00      	cmp	r4, #0
 800b3b6:	d1f3      	bne.n	800b3a0 <_strtod_l+0x60c>
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <_strtod_l+0x62c>
 800b3bc:	0006      	movs	r6, r0
 800b3be:	000f      	movs	r7, r1
 800b3c0:	9b07      	ldr	r3, [sp, #28]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00f      	beq.n	800b3e6 <_strtod_l+0x652>
 800b3c6:	236b      	movs	r3, #107	; 0x6b
 800b3c8:	007a      	lsls	r2, r7, #1
 800b3ca:	0d52      	lsrs	r2, r2, #21
 800b3cc:	0039      	movs	r1, r7
 800b3ce:	1a9b      	subs	r3, r3, r2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dd08      	ble.n	800b3e6 <_strtod_l+0x652>
 800b3d4:	2b1f      	cmp	r3, #31
 800b3d6:	dc00      	bgt.n	800b3da <_strtod_l+0x646>
 800b3d8:	e121      	b.n	800b61e <_strtod_l+0x88a>
 800b3da:	2600      	movs	r6, #0
 800b3dc:	2b34      	cmp	r3, #52	; 0x34
 800b3de:	dc00      	bgt.n	800b3e2 <_strtod_l+0x64e>
 800b3e0:	e116      	b.n	800b610 <_strtod_l+0x87c>
 800b3e2:	27dc      	movs	r7, #220	; 0xdc
 800b3e4:	04bf      	lsls	r7, r7, #18
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	0030      	movs	r0, r6
 800b3ec:	0039      	movs	r1, r7
 800b3ee:	f7f5 f82b 	bl	8000448 <__aeabi_dcmpeq>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d19f      	bne.n	800b336 <_strtod_l+0x5a2>
 800b3f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3f8:	9a08      	ldr	r2, [sp, #32]
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b3fe:	9b05      	ldr	r3, [sp, #20]
 800b400:	9804      	ldr	r0, [sp, #16]
 800b402:	f001 fb01 	bl	800ca08 <__s2b>
 800b406:	900d      	str	r0, [sp, #52]	; 0x34
 800b408:	2800      	cmp	r0, #0
 800b40a:	d100      	bne.n	800b40e <_strtod_l+0x67a>
 800b40c:	e720      	b.n	800b250 <_strtod_l+0x4bc>
 800b40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b410:	9906      	ldr	r1, [sp, #24]
 800b412:	17da      	asrs	r2, r3, #31
 800b414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b416:	1a5b      	subs	r3, r3, r1
 800b418:	401a      	ands	r2, r3
 800b41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41c:	9215      	str	r2, [sp, #84]	; 0x54
 800b41e:	43db      	mvns	r3, r3
 800b420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b422:	17db      	asrs	r3, r3, #31
 800b424:	401a      	ands	r2, r3
 800b426:	2300      	movs	r3, #0
 800b428:	9218      	str	r2, [sp, #96]	; 0x60
 800b42a:	9305      	str	r3, [sp, #20]
 800b42c:	9306      	str	r3, [sp, #24]
 800b42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b430:	9804      	ldr	r0, [sp, #16]
 800b432:	6859      	ldr	r1, [r3, #4]
 800b434:	f001 fa72 	bl	800c91c <_Balloc>
 800b438:	9008      	str	r0, [sp, #32]
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d100      	bne.n	800b440 <_strtod_l+0x6ac>
 800b43e:	e70c      	b.n	800b25a <_strtod_l+0x4c6>
 800b440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b442:	300c      	adds	r0, #12
 800b444:	0019      	movs	r1, r3
 800b446:	691a      	ldr	r2, [r3, #16]
 800b448:	310c      	adds	r1, #12
 800b44a:	3202      	adds	r2, #2
 800b44c:	0092      	lsls	r2, r2, #2
 800b44e:	f000 fdca 	bl	800bfe6 <memcpy>
 800b452:	ab1e      	add	r3, sp, #120	; 0x78
 800b454:	9301      	str	r3, [sp, #4]
 800b456:	ab1d      	add	r3, sp, #116	; 0x74
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	0032      	movs	r2, r6
 800b45c:	003b      	movs	r3, r7
 800b45e:	9804      	ldr	r0, [sp, #16]
 800b460:	9610      	str	r6, [sp, #64]	; 0x40
 800b462:	9711      	str	r7, [sp, #68]	; 0x44
 800b464:	f001 fdf8 	bl	800d058 <__d2b>
 800b468:	901c      	str	r0, [sp, #112]	; 0x70
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d100      	bne.n	800b470 <_strtod_l+0x6dc>
 800b46e:	e6f4      	b.n	800b25a <_strtod_l+0x4c6>
 800b470:	2101      	movs	r1, #1
 800b472:	9804      	ldr	r0, [sp, #16]
 800b474:	f001 fb5c 	bl	800cb30 <__i2b>
 800b478:	9006      	str	r0, [sp, #24]
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d100      	bne.n	800b480 <_strtod_l+0x6ec>
 800b47e:	e6ec      	b.n	800b25a <_strtod_l+0x4c6>
 800b480:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b482:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b484:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b486:	1ad4      	subs	r4, r2, r3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	db01      	blt.n	800b490 <_strtod_l+0x6fc>
 800b48c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b48e:	195d      	adds	r5, r3, r5
 800b490:	9907      	ldr	r1, [sp, #28]
 800b492:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b494:	1a5b      	subs	r3, r3, r1
 800b496:	2136      	movs	r1, #54	; 0x36
 800b498:	189b      	adds	r3, r3, r2
 800b49a:	1a8a      	subs	r2, r1, r2
 800b49c:	4985      	ldr	r1, [pc, #532]	; (800b6b4 <_strtod_l+0x920>)
 800b49e:	2001      	movs	r0, #1
 800b4a0:	468c      	mov	ip, r1
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	9114      	str	r1, [sp, #80]	; 0x50
 800b4a8:	9012      	str	r0, [sp, #72]	; 0x48
 800b4aa:	4563      	cmp	r3, ip
 800b4ac:	da07      	bge.n	800b4be <_strtod_l+0x72a>
 800b4ae:	4661      	mov	r1, ip
 800b4b0:	1ac9      	subs	r1, r1, r3
 800b4b2:	1a52      	subs	r2, r2, r1
 800b4b4:	291f      	cmp	r1, #31
 800b4b6:	dd00      	ble.n	800b4ba <_strtod_l+0x726>
 800b4b8:	e0b6      	b.n	800b628 <_strtod_l+0x894>
 800b4ba:	4088      	lsls	r0, r1
 800b4bc:	9012      	str	r0, [sp, #72]	; 0x48
 800b4be:	18ab      	adds	r3, r5, r2
 800b4c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b4c2:	18a4      	adds	r4, r4, r2
 800b4c4:	9b07      	ldr	r3, [sp, #28]
 800b4c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4c8:	191c      	adds	r4, r3, r4
 800b4ca:	002b      	movs	r3, r5
 800b4cc:	4295      	cmp	r5, r2
 800b4ce:	dd00      	ble.n	800b4d2 <_strtod_l+0x73e>
 800b4d0:	0013      	movs	r3, r2
 800b4d2:	42a3      	cmp	r3, r4
 800b4d4:	dd00      	ble.n	800b4d8 <_strtod_l+0x744>
 800b4d6:	0023      	movs	r3, r4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dd04      	ble.n	800b4e6 <_strtod_l+0x752>
 800b4dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4de:	1ae4      	subs	r4, r4, r3
 800b4e0:	1ad2      	subs	r2, r2, r3
 800b4e2:	920c      	str	r2, [sp, #48]	; 0x30
 800b4e4:	1aed      	subs	r5, r5, r3
 800b4e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	dd17      	ble.n	800b51c <_strtod_l+0x788>
 800b4ec:	001a      	movs	r2, r3
 800b4ee:	9906      	ldr	r1, [sp, #24]
 800b4f0:	9804      	ldr	r0, [sp, #16]
 800b4f2:	f001 fbe5 	bl	800ccc0 <__pow5mult>
 800b4f6:	9006      	str	r0, [sp, #24]
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d100      	bne.n	800b4fe <_strtod_l+0x76a>
 800b4fc:	e6ad      	b.n	800b25a <_strtod_l+0x4c6>
 800b4fe:	0001      	movs	r1, r0
 800b500:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b502:	9804      	ldr	r0, [sp, #16]
 800b504:	f001 fb2c 	bl	800cb60 <__multiply>
 800b508:	900e      	str	r0, [sp, #56]	; 0x38
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d100      	bne.n	800b510 <_strtod_l+0x77c>
 800b50e:	e6a4      	b.n	800b25a <_strtod_l+0x4c6>
 800b510:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b512:	9804      	ldr	r0, [sp, #16]
 800b514:	f001 fa2a 	bl	800c96c <_Bfree>
 800b518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b51a:	931c      	str	r3, [sp, #112]	; 0x70
 800b51c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b51e:	2b00      	cmp	r3, #0
 800b520:	dd00      	ble.n	800b524 <_strtod_l+0x790>
 800b522:	e087      	b.n	800b634 <_strtod_l+0x8a0>
 800b524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b526:	2b00      	cmp	r3, #0
 800b528:	dd08      	ble.n	800b53c <_strtod_l+0x7a8>
 800b52a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b52c:	9908      	ldr	r1, [sp, #32]
 800b52e:	9804      	ldr	r0, [sp, #16]
 800b530:	f001 fbc6 	bl	800ccc0 <__pow5mult>
 800b534:	9008      	str	r0, [sp, #32]
 800b536:	2800      	cmp	r0, #0
 800b538:	d100      	bne.n	800b53c <_strtod_l+0x7a8>
 800b53a:	e68e      	b.n	800b25a <_strtod_l+0x4c6>
 800b53c:	2c00      	cmp	r4, #0
 800b53e:	dd08      	ble.n	800b552 <_strtod_l+0x7be>
 800b540:	0022      	movs	r2, r4
 800b542:	9908      	ldr	r1, [sp, #32]
 800b544:	9804      	ldr	r0, [sp, #16]
 800b546:	f001 fbfd 	bl	800cd44 <__lshift>
 800b54a:	9008      	str	r0, [sp, #32]
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d100      	bne.n	800b552 <_strtod_l+0x7be>
 800b550:	e683      	b.n	800b25a <_strtod_l+0x4c6>
 800b552:	2d00      	cmp	r5, #0
 800b554:	dd08      	ble.n	800b568 <_strtod_l+0x7d4>
 800b556:	002a      	movs	r2, r5
 800b558:	9906      	ldr	r1, [sp, #24]
 800b55a:	9804      	ldr	r0, [sp, #16]
 800b55c:	f001 fbf2 	bl	800cd44 <__lshift>
 800b560:	9006      	str	r0, [sp, #24]
 800b562:	2800      	cmp	r0, #0
 800b564:	d100      	bne.n	800b568 <_strtod_l+0x7d4>
 800b566:	e678      	b.n	800b25a <_strtod_l+0x4c6>
 800b568:	9a08      	ldr	r2, [sp, #32]
 800b56a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b56c:	9804      	ldr	r0, [sp, #16]
 800b56e:	f001 fc73 	bl	800ce58 <__mdiff>
 800b572:	9005      	str	r0, [sp, #20]
 800b574:	2800      	cmp	r0, #0
 800b576:	d100      	bne.n	800b57a <_strtod_l+0x7e6>
 800b578:	e66f      	b.n	800b25a <_strtod_l+0x4c6>
 800b57a:	2200      	movs	r2, #0
 800b57c:	68c3      	ldr	r3, [r0, #12]
 800b57e:	9906      	ldr	r1, [sp, #24]
 800b580:	60c2      	str	r2, [r0, #12]
 800b582:	930c      	str	r3, [sp, #48]	; 0x30
 800b584:	f001 fc4c 	bl	800ce20 <__mcmp>
 800b588:	2800      	cmp	r0, #0
 800b58a:	da5d      	bge.n	800b648 <_strtod_l+0x8b4>
 800b58c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b58e:	4333      	orrs	r3, r6
 800b590:	d000      	beq.n	800b594 <_strtod_l+0x800>
 800b592:	e088      	b.n	800b6a6 <_strtod_l+0x912>
 800b594:	033b      	lsls	r3, r7, #12
 800b596:	d000      	beq.n	800b59a <_strtod_l+0x806>
 800b598:	e085      	b.n	800b6a6 <_strtod_l+0x912>
 800b59a:	22d6      	movs	r2, #214	; 0xd6
 800b59c:	4b46      	ldr	r3, [pc, #280]	; (800b6b8 <_strtod_l+0x924>)
 800b59e:	04d2      	lsls	r2, r2, #19
 800b5a0:	403b      	ands	r3, r7
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d97f      	bls.n	800b6a6 <_strtod_l+0x912>
 800b5a6:	9b05      	ldr	r3, [sp, #20]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d103      	bne.n	800b5b6 <_strtod_l+0x822>
 800b5ae:	9b05      	ldr	r3, [sp, #20]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	dd77      	ble.n	800b6a6 <_strtod_l+0x912>
 800b5b6:	9905      	ldr	r1, [sp, #20]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	9804      	ldr	r0, [sp, #16]
 800b5bc:	f001 fbc2 	bl	800cd44 <__lshift>
 800b5c0:	9906      	ldr	r1, [sp, #24]
 800b5c2:	9005      	str	r0, [sp, #20]
 800b5c4:	f001 fc2c 	bl	800ce20 <__mcmp>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	dd6c      	ble.n	800b6a6 <_strtod_l+0x912>
 800b5cc:	9907      	ldr	r1, [sp, #28]
 800b5ce:	003b      	movs	r3, r7
 800b5d0:	4a39      	ldr	r2, [pc, #228]	; (800b6b8 <_strtod_l+0x924>)
 800b5d2:	2900      	cmp	r1, #0
 800b5d4:	d100      	bne.n	800b5d8 <_strtod_l+0x844>
 800b5d6:	e094      	b.n	800b702 <_strtod_l+0x96e>
 800b5d8:	0011      	movs	r1, r2
 800b5da:	20d6      	movs	r0, #214	; 0xd6
 800b5dc:	4039      	ands	r1, r7
 800b5de:	04c0      	lsls	r0, r0, #19
 800b5e0:	4281      	cmp	r1, r0
 800b5e2:	dd00      	ble.n	800b5e6 <_strtod_l+0x852>
 800b5e4:	e08d      	b.n	800b702 <_strtod_l+0x96e>
 800b5e6:	23dc      	movs	r3, #220	; 0xdc
 800b5e8:	049b      	lsls	r3, r3, #18
 800b5ea:	4299      	cmp	r1, r3
 800b5ec:	dc00      	bgt.n	800b5f0 <_strtod_l+0x85c>
 800b5ee:	e6a7      	b.n	800b340 <_strtod_l+0x5ac>
 800b5f0:	0030      	movs	r0, r6
 800b5f2:	0039      	movs	r1, r7
 800b5f4:	4b31      	ldr	r3, [pc, #196]	; (800b6bc <_strtod_l+0x928>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f7f6 f838 	bl	800166c <__aeabi_dmul>
 800b5fc:	4b2e      	ldr	r3, [pc, #184]	; (800b6b8 <_strtod_l+0x924>)
 800b5fe:	0006      	movs	r6, r0
 800b600:	000f      	movs	r7, r1
 800b602:	420b      	tst	r3, r1
 800b604:	d000      	beq.n	800b608 <_strtod_l+0x874>
 800b606:	e631      	b.n	800b26c <_strtod_l+0x4d8>
 800b608:	2322      	movs	r3, #34	; 0x22
 800b60a:	9a04      	ldr	r2, [sp, #16]
 800b60c:	6013      	str	r3, [r2, #0]
 800b60e:	e62d      	b.n	800b26c <_strtod_l+0x4d8>
 800b610:	234b      	movs	r3, #75	; 0x4b
 800b612:	1a9a      	subs	r2, r3, r2
 800b614:	3b4c      	subs	r3, #76	; 0x4c
 800b616:	4093      	lsls	r3, r2
 800b618:	4019      	ands	r1, r3
 800b61a:	000f      	movs	r7, r1
 800b61c:	e6e3      	b.n	800b3e6 <_strtod_l+0x652>
 800b61e:	2201      	movs	r2, #1
 800b620:	4252      	negs	r2, r2
 800b622:	409a      	lsls	r2, r3
 800b624:	4016      	ands	r6, r2
 800b626:	e6de      	b.n	800b3e6 <_strtod_l+0x652>
 800b628:	4925      	ldr	r1, [pc, #148]	; (800b6c0 <_strtod_l+0x92c>)
 800b62a:	1acb      	subs	r3, r1, r3
 800b62c:	0001      	movs	r1, r0
 800b62e:	4099      	lsls	r1, r3
 800b630:	9114      	str	r1, [sp, #80]	; 0x50
 800b632:	e743      	b.n	800b4bc <_strtod_l+0x728>
 800b634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b636:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b638:	9804      	ldr	r0, [sp, #16]
 800b63a:	f001 fb83 	bl	800cd44 <__lshift>
 800b63e:	901c      	str	r0, [sp, #112]	; 0x70
 800b640:	2800      	cmp	r0, #0
 800b642:	d000      	beq.n	800b646 <_strtod_l+0x8b2>
 800b644:	e76e      	b.n	800b524 <_strtod_l+0x790>
 800b646:	e608      	b.n	800b25a <_strtod_l+0x4c6>
 800b648:	970e      	str	r7, [sp, #56]	; 0x38
 800b64a:	2800      	cmp	r0, #0
 800b64c:	d177      	bne.n	800b73e <_strtod_l+0x9aa>
 800b64e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b650:	033b      	lsls	r3, r7, #12
 800b652:	0b1b      	lsrs	r3, r3, #12
 800b654:	2a00      	cmp	r2, #0
 800b656:	d039      	beq.n	800b6cc <_strtod_l+0x938>
 800b658:	4a1a      	ldr	r2, [pc, #104]	; (800b6c4 <_strtod_l+0x930>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d139      	bne.n	800b6d2 <_strtod_l+0x93e>
 800b65e:	2101      	movs	r1, #1
 800b660:	9b07      	ldr	r3, [sp, #28]
 800b662:	4249      	negs	r1, r1
 800b664:	0032      	movs	r2, r6
 800b666:	0008      	movs	r0, r1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00b      	beq.n	800b684 <_strtod_l+0x8f0>
 800b66c:	24d4      	movs	r4, #212	; 0xd4
 800b66e:	4b12      	ldr	r3, [pc, #72]	; (800b6b8 <_strtod_l+0x924>)
 800b670:	0008      	movs	r0, r1
 800b672:	403b      	ands	r3, r7
 800b674:	04e4      	lsls	r4, r4, #19
 800b676:	42a3      	cmp	r3, r4
 800b678:	d804      	bhi.n	800b684 <_strtod_l+0x8f0>
 800b67a:	306c      	adds	r0, #108	; 0x6c
 800b67c:	0d1b      	lsrs	r3, r3, #20
 800b67e:	1ac3      	subs	r3, r0, r3
 800b680:	4099      	lsls	r1, r3
 800b682:	0008      	movs	r0, r1
 800b684:	4282      	cmp	r2, r0
 800b686:	d124      	bne.n	800b6d2 <_strtod_l+0x93e>
 800b688:	4b0f      	ldr	r3, [pc, #60]	; (800b6c8 <_strtod_l+0x934>)
 800b68a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b68c:	4299      	cmp	r1, r3
 800b68e:	d102      	bne.n	800b696 <_strtod_l+0x902>
 800b690:	3201      	adds	r2, #1
 800b692:	d100      	bne.n	800b696 <_strtod_l+0x902>
 800b694:	e5e1      	b.n	800b25a <_strtod_l+0x4c6>
 800b696:	4b08      	ldr	r3, [pc, #32]	; (800b6b8 <_strtod_l+0x924>)
 800b698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b69a:	2600      	movs	r6, #0
 800b69c:	401a      	ands	r2, r3
 800b69e:	0013      	movs	r3, r2
 800b6a0:	2280      	movs	r2, #128	; 0x80
 800b6a2:	0352      	lsls	r2, r2, #13
 800b6a4:	189f      	adds	r7, r3, r2
 800b6a6:	9b07      	ldr	r3, [sp, #28]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1a1      	bne.n	800b5f0 <_strtod_l+0x85c>
 800b6ac:	e5de      	b.n	800b26c <_strtod_l+0x4d8>
 800b6ae:	46c0      	nop			; (mov r8, r8)
 800b6b0:	08014350 	.word	0x08014350
 800b6b4:	fffffc02 	.word	0xfffffc02
 800b6b8:	7ff00000 	.word	0x7ff00000
 800b6bc:	39500000 	.word	0x39500000
 800b6c0:	fffffbe2 	.word	0xfffffbe2
 800b6c4:	000fffff 	.word	0x000fffff
 800b6c8:	7fefffff 	.word	0x7fefffff
 800b6cc:	4333      	orrs	r3, r6
 800b6ce:	d100      	bne.n	800b6d2 <_strtod_l+0x93e>
 800b6d0:	e77c      	b.n	800b5cc <_strtod_l+0x838>
 800b6d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01d      	beq.n	800b714 <_strtod_l+0x980>
 800b6d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6dc:	4213      	tst	r3, r2
 800b6de:	d0e2      	beq.n	800b6a6 <_strtod_l+0x912>
 800b6e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6e2:	0030      	movs	r0, r6
 800b6e4:	0039      	movs	r1, r7
 800b6e6:	9a07      	ldr	r2, [sp, #28]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d017      	beq.n	800b71c <_strtod_l+0x988>
 800b6ec:	f7ff fb3a 	bl	800ad64 <sulp>
 800b6f0:	0002      	movs	r2, r0
 800b6f2:	000b      	movs	r3, r1
 800b6f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b6f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b6f8:	f7f5 f85e 	bl	80007b8 <__aeabi_dadd>
 800b6fc:	0006      	movs	r6, r0
 800b6fe:	000f      	movs	r7, r1
 800b700:	e7d1      	b.n	800b6a6 <_strtod_l+0x912>
 800b702:	2601      	movs	r6, #1
 800b704:	4013      	ands	r3, r2
 800b706:	4a98      	ldr	r2, [pc, #608]	; (800b968 <_strtod_l+0xbd4>)
 800b708:	4276      	negs	r6, r6
 800b70a:	189b      	adds	r3, r3, r2
 800b70c:	4a97      	ldr	r2, [pc, #604]	; (800b96c <_strtod_l+0xbd8>)
 800b70e:	431a      	orrs	r2, r3
 800b710:	0017      	movs	r7, r2
 800b712:	e7c8      	b.n	800b6a6 <_strtod_l+0x912>
 800b714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b716:	4233      	tst	r3, r6
 800b718:	d0c5      	beq.n	800b6a6 <_strtod_l+0x912>
 800b71a:	e7e1      	b.n	800b6e0 <_strtod_l+0x94c>
 800b71c:	f7ff fb22 	bl	800ad64 <sulp>
 800b720:	0002      	movs	r2, r0
 800b722:	000b      	movs	r3, r1
 800b724:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b726:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b728:	f7f6 fa62 	bl	8001bf0 <__aeabi_dsub>
 800b72c:	2200      	movs	r2, #0
 800b72e:	2300      	movs	r3, #0
 800b730:	0006      	movs	r6, r0
 800b732:	000f      	movs	r7, r1
 800b734:	f7f4 fe88 	bl	8000448 <__aeabi_dcmpeq>
 800b738:	2800      	cmp	r0, #0
 800b73a:	d0b4      	beq.n	800b6a6 <_strtod_l+0x912>
 800b73c:	e600      	b.n	800b340 <_strtod_l+0x5ac>
 800b73e:	9906      	ldr	r1, [sp, #24]
 800b740:	9805      	ldr	r0, [sp, #20]
 800b742:	f001 fce9 	bl	800d118 <__ratio>
 800b746:	2380      	movs	r3, #128	; 0x80
 800b748:	2200      	movs	r2, #0
 800b74a:	05db      	lsls	r3, r3, #23
 800b74c:	0004      	movs	r4, r0
 800b74e:	000d      	movs	r5, r1
 800b750:	f7f4 fe8a 	bl	8000468 <__aeabi_dcmple>
 800b754:	2800      	cmp	r0, #0
 800b756:	d06d      	beq.n	800b834 <_strtod_l+0xaa0>
 800b758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d000      	beq.n	800b760 <_strtod_l+0x9cc>
 800b75e:	e07e      	b.n	800b85e <_strtod_l+0xaca>
 800b760:	2e00      	cmp	r6, #0
 800b762:	d158      	bne.n	800b816 <_strtod_l+0xa82>
 800b764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b766:	031b      	lsls	r3, r3, #12
 800b768:	d000      	beq.n	800b76c <_strtod_l+0x9d8>
 800b76a:	e07f      	b.n	800b86c <_strtod_l+0xad8>
 800b76c:	2200      	movs	r2, #0
 800b76e:	0020      	movs	r0, r4
 800b770:	0029      	movs	r1, r5
 800b772:	4b7f      	ldr	r3, [pc, #508]	; (800b970 <_strtod_l+0xbdc>)
 800b774:	f7f4 fe6e 	bl	8000454 <__aeabi_dcmplt>
 800b778:	2800      	cmp	r0, #0
 800b77a:	d158      	bne.n	800b82e <_strtod_l+0xa9a>
 800b77c:	0020      	movs	r0, r4
 800b77e:	0029      	movs	r1, r5
 800b780:	2200      	movs	r2, #0
 800b782:	4b7c      	ldr	r3, [pc, #496]	; (800b974 <_strtod_l+0xbe0>)
 800b784:	f7f5 ff72 	bl	800166c <__aeabi_dmul>
 800b788:	0004      	movs	r4, r0
 800b78a:	000d      	movs	r5, r1
 800b78c:	2380      	movs	r3, #128	; 0x80
 800b78e:	061b      	lsls	r3, r3, #24
 800b790:	940a      	str	r4, [sp, #40]	; 0x28
 800b792:	18eb      	adds	r3, r5, r3
 800b794:	930b      	str	r3, [sp, #44]	; 0x2c
 800b796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b79a:	9212      	str	r2, [sp, #72]	; 0x48
 800b79c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b79e:	4a76      	ldr	r2, [pc, #472]	; (800b978 <_strtod_l+0xbe4>)
 800b7a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	9314      	str	r3, [sp, #80]	; 0x50
 800b7a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7a8:	4b74      	ldr	r3, [pc, #464]	; (800b97c <_strtod_l+0xbe8>)
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d000      	beq.n	800b7b0 <_strtod_l+0xa1c>
 800b7ae:	e091      	b.n	800b8d4 <_strtod_l+0xb40>
 800b7b0:	4a73      	ldr	r2, [pc, #460]	; (800b980 <_strtod_l+0xbec>)
 800b7b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7b4:	4694      	mov	ip, r2
 800b7b6:	4463      	add	r3, ip
 800b7b8:	001f      	movs	r7, r3
 800b7ba:	0030      	movs	r0, r6
 800b7bc:	0019      	movs	r1, r3
 800b7be:	f001 fbe3 	bl	800cf88 <__ulp>
 800b7c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7c6:	f7f5 ff51 	bl	800166c <__aeabi_dmul>
 800b7ca:	0032      	movs	r2, r6
 800b7cc:	003b      	movs	r3, r7
 800b7ce:	f7f4 fff3 	bl	80007b8 <__aeabi_dadd>
 800b7d2:	4a69      	ldr	r2, [pc, #420]	; (800b978 <_strtod_l+0xbe4>)
 800b7d4:	4b6b      	ldr	r3, [pc, #428]	; (800b984 <_strtod_l+0xbf0>)
 800b7d6:	0006      	movs	r6, r0
 800b7d8:	400a      	ands	r2, r1
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d949      	bls.n	800b872 <_strtod_l+0xade>
 800b7de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b7e0:	4b69      	ldr	r3, [pc, #420]	; (800b988 <_strtod_l+0xbf4>)
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d103      	bne.n	800b7ee <_strtod_l+0xa5a>
 800b7e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	d100      	bne.n	800b7ee <_strtod_l+0xa5a>
 800b7ec:	e535      	b.n	800b25a <_strtod_l+0x4c6>
 800b7ee:	2601      	movs	r6, #1
 800b7f0:	4f65      	ldr	r7, [pc, #404]	; (800b988 <_strtod_l+0xbf4>)
 800b7f2:	4276      	negs	r6, r6
 800b7f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7f6:	9804      	ldr	r0, [sp, #16]
 800b7f8:	f001 f8b8 	bl	800c96c <_Bfree>
 800b7fc:	9908      	ldr	r1, [sp, #32]
 800b7fe:	9804      	ldr	r0, [sp, #16]
 800b800:	f001 f8b4 	bl	800c96c <_Bfree>
 800b804:	9906      	ldr	r1, [sp, #24]
 800b806:	9804      	ldr	r0, [sp, #16]
 800b808:	f001 f8b0 	bl	800c96c <_Bfree>
 800b80c:	9905      	ldr	r1, [sp, #20]
 800b80e:	9804      	ldr	r0, [sp, #16]
 800b810:	f001 f8ac 	bl	800c96c <_Bfree>
 800b814:	e60b      	b.n	800b42e <_strtod_l+0x69a>
 800b816:	2e01      	cmp	r6, #1
 800b818:	d103      	bne.n	800b822 <_strtod_l+0xa8e>
 800b81a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d100      	bne.n	800b822 <_strtod_l+0xa8e>
 800b820:	e58e      	b.n	800b340 <_strtod_l+0x5ac>
 800b822:	2300      	movs	r3, #0
 800b824:	4c59      	ldr	r4, [pc, #356]	; (800b98c <_strtod_l+0xbf8>)
 800b826:	930a      	str	r3, [sp, #40]	; 0x28
 800b828:	940b      	str	r4, [sp, #44]	; 0x2c
 800b82a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b82c:	e01c      	b.n	800b868 <_strtod_l+0xad4>
 800b82e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b830:	4d50      	ldr	r5, [pc, #320]	; (800b974 <_strtod_l+0xbe0>)
 800b832:	e7ab      	b.n	800b78c <_strtod_l+0x9f8>
 800b834:	2200      	movs	r2, #0
 800b836:	0020      	movs	r0, r4
 800b838:	0029      	movs	r1, r5
 800b83a:	4b4e      	ldr	r3, [pc, #312]	; (800b974 <_strtod_l+0xbe0>)
 800b83c:	f7f5 ff16 	bl	800166c <__aeabi_dmul>
 800b840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b842:	0004      	movs	r4, r0
 800b844:	000b      	movs	r3, r1
 800b846:	000d      	movs	r5, r1
 800b848:	2a00      	cmp	r2, #0
 800b84a:	d104      	bne.n	800b856 <_strtod_l+0xac2>
 800b84c:	2280      	movs	r2, #128	; 0x80
 800b84e:	0612      	lsls	r2, r2, #24
 800b850:	900a      	str	r0, [sp, #40]	; 0x28
 800b852:	188b      	adds	r3, r1, r2
 800b854:	e79e      	b.n	800b794 <_strtod_l+0xa00>
 800b856:	0002      	movs	r2, r0
 800b858:	920a      	str	r2, [sp, #40]	; 0x28
 800b85a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b85c:	e79b      	b.n	800b796 <_strtod_l+0xa02>
 800b85e:	2300      	movs	r3, #0
 800b860:	4c43      	ldr	r4, [pc, #268]	; (800b970 <_strtod_l+0xbdc>)
 800b862:	930a      	str	r3, [sp, #40]	; 0x28
 800b864:	940b      	str	r4, [sp, #44]	; 0x2c
 800b866:	2400      	movs	r4, #0
 800b868:	4d41      	ldr	r5, [pc, #260]	; (800b970 <_strtod_l+0xbdc>)
 800b86a:	e794      	b.n	800b796 <_strtod_l+0xa02>
 800b86c:	2300      	movs	r3, #0
 800b86e:	4c47      	ldr	r4, [pc, #284]	; (800b98c <_strtod_l+0xbf8>)
 800b870:	e7f7      	b.n	800b862 <_strtod_l+0xace>
 800b872:	23d4      	movs	r3, #212	; 0xd4
 800b874:	049b      	lsls	r3, r3, #18
 800b876:	18cf      	adds	r7, r1, r3
 800b878:	9b07      	ldr	r3, [sp, #28]
 800b87a:	970e      	str	r7, [sp, #56]	; 0x38
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1b9      	bne.n	800b7f4 <_strtod_l+0xa60>
 800b880:	4b3d      	ldr	r3, [pc, #244]	; (800b978 <_strtod_l+0xbe4>)
 800b882:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b884:	403b      	ands	r3, r7
 800b886:	429a      	cmp	r2, r3
 800b888:	d1b4      	bne.n	800b7f4 <_strtod_l+0xa60>
 800b88a:	0020      	movs	r0, r4
 800b88c:	0029      	movs	r1, r5
 800b88e:	f7f4 fe75 	bl	800057c <__aeabi_d2lz>
 800b892:	f7f4 feaf 	bl	80005f4 <__aeabi_l2d>
 800b896:	0002      	movs	r2, r0
 800b898:	000b      	movs	r3, r1
 800b89a:	0020      	movs	r0, r4
 800b89c:	0029      	movs	r1, r5
 800b89e:	f7f6 f9a7 	bl	8001bf0 <__aeabi_dsub>
 800b8a2:	033b      	lsls	r3, r7, #12
 800b8a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8a6:	0b1b      	lsrs	r3, r3, #12
 800b8a8:	4333      	orrs	r3, r6
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	0004      	movs	r4, r0
 800b8ae:	000d      	movs	r5, r1
 800b8b0:	4a37      	ldr	r2, [pc, #220]	; (800b990 <_strtod_l+0xbfc>)
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d054      	beq.n	800b960 <_strtod_l+0xbcc>
 800b8b6:	4b37      	ldr	r3, [pc, #220]	; (800b994 <_strtod_l+0xc00>)
 800b8b8:	f7f4 fdcc 	bl	8000454 <__aeabi_dcmplt>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d000      	beq.n	800b8c2 <_strtod_l+0xb2e>
 800b8c0:	e4d4      	b.n	800b26c <_strtod_l+0x4d8>
 800b8c2:	0020      	movs	r0, r4
 800b8c4:	0029      	movs	r1, r5
 800b8c6:	4a34      	ldr	r2, [pc, #208]	; (800b998 <_strtod_l+0xc04>)
 800b8c8:	4b2a      	ldr	r3, [pc, #168]	; (800b974 <_strtod_l+0xbe0>)
 800b8ca:	f7f4 fdd7 	bl	800047c <__aeabi_dcmpgt>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d090      	beq.n	800b7f4 <_strtod_l+0xa60>
 800b8d2:	e4cb      	b.n	800b26c <_strtod_l+0x4d8>
 800b8d4:	9b07      	ldr	r3, [sp, #28]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d02b      	beq.n	800b932 <_strtod_l+0xb9e>
 800b8da:	23d4      	movs	r3, #212	; 0xd4
 800b8dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8de:	04db      	lsls	r3, r3, #19
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d826      	bhi.n	800b932 <_strtod_l+0xb9e>
 800b8e4:	0020      	movs	r0, r4
 800b8e6:	0029      	movs	r1, r5
 800b8e8:	4a2c      	ldr	r2, [pc, #176]	; (800b99c <_strtod_l+0xc08>)
 800b8ea:	4b2d      	ldr	r3, [pc, #180]	; (800b9a0 <_strtod_l+0xc0c>)
 800b8ec:	f7f4 fdbc 	bl	8000468 <__aeabi_dcmple>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d017      	beq.n	800b924 <_strtod_l+0xb90>
 800b8f4:	0020      	movs	r0, r4
 800b8f6:	0029      	movs	r1, r5
 800b8f8:	f7f4 fe22 	bl	8000540 <__aeabi_d2uiz>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d100      	bne.n	800b902 <_strtod_l+0xb6e>
 800b900:	3001      	adds	r0, #1
 800b902:	f7f6 fd7b 	bl	80023fc <__aeabi_ui2d>
 800b906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b908:	0004      	movs	r4, r0
 800b90a:	000b      	movs	r3, r1
 800b90c:	000d      	movs	r5, r1
 800b90e:	2a00      	cmp	r2, #0
 800b910:	d122      	bne.n	800b958 <_strtod_l+0xbc4>
 800b912:	2280      	movs	r2, #128	; 0x80
 800b914:	0612      	lsls	r2, r2, #24
 800b916:	188b      	adds	r3, r1, r2
 800b918:	9016      	str	r0, [sp, #88]	; 0x58
 800b91a:	9317      	str	r3, [sp, #92]	; 0x5c
 800b91c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b91e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b920:	9212      	str	r2, [sp, #72]	; 0x48
 800b922:	9313      	str	r3, [sp, #76]	; 0x4c
 800b924:	22d6      	movs	r2, #214	; 0xd6
 800b926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b928:	04d2      	lsls	r2, r2, #19
 800b92a:	189b      	adds	r3, r3, r2
 800b92c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b92e:	1a9b      	subs	r3, r3, r2
 800b930:	9313      	str	r3, [sp, #76]	; 0x4c
 800b932:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b934:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b936:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b938:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b93a:	f001 fb25 	bl	800cf88 <__ulp>
 800b93e:	0002      	movs	r2, r0
 800b940:	000b      	movs	r3, r1
 800b942:	0030      	movs	r0, r6
 800b944:	0039      	movs	r1, r7
 800b946:	f7f5 fe91 	bl	800166c <__aeabi_dmul>
 800b94a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b94c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b94e:	f7f4 ff33 	bl	80007b8 <__aeabi_dadd>
 800b952:	0006      	movs	r6, r0
 800b954:	000f      	movs	r7, r1
 800b956:	e78f      	b.n	800b878 <_strtod_l+0xae4>
 800b958:	0002      	movs	r2, r0
 800b95a:	9216      	str	r2, [sp, #88]	; 0x58
 800b95c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b95e:	e7dd      	b.n	800b91c <_strtod_l+0xb88>
 800b960:	4b10      	ldr	r3, [pc, #64]	; (800b9a4 <_strtod_l+0xc10>)
 800b962:	f7f4 fd77 	bl	8000454 <__aeabi_dcmplt>
 800b966:	e7b2      	b.n	800b8ce <_strtod_l+0xb3a>
 800b968:	fff00000 	.word	0xfff00000
 800b96c:	000fffff 	.word	0x000fffff
 800b970:	3ff00000 	.word	0x3ff00000
 800b974:	3fe00000 	.word	0x3fe00000
 800b978:	7ff00000 	.word	0x7ff00000
 800b97c:	7fe00000 	.word	0x7fe00000
 800b980:	fcb00000 	.word	0xfcb00000
 800b984:	7c9fffff 	.word	0x7c9fffff
 800b988:	7fefffff 	.word	0x7fefffff
 800b98c:	bff00000 	.word	0xbff00000
 800b990:	94a03595 	.word	0x94a03595
 800b994:	3fdfffff 	.word	0x3fdfffff
 800b998:	35afe535 	.word	0x35afe535
 800b99c:	ffc00000 	.word	0xffc00000
 800b9a0:	41dfffff 	.word	0x41dfffff
 800b9a4:	3fcfffff 	.word	0x3fcfffff

0800b9a8 <_strtod_r>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	4b02      	ldr	r3, [pc, #8]	; (800b9b4 <_strtod_r+0xc>)
 800b9ac:	f7ff f9f2 	bl	800ad94 <_strtod_l>
 800b9b0:	bd10      	pop	{r4, pc}
 800b9b2:	46c0      	nop			; (mov r8, r8)
 800b9b4:	20000448 	.word	0x20000448

0800b9b8 <strtod>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	4c04      	ldr	r4, [pc, #16]	; (800b9cc <strtod+0x14>)
 800b9bc:	000a      	movs	r2, r1
 800b9be:	0001      	movs	r1, r0
 800b9c0:	4b03      	ldr	r3, [pc, #12]	; (800b9d0 <strtod+0x18>)
 800b9c2:	6820      	ldr	r0, [r4, #0]
 800b9c4:	f7ff f9e6 	bl	800ad94 <_strtod_l>
 800b9c8:	bd10      	pop	{r4, pc}
 800b9ca:	46c0      	nop			; (mov r8, r8)
 800b9cc:	200006d8 	.word	0x200006d8
 800b9d0:	20000448 	.word	0x20000448

0800b9d4 <_strtol_l.constprop.0>:
 800b9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	001e      	movs	r6, r3
 800b9da:	9005      	str	r0, [sp, #20]
 800b9dc:	9101      	str	r1, [sp, #4]
 800b9de:	9202      	str	r2, [sp, #8]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d048      	beq.n	800ba76 <_strtol_l.constprop.0+0xa2>
 800b9e4:	000b      	movs	r3, r1
 800b9e6:	2e24      	cmp	r6, #36	; 0x24
 800b9e8:	d845      	bhi.n	800ba76 <_strtol_l.constprop.0+0xa2>
 800b9ea:	4a3b      	ldr	r2, [pc, #236]	; (800bad8 <_strtol_l.constprop.0+0x104>)
 800b9ec:	2108      	movs	r1, #8
 800b9ee:	4694      	mov	ip, r2
 800b9f0:	001a      	movs	r2, r3
 800b9f2:	4660      	mov	r0, ip
 800b9f4:	7814      	ldrb	r4, [r2, #0]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	5d00      	ldrb	r0, [r0, r4]
 800b9fa:	001d      	movs	r5, r3
 800b9fc:	0007      	movs	r7, r0
 800b9fe:	400f      	ands	r7, r1
 800ba00:	4208      	tst	r0, r1
 800ba02:	d1f5      	bne.n	800b9f0 <_strtol_l.constprop.0+0x1c>
 800ba04:	2c2d      	cmp	r4, #45	; 0x2d
 800ba06:	d13d      	bne.n	800ba84 <_strtol_l.constprop.0+0xb0>
 800ba08:	2701      	movs	r7, #1
 800ba0a:	781c      	ldrb	r4, [r3, #0]
 800ba0c:	1c95      	adds	r5, r2, #2
 800ba0e:	2e00      	cmp	r6, #0
 800ba10:	d05e      	beq.n	800bad0 <_strtol_l.constprop.0+0xfc>
 800ba12:	2e10      	cmp	r6, #16
 800ba14:	d109      	bne.n	800ba2a <_strtol_l.constprop.0+0x56>
 800ba16:	2c30      	cmp	r4, #48	; 0x30
 800ba18:	d107      	bne.n	800ba2a <_strtol_l.constprop.0+0x56>
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	782b      	ldrb	r3, [r5, #0]
 800ba1e:	4393      	bics	r3, r2
 800ba20:	2b58      	cmp	r3, #88	; 0x58
 800ba22:	d150      	bne.n	800bac6 <_strtol_l.constprop.0+0xf2>
 800ba24:	2610      	movs	r6, #16
 800ba26:	786c      	ldrb	r4, [r5, #1]
 800ba28:	3502      	adds	r5, #2
 800ba2a:	4b2c      	ldr	r3, [pc, #176]	; (800badc <_strtol_l.constprop.0+0x108>)
 800ba2c:	0031      	movs	r1, r6
 800ba2e:	18fb      	adds	r3, r7, r3
 800ba30:	0018      	movs	r0, r3
 800ba32:	9303      	str	r3, [sp, #12]
 800ba34:	f7f4 fc08 	bl	8000248 <__aeabi_uidivmod>
 800ba38:	2200      	movs	r2, #0
 800ba3a:	9104      	str	r1, [sp, #16]
 800ba3c:	2101      	movs	r1, #1
 800ba3e:	4684      	mov	ip, r0
 800ba40:	0010      	movs	r0, r2
 800ba42:	4249      	negs	r1, r1
 800ba44:	0023      	movs	r3, r4
 800ba46:	3b30      	subs	r3, #48	; 0x30
 800ba48:	2b09      	cmp	r3, #9
 800ba4a:	d903      	bls.n	800ba54 <_strtol_l.constprop.0+0x80>
 800ba4c:	3b11      	subs	r3, #17
 800ba4e:	2b19      	cmp	r3, #25
 800ba50:	d81d      	bhi.n	800ba8e <_strtol_l.constprop.0+0xba>
 800ba52:	330a      	adds	r3, #10
 800ba54:	429e      	cmp	r6, r3
 800ba56:	dd1e      	ble.n	800ba96 <_strtol_l.constprop.0+0xc2>
 800ba58:	1c54      	adds	r4, r2, #1
 800ba5a:	d009      	beq.n	800ba70 <_strtol_l.constprop.0+0x9c>
 800ba5c:	000a      	movs	r2, r1
 800ba5e:	4584      	cmp	ip, r0
 800ba60:	d306      	bcc.n	800ba70 <_strtol_l.constprop.0+0x9c>
 800ba62:	d102      	bne.n	800ba6a <_strtol_l.constprop.0+0x96>
 800ba64:	9c04      	ldr	r4, [sp, #16]
 800ba66:	429c      	cmp	r4, r3
 800ba68:	db02      	blt.n	800ba70 <_strtol_l.constprop.0+0x9c>
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	4370      	muls	r0, r6
 800ba6e:	1818      	adds	r0, r3, r0
 800ba70:	782c      	ldrb	r4, [r5, #0]
 800ba72:	3501      	adds	r5, #1
 800ba74:	e7e6      	b.n	800ba44 <_strtol_l.constprop.0+0x70>
 800ba76:	f000 fa7d 	bl	800bf74 <__errno>
 800ba7a:	2316      	movs	r3, #22
 800ba7c:	6003      	str	r3, [r0, #0]
 800ba7e:	2000      	movs	r0, #0
 800ba80:	b007      	add	sp, #28
 800ba82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba84:	2c2b      	cmp	r4, #43	; 0x2b
 800ba86:	d1c2      	bne.n	800ba0e <_strtol_l.constprop.0+0x3a>
 800ba88:	781c      	ldrb	r4, [r3, #0]
 800ba8a:	1c95      	adds	r5, r2, #2
 800ba8c:	e7bf      	b.n	800ba0e <_strtol_l.constprop.0+0x3a>
 800ba8e:	0023      	movs	r3, r4
 800ba90:	3b61      	subs	r3, #97	; 0x61
 800ba92:	2b19      	cmp	r3, #25
 800ba94:	d9dd      	bls.n	800ba52 <_strtol_l.constprop.0+0x7e>
 800ba96:	1c53      	adds	r3, r2, #1
 800ba98:	d109      	bne.n	800baae <_strtol_l.constprop.0+0xda>
 800ba9a:	2322      	movs	r3, #34	; 0x22
 800ba9c:	9a05      	ldr	r2, [sp, #20]
 800ba9e:	9803      	ldr	r0, [sp, #12]
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	9b02      	ldr	r3, [sp, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d0eb      	beq.n	800ba80 <_strtol_l.constprop.0+0xac>
 800baa8:	1e6b      	subs	r3, r5, #1
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	e007      	b.n	800babe <_strtol_l.constprop.0+0xea>
 800baae:	2f00      	cmp	r7, #0
 800bab0:	d000      	beq.n	800bab4 <_strtol_l.constprop.0+0xe0>
 800bab2:	4240      	negs	r0, r0
 800bab4:	9b02      	ldr	r3, [sp, #8]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0e2      	beq.n	800ba80 <_strtol_l.constprop.0+0xac>
 800baba:	2a00      	cmp	r2, #0
 800babc:	d1f4      	bne.n	800baa8 <_strtol_l.constprop.0+0xd4>
 800babe:	9b02      	ldr	r3, [sp, #8]
 800bac0:	9a01      	ldr	r2, [sp, #4]
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	e7dc      	b.n	800ba80 <_strtol_l.constprop.0+0xac>
 800bac6:	2430      	movs	r4, #48	; 0x30
 800bac8:	2e00      	cmp	r6, #0
 800baca:	d1ae      	bne.n	800ba2a <_strtol_l.constprop.0+0x56>
 800bacc:	3608      	adds	r6, #8
 800bace:	e7ac      	b.n	800ba2a <_strtol_l.constprop.0+0x56>
 800bad0:	2c30      	cmp	r4, #48	; 0x30
 800bad2:	d0a2      	beq.n	800ba1a <_strtol_l.constprop.0+0x46>
 800bad4:	260a      	movs	r6, #10
 800bad6:	e7a8      	b.n	800ba2a <_strtol_l.constprop.0+0x56>
 800bad8:	08014379 	.word	0x08014379
 800badc:	7fffffff 	.word	0x7fffffff

0800bae0 <_strtol_r>:
 800bae0:	b510      	push	{r4, lr}
 800bae2:	f7ff ff77 	bl	800b9d4 <_strtol_l.constprop.0>
 800bae6:	bd10      	pop	{r4, pc}

0800bae8 <strtol>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	4c04      	ldr	r4, [pc, #16]	; (800bafc <strtol+0x14>)
 800baec:	0013      	movs	r3, r2
 800baee:	000a      	movs	r2, r1
 800baf0:	0001      	movs	r1, r0
 800baf2:	6820      	ldr	r0, [r4, #0]
 800baf4:	f7ff ff6e 	bl	800b9d4 <_strtol_l.constprop.0>
 800baf8:	bd10      	pop	{r4, pc}
 800bafa:	46c0      	nop			; (mov r8, r8)
 800bafc:	200006d8 	.word	0x200006d8

0800bb00 <std>:
 800bb00:	2300      	movs	r3, #0
 800bb02:	b510      	push	{r4, lr}
 800bb04:	0004      	movs	r4, r0
 800bb06:	6003      	str	r3, [r0, #0]
 800bb08:	6043      	str	r3, [r0, #4]
 800bb0a:	6083      	str	r3, [r0, #8]
 800bb0c:	8181      	strh	r1, [r0, #12]
 800bb0e:	6643      	str	r3, [r0, #100]	; 0x64
 800bb10:	81c2      	strh	r2, [r0, #14]
 800bb12:	6103      	str	r3, [r0, #16]
 800bb14:	6143      	str	r3, [r0, #20]
 800bb16:	6183      	str	r3, [r0, #24]
 800bb18:	0019      	movs	r1, r3
 800bb1a:	2208      	movs	r2, #8
 800bb1c:	305c      	adds	r0, #92	; 0x5c
 800bb1e:	f000 f97d 	bl	800be1c <memset>
 800bb22:	4b0b      	ldr	r3, [pc, #44]	; (800bb50 <std+0x50>)
 800bb24:	61e4      	str	r4, [r4, #28]
 800bb26:	6223      	str	r3, [r4, #32]
 800bb28:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <std+0x54>)
 800bb2a:	6263      	str	r3, [r4, #36]	; 0x24
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <std+0x58>)
 800bb2e:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb30:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <std+0x5c>)
 800bb32:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <std+0x60>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d005      	beq.n	800bb46 <std+0x46>
 800bb3a:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <std+0x64>)
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	d002      	beq.n	800bb46 <std+0x46>
 800bb40:	4b09      	ldr	r3, [pc, #36]	; (800bb68 <std+0x68>)
 800bb42:	429c      	cmp	r4, r3
 800bb44:	d103      	bne.n	800bb4e <std+0x4e>
 800bb46:	0020      	movs	r0, r4
 800bb48:	3058      	adds	r0, #88	; 0x58
 800bb4a:	f000 fa3d 	bl	800bfc8 <__retarget_lock_init_recursive>
 800bb4e:	bd10      	pop	{r4, pc}
 800bb50:	0800bd81 	.word	0x0800bd81
 800bb54:	0800bdad 	.word	0x0800bdad
 800bb58:	0800bde5 	.word	0x0800bde5
 800bb5c:	0800be11 	.word	0x0800be11
 800bb60:	20000b5c 	.word	0x20000b5c
 800bb64:	20000bc4 	.word	0x20000bc4
 800bb68:	20000c2c 	.word	0x20000c2c

0800bb6c <stdio_exit_handler>:
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	4a03      	ldr	r2, [pc, #12]	; (800bb7c <stdio_exit_handler+0x10>)
 800bb70:	4903      	ldr	r1, [pc, #12]	; (800bb80 <stdio_exit_handler+0x14>)
 800bb72:	4804      	ldr	r0, [pc, #16]	; (800bb84 <stdio_exit_handler+0x18>)
 800bb74:	f000 f86c 	bl	800bc50 <_fwalk_sglue>
 800bb78:	bd10      	pop	{r4, pc}
 800bb7a:	46c0      	nop			; (mov r8, r8)
 800bb7c:	2000043c 	.word	0x2000043c
 800bb80:	0800fac9 	.word	0x0800fac9
 800bb84:	200005b8 	.word	0x200005b8

0800bb88 <cleanup_stdio>:
 800bb88:	6841      	ldr	r1, [r0, #4]
 800bb8a:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <cleanup_stdio+0x30>)
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	0004      	movs	r4, r0
 800bb90:	4299      	cmp	r1, r3
 800bb92:	d001      	beq.n	800bb98 <cleanup_stdio+0x10>
 800bb94:	f003 ff98 	bl	800fac8 <_fclose_r>
 800bb98:	68a1      	ldr	r1, [r4, #8]
 800bb9a:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <cleanup_stdio+0x34>)
 800bb9c:	4299      	cmp	r1, r3
 800bb9e:	d002      	beq.n	800bba6 <cleanup_stdio+0x1e>
 800bba0:	0020      	movs	r0, r4
 800bba2:	f003 ff91 	bl	800fac8 <_fclose_r>
 800bba6:	68e1      	ldr	r1, [r4, #12]
 800bba8:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <cleanup_stdio+0x38>)
 800bbaa:	4299      	cmp	r1, r3
 800bbac:	d002      	beq.n	800bbb4 <cleanup_stdio+0x2c>
 800bbae:	0020      	movs	r0, r4
 800bbb0:	f003 ff8a 	bl	800fac8 <_fclose_r>
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	46c0      	nop			; (mov r8, r8)
 800bbb8:	20000b5c 	.word	0x20000b5c
 800bbbc:	20000bc4 	.word	0x20000bc4
 800bbc0:	20000c2c 	.word	0x20000c2c

0800bbc4 <global_stdio_init.part.0>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	4b09      	ldr	r3, [pc, #36]	; (800bbec <global_stdio_init.part.0+0x28>)
 800bbc8:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <global_stdio_init.part.0+0x2c>)
 800bbca:	2104      	movs	r1, #4
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	4809      	ldr	r0, [pc, #36]	; (800bbf4 <global_stdio_init.part.0+0x30>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f7ff ff95 	bl	800bb00 <std>
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	2109      	movs	r1, #9
 800bbda:	4807      	ldr	r0, [pc, #28]	; (800bbf8 <global_stdio_init.part.0+0x34>)
 800bbdc:	f7ff ff90 	bl	800bb00 <std>
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	2112      	movs	r1, #18
 800bbe4:	4805      	ldr	r0, [pc, #20]	; (800bbfc <global_stdio_init.part.0+0x38>)
 800bbe6:	f7ff ff8b 	bl	800bb00 <std>
 800bbea:	bd10      	pop	{r4, pc}
 800bbec:	20000c94 	.word	0x20000c94
 800bbf0:	0800bb6d 	.word	0x0800bb6d
 800bbf4:	20000b5c 	.word	0x20000b5c
 800bbf8:	20000bc4 	.word	0x20000bc4
 800bbfc:	20000c2c 	.word	0x20000c2c

0800bc00 <__sfp_lock_acquire>:
 800bc00:	b510      	push	{r4, lr}
 800bc02:	4802      	ldr	r0, [pc, #8]	; (800bc0c <__sfp_lock_acquire+0xc>)
 800bc04:	f000 f9e2 	bl	800bfcc <__retarget_lock_acquire_recursive>
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	46c0      	nop			; (mov r8, r8)
 800bc0c:	20000c9e 	.word	0x20000c9e

0800bc10 <__sfp_lock_release>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4802      	ldr	r0, [pc, #8]	; (800bc1c <__sfp_lock_release+0xc>)
 800bc14:	f000 f9db 	bl	800bfce <__retarget_lock_release_recursive>
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	46c0      	nop			; (mov r8, r8)
 800bc1c:	20000c9e 	.word	0x20000c9e

0800bc20 <__sinit>:
 800bc20:	b510      	push	{r4, lr}
 800bc22:	0004      	movs	r4, r0
 800bc24:	f7ff ffec 	bl	800bc00 <__sfp_lock_acquire>
 800bc28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <__sinit+0x14>
 800bc2e:	f7ff ffef 	bl	800bc10 <__sfp_lock_release>
 800bc32:	bd10      	pop	{r4, pc}
 800bc34:	4b04      	ldr	r3, [pc, #16]	; (800bc48 <__sinit+0x28>)
 800bc36:	6363      	str	r3, [r4, #52]	; 0x34
 800bc38:	4b04      	ldr	r3, [pc, #16]	; (800bc4c <__sinit+0x2c>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1f6      	bne.n	800bc2e <__sinit+0xe>
 800bc40:	f7ff ffc0 	bl	800bbc4 <global_stdio_init.part.0>
 800bc44:	e7f3      	b.n	800bc2e <__sinit+0xe>
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	0800bb89 	.word	0x0800bb89
 800bc4c:	20000c94 	.word	0x20000c94

0800bc50 <_fwalk_sglue>:
 800bc50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc52:	0014      	movs	r4, r2
 800bc54:	2600      	movs	r6, #0
 800bc56:	9000      	str	r0, [sp, #0]
 800bc58:	9101      	str	r1, [sp, #4]
 800bc5a:	68a5      	ldr	r5, [r4, #8]
 800bc5c:	6867      	ldr	r7, [r4, #4]
 800bc5e:	3f01      	subs	r7, #1
 800bc60:	d504      	bpl.n	800bc6c <_fwalk_sglue+0x1c>
 800bc62:	6824      	ldr	r4, [r4, #0]
 800bc64:	2c00      	cmp	r4, #0
 800bc66:	d1f8      	bne.n	800bc5a <_fwalk_sglue+0xa>
 800bc68:	0030      	movs	r0, r6
 800bc6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc6c:	89ab      	ldrh	r3, [r5, #12]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d908      	bls.n	800bc84 <_fwalk_sglue+0x34>
 800bc72:	220e      	movs	r2, #14
 800bc74:	5eab      	ldrsh	r3, [r5, r2]
 800bc76:	3301      	adds	r3, #1
 800bc78:	d004      	beq.n	800bc84 <_fwalk_sglue+0x34>
 800bc7a:	0029      	movs	r1, r5
 800bc7c:	9800      	ldr	r0, [sp, #0]
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	4798      	blx	r3
 800bc82:	4306      	orrs	r6, r0
 800bc84:	3568      	adds	r5, #104	; 0x68
 800bc86:	e7ea      	b.n	800bc5e <_fwalk_sglue+0xe>

0800bc88 <snprintf>:
 800bc88:	b40c      	push	{r2, r3}
 800bc8a:	b530      	push	{r4, r5, lr}
 800bc8c:	4b17      	ldr	r3, [pc, #92]	; (800bcec <snprintf+0x64>)
 800bc8e:	000c      	movs	r4, r1
 800bc90:	681d      	ldr	r5, [r3, #0]
 800bc92:	b09d      	sub	sp, #116	; 0x74
 800bc94:	2900      	cmp	r1, #0
 800bc96:	da08      	bge.n	800bcaa <snprintf+0x22>
 800bc98:	238b      	movs	r3, #139	; 0x8b
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	602b      	str	r3, [r5, #0]
 800bc9e:	4240      	negs	r0, r0
 800bca0:	b01d      	add	sp, #116	; 0x74
 800bca2:	bc30      	pop	{r4, r5}
 800bca4:	bc08      	pop	{r3}
 800bca6:	b002      	add	sp, #8
 800bca8:	4718      	bx	r3
 800bcaa:	2382      	movs	r3, #130	; 0x82
 800bcac:	466a      	mov	r2, sp
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	8293      	strh	r3, [r2, #20]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9002      	str	r0, [sp, #8]
 800bcb6:	9006      	str	r0, [sp, #24]
 800bcb8:	4299      	cmp	r1, r3
 800bcba:	d000      	beq.n	800bcbe <snprintf+0x36>
 800bcbc:	1e4b      	subs	r3, r1, #1
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	9307      	str	r3, [sp, #28]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	466a      	mov	r2, sp
 800bcc6:	425b      	negs	r3, r3
 800bcc8:	82d3      	strh	r3, [r2, #22]
 800bcca:	0028      	movs	r0, r5
 800bccc:	ab21      	add	r3, sp, #132	; 0x84
 800bcce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bcd0:	a902      	add	r1, sp, #8
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	f001 fa9a 	bl	800d20c <_svfprintf_r>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	da01      	bge.n	800bce0 <snprintf+0x58>
 800bcdc:	238b      	movs	r3, #139	; 0x8b
 800bcde:	602b      	str	r3, [r5, #0]
 800bce0:	2c00      	cmp	r4, #0
 800bce2:	d0dd      	beq.n	800bca0 <snprintf+0x18>
 800bce4:	2200      	movs	r2, #0
 800bce6:	9b02      	ldr	r3, [sp, #8]
 800bce8:	701a      	strb	r2, [r3, #0]
 800bcea:	e7d9      	b.n	800bca0 <snprintf+0x18>
 800bcec:	200006d8 	.word	0x200006d8

0800bcf0 <sprintf>:
 800bcf0:	b40e      	push	{r1, r2, r3}
 800bcf2:	b500      	push	{lr}
 800bcf4:	490b      	ldr	r1, [pc, #44]	; (800bd24 <sprintf+0x34>)
 800bcf6:	b09c      	sub	sp, #112	; 0x70
 800bcf8:	ab1d      	add	r3, sp, #116	; 0x74
 800bcfa:	9002      	str	r0, [sp, #8]
 800bcfc:	9006      	str	r0, [sp, #24]
 800bcfe:	9107      	str	r1, [sp, #28]
 800bd00:	9104      	str	r1, [sp, #16]
 800bd02:	4809      	ldr	r0, [pc, #36]	; (800bd28 <sprintf+0x38>)
 800bd04:	4909      	ldr	r1, [pc, #36]	; (800bd2c <sprintf+0x3c>)
 800bd06:	cb04      	ldmia	r3!, {r2}
 800bd08:	9105      	str	r1, [sp, #20]
 800bd0a:	6800      	ldr	r0, [r0, #0]
 800bd0c:	a902      	add	r1, sp, #8
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	f001 fa7c 	bl	800d20c <_svfprintf_r>
 800bd14:	2200      	movs	r2, #0
 800bd16:	9b02      	ldr	r3, [sp, #8]
 800bd18:	701a      	strb	r2, [r3, #0]
 800bd1a:	b01c      	add	sp, #112	; 0x70
 800bd1c:	bc08      	pop	{r3}
 800bd1e:	b003      	add	sp, #12
 800bd20:	4718      	bx	r3
 800bd22:	46c0      	nop			; (mov r8, r8)
 800bd24:	7fffffff 	.word	0x7fffffff
 800bd28:	200006d8 	.word	0x200006d8
 800bd2c:	ffff0208 	.word	0xffff0208

0800bd30 <sscanf>:
 800bd30:	b40e      	push	{r1, r2, r3}
 800bd32:	b530      	push	{r4, r5, lr}
 800bd34:	2381      	movs	r3, #129	; 0x81
 800bd36:	b09c      	sub	sp, #112	; 0x70
 800bd38:	466a      	mov	r2, sp
 800bd3a:	ac1f      	add	r4, sp, #124	; 0x7c
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	cc20      	ldmia	r4!, {r5}
 800bd40:	8293      	strh	r3, [r2, #20]
 800bd42:	9002      	str	r0, [sp, #8]
 800bd44:	9006      	str	r0, [sp, #24]
 800bd46:	f7f4 f9dd 	bl	8000104 <strlen>
 800bd4a:	4b0b      	ldr	r3, [pc, #44]	; (800bd78 <sscanf+0x48>)
 800bd4c:	466a      	mov	r2, sp
 800bd4e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd50:	2300      	movs	r3, #0
 800bd52:	9003      	str	r0, [sp, #12]
 800bd54:	9007      	str	r0, [sp, #28]
 800bd56:	4809      	ldr	r0, [pc, #36]	; (800bd7c <sscanf+0x4c>)
 800bd58:	930e      	str	r3, [sp, #56]	; 0x38
 800bd5a:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	82d3      	strh	r3, [r2, #22]
 800bd60:	a902      	add	r1, sp, #8
 800bd62:	0023      	movs	r3, r4
 800bd64:	002a      	movs	r2, r5
 800bd66:	6800      	ldr	r0, [r0, #0]
 800bd68:	9401      	str	r4, [sp, #4]
 800bd6a:	f002 fc91 	bl	800e690 <__ssvfscanf_r>
 800bd6e:	b01c      	add	sp, #112	; 0x70
 800bd70:	bc30      	pop	{r4, r5}
 800bd72:	bc08      	pop	{r3}
 800bd74:	b003      	add	sp, #12
 800bd76:	4718      	bx	r3
 800bd78:	0800bda9 	.word	0x0800bda9
 800bd7c:	200006d8 	.word	0x200006d8

0800bd80 <__sread>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	000c      	movs	r4, r1
 800bd84:	250e      	movs	r5, #14
 800bd86:	5f49      	ldrsh	r1, [r1, r5]
 800bd88:	f000 f8ba 	bl	800bf00 <_read_r>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	db03      	blt.n	800bd98 <__sread+0x18>
 800bd90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bd92:	181b      	adds	r3, r3, r0
 800bd94:	6523      	str	r3, [r4, #80]	; 0x50
 800bd96:	bd70      	pop	{r4, r5, r6, pc}
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	4a02      	ldr	r2, [pc, #8]	; (800bda4 <__sread+0x24>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	e7f9      	b.n	800bd96 <__sread+0x16>
 800bda2:	46c0      	nop			; (mov r8, r8)
 800bda4:	ffffefff 	.word	0xffffefff

0800bda8 <__seofread>:
 800bda8:	2000      	movs	r0, #0
 800bdaa:	4770      	bx	lr

0800bdac <__swrite>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	001f      	movs	r7, r3
 800bdb0:	898b      	ldrh	r3, [r1, #12]
 800bdb2:	0005      	movs	r5, r0
 800bdb4:	000c      	movs	r4, r1
 800bdb6:	0016      	movs	r6, r2
 800bdb8:	05db      	lsls	r3, r3, #23
 800bdba:	d505      	bpl.n	800bdc8 <__swrite+0x1c>
 800bdbc:	230e      	movs	r3, #14
 800bdbe:	5ec9      	ldrsh	r1, [r1, r3]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	f000 f888 	bl	800bed8 <_lseek_r>
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	4a05      	ldr	r2, [pc, #20]	; (800bde0 <__swrite+0x34>)
 800bdcc:	0028      	movs	r0, r5
 800bdce:	4013      	ands	r3, r2
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	0032      	movs	r2, r6
 800bdd4:	230e      	movs	r3, #14
 800bdd6:	5ee1      	ldrsh	r1, [r4, r3]
 800bdd8:	003b      	movs	r3, r7
 800bdda:	f000 f8b7 	bl	800bf4c <_write_r>
 800bdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde0:	ffffefff 	.word	0xffffefff

0800bde4 <__sseek>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	000c      	movs	r4, r1
 800bde8:	250e      	movs	r5, #14
 800bdea:	5f49      	ldrsh	r1, [r1, r5]
 800bdec:	f000 f874 	bl	800bed8 <_lseek_r>
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	1c42      	adds	r2, r0, #1
 800bdf4:	d103      	bne.n	800bdfe <__sseek+0x1a>
 800bdf6:	4a05      	ldr	r2, [pc, #20]	; (800be0c <__sseek+0x28>)
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	81a3      	strh	r3, [r4, #12]
 800bdfc:	bd70      	pop	{r4, r5, r6, pc}
 800bdfe:	2280      	movs	r2, #128	; 0x80
 800be00:	0152      	lsls	r2, r2, #5
 800be02:	4313      	orrs	r3, r2
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	6520      	str	r0, [r4, #80]	; 0x50
 800be08:	e7f8      	b.n	800bdfc <__sseek+0x18>
 800be0a:	46c0      	nop			; (mov r8, r8)
 800be0c:	ffffefff 	.word	0xffffefff

0800be10 <__sclose>:
 800be10:	b510      	push	{r4, lr}
 800be12:	230e      	movs	r3, #14
 800be14:	5ec9      	ldrsh	r1, [r1, r3]
 800be16:	f000 f84d 	bl	800beb4 <_close_r>
 800be1a:	bd10      	pop	{r4, pc}

0800be1c <memset>:
 800be1c:	0003      	movs	r3, r0
 800be1e:	1882      	adds	r2, r0, r2
 800be20:	4293      	cmp	r3, r2
 800be22:	d100      	bne.n	800be26 <memset+0xa>
 800be24:	4770      	bx	lr
 800be26:	7019      	strb	r1, [r3, #0]
 800be28:	3301      	adds	r3, #1
 800be2a:	e7f9      	b.n	800be20 <memset+0x4>

0800be2c <strncmp>:
 800be2c:	b530      	push	{r4, r5, lr}
 800be2e:	0005      	movs	r5, r0
 800be30:	1e10      	subs	r0, r2, #0
 800be32:	d00b      	beq.n	800be4c <strncmp+0x20>
 800be34:	2400      	movs	r4, #0
 800be36:	3a01      	subs	r2, #1
 800be38:	5d2b      	ldrb	r3, [r5, r4]
 800be3a:	5d08      	ldrb	r0, [r1, r4]
 800be3c:	4283      	cmp	r3, r0
 800be3e:	d104      	bne.n	800be4a <strncmp+0x1e>
 800be40:	42a2      	cmp	r2, r4
 800be42:	d002      	beq.n	800be4a <strncmp+0x1e>
 800be44:	3401      	adds	r4, #1
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1f6      	bne.n	800be38 <strncmp+0xc>
 800be4a:	1a18      	subs	r0, r3, r0
 800be4c:	bd30      	pop	{r4, r5, pc}

0800be4e <strncpy>:
 800be4e:	0003      	movs	r3, r0
 800be50:	b530      	push	{r4, r5, lr}
 800be52:	001d      	movs	r5, r3
 800be54:	2a00      	cmp	r2, #0
 800be56:	d006      	beq.n	800be66 <strncpy+0x18>
 800be58:	780c      	ldrb	r4, [r1, #0]
 800be5a:	3a01      	subs	r2, #1
 800be5c:	3301      	adds	r3, #1
 800be5e:	702c      	strb	r4, [r5, #0]
 800be60:	3101      	adds	r1, #1
 800be62:	2c00      	cmp	r4, #0
 800be64:	d1f5      	bne.n	800be52 <strncpy+0x4>
 800be66:	2100      	movs	r1, #0
 800be68:	189a      	adds	r2, r3, r2
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d100      	bne.n	800be70 <strncpy+0x22>
 800be6e:	bd30      	pop	{r4, r5, pc}
 800be70:	7019      	strb	r1, [r3, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	e7f9      	b.n	800be6a <strncpy+0x1c>

0800be76 <strstr>:
 800be76:	780a      	ldrb	r2, [r1, #0]
 800be78:	b530      	push	{r4, r5, lr}
 800be7a:	2a00      	cmp	r2, #0
 800be7c:	d10c      	bne.n	800be98 <strstr+0x22>
 800be7e:	bd30      	pop	{r4, r5, pc}
 800be80:	429a      	cmp	r2, r3
 800be82:	d108      	bne.n	800be96 <strstr+0x20>
 800be84:	2301      	movs	r3, #1
 800be86:	5ccc      	ldrb	r4, [r1, r3]
 800be88:	2c00      	cmp	r4, #0
 800be8a:	d0f8      	beq.n	800be7e <strstr+0x8>
 800be8c:	5cc5      	ldrb	r5, [r0, r3]
 800be8e:	42a5      	cmp	r5, r4
 800be90:	d101      	bne.n	800be96 <strstr+0x20>
 800be92:	3301      	adds	r3, #1
 800be94:	e7f7      	b.n	800be86 <strstr+0x10>
 800be96:	3001      	adds	r0, #1
 800be98:	7803      	ldrb	r3, [r0, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1f0      	bne.n	800be80 <strstr+0xa>
 800be9e:	0018      	movs	r0, r3
 800bea0:	e7ed      	b.n	800be7e <strstr+0x8>
	...

0800bea4 <__locale_mb_cur_max>:
 800bea4:	2294      	movs	r2, #148	; 0x94
 800bea6:	4b02      	ldr	r3, [pc, #8]	; (800beb0 <__locale_mb_cur_max+0xc>)
 800bea8:	0052      	lsls	r2, r2, #1
 800beaa:	5c98      	ldrb	r0, [r3, r2]
 800beac:	4770      	bx	lr
 800beae:	46c0      	nop			; (mov r8, r8)
 800beb0:	20000448 	.word	0x20000448

0800beb4 <_close_r>:
 800beb4:	2300      	movs	r3, #0
 800beb6:	b570      	push	{r4, r5, r6, lr}
 800beb8:	4d06      	ldr	r5, [pc, #24]	; (800bed4 <_close_r+0x20>)
 800beba:	0004      	movs	r4, r0
 800bebc:	0008      	movs	r0, r1
 800bebe:	602b      	str	r3, [r5, #0]
 800bec0:	f7f7 fb4d 	bl	800355e <_close>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d103      	bne.n	800bed0 <_close_r+0x1c>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d000      	beq.n	800bed0 <_close_r+0x1c>
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	bd70      	pop	{r4, r5, r6, pc}
 800bed2:	46c0      	nop			; (mov r8, r8)
 800bed4:	20000c98 	.word	0x20000c98

0800bed8 <_lseek_r>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	0004      	movs	r4, r0
 800bedc:	0008      	movs	r0, r1
 800bede:	0011      	movs	r1, r2
 800bee0:	001a      	movs	r2, r3
 800bee2:	2300      	movs	r3, #0
 800bee4:	4d05      	ldr	r5, [pc, #20]	; (800befc <_lseek_r+0x24>)
 800bee6:	602b      	str	r3, [r5, #0]
 800bee8:	f7f7 fb5a 	bl	80035a0 <_lseek>
 800beec:	1c43      	adds	r3, r0, #1
 800beee:	d103      	bne.n	800bef8 <_lseek_r+0x20>
 800bef0:	682b      	ldr	r3, [r5, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d000      	beq.n	800bef8 <_lseek_r+0x20>
 800bef6:	6023      	str	r3, [r4, #0]
 800bef8:	bd70      	pop	{r4, r5, r6, pc}
 800befa:	46c0      	nop			; (mov r8, r8)
 800befc:	20000c98 	.word	0x20000c98

0800bf00 <_read_r>:
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	0004      	movs	r4, r0
 800bf04:	0008      	movs	r0, r1
 800bf06:	0011      	movs	r1, r2
 800bf08:	001a      	movs	r2, r3
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	4d05      	ldr	r5, [pc, #20]	; (800bf24 <_read_r+0x24>)
 800bf0e:	602b      	str	r3, [r5, #0]
 800bf10:	f7f7 faec 	bl	80034ec <_read>
 800bf14:	1c43      	adds	r3, r0, #1
 800bf16:	d103      	bne.n	800bf20 <_read_r+0x20>
 800bf18:	682b      	ldr	r3, [r5, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d000      	beq.n	800bf20 <_read_r+0x20>
 800bf1e:	6023      	str	r3, [r4, #0]
 800bf20:	bd70      	pop	{r4, r5, r6, pc}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	20000c98 	.word	0x20000c98

0800bf28 <_sbrk_r>:
 800bf28:	2300      	movs	r3, #0
 800bf2a:	b570      	push	{r4, r5, r6, lr}
 800bf2c:	4d06      	ldr	r5, [pc, #24]	; (800bf48 <_sbrk_r+0x20>)
 800bf2e:	0004      	movs	r4, r0
 800bf30:	0008      	movs	r0, r1
 800bf32:	602b      	str	r3, [r5, #0]
 800bf34:	f7f7 fb40 	bl	80035b8 <_sbrk>
 800bf38:	1c43      	adds	r3, r0, #1
 800bf3a:	d103      	bne.n	800bf44 <_sbrk_r+0x1c>
 800bf3c:	682b      	ldr	r3, [r5, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d000      	beq.n	800bf44 <_sbrk_r+0x1c>
 800bf42:	6023      	str	r3, [r4, #0]
 800bf44:	bd70      	pop	{r4, r5, r6, pc}
 800bf46:	46c0      	nop			; (mov r8, r8)
 800bf48:	20000c98 	.word	0x20000c98

0800bf4c <_write_r>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	0004      	movs	r4, r0
 800bf50:	0008      	movs	r0, r1
 800bf52:	0011      	movs	r1, r2
 800bf54:	001a      	movs	r2, r3
 800bf56:	2300      	movs	r3, #0
 800bf58:	4d05      	ldr	r5, [pc, #20]	; (800bf70 <_write_r+0x24>)
 800bf5a:	602b      	str	r3, [r5, #0]
 800bf5c:	f7f7 fae3 	bl	8003526 <_write>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	d103      	bne.n	800bf6c <_write_r+0x20>
 800bf64:	682b      	ldr	r3, [r5, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d000      	beq.n	800bf6c <_write_r+0x20>
 800bf6a:	6023      	str	r3, [r4, #0]
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
 800bf6e:	46c0      	nop			; (mov r8, r8)
 800bf70:	20000c98 	.word	0x20000c98

0800bf74 <__errno>:
 800bf74:	4b01      	ldr	r3, [pc, #4]	; (800bf7c <__errno+0x8>)
 800bf76:	6818      	ldr	r0, [r3, #0]
 800bf78:	4770      	bx	lr
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	200006d8 	.word	0x200006d8

0800bf80 <__libc_init_array>:
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	2600      	movs	r6, #0
 800bf84:	4c0c      	ldr	r4, [pc, #48]	; (800bfb8 <__libc_init_array+0x38>)
 800bf86:	4d0d      	ldr	r5, [pc, #52]	; (800bfbc <__libc_init_array+0x3c>)
 800bf88:	1b64      	subs	r4, r4, r5
 800bf8a:	10a4      	asrs	r4, r4, #2
 800bf8c:	42a6      	cmp	r6, r4
 800bf8e:	d109      	bne.n	800bfa4 <__libc_init_array+0x24>
 800bf90:	2600      	movs	r6, #0
 800bf92:	f006 fcc5 	bl	8012920 <_init>
 800bf96:	4c0a      	ldr	r4, [pc, #40]	; (800bfc0 <__libc_init_array+0x40>)
 800bf98:	4d0a      	ldr	r5, [pc, #40]	; (800bfc4 <__libc_init_array+0x44>)
 800bf9a:	1b64      	subs	r4, r4, r5
 800bf9c:	10a4      	asrs	r4, r4, #2
 800bf9e:	42a6      	cmp	r6, r4
 800bfa0:	d105      	bne.n	800bfae <__libc_init_array+0x2e>
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	00b3      	lsls	r3, r6, #2
 800bfa6:	58eb      	ldr	r3, [r5, r3]
 800bfa8:	4798      	blx	r3
 800bfaa:	3601      	adds	r6, #1
 800bfac:	e7ee      	b.n	800bf8c <__libc_init_array+0xc>
 800bfae:	00b3      	lsls	r3, r6, #2
 800bfb0:	58eb      	ldr	r3, [r5, r3]
 800bfb2:	4798      	blx	r3
 800bfb4:	3601      	adds	r6, #1
 800bfb6:	e7f2      	b.n	800bf9e <__libc_init_array+0x1e>
 800bfb8:	08014794 	.word	0x08014794
 800bfbc:	08014794 	.word	0x08014794
 800bfc0:	0801479c 	.word	0x0801479c
 800bfc4:	08014794 	.word	0x08014794

0800bfc8 <__retarget_lock_init_recursive>:
 800bfc8:	4770      	bx	lr

0800bfca <__retarget_lock_close_recursive>:
 800bfca:	4770      	bx	lr

0800bfcc <__retarget_lock_acquire_recursive>:
 800bfcc:	4770      	bx	lr

0800bfce <__retarget_lock_release_recursive>:
 800bfce:	4770      	bx	lr

0800bfd0 <sysconf>:
 800bfd0:	2380      	movs	r3, #128	; 0x80
 800bfd2:	b510      	push	{r4, lr}
 800bfd4:	2808      	cmp	r0, #8
 800bfd6:	d004      	beq.n	800bfe2 <sysconf+0x12>
 800bfd8:	f7ff ffcc 	bl	800bf74 <__errno>
 800bfdc:	2316      	movs	r3, #22
 800bfde:	6003      	str	r3, [r0, #0]
 800bfe0:	3b17      	subs	r3, #23
 800bfe2:	0018      	movs	r0, r3
 800bfe4:	bd10      	pop	{r4, pc}

0800bfe6 <memcpy>:
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d100      	bne.n	800bff0 <memcpy+0xa>
 800bfee:	bd10      	pop	{r4, pc}
 800bff0:	5ccc      	ldrb	r4, [r1, r3]
 800bff2:	54c4      	strb	r4, [r0, r3]
 800bff4:	3301      	adds	r3, #1
 800bff6:	e7f8      	b.n	800bfea <memcpy+0x4>

0800bff8 <nan>:
 800bff8:	2000      	movs	r0, #0
 800bffa:	4901      	ldr	r1, [pc, #4]	; (800c000 <nan+0x8>)
 800bffc:	4770      	bx	lr
 800bffe:	46c0      	nop			; (mov r8, r8)
 800c000:	7ff80000 	.word	0x7ff80000

0800c004 <nanf>:
 800c004:	4800      	ldr	r0, [pc, #0]	; (800c008 <nanf+0x4>)
 800c006:	4770      	bx	lr
 800c008:	7fc00000 	.word	0x7fc00000

0800c00c <register_fini>:
 800c00c:	4b03      	ldr	r3, [pc, #12]	; (800c01c <register_fini+0x10>)
 800c00e:	b510      	push	{r4, lr}
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <register_fini+0xe>
 800c014:	4802      	ldr	r0, [pc, #8]	; (800c020 <register_fini+0x14>)
 800c016:	f000 f805 	bl	800c024 <atexit>
 800c01a:	bd10      	pop	{r4, pc}
 800c01c:	00000000 	.word	0x00000000
 800c020:	0800fd81 	.word	0x0800fd81

0800c024 <atexit>:
 800c024:	2300      	movs	r3, #0
 800c026:	b510      	push	{r4, lr}
 800c028:	0001      	movs	r1, r0
 800c02a:	001a      	movs	r2, r3
 800c02c:	0018      	movs	r0, r3
 800c02e:	f003 fef9 	bl	800fe24 <__register_exitproc>
 800c032:	bd10      	pop	{r4, pc}

0800c034 <_malloc_trim_r>:
 800c034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c036:	0004      	movs	r4, r0
 800c038:	2008      	movs	r0, #8
 800c03a:	000d      	movs	r5, r1
 800c03c:	f7ff ffc8 	bl	800bfd0 <sysconf>
 800c040:	0006      	movs	r6, r0
 800c042:	0020      	movs	r0, r4
 800c044:	f7fe fe7e 	bl	800ad44 <__malloc_lock>
 800c048:	2203      	movs	r2, #3
 800c04a:	4f21      	ldr	r7, [pc, #132]	; (800c0d0 <_malloc_trim_r+0x9c>)
 800c04c:	0031      	movs	r1, r6
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	4393      	bics	r3, r2
 800c054:	1b58      	subs	r0, r3, r5
 800c056:	3811      	subs	r0, #17
 800c058:	1980      	adds	r0, r0, r6
 800c05a:	9301      	str	r3, [sp, #4]
 800c05c:	f7f4 f86e 	bl	800013c <__udivsi3>
 800c060:	1e45      	subs	r5, r0, #1
 800c062:	4375      	muls	r5, r6
 800c064:	42ae      	cmp	r6, r5
 800c066:	dd04      	ble.n	800c072 <_malloc_trim_r+0x3e>
 800c068:	0020      	movs	r0, r4
 800c06a:	f7fe fe73 	bl	800ad54 <__malloc_unlock>
 800c06e:	2000      	movs	r0, #0
 800c070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c072:	2100      	movs	r1, #0
 800c074:	0020      	movs	r0, r4
 800c076:	f7ff ff57 	bl	800bf28 <_sbrk_r>
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	9a01      	ldr	r2, [sp, #4]
 800c07e:	189b      	adds	r3, r3, r2
 800c080:	4298      	cmp	r0, r3
 800c082:	d1f1      	bne.n	800c068 <_malloc_trim_r+0x34>
 800c084:	0020      	movs	r0, r4
 800c086:	4269      	negs	r1, r5
 800c088:	f7ff ff4e 	bl	800bf28 <_sbrk_r>
 800c08c:	3001      	adds	r0, #1
 800c08e:	d110      	bne.n	800c0b2 <_malloc_trim_r+0x7e>
 800c090:	2100      	movs	r1, #0
 800c092:	0020      	movs	r0, r4
 800c094:	f7ff ff48 	bl	800bf28 <_sbrk_r>
 800c098:	68ba      	ldr	r2, [r7, #8]
 800c09a:	1a81      	subs	r1, r0, r2
 800c09c:	290f      	cmp	r1, #15
 800c09e:	dde3      	ble.n	800c068 <_malloc_trim_r+0x34>
 800c0a0:	4d0c      	ldr	r5, [pc, #48]	; (800c0d4 <_malloc_trim_r+0xa0>)
 800c0a2:	4b0d      	ldr	r3, [pc, #52]	; (800c0d8 <_malloc_trim_r+0xa4>)
 800c0a4:	682d      	ldr	r5, [r5, #0]
 800c0a6:	1b40      	subs	r0, r0, r5
 800c0a8:	6018      	str	r0, [r3, #0]
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	430b      	orrs	r3, r1
 800c0ae:	6053      	str	r3, [r2, #4]
 800c0b0:	e7da      	b.n	800c068 <_malloc_trim_r+0x34>
 800c0b2:	2601      	movs	r6, #1
 800c0b4:	9b01      	ldr	r3, [sp, #4]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	1b5b      	subs	r3, r3, r5
 800c0ba:	4333      	orrs	r3, r6
 800c0bc:	6053      	str	r3, [r2, #4]
 800c0be:	4a06      	ldr	r2, [pc, #24]	; (800c0d8 <_malloc_trim_r+0xa4>)
 800c0c0:	0020      	movs	r0, r4
 800c0c2:	6813      	ldr	r3, [r2, #0]
 800c0c4:	1b5b      	subs	r3, r3, r5
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	f7fe fe44 	bl	800ad54 <__malloc_unlock>
 800c0cc:	0030      	movs	r0, r6
 800c0ce:	e7cf      	b.n	800c070 <_malloc_trim_r+0x3c>
 800c0d0:	2000002c 	.word	0x2000002c
 800c0d4:	20000434 	.word	0x20000434
 800c0d8:	20000b28 	.word	0x20000b28

0800c0dc <_free_r>:
 800c0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0de:	1e0d      	subs	r5, r1, #0
 800c0e0:	9001      	str	r0, [sp, #4]
 800c0e2:	d02d      	beq.n	800c140 <_free_r+0x64>
 800c0e4:	f7fe fe2e 	bl	800ad44 <__malloc_lock>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	0029      	movs	r1, r5
 800c0ec:	469c      	mov	ip, r3
 800c0ee:	3908      	subs	r1, #8
 800c0f0:	684f      	ldr	r7, [r1, #4]
 800c0f2:	4662      	mov	r2, ip
 800c0f4:	003b      	movs	r3, r7
 800c0f6:	4664      	mov	r4, ip
 800c0f8:	4393      	bics	r3, r2
 800c0fa:	18c8      	adds	r0, r1, r3
 800c0fc:	6845      	ldr	r5, [r0, #4]
 800c0fe:	3202      	adds	r2, #2
 800c100:	4395      	bics	r5, r2
 800c102:	4a4a      	ldr	r2, [pc, #296]	; (800c22c <_free_r+0x150>)
 800c104:	4027      	ands	r7, r4
 800c106:	6896      	ldr	r6, [r2, #8]
 800c108:	4286      	cmp	r6, r0
 800c10a:	d11a      	bne.n	800c142 <_free_r+0x66>
 800c10c:	195b      	adds	r3, r3, r5
 800c10e:	2f00      	cmp	r7, #0
 800c110:	d106      	bne.n	800c120 <_free_r+0x44>
 800c112:	6808      	ldr	r0, [r1, #0]
 800c114:	1a09      	subs	r1, r1, r0
 800c116:	688d      	ldr	r5, [r1, #8]
 800c118:	181b      	adds	r3, r3, r0
 800c11a:	68c8      	ldr	r0, [r1, #12]
 800c11c:	60e8      	str	r0, [r5, #12]
 800c11e:	6085      	str	r5, [r0, #8]
 800c120:	2001      	movs	r0, #1
 800c122:	4318      	orrs	r0, r3
 800c124:	6048      	str	r0, [r1, #4]
 800c126:	6091      	str	r1, [r2, #8]
 800c128:	4a41      	ldr	r2, [pc, #260]	; (800c230 <_free_r+0x154>)
 800c12a:	6812      	ldr	r2, [r2, #0]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d804      	bhi.n	800c13a <_free_r+0x5e>
 800c130:	4b40      	ldr	r3, [pc, #256]	; (800c234 <_free_r+0x158>)
 800c132:	9801      	ldr	r0, [sp, #4]
 800c134:	6819      	ldr	r1, [r3, #0]
 800c136:	f7ff ff7d 	bl	800c034 <_malloc_trim_r>
 800c13a:	9801      	ldr	r0, [sp, #4]
 800c13c:	f7fe fe0a 	bl	800ad54 <__malloc_unlock>
 800c140:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c142:	2600      	movs	r6, #0
 800c144:	6045      	str	r5, [r0, #4]
 800c146:	42b7      	cmp	r7, r6
 800c148:	d109      	bne.n	800c15e <_free_r+0x82>
 800c14a:	680f      	ldr	r7, [r1, #0]
 800c14c:	4c3a      	ldr	r4, [pc, #232]	; (800c238 <_free_r+0x15c>)
 800c14e:	1bc9      	subs	r1, r1, r7
 800c150:	19db      	adds	r3, r3, r7
 800c152:	688f      	ldr	r7, [r1, #8]
 800c154:	42a7      	cmp	r7, r4
 800c156:	d02c      	beq.n	800c1b2 <_free_r+0xd6>
 800c158:	68cc      	ldr	r4, [r1, #12]
 800c15a:	60fc      	str	r4, [r7, #12]
 800c15c:	60a7      	str	r7, [r4, #8]
 800c15e:	1947      	adds	r7, r0, r5
 800c160:	687c      	ldr	r4, [r7, #4]
 800c162:	2701      	movs	r7, #1
 800c164:	423c      	tst	r4, r7
 800c166:	d10b      	bne.n	800c180 <_free_r+0xa4>
 800c168:	195b      	adds	r3, r3, r5
 800c16a:	6885      	ldr	r5, [r0, #8]
 800c16c:	2e00      	cmp	r6, #0
 800c16e:	d122      	bne.n	800c1b6 <_free_r+0xda>
 800c170:	4c31      	ldr	r4, [pc, #196]	; (800c238 <_free_r+0x15c>)
 800c172:	42a5      	cmp	r5, r4
 800c174:	d11f      	bne.n	800c1b6 <_free_r+0xda>
 800c176:	003e      	movs	r6, r7
 800c178:	6151      	str	r1, [r2, #20]
 800c17a:	6111      	str	r1, [r2, #16]
 800c17c:	60cd      	str	r5, [r1, #12]
 800c17e:	608d      	str	r5, [r1, #8]
 800c180:	2501      	movs	r5, #1
 800c182:	0028      	movs	r0, r5
 800c184:	4318      	orrs	r0, r3
 800c186:	6048      	str	r0, [r1, #4]
 800c188:	50cb      	str	r3, [r1, r3]
 800c18a:	2e00      	cmp	r6, #0
 800c18c:	d1d5      	bne.n	800c13a <_free_r+0x5e>
 800c18e:	2080      	movs	r0, #128	; 0x80
 800c190:	0080      	lsls	r0, r0, #2
 800c192:	4283      	cmp	r3, r0
 800c194:	d213      	bcs.n	800c1be <_free_r+0xe2>
 800c196:	08d8      	lsrs	r0, r3, #3
 800c198:	095b      	lsrs	r3, r3, #5
 800c19a:	409d      	lsls	r5, r3
 800c19c:	6853      	ldr	r3, [r2, #4]
 800c19e:	431d      	orrs	r5, r3
 800c1a0:	00c3      	lsls	r3, r0, #3
 800c1a2:	189b      	adds	r3, r3, r2
 800c1a4:	6055      	str	r5, [r2, #4]
 800c1a6:	689a      	ldr	r2, [r3, #8]
 800c1a8:	60cb      	str	r3, [r1, #12]
 800c1aa:	608a      	str	r2, [r1, #8]
 800c1ac:	6099      	str	r1, [r3, #8]
 800c1ae:	60d1      	str	r1, [r2, #12]
 800c1b0:	e7c3      	b.n	800c13a <_free_r+0x5e>
 800c1b2:	4666      	mov	r6, ip
 800c1b4:	e7d3      	b.n	800c15e <_free_r+0x82>
 800c1b6:	68c0      	ldr	r0, [r0, #12]
 800c1b8:	60e8      	str	r0, [r5, #12]
 800c1ba:	6085      	str	r5, [r0, #8]
 800c1bc:	e7e0      	b.n	800c180 <_free_r+0xa4>
 800c1be:	0a5d      	lsrs	r5, r3, #9
 800c1c0:	2d04      	cmp	r5, #4
 800c1c2:	d812      	bhi.n	800c1ea <_free_r+0x10e>
 800c1c4:	0998      	lsrs	r0, r3, #6
 800c1c6:	3038      	adds	r0, #56	; 0x38
 800c1c8:	00c6      	lsls	r6, r0, #3
 800c1ca:	18b6      	adds	r6, r6, r2
 800c1cc:	68b5      	ldr	r5, [r6, #8]
 800c1ce:	2703      	movs	r7, #3
 800c1d0:	42ae      	cmp	r6, r5
 800c1d2:	d125      	bne.n	800c220 <_free_r+0x144>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	1080      	asrs	r0, r0, #2
 800c1d8:	4083      	lsls	r3, r0
 800c1da:	6850      	ldr	r0, [r2, #4]
 800c1dc:	4303      	orrs	r3, r0
 800c1de:	6053      	str	r3, [r2, #4]
 800c1e0:	60ce      	str	r6, [r1, #12]
 800c1e2:	608d      	str	r5, [r1, #8]
 800c1e4:	60b1      	str	r1, [r6, #8]
 800c1e6:	60e9      	str	r1, [r5, #12]
 800c1e8:	e7a7      	b.n	800c13a <_free_r+0x5e>
 800c1ea:	2d14      	cmp	r5, #20
 800c1ec:	d802      	bhi.n	800c1f4 <_free_r+0x118>
 800c1ee:	0028      	movs	r0, r5
 800c1f0:	305b      	adds	r0, #91	; 0x5b
 800c1f2:	e7e9      	b.n	800c1c8 <_free_r+0xec>
 800c1f4:	2d54      	cmp	r5, #84	; 0x54
 800c1f6:	d802      	bhi.n	800c1fe <_free_r+0x122>
 800c1f8:	0b18      	lsrs	r0, r3, #12
 800c1fa:	306e      	adds	r0, #110	; 0x6e
 800c1fc:	e7e4      	b.n	800c1c8 <_free_r+0xec>
 800c1fe:	20aa      	movs	r0, #170	; 0xaa
 800c200:	0040      	lsls	r0, r0, #1
 800c202:	4285      	cmp	r5, r0
 800c204:	d802      	bhi.n	800c20c <_free_r+0x130>
 800c206:	0bd8      	lsrs	r0, r3, #15
 800c208:	3077      	adds	r0, #119	; 0x77
 800c20a:	e7dd      	b.n	800c1c8 <_free_r+0xec>
 800c20c:	4e0b      	ldr	r6, [pc, #44]	; (800c23c <_free_r+0x160>)
 800c20e:	207e      	movs	r0, #126	; 0x7e
 800c210:	42b5      	cmp	r5, r6
 800c212:	d8d9      	bhi.n	800c1c8 <_free_r+0xec>
 800c214:	0c98      	lsrs	r0, r3, #18
 800c216:	307c      	adds	r0, #124	; 0x7c
 800c218:	e7d6      	b.n	800c1c8 <_free_r+0xec>
 800c21a:	68ad      	ldr	r5, [r5, #8]
 800c21c:	42ae      	cmp	r6, r5
 800c21e:	d003      	beq.n	800c228 <_free_r+0x14c>
 800c220:	686a      	ldr	r2, [r5, #4]
 800c222:	43ba      	bics	r2, r7
 800c224:	429a      	cmp	r2, r3
 800c226:	d8f8      	bhi.n	800c21a <_free_r+0x13e>
 800c228:	68ee      	ldr	r6, [r5, #12]
 800c22a:	e7d9      	b.n	800c1e0 <_free_r+0x104>
 800c22c:	2000002c 	.word	0x2000002c
 800c230:	20000438 	.word	0x20000438
 800c234:	20000b58 	.word	0x20000b58
 800c238:	20000034 	.word	0x20000034
 800c23c:	00000554 	.word	0x00000554

0800c240 <rshift>:
 800c240:	0002      	movs	r2, r0
 800c242:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c244:	6904      	ldr	r4, [r0, #16]
 800c246:	114b      	asrs	r3, r1, #5
 800c248:	b085      	sub	sp, #20
 800c24a:	3214      	adds	r2, #20
 800c24c:	9302      	str	r3, [sp, #8]
 800c24e:	114d      	asrs	r5, r1, #5
 800c250:	0013      	movs	r3, r2
 800c252:	42ac      	cmp	r4, r5
 800c254:	dd32      	ble.n	800c2bc <rshift+0x7c>
 800c256:	261f      	movs	r6, #31
 800c258:	000f      	movs	r7, r1
 800c25a:	114b      	asrs	r3, r1, #5
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	00a5      	lsls	r5, r4, #2
 800c260:	18d3      	adds	r3, r2, r3
 800c262:	4037      	ands	r7, r6
 800c264:	1955      	adds	r5, r2, r5
 800c266:	9300      	str	r3, [sp, #0]
 800c268:	9701      	str	r7, [sp, #4]
 800c26a:	4231      	tst	r1, r6
 800c26c:	d10d      	bne.n	800c28a <rshift+0x4a>
 800c26e:	0016      	movs	r6, r2
 800c270:	0019      	movs	r1, r3
 800c272:	428d      	cmp	r5, r1
 800c274:	d836      	bhi.n	800c2e4 <rshift+0xa4>
 800c276:	9900      	ldr	r1, [sp, #0]
 800c278:	2300      	movs	r3, #0
 800c27a:	3903      	subs	r1, #3
 800c27c:	428d      	cmp	r5, r1
 800c27e:	d302      	bcc.n	800c286 <rshift+0x46>
 800c280:	9b02      	ldr	r3, [sp, #8]
 800c282:	1ae4      	subs	r4, r4, r3
 800c284:	00a3      	lsls	r3, r4, #2
 800c286:	18d3      	adds	r3, r2, r3
 800c288:	e018      	b.n	800c2bc <rshift+0x7c>
 800c28a:	2120      	movs	r1, #32
 800c28c:	9e01      	ldr	r6, [sp, #4]
 800c28e:	9f01      	ldr	r7, [sp, #4]
 800c290:	1b89      	subs	r1, r1, r6
 800c292:	9e00      	ldr	r6, [sp, #0]
 800c294:	9103      	str	r1, [sp, #12]
 800c296:	ce02      	ldmia	r6!, {r1}
 800c298:	4694      	mov	ip, r2
 800c29a:	40f9      	lsrs	r1, r7
 800c29c:	42b5      	cmp	r5, r6
 800c29e:	d816      	bhi.n	800c2ce <rshift+0x8e>
 800c2a0:	9e00      	ldr	r6, [sp, #0]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	3601      	adds	r6, #1
 800c2a6:	42b5      	cmp	r5, r6
 800c2a8:	d303      	bcc.n	800c2b2 <rshift+0x72>
 800c2aa:	9b02      	ldr	r3, [sp, #8]
 800c2ac:	1ae3      	subs	r3, r4, r3
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	3b04      	subs	r3, #4
 800c2b2:	18d3      	adds	r3, r2, r3
 800c2b4:	6019      	str	r1, [r3, #0]
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	d000      	beq.n	800c2bc <rshift+0x7c>
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	1a99      	subs	r1, r3, r2
 800c2be:	1089      	asrs	r1, r1, #2
 800c2c0:	6101      	str	r1, [r0, #16]
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d101      	bne.n	800c2ca <rshift+0x8a>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	6143      	str	r3, [r0, #20]
 800c2ca:	b005      	add	sp, #20
 800c2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ce:	6837      	ldr	r7, [r6, #0]
 800c2d0:	9b03      	ldr	r3, [sp, #12]
 800c2d2:	409f      	lsls	r7, r3
 800c2d4:	430f      	orrs	r7, r1
 800c2d6:	4661      	mov	r1, ip
 800c2d8:	c180      	stmia	r1!, {r7}
 800c2da:	468c      	mov	ip, r1
 800c2dc:	9b01      	ldr	r3, [sp, #4]
 800c2de:	ce02      	ldmia	r6!, {r1}
 800c2e0:	40d9      	lsrs	r1, r3
 800c2e2:	e7db      	b.n	800c29c <rshift+0x5c>
 800c2e4:	c980      	ldmia	r1!, {r7}
 800c2e6:	c680      	stmia	r6!, {r7}
 800c2e8:	e7c3      	b.n	800c272 <rshift+0x32>

0800c2ea <__hexdig_fun>:
 800c2ea:	0002      	movs	r2, r0
 800c2ec:	3a30      	subs	r2, #48	; 0x30
 800c2ee:	0003      	movs	r3, r0
 800c2f0:	2a09      	cmp	r2, #9
 800c2f2:	d802      	bhi.n	800c2fa <__hexdig_fun+0x10>
 800c2f4:	3b20      	subs	r3, #32
 800c2f6:	b2d8      	uxtb	r0, r3
 800c2f8:	4770      	bx	lr
 800c2fa:	0002      	movs	r2, r0
 800c2fc:	3a61      	subs	r2, #97	; 0x61
 800c2fe:	2a05      	cmp	r2, #5
 800c300:	d801      	bhi.n	800c306 <__hexdig_fun+0x1c>
 800c302:	3b47      	subs	r3, #71	; 0x47
 800c304:	e7f7      	b.n	800c2f6 <__hexdig_fun+0xc>
 800c306:	001a      	movs	r2, r3
 800c308:	3a41      	subs	r2, #65	; 0x41
 800c30a:	2000      	movs	r0, #0
 800c30c:	2a05      	cmp	r2, #5
 800c30e:	d8f3      	bhi.n	800c2f8 <__hexdig_fun+0xe>
 800c310:	3b27      	subs	r3, #39	; 0x27
 800c312:	e7f0      	b.n	800c2f6 <__hexdig_fun+0xc>

0800c314 <__gethex>:
 800c314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c316:	b089      	sub	sp, #36	; 0x24
 800c318:	9307      	str	r3, [sp, #28]
 800c31a:	2302      	movs	r3, #2
 800c31c:	9201      	str	r2, [sp, #4]
 800c31e:	680a      	ldr	r2, [r1, #0]
 800c320:	425b      	negs	r3, r3
 800c322:	9003      	str	r0, [sp, #12]
 800c324:	9106      	str	r1, [sp, #24]
 800c326:	1c96      	adds	r6, r2, #2
 800c328:	1a9b      	subs	r3, r3, r2
 800c32a:	199a      	adds	r2, r3, r6
 800c32c:	9600      	str	r6, [sp, #0]
 800c32e:	9205      	str	r2, [sp, #20]
 800c330:	9a00      	ldr	r2, [sp, #0]
 800c332:	3601      	adds	r6, #1
 800c334:	7810      	ldrb	r0, [r2, #0]
 800c336:	2830      	cmp	r0, #48	; 0x30
 800c338:	d0f7      	beq.n	800c32a <__gethex+0x16>
 800c33a:	f7ff ffd6 	bl	800c2ea <__hexdig_fun>
 800c33e:	2300      	movs	r3, #0
 800c340:	001d      	movs	r5, r3
 800c342:	9302      	str	r3, [sp, #8]
 800c344:	4298      	cmp	r0, r3
 800c346:	d11d      	bne.n	800c384 <__gethex+0x70>
 800c348:	2201      	movs	r2, #1
 800c34a:	49a6      	ldr	r1, [pc, #664]	; (800c5e4 <__gethex+0x2d0>)
 800c34c:	9800      	ldr	r0, [sp, #0]
 800c34e:	f7ff fd6d 	bl	800be2c <strncmp>
 800c352:	0007      	movs	r7, r0
 800c354:	42a8      	cmp	r0, r5
 800c356:	d169      	bne.n	800c42c <__gethex+0x118>
 800c358:	9b00      	ldr	r3, [sp, #0]
 800c35a:	0034      	movs	r4, r6
 800c35c:	7858      	ldrb	r0, [r3, #1]
 800c35e:	f7ff ffc4 	bl	800c2ea <__hexdig_fun>
 800c362:	2301      	movs	r3, #1
 800c364:	9302      	str	r3, [sp, #8]
 800c366:	42a8      	cmp	r0, r5
 800c368:	d02f      	beq.n	800c3ca <__gethex+0xb6>
 800c36a:	9600      	str	r6, [sp, #0]
 800c36c:	9b00      	ldr	r3, [sp, #0]
 800c36e:	7818      	ldrb	r0, [r3, #0]
 800c370:	2830      	cmp	r0, #48	; 0x30
 800c372:	d009      	beq.n	800c388 <__gethex+0x74>
 800c374:	f7ff ffb9 	bl	800c2ea <__hexdig_fun>
 800c378:	4242      	negs	r2, r0
 800c37a:	4142      	adcs	r2, r0
 800c37c:	2301      	movs	r3, #1
 800c37e:	0035      	movs	r5, r6
 800c380:	9202      	str	r2, [sp, #8]
 800c382:	9305      	str	r3, [sp, #20]
 800c384:	9c00      	ldr	r4, [sp, #0]
 800c386:	e004      	b.n	800c392 <__gethex+0x7e>
 800c388:	9b00      	ldr	r3, [sp, #0]
 800c38a:	3301      	adds	r3, #1
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	e7ed      	b.n	800c36c <__gethex+0x58>
 800c390:	3401      	adds	r4, #1
 800c392:	7820      	ldrb	r0, [r4, #0]
 800c394:	f7ff ffa9 	bl	800c2ea <__hexdig_fun>
 800c398:	1e07      	subs	r7, r0, #0
 800c39a:	d1f9      	bne.n	800c390 <__gethex+0x7c>
 800c39c:	2201      	movs	r2, #1
 800c39e:	0020      	movs	r0, r4
 800c3a0:	4990      	ldr	r1, [pc, #576]	; (800c5e4 <__gethex+0x2d0>)
 800c3a2:	f7ff fd43 	bl	800be2c <strncmp>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d10d      	bne.n	800c3c6 <__gethex+0xb2>
 800c3aa:	2d00      	cmp	r5, #0
 800c3ac:	d106      	bne.n	800c3bc <__gethex+0xa8>
 800c3ae:	3401      	adds	r4, #1
 800c3b0:	0025      	movs	r5, r4
 800c3b2:	7820      	ldrb	r0, [r4, #0]
 800c3b4:	f7ff ff99 	bl	800c2ea <__hexdig_fun>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d102      	bne.n	800c3c2 <__gethex+0xae>
 800c3bc:	1b2d      	subs	r5, r5, r4
 800c3be:	00af      	lsls	r7, r5, #2
 800c3c0:	e003      	b.n	800c3ca <__gethex+0xb6>
 800c3c2:	3401      	adds	r4, #1
 800c3c4:	e7f5      	b.n	800c3b2 <__gethex+0x9e>
 800c3c6:	2d00      	cmp	r5, #0
 800c3c8:	d1f8      	bne.n	800c3bc <__gethex+0xa8>
 800c3ca:	2220      	movs	r2, #32
 800c3cc:	7823      	ldrb	r3, [r4, #0]
 800c3ce:	0026      	movs	r6, r4
 800c3d0:	4393      	bics	r3, r2
 800c3d2:	2b50      	cmp	r3, #80	; 0x50
 800c3d4:	d11d      	bne.n	800c412 <__gethex+0xfe>
 800c3d6:	7863      	ldrb	r3, [r4, #1]
 800c3d8:	2b2b      	cmp	r3, #43	; 0x2b
 800c3da:	d02c      	beq.n	800c436 <__gethex+0x122>
 800c3dc:	2b2d      	cmp	r3, #45	; 0x2d
 800c3de:	d02e      	beq.n	800c43e <__gethex+0x12a>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	1c66      	adds	r6, r4, #1
 800c3e4:	9304      	str	r3, [sp, #16]
 800c3e6:	7830      	ldrb	r0, [r6, #0]
 800c3e8:	f7ff ff7f 	bl	800c2ea <__hexdig_fun>
 800c3ec:	1e43      	subs	r3, r0, #1
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	2b18      	cmp	r3, #24
 800c3f2:	d82b      	bhi.n	800c44c <__gethex+0x138>
 800c3f4:	3810      	subs	r0, #16
 800c3f6:	0005      	movs	r5, r0
 800c3f8:	7870      	ldrb	r0, [r6, #1]
 800c3fa:	f7ff ff76 	bl	800c2ea <__hexdig_fun>
 800c3fe:	1e43      	subs	r3, r0, #1
 800c400:	b2db      	uxtb	r3, r3
 800c402:	3601      	adds	r6, #1
 800c404:	2b18      	cmp	r3, #24
 800c406:	d91c      	bls.n	800c442 <__gethex+0x12e>
 800c408:	9b04      	ldr	r3, [sp, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d000      	beq.n	800c410 <__gethex+0xfc>
 800c40e:	426d      	negs	r5, r5
 800c410:	197f      	adds	r7, r7, r5
 800c412:	9b06      	ldr	r3, [sp, #24]
 800c414:	601e      	str	r6, [r3, #0]
 800c416:	9b02      	ldr	r3, [sp, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d019      	beq.n	800c450 <__gethex+0x13c>
 800c41c:	2600      	movs	r6, #0
 800c41e:	9b05      	ldr	r3, [sp, #20]
 800c420:	42b3      	cmp	r3, r6
 800c422:	d100      	bne.n	800c426 <__gethex+0x112>
 800c424:	3606      	adds	r6, #6
 800c426:	0030      	movs	r0, r6
 800c428:	b009      	add	sp, #36	; 0x24
 800c42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c42c:	2301      	movs	r3, #1
 800c42e:	2700      	movs	r7, #0
 800c430:	9c00      	ldr	r4, [sp, #0]
 800c432:	9302      	str	r3, [sp, #8]
 800c434:	e7c9      	b.n	800c3ca <__gethex+0xb6>
 800c436:	2300      	movs	r3, #0
 800c438:	9304      	str	r3, [sp, #16]
 800c43a:	1ca6      	adds	r6, r4, #2
 800c43c:	e7d3      	b.n	800c3e6 <__gethex+0xd2>
 800c43e:	2301      	movs	r3, #1
 800c440:	e7fa      	b.n	800c438 <__gethex+0x124>
 800c442:	230a      	movs	r3, #10
 800c444:	435d      	muls	r5, r3
 800c446:	182d      	adds	r5, r5, r0
 800c448:	3d10      	subs	r5, #16
 800c44a:	e7d5      	b.n	800c3f8 <__gethex+0xe4>
 800c44c:	0026      	movs	r6, r4
 800c44e:	e7e0      	b.n	800c412 <__gethex+0xfe>
 800c450:	9b00      	ldr	r3, [sp, #0]
 800c452:	9902      	ldr	r1, [sp, #8]
 800c454:	1ae3      	subs	r3, r4, r3
 800c456:	3b01      	subs	r3, #1
 800c458:	2b07      	cmp	r3, #7
 800c45a:	dc0a      	bgt.n	800c472 <__gethex+0x15e>
 800c45c:	9803      	ldr	r0, [sp, #12]
 800c45e:	f000 fa5d 	bl	800c91c <_Balloc>
 800c462:	1e05      	subs	r5, r0, #0
 800c464:	d108      	bne.n	800c478 <__gethex+0x164>
 800c466:	002a      	movs	r2, r5
 800c468:	21e4      	movs	r1, #228	; 0xe4
 800c46a:	4b5f      	ldr	r3, [pc, #380]	; (800c5e8 <__gethex+0x2d4>)
 800c46c:	485f      	ldr	r0, [pc, #380]	; (800c5ec <__gethex+0x2d8>)
 800c46e:	f003 fd19 	bl	800fea4 <__assert_func>
 800c472:	3101      	adds	r1, #1
 800c474:	105b      	asrs	r3, r3, #1
 800c476:	e7ef      	b.n	800c458 <__gethex+0x144>
 800c478:	0003      	movs	r3, r0
 800c47a:	3314      	adds	r3, #20
 800c47c:	9302      	str	r3, [sp, #8]
 800c47e:	9305      	str	r3, [sp, #20]
 800c480:	2300      	movs	r3, #0
 800c482:	001e      	movs	r6, r3
 800c484:	9304      	str	r3, [sp, #16]
 800c486:	9b00      	ldr	r3, [sp, #0]
 800c488:	42a3      	cmp	r3, r4
 800c48a:	d33f      	bcc.n	800c50c <__gethex+0x1f8>
 800c48c:	9c05      	ldr	r4, [sp, #20]
 800c48e:	9b02      	ldr	r3, [sp, #8]
 800c490:	c440      	stmia	r4!, {r6}
 800c492:	1ae4      	subs	r4, r4, r3
 800c494:	10a4      	asrs	r4, r4, #2
 800c496:	0030      	movs	r0, r6
 800c498:	612c      	str	r4, [r5, #16]
 800c49a:	f000 fb01 	bl	800caa0 <__hi0bits>
 800c49e:	9b01      	ldr	r3, [sp, #4]
 800c4a0:	0164      	lsls	r4, r4, #5
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	1a26      	subs	r6, r4, r0
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	429e      	cmp	r6, r3
 800c4aa:	dd51      	ble.n	800c550 <__gethex+0x23c>
 800c4ac:	1af6      	subs	r6, r6, r3
 800c4ae:	0031      	movs	r1, r6
 800c4b0:	0028      	movs	r0, r5
 800c4b2:	f000 fe7b 	bl	800d1ac <__any_on>
 800c4b6:	1e04      	subs	r4, r0, #0
 800c4b8:	d016      	beq.n	800c4e8 <__gethex+0x1d4>
 800c4ba:	2401      	movs	r4, #1
 800c4bc:	231f      	movs	r3, #31
 800c4be:	0020      	movs	r0, r4
 800c4c0:	1e72      	subs	r2, r6, #1
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	4098      	lsls	r0, r3
 800c4c6:	0003      	movs	r3, r0
 800c4c8:	1151      	asrs	r1, r2, #5
 800c4ca:	9802      	ldr	r0, [sp, #8]
 800c4cc:	0089      	lsls	r1, r1, #2
 800c4ce:	5809      	ldr	r1, [r1, r0]
 800c4d0:	4219      	tst	r1, r3
 800c4d2:	d009      	beq.n	800c4e8 <__gethex+0x1d4>
 800c4d4:	42a2      	cmp	r2, r4
 800c4d6:	dd06      	ble.n	800c4e6 <__gethex+0x1d2>
 800c4d8:	0028      	movs	r0, r5
 800c4da:	1eb1      	subs	r1, r6, #2
 800c4dc:	f000 fe66 	bl	800d1ac <__any_on>
 800c4e0:	3402      	adds	r4, #2
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d100      	bne.n	800c4e8 <__gethex+0x1d4>
 800c4e6:	2402      	movs	r4, #2
 800c4e8:	0031      	movs	r1, r6
 800c4ea:	0028      	movs	r0, r5
 800c4ec:	f7ff fea8 	bl	800c240 <rshift>
 800c4f0:	19bf      	adds	r7, r7, r6
 800c4f2:	9b01      	ldr	r3, [sp, #4]
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	42bb      	cmp	r3, r7
 800c4f8:	da3a      	bge.n	800c570 <__gethex+0x25c>
 800c4fa:	0029      	movs	r1, r5
 800c4fc:	9803      	ldr	r0, [sp, #12]
 800c4fe:	f000 fa35 	bl	800c96c <_Bfree>
 800c502:	2300      	movs	r3, #0
 800c504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c506:	26a3      	movs	r6, #163	; 0xa3
 800c508:	6013      	str	r3, [r2, #0]
 800c50a:	e78c      	b.n	800c426 <__gethex+0x112>
 800c50c:	3c01      	subs	r4, #1
 800c50e:	7823      	ldrb	r3, [r4, #0]
 800c510:	2b2e      	cmp	r3, #46	; 0x2e
 800c512:	d012      	beq.n	800c53a <__gethex+0x226>
 800c514:	9b04      	ldr	r3, [sp, #16]
 800c516:	2b20      	cmp	r3, #32
 800c518:	d104      	bne.n	800c524 <__gethex+0x210>
 800c51a:	9b05      	ldr	r3, [sp, #20]
 800c51c:	c340      	stmia	r3!, {r6}
 800c51e:	2600      	movs	r6, #0
 800c520:	9305      	str	r3, [sp, #20]
 800c522:	9604      	str	r6, [sp, #16]
 800c524:	7820      	ldrb	r0, [r4, #0]
 800c526:	f7ff fee0 	bl	800c2ea <__hexdig_fun>
 800c52a:	230f      	movs	r3, #15
 800c52c:	4018      	ands	r0, r3
 800c52e:	9b04      	ldr	r3, [sp, #16]
 800c530:	4098      	lsls	r0, r3
 800c532:	3304      	adds	r3, #4
 800c534:	4306      	orrs	r6, r0
 800c536:	9304      	str	r3, [sp, #16]
 800c538:	e7a5      	b.n	800c486 <__gethex+0x172>
 800c53a:	9b00      	ldr	r3, [sp, #0]
 800c53c:	42a3      	cmp	r3, r4
 800c53e:	d8e9      	bhi.n	800c514 <__gethex+0x200>
 800c540:	2201      	movs	r2, #1
 800c542:	0020      	movs	r0, r4
 800c544:	4927      	ldr	r1, [pc, #156]	; (800c5e4 <__gethex+0x2d0>)
 800c546:	f7ff fc71 	bl	800be2c <strncmp>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d1e2      	bne.n	800c514 <__gethex+0x200>
 800c54e:	e79a      	b.n	800c486 <__gethex+0x172>
 800c550:	9b00      	ldr	r3, [sp, #0]
 800c552:	2400      	movs	r4, #0
 800c554:	429e      	cmp	r6, r3
 800c556:	dacc      	bge.n	800c4f2 <__gethex+0x1de>
 800c558:	1b9e      	subs	r6, r3, r6
 800c55a:	0029      	movs	r1, r5
 800c55c:	0032      	movs	r2, r6
 800c55e:	9803      	ldr	r0, [sp, #12]
 800c560:	f000 fbf0 	bl	800cd44 <__lshift>
 800c564:	0003      	movs	r3, r0
 800c566:	3314      	adds	r3, #20
 800c568:	0005      	movs	r5, r0
 800c56a:	1bbf      	subs	r7, r7, r6
 800c56c:	9302      	str	r3, [sp, #8]
 800c56e:	e7c0      	b.n	800c4f2 <__gethex+0x1de>
 800c570:	9b01      	ldr	r3, [sp, #4]
 800c572:	685e      	ldr	r6, [r3, #4]
 800c574:	42be      	cmp	r6, r7
 800c576:	dd70      	ble.n	800c65a <__gethex+0x346>
 800c578:	9b00      	ldr	r3, [sp, #0]
 800c57a:	1bf6      	subs	r6, r6, r7
 800c57c:	42b3      	cmp	r3, r6
 800c57e:	dc37      	bgt.n	800c5f0 <__gethex+0x2dc>
 800c580:	9b01      	ldr	r3, [sp, #4]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	2b02      	cmp	r3, #2
 800c586:	d024      	beq.n	800c5d2 <__gethex+0x2be>
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d026      	beq.n	800c5da <__gethex+0x2c6>
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d117      	bne.n	800c5c0 <__gethex+0x2ac>
 800c590:	9b00      	ldr	r3, [sp, #0]
 800c592:	42b3      	cmp	r3, r6
 800c594:	d114      	bne.n	800c5c0 <__gethex+0x2ac>
 800c596:	2b01      	cmp	r3, #1
 800c598:	d10b      	bne.n	800c5b2 <__gethex+0x29e>
 800c59a:	9b01      	ldr	r3, [sp, #4]
 800c59c:	9a07      	ldr	r2, [sp, #28]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	2662      	movs	r6, #98	; 0x62
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	9a02      	ldr	r2, [sp, #8]
 800c5a8:	612b      	str	r3, [r5, #16]
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5ae:	601d      	str	r5, [r3, #0]
 800c5b0:	e739      	b.n	800c426 <__gethex+0x112>
 800c5b2:	9900      	ldr	r1, [sp, #0]
 800c5b4:	0028      	movs	r0, r5
 800c5b6:	3901      	subs	r1, #1
 800c5b8:	f000 fdf8 	bl	800d1ac <__any_on>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d1ec      	bne.n	800c59a <__gethex+0x286>
 800c5c0:	0029      	movs	r1, r5
 800c5c2:	9803      	ldr	r0, [sp, #12]
 800c5c4:	f000 f9d2 	bl	800c96c <_Bfree>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5cc:	2650      	movs	r6, #80	; 0x50
 800c5ce:	6013      	str	r3, [r2, #0]
 800c5d0:	e729      	b.n	800c426 <__gethex+0x112>
 800c5d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1f3      	bne.n	800c5c0 <__gethex+0x2ac>
 800c5d8:	e7df      	b.n	800c59a <__gethex+0x286>
 800c5da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1dc      	bne.n	800c59a <__gethex+0x286>
 800c5e0:	e7ee      	b.n	800c5c0 <__gethex+0x2ac>
 800c5e2:	46c0      	nop			; (mov r8, r8)
 800c5e4:	08014320 	.word	0x08014320
 800c5e8:	08014481 	.word	0x08014481
 800c5ec:	08014492 	.word	0x08014492
 800c5f0:	1e77      	subs	r7, r6, #1
 800c5f2:	2c00      	cmp	r4, #0
 800c5f4:	d12f      	bne.n	800c656 <__gethex+0x342>
 800c5f6:	2f00      	cmp	r7, #0
 800c5f8:	d004      	beq.n	800c604 <__gethex+0x2f0>
 800c5fa:	0039      	movs	r1, r7
 800c5fc:	0028      	movs	r0, r5
 800c5fe:	f000 fdd5 	bl	800d1ac <__any_on>
 800c602:	0004      	movs	r4, r0
 800c604:	231f      	movs	r3, #31
 800c606:	117a      	asrs	r2, r7, #5
 800c608:	401f      	ands	r7, r3
 800c60a:	3b1e      	subs	r3, #30
 800c60c:	40bb      	lsls	r3, r7
 800c60e:	9902      	ldr	r1, [sp, #8]
 800c610:	0092      	lsls	r2, r2, #2
 800c612:	5852      	ldr	r2, [r2, r1]
 800c614:	421a      	tst	r2, r3
 800c616:	d001      	beq.n	800c61c <__gethex+0x308>
 800c618:	2302      	movs	r3, #2
 800c61a:	431c      	orrs	r4, r3
 800c61c:	9b00      	ldr	r3, [sp, #0]
 800c61e:	0031      	movs	r1, r6
 800c620:	1b9b      	subs	r3, r3, r6
 800c622:	2602      	movs	r6, #2
 800c624:	0028      	movs	r0, r5
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	f7ff fe0a 	bl	800c240 <rshift>
 800c62c:	9b01      	ldr	r3, [sp, #4]
 800c62e:	685f      	ldr	r7, [r3, #4]
 800c630:	2c00      	cmp	r4, #0
 800c632:	d041      	beq.n	800c6b8 <__gethex+0x3a4>
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d010      	beq.n	800c65e <__gethex+0x34a>
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	d012      	beq.n	800c666 <__gethex+0x352>
 800c640:	2b01      	cmp	r3, #1
 800c642:	d106      	bne.n	800c652 <__gethex+0x33e>
 800c644:	07a2      	lsls	r2, r4, #30
 800c646:	d504      	bpl.n	800c652 <__gethex+0x33e>
 800c648:	9a02      	ldr	r2, [sp, #8]
 800c64a:	6812      	ldr	r2, [r2, #0]
 800c64c:	4314      	orrs	r4, r2
 800c64e:	421c      	tst	r4, r3
 800c650:	d10c      	bne.n	800c66c <__gethex+0x358>
 800c652:	2310      	movs	r3, #16
 800c654:	e02f      	b.n	800c6b6 <__gethex+0x3a2>
 800c656:	2401      	movs	r4, #1
 800c658:	e7d4      	b.n	800c604 <__gethex+0x2f0>
 800c65a:	2601      	movs	r6, #1
 800c65c:	e7e8      	b.n	800c630 <__gethex+0x31c>
 800c65e:	2301      	movs	r3, #1
 800c660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c662:	1a9b      	subs	r3, r3, r2
 800c664:	930f      	str	r3, [sp, #60]	; 0x3c
 800c666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d0f2      	beq.n	800c652 <__gethex+0x33e>
 800c66c:	692b      	ldr	r3, [r5, #16]
 800c66e:	2000      	movs	r0, #0
 800c670:	9302      	str	r3, [sp, #8]
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	9304      	str	r3, [sp, #16]
 800c676:	002b      	movs	r3, r5
 800c678:	9a04      	ldr	r2, [sp, #16]
 800c67a:	3314      	adds	r3, #20
 800c67c:	1899      	adds	r1, r3, r2
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	1c54      	adds	r4, r2, #1
 800c682:	d01e      	beq.n	800c6c2 <__gethex+0x3ae>
 800c684:	3201      	adds	r2, #1
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	002b      	movs	r3, r5
 800c68a:	3314      	adds	r3, #20
 800c68c:	2e02      	cmp	r6, #2
 800c68e:	d141      	bne.n	800c714 <__gethex+0x400>
 800c690:	9a01      	ldr	r2, [sp, #4]
 800c692:	9900      	ldr	r1, [sp, #0]
 800c694:	6812      	ldr	r2, [r2, #0]
 800c696:	3a01      	subs	r2, #1
 800c698:	428a      	cmp	r2, r1
 800c69a:	d10b      	bne.n	800c6b4 <__gethex+0x3a0>
 800c69c:	221f      	movs	r2, #31
 800c69e:	9800      	ldr	r0, [sp, #0]
 800c6a0:	1149      	asrs	r1, r1, #5
 800c6a2:	4002      	ands	r2, r0
 800c6a4:	2001      	movs	r0, #1
 800c6a6:	0004      	movs	r4, r0
 800c6a8:	4094      	lsls	r4, r2
 800c6aa:	0089      	lsls	r1, r1, #2
 800c6ac:	58cb      	ldr	r3, [r1, r3]
 800c6ae:	4223      	tst	r3, r4
 800c6b0:	d000      	beq.n	800c6b4 <__gethex+0x3a0>
 800c6b2:	2601      	movs	r6, #1
 800c6b4:	2320      	movs	r3, #32
 800c6b6:	431e      	orrs	r6, r3
 800c6b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6ba:	601d      	str	r5, [r3, #0]
 800c6bc:	9b07      	ldr	r3, [sp, #28]
 800c6be:	601f      	str	r7, [r3, #0]
 800c6c0:	e6b1      	b.n	800c426 <__gethex+0x112>
 800c6c2:	c301      	stmia	r3!, {r0}
 800c6c4:	4299      	cmp	r1, r3
 800c6c6:	d8da      	bhi.n	800c67e <__gethex+0x36a>
 800c6c8:	68ab      	ldr	r3, [r5, #8]
 800c6ca:	9a02      	ldr	r2, [sp, #8]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	db18      	blt.n	800c702 <__gethex+0x3ee>
 800c6d0:	6869      	ldr	r1, [r5, #4]
 800c6d2:	9803      	ldr	r0, [sp, #12]
 800c6d4:	3101      	adds	r1, #1
 800c6d6:	f000 f921 	bl	800c91c <_Balloc>
 800c6da:	1e04      	subs	r4, r0, #0
 800c6dc:	d104      	bne.n	800c6e8 <__gethex+0x3d4>
 800c6de:	0022      	movs	r2, r4
 800c6e0:	2184      	movs	r1, #132	; 0x84
 800c6e2:	4b1c      	ldr	r3, [pc, #112]	; (800c754 <__gethex+0x440>)
 800c6e4:	481c      	ldr	r0, [pc, #112]	; (800c758 <__gethex+0x444>)
 800c6e6:	e6c2      	b.n	800c46e <__gethex+0x15a>
 800c6e8:	0029      	movs	r1, r5
 800c6ea:	692a      	ldr	r2, [r5, #16]
 800c6ec:	310c      	adds	r1, #12
 800c6ee:	3202      	adds	r2, #2
 800c6f0:	0092      	lsls	r2, r2, #2
 800c6f2:	300c      	adds	r0, #12
 800c6f4:	f7ff fc77 	bl	800bfe6 <memcpy>
 800c6f8:	0029      	movs	r1, r5
 800c6fa:	9803      	ldr	r0, [sp, #12]
 800c6fc:	f000 f936 	bl	800c96c <_Bfree>
 800c700:	0025      	movs	r5, r4
 800c702:	692b      	ldr	r3, [r5, #16]
 800c704:	1c5a      	adds	r2, r3, #1
 800c706:	612a      	str	r2, [r5, #16]
 800c708:	2201      	movs	r2, #1
 800c70a:	3304      	adds	r3, #4
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	18eb      	adds	r3, r5, r3
 800c710:	605a      	str	r2, [r3, #4]
 800c712:	e7b9      	b.n	800c688 <__gethex+0x374>
 800c714:	692a      	ldr	r2, [r5, #16]
 800c716:	9902      	ldr	r1, [sp, #8]
 800c718:	428a      	cmp	r2, r1
 800c71a:	dd09      	ble.n	800c730 <__gethex+0x41c>
 800c71c:	2101      	movs	r1, #1
 800c71e:	0028      	movs	r0, r5
 800c720:	f7ff fd8e 	bl	800c240 <rshift>
 800c724:	9b01      	ldr	r3, [sp, #4]
 800c726:	3701      	adds	r7, #1
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	42bb      	cmp	r3, r7
 800c72c:	dac1      	bge.n	800c6b2 <__gethex+0x39e>
 800c72e:	e6e4      	b.n	800c4fa <__gethex+0x1e6>
 800c730:	221f      	movs	r2, #31
 800c732:	9c00      	ldr	r4, [sp, #0]
 800c734:	9900      	ldr	r1, [sp, #0]
 800c736:	2601      	movs	r6, #1
 800c738:	4014      	ands	r4, r2
 800c73a:	4211      	tst	r1, r2
 800c73c:	d0ba      	beq.n	800c6b4 <__gethex+0x3a0>
 800c73e:	9a04      	ldr	r2, [sp, #16]
 800c740:	189b      	adds	r3, r3, r2
 800c742:	3b04      	subs	r3, #4
 800c744:	6818      	ldr	r0, [r3, #0]
 800c746:	f000 f9ab 	bl	800caa0 <__hi0bits>
 800c74a:	2320      	movs	r3, #32
 800c74c:	1b1b      	subs	r3, r3, r4
 800c74e:	4298      	cmp	r0, r3
 800c750:	dbe4      	blt.n	800c71c <__gethex+0x408>
 800c752:	e7af      	b.n	800c6b4 <__gethex+0x3a0>
 800c754:	08014481 	.word	0x08014481
 800c758:	08014492 	.word	0x08014492

0800c75c <L_shift>:
 800c75c:	2308      	movs	r3, #8
 800c75e:	b570      	push	{r4, r5, r6, lr}
 800c760:	2520      	movs	r5, #32
 800c762:	1a9a      	subs	r2, r3, r2
 800c764:	0092      	lsls	r2, r2, #2
 800c766:	1aad      	subs	r5, r5, r2
 800c768:	6843      	ldr	r3, [r0, #4]
 800c76a:	6804      	ldr	r4, [r0, #0]
 800c76c:	001e      	movs	r6, r3
 800c76e:	40ae      	lsls	r6, r5
 800c770:	40d3      	lsrs	r3, r2
 800c772:	4334      	orrs	r4, r6
 800c774:	6004      	str	r4, [r0, #0]
 800c776:	6043      	str	r3, [r0, #4]
 800c778:	3004      	adds	r0, #4
 800c77a:	4288      	cmp	r0, r1
 800c77c:	d3f4      	bcc.n	800c768 <L_shift+0xc>
 800c77e:	bd70      	pop	{r4, r5, r6, pc}

0800c780 <__match>:
 800c780:	b530      	push	{r4, r5, lr}
 800c782:	6803      	ldr	r3, [r0, #0]
 800c784:	780c      	ldrb	r4, [r1, #0]
 800c786:	3301      	adds	r3, #1
 800c788:	2c00      	cmp	r4, #0
 800c78a:	d102      	bne.n	800c792 <__match+0x12>
 800c78c:	6003      	str	r3, [r0, #0]
 800c78e:	2001      	movs	r0, #1
 800c790:	bd30      	pop	{r4, r5, pc}
 800c792:	781a      	ldrb	r2, [r3, #0]
 800c794:	0015      	movs	r5, r2
 800c796:	3d41      	subs	r5, #65	; 0x41
 800c798:	2d19      	cmp	r5, #25
 800c79a:	d800      	bhi.n	800c79e <__match+0x1e>
 800c79c:	3220      	adds	r2, #32
 800c79e:	3101      	adds	r1, #1
 800c7a0:	42a2      	cmp	r2, r4
 800c7a2:	d0ef      	beq.n	800c784 <__match+0x4>
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	e7f3      	b.n	800c790 <__match+0x10>

0800c7a8 <__hexnan>:
 800c7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7aa:	680b      	ldr	r3, [r1, #0]
 800c7ac:	b08b      	sub	sp, #44	; 0x2c
 800c7ae:	9201      	str	r2, [sp, #4]
 800c7b0:	9901      	ldr	r1, [sp, #4]
 800c7b2:	115a      	asrs	r2, r3, #5
 800c7b4:	0092      	lsls	r2, r2, #2
 800c7b6:	188a      	adds	r2, r1, r2
 800c7b8:	9202      	str	r2, [sp, #8]
 800c7ba:	0019      	movs	r1, r3
 800c7bc:	221f      	movs	r2, #31
 800c7be:	4011      	ands	r1, r2
 800c7c0:	9008      	str	r0, [sp, #32]
 800c7c2:	9106      	str	r1, [sp, #24]
 800c7c4:	4213      	tst	r3, r2
 800c7c6:	d002      	beq.n	800c7ce <__hexnan+0x26>
 800c7c8:	9b02      	ldr	r3, [sp, #8]
 800c7ca:	3304      	adds	r3, #4
 800c7cc:	9302      	str	r3, [sp, #8]
 800c7ce:	9b02      	ldr	r3, [sp, #8]
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	1f1f      	subs	r7, r3, #4
 800c7d4:	003e      	movs	r6, r7
 800c7d6:	003c      	movs	r4, r7
 800c7d8:	9b08      	ldr	r3, [sp, #32]
 800c7da:	603d      	str	r5, [r7, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	9507      	str	r5, [sp, #28]
 800c7e0:	9305      	str	r3, [sp, #20]
 800c7e2:	9503      	str	r5, [sp, #12]
 800c7e4:	9b05      	ldr	r3, [sp, #20]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ea:	9b05      	ldr	r3, [sp, #20]
 800c7ec:	785b      	ldrb	r3, [r3, #1]
 800c7ee:	9304      	str	r3, [sp, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d028      	beq.n	800c846 <__hexnan+0x9e>
 800c7f4:	9804      	ldr	r0, [sp, #16]
 800c7f6:	f7ff fd78 	bl	800c2ea <__hexdig_fun>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d154      	bne.n	800c8a8 <__hexnan+0x100>
 800c7fe:	9b04      	ldr	r3, [sp, #16]
 800c800:	2b20      	cmp	r3, #32
 800c802:	d819      	bhi.n	800c838 <__hexnan+0x90>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	9a07      	ldr	r2, [sp, #28]
 800c808:	4293      	cmp	r3, r2
 800c80a:	dd12      	ble.n	800c832 <__hexnan+0x8a>
 800c80c:	42b4      	cmp	r4, r6
 800c80e:	d206      	bcs.n	800c81e <__hexnan+0x76>
 800c810:	2d07      	cmp	r5, #7
 800c812:	dc04      	bgt.n	800c81e <__hexnan+0x76>
 800c814:	002a      	movs	r2, r5
 800c816:	0031      	movs	r1, r6
 800c818:	0020      	movs	r0, r4
 800c81a:	f7ff ff9f 	bl	800c75c <L_shift>
 800c81e:	9b01      	ldr	r3, [sp, #4]
 800c820:	2508      	movs	r5, #8
 800c822:	429c      	cmp	r4, r3
 800c824:	d905      	bls.n	800c832 <__hexnan+0x8a>
 800c826:	1f26      	subs	r6, r4, #4
 800c828:	2500      	movs	r5, #0
 800c82a:	0034      	movs	r4, r6
 800c82c:	9b03      	ldr	r3, [sp, #12]
 800c82e:	6035      	str	r5, [r6, #0]
 800c830:	9307      	str	r3, [sp, #28]
 800c832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c834:	9305      	str	r3, [sp, #20]
 800c836:	e7d5      	b.n	800c7e4 <__hexnan+0x3c>
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	2b29      	cmp	r3, #41	; 0x29
 800c83c:	d159      	bne.n	800c8f2 <__hexnan+0x14a>
 800c83e:	9b05      	ldr	r3, [sp, #20]
 800c840:	9a08      	ldr	r2, [sp, #32]
 800c842:	3302      	adds	r3, #2
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	9b03      	ldr	r3, [sp, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d052      	beq.n	800c8f2 <__hexnan+0x14a>
 800c84c:	42b4      	cmp	r4, r6
 800c84e:	d206      	bcs.n	800c85e <__hexnan+0xb6>
 800c850:	2d07      	cmp	r5, #7
 800c852:	dc04      	bgt.n	800c85e <__hexnan+0xb6>
 800c854:	002a      	movs	r2, r5
 800c856:	0031      	movs	r1, r6
 800c858:	0020      	movs	r0, r4
 800c85a:	f7ff ff7f 	bl	800c75c <L_shift>
 800c85e:	9b01      	ldr	r3, [sp, #4]
 800c860:	429c      	cmp	r4, r3
 800c862:	d935      	bls.n	800c8d0 <__hexnan+0x128>
 800c864:	001a      	movs	r2, r3
 800c866:	0023      	movs	r3, r4
 800c868:	cb02      	ldmia	r3!, {r1}
 800c86a:	c202      	stmia	r2!, {r1}
 800c86c:	429f      	cmp	r7, r3
 800c86e:	d2fb      	bcs.n	800c868 <__hexnan+0xc0>
 800c870:	9b02      	ldr	r3, [sp, #8]
 800c872:	1c62      	adds	r2, r4, #1
 800c874:	1ed9      	subs	r1, r3, #3
 800c876:	2304      	movs	r3, #4
 800c878:	4291      	cmp	r1, r2
 800c87a:	d305      	bcc.n	800c888 <__hexnan+0xe0>
 800c87c:	9b02      	ldr	r3, [sp, #8]
 800c87e:	3b04      	subs	r3, #4
 800c880:	1b1b      	subs	r3, r3, r4
 800c882:	089b      	lsrs	r3, r3, #2
 800c884:	3301      	adds	r3, #1
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	9a01      	ldr	r2, [sp, #4]
 800c88a:	18d3      	adds	r3, r2, r3
 800c88c:	2200      	movs	r2, #0
 800c88e:	c304      	stmia	r3!, {r2}
 800c890:	429f      	cmp	r7, r3
 800c892:	d2fc      	bcs.n	800c88e <__hexnan+0xe6>
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d104      	bne.n	800c8a4 <__hexnan+0xfc>
 800c89a:	9b01      	ldr	r3, [sp, #4]
 800c89c:	429f      	cmp	r7, r3
 800c89e:	d126      	bne.n	800c8ee <__hexnan+0x146>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	603b      	str	r3, [r7, #0]
 800c8a4:	2005      	movs	r0, #5
 800c8a6:	e025      	b.n	800c8f4 <__hexnan+0x14c>
 800c8a8:	9b03      	ldr	r3, [sp, #12]
 800c8aa:	3501      	adds	r5, #1
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	9303      	str	r3, [sp, #12]
 800c8b0:	2d08      	cmp	r5, #8
 800c8b2:	dd06      	ble.n	800c8c2 <__hexnan+0x11a>
 800c8b4:	9b01      	ldr	r3, [sp, #4]
 800c8b6:	429c      	cmp	r4, r3
 800c8b8:	d9bb      	bls.n	800c832 <__hexnan+0x8a>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	2501      	movs	r5, #1
 800c8be:	3c04      	subs	r4, #4
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	220f      	movs	r2, #15
 800c8c4:	6823      	ldr	r3, [r4, #0]
 800c8c6:	4010      	ands	r0, r2
 800c8c8:	011b      	lsls	r3, r3, #4
 800c8ca:	4303      	orrs	r3, r0
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	e7b0      	b.n	800c832 <__hexnan+0x8a>
 800c8d0:	9b06      	ldr	r3, [sp, #24]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0de      	beq.n	800c894 <__hexnan+0xec>
 800c8d6:	2320      	movs	r3, #32
 800c8d8:	9a06      	ldr	r2, [sp, #24]
 800c8da:	9902      	ldr	r1, [sp, #8]
 800c8dc:	1a9b      	subs	r3, r3, r2
 800c8de:	2201      	movs	r2, #1
 800c8e0:	4252      	negs	r2, r2
 800c8e2:	40da      	lsrs	r2, r3
 800c8e4:	3904      	subs	r1, #4
 800c8e6:	680b      	ldr	r3, [r1, #0]
 800c8e8:	4013      	ands	r3, r2
 800c8ea:	600b      	str	r3, [r1, #0]
 800c8ec:	e7d2      	b.n	800c894 <__hexnan+0xec>
 800c8ee:	3f04      	subs	r7, #4
 800c8f0:	e7d0      	b.n	800c894 <__hexnan+0xec>
 800c8f2:	2004      	movs	r0, #4
 800c8f4:	b00b      	add	sp, #44	; 0x2c
 800c8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8f8 <__ascii_mbtowc>:
 800c8f8:	b082      	sub	sp, #8
 800c8fa:	2900      	cmp	r1, #0
 800c8fc:	d100      	bne.n	800c900 <__ascii_mbtowc+0x8>
 800c8fe:	a901      	add	r1, sp, #4
 800c900:	1e10      	subs	r0, r2, #0
 800c902:	d006      	beq.n	800c912 <__ascii_mbtowc+0x1a>
 800c904:	2b00      	cmp	r3, #0
 800c906:	d006      	beq.n	800c916 <__ascii_mbtowc+0x1e>
 800c908:	7813      	ldrb	r3, [r2, #0]
 800c90a:	600b      	str	r3, [r1, #0]
 800c90c:	7810      	ldrb	r0, [r2, #0]
 800c90e:	1e43      	subs	r3, r0, #1
 800c910:	4198      	sbcs	r0, r3
 800c912:	b002      	add	sp, #8
 800c914:	4770      	bx	lr
 800c916:	2002      	movs	r0, #2
 800c918:	4240      	negs	r0, r0
 800c91a:	e7fa      	b.n	800c912 <__ascii_mbtowc+0x1a>

0800c91c <_Balloc>:
 800c91c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c91e:	b570      	push	{r4, r5, r6, lr}
 800c920:	0006      	movs	r6, r0
 800c922:	000c      	movs	r4, r1
 800c924:	2b00      	cmp	r3, #0
 800c926:	d012      	beq.n	800c94e <_Balloc+0x32>
 800c928:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c92a:	00a2      	lsls	r2, r4, #2
 800c92c:	189b      	adds	r3, r3, r2
 800c92e:	6818      	ldr	r0, [r3, #0]
 800c930:	2800      	cmp	r0, #0
 800c932:	d115      	bne.n	800c960 <_Balloc+0x44>
 800c934:	2101      	movs	r1, #1
 800c936:	000d      	movs	r5, r1
 800c938:	40a5      	lsls	r5, r4
 800c93a:	1d6a      	adds	r2, r5, #5
 800c93c:	0030      	movs	r0, r6
 800c93e:	0092      	lsls	r2, r2, #2
 800c940:	f003 face 	bl	800fee0 <_calloc_r>
 800c944:	2800      	cmp	r0, #0
 800c946:	d009      	beq.n	800c95c <_Balloc+0x40>
 800c948:	6044      	str	r4, [r0, #4]
 800c94a:	6085      	str	r5, [r0, #8]
 800c94c:	e00a      	b.n	800c964 <_Balloc+0x48>
 800c94e:	2221      	movs	r2, #33	; 0x21
 800c950:	2104      	movs	r1, #4
 800c952:	f003 fac5 	bl	800fee0 <_calloc_r>
 800c956:	6470      	str	r0, [r6, #68]	; 0x44
 800c958:	2800      	cmp	r0, #0
 800c95a:	d1e5      	bne.n	800c928 <_Balloc+0xc>
 800c95c:	2000      	movs	r0, #0
 800c95e:	bd70      	pop	{r4, r5, r6, pc}
 800c960:	6802      	ldr	r2, [r0, #0]
 800c962:	601a      	str	r2, [r3, #0]
 800c964:	2300      	movs	r3, #0
 800c966:	6103      	str	r3, [r0, #16]
 800c968:	60c3      	str	r3, [r0, #12]
 800c96a:	e7f8      	b.n	800c95e <_Balloc+0x42>

0800c96c <_Bfree>:
 800c96c:	2900      	cmp	r1, #0
 800c96e:	d006      	beq.n	800c97e <_Bfree+0x12>
 800c970:	684a      	ldr	r2, [r1, #4]
 800c972:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c974:	0092      	lsls	r2, r2, #2
 800c976:	189b      	adds	r3, r3, r2
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	600a      	str	r2, [r1, #0]
 800c97c:	6019      	str	r1, [r3, #0]
 800c97e:	4770      	bx	lr

0800c980 <__multadd>:
 800c980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c982:	000e      	movs	r6, r1
 800c984:	9001      	str	r0, [sp, #4]
 800c986:	000c      	movs	r4, r1
 800c988:	001d      	movs	r5, r3
 800c98a:	2000      	movs	r0, #0
 800c98c:	690f      	ldr	r7, [r1, #16]
 800c98e:	3614      	adds	r6, #20
 800c990:	6833      	ldr	r3, [r6, #0]
 800c992:	3001      	adds	r0, #1
 800c994:	b299      	uxth	r1, r3
 800c996:	4351      	muls	r1, r2
 800c998:	0c1b      	lsrs	r3, r3, #16
 800c99a:	4353      	muls	r3, r2
 800c99c:	1949      	adds	r1, r1, r5
 800c99e:	0c0d      	lsrs	r5, r1, #16
 800c9a0:	195b      	adds	r3, r3, r5
 800c9a2:	0c1d      	lsrs	r5, r3, #16
 800c9a4:	b289      	uxth	r1, r1
 800c9a6:	041b      	lsls	r3, r3, #16
 800c9a8:	185b      	adds	r3, r3, r1
 800c9aa:	c608      	stmia	r6!, {r3}
 800c9ac:	4287      	cmp	r7, r0
 800c9ae:	dcef      	bgt.n	800c990 <__multadd+0x10>
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	d022      	beq.n	800c9fa <__multadd+0x7a>
 800c9b4:	68a3      	ldr	r3, [r4, #8]
 800c9b6:	42bb      	cmp	r3, r7
 800c9b8:	dc19      	bgt.n	800c9ee <__multadd+0x6e>
 800c9ba:	6861      	ldr	r1, [r4, #4]
 800c9bc:	9801      	ldr	r0, [sp, #4]
 800c9be:	3101      	adds	r1, #1
 800c9c0:	f7ff ffac 	bl	800c91c <_Balloc>
 800c9c4:	1e06      	subs	r6, r0, #0
 800c9c6:	d105      	bne.n	800c9d4 <__multadd+0x54>
 800c9c8:	0032      	movs	r2, r6
 800c9ca:	21ba      	movs	r1, #186	; 0xba
 800c9cc:	4b0c      	ldr	r3, [pc, #48]	; (800ca00 <__multadd+0x80>)
 800c9ce:	480d      	ldr	r0, [pc, #52]	; (800ca04 <__multadd+0x84>)
 800c9d0:	f003 fa68 	bl	800fea4 <__assert_func>
 800c9d4:	0021      	movs	r1, r4
 800c9d6:	6922      	ldr	r2, [r4, #16]
 800c9d8:	310c      	adds	r1, #12
 800c9da:	3202      	adds	r2, #2
 800c9dc:	0092      	lsls	r2, r2, #2
 800c9de:	300c      	adds	r0, #12
 800c9e0:	f7ff fb01 	bl	800bfe6 <memcpy>
 800c9e4:	0021      	movs	r1, r4
 800c9e6:	9801      	ldr	r0, [sp, #4]
 800c9e8:	f7ff ffc0 	bl	800c96c <_Bfree>
 800c9ec:	0034      	movs	r4, r6
 800c9ee:	1d3b      	adds	r3, r7, #4
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	18e3      	adds	r3, r4, r3
 800c9f4:	605d      	str	r5, [r3, #4]
 800c9f6:	1c7b      	adds	r3, r7, #1
 800c9f8:	6123      	str	r3, [r4, #16]
 800c9fa:	0020      	movs	r0, r4
 800c9fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9fe:	46c0      	nop			; (mov r8, r8)
 800ca00:	08014481 	.word	0x08014481
 800ca04:	080144f2 	.word	0x080144f2

0800ca08 <__s2b>:
 800ca08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca0a:	0006      	movs	r6, r0
 800ca0c:	0018      	movs	r0, r3
 800ca0e:	000c      	movs	r4, r1
 800ca10:	3008      	adds	r0, #8
 800ca12:	2109      	movs	r1, #9
 800ca14:	9301      	str	r3, [sp, #4]
 800ca16:	0015      	movs	r5, r2
 800ca18:	f7f3 fc1a 	bl	8000250 <__divsi3>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	2100      	movs	r1, #0
 800ca20:	4283      	cmp	r3, r0
 800ca22:	db0a      	blt.n	800ca3a <__s2b+0x32>
 800ca24:	0030      	movs	r0, r6
 800ca26:	f7ff ff79 	bl	800c91c <_Balloc>
 800ca2a:	1e01      	subs	r1, r0, #0
 800ca2c:	d108      	bne.n	800ca40 <__s2b+0x38>
 800ca2e:	000a      	movs	r2, r1
 800ca30:	4b19      	ldr	r3, [pc, #100]	; (800ca98 <__s2b+0x90>)
 800ca32:	481a      	ldr	r0, [pc, #104]	; (800ca9c <__s2b+0x94>)
 800ca34:	31d3      	adds	r1, #211	; 0xd3
 800ca36:	f003 fa35 	bl	800fea4 <__assert_func>
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	3101      	adds	r1, #1
 800ca3e:	e7ef      	b.n	800ca20 <__s2b+0x18>
 800ca40:	9b08      	ldr	r3, [sp, #32]
 800ca42:	6143      	str	r3, [r0, #20]
 800ca44:	2301      	movs	r3, #1
 800ca46:	6103      	str	r3, [r0, #16]
 800ca48:	2d09      	cmp	r5, #9
 800ca4a:	dd18      	ble.n	800ca7e <__s2b+0x76>
 800ca4c:	0023      	movs	r3, r4
 800ca4e:	3309      	adds	r3, #9
 800ca50:	001f      	movs	r7, r3
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	1964      	adds	r4, r4, r5
 800ca56:	783b      	ldrb	r3, [r7, #0]
 800ca58:	220a      	movs	r2, #10
 800ca5a:	0030      	movs	r0, r6
 800ca5c:	3b30      	subs	r3, #48	; 0x30
 800ca5e:	f7ff ff8f 	bl	800c980 <__multadd>
 800ca62:	3701      	adds	r7, #1
 800ca64:	0001      	movs	r1, r0
 800ca66:	42a7      	cmp	r7, r4
 800ca68:	d1f5      	bne.n	800ca56 <__s2b+0x4e>
 800ca6a:	002c      	movs	r4, r5
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	3c08      	subs	r4, #8
 800ca70:	191c      	adds	r4, r3, r4
 800ca72:	002f      	movs	r7, r5
 800ca74:	9b01      	ldr	r3, [sp, #4]
 800ca76:	429f      	cmp	r7, r3
 800ca78:	db04      	blt.n	800ca84 <__s2b+0x7c>
 800ca7a:	0008      	movs	r0, r1
 800ca7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca7e:	2509      	movs	r5, #9
 800ca80:	340a      	adds	r4, #10
 800ca82:	e7f6      	b.n	800ca72 <__s2b+0x6a>
 800ca84:	1b63      	subs	r3, r4, r5
 800ca86:	5ddb      	ldrb	r3, [r3, r7]
 800ca88:	220a      	movs	r2, #10
 800ca8a:	0030      	movs	r0, r6
 800ca8c:	3b30      	subs	r3, #48	; 0x30
 800ca8e:	f7ff ff77 	bl	800c980 <__multadd>
 800ca92:	3701      	adds	r7, #1
 800ca94:	0001      	movs	r1, r0
 800ca96:	e7ed      	b.n	800ca74 <__s2b+0x6c>
 800ca98:	08014481 	.word	0x08014481
 800ca9c:	080144f2 	.word	0x080144f2

0800caa0 <__hi0bits>:
 800caa0:	0003      	movs	r3, r0
 800caa2:	0c02      	lsrs	r2, r0, #16
 800caa4:	2000      	movs	r0, #0
 800caa6:	4282      	cmp	r2, r0
 800caa8:	d101      	bne.n	800caae <__hi0bits+0xe>
 800caaa:	041b      	lsls	r3, r3, #16
 800caac:	3010      	adds	r0, #16
 800caae:	0e1a      	lsrs	r2, r3, #24
 800cab0:	d101      	bne.n	800cab6 <__hi0bits+0x16>
 800cab2:	3008      	adds	r0, #8
 800cab4:	021b      	lsls	r3, r3, #8
 800cab6:	0f1a      	lsrs	r2, r3, #28
 800cab8:	d101      	bne.n	800cabe <__hi0bits+0x1e>
 800caba:	3004      	adds	r0, #4
 800cabc:	011b      	lsls	r3, r3, #4
 800cabe:	0f9a      	lsrs	r2, r3, #30
 800cac0:	d101      	bne.n	800cac6 <__hi0bits+0x26>
 800cac2:	3002      	adds	r0, #2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	db03      	blt.n	800cad2 <__hi0bits+0x32>
 800caca:	3001      	adds	r0, #1
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	d400      	bmi.n	800cad2 <__hi0bits+0x32>
 800cad0:	2020      	movs	r0, #32
 800cad2:	4770      	bx	lr

0800cad4 <__lo0bits>:
 800cad4:	6803      	ldr	r3, [r0, #0]
 800cad6:	0001      	movs	r1, r0
 800cad8:	2207      	movs	r2, #7
 800cada:	0018      	movs	r0, r3
 800cadc:	4010      	ands	r0, r2
 800cade:	4213      	tst	r3, r2
 800cae0:	d00d      	beq.n	800cafe <__lo0bits+0x2a>
 800cae2:	3a06      	subs	r2, #6
 800cae4:	2000      	movs	r0, #0
 800cae6:	4213      	tst	r3, r2
 800cae8:	d105      	bne.n	800caf6 <__lo0bits+0x22>
 800caea:	3002      	adds	r0, #2
 800caec:	4203      	tst	r3, r0
 800caee:	d003      	beq.n	800caf8 <__lo0bits+0x24>
 800caf0:	40d3      	lsrs	r3, r2
 800caf2:	0010      	movs	r0, r2
 800caf4:	600b      	str	r3, [r1, #0]
 800caf6:	4770      	bx	lr
 800caf8:	089b      	lsrs	r3, r3, #2
 800cafa:	600b      	str	r3, [r1, #0]
 800cafc:	e7fb      	b.n	800caf6 <__lo0bits+0x22>
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	2a00      	cmp	r2, #0
 800cb02:	d101      	bne.n	800cb08 <__lo0bits+0x34>
 800cb04:	2010      	movs	r0, #16
 800cb06:	0c1b      	lsrs	r3, r3, #16
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	2a00      	cmp	r2, #0
 800cb0c:	d101      	bne.n	800cb12 <__lo0bits+0x3e>
 800cb0e:	3008      	adds	r0, #8
 800cb10:	0a1b      	lsrs	r3, r3, #8
 800cb12:	071a      	lsls	r2, r3, #28
 800cb14:	d101      	bne.n	800cb1a <__lo0bits+0x46>
 800cb16:	3004      	adds	r0, #4
 800cb18:	091b      	lsrs	r3, r3, #4
 800cb1a:	079a      	lsls	r2, r3, #30
 800cb1c:	d101      	bne.n	800cb22 <__lo0bits+0x4e>
 800cb1e:	3002      	adds	r0, #2
 800cb20:	089b      	lsrs	r3, r3, #2
 800cb22:	07da      	lsls	r2, r3, #31
 800cb24:	d4e9      	bmi.n	800cafa <__lo0bits+0x26>
 800cb26:	3001      	adds	r0, #1
 800cb28:	085b      	lsrs	r3, r3, #1
 800cb2a:	d1e6      	bne.n	800cafa <__lo0bits+0x26>
 800cb2c:	2020      	movs	r0, #32
 800cb2e:	e7e2      	b.n	800caf6 <__lo0bits+0x22>

0800cb30 <__i2b>:
 800cb30:	b510      	push	{r4, lr}
 800cb32:	000c      	movs	r4, r1
 800cb34:	2101      	movs	r1, #1
 800cb36:	f7ff fef1 	bl	800c91c <_Balloc>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d107      	bne.n	800cb4e <__i2b+0x1e>
 800cb3e:	2146      	movs	r1, #70	; 0x46
 800cb40:	4c05      	ldr	r4, [pc, #20]	; (800cb58 <__i2b+0x28>)
 800cb42:	0002      	movs	r2, r0
 800cb44:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <__i2b+0x2c>)
 800cb46:	0020      	movs	r0, r4
 800cb48:	31ff      	adds	r1, #255	; 0xff
 800cb4a:	f003 f9ab 	bl	800fea4 <__assert_func>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	6144      	str	r4, [r0, #20]
 800cb52:	6103      	str	r3, [r0, #16]
 800cb54:	bd10      	pop	{r4, pc}
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	080144f2 	.word	0x080144f2
 800cb5c:	08014481 	.word	0x08014481

0800cb60 <__multiply>:
 800cb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb62:	0015      	movs	r5, r2
 800cb64:	690a      	ldr	r2, [r1, #16]
 800cb66:	692b      	ldr	r3, [r5, #16]
 800cb68:	000c      	movs	r4, r1
 800cb6a:	b08b      	sub	sp, #44	; 0x2c
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	da01      	bge.n	800cb74 <__multiply+0x14>
 800cb70:	002c      	movs	r4, r5
 800cb72:	000d      	movs	r5, r1
 800cb74:	6927      	ldr	r7, [r4, #16]
 800cb76:	692e      	ldr	r6, [r5, #16]
 800cb78:	6861      	ldr	r1, [r4, #4]
 800cb7a:	19bb      	adds	r3, r7, r6
 800cb7c:	9303      	str	r3, [sp, #12]
 800cb7e:	68a3      	ldr	r3, [r4, #8]
 800cb80:	19ba      	adds	r2, r7, r6
 800cb82:	4293      	cmp	r3, r2
 800cb84:	da00      	bge.n	800cb88 <__multiply+0x28>
 800cb86:	3101      	adds	r1, #1
 800cb88:	f7ff fec8 	bl	800c91c <_Balloc>
 800cb8c:	9002      	str	r0, [sp, #8]
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d106      	bne.n	800cba0 <__multiply+0x40>
 800cb92:	21b1      	movs	r1, #177	; 0xb1
 800cb94:	4b48      	ldr	r3, [pc, #288]	; (800ccb8 <__multiply+0x158>)
 800cb96:	4849      	ldr	r0, [pc, #292]	; (800ccbc <__multiply+0x15c>)
 800cb98:	9a02      	ldr	r2, [sp, #8]
 800cb9a:	0049      	lsls	r1, r1, #1
 800cb9c:	f003 f982 	bl	800fea4 <__assert_func>
 800cba0:	9b02      	ldr	r3, [sp, #8]
 800cba2:	2200      	movs	r2, #0
 800cba4:	3314      	adds	r3, #20
 800cba6:	469c      	mov	ip, r3
 800cba8:	19bb      	adds	r3, r7, r6
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4463      	add	r3, ip
 800cbae:	9304      	str	r3, [sp, #16]
 800cbb0:	4663      	mov	r3, ip
 800cbb2:	9904      	ldr	r1, [sp, #16]
 800cbb4:	428b      	cmp	r3, r1
 800cbb6:	d32a      	bcc.n	800cc0e <__multiply+0xae>
 800cbb8:	0023      	movs	r3, r4
 800cbba:	00bf      	lsls	r7, r7, #2
 800cbbc:	3314      	adds	r3, #20
 800cbbe:	3514      	adds	r5, #20
 800cbc0:	9308      	str	r3, [sp, #32]
 800cbc2:	00b6      	lsls	r6, r6, #2
 800cbc4:	19db      	adds	r3, r3, r7
 800cbc6:	9305      	str	r3, [sp, #20]
 800cbc8:	19ab      	adds	r3, r5, r6
 800cbca:	9309      	str	r3, [sp, #36]	; 0x24
 800cbcc:	2304      	movs	r3, #4
 800cbce:	9306      	str	r3, [sp, #24]
 800cbd0:	0023      	movs	r3, r4
 800cbd2:	9a05      	ldr	r2, [sp, #20]
 800cbd4:	3315      	adds	r3, #21
 800cbd6:	9501      	str	r5, [sp, #4]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d305      	bcc.n	800cbe8 <__multiply+0x88>
 800cbdc:	1b13      	subs	r3, r2, r4
 800cbde:	3b15      	subs	r3, #21
 800cbe0:	089b      	lsrs	r3, r3, #2
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	9306      	str	r3, [sp, #24]
 800cbe8:	9b01      	ldr	r3, [sp, #4]
 800cbea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d310      	bcc.n	800cc12 <__multiply+0xb2>
 800cbf0:	9b03      	ldr	r3, [sp, #12]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	dd05      	ble.n	800cc02 <__multiply+0xa2>
 800cbf6:	9b04      	ldr	r3, [sp, #16]
 800cbf8:	3b04      	subs	r3, #4
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d056      	beq.n	800ccb0 <__multiply+0x150>
 800cc02:	9b02      	ldr	r3, [sp, #8]
 800cc04:	9a03      	ldr	r2, [sp, #12]
 800cc06:	0018      	movs	r0, r3
 800cc08:	611a      	str	r2, [r3, #16]
 800cc0a:	b00b      	add	sp, #44	; 0x2c
 800cc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc0e:	c304      	stmia	r3!, {r2}
 800cc10:	e7cf      	b.n	800cbb2 <__multiply+0x52>
 800cc12:	9b01      	ldr	r3, [sp, #4]
 800cc14:	6818      	ldr	r0, [r3, #0]
 800cc16:	b280      	uxth	r0, r0
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d01e      	beq.n	800cc5a <__multiply+0xfa>
 800cc1c:	4667      	mov	r7, ip
 800cc1e:	2500      	movs	r5, #0
 800cc20:	9e08      	ldr	r6, [sp, #32]
 800cc22:	ce02      	ldmia	r6!, {r1}
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	9307      	str	r3, [sp, #28]
 800cc28:	b28b      	uxth	r3, r1
 800cc2a:	4343      	muls	r3, r0
 800cc2c:	001a      	movs	r2, r3
 800cc2e:	466b      	mov	r3, sp
 800cc30:	8b9b      	ldrh	r3, [r3, #28]
 800cc32:	18d3      	adds	r3, r2, r3
 800cc34:	195b      	adds	r3, r3, r5
 800cc36:	0c0d      	lsrs	r5, r1, #16
 800cc38:	4345      	muls	r5, r0
 800cc3a:	9a07      	ldr	r2, [sp, #28]
 800cc3c:	0c11      	lsrs	r1, r2, #16
 800cc3e:	1869      	adds	r1, r5, r1
 800cc40:	0c1a      	lsrs	r2, r3, #16
 800cc42:	188a      	adds	r2, r1, r2
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	0c15      	lsrs	r5, r2, #16
 800cc48:	0412      	lsls	r2, r2, #16
 800cc4a:	431a      	orrs	r2, r3
 800cc4c:	9b05      	ldr	r3, [sp, #20]
 800cc4e:	c704      	stmia	r7!, {r2}
 800cc50:	42b3      	cmp	r3, r6
 800cc52:	d8e6      	bhi.n	800cc22 <__multiply+0xc2>
 800cc54:	4663      	mov	r3, ip
 800cc56:	9a06      	ldr	r2, [sp, #24]
 800cc58:	509d      	str	r5, [r3, r2]
 800cc5a:	9b01      	ldr	r3, [sp, #4]
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	0c00      	lsrs	r0, r0, #16
 800cc60:	d020      	beq.n	800cca4 <__multiply+0x144>
 800cc62:	4663      	mov	r3, ip
 800cc64:	0025      	movs	r5, r4
 800cc66:	4661      	mov	r1, ip
 800cc68:	2700      	movs	r7, #0
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3514      	adds	r5, #20
 800cc6e:	682a      	ldr	r2, [r5, #0]
 800cc70:	680e      	ldr	r6, [r1, #0]
 800cc72:	b292      	uxth	r2, r2
 800cc74:	4342      	muls	r2, r0
 800cc76:	0c36      	lsrs	r6, r6, #16
 800cc78:	1992      	adds	r2, r2, r6
 800cc7a:	19d2      	adds	r2, r2, r7
 800cc7c:	0416      	lsls	r6, r2, #16
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	431e      	orrs	r6, r3
 800cc82:	600e      	str	r6, [r1, #0]
 800cc84:	cd40      	ldmia	r5!, {r6}
 800cc86:	684b      	ldr	r3, [r1, #4]
 800cc88:	0c36      	lsrs	r6, r6, #16
 800cc8a:	4346      	muls	r6, r0
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	0c12      	lsrs	r2, r2, #16
 800cc90:	18f3      	adds	r3, r6, r3
 800cc92:	189b      	adds	r3, r3, r2
 800cc94:	9a05      	ldr	r2, [sp, #20]
 800cc96:	0c1f      	lsrs	r7, r3, #16
 800cc98:	3104      	adds	r1, #4
 800cc9a:	42aa      	cmp	r2, r5
 800cc9c:	d8e7      	bhi.n	800cc6e <__multiply+0x10e>
 800cc9e:	4662      	mov	r2, ip
 800cca0:	9906      	ldr	r1, [sp, #24]
 800cca2:	5053      	str	r3, [r2, r1]
 800cca4:	9b01      	ldr	r3, [sp, #4]
 800cca6:	3304      	adds	r3, #4
 800cca8:	9301      	str	r3, [sp, #4]
 800ccaa:	2304      	movs	r3, #4
 800ccac:	449c      	add	ip, r3
 800ccae:	e79b      	b.n	800cbe8 <__multiply+0x88>
 800ccb0:	9b03      	ldr	r3, [sp, #12]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	9303      	str	r3, [sp, #12]
 800ccb6:	e79b      	b.n	800cbf0 <__multiply+0x90>
 800ccb8:	08014481 	.word	0x08014481
 800ccbc:	080144f2 	.word	0x080144f2

0800ccc0 <__pow5mult>:
 800ccc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	0015      	movs	r5, r2
 800ccc6:	0007      	movs	r7, r0
 800ccc8:	000e      	movs	r6, r1
 800ccca:	401a      	ands	r2, r3
 800cccc:	421d      	tst	r5, r3
 800ccce:	d008      	beq.n	800cce2 <__pow5mult+0x22>
 800ccd0:	491a      	ldr	r1, [pc, #104]	; (800cd3c <__pow5mult+0x7c>)
 800ccd2:	3a01      	subs	r2, #1
 800ccd4:	0092      	lsls	r2, r2, #2
 800ccd6:	5852      	ldr	r2, [r2, r1]
 800ccd8:	2300      	movs	r3, #0
 800ccda:	0031      	movs	r1, r6
 800ccdc:	f7ff fe50 	bl	800c980 <__multadd>
 800cce0:	0006      	movs	r6, r0
 800cce2:	10ad      	asrs	r5, r5, #2
 800cce4:	d027      	beq.n	800cd36 <__pow5mult+0x76>
 800cce6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800cce8:	2c00      	cmp	r4, #0
 800ccea:	d107      	bne.n	800ccfc <__pow5mult+0x3c>
 800ccec:	0038      	movs	r0, r7
 800ccee:	4914      	ldr	r1, [pc, #80]	; (800cd40 <__pow5mult+0x80>)
 800ccf0:	f7ff ff1e 	bl	800cb30 <__i2b>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	0004      	movs	r4, r0
 800ccf8:	6438      	str	r0, [r7, #64]	; 0x40
 800ccfa:	6003      	str	r3, [r0, #0]
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	421d      	tst	r5, r3
 800cd00:	d00a      	beq.n	800cd18 <__pow5mult+0x58>
 800cd02:	0031      	movs	r1, r6
 800cd04:	0022      	movs	r2, r4
 800cd06:	0038      	movs	r0, r7
 800cd08:	f7ff ff2a 	bl	800cb60 <__multiply>
 800cd0c:	0031      	movs	r1, r6
 800cd0e:	9001      	str	r0, [sp, #4]
 800cd10:	0038      	movs	r0, r7
 800cd12:	f7ff fe2b 	bl	800c96c <_Bfree>
 800cd16:	9e01      	ldr	r6, [sp, #4]
 800cd18:	106d      	asrs	r5, r5, #1
 800cd1a:	d00c      	beq.n	800cd36 <__pow5mult+0x76>
 800cd1c:	6820      	ldr	r0, [r4, #0]
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d107      	bne.n	800cd32 <__pow5mult+0x72>
 800cd22:	0022      	movs	r2, r4
 800cd24:	0021      	movs	r1, r4
 800cd26:	0038      	movs	r0, r7
 800cd28:	f7ff ff1a 	bl	800cb60 <__multiply>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	6020      	str	r0, [r4, #0]
 800cd30:	6003      	str	r3, [r0, #0]
 800cd32:	0004      	movs	r4, r0
 800cd34:	e7e2      	b.n	800ccfc <__pow5mult+0x3c>
 800cd36:	0030      	movs	r0, r6
 800cd38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd3a:	46c0      	nop			; (mov r8, r8)
 800cd3c:	08014640 	.word	0x08014640
 800cd40:	00000271 	.word	0x00000271

0800cd44 <__lshift>:
 800cd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd46:	000c      	movs	r4, r1
 800cd48:	0017      	movs	r7, r2
 800cd4a:	6923      	ldr	r3, [r4, #16]
 800cd4c:	1155      	asrs	r5, r2, #5
 800cd4e:	b087      	sub	sp, #28
 800cd50:	18eb      	adds	r3, r5, r3
 800cd52:	9302      	str	r3, [sp, #8]
 800cd54:	3301      	adds	r3, #1
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	6849      	ldr	r1, [r1, #4]
 800cd5a:	68a3      	ldr	r3, [r4, #8]
 800cd5c:	9004      	str	r0, [sp, #16]
 800cd5e:	9a01      	ldr	r2, [sp, #4]
 800cd60:	4293      	cmp	r3, r2
 800cd62:	db10      	blt.n	800cd86 <__lshift+0x42>
 800cd64:	9804      	ldr	r0, [sp, #16]
 800cd66:	f7ff fdd9 	bl	800c91c <_Balloc>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	0002      	movs	r2, r0
 800cd6e:	0006      	movs	r6, r0
 800cd70:	0019      	movs	r1, r3
 800cd72:	3214      	adds	r2, #20
 800cd74:	4298      	cmp	r0, r3
 800cd76:	d10c      	bne.n	800cd92 <__lshift+0x4e>
 800cd78:	31df      	adds	r1, #223	; 0xdf
 800cd7a:	0032      	movs	r2, r6
 800cd7c:	4b26      	ldr	r3, [pc, #152]	; (800ce18 <__lshift+0xd4>)
 800cd7e:	4827      	ldr	r0, [pc, #156]	; (800ce1c <__lshift+0xd8>)
 800cd80:	31ff      	adds	r1, #255	; 0xff
 800cd82:	f003 f88f 	bl	800fea4 <__assert_func>
 800cd86:	3101      	adds	r1, #1
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	e7e8      	b.n	800cd5e <__lshift+0x1a>
 800cd8c:	0098      	lsls	r0, r3, #2
 800cd8e:	5011      	str	r1, [r2, r0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	42ab      	cmp	r3, r5
 800cd94:	dbfa      	blt.n	800cd8c <__lshift+0x48>
 800cd96:	43eb      	mvns	r3, r5
 800cd98:	17db      	asrs	r3, r3, #31
 800cd9a:	401d      	ands	r5, r3
 800cd9c:	211f      	movs	r1, #31
 800cd9e:	0023      	movs	r3, r4
 800cda0:	0038      	movs	r0, r7
 800cda2:	00ad      	lsls	r5, r5, #2
 800cda4:	1955      	adds	r5, r2, r5
 800cda6:	6922      	ldr	r2, [r4, #16]
 800cda8:	3314      	adds	r3, #20
 800cdaa:	0092      	lsls	r2, r2, #2
 800cdac:	4008      	ands	r0, r1
 800cdae:	4684      	mov	ip, r0
 800cdb0:	189a      	adds	r2, r3, r2
 800cdb2:	420f      	tst	r7, r1
 800cdb4:	d02a      	beq.n	800ce0c <__lshift+0xc8>
 800cdb6:	3101      	adds	r1, #1
 800cdb8:	1a09      	subs	r1, r1, r0
 800cdba:	9105      	str	r1, [sp, #20]
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	9503      	str	r5, [sp, #12]
 800cdc0:	4667      	mov	r7, ip
 800cdc2:	6818      	ldr	r0, [r3, #0]
 800cdc4:	40b8      	lsls	r0, r7
 800cdc6:	4308      	orrs	r0, r1
 800cdc8:	9903      	ldr	r1, [sp, #12]
 800cdca:	c101      	stmia	r1!, {r0}
 800cdcc:	9103      	str	r1, [sp, #12]
 800cdce:	9805      	ldr	r0, [sp, #20]
 800cdd0:	cb02      	ldmia	r3!, {r1}
 800cdd2:	40c1      	lsrs	r1, r0
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d8f3      	bhi.n	800cdc0 <__lshift+0x7c>
 800cdd8:	0020      	movs	r0, r4
 800cdda:	3015      	adds	r0, #21
 800cddc:	2304      	movs	r3, #4
 800cdde:	4282      	cmp	r2, r0
 800cde0:	d304      	bcc.n	800cdec <__lshift+0xa8>
 800cde2:	1b13      	subs	r3, r2, r4
 800cde4:	3b15      	subs	r3, #21
 800cde6:	089b      	lsrs	r3, r3, #2
 800cde8:	3301      	adds	r3, #1
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	50e9      	str	r1, [r5, r3]
 800cdee:	2900      	cmp	r1, #0
 800cdf0:	d002      	beq.n	800cdf8 <__lshift+0xb4>
 800cdf2:	9b02      	ldr	r3, [sp, #8]
 800cdf4:	3302      	adds	r3, #2
 800cdf6:	9301      	str	r3, [sp, #4]
 800cdf8:	9b01      	ldr	r3, [sp, #4]
 800cdfa:	9804      	ldr	r0, [sp, #16]
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	0021      	movs	r1, r4
 800ce00:	6133      	str	r3, [r6, #16]
 800ce02:	f7ff fdb3 	bl	800c96c <_Bfree>
 800ce06:	0030      	movs	r0, r6
 800ce08:	b007      	add	sp, #28
 800ce0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce0c:	cb02      	ldmia	r3!, {r1}
 800ce0e:	c502      	stmia	r5!, {r1}
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d8fb      	bhi.n	800ce0c <__lshift+0xc8>
 800ce14:	e7f0      	b.n	800cdf8 <__lshift+0xb4>
 800ce16:	46c0      	nop			; (mov r8, r8)
 800ce18:	08014481 	.word	0x08014481
 800ce1c:	080144f2 	.word	0x080144f2

0800ce20 <__mcmp>:
 800ce20:	b530      	push	{r4, r5, lr}
 800ce22:	690b      	ldr	r3, [r1, #16]
 800ce24:	6904      	ldr	r4, [r0, #16]
 800ce26:	0002      	movs	r2, r0
 800ce28:	1ae0      	subs	r0, r4, r3
 800ce2a:	429c      	cmp	r4, r3
 800ce2c:	d10e      	bne.n	800ce4c <__mcmp+0x2c>
 800ce2e:	3214      	adds	r2, #20
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	3114      	adds	r1, #20
 800ce34:	0014      	movs	r4, r2
 800ce36:	18c9      	adds	r1, r1, r3
 800ce38:	18d2      	adds	r2, r2, r3
 800ce3a:	3a04      	subs	r2, #4
 800ce3c:	3904      	subs	r1, #4
 800ce3e:	6815      	ldr	r5, [r2, #0]
 800ce40:	680b      	ldr	r3, [r1, #0]
 800ce42:	429d      	cmp	r5, r3
 800ce44:	d003      	beq.n	800ce4e <__mcmp+0x2e>
 800ce46:	2001      	movs	r0, #1
 800ce48:	429d      	cmp	r5, r3
 800ce4a:	d303      	bcc.n	800ce54 <__mcmp+0x34>
 800ce4c:	bd30      	pop	{r4, r5, pc}
 800ce4e:	4294      	cmp	r4, r2
 800ce50:	d3f3      	bcc.n	800ce3a <__mcmp+0x1a>
 800ce52:	e7fb      	b.n	800ce4c <__mcmp+0x2c>
 800ce54:	4240      	negs	r0, r0
 800ce56:	e7f9      	b.n	800ce4c <__mcmp+0x2c>

0800ce58 <__mdiff>:
 800ce58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce5a:	000e      	movs	r6, r1
 800ce5c:	0007      	movs	r7, r0
 800ce5e:	0011      	movs	r1, r2
 800ce60:	0030      	movs	r0, r6
 800ce62:	b087      	sub	sp, #28
 800ce64:	0014      	movs	r4, r2
 800ce66:	f7ff ffdb 	bl	800ce20 <__mcmp>
 800ce6a:	1e05      	subs	r5, r0, #0
 800ce6c:	d110      	bne.n	800ce90 <__mdiff+0x38>
 800ce6e:	0001      	movs	r1, r0
 800ce70:	0038      	movs	r0, r7
 800ce72:	f7ff fd53 	bl	800c91c <_Balloc>
 800ce76:	1e02      	subs	r2, r0, #0
 800ce78:	d104      	bne.n	800ce84 <__mdiff+0x2c>
 800ce7a:	4b3f      	ldr	r3, [pc, #252]	; (800cf78 <__mdiff+0x120>)
 800ce7c:	483f      	ldr	r0, [pc, #252]	; (800cf7c <__mdiff+0x124>)
 800ce7e:	4940      	ldr	r1, [pc, #256]	; (800cf80 <__mdiff+0x128>)
 800ce80:	f003 f810 	bl	800fea4 <__assert_func>
 800ce84:	2301      	movs	r3, #1
 800ce86:	6145      	str	r5, [r0, #20]
 800ce88:	6103      	str	r3, [r0, #16]
 800ce8a:	0010      	movs	r0, r2
 800ce8c:	b007      	add	sp, #28
 800ce8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce90:	2301      	movs	r3, #1
 800ce92:	9301      	str	r3, [sp, #4]
 800ce94:	2800      	cmp	r0, #0
 800ce96:	db04      	blt.n	800cea2 <__mdiff+0x4a>
 800ce98:	0023      	movs	r3, r4
 800ce9a:	0034      	movs	r4, r6
 800ce9c:	001e      	movs	r6, r3
 800ce9e:	2300      	movs	r3, #0
 800cea0:	9301      	str	r3, [sp, #4]
 800cea2:	0038      	movs	r0, r7
 800cea4:	6861      	ldr	r1, [r4, #4]
 800cea6:	f7ff fd39 	bl	800c91c <_Balloc>
 800ceaa:	1e02      	subs	r2, r0, #0
 800ceac:	d103      	bne.n	800ceb6 <__mdiff+0x5e>
 800ceae:	4b32      	ldr	r3, [pc, #200]	; (800cf78 <__mdiff+0x120>)
 800ceb0:	4832      	ldr	r0, [pc, #200]	; (800cf7c <__mdiff+0x124>)
 800ceb2:	4934      	ldr	r1, [pc, #208]	; (800cf84 <__mdiff+0x12c>)
 800ceb4:	e7e4      	b.n	800ce80 <__mdiff+0x28>
 800ceb6:	9b01      	ldr	r3, [sp, #4]
 800ceb8:	2700      	movs	r7, #0
 800ceba:	60c3      	str	r3, [r0, #12]
 800cebc:	6920      	ldr	r0, [r4, #16]
 800cebe:	3414      	adds	r4, #20
 800cec0:	0083      	lsls	r3, r0, #2
 800cec2:	18e3      	adds	r3, r4, r3
 800cec4:	0021      	movs	r1, r4
 800cec6:	9401      	str	r4, [sp, #4]
 800cec8:	0034      	movs	r4, r6
 800ceca:	9302      	str	r3, [sp, #8]
 800cecc:	6933      	ldr	r3, [r6, #16]
 800cece:	3414      	adds	r4, #20
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	18e3      	adds	r3, r4, r3
 800ced4:	9303      	str	r3, [sp, #12]
 800ced6:	0013      	movs	r3, r2
 800ced8:	3314      	adds	r3, #20
 800ceda:	469c      	mov	ip, r3
 800cedc:	9305      	str	r3, [sp, #20]
 800cede:	9104      	str	r1, [sp, #16]
 800cee0:	9b04      	ldr	r3, [sp, #16]
 800cee2:	cc02      	ldmia	r4!, {r1}
 800cee4:	cb20      	ldmia	r3!, {r5}
 800cee6:	9304      	str	r3, [sp, #16]
 800cee8:	b2ab      	uxth	r3, r5
 800ceea:	19df      	adds	r7, r3, r7
 800ceec:	b28b      	uxth	r3, r1
 800ceee:	1afb      	subs	r3, r7, r3
 800cef0:	0c09      	lsrs	r1, r1, #16
 800cef2:	0c2d      	lsrs	r5, r5, #16
 800cef4:	1a6d      	subs	r5, r5, r1
 800cef6:	1419      	asrs	r1, r3, #16
 800cef8:	1869      	adds	r1, r5, r1
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	140f      	asrs	r7, r1, #16
 800cefe:	0409      	lsls	r1, r1, #16
 800cf00:	4319      	orrs	r1, r3
 800cf02:	4663      	mov	r3, ip
 800cf04:	c302      	stmia	r3!, {r1}
 800cf06:	469c      	mov	ip, r3
 800cf08:	9b03      	ldr	r3, [sp, #12]
 800cf0a:	42a3      	cmp	r3, r4
 800cf0c:	d8e8      	bhi.n	800cee0 <__mdiff+0x88>
 800cf0e:	0031      	movs	r1, r6
 800cf10:	9c03      	ldr	r4, [sp, #12]
 800cf12:	3115      	adds	r1, #21
 800cf14:	2304      	movs	r3, #4
 800cf16:	428c      	cmp	r4, r1
 800cf18:	d304      	bcc.n	800cf24 <__mdiff+0xcc>
 800cf1a:	1ba3      	subs	r3, r4, r6
 800cf1c:	3b15      	subs	r3, #21
 800cf1e:	089b      	lsrs	r3, r3, #2
 800cf20:	3301      	adds	r3, #1
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	9901      	ldr	r1, [sp, #4]
 800cf26:	18cd      	adds	r5, r1, r3
 800cf28:	9905      	ldr	r1, [sp, #20]
 800cf2a:	002e      	movs	r6, r5
 800cf2c:	18cb      	adds	r3, r1, r3
 800cf2e:	469c      	mov	ip, r3
 800cf30:	9902      	ldr	r1, [sp, #8]
 800cf32:	428e      	cmp	r6, r1
 800cf34:	d310      	bcc.n	800cf58 <__mdiff+0x100>
 800cf36:	9e02      	ldr	r6, [sp, #8]
 800cf38:	1ee9      	subs	r1, r5, #3
 800cf3a:	2400      	movs	r4, #0
 800cf3c:	428e      	cmp	r6, r1
 800cf3e:	d304      	bcc.n	800cf4a <__mdiff+0xf2>
 800cf40:	0031      	movs	r1, r6
 800cf42:	3103      	adds	r1, #3
 800cf44:	1b49      	subs	r1, r1, r5
 800cf46:	0889      	lsrs	r1, r1, #2
 800cf48:	008c      	lsls	r4, r1, #2
 800cf4a:	191b      	adds	r3, r3, r4
 800cf4c:	3b04      	subs	r3, #4
 800cf4e:	6819      	ldr	r1, [r3, #0]
 800cf50:	2900      	cmp	r1, #0
 800cf52:	d00f      	beq.n	800cf74 <__mdiff+0x11c>
 800cf54:	6110      	str	r0, [r2, #16]
 800cf56:	e798      	b.n	800ce8a <__mdiff+0x32>
 800cf58:	ce02      	ldmia	r6!, {r1}
 800cf5a:	b28c      	uxth	r4, r1
 800cf5c:	19e4      	adds	r4, r4, r7
 800cf5e:	0c0f      	lsrs	r7, r1, #16
 800cf60:	1421      	asrs	r1, r4, #16
 800cf62:	1879      	adds	r1, r7, r1
 800cf64:	b2a4      	uxth	r4, r4
 800cf66:	140f      	asrs	r7, r1, #16
 800cf68:	0409      	lsls	r1, r1, #16
 800cf6a:	4321      	orrs	r1, r4
 800cf6c:	4664      	mov	r4, ip
 800cf6e:	c402      	stmia	r4!, {r1}
 800cf70:	46a4      	mov	ip, r4
 800cf72:	e7dd      	b.n	800cf30 <__mdiff+0xd8>
 800cf74:	3801      	subs	r0, #1
 800cf76:	e7e9      	b.n	800cf4c <__mdiff+0xf4>
 800cf78:	08014481 	.word	0x08014481
 800cf7c:	080144f2 	.word	0x080144f2
 800cf80:	00000237 	.word	0x00000237
 800cf84:	00000245 	.word	0x00000245

0800cf88 <__ulp>:
 800cf88:	2000      	movs	r0, #0
 800cf8a:	4b0b      	ldr	r3, [pc, #44]	; (800cfb8 <__ulp+0x30>)
 800cf8c:	4019      	ands	r1, r3
 800cf8e:	4b0b      	ldr	r3, [pc, #44]	; (800cfbc <__ulp+0x34>)
 800cf90:	18c9      	adds	r1, r1, r3
 800cf92:	4281      	cmp	r1, r0
 800cf94:	dc06      	bgt.n	800cfa4 <__ulp+0x1c>
 800cf96:	4249      	negs	r1, r1
 800cf98:	150b      	asrs	r3, r1, #20
 800cf9a:	2b13      	cmp	r3, #19
 800cf9c:	dc03      	bgt.n	800cfa6 <__ulp+0x1e>
 800cf9e:	2180      	movs	r1, #128	; 0x80
 800cfa0:	0309      	lsls	r1, r1, #12
 800cfa2:	4119      	asrs	r1, r3
 800cfa4:	4770      	bx	lr
 800cfa6:	3b14      	subs	r3, #20
 800cfa8:	2001      	movs	r0, #1
 800cfaa:	2b1e      	cmp	r3, #30
 800cfac:	dc02      	bgt.n	800cfb4 <__ulp+0x2c>
 800cfae:	2080      	movs	r0, #128	; 0x80
 800cfb0:	0600      	lsls	r0, r0, #24
 800cfb2:	40d8      	lsrs	r0, r3
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	e7f5      	b.n	800cfa4 <__ulp+0x1c>
 800cfb8:	7ff00000 	.word	0x7ff00000
 800cfbc:	fcc00000 	.word	0xfcc00000

0800cfc0 <__b2d>:
 800cfc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfc2:	0006      	movs	r6, r0
 800cfc4:	6903      	ldr	r3, [r0, #16]
 800cfc6:	3614      	adds	r6, #20
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	18f3      	adds	r3, r6, r3
 800cfcc:	1f1d      	subs	r5, r3, #4
 800cfce:	682c      	ldr	r4, [r5, #0]
 800cfd0:	000f      	movs	r7, r1
 800cfd2:	0020      	movs	r0, r4
 800cfd4:	9301      	str	r3, [sp, #4]
 800cfd6:	f7ff fd63 	bl	800caa0 <__hi0bits>
 800cfda:	2220      	movs	r2, #32
 800cfdc:	1a12      	subs	r2, r2, r0
 800cfde:	603a      	str	r2, [r7, #0]
 800cfe0:	0003      	movs	r3, r0
 800cfe2:	4a1c      	ldr	r2, [pc, #112]	; (800d054 <__b2d+0x94>)
 800cfe4:	280a      	cmp	r0, #10
 800cfe6:	dc15      	bgt.n	800d014 <__b2d+0x54>
 800cfe8:	210b      	movs	r1, #11
 800cfea:	0027      	movs	r7, r4
 800cfec:	1a09      	subs	r1, r1, r0
 800cfee:	40cf      	lsrs	r7, r1
 800cff0:	433a      	orrs	r2, r7
 800cff2:	468c      	mov	ip, r1
 800cff4:	0011      	movs	r1, r2
 800cff6:	2200      	movs	r2, #0
 800cff8:	42ae      	cmp	r6, r5
 800cffa:	d202      	bcs.n	800d002 <__b2d+0x42>
 800cffc:	9a01      	ldr	r2, [sp, #4]
 800cffe:	3a08      	subs	r2, #8
 800d000:	6812      	ldr	r2, [r2, #0]
 800d002:	3315      	adds	r3, #21
 800d004:	409c      	lsls	r4, r3
 800d006:	4663      	mov	r3, ip
 800d008:	0027      	movs	r7, r4
 800d00a:	40da      	lsrs	r2, r3
 800d00c:	4317      	orrs	r7, r2
 800d00e:	0038      	movs	r0, r7
 800d010:	b003      	add	sp, #12
 800d012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d014:	2700      	movs	r7, #0
 800d016:	42ae      	cmp	r6, r5
 800d018:	d202      	bcs.n	800d020 <__b2d+0x60>
 800d01a:	9d01      	ldr	r5, [sp, #4]
 800d01c:	3d08      	subs	r5, #8
 800d01e:	682f      	ldr	r7, [r5, #0]
 800d020:	210b      	movs	r1, #11
 800d022:	4249      	negs	r1, r1
 800d024:	468c      	mov	ip, r1
 800d026:	449c      	add	ip, r3
 800d028:	2b0b      	cmp	r3, #11
 800d02a:	d010      	beq.n	800d04e <__b2d+0x8e>
 800d02c:	4661      	mov	r1, ip
 800d02e:	2320      	movs	r3, #32
 800d030:	408c      	lsls	r4, r1
 800d032:	1a5b      	subs	r3, r3, r1
 800d034:	0039      	movs	r1, r7
 800d036:	40d9      	lsrs	r1, r3
 800d038:	430c      	orrs	r4, r1
 800d03a:	4322      	orrs	r2, r4
 800d03c:	0011      	movs	r1, r2
 800d03e:	2200      	movs	r2, #0
 800d040:	42b5      	cmp	r5, r6
 800d042:	d901      	bls.n	800d048 <__b2d+0x88>
 800d044:	3d04      	subs	r5, #4
 800d046:	682a      	ldr	r2, [r5, #0]
 800d048:	4664      	mov	r4, ip
 800d04a:	40a7      	lsls	r7, r4
 800d04c:	e7dd      	b.n	800d00a <__b2d+0x4a>
 800d04e:	4322      	orrs	r2, r4
 800d050:	0011      	movs	r1, r2
 800d052:	e7dc      	b.n	800d00e <__b2d+0x4e>
 800d054:	3ff00000 	.word	0x3ff00000

0800d058 <__d2b>:
 800d058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d05a:	2101      	movs	r1, #1
 800d05c:	0014      	movs	r4, r2
 800d05e:	001d      	movs	r5, r3
 800d060:	9f08      	ldr	r7, [sp, #32]
 800d062:	f7ff fc5b 	bl	800c91c <_Balloc>
 800d066:	1e06      	subs	r6, r0, #0
 800d068:	d105      	bne.n	800d076 <__d2b+0x1e>
 800d06a:	0032      	movs	r2, r6
 800d06c:	4b24      	ldr	r3, [pc, #144]	; (800d100 <__d2b+0xa8>)
 800d06e:	4825      	ldr	r0, [pc, #148]	; (800d104 <__d2b+0xac>)
 800d070:	4925      	ldr	r1, [pc, #148]	; (800d108 <__d2b+0xb0>)
 800d072:	f002 ff17 	bl	800fea4 <__assert_func>
 800d076:	032b      	lsls	r3, r5, #12
 800d078:	006d      	lsls	r5, r5, #1
 800d07a:	0b1b      	lsrs	r3, r3, #12
 800d07c:	0d6d      	lsrs	r5, r5, #21
 800d07e:	d125      	bne.n	800d0cc <__d2b+0x74>
 800d080:	9301      	str	r3, [sp, #4]
 800d082:	2c00      	cmp	r4, #0
 800d084:	d028      	beq.n	800d0d8 <__d2b+0x80>
 800d086:	4668      	mov	r0, sp
 800d088:	9400      	str	r4, [sp, #0]
 800d08a:	f7ff fd23 	bl	800cad4 <__lo0bits>
 800d08e:	9b01      	ldr	r3, [sp, #4]
 800d090:	9900      	ldr	r1, [sp, #0]
 800d092:	2800      	cmp	r0, #0
 800d094:	d01e      	beq.n	800d0d4 <__d2b+0x7c>
 800d096:	2220      	movs	r2, #32
 800d098:	001c      	movs	r4, r3
 800d09a:	1a12      	subs	r2, r2, r0
 800d09c:	4094      	lsls	r4, r2
 800d09e:	0022      	movs	r2, r4
 800d0a0:	40c3      	lsrs	r3, r0
 800d0a2:	430a      	orrs	r2, r1
 800d0a4:	6172      	str	r2, [r6, #20]
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	9c01      	ldr	r4, [sp, #4]
 800d0aa:	61b4      	str	r4, [r6, #24]
 800d0ac:	1e63      	subs	r3, r4, #1
 800d0ae:	419c      	sbcs	r4, r3
 800d0b0:	3401      	adds	r4, #1
 800d0b2:	6134      	str	r4, [r6, #16]
 800d0b4:	2d00      	cmp	r5, #0
 800d0b6:	d017      	beq.n	800d0e8 <__d2b+0x90>
 800d0b8:	2435      	movs	r4, #53	; 0x35
 800d0ba:	4b14      	ldr	r3, [pc, #80]	; (800d10c <__d2b+0xb4>)
 800d0bc:	18ed      	adds	r5, r5, r3
 800d0be:	182d      	adds	r5, r5, r0
 800d0c0:	603d      	str	r5, [r7, #0]
 800d0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0c4:	1a24      	subs	r4, r4, r0
 800d0c6:	601c      	str	r4, [r3, #0]
 800d0c8:	0030      	movs	r0, r6
 800d0ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0cc:	2280      	movs	r2, #128	; 0x80
 800d0ce:	0352      	lsls	r2, r2, #13
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	e7d5      	b.n	800d080 <__d2b+0x28>
 800d0d4:	6171      	str	r1, [r6, #20]
 800d0d6:	e7e7      	b.n	800d0a8 <__d2b+0x50>
 800d0d8:	a801      	add	r0, sp, #4
 800d0da:	f7ff fcfb 	bl	800cad4 <__lo0bits>
 800d0de:	9b01      	ldr	r3, [sp, #4]
 800d0e0:	2401      	movs	r4, #1
 800d0e2:	6173      	str	r3, [r6, #20]
 800d0e4:	3020      	adds	r0, #32
 800d0e6:	e7e4      	b.n	800d0b2 <__d2b+0x5a>
 800d0e8:	4b09      	ldr	r3, [pc, #36]	; (800d110 <__d2b+0xb8>)
 800d0ea:	18c0      	adds	r0, r0, r3
 800d0ec:	4b09      	ldr	r3, [pc, #36]	; (800d114 <__d2b+0xbc>)
 800d0ee:	6038      	str	r0, [r7, #0]
 800d0f0:	18e3      	adds	r3, r4, r3
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	18f3      	adds	r3, r6, r3
 800d0f6:	6958      	ldr	r0, [r3, #20]
 800d0f8:	f7ff fcd2 	bl	800caa0 <__hi0bits>
 800d0fc:	0164      	lsls	r4, r4, #5
 800d0fe:	e7e0      	b.n	800d0c2 <__d2b+0x6a>
 800d100:	08014481 	.word	0x08014481
 800d104:	080144f2 	.word	0x080144f2
 800d108:	0000030f 	.word	0x0000030f
 800d10c:	fffffbcd 	.word	0xfffffbcd
 800d110:	fffffbce 	.word	0xfffffbce
 800d114:	3fffffff 	.word	0x3fffffff

0800d118 <__ratio>:
 800d118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d11a:	b087      	sub	sp, #28
 800d11c:	000f      	movs	r7, r1
 800d11e:	a904      	add	r1, sp, #16
 800d120:	0006      	movs	r6, r0
 800d122:	f7ff ff4d 	bl	800cfc0 <__b2d>
 800d126:	9000      	str	r0, [sp, #0]
 800d128:	9101      	str	r1, [sp, #4]
 800d12a:	9c00      	ldr	r4, [sp, #0]
 800d12c:	9d01      	ldr	r5, [sp, #4]
 800d12e:	0038      	movs	r0, r7
 800d130:	a905      	add	r1, sp, #20
 800d132:	f7ff ff45 	bl	800cfc0 <__b2d>
 800d136:	9002      	str	r0, [sp, #8]
 800d138:	9103      	str	r1, [sp, #12]
 800d13a:	9a02      	ldr	r2, [sp, #8]
 800d13c:	9b03      	ldr	r3, [sp, #12]
 800d13e:	6930      	ldr	r0, [r6, #16]
 800d140:	6939      	ldr	r1, [r7, #16]
 800d142:	9e04      	ldr	r6, [sp, #16]
 800d144:	1a40      	subs	r0, r0, r1
 800d146:	9905      	ldr	r1, [sp, #20]
 800d148:	0140      	lsls	r0, r0, #5
 800d14a:	1a71      	subs	r1, r6, r1
 800d14c:	1841      	adds	r1, r0, r1
 800d14e:	0508      	lsls	r0, r1, #20
 800d150:	2900      	cmp	r1, #0
 800d152:	dd07      	ble.n	800d164 <__ratio+0x4c>
 800d154:	9901      	ldr	r1, [sp, #4]
 800d156:	1845      	adds	r5, r0, r1
 800d158:	0020      	movs	r0, r4
 800d15a:	0029      	movs	r1, r5
 800d15c:	f7f3 fe8c 	bl	8000e78 <__aeabi_ddiv>
 800d160:	b007      	add	sp, #28
 800d162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d164:	9903      	ldr	r1, [sp, #12]
 800d166:	1a0b      	subs	r3, r1, r0
 800d168:	e7f6      	b.n	800d158 <__ratio+0x40>

0800d16a <__copybits>:
 800d16a:	b570      	push	{r4, r5, r6, lr}
 800d16c:	0014      	movs	r4, r2
 800d16e:	0005      	movs	r5, r0
 800d170:	3901      	subs	r1, #1
 800d172:	6913      	ldr	r3, [r2, #16]
 800d174:	1149      	asrs	r1, r1, #5
 800d176:	3101      	adds	r1, #1
 800d178:	0089      	lsls	r1, r1, #2
 800d17a:	3414      	adds	r4, #20
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	1841      	adds	r1, r0, r1
 800d180:	18e3      	adds	r3, r4, r3
 800d182:	42a3      	cmp	r3, r4
 800d184:	d80d      	bhi.n	800d1a2 <__copybits+0x38>
 800d186:	0014      	movs	r4, r2
 800d188:	3411      	adds	r4, #17
 800d18a:	2500      	movs	r5, #0
 800d18c:	429c      	cmp	r4, r3
 800d18e:	d803      	bhi.n	800d198 <__copybits+0x2e>
 800d190:	1a9b      	subs	r3, r3, r2
 800d192:	3b11      	subs	r3, #17
 800d194:	089b      	lsrs	r3, r3, #2
 800d196:	009d      	lsls	r5, r3, #2
 800d198:	2300      	movs	r3, #0
 800d19a:	1940      	adds	r0, r0, r5
 800d19c:	4281      	cmp	r1, r0
 800d19e:	d803      	bhi.n	800d1a8 <__copybits+0x3e>
 800d1a0:	bd70      	pop	{r4, r5, r6, pc}
 800d1a2:	cc40      	ldmia	r4!, {r6}
 800d1a4:	c540      	stmia	r5!, {r6}
 800d1a6:	e7ec      	b.n	800d182 <__copybits+0x18>
 800d1a8:	c008      	stmia	r0!, {r3}
 800d1aa:	e7f7      	b.n	800d19c <__copybits+0x32>

0800d1ac <__any_on>:
 800d1ac:	0002      	movs	r2, r0
 800d1ae:	6900      	ldr	r0, [r0, #16]
 800d1b0:	b510      	push	{r4, lr}
 800d1b2:	3214      	adds	r2, #20
 800d1b4:	114b      	asrs	r3, r1, #5
 800d1b6:	4298      	cmp	r0, r3
 800d1b8:	db13      	blt.n	800d1e2 <__any_on+0x36>
 800d1ba:	dd0c      	ble.n	800d1d6 <__any_on+0x2a>
 800d1bc:	241f      	movs	r4, #31
 800d1be:	0008      	movs	r0, r1
 800d1c0:	4020      	ands	r0, r4
 800d1c2:	4221      	tst	r1, r4
 800d1c4:	d007      	beq.n	800d1d6 <__any_on+0x2a>
 800d1c6:	0099      	lsls	r1, r3, #2
 800d1c8:	588c      	ldr	r4, [r1, r2]
 800d1ca:	0021      	movs	r1, r4
 800d1cc:	40c1      	lsrs	r1, r0
 800d1ce:	4081      	lsls	r1, r0
 800d1d0:	2001      	movs	r0, #1
 800d1d2:	428c      	cmp	r4, r1
 800d1d4:	d104      	bne.n	800d1e0 <__any_on+0x34>
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	18d3      	adds	r3, r2, r3
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d803      	bhi.n	800d1e6 <__any_on+0x3a>
 800d1de:	2000      	movs	r0, #0
 800d1e0:	bd10      	pop	{r4, pc}
 800d1e2:	0003      	movs	r3, r0
 800d1e4:	e7f7      	b.n	800d1d6 <__any_on+0x2a>
 800d1e6:	3b04      	subs	r3, #4
 800d1e8:	6819      	ldr	r1, [r3, #0]
 800d1ea:	2900      	cmp	r1, #0
 800d1ec:	d0f5      	beq.n	800d1da <__any_on+0x2e>
 800d1ee:	2001      	movs	r0, #1
 800d1f0:	e7f6      	b.n	800d1e0 <__any_on+0x34>

0800d1f2 <__ascii_wctomb>:
 800d1f2:	0003      	movs	r3, r0
 800d1f4:	1e08      	subs	r0, r1, #0
 800d1f6:	d005      	beq.n	800d204 <__ascii_wctomb+0x12>
 800d1f8:	2aff      	cmp	r2, #255	; 0xff
 800d1fa:	d904      	bls.n	800d206 <__ascii_wctomb+0x14>
 800d1fc:	228a      	movs	r2, #138	; 0x8a
 800d1fe:	2001      	movs	r0, #1
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	4240      	negs	r0, r0
 800d204:	4770      	bx	lr
 800d206:	2001      	movs	r0, #1
 800d208:	700a      	strb	r2, [r1, #0]
 800d20a:	e7fb      	b.n	800d204 <__ascii_wctomb+0x12>

0800d20c <_svfprintf_r>:
 800d20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d20e:	b0d9      	sub	sp, #356	; 0x164
 800d210:	001c      	movs	r4, r3
 800d212:	910b      	str	r1, [sp, #44]	; 0x2c
 800d214:	9208      	str	r2, [sp, #32]
 800d216:	900a      	str	r0, [sp, #40]	; 0x28
 800d218:	f002 fdae 	bl	800fd78 <_localeconv_r>
 800d21c:	6803      	ldr	r3, [r0, #0]
 800d21e:	0018      	movs	r0, r3
 800d220:	931c      	str	r3, [sp, #112]	; 0x70
 800d222:	f7f2 ff6f 	bl	8000104 <strlen>
 800d226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d228:	9016      	str	r0, [sp, #88]	; 0x58
 800d22a:	899b      	ldrh	r3, [r3, #12]
 800d22c:	061b      	lsls	r3, r3, #24
 800d22e:	d517      	bpl.n	800d260 <_svfprintf_r+0x54>
 800d230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d113      	bne.n	800d260 <_svfprintf_r+0x54>
 800d238:	2140      	movs	r1, #64	; 0x40
 800d23a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d23c:	f7fd fb6e 	bl	800a91c <_malloc_r>
 800d240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d242:	6018      	str	r0, [r3, #0]
 800d244:	6118      	str	r0, [r3, #16]
 800d246:	2800      	cmp	r0, #0
 800d248:	d107      	bne.n	800d25a <_svfprintf_r+0x4e>
 800d24a:	230c      	movs	r3, #12
 800d24c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d24e:	6013      	str	r3, [r2, #0]
 800d250:	3b0d      	subs	r3, #13
 800d252:	9317      	str	r3, [sp, #92]	; 0x5c
 800d254:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d256:	b059      	add	sp, #356	; 0x164
 800d258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d25a:	2340      	movs	r3, #64	; 0x40
 800d25c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d25e:	6153      	str	r3, [r2, #20]
 800d260:	2300      	movs	r3, #0
 800d262:	2200      	movs	r2, #0
 800d264:	932e      	str	r3, [sp, #184]	; 0xb8
 800d266:	932d      	str	r3, [sp, #180]	; 0xb4
 800d268:	930e      	str	r3, [sp, #56]	; 0x38
 800d26a:	2300      	movs	r3, #0
 800d26c:	9214      	str	r2, [sp, #80]	; 0x50
 800d26e:	9315      	str	r3, [sp, #84]	; 0x54
 800d270:	2300      	movs	r3, #0
 800d272:	af2f      	add	r7, sp, #188	; 0xbc
 800d274:	972c      	str	r7, [sp, #176]	; 0xb0
 800d276:	931f      	str	r3, [sp, #124]	; 0x7c
 800d278:	931e      	str	r3, [sp, #120]	; 0x78
 800d27a:	9312      	str	r3, [sp, #72]	; 0x48
 800d27c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d27e:	931d      	str	r3, [sp, #116]	; 0x74
 800d280:	9317      	str	r3, [sp, #92]	; 0x5c
 800d282:	9d08      	ldr	r5, [sp, #32]
 800d284:	782b      	ldrb	r3, [r5, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d002      	beq.n	800d290 <_svfprintf_r+0x84>
 800d28a:	2b25      	cmp	r3, #37	; 0x25
 800d28c:	d000      	beq.n	800d290 <_svfprintf_r+0x84>
 800d28e:	e091      	b.n	800d3b4 <_svfprintf_r+0x1a8>
 800d290:	9b08      	ldr	r3, [sp, #32]
 800d292:	1aee      	subs	r6, r5, r3
 800d294:	429d      	cmp	r5, r3
 800d296:	d016      	beq.n	800d2c6 <_svfprintf_r+0xba>
 800d298:	603b      	str	r3, [r7, #0]
 800d29a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d29c:	607e      	str	r6, [r7, #4]
 800d29e:	199b      	adds	r3, r3, r6
 800d2a0:	932e      	str	r3, [sp, #184]	; 0xb8
 800d2a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	932d      	str	r3, [sp, #180]	; 0xb4
 800d2aa:	2b07      	cmp	r3, #7
 800d2ac:	dd08      	ble.n	800d2c0 <_svfprintf_r+0xb4>
 800d2ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2b2:	aa2c      	add	r2, sp, #176	; 0xb0
 800d2b4:	f004 f8c0 	bl	8011438 <__ssprint_r>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d000      	beq.n	800d2be <_svfprintf_r+0xb2>
 800d2bc:	e1cf      	b.n	800d65e <_svfprintf_r+0x452>
 800d2be:	af2f      	add	r7, sp, #188	; 0xbc
 800d2c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2c2:	199b      	adds	r3, r3, r6
 800d2c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2c6:	782b      	ldrb	r3, [r5, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <_svfprintf_r+0xc4>
 800d2cc:	f001 f99e 	bl	800e60c <_svfprintf_r+0x1400>
 800d2d0:	221b      	movs	r2, #27
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	a91e      	add	r1, sp, #120	; 0x78
 800d2d6:	1852      	adds	r2, r2, r1
 800d2d8:	7013      	strb	r3, [r2, #0]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	001e      	movs	r6, r3
 800d2de:	4252      	negs	r2, r2
 800d2e0:	3501      	adds	r5, #1
 800d2e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d2e4:	9318      	str	r3, [sp, #96]	; 0x60
 800d2e6:	1c6b      	adds	r3, r5, #1
 800d2e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d2ea:	782b      	ldrb	r3, [r5, #0]
 800d2ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d2f0:	3820      	subs	r0, #32
 800d2f2:	285a      	cmp	r0, #90	; 0x5a
 800d2f4:	d901      	bls.n	800d2fa <_svfprintf_r+0xee>
 800d2f6:	f000 fe20 	bl	800df3a <_svfprintf_r+0xd2e>
 800d2fa:	f7f2 ff15 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d2fe:	0078      	.short	0x0078
 800d300:	061e061e 	.word	0x061e061e
 800d304:	061e0082 	.word	0x061e0082
 800d308:	061e061e 	.word	0x061e061e
 800d30c:	061e005d 	.word	0x061e005d
 800d310:	0084061e 	.word	0x0084061e
 800d314:	061e008c 	.word	0x061e008c
 800d318:	0091008a 	.word	0x0091008a
 800d31c:	00b2061e 	.word	0x00b2061e
 800d320:	00b400b4 	.word	0x00b400b4
 800d324:	00b400b4 	.word	0x00b400b4
 800d328:	00b400b4 	.word	0x00b400b4
 800d32c:	00b400b4 	.word	0x00b400b4
 800d330:	061e00b4 	.word	0x061e00b4
 800d334:	061e061e 	.word	0x061e061e
 800d338:	061e061e 	.word	0x061e061e
 800d33c:	061e061e 	.word	0x061e061e
 800d340:	061e013b 	.word	0x061e013b
 800d344:	00f400e0 	.word	0x00f400e0
 800d348:	013b013b 	.word	0x013b013b
 800d34c:	061e013b 	.word	0x061e013b
 800d350:	061e061e 	.word	0x061e061e
 800d354:	00c7061e 	.word	0x00c7061e
 800d358:	061e061e 	.word	0x061e061e
 800d35c:	061e04c7 	.word	0x061e04c7
 800d360:	061e061e 	.word	0x061e061e
 800d364:	061e050a 	.word	0x061e050a
 800d368:	061e052a 	.word	0x061e052a
 800d36c:	055c061e 	.word	0x055c061e
 800d370:	061e061e 	.word	0x061e061e
 800d374:	061e061e 	.word	0x061e061e
 800d378:	061e061e 	.word	0x061e061e
 800d37c:	061e061e 	.word	0x061e061e
 800d380:	061e013b 	.word	0x061e013b
 800d384:	00f600e0 	.word	0x00f600e0
 800d388:	013b013b 	.word	0x013b013b
 800d38c:	00c9013b 	.word	0x00c9013b
 800d390:	00dc00f6 	.word	0x00dc00f6
 800d394:	00d5061e 	.word	0x00d5061e
 800d398:	04a7061e 	.word	0x04a7061e
 800d39c:	04fa04c9 	.word	0x04fa04c9
 800d3a0:	061e00dc 	.word	0x061e00dc
 800d3a4:	0080050a 	.word	0x0080050a
 800d3a8:	061e052c 	.word	0x061e052c
 800d3ac:	057c061e 	.word	0x057c061e
 800d3b0:	0080061e 	.word	0x0080061e
 800d3b4:	3501      	adds	r5, #1
 800d3b6:	e765      	b.n	800d284 <_svfprintf_r+0x78>
 800d3b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3ba:	f002 fcdd 	bl	800fd78 <_localeconv_r>
 800d3be:	6843      	ldr	r3, [r0, #4]
 800d3c0:	0018      	movs	r0, r3
 800d3c2:	931d      	str	r3, [sp, #116]	; 0x74
 800d3c4:	f7f2 fe9e 	bl	8000104 <strlen>
 800d3c8:	901b      	str	r0, [sp, #108]	; 0x6c
 800d3ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3cc:	f002 fcd4 	bl	800fd78 <_localeconv_r>
 800d3d0:	6883      	ldr	r3, [r0, #8]
 800d3d2:	9312      	str	r3, [sp, #72]	; 0x48
 800d3d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d011      	beq.n	800d3fe <_svfprintf_r+0x1f2>
 800d3da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00e      	beq.n	800d3fe <_svfprintf_r+0x1f2>
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00b      	beq.n	800d3fe <_svfprintf_r+0x1f2>
 800d3e6:	2380      	movs	r3, #128	; 0x80
 800d3e8:	00db      	lsls	r3, r3, #3
 800d3ea:	431e      	orrs	r6, r3
 800d3ec:	e007      	b.n	800d3fe <_svfprintf_r+0x1f2>
 800d3ee:	231b      	movs	r3, #27
 800d3f0:	aa1e      	add	r2, sp, #120	; 0x78
 800d3f2:	189b      	adds	r3, r3, r2
 800d3f4:	781a      	ldrb	r2, [r3, #0]
 800d3f6:	2a00      	cmp	r2, #0
 800d3f8:	d101      	bne.n	800d3fe <_svfprintf_r+0x1f2>
 800d3fa:	3220      	adds	r2, #32
 800d3fc:	701a      	strb	r2, [r3, #0]
 800d3fe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d400:	e771      	b.n	800d2e6 <_svfprintf_r+0xda>
 800d402:	2301      	movs	r3, #1
 800d404:	e7f1      	b.n	800d3ea <_svfprintf_r+0x1de>
 800d406:	cc08      	ldmia	r4!, {r3}
 800d408:	9318      	str	r3, [sp, #96]	; 0x60
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	daf7      	bge.n	800d3fe <_svfprintf_r+0x1f2>
 800d40e:	425b      	negs	r3, r3
 800d410:	9318      	str	r3, [sp, #96]	; 0x60
 800d412:	2304      	movs	r3, #4
 800d414:	e7e9      	b.n	800d3ea <_svfprintf_r+0x1de>
 800d416:	231b      	movs	r3, #27
 800d418:	aa1e      	add	r2, sp, #120	; 0x78
 800d41a:	189b      	adds	r3, r3, r2
 800d41c:	222b      	movs	r2, #43	; 0x2b
 800d41e:	e7ed      	b.n	800d3fc <_svfprintf_r+0x1f0>
 800d420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d422:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d424:	7812      	ldrb	r2, [r2, #0]
 800d426:	3301      	adds	r3, #1
 800d428:	920f      	str	r2, [sp, #60]	; 0x3c
 800d42a:	2a2a      	cmp	r2, #42	; 0x2a
 800d42c:	d010      	beq.n	800d450 <_svfprintf_r+0x244>
 800d42e:	2200      	movs	r2, #0
 800d430:	9209      	str	r2, [sp, #36]	; 0x24
 800d432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d434:	9313      	str	r3, [sp, #76]	; 0x4c
 800d436:	3a30      	subs	r2, #48	; 0x30
 800d438:	2a09      	cmp	r2, #9
 800d43a:	d900      	bls.n	800d43e <_svfprintf_r+0x232>
 800d43c:	e757      	b.n	800d2ee <_svfprintf_r+0xe2>
 800d43e:	200a      	movs	r0, #10
 800d440:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d442:	4341      	muls	r1, r0
 800d444:	188a      	adds	r2, r1, r2
 800d446:	9209      	str	r2, [sp, #36]	; 0x24
 800d448:	781a      	ldrb	r2, [r3, #0]
 800d44a:	3301      	adds	r3, #1
 800d44c:	920f      	str	r2, [sp, #60]	; 0x3c
 800d44e:	e7f0      	b.n	800d432 <_svfprintf_r+0x226>
 800d450:	cc04      	ldmia	r4!, {r2}
 800d452:	9209      	str	r2, [sp, #36]	; 0x24
 800d454:	2a00      	cmp	r2, #0
 800d456:	da02      	bge.n	800d45e <_svfprintf_r+0x252>
 800d458:	2201      	movs	r2, #1
 800d45a:	4252      	negs	r2, r2
 800d45c:	9209      	str	r2, [sp, #36]	; 0x24
 800d45e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d460:	e7cd      	b.n	800d3fe <_svfprintf_r+0x1f2>
 800d462:	2380      	movs	r3, #128	; 0x80
 800d464:	e7c1      	b.n	800d3ea <_svfprintf_r+0x1de>
 800d466:	2200      	movs	r2, #0
 800d468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d46a:	9218      	str	r2, [sp, #96]	; 0x60
 800d46c:	210a      	movs	r1, #10
 800d46e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d470:	434a      	muls	r2, r1
 800d472:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d474:	3930      	subs	r1, #48	; 0x30
 800d476:	188a      	adds	r2, r1, r2
 800d478:	9218      	str	r2, [sp, #96]	; 0x60
 800d47a:	001a      	movs	r2, r3
 800d47c:	7812      	ldrb	r2, [r2, #0]
 800d47e:	3301      	adds	r3, #1
 800d480:	920f      	str	r2, [sp, #60]	; 0x3c
 800d482:	3a30      	subs	r2, #48	; 0x30
 800d484:	9313      	str	r3, [sp, #76]	; 0x4c
 800d486:	2a09      	cmp	r2, #9
 800d488:	d9f0      	bls.n	800d46c <_svfprintf_r+0x260>
 800d48a:	e730      	b.n	800d2ee <_svfprintf_r+0xe2>
 800d48c:	2308      	movs	r3, #8
 800d48e:	e7ac      	b.n	800d3ea <_svfprintf_r+0x1de>
 800d490:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	2b68      	cmp	r3, #104	; 0x68
 800d496:	d105      	bne.n	800d4a4 <_svfprintf_r+0x298>
 800d498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d49a:	3301      	adds	r3, #1
 800d49c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d49e:	2380      	movs	r3, #128	; 0x80
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	e7a2      	b.n	800d3ea <_svfprintf_r+0x1de>
 800d4a4:	2340      	movs	r3, #64	; 0x40
 800d4a6:	e7a0      	b.n	800d3ea <_svfprintf_r+0x1de>
 800d4a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b6c      	cmp	r3, #108	; 0x6c
 800d4ae:	d104      	bne.n	800d4ba <_svfprintf_r+0x2ae>
 800d4b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d4b6:	2320      	movs	r3, #32
 800d4b8:	e797      	b.n	800d3ea <_svfprintf_r+0x1de>
 800d4ba:	2310      	movs	r3, #16
 800d4bc:	e795      	b.n	800d3ea <_svfprintf_r+0x1de>
 800d4be:	0021      	movs	r1, r4
 800d4c0:	c904      	ldmia	r1!, {r2}
 800d4c2:	ab3f      	add	r3, sp, #252	; 0xfc
 800d4c4:	910d      	str	r1, [sp, #52]	; 0x34
 800d4c6:	211b      	movs	r1, #27
 800d4c8:	701a      	strb	r2, [r3, #0]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	a81e      	add	r0, sp, #120	; 0x78
 800d4ce:	1809      	adds	r1, r1, r0
 800d4d0:	700a      	strb	r2, [r1, #0]
 800d4d2:	920c      	str	r2, [sp, #48]	; 0x30
 800d4d4:	3201      	adds	r2, #1
 800d4d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d8:	2200      	movs	r2, #0
 800d4da:	9308      	str	r3, [sp, #32]
 800d4dc:	0015      	movs	r5, r2
 800d4de:	9219      	str	r2, [sp, #100]	; 0x64
 800d4e0:	9210      	str	r2, [sp, #64]	; 0x40
 800d4e2:	9211      	str	r2, [sp, #68]	; 0x44
 800d4e4:	e1f1      	b.n	800d8ca <_svfprintf_r+0x6be>
 800d4e6:	2310      	movs	r3, #16
 800d4e8:	431e      	orrs	r6, r3
 800d4ea:	06b3      	lsls	r3, r6, #26
 800d4ec:	d531      	bpl.n	800d552 <_svfprintf_r+0x346>
 800d4ee:	2307      	movs	r3, #7
 800d4f0:	3407      	adds	r4, #7
 800d4f2:	439c      	bics	r4, r3
 800d4f4:	0022      	movs	r2, r4
 800d4f6:	ca18      	ldmia	r2!, {r3, r4}
 800d4f8:	9306      	str	r3, [sp, #24]
 800d4fa:	9407      	str	r4, [sp, #28]
 800d4fc:	920d      	str	r2, [sp, #52]	; 0x34
 800d4fe:	9a07      	ldr	r2, [sp, #28]
 800d500:	2301      	movs	r3, #1
 800d502:	2a00      	cmp	r2, #0
 800d504:	da0b      	bge.n	800d51e <_svfprintf_r+0x312>
 800d506:	9c06      	ldr	r4, [sp, #24]
 800d508:	9d07      	ldr	r5, [sp, #28]
 800d50a:	2200      	movs	r2, #0
 800d50c:	4261      	negs	r1, r4
 800d50e:	41aa      	sbcs	r2, r5
 800d510:	9106      	str	r1, [sp, #24]
 800d512:	9207      	str	r2, [sp, #28]
 800d514:	221b      	movs	r2, #27
 800d516:	a91e      	add	r1, sp, #120	; 0x78
 800d518:	1852      	adds	r2, r2, r1
 800d51a:	212d      	movs	r1, #45	; 0x2d
 800d51c:	7011      	strb	r1, [r2, #0]
 800d51e:	9907      	ldr	r1, [sp, #28]
 800d520:	9a06      	ldr	r2, [sp, #24]
 800d522:	430a      	orrs	r2, r1
 800d524:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d526:	3101      	adds	r1, #1
 800d528:	d101      	bne.n	800d52e <_svfprintf_r+0x322>
 800d52a:	f001 f87b 	bl	800e624 <_svfprintf_r+0x1418>
 800d52e:	2180      	movs	r1, #128	; 0x80
 800d530:	0034      	movs	r4, r6
 800d532:	438c      	bics	r4, r1
 800d534:	2a00      	cmp	r2, #0
 800d536:	d001      	beq.n	800d53c <_svfprintf_r+0x330>
 800d538:	f001 f879 	bl	800e62e <_svfprintf_r+0x1422>
 800d53c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d53e:	2a00      	cmp	r2, #0
 800d540:	d101      	bne.n	800d546 <_svfprintf_r+0x33a>
 800d542:	f000 fcef 	bl	800df24 <_svfprintf_r+0xd18>
 800d546:	2b01      	cmp	r3, #1
 800d548:	d001      	beq.n	800d54e <_svfprintf_r+0x342>
 800d54a:	f001 f874 	bl	800e636 <_svfprintf_r+0x142a>
 800d54e:	f000 fc79 	bl	800de44 <_svfprintf_r+0xc38>
 800d552:	0022      	movs	r2, r4
 800d554:	ca08      	ldmia	r2!, {r3}
 800d556:	920d      	str	r2, [sp, #52]	; 0x34
 800d558:	06f2      	lsls	r2, r6, #27
 800d55a:	d503      	bpl.n	800d564 <_svfprintf_r+0x358>
 800d55c:	9306      	str	r3, [sp, #24]
 800d55e:	17db      	asrs	r3, r3, #31
 800d560:	9307      	str	r3, [sp, #28]
 800d562:	e7cc      	b.n	800d4fe <_svfprintf_r+0x2f2>
 800d564:	0672      	lsls	r2, r6, #25
 800d566:	d501      	bpl.n	800d56c <_svfprintf_r+0x360>
 800d568:	b21b      	sxth	r3, r3
 800d56a:	e7f7      	b.n	800d55c <_svfprintf_r+0x350>
 800d56c:	05b2      	lsls	r2, r6, #22
 800d56e:	d5f5      	bpl.n	800d55c <_svfprintf_r+0x350>
 800d570:	b25b      	sxtb	r3, r3
 800d572:	e7f3      	b.n	800d55c <_svfprintf_r+0x350>
 800d574:	2307      	movs	r3, #7
 800d576:	3407      	adds	r4, #7
 800d578:	439c      	bics	r4, r3
 800d57a:	0022      	movs	r2, r4
 800d57c:	ca18      	ldmia	r2!, {r3, r4}
 800d57e:	920d      	str	r2, [sp, #52]	; 0x34
 800d580:	2201      	movs	r2, #1
 800d582:	9314      	str	r3, [sp, #80]	; 0x50
 800d584:	9415      	str	r4, [sp, #84]	; 0x54
 800d586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d588:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d58a:	005c      	lsls	r4, r3, #1
 800d58c:	0864      	lsrs	r4, r4, #1
 800d58e:	0028      	movs	r0, r5
 800d590:	0021      	movs	r1, r4
 800d592:	4b3e      	ldr	r3, [pc, #248]	; (800d68c <_svfprintf_r+0x480>)
 800d594:	4252      	negs	r2, r2
 800d596:	f7f4 fead 	bl	80022f4 <__aeabi_dcmpun>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d126      	bne.n	800d5ec <_svfprintf_r+0x3e0>
 800d59e:	2201      	movs	r2, #1
 800d5a0:	0028      	movs	r0, r5
 800d5a2:	0021      	movs	r1, r4
 800d5a4:	4b39      	ldr	r3, [pc, #228]	; (800d68c <_svfprintf_r+0x480>)
 800d5a6:	4252      	negs	r2, r2
 800d5a8:	f7f2 ff5e 	bl	8000468 <__aeabi_dcmple>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d11d      	bne.n	800d5ec <_svfprintf_r+0x3e0>
 800d5b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d5b2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	f7f2 ff4c 	bl	8000454 <__aeabi_dcmplt>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d004      	beq.n	800d5ca <_svfprintf_r+0x3be>
 800d5c0:	231b      	movs	r3, #27
 800d5c2:	aa1e      	add	r2, sp, #120	; 0x78
 800d5c4:	189b      	adds	r3, r3, r2
 800d5c6:	222d      	movs	r2, #45	; 0x2d
 800d5c8:	701a      	strb	r2, [r3, #0]
 800d5ca:	4b31      	ldr	r3, [pc, #196]	; (800d690 <_svfprintf_r+0x484>)
 800d5cc:	9308      	str	r3, [sp, #32]
 800d5ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5d0:	2b47      	cmp	r3, #71	; 0x47
 800d5d2:	dd01      	ble.n	800d5d8 <_svfprintf_r+0x3cc>
 800d5d4:	4b2f      	ldr	r3, [pc, #188]	; (800d694 <_svfprintf_r+0x488>)
 800d5d6:	9308      	str	r3, [sp, #32]
 800d5d8:	2380      	movs	r3, #128	; 0x80
 800d5da:	439e      	bics	r6, r3
 800d5dc:	2300      	movs	r3, #0
 800d5de:	930c      	str	r3, [sp, #48]	; 0x30
 800d5e0:	3303      	adds	r3, #3
 800d5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	9319      	str	r3, [sp, #100]	; 0x64
 800d5e8:	f000 fc78 	bl	800dedc <_svfprintf_r+0xcd0>
 800d5ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d5ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5f0:	0010      	movs	r0, r2
 800d5f2:	0019      	movs	r1, r3
 800d5f4:	f7f4 fe7e 	bl	80022f4 <__aeabi_dcmpun>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d00e      	beq.n	800d61a <_svfprintf_r+0x40e>
 800d5fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	da04      	bge.n	800d60c <_svfprintf_r+0x400>
 800d602:	231b      	movs	r3, #27
 800d604:	aa1e      	add	r2, sp, #120	; 0x78
 800d606:	189b      	adds	r3, r3, r2
 800d608:	222d      	movs	r2, #45	; 0x2d
 800d60a:	701a      	strb	r2, [r3, #0]
 800d60c:	4b22      	ldr	r3, [pc, #136]	; (800d698 <_svfprintf_r+0x48c>)
 800d60e:	9308      	str	r3, [sp, #32]
 800d610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d612:	2b47      	cmp	r3, #71	; 0x47
 800d614:	dde0      	ble.n	800d5d8 <_svfprintf_r+0x3cc>
 800d616:	4b21      	ldr	r3, [pc, #132]	; (800d69c <_svfprintf_r+0x490>)
 800d618:	e7dd      	b.n	800d5d6 <_svfprintf_r+0x3ca>
 800d61a:	2320      	movs	r3, #32
 800d61c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d61e:	439a      	bics	r2, r3
 800d620:	9210      	str	r2, [sp, #64]	; 0x40
 800d622:	2a41      	cmp	r2, #65	; 0x41
 800d624:	d123      	bne.n	800d66e <_svfprintf_r+0x462>
 800d626:	2230      	movs	r2, #48	; 0x30
 800d628:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d62a:	ab25      	add	r3, sp, #148	; 0x94
 800d62c:	701a      	strb	r2, [r3, #0]
 800d62e:	3248      	adds	r2, #72	; 0x48
 800d630:	2961      	cmp	r1, #97	; 0x61
 800d632:	d000      	beq.n	800d636 <_svfprintf_r+0x42a>
 800d634:	3a20      	subs	r2, #32
 800d636:	705a      	strb	r2, [r3, #1]
 800d638:	2302      	movs	r3, #2
 800d63a:	431e      	orrs	r6, r3
 800d63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d63e:	2b63      	cmp	r3, #99	; 0x63
 800d640:	dd2e      	ble.n	800d6a0 <_svfprintf_r+0x494>
 800d642:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d644:	1c59      	adds	r1, r3, #1
 800d646:	f7fd f969 	bl	800a91c <_malloc_r>
 800d64a:	9008      	str	r0, [sp, #32]
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d000      	beq.n	800d652 <_svfprintf_r+0x446>
 800d650:	e216      	b.n	800da80 <_svfprintf_r+0x874>
 800d652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d654:	899a      	ldrh	r2, [r3, #12]
 800d656:	2340      	movs	r3, #64	; 0x40
 800d658:	4313      	orrs	r3, r2
 800d65a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d65c:	8193      	strh	r3, [r2, #12]
 800d65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d660:	899b      	ldrh	r3, [r3, #12]
 800d662:	065b      	lsls	r3, r3, #25
 800d664:	d400      	bmi.n	800d668 <_svfprintf_r+0x45c>
 800d666:	e5f5      	b.n	800d254 <_svfprintf_r+0x48>
 800d668:	2301      	movs	r3, #1
 800d66a:	425b      	negs	r3, r3
 800d66c:	e5f1      	b.n	800d252 <_svfprintf_r+0x46>
 800d66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d670:	900c      	str	r0, [sp, #48]	; 0x30
 800d672:	3301      	adds	r3, #1
 800d674:	d100      	bne.n	800d678 <_svfprintf_r+0x46c>
 800d676:	e206      	b.n	800da86 <_svfprintf_r+0x87a>
 800d678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d67a:	2b47      	cmp	r3, #71	; 0x47
 800d67c:	d114      	bne.n	800d6a8 <_svfprintf_r+0x49c>
 800d67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d680:	2b00      	cmp	r3, #0
 800d682:	d111      	bne.n	800d6a8 <_svfprintf_r+0x49c>
 800d684:	3301      	adds	r3, #1
 800d686:	9309      	str	r3, [sp, #36]	; 0x24
 800d688:	e00e      	b.n	800d6a8 <_svfprintf_r+0x49c>
 800d68a:	46c0      	nop			; (mov r8, r8)
 800d68c:	7fefffff 	.word	0x7fefffff
 800d690:	0801464c 	.word	0x0801464c
 800d694:	08014650 	.word	0x08014650
 800d698:	08014654 	.word	0x08014654
 800d69c:	08014658 	.word	0x08014658
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	930c      	str	r3, [sp, #48]	; 0x30
 800d6a4:	ab3f      	add	r3, sp, #252	; 0xfc
 800d6a6:	9308      	str	r3, [sp, #32]
 800d6a8:	2380      	movs	r3, #128	; 0x80
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	4333      	orrs	r3, r6
 800d6ae:	931a      	str	r3, [sp, #104]	; 0x68
 800d6b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6b2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	db00      	blt.n	800d6ba <_svfprintf_r+0x4ae>
 800d6b8:	e1e7      	b.n	800da8a <_svfprintf_r+0x87e>
 800d6ba:	2280      	movs	r2, #128	; 0x80
 800d6bc:	0612      	lsls	r2, r2, #24
 800d6be:	4694      	mov	ip, r2
 800d6c0:	4463      	add	r3, ip
 800d6c2:	930e      	str	r3, [sp, #56]	; 0x38
 800d6c4:	232d      	movs	r3, #45	; 0x2d
 800d6c6:	9322      	str	r3, [sp, #136]	; 0x88
 800d6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6ca:	2b41      	cmp	r3, #65	; 0x41
 800d6cc:	d000      	beq.n	800d6d0 <_svfprintf_r+0x4c4>
 800d6ce:	e1f5      	b.n	800dabc <_svfprintf_r+0x8b0>
 800d6d0:	0028      	movs	r0, r5
 800d6d2:	aa26      	add	r2, sp, #152	; 0x98
 800d6d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d6d6:	f002 fb73 	bl	800fdc0 <frexp>
 800d6da:	23ff      	movs	r3, #255	; 0xff
 800d6dc:	2200      	movs	r2, #0
 800d6de:	059b      	lsls	r3, r3, #22
 800d6e0:	f7f3 ffc4 	bl	800166c <__aeabi_dmul>
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	0004      	movs	r4, r0
 800d6ea:	000d      	movs	r5, r1
 800d6ec:	f7f2 feac 	bl	8000448 <__aeabi_dcmpeq>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d001      	beq.n	800d6f8 <_svfprintf_r+0x4ec>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	9326      	str	r3, [sp, #152]	; 0x98
 800d6f8:	4bda      	ldr	r3, [pc, #872]	; (800da64 <_svfprintf_r+0x858>)
 800d6fa:	9319      	str	r3, [sp, #100]	; 0x64
 800d6fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6fe:	2b61      	cmp	r3, #97	; 0x61
 800d700:	d001      	beq.n	800d706 <_svfprintf_r+0x4fa>
 800d702:	4bd9      	ldr	r3, [pc, #868]	; (800da68 <_svfprintf_r+0x85c>)
 800d704:	9319      	str	r3, [sp, #100]	; 0x64
 800d706:	9b08      	ldr	r3, [sp, #32]
 800d708:	930e      	str	r3, [sp, #56]	; 0x38
 800d70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d70c:	3b01      	subs	r3, #1
 800d70e:	9311      	str	r3, [sp, #68]	; 0x44
 800d710:	2200      	movs	r2, #0
 800d712:	4bd6      	ldr	r3, [pc, #856]	; (800da6c <_svfprintf_r+0x860>)
 800d714:	0020      	movs	r0, r4
 800d716:	0029      	movs	r1, r5
 800d718:	f7f3 ffa8 	bl	800166c <__aeabi_dmul>
 800d71c:	000d      	movs	r5, r1
 800d71e:	0004      	movs	r4, r0
 800d720:	f7f4 fe06 	bl	8002330 <__aeabi_d2iz>
 800d724:	9021      	str	r0, [sp, #132]	; 0x84
 800d726:	f7f4 fe39 	bl	800239c <__aeabi_i2d>
 800d72a:	0002      	movs	r2, r0
 800d72c:	000b      	movs	r3, r1
 800d72e:	0020      	movs	r0, r4
 800d730:	0029      	movs	r1, r5
 800d732:	f7f4 fa5d 	bl	8001bf0 <__aeabi_dsub>
 800d736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d738:	000d      	movs	r5, r1
 800d73a:	001a      	movs	r2, r3
 800d73c:	3201      	adds	r2, #1
 800d73e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d740:	920e      	str	r2, [sp, #56]	; 0x38
 800d742:	9223      	str	r2, [sp, #140]	; 0x8c
 800d744:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d746:	0004      	movs	r4, r0
 800d748:	5c52      	ldrb	r2, [r2, r1]
 800d74a:	701a      	strb	r2, [r3, #0]
 800d74c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d74e:	9320      	str	r3, [sp, #128]	; 0x80
 800d750:	3301      	adds	r3, #1
 800d752:	d00a      	beq.n	800d76a <_svfprintf_r+0x55e>
 800d754:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d756:	2200      	movs	r2, #0
 800d758:	3b01      	subs	r3, #1
 800d75a:	9311      	str	r3, [sp, #68]	; 0x44
 800d75c:	0020      	movs	r0, r4
 800d75e:	2300      	movs	r3, #0
 800d760:	0029      	movs	r1, r5
 800d762:	f7f2 fe71 	bl	8000448 <__aeabi_dcmpeq>
 800d766:	2800      	cmp	r0, #0
 800d768:	d0d2      	beq.n	800d710 <_svfprintf_r+0x504>
 800d76a:	2200      	movs	r2, #0
 800d76c:	0020      	movs	r0, r4
 800d76e:	0029      	movs	r1, r5
 800d770:	4bbf      	ldr	r3, [pc, #764]	; (800da70 <_svfprintf_r+0x864>)
 800d772:	f7f2 fe83 	bl	800047c <__aeabi_dcmpgt>
 800d776:	2800      	cmp	r0, #0
 800d778:	d10c      	bne.n	800d794 <_svfprintf_r+0x588>
 800d77a:	2200      	movs	r2, #0
 800d77c:	0020      	movs	r0, r4
 800d77e:	0029      	movs	r1, r5
 800d780:	4bbb      	ldr	r3, [pc, #748]	; (800da70 <_svfprintf_r+0x864>)
 800d782:	f7f2 fe61 	bl	8000448 <__aeabi_dcmpeq>
 800d786:	2800      	cmp	r0, #0
 800d788:	d100      	bne.n	800d78c <_svfprintf_r+0x580>
 800d78a:	e191      	b.n	800dab0 <_svfprintf_r+0x8a4>
 800d78c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d78e:	07db      	lsls	r3, r3, #31
 800d790:	d400      	bmi.n	800d794 <_svfprintf_r+0x588>
 800d792:	e18d      	b.n	800dab0 <_svfprintf_r+0x8a4>
 800d794:	2030      	movs	r0, #48	; 0x30
 800d796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d798:	932a      	str	r3, [sp, #168]	; 0xa8
 800d79a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d79c:	7bdb      	ldrb	r3, [r3, #15]
 800d79e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d7a0:	3a01      	subs	r2, #1
 800d7a2:	922a      	str	r2, [sp, #168]	; 0xa8
 800d7a4:	7811      	ldrb	r1, [r2, #0]
 800d7a6:	4299      	cmp	r1, r3
 800d7a8:	d100      	bne.n	800d7ac <_svfprintf_r+0x5a0>
 800d7aa:	e171      	b.n	800da90 <_svfprintf_r+0x884>
 800d7ac:	1c4b      	adds	r3, r1, #1
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2939      	cmp	r1, #57	; 0x39
 800d7b2:	d101      	bne.n	800d7b8 <_svfprintf_r+0x5ac>
 800d7b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d7b6:	7a9b      	ldrb	r3, [r3, #10]
 800d7b8:	7013      	strb	r3, [r2, #0]
 800d7ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d7bc:	9a08      	ldr	r2, [sp, #32]
 800d7be:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d7c0:	1a9b      	subs	r3, r3, r2
 800d7c2:	930e      	str	r3, [sp, #56]	; 0x38
 800d7c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7c6:	2b47      	cmp	r3, #71	; 0x47
 800d7c8:	d000      	beq.n	800d7cc <_svfprintf_r+0x5c0>
 800d7ca:	e1c4      	b.n	800db56 <_svfprintf_r+0x94a>
 800d7cc:	1ceb      	adds	r3, r5, #3
 800d7ce:	db03      	blt.n	800d7d8 <_svfprintf_r+0x5cc>
 800d7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d2:	42ab      	cmp	r3, r5
 800d7d4:	db00      	blt.n	800d7d8 <_svfprintf_r+0x5cc>
 800d7d6:	e1e6      	b.n	800dba6 <_svfprintf_r+0x99a>
 800d7d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7da:	3b02      	subs	r3, #2
 800d7dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7de:	223c      	movs	r2, #60	; 0x3c
 800d7e0:	466b      	mov	r3, sp
 800d7e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d7e4:	189b      	adds	r3, r3, r2
 800d7e6:	1e6c      	subs	r4, r5, #1
 800d7e8:	3a1c      	subs	r2, #28
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	9426      	str	r4, [sp, #152]	; 0x98
 800d7f0:	4391      	bics	r1, r2
 800d7f2:	2941      	cmp	r1, #65	; 0x41
 800d7f4:	d102      	bne.n	800d7fc <_svfprintf_r+0x5f0>
 800d7f6:	330f      	adds	r3, #15
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	a928      	add	r1, sp, #160	; 0xa0
 800d7fe:	700b      	strb	r3, [r1, #0]
 800d800:	232b      	movs	r3, #43	; 0x2b
 800d802:	2c00      	cmp	r4, #0
 800d804:	da02      	bge.n	800d80c <_svfprintf_r+0x600>
 800d806:	2401      	movs	r4, #1
 800d808:	3302      	adds	r3, #2
 800d80a:	1b64      	subs	r4, r4, r5
 800d80c:	704b      	strb	r3, [r1, #1]
 800d80e:	2c09      	cmp	r4, #9
 800d810:	dc00      	bgt.n	800d814 <_svfprintf_r+0x608>
 800d812:	e1ba      	b.n	800db8a <_svfprintf_r+0x97e>
 800d814:	2337      	movs	r3, #55	; 0x37
 800d816:	250a      	movs	r5, #10
 800d818:	aa1e      	add	r2, sp, #120	; 0x78
 800d81a:	189b      	adds	r3, r3, r2
 800d81c:	9310      	str	r3, [sp, #64]	; 0x40
 800d81e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d820:	0020      	movs	r0, r4
 800d822:	9309      	str	r3, [sp, #36]	; 0x24
 800d824:	0029      	movs	r1, r5
 800d826:	3b01      	subs	r3, #1
 800d828:	9310      	str	r3, [sp, #64]	; 0x40
 800d82a:	f7f2 fdf7 	bl	800041c <__aeabi_idivmod>
 800d82e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d830:	3130      	adds	r1, #48	; 0x30
 800d832:	7019      	strb	r1, [r3, #0]
 800d834:	0020      	movs	r0, r4
 800d836:	0029      	movs	r1, r5
 800d838:	9411      	str	r4, [sp, #68]	; 0x44
 800d83a:	f7f2 fd09 	bl	8000250 <__divsi3>
 800d83e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d840:	0004      	movs	r4, r0
 800d842:	2b63      	cmp	r3, #99	; 0x63
 800d844:	dceb      	bgt.n	800d81e <_svfprintf_r+0x612>
 800d846:	222a      	movs	r2, #42	; 0x2a
 800d848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d84a:	a81e      	add	r0, sp, #120	; 0x78
 800d84c:	1e99      	subs	r1, r3, #2
 800d84e:	1812      	adds	r2, r2, r0
 800d850:	2037      	movs	r0, #55	; 0x37
 800d852:	000b      	movs	r3, r1
 800d854:	3430      	adds	r4, #48	; 0x30
 800d856:	700c      	strb	r4, [r1, #0]
 800d858:	ac1e      	add	r4, sp, #120	; 0x78
 800d85a:	1900      	adds	r0, r0, r4
 800d85c:	4283      	cmp	r3, r0
 800d85e:	d200      	bcs.n	800d862 <_svfprintf_r+0x656>
 800d860:	e18e      	b.n	800db80 <_svfprintf_r+0x974>
 800d862:	2300      	movs	r3, #0
 800d864:	4281      	cmp	r1, r0
 800d866:	d804      	bhi.n	800d872 <_svfprintf_r+0x666>
 800d868:	aa1e      	add	r2, sp, #120	; 0x78
 800d86a:	3339      	adds	r3, #57	; 0x39
 800d86c:	189b      	adds	r3, r3, r2
 800d86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d870:	1a9b      	subs	r3, r3, r2
 800d872:	222a      	movs	r2, #42	; 0x2a
 800d874:	a91e      	add	r1, sp, #120	; 0x78
 800d876:	1852      	adds	r2, r2, r1
 800d878:	18d3      	adds	r3, r2, r3
 800d87a:	aa28      	add	r2, sp, #160	; 0xa0
 800d87c:	1a9b      	subs	r3, r3, r2
 800d87e:	931e      	str	r3, [sp, #120]	; 0x78
 800d880:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d884:	4694      	mov	ip, r2
 800d886:	4463      	add	r3, ip
 800d888:	9309      	str	r3, [sp, #36]	; 0x24
 800d88a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	dc01      	bgt.n	800d894 <_svfprintf_r+0x688>
 800d890:	07f3      	lsls	r3, r6, #31
 800d892:	d504      	bpl.n	800d89e <_svfprintf_r+0x692>
 800d894:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d898:	4694      	mov	ip, r2
 800d89a:	4463      	add	r3, ip
 800d89c:	9309      	str	r3, [sp, #36]	; 0x24
 800d89e:	2280      	movs	r2, #128	; 0x80
 800d8a0:	4b74      	ldr	r3, [pc, #464]	; (800da74 <_svfprintf_r+0x868>)
 800d8a2:	0052      	lsls	r2, r2, #1
 800d8a4:	4033      	ands	r3, r6
 800d8a6:	431a      	orrs	r2, r3
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	001d      	movs	r5, r3
 800d8ac:	921a      	str	r2, [sp, #104]	; 0x68
 800d8ae:	9310      	str	r3, [sp, #64]	; 0x40
 800d8b0:	9311      	str	r3, [sp, #68]	; 0x44
 800d8b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8b4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d8b6:	9319      	str	r3, [sp, #100]	; 0x64
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d006      	beq.n	800d8ca <_svfprintf_r+0x6be>
 800d8bc:	231b      	movs	r3, #27
 800d8be:	aa1e      	add	r2, sp, #120	; 0x78
 800d8c0:	189b      	adds	r3, r3, r2
 800d8c2:	222d      	movs	r2, #45	; 0x2d
 800d8c4:	701a      	strb	r2, [r3, #0]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	9319      	str	r3, [sp, #100]	; 0x64
 800d8ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8ce:	931a      	str	r3, [sp, #104]	; 0x68
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	da00      	bge.n	800d8d6 <_svfprintf_r+0x6ca>
 800d8d4:	921a      	str	r2, [sp, #104]	; 0x68
 800d8d6:	231b      	movs	r3, #27
 800d8d8:	aa1e      	add	r2, sp, #120	; 0x78
 800d8da:	189b      	adds	r3, r3, r2
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	1e5a      	subs	r2, r3, #1
 800d8e0:	4193      	sbcs	r3, r2
 800d8e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d8e4:	18d3      	adds	r3, r2, r3
 800d8e6:	931a      	str	r3, [sp, #104]	; 0x68
 800d8e8:	0032      	movs	r2, r6
 800d8ea:	2302      	movs	r3, #2
 800d8ec:	401a      	ands	r2, r3
 800d8ee:	9220      	str	r2, [sp, #128]	; 0x80
 800d8f0:	421e      	tst	r6, r3
 800d8f2:	d002      	beq.n	800d8fa <_svfprintf_r+0x6ee>
 800d8f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d8f6:	3302      	adds	r3, #2
 800d8f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d8fa:	2384      	movs	r3, #132	; 0x84
 800d8fc:	0032      	movs	r2, r6
 800d8fe:	401a      	ands	r2, r3
 800d900:	9221      	str	r2, [sp, #132]	; 0x84
 800d902:	421e      	tst	r6, r3
 800d904:	d11f      	bne.n	800d946 <_svfprintf_r+0x73a>
 800d906:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d908:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d90a:	1a9c      	subs	r4, r3, r2
 800d90c:	2c00      	cmp	r4, #0
 800d90e:	dd1a      	ble.n	800d946 <_svfprintf_r+0x73a>
 800d910:	0039      	movs	r1, r7
 800d912:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d914:	4858      	ldr	r0, [pc, #352]	; (800da78 <_svfprintf_r+0x86c>)
 800d916:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d918:	3301      	adds	r3, #1
 800d91a:	3108      	adds	r1, #8
 800d91c:	6038      	str	r0, [r7, #0]
 800d91e:	2c10      	cmp	r4, #16
 800d920:	dd00      	ble.n	800d924 <_svfprintf_r+0x718>
 800d922:	e31c      	b.n	800df5e <_svfprintf_r+0xd52>
 800d924:	607c      	str	r4, [r7, #4]
 800d926:	18a4      	adds	r4, r4, r2
 800d928:	000f      	movs	r7, r1
 800d92a:	942e      	str	r4, [sp, #184]	; 0xb8
 800d92c:	932d      	str	r3, [sp, #180]	; 0xb4
 800d92e:	2b07      	cmp	r3, #7
 800d930:	dd09      	ble.n	800d946 <_svfprintf_r+0x73a>
 800d932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d934:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d936:	aa2c      	add	r2, sp, #176	; 0xb0
 800d938:	f003 fd7e 	bl	8011438 <__ssprint_r>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d001      	beq.n	800d944 <_svfprintf_r+0x738>
 800d940:	f000 fe43 	bl	800e5ca <_svfprintf_r+0x13be>
 800d944:	af2f      	add	r7, sp, #188	; 0xbc
 800d946:	221b      	movs	r2, #27
 800d948:	a91e      	add	r1, sp, #120	; 0x78
 800d94a:	1852      	adds	r2, r2, r1
 800d94c:	7811      	ldrb	r1, [r2, #0]
 800d94e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d950:	2900      	cmp	r1, #0
 800d952:	d014      	beq.n	800d97e <_svfprintf_r+0x772>
 800d954:	603a      	str	r2, [r7, #0]
 800d956:	2201      	movs	r2, #1
 800d958:	189b      	adds	r3, r3, r2
 800d95a:	932e      	str	r3, [sp, #184]	; 0xb8
 800d95c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d95e:	607a      	str	r2, [r7, #4]
 800d960:	189b      	adds	r3, r3, r2
 800d962:	932d      	str	r3, [sp, #180]	; 0xb4
 800d964:	3708      	adds	r7, #8
 800d966:	2b07      	cmp	r3, #7
 800d968:	dd09      	ble.n	800d97e <_svfprintf_r+0x772>
 800d96a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d96c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d96e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d970:	f003 fd62 	bl	8011438 <__ssprint_r>
 800d974:	2800      	cmp	r0, #0
 800d976:	d001      	beq.n	800d97c <_svfprintf_r+0x770>
 800d978:	f000 fe27 	bl	800e5ca <_svfprintf_r+0x13be>
 800d97c:	af2f      	add	r7, sp, #188	; 0xbc
 800d97e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d980:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d982:	2a00      	cmp	r2, #0
 800d984:	d015      	beq.n	800d9b2 <_svfprintf_r+0x7a6>
 800d986:	aa25      	add	r2, sp, #148	; 0x94
 800d988:	603a      	str	r2, [r7, #0]
 800d98a:	2202      	movs	r2, #2
 800d98c:	189b      	adds	r3, r3, r2
 800d98e:	932e      	str	r3, [sp, #184]	; 0xb8
 800d990:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d992:	607a      	str	r2, [r7, #4]
 800d994:	3301      	adds	r3, #1
 800d996:	932d      	str	r3, [sp, #180]	; 0xb4
 800d998:	3708      	adds	r7, #8
 800d99a:	2b07      	cmp	r3, #7
 800d99c:	dd09      	ble.n	800d9b2 <_svfprintf_r+0x7a6>
 800d99e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9a2:	aa2c      	add	r2, sp, #176	; 0xb0
 800d9a4:	f003 fd48 	bl	8011438 <__ssprint_r>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d001      	beq.n	800d9b0 <_svfprintf_r+0x7a4>
 800d9ac:	f000 fe0d 	bl	800e5ca <_svfprintf_r+0x13be>
 800d9b0:	af2f      	add	r7, sp, #188	; 0xbc
 800d9b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9b4:	2b80      	cmp	r3, #128	; 0x80
 800d9b6:	d11f      	bne.n	800d9f8 <_svfprintf_r+0x7ec>
 800d9b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d9ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d9bc:	1a9c      	subs	r4, r3, r2
 800d9be:	2c00      	cmp	r4, #0
 800d9c0:	dd1a      	ble.n	800d9f8 <_svfprintf_r+0x7ec>
 800d9c2:	0039      	movs	r1, r7
 800d9c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d9c6:	482d      	ldr	r0, [pc, #180]	; (800da7c <_svfprintf_r+0x870>)
 800d9c8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	3108      	adds	r1, #8
 800d9ce:	6038      	str	r0, [r7, #0]
 800d9d0:	2c10      	cmp	r4, #16
 800d9d2:	dd00      	ble.n	800d9d6 <_svfprintf_r+0x7ca>
 800d9d4:	e2d6      	b.n	800df84 <_svfprintf_r+0xd78>
 800d9d6:	607c      	str	r4, [r7, #4]
 800d9d8:	18a4      	adds	r4, r4, r2
 800d9da:	000f      	movs	r7, r1
 800d9dc:	942e      	str	r4, [sp, #184]	; 0xb8
 800d9de:	932d      	str	r3, [sp, #180]	; 0xb4
 800d9e0:	2b07      	cmp	r3, #7
 800d9e2:	dd09      	ble.n	800d9f8 <_svfprintf_r+0x7ec>
 800d9e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9e8:	aa2c      	add	r2, sp, #176	; 0xb0
 800d9ea:	f003 fd25 	bl	8011438 <__ssprint_r>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d001      	beq.n	800d9f6 <_svfprintf_r+0x7ea>
 800d9f2:	f000 fdea 	bl	800e5ca <_svfprintf_r+0x13be>
 800d9f6:	af2f      	add	r7, sp, #188	; 0xbc
 800d9f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9fc:	1a9c      	subs	r4, r3, r2
 800d9fe:	2c00      	cmp	r4, #0
 800da00:	dd1a      	ble.n	800da38 <_svfprintf_r+0x82c>
 800da02:	0039      	movs	r1, r7
 800da04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da06:	481d      	ldr	r0, [pc, #116]	; (800da7c <_svfprintf_r+0x870>)
 800da08:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800da0a:	3301      	adds	r3, #1
 800da0c:	3108      	adds	r1, #8
 800da0e:	6038      	str	r0, [r7, #0]
 800da10:	2c10      	cmp	r4, #16
 800da12:	dd00      	ble.n	800da16 <_svfprintf_r+0x80a>
 800da14:	e2c9      	b.n	800dfaa <_svfprintf_r+0xd9e>
 800da16:	18a2      	adds	r2, r4, r2
 800da18:	607c      	str	r4, [r7, #4]
 800da1a:	922e      	str	r2, [sp, #184]	; 0xb8
 800da1c:	000f      	movs	r7, r1
 800da1e:	932d      	str	r3, [sp, #180]	; 0xb4
 800da20:	2b07      	cmp	r3, #7
 800da22:	dd09      	ble.n	800da38 <_svfprintf_r+0x82c>
 800da24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da26:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da28:	aa2c      	add	r2, sp, #176	; 0xb0
 800da2a:	f003 fd05 	bl	8011438 <__ssprint_r>
 800da2e:	2800      	cmp	r0, #0
 800da30:	d001      	beq.n	800da36 <_svfprintf_r+0x82a>
 800da32:	f000 fdca 	bl	800e5ca <_svfprintf_r+0x13be>
 800da36:	af2f      	add	r7, sp, #188	; 0xbc
 800da38:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800da3a:	9319      	str	r3, [sp, #100]	; 0x64
 800da3c:	05f3      	lsls	r3, r6, #23
 800da3e:	d500      	bpl.n	800da42 <_svfprintf_r+0x836>
 800da40:	e2ce      	b.n	800dfe0 <_svfprintf_r+0xdd4>
 800da42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da44:	9b08      	ldr	r3, [sp, #32]
 800da46:	4694      	mov	ip, r2
 800da48:	603b      	str	r3, [r7, #0]
 800da4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4c:	607b      	str	r3, [r7, #4]
 800da4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da50:	4463      	add	r3, ip
 800da52:	932e      	str	r3, [sp, #184]	; 0xb8
 800da54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da56:	3301      	adds	r3, #1
 800da58:	932d      	str	r3, [sp, #180]	; 0xb4
 800da5a:	2b07      	cmp	r3, #7
 800da5c:	dd00      	ble.n	800da60 <_svfprintf_r+0x854>
 800da5e:	e3a3      	b.n	800e1a8 <_svfprintf_r+0xf9c>
 800da60:	3708      	adds	r7, #8
 800da62:	e301      	b.n	800e068 <_svfprintf_r+0xe5c>
 800da64:	0801465c 	.word	0x0801465c
 800da68:	0801466d 	.word	0x0801466d
 800da6c:	40300000 	.word	0x40300000
 800da70:	3fe00000 	.word	0x3fe00000
 800da74:	fffffbff 	.word	0xfffffbff
 800da78:	08014680 	.word	0x08014680
 800da7c:	08014690 	.word	0x08014690
 800da80:	9b08      	ldr	r3, [sp, #32]
 800da82:	930c      	str	r3, [sp, #48]	; 0x30
 800da84:	e610      	b.n	800d6a8 <_svfprintf_r+0x49c>
 800da86:	2306      	movs	r3, #6
 800da88:	e5fd      	b.n	800d686 <_svfprintf_r+0x47a>
 800da8a:	930e      	str	r3, [sp, #56]	; 0x38
 800da8c:	2300      	movs	r3, #0
 800da8e:	e61a      	b.n	800d6c6 <_svfprintf_r+0x4ba>
 800da90:	7010      	strb	r0, [r2, #0]
 800da92:	e684      	b.n	800d79e <_svfprintf_r+0x592>
 800da94:	7018      	strb	r0, [r3, #0]
 800da96:	3301      	adds	r3, #1
 800da98:	1aca      	subs	r2, r1, r3
 800da9a:	d5fb      	bpl.n	800da94 <_svfprintf_r+0x888>
 800da9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da9e:	2300      	movs	r3, #0
 800daa0:	3201      	adds	r2, #1
 800daa2:	db01      	blt.n	800daa8 <_svfprintf_r+0x89c>
 800daa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800daa6:	3301      	adds	r3, #1
 800daa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800daaa:	18d3      	adds	r3, r2, r3
 800daac:	9323      	str	r3, [sp, #140]	; 0x8c
 800daae:	e684      	b.n	800d7ba <_svfprintf_r+0x5ae>
 800dab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dab2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800dab4:	2030      	movs	r0, #48	; 0x30
 800dab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dab8:	1851      	adds	r1, r2, r1
 800daba:	e7ed      	b.n	800da98 <_svfprintf_r+0x88c>
 800dabc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dabe:	2303      	movs	r3, #3
 800dac0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dac2:	2a46      	cmp	r2, #70	; 0x46
 800dac4:	d006      	beq.n	800dad4 <_svfprintf_r+0x8c8>
 800dac6:	0014      	movs	r4, r2
 800dac8:	3c45      	subs	r4, #69	; 0x45
 800daca:	4262      	negs	r2, r4
 800dacc:	4154      	adcs	r4, r2
 800dace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dad0:	3b01      	subs	r3, #1
 800dad2:	1914      	adds	r4, r2, r4
 800dad4:	aa2a      	add	r2, sp, #168	; 0xa8
 800dad6:	9204      	str	r2, [sp, #16]
 800dad8:	aa27      	add	r2, sp, #156	; 0x9c
 800dada:	9203      	str	r2, [sp, #12]
 800dadc:	aa26      	add	r2, sp, #152	; 0x98
 800dade:	9202      	str	r2, [sp, #8]
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	002a      	movs	r2, r5
 800dae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dae6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dae8:	9401      	str	r4, [sp, #4]
 800daea:	f002 fad7 	bl	801009c <_dtoa_r>
 800daee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800daf0:	9008      	str	r0, [sp, #32]
 800daf2:	2b47      	cmp	r3, #71	; 0x47
 800daf4:	d103      	bne.n	800dafe <_svfprintf_r+0x8f2>
 800daf6:	07f3      	lsls	r3, r6, #31
 800daf8:	d401      	bmi.n	800dafe <_svfprintf_r+0x8f2>
 800dafa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800dafc:	e65e      	b.n	800d7bc <_svfprintf_r+0x5b0>
 800dafe:	9b08      	ldr	r3, [sp, #32]
 800db00:	191b      	adds	r3, r3, r4
 800db02:	9311      	str	r3, [sp, #68]	; 0x44
 800db04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db06:	2b46      	cmp	r3, #70	; 0x46
 800db08:	d112      	bne.n	800db30 <_svfprintf_r+0x924>
 800db0a:	9b08      	ldr	r3, [sp, #32]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b30      	cmp	r3, #48	; 0x30
 800db10:	d10a      	bne.n	800db28 <_svfprintf_r+0x91c>
 800db12:	2200      	movs	r2, #0
 800db14:	2300      	movs	r3, #0
 800db16:	0028      	movs	r0, r5
 800db18:	990e      	ldr	r1, [sp, #56]	; 0x38
 800db1a:	f7f2 fc95 	bl	8000448 <__aeabi_dcmpeq>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d102      	bne.n	800db28 <_svfprintf_r+0x91c>
 800db22:	2301      	movs	r3, #1
 800db24:	1b1b      	subs	r3, r3, r4
 800db26:	9326      	str	r3, [sp, #152]	; 0x98
 800db28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db2c:	18d3      	adds	r3, r2, r3
 800db2e:	9311      	str	r3, [sp, #68]	; 0x44
 800db30:	2200      	movs	r2, #0
 800db32:	2300      	movs	r3, #0
 800db34:	0028      	movs	r0, r5
 800db36:	990e      	ldr	r1, [sp, #56]	; 0x38
 800db38:	f7f2 fc86 	bl	8000448 <__aeabi_dcmpeq>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d001      	beq.n	800db44 <_svfprintf_r+0x938>
 800db40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db42:	932a      	str	r3, [sp, #168]	; 0xa8
 800db44:	2230      	movs	r2, #48	; 0x30
 800db46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800db48:	9911      	ldr	r1, [sp, #68]	; 0x44
 800db4a:	4299      	cmp	r1, r3
 800db4c:	d9d5      	bls.n	800dafa <_svfprintf_r+0x8ee>
 800db4e:	1c59      	adds	r1, r3, #1
 800db50:	912a      	str	r1, [sp, #168]	; 0xa8
 800db52:	701a      	strb	r2, [r3, #0]
 800db54:	e7f7      	b.n	800db46 <_svfprintf_r+0x93a>
 800db56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db58:	2b46      	cmp	r3, #70	; 0x46
 800db5a:	d000      	beq.n	800db5e <_svfprintf_r+0x952>
 800db5c:	e63f      	b.n	800d7de <_svfprintf_r+0x5d2>
 800db5e:	2201      	movs	r2, #1
 800db60:	0033      	movs	r3, r6
 800db62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db64:	4013      	ands	r3, r2
 800db66:	430b      	orrs	r3, r1
 800db68:	2d00      	cmp	r5, #0
 800db6a:	dd2c      	ble.n	800dbc6 <_svfprintf_r+0x9ba>
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d046      	beq.n	800dbfe <_svfprintf_r+0x9f2>
 800db70:	000a      	movs	r2, r1
 800db72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800db74:	18eb      	adds	r3, r5, r3
 800db76:	18d3      	adds	r3, r2, r3
 800db78:	9309      	str	r3, [sp, #36]	; 0x24
 800db7a:	2366      	movs	r3, #102	; 0x66
 800db7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800db7e:	e030      	b.n	800dbe2 <_svfprintf_r+0x9d6>
 800db80:	781c      	ldrb	r4, [r3, #0]
 800db82:	3301      	adds	r3, #1
 800db84:	7014      	strb	r4, [r2, #0]
 800db86:	3201      	adds	r2, #1
 800db88:	e668      	b.n	800d85c <_svfprintf_r+0x650>
 800db8a:	222a      	movs	r2, #42	; 0x2a
 800db8c:	ab1e      	add	r3, sp, #120	; 0x78
 800db8e:	18d2      	adds	r2, r2, r3
 800db90:	2800      	cmp	r0, #0
 800db92:	d104      	bne.n	800db9e <_svfprintf_r+0x992>
 800db94:	2330      	movs	r3, #48	; 0x30
 800db96:	222b      	movs	r2, #43	; 0x2b
 800db98:	708b      	strb	r3, [r1, #2]
 800db9a:	ab1e      	add	r3, sp, #120	; 0x78
 800db9c:	18d2      	adds	r2, r2, r3
 800db9e:	3430      	adds	r4, #48	; 0x30
 800dba0:	1c53      	adds	r3, r2, #1
 800dba2:	7014      	strb	r4, [r2, #0]
 800dba4:	e669      	b.n	800d87a <_svfprintf_r+0x66e>
 800dba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dba8:	42ab      	cmp	r3, r5
 800dbaa:	dd12      	ble.n	800dbd2 <_svfprintf_r+0x9c6>
 800dbac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dbae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbb0:	4694      	mov	ip, r2
 800dbb2:	4463      	add	r3, ip
 800dbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb6:	2367      	movs	r3, #103	; 0x67
 800dbb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbba:	2d00      	cmp	r5, #0
 800dbbc:	dc11      	bgt.n	800dbe2 <_svfprintf_r+0x9d6>
 800dbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc0:	1b5b      	subs	r3, r3, r5
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	e00c      	b.n	800dbe0 <_svfprintf_r+0x9d4>
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d01b      	beq.n	800dc02 <_svfprintf_r+0x9f6>
 800dbca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dbcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbce:	3301      	adds	r3, #1
 800dbd0:	e7d1      	b.n	800db76 <_svfprintf_r+0x96a>
 800dbd2:	2367      	movs	r3, #103	; 0x67
 800dbd4:	9509      	str	r5, [sp, #36]	; 0x24
 800dbd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbd8:	07f3      	lsls	r3, r6, #31
 800dbda:	d502      	bpl.n	800dbe2 <_svfprintf_r+0x9d6>
 800dbdc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dbde:	18eb      	adds	r3, r5, r3
 800dbe0:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe2:	2380      	movs	r3, #128	; 0x80
 800dbe4:	0032      	movs	r2, r6
 800dbe6:	00db      	lsls	r3, r3, #3
 800dbe8:	401a      	ands	r2, r3
 800dbea:	9211      	str	r2, [sp, #68]	; 0x44
 800dbec:	2200      	movs	r2, #0
 800dbee:	9210      	str	r2, [sp, #64]	; 0x40
 800dbf0:	421e      	tst	r6, r3
 800dbf2:	d100      	bne.n	800dbf6 <_svfprintf_r+0x9ea>
 800dbf4:	e65d      	b.n	800d8b2 <_svfprintf_r+0x6a6>
 800dbf6:	4295      	cmp	r5, r2
 800dbf8:	dc25      	bgt.n	800dc46 <_svfprintf_r+0xa3a>
 800dbfa:	9211      	str	r2, [sp, #68]	; 0x44
 800dbfc:	e659      	b.n	800d8b2 <_svfprintf_r+0x6a6>
 800dbfe:	9509      	str	r5, [sp, #36]	; 0x24
 800dc00:	e7bb      	b.n	800db7a <_svfprintf_r+0x96e>
 800dc02:	2366      	movs	r3, #102	; 0x66
 800dc04:	9209      	str	r2, [sp, #36]	; 0x24
 800dc06:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc08:	e7eb      	b.n	800dbe2 <_svfprintf_r+0x9d6>
 800dc0a:	42ab      	cmp	r3, r5
 800dc0c:	da0e      	bge.n	800dc2c <_svfprintf_r+0xa20>
 800dc0e:	1aed      	subs	r5, r5, r3
 800dc10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc12:	785b      	ldrb	r3, [r3, #1]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d012      	beq.n	800dc3e <_svfprintf_r+0xa32>
 800dc18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	9311      	str	r3, [sp, #68]	; 0x44
 800dc1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc20:	3301      	adds	r3, #1
 800dc22:	9312      	str	r3, [sp, #72]	; 0x48
 800dc24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	2bff      	cmp	r3, #255	; 0xff
 800dc2a:	d1ee      	bne.n	800dc0a <_svfprintf_r+0x9fe>
 800dc2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dc2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc30:	189b      	adds	r3, r3, r2
 800dc32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dc34:	4353      	muls	r3, r2
 800dc36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc38:	189b      	adds	r3, r3, r2
 800dc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc3c:	e639      	b.n	800d8b2 <_svfprintf_r+0x6a6>
 800dc3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc40:	3301      	adds	r3, #1
 800dc42:	9310      	str	r3, [sp, #64]	; 0x40
 800dc44:	e7ee      	b.n	800dc24 <_svfprintf_r+0xa18>
 800dc46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc48:	9311      	str	r3, [sp, #68]	; 0x44
 800dc4a:	e7eb      	b.n	800dc24 <_svfprintf_r+0xa18>
 800dc4c:	1d23      	adds	r3, r4, #4
 800dc4e:	930d      	str	r3, [sp, #52]	; 0x34
 800dc50:	06b3      	lsls	r3, r6, #26
 800dc52:	d509      	bpl.n	800dc68 <_svfprintf_r+0xa5c>
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc58:	601a      	str	r2, [r3, #0]
 800dc5a:	17d2      	asrs	r2, r2, #31
 800dc5c:	605a      	str	r2, [r3, #4]
 800dc5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800dc62:	9308      	str	r3, [sp, #32]
 800dc64:	f7ff fb0d 	bl	800d282 <_svfprintf_r+0x76>
 800dc68:	06f3      	lsls	r3, r6, #27
 800dc6a:	d503      	bpl.n	800dc74 <_svfprintf_r+0xa68>
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	e7f4      	b.n	800dc5e <_svfprintf_r+0xa52>
 800dc74:	0673      	lsls	r3, r6, #25
 800dc76:	d503      	bpl.n	800dc80 <_svfprintf_r+0xa74>
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc7c:	801a      	strh	r2, [r3, #0]
 800dc7e:	e7ee      	b.n	800dc5e <_svfprintf_r+0xa52>
 800dc80:	05b6      	lsls	r6, r6, #22
 800dc82:	d5f3      	bpl.n	800dc6c <_svfprintf_r+0xa60>
 800dc84:	6823      	ldr	r3, [r4, #0]
 800dc86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	e7e8      	b.n	800dc5e <_svfprintf_r+0xa52>
 800dc8c:	2310      	movs	r3, #16
 800dc8e:	431e      	orrs	r6, r3
 800dc90:	2320      	movs	r3, #32
 800dc92:	0030      	movs	r0, r6
 800dc94:	4018      	ands	r0, r3
 800dc96:	421e      	tst	r6, r3
 800dc98:	d00f      	beq.n	800dcba <_svfprintf_r+0xaae>
 800dc9a:	3b19      	subs	r3, #25
 800dc9c:	3407      	adds	r4, #7
 800dc9e:	439c      	bics	r4, r3
 800dca0:	0022      	movs	r2, r4
 800dca2:	ca18      	ldmia	r2!, {r3, r4}
 800dca4:	9306      	str	r3, [sp, #24]
 800dca6:	9407      	str	r4, [sp, #28]
 800dca8:	920d      	str	r2, [sp, #52]	; 0x34
 800dcaa:	4bc9      	ldr	r3, [pc, #804]	; (800dfd0 <_svfprintf_r+0xdc4>)
 800dcac:	401e      	ands	r6, r3
 800dcae:	2300      	movs	r3, #0
 800dcb0:	221b      	movs	r2, #27
 800dcb2:	a91e      	add	r1, sp, #120	; 0x78
 800dcb4:	1852      	adds	r2, r2, r1
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	e430      	b.n	800d51c <_svfprintf_r+0x310>
 800dcba:	0022      	movs	r2, r4
 800dcbc:	ca08      	ldmia	r2!, {r3}
 800dcbe:	0031      	movs	r1, r6
 800dcc0:	920d      	str	r2, [sp, #52]	; 0x34
 800dcc2:	2210      	movs	r2, #16
 800dcc4:	4011      	ands	r1, r2
 800dcc6:	4216      	tst	r6, r2
 800dcc8:	d002      	beq.n	800dcd0 <_svfprintf_r+0xac4>
 800dcca:	9306      	str	r3, [sp, #24]
 800dccc:	9007      	str	r0, [sp, #28]
 800dcce:	e7ec      	b.n	800dcaa <_svfprintf_r+0xa9e>
 800dcd0:	2240      	movs	r2, #64	; 0x40
 800dcd2:	0030      	movs	r0, r6
 800dcd4:	4010      	ands	r0, r2
 800dcd6:	4216      	tst	r6, r2
 800dcd8:	d003      	beq.n	800dce2 <_svfprintf_r+0xad6>
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	9306      	str	r3, [sp, #24]
 800dcde:	9107      	str	r1, [sp, #28]
 800dce0:	e7e3      	b.n	800dcaa <_svfprintf_r+0xa9e>
 800dce2:	2280      	movs	r2, #128	; 0x80
 800dce4:	0031      	movs	r1, r6
 800dce6:	0092      	lsls	r2, r2, #2
 800dce8:	4011      	ands	r1, r2
 800dcea:	4216      	tst	r6, r2
 800dcec:	d0f6      	beq.n	800dcdc <_svfprintf_r+0xad0>
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	e7eb      	b.n	800dcca <_svfprintf_r+0xabe>
 800dcf2:	0023      	movs	r3, r4
 800dcf4:	cb04      	ldmia	r3!, {r2}
 800dcf6:	49b7      	ldr	r1, [pc, #732]	; (800dfd4 <_svfprintf_r+0xdc8>)
 800dcf8:	9206      	str	r2, [sp, #24]
 800dcfa:	aa25      	add	r2, sp, #148	; 0x94
 800dcfc:	8011      	strh	r1, [r2, #0]
 800dcfe:	4ab6      	ldr	r2, [pc, #728]	; (800dfd8 <_svfprintf_r+0xdcc>)
 800dd00:	930d      	str	r3, [sp, #52]	; 0x34
 800dd02:	2300      	movs	r3, #0
 800dd04:	921f      	str	r2, [sp, #124]	; 0x7c
 800dd06:	2278      	movs	r2, #120	; 0x78
 800dd08:	9307      	str	r3, [sp, #28]
 800dd0a:	3302      	adds	r3, #2
 800dd0c:	431e      	orrs	r6, r3
 800dd0e:	920f      	str	r2, [sp, #60]	; 0x3c
 800dd10:	e7ce      	b.n	800dcb0 <_svfprintf_r+0xaa4>
 800dd12:	0023      	movs	r3, r4
 800dd14:	cb04      	ldmia	r3!, {r2}
 800dd16:	2400      	movs	r4, #0
 800dd18:	930d      	str	r3, [sp, #52]	; 0x34
 800dd1a:	231b      	movs	r3, #27
 800dd1c:	9208      	str	r2, [sp, #32]
 800dd1e:	aa1e      	add	r2, sp, #120	; 0x78
 800dd20:	189b      	adds	r3, r3, r2
 800dd22:	701c      	strb	r4, [r3, #0]
 800dd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd26:	3301      	adds	r3, #1
 800dd28:	d00e      	beq.n	800dd48 <_svfprintf_r+0xb3c>
 800dd2a:	0021      	movs	r1, r4
 800dd2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd2e:	9808      	ldr	r0, [sp, #32]
 800dd30:	f002 f83a 	bl	800fda8 <memchr>
 800dd34:	900c      	str	r0, [sp, #48]	; 0x30
 800dd36:	42a0      	cmp	r0, r4
 800dd38:	d100      	bne.n	800dd3c <_svfprintf_r+0xb30>
 800dd3a:	e10d      	b.n	800df58 <_svfprintf_r+0xd4c>
 800dd3c:	9a08      	ldr	r2, [sp, #32]
 800dd3e:	1a83      	subs	r3, r0, r2
 800dd40:	9309      	str	r3, [sp, #36]	; 0x24
 800dd42:	0023      	movs	r3, r4
 800dd44:	940c      	str	r4, [sp, #48]	; 0x30
 800dd46:	e44e      	b.n	800d5e6 <_svfprintf_r+0x3da>
 800dd48:	9808      	ldr	r0, [sp, #32]
 800dd4a:	f7f2 f9db 	bl	8000104 <strlen>
 800dd4e:	9009      	str	r0, [sp, #36]	; 0x24
 800dd50:	e7f7      	b.n	800dd42 <_svfprintf_r+0xb36>
 800dd52:	2310      	movs	r3, #16
 800dd54:	431e      	orrs	r6, r3
 800dd56:	2320      	movs	r3, #32
 800dd58:	0030      	movs	r0, r6
 800dd5a:	4018      	ands	r0, r3
 800dd5c:	421e      	tst	r6, r3
 800dd5e:	d009      	beq.n	800dd74 <_svfprintf_r+0xb68>
 800dd60:	3b19      	subs	r3, #25
 800dd62:	3407      	adds	r4, #7
 800dd64:	439c      	bics	r4, r3
 800dd66:	0022      	movs	r2, r4
 800dd68:	ca18      	ldmia	r2!, {r3, r4}
 800dd6a:	9306      	str	r3, [sp, #24]
 800dd6c:	9407      	str	r4, [sp, #28]
 800dd6e:	920d      	str	r2, [sp, #52]	; 0x34
 800dd70:	2301      	movs	r3, #1
 800dd72:	e79d      	b.n	800dcb0 <_svfprintf_r+0xaa4>
 800dd74:	0023      	movs	r3, r4
 800dd76:	cb04      	ldmia	r3!, {r2}
 800dd78:	0031      	movs	r1, r6
 800dd7a:	930d      	str	r3, [sp, #52]	; 0x34
 800dd7c:	2310      	movs	r3, #16
 800dd7e:	4019      	ands	r1, r3
 800dd80:	421e      	tst	r6, r3
 800dd82:	d003      	beq.n	800dd8c <_svfprintf_r+0xb80>
 800dd84:	9206      	str	r2, [sp, #24]
 800dd86:	9007      	str	r0, [sp, #28]
 800dd88:	3b0f      	subs	r3, #15
 800dd8a:	e791      	b.n	800dcb0 <_svfprintf_r+0xaa4>
 800dd8c:	2340      	movs	r3, #64	; 0x40
 800dd8e:	0030      	movs	r0, r6
 800dd90:	4018      	ands	r0, r3
 800dd92:	421e      	tst	r6, r3
 800dd94:	d003      	beq.n	800dd9e <_svfprintf_r+0xb92>
 800dd96:	b293      	uxth	r3, r2
 800dd98:	9306      	str	r3, [sp, #24]
 800dd9a:	9107      	str	r1, [sp, #28]
 800dd9c:	e7e8      	b.n	800dd70 <_svfprintf_r+0xb64>
 800dd9e:	2380      	movs	r3, #128	; 0x80
 800dda0:	0031      	movs	r1, r6
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	4019      	ands	r1, r3
 800dda6:	421e      	tst	r6, r3
 800dda8:	d003      	beq.n	800ddb2 <_svfprintf_r+0xba6>
 800ddaa:	b2d3      	uxtb	r3, r2
 800ddac:	9306      	str	r3, [sp, #24]
 800ddae:	9007      	str	r0, [sp, #28]
 800ddb0:	e7de      	b.n	800dd70 <_svfprintf_r+0xb64>
 800ddb2:	9206      	str	r2, [sp, #24]
 800ddb4:	e7f1      	b.n	800dd9a <_svfprintf_r+0xb8e>
 800ddb6:	4b89      	ldr	r3, [pc, #548]	; (800dfdc <_svfprintf_r+0xdd0>)
 800ddb8:	0030      	movs	r0, r6
 800ddba:	931f      	str	r3, [sp, #124]	; 0x7c
 800ddbc:	2320      	movs	r3, #32
 800ddbe:	4018      	ands	r0, r3
 800ddc0:	421e      	tst	r6, r3
 800ddc2:	d01a      	beq.n	800ddfa <_svfprintf_r+0xbee>
 800ddc4:	3b19      	subs	r3, #25
 800ddc6:	3407      	adds	r4, #7
 800ddc8:	439c      	bics	r4, r3
 800ddca:	0022      	movs	r2, r4
 800ddcc:	ca18      	ldmia	r2!, {r3, r4}
 800ddce:	9306      	str	r3, [sp, #24]
 800ddd0:	9407      	str	r4, [sp, #28]
 800ddd2:	920d      	str	r2, [sp, #52]	; 0x34
 800ddd4:	07f3      	lsls	r3, r6, #31
 800ddd6:	d50a      	bpl.n	800ddee <_svfprintf_r+0xbe2>
 800ddd8:	9b06      	ldr	r3, [sp, #24]
 800ddda:	9a07      	ldr	r2, [sp, #28]
 800dddc:	4313      	orrs	r3, r2
 800ddde:	d006      	beq.n	800ddee <_svfprintf_r+0xbe2>
 800dde0:	2230      	movs	r2, #48	; 0x30
 800dde2:	ab25      	add	r3, sp, #148	; 0x94
 800dde4:	701a      	strb	r2, [r3, #0]
 800dde6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dde8:	705a      	strb	r2, [r3, #1]
 800ddea:	2302      	movs	r3, #2
 800ddec:	431e      	orrs	r6, r3
 800ddee:	4b78      	ldr	r3, [pc, #480]	; (800dfd0 <_svfprintf_r+0xdc4>)
 800ddf0:	401e      	ands	r6, r3
 800ddf2:	2302      	movs	r3, #2
 800ddf4:	e75c      	b.n	800dcb0 <_svfprintf_r+0xaa4>
 800ddf6:	4b78      	ldr	r3, [pc, #480]	; (800dfd8 <_svfprintf_r+0xdcc>)
 800ddf8:	e7de      	b.n	800ddb8 <_svfprintf_r+0xbac>
 800ddfa:	0023      	movs	r3, r4
 800ddfc:	cb04      	ldmia	r3!, {r2}
 800ddfe:	0031      	movs	r1, r6
 800de00:	930d      	str	r3, [sp, #52]	; 0x34
 800de02:	2310      	movs	r3, #16
 800de04:	4019      	ands	r1, r3
 800de06:	421e      	tst	r6, r3
 800de08:	d002      	beq.n	800de10 <_svfprintf_r+0xc04>
 800de0a:	9206      	str	r2, [sp, #24]
 800de0c:	9007      	str	r0, [sp, #28]
 800de0e:	e7e1      	b.n	800ddd4 <_svfprintf_r+0xbc8>
 800de10:	2340      	movs	r3, #64	; 0x40
 800de12:	0030      	movs	r0, r6
 800de14:	4018      	ands	r0, r3
 800de16:	421e      	tst	r6, r3
 800de18:	d003      	beq.n	800de22 <_svfprintf_r+0xc16>
 800de1a:	b293      	uxth	r3, r2
 800de1c:	9306      	str	r3, [sp, #24]
 800de1e:	9107      	str	r1, [sp, #28]
 800de20:	e7d8      	b.n	800ddd4 <_svfprintf_r+0xbc8>
 800de22:	2380      	movs	r3, #128	; 0x80
 800de24:	0031      	movs	r1, r6
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	4019      	ands	r1, r3
 800de2a:	421e      	tst	r6, r3
 800de2c:	d002      	beq.n	800de34 <_svfprintf_r+0xc28>
 800de2e:	b2d3      	uxtb	r3, r2
 800de30:	9306      	str	r3, [sp, #24]
 800de32:	e7eb      	b.n	800de0c <_svfprintf_r+0xc00>
 800de34:	9206      	str	r2, [sp, #24]
 800de36:	e7f2      	b.n	800de1e <_svfprintf_r+0xc12>
 800de38:	9b07      	ldr	r3, [sp, #28]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d10a      	bne.n	800de54 <_svfprintf_r+0xc48>
 800de3e:	9b06      	ldr	r3, [sp, #24]
 800de40:	2b09      	cmp	r3, #9
 800de42:	d807      	bhi.n	800de54 <_svfprintf_r+0xc48>
 800de44:	23e7      	movs	r3, #231	; 0xe7
 800de46:	aa1e      	add	r2, sp, #120	; 0x78
 800de48:	189b      	adds	r3, r3, r2
 800de4a:	9a06      	ldr	r2, [sp, #24]
 800de4c:	3230      	adds	r2, #48	; 0x30
 800de4e:	701a      	strb	r2, [r3, #0]
 800de50:	f000 fc18 	bl	800e684 <_svfprintf_r+0x1478>
 800de54:	2680      	movs	r6, #128	; 0x80
 800de56:	2300      	movs	r3, #0
 800de58:	00f6      	lsls	r6, r6, #3
 800de5a:	930e      	str	r3, [sp, #56]	; 0x38
 800de5c:	ad58      	add	r5, sp, #352	; 0x160
 800de5e:	4026      	ands	r6, r4
 800de60:	220a      	movs	r2, #10
 800de62:	9806      	ldr	r0, [sp, #24]
 800de64:	9907      	ldr	r1, [sp, #28]
 800de66:	2300      	movs	r3, #0
 800de68:	f7f2 fb1c 	bl	80004a4 <__aeabi_uldivmod>
 800de6c:	1e6b      	subs	r3, r5, #1
 800de6e:	3230      	adds	r2, #48	; 0x30
 800de70:	9308      	str	r3, [sp, #32]
 800de72:	701a      	strb	r2, [r3, #0]
 800de74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de76:	900c      	str	r0, [sp, #48]	; 0x30
 800de78:	3301      	adds	r3, #1
 800de7a:	9110      	str	r1, [sp, #64]	; 0x40
 800de7c:	930e      	str	r3, [sp, #56]	; 0x38
 800de7e:	2e00      	cmp	r6, #0
 800de80:	d01d      	beq.n	800debe <_svfprintf_r+0xcb2>
 800de82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d118      	bne.n	800debe <_svfprintf_r+0xcb2>
 800de8c:	2aff      	cmp	r2, #255	; 0xff
 800de8e:	d016      	beq.n	800debe <_svfprintf_r+0xcb2>
 800de90:	9b07      	ldr	r3, [sp, #28]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d102      	bne.n	800de9c <_svfprintf_r+0xc90>
 800de96:	9b06      	ldr	r3, [sp, #24]
 800de98:	2b09      	cmp	r3, #9
 800de9a:	d910      	bls.n	800debe <_svfprintf_r+0xcb2>
 800de9c:	9b08      	ldr	r3, [sp, #32]
 800de9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dea0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800dea2:	1a9b      	subs	r3, r3, r2
 800dea4:	0018      	movs	r0, r3
 800dea6:	9308      	str	r3, [sp, #32]
 800dea8:	f7fd ffd1 	bl	800be4e <strncpy>
 800deac:	2200      	movs	r2, #0
 800deae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800deb0:	920e      	str	r2, [sp, #56]	; 0x38
 800deb2:	785b      	ldrb	r3, [r3, #1]
 800deb4:	1e5a      	subs	r2, r3, #1
 800deb6:	4193      	sbcs	r3, r2
 800deb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800deba:	18d3      	adds	r3, r2, r3
 800debc:	9312      	str	r3, [sp, #72]	; 0x48
 800debe:	9b07      	ldr	r3, [sp, #28]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10f      	bne.n	800dee4 <_svfprintf_r+0xcd8>
 800dec4:	9b06      	ldr	r3, [sp, #24]
 800dec6:	2b09      	cmp	r3, #9
 800dec8:	d80c      	bhi.n	800dee4 <_svfprintf_r+0xcd8>
 800deca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800decc:	9a08      	ldr	r2, [sp, #32]
 800dece:	9319      	str	r3, [sp, #100]	; 0x64
 800ded0:	ab58      	add	r3, sp, #352	; 0x160
 800ded2:	1a9b      	subs	r3, r3, r2
 800ded4:	9309      	str	r3, [sp, #36]	; 0x24
 800ded6:	2300      	movs	r3, #0
 800ded8:	0026      	movs	r6, r4
 800deda:	930c      	str	r3, [sp, #48]	; 0x30
 800dedc:	001d      	movs	r5, r3
 800dede:	9310      	str	r3, [sp, #64]	; 0x40
 800dee0:	9311      	str	r3, [sp, #68]	; 0x44
 800dee2:	e4f2      	b.n	800d8ca <_svfprintf_r+0x6be>
 800dee4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dee6:	9d08      	ldr	r5, [sp, #32]
 800dee8:	9306      	str	r3, [sp, #24]
 800deea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800deec:	9307      	str	r3, [sp, #28]
 800deee:	e7b7      	b.n	800de60 <_svfprintf_r+0xc54>
 800def0:	200f      	movs	r0, #15
 800def2:	ab58      	add	r3, sp, #352	; 0x160
 800def4:	9308      	str	r3, [sp, #32]
 800def6:	9b08      	ldr	r3, [sp, #32]
 800def8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800defa:	3b01      	subs	r3, #1
 800defc:	9308      	str	r3, [sp, #32]
 800defe:	9b06      	ldr	r3, [sp, #24]
 800df00:	4003      	ands	r3, r0
 800df02:	5cd3      	ldrb	r3, [r2, r3]
 800df04:	9a08      	ldr	r2, [sp, #32]
 800df06:	7013      	strb	r3, [r2, #0]
 800df08:	9b07      	ldr	r3, [sp, #28]
 800df0a:	0719      	lsls	r1, r3, #28
 800df0c:	9b06      	ldr	r3, [sp, #24]
 800df0e:	091a      	lsrs	r2, r3, #4
 800df10:	9b07      	ldr	r3, [sp, #28]
 800df12:	4311      	orrs	r1, r2
 800df14:	091b      	lsrs	r3, r3, #4
 800df16:	9307      	str	r3, [sp, #28]
 800df18:	000b      	movs	r3, r1
 800df1a:	9a07      	ldr	r2, [sp, #28]
 800df1c:	9106      	str	r1, [sp, #24]
 800df1e:	4313      	orrs	r3, r2
 800df20:	d1e9      	bne.n	800def6 <_svfprintf_r+0xcea>
 800df22:	e7d2      	b.n	800deca <_svfprintf_r+0xcbe>
 800df24:	aa58      	add	r2, sp, #352	; 0x160
 800df26:	9208      	str	r2, [sp, #32]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1ce      	bne.n	800deca <_svfprintf_r+0xcbe>
 800df2c:	07f6      	lsls	r6, r6, #31
 800df2e:	d5cc      	bpl.n	800deca <_svfprintf_r+0xcbe>
 800df30:	aa1e      	add	r2, sp, #120	; 0x78
 800df32:	33e7      	adds	r3, #231	; 0xe7
 800df34:	189b      	adds	r3, r3, r2
 800df36:	2230      	movs	r2, #48	; 0x30
 800df38:	e789      	b.n	800de4e <_svfprintf_r+0xc42>
 800df3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d100      	bne.n	800df42 <_svfprintf_r+0xd36>
 800df40:	e364      	b.n	800e60c <_svfprintf_r+0x1400>
 800df42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df44:	211b      	movs	r1, #27
 800df46:	ab3f      	add	r3, sp, #252	; 0xfc
 800df48:	701a      	strb	r2, [r3, #0]
 800df4a:	2200      	movs	r2, #0
 800df4c:	a81e      	add	r0, sp, #120	; 0x78
 800df4e:	1809      	adds	r1, r1, r0
 800df50:	700a      	strb	r2, [r1, #0]
 800df52:	940d      	str	r4, [sp, #52]	; 0x34
 800df54:	f7ff fabd 	bl	800d4d2 <_svfprintf_r+0x2c6>
 800df58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df5a:	f7ff fb44 	bl	800d5e6 <_svfprintf_r+0x3da>
 800df5e:	2010      	movs	r0, #16
 800df60:	1812      	adds	r2, r2, r0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	922e      	str	r2, [sp, #184]	; 0xb8
 800df66:	932d      	str	r3, [sp, #180]	; 0xb4
 800df68:	2b07      	cmp	r3, #7
 800df6a:	dd08      	ble.n	800df7e <_svfprintf_r+0xd72>
 800df6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df70:	aa2c      	add	r2, sp, #176	; 0xb0
 800df72:	f003 fa61 	bl	8011438 <__ssprint_r>
 800df76:	2800      	cmp	r0, #0
 800df78:	d000      	beq.n	800df7c <_svfprintf_r+0xd70>
 800df7a:	e326      	b.n	800e5ca <_svfprintf_r+0x13be>
 800df7c:	a92f      	add	r1, sp, #188	; 0xbc
 800df7e:	000f      	movs	r7, r1
 800df80:	3c10      	subs	r4, #16
 800df82:	e4c5      	b.n	800d910 <_svfprintf_r+0x704>
 800df84:	2010      	movs	r0, #16
 800df86:	1812      	adds	r2, r2, r0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	922e      	str	r2, [sp, #184]	; 0xb8
 800df8c:	932d      	str	r3, [sp, #180]	; 0xb4
 800df8e:	2b07      	cmp	r3, #7
 800df90:	dd08      	ble.n	800dfa4 <_svfprintf_r+0xd98>
 800df92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df94:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df96:	aa2c      	add	r2, sp, #176	; 0xb0
 800df98:	f003 fa4e 	bl	8011438 <__ssprint_r>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d000      	beq.n	800dfa2 <_svfprintf_r+0xd96>
 800dfa0:	e313      	b.n	800e5ca <_svfprintf_r+0x13be>
 800dfa2:	a92f      	add	r1, sp, #188	; 0xbc
 800dfa4:	000f      	movs	r7, r1
 800dfa6:	3c10      	subs	r4, #16
 800dfa8:	e50b      	b.n	800d9c2 <_svfprintf_r+0x7b6>
 800dfaa:	2010      	movs	r0, #16
 800dfac:	1812      	adds	r2, r2, r0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	922e      	str	r2, [sp, #184]	; 0xb8
 800dfb2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfb4:	2b07      	cmp	r3, #7
 800dfb6:	dd08      	ble.n	800dfca <_svfprintf_r+0xdbe>
 800dfb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfbc:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfbe:	f003 fa3b 	bl	8011438 <__ssprint_r>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d000      	beq.n	800dfc8 <_svfprintf_r+0xdbc>
 800dfc6:	e300      	b.n	800e5ca <_svfprintf_r+0x13be>
 800dfc8:	a92f      	add	r1, sp, #188	; 0xbc
 800dfca:	000f      	movs	r7, r1
 800dfcc:	3c10      	subs	r4, #16
 800dfce:	e518      	b.n	800da02 <_svfprintf_r+0x7f6>
 800dfd0:	fffffbff 	.word	0xfffffbff
 800dfd4:	00007830 	.word	0x00007830
 800dfd8:	0801465c 	.word	0x0801465c
 800dfdc:	0801466d 	.word	0x0801466d
 800dfe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfe2:	2b65      	cmp	r3, #101	; 0x65
 800dfe4:	dc00      	bgt.n	800dfe8 <_svfprintf_r+0xddc>
 800dfe6:	e241      	b.n	800e46c <_svfprintf_r+0x1260>
 800dfe8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dfea:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dfec:	2200      	movs	r2, #0
 800dfee:	2300      	movs	r3, #0
 800dff0:	f7f2 fa2a 	bl	8000448 <__aeabi_dcmpeq>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d077      	beq.n	800e0e8 <_svfprintf_r+0xedc>
 800dff8:	4bca      	ldr	r3, [pc, #808]	; (800e324 <_svfprintf_r+0x1118>)
 800dffa:	603b      	str	r3, [r7, #0]
 800dffc:	2301      	movs	r3, #1
 800dffe:	607b      	str	r3, [r7, #4]
 800e000:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e002:	3708      	adds	r7, #8
 800e004:	3301      	adds	r3, #1
 800e006:	932e      	str	r3, [sp, #184]	; 0xb8
 800e008:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e00a:	3301      	adds	r3, #1
 800e00c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e00e:	2b07      	cmp	r3, #7
 800e010:	dd08      	ble.n	800e024 <_svfprintf_r+0xe18>
 800e012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e014:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e016:	aa2c      	add	r2, sp, #176	; 0xb0
 800e018:	f003 fa0e 	bl	8011438 <__ssprint_r>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d000      	beq.n	800e022 <_svfprintf_r+0xe16>
 800e020:	e2d3      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e022:	af2f      	add	r7, sp, #188	; 0xbc
 800e024:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e028:	4293      	cmp	r3, r2
 800e02a:	db01      	blt.n	800e030 <_svfprintf_r+0xe24>
 800e02c:	07f3      	lsls	r3, r6, #31
 800e02e:	d51b      	bpl.n	800e068 <_svfprintf_r+0xe5c>
 800e030:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e032:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e034:	603b      	str	r3, [r7, #0]
 800e036:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e038:	607b      	str	r3, [r7, #4]
 800e03a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e03c:	3708      	adds	r7, #8
 800e03e:	189b      	adds	r3, r3, r2
 800e040:	932e      	str	r3, [sp, #184]	; 0xb8
 800e042:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e044:	3301      	adds	r3, #1
 800e046:	932d      	str	r3, [sp, #180]	; 0xb4
 800e048:	2b07      	cmp	r3, #7
 800e04a:	dd08      	ble.n	800e05e <_svfprintf_r+0xe52>
 800e04c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e04e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e050:	aa2c      	add	r2, sp, #176	; 0xb0
 800e052:	f003 f9f1 	bl	8011438 <__ssprint_r>
 800e056:	2800      	cmp	r0, #0
 800e058:	d000      	beq.n	800e05c <_svfprintf_r+0xe50>
 800e05a:	e2b6      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e05c:	af2f      	add	r7, sp, #188	; 0xbc
 800e05e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e060:	2510      	movs	r5, #16
 800e062:	1e5c      	subs	r4, r3, #1
 800e064:	2c00      	cmp	r4, #0
 800e066:	dc2e      	bgt.n	800e0c6 <_svfprintf_r+0xeba>
 800e068:	0776      	lsls	r6, r6, #29
 800e06a:	d500      	bpl.n	800e06e <_svfprintf_r+0xe62>
 800e06c:	e290      	b.n	800e590 <_svfprintf_r+0x1384>
 800e06e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e070:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e072:	4293      	cmp	r3, r2
 800e074:	da00      	bge.n	800e078 <_svfprintf_r+0xe6c>
 800e076:	0013      	movs	r3, r2
 800e078:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e07a:	18d3      	adds	r3, r2, r3
 800e07c:	9317      	str	r3, [sp, #92]	; 0x5c
 800e07e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e080:	2b00      	cmp	r3, #0
 800e082:	d007      	beq.n	800e094 <_svfprintf_r+0xe88>
 800e084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e086:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e088:	aa2c      	add	r2, sp, #176	; 0xb0
 800e08a:	f003 f9d5 	bl	8011438 <__ssprint_r>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d000      	beq.n	800e094 <_svfprintf_r+0xe88>
 800e092:	e29a      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e094:	2300      	movs	r3, #0
 800e096:	932d      	str	r3, [sp, #180]	; 0xb4
 800e098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d000      	beq.n	800e0a0 <_svfprintf_r+0xe94>
 800e09e:	e2b0      	b.n	800e602 <_svfprintf_r+0x13f6>
 800e0a0:	af2f      	add	r7, sp, #188	; 0xbc
 800e0a2:	e5dc      	b.n	800dc5e <_svfprintf_r+0xa52>
 800e0a4:	3210      	adds	r2, #16
 800e0a6:	607d      	str	r5, [r7, #4]
 800e0a8:	922e      	str	r2, [sp, #184]	; 0xb8
 800e0aa:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0ac:	2b07      	cmp	r3, #7
 800e0ae:	dd08      	ble.n	800e0c2 <_svfprintf_r+0xeb6>
 800e0b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0b4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0b6:	f003 f9bf 	bl	8011438 <__ssprint_r>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d000      	beq.n	800e0c0 <_svfprintf_r+0xeb4>
 800e0be:	e284      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e0c0:	a92f      	add	r1, sp, #188	; 0xbc
 800e0c2:	000f      	movs	r7, r1
 800e0c4:	3c10      	subs	r4, #16
 800e0c6:	0039      	movs	r1, r7
 800e0c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0ca:	4897      	ldr	r0, [pc, #604]	; (800e328 <_svfprintf_r+0x111c>)
 800e0cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	3108      	adds	r1, #8
 800e0d2:	6038      	str	r0, [r7, #0]
 800e0d4:	2c10      	cmp	r4, #16
 800e0d6:	dce5      	bgt.n	800e0a4 <_svfprintf_r+0xe98>
 800e0d8:	607c      	str	r4, [r7, #4]
 800e0da:	18a4      	adds	r4, r4, r2
 800e0dc:	942e      	str	r4, [sp, #184]	; 0xb8
 800e0de:	000f      	movs	r7, r1
 800e0e0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0e2:	2b07      	cmp	r3, #7
 800e0e4:	ddc0      	ble.n	800e068 <_svfprintf_r+0xe5c>
 800e0e6:	e05f      	b.n	800e1a8 <_svfprintf_r+0xf9c>
 800e0e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	dc78      	bgt.n	800e1e0 <_svfprintf_r+0xfd4>
 800e0ee:	4b8d      	ldr	r3, [pc, #564]	; (800e324 <_svfprintf_r+0x1118>)
 800e0f0:	603b      	str	r3, [r7, #0]
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	607b      	str	r3, [r7, #4]
 800e0f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	932e      	str	r3, [sp, #184]	; 0xb8
 800e0fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e100:	3301      	adds	r3, #1
 800e102:	932d      	str	r3, [sp, #180]	; 0xb4
 800e104:	2b07      	cmp	r3, #7
 800e106:	dd08      	ble.n	800e11a <_svfprintf_r+0xf0e>
 800e108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e10a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e10c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e10e:	f003 f993 	bl	8011438 <__ssprint_r>
 800e112:	2800      	cmp	r0, #0
 800e114:	d000      	beq.n	800e118 <_svfprintf_r+0xf0c>
 800e116:	e258      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e118:	af2f      	add	r7, sp, #188	; 0xbc
 800e11a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e11c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e11e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e120:	430b      	orrs	r3, r1
 800e122:	2101      	movs	r1, #1
 800e124:	4031      	ands	r1, r6
 800e126:	430b      	orrs	r3, r1
 800e128:	d09e      	beq.n	800e068 <_svfprintf_r+0xe5c>
 800e12a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e12c:	603b      	str	r3, [r7, #0]
 800e12e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e130:	607b      	str	r3, [r7, #4]
 800e132:	189a      	adds	r2, r3, r2
 800e134:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e136:	922e      	str	r2, [sp, #184]	; 0xb8
 800e138:	3301      	adds	r3, #1
 800e13a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e13c:	3708      	adds	r7, #8
 800e13e:	2b07      	cmp	r3, #7
 800e140:	dd08      	ble.n	800e154 <_svfprintf_r+0xf48>
 800e142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e144:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e146:	aa2c      	add	r2, sp, #176	; 0xb0
 800e148:	f003 f976 	bl	8011438 <__ssprint_r>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d000      	beq.n	800e152 <_svfprintf_r+0xf46>
 800e150:	e23b      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e152:	af2f      	add	r7, sp, #188	; 0xbc
 800e154:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e156:	2c00      	cmp	r4, #0
 800e158:	da19      	bge.n	800e18e <_svfprintf_r+0xf82>
 800e15a:	0038      	movs	r0, r7
 800e15c:	2510      	movs	r5, #16
 800e15e:	4264      	negs	r4, r4
 800e160:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e162:	4a71      	ldr	r2, [pc, #452]	; (800e328 <_svfprintf_r+0x111c>)
 800e164:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e166:	3101      	adds	r1, #1
 800e168:	3708      	adds	r7, #8
 800e16a:	6002      	str	r2, [r0, #0]
 800e16c:	2c10      	cmp	r4, #16
 800e16e:	dc25      	bgt.n	800e1bc <_svfprintf_r+0xfb0>
 800e170:	6044      	str	r4, [r0, #4]
 800e172:	18e4      	adds	r4, r4, r3
 800e174:	942e      	str	r4, [sp, #184]	; 0xb8
 800e176:	912d      	str	r1, [sp, #180]	; 0xb4
 800e178:	2907      	cmp	r1, #7
 800e17a:	dd08      	ble.n	800e18e <_svfprintf_r+0xf82>
 800e17c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e17e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e180:	aa2c      	add	r2, sp, #176	; 0xb0
 800e182:	f003 f959 	bl	8011438 <__ssprint_r>
 800e186:	2800      	cmp	r0, #0
 800e188:	d000      	beq.n	800e18c <_svfprintf_r+0xf80>
 800e18a:	e21e      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e18c:	af2f      	add	r7, sp, #188	; 0xbc
 800e18e:	9b08      	ldr	r3, [sp, #32]
 800e190:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e192:	603b      	str	r3, [r7, #0]
 800e194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e196:	18d2      	adds	r2, r2, r3
 800e198:	922e      	str	r2, [sp, #184]	; 0xb8
 800e19a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e19c:	607b      	str	r3, [r7, #4]
 800e19e:	3201      	adds	r2, #1
 800e1a0:	922d      	str	r2, [sp, #180]	; 0xb4
 800e1a2:	2a07      	cmp	r2, #7
 800e1a4:	dc00      	bgt.n	800e1a8 <_svfprintf_r+0xf9c>
 800e1a6:	e45b      	b.n	800da60 <_svfprintf_r+0x854>
 800e1a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1ac:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1ae:	f003 f943 	bl	8011438 <__ssprint_r>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d000      	beq.n	800e1b8 <_svfprintf_r+0xfac>
 800e1b6:	e208      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e1b8:	af2f      	add	r7, sp, #188	; 0xbc
 800e1ba:	e755      	b.n	800e068 <_svfprintf_r+0xe5c>
 800e1bc:	3310      	adds	r3, #16
 800e1be:	6045      	str	r5, [r0, #4]
 800e1c0:	932e      	str	r3, [sp, #184]	; 0xb8
 800e1c2:	912d      	str	r1, [sp, #180]	; 0xb4
 800e1c4:	2907      	cmp	r1, #7
 800e1c6:	dd08      	ble.n	800e1da <_svfprintf_r+0xfce>
 800e1c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1cc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1ce:	f003 f933 	bl	8011438 <__ssprint_r>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d000      	beq.n	800e1d8 <_svfprintf_r+0xfcc>
 800e1d6:	e1f8      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e1d8:	af2f      	add	r7, sp, #188	; 0xbc
 800e1da:	0038      	movs	r0, r7
 800e1dc:	3c10      	subs	r4, #16
 800e1de:	e7bf      	b.n	800e160 <_svfprintf_r+0xf54>
 800e1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1e2:	002c      	movs	r4, r5
 800e1e4:	429d      	cmp	r5, r3
 800e1e6:	dd00      	ble.n	800e1ea <_svfprintf_r+0xfde>
 800e1e8:	001c      	movs	r4, r3
 800e1ea:	2c00      	cmp	r4, #0
 800e1ec:	dd14      	ble.n	800e218 <_svfprintf_r+0x100c>
 800e1ee:	9b08      	ldr	r3, [sp, #32]
 800e1f0:	607c      	str	r4, [r7, #4]
 800e1f2:	603b      	str	r3, [r7, #0]
 800e1f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	18e3      	adds	r3, r4, r3
 800e1fa:	932e      	str	r3, [sp, #184]	; 0xb8
 800e1fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e1fe:	3301      	adds	r3, #1
 800e200:	932d      	str	r3, [sp, #180]	; 0xb4
 800e202:	2b07      	cmp	r3, #7
 800e204:	dd08      	ble.n	800e218 <_svfprintf_r+0x100c>
 800e206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e208:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e20a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e20c:	f003 f914 	bl	8011438 <__ssprint_r>
 800e210:	2800      	cmp	r0, #0
 800e212:	d000      	beq.n	800e216 <_svfprintf_r+0x100a>
 800e214:	e1d9      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e216:	af2f      	add	r7, sp, #188	; 0xbc
 800e218:	43e3      	mvns	r3, r4
 800e21a:	17db      	asrs	r3, r3, #31
 800e21c:	401c      	ands	r4, r3
 800e21e:	1b2c      	subs	r4, r5, r4
 800e220:	2c00      	cmp	r4, #0
 800e222:	dd18      	ble.n	800e256 <_svfprintf_r+0x104a>
 800e224:	0039      	movs	r1, r7
 800e226:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e228:	483f      	ldr	r0, [pc, #252]	; (800e328 <_svfprintf_r+0x111c>)
 800e22a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e22c:	3301      	adds	r3, #1
 800e22e:	3108      	adds	r1, #8
 800e230:	6038      	str	r0, [r7, #0]
 800e232:	2c10      	cmp	r4, #16
 800e234:	dc7a      	bgt.n	800e32c <_svfprintf_r+0x1120>
 800e236:	607c      	str	r4, [r7, #4]
 800e238:	18a4      	adds	r4, r4, r2
 800e23a:	000f      	movs	r7, r1
 800e23c:	942e      	str	r4, [sp, #184]	; 0xb8
 800e23e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e240:	2b07      	cmp	r3, #7
 800e242:	dd08      	ble.n	800e256 <_svfprintf_r+0x104a>
 800e244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e246:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e248:	aa2c      	add	r2, sp, #176	; 0xb0
 800e24a:	f003 f8f5 	bl	8011438 <__ssprint_r>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d000      	beq.n	800e254 <_svfprintf_r+0x1048>
 800e252:	e1ba      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e254:	af2f      	add	r7, sp, #188	; 0xbc
 800e256:	9b08      	ldr	r3, [sp, #32]
 800e258:	195d      	adds	r5, r3, r5
 800e25a:	0573      	lsls	r3, r6, #21
 800e25c:	d50b      	bpl.n	800e276 <_svfprintf_r+0x106a>
 800e25e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e260:	2b00      	cmp	r3, #0
 800e262:	d176      	bne.n	800e352 <_svfprintf_r+0x1146>
 800e264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e266:	2b00      	cmp	r3, #0
 800e268:	d176      	bne.n	800e358 <_svfprintf_r+0x114c>
 800e26a:	9b08      	ldr	r3, [sp, #32]
 800e26c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e26e:	189b      	adds	r3, r3, r2
 800e270:	429d      	cmp	r5, r3
 800e272:	d900      	bls.n	800e276 <_svfprintf_r+0x106a>
 800e274:	001d      	movs	r5, r3
 800e276:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e27a:	4293      	cmp	r3, r2
 800e27c:	db01      	blt.n	800e282 <_svfprintf_r+0x1076>
 800e27e:	07f3      	lsls	r3, r6, #31
 800e280:	d516      	bpl.n	800e2b0 <_svfprintf_r+0x10a4>
 800e282:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e284:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e286:	603b      	str	r3, [r7, #0]
 800e288:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e28a:	607b      	str	r3, [r7, #4]
 800e28c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e28e:	3708      	adds	r7, #8
 800e290:	189b      	adds	r3, r3, r2
 800e292:	932e      	str	r3, [sp, #184]	; 0xb8
 800e294:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e296:	3301      	adds	r3, #1
 800e298:	932d      	str	r3, [sp, #180]	; 0xb4
 800e29a:	2b07      	cmp	r3, #7
 800e29c:	dd08      	ble.n	800e2b0 <_svfprintf_r+0x10a4>
 800e29e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e2a2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e2a4:	f003 f8c8 	bl	8011438 <__ssprint_r>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d000      	beq.n	800e2ae <_svfprintf_r+0x10a2>
 800e2ac:	e18d      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e2ae:	af2f      	add	r7, sp, #188	; 0xbc
 800e2b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2b2:	9b08      	ldr	r3, [sp, #32]
 800e2b4:	4694      	mov	ip, r2
 800e2b6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e2b8:	4463      	add	r3, ip
 800e2ba:	1b5b      	subs	r3, r3, r5
 800e2bc:	1b14      	subs	r4, r2, r4
 800e2be:	429c      	cmp	r4, r3
 800e2c0:	dd00      	ble.n	800e2c4 <_svfprintf_r+0x10b8>
 800e2c2:	001c      	movs	r4, r3
 800e2c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e2c6:	2c00      	cmp	r4, #0
 800e2c8:	dd12      	ble.n	800e2f0 <_svfprintf_r+0x10e4>
 800e2ca:	18e3      	adds	r3, r4, r3
 800e2cc:	932e      	str	r3, [sp, #184]	; 0xb8
 800e2ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e2d0:	603d      	str	r5, [r7, #0]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	607c      	str	r4, [r7, #4]
 800e2d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e2d8:	3708      	adds	r7, #8
 800e2da:	2b07      	cmp	r3, #7
 800e2dc:	dd08      	ble.n	800e2f0 <_svfprintf_r+0x10e4>
 800e2de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e2e2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e2e4:	f003 f8a8 	bl	8011438 <__ssprint_r>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d000      	beq.n	800e2ee <_svfprintf_r+0x10e2>
 800e2ec:	e16d      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e2ee:	af2f      	add	r7, sp, #188	; 0xbc
 800e2f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e2f4:	2510      	movs	r5, #16
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	43e2      	mvns	r2, r4
 800e2fa:	17d2      	asrs	r2, r2, #31
 800e2fc:	4014      	ands	r4, r2
 800e2fe:	1b1c      	subs	r4, r3, r4
 800e300:	2c00      	cmp	r4, #0
 800e302:	dc00      	bgt.n	800e306 <_svfprintf_r+0x10fa>
 800e304:	e6b0      	b.n	800e068 <_svfprintf_r+0xe5c>
 800e306:	0039      	movs	r1, r7
 800e308:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e30a:	4807      	ldr	r0, [pc, #28]	; (800e328 <_svfprintf_r+0x111c>)
 800e30c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e30e:	3301      	adds	r3, #1
 800e310:	3108      	adds	r1, #8
 800e312:	6038      	str	r0, [r7, #0]
 800e314:	2c10      	cmp	r4, #16
 800e316:	dd00      	ble.n	800e31a <_svfprintf_r+0x110e>
 800e318:	e096      	b.n	800e448 <_svfprintf_r+0x123c>
 800e31a:	1912      	adds	r2, r2, r4
 800e31c:	607c      	str	r4, [r7, #4]
 800e31e:	922e      	str	r2, [sp, #184]	; 0xb8
 800e320:	e6dd      	b.n	800e0de <_svfprintf_r+0xed2>
 800e322:	46c0      	nop			; (mov r8, r8)
 800e324:	0801467e 	.word	0x0801467e
 800e328:	08014690 	.word	0x08014690
 800e32c:	2010      	movs	r0, #16
 800e32e:	1812      	adds	r2, r2, r0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	922e      	str	r2, [sp, #184]	; 0xb8
 800e334:	932d      	str	r3, [sp, #180]	; 0xb4
 800e336:	2b07      	cmp	r3, #7
 800e338:	dd08      	ble.n	800e34c <_svfprintf_r+0x1140>
 800e33a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e33c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e33e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e340:	f003 f87a 	bl	8011438 <__ssprint_r>
 800e344:	2800      	cmp	r0, #0
 800e346:	d000      	beq.n	800e34a <_svfprintf_r+0x113e>
 800e348:	e13f      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e34a:	a92f      	add	r1, sp, #188	; 0xbc
 800e34c:	000f      	movs	r7, r1
 800e34e:	3c10      	subs	r4, #16
 800e350:	e768      	b.n	800e224 <_svfprintf_r+0x1018>
 800e352:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e354:	2b00      	cmp	r3, #0
 800e356:	d05d      	beq.n	800e414 <_svfprintf_r+0x1208>
 800e358:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e35a:	3b01      	subs	r3, #1
 800e35c:	9310      	str	r3, [sp, #64]	; 0x40
 800e35e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e360:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e362:	603b      	str	r3, [r7, #0]
 800e364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e366:	607b      	str	r3, [r7, #4]
 800e368:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e36a:	3708      	adds	r7, #8
 800e36c:	189b      	adds	r3, r3, r2
 800e36e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e370:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e372:	3301      	adds	r3, #1
 800e374:	932d      	str	r3, [sp, #180]	; 0xb4
 800e376:	2b07      	cmp	r3, #7
 800e378:	dd08      	ble.n	800e38c <_svfprintf_r+0x1180>
 800e37a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e37c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e37e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e380:	f003 f85a 	bl	8011438 <__ssprint_r>
 800e384:	2800      	cmp	r0, #0
 800e386:	d000      	beq.n	800e38a <_svfprintf_r+0x117e>
 800e388:	e11f      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e38a:	af2f      	add	r7, sp, #188	; 0xbc
 800e38c:	9b08      	ldr	r3, [sp, #32]
 800e38e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e390:	189c      	adds	r4, r3, r2
 800e392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e394:	1b64      	subs	r4, r4, r5
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	429c      	cmp	r4, r3
 800e39a:	dd00      	ble.n	800e39e <_svfprintf_r+0x1192>
 800e39c:	001c      	movs	r4, r3
 800e39e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e3a0:	2c00      	cmp	r4, #0
 800e3a2:	dd12      	ble.n	800e3ca <_svfprintf_r+0x11be>
 800e3a4:	18e3      	adds	r3, r4, r3
 800e3a6:	932e      	str	r3, [sp, #184]	; 0xb8
 800e3a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e3aa:	603d      	str	r5, [r7, #0]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	607c      	str	r4, [r7, #4]
 800e3b0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	2b07      	cmp	r3, #7
 800e3b6:	dd08      	ble.n	800e3ca <_svfprintf_r+0x11be>
 800e3b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3be:	f003 f83b 	bl	8011438 <__ssprint_r>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d000      	beq.n	800e3c8 <_svfprintf_r+0x11bc>
 800e3c6:	e100      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e3c8:	af2f      	add	r7, sp, #188	; 0xbc
 800e3ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3cc:	781a      	ldrb	r2, [r3, #0]
 800e3ce:	43e3      	mvns	r3, r4
 800e3d0:	17db      	asrs	r3, r3, #31
 800e3d2:	401c      	ands	r4, r3
 800e3d4:	1b14      	subs	r4, r2, r4
 800e3d6:	2c00      	cmp	r4, #0
 800e3d8:	dd18      	ble.n	800e40c <_svfprintf_r+0x1200>
 800e3da:	0039      	movs	r1, r7
 800e3dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e3de:	48aa      	ldr	r0, [pc, #680]	; (800e688 <_svfprintf_r+0x147c>)
 800e3e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	3108      	adds	r1, #8
 800e3e6:	6038      	str	r0, [r7, #0]
 800e3e8:	2c10      	cmp	r4, #16
 800e3ea:	dc1a      	bgt.n	800e422 <_svfprintf_r+0x1216>
 800e3ec:	1912      	adds	r2, r2, r4
 800e3ee:	607c      	str	r4, [r7, #4]
 800e3f0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e3f2:	000f      	movs	r7, r1
 800e3f4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3f6:	2b07      	cmp	r3, #7
 800e3f8:	dd08      	ble.n	800e40c <_svfprintf_r+0x1200>
 800e3fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3fe:	aa2c      	add	r2, sp, #176	; 0xb0
 800e400:	f003 f81a 	bl	8011438 <__ssprint_r>
 800e404:	2800      	cmp	r0, #0
 800e406:	d000      	beq.n	800e40a <_svfprintf_r+0x11fe>
 800e408:	e0df      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e40a:	af2f      	add	r7, sp, #188	; 0xbc
 800e40c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	18ed      	adds	r5, r5, r3
 800e412:	e724      	b.n	800e25e <_svfprintf_r+0x1052>
 800e414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e416:	3b01      	subs	r3, #1
 800e418:	9312      	str	r3, [sp, #72]	; 0x48
 800e41a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e41c:	3b01      	subs	r3, #1
 800e41e:	9311      	str	r3, [sp, #68]	; 0x44
 800e420:	e79d      	b.n	800e35e <_svfprintf_r+0x1152>
 800e422:	2010      	movs	r0, #16
 800e424:	1812      	adds	r2, r2, r0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	922e      	str	r2, [sp, #184]	; 0xb8
 800e42a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e42c:	2b07      	cmp	r3, #7
 800e42e:	dd08      	ble.n	800e442 <_svfprintf_r+0x1236>
 800e430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e432:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e434:	aa2c      	add	r2, sp, #176	; 0xb0
 800e436:	f002 ffff 	bl	8011438 <__ssprint_r>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	d000      	beq.n	800e440 <_svfprintf_r+0x1234>
 800e43e:	e0c4      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e440:	a92f      	add	r1, sp, #188	; 0xbc
 800e442:	000f      	movs	r7, r1
 800e444:	3c10      	subs	r4, #16
 800e446:	e7c8      	b.n	800e3da <_svfprintf_r+0x11ce>
 800e448:	3210      	adds	r2, #16
 800e44a:	607d      	str	r5, [r7, #4]
 800e44c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e44e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e450:	2b07      	cmp	r3, #7
 800e452:	dd08      	ble.n	800e466 <_svfprintf_r+0x125a>
 800e454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e456:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e458:	aa2c      	add	r2, sp, #176	; 0xb0
 800e45a:	f002 ffed 	bl	8011438 <__ssprint_r>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d000      	beq.n	800e464 <_svfprintf_r+0x1258>
 800e462:	e0b2      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e464:	a92f      	add	r1, sp, #188	; 0xbc
 800e466:	000f      	movs	r7, r1
 800e468:	3c10      	subs	r4, #16
 800e46a:	e74c      	b.n	800e306 <_svfprintf_r+0x10fa>
 800e46c:	003c      	movs	r4, r7
 800e46e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e470:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e474:	3101      	adds	r1, #1
 800e476:	3301      	adds	r3, #1
 800e478:	3408      	adds	r4, #8
 800e47a:	2a01      	cmp	r2, #1
 800e47c:	dc03      	bgt.n	800e486 <_svfprintf_r+0x127a>
 800e47e:	2201      	movs	r2, #1
 800e480:	4216      	tst	r6, r2
 800e482:	d100      	bne.n	800e486 <_svfprintf_r+0x127a>
 800e484:	e07f      	b.n	800e586 <_svfprintf_r+0x137a>
 800e486:	9a08      	ldr	r2, [sp, #32]
 800e488:	912e      	str	r1, [sp, #184]	; 0xb8
 800e48a:	603a      	str	r2, [r7, #0]
 800e48c:	2201      	movs	r2, #1
 800e48e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e490:	607a      	str	r2, [r7, #4]
 800e492:	2b07      	cmp	r3, #7
 800e494:	dd08      	ble.n	800e4a8 <_svfprintf_r+0x129c>
 800e496:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e498:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e49a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e49c:	f002 ffcc 	bl	8011438 <__ssprint_r>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d000      	beq.n	800e4a6 <_svfprintf_r+0x129a>
 800e4a4:	e091      	b.n	800e5ca <_svfprintf_r+0x13be>
 800e4a6:	ac2f      	add	r4, sp, #188	; 0xbc
 800e4a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e4aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e4ac:	6023      	str	r3, [r4, #0]
 800e4ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e4b0:	6063      	str	r3, [r4, #4]
 800e4b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e4b4:	3408      	adds	r4, #8
 800e4b6:	189b      	adds	r3, r3, r2
 800e4b8:	932e      	str	r3, [sp, #184]	; 0xb8
 800e4ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e4bc:	3301      	adds	r3, #1
 800e4be:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4c0:	2b07      	cmp	r3, #7
 800e4c2:	dd07      	ble.n	800e4d4 <_svfprintf_r+0x12c8>
 800e4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4ca:	f002 ffb5 	bl	8011438 <__ssprint_r>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d17b      	bne.n	800e5ca <_svfprintf_r+0x13be>
 800e4d2:	ac2f      	add	r4, sp, #188	; 0xbc
 800e4d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e4da:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e4de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4e0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e4e2:	1e5d      	subs	r5, r3, #1
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	f7f1 ffaf 	bl	8000448 <__aeabi_dcmpeq>
 800e4ea:	2800      	cmp	r0, #0
 800e4ec:	d126      	bne.n	800e53c <_svfprintf_r+0x1330>
 800e4ee:	9b08      	ldr	r3, [sp, #32]
 800e4f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e4f6:	6023      	str	r3, [r4, #0]
 800e4f8:	1e7b      	subs	r3, r7, #1
 800e4fa:	3201      	adds	r2, #1
 800e4fc:	185b      	adds	r3, r3, r1
 800e4fe:	6065      	str	r5, [r4, #4]
 800e500:	932e      	str	r3, [sp, #184]	; 0xb8
 800e502:	922d      	str	r2, [sp, #180]	; 0xb4
 800e504:	3408      	adds	r4, #8
 800e506:	2a07      	cmp	r2, #7
 800e508:	dd07      	ble.n	800e51a <_svfprintf_r+0x130e>
 800e50a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e50c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e50e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e510:	f002 ff92 	bl	8011438 <__ssprint_r>
 800e514:	2800      	cmp	r0, #0
 800e516:	d158      	bne.n	800e5ca <_svfprintf_r+0x13be>
 800e518:	ac2f      	add	r4, sp, #188	; 0xbc
 800e51a:	ab28      	add	r3, sp, #160	; 0xa0
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e520:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e522:	6063      	str	r3, [r4, #4]
 800e524:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e526:	189b      	adds	r3, r3, r2
 800e528:	932e      	str	r3, [sp, #184]	; 0xb8
 800e52a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e52c:	3301      	adds	r3, #1
 800e52e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e530:	2b07      	cmp	r3, #7
 800e532:	dd00      	ble.n	800e536 <_svfprintf_r+0x132a>
 800e534:	e638      	b.n	800e1a8 <_svfprintf_r+0xf9c>
 800e536:	3408      	adds	r4, #8
 800e538:	0027      	movs	r7, r4
 800e53a:	e595      	b.n	800e068 <_svfprintf_r+0xe5c>
 800e53c:	2710      	movs	r7, #16
 800e53e:	2d00      	cmp	r5, #0
 800e540:	ddeb      	ble.n	800e51a <_svfprintf_r+0x130e>
 800e542:	0021      	movs	r1, r4
 800e544:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e546:	4850      	ldr	r0, [pc, #320]	; (800e688 <_svfprintf_r+0x147c>)
 800e548:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e54a:	3301      	adds	r3, #1
 800e54c:	3108      	adds	r1, #8
 800e54e:	6020      	str	r0, [r4, #0]
 800e550:	2d10      	cmp	r5, #16
 800e552:	dc07      	bgt.n	800e564 <_svfprintf_r+0x1358>
 800e554:	6065      	str	r5, [r4, #4]
 800e556:	000c      	movs	r4, r1
 800e558:	18ad      	adds	r5, r5, r2
 800e55a:	952e      	str	r5, [sp, #184]	; 0xb8
 800e55c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e55e:	2b07      	cmp	r3, #7
 800e560:	dddb      	ble.n	800e51a <_svfprintf_r+0x130e>
 800e562:	e7d2      	b.n	800e50a <_svfprintf_r+0x12fe>
 800e564:	3210      	adds	r2, #16
 800e566:	6067      	str	r7, [r4, #4]
 800e568:	922e      	str	r2, [sp, #184]	; 0xb8
 800e56a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e56c:	2b07      	cmp	r3, #7
 800e56e:	dd07      	ble.n	800e580 <_svfprintf_r+0x1374>
 800e570:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e572:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e574:	aa2c      	add	r2, sp, #176	; 0xb0
 800e576:	f002 ff5f 	bl	8011438 <__ssprint_r>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d125      	bne.n	800e5ca <_svfprintf_r+0x13be>
 800e57e:	a92f      	add	r1, sp, #188	; 0xbc
 800e580:	000c      	movs	r4, r1
 800e582:	3d10      	subs	r5, #16
 800e584:	e7dd      	b.n	800e542 <_svfprintf_r+0x1336>
 800e586:	9808      	ldr	r0, [sp, #32]
 800e588:	912e      	str	r1, [sp, #184]	; 0xb8
 800e58a:	c705      	stmia	r7!, {r0, r2}
 800e58c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e58e:	e7e6      	b.n	800e55e <_svfprintf_r+0x1352>
 800e590:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e592:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e594:	2510      	movs	r5, #16
 800e596:	1a9c      	subs	r4, r3, r2
 800e598:	2c00      	cmp	r4, #0
 800e59a:	dc00      	bgt.n	800e59e <_svfprintf_r+0x1392>
 800e59c:	e567      	b.n	800e06e <_svfprintf_r+0xe62>
 800e59e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5a0:	493a      	ldr	r1, [pc, #232]	; (800e68c <_svfprintf_r+0x1480>)
 800e5a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	6039      	str	r1, [r7, #0]
 800e5a8:	2c10      	cmp	r4, #16
 800e5aa:	dc19      	bgt.n	800e5e0 <_svfprintf_r+0x13d4>
 800e5ac:	607c      	str	r4, [r7, #4]
 800e5ae:	18a4      	adds	r4, r4, r2
 800e5b0:	942e      	str	r4, [sp, #184]	; 0xb8
 800e5b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5b4:	2b07      	cmp	r3, #7
 800e5b6:	dc00      	bgt.n	800e5ba <_svfprintf_r+0x13ae>
 800e5b8:	e559      	b.n	800e06e <_svfprintf_r+0xe62>
 800e5ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5be:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5c0:	f002 ff3a 	bl	8011438 <__ssprint_r>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	d100      	bne.n	800e5ca <_svfprintf_r+0x13be>
 800e5c8:	e551      	b.n	800e06e <_svfprintf_r+0xe62>
 800e5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d101      	bne.n	800e5d4 <_svfprintf_r+0x13c8>
 800e5d0:	f7ff f845 	bl	800d65e <_svfprintf_r+0x452>
 800e5d4:	0019      	movs	r1, r3
 800e5d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5d8:	f7fd fd80 	bl	800c0dc <_free_r>
 800e5dc:	f7ff f83f 	bl	800d65e <_svfprintf_r+0x452>
 800e5e0:	3210      	adds	r2, #16
 800e5e2:	607d      	str	r5, [r7, #4]
 800e5e4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e5e6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	2b07      	cmp	r3, #7
 800e5ec:	dd07      	ble.n	800e5fe <_svfprintf_r+0x13f2>
 800e5ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5f2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5f4:	f002 ff20 	bl	8011438 <__ssprint_r>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d1e6      	bne.n	800e5ca <_svfprintf_r+0x13be>
 800e5fc:	af2f      	add	r7, sp, #188	; 0xbc
 800e5fe:	3c10      	subs	r4, #16
 800e600:	e7cd      	b.n	800e59e <_svfprintf_r+0x1392>
 800e602:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e604:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e606:	f7fd fd69 	bl	800c0dc <_free_r>
 800e60a:	e549      	b.n	800e0a0 <_svfprintf_r+0xe94>
 800e60c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d101      	bne.n	800e616 <_svfprintf_r+0x140a>
 800e612:	f7ff f824 	bl	800d65e <_svfprintf_r+0x452>
 800e616:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e618:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e61a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e61c:	f002 ff0c 	bl	8011438 <__ssprint_r>
 800e620:	f7ff f81d 	bl	800d65e <_svfprintf_r+0x452>
 800e624:	0034      	movs	r4, r6
 800e626:	2a00      	cmp	r2, #0
 800e628:	d101      	bne.n	800e62e <_svfprintf_r+0x1422>
 800e62a:	f7fe ff8c 	bl	800d546 <_svfprintf_r+0x33a>
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d101      	bne.n	800e636 <_svfprintf_r+0x142a>
 800e632:	f7ff fc01 	bl	800de38 <_svfprintf_r+0xc2c>
 800e636:	2b02      	cmp	r3, #2
 800e638:	d100      	bne.n	800e63c <_svfprintf_r+0x1430>
 800e63a:	e459      	b.n	800def0 <_svfprintf_r+0xce4>
 800e63c:	2507      	movs	r5, #7
 800e63e:	ab58      	add	r3, sp, #352	; 0x160
 800e640:	9308      	str	r3, [sp, #32]
 800e642:	9a08      	ldr	r2, [sp, #32]
 800e644:	0013      	movs	r3, r2
 800e646:	3b01      	subs	r3, #1
 800e648:	9308      	str	r3, [sp, #32]
 800e64a:	9b06      	ldr	r3, [sp, #24]
 800e64c:	9908      	ldr	r1, [sp, #32]
 800e64e:	402b      	ands	r3, r5
 800e650:	3330      	adds	r3, #48	; 0x30
 800e652:	700b      	strb	r3, [r1, #0]
 800e654:	9907      	ldr	r1, [sp, #28]
 800e656:	074e      	lsls	r6, r1, #29
 800e658:	9906      	ldr	r1, [sp, #24]
 800e65a:	08c8      	lsrs	r0, r1, #3
 800e65c:	9907      	ldr	r1, [sp, #28]
 800e65e:	4306      	orrs	r6, r0
 800e660:	08c9      	lsrs	r1, r1, #3
 800e662:	9107      	str	r1, [sp, #28]
 800e664:	0031      	movs	r1, r6
 800e666:	9807      	ldr	r0, [sp, #28]
 800e668:	9606      	str	r6, [sp, #24]
 800e66a:	4301      	orrs	r1, r0
 800e66c:	d1e9      	bne.n	800e642 <_svfprintf_r+0x1436>
 800e66e:	07e1      	lsls	r1, r4, #31
 800e670:	d400      	bmi.n	800e674 <_svfprintf_r+0x1468>
 800e672:	e42a      	b.n	800deca <_svfprintf_r+0xcbe>
 800e674:	2b30      	cmp	r3, #48	; 0x30
 800e676:	d100      	bne.n	800e67a <_svfprintf_r+0x146e>
 800e678:	e427      	b.n	800deca <_svfprintf_r+0xcbe>
 800e67a:	2130      	movs	r1, #48	; 0x30
 800e67c:	9b08      	ldr	r3, [sp, #32]
 800e67e:	3b01      	subs	r3, #1
 800e680:	7019      	strb	r1, [r3, #0]
 800e682:	1e93      	subs	r3, r2, #2
 800e684:	9308      	str	r3, [sp, #32]
 800e686:	e420      	b.n	800deca <_svfprintf_r+0xcbe>
 800e688:	08014690 	.word	0x08014690
 800e68c:	08014680 	.word	0x08014680

0800e690 <__ssvfscanf_r>:
 800e690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e692:	4ca7      	ldr	r4, [pc, #668]	; (800e930 <__ssvfscanf_r+0x2a0>)
 800e694:	44a5      	add	sp, r4
 800e696:	af02      	add	r7, sp, #8
 800e698:	633b      	str	r3, [r7, #48]	; 0x30
 800e69a:	000b      	movs	r3, r1
 800e69c:	6378      	str	r0, [r7, #52]	; 0x34
 800e69e:	6479      	str	r1, [r7, #68]	; 0x44
 800e6a0:	61ba      	str	r2, [r7, #24]
 800e6a2:	220c      	movs	r2, #12
 800e6a4:	5e9a      	ldrsh	r2, [r3, r2]
 800e6a6:	2380      	movs	r3, #128	; 0x80
 800e6a8:	019b      	lsls	r3, r3, #6
 800e6aa:	421a      	tst	r2, r3
 800e6ac:	d105      	bne.n	800e6ba <__ssvfscanf_r+0x2a>
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	818b      	strh	r3, [r1, #12]
 800e6b2:	4aa0      	ldr	r2, [pc, #640]	; (800e934 <__ssvfscanf_r+0x2a4>)
 800e6b4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e6b6:	4013      	ands	r3, r2
 800e6b8:	664b      	str	r3, [r1, #100]	; 0x64
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	617b      	str	r3, [r7, #20]
 800e6be:	643b      	str	r3, [r7, #64]	; 0x40
 800e6c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e6c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	69ba      	ldr	r2, [r7, #24]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	3201      	adds	r2, #1
 800e6d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6d2:	61ba      	str	r2, [r7, #24]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d100      	bne.n	800e6da <__ssvfscanf_r+0x4a>
 800e6d8:	e0d7      	b.n	800e88a <__ssvfscanf_r+0x1fa>
 800e6da:	2608      	movs	r6, #8
 800e6dc:	2108      	movs	r1, #8
 800e6de:	4a96      	ldr	r2, [pc, #600]	; (800e938 <__ssvfscanf_r+0x2a8>)
 800e6e0:	5cd2      	ldrb	r2, [r2, r3]
 800e6e2:	4016      	ands	r6, r2
 800e6e4:	420a      	tst	r2, r1
 800e6e6:	d01d      	beq.n	800e724 <__ssvfscanf_r+0x94>
 800e6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	dd12      	ble.n	800e716 <__ssvfscanf_r+0x86>
 800e6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6f2:	4991      	ldr	r1, [pc, #580]	; (800e938 <__ssvfscanf_r+0x2a8>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	781a      	ldrb	r2, [r3, #0]
 800e6f8:	5c8a      	ldrb	r2, [r1, r2]
 800e6fa:	2108      	movs	r1, #8
 800e6fc:	420a      	tst	r2, r1
 800e6fe:	d0e3      	beq.n	800e6c8 <__ssvfscanf_r+0x38>
 800e700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e702:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e704:	3201      	adds	r2, #1
 800e706:	63ba      	str	r2, [r7, #56]	; 0x38
 800e708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e70a:	3301      	adds	r3, #1
 800e70c:	6852      	ldr	r2, [r2, #4]
 800e70e:	600b      	str	r3, [r1, #0]
 800e710:	3a01      	subs	r2, #1
 800e712:	604a      	str	r2, [r1, #4]
 800e714:	e7e8      	b.n	800e6e8 <__ssvfscanf_r+0x58>
 800e716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e718:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e71a:	f002 ff4d 	bl	80115b8 <__ssrefill_r>
 800e71e:	2800      	cmp	r0, #0
 800e720:	d0e6      	beq.n	800e6f0 <__ssvfscanf_r+0x60>
 800e722:	e7d1      	b.n	800e6c8 <__ssvfscanf_r+0x38>
 800e724:	2b25      	cmp	r3, #37	; 0x25
 800e726:	d165      	bne.n	800e7f4 <__ssvfscanf_r+0x164>
 800e728:	250a      	movs	r5, #10
 800e72a:	2480      	movs	r4, #128	; 0x80
 800e72c:	69ba      	ldr	r2, [r7, #24]
 800e72e:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e730:	3b16      	subs	r3, #22
 800e732:	69b9      	ldr	r1, [r7, #24]
 800e734:	3101      	adds	r1, #1
 800e736:	61b9      	str	r1, [r7, #24]
 800e738:	7811      	ldrb	r1, [r2, #0]
 800e73a:	0008      	movs	r0, r1
 800e73c:	3825      	subs	r0, #37	; 0x25
 800e73e:	2855      	cmp	r0, #85	; 0x55
 800e740:	d900      	bls.n	800e744 <__ssvfscanf_r+0xb4>
 800e742:	e170      	b.n	800ea26 <__ssvfscanf_r+0x396>
 800e744:	f7f1 fcf0 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e748:	016f0056 	.word	0x016f0056
 800e74c:	016f016f 	.word	0x016f016f
 800e750:	0081016f 	.word	0x0081016f
 800e754:	016f016f 	.word	0x016f016f
 800e758:	016f016f 	.word	0x016f016f
 800e75c:	00b8016f 	.word	0x00b8016f
 800e760:	00b800b8 	.word	0x00b800b8
 800e764:	00b800b8 	.word	0x00b800b8
 800e768:	00b800b8 	.word	0x00b800b8
 800e76c:	00b800b8 	.word	0x00b800b8
 800e770:	016f00b8 	.word	0x016f00b8
 800e774:	016f016f 	.word	0x016f016f
 800e778:	016f016f 	.word	0x016f016f
 800e77c:	016f016f 	.word	0x016f016f
 800e780:	016f00d8 	.word	0x016f00d8
 800e784:	00c1010a 	.word	0x00c1010a
 800e788:	00d800d8 	.word	0x00d800d8
 800e78c:	016f00d8 	.word	0x016f00d8
 800e790:	016f016f 	.word	0x016f016f
 800e794:	009f016f 	.word	0x009f016f
 800e798:	016f016f 	.word	0x016f016f
 800e79c:	016f00c9 	.word	0x016f00c9
 800e7a0:	016f016f 	.word	0x016f016f
 800e7a4:	016f00f0 	.word	0x016f00f0
 800e7a8:	016f016f 	.word	0x016f016f
 800e7ac:	00d1016f 	.word	0x00d1016f
 800e7b0:	016f016f 	.word	0x016f016f
 800e7b4:	016f00fe 	.word	0x016f00fe
 800e7b8:	016f016f 	.word	0x016f016f
 800e7bc:	016f016f 	.word	0x016f016f
 800e7c0:	016f00d8 	.word	0x016f00d8
 800e7c4:	00c3010c 	.word	0x00c3010c
 800e7c8:	00d800d8 	.word	0x00d800d8
 800e7cc:	009400d8 	.word	0x009400d8
 800e7d0:	009f012f 	.word	0x009f012f
 800e7d4:	0088016f 	.word	0x0088016f
 800e7d8:	011200a9 	.word	0x011200a9
 800e7dc:	011000cb 	.word	0x011000cb
 800e7e0:	016f016f 	.word	0x016f016f
 800e7e4:	00a600f2 	.word	0x00a600f2
 800e7e8:	016f00cf 	.word	0x016f00cf
 800e7ec:	00d1016f 	.word	0x00d1016f
 800e7f0:	00a6016f 	.word	0x00a6016f
 800e7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	dd12      	ble.n	800e822 <__ssvfscanf_r+0x192>
 800e7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7fe:	69ba      	ldr	r2, [r7, #24]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3a01      	subs	r2, #1
 800e804:	7819      	ldrb	r1, [r3, #0]
 800e806:	7812      	ldrb	r2, [r2, #0]
 800e808:	4291      	cmp	r1, r2
 800e80a:	d13e      	bne.n	800e88a <__ssvfscanf_r+0x1fa>
 800e80c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e80e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e810:	6852      	ldr	r2, [r2, #4]
 800e812:	3301      	adds	r3, #1
 800e814:	600b      	str	r3, [r1, #0]
 800e816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e818:	3a01      	subs	r2, #1
 800e81a:	604a      	str	r2, [r1, #4]
 800e81c:	3301      	adds	r3, #1
 800e81e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e820:	e752      	b.n	800e6c8 <__ssvfscanf_r+0x38>
 800e822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e824:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e826:	f002 fec7 	bl	80115b8 <__ssrefill_r>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d0e6      	beq.n	800e7fc <__ssvfscanf_r+0x16c>
 800e82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e830:	2b00      	cmp	r3, #0
 800e832:	d003      	beq.n	800e83c <__ssvfscanf_r+0x1ac>
 800e834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e836:	899b      	ldrh	r3, [r3, #12]
 800e838:	065b      	lsls	r3, r3, #25
 800e83a:	d526      	bpl.n	800e88a <__ssvfscanf_r+0x1fa>
 800e83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d000      	beq.n	800e844 <__ssvfscanf_r+0x1b4>
 800e842:	e0f6      	b.n	800ea32 <__ssvfscanf_r+0x3a2>
 800e844:	3b01      	subs	r3, #1
 800e846:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e848:	e104      	b.n	800ea54 <__ssvfscanf_r+0x3c4>
 800e84a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e84c:	4332      	orrs	r2, r6
 800e84e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e850:	d11b      	bne.n	800e88a <__ssvfscanf_r+0x1fa>
 800e852:	2610      	movs	r6, #16
 800e854:	69ba      	ldr	r2, [r7, #24]
 800e856:	e76c      	b.n	800e732 <__ssvfscanf_r+0xa2>
 800e858:	421e      	tst	r6, r3
 800e85a:	d116      	bne.n	800e88a <__ssvfscanf_r+0x1fa>
 800e85c:	7851      	ldrb	r1, [r2, #1]
 800e85e:	296c      	cmp	r1, #108	; 0x6c
 800e860:	d103      	bne.n	800e86a <__ssvfscanf_r+0x1da>
 800e862:	3202      	adds	r2, #2
 800e864:	61ba      	str	r2, [r7, #24]
 800e866:	2202      	movs	r2, #2
 800e868:	e000      	b.n	800e86c <__ssvfscanf_r+0x1dc>
 800e86a:	2201      	movs	r2, #1
 800e86c:	4316      	orrs	r6, r2
 800e86e:	e7f1      	b.n	800e854 <__ssvfscanf_r+0x1c4>
 800e870:	421e      	tst	r6, r3
 800e872:	d10a      	bne.n	800e88a <__ssvfscanf_r+0x1fa>
 800e874:	7851      	ldrb	r1, [r2, #1]
 800e876:	2968      	cmp	r1, #104	; 0x68
 800e878:	d103      	bne.n	800e882 <__ssvfscanf_r+0x1f2>
 800e87a:	3202      	adds	r2, #2
 800e87c:	61ba      	str	r2, [r7, #24]
 800e87e:	2208      	movs	r2, #8
 800e880:	e7f4      	b.n	800e86c <__ssvfscanf_r+0x1dc>
 800e882:	2204      	movs	r2, #4
 800e884:	e7f2      	b.n	800e86c <__ssvfscanf_r+0x1dc>
 800e886:	421e      	tst	r6, r3
 800e888:	d0ed      	beq.n	800e866 <__ssvfscanf_r+0x1d6>
 800e88a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d000      	beq.n	800e892 <__ssvfscanf_r+0x202>
 800e890:	e0da      	b.n	800ea48 <__ssvfscanf_r+0x3b8>
 800e892:	e0df      	b.n	800ea54 <__ssvfscanf_r+0x3c4>
 800e894:	421e      	tst	r6, r3
 800e896:	d0dd      	beq.n	800e854 <__ssvfscanf_r+0x1c4>
 800e898:	e7f7      	b.n	800e88a <__ssvfscanf_r+0x1fa>
 800e89a:	228f      	movs	r2, #143	; 0x8f
 800e89c:	218f      	movs	r1, #143	; 0x8f
 800e89e:	4032      	ands	r2, r6
 800e8a0:	420e      	tst	r6, r1
 800e8a2:	d1f2      	bne.n	800e88a <__ssvfscanf_r+0x1fa>
 800e8a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e8a6:	2900      	cmp	r1, #0
 800e8a8:	d104      	bne.n	800e8b4 <__ssvfscanf_r+0x224>
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	a902      	add	r1, sp, #8
 800e8ae:	6439      	str	r1, [r7, #64]	; 0x40
 800e8b0:	600a      	str	r2, [r1, #0]
 800e8b2:	604a      	str	r2, [r1, #4]
 800e8b4:	4326      	orrs	r6, r4
 800e8b6:	e7cd      	b.n	800e854 <__ssvfscanf_r+0x1c4>
 800e8b8:	228f      	movs	r2, #143	; 0x8f
 800e8ba:	4216      	tst	r6, r2
 800e8bc:	d1e5      	bne.n	800e88a <__ssvfscanf_r+0x1fa>
 800e8be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8c0:	436a      	muls	r2, r5
 800e8c2:	3a30      	subs	r2, #48	; 0x30
 800e8c4:	188a      	adds	r2, r1, r2
 800e8c6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e8c8:	e7c4      	b.n	800e854 <__ssvfscanf_r+0x1c4>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	431e      	orrs	r6, r3
 800e8ce:	4b1b      	ldr	r3, [pc, #108]	; (800e93c <__ssvfscanf_r+0x2ac>)
 800e8d0:	617b      	str	r3, [r7, #20]
 800e8d2:	230a      	movs	r3, #10
 800e8d4:	2403      	movs	r4, #3
 800e8d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e8d8:	e00f      	b.n	800e8fa <__ssvfscanf_r+0x26a>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	431e      	orrs	r6, r3
 800e8de:	4b18      	ldr	r3, [pc, #96]	; (800e940 <__ssvfscanf_r+0x2b0>)
 800e8e0:	617b      	str	r3, [r7, #20]
 800e8e2:	2308      	movs	r3, #8
 800e8e4:	e7f6      	b.n	800e8d4 <__ssvfscanf_r+0x244>
 800e8e6:	4b16      	ldr	r3, [pc, #88]	; (800e940 <__ssvfscanf_r+0x2b0>)
 800e8e8:	e7f2      	b.n	800e8d0 <__ssvfscanf_r+0x240>
 800e8ea:	2380      	movs	r3, #128	; 0x80
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	431e      	orrs	r6, r3
 800e8f0:	4b13      	ldr	r3, [pc, #76]	; (800e940 <__ssvfscanf_r+0x2b0>)
 800e8f2:	617b      	str	r3, [r7, #20]
 800e8f4:	2310      	movs	r3, #16
 800e8f6:	e7ed      	b.n	800e8d4 <__ssvfscanf_r+0x244>
 800e8f8:	2404      	movs	r4, #4
 800e8fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	dd55      	ble.n	800e9ae <__ssvfscanf_r+0x31e>
 800e902:	0673      	lsls	r3, r6, #25
 800e904:	d407      	bmi.n	800e916 <__ssvfscanf_r+0x286>
 800e906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e908:	490b      	ldr	r1, [pc, #44]	; (800e938 <__ssvfscanf_r+0x2a8>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	781a      	ldrb	r2, [r3, #0]
 800e90e:	5c8a      	ldrb	r2, [r1, r2]
 800e910:	2108      	movs	r1, #8
 800e912:	420a      	tst	r2, r1
 800e914:	d152      	bne.n	800e9bc <__ssvfscanf_r+0x32c>
 800e916:	1e60      	subs	r0, r4, #1
 800e918:	2803      	cmp	r0, #3
 800e91a:	d863      	bhi.n	800e9e4 <__ssvfscanf_r+0x354>
 800e91c:	f7f1 fc04 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e920:	03bd01da 	.word	0x03bd01da
 800e924:	068a0579 	.word	0x068a0579
 800e928:	2301      	movs	r3, #1
 800e92a:	431e      	orrs	r6, r3
 800e92c:	2402      	movs	r4, #2
 800e92e:	e7e4      	b.n	800e8fa <__ssvfscanf_r+0x26a>
 800e930:	fffffd34 	.word	0xfffffd34
 800e934:	ffffdfff 	.word	0xffffdfff
 800e938:	08014379 	.word	0x08014379
 800e93c:	0800bae1 	.word	0x0800bae1
 800e940:	080110e9 	.word	0x080110e9
 800e944:	2248      	movs	r2, #72	; 0x48
 800e946:	2318      	movs	r3, #24
 800e948:	189b      	adds	r3, r3, r2
 800e94a:	19d8      	adds	r0, r3, r7
 800e94c:	69b9      	ldr	r1, [r7, #24]
 800e94e:	f001 f9d7 	bl	800fd00 <__sccl>
 800e952:	2340      	movs	r3, #64	; 0x40
 800e954:	2401      	movs	r4, #1
 800e956:	61b8      	str	r0, [r7, #24]
 800e958:	431e      	orrs	r6, r3
 800e95a:	e7ce      	b.n	800e8fa <__ssvfscanf_r+0x26a>
 800e95c:	2301      	movs	r3, #1
 800e95e:	431e      	orrs	r6, r3
 800e960:	2340      	movs	r3, #64	; 0x40
 800e962:	2400      	movs	r4, #0
 800e964:	431e      	orrs	r6, r3
 800e966:	e7c8      	b.n	800e8fa <__ssvfscanf_r+0x26a>
 800e968:	2388      	movs	r3, #136	; 0x88
 800e96a:	e7bf      	b.n	800e8ec <__ssvfscanf_r+0x25c>
 800e96c:	06f3      	lsls	r3, r6, #27
 800e96e:	d500      	bpl.n	800e972 <__ssvfscanf_r+0x2e2>
 800e970:	e6aa      	b.n	800e6c8 <__ssvfscanf_r+0x38>
 800e972:	2108      	movs	r1, #8
 800e974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e976:	cb04      	ldmia	r3!, {r2}
 800e978:	420e      	tst	r6, r1
 800e97a:	d003      	beq.n	800e984 <__ssvfscanf_r+0x2f4>
 800e97c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e97e:	7011      	strb	r1, [r2, #0]
 800e980:	633b      	str	r3, [r7, #48]	; 0x30
 800e982:	e6a1      	b.n	800e6c8 <__ssvfscanf_r+0x38>
 800e984:	0771      	lsls	r1, r6, #29
 800e986:	d502      	bpl.n	800e98e <__ssvfscanf_r+0x2fe>
 800e988:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e98a:	8011      	strh	r1, [r2, #0]
 800e98c:	e7f8      	b.n	800e980 <__ssvfscanf_r+0x2f0>
 800e98e:	07f1      	lsls	r1, r6, #31
 800e990:	d502      	bpl.n	800e998 <__ssvfscanf_r+0x308>
 800e992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e994:	6011      	str	r1, [r2, #0]
 800e996:	e7f3      	b.n	800e980 <__ssvfscanf_r+0x2f0>
 800e998:	07b6      	lsls	r6, r6, #30
 800e99a:	d5fa      	bpl.n	800e992 <__ssvfscanf_r+0x302>
 800e99c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e99e:	6011      	str	r1, [r2, #0]
 800e9a0:	17c9      	asrs	r1, r1, #31
 800e9a2:	6051      	str	r1, [r2, #4]
 800e9a4:	e7ec      	b.n	800e980 <__ssvfscanf_r+0x2f0>
 800e9a6:	4ba2      	ldr	r3, [pc, #648]	; (800ec30 <__ssvfscanf_r+0x5a0>)
 800e9a8:	617b      	str	r3, [r7, #20]
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	e792      	b.n	800e8d4 <__ssvfscanf_r+0x244>
 800e9ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e9b2:	f002 fe01 	bl	80115b8 <__ssrefill_r>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d0a3      	beq.n	800e902 <__ssvfscanf_r+0x272>
 800e9ba:	e738      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800e9bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9c0:	3201      	adds	r2, #1
 800e9c2:	63ba      	str	r2, [r7, #56]	; 0x38
 800e9c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9c6:	6852      	ldr	r2, [r2, #4]
 800e9c8:	3a01      	subs	r2, #1
 800e9ca:	604a      	str	r2, [r1, #4]
 800e9cc:	2a00      	cmp	r2, #0
 800e9ce:	dd02      	ble.n	800e9d6 <__ssvfscanf_r+0x346>
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	600b      	str	r3, [r1, #0]
 800e9d4:	e797      	b.n	800e906 <__ssvfscanf_r+0x276>
 800e9d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e9da:	f002 fded 	bl	80115b8 <__ssrefill_r>
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d091      	beq.n	800e906 <__ssvfscanf_r+0x276>
 800e9e2:	e724      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800e9e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	2a00      	cmp	r2, #0
 800e9ea:	d100      	bne.n	800e9ee <__ssvfscanf_r+0x35e>
 800e9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ee:	2210      	movs	r2, #16
 800e9f0:	0034      	movs	r4, r6
 800e9f2:	4032      	ands	r2, r6
 800e9f4:	623a      	str	r2, [r7, #32]
 800e9f6:	401c      	ands	r4, r3
 800e9f8:	421e      	tst	r6, r3
 800e9fa:	d100      	bne.n	800e9fe <__ssvfscanf_r+0x36e>
 800e9fc:	e0f3      	b.n	800ebe6 <__ssvfscanf_r+0x556>
 800e9fe:	2a00      	cmp	r2, #0
 800ea00:	d000      	beq.n	800ea04 <__ssvfscanf_r+0x374>
 800ea02:	e0b6      	b.n	800eb72 <__ssvfscanf_r+0x4e2>
 800ea04:	2080      	movs	r0, #128	; 0x80
 800ea06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea08:	cb10      	ldmia	r3!, {r4}
 800ea0a:	613b      	str	r3, [r7, #16]
 800ea0c:	4206      	tst	r6, r0
 800ea0e:	d100      	bne.n	800ea12 <__ssvfscanf_r+0x382>
 800ea10:	e0b7      	b.n	800eb82 <__ssvfscanf_r+0x4f2>
 800ea12:	2c00      	cmp	r4, #0
 800ea14:	d007      	beq.n	800ea26 <__ssvfscanf_r+0x396>
 800ea16:	f7fb ff6d 	bl	800a8f4 <malloc>
 800ea1a:	6338      	str	r0, [r7, #48]	; 0x30
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d11f      	bne.n	800ea60 <__ssvfscanf_r+0x3d0>
 800ea20:	2301      	movs	r3, #1
 800ea22:	425b      	negs	r3, r3
 800ea24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d013      	beq.n	800ea54 <__ssvfscanf_r+0x3c4>
 800ea2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2e:	3301      	adds	r3, #1
 800ea30:	d10a      	bne.n	800ea48 <__ssvfscanf_r+0x3b8>
 800ea32:	2400      	movs	r4, #0
 800ea34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea36:	681d      	ldr	r5, [r3, #0]
 800ea38:	88db      	ldrh	r3, [r3, #6]
 800ea3a:	42a3      	cmp	r3, r4
 800ea3c:	dd01      	ble.n	800ea42 <__ssvfscanf_r+0x3b2>
 800ea3e:	f001 f82a 	bl	800fa96 <__ssvfscanf_r+0x1406>
 800ea42:	2301      	movs	r3, #1
 800ea44:	425b      	negs	r3, r3
 800ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4a:	6818      	ldr	r0, [r3, #0]
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d001      	beq.n	800ea54 <__ssvfscanf_r+0x3c4>
 800ea50:	f7fb ff5a 	bl	800a908 <free>
 800ea54:	46bd      	mov	sp, r7
 800ea56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea58:	23b1      	movs	r3, #177	; 0xb1
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	449d      	add	sp, r3
 800ea5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea62:	6023      	str	r3, [r4, #0]
 800ea64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea66:	88de      	ldrh	r6, [r3, #6]
 800ea68:	889d      	ldrh	r5, [r3, #4]
 800ea6a:	42ae      	cmp	r6, r5
 800ea6c:	d30e      	bcc.n	800ea8c <__ssvfscanf_r+0x3fc>
 800ea6e:	4b71      	ldr	r3, [pc, #452]	; (800ec34 <__ssvfscanf_r+0x5a4>)
 800ea70:	429d      	cmp	r5, r3
 800ea72:	d8d5      	bhi.n	800ea20 <__ssvfscanf_r+0x390>
 800ea74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea76:	3508      	adds	r5, #8
 800ea78:	b2ad      	uxth	r5, r5
 800ea7a:	6818      	ldr	r0, [r3, #0]
 800ea7c:	00a9      	lsls	r1, r5, #2
 800ea7e:	f002 f901 	bl	8010c84 <realloc>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d0cc      	beq.n	800ea20 <__ssvfscanf_r+0x390>
 800ea86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea88:	6018      	str	r0, [r3, #0]
 800ea8a:	809d      	strh	r5, [r3, #4]
 800ea8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea8e:	1c72      	adds	r2, r6, #1
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	00b6      	lsls	r6, r6, #2
 800ea94:	50f4      	str	r4, [r6, r3]
 800ea96:	2320      	movs	r3, #32
 800ea98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea9a:	0026      	movs	r6, r4
 800ea9c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ea9e:	80ca      	strh	r2, [r1, #6]
 800eaa0:	61fb      	str	r3, [r7, #28]
 800eaa2:	2500      	movs	r5, #0
 800eaa4:	f7fd f9fe 	bl	800bea4 <__locale_mb_cur_max>
 800eaa8:	42a8      	cmp	r0, r5
 800eaaa:	d100      	bne.n	800eaae <__ssvfscanf_r+0x41e>
 800eaac:	e6bf      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800eaae:	1c6a      	adds	r2, r5, #1
 800eab0:	60fa      	str	r2, [r7, #12]
 800eab2:	228c      	movs	r2, #140	; 0x8c
 800eab4:	2048      	movs	r0, #72	; 0x48
 800eab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eab8:	0052      	lsls	r2, r2, #1
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	1812      	adds	r2, r2, r0
 800eabe:	7819      	ldrb	r1, [r3, #0]
 800eac0:	19d2      	adds	r2, r2, r7
 800eac2:	5551      	strb	r1, [r2, r5]
 800eac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eac8:	6852      	ldr	r2, [r2, #4]
 800eaca:	3301      	adds	r3, #1
 800eacc:	600b      	str	r3, [r1, #0]
 800eace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead0:	3a01      	subs	r2, #1
 800ead2:	604a      	str	r2, [r1, #4]
 800ead4:	2b03      	cmp	r3, #3
 800ead6:	d102      	bne.n	800eade <__ssvfscanf_r+0x44e>
 800ead8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eada:	2b04      	cmp	r3, #4
 800eadc:	d007      	beq.n	800eaee <__ssvfscanf_r+0x45e>
 800eade:	2048      	movs	r0, #72	; 0x48
 800eae0:	2310      	movs	r3, #16
 800eae2:	181b      	adds	r3, r3, r0
 800eae4:	2208      	movs	r2, #8
 800eae6:	2100      	movs	r1, #0
 800eae8:	19d8      	adds	r0, r3, r7
 800eaea:	f7fd f997 	bl	800be1c <memset>
 800eaee:	2148      	movs	r1, #72	; 0x48
 800eaf0:	2310      	movs	r3, #16
 800eaf2:	228c      	movs	r2, #140	; 0x8c
 800eaf4:	185b      	adds	r3, r3, r1
 800eaf6:	0052      	lsls	r2, r2, #1
 800eaf8:	19db      	adds	r3, r3, r7
 800eafa:	1852      	adds	r2, r2, r1
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	0021      	movs	r1, r4
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb04:	19d2      	adds	r2, r2, r7
 800eb06:	f002 fc57 	bl	80113b8 <_mbrtowc_r>
 800eb0a:	0003      	movs	r3, r0
 800eb0c:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb0e:	3301      	adds	r3, #1
 800eb10:	d100      	bne.n	800eb14 <__ssvfscanf_r+0x484>
 800eb12:	e68c      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d139      	bne.n	800eb8c <__ssvfscanf_r+0x4fc>
 800eb18:	6a3b      	ldr	r3, [r7, #32]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d100      	bne.n	800eb20 <__ssvfscanf_r+0x490>
 800eb1e:	6023      	str	r3, [r4, #0]
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb24:	4694      	mov	ip, r2
 800eb26:	4463      	add	r3, ip
 800eb28:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2c:	2b03      	cmp	r3, #3
 800eb2e:	d102      	bne.n	800eb36 <__ssvfscanf_r+0x4a6>
 800eb30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb32:	2b04      	cmp	r3, #4
 800eb34:	d002      	beq.n	800eb3c <__ssvfscanf_r+0x4ac>
 800eb36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb3c:	6a3b      	ldr	r3, [r7, #32]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d115      	bne.n	800eb6e <__ssvfscanf_r+0x4de>
 800eb42:	2e00      	cmp	r6, #0
 800eb44:	d012      	beq.n	800eb6c <__ssvfscanf_r+0x4dc>
 800eb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb48:	69fa      	ldr	r2, [r7, #28]
 800eb4a:	1ae5      	subs	r5, r4, r3
 800eb4c:	10ab      	asrs	r3, r5, #2
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d30c      	bcc.n	800eb6c <__ssvfscanf_r+0x4dc>
 800eb52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb54:	00d1      	lsls	r1, r2, #3
 800eb56:	f002 f895 	bl	8010c84 <realloc>
 800eb5a:	6338      	str	r0, [r7, #48]	; 0x30
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d100      	bne.n	800eb62 <__ssvfscanf_r+0x4d2>
 800eb60:	e75e      	b.n	800ea20 <__ssvfscanf_r+0x390>
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	1944      	adds	r4, r0, r5
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	6030      	str	r0, [r6, #0]
 800eb6a:	61fb      	str	r3, [r7, #28]
 800eb6c:	3404      	adds	r4, #4
 800eb6e:	2500      	movs	r5, #0
 800eb70:	e010      	b.n	800eb94 <__ssvfscanf_r+0x504>
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	613b      	str	r3, [r7, #16]
 800eb76:	2300      	movs	r3, #0
 800eb78:	001e      	movs	r6, r3
 800eb7a:	001c      	movs	r4, r3
 800eb7c:	61fb      	str	r3, [r7, #28]
 800eb7e:	633b      	str	r3, [r7, #48]	; 0x30
 800eb80:	e78f      	b.n	800eaa2 <__ssvfscanf_r+0x412>
 800eb82:	6a3b      	ldr	r3, [r7, #32]
 800eb84:	001e      	movs	r6, r3
 800eb86:	61fb      	str	r3, [r7, #28]
 800eb88:	633b      	str	r3, [r7, #48]	; 0x30
 800eb8a:	e78a      	b.n	800eaa2 <__ssvfscanf_r+0x412>
 800eb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8e:	68fd      	ldr	r5, [r7, #12]
 800eb90:	3302      	adds	r3, #2
 800eb92:	d1c5      	bne.n	800eb20 <__ssvfscanf_r+0x490>
 800eb94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	dc12      	bgt.n	800ebc2 <__ssvfscanf_r+0x532>
 800eb9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eba0:	f002 fd0a 	bl	80115b8 <__ssrefill_r>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d00c      	beq.n	800ebc2 <__ssvfscanf_r+0x532>
 800eba8:	2d00      	cmp	r5, #0
 800ebaa:	d000      	beq.n	800ebae <__ssvfscanf_r+0x51e>
 800ebac:	e63f      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800ebae:	2e00      	cmp	r6, #0
 800ebb0:	d10c      	bne.n	800ebcc <__ssvfscanf_r+0x53c>
 800ebb2:	6a3b      	ldr	r3, [r7, #32]
 800ebb4:	425a      	negs	r2, r3
 800ebb6:	4153      	adcs	r3, r2
 800ebb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebba:	18d3      	adds	r3, r2, r3
 800ebbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	e6de      	b.n	800e980 <__ssvfscanf_r+0x2f0>
 800ebc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d000      	beq.n	800ebca <__ssvfscanf_r+0x53a>
 800ebc8:	e76c      	b.n	800eaa4 <__ssvfscanf_r+0x414>
 800ebca:	e7f0      	b.n	800ebae <__ssvfscanf_r+0x51e>
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	69fa      	ldr	r2, [r7, #28]
 800ebd0:	1ae1      	subs	r1, r4, r3
 800ebd2:	108b      	asrs	r3, r1, #2
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d9ec      	bls.n	800ebb2 <__ssvfscanf_r+0x522>
 800ebd8:	6830      	ldr	r0, [r6, #0]
 800ebda:	f002 f853 	bl	8010c84 <realloc>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d0e7      	beq.n	800ebb2 <__ssvfscanf_r+0x522>
 800ebe2:	6030      	str	r0, [r6, #0]
 800ebe4:	e7e5      	b.n	800ebb2 <__ssvfscanf_r+0x522>
 800ebe6:	6a3b      	ldr	r3, [r7, #32]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d025      	beq.n	800ec38 <__ssvfscanf_r+0x5a8>
 800ebec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ebf4:	6812      	ldr	r2, [r2, #0]
 800ebf6:	4299      	cmp	r1, r3
 800ebf8:	dd11      	ble.n	800ec1e <__ssvfscanf_r+0x58e>
 800ebfa:	1ac9      	subs	r1, r1, r3
 800ebfc:	18d2      	adds	r2, r2, r3
 800ebfe:	18e4      	adds	r4, r4, r3
 800ec00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec02:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ec04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec06:	0019      	movs	r1, r3
 800ec08:	601a      	str	r2, [r3, #0]
 800ec0a:	f002 fcd5 	bl	80115b8 <__ssrefill_r>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d0ec      	beq.n	800ebec <__ssvfscanf_r+0x55c>
 800ec12:	2c00      	cmp	r4, #0
 800ec14:	d100      	bne.n	800ec18 <__ssvfscanf_r+0x588>
 800ec16:	e60a      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800ec18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1a:	191b      	adds	r3, r3, r4
 800ec1c:	e5ff      	b.n	800e81e <__ssvfscanf_r+0x18e>
 800ec1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec20:	1a5b      	subs	r3, r3, r1
 800ec22:	1864      	adds	r4, r4, r1
 800ec24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec26:	604b      	str	r3, [r1, #4]
 800ec28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec2a:	18d2      	adds	r2, r2, r3
 800ec2c:	600a      	str	r2, [r1, #0]
 800ec2e:	e7f3      	b.n	800ec18 <__ssvfscanf_r+0x588>
 800ec30:	0800bae1 	.word	0x0800bae1
 800ec34:	0000fff6 	.word	0x0000fff6
 800ec38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3a:	0034      	movs	r4, r6
 800ec3c:	cb20      	ldmia	r3!, {r5}
 800ec3e:	633b      	str	r3, [r7, #48]	; 0x30
 800ec40:	2380      	movs	r3, #128	; 0x80
 800ec42:	401c      	ands	r4, r3
 800ec44:	421e      	tst	r6, r3
 800ec46:	d028      	beq.n	800ec9a <__ssvfscanf_r+0x60a>
 800ec48:	2d00      	cmp	r5, #0
 800ec4a:	d100      	bne.n	800ec4e <__ssvfscanf_r+0x5be>
 800ec4c:	e61d      	b.n	800e88a <__ssvfscanf_r+0x1fa>
 800ec4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ec50:	f7fb fe50 	bl	800a8f4 <malloc>
 800ec54:	6238      	str	r0, [r7, #32]
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d100      	bne.n	800ec5c <__ssvfscanf_r+0x5cc>
 800ec5a:	e5ef      	b.n	800e83c <__ssvfscanf_r+0x1ac>
 800ec5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec5e:	6028      	str	r0, [r5, #0]
 800ec60:	88de      	ldrh	r6, [r3, #6]
 800ec62:	889c      	ldrh	r4, [r3, #4]
 800ec64:	6818      	ldr	r0, [r3, #0]
 800ec66:	42a6      	cmp	r6, r4
 800ec68:	d30e      	bcc.n	800ec88 <__ssvfscanf_r+0x5f8>
 800ec6a:	4bbf      	ldr	r3, [pc, #764]	; (800ef68 <__ssvfscanf_r+0x8d8>)
 800ec6c:	429c      	cmp	r4, r3
 800ec6e:	d900      	bls.n	800ec72 <__ssvfscanf_r+0x5e2>
 800ec70:	e6df      	b.n	800ea32 <__ssvfscanf_r+0x3a2>
 800ec72:	3408      	adds	r4, #8
 800ec74:	b2a4      	uxth	r4, r4
 800ec76:	00a1      	lsls	r1, r4, #2
 800ec78:	f002 f804 	bl	8010c84 <realloc>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	d100      	bne.n	800ec82 <__ssvfscanf_r+0x5f2>
 800ec80:	e6d7      	b.n	800ea32 <__ssvfscanf_r+0x3a2>
 800ec82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec84:	6018      	str	r0, [r3, #0]
 800ec86:	809c      	strh	r4, [r3, #4]
 800ec88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec8a:	1c72      	adds	r2, r6, #1
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec90:	00b6      	lsls	r6, r6, #2
 800ec92:	002c      	movs	r4, r5
 800ec94:	50f5      	str	r5, [r6, r3]
 800ec96:	6a3d      	ldr	r5, [r7, #32]
 800ec98:	80ca      	strh	r2, [r1, #6]
 800ec9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec9c:	0029      	movs	r1, r5
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	2201      	movs	r2, #1
 800eca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eca4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eca6:	f002 fca6 	bl	80115f6 <_sfread_r>
 800ecaa:	1e05      	subs	r5, r0, #0
 800ecac:	d100      	bne.n	800ecb0 <__ssvfscanf_r+0x620>
 800ecae:	e5be      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800ecb0:	2c00      	cmp	r4, #0
 800ecb2:	d009      	beq.n	800ecc8 <__ssvfscanf_r+0x638>
 800ecb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecb6:	4283      	cmp	r3, r0
 800ecb8:	d906      	bls.n	800ecc8 <__ssvfscanf_r+0x638>
 800ecba:	0001      	movs	r1, r0
 800ecbc:	6820      	ldr	r0, [r4, #0]
 800ecbe:	f001 ffe1 	bl	8010c84 <realloc>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	d000      	beq.n	800ecc8 <__ssvfscanf_r+0x638>
 800ecc6:	6020      	str	r0, [r4, #0]
 800ecc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecca:	195b      	adds	r3, r3, r5
 800eccc:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	e4f8      	b.n	800e6c6 <__ssvfscanf_r+0x36>
 800ecd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d101      	bne.n	800ecde <__ssvfscanf_r+0x64e>
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecde:	2210      	movs	r2, #16
 800ece0:	2301      	movs	r3, #1
 800ece2:	0034      	movs	r4, r6
 800ece4:	4032      	ands	r2, r6
 800ece6:	401c      	ands	r4, r3
 800ece8:	623a      	str	r2, [r7, #32]
 800ecea:	421e      	tst	r6, r3
 800ecec:	d100      	bne.n	800ecf0 <__ssvfscanf_r+0x660>
 800ecee:	e116      	b.n	800ef1e <__ssvfscanf_r+0x88e>
 800ecf0:	2a00      	cmp	r2, #0
 800ecf2:	d000      	beq.n	800ecf6 <__ssvfscanf_r+0x666>
 800ecf4:	e0b0      	b.n	800ee58 <__ssvfscanf_r+0x7c8>
 800ecf6:	2080      	movs	r0, #128	; 0x80
 800ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfa:	cb10      	ldmia	r3!, {r4}
 800ecfc:	60fb      	str	r3, [r7, #12]
 800ecfe:	4206      	tst	r6, r0
 800ed00:	d100      	bne.n	800ed04 <__ssvfscanf_r+0x674>
 800ed02:	e0b2      	b.n	800ee6a <__ssvfscanf_r+0x7da>
 800ed04:	2c00      	cmp	r4, #0
 800ed06:	d100      	bne.n	800ed0a <__ssvfscanf_r+0x67a>
 800ed08:	e68d      	b.n	800ea26 <__ssvfscanf_r+0x396>
 800ed0a:	f7fb fdf3 	bl	800a8f4 <malloc>
 800ed0e:	6338      	str	r0, [r7, #48]	; 0x30
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d100      	bne.n	800ed16 <__ssvfscanf_r+0x686>
 800ed14:	e684      	b.n	800ea20 <__ssvfscanf_r+0x390>
 800ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed18:	6023      	str	r3, [r4, #0]
 800ed1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed1c:	88de      	ldrh	r6, [r3, #6]
 800ed1e:	889d      	ldrh	r5, [r3, #4]
 800ed20:	42ae      	cmp	r6, r5
 800ed22:	d310      	bcc.n	800ed46 <__ssvfscanf_r+0x6b6>
 800ed24:	4b90      	ldr	r3, [pc, #576]	; (800ef68 <__ssvfscanf_r+0x8d8>)
 800ed26:	429d      	cmp	r5, r3
 800ed28:	d900      	bls.n	800ed2c <__ssvfscanf_r+0x69c>
 800ed2a:	e679      	b.n	800ea20 <__ssvfscanf_r+0x390>
 800ed2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed2e:	3508      	adds	r5, #8
 800ed30:	b2ad      	uxth	r5, r5
 800ed32:	6818      	ldr	r0, [r3, #0]
 800ed34:	00a9      	lsls	r1, r5, #2
 800ed36:	f001 ffa5 	bl	8010c84 <realloc>
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	d100      	bne.n	800ed40 <__ssvfscanf_r+0x6b0>
 800ed3e:	e66f      	b.n	800ea20 <__ssvfscanf_r+0x390>
 800ed40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed42:	6018      	str	r0, [r3, #0]
 800ed44:	809d      	strh	r5, [r3, #4]
 800ed46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed48:	1c72      	adds	r2, r6, #1
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	00b6      	lsls	r6, r6, #2
 800ed4e:	50f4      	str	r4, [r6, r3]
 800ed50:	2320      	movs	r3, #32
 800ed52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed54:	0026      	movs	r6, r4
 800ed56:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ed58:	80ca      	strh	r2, [r1, #6]
 800ed5a:	613b      	str	r3, [r7, #16]
 800ed5c:	2500      	movs	r5, #0
 800ed5e:	f7fd f8a1 	bl	800bea4 <__locale_mb_cur_max>
 800ed62:	42a8      	cmp	r0, r5
 800ed64:	d100      	bne.n	800ed68 <__ssvfscanf_r+0x6d8>
 800ed66:	e562      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800ed68:	1c6a      	adds	r2, r5, #1
 800ed6a:	61fa      	str	r2, [r7, #28]
 800ed6c:	228c      	movs	r2, #140	; 0x8c
 800ed6e:	2048      	movs	r0, #72	; 0x48
 800ed70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed72:	0052      	lsls	r2, r2, #1
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	1812      	adds	r2, r2, r0
 800ed78:	7819      	ldrb	r1, [r3, #0]
 800ed7a:	19d2      	adds	r2, r2, r7
 800ed7c:	5551      	strb	r1, [r2, r5]
 800ed7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed82:	6852      	ldr	r2, [r2, #4]
 800ed84:	3301      	adds	r3, #1
 800ed86:	600b      	str	r3, [r1, #0]
 800ed88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8a:	3a01      	subs	r2, #1
 800ed8c:	604a      	str	r2, [r1, #4]
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d102      	bne.n	800ed98 <__ssvfscanf_r+0x708>
 800ed92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed94:	2b04      	cmp	r3, #4
 800ed96:	d006      	beq.n	800eda6 <__ssvfscanf_r+0x716>
 800ed98:	2048      	movs	r0, #72	; 0x48
 800ed9a:	2208      	movs	r2, #8
 800ed9c:	1813      	adds	r3, r2, r0
 800ed9e:	2100      	movs	r1, #0
 800eda0:	19d8      	adds	r0, r3, r7
 800eda2:	f7fd f83b 	bl	800be1c <memset>
 800eda6:	2148      	movs	r1, #72	; 0x48
 800eda8:	2308      	movs	r3, #8
 800edaa:	228c      	movs	r2, #140	; 0x8c
 800edac:	185b      	adds	r3, r3, r1
 800edae:	0052      	lsls	r2, r2, #1
 800edb0:	19db      	adds	r3, r3, r7
 800edb2:	1852      	adds	r2, r2, r1
 800edb4:	9300      	str	r3, [sp, #0]
 800edb6:	0021      	movs	r1, r4
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edbc:	19d2      	adds	r2, r2, r7
 800edbe:	f002 fafb 	bl	80113b8 <_mbrtowc_r>
 800edc2:	0003      	movs	r3, r0
 800edc4:	62b8      	str	r0, [r7, #40]	; 0x28
 800edc6:	3301      	adds	r3, #1
 800edc8:	d100      	bne.n	800edcc <__ssvfscanf_r+0x73c>
 800edca:	e530      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800edcc:	2800      	cmp	r0, #0
 800edce:	d151      	bne.n	800ee74 <__ssvfscanf_r+0x7e4>
 800edd0:	6020      	str	r0, [r4, #0]
 800edd2:	2301      	movs	r3, #1
 800edd4:	6825      	ldr	r5, [r4, #0]
 800edd6:	425b      	negs	r3, r3
 800edd8:	1c6a      	adds	r2, r5, #1
 800edda:	d01a      	beq.n	800ee12 <__ssvfscanf_r+0x782>
 800eddc:	2048      	movs	r0, #72	; 0x48
 800edde:	3311      	adds	r3, #17
 800ede0:	181b      	adds	r3, r3, r0
 800ede2:	2208      	movs	r2, #8
 800ede4:	2100      	movs	r1, #0
 800ede6:	19d8      	adds	r0, r3, r7
 800ede8:	f7fd f818 	bl	800be1c <memset>
 800edec:	4b5f      	ldr	r3, [pc, #380]	; (800ef6c <__ssvfscanf_r+0x8dc>)
 800edee:	2148      	movs	r1, #72	; 0x48
 800edf0:	33e0      	adds	r3, #224	; 0xe0
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	2310      	movs	r3, #16
 800edf6:	4694      	mov	ip, r2
 800edf8:	185b      	adds	r3, r3, r1
 800edfa:	002a      	movs	r2, r5
 800edfc:	19db      	adds	r3, r3, r7
 800edfe:	4665      	mov	r5, ip
 800ee00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee02:	1879      	adds	r1, r7, r1
 800ee04:	47a8      	blx	r5
 800ee06:	2300      	movs	r3, #0
 800ee08:	2801      	cmp	r0, #1
 800ee0a:	d102      	bne.n	800ee12 <__ssvfscanf_r+0x782>
 800ee0c:	3348      	adds	r3, #72	; 0x48
 800ee0e:	18fb      	adds	r3, r7, r3
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	2218      	movs	r2, #24
 800ee14:	2148      	movs	r1, #72	; 0x48
 800ee16:	1852      	adds	r2, r2, r1
 800ee18:	19d2      	adds	r2, r2, r7
 800ee1a:	5cd3      	ldrb	r3, [r2, r3]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d149      	bne.n	800eeb4 <__ssvfscanf_r+0x824>
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d137      	bne.n	800ee96 <__ssvfscanf_r+0x806>
 800ee26:	6a3b      	ldr	r3, [r7, #32]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d113      	bne.n	800ee54 <__ssvfscanf_r+0x7c4>
 800ee2c:	6023      	str	r3, [r4, #0]
 800ee2e:	2e00      	cmp	r6, #0
 800ee30:	d00d      	beq.n	800ee4e <__ssvfscanf_r+0x7be>
 800ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee34:	693a      	ldr	r2, [r7, #16]
 800ee36:	1ae4      	subs	r4, r4, r3
 800ee38:	10a3      	asrs	r3, r4, #2
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d906      	bls.n	800ee4e <__ssvfscanf_r+0x7be>
 800ee40:	6830      	ldr	r0, [r6, #0]
 800ee42:	1d21      	adds	r1, r4, #4
 800ee44:	f001 ff1e 	bl	8010c84 <realloc>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d000      	beq.n	800ee4e <__ssvfscanf_r+0x7be>
 800ee4c:	6030      	str	r0, [r6, #0]
 800ee4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee50:	3301      	adds	r3, #1
 800ee52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	e593      	b.n	800e980 <__ssvfscanf_r+0x2f0>
 800ee58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5a:	60fb      	str	r3, [r7, #12]
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	001e      	movs	r6, r3
 800ee60:	613b      	str	r3, [r7, #16]
 800ee62:	633b      	str	r3, [r7, #48]	; 0x30
 800ee64:	334c      	adds	r3, #76	; 0x4c
 800ee66:	18fc      	adds	r4, r7, r3
 800ee68:	e778      	b.n	800ed5c <__ssvfscanf_r+0x6cc>
 800ee6a:	6a3b      	ldr	r3, [r7, #32]
 800ee6c:	001e      	movs	r6, r3
 800ee6e:	613b      	str	r3, [r7, #16]
 800ee70:	633b      	str	r3, [r7, #48]	; 0x30
 800ee72:	e773      	b.n	800ed5c <__ssvfscanf_r+0x6cc>
 800ee74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee76:	69fd      	ldr	r5, [r7, #28]
 800ee78:	3302      	adds	r3, #2
 800ee7a:	d1aa      	bne.n	800edd2 <__ssvfscanf_r+0x742>
 800ee7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	dc47      	bgt.n	800ef14 <__ssvfscanf_r+0x884>
 800ee84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee88:	f002 fb96 	bl	80115b8 <__ssrefill_r>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d041      	beq.n	800ef14 <__ssvfscanf_r+0x884>
 800ee90:	2d00      	cmp	r5, #0
 800ee92:	d0c8      	beq.n	800ee26 <__ssvfscanf_r+0x796>
 800ee94:	e4cb      	b.n	800e82e <__ssvfscanf_r+0x19e>
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	2248      	movs	r2, #72	; 0x48
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	61fb      	str	r3, [r7, #28]
 800ee9e:	238c      	movs	r3, #140	; 0x8c
 800eea0:	005b      	lsls	r3, r3, #1
 800eea2:	189b      	adds	r3, r3, r2
 800eea4:	69fa      	ldr	r2, [r7, #28]
 800eea6:	19db      	adds	r3, r3, r7
 800eea8:	5cd1      	ldrb	r1, [r2, r3]
 800eeaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eeac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eeae:	f002 fb47 	bl	8011540 <_sungetc_r>
 800eeb2:	e7b5      	b.n	800ee20 <__ssvfscanf_r+0x790>
 800eeb4:	69fa      	ldr	r2, [r7, #28]
 800eeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb8:	4694      	mov	ip, r2
 800eeba:	4463      	add	r3, ip
 800eebc:	63bb      	str	r3, [r7, #56]	; 0x38
 800eebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec0:	2b03      	cmp	r3, #3
 800eec2:	d102      	bne.n	800eeca <__ssvfscanf_r+0x83a>
 800eec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eec6:	2b04      	cmp	r3, #4
 800eec8:	d002      	beq.n	800eed0 <__ssvfscanf_r+0x840>
 800eeca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eecc:	3b01      	subs	r3, #1
 800eece:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eed0:	6a3b      	ldr	r3, [r7, #32]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d11a      	bne.n	800ef0c <__ssvfscanf_r+0x87c>
 800eed6:	3404      	adds	r4, #4
 800eed8:	2e00      	cmp	r6, #0
 800eeda:	d019      	beq.n	800ef10 <__ssvfscanf_r+0x880>
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	693a      	ldr	r2, [r7, #16]
 800eee0:	1ae3      	subs	r3, r4, r3
 800eee2:	61fb      	str	r3, [r7, #28]
 800eee4:	6a3d      	ldr	r5, [r7, #32]
 800eee6:	109b      	asrs	r3, r3, #2
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d3c7      	bcc.n	800ee7c <__ssvfscanf_r+0x7ec>
 800eeec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeee:	00d1      	lsls	r1, r2, #3
 800eef0:	f001 fec8 	bl	8010c84 <realloc>
 800eef4:	6338      	str	r0, [r7, #48]	; 0x30
 800eef6:	2800      	cmp	r0, #0
 800eef8:	d100      	bne.n	800eefc <__ssvfscanf_r+0x86c>
 800eefa:	e591      	b.n	800ea20 <__ssvfscanf_r+0x390>
 800eefc:	4684      	mov	ip, r0
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	69fc      	ldr	r4, [r7, #28]
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	4464      	add	r4, ip
 800ef06:	6030      	str	r0, [r6, #0]
 800ef08:	613b      	str	r3, [r7, #16]
 800ef0a:	e7b7      	b.n	800ee7c <__ssvfscanf_r+0x7ec>
 800ef0c:	2500      	movs	r5, #0
 800ef0e:	e7b5      	b.n	800ee7c <__ssvfscanf_r+0x7ec>
 800ef10:	0035      	movs	r5, r6
 800ef12:	e7b3      	b.n	800ee7c <__ssvfscanf_r+0x7ec>
 800ef14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d000      	beq.n	800ef1c <__ssvfscanf_r+0x88c>
 800ef1a:	e720      	b.n	800ed5e <__ssvfscanf_r+0x6ce>
 800ef1c:	e783      	b.n	800ee26 <__ssvfscanf_r+0x796>
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d025      	beq.n	800ef70 <__ssvfscanf_r+0x8e0>
 800ef24:	2118      	movs	r1, #24
 800ef26:	2048      	movs	r0, #72	; 0x48
 800ef28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef2a:	1809      	adds	r1, r1, r0
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	19c9      	adds	r1, r1, r7
 800ef30:	781a      	ldrb	r2, [r3, #0]
 800ef32:	5c8a      	ldrb	r2, [r1, r2]
 800ef34:	2a00      	cmp	r2, #0
 800ef36:	d103      	bne.n	800ef40 <__ssvfscanf_r+0x8b0>
 800ef38:	2c00      	cmp	r4, #0
 800ef3a:	d000      	beq.n	800ef3e <__ssvfscanf_r+0x8ae>
 800ef3c:	e66c      	b.n	800ec18 <__ssvfscanf_r+0x588>
 800ef3e:	e4a4      	b.n	800e88a <__ssvfscanf_r+0x1fa>
 800ef40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef44:	6852      	ldr	r2, [r2, #4]
 800ef46:	3301      	adds	r3, #1
 800ef48:	600b      	str	r3, [r1, #0]
 800ef4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef4c:	3a01      	subs	r2, #1
 800ef4e:	3401      	adds	r4, #1
 800ef50:	604a      	str	r2, [r1, #4]
 800ef52:	429c      	cmp	r4, r3
 800ef54:	d100      	bne.n	800ef58 <__ssvfscanf_r+0x8c8>
 800ef56:	e65f      	b.n	800ec18 <__ssvfscanf_r+0x588>
 800ef58:	2a00      	cmp	r2, #0
 800ef5a:	dce3      	bgt.n	800ef24 <__ssvfscanf_r+0x894>
 800ef5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef5e:	f002 fb2b 	bl	80115b8 <__ssrefill_r>
 800ef62:	2800      	cmp	r0, #0
 800ef64:	d0de      	beq.n	800ef24 <__ssvfscanf_r+0x894>
 800ef66:	e657      	b.n	800ec18 <__ssvfscanf_r+0x588>
 800ef68:	0000fff6 	.word	0x0000fff6
 800ef6c:	20000448 	.word	0x20000448
 800ef70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef72:	0032      	movs	r2, r6
 800ef74:	cb20      	ldmia	r3!, {r5}
 800ef76:	61fb      	str	r3, [r7, #28]
 800ef78:	2380      	movs	r3, #128	; 0x80
 800ef7a:	401a      	ands	r2, r3
 800ef7c:	421e      	tst	r6, r3
 800ef7e:	d100      	bne.n	800ef82 <__ssvfscanf_r+0x8f2>
 800ef80:	e086      	b.n	800f090 <__ssvfscanf_r+0xa00>
 800ef82:	2d00      	cmp	r5, #0
 800ef84:	d100      	bne.n	800ef88 <__ssvfscanf_r+0x8f8>
 800ef86:	e480      	b.n	800e88a <__ssvfscanf_r+0x1fa>
 800ef88:	2020      	movs	r0, #32
 800ef8a:	f7fb fcb3 	bl	800a8f4 <malloc>
 800ef8e:	6338      	str	r0, [r7, #48]	; 0x30
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d100      	bne.n	800ef96 <__ssvfscanf_r+0x906>
 800ef94:	e452      	b.n	800e83c <__ssvfscanf_r+0x1ac>
 800ef96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef98:	6028      	str	r0, [r5, #0]
 800ef9a:	88de      	ldrh	r6, [r3, #6]
 800ef9c:	889c      	ldrh	r4, [r3, #4]
 800ef9e:	6818      	ldr	r0, [r3, #0]
 800efa0:	42a6      	cmp	r6, r4
 800efa2:	d30e      	bcc.n	800efc2 <__ssvfscanf_r+0x932>
 800efa4:	4bc3      	ldr	r3, [pc, #780]	; (800f2b4 <__ssvfscanf_r+0xc24>)
 800efa6:	429c      	cmp	r4, r3
 800efa8:	d900      	bls.n	800efac <__ssvfscanf_r+0x91c>
 800efaa:	e542      	b.n	800ea32 <__ssvfscanf_r+0x3a2>
 800efac:	3408      	adds	r4, #8
 800efae:	b2a4      	uxth	r4, r4
 800efb0:	00a1      	lsls	r1, r4, #2
 800efb2:	f001 fe67 	bl	8010c84 <realloc>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d100      	bne.n	800efbc <__ssvfscanf_r+0x92c>
 800efba:	e53a      	b.n	800ea32 <__ssvfscanf_r+0x3a2>
 800efbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efbe:	6018      	str	r0, [r3, #0]
 800efc0:	809c      	strh	r4, [r3, #4]
 800efc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efc4:	1c72      	adds	r2, r6, #1
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	00b6      	lsls	r6, r6, #2
 800efca:	50f5      	str	r5, [r6, r3]
 800efcc:	2320      	movs	r3, #32
 800efce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efd0:	002e      	movs	r6, r5
 800efd2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800efd4:	80ca      	strh	r2, [r1, #6]
 800efd6:	623b      	str	r3, [r7, #32]
 800efd8:	002c      	movs	r4, r5
 800efda:	2118      	movs	r1, #24
 800efdc:	2048      	movs	r0, #72	; 0x48
 800efde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efe0:	1809      	adds	r1, r1, r0
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	19c9      	adds	r1, r1, r7
 800efe6:	781a      	ldrb	r2, [r3, #0]
 800efe8:	5c8a      	ldrb	r2, [r1, r2]
 800efea:	2a00      	cmp	r2, #0
 800efec:	d101      	bne.n	800eff2 <__ssvfscanf_r+0x962>
 800efee:	633d      	str	r5, [r7, #48]	; 0x30
 800eff0:	e031      	b.n	800f056 <__ssvfscanf_r+0x9c6>
 800eff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eff4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eff6:	6852      	ldr	r2, [r2, #4]
 800eff8:	3a01      	subs	r2, #1
 800effa:	604a      	str	r2, [r1, #4]
 800effc:	1c5a      	adds	r2, r3, #1
 800effe:	600a      	str	r2, [r1, #0]
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	1c6a      	adds	r2, r5, #1
 800f004:	633a      	str	r2, [r7, #48]	; 0x30
 800f006:	702b      	strb	r3, [r5, #0]
 800f008:	2e00      	cmp	r6, #0
 800f00a:	d010      	beq.n	800f02e <__ssvfscanf_r+0x99e>
 800f00c:	6a3b      	ldr	r3, [r7, #32]
 800f00e:	1b15      	subs	r5, r2, r4
 800f010:	429d      	cmp	r5, r3
 800f012:	d30c      	bcc.n	800f02e <__ssvfscanf_r+0x99e>
 800f014:	005b      	lsls	r3, r3, #1
 800f016:	0020      	movs	r0, r4
 800f018:	0019      	movs	r1, r3
 800f01a:	623b      	str	r3, [r7, #32]
 800f01c:	f001 fe32 	bl	8010c84 <realloc>
 800f020:	1e04      	subs	r4, r0, #0
 800f022:	d101      	bne.n	800f028 <__ssvfscanf_r+0x998>
 800f024:	f7ff fc0a 	bl	800e83c <__ssvfscanf_r+0x1ac>
 800f028:	1943      	adds	r3, r0, r5
 800f02a:	633b      	str	r3, [r7, #48]	; 0x30
 800f02c:	6030      	str	r0, [r6, #0]
 800f02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f030:	3b01      	subs	r3, #1
 800f032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f034:	2b00      	cmp	r3, #0
 800f036:	d00e      	beq.n	800f056 <__ssvfscanf_r+0x9c6>
 800f038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	dc2a      	bgt.n	800f096 <__ssvfscanf_r+0xa06>
 800f040:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f042:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f044:	f002 fab8 	bl	80115b8 <__ssrefill_r>
 800f048:	2800      	cmp	r0, #0
 800f04a:	d024      	beq.n	800f096 <__ssvfscanf_r+0xa06>
 800f04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04e:	42a3      	cmp	r3, r4
 800f050:	d101      	bne.n	800f056 <__ssvfscanf_r+0x9c6>
 800f052:	f7ff fbec 	bl	800e82e <__ssvfscanf_r+0x19e>
 800f056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f058:	1b1d      	subs	r5, r3, r4
 800f05a:	42a3      	cmp	r3, r4
 800f05c:	d101      	bne.n	800f062 <__ssvfscanf_r+0x9d2>
 800f05e:	f7ff fc14 	bl	800e88a <__ssvfscanf_r+0x1fa>
 800f062:	2300      	movs	r3, #0
 800f064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f066:	7013      	strb	r3, [r2, #0]
 800f068:	429e      	cmp	r6, r3
 800f06a:	d009      	beq.n	800f080 <__ssvfscanf_r+0x9f0>
 800f06c:	6a3b      	ldr	r3, [r7, #32]
 800f06e:	1c69      	adds	r1, r5, #1
 800f070:	428b      	cmp	r3, r1
 800f072:	d905      	bls.n	800f080 <__ssvfscanf_r+0x9f0>
 800f074:	6830      	ldr	r0, [r6, #0]
 800f076:	f001 fe05 	bl	8010c84 <realloc>
 800f07a:	2800      	cmp	r0, #0
 800f07c:	d000      	beq.n	800f080 <__ssvfscanf_r+0x9f0>
 800f07e:	6030      	str	r0, [r6, #0]
 800f080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f082:	3301      	adds	r3, #1
 800f084:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f088:	195b      	adds	r3, r3, r5
 800f08a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	e477      	b.n	800e980 <__ssvfscanf_r+0x2f0>
 800f090:	0016      	movs	r6, r2
 800f092:	623a      	str	r2, [r7, #32]
 800f094:	e7a0      	b.n	800efd8 <__ssvfscanf_r+0x948>
 800f096:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f098:	e79f      	b.n	800efda <__ssvfscanf_r+0x94a>
 800f09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <__ssvfscanf_r+0xa14>
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0a4:	2210      	movs	r2, #16
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	0034      	movs	r4, r6
 800f0aa:	4032      	ands	r2, r6
 800f0ac:	401c      	ands	r4, r3
 800f0ae:	61fa      	str	r2, [r7, #28]
 800f0b0:	421e      	tst	r6, r3
 800f0b2:	d100      	bne.n	800f0b6 <__ssvfscanf_r+0xa26>
 800f0b4:	e102      	b.n	800f2bc <__ssvfscanf_r+0xc2c>
 800f0b6:	2a00      	cmp	r2, #0
 800f0b8:	d000      	beq.n	800f0bc <__ssvfscanf_r+0xa2c>
 800f0ba:	e09f      	b.n	800f1fc <__ssvfscanf_r+0xb6c>
 800f0bc:	2080      	movs	r0, #128	; 0x80
 800f0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c0:	cb10      	ldmia	r3!, {r4}
 800f0c2:	60fb      	str	r3, [r7, #12]
 800f0c4:	4206      	tst	r6, r0
 800f0c6:	d100      	bne.n	800f0ca <__ssvfscanf_r+0xa3a>
 800f0c8:	e0a1      	b.n	800f20e <__ssvfscanf_r+0xb7e>
 800f0ca:	2c00      	cmp	r4, #0
 800f0cc:	d100      	bne.n	800f0d0 <__ssvfscanf_r+0xa40>
 800f0ce:	e4aa      	b.n	800ea26 <__ssvfscanf_r+0x396>
 800f0d0:	f7fb fc10 	bl	800a8f4 <malloc>
 800f0d4:	6338      	str	r0, [r7, #48]	; 0x30
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d100      	bne.n	800f0dc <__ssvfscanf_r+0xa4c>
 800f0da:	e4a1      	b.n	800ea20 <__ssvfscanf_r+0x390>
 800f0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0de:	6023      	str	r3, [r4, #0]
 800f0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0e2:	88de      	ldrh	r6, [r3, #6]
 800f0e4:	889d      	ldrh	r5, [r3, #4]
 800f0e6:	42ae      	cmp	r6, r5
 800f0e8:	d310      	bcc.n	800f10c <__ssvfscanf_r+0xa7c>
 800f0ea:	4b72      	ldr	r3, [pc, #456]	; (800f2b4 <__ssvfscanf_r+0xc24>)
 800f0ec:	429d      	cmp	r5, r3
 800f0ee:	d900      	bls.n	800f0f2 <__ssvfscanf_r+0xa62>
 800f0f0:	e496      	b.n	800ea20 <__ssvfscanf_r+0x390>
 800f0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0f4:	3508      	adds	r5, #8
 800f0f6:	b2ad      	uxth	r5, r5
 800f0f8:	6818      	ldr	r0, [r3, #0]
 800f0fa:	00a9      	lsls	r1, r5, #2
 800f0fc:	f001 fdc2 	bl	8010c84 <realloc>
 800f100:	2800      	cmp	r0, #0
 800f102:	d100      	bne.n	800f106 <__ssvfscanf_r+0xa76>
 800f104:	e48c      	b.n	800ea20 <__ssvfscanf_r+0x390>
 800f106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f108:	6018      	str	r0, [r3, #0]
 800f10a:	809d      	strh	r5, [r3, #4]
 800f10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f10e:	1c72      	adds	r2, r6, #1
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	00b6      	lsls	r6, r6, #2
 800f114:	50f4      	str	r4, [r6, r3]
 800f116:	2320      	movs	r3, #32
 800f118:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f11a:	0025      	movs	r5, r4
 800f11c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f11e:	80ca      	strh	r2, [r1, #6]
 800f120:	613b      	str	r3, [r7, #16]
 800f122:	2300      	movs	r3, #0
 800f124:	623b      	str	r3, [r7, #32]
 800f126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f128:	4a63      	ldr	r2, [pc, #396]	; (800f2b8 <__ssvfscanf_r+0xc28>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	5cd3      	ldrb	r3, [r2, r3]
 800f130:	2208      	movs	r2, #8
 800f132:	4213      	tst	r3, r2
 800f134:	d149      	bne.n	800f1ca <__ssvfscanf_r+0xb3a>
 800f136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d046      	beq.n	800f1ca <__ssvfscanf_r+0xb3a>
 800f13c:	f7fc feb2 	bl	800bea4 <__locale_mb_cur_max>
 800f140:	6a3b      	ldr	r3, [r7, #32]
 800f142:	4298      	cmp	r0, r3
 800f144:	d101      	bne.n	800f14a <__ssvfscanf_r+0xaba>
 800f146:	f7ff fb72 	bl	800e82e <__ssvfscanf_r+0x19e>
 800f14a:	6a3a      	ldr	r2, [r7, #32]
 800f14c:	2048      	movs	r0, #72	; 0x48
 800f14e:	1c56      	adds	r6, r2, #1
 800f150:	228c      	movs	r2, #140	; 0x8c
 800f152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f154:	0052      	lsls	r2, r2, #1
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	1812      	adds	r2, r2, r0
 800f15a:	7819      	ldrb	r1, [r3, #0]
 800f15c:	6a38      	ldr	r0, [r7, #32]
 800f15e:	19d2      	adds	r2, r2, r7
 800f160:	5411      	strb	r1, [r2, r0]
 800f162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f164:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f166:	6852      	ldr	r2, [r2, #4]
 800f168:	3301      	adds	r3, #1
 800f16a:	600b      	str	r3, [r1, #0]
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	3a01      	subs	r2, #1
 800f170:	604a      	str	r2, [r1, #4]
 800f172:	2b03      	cmp	r3, #3
 800f174:	d102      	bne.n	800f17c <__ssvfscanf_r+0xaec>
 800f176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f178:	2b04      	cmp	r3, #4
 800f17a:	d007      	beq.n	800f18c <__ssvfscanf_r+0xafc>
 800f17c:	2048      	movs	r0, #72	; 0x48
 800f17e:	2310      	movs	r3, #16
 800f180:	181b      	adds	r3, r3, r0
 800f182:	2208      	movs	r2, #8
 800f184:	2100      	movs	r1, #0
 800f186:	19d8      	adds	r0, r3, r7
 800f188:	f7fc fe48 	bl	800be1c <memset>
 800f18c:	2148      	movs	r1, #72	; 0x48
 800f18e:	2310      	movs	r3, #16
 800f190:	228c      	movs	r2, #140	; 0x8c
 800f192:	185b      	adds	r3, r3, r1
 800f194:	0052      	lsls	r2, r2, #1
 800f196:	19db      	adds	r3, r3, r7
 800f198:	1852      	adds	r2, r2, r1
 800f19a:	9300      	str	r3, [sp, #0]
 800f19c:	0021      	movs	r1, r4
 800f19e:	0033      	movs	r3, r6
 800f1a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1a2:	19d2      	adds	r2, r2, r7
 800f1a4:	f002 f908 	bl	80113b8 <_mbrtowc_r>
 800f1a8:	0003      	movs	r3, r0
 800f1aa:	62b8      	str	r0, [r7, #40]	; 0x28
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	d101      	bne.n	800f1b4 <__ssvfscanf_r+0xb24>
 800f1b0:	f7ff fb3d 	bl	800e82e <__ssvfscanf_r+0x19e>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d12f      	bne.n	800f218 <__ssvfscanf_r+0xb88>
 800f1b8:	6020      	str	r0, [r4, #0]
 800f1ba:	6820      	ldr	r0, [r4, #0]
 800f1bc:	f002 f91a 	bl	80113f4 <iswspace>
 800f1c0:	6238      	str	r0, [r7, #32]
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	d04a      	beq.n	800f25c <__ssvfscanf_r+0xbcc>
 800f1c6:	2e00      	cmp	r6, #0
 800f1c8:	d13c      	bne.n	800f244 <__ssvfscanf_r+0xbb4>
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d000      	beq.n	800f1d2 <__ssvfscanf_r+0xb42>
 800f1d0:	e640      	b.n	800ee54 <__ssvfscanf_r+0x7c4>
 800f1d2:	6023      	str	r3, [r4, #0]
 800f1d4:	2d00      	cmp	r5, #0
 800f1d6:	d100      	bne.n	800f1da <__ssvfscanf_r+0xb4a>
 800f1d8:	e639      	b.n	800ee4e <__ssvfscanf_r+0x7be>
 800f1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	1ae4      	subs	r4, r4, r3
 800f1e0:	10a3      	asrs	r3, r4, #2
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d800      	bhi.n	800f1ea <__ssvfscanf_r+0xb5a>
 800f1e8:	e631      	b.n	800ee4e <__ssvfscanf_r+0x7be>
 800f1ea:	6828      	ldr	r0, [r5, #0]
 800f1ec:	1d21      	adds	r1, r4, #4
 800f1ee:	f001 fd49 	bl	8010c84 <realloc>
 800f1f2:	2800      	cmp	r0, #0
 800f1f4:	d100      	bne.n	800f1f8 <__ssvfscanf_r+0xb68>
 800f1f6:	e62a      	b.n	800ee4e <__ssvfscanf_r+0x7be>
 800f1f8:	6028      	str	r0, [r5, #0]
 800f1fa:	e628      	b.n	800ee4e <__ssvfscanf_r+0x7be>
 800f1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fe:	60fb      	str	r3, [r7, #12]
 800f200:	2300      	movs	r3, #0
 800f202:	001d      	movs	r5, r3
 800f204:	613b      	str	r3, [r7, #16]
 800f206:	633b      	str	r3, [r7, #48]	; 0x30
 800f208:	334c      	adds	r3, #76	; 0x4c
 800f20a:	18fc      	adds	r4, r7, r3
 800f20c:	e789      	b.n	800f122 <__ssvfscanf_r+0xa92>
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	001d      	movs	r5, r3
 800f212:	613b      	str	r3, [r7, #16]
 800f214:	633b      	str	r3, [r7, #48]	; 0x30
 800f216:	e784      	b.n	800f122 <__ssvfscanf_r+0xa92>
 800f218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21a:	623e      	str	r6, [r7, #32]
 800f21c:	3302      	adds	r3, #2
 800f21e:	d1cc      	bne.n	800f1ba <__ssvfscanf_r+0xb2a>
 800f220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	2b00      	cmp	r3, #0
 800f226:	dd00      	ble.n	800f22a <__ssvfscanf_r+0xb9a>
 800f228:	e77d      	b.n	800f126 <__ssvfscanf_r+0xa96>
 800f22a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f22c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f22e:	f002 f9c3 	bl	80115b8 <__ssrefill_r>
 800f232:	2800      	cmp	r0, #0
 800f234:	d100      	bne.n	800f238 <__ssvfscanf_r+0xba8>
 800f236:	e776      	b.n	800f126 <__ssvfscanf_r+0xa96>
 800f238:	6a3b      	ldr	r3, [r7, #32]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d001      	beq.n	800f242 <__ssvfscanf_r+0xbb2>
 800f23e:	f7ff faf6 	bl	800e82e <__ssvfscanf_r+0x19e>
 800f242:	e7c2      	b.n	800f1ca <__ssvfscanf_r+0xb3a>
 800f244:	238c      	movs	r3, #140	; 0x8c
 800f246:	2248      	movs	r2, #72	; 0x48
 800f248:	005b      	lsls	r3, r3, #1
 800f24a:	189b      	adds	r3, r3, r2
 800f24c:	3e01      	subs	r6, #1
 800f24e:	19db      	adds	r3, r3, r7
 800f250:	5cf1      	ldrb	r1, [r6, r3]
 800f252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f254:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f256:	f002 f973 	bl	8011540 <_sungetc_r>
 800f25a:	e7b4      	b.n	800f1c6 <__ssvfscanf_r+0xb36>
 800f25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25e:	199b      	adds	r3, r3, r6
 800f260:	63bb      	str	r3, [r7, #56]	; 0x38
 800f262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f264:	2b03      	cmp	r3, #3
 800f266:	d102      	bne.n	800f26e <__ssvfscanf_r+0xbde>
 800f268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f26a:	2b04      	cmp	r3, #4
 800f26c:	d002      	beq.n	800f274 <__ssvfscanf_r+0xbe4>
 800f26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f270:	3b01      	subs	r3, #1
 800f272:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1d2      	bne.n	800f220 <__ssvfscanf_r+0xb90>
 800f27a:	3404      	adds	r4, #4
 800f27c:	2d00      	cmp	r5, #0
 800f27e:	d016      	beq.n	800f2ae <__ssvfscanf_r+0xc1e>
 800f280:	69fa      	ldr	r2, [r7, #28]
 800f282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f284:	623a      	str	r2, [r7, #32]
 800f286:	693a      	ldr	r2, [r7, #16]
 800f288:	1ae6      	subs	r6, r4, r3
 800f28a:	10b3      	asrs	r3, r6, #2
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d3c7      	bcc.n	800f220 <__ssvfscanf_r+0xb90>
 800f290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f292:	00d1      	lsls	r1, r2, #3
 800f294:	f001 fcf6 	bl	8010c84 <realloc>
 800f298:	6338      	str	r0, [r7, #48]	; 0x30
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d101      	bne.n	800f2a2 <__ssvfscanf_r+0xc12>
 800f29e:	f7ff fbbf 	bl	800ea20 <__ssvfscanf_r+0x390>
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	1984      	adds	r4, r0, r6
 800f2a6:	005b      	lsls	r3, r3, #1
 800f2a8:	6028      	str	r0, [r5, #0]
 800f2aa:	613b      	str	r3, [r7, #16]
 800f2ac:	e7b8      	b.n	800f220 <__ssvfscanf_r+0xb90>
 800f2ae:	623d      	str	r5, [r7, #32]
 800f2b0:	e7b6      	b.n	800f220 <__ssvfscanf_r+0xb90>
 800f2b2:	46c0      	nop			; (mov r8, r8)
 800f2b4:	0000fff6 	.word	0x0000fff6
 800f2b8:	08014379 	.word	0x08014379
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d01c      	beq.n	800f2fc <__ssvfscanf_r+0xc6c>
 800f2c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c4:	49bf      	ldr	r1, [pc, #764]	; (800f5c4 <__ssvfscanf_r+0xf34>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	781a      	ldrb	r2, [r3, #0]
 800f2ca:	5c8a      	ldrb	r2, [r1, r2]
 800f2cc:	2108      	movs	r1, #8
 800f2ce:	420a      	tst	r2, r1
 800f2d0:	d000      	beq.n	800f2d4 <__ssvfscanf_r+0xc44>
 800f2d2:	e4a1      	b.n	800ec18 <__ssvfscanf_r+0x588>
 800f2d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2d8:	6852      	ldr	r2, [r2, #4]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	600b      	str	r3, [r1, #0]
 800f2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e0:	3a01      	subs	r2, #1
 800f2e2:	3401      	adds	r4, #1
 800f2e4:	604a      	str	r2, [r1, #4]
 800f2e6:	429c      	cmp	r4, r3
 800f2e8:	d100      	bne.n	800f2ec <__ssvfscanf_r+0xc5c>
 800f2ea:	e495      	b.n	800ec18 <__ssvfscanf_r+0x588>
 800f2ec:	2a00      	cmp	r2, #0
 800f2ee:	dce8      	bgt.n	800f2c2 <__ssvfscanf_r+0xc32>
 800f2f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2f2:	f002 f961 	bl	80115b8 <__ssrefill_r>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d0e3      	beq.n	800f2c2 <__ssvfscanf_r+0xc32>
 800f2fa:	e48d      	b.n	800ec18 <__ssvfscanf_r+0x588>
 800f2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fe:	0032      	movs	r2, r6
 800f300:	cb10      	ldmia	r3!, {r4}
 800f302:	61fb      	str	r3, [r7, #28]
 800f304:	2380      	movs	r3, #128	; 0x80
 800f306:	401a      	ands	r2, r3
 800f308:	421e      	tst	r6, r3
 800f30a:	d039      	beq.n	800f380 <__ssvfscanf_r+0xcf0>
 800f30c:	2c00      	cmp	r4, #0
 800f30e:	d101      	bne.n	800f314 <__ssvfscanf_r+0xc84>
 800f310:	f7ff fabb 	bl	800e88a <__ssvfscanf_r+0x1fa>
 800f314:	2020      	movs	r0, #32
 800f316:	f7fb faed 	bl	800a8f4 <malloc>
 800f31a:	6338      	str	r0, [r7, #48]	; 0x30
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d101      	bne.n	800f324 <__ssvfscanf_r+0xc94>
 800f320:	f7ff fa8c 	bl	800e83c <__ssvfscanf_r+0x1ac>
 800f324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f326:	6020      	str	r0, [r4, #0]
 800f328:	88de      	ldrh	r6, [r3, #6]
 800f32a:	889d      	ldrh	r5, [r3, #4]
 800f32c:	6818      	ldr	r0, [r3, #0]
 800f32e:	42ae      	cmp	r6, r5
 800f330:	d310      	bcc.n	800f354 <__ssvfscanf_r+0xcc4>
 800f332:	4ba5      	ldr	r3, [pc, #660]	; (800f5c8 <__ssvfscanf_r+0xf38>)
 800f334:	429d      	cmp	r5, r3
 800f336:	d901      	bls.n	800f33c <__ssvfscanf_r+0xcac>
 800f338:	f7ff fb7b 	bl	800ea32 <__ssvfscanf_r+0x3a2>
 800f33c:	3508      	adds	r5, #8
 800f33e:	b2ad      	uxth	r5, r5
 800f340:	00a9      	lsls	r1, r5, #2
 800f342:	f001 fc9f 	bl	8010c84 <realloc>
 800f346:	2800      	cmp	r0, #0
 800f348:	d101      	bne.n	800f34e <__ssvfscanf_r+0xcbe>
 800f34a:	f7ff fb72 	bl	800ea32 <__ssvfscanf_r+0x3a2>
 800f34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f350:	6018      	str	r0, [r3, #0]
 800f352:	809d      	strh	r5, [r3, #4]
 800f354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f356:	1c72      	adds	r2, r6, #1
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	00b6      	lsls	r6, r6, #2
 800f35c:	50f4      	str	r4, [r6, r3]
 800f35e:	2320      	movs	r3, #32
 800f360:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f362:	0026      	movs	r6, r4
 800f364:	80ca      	strh	r2, [r1, #6]
 800f366:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f368:	633b      	str	r3, [r7, #48]	; 0x30
 800f36a:	0025      	movs	r5, r4
 800f36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f36e:	4995      	ldr	r1, [pc, #596]	; (800f5c4 <__ssvfscanf_r+0xf34>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	781a      	ldrb	r2, [r3, #0]
 800f374:	5c8a      	ldrb	r2, [r1, r2]
 800f376:	2108      	movs	r1, #8
 800f378:	420a      	tst	r2, r1
 800f37a:	d004      	beq.n	800f386 <__ssvfscanf_r+0xcf6>
 800f37c:	623c      	str	r4, [r7, #32]
 800f37e:	e031      	b.n	800f3e4 <__ssvfscanf_r+0xd54>
 800f380:	0016      	movs	r6, r2
 800f382:	633a      	str	r2, [r7, #48]	; 0x30
 800f384:	e7f1      	b.n	800f36a <__ssvfscanf_r+0xcda>
 800f386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f388:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f38a:	6852      	ldr	r2, [r2, #4]
 800f38c:	3a01      	subs	r2, #1
 800f38e:	604a      	str	r2, [r1, #4]
 800f390:	1c5a      	adds	r2, r3, #1
 800f392:	600a      	str	r2, [r1, #0]
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	1c62      	adds	r2, r4, #1
 800f398:	623a      	str	r2, [r7, #32]
 800f39a:	7023      	strb	r3, [r4, #0]
 800f39c:	2e00      	cmp	r6, #0
 800f39e:	d010      	beq.n	800f3c2 <__ssvfscanf_r+0xd32>
 800f3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a2:	1b54      	subs	r4, r2, r5
 800f3a4:	429c      	cmp	r4, r3
 800f3a6:	d30c      	bcc.n	800f3c2 <__ssvfscanf_r+0xd32>
 800f3a8:	005b      	lsls	r3, r3, #1
 800f3aa:	0028      	movs	r0, r5
 800f3ac:	0019      	movs	r1, r3
 800f3ae:	633b      	str	r3, [r7, #48]	; 0x30
 800f3b0:	f001 fc68 	bl	8010c84 <realloc>
 800f3b4:	1e05      	subs	r5, r0, #0
 800f3b6:	d101      	bne.n	800f3bc <__ssvfscanf_r+0xd2c>
 800f3b8:	f7ff fa40 	bl	800e83c <__ssvfscanf_r+0x1ac>
 800f3bc:	1903      	adds	r3, r0, r4
 800f3be:	623b      	str	r3, [r7, #32]
 800f3c0:	6030      	str	r0, [r6, #0]
 800f3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00b      	beq.n	800f3e4 <__ssvfscanf_r+0xd54>
 800f3cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	dd01      	ble.n	800f3d8 <__ssvfscanf_r+0xd48>
 800f3d4:	6a3c      	ldr	r4, [r7, #32]
 800f3d6:	e7c9      	b.n	800f36c <__ssvfscanf_r+0xcdc>
 800f3d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3dc:	f002 f8ec 	bl	80115b8 <__ssrefill_r>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d0f7      	beq.n	800f3d4 <__ssvfscanf_r+0xd44>
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	6a3a      	ldr	r2, [r7, #32]
 800f3e8:	7013      	strb	r3, [r2, #0]
 800f3ea:	1b55      	subs	r5, r2, r5
 800f3ec:	2e00      	cmp	r6, #0
 800f3ee:	d009      	beq.n	800f404 <__ssvfscanf_r+0xd74>
 800f3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f2:	1c69      	adds	r1, r5, #1
 800f3f4:	428b      	cmp	r3, r1
 800f3f6:	d905      	bls.n	800f404 <__ssvfscanf_r+0xd74>
 800f3f8:	6830      	ldr	r0, [r6, #0]
 800f3fa:	f001 fc43 	bl	8010c84 <realloc>
 800f3fe:	2800      	cmp	r0, #0
 800f400:	d000      	beq.n	800f404 <__ssvfscanf_r+0xd74>
 800f402:	6030      	str	r0, [r6, #0]
 800f404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f406:	195b      	adds	r3, r3, r5
 800f408:	63bb      	str	r3, [r7, #56]	; 0x38
 800f40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40c:	3301      	adds	r3, #1
 800f40e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f410:	e63c      	b.n	800f08c <__ssvfscanf_r+0x9fc>
 800f412:	22ae      	movs	r2, #174	; 0xae
 800f414:	2100      	movs	r1, #0
 800f416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f418:	0052      	lsls	r2, r2, #1
 800f41a:	3b01      	subs	r3, #1
 800f41c:	6239      	str	r1, [r7, #32]
 800f41e:	4293      	cmp	r3, r2
 800f420:	d906      	bls.n	800f430 <__ssvfscanf_r+0xda0>
 800f422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f424:	3b5e      	subs	r3, #94	; 0x5e
 800f426:	3bff      	subs	r3, #255	; 0xff
 800f428:	623b      	str	r3, [r7, #32]
 800f42a:	235e      	movs	r3, #94	; 0x5e
 800f42c:	33ff      	adds	r3, #255	; 0xff
 800f42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f430:	24d8      	movs	r4, #216	; 0xd8
 800f432:	2300      	movs	r3, #0
 800f434:	2248      	movs	r2, #72	; 0x48
 800f436:	0124      	lsls	r4, r4, #4
 800f438:	4334      	orrs	r4, r6
 800f43a:	2680      	movs	r6, #128	; 0x80
 800f43c:	61fb      	str	r3, [r7, #28]
 800f43e:	3319      	adds	r3, #25
 800f440:	33ff      	adds	r3, #255	; 0xff
 800f442:	189b      	adds	r3, r3, r2
 800f444:	19dd      	adds	r5, r3, r7
 800f446:	00b6      	lsls	r6, r6, #2
 800f448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	7813      	ldrb	r3, [r2, #0]
 800f44e:	2b39      	cmp	r3, #57	; 0x39
 800f450:	d80f      	bhi.n	800f472 <__ssvfscanf_r+0xde2>
 800f452:	2b2a      	cmp	r3, #42	; 0x2a
 800f454:	d91b      	bls.n	800f48e <__ssvfscanf_r+0xdfe>
 800f456:	0018      	movs	r0, r3
 800f458:	382b      	subs	r0, #43	; 0x2b
 800f45a:	280e      	cmp	r0, #14
 800f45c:	d817      	bhi.n	800f48e <__ssvfscanf_r+0xdfe>
 800f45e:	f7f0 fe59 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f462:	168f      	.short	0x168f
 800f464:	5416168f 	.word	0x5416168f
 800f468:	80808080 	.word	0x80808080
 800f46c:	87808080 	.word	0x87808080
 800f470:	87          	.byte	0x87
 800f471:	00          	.byte	0x00
 800f472:	2b66      	cmp	r3, #102	; 0x66
 800f474:	d83a      	bhi.n	800f4ec <__ssvfscanf_r+0xe5c>
 800f476:	2b60      	cmp	r3, #96	; 0x60
 800f478:	d803      	bhi.n	800f482 <__ssvfscanf_r+0xdf2>
 800f47a:	2b46      	cmp	r3, #70	; 0x46
 800f47c:	d805      	bhi.n	800f48a <__ssvfscanf_r+0xdfa>
 800f47e:	2b40      	cmp	r3, #64	; 0x40
 800f480:	d905      	bls.n	800f48e <__ssvfscanf_r+0xdfe>
 800f482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f484:	290a      	cmp	r1, #10
 800f486:	dc71      	bgt.n	800f56c <__ssvfscanf_r+0xedc>
 800f488:	e001      	b.n	800f48e <__ssvfscanf_r+0xdfe>
 800f48a:	2b58      	cmp	r3, #88	; 0x58
 800f48c:	d030      	beq.n	800f4f0 <__ssvfscanf_r+0xe60>
 800f48e:	05e3      	lsls	r3, r4, #23
 800f490:	d515      	bpl.n	800f4be <__ssvfscanf_r+0xe2e>
 800f492:	238c      	movs	r3, #140	; 0x8c
 800f494:	2248      	movs	r2, #72	; 0x48
 800f496:	005b      	lsls	r3, r3, #1
 800f498:	189b      	adds	r3, r3, r2
 800f49a:	19db      	adds	r3, r3, r7
 800f49c:	429d      	cmp	r5, r3
 800f49e:	d905      	bls.n	800f4ac <__ssvfscanf_r+0xe1c>
 800f4a0:	3d01      	subs	r5, #1
 800f4a2:	7829      	ldrb	r1, [r5, #0]
 800f4a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4a8:	f002 f84a 	bl	8011540 <_sungetc_r>
 800f4ac:	238c      	movs	r3, #140	; 0x8c
 800f4ae:	2248      	movs	r2, #72	; 0x48
 800f4b0:	005b      	lsls	r3, r3, #1
 800f4b2:	189b      	adds	r3, r3, r2
 800f4b4:	19db      	adds	r3, r3, r7
 800f4b6:	429d      	cmp	r5, r3
 800f4b8:	d101      	bne.n	800f4be <__ssvfscanf_r+0xe2e>
 800f4ba:	f7ff f9e6 	bl	800e88a <__ssvfscanf_r+0x1fa>
 800f4be:	2310      	movs	r3, #16
 800f4c0:	0022      	movs	r2, r4
 800f4c2:	401a      	ands	r2, r3
 800f4c4:	421c      	tst	r4, r3
 800f4c6:	d171      	bne.n	800f5ac <__ssvfscanf_r+0xf1c>
 800f4c8:	218c      	movs	r1, #140	; 0x8c
 800f4ca:	2048      	movs	r0, #72	; 0x48
 800f4cc:	0049      	lsls	r1, r1, #1
 800f4ce:	1809      	adds	r1, r1, r0
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	697e      	ldr	r6, [r7, #20]
 800f4d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4d6:	19c9      	adds	r1, r1, r7
 800f4d8:	702a      	strb	r2, [r5, #0]
 800f4da:	47b0      	blx	r6
 800f4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4de:	1d1e      	adds	r6, r3, #4
 800f4e0:	06a3      	lsls	r3, r4, #26
 800f4e2:	d559      	bpl.n	800f598 <__ssvfscanf_r+0xf08>
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	6018      	str	r0, [r3, #0]
 800f4ea:	e05b      	b.n	800f5a4 <__ssvfscanf_r+0xf14>
 800f4ec:	2b78      	cmp	r3, #120	; 0x78
 800f4ee:	d1ce      	bne.n	800f48e <__ssvfscanf_r+0xdfe>
 800f4f0:	21c0      	movs	r1, #192	; 0xc0
 800f4f2:	00c9      	lsls	r1, r1, #3
 800f4f4:	4021      	ands	r1, r4
 800f4f6:	42b1      	cmp	r1, r6
 800f4f8:	d1c9      	bne.n	800f48e <__ssvfscanf_r+0xdfe>
 800f4fa:	4934      	ldr	r1, [pc, #208]	; (800f5cc <__ssvfscanf_r+0xf3c>)
 800f4fc:	4021      	ands	r1, r4
 800f4fe:	24a0      	movs	r4, #160	; 0xa0
 800f500:	00e4      	lsls	r4, r4, #3
 800f502:	430c      	orrs	r4, r1
 800f504:	2110      	movs	r1, #16
 800f506:	6279      	str	r1, [r7, #36]	; 0x24
 800f508:	e00b      	b.n	800f522 <__ssvfscanf_r+0xe92>
 800f50a:	0521      	lsls	r1, r4, #20
 800f50c:	d509      	bpl.n	800f522 <__ssvfscanf_r+0xe92>
 800f50e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f510:	2900      	cmp	r1, #0
 800f512:	d102      	bne.n	800f51a <__ssvfscanf_r+0xe8a>
 800f514:	3108      	adds	r1, #8
 800f516:	4334      	orrs	r4, r6
 800f518:	6279      	str	r1, [r7, #36]	; 0x24
 800f51a:	0561      	lsls	r1, r4, #21
 800f51c:	d504      	bpl.n	800f528 <__ssvfscanf_r+0xe98>
 800f51e:	492c      	ldr	r1, [pc, #176]	; (800f5d0 <__ssvfscanf_r+0xf40>)
 800f520:	400c      	ands	r4, r1
 800f522:	702b      	strb	r3, [r5, #0]
 800f524:	3501      	adds	r5, #1
 800f526:	e00c      	b.n	800f542 <__ssvfscanf_r+0xeb2>
 800f528:	4b2a      	ldr	r3, [pc, #168]	; (800f5d4 <__ssvfscanf_r+0xf44>)
 800f52a:	401c      	ands	r4, r3
 800f52c:	6a3b      	ldr	r3, [r7, #32]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d004      	beq.n	800f53c <__ssvfscanf_r+0xeac>
 800f532:	3b01      	subs	r3, #1
 800f534:	623b      	str	r3, [r7, #32]
 800f536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f538:	3301      	adds	r3, #1
 800f53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	3301      	adds	r3, #1
 800f540:	61fb      	str	r3, [r7, #28]
 800f542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f544:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	3b01      	subs	r3, #1
 800f54a:	604b      	str	r3, [r1, #4]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	dd1c      	ble.n	800f58a <__ssvfscanf_r+0xefa>
 800f550:	3201      	adds	r2, #1
 800f552:	600a      	str	r2, [r1, #0]
 800f554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f556:	3b01      	subs	r3, #1
 800f558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d000      	beq.n	800f560 <__ssvfscanf_r+0xed0>
 800f55e:	e773      	b.n	800f448 <__ssvfscanf_r+0xdb8>
 800f560:	e795      	b.n	800f48e <__ssvfscanf_r+0xdfe>
 800f562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f564:	491c      	ldr	r1, [pc, #112]	; (800f5d8 <__ssvfscanf_r+0xf48>)
 800f566:	0040      	lsls	r0, r0, #1
 800f568:	5e41      	ldrsh	r1, [r0, r1]
 800f56a:	6279      	str	r1, [r7, #36]	; 0x24
 800f56c:	491b      	ldr	r1, [pc, #108]	; (800f5dc <__ssvfscanf_r+0xf4c>)
 800f56e:	e7d7      	b.n	800f520 <__ssvfscanf_r+0xe90>
 800f570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f572:	4919      	ldr	r1, [pc, #100]	; (800f5d8 <__ssvfscanf_r+0xf48>)
 800f574:	0040      	lsls	r0, r0, #1
 800f576:	5e41      	ldrsh	r1, [r0, r1]
 800f578:	6279      	str	r1, [r7, #36]	; 0x24
 800f57a:	2908      	cmp	r1, #8
 800f57c:	dcf6      	bgt.n	800f56c <__ssvfscanf_r+0xedc>
 800f57e:	e786      	b.n	800f48e <__ssvfscanf_r+0xdfe>
 800f580:	2180      	movs	r1, #128	; 0x80
 800f582:	420c      	tst	r4, r1
 800f584:	d083      	beq.n	800f48e <__ssvfscanf_r+0xdfe>
 800f586:	438c      	bics	r4, r1
 800f588:	e7cb      	b.n	800f522 <__ssvfscanf_r+0xe92>
 800f58a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f58c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f58e:	f002 f813 	bl	80115b8 <__ssrefill_r>
 800f592:	2800      	cmp	r0, #0
 800f594:	d0de      	beq.n	800f554 <__ssvfscanf_r+0xec4>
 800f596:	e77a      	b.n	800f48e <__ssvfscanf_r+0xdfe>
 800f598:	2308      	movs	r3, #8
 800f59a:	421c      	tst	r4, r3
 800f59c:	d020      	beq.n	800f5e0 <__ssvfscanf_r+0xf50>
 800f59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	7018      	strb	r0, [r3, #0]
 800f5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a6:	633e      	str	r6, [r7, #48]	; 0x30
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5ac:	238c      	movs	r3, #140	; 0x8c
 800f5ae:	2248      	movs	r2, #72	; 0x48
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	189b      	adds	r3, r3, r2
 800f5b4:	19db      	adds	r3, r3, r7
 800f5b6:	1aed      	subs	r5, r5, r3
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	18ed      	adds	r5, r5, r3
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5be:	195b      	adds	r3, r3, r5
 800f5c0:	f7ff f92d 	bl	800e81e <__ssvfscanf_r+0x18e>
 800f5c4:	08014379 	.word	0x08014379
 800f5c8:	0000fff6 	.word	0x0000fff6
 800f5cc:	fffffdff 	.word	0xfffffdff
 800f5d0:	fffffa7f 	.word	0xfffffa7f
 800f5d4:	fffffc7f 	.word	0xfffffc7f
 800f5d8:	080146a6 	.word	0x080146a6
 800f5dc:	fffff47f 	.word	0xfffff47f
 800f5e0:	0763      	lsls	r3, r4, #29
 800f5e2:	d503      	bpl.n	800f5ec <__ssvfscanf_r+0xf5c>
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	8018      	strh	r0, [r3, #0]
 800f5ea:	e7db      	b.n	800f5a4 <__ssvfscanf_r+0xf14>
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	0022      	movs	r2, r4
 800f5f0:	401a      	ands	r2, r3
 800f5f2:	421c      	tst	r4, r3
 800f5f4:	d000      	beq.n	800f5f8 <__ssvfscanf_r+0xf68>
 800f5f6:	e775      	b.n	800f4e4 <__ssvfscanf_r+0xe54>
 800f5f8:	07a4      	lsls	r4, r4, #30
 800f5fa:	d400      	bmi.n	800f5fe <__ssvfscanf_r+0xf6e>
 800f5fc:	e772      	b.n	800f4e4 <__ssvfscanf_r+0xe54>
 800f5fe:	4ba8      	ldr	r3, [pc, #672]	; (800f8a0 <__ssvfscanf_r+0x1210>)
 800f600:	6979      	ldr	r1, [r7, #20]
 800f602:	4299      	cmp	r1, r3
 800f604:	d10c      	bne.n	800f620 <__ssvfscanf_r+0xf90>
 800f606:	218c      	movs	r1, #140	; 0x8c
 800f608:	2048      	movs	r0, #72	; 0x48
 800f60a:	0049      	lsls	r1, r1, #1
 800f60c:	1809      	adds	r1, r1, r0
 800f60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f610:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f612:	19c9      	adds	r1, r1, r7
 800f614:	f001 fecc 	bl	80113b0 <_strtoull_r>
 800f618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	c303      	stmia	r3!, {r0, r1}
 800f61e:	e7c1      	b.n	800f5a4 <__ssvfscanf_r+0xf14>
 800f620:	218c      	movs	r1, #140	; 0x8c
 800f622:	2048      	movs	r0, #72	; 0x48
 800f624:	0049      	lsls	r1, r1, #1
 800f626:	1809      	adds	r1, r1, r0
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f62c:	19c9      	adds	r1, r1, r7
 800f62e:	f001 fe0d 	bl	801124c <_strtoll_r>
 800f632:	e7f1      	b.n	800f618 <__ssvfscanf_r+0xf88>
 800f634:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f636:	f000 fb9f 	bl	800fd78 <_localeconv_r>
 800f63a:	22ae      	movs	r2, #174	; 0xae
 800f63c:	2100      	movs	r1, #0
 800f63e:	6803      	ldr	r3, [r0, #0]
 800f640:	0052      	lsls	r2, r2, #1
 800f642:	603b      	str	r3, [r7, #0]
 800f644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f646:	60f9      	str	r1, [r7, #12]
 800f648:	3b01      	subs	r3, #1
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d906      	bls.n	800f65c <__ssvfscanf_r+0xfcc>
 800f64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f650:	3b5e      	subs	r3, #94	; 0x5e
 800f652:	3bff      	subs	r3, #255	; 0xff
 800f654:	60fb      	str	r3, [r7, #12]
 800f656:	235e      	movs	r3, #94	; 0x5e
 800f658:	33ff      	adds	r3, #255	; 0xff
 800f65a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f65c:	23f0      	movs	r3, #240	; 0xf0
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	431e      	orrs	r6, r3
 800f662:	238c      	movs	r3, #140	; 0x8c
 800f664:	2248      	movs	r2, #72	; 0x48
 800f666:	2400      	movs	r4, #0
 800f668:	005b      	lsls	r3, r3, #1
 800f66a:	189b      	adds	r3, r3, r2
 800f66c:	623c      	str	r4, [r7, #32]
 800f66e:	607c      	str	r4, [r7, #4]
 800f670:	60bc      	str	r4, [r7, #8]
 800f672:	61fc      	str	r4, [r7, #28]
 800f674:	613c      	str	r4, [r7, #16]
 800f676:	19dd      	adds	r5, r3, r7
 800f678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	781a      	ldrb	r2, [r3, #0]
 800f67e:	0010      	movs	r0, r2
 800f680:	382b      	subs	r0, #43	; 0x2b
 800f682:	284e      	cmp	r0, #78	; 0x4e
 800f684:	d900      	bls.n	800f688 <__ssvfscanf_r+0xff8>
 800f686:	e133      	b.n	800f8f0 <__ssvfscanf_r+0x1260>
 800f688:	f7f0 fd4e 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f68c:	0132009b 	.word	0x0132009b
 800f690:	0132009b 	.word	0x0132009b
 800f694:	004f0132 	.word	0x004f0132
 800f698:	00720072 	.word	0x00720072
 800f69c:	00720072 	.word	0x00720072
 800f6a0:	00720072 	.word	0x00720072
 800f6a4:	00720072 	.word	0x00720072
 800f6a8:	01320072 	.word	0x01320072
 800f6ac:	01320132 	.word	0x01320132
 800f6b0:	01320132 	.word	0x01320132
 800f6b4:	01320132 	.word	0x01320132
 800f6b8:	007b00bc 	.word	0x007b00bc
 800f6bc:	007b007b 	.word	0x007b007b
 800f6c0:	00f7012f 	.word	0x00f7012f
 800f6c4:	01320132 	.word	0x01320132
 800f6c8:	013200e3 	.word	0x013200e3
 800f6cc:	01320132 	.word	0x01320132
 800f6d0:	00a00132 	.word	0x00a00132
 800f6d4:	01120132 	.word	0x01120132
 800f6d8:	01320132 	.word	0x01320132
 800f6dc:	01010132 	.word	0x01010132
 800f6e0:	01320132 	.word	0x01320132
 800f6e4:	00820132 	.word	0x00820132
 800f6e8:	01320105 	.word	0x01320105
 800f6ec:	01320132 	.word	0x01320132
 800f6f0:	01320132 	.word	0x01320132
 800f6f4:	01320132 	.word	0x01320132
 800f6f8:	007b00bc 	.word	0x007b00bc
 800f6fc:	007b007b 	.word	0x007b007b
 800f700:	00f7012f 	.word	0x00f7012f
 800f704:	01320132 	.word	0x01320132
 800f708:	013200e3 	.word	0x013200e3
 800f70c:	01320132 	.word	0x01320132
 800f710:	00a00132 	.word	0x00a00132
 800f714:	01120132 	.word	0x01120132
 800f718:	01320132 	.word	0x01320132
 800f71c:	01010132 	.word	0x01010132
 800f720:	01320132 	.word	0x01320132
 800f724:	00820132 	.word	0x00820132
 800f728:	0105      	.short	0x0105
 800f72a:	05f1      	lsls	r1, r6, #23
 800f72c:	d520      	bpl.n	800f770 <__ssvfscanf_r+0x10e0>
 800f72e:	2280      	movs	r2, #128	; 0x80
 800f730:	4396      	bics	r6, r2
 800f732:	69fa      	ldr	r2, [r7, #28]
 800f734:	3201      	adds	r2, #1
 800f736:	61fa      	str	r2, [r7, #28]
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	2a00      	cmp	r2, #0
 800f73c:	d004      	beq.n	800f748 <__ssvfscanf_r+0x10b8>
 800f73e:	3a01      	subs	r2, #1
 800f740:	60fa      	str	r2, [r7, #12]
 800f742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f744:	3201      	adds	r2, #1
 800f746:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f74a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f74c:	3a01      	subs	r2, #1
 800f74e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f752:	3201      	adds	r2, #1
 800f754:	63ba      	str	r2, [r7, #56]	; 0x38
 800f756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f758:	6852      	ldr	r2, [r2, #4]
 800f75a:	3a01      	subs	r2, #1
 800f75c:	604a      	str	r2, [r1, #4]
 800f75e:	2a00      	cmp	r2, #0
 800f760:	dc00      	bgt.n	800f764 <__ssvfscanf_r+0x10d4>
 800f762:	e0d6      	b.n	800f912 <__ssvfscanf_r+0x1282>
 800f764:	3301      	adds	r3, #1
 800f766:	600b      	str	r3, [r1, #0]
 800f768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d184      	bne.n	800f678 <__ssvfscanf_r+0xfe8>
 800f76e:	e057      	b.n	800f820 <__ssvfscanf_r+0x1190>
 800f770:	6a39      	ldr	r1, [r7, #32]
 800f772:	1909      	adds	r1, r1, r4
 800f774:	2900      	cmp	r1, #0
 800f776:	d153      	bne.n	800f820 <__ssvfscanf_r+0x1190>
 800f778:	494a      	ldr	r1, [pc, #296]	; (800f8a4 <__ssvfscanf_r+0x1214>)
 800f77a:	400e      	ands	r6, r1
 800f77c:	702a      	strb	r2, [r5, #0]
 800f77e:	3501      	adds	r5, #1
 800f780:	e7e2      	b.n	800f748 <__ssvfscanf_r+0x10b8>
 800f782:	0531      	lsls	r1, r6, #20
 800f784:	d54c      	bpl.n	800f820 <__ssvfscanf_r+0x1190>
 800f786:	6a39      	ldr	r1, [r7, #32]
 800f788:	1909      	adds	r1, r1, r4
 800f78a:	2900      	cmp	r1, #0
 800f78c:	d040      	beq.n	800f810 <__ssvfscanf_r+0x1180>
 800f78e:	e047      	b.n	800f820 <__ssvfscanf_r+0x1190>
 800f790:	2198      	movs	r1, #152	; 0x98
 800f792:	2080      	movs	r0, #128	; 0x80
 800f794:	0109      	lsls	r1, r1, #4
 800f796:	4031      	ands	r1, r6
 800f798:	0040      	lsls	r0, r0, #1
 800f79a:	4281      	cmp	r1, r0
 800f79c:	d140      	bne.n	800f820 <__ssvfscanf_r+0x1190>
 800f79e:	69f9      	ldr	r1, [r7, #28]
 800f7a0:	2901      	cmp	r1, #1
 800f7a2:	d13d      	bne.n	800f820 <__ssvfscanf_r+0x1190>
 800f7a4:	2080      	movs	r0, #128	; 0x80
 800f7a6:	4940      	ldr	r1, [pc, #256]	; (800f8a8 <__ssvfscanf_r+0x1218>)
 800f7a8:	0100      	lsls	r0, r0, #4
 800f7aa:	400e      	ands	r6, r1
 800f7ac:	3132      	adds	r1, #50	; 0x32
 800f7ae:	31ff      	adds	r1, #255	; 0xff
 800f7b0:	7029      	strb	r1, [r5, #0]
 800f7b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7b4:	4306      	orrs	r6, r0
 800f7b6:	3901      	subs	r1, #1
 800f7b8:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f7ba:	3501      	adds	r5, #1
 800f7bc:	2100      	movs	r1, #0
 800f7be:	61f9      	str	r1, [r7, #28]
 800f7c0:	e7dc      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f7c2:	2180      	movs	r1, #128	; 0x80
 800f7c4:	420e      	tst	r6, r1
 800f7c6:	d02b      	beq.n	800f820 <__ssvfscanf_r+0x1190>
 800f7c8:	438e      	bics	r6, r1
 800f7ca:	e7d7      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f7cc:	6a39      	ldr	r1, [r7, #32]
 800f7ce:	2900      	cmp	r1, #0
 800f7d0:	d10d      	bne.n	800f7ee <__ssvfscanf_r+0x115e>
 800f7d2:	69f9      	ldr	r1, [r7, #28]
 800f7d4:	2900      	cmp	r1, #0
 800f7d6:	d10e      	bne.n	800f7f6 <__ssvfscanf_r+0x1166>
 800f7d8:	21e0      	movs	r1, #224	; 0xe0
 800f7da:	0030      	movs	r0, r6
 800f7dc:	00c9      	lsls	r1, r1, #3
 800f7de:	4008      	ands	r0, r1
 800f7e0:	4288      	cmp	r0, r1
 800f7e2:	d108      	bne.n	800f7f6 <__ssvfscanf_r+0x1166>
 800f7e4:	4931      	ldr	r1, [pc, #196]	; (800f8ac <__ssvfscanf_r+0x121c>)
 800f7e6:	400e      	ands	r6, r1
 800f7e8:	2101      	movs	r1, #1
 800f7ea:	6239      	str	r1, [r7, #32]
 800f7ec:	e7c6      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f7ee:	6a39      	ldr	r1, [r7, #32]
 800f7f0:	2902      	cmp	r1, #2
 800f7f2:	d100      	bne.n	800f7f6 <__ssvfscanf_r+0x1166>
 800f7f4:	e089      	b.n	800f90a <__ssvfscanf_r+0x127a>
 800f7f6:	2c01      	cmp	r4, #1
 800f7f8:	d001      	beq.n	800f7fe <__ssvfscanf_r+0x116e>
 800f7fa:	2c04      	cmp	r4, #4
 800f7fc:	d110      	bne.n	800f820 <__ssvfscanf_r+0x1190>
 800f7fe:	3401      	adds	r4, #1
 800f800:	b2e4      	uxtb	r4, r4
 800f802:	e7bb      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f804:	0531      	lsls	r1, r6, #20
 800f806:	d508      	bpl.n	800f81a <__ssvfscanf_r+0x118a>
 800f808:	6a39      	ldr	r1, [r7, #32]
 800f80a:	1909      	adds	r1, r1, r4
 800f80c:	2900      	cmp	r1, #0
 800f80e:	d104      	bne.n	800f81a <__ssvfscanf_r+0x118a>
 800f810:	4824      	ldr	r0, [pc, #144]	; (800f8a4 <__ssvfscanf_r+0x1214>)
 800f812:	000c      	movs	r4, r1
 800f814:	4006      	ands	r6, r0
 800f816:	6239      	str	r1, [r7, #32]
 800f818:	e7b0      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f81a:	6a39      	ldr	r1, [r7, #32]
 800f81c:	2901      	cmp	r1, #1
 800f81e:	d076      	beq.n	800f90e <__ssvfscanf_r+0x127e>
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d001      	beq.n	800f82a <__ssvfscanf_r+0x119a>
 800f826:	4b20      	ldr	r3, [pc, #128]	; (800f8a8 <__ssvfscanf_r+0x1218>)
 800f828:	401e      	ands	r6, r3
 800f82a:	6a3b      	ldr	r3, [r7, #32]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d877      	bhi.n	800f922 <__ssvfscanf_r+0x1292>
 800f832:	238c      	movs	r3, #140	; 0x8c
 800f834:	2248      	movs	r2, #72	; 0x48
 800f836:	005b      	lsls	r3, r3, #1
 800f838:	189b      	adds	r3, r3, r2
 800f83a:	19db      	adds	r3, r3, r7
 800f83c:	429d      	cmp	r5, r3
 800f83e:	d801      	bhi.n	800f844 <__ssvfscanf_r+0x11b4>
 800f840:	f7ff f823 	bl	800e88a <__ssvfscanf_r+0x1fa>
 800f844:	3d01      	subs	r5, #1
 800f846:	7829      	ldrb	r1, [r5, #0]
 800f848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f84a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f84c:	f001 fe78 	bl	8011540 <_sungetc_r>
 800f850:	e7ef      	b.n	800f832 <__ssvfscanf_r+0x11a2>
 800f852:	2c00      	cmp	r4, #0
 800f854:	d10c      	bne.n	800f870 <__ssvfscanf_r+0x11e0>
 800f856:	69f9      	ldr	r1, [r7, #28]
 800f858:	2900      	cmp	r1, #0
 800f85a:	d1e4      	bne.n	800f826 <__ssvfscanf_r+0x1196>
 800f85c:	21e0      	movs	r1, #224	; 0xe0
 800f85e:	0030      	movs	r0, r6
 800f860:	00c9      	lsls	r1, r1, #3
 800f862:	4008      	ands	r0, r1
 800f864:	4288      	cmp	r0, r1
 800f866:	d1e0      	bne.n	800f82a <__ssvfscanf_r+0x119a>
 800f868:	4910      	ldr	r1, [pc, #64]	; (800f8ac <__ssvfscanf_r+0x121c>)
 800f86a:	3401      	adds	r4, #1
 800f86c:	400e      	ands	r6, r1
 800f86e:	e785      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f870:	20fd      	movs	r0, #253	; 0xfd
 800f872:	1ee1      	subs	r1, r4, #3
 800f874:	4201      	tst	r1, r0
 800f876:	d1d3      	bne.n	800f820 <__ssvfscanf_r+0x1190>
 800f878:	e7c1      	b.n	800f7fe <__ssvfscanf_r+0x116e>
 800f87a:	0531      	lsls	r1, r6, #20
 800f87c:	d503      	bpl.n	800f886 <__ssvfscanf_r+0x11f6>
 800f87e:	6a39      	ldr	r1, [r7, #32]
 800f880:	1909      	adds	r1, r1, r4
 800f882:	2900      	cmp	r1, #0
 800f884:	d0c4      	beq.n	800f810 <__ssvfscanf_r+0x1180>
 800f886:	2c02      	cmp	r4, #2
 800f888:	d1ca      	bne.n	800f820 <__ssvfscanf_r+0x1190>
 800f88a:	2403      	movs	r4, #3
 800f88c:	e776      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f88e:	2c06      	cmp	r4, #6
 800f890:	d1c6      	bne.n	800f820 <__ssvfscanf_r+0x1190>
 800f892:	2407      	movs	r4, #7
 800f894:	e772      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f896:	2c07      	cmp	r4, #7
 800f898:	d1c2      	bne.n	800f820 <__ssvfscanf_r+0x1190>
 800f89a:	2408      	movs	r4, #8
 800f89c:	e76e      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f89e:	46c0      	nop			; (mov r8, r8)
 800f8a0:	080110e9 	.word	0x080110e9
 800f8a4:	fffffe7f 	.word	0xfffffe7f
 800f8a8:	fffffeff 	.word	0xfffffeff
 800f8ac:	fffff87f 	.word	0xfffff87f
 800f8b0:	0531      	lsls	r1, r6, #20
 800f8b2:	d5b5      	bpl.n	800f820 <__ssvfscanf_r+0x1190>
 800f8b4:	21a0      	movs	r1, #160	; 0xa0
 800f8b6:	2080      	movs	r0, #128	; 0x80
 800f8b8:	00c9      	lsls	r1, r1, #3
 800f8ba:	00c0      	lsls	r0, r0, #3
 800f8bc:	4031      	ands	r1, r6
 800f8be:	4281      	cmp	r1, r0
 800f8c0:	d004      	beq.n	800f8cc <__ssvfscanf_r+0x123c>
 800f8c2:	4206      	tst	r6, r0
 800f8c4:	d0ac      	beq.n	800f820 <__ssvfscanf_r+0x1190>
 800f8c6:	69f9      	ldr	r1, [r7, #28]
 800f8c8:	2900      	cmp	r1, #0
 800f8ca:	d0ae      	beq.n	800f82a <__ssvfscanf_r+0x119a>
 800f8cc:	2180      	movs	r1, #128	; 0x80
 800f8ce:	0089      	lsls	r1, r1, #2
 800f8d0:	420e      	tst	r6, r1
 800f8d2:	d104      	bne.n	800f8de <__ssvfscanf_r+0x124e>
 800f8d4:	69f9      	ldr	r1, [r7, #28]
 800f8d6:	6938      	ldr	r0, [r7, #16]
 800f8d8:	607d      	str	r5, [r7, #4]
 800f8da:	1a09      	subs	r1, r1, r0
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	20c0      	movs	r0, #192	; 0xc0
 800f8e0:	4973      	ldr	r1, [pc, #460]	; (800fab0 <__ssvfscanf_r+0x1420>)
 800f8e2:	0040      	lsls	r0, r0, #1
 800f8e4:	400e      	ands	r6, r1
 800f8e6:	4306      	orrs	r6, r0
 800f8e8:	e768      	b.n	800f7bc <__ssvfscanf_r+0x112c>
 800f8ea:	0531      	lsls	r1, r6, #20
 800f8ec:	d5e2      	bpl.n	800f8b4 <__ssvfscanf_r+0x1224>
 800f8ee:	e74a      	b.n	800f786 <__ssvfscanf_r+0x10f6>
 800f8f0:	6839      	ldr	r1, [r7, #0]
 800f8f2:	7809      	ldrb	r1, [r1, #0]
 800f8f4:	4291      	cmp	r1, r2
 800f8f6:	d193      	bne.n	800f820 <__ssvfscanf_r+0x1190>
 800f8f8:	2180      	movs	r1, #128	; 0x80
 800f8fa:	0089      	lsls	r1, r1, #2
 800f8fc:	420e      	tst	r6, r1
 800f8fe:	d08f      	beq.n	800f820 <__ssvfscanf_r+0x1190>
 800f900:	496c      	ldr	r1, [pc, #432]	; (800fab4 <__ssvfscanf_r+0x1424>)
 800f902:	400e      	ands	r6, r1
 800f904:	69f9      	ldr	r1, [r7, #28]
 800f906:	6139      	str	r1, [r7, #16]
 800f908:	e738      	b.n	800f77c <__ssvfscanf_r+0x10ec>
 800f90a:	2103      	movs	r1, #3
 800f90c:	e76d      	b.n	800f7ea <__ssvfscanf_r+0x115a>
 800f90e:	2102      	movs	r1, #2
 800f910:	e76b      	b.n	800f7ea <__ssvfscanf_r+0x115a>
 800f912:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f914:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f916:	f001 fe4f 	bl	80115b8 <__ssrefill_r>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d100      	bne.n	800f920 <__ssvfscanf_r+0x1290>
 800f91e:	e723      	b.n	800f768 <__ssvfscanf_r+0x10d8>
 800f920:	e77e      	b.n	800f820 <__ssvfscanf_r+0x1190>
 800f922:	1e63      	subs	r3, r4, #1
 800f924:	2b06      	cmp	r3, #6
 800f926:	d825      	bhi.n	800f974 <__ssvfscanf_r+0x12e4>
 800f928:	2c02      	cmp	r4, #2
 800f92a:	d837      	bhi.n	800f99c <__ssvfscanf_r+0x130c>
 800f92c:	238c      	movs	r3, #140	; 0x8c
 800f92e:	2248      	movs	r2, #72	; 0x48
 800f930:	005b      	lsls	r3, r3, #1
 800f932:	189b      	adds	r3, r3, r2
 800f934:	19db      	adds	r3, r3, r7
 800f936:	429d      	cmp	r5, r3
 800f938:	d801      	bhi.n	800f93e <__ssvfscanf_r+0x12ae>
 800f93a:	f7fe ffa6 	bl	800e88a <__ssvfscanf_r+0x1fa>
 800f93e:	3d01      	subs	r5, #1
 800f940:	7829      	ldrb	r1, [r5, #0]
 800f942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f944:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f946:	f001 fdfb 	bl	8011540 <_sungetc_r>
 800f94a:	e7ef      	b.n	800f92c <__ssvfscanf_r+0x129c>
 800f94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f950:	3b01      	subs	r3, #1
 800f952:	7819      	ldrb	r1, [r3, #0]
 800f954:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f958:	f001 fdf2 	bl	8011540 <_sungetc_r>
 800f95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f95e:	6a3a      	ldr	r2, [r7, #32]
 800f960:	189b      	adds	r3, r3, r2
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b03      	cmp	r3, #3
 800f966:	d8f1      	bhi.n	800f94c <__ssvfscanf_r+0x12bc>
 800f968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96a:	3c03      	subs	r4, #3
 800f96c:	b2e4      	uxtb	r4, r4
 800f96e:	1b1b      	subs	r3, r3, r4
 800f970:	1b2d      	subs	r5, r5, r4
 800f972:	63bb      	str	r3, [r7, #56]	; 0x38
 800f974:	05f3      	lsls	r3, r6, #23
 800f976:	d52f      	bpl.n	800f9d8 <__ssvfscanf_r+0x1348>
 800f978:	0573      	lsls	r3, r6, #21
 800f97a:	d514      	bpl.n	800f9a6 <__ssvfscanf_r+0x1316>
 800f97c:	238c      	movs	r3, #140	; 0x8c
 800f97e:	2248      	movs	r2, #72	; 0x48
 800f980:	005b      	lsls	r3, r3, #1
 800f982:	189b      	adds	r3, r3, r2
 800f984:	19db      	adds	r3, r3, r7
 800f986:	429d      	cmp	r5, r3
 800f988:	d801      	bhi.n	800f98e <__ssvfscanf_r+0x12fe>
 800f98a:	f7fe ff7e 	bl	800e88a <__ssvfscanf_r+0x1fa>
 800f98e:	3d01      	subs	r5, #1
 800f990:	7829      	ldrb	r1, [r5, #0]
 800f992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f994:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f996:	f001 fdd3 	bl	8011540 <_sungetc_r>
 800f99a:	e7ef      	b.n	800f97c <__ssvfscanf_r+0x12ec>
 800f99c:	1b63      	subs	r3, r4, r5
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	63fd      	str	r5, [r7, #60]	; 0x3c
 800f9a2:	623b      	str	r3, [r7, #32]
 800f9a4:	e7da      	b.n	800f95c <__ssvfscanf_r+0x12cc>
 800f9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a8:	1e6c      	subs	r4, r5, #1
 800f9aa:	7821      	ldrb	r1, [r4, #0]
 800f9ac:	3b01      	subs	r3, #1
 800f9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9b0:	2965      	cmp	r1, #101	; 0x65
 800f9b2:	d00a      	beq.n	800f9ca <__ssvfscanf_r+0x133a>
 800f9b4:	2945      	cmp	r1, #69	; 0x45
 800f9b6:	d008      	beq.n	800f9ca <__ssvfscanf_r+0x133a>
 800f9b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9bc:	f001 fdc0 	bl	8011540 <_sungetc_r>
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c2:	1eac      	subs	r4, r5, #2
 800f9c4:	3b02      	subs	r3, #2
 800f9c6:	7821      	ldrb	r1, [r4, #0]
 800f9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9ca:	0025      	movs	r5, r4
 800f9cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9d0:	f001 fdb6 	bl	8011540 <_sungetc_r>
 800f9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9d8:	2310      	movs	r3, #16
 800f9da:	0032      	movs	r2, r6
 800f9dc:	401a      	ands	r2, r3
 800f9de:	421e      	tst	r6, r3
 800f9e0:	d001      	beq.n	800f9e6 <__ssvfscanf_r+0x1356>
 800f9e2:	f7fe fe71 	bl	800e6c8 <__ssvfscanf_r+0x38>
 800f9e6:	23c0      	movs	r3, #192	; 0xc0
 800f9e8:	2180      	movs	r1, #128	; 0x80
 800f9ea:	00db      	lsls	r3, r3, #3
 800f9ec:	702a      	strb	r2, [r5, #0]
 800f9ee:	4033      	ands	r3, r6
 800f9f0:	00c9      	lsls	r1, r1, #3
 800f9f2:	428b      	cmp	r3, r1
 800f9f4:	d11f      	bne.n	800fa36 <__ssvfscanf_r+0x13a6>
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	69fa      	ldr	r2, [r7, #28]
 800f9fa:	69f9      	ldr	r1, [r7, #28]
 800f9fc:	1a9a      	subs	r2, r3, r2
 800f9fe:	428b      	cmp	r3, r1
 800fa00:	d125      	bne.n	800fa4e <__ssvfscanf_r+0x13be>
 800fa02:	238c      	movs	r3, #140	; 0x8c
 800fa04:	2148      	movs	r1, #72	; 0x48
 800fa06:	005b      	lsls	r3, r3, #1
 800fa08:	185b      	adds	r3, r3, r1
 800fa0a:	19d9      	adds	r1, r3, r7
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa10:	f7fb ffca 	bl	800b9a8 <_strtod_r>
 800fa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa16:	0004      	movs	r4, r0
 800fa18:	3304      	adds	r3, #4
 800fa1a:	000d      	movs	r5, r1
 800fa1c:	623b      	str	r3, [r7, #32]
 800fa1e:	07f3      	lsls	r3, r6, #31
 800fa20:	d523      	bpl.n	800fa6a <__ssvfscanf_r+0x13da>
 800fa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	601c      	str	r4, [r3, #0]
 800fa28:	605d      	str	r5, [r3, #4]
 800fa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa30:	6a3b      	ldr	r3, [r7, #32]
 800fa32:	f7fe ffa5 	bl	800e980 <__ssvfscanf_r+0x2f0>
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0e2      	beq.n	800fa02 <__ssvfscanf_r+0x1372>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa40:	1c59      	adds	r1, r3, #1
 800fa42:	230a      	movs	r3, #10
 800fa44:	f7fc f84c 	bl	800bae0 <_strtol_r>
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	687d      	ldr	r5, [r7, #4]
 800fa4c:	1ac2      	subs	r2, r0, r3
 800fa4e:	2148      	movs	r1, #72	; 0x48
 800fa50:	4b19      	ldr	r3, [pc, #100]	; (800fab8 <__ssvfscanf_r+0x1428>)
 800fa52:	185b      	adds	r3, r3, r1
 800fa54:	19db      	adds	r3, r3, r7
 800fa56:	429d      	cmp	r5, r3
 800fa58:	d302      	bcc.n	800fa60 <__ssvfscanf_r+0x13d0>
 800fa5a:	4b18      	ldr	r3, [pc, #96]	; (800fabc <__ssvfscanf_r+0x142c>)
 800fa5c:	185b      	adds	r3, r3, r1
 800fa5e:	19dd      	adds	r5, r3, r7
 800fa60:	0028      	movs	r0, r5
 800fa62:	4917      	ldr	r1, [pc, #92]	; (800fac0 <__ssvfscanf_r+0x1430>)
 800fa64:	f7fc f944 	bl	800bcf0 <sprintf>
 800fa68:	e7cb      	b.n	800fa02 <__ssvfscanf_r+0x1372>
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa70:	07b6      	lsls	r6, r6, #30
 800fa72:	d4d8      	bmi.n	800fa26 <__ssvfscanf_r+0x1396>
 800fa74:	0002      	movs	r2, r0
 800fa76:	000b      	movs	r3, r1
 800fa78:	f7f2 fc3c 	bl	80022f4 <__aeabi_dcmpun>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d005      	beq.n	800fa8c <__ssvfscanf_r+0x13fc>
 800fa80:	4810      	ldr	r0, [pc, #64]	; (800fac4 <__ssvfscanf_r+0x1434>)
 800fa82:	f7fc fabf 	bl	800c004 <nanf>
 800fa86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa88:	6018      	str	r0, [r3, #0]
 800fa8a:	e7ce      	b.n	800fa2a <__ssvfscanf_r+0x139a>
 800fa8c:	0020      	movs	r0, r4
 800fa8e:	0029      	movs	r1, r5
 800fa90:	f7f2 fcda 	bl	8002448 <__aeabi_d2f>
 800fa94:	e7f7      	b.n	800fa86 <__ssvfscanf_r+0x13f6>
 800fa96:	00a3      	lsls	r3, r4, #2
 800fa98:	18ed      	adds	r5, r5, r3
 800fa9a:	682b      	ldr	r3, [r5, #0]
 800fa9c:	3401      	adds	r4, #1
 800fa9e:	6818      	ldr	r0, [r3, #0]
 800faa0:	f7fa ff32 	bl	800a908 <free>
 800faa4:	2200      	movs	r2, #0
 800faa6:	682b      	ldr	r3, [r5, #0]
 800faa8:	601a      	str	r2, [r3, #0]
 800faaa:	f7fe ffc3 	bl	800ea34 <__ssvfscanf_r+0x3a4>
 800faae:	46c0      	nop			; (mov r8, r8)
 800fab0:	fffff07f 	.word	0xfffff07f
 800fab4:	fffffd7f 	.word	0xfffffd7f
 800fab8:	0000026b 	.word	0x0000026b
 800fabc:	0000026a 	.word	0x0000026a
 800fac0:	080146a0 	.word	0x080146a0
 800fac4:	08014703 	.word	0x08014703

0800fac8 <_fclose_r>:
 800fac8:	b570      	push	{r4, r5, r6, lr}
 800faca:	0005      	movs	r5, r0
 800facc:	1e0c      	subs	r4, r1, #0
 800face:	d102      	bne.n	800fad6 <_fclose_r+0xe>
 800fad0:	2600      	movs	r6, #0
 800fad2:	0030      	movs	r0, r6
 800fad4:	bd70      	pop	{r4, r5, r6, pc}
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d004      	beq.n	800fae4 <_fclose_r+0x1c>
 800fada:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d101      	bne.n	800fae4 <_fclose_r+0x1c>
 800fae0:	f7fc f89e 	bl	800bc20 <__sinit>
 800fae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fae6:	07db      	lsls	r3, r3, #31
 800fae8:	d405      	bmi.n	800faf6 <_fclose_r+0x2e>
 800faea:	89a3      	ldrh	r3, [r4, #12]
 800faec:	059b      	lsls	r3, r3, #22
 800faee:	d402      	bmi.n	800faf6 <_fclose_r+0x2e>
 800faf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800faf2:	f7fc fa6b 	bl	800bfcc <__retarget_lock_acquire_recursive>
 800faf6:	220c      	movs	r2, #12
 800faf8:	5ea3      	ldrsh	r3, [r4, r2]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d109      	bne.n	800fb12 <_fclose_r+0x4a>
 800fafe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb00:	3301      	adds	r3, #1
 800fb02:	0016      	movs	r6, r2
 800fb04:	401e      	ands	r6, r3
 800fb06:	421a      	tst	r2, r3
 800fb08:	d1e2      	bne.n	800fad0 <_fclose_r+0x8>
 800fb0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb0c:	f7fc fa5f 	bl	800bfce <__retarget_lock_release_recursive>
 800fb10:	e7df      	b.n	800fad2 <_fclose_r+0xa>
 800fb12:	0021      	movs	r1, r4
 800fb14:	0028      	movs	r0, r5
 800fb16:	f000 f837 	bl	800fb88 <__sflush_r>
 800fb1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fb1c:	0006      	movs	r6, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d006      	beq.n	800fb30 <_fclose_r+0x68>
 800fb22:	0028      	movs	r0, r5
 800fb24:	69e1      	ldr	r1, [r4, #28]
 800fb26:	4798      	blx	r3
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	da01      	bge.n	800fb30 <_fclose_r+0x68>
 800fb2c:	2601      	movs	r6, #1
 800fb2e:	4276      	negs	r6, r6
 800fb30:	89a3      	ldrh	r3, [r4, #12]
 800fb32:	061b      	lsls	r3, r3, #24
 800fb34:	d503      	bpl.n	800fb3e <_fclose_r+0x76>
 800fb36:	0028      	movs	r0, r5
 800fb38:	6921      	ldr	r1, [r4, #16]
 800fb3a:	f7fc facf 	bl	800c0dc <_free_r>
 800fb3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fb40:	2900      	cmp	r1, #0
 800fb42:	d008      	beq.n	800fb56 <_fclose_r+0x8e>
 800fb44:	0023      	movs	r3, r4
 800fb46:	3340      	adds	r3, #64	; 0x40
 800fb48:	4299      	cmp	r1, r3
 800fb4a:	d002      	beq.n	800fb52 <_fclose_r+0x8a>
 800fb4c:	0028      	movs	r0, r5
 800fb4e:	f7fc fac5 	bl	800c0dc <_free_r>
 800fb52:	2300      	movs	r3, #0
 800fb54:	6323      	str	r3, [r4, #48]	; 0x30
 800fb56:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fb58:	2900      	cmp	r1, #0
 800fb5a:	d004      	beq.n	800fb66 <_fclose_r+0x9e>
 800fb5c:	0028      	movs	r0, r5
 800fb5e:	f7fc fabd 	bl	800c0dc <_free_r>
 800fb62:	2300      	movs	r3, #0
 800fb64:	6463      	str	r3, [r4, #68]	; 0x44
 800fb66:	f7fc f84b 	bl	800bc00 <__sfp_lock_acquire>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	81a3      	strh	r3, [r4, #12]
 800fb6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb70:	07db      	lsls	r3, r3, #31
 800fb72:	d402      	bmi.n	800fb7a <_fclose_r+0xb2>
 800fb74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb76:	f7fc fa2a 	bl	800bfce <__retarget_lock_release_recursive>
 800fb7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb7c:	f7fc fa25 	bl	800bfca <__retarget_lock_close_recursive>
 800fb80:	f7fc f846 	bl	800bc10 <__sfp_lock_release>
 800fb84:	e7a5      	b.n	800fad2 <_fclose_r+0xa>
	...

0800fb88 <__sflush_r>:
 800fb88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb8a:	230c      	movs	r3, #12
 800fb8c:	5eca      	ldrsh	r2, [r1, r3]
 800fb8e:	000c      	movs	r4, r1
 800fb90:	0005      	movs	r5, r0
 800fb92:	b291      	uxth	r1, r2
 800fb94:	0713      	lsls	r3, r2, #28
 800fb96:	d464      	bmi.n	800fc62 <__sflush_r+0xda>
 800fb98:	2380      	movs	r3, #128	; 0x80
 800fb9a:	011b      	lsls	r3, r3, #4
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	6862      	ldr	r2, [r4, #4]
 800fba0:	81a3      	strh	r3, [r4, #12]
 800fba2:	2a00      	cmp	r2, #0
 800fba4:	dc04      	bgt.n	800fbb0 <__sflush_r+0x28>
 800fba6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fba8:	2a00      	cmp	r2, #0
 800fbaa:	dc01      	bgt.n	800fbb0 <__sflush_r+0x28>
 800fbac:	2000      	movs	r0, #0
 800fbae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fbb0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800fbb2:	2f00      	cmp	r7, #0
 800fbb4:	d0fa      	beq.n	800fbac <__sflush_r+0x24>
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	2080      	movs	r0, #128	; 0x80
 800fbba:	682e      	ldr	r6, [r5, #0]
 800fbbc:	602a      	str	r2, [r5, #0]
 800fbbe:	001a      	movs	r2, r3
 800fbc0:	0140      	lsls	r0, r0, #5
 800fbc2:	69e1      	ldr	r1, [r4, #28]
 800fbc4:	4002      	ands	r2, r0
 800fbc6:	4203      	tst	r3, r0
 800fbc8:	d038      	beq.n	800fc3c <__sflush_r+0xb4>
 800fbca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800fbcc:	89a3      	ldrh	r3, [r4, #12]
 800fbce:	075b      	lsls	r3, r3, #29
 800fbd0:	d506      	bpl.n	800fbe0 <__sflush_r+0x58>
 800fbd2:	6863      	ldr	r3, [r4, #4]
 800fbd4:	1ac0      	subs	r0, r0, r3
 800fbd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <__sflush_r+0x58>
 800fbdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fbde:	1ac0      	subs	r0, r0, r3
 800fbe0:	0002      	movs	r2, r0
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	0028      	movs	r0, r5
 800fbe6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800fbe8:	69e1      	ldr	r1, [r4, #28]
 800fbea:	47b8      	blx	r7
 800fbec:	89a2      	ldrh	r2, [r4, #12]
 800fbee:	1c43      	adds	r3, r0, #1
 800fbf0:	d106      	bne.n	800fc00 <__sflush_r+0x78>
 800fbf2:	6829      	ldr	r1, [r5, #0]
 800fbf4:	291d      	cmp	r1, #29
 800fbf6:	d830      	bhi.n	800fc5a <__sflush_r+0xd2>
 800fbf8:	4b2c      	ldr	r3, [pc, #176]	; (800fcac <__sflush_r+0x124>)
 800fbfa:	410b      	asrs	r3, r1
 800fbfc:	07db      	lsls	r3, r3, #31
 800fbfe:	d42c      	bmi.n	800fc5a <__sflush_r+0xd2>
 800fc00:	4b2b      	ldr	r3, [pc, #172]	; (800fcb0 <__sflush_r+0x128>)
 800fc02:	4013      	ands	r3, r2
 800fc04:	2200      	movs	r2, #0
 800fc06:	6062      	str	r2, [r4, #4]
 800fc08:	6922      	ldr	r2, [r4, #16]
 800fc0a:	b21b      	sxth	r3, r3
 800fc0c:	81a3      	strh	r3, [r4, #12]
 800fc0e:	6022      	str	r2, [r4, #0]
 800fc10:	04db      	lsls	r3, r3, #19
 800fc12:	d505      	bpl.n	800fc20 <__sflush_r+0x98>
 800fc14:	1c43      	adds	r3, r0, #1
 800fc16:	d102      	bne.n	800fc1e <__sflush_r+0x96>
 800fc18:	682b      	ldr	r3, [r5, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d100      	bne.n	800fc20 <__sflush_r+0x98>
 800fc1e:	6520      	str	r0, [r4, #80]	; 0x50
 800fc20:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fc22:	602e      	str	r6, [r5, #0]
 800fc24:	2900      	cmp	r1, #0
 800fc26:	d0c1      	beq.n	800fbac <__sflush_r+0x24>
 800fc28:	0023      	movs	r3, r4
 800fc2a:	3340      	adds	r3, #64	; 0x40
 800fc2c:	4299      	cmp	r1, r3
 800fc2e:	d002      	beq.n	800fc36 <__sflush_r+0xae>
 800fc30:	0028      	movs	r0, r5
 800fc32:	f7fc fa53 	bl	800c0dc <_free_r>
 800fc36:	2000      	movs	r0, #0
 800fc38:	6320      	str	r0, [r4, #48]	; 0x30
 800fc3a:	e7b8      	b.n	800fbae <__sflush_r+0x26>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	0028      	movs	r0, r5
 800fc40:	47b8      	blx	r7
 800fc42:	1c43      	adds	r3, r0, #1
 800fc44:	d1c2      	bne.n	800fbcc <__sflush_r+0x44>
 800fc46:	682b      	ldr	r3, [r5, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d0bf      	beq.n	800fbcc <__sflush_r+0x44>
 800fc4c:	2b1d      	cmp	r3, #29
 800fc4e:	d001      	beq.n	800fc54 <__sflush_r+0xcc>
 800fc50:	2b16      	cmp	r3, #22
 800fc52:	d101      	bne.n	800fc58 <__sflush_r+0xd0>
 800fc54:	602e      	str	r6, [r5, #0]
 800fc56:	e7a9      	b.n	800fbac <__sflush_r+0x24>
 800fc58:	89a2      	ldrh	r2, [r4, #12]
 800fc5a:	2340      	movs	r3, #64	; 0x40
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	81a3      	strh	r3, [r4, #12]
 800fc60:	e7a5      	b.n	800fbae <__sflush_r+0x26>
 800fc62:	6926      	ldr	r6, [r4, #16]
 800fc64:	2e00      	cmp	r6, #0
 800fc66:	d0a1      	beq.n	800fbac <__sflush_r+0x24>
 800fc68:	6827      	ldr	r7, [r4, #0]
 800fc6a:	6026      	str	r6, [r4, #0]
 800fc6c:	1bbb      	subs	r3, r7, r6
 800fc6e:	9301      	str	r3, [sp, #4]
 800fc70:	2300      	movs	r3, #0
 800fc72:	0789      	lsls	r1, r1, #30
 800fc74:	d100      	bne.n	800fc78 <__sflush_r+0xf0>
 800fc76:	6963      	ldr	r3, [r4, #20]
 800fc78:	60a3      	str	r3, [r4, #8]
 800fc7a:	9b01      	ldr	r3, [sp, #4]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	dc00      	bgt.n	800fc82 <__sflush_r+0xfa>
 800fc80:	e794      	b.n	800fbac <__sflush_r+0x24>
 800fc82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc84:	0032      	movs	r2, r6
 800fc86:	001f      	movs	r7, r3
 800fc88:	0028      	movs	r0, r5
 800fc8a:	9b01      	ldr	r3, [sp, #4]
 800fc8c:	69e1      	ldr	r1, [r4, #28]
 800fc8e:	47b8      	blx	r7
 800fc90:	2800      	cmp	r0, #0
 800fc92:	dc06      	bgt.n	800fca2 <__sflush_r+0x11a>
 800fc94:	2340      	movs	r3, #64	; 0x40
 800fc96:	2001      	movs	r0, #1
 800fc98:	89a2      	ldrh	r2, [r4, #12]
 800fc9a:	4240      	negs	r0, r0
 800fc9c:	4313      	orrs	r3, r2
 800fc9e:	81a3      	strh	r3, [r4, #12]
 800fca0:	e785      	b.n	800fbae <__sflush_r+0x26>
 800fca2:	9b01      	ldr	r3, [sp, #4]
 800fca4:	1836      	adds	r6, r6, r0
 800fca6:	1a1b      	subs	r3, r3, r0
 800fca8:	9301      	str	r3, [sp, #4]
 800fcaa:	e7e6      	b.n	800fc7a <__sflush_r+0xf2>
 800fcac:	dfbffffe 	.word	0xdfbffffe
 800fcb0:	fffff7ff 	.word	0xfffff7ff

0800fcb4 <_fflush_r>:
 800fcb4:	b570      	push	{r4, r5, r6, lr}
 800fcb6:	0005      	movs	r5, r0
 800fcb8:	000c      	movs	r4, r1
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d004      	beq.n	800fcc8 <_fflush_r+0x14>
 800fcbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d101      	bne.n	800fcc8 <_fflush_r+0x14>
 800fcc4:	f7fb ffac 	bl	800bc20 <__sinit>
 800fcc8:	220c      	movs	r2, #12
 800fcca:	5ea3      	ldrsh	r3, [r4, r2]
 800fccc:	1e1e      	subs	r6, r3, #0
 800fcce:	d015      	beq.n	800fcfc <_fflush_r+0x48>
 800fcd0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fcd2:	07d2      	lsls	r2, r2, #31
 800fcd4:	d404      	bmi.n	800fce0 <_fflush_r+0x2c>
 800fcd6:	059b      	lsls	r3, r3, #22
 800fcd8:	d402      	bmi.n	800fce0 <_fflush_r+0x2c>
 800fcda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcdc:	f7fc f976 	bl	800bfcc <__retarget_lock_acquire_recursive>
 800fce0:	0021      	movs	r1, r4
 800fce2:	0028      	movs	r0, r5
 800fce4:	f7ff ff50 	bl	800fb88 <__sflush_r>
 800fce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcea:	0006      	movs	r6, r0
 800fcec:	07db      	lsls	r3, r3, #31
 800fcee:	d405      	bmi.n	800fcfc <_fflush_r+0x48>
 800fcf0:	89a3      	ldrh	r3, [r4, #12]
 800fcf2:	059b      	lsls	r3, r3, #22
 800fcf4:	d402      	bmi.n	800fcfc <_fflush_r+0x48>
 800fcf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcf8:	f7fc f969 	bl	800bfce <__retarget_lock_release_recursive>
 800fcfc:	0030      	movs	r0, r6
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}

0800fd00 <__sccl>:
 800fd00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd02:	780b      	ldrb	r3, [r1, #0]
 800fd04:	0004      	movs	r4, r0
 800fd06:	2b5e      	cmp	r3, #94	; 0x5e
 800fd08:	d019      	beq.n	800fd3e <__sccl+0x3e>
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	1c4d      	adds	r5, r1, #1
 800fd0e:	0021      	movs	r1, r4
 800fd10:	1c60      	adds	r0, r4, #1
 800fd12:	30ff      	adds	r0, #255	; 0xff
 800fd14:	700a      	strb	r2, [r1, #0]
 800fd16:	3101      	adds	r1, #1
 800fd18:	4281      	cmp	r1, r0
 800fd1a:	d1fb      	bne.n	800fd14 <__sccl+0x14>
 800fd1c:	1e68      	subs	r0, r5, #1
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00c      	beq.n	800fd3c <__sccl+0x3c>
 800fd22:	2101      	movs	r1, #1
 800fd24:	262d      	movs	r6, #45	; 0x2d
 800fd26:	404a      	eors	r2, r1
 800fd28:	0028      	movs	r0, r5
 800fd2a:	54e2      	strb	r2, [r4, r3]
 800fd2c:	7801      	ldrb	r1, [r0, #0]
 800fd2e:	1c45      	adds	r5, r0, #1
 800fd30:	292d      	cmp	r1, #45	; 0x2d
 800fd32:	d00c      	beq.n	800fd4e <__sccl+0x4e>
 800fd34:	295d      	cmp	r1, #93	; 0x5d
 800fd36:	d01d      	beq.n	800fd74 <__sccl+0x74>
 800fd38:	2900      	cmp	r1, #0
 800fd3a:	d104      	bne.n	800fd46 <__sccl+0x46>
 800fd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd3e:	2201      	movs	r2, #1
 800fd40:	784b      	ldrb	r3, [r1, #1]
 800fd42:	1c8d      	adds	r5, r1, #2
 800fd44:	e7e3      	b.n	800fd0e <__sccl+0xe>
 800fd46:	000b      	movs	r3, r1
 800fd48:	e7ee      	b.n	800fd28 <__sccl+0x28>
 800fd4a:	0033      	movs	r3, r6
 800fd4c:	e7ec      	b.n	800fd28 <__sccl+0x28>
 800fd4e:	7841      	ldrb	r1, [r0, #1]
 800fd50:	295d      	cmp	r1, #93	; 0x5d
 800fd52:	d0fa      	beq.n	800fd4a <__sccl+0x4a>
 800fd54:	428b      	cmp	r3, r1
 800fd56:	dcf8      	bgt.n	800fd4a <__sccl+0x4a>
 800fd58:	001d      	movs	r5, r3
 800fd5a:	3002      	adds	r0, #2
 800fd5c:	3501      	adds	r5, #1
 800fd5e:	5562      	strb	r2, [r4, r5]
 800fd60:	42a9      	cmp	r1, r5
 800fd62:	dcfb      	bgt.n	800fd5c <__sccl+0x5c>
 800fd64:	2500      	movs	r5, #0
 800fd66:	1c5f      	adds	r7, r3, #1
 800fd68:	428b      	cmp	r3, r1
 800fd6a:	da01      	bge.n	800fd70 <__sccl+0x70>
 800fd6c:	1acd      	subs	r5, r1, r3
 800fd6e:	3d01      	subs	r5, #1
 800fd70:	197b      	adds	r3, r7, r5
 800fd72:	e7db      	b.n	800fd2c <__sccl+0x2c>
 800fd74:	0028      	movs	r0, r5
 800fd76:	e7e1      	b.n	800fd3c <__sccl+0x3c>

0800fd78 <_localeconv_r>:
 800fd78:	4800      	ldr	r0, [pc, #0]	; (800fd7c <_localeconv_r+0x4>)
 800fd7a:	4770      	bx	lr
 800fd7c:	20000538 	.word	0x20000538

0800fd80 <__libc_fini_array>:
 800fd80:	b570      	push	{r4, r5, r6, lr}
 800fd82:	4c07      	ldr	r4, [pc, #28]	; (800fda0 <__libc_fini_array+0x20>)
 800fd84:	4d07      	ldr	r5, [pc, #28]	; (800fda4 <__libc_fini_array+0x24>)
 800fd86:	1b64      	subs	r4, r4, r5
 800fd88:	10a4      	asrs	r4, r4, #2
 800fd8a:	2c00      	cmp	r4, #0
 800fd8c:	d102      	bne.n	800fd94 <__libc_fini_array+0x14>
 800fd8e:	f002 fdcd 	bl	801292c <_fini>
 800fd92:	bd70      	pop	{r4, r5, r6, pc}
 800fd94:	3c01      	subs	r4, #1
 800fd96:	00a3      	lsls	r3, r4, #2
 800fd98:	58eb      	ldr	r3, [r5, r3]
 800fd9a:	4798      	blx	r3
 800fd9c:	e7f5      	b.n	800fd8a <__libc_fini_array+0xa>
 800fd9e:	46c0      	nop			; (mov r8, r8)
 800fda0:	080147a0 	.word	0x080147a0
 800fda4:	0801479c 	.word	0x0801479c

0800fda8 <memchr>:
 800fda8:	b2c9      	uxtb	r1, r1
 800fdaa:	1882      	adds	r2, r0, r2
 800fdac:	4290      	cmp	r0, r2
 800fdae:	d101      	bne.n	800fdb4 <memchr+0xc>
 800fdb0:	2000      	movs	r0, #0
 800fdb2:	4770      	bx	lr
 800fdb4:	7803      	ldrb	r3, [r0, #0]
 800fdb6:	428b      	cmp	r3, r1
 800fdb8:	d0fb      	beq.n	800fdb2 <memchr+0xa>
 800fdba:	3001      	adds	r0, #1
 800fdbc:	e7f6      	b.n	800fdac <memchr+0x4>
	...

0800fdc0 <frexp>:
 800fdc0:	b570      	push	{r4, r5, r6, lr}
 800fdc2:	0014      	movs	r4, r2
 800fdc4:	2500      	movs	r5, #0
 800fdc6:	6025      	str	r5, [r4, #0]
 800fdc8:	4d10      	ldr	r5, [pc, #64]	; (800fe0c <frexp+0x4c>)
 800fdca:	004b      	lsls	r3, r1, #1
 800fdcc:	000a      	movs	r2, r1
 800fdce:	085b      	lsrs	r3, r3, #1
 800fdd0:	42ab      	cmp	r3, r5
 800fdd2:	dc1a      	bgt.n	800fe0a <frexp+0x4a>
 800fdd4:	001d      	movs	r5, r3
 800fdd6:	4305      	orrs	r5, r0
 800fdd8:	d017      	beq.n	800fe0a <frexp+0x4a>
 800fdda:	4d0d      	ldr	r5, [pc, #52]	; (800fe10 <frexp+0x50>)
 800fddc:	4229      	tst	r1, r5
 800fdde:	d109      	bne.n	800fdf4 <frexp+0x34>
 800fde0:	2200      	movs	r2, #0
 800fde2:	4b0c      	ldr	r3, [pc, #48]	; (800fe14 <frexp+0x54>)
 800fde4:	f7f1 fc42 	bl	800166c <__aeabi_dmul>
 800fde8:	2536      	movs	r5, #54	; 0x36
 800fdea:	000a      	movs	r2, r1
 800fdec:	004b      	lsls	r3, r1, #1
 800fdee:	426d      	negs	r5, r5
 800fdf0:	085b      	lsrs	r3, r3, #1
 800fdf2:	6025      	str	r5, [r4, #0]
 800fdf4:	4d08      	ldr	r5, [pc, #32]	; (800fe18 <frexp+0x58>)
 800fdf6:	151b      	asrs	r3, r3, #20
 800fdf8:	195b      	adds	r3, r3, r5
 800fdfa:	6825      	ldr	r5, [r4, #0]
 800fdfc:	18eb      	adds	r3, r5, r3
 800fdfe:	6023      	str	r3, [r4, #0]
 800fe00:	4b06      	ldr	r3, [pc, #24]	; (800fe1c <frexp+0x5c>)
 800fe02:	401a      	ands	r2, r3
 800fe04:	4b06      	ldr	r3, [pc, #24]	; (800fe20 <frexp+0x60>)
 800fe06:	4313      	orrs	r3, r2
 800fe08:	0019      	movs	r1, r3
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	7fefffff 	.word	0x7fefffff
 800fe10:	7ff00000 	.word	0x7ff00000
 800fe14:	43500000 	.word	0x43500000
 800fe18:	fffffc02 	.word	0xfffffc02
 800fe1c:	800fffff 	.word	0x800fffff
 800fe20:	3fe00000 	.word	0x3fe00000

0800fe24 <__register_exitproc>:
 800fe24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe26:	4f1c      	ldr	r7, [pc, #112]	; (800fe98 <__register_exitproc+0x74>)
 800fe28:	0004      	movs	r4, r0
 800fe2a:	6838      	ldr	r0, [r7, #0]
 800fe2c:	0016      	movs	r6, r2
 800fe2e:	9301      	str	r3, [sp, #4]
 800fe30:	9100      	str	r1, [sp, #0]
 800fe32:	f7fc f8cb 	bl	800bfcc <__retarget_lock_acquire_recursive>
 800fe36:	4a19      	ldr	r2, [pc, #100]	; (800fe9c <__register_exitproc+0x78>)
 800fe38:	6813      	ldr	r3, [r2, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d101      	bne.n	800fe42 <__register_exitproc+0x1e>
 800fe3e:	4b18      	ldr	r3, [pc, #96]	; (800fea0 <__register_exitproc+0x7c>)
 800fe40:	6013      	str	r3, [r2, #0]
 800fe42:	685a      	ldr	r2, [r3, #4]
 800fe44:	6838      	ldr	r0, [r7, #0]
 800fe46:	2a1f      	cmp	r2, #31
 800fe48:	dd04      	ble.n	800fe54 <__register_exitproc+0x30>
 800fe4a:	f7fc f8c0 	bl	800bfce <__retarget_lock_release_recursive>
 800fe4e:	2001      	movs	r0, #1
 800fe50:	4240      	negs	r0, r0
 800fe52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fe54:	2c00      	cmp	r4, #0
 800fe56:	d014      	beq.n	800fe82 <__register_exitproc+0x5e>
 800fe58:	0091      	lsls	r1, r2, #2
 800fe5a:	1859      	adds	r1, r3, r1
 800fe5c:	000f      	movs	r7, r1
 800fe5e:	3788      	adds	r7, #136	; 0x88
 800fe60:	603e      	str	r6, [r7, #0]
 800fe62:	2701      	movs	r7, #1
 800fe64:	001e      	movs	r6, r3
 800fe66:	4097      	lsls	r7, r2
 800fe68:	3685      	adds	r6, #133	; 0x85
 800fe6a:	36ff      	adds	r6, #255	; 0xff
 800fe6c:	6875      	ldr	r5, [r6, #4]
 800fe6e:	31fc      	adds	r1, #252	; 0xfc
 800fe70:	433d      	orrs	r5, r7
 800fe72:	6075      	str	r5, [r6, #4]
 800fe74:	9d01      	ldr	r5, [sp, #4]
 800fe76:	60cd      	str	r5, [r1, #12]
 800fe78:	2c02      	cmp	r4, #2
 800fe7a:	d102      	bne.n	800fe82 <__register_exitproc+0x5e>
 800fe7c:	68b1      	ldr	r1, [r6, #8]
 800fe7e:	4339      	orrs	r1, r7
 800fe80:	60b1      	str	r1, [r6, #8]
 800fe82:	1c51      	adds	r1, r2, #1
 800fe84:	6059      	str	r1, [r3, #4]
 800fe86:	3202      	adds	r2, #2
 800fe88:	9900      	ldr	r1, [sp, #0]
 800fe8a:	0092      	lsls	r2, r2, #2
 800fe8c:	50d1      	str	r1, [r2, r3]
 800fe8e:	f7fc f89e 	bl	800bfce <__retarget_lock_release_recursive>
 800fe92:	2000      	movs	r0, #0
 800fe94:	e7dd      	b.n	800fe52 <__register_exitproc+0x2e>
 800fe96:	46c0      	nop			; (mov r8, r8)
 800fe98:	200006dc 	.word	0x200006dc
 800fe9c:	20000ca0 	.word	0x20000ca0
 800fea0:	20000ca4 	.word	0x20000ca4

0800fea4 <__assert_func>:
 800fea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fea6:	0014      	movs	r4, r2
 800fea8:	001a      	movs	r2, r3
 800feaa:	4b09      	ldr	r3, [pc, #36]	; (800fed0 <__assert_func+0x2c>)
 800feac:	0005      	movs	r5, r0
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	000e      	movs	r6, r1
 800feb2:	68d8      	ldr	r0, [r3, #12]
 800feb4:	4b07      	ldr	r3, [pc, #28]	; (800fed4 <__assert_func+0x30>)
 800feb6:	2c00      	cmp	r4, #0
 800feb8:	d101      	bne.n	800febe <__assert_func+0x1a>
 800feba:	4b07      	ldr	r3, [pc, #28]	; (800fed8 <__assert_func+0x34>)
 800febc:	001c      	movs	r4, r3
 800febe:	4907      	ldr	r1, [pc, #28]	; (800fedc <__assert_func+0x38>)
 800fec0:	9301      	str	r3, [sp, #4]
 800fec2:	9402      	str	r4, [sp, #8]
 800fec4:	002b      	movs	r3, r5
 800fec6:	9600      	str	r6, [sp, #0]
 800fec8:	f001 faa6 	bl	8011418 <fiprintf>
 800fecc:	f002 fb8e 	bl	80125ec <abort>
 800fed0:	200006d8 	.word	0x200006d8
 800fed4:	080146c8 	.word	0x080146c8
 800fed8:	08014703 	.word	0x08014703
 800fedc:	080146d5 	.word	0x080146d5

0800fee0 <_calloc_r>:
 800fee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fee2:	2400      	movs	r4, #0
 800fee4:	0c0b      	lsrs	r3, r1, #16
 800fee6:	0c16      	lsrs	r6, r2, #16
 800fee8:	42a3      	cmp	r3, r4
 800feea:	d133      	bne.n	800ff54 <_calloc_r+0x74>
 800feec:	42a6      	cmp	r6, r4
 800feee:	d121      	bne.n	800ff34 <_calloc_r+0x54>
 800fef0:	b28b      	uxth	r3, r1
 800fef2:	b291      	uxth	r1, r2
 800fef4:	4359      	muls	r1, r3
 800fef6:	f7fa fd11 	bl	800a91c <_malloc_r>
 800fefa:	1e05      	subs	r5, r0, #0
 800fefc:	d033      	beq.n	800ff66 <_calloc_r+0x86>
 800fefe:	0003      	movs	r3, r0
 800ff00:	3b08      	subs	r3, #8
 800ff02:	685a      	ldr	r2, [r3, #4]
 800ff04:	2303      	movs	r3, #3
 800ff06:	439a      	bics	r2, r3
 800ff08:	3a04      	subs	r2, #4
 800ff0a:	2a24      	cmp	r2, #36	; 0x24
 800ff0c:	d832      	bhi.n	800ff74 <_calloc_r+0x94>
 800ff0e:	0003      	movs	r3, r0
 800ff10:	2a13      	cmp	r2, #19
 800ff12:	d90a      	bls.n	800ff2a <_calloc_r+0x4a>
 800ff14:	6004      	str	r4, [r0, #0]
 800ff16:	6044      	str	r4, [r0, #4]
 800ff18:	3308      	adds	r3, #8
 800ff1a:	2a1b      	cmp	r2, #27
 800ff1c:	d905      	bls.n	800ff2a <_calloc_r+0x4a>
 800ff1e:	6084      	str	r4, [r0, #8]
 800ff20:	60c4      	str	r4, [r0, #12]
 800ff22:	2a24      	cmp	r2, #36	; 0x24
 800ff24:	d021      	beq.n	800ff6a <_calloc_r+0x8a>
 800ff26:	0003      	movs	r3, r0
 800ff28:	3310      	adds	r3, #16
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	601a      	str	r2, [r3, #0]
 800ff2e:	605a      	str	r2, [r3, #4]
 800ff30:	609a      	str	r2, [r3, #8]
 800ff32:	e018      	b.n	800ff66 <_calloc_r+0x86>
 800ff34:	1c33      	adds	r3, r6, #0
 800ff36:	1c0d      	adds	r5, r1, #0
 800ff38:	b289      	uxth	r1, r1
 800ff3a:	b292      	uxth	r2, r2
 800ff3c:	434a      	muls	r2, r1
 800ff3e:	b2ad      	uxth	r5, r5
 800ff40:	b299      	uxth	r1, r3
 800ff42:	4369      	muls	r1, r5
 800ff44:	0c13      	lsrs	r3, r2, #16
 800ff46:	18c9      	adds	r1, r1, r3
 800ff48:	0c0b      	lsrs	r3, r1, #16
 800ff4a:	d107      	bne.n	800ff5c <_calloc_r+0x7c>
 800ff4c:	0409      	lsls	r1, r1, #16
 800ff4e:	b292      	uxth	r2, r2
 800ff50:	4311      	orrs	r1, r2
 800ff52:	e7d0      	b.n	800fef6 <_calloc_r+0x16>
 800ff54:	2e00      	cmp	r6, #0
 800ff56:	d101      	bne.n	800ff5c <_calloc_r+0x7c>
 800ff58:	1c15      	adds	r5, r2, #0
 800ff5a:	e7ed      	b.n	800ff38 <_calloc_r+0x58>
 800ff5c:	f7fc f80a 	bl	800bf74 <__errno>
 800ff60:	230c      	movs	r3, #12
 800ff62:	2500      	movs	r5, #0
 800ff64:	6003      	str	r3, [r0, #0]
 800ff66:	0028      	movs	r0, r5
 800ff68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff6a:	0003      	movs	r3, r0
 800ff6c:	6104      	str	r4, [r0, #16]
 800ff6e:	3318      	adds	r3, #24
 800ff70:	6144      	str	r4, [r0, #20]
 800ff72:	e7da      	b.n	800ff2a <_calloc_r+0x4a>
 800ff74:	2100      	movs	r1, #0
 800ff76:	f7fb ff51 	bl	800be1c <memset>
 800ff7a:	e7f4      	b.n	800ff66 <_calloc_r+0x86>

0800ff7c <quorem>:
 800ff7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7e:	6902      	ldr	r2, [r0, #16]
 800ff80:	690b      	ldr	r3, [r1, #16]
 800ff82:	b089      	sub	sp, #36	; 0x24
 800ff84:	0007      	movs	r7, r0
 800ff86:	9104      	str	r1, [sp, #16]
 800ff88:	2000      	movs	r0, #0
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	db69      	blt.n	8010062 <quorem+0xe6>
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	009c      	lsls	r4, r3, #2
 800ff92:	9301      	str	r3, [sp, #4]
 800ff94:	000b      	movs	r3, r1
 800ff96:	3314      	adds	r3, #20
 800ff98:	9306      	str	r3, [sp, #24]
 800ff9a:	191b      	adds	r3, r3, r4
 800ff9c:	9305      	str	r3, [sp, #20]
 800ff9e:	003b      	movs	r3, r7
 800ffa0:	3314      	adds	r3, #20
 800ffa2:	9303      	str	r3, [sp, #12]
 800ffa4:	191c      	adds	r4, r3, r4
 800ffa6:	9b05      	ldr	r3, [sp, #20]
 800ffa8:	6826      	ldr	r6, [r4, #0]
 800ffaa:	681d      	ldr	r5, [r3, #0]
 800ffac:	0030      	movs	r0, r6
 800ffae:	3501      	adds	r5, #1
 800ffb0:	0029      	movs	r1, r5
 800ffb2:	f7f0 f8c3 	bl	800013c <__udivsi3>
 800ffb6:	9002      	str	r0, [sp, #8]
 800ffb8:	42ae      	cmp	r6, r5
 800ffba:	d329      	bcc.n	8010010 <quorem+0x94>
 800ffbc:	9b06      	ldr	r3, [sp, #24]
 800ffbe:	2600      	movs	r6, #0
 800ffc0:	469c      	mov	ip, r3
 800ffc2:	9d03      	ldr	r5, [sp, #12]
 800ffc4:	9606      	str	r6, [sp, #24]
 800ffc6:	4662      	mov	r2, ip
 800ffc8:	ca08      	ldmia	r2!, {r3}
 800ffca:	6828      	ldr	r0, [r5, #0]
 800ffcc:	4694      	mov	ip, r2
 800ffce:	9a02      	ldr	r2, [sp, #8]
 800ffd0:	b299      	uxth	r1, r3
 800ffd2:	4351      	muls	r1, r2
 800ffd4:	0c1b      	lsrs	r3, r3, #16
 800ffd6:	4353      	muls	r3, r2
 800ffd8:	1989      	adds	r1, r1, r6
 800ffda:	0c0a      	lsrs	r2, r1, #16
 800ffdc:	189b      	adds	r3, r3, r2
 800ffde:	9307      	str	r3, [sp, #28]
 800ffe0:	0c1e      	lsrs	r6, r3, #16
 800ffe2:	9b06      	ldr	r3, [sp, #24]
 800ffe4:	b282      	uxth	r2, r0
 800ffe6:	18d2      	adds	r2, r2, r3
 800ffe8:	466b      	mov	r3, sp
 800ffea:	b289      	uxth	r1, r1
 800ffec:	8b9b      	ldrh	r3, [r3, #28]
 800ffee:	1a52      	subs	r2, r2, r1
 800fff0:	0c01      	lsrs	r1, r0, #16
 800fff2:	1ac9      	subs	r1, r1, r3
 800fff4:	1413      	asrs	r3, r2, #16
 800fff6:	18cb      	adds	r3, r1, r3
 800fff8:	1419      	asrs	r1, r3, #16
 800fffa:	b292      	uxth	r2, r2
 800fffc:	041b      	lsls	r3, r3, #16
 800fffe:	4313      	orrs	r3, r2
 8010000:	c508      	stmia	r5!, {r3}
 8010002:	9b05      	ldr	r3, [sp, #20]
 8010004:	9106      	str	r1, [sp, #24]
 8010006:	4563      	cmp	r3, ip
 8010008:	d2dd      	bcs.n	800ffc6 <quorem+0x4a>
 801000a:	6823      	ldr	r3, [r4, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d030      	beq.n	8010072 <quorem+0xf6>
 8010010:	0038      	movs	r0, r7
 8010012:	9904      	ldr	r1, [sp, #16]
 8010014:	f7fc ff04 	bl	800ce20 <__mcmp>
 8010018:	2800      	cmp	r0, #0
 801001a:	db21      	blt.n	8010060 <quorem+0xe4>
 801001c:	0038      	movs	r0, r7
 801001e:	2600      	movs	r6, #0
 8010020:	9b02      	ldr	r3, [sp, #8]
 8010022:	9c04      	ldr	r4, [sp, #16]
 8010024:	3301      	adds	r3, #1
 8010026:	9302      	str	r3, [sp, #8]
 8010028:	3014      	adds	r0, #20
 801002a:	3414      	adds	r4, #20
 801002c:	6803      	ldr	r3, [r0, #0]
 801002e:	cc02      	ldmia	r4!, {r1}
 8010030:	b29d      	uxth	r5, r3
 8010032:	19ad      	adds	r5, r5, r6
 8010034:	b28a      	uxth	r2, r1
 8010036:	1aaa      	subs	r2, r5, r2
 8010038:	0c09      	lsrs	r1, r1, #16
 801003a:	0c1b      	lsrs	r3, r3, #16
 801003c:	1a5b      	subs	r3, r3, r1
 801003e:	1411      	asrs	r1, r2, #16
 8010040:	185b      	adds	r3, r3, r1
 8010042:	141e      	asrs	r6, r3, #16
 8010044:	b292      	uxth	r2, r2
 8010046:	041b      	lsls	r3, r3, #16
 8010048:	4313      	orrs	r3, r2
 801004a:	c008      	stmia	r0!, {r3}
 801004c:	9b05      	ldr	r3, [sp, #20]
 801004e:	42a3      	cmp	r3, r4
 8010050:	d2ec      	bcs.n	801002c <quorem+0xb0>
 8010052:	9b01      	ldr	r3, [sp, #4]
 8010054:	9a03      	ldr	r2, [sp, #12]
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	18d3      	adds	r3, r2, r3
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	2a00      	cmp	r2, #0
 801005e:	d015      	beq.n	801008c <quorem+0x110>
 8010060:	9802      	ldr	r0, [sp, #8]
 8010062:	b009      	add	sp, #36	; 0x24
 8010064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010066:	6823      	ldr	r3, [r4, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d106      	bne.n	801007a <quorem+0xfe>
 801006c:	9b01      	ldr	r3, [sp, #4]
 801006e:	3b01      	subs	r3, #1
 8010070:	9301      	str	r3, [sp, #4]
 8010072:	9b03      	ldr	r3, [sp, #12]
 8010074:	3c04      	subs	r4, #4
 8010076:	42a3      	cmp	r3, r4
 8010078:	d3f5      	bcc.n	8010066 <quorem+0xea>
 801007a:	9b01      	ldr	r3, [sp, #4]
 801007c:	613b      	str	r3, [r7, #16]
 801007e:	e7c7      	b.n	8010010 <quorem+0x94>
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	2a00      	cmp	r2, #0
 8010084:	d106      	bne.n	8010094 <quorem+0x118>
 8010086:	9a01      	ldr	r2, [sp, #4]
 8010088:	3a01      	subs	r2, #1
 801008a:	9201      	str	r2, [sp, #4]
 801008c:	9a03      	ldr	r2, [sp, #12]
 801008e:	3b04      	subs	r3, #4
 8010090:	429a      	cmp	r2, r3
 8010092:	d3f5      	bcc.n	8010080 <quorem+0x104>
 8010094:	9b01      	ldr	r3, [sp, #4]
 8010096:	613b      	str	r3, [r7, #16]
 8010098:	e7e2      	b.n	8010060 <quorem+0xe4>
	...

0801009c <_dtoa_r>:
 801009c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801009e:	0014      	movs	r4, r2
 80100a0:	001d      	movs	r5, r3
 80100a2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80100a4:	b09d      	sub	sp, #116	; 0x74
 80100a6:	9408      	str	r4, [sp, #32]
 80100a8:	9509      	str	r5, [sp, #36]	; 0x24
 80100aa:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80100ac:	9004      	str	r0, [sp, #16]
 80100ae:	2900      	cmp	r1, #0
 80100b0:	d009      	beq.n	80100c6 <_dtoa_r+0x2a>
 80100b2:	2301      	movs	r3, #1
 80100b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80100b6:	4093      	lsls	r3, r2
 80100b8:	604a      	str	r2, [r1, #4]
 80100ba:	608b      	str	r3, [r1, #8]
 80100bc:	f7fc fc56 	bl	800c96c <_Bfree>
 80100c0:	2300      	movs	r3, #0
 80100c2:	9a04      	ldr	r2, [sp, #16]
 80100c4:	6393      	str	r3, [r2, #56]	; 0x38
 80100c6:	2d00      	cmp	r5, #0
 80100c8:	da1e      	bge.n	8010108 <_dtoa_r+0x6c>
 80100ca:	2301      	movs	r3, #1
 80100cc:	6033      	str	r3, [r6, #0]
 80100ce:	006b      	lsls	r3, r5, #1
 80100d0:	085b      	lsrs	r3, r3, #1
 80100d2:	9309      	str	r3, [sp, #36]	; 0x24
 80100d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80100d6:	4bb5      	ldr	r3, [pc, #724]	; (80103ac <_dtoa_r+0x310>)
 80100d8:	4ab4      	ldr	r2, [pc, #720]	; (80103ac <_dtoa_r+0x310>)
 80100da:	403b      	ands	r3, r7
 80100dc:	4293      	cmp	r3, r2
 80100de:	d116      	bne.n	801010e <_dtoa_r+0x72>
 80100e0:	4bb3      	ldr	r3, [pc, #716]	; (80103b0 <_dtoa_r+0x314>)
 80100e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80100e4:	6013      	str	r3, [r2, #0]
 80100e6:	033b      	lsls	r3, r7, #12
 80100e8:	0b1b      	lsrs	r3, r3, #12
 80100ea:	4323      	orrs	r3, r4
 80100ec:	d101      	bne.n	80100f2 <_dtoa_r+0x56>
 80100ee:	f000 fdb2 	bl	8010c56 <_dtoa_r+0xbba>
 80100f2:	4bb0      	ldr	r3, [pc, #704]	; (80103b4 <_dtoa_r+0x318>)
 80100f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80100f6:	9306      	str	r3, [sp, #24]
 80100f8:	2a00      	cmp	r2, #0
 80100fa:	d002      	beq.n	8010102 <_dtoa_r+0x66>
 80100fc:	4bae      	ldr	r3, [pc, #696]	; (80103b8 <_dtoa_r+0x31c>)
 80100fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010100:	6013      	str	r3, [r2, #0]
 8010102:	9806      	ldr	r0, [sp, #24]
 8010104:	b01d      	add	sp, #116	; 0x74
 8010106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010108:	2300      	movs	r3, #0
 801010a:	6033      	str	r3, [r6, #0]
 801010c:	e7e2      	b.n	80100d4 <_dtoa_r+0x38>
 801010e:	9a08      	ldr	r2, [sp, #32]
 8010110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010112:	9210      	str	r2, [sp, #64]	; 0x40
 8010114:	9311      	str	r3, [sp, #68]	; 0x44
 8010116:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010118:	9911      	ldr	r1, [sp, #68]	; 0x44
 801011a:	2200      	movs	r2, #0
 801011c:	2300      	movs	r3, #0
 801011e:	f7f0 f993 	bl	8000448 <__aeabi_dcmpeq>
 8010122:	1e06      	subs	r6, r0, #0
 8010124:	d009      	beq.n	801013a <_dtoa_r+0x9e>
 8010126:	2301      	movs	r3, #1
 8010128:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801012a:	6013      	str	r3, [r2, #0]
 801012c:	4ba3      	ldr	r3, [pc, #652]	; (80103bc <_dtoa_r+0x320>)
 801012e:	9306      	str	r3, [sp, #24]
 8010130:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010132:	2b00      	cmp	r3, #0
 8010134:	d0e5      	beq.n	8010102 <_dtoa_r+0x66>
 8010136:	4ba2      	ldr	r3, [pc, #648]	; (80103c0 <_dtoa_r+0x324>)
 8010138:	e7e1      	b.n	80100fe <_dtoa_r+0x62>
 801013a:	ab1a      	add	r3, sp, #104	; 0x68
 801013c:	9301      	str	r3, [sp, #4]
 801013e:	ab1b      	add	r3, sp, #108	; 0x6c
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	9804      	ldr	r0, [sp, #16]
 8010144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010148:	f7fc ff86 	bl	800d058 <__d2b>
 801014c:	007a      	lsls	r2, r7, #1
 801014e:	9005      	str	r0, [sp, #20]
 8010150:	0d52      	lsrs	r2, r2, #21
 8010152:	d100      	bne.n	8010156 <_dtoa_r+0xba>
 8010154:	e07b      	b.n	801024e <_dtoa_r+0x1b2>
 8010156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010158:	9617      	str	r6, [sp, #92]	; 0x5c
 801015a:	0319      	lsls	r1, r3, #12
 801015c:	4b99      	ldr	r3, [pc, #612]	; (80103c4 <_dtoa_r+0x328>)
 801015e:	0b09      	lsrs	r1, r1, #12
 8010160:	430b      	orrs	r3, r1
 8010162:	4999      	ldr	r1, [pc, #612]	; (80103c8 <_dtoa_r+0x32c>)
 8010164:	1857      	adds	r7, r2, r1
 8010166:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010168:	9911      	ldr	r1, [sp, #68]	; 0x44
 801016a:	0019      	movs	r1, r3
 801016c:	2200      	movs	r2, #0
 801016e:	4b97      	ldr	r3, [pc, #604]	; (80103cc <_dtoa_r+0x330>)
 8010170:	f7f1 fd3e 	bl	8001bf0 <__aeabi_dsub>
 8010174:	4a96      	ldr	r2, [pc, #600]	; (80103d0 <_dtoa_r+0x334>)
 8010176:	4b97      	ldr	r3, [pc, #604]	; (80103d4 <_dtoa_r+0x338>)
 8010178:	f7f1 fa78 	bl	800166c <__aeabi_dmul>
 801017c:	4a96      	ldr	r2, [pc, #600]	; (80103d8 <_dtoa_r+0x33c>)
 801017e:	4b97      	ldr	r3, [pc, #604]	; (80103dc <_dtoa_r+0x340>)
 8010180:	f7f0 fb1a 	bl	80007b8 <__aeabi_dadd>
 8010184:	0004      	movs	r4, r0
 8010186:	0038      	movs	r0, r7
 8010188:	000d      	movs	r5, r1
 801018a:	f7f2 f907 	bl	800239c <__aeabi_i2d>
 801018e:	4a94      	ldr	r2, [pc, #592]	; (80103e0 <_dtoa_r+0x344>)
 8010190:	4b94      	ldr	r3, [pc, #592]	; (80103e4 <_dtoa_r+0x348>)
 8010192:	f7f1 fa6b 	bl	800166c <__aeabi_dmul>
 8010196:	0002      	movs	r2, r0
 8010198:	000b      	movs	r3, r1
 801019a:	0020      	movs	r0, r4
 801019c:	0029      	movs	r1, r5
 801019e:	f7f0 fb0b 	bl	80007b8 <__aeabi_dadd>
 80101a2:	0004      	movs	r4, r0
 80101a4:	000d      	movs	r5, r1
 80101a6:	f7f2 f8c3 	bl	8002330 <__aeabi_d2iz>
 80101aa:	2200      	movs	r2, #0
 80101ac:	9003      	str	r0, [sp, #12]
 80101ae:	2300      	movs	r3, #0
 80101b0:	0020      	movs	r0, r4
 80101b2:	0029      	movs	r1, r5
 80101b4:	f7f0 f94e 	bl	8000454 <__aeabi_dcmplt>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d00b      	beq.n	80101d4 <_dtoa_r+0x138>
 80101bc:	9803      	ldr	r0, [sp, #12]
 80101be:	f7f2 f8ed 	bl	800239c <__aeabi_i2d>
 80101c2:	002b      	movs	r3, r5
 80101c4:	0022      	movs	r2, r4
 80101c6:	f7f0 f93f 	bl	8000448 <__aeabi_dcmpeq>
 80101ca:	4243      	negs	r3, r0
 80101cc:	4158      	adcs	r0, r3
 80101ce:	9b03      	ldr	r3, [sp, #12]
 80101d0:	1a1b      	subs	r3, r3, r0
 80101d2:	9303      	str	r3, [sp, #12]
 80101d4:	2301      	movs	r3, #1
 80101d6:	9316      	str	r3, [sp, #88]	; 0x58
 80101d8:	9b03      	ldr	r3, [sp, #12]
 80101da:	2b16      	cmp	r3, #22
 80101dc:	d810      	bhi.n	8010200 <_dtoa_r+0x164>
 80101de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80101e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80101e2:	9a03      	ldr	r2, [sp, #12]
 80101e4:	4b80      	ldr	r3, [pc, #512]	; (80103e8 <_dtoa_r+0x34c>)
 80101e6:	00d2      	lsls	r2, r2, #3
 80101e8:	189b      	adds	r3, r3, r2
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	f7f0 f931 	bl	8000454 <__aeabi_dcmplt>
 80101f2:	2800      	cmp	r0, #0
 80101f4:	d047      	beq.n	8010286 <_dtoa_r+0x1ea>
 80101f6:	9b03      	ldr	r3, [sp, #12]
 80101f8:	3b01      	subs	r3, #1
 80101fa:	9303      	str	r3, [sp, #12]
 80101fc:	2300      	movs	r3, #0
 80101fe:	9316      	str	r3, [sp, #88]	; 0x58
 8010200:	2200      	movs	r2, #0
 8010202:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010204:	920a      	str	r2, [sp, #40]	; 0x28
 8010206:	1bdb      	subs	r3, r3, r7
 8010208:	1e5a      	subs	r2, r3, #1
 801020a:	d53e      	bpl.n	801028a <_dtoa_r+0x1ee>
 801020c:	2201      	movs	r2, #1
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	930a      	str	r3, [sp, #40]	; 0x28
 8010212:	2300      	movs	r3, #0
 8010214:	930c      	str	r3, [sp, #48]	; 0x30
 8010216:	9b03      	ldr	r3, [sp, #12]
 8010218:	2b00      	cmp	r3, #0
 801021a:	db38      	blt.n	801028e <_dtoa_r+0x1f2>
 801021c:	9a03      	ldr	r2, [sp, #12]
 801021e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010220:	4694      	mov	ip, r2
 8010222:	4463      	add	r3, ip
 8010224:	930c      	str	r3, [sp, #48]	; 0x30
 8010226:	2300      	movs	r3, #0
 8010228:	9213      	str	r2, [sp, #76]	; 0x4c
 801022a:	930d      	str	r3, [sp, #52]	; 0x34
 801022c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801022e:	2401      	movs	r4, #1
 8010230:	2b09      	cmp	r3, #9
 8010232:	d867      	bhi.n	8010304 <_dtoa_r+0x268>
 8010234:	2b05      	cmp	r3, #5
 8010236:	dd02      	ble.n	801023e <_dtoa_r+0x1a2>
 8010238:	2400      	movs	r4, #0
 801023a:	3b04      	subs	r3, #4
 801023c:	9322      	str	r3, [sp, #136]	; 0x88
 801023e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010240:	1e98      	subs	r0, r3, #2
 8010242:	2803      	cmp	r0, #3
 8010244:	d867      	bhi.n	8010316 <_dtoa_r+0x27a>
 8010246:	f7ef ff65 	bl	8000114 <__gnu_thumb1_case_uqi>
 801024a:	3a2b      	.short	0x3a2b
 801024c:	5b38      	.short	0x5b38
 801024e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010250:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010252:	18f6      	adds	r6, r6, r3
 8010254:	4b65      	ldr	r3, [pc, #404]	; (80103ec <_dtoa_r+0x350>)
 8010256:	18f2      	adds	r2, r6, r3
 8010258:	2a20      	cmp	r2, #32
 801025a:	dd0f      	ble.n	801027c <_dtoa_r+0x1e0>
 801025c:	2340      	movs	r3, #64	; 0x40
 801025e:	1a9b      	subs	r3, r3, r2
 8010260:	409f      	lsls	r7, r3
 8010262:	4b63      	ldr	r3, [pc, #396]	; (80103f0 <_dtoa_r+0x354>)
 8010264:	0038      	movs	r0, r7
 8010266:	18f3      	adds	r3, r6, r3
 8010268:	40dc      	lsrs	r4, r3
 801026a:	4320      	orrs	r0, r4
 801026c:	f7f2 f8c6 	bl	80023fc <__aeabi_ui2d>
 8010270:	2201      	movs	r2, #1
 8010272:	4b60      	ldr	r3, [pc, #384]	; (80103f4 <_dtoa_r+0x358>)
 8010274:	1e77      	subs	r7, r6, #1
 8010276:	18cb      	adds	r3, r1, r3
 8010278:	9217      	str	r2, [sp, #92]	; 0x5c
 801027a:	e776      	b.n	801016a <_dtoa_r+0xce>
 801027c:	2320      	movs	r3, #32
 801027e:	0020      	movs	r0, r4
 8010280:	1a9b      	subs	r3, r3, r2
 8010282:	4098      	lsls	r0, r3
 8010284:	e7f2      	b.n	801026c <_dtoa_r+0x1d0>
 8010286:	9016      	str	r0, [sp, #88]	; 0x58
 8010288:	e7ba      	b.n	8010200 <_dtoa_r+0x164>
 801028a:	920c      	str	r2, [sp, #48]	; 0x30
 801028c:	e7c3      	b.n	8010216 <_dtoa_r+0x17a>
 801028e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010290:	9a03      	ldr	r2, [sp, #12]
 8010292:	1a9b      	subs	r3, r3, r2
 8010294:	930a      	str	r3, [sp, #40]	; 0x28
 8010296:	4253      	negs	r3, r2
 8010298:	930d      	str	r3, [sp, #52]	; 0x34
 801029a:	2300      	movs	r3, #0
 801029c:	9313      	str	r3, [sp, #76]	; 0x4c
 801029e:	e7c5      	b.n	801022c <_dtoa_r+0x190>
 80102a0:	2300      	movs	r3, #0
 80102a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80102a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80102a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80102a8:	9307      	str	r3, [sp, #28]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	dc13      	bgt.n	80102d6 <_dtoa_r+0x23a>
 80102ae:	2301      	movs	r3, #1
 80102b0:	001a      	movs	r2, r3
 80102b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80102b4:	9307      	str	r3, [sp, #28]
 80102b6:	9223      	str	r2, [sp, #140]	; 0x8c
 80102b8:	e00d      	b.n	80102d6 <_dtoa_r+0x23a>
 80102ba:	2301      	movs	r3, #1
 80102bc:	e7f1      	b.n	80102a2 <_dtoa_r+0x206>
 80102be:	2300      	movs	r3, #0
 80102c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80102c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80102c4:	4694      	mov	ip, r2
 80102c6:	9b03      	ldr	r3, [sp, #12]
 80102c8:	4463      	add	r3, ip
 80102ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80102cc:	3301      	adds	r3, #1
 80102ce:	9307      	str	r3, [sp, #28]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	dc00      	bgt.n	80102d6 <_dtoa_r+0x23a>
 80102d4:	2301      	movs	r3, #1
 80102d6:	2100      	movs	r1, #0
 80102d8:	2204      	movs	r2, #4
 80102da:	0010      	movs	r0, r2
 80102dc:	3014      	adds	r0, #20
 80102de:	4298      	cmp	r0, r3
 80102e0:	d91d      	bls.n	801031e <_dtoa_r+0x282>
 80102e2:	9b04      	ldr	r3, [sp, #16]
 80102e4:	0018      	movs	r0, r3
 80102e6:	63d9      	str	r1, [r3, #60]	; 0x3c
 80102e8:	f7fc fb18 	bl	800c91c <_Balloc>
 80102ec:	9006      	str	r0, [sp, #24]
 80102ee:	2800      	cmp	r0, #0
 80102f0:	d118      	bne.n	8010324 <_dtoa_r+0x288>
 80102f2:	21b0      	movs	r1, #176	; 0xb0
 80102f4:	4b40      	ldr	r3, [pc, #256]	; (80103f8 <_dtoa_r+0x35c>)
 80102f6:	4841      	ldr	r0, [pc, #260]	; (80103fc <_dtoa_r+0x360>)
 80102f8:	9a06      	ldr	r2, [sp, #24]
 80102fa:	31ff      	adds	r1, #255	; 0xff
 80102fc:	f7ff fdd2 	bl	800fea4 <__assert_func>
 8010300:	2301      	movs	r3, #1
 8010302:	e7dd      	b.n	80102c0 <_dtoa_r+0x224>
 8010304:	2300      	movs	r3, #0
 8010306:	940f      	str	r4, [sp, #60]	; 0x3c
 8010308:	9322      	str	r3, [sp, #136]	; 0x88
 801030a:	3b01      	subs	r3, #1
 801030c:	930b      	str	r3, [sp, #44]	; 0x2c
 801030e:	9307      	str	r3, [sp, #28]
 8010310:	2200      	movs	r2, #0
 8010312:	3313      	adds	r3, #19
 8010314:	e7cf      	b.n	80102b6 <_dtoa_r+0x21a>
 8010316:	2301      	movs	r3, #1
 8010318:	930f      	str	r3, [sp, #60]	; 0x3c
 801031a:	3b02      	subs	r3, #2
 801031c:	e7f6      	b.n	801030c <_dtoa_r+0x270>
 801031e:	3101      	adds	r1, #1
 8010320:	0052      	lsls	r2, r2, #1
 8010322:	e7da      	b.n	80102da <_dtoa_r+0x23e>
 8010324:	9b04      	ldr	r3, [sp, #16]
 8010326:	9a06      	ldr	r2, [sp, #24]
 8010328:	639a      	str	r2, [r3, #56]	; 0x38
 801032a:	9b07      	ldr	r3, [sp, #28]
 801032c:	2b0e      	cmp	r3, #14
 801032e:	d900      	bls.n	8010332 <_dtoa_r+0x296>
 8010330:	e0e3      	b.n	80104fa <_dtoa_r+0x45e>
 8010332:	2c00      	cmp	r4, #0
 8010334:	d100      	bne.n	8010338 <_dtoa_r+0x29c>
 8010336:	e0e0      	b.n	80104fa <_dtoa_r+0x45e>
 8010338:	9b03      	ldr	r3, [sp, #12]
 801033a:	2b00      	cmp	r3, #0
 801033c:	dd62      	ble.n	8010404 <_dtoa_r+0x368>
 801033e:	210f      	movs	r1, #15
 8010340:	9a03      	ldr	r2, [sp, #12]
 8010342:	4b29      	ldr	r3, [pc, #164]	; (80103e8 <_dtoa_r+0x34c>)
 8010344:	400a      	ands	r2, r1
 8010346:	00d2      	lsls	r2, r2, #3
 8010348:	189b      	adds	r3, r3, r2
 801034a:	681e      	ldr	r6, [r3, #0]
 801034c:	685f      	ldr	r7, [r3, #4]
 801034e:	9b03      	ldr	r3, [sp, #12]
 8010350:	2402      	movs	r4, #2
 8010352:	111d      	asrs	r5, r3, #4
 8010354:	05db      	lsls	r3, r3, #23
 8010356:	d50a      	bpl.n	801036e <_dtoa_r+0x2d2>
 8010358:	4b29      	ldr	r3, [pc, #164]	; (8010400 <_dtoa_r+0x364>)
 801035a:	400d      	ands	r5, r1
 801035c:	6a1a      	ldr	r2, [r3, #32]
 801035e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010360:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010362:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010364:	f7f0 fd88 	bl	8000e78 <__aeabi_ddiv>
 8010368:	9008      	str	r0, [sp, #32]
 801036a:	9109      	str	r1, [sp, #36]	; 0x24
 801036c:	3401      	adds	r4, #1
 801036e:	4b24      	ldr	r3, [pc, #144]	; (8010400 <_dtoa_r+0x364>)
 8010370:	930e      	str	r3, [sp, #56]	; 0x38
 8010372:	2d00      	cmp	r5, #0
 8010374:	d108      	bne.n	8010388 <_dtoa_r+0x2ec>
 8010376:	9808      	ldr	r0, [sp, #32]
 8010378:	9909      	ldr	r1, [sp, #36]	; 0x24
 801037a:	0032      	movs	r2, r6
 801037c:	003b      	movs	r3, r7
 801037e:	f7f0 fd7b 	bl	8000e78 <__aeabi_ddiv>
 8010382:	9008      	str	r0, [sp, #32]
 8010384:	9109      	str	r1, [sp, #36]	; 0x24
 8010386:	e058      	b.n	801043a <_dtoa_r+0x39e>
 8010388:	2301      	movs	r3, #1
 801038a:	421d      	tst	r5, r3
 801038c:	d009      	beq.n	80103a2 <_dtoa_r+0x306>
 801038e:	18e4      	adds	r4, r4, r3
 8010390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010392:	0030      	movs	r0, r6
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	0039      	movs	r1, r7
 801039a:	f7f1 f967 	bl	800166c <__aeabi_dmul>
 801039e:	0006      	movs	r6, r0
 80103a0:	000f      	movs	r7, r1
 80103a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103a4:	106d      	asrs	r5, r5, #1
 80103a6:	3308      	adds	r3, #8
 80103a8:	e7e2      	b.n	8010370 <_dtoa_r+0x2d4>
 80103aa:	46c0      	nop			; (mov r8, r8)
 80103ac:	7ff00000 	.word	0x7ff00000
 80103b0:	0000270f 	.word	0x0000270f
 80103b4:	0801470d 	.word	0x0801470d
 80103b8:	08014710 	.word	0x08014710
 80103bc:	0801467e 	.word	0x0801467e
 80103c0:	0801467f 	.word	0x0801467f
 80103c4:	3ff00000 	.word	0x3ff00000
 80103c8:	fffffc01 	.word	0xfffffc01
 80103cc:	3ff80000 	.word	0x3ff80000
 80103d0:	636f4361 	.word	0x636f4361
 80103d4:	3fd287a7 	.word	0x3fd287a7
 80103d8:	8b60c8b3 	.word	0x8b60c8b3
 80103dc:	3fc68a28 	.word	0x3fc68a28
 80103e0:	509f79fb 	.word	0x509f79fb
 80103e4:	3fd34413 	.word	0x3fd34413
 80103e8:	08014578 	.word	0x08014578
 80103ec:	00000432 	.word	0x00000432
 80103f0:	00000412 	.word	0x00000412
 80103f4:	fe100000 	.word	0xfe100000
 80103f8:	08014481 	.word	0x08014481
 80103fc:	08014711 	.word	0x08014711
 8010400:	08014550 	.word	0x08014550
 8010404:	9b03      	ldr	r3, [sp, #12]
 8010406:	2402      	movs	r4, #2
 8010408:	2b00      	cmp	r3, #0
 801040a:	d016      	beq.n	801043a <_dtoa_r+0x39e>
 801040c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801040e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010410:	220f      	movs	r2, #15
 8010412:	425d      	negs	r5, r3
 8010414:	402a      	ands	r2, r5
 8010416:	4bdd      	ldr	r3, [pc, #884]	; (801078c <_dtoa_r+0x6f0>)
 8010418:	00d2      	lsls	r2, r2, #3
 801041a:	189b      	adds	r3, r3, r2
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	f7f1 f924 	bl	800166c <__aeabi_dmul>
 8010424:	2701      	movs	r7, #1
 8010426:	2300      	movs	r3, #0
 8010428:	9008      	str	r0, [sp, #32]
 801042a:	9109      	str	r1, [sp, #36]	; 0x24
 801042c:	4ed8      	ldr	r6, [pc, #864]	; (8010790 <_dtoa_r+0x6f4>)
 801042e:	112d      	asrs	r5, r5, #4
 8010430:	2d00      	cmp	r5, #0
 8010432:	d000      	beq.n	8010436 <_dtoa_r+0x39a>
 8010434:	e091      	b.n	801055a <_dtoa_r+0x4be>
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1a3      	bne.n	8010382 <_dtoa_r+0x2e6>
 801043a:	9e08      	ldr	r6, [sp, #32]
 801043c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801043e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010440:	2b00      	cmp	r3, #0
 8010442:	d100      	bne.n	8010446 <_dtoa_r+0x3aa>
 8010444:	e094      	b.n	8010570 <_dtoa_r+0x4d4>
 8010446:	2200      	movs	r2, #0
 8010448:	0030      	movs	r0, r6
 801044a:	0039      	movs	r1, r7
 801044c:	4bd1      	ldr	r3, [pc, #836]	; (8010794 <_dtoa_r+0x6f8>)
 801044e:	f7f0 f801 	bl	8000454 <__aeabi_dcmplt>
 8010452:	2800      	cmp	r0, #0
 8010454:	d100      	bne.n	8010458 <_dtoa_r+0x3bc>
 8010456:	e08b      	b.n	8010570 <_dtoa_r+0x4d4>
 8010458:	9b07      	ldr	r3, [sp, #28]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d100      	bne.n	8010460 <_dtoa_r+0x3c4>
 801045e:	e087      	b.n	8010570 <_dtoa_r+0x4d4>
 8010460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010462:	2b00      	cmp	r3, #0
 8010464:	dd45      	ble.n	80104f2 <_dtoa_r+0x456>
 8010466:	9b03      	ldr	r3, [sp, #12]
 8010468:	2200      	movs	r2, #0
 801046a:	3b01      	subs	r3, #1
 801046c:	930e      	str	r3, [sp, #56]	; 0x38
 801046e:	0030      	movs	r0, r6
 8010470:	4bc9      	ldr	r3, [pc, #804]	; (8010798 <_dtoa_r+0x6fc>)
 8010472:	0039      	movs	r1, r7
 8010474:	f7f1 f8fa 	bl	800166c <__aeabi_dmul>
 8010478:	9008      	str	r0, [sp, #32]
 801047a:	9109      	str	r1, [sp, #36]	; 0x24
 801047c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801047e:	3401      	adds	r4, #1
 8010480:	0020      	movs	r0, r4
 8010482:	9e08      	ldr	r6, [sp, #32]
 8010484:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010486:	9312      	str	r3, [sp, #72]	; 0x48
 8010488:	f7f1 ff88 	bl	800239c <__aeabi_i2d>
 801048c:	0032      	movs	r2, r6
 801048e:	003b      	movs	r3, r7
 8010490:	f7f1 f8ec 	bl	800166c <__aeabi_dmul>
 8010494:	2200      	movs	r2, #0
 8010496:	4bc1      	ldr	r3, [pc, #772]	; (801079c <_dtoa_r+0x700>)
 8010498:	f7f0 f98e 	bl	80007b8 <__aeabi_dadd>
 801049c:	4ac0      	ldr	r2, [pc, #768]	; (80107a0 <_dtoa_r+0x704>)
 801049e:	9014      	str	r0, [sp, #80]	; 0x50
 80104a0:	9115      	str	r1, [sp, #84]	; 0x54
 80104a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80104a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80104a6:	4694      	mov	ip, r2
 80104a8:	9308      	str	r3, [sp, #32]
 80104aa:	9409      	str	r4, [sp, #36]	; 0x24
 80104ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104ae:	4463      	add	r3, ip
 80104b0:	9318      	str	r3, [sp, #96]	; 0x60
 80104b2:	9309      	str	r3, [sp, #36]	; 0x24
 80104b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d15e      	bne.n	8010578 <_dtoa_r+0x4dc>
 80104ba:	2200      	movs	r2, #0
 80104bc:	4bb9      	ldr	r3, [pc, #740]	; (80107a4 <_dtoa_r+0x708>)
 80104be:	0030      	movs	r0, r6
 80104c0:	0039      	movs	r1, r7
 80104c2:	f7f1 fb95 	bl	8001bf0 <__aeabi_dsub>
 80104c6:	9a08      	ldr	r2, [sp, #32]
 80104c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80104ca:	0004      	movs	r4, r0
 80104cc:	000d      	movs	r5, r1
 80104ce:	f7ef ffd5 	bl	800047c <__aeabi_dcmpgt>
 80104d2:	2800      	cmp	r0, #0
 80104d4:	d000      	beq.n	80104d8 <_dtoa_r+0x43c>
 80104d6:	e2b3      	b.n	8010a40 <_dtoa_r+0x9a4>
 80104d8:	48b3      	ldr	r0, [pc, #716]	; (80107a8 <_dtoa_r+0x70c>)
 80104da:	9915      	ldr	r1, [sp, #84]	; 0x54
 80104dc:	4684      	mov	ip, r0
 80104de:	4461      	add	r1, ip
 80104e0:	000b      	movs	r3, r1
 80104e2:	0020      	movs	r0, r4
 80104e4:	0029      	movs	r1, r5
 80104e6:	9a08      	ldr	r2, [sp, #32]
 80104e8:	f7ef ffb4 	bl	8000454 <__aeabi_dcmplt>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d000      	beq.n	80104f2 <_dtoa_r+0x456>
 80104f0:	e2a3      	b.n	8010a3a <_dtoa_r+0x99e>
 80104f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80104f6:	9308      	str	r3, [sp, #32]
 80104f8:	9409      	str	r4, [sp, #36]	; 0x24
 80104fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	da00      	bge.n	8010502 <_dtoa_r+0x466>
 8010500:	e179      	b.n	80107f6 <_dtoa_r+0x75a>
 8010502:	9a03      	ldr	r2, [sp, #12]
 8010504:	2a0e      	cmp	r2, #14
 8010506:	dd00      	ble.n	801050a <_dtoa_r+0x46e>
 8010508:	e175      	b.n	80107f6 <_dtoa_r+0x75a>
 801050a:	4ba0      	ldr	r3, [pc, #640]	; (801078c <_dtoa_r+0x6f0>)
 801050c:	00d2      	lsls	r2, r2, #3
 801050e:	189b      	adds	r3, r3, r2
 8010510:	681e      	ldr	r6, [r3, #0]
 8010512:	685f      	ldr	r7, [r3, #4]
 8010514:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010516:	2b00      	cmp	r3, #0
 8010518:	db00      	blt.n	801051c <_dtoa_r+0x480>
 801051a:	e0e5      	b.n	80106e8 <_dtoa_r+0x64c>
 801051c:	9b07      	ldr	r3, [sp, #28]
 801051e:	2b00      	cmp	r3, #0
 8010520:	dd00      	ble.n	8010524 <_dtoa_r+0x488>
 8010522:	e0e1      	b.n	80106e8 <_dtoa_r+0x64c>
 8010524:	d000      	beq.n	8010528 <_dtoa_r+0x48c>
 8010526:	e288      	b.n	8010a3a <_dtoa_r+0x99e>
 8010528:	2200      	movs	r2, #0
 801052a:	0030      	movs	r0, r6
 801052c:	0039      	movs	r1, r7
 801052e:	4b9d      	ldr	r3, [pc, #628]	; (80107a4 <_dtoa_r+0x708>)
 8010530:	f7f1 f89c 	bl	800166c <__aeabi_dmul>
 8010534:	9a08      	ldr	r2, [sp, #32]
 8010536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010538:	f7ef ffaa 	bl	8000490 <__aeabi_dcmpge>
 801053c:	9e07      	ldr	r6, [sp, #28]
 801053e:	0037      	movs	r7, r6
 8010540:	2800      	cmp	r0, #0
 8010542:	d000      	beq.n	8010546 <_dtoa_r+0x4aa>
 8010544:	e25f      	b.n	8010a06 <_dtoa_r+0x96a>
 8010546:	9b06      	ldr	r3, [sp, #24]
 8010548:	9a06      	ldr	r2, [sp, #24]
 801054a:	3301      	adds	r3, #1
 801054c:	9308      	str	r3, [sp, #32]
 801054e:	2331      	movs	r3, #49	; 0x31
 8010550:	7013      	strb	r3, [r2, #0]
 8010552:	9b03      	ldr	r3, [sp, #12]
 8010554:	3301      	adds	r3, #1
 8010556:	9303      	str	r3, [sp, #12]
 8010558:	e25a      	b.n	8010a10 <_dtoa_r+0x974>
 801055a:	423d      	tst	r5, r7
 801055c:	d005      	beq.n	801056a <_dtoa_r+0x4ce>
 801055e:	6832      	ldr	r2, [r6, #0]
 8010560:	6873      	ldr	r3, [r6, #4]
 8010562:	f7f1 f883 	bl	800166c <__aeabi_dmul>
 8010566:	003b      	movs	r3, r7
 8010568:	3401      	adds	r4, #1
 801056a:	106d      	asrs	r5, r5, #1
 801056c:	3608      	adds	r6, #8
 801056e:	e75f      	b.n	8010430 <_dtoa_r+0x394>
 8010570:	9b03      	ldr	r3, [sp, #12]
 8010572:	930e      	str	r3, [sp, #56]	; 0x38
 8010574:	9b07      	ldr	r3, [sp, #28]
 8010576:	e783      	b.n	8010480 <_dtoa_r+0x3e4>
 8010578:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801057a:	4b84      	ldr	r3, [pc, #528]	; (801078c <_dtoa_r+0x6f0>)
 801057c:	3a01      	subs	r2, #1
 801057e:	00d2      	lsls	r2, r2, #3
 8010580:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010582:	189b      	adds	r3, r3, r2
 8010584:	9c08      	ldr	r4, [sp, #32]
 8010586:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	685b      	ldr	r3, [r3, #4]
 801058c:	2900      	cmp	r1, #0
 801058e:	d051      	beq.n	8010634 <_dtoa_r+0x598>
 8010590:	2000      	movs	r0, #0
 8010592:	4986      	ldr	r1, [pc, #536]	; (80107ac <_dtoa_r+0x710>)
 8010594:	f7f0 fc70 	bl	8000e78 <__aeabi_ddiv>
 8010598:	0022      	movs	r2, r4
 801059a:	002b      	movs	r3, r5
 801059c:	f7f1 fb28 	bl	8001bf0 <__aeabi_dsub>
 80105a0:	9a06      	ldr	r2, [sp, #24]
 80105a2:	0004      	movs	r4, r0
 80105a4:	4694      	mov	ip, r2
 80105a6:	000d      	movs	r5, r1
 80105a8:	9b06      	ldr	r3, [sp, #24]
 80105aa:	9314      	str	r3, [sp, #80]	; 0x50
 80105ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80105ae:	4463      	add	r3, ip
 80105b0:	9318      	str	r3, [sp, #96]	; 0x60
 80105b2:	0039      	movs	r1, r7
 80105b4:	0030      	movs	r0, r6
 80105b6:	f7f1 febb 	bl	8002330 <__aeabi_d2iz>
 80105ba:	9012      	str	r0, [sp, #72]	; 0x48
 80105bc:	f7f1 feee 	bl	800239c <__aeabi_i2d>
 80105c0:	0002      	movs	r2, r0
 80105c2:	000b      	movs	r3, r1
 80105c4:	0030      	movs	r0, r6
 80105c6:	0039      	movs	r1, r7
 80105c8:	f7f1 fb12 	bl	8001bf0 <__aeabi_dsub>
 80105cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80105ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80105d0:	3301      	adds	r3, #1
 80105d2:	9308      	str	r3, [sp, #32]
 80105d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80105d6:	0006      	movs	r6, r0
 80105d8:	3330      	adds	r3, #48	; 0x30
 80105da:	7013      	strb	r3, [r2, #0]
 80105dc:	0022      	movs	r2, r4
 80105de:	002b      	movs	r3, r5
 80105e0:	000f      	movs	r7, r1
 80105e2:	f7ef ff37 	bl	8000454 <__aeabi_dcmplt>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	d174      	bne.n	80106d4 <_dtoa_r+0x638>
 80105ea:	0032      	movs	r2, r6
 80105ec:	003b      	movs	r3, r7
 80105ee:	2000      	movs	r0, #0
 80105f0:	4968      	ldr	r1, [pc, #416]	; (8010794 <_dtoa_r+0x6f8>)
 80105f2:	f7f1 fafd 	bl	8001bf0 <__aeabi_dsub>
 80105f6:	0022      	movs	r2, r4
 80105f8:	002b      	movs	r3, r5
 80105fa:	f7ef ff2b 	bl	8000454 <__aeabi_dcmplt>
 80105fe:	2800      	cmp	r0, #0
 8010600:	d000      	beq.n	8010604 <_dtoa_r+0x568>
 8010602:	e0d7      	b.n	80107b4 <_dtoa_r+0x718>
 8010604:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010606:	9a08      	ldr	r2, [sp, #32]
 8010608:	4293      	cmp	r3, r2
 801060a:	d100      	bne.n	801060e <_dtoa_r+0x572>
 801060c:	e771      	b.n	80104f2 <_dtoa_r+0x456>
 801060e:	2200      	movs	r2, #0
 8010610:	0020      	movs	r0, r4
 8010612:	0029      	movs	r1, r5
 8010614:	4b60      	ldr	r3, [pc, #384]	; (8010798 <_dtoa_r+0x6fc>)
 8010616:	f7f1 f829 	bl	800166c <__aeabi_dmul>
 801061a:	4b5f      	ldr	r3, [pc, #380]	; (8010798 <_dtoa_r+0x6fc>)
 801061c:	0004      	movs	r4, r0
 801061e:	000d      	movs	r5, r1
 8010620:	0030      	movs	r0, r6
 8010622:	0039      	movs	r1, r7
 8010624:	2200      	movs	r2, #0
 8010626:	f7f1 f821 	bl	800166c <__aeabi_dmul>
 801062a:	9b08      	ldr	r3, [sp, #32]
 801062c:	0006      	movs	r6, r0
 801062e:	000f      	movs	r7, r1
 8010630:	9314      	str	r3, [sp, #80]	; 0x50
 8010632:	e7be      	b.n	80105b2 <_dtoa_r+0x516>
 8010634:	0020      	movs	r0, r4
 8010636:	0029      	movs	r1, r5
 8010638:	f7f1 f818 	bl	800166c <__aeabi_dmul>
 801063c:	9a06      	ldr	r2, [sp, #24]
 801063e:	9b06      	ldr	r3, [sp, #24]
 8010640:	4694      	mov	ip, r2
 8010642:	9308      	str	r3, [sp, #32]
 8010644:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010646:	9014      	str	r0, [sp, #80]	; 0x50
 8010648:	9115      	str	r1, [sp, #84]	; 0x54
 801064a:	4463      	add	r3, ip
 801064c:	9319      	str	r3, [sp, #100]	; 0x64
 801064e:	0030      	movs	r0, r6
 8010650:	0039      	movs	r1, r7
 8010652:	f7f1 fe6d 	bl	8002330 <__aeabi_d2iz>
 8010656:	9018      	str	r0, [sp, #96]	; 0x60
 8010658:	f7f1 fea0 	bl	800239c <__aeabi_i2d>
 801065c:	0002      	movs	r2, r0
 801065e:	000b      	movs	r3, r1
 8010660:	0030      	movs	r0, r6
 8010662:	0039      	movs	r1, r7
 8010664:	f7f1 fac4 	bl	8001bf0 <__aeabi_dsub>
 8010668:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801066a:	9b08      	ldr	r3, [sp, #32]
 801066c:	3630      	adds	r6, #48	; 0x30
 801066e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010670:	701e      	strb	r6, [r3, #0]
 8010672:	3301      	adds	r3, #1
 8010674:	0004      	movs	r4, r0
 8010676:	000d      	movs	r5, r1
 8010678:	9308      	str	r3, [sp, #32]
 801067a:	4293      	cmp	r3, r2
 801067c:	d12d      	bne.n	80106da <_dtoa_r+0x63e>
 801067e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010680:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010682:	9a06      	ldr	r2, [sp, #24]
 8010684:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010686:	4694      	mov	ip, r2
 8010688:	4463      	add	r3, ip
 801068a:	2200      	movs	r2, #0
 801068c:	9308      	str	r3, [sp, #32]
 801068e:	4b47      	ldr	r3, [pc, #284]	; (80107ac <_dtoa_r+0x710>)
 8010690:	f7f0 f892 	bl	80007b8 <__aeabi_dadd>
 8010694:	0002      	movs	r2, r0
 8010696:	000b      	movs	r3, r1
 8010698:	0020      	movs	r0, r4
 801069a:	0029      	movs	r1, r5
 801069c:	f7ef feee 	bl	800047c <__aeabi_dcmpgt>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d000      	beq.n	80106a6 <_dtoa_r+0x60a>
 80106a4:	e086      	b.n	80107b4 <_dtoa_r+0x718>
 80106a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80106a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106aa:	2000      	movs	r0, #0
 80106ac:	493f      	ldr	r1, [pc, #252]	; (80107ac <_dtoa_r+0x710>)
 80106ae:	f7f1 fa9f 	bl	8001bf0 <__aeabi_dsub>
 80106b2:	0002      	movs	r2, r0
 80106b4:	000b      	movs	r3, r1
 80106b6:	0020      	movs	r0, r4
 80106b8:	0029      	movs	r1, r5
 80106ba:	f7ef fecb 	bl	8000454 <__aeabi_dcmplt>
 80106be:	2800      	cmp	r0, #0
 80106c0:	d100      	bne.n	80106c4 <_dtoa_r+0x628>
 80106c2:	e716      	b.n	80104f2 <_dtoa_r+0x456>
 80106c4:	9b08      	ldr	r3, [sp, #32]
 80106c6:	001a      	movs	r2, r3
 80106c8:	3a01      	subs	r2, #1
 80106ca:	9208      	str	r2, [sp, #32]
 80106cc:	7812      	ldrb	r2, [r2, #0]
 80106ce:	2a30      	cmp	r2, #48	; 0x30
 80106d0:	d0f8      	beq.n	80106c4 <_dtoa_r+0x628>
 80106d2:	9308      	str	r3, [sp, #32]
 80106d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106d6:	9303      	str	r3, [sp, #12]
 80106d8:	e046      	b.n	8010768 <_dtoa_r+0x6cc>
 80106da:	2200      	movs	r2, #0
 80106dc:	4b2e      	ldr	r3, [pc, #184]	; (8010798 <_dtoa_r+0x6fc>)
 80106de:	f7f0 ffc5 	bl	800166c <__aeabi_dmul>
 80106e2:	0006      	movs	r6, r0
 80106e4:	000f      	movs	r7, r1
 80106e6:	e7b2      	b.n	801064e <_dtoa_r+0x5b2>
 80106e8:	9b06      	ldr	r3, [sp, #24]
 80106ea:	9a06      	ldr	r2, [sp, #24]
 80106ec:	930a      	str	r3, [sp, #40]	; 0x28
 80106ee:	9b07      	ldr	r3, [sp, #28]
 80106f0:	9c08      	ldr	r4, [sp, #32]
 80106f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80106f4:	3b01      	subs	r3, #1
 80106f6:	189b      	adds	r3, r3, r2
 80106f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80106fa:	0032      	movs	r2, r6
 80106fc:	003b      	movs	r3, r7
 80106fe:	0020      	movs	r0, r4
 8010700:	0029      	movs	r1, r5
 8010702:	f7f0 fbb9 	bl	8000e78 <__aeabi_ddiv>
 8010706:	f7f1 fe13 	bl	8002330 <__aeabi_d2iz>
 801070a:	9007      	str	r0, [sp, #28]
 801070c:	f7f1 fe46 	bl	800239c <__aeabi_i2d>
 8010710:	0032      	movs	r2, r6
 8010712:	003b      	movs	r3, r7
 8010714:	f7f0 ffaa 	bl	800166c <__aeabi_dmul>
 8010718:	0002      	movs	r2, r0
 801071a:	000b      	movs	r3, r1
 801071c:	0020      	movs	r0, r4
 801071e:	0029      	movs	r1, r5
 8010720:	f7f1 fa66 	bl	8001bf0 <__aeabi_dsub>
 8010724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010726:	001a      	movs	r2, r3
 8010728:	3201      	adds	r2, #1
 801072a:	920a      	str	r2, [sp, #40]	; 0x28
 801072c:	9208      	str	r2, [sp, #32]
 801072e:	9a07      	ldr	r2, [sp, #28]
 8010730:	3230      	adds	r2, #48	; 0x30
 8010732:	701a      	strb	r2, [r3, #0]
 8010734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010736:	429a      	cmp	r2, r3
 8010738:	d14f      	bne.n	80107da <_dtoa_r+0x73e>
 801073a:	0002      	movs	r2, r0
 801073c:	000b      	movs	r3, r1
 801073e:	f7f0 f83b 	bl	80007b8 <__aeabi_dadd>
 8010742:	0032      	movs	r2, r6
 8010744:	003b      	movs	r3, r7
 8010746:	0004      	movs	r4, r0
 8010748:	000d      	movs	r5, r1
 801074a:	f7ef fe97 	bl	800047c <__aeabi_dcmpgt>
 801074e:	2800      	cmp	r0, #0
 8010750:	d12e      	bne.n	80107b0 <_dtoa_r+0x714>
 8010752:	0032      	movs	r2, r6
 8010754:	003b      	movs	r3, r7
 8010756:	0020      	movs	r0, r4
 8010758:	0029      	movs	r1, r5
 801075a:	f7ef fe75 	bl	8000448 <__aeabi_dcmpeq>
 801075e:	2800      	cmp	r0, #0
 8010760:	d002      	beq.n	8010768 <_dtoa_r+0x6cc>
 8010762:	9b07      	ldr	r3, [sp, #28]
 8010764:	07de      	lsls	r6, r3, #31
 8010766:	d423      	bmi.n	80107b0 <_dtoa_r+0x714>
 8010768:	9905      	ldr	r1, [sp, #20]
 801076a:	9804      	ldr	r0, [sp, #16]
 801076c:	f7fc f8fe 	bl	800c96c <_Bfree>
 8010770:	2300      	movs	r3, #0
 8010772:	9a08      	ldr	r2, [sp, #32]
 8010774:	7013      	strb	r3, [r2, #0]
 8010776:	9b03      	ldr	r3, [sp, #12]
 8010778:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801077a:	3301      	adds	r3, #1
 801077c:	6013      	str	r3, [r2, #0]
 801077e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010780:	2b00      	cmp	r3, #0
 8010782:	d100      	bne.n	8010786 <_dtoa_r+0x6ea>
 8010784:	e4bd      	b.n	8010102 <_dtoa_r+0x66>
 8010786:	9a08      	ldr	r2, [sp, #32]
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	e4ba      	b.n	8010102 <_dtoa_r+0x66>
 801078c:	08014578 	.word	0x08014578
 8010790:	08014550 	.word	0x08014550
 8010794:	3ff00000 	.word	0x3ff00000
 8010798:	40240000 	.word	0x40240000
 801079c:	401c0000 	.word	0x401c0000
 80107a0:	fcc00000 	.word	0xfcc00000
 80107a4:	40140000 	.word	0x40140000
 80107a8:	7cc00000 	.word	0x7cc00000
 80107ac:	3fe00000 	.word	0x3fe00000
 80107b0:	9b03      	ldr	r3, [sp, #12]
 80107b2:	930e      	str	r3, [sp, #56]	; 0x38
 80107b4:	9b08      	ldr	r3, [sp, #32]
 80107b6:	9308      	str	r3, [sp, #32]
 80107b8:	3b01      	subs	r3, #1
 80107ba:	781a      	ldrb	r2, [r3, #0]
 80107bc:	2a39      	cmp	r2, #57	; 0x39
 80107be:	d108      	bne.n	80107d2 <_dtoa_r+0x736>
 80107c0:	9a06      	ldr	r2, [sp, #24]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d1f7      	bne.n	80107b6 <_dtoa_r+0x71a>
 80107c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80107c8:	9906      	ldr	r1, [sp, #24]
 80107ca:	3201      	adds	r2, #1
 80107cc:	920e      	str	r2, [sp, #56]	; 0x38
 80107ce:	2230      	movs	r2, #48	; 0x30
 80107d0:	700a      	strb	r2, [r1, #0]
 80107d2:	781a      	ldrb	r2, [r3, #0]
 80107d4:	3201      	adds	r2, #1
 80107d6:	701a      	strb	r2, [r3, #0]
 80107d8:	e77c      	b.n	80106d4 <_dtoa_r+0x638>
 80107da:	2200      	movs	r2, #0
 80107dc:	4ba9      	ldr	r3, [pc, #676]	; (8010a84 <_dtoa_r+0x9e8>)
 80107de:	f7f0 ff45 	bl	800166c <__aeabi_dmul>
 80107e2:	2200      	movs	r2, #0
 80107e4:	2300      	movs	r3, #0
 80107e6:	0004      	movs	r4, r0
 80107e8:	000d      	movs	r5, r1
 80107ea:	f7ef fe2d 	bl	8000448 <__aeabi_dcmpeq>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d100      	bne.n	80107f4 <_dtoa_r+0x758>
 80107f2:	e782      	b.n	80106fa <_dtoa_r+0x65e>
 80107f4:	e7b8      	b.n	8010768 <_dtoa_r+0x6cc>
 80107f6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80107f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80107fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80107fc:	2f00      	cmp	r7, #0
 80107fe:	d012      	beq.n	8010826 <_dtoa_r+0x78a>
 8010800:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010802:	2a01      	cmp	r2, #1
 8010804:	dc6e      	bgt.n	80108e4 <_dtoa_r+0x848>
 8010806:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010808:	2a00      	cmp	r2, #0
 801080a:	d065      	beq.n	80108d8 <_dtoa_r+0x83c>
 801080c:	4a9e      	ldr	r2, [pc, #632]	; (8010a88 <_dtoa_r+0x9ec>)
 801080e:	189b      	adds	r3, r3, r2
 8010810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010812:	2101      	movs	r1, #1
 8010814:	18d2      	adds	r2, r2, r3
 8010816:	920a      	str	r2, [sp, #40]	; 0x28
 8010818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801081a:	9804      	ldr	r0, [sp, #16]
 801081c:	18d3      	adds	r3, r2, r3
 801081e:	930c      	str	r3, [sp, #48]	; 0x30
 8010820:	f7fc f986 	bl	800cb30 <__i2b>
 8010824:	0007      	movs	r7, r0
 8010826:	2c00      	cmp	r4, #0
 8010828:	d00e      	beq.n	8010848 <_dtoa_r+0x7ac>
 801082a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801082c:	2b00      	cmp	r3, #0
 801082e:	dd0b      	ble.n	8010848 <_dtoa_r+0x7ac>
 8010830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010832:	0023      	movs	r3, r4
 8010834:	4294      	cmp	r4, r2
 8010836:	dd00      	ble.n	801083a <_dtoa_r+0x79e>
 8010838:	0013      	movs	r3, r2
 801083a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801083c:	1ae4      	subs	r4, r4, r3
 801083e:	1ad2      	subs	r2, r2, r3
 8010840:	920a      	str	r2, [sp, #40]	; 0x28
 8010842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010844:	1ad3      	subs	r3, r2, r3
 8010846:	930c      	str	r3, [sp, #48]	; 0x30
 8010848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801084a:	2b00      	cmp	r3, #0
 801084c:	d01e      	beq.n	801088c <_dtoa_r+0x7f0>
 801084e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010850:	2b00      	cmp	r3, #0
 8010852:	d05c      	beq.n	801090e <_dtoa_r+0x872>
 8010854:	2d00      	cmp	r5, #0
 8010856:	dd10      	ble.n	801087a <_dtoa_r+0x7de>
 8010858:	0039      	movs	r1, r7
 801085a:	002a      	movs	r2, r5
 801085c:	9804      	ldr	r0, [sp, #16]
 801085e:	f7fc fa2f 	bl	800ccc0 <__pow5mult>
 8010862:	9a05      	ldr	r2, [sp, #20]
 8010864:	0001      	movs	r1, r0
 8010866:	0007      	movs	r7, r0
 8010868:	9804      	ldr	r0, [sp, #16]
 801086a:	f7fc f979 	bl	800cb60 <__multiply>
 801086e:	0006      	movs	r6, r0
 8010870:	9905      	ldr	r1, [sp, #20]
 8010872:	9804      	ldr	r0, [sp, #16]
 8010874:	f7fc f87a 	bl	800c96c <_Bfree>
 8010878:	9605      	str	r6, [sp, #20]
 801087a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801087c:	1b5a      	subs	r2, r3, r5
 801087e:	42ab      	cmp	r3, r5
 8010880:	d004      	beq.n	801088c <_dtoa_r+0x7f0>
 8010882:	9905      	ldr	r1, [sp, #20]
 8010884:	9804      	ldr	r0, [sp, #16]
 8010886:	f7fc fa1b 	bl	800ccc0 <__pow5mult>
 801088a:	9005      	str	r0, [sp, #20]
 801088c:	2101      	movs	r1, #1
 801088e:	9804      	ldr	r0, [sp, #16]
 8010890:	f7fc f94e 	bl	800cb30 <__i2b>
 8010894:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010896:	0006      	movs	r6, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	dd3a      	ble.n	8010912 <_dtoa_r+0x876>
 801089c:	001a      	movs	r2, r3
 801089e:	0001      	movs	r1, r0
 80108a0:	9804      	ldr	r0, [sp, #16]
 80108a2:	f7fc fa0d 	bl	800ccc0 <__pow5mult>
 80108a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108a8:	0006      	movs	r6, r0
 80108aa:	2500      	movs	r5, #0
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	dc38      	bgt.n	8010922 <_dtoa_r+0x886>
 80108b0:	2500      	movs	r5, #0
 80108b2:	9b08      	ldr	r3, [sp, #32]
 80108b4:	42ab      	cmp	r3, r5
 80108b6:	d130      	bne.n	801091a <_dtoa_r+0x87e>
 80108b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108ba:	031b      	lsls	r3, r3, #12
 80108bc:	42ab      	cmp	r3, r5
 80108be:	d12c      	bne.n	801091a <_dtoa_r+0x87e>
 80108c0:	4b72      	ldr	r3, [pc, #456]	; (8010a8c <_dtoa_r+0x9f0>)
 80108c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108c4:	4213      	tst	r3, r2
 80108c6:	d028      	beq.n	801091a <_dtoa_r+0x87e>
 80108c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108ca:	3501      	adds	r5, #1
 80108cc:	3301      	adds	r3, #1
 80108ce:	930a      	str	r3, [sp, #40]	; 0x28
 80108d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108d2:	3301      	adds	r3, #1
 80108d4:	930c      	str	r3, [sp, #48]	; 0x30
 80108d6:	e020      	b.n	801091a <_dtoa_r+0x87e>
 80108d8:	2336      	movs	r3, #54	; 0x36
 80108da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80108dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80108de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80108e0:	1a9b      	subs	r3, r3, r2
 80108e2:	e795      	b.n	8010810 <_dtoa_r+0x774>
 80108e4:	9b07      	ldr	r3, [sp, #28]
 80108e6:	1e5d      	subs	r5, r3, #1
 80108e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108ea:	42ab      	cmp	r3, r5
 80108ec:	db07      	blt.n	80108fe <_dtoa_r+0x862>
 80108ee:	1b5d      	subs	r5, r3, r5
 80108f0:	9b07      	ldr	r3, [sp, #28]
 80108f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	da8b      	bge.n	8010810 <_dtoa_r+0x774>
 80108f8:	1ae4      	subs	r4, r4, r3
 80108fa:	2300      	movs	r3, #0
 80108fc:	e788      	b.n	8010810 <_dtoa_r+0x774>
 80108fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010902:	1aeb      	subs	r3, r5, r3
 8010904:	18d3      	adds	r3, r2, r3
 8010906:	950d      	str	r5, [sp, #52]	; 0x34
 8010908:	9313      	str	r3, [sp, #76]	; 0x4c
 801090a:	2500      	movs	r5, #0
 801090c:	e7f0      	b.n	80108f0 <_dtoa_r+0x854>
 801090e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010910:	e7b7      	b.n	8010882 <_dtoa_r+0x7e6>
 8010912:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010914:	2500      	movs	r5, #0
 8010916:	2b01      	cmp	r3, #1
 8010918:	ddca      	ble.n	80108b0 <_dtoa_r+0x814>
 801091a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801091c:	2001      	movs	r0, #1
 801091e:	2b00      	cmp	r3, #0
 8010920:	d008      	beq.n	8010934 <_dtoa_r+0x898>
 8010922:	6933      	ldr	r3, [r6, #16]
 8010924:	3303      	adds	r3, #3
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	18f3      	adds	r3, r6, r3
 801092a:	6858      	ldr	r0, [r3, #4]
 801092c:	f7fc f8b8 	bl	800caa0 <__hi0bits>
 8010930:	2320      	movs	r3, #32
 8010932:	1a18      	subs	r0, r3, r0
 8010934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010936:	1818      	adds	r0, r3, r0
 8010938:	0002      	movs	r2, r0
 801093a:	231f      	movs	r3, #31
 801093c:	401a      	ands	r2, r3
 801093e:	4218      	tst	r0, r3
 8010940:	d047      	beq.n	80109d2 <_dtoa_r+0x936>
 8010942:	3301      	adds	r3, #1
 8010944:	1a9b      	subs	r3, r3, r2
 8010946:	2b04      	cmp	r3, #4
 8010948:	dd3f      	ble.n	80109ca <_dtoa_r+0x92e>
 801094a:	231c      	movs	r3, #28
 801094c:	1a9b      	subs	r3, r3, r2
 801094e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010950:	18e4      	adds	r4, r4, r3
 8010952:	18d2      	adds	r2, r2, r3
 8010954:	920a      	str	r2, [sp, #40]	; 0x28
 8010956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010958:	18d3      	adds	r3, r2, r3
 801095a:	930c      	str	r3, [sp, #48]	; 0x30
 801095c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801095e:	2b00      	cmp	r3, #0
 8010960:	dd05      	ble.n	801096e <_dtoa_r+0x8d2>
 8010962:	001a      	movs	r2, r3
 8010964:	9905      	ldr	r1, [sp, #20]
 8010966:	9804      	ldr	r0, [sp, #16]
 8010968:	f7fc f9ec 	bl	800cd44 <__lshift>
 801096c:	9005      	str	r0, [sp, #20]
 801096e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010970:	2b00      	cmp	r3, #0
 8010972:	dd05      	ble.n	8010980 <_dtoa_r+0x8e4>
 8010974:	0031      	movs	r1, r6
 8010976:	001a      	movs	r2, r3
 8010978:	9804      	ldr	r0, [sp, #16]
 801097a:	f7fc f9e3 	bl	800cd44 <__lshift>
 801097e:	0006      	movs	r6, r0
 8010980:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010982:	2b00      	cmp	r3, #0
 8010984:	d027      	beq.n	80109d6 <_dtoa_r+0x93a>
 8010986:	0031      	movs	r1, r6
 8010988:	9805      	ldr	r0, [sp, #20]
 801098a:	f7fc fa49 	bl	800ce20 <__mcmp>
 801098e:	2800      	cmp	r0, #0
 8010990:	da21      	bge.n	80109d6 <_dtoa_r+0x93a>
 8010992:	9b03      	ldr	r3, [sp, #12]
 8010994:	220a      	movs	r2, #10
 8010996:	3b01      	subs	r3, #1
 8010998:	9303      	str	r3, [sp, #12]
 801099a:	9905      	ldr	r1, [sp, #20]
 801099c:	2300      	movs	r3, #0
 801099e:	9804      	ldr	r0, [sp, #16]
 80109a0:	f7fb ffee 	bl	800c980 <__multadd>
 80109a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109a6:	9005      	str	r0, [sp, #20]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d100      	bne.n	80109ae <_dtoa_r+0x912>
 80109ac:	e15d      	b.n	8010c6a <_dtoa_r+0xbce>
 80109ae:	2300      	movs	r3, #0
 80109b0:	0039      	movs	r1, r7
 80109b2:	220a      	movs	r2, #10
 80109b4:	9804      	ldr	r0, [sp, #16]
 80109b6:	f7fb ffe3 	bl	800c980 <__multadd>
 80109ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109bc:	0007      	movs	r7, r0
 80109be:	2b00      	cmp	r3, #0
 80109c0:	dc49      	bgt.n	8010a56 <_dtoa_r+0x9ba>
 80109c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80109c4:	2b02      	cmp	r3, #2
 80109c6:	dc0e      	bgt.n	80109e6 <_dtoa_r+0x94a>
 80109c8:	e045      	b.n	8010a56 <_dtoa_r+0x9ba>
 80109ca:	2b04      	cmp	r3, #4
 80109cc:	d0c6      	beq.n	801095c <_dtoa_r+0x8c0>
 80109ce:	331c      	adds	r3, #28
 80109d0:	e7bd      	b.n	801094e <_dtoa_r+0x8b2>
 80109d2:	0013      	movs	r3, r2
 80109d4:	e7fb      	b.n	80109ce <_dtoa_r+0x932>
 80109d6:	9b07      	ldr	r3, [sp, #28]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	dc36      	bgt.n	8010a4a <_dtoa_r+0x9ae>
 80109dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80109de:	2b02      	cmp	r3, #2
 80109e0:	dd33      	ble.n	8010a4a <_dtoa_r+0x9ae>
 80109e2:	9b07      	ldr	r3, [sp, #28]
 80109e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80109e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d10c      	bne.n	8010a06 <_dtoa_r+0x96a>
 80109ec:	0031      	movs	r1, r6
 80109ee:	2205      	movs	r2, #5
 80109f0:	9804      	ldr	r0, [sp, #16]
 80109f2:	f7fb ffc5 	bl	800c980 <__multadd>
 80109f6:	0006      	movs	r6, r0
 80109f8:	0001      	movs	r1, r0
 80109fa:	9805      	ldr	r0, [sp, #20]
 80109fc:	f7fc fa10 	bl	800ce20 <__mcmp>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	dd00      	ble.n	8010a06 <_dtoa_r+0x96a>
 8010a04:	e59f      	b.n	8010546 <_dtoa_r+0x4aa>
 8010a06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a08:	43db      	mvns	r3, r3
 8010a0a:	9303      	str	r3, [sp, #12]
 8010a0c:	9b06      	ldr	r3, [sp, #24]
 8010a0e:	9308      	str	r3, [sp, #32]
 8010a10:	2500      	movs	r5, #0
 8010a12:	0031      	movs	r1, r6
 8010a14:	9804      	ldr	r0, [sp, #16]
 8010a16:	f7fb ffa9 	bl	800c96c <_Bfree>
 8010a1a:	2f00      	cmp	r7, #0
 8010a1c:	d100      	bne.n	8010a20 <_dtoa_r+0x984>
 8010a1e:	e6a3      	b.n	8010768 <_dtoa_r+0x6cc>
 8010a20:	2d00      	cmp	r5, #0
 8010a22:	d005      	beq.n	8010a30 <_dtoa_r+0x994>
 8010a24:	42bd      	cmp	r5, r7
 8010a26:	d003      	beq.n	8010a30 <_dtoa_r+0x994>
 8010a28:	0029      	movs	r1, r5
 8010a2a:	9804      	ldr	r0, [sp, #16]
 8010a2c:	f7fb ff9e 	bl	800c96c <_Bfree>
 8010a30:	0039      	movs	r1, r7
 8010a32:	9804      	ldr	r0, [sp, #16]
 8010a34:	f7fb ff9a 	bl	800c96c <_Bfree>
 8010a38:	e696      	b.n	8010768 <_dtoa_r+0x6cc>
 8010a3a:	2600      	movs	r6, #0
 8010a3c:	0037      	movs	r7, r6
 8010a3e:	e7e2      	b.n	8010a06 <_dtoa_r+0x96a>
 8010a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a42:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010a44:	9303      	str	r3, [sp, #12]
 8010a46:	0037      	movs	r7, r6
 8010a48:	e57d      	b.n	8010546 <_dtoa_r+0x4aa>
 8010a4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d100      	bne.n	8010a52 <_dtoa_r+0x9b6>
 8010a50:	e0c3      	b.n	8010bda <_dtoa_r+0xb3e>
 8010a52:	9b07      	ldr	r3, [sp, #28]
 8010a54:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a56:	2c00      	cmp	r4, #0
 8010a58:	dd05      	ble.n	8010a66 <_dtoa_r+0x9ca>
 8010a5a:	0039      	movs	r1, r7
 8010a5c:	0022      	movs	r2, r4
 8010a5e:	9804      	ldr	r0, [sp, #16]
 8010a60:	f7fc f970 	bl	800cd44 <__lshift>
 8010a64:	0007      	movs	r7, r0
 8010a66:	0038      	movs	r0, r7
 8010a68:	2d00      	cmp	r5, #0
 8010a6a:	d024      	beq.n	8010ab6 <_dtoa_r+0xa1a>
 8010a6c:	6879      	ldr	r1, [r7, #4]
 8010a6e:	9804      	ldr	r0, [sp, #16]
 8010a70:	f7fb ff54 	bl	800c91c <_Balloc>
 8010a74:	1e04      	subs	r4, r0, #0
 8010a76:	d111      	bne.n	8010a9c <_dtoa_r+0xa00>
 8010a78:	0022      	movs	r2, r4
 8010a7a:	4b05      	ldr	r3, [pc, #20]	; (8010a90 <_dtoa_r+0x9f4>)
 8010a7c:	4805      	ldr	r0, [pc, #20]	; (8010a94 <_dtoa_r+0x9f8>)
 8010a7e:	4906      	ldr	r1, [pc, #24]	; (8010a98 <_dtoa_r+0x9fc>)
 8010a80:	e43c      	b.n	80102fc <_dtoa_r+0x260>
 8010a82:	46c0      	nop			; (mov r8, r8)
 8010a84:	40240000 	.word	0x40240000
 8010a88:	00000433 	.word	0x00000433
 8010a8c:	7ff00000 	.word	0x7ff00000
 8010a90:	08014481 	.word	0x08014481
 8010a94:	08014711 	.word	0x08014711
 8010a98:	000002ef 	.word	0x000002ef
 8010a9c:	0039      	movs	r1, r7
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	310c      	adds	r1, #12
 8010aa2:	3202      	adds	r2, #2
 8010aa4:	0092      	lsls	r2, r2, #2
 8010aa6:	300c      	adds	r0, #12
 8010aa8:	f7fb fa9d 	bl	800bfe6 <memcpy>
 8010aac:	2201      	movs	r2, #1
 8010aae:	0021      	movs	r1, r4
 8010ab0:	9804      	ldr	r0, [sp, #16]
 8010ab2:	f7fc f947 	bl	800cd44 <__lshift>
 8010ab6:	9b06      	ldr	r3, [sp, #24]
 8010ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010aba:	9307      	str	r3, [sp, #28]
 8010abc:	3b01      	subs	r3, #1
 8010abe:	189b      	adds	r3, r3, r2
 8010ac0:	2201      	movs	r2, #1
 8010ac2:	003d      	movs	r5, r7
 8010ac4:	0007      	movs	r7, r0
 8010ac6:	930e      	str	r3, [sp, #56]	; 0x38
 8010ac8:	9b08      	ldr	r3, [sp, #32]
 8010aca:	4013      	ands	r3, r2
 8010acc:	930d      	str	r3, [sp, #52]	; 0x34
 8010ace:	0031      	movs	r1, r6
 8010ad0:	9805      	ldr	r0, [sp, #20]
 8010ad2:	f7ff fa53 	bl	800ff7c <quorem>
 8010ad6:	0029      	movs	r1, r5
 8010ad8:	0004      	movs	r4, r0
 8010ada:	900b      	str	r0, [sp, #44]	; 0x2c
 8010adc:	9805      	ldr	r0, [sp, #20]
 8010ade:	f7fc f99f 	bl	800ce20 <__mcmp>
 8010ae2:	003a      	movs	r2, r7
 8010ae4:	900c      	str	r0, [sp, #48]	; 0x30
 8010ae6:	0031      	movs	r1, r6
 8010ae8:	9804      	ldr	r0, [sp, #16]
 8010aea:	f7fc f9b5 	bl	800ce58 <__mdiff>
 8010aee:	2201      	movs	r2, #1
 8010af0:	68c3      	ldr	r3, [r0, #12]
 8010af2:	3430      	adds	r4, #48	; 0x30
 8010af4:	9008      	str	r0, [sp, #32]
 8010af6:	920a      	str	r2, [sp, #40]	; 0x28
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d104      	bne.n	8010b06 <_dtoa_r+0xa6a>
 8010afc:	0001      	movs	r1, r0
 8010afe:	9805      	ldr	r0, [sp, #20]
 8010b00:	f7fc f98e 	bl	800ce20 <__mcmp>
 8010b04:	900a      	str	r0, [sp, #40]	; 0x28
 8010b06:	9908      	ldr	r1, [sp, #32]
 8010b08:	9804      	ldr	r0, [sp, #16]
 8010b0a:	f7fb ff2f 	bl	800c96c <_Bfree>
 8010b0e:	9b07      	ldr	r3, [sp, #28]
 8010b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b12:	3301      	adds	r3, #1
 8010b14:	9308      	str	r3, [sp, #32]
 8010b16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	d109      	bne.n	8010b34 <_dtoa_r+0xa98>
 8010b20:	2c39      	cmp	r4, #57	; 0x39
 8010b22:	d022      	beq.n	8010b6a <_dtoa_r+0xace>
 8010b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	dd01      	ble.n	8010b2e <_dtoa_r+0xa92>
 8010b2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010b2c:	3431      	adds	r4, #49	; 0x31
 8010b2e:	9b07      	ldr	r3, [sp, #28]
 8010b30:	701c      	strb	r4, [r3, #0]
 8010b32:	e76e      	b.n	8010a12 <_dtoa_r+0x976>
 8010b34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	db04      	blt.n	8010b44 <_dtoa_r+0xaa8>
 8010b3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010b3c:	4313      	orrs	r3, r2
 8010b3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b40:	4313      	orrs	r3, r2
 8010b42:	d11e      	bne.n	8010b82 <_dtoa_r+0xae6>
 8010b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	ddf1      	ble.n	8010b2e <_dtoa_r+0xa92>
 8010b4a:	9905      	ldr	r1, [sp, #20]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	9804      	ldr	r0, [sp, #16]
 8010b50:	f7fc f8f8 	bl	800cd44 <__lshift>
 8010b54:	0031      	movs	r1, r6
 8010b56:	9005      	str	r0, [sp, #20]
 8010b58:	f7fc f962 	bl	800ce20 <__mcmp>
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	dc02      	bgt.n	8010b66 <_dtoa_r+0xaca>
 8010b60:	d1e5      	bne.n	8010b2e <_dtoa_r+0xa92>
 8010b62:	07e3      	lsls	r3, r4, #31
 8010b64:	d5e3      	bpl.n	8010b2e <_dtoa_r+0xa92>
 8010b66:	2c39      	cmp	r4, #57	; 0x39
 8010b68:	d1df      	bne.n	8010b2a <_dtoa_r+0xa8e>
 8010b6a:	2339      	movs	r3, #57	; 0x39
 8010b6c:	9a07      	ldr	r2, [sp, #28]
 8010b6e:	7013      	strb	r3, [r2, #0]
 8010b70:	9b08      	ldr	r3, [sp, #32]
 8010b72:	9308      	str	r3, [sp, #32]
 8010b74:	3b01      	subs	r3, #1
 8010b76:	781a      	ldrb	r2, [r3, #0]
 8010b78:	2a39      	cmp	r2, #57	; 0x39
 8010b7a:	d063      	beq.n	8010c44 <_dtoa_r+0xba8>
 8010b7c:	3201      	adds	r2, #1
 8010b7e:	701a      	strb	r2, [r3, #0]
 8010b80:	e747      	b.n	8010a12 <_dtoa_r+0x976>
 8010b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	dd03      	ble.n	8010b90 <_dtoa_r+0xaf4>
 8010b88:	2c39      	cmp	r4, #57	; 0x39
 8010b8a:	d0ee      	beq.n	8010b6a <_dtoa_r+0xace>
 8010b8c:	3401      	adds	r4, #1
 8010b8e:	e7ce      	b.n	8010b2e <_dtoa_r+0xa92>
 8010b90:	9b07      	ldr	r3, [sp, #28]
 8010b92:	9a07      	ldr	r2, [sp, #28]
 8010b94:	701c      	strb	r4, [r3, #0]
 8010b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d03e      	beq.n	8010c1a <_dtoa_r+0xb7e>
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	220a      	movs	r2, #10
 8010ba0:	9905      	ldr	r1, [sp, #20]
 8010ba2:	9804      	ldr	r0, [sp, #16]
 8010ba4:	f7fb feec 	bl	800c980 <__multadd>
 8010ba8:	2300      	movs	r3, #0
 8010baa:	9005      	str	r0, [sp, #20]
 8010bac:	220a      	movs	r2, #10
 8010bae:	0029      	movs	r1, r5
 8010bb0:	9804      	ldr	r0, [sp, #16]
 8010bb2:	42bd      	cmp	r5, r7
 8010bb4:	d106      	bne.n	8010bc4 <_dtoa_r+0xb28>
 8010bb6:	f7fb fee3 	bl	800c980 <__multadd>
 8010bba:	0005      	movs	r5, r0
 8010bbc:	0007      	movs	r7, r0
 8010bbe:	9b08      	ldr	r3, [sp, #32]
 8010bc0:	9307      	str	r3, [sp, #28]
 8010bc2:	e784      	b.n	8010ace <_dtoa_r+0xa32>
 8010bc4:	f7fb fedc 	bl	800c980 <__multadd>
 8010bc8:	0039      	movs	r1, r7
 8010bca:	0005      	movs	r5, r0
 8010bcc:	2300      	movs	r3, #0
 8010bce:	220a      	movs	r2, #10
 8010bd0:	9804      	ldr	r0, [sp, #16]
 8010bd2:	f7fb fed5 	bl	800c980 <__multadd>
 8010bd6:	0007      	movs	r7, r0
 8010bd8:	e7f1      	b.n	8010bbe <_dtoa_r+0xb22>
 8010bda:	9b07      	ldr	r3, [sp, #28]
 8010bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bde:	2500      	movs	r5, #0
 8010be0:	0031      	movs	r1, r6
 8010be2:	9805      	ldr	r0, [sp, #20]
 8010be4:	f7ff f9ca 	bl	800ff7c <quorem>
 8010be8:	9b06      	ldr	r3, [sp, #24]
 8010bea:	3030      	adds	r0, #48	; 0x30
 8010bec:	5558      	strb	r0, [r3, r5]
 8010bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bf0:	3501      	adds	r5, #1
 8010bf2:	0004      	movs	r4, r0
 8010bf4:	42ab      	cmp	r3, r5
 8010bf6:	dd07      	ble.n	8010c08 <_dtoa_r+0xb6c>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	220a      	movs	r2, #10
 8010bfc:	9905      	ldr	r1, [sp, #20]
 8010bfe:	9804      	ldr	r0, [sp, #16]
 8010c00:	f7fb febe 	bl	800c980 <__multadd>
 8010c04:	9005      	str	r0, [sp, #20]
 8010c06:	e7eb      	b.n	8010be0 <_dtoa_r+0xb44>
 8010c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	2a00      	cmp	r2, #0
 8010c0e:	dd00      	ble.n	8010c12 <_dtoa_r+0xb76>
 8010c10:	0013      	movs	r3, r2
 8010c12:	2500      	movs	r5, #0
 8010c14:	9a06      	ldr	r2, [sp, #24]
 8010c16:	18d3      	adds	r3, r2, r3
 8010c18:	9308      	str	r3, [sp, #32]
 8010c1a:	9905      	ldr	r1, [sp, #20]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	9804      	ldr	r0, [sp, #16]
 8010c20:	f7fc f890 	bl	800cd44 <__lshift>
 8010c24:	0031      	movs	r1, r6
 8010c26:	9005      	str	r0, [sp, #20]
 8010c28:	f7fc f8fa 	bl	800ce20 <__mcmp>
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	dc9f      	bgt.n	8010b70 <_dtoa_r+0xad4>
 8010c30:	d101      	bne.n	8010c36 <_dtoa_r+0xb9a>
 8010c32:	07e4      	lsls	r4, r4, #31
 8010c34:	d49c      	bmi.n	8010b70 <_dtoa_r+0xad4>
 8010c36:	9b08      	ldr	r3, [sp, #32]
 8010c38:	9308      	str	r3, [sp, #32]
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	781a      	ldrb	r2, [r3, #0]
 8010c3e:	2a30      	cmp	r2, #48	; 0x30
 8010c40:	d0fa      	beq.n	8010c38 <_dtoa_r+0xb9c>
 8010c42:	e6e6      	b.n	8010a12 <_dtoa_r+0x976>
 8010c44:	9a06      	ldr	r2, [sp, #24]
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d193      	bne.n	8010b72 <_dtoa_r+0xad6>
 8010c4a:	9b03      	ldr	r3, [sp, #12]
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	9303      	str	r3, [sp, #12]
 8010c50:	2331      	movs	r3, #49	; 0x31
 8010c52:	7013      	strb	r3, [r2, #0]
 8010c54:	e6dd      	b.n	8010a12 <_dtoa_r+0x976>
 8010c56:	4b09      	ldr	r3, [pc, #36]	; (8010c7c <_dtoa_r+0xbe0>)
 8010c58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010c5a:	9306      	str	r3, [sp, #24]
 8010c5c:	4b08      	ldr	r3, [pc, #32]	; (8010c80 <_dtoa_r+0xbe4>)
 8010c5e:	2a00      	cmp	r2, #0
 8010c60:	d001      	beq.n	8010c66 <_dtoa_r+0xbca>
 8010c62:	f7ff fa4c 	bl	80100fe <_dtoa_r+0x62>
 8010c66:	f7ff fa4c 	bl	8010102 <_dtoa_r+0x66>
 8010c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	dcb6      	bgt.n	8010bde <_dtoa_r+0xb42>
 8010c70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c72:	2b02      	cmp	r3, #2
 8010c74:	dd00      	ble.n	8010c78 <_dtoa_r+0xbdc>
 8010c76:	e6b6      	b.n	80109e6 <_dtoa_r+0x94a>
 8010c78:	e7b1      	b.n	8010bde <_dtoa_r+0xb42>
 8010c7a:	46c0      	nop			; (mov r8, r8)
 8010c7c:	08014704 	.word	0x08014704
 8010c80:	0801470c 	.word	0x0801470c

08010c84 <realloc>:
 8010c84:	b510      	push	{r4, lr}
 8010c86:	4b03      	ldr	r3, [pc, #12]	; (8010c94 <realloc+0x10>)
 8010c88:	000a      	movs	r2, r1
 8010c8a:	0001      	movs	r1, r0
 8010c8c:	6818      	ldr	r0, [r3, #0]
 8010c8e:	f000 f803 	bl	8010c98 <_realloc_r>
 8010c92:	bd10      	pop	{r4, pc}
 8010c94:	200006d8 	.word	0x200006d8

08010c98 <_realloc_r>:
 8010c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c9a:	b087      	sub	sp, #28
 8010c9c:	1e0c      	subs	r4, r1, #0
 8010c9e:	9001      	str	r0, [sp, #4]
 8010ca0:	9205      	str	r2, [sp, #20]
 8010ca2:	d106      	bne.n	8010cb2 <_realloc_r+0x1a>
 8010ca4:	0011      	movs	r1, r2
 8010ca6:	f7f9 fe39 	bl	800a91c <_malloc_r>
 8010caa:	0007      	movs	r7, r0
 8010cac:	0038      	movs	r0, r7
 8010cae:	b007      	add	sp, #28
 8010cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cb2:	9801      	ldr	r0, [sp, #4]
 8010cb4:	f7fa f846 	bl	800ad44 <__malloc_lock>
 8010cb8:	0023      	movs	r3, r4
 8010cba:	3b08      	subs	r3, #8
 8010cbc:	685f      	ldr	r7, [r3, #4]
 8010cbe:	9304      	str	r3, [sp, #16]
 8010cc0:	9b05      	ldr	r3, [sp, #20]
 8010cc2:	330b      	adds	r3, #11
 8010cc4:	2b16      	cmp	r3, #22
 8010cc6:	d908      	bls.n	8010cda <_realloc_r+0x42>
 8010cc8:	2207      	movs	r2, #7
 8010cca:	4393      	bics	r3, r2
 8010ccc:	9300      	str	r3, [sp, #0]
 8010cce:	d506      	bpl.n	8010cde <_realloc_r+0x46>
 8010cd0:	230c      	movs	r3, #12
 8010cd2:	9a01      	ldr	r2, [sp, #4]
 8010cd4:	2700      	movs	r7, #0
 8010cd6:	6013      	str	r3, [r2, #0]
 8010cd8:	e7e8      	b.n	8010cac <_realloc_r+0x14>
 8010cda:	2310      	movs	r3, #16
 8010cdc:	9300      	str	r3, [sp, #0]
 8010cde:	9b00      	ldr	r3, [sp, #0]
 8010ce0:	9a05      	ldr	r2, [sp, #20]
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d3f4      	bcc.n	8010cd0 <_realloc_r+0x38>
 8010ce6:	9b04      	ldr	r3, [sp, #16]
 8010ce8:	003a      	movs	r2, r7
 8010cea:	9302      	str	r3, [sp, #8]
 8010cec:	2303      	movs	r3, #3
 8010cee:	439a      	bics	r2, r3
 8010cf0:	9b00      	ldr	r3, [sp, #0]
 8010cf2:	9203      	str	r2, [sp, #12]
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	dc00      	bgt.n	8010cfa <_realloc_r+0x62>
 8010cf8:	e169      	b.n	8010fce <_realloc_r+0x336>
 8010cfa:	9b04      	ldr	r3, [sp, #16]
 8010cfc:	48b8      	ldr	r0, [pc, #736]	; (8010fe0 <_realloc_r+0x348>)
 8010cfe:	189b      	adds	r3, r3, r2
 8010d00:	6882      	ldr	r2, [r0, #8]
 8010d02:	4694      	mov	ip, r2
 8010d04:	685a      	ldr	r2, [r3, #4]
 8010d06:	459c      	cmp	ip, r3
 8010d08:	d006      	beq.n	8010d18 <_realloc_r+0x80>
 8010d0a:	2501      	movs	r5, #1
 8010d0c:	0011      	movs	r1, r2
 8010d0e:	43a9      	bics	r1, r5
 8010d10:	1859      	adds	r1, r3, r1
 8010d12:	6849      	ldr	r1, [r1, #4]
 8010d14:	4229      	tst	r1, r5
 8010d16:	d144      	bne.n	8010da2 <_realloc_r+0x10a>
 8010d18:	2103      	movs	r1, #3
 8010d1a:	438a      	bics	r2, r1
 8010d1c:	9903      	ldr	r1, [sp, #12]
 8010d1e:	188e      	adds	r6, r1, r2
 8010d20:	9900      	ldr	r1, [sp, #0]
 8010d22:	459c      	cmp	ip, r3
 8010d24:	d117      	bne.n	8010d56 <_realloc_r+0xbe>
 8010d26:	3110      	adds	r1, #16
 8010d28:	42b1      	cmp	r1, r6
 8010d2a:	dc3c      	bgt.n	8010da6 <_realloc_r+0x10e>
 8010d2c:	9a00      	ldr	r2, [sp, #0]
 8010d2e:	2101      	movs	r1, #1
 8010d30:	4694      	mov	ip, r2
 8010d32:	1ab6      	subs	r6, r6, r2
 8010d34:	0022      	movs	r2, r4
 8010d36:	9b04      	ldr	r3, [sp, #16]
 8010d38:	430e      	orrs	r6, r1
 8010d3a:	4463      	add	r3, ip
 8010d3c:	6083      	str	r3, [r0, #8]
 8010d3e:	3a08      	subs	r2, #8
 8010d40:	605e      	str	r6, [r3, #4]
 8010d42:	6853      	ldr	r3, [r2, #4]
 8010d44:	9801      	ldr	r0, [sp, #4]
 8010d46:	400b      	ands	r3, r1
 8010d48:	4661      	mov	r1, ip
 8010d4a:	430b      	orrs	r3, r1
 8010d4c:	6053      	str	r3, [r2, #4]
 8010d4e:	f7fa f801 	bl	800ad54 <__malloc_unlock>
 8010d52:	0027      	movs	r7, r4
 8010d54:	e7aa      	b.n	8010cac <_realloc_r+0x14>
 8010d56:	42b1      	cmp	r1, r6
 8010d58:	dc25      	bgt.n	8010da6 <_realloc_r+0x10e>
 8010d5a:	68da      	ldr	r2, [r3, #12]
 8010d5c:	689b      	ldr	r3, [r3, #8]
 8010d5e:	60da      	str	r2, [r3, #12]
 8010d60:	6093      	str	r3, [r2, #8]
 8010d62:	9b00      	ldr	r3, [sp, #0]
 8010d64:	9a02      	ldr	r2, [sp, #8]
 8010d66:	1af4      	subs	r4, r6, r3
 8010d68:	9b02      	ldr	r3, [sp, #8]
 8010d6a:	1992      	adds	r2, r2, r6
 8010d6c:	6858      	ldr	r0, [r3, #4]
 8010d6e:	2301      	movs	r3, #1
 8010d70:	4018      	ands	r0, r3
 8010d72:	2c0f      	cmp	r4, #15
 8010d74:	d800      	bhi.n	8010d78 <_realloc_r+0xe0>
 8010d76:	e12c      	b.n	8010fd2 <_realloc_r+0x33a>
 8010d78:	9d00      	ldr	r5, [sp, #0]
 8010d7a:	9902      	ldr	r1, [sp, #8]
 8010d7c:	4328      	orrs	r0, r5
 8010d7e:	1949      	adds	r1, r1, r5
 8010d80:	9d02      	ldr	r5, [sp, #8]
 8010d82:	431c      	orrs	r4, r3
 8010d84:	6068      	str	r0, [r5, #4]
 8010d86:	604c      	str	r4, [r1, #4]
 8010d88:	6850      	ldr	r0, [r2, #4]
 8010d8a:	3108      	adds	r1, #8
 8010d8c:	4303      	orrs	r3, r0
 8010d8e:	6053      	str	r3, [r2, #4]
 8010d90:	9801      	ldr	r0, [sp, #4]
 8010d92:	f7fb f9a3 	bl	800c0dc <_free_r>
 8010d96:	9801      	ldr	r0, [sp, #4]
 8010d98:	f7f9 ffdc 	bl	800ad54 <__malloc_unlock>
 8010d9c:	9f02      	ldr	r7, [sp, #8]
 8010d9e:	3708      	adds	r7, #8
 8010da0:	e784      	b.n	8010cac <_realloc_r+0x14>
 8010da2:	2200      	movs	r2, #0
 8010da4:	0013      	movs	r3, r2
 8010da6:	07ff      	lsls	r7, r7, #31
 8010da8:	d500      	bpl.n	8010dac <_realloc_r+0x114>
 8010daa:	e0c6      	b.n	8010f3a <_realloc_r+0x2a2>
 8010dac:	0021      	movs	r1, r4
 8010dae:	2003      	movs	r0, #3
 8010db0:	3908      	subs	r1, #8
 8010db2:	680d      	ldr	r5, [r1, #0]
 8010db4:	9904      	ldr	r1, [sp, #16]
 8010db6:	1b4d      	subs	r5, r1, r5
 8010db8:	6869      	ldr	r1, [r5, #4]
 8010dba:	4381      	bics	r1, r0
 8010dbc:	9803      	ldr	r0, [sp, #12]
 8010dbe:	180f      	adds	r7, r1, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d100      	bne.n	8010dc6 <_realloc_r+0x12e>
 8010dc4:	e084      	b.n	8010ed0 <_realloc_r+0x238>
 8010dc6:	19d6      	adds	r6, r2, r7
 8010dc8:	459c      	cmp	ip, r3
 8010dca:	d148      	bne.n	8010e5e <_realloc_r+0x1c6>
 8010dcc:	9b00      	ldr	r3, [sp, #0]
 8010dce:	3310      	adds	r3, #16
 8010dd0:	42b3      	cmp	r3, r6
 8010dd2:	dc7d      	bgt.n	8010ed0 <_realloc_r+0x238>
 8010dd4:	68aa      	ldr	r2, [r5, #8]
 8010dd6:	68eb      	ldr	r3, [r5, #12]
 8010dd8:	002f      	movs	r7, r5
 8010dda:	60d3      	str	r3, [r2, #12]
 8010ddc:	609a      	str	r2, [r3, #8]
 8010dde:	0002      	movs	r2, r0
 8010de0:	3a04      	subs	r2, #4
 8010de2:	3708      	adds	r7, #8
 8010de4:	2a24      	cmp	r2, #36	; 0x24
 8010de6:	d835      	bhi.n	8010e54 <_realloc_r+0x1bc>
 8010de8:	003b      	movs	r3, r7
 8010dea:	2a13      	cmp	r2, #19
 8010dec:	d908      	bls.n	8010e00 <_realloc_r+0x168>
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	60ab      	str	r3, [r5, #8]
 8010df2:	6863      	ldr	r3, [r4, #4]
 8010df4:	60eb      	str	r3, [r5, #12]
 8010df6:	2a1b      	cmp	r2, #27
 8010df8:	d81a      	bhi.n	8010e30 <_realloc_r+0x198>
 8010dfa:	002b      	movs	r3, r5
 8010dfc:	3408      	adds	r4, #8
 8010dfe:	3310      	adds	r3, #16
 8010e00:	6822      	ldr	r2, [r4, #0]
 8010e02:	601a      	str	r2, [r3, #0]
 8010e04:	6862      	ldr	r2, [r4, #4]
 8010e06:	605a      	str	r2, [r3, #4]
 8010e08:	68a2      	ldr	r2, [r4, #8]
 8010e0a:	609a      	str	r2, [r3, #8]
 8010e0c:	9b00      	ldr	r3, [sp, #0]
 8010e0e:	4a74      	ldr	r2, [pc, #464]	; (8010fe0 <_realloc_r+0x348>)
 8010e10:	18eb      	adds	r3, r5, r3
 8010e12:	6093      	str	r3, [r2, #8]
 8010e14:	9a00      	ldr	r2, [sp, #0]
 8010e16:	1ab6      	subs	r6, r6, r2
 8010e18:	2201      	movs	r2, #1
 8010e1a:	4316      	orrs	r6, r2
 8010e1c:	605e      	str	r6, [r3, #4]
 8010e1e:	686b      	ldr	r3, [r5, #4]
 8010e20:	4013      	ands	r3, r2
 8010e22:	9a00      	ldr	r2, [sp, #0]
 8010e24:	4313      	orrs	r3, r2
 8010e26:	606b      	str	r3, [r5, #4]
 8010e28:	9801      	ldr	r0, [sp, #4]
 8010e2a:	f7f9 ff93 	bl	800ad54 <__malloc_unlock>
 8010e2e:	e73d      	b.n	8010cac <_realloc_r+0x14>
 8010e30:	68a3      	ldr	r3, [r4, #8]
 8010e32:	612b      	str	r3, [r5, #16]
 8010e34:	68e3      	ldr	r3, [r4, #12]
 8010e36:	616b      	str	r3, [r5, #20]
 8010e38:	2a24      	cmp	r2, #36	; 0x24
 8010e3a:	d003      	beq.n	8010e44 <_realloc_r+0x1ac>
 8010e3c:	002b      	movs	r3, r5
 8010e3e:	3410      	adds	r4, #16
 8010e40:	3318      	adds	r3, #24
 8010e42:	e7dd      	b.n	8010e00 <_realloc_r+0x168>
 8010e44:	6923      	ldr	r3, [r4, #16]
 8010e46:	61ab      	str	r3, [r5, #24]
 8010e48:	002b      	movs	r3, r5
 8010e4a:	6962      	ldr	r2, [r4, #20]
 8010e4c:	3320      	adds	r3, #32
 8010e4e:	61ea      	str	r2, [r5, #28]
 8010e50:	3418      	adds	r4, #24
 8010e52:	e7d5      	b.n	8010e00 <_realloc_r+0x168>
 8010e54:	0021      	movs	r1, r4
 8010e56:	0038      	movs	r0, r7
 8010e58:	f001 fbb5 	bl	80125c6 <memmove>
 8010e5c:	e7d6      	b.n	8010e0c <_realloc_r+0x174>
 8010e5e:	9a00      	ldr	r2, [sp, #0]
 8010e60:	42b2      	cmp	r2, r6
 8010e62:	dc35      	bgt.n	8010ed0 <_realloc_r+0x238>
 8010e64:	0028      	movs	r0, r5
 8010e66:	68da      	ldr	r2, [r3, #12]
 8010e68:	689b      	ldr	r3, [r3, #8]
 8010e6a:	3008      	adds	r0, #8
 8010e6c:	60da      	str	r2, [r3, #12]
 8010e6e:	6093      	str	r3, [r2, #8]
 8010e70:	68aa      	ldr	r2, [r5, #8]
 8010e72:	68eb      	ldr	r3, [r5, #12]
 8010e74:	60d3      	str	r3, [r2, #12]
 8010e76:	609a      	str	r2, [r3, #8]
 8010e78:	9a03      	ldr	r2, [sp, #12]
 8010e7a:	3a04      	subs	r2, #4
 8010e7c:	2a24      	cmp	r2, #36	; 0x24
 8010e7e:	d823      	bhi.n	8010ec8 <_realloc_r+0x230>
 8010e80:	2a13      	cmp	r2, #19
 8010e82:	d907      	bls.n	8010e94 <_realloc_r+0x1fc>
 8010e84:	6823      	ldr	r3, [r4, #0]
 8010e86:	60ab      	str	r3, [r5, #8]
 8010e88:	6863      	ldr	r3, [r4, #4]
 8010e8a:	60eb      	str	r3, [r5, #12]
 8010e8c:	2a1b      	cmp	r2, #27
 8010e8e:	d809      	bhi.n	8010ea4 <_realloc_r+0x20c>
 8010e90:	3408      	adds	r4, #8
 8010e92:	3008      	adds	r0, #8
 8010e94:	6823      	ldr	r3, [r4, #0]
 8010e96:	6003      	str	r3, [r0, #0]
 8010e98:	6863      	ldr	r3, [r4, #4]
 8010e9a:	6043      	str	r3, [r0, #4]
 8010e9c:	68a3      	ldr	r3, [r4, #8]
 8010e9e:	6083      	str	r3, [r0, #8]
 8010ea0:	9502      	str	r5, [sp, #8]
 8010ea2:	e75e      	b.n	8010d62 <_realloc_r+0xca>
 8010ea4:	68a3      	ldr	r3, [r4, #8]
 8010ea6:	612b      	str	r3, [r5, #16]
 8010ea8:	68e3      	ldr	r3, [r4, #12]
 8010eaa:	616b      	str	r3, [r5, #20]
 8010eac:	2a24      	cmp	r2, #36	; 0x24
 8010eae:	d003      	beq.n	8010eb8 <_realloc_r+0x220>
 8010eb0:	0028      	movs	r0, r5
 8010eb2:	3410      	adds	r4, #16
 8010eb4:	3018      	adds	r0, #24
 8010eb6:	e7ed      	b.n	8010e94 <_realloc_r+0x1fc>
 8010eb8:	0028      	movs	r0, r5
 8010eba:	6923      	ldr	r3, [r4, #16]
 8010ebc:	3020      	adds	r0, #32
 8010ebe:	61ab      	str	r3, [r5, #24]
 8010ec0:	6963      	ldr	r3, [r4, #20]
 8010ec2:	3418      	adds	r4, #24
 8010ec4:	61eb      	str	r3, [r5, #28]
 8010ec6:	e7e5      	b.n	8010e94 <_realloc_r+0x1fc>
 8010ec8:	0021      	movs	r1, r4
 8010eca:	f001 fb7c 	bl	80125c6 <memmove>
 8010ece:	e7e7      	b.n	8010ea0 <_realloc_r+0x208>
 8010ed0:	9b00      	ldr	r3, [sp, #0]
 8010ed2:	42bb      	cmp	r3, r7
 8010ed4:	dc31      	bgt.n	8010f3a <_realloc_r+0x2a2>
 8010ed6:	0028      	movs	r0, r5
 8010ed8:	68aa      	ldr	r2, [r5, #8]
 8010eda:	68eb      	ldr	r3, [r5, #12]
 8010edc:	3008      	adds	r0, #8
 8010ede:	60d3      	str	r3, [r2, #12]
 8010ee0:	609a      	str	r2, [r3, #8]
 8010ee2:	9a03      	ldr	r2, [sp, #12]
 8010ee4:	3a04      	subs	r2, #4
 8010ee6:	2a24      	cmp	r2, #36	; 0x24
 8010ee8:	d823      	bhi.n	8010f32 <_realloc_r+0x29a>
 8010eea:	2a13      	cmp	r2, #19
 8010eec:	d907      	bls.n	8010efe <_realloc_r+0x266>
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	60ab      	str	r3, [r5, #8]
 8010ef2:	6863      	ldr	r3, [r4, #4]
 8010ef4:	60eb      	str	r3, [r5, #12]
 8010ef6:	2a1b      	cmp	r2, #27
 8010ef8:	d809      	bhi.n	8010f0e <_realloc_r+0x276>
 8010efa:	3408      	adds	r4, #8
 8010efc:	3008      	adds	r0, #8
 8010efe:	6823      	ldr	r3, [r4, #0]
 8010f00:	6003      	str	r3, [r0, #0]
 8010f02:	6863      	ldr	r3, [r4, #4]
 8010f04:	6043      	str	r3, [r0, #4]
 8010f06:	68a3      	ldr	r3, [r4, #8]
 8010f08:	6083      	str	r3, [r0, #8]
 8010f0a:	003e      	movs	r6, r7
 8010f0c:	e7c8      	b.n	8010ea0 <_realloc_r+0x208>
 8010f0e:	68a3      	ldr	r3, [r4, #8]
 8010f10:	612b      	str	r3, [r5, #16]
 8010f12:	68e3      	ldr	r3, [r4, #12]
 8010f14:	616b      	str	r3, [r5, #20]
 8010f16:	2a24      	cmp	r2, #36	; 0x24
 8010f18:	d003      	beq.n	8010f22 <_realloc_r+0x28a>
 8010f1a:	0028      	movs	r0, r5
 8010f1c:	3410      	adds	r4, #16
 8010f1e:	3018      	adds	r0, #24
 8010f20:	e7ed      	b.n	8010efe <_realloc_r+0x266>
 8010f22:	0028      	movs	r0, r5
 8010f24:	6923      	ldr	r3, [r4, #16]
 8010f26:	3020      	adds	r0, #32
 8010f28:	61ab      	str	r3, [r5, #24]
 8010f2a:	6963      	ldr	r3, [r4, #20]
 8010f2c:	3418      	adds	r4, #24
 8010f2e:	61eb      	str	r3, [r5, #28]
 8010f30:	e7e5      	b.n	8010efe <_realloc_r+0x266>
 8010f32:	0021      	movs	r1, r4
 8010f34:	f001 fb47 	bl	80125c6 <memmove>
 8010f38:	e7e7      	b.n	8010f0a <_realloc_r+0x272>
 8010f3a:	9905      	ldr	r1, [sp, #20]
 8010f3c:	9801      	ldr	r0, [sp, #4]
 8010f3e:	f7f9 fced 	bl	800a91c <_malloc_r>
 8010f42:	1e07      	subs	r7, r0, #0
 8010f44:	d100      	bne.n	8010f48 <_realloc_r+0x2b0>
 8010f46:	e76f      	b.n	8010e28 <_realloc_r+0x190>
 8010f48:	0023      	movs	r3, r4
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	3b08      	subs	r3, #8
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	4393      	bics	r3, r2
 8010f52:	9a04      	ldr	r2, [sp, #16]
 8010f54:	18d3      	adds	r3, r2, r3
 8010f56:	0002      	movs	r2, r0
 8010f58:	3a08      	subs	r2, #8
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d105      	bne.n	8010f6a <_realloc_r+0x2d2>
 8010f5e:	685e      	ldr	r6, [r3, #4]
 8010f60:	2303      	movs	r3, #3
 8010f62:	439e      	bics	r6, r3
 8010f64:	9b03      	ldr	r3, [sp, #12]
 8010f66:	18f6      	adds	r6, r6, r3
 8010f68:	e6fb      	b.n	8010d62 <_realloc_r+0xca>
 8010f6a:	9a03      	ldr	r2, [sp, #12]
 8010f6c:	3a04      	subs	r2, #4
 8010f6e:	2a24      	cmp	r2, #36	; 0x24
 8010f70:	d829      	bhi.n	8010fc6 <_realloc_r+0x32e>
 8010f72:	0003      	movs	r3, r0
 8010f74:	0021      	movs	r1, r4
 8010f76:	2a13      	cmp	r2, #19
 8010f78:	d908      	bls.n	8010f8c <_realloc_r+0x2f4>
 8010f7a:	6823      	ldr	r3, [r4, #0]
 8010f7c:	6003      	str	r3, [r0, #0]
 8010f7e:	6863      	ldr	r3, [r4, #4]
 8010f80:	6043      	str	r3, [r0, #4]
 8010f82:	2a1b      	cmp	r2, #27
 8010f84:	d80d      	bhi.n	8010fa2 <_realloc_r+0x30a>
 8010f86:	0003      	movs	r3, r0
 8010f88:	3108      	adds	r1, #8
 8010f8a:	3308      	adds	r3, #8
 8010f8c:	680a      	ldr	r2, [r1, #0]
 8010f8e:	601a      	str	r2, [r3, #0]
 8010f90:	684a      	ldr	r2, [r1, #4]
 8010f92:	605a      	str	r2, [r3, #4]
 8010f94:	688a      	ldr	r2, [r1, #8]
 8010f96:	609a      	str	r2, [r3, #8]
 8010f98:	0021      	movs	r1, r4
 8010f9a:	9801      	ldr	r0, [sp, #4]
 8010f9c:	f7fb f89e 	bl	800c0dc <_free_r>
 8010fa0:	e742      	b.n	8010e28 <_realloc_r+0x190>
 8010fa2:	68a3      	ldr	r3, [r4, #8]
 8010fa4:	6083      	str	r3, [r0, #8]
 8010fa6:	68e3      	ldr	r3, [r4, #12]
 8010fa8:	60c3      	str	r3, [r0, #12]
 8010faa:	2a24      	cmp	r2, #36	; 0x24
 8010fac:	d003      	beq.n	8010fb6 <_realloc_r+0x31e>
 8010fae:	0003      	movs	r3, r0
 8010fb0:	3110      	adds	r1, #16
 8010fb2:	3310      	adds	r3, #16
 8010fb4:	e7ea      	b.n	8010f8c <_realloc_r+0x2f4>
 8010fb6:	6923      	ldr	r3, [r4, #16]
 8010fb8:	3118      	adds	r1, #24
 8010fba:	6103      	str	r3, [r0, #16]
 8010fbc:	0003      	movs	r3, r0
 8010fbe:	6962      	ldr	r2, [r4, #20]
 8010fc0:	3318      	adds	r3, #24
 8010fc2:	6142      	str	r2, [r0, #20]
 8010fc4:	e7e2      	b.n	8010f8c <_realloc_r+0x2f4>
 8010fc6:	0021      	movs	r1, r4
 8010fc8:	f001 fafd 	bl	80125c6 <memmove>
 8010fcc:	e7e4      	b.n	8010f98 <_realloc_r+0x300>
 8010fce:	9e03      	ldr	r6, [sp, #12]
 8010fd0:	e6c7      	b.n	8010d62 <_realloc_r+0xca>
 8010fd2:	9902      	ldr	r1, [sp, #8]
 8010fd4:	4306      	orrs	r6, r0
 8010fd6:	604e      	str	r6, [r1, #4]
 8010fd8:	6851      	ldr	r1, [r2, #4]
 8010fda:	430b      	orrs	r3, r1
 8010fdc:	6053      	str	r3, [r2, #4]
 8010fde:	e6da      	b.n	8010d96 <_realloc_r+0xfe>
 8010fe0:	2000002c 	.word	0x2000002c

08010fe4 <_strtoul_l.constprop.0>:
 8010fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fe6:	b087      	sub	sp, #28
 8010fe8:	9202      	str	r2, [sp, #8]
 8010fea:	4a3e      	ldr	r2, [pc, #248]	; (80110e4 <_strtoul_l.constprop.0+0x100>)
 8010fec:	001e      	movs	r6, r3
 8010fee:	9101      	str	r1, [sp, #4]
 8010ff0:	000b      	movs	r3, r1
 8010ff2:	4694      	mov	ip, r2
 8010ff4:	2108      	movs	r1, #8
 8010ff6:	9005      	str	r0, [sp, #20]
 8010ff8:	001a      	movs	r2, r3
 8010ffa:	4660      	mov	r0, ip
 8010ffc:	7814      	ldrb	r4, [r2, #0]
 8010ffe:	3301      	adds	r3, #1
 8011000:	5d00      	ldrb	r0, [r0, r4]
 8011002:	001d      	movs	r5, r3
 8011004:	0007      	movs	r7, r0
 8011006:	400f      	ands	r7, r1
 8011008:	4208      	tst	r0, r1
 801100a:	d1f5      	bne.n	8010ff8 <_strtoul_l.constprop.0+0x14>
 801100c:	2c2d      	cmp	r4, #45	; 0x2d
 801100e:	d13d      	bne.n	801108c <_strtoul_l.constprop.0+0xa8>
 8011010:	2701      	movs	r7, #1
 8011012:	781c      	ldrb	r4, [r3, #0]
 8011014:	1c95      	adds	r5, r2, #2
 8011016:	2e00      	cmp	r6, #0
 8011018:	d05f      	beq.n	80110da <_strtoul_l.constprop.0+0xf6>
 801101a:	2e10      	cmp	r6, #16
 801101c:	d109      	bne.n	8011032 <_strtoul_l.constprop.0+0x4e>
 801101e:	2c30      	cmp	r4, #48	; 0x30
 8011020:	d107      	bne.n	8011032 <_strtoul_l.constprop.0+0x4e>
 8011022:	2220      	movs	r2, #32
 8011024:	782b      	ldrb	r3, [r5, #0]
 8011026:	4393      	bics	r3, r2
 8011028:	2b58      	cmp	r3, #88	; 0x58
 801102a:	d151      	bne.n	80110d0 <_strtoul_l.constprop.0+0xec>
 801102c:	2610      	movs	r6, #16
 801102e:	786c      	ldrb	r4, [r5, #1]
 8011030:	3502      	adds	r5, #2
 8011032:	2001      	movs	r0, #1
 8011034:	0031      	movs	r1, r6
 8011036:	4240      	negs	r0, r0
 8011038:	f7ef f880 	bl	800013c <__udivsi3>
 801103c:	9003      	str	r0, [sp, #12]
 801103e:	2001      	movs	r0, #1
 8011040:	0031      	movs	r1, r6
 8011042:	4240      	negs	r0, r0
 8011044:	f7ef f900 	bl	8000248 <__aeabi_uidivmod>
 8011048:	2300      	movs	r3, #0
 801104a:	2201      	movs	r2, #1
 801104c:	9104      	str	r1, [sp, #16]
 801104e:	2101      	movs	r1, #1
 8011050:	0018      	movs	r0, r3
 8011052:	4694      	mov	ip, r2
 8011054:	4249      	negs	r1, r1
 8011056:	0022      	movs	r2, r4
 8011058:	3a30      	subs	r2, #48	; 0x30
 801105a:	2a09      	cmp	r2, #9
 801105c:	d903      	bls.n	8011066 <_strtoul_l.constprop.0+0x82>
 801105e:	3a11      	subs	r2, #17
 8011060:	2a19      	cmp	r2, #25
 8011062:	d818      	bhi.n	8011096 <_strtoul_l.constprop.0+0xb2>
 8011064:	320a      	adds	r2, #10
 8011066:	4296      	cmp	r6, r2
 8011068:	dd19      	ble.n	801109e <_strtoul_l.constprop.0+0xba>
 801106a:	1c5c      	adds	r4, r3, #1
 801106c:	d00b      	beq.n	8011086 <_strtoul_l.constprop.0+0xa2>
 801106e:	9c03      	ldr	r4, [sp, #12]
 8011070:	000b      	movs	r3, r1
 8011072:	4284      	cmp	r4, r0
 8011074:	d307      	bcc.n	8011086 <_strtoul_l.constprop.0+0xa2>
 8011076:	d103      	bne.n	8011080 <_strtoul_l.constprop.0+0x9c>
 8011078:	9c04      	ldr	r4, [sp, #16]
 801107a:	000b      	movs	r3, r1
 801107c:	4294      	cmp	r4, r2
 801107e:	db02      	blt.n	8011086 <_strtoul_l.constprop.0+0xa2>
 8011080:	4663      	mov	r3, ip
 8011082:	4370      	muls	r0, r6
 8011084:	1810      	adds	r0, r2, r0
 8011086:	782c      	ldrb	r4, [r5, #0]
 8011088:	3501      	adds	r5, #1
 801108a:	e7e4      	b.n	8011056 <_strtoul_l.constprop.0+0x72>
 801108c:	2c2b      	cmp	r4, #43	; 0x2b
 801108e:	d1c2      	bne.n	8011016 <_strtoul_l.constprop.0+0x32>
 8011090:	781c      	ldrb	r4, [r3, #0]
 8011092:	1c95      	adds	r5, r2, #2
 8011094:	e7bf      	b.n	8011016 <_strtoul_l.constprop.0+0x32>
 8011096:	0022      	movs	r2, r4
 8011098:	3a61      	subs	r2, #97	; 0x61
 801109a:	2a19      	cmp	r2, #25
 801109c:	d9e2      	bls.n	8011064 <_strtoul_l.constprop.0+0x80>
 801109e:	1c5a      	adds	r2, r3, #1
 80110a0:	d108      	bne.n	80110b4 <_strtoul_l.constprop.0+0xd0>
 80110a2:	2222      	movs	r2, #34	; 0x22
 80110a4:	9905      	ldr	r1, [sp, #20]
 80110a6:	0018      	movs	r0, r3
 80110a8:	600a      	str	r2, [r1, #0]
 80110aa:	9a02      	ldr	r2, [sp, #8]
 80110ac:	2a00      	cmp	r2, #0
 80110ae:	d109      	bne.n	80110c4 <_strtoul_l.constprop.0+0xe0>
 80110b0:	b007      	add	sp, #28
 80110b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110b4:	2f00      	cmp	r7, #0
 80110b6:	d000      	beq.n	80110ba <_strtoul_l.constprop.0+0xd6>
 80110b8:	4240      	negs	r0, r0
 80110ba:	9a02      	ldr	r2, [sp, #8]
 80110bc:	2a00      	cmp	r2, #0
 80110be:	d0f7      	beq.n	80110b0 <_strtoul_l.constprop.0+0xcc>
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d001      	beq.n	80110c8 <_strtoul_l.constprop.0+0xe4>
 80110c4:	1e6b      	subs	r3, r5, #1
 80110c6:	9301      	str	r3, [sp, #4]
 80110c8:	9b02      	ldr	r3, [sp, #8]
 80110ca:	9a01      	ldr	r2, [sp, #4]
 80110cc:	601a      	str	r2, [r3, #0]
 80110ce:	e7ef      	b.n	80110b0 <_strtoul_l.constprop.0+0xcc>
 80110d0:	2430      	movs	r4, #48	; 0x30
 80110d2:	2e00      	cmp	r6, #0
 80110d4:	d1ad      	bne.n	8011032 <_strtoul_l.constprop.0+0x4e>
 80110d6:	3608      	adds	r6, #8
 80110d8:	e7ab      	b.n	8011032 <_strtoul_l.constprop.0+0x4e>
 80110da:	2c30      	cmp	r4, #48	; 0x30
 80110dc:	d0a1      	beq.n	8011022 <_strtoul_l.constprop.0+0x3e>
 80110de:	260a      	movs	r6, #10
 80110e0:	e7a7      	b.n	8011032 <_strtoul_l.constprop.0+0x4e>
 80110e2:	46c0      	nop			; (mov r8, r8)
 80110e4:	08014379 	.word	0x08014379

080110e8 <_strtoul_r>:
 80110e8:	b510      	push	{r4, lr}
 80110ea:	f7ff ff7b 	bl	8010fe4 <_strtoul_l.constprop.0>
 80110ee:	bd10      	pop	{r4, pc}

080110f0 <_strtoll_l.constprop.0>:
 80110f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110f2:	b08d      	sub	sp, #52	; 0x34
 80110f4:	9203      	str	r2, [sp, #12]
 80110f6:	4a53      	ldr	r2, [pc, #332]	; (8011244 <_strtoll_l.constprop.0+0x154>)
 80110f8:	001e      	movs	r6, r3
 80110fa:	9102      	str	r1, [sp, #8]
 80110fc:	000b      	movs	r3, r1
 80110fe:	4694      	mov	ip, r2
 8011100:	2108      	movs	r1, #8
 8011102:	900a      	str	r0, [sp, #40]	; 0x28
 8011104:	001a      	movs	r2, r3
 8011106:	4660      	mov	r0, ip
 8011108:	7814      	ldrb	r4, [r2, #0]
 801110a:	3301      	adds	r3, #1
 801110c:	5d00      	ldrb	r0, [r0, r4]
 801110e:	001d      	movs	r5, r3
 8011110:	0007      	movs	r7, r0
 8011112:	400f      	ands	r7, r1
 8011114:	4208      	tst	r0, r1
 8011116:	d1f5      	bne.n	8011104 <_strtoll_l.constprop.0+0x14>
 8011118:	2c2d      	cmp	r4, #45	; 0x2d
 801111a:	d153      	bne.n	80111c4 <_strtoll_l.constprop.0+0xd4>
 801111c:	781c      	ldrb	r4, [r3, #0]
 801111e:	2301      	movs	r3, #1
 8011120:	1c95      	adds	r5, r2, #2
 8011122:	9301      	str	r3, [sp, #4]
 8011124:	2e00      	cmp	r6, #0
 8011126:	d100      	bne.n	801112a <_strtoll_l.constprop.0+0x3a>
 8011128:	e086      	b.n	8011238 <_strtoll_l.constprop.0+0x148>
 801112a:	2e10      	cmp	r6, #16
 801112c:	d10a      	bne.n	8011144 <_strtoll_l.constprop.0+0x54>
 801112e:	2c30      	cmp	r4, #48	; 0x30
 8011130:	d108      	bne.n	8011144 <_strtoll_l.constprop.0+0x54>
 8011132:	2220      	movs	r2, #32
 8011134:	782b      	ldrb	r3, [r5, #0]
 8011136:	4393      	bics	r3, r2
 8011138:	2b58      	cmp	r3, #88	; 0x58
 801113a:	d000      	beq.n	801113e <_strtoll_l.constprop.0+0x4e>
 801113c:	e076      	b.n	801122c <_strtoll_l.constprop.0+0x13c>
 801113e:	2610      	movs	r6, #16
 8011140:	786c      	ldrb	r4, [r5, #1]
 8011142:	3502      	adds	r5, #2
 8011144:	2001      	movs	r0, #1
 8011146:	2300      	movs	r3, #0
 8011148:	493f      	ldr	r1, [pc, #252]	; (8011248 <_strtoll_l.constprop.0+0x158>)
 801114a:	9a01      	ldr	r2, [sp, #4]
 801114c:	4240      	negs	r0, r0
 801114e:	1812      	adds	r2, r2, r0
 8011150:	414b      	adcs	r3, r1
 8011152:	9204      	str	r2, [sp, #16]
 8011154:	9305      	str	r3, [sp, #20]
 8011156:	9804      	ldr	r0, [sp, #16]
 8011158:	9905      	ldr	r1, [sp, #20]
 801115a:	17f3      	asrs	r3, r6, #31
 801115c:	0032      	movs	r2, r6
 801115e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011160:	f7ef f9a0 	bl	80004a4 <__aeabi_uldivmod>
 8011164:	2300      	movs	r3, #0
 8011166:	000f      	movs	r7, r1
 8011168:	9008      	str	r0, [sp, #32]
 801116a:	2100      	movs	r1, #0
 801116c:	2000      	movs	r0, #0
 801116e:	9209      	str	r2, [sp, #36]	; 0x24
 8011170:	0022      	movs	r2, r4
 8011172:	3a30      	subs	r2, #48	; 0x30
 8011174:	2a09      	cmp	r2, #9
 8011176:	d82b      	bhi.n	80111d0 <_strtoll_l.constprop.0+0xe0>
 8011178:	0014      	movs	r4, r2
 801117a:	42a6      	cmp	r6, r4
 801117c:	dd37      	ble.n	80111ee <_strtoll_l.constprop.0+0xfe>
 801117e:	1c5a      	adds	r2, r3, #1
 8011180:	d01d      	beq.n	80111be <_strtoll_l.constprop.0+0xce>
 8011182:	42b9      	cmp	r1, r7
 8011184:	d830      	bhi.n	80111e8 <_strtoll_l.constprop.0+0xf8>
 8011186:	d102      	bne.n	801118e <_strtoll_l.constprop.0+0x9e>
 8011188:	9b08      	ldr	r3, [sp, #32]
 801118a:	4298      	cmp	r0, r3
 801118c:	d82c      	bhi.n	80111e8 <_strtoll_l.constprop.0+0xf8>
 801118e:	9b08      	ldr	r3, [sp, #32]
 8011190:	4283      	cmp	r3, r0
 8011192:	d106      	bne.n	80111a2 <_strtoll_l.constprop.0+0xb2>
 8011194:	428f      	cmp	r7, r1
 8011196:	d104      	bne.n	80111a2 <_strtoll_l.constprop.0+0xb2>
 8011198:	2301      	movs	r3, #1
 801119a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801119c:	425b      	negs	r3, r3
 801119e:	42a2      	cmp	r2, r4
 80111a0:	db0d      	blt.n	80111be <_strtoll_l.constprop.0+0xce>
 80111a2:	000b      	movs	r3, r1
 80111a4:	0002      	movs	r2, r0
 80111a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111a8:	0030      	movs	r0, r6
 80111aa:	f7ef f99b 	bl	80004e4 <__aeabi_lmul>
 80111ae:	17e3      	asrs	r3, r4, #31
 80111b0:	9406      	str	r4, [sp, #24]
 80111b2:	9307      	str	r3, [sp, #28]
 80111b4:	9b06      	ldr	r3, [sp, #24]
 80111b6:	9c07      	ldr	r4, [sp, #28]
 80111b8:	18c0      	adds	r0, r0, r3
 80111ba:	4161      	adcs	r1, r4
 80111bc:	2301      	movs	r3, #1
 80111be:	782c      	ldrb	r4, [r5, #0]
 80111c0:	3501      	adds	r5, #1
 80111c2:	e7d5      	b.n	8011170 <_strtoll_l.constprop.0+0x80>
 80111c4:	9701      	str	r7, [sp, #4]
 80111c6:	2c2b      	cmp	r4, #43	; 0x2b
 80111c8:	d1ac      	bne.n	8011124 <_strtoll_l.constprop.0+0x34>
 80111ca:	781c      	ldrb	r4, [r3, #0]
 80111cc:	1c95      	adds	r5, r2, #2
 80111ce:	e7a9      	b.n	8011124 <_strtoll_l.constprop.0+0x34>
 80111d0:	0022      	movs	r2, r4
 80111d2:	3a41      	subs	r2, #65	; 0x41
 80111d4:	2a19      	cmp	r2, #25
 80111d6:	d801      	bhi.n	80111dc <_strtoll_l.constprop.0+0xec>
 80111d8:	3c37      	subs	r4, #55	; 0x37
 80111da:	e7ce      	b.n	801117a <_strtoll_l.constprop.0+0x8a>
 80111dc:	0022      	movs	r2, r4
 80111de:	3a61      	subs	r2, #97	; 0x61
 80111e0:	2a19      	cmp	r2, #25
 80111e2:	d804      	bhi.n	80111ee <_strtoll_l.constprop.0+0xfe>
 80111e4:	3c57      	subs	r4, #87	; 0x57
 80111e6:	e7c8      	b.n	801117a <_strtoll_l.constprop.0+0x8a>
 80111e8:	2301      	movs	r3, #1
 80111ea:	425b      	negs	r3, r3
 80111ec:	e7e7      	b.n	80111be <_strtoll_l.constprop.0+0xce>
 80111ee:	1c5a      	adds	r2, r3, #1
 80111f0:	d109      	bne.n	8011206 <_strtoll_l.constprop.0+0x116>
 80111f2:	9804      	ldr	r0, [sp, #16]
 80111f4:	9905      	ldr	r1, [sp, #20]
 80111f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111f8:	3323      	adds	r3, #35	; 0x23
 80111fa:	6013      	str	r3, [r2, #0]
 80111fc:	9b03      	ldr	r3, [sp, #12]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d10e      	bne.n	8011220 <_strtoll_l.constprop.0+0x130>
 8011202:	b00d      	add	sp, #52	; 0x34
 8011204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011206:	9a01      	ldr	r2, [sp, #4]
 8011208:	2a00      	cmp	r2, #0
 801120a:	d004      	beq.n	8011216 <_strtoll_l.constprop.0+0x126>
 801120c:	0006      	movs	r6, r0
 801120e:	000f      	movs	r7, r1
 8011210:	2100      	movs	r1, #0
 8011212:	4270      	negs	r0, r6
 8011214:	41b9      	sbcs	r1, r7
 8011216:	9a03      	ldr	r2, [sp, #12]
 8011218:	2a00      	cmp	r2, #0
 801121a:	d0f2      	beq.n	8011202 <_strtoll_l.constprop.0+0x112>
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <_strtoll_l.constprop.0+0x134>
 8011220:	1e6b      	subs	r3, r5, #1
 8011222:	9302      	str	r3, [sp, #8]
 8011224:	9b03      	ldr	r3, [sp, #12]
 8011226:	9a02      	ldr	r2, [sp, #8]
 8011228:	601a      	str	r2, [r3, #0]
 801122a:	e7ea      	b.n	8011202 <_strtoll_l.constprop.0+0x112>
 801122c:	2430      	movs	r4, #48	; 0x30
 801122e:	2e00      	cmp	r6, #0
 8011230:	d000      	beq.n	8011234 <_strtoll_l.constprop.0+0x144>
 8011232:	e787      	b.n	8011144 <_strtoll_l.constprop.0+0x54>
 8011234:	3608      	adds	r6, #8
 8011236:	e785      	b.n	8011144 <_strtoll_l.constprop.0+0x54>
 8011238:	2c30      	cmp	r4, #48	; 0x30
 801123a:	d100      	bne.n	801123e <_strtoll_l.constprop.0+0x14e>
 801123c:	e779      	b.n	8011132 <_strtoll_l.constprop.0+0x42>
 801123e:	260a      	movs	r6, #10
 8011240:	e780      	b.n	8011144 <_strtoll_l.constprop.0+0x54>
 8011242:	46c0      	nop			; (mov r8, r8)
 8011244:	08014379 	.word	0x08014379
 8011248:	7fffffff 	.word	0x7fffffff

0801124c <_strtoll_r>:
 801124c:	b510      	push	{r4, lr}
 801124e:	f7ff ff4f 	bl	80110f0 <_strtoll_l.constprop.0>
 8011252:	bd10      	pop	{r4, pc}

08011254 <_strtoull_l.constprop.0>:
 8011254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011256:	b08b      	sub	sp, #44	; 0x2c
 8011258:	9202      	str	r2, [sp, #8]
 801125a:	4a54      	ldr	r2, [pc, #336]	; (80113ac <_strtoull_l.constprop.0+0x158>)
 801125c:	001e      	movs	r6, r3
 801125e:	9101      	str	r1, [sp, #4]
 8011260:	000b      	movs	r3, r1
 8011262:	4694      	mov	ip, r2
 8011264:	2108      	movs	r1, #8
 8011266:	9009      	str	r0, [sp, #36]	; 0x24
 8011268:	001a      	movs	r2, r3
 801126a:	4660      	mov	r0, ip
 801126c:	7814      	ldrb	r4, [r2, #0]
 801126e:	3301      	adds	r3, #1
 8011270:	5d00      	ldrb	r0, [r0, r4]
 8011272:	001d      	movs	r5, r3
 8011274:	0007      	movs	r7, r0
 8011276:	400f      	ands	r7, r1
 8011278:	4208      	tst	r0, r1
 801127a:	d1f5      	bne.n	8011268 <_strtoull_l.constprop.0+0x14>
 801127c:	2c2d      	cmp	r4, #45	; 0x2d
 801127e:	d154      	bne.n	801132a <_strtoull_l.constprop.0+0xd6>
 8011280:	781c      	ldrb	r4, [r3, #0]
 8011282:	2301      	movs	r3, #1
 8011284:	1c95      	adds	r5, r2, #2
 8011286:	9306      	str	r3, [sp, #24]
 8011288:	2e00      	cmp	r6, #0
 801128a:	d100      	bne.n	801128e <_strtoull_l.constprop.0+0x3a>
 801128c:	e088      	b.n	80113a0 <_strtoull_l.constprop.0+0x14c>
 801128e:	2e10      	cmp	r6, #16
 8011290:	d10a      	bne.n	80112a8 <_strtoull_l.constprop.0+0x54>
 8011292:	2c30      	cmp	r4, #48	; 0x30
 8011294:	d108      	bne.n	80112a8 <_strtoull_l.constprop.0+0x54>
 8011296:	2220      	movs	r2, #32
 8011298:	782b      	ldrb	r3, [r5, #0]
 801129a:	4393      	bics	r3, r2
 801129c:	2b58      	cmp	r3, #88	; 0x58
 801129e:	d000      	beq.n	80112a2 <_strtoull_l.constprop.0+0x4e>
 80112a0:	e078      	b.n	8011394 <_strtoull_l.constprop.0+0x140>
 80112a2:	2610      	movs	r6, #16
 80112a4:	786c      	ldrb	r4, [r5, #1]
 80112a6:	3502      	adds	r5, #2
 80112a8:	17f7      	asrs	r7, r6, #31
 80112aa:	0032      	movs	r2, r6
 80112ac:	003b      	movs	r3, r7
 80112ae:	2001      	movs	r0, #1
 80112b0:	4240      	negs	r0, r0
 80112b2:	17c1      	asrs	r1, r0, #31
 80112b4:	f7ef f8f6 	bl	80004a4 <__aeabi_uldivmod>
 80112b8:	0032      	movs	r2, r6
 80112ba:	9007      	str	r0, [sp, #28]
 80112bc:	9103      	str	r1, [sp, #12]
 80112be:	003b      	movs	r3, r7
 80112c0:	2001      	movs	r0, #1
 80112c2:	4240      	negs	r0, r0
 80112c4:	17c1      	asrs	r1, r0, #31
 80112c6:	f7ef f8ed 	bl	80004a4 <__aeabi_uldivmod>
 80112ca:	2300      	movs	r3, #0
 80112cc:	2000      	movs	r0, #0
 80112ce:	2100      	movs	r1, #0
 80112d0:	9208      	str	r2, [sp, #32]
 80112d2:	0022      	movs	r2, r4
 80112d4:	3a30      	subs	r2, #48	; 0x30
 80112d6:	2a09      	cmp	r2, #9
 80112d8:	d82d      	bhi.n	8011336 <_strtoull_l.constprop.0+0xe2>
 80112da:	0014      	movs	r4, r2
 80112dc:	42a6      	cmp	r6, r4
 80112de:	dd39      	ble.n	8011354 <_strtoull_l.constprop.0+0x100>
 80112e0:	1c5a      	adds	r2, r3, #1
 80112e2:	d01f      	beq.n	8011324 <_strtoull_l.constprop.0+0xd0>
 80112e4:	9b03      	ldr	r3, [sp, #12]
 80112e6:	4299      	cmp	r1, r3
 80112e8:	d831      	bhi.n	801134e <_strtoull_l.constprop.0+0xfa>
 80112ea:	d102      	bne.n	80112f2 <_strtoull_l.constprop.0+0x9e>
 80112ec:	9b07      	ldr	r3, [sp, #28]
 80112ee:	4298      	cmp	r0, r3
 80112f0:	d82d      	bhi.n	801134e <_strtoull_l.constprop.0+0xfa>
 80112f2:	9b07      	ldr	r3, [sp, #28]
 80112f4:	4283      	cmp	r3, r0
 80112f6:	d107      	bne.n	8011308 <_strtoull_l.constprop.0+0xb4>
 80112f8:	9b03      	ldr	r3, [sp, #12]
 80112fa:	428b      	cmp	r3, r1
 80112fc:	d104      	bne.n	8011308 <_strtoull_l.constprop.0+0xb4>
 80112fe:	2301      	movs	r3, #1
 8011300:	9a08      	ldr	r2, [sp, #32]
 8011302:	425b      	negs	r3, r3
 8011304:	42a2      	cmp	r2, r4
 8011306:	db0d      	blt.n	8011324 <_strtoull_l.constprop.0+0xd0>
 8011308:	000b      	movs	r3, r1
 801130a:	0002      	movs	r2, r0
 801130c:	0039      	movs	r1, r7
 801130e:	0030      	movs	r0, r6
 8011310:	f7ef f8e8 	bl	80004e4 <__aeabi_lmul>
 8011314:	17e3      	asrs	r3, r4, #31
 8011316:	9404      	str	r4, [sp, #16]
 8011318:	9305      	str	r3, [sp, #20]
 801131a:	9b04      	ldr	r3, [sp, #16]
 801131c:	9c05      	ldr	r4, [sp, #20]
 801131e:	18c0      	adds	r0, r0, r3
 8011320:	4161      	adcs	r1, r4
 8011322:	2301      	movs	r3, #1
 8011324:	782c      	ldrb	r4, [r5, #0]
 8011326:	3501      	adds	r5, #1
 8011328:	e7d3      	b.n	80112d2 <_strtoull_l.constprop.0+0x7e>
 801132a:	9706      	str	r7, [sp, #24]
 801132c:	2c2b      	cmp	r4, #43	; 0x2b
 801132e:	d1ab      	bne.n	8011288 <_strtoull_l.constprop.0+0x34>
 8011330:	781c      	ldrb	r4, [r3, #0]
 8011332:	1c95      	adds	r5, r2, #2
 8011334:	e7a8      	b.n	8011288 <_strtoull_l.constprop.0+0x34>
 8011336:	0022      	movs	r2, r4
 8011338:	3a41      	subs	r2, #65	; 0x41
 801133a:	2a19      	cmp	r2, #25
 801133c:	d801      	bhi.n	8011342 <_strtoull_l.constprop.0+0xee>
 801133e:	3c37      	subs	r4, #55	; 0x37
 8011340:	e7cc      	b.n	80112dc <_strtoull_l.constprop.0+0x88>
 8011342:	0022      	movs	r2, r4
 8011344:	3a61      	subs	r2, #97	; 0x61
 8011346:	2a19      	cmp	r2, #25
 8011348:	d804      	bhi.n	8011354 <_strtoull_l.constprop.0+0x100>
 801134a:	3c57      	subs	r4, #87	; 0x57
 801134c:	e7c6      	b.n	80112dc <_strtoull_l.constprop.0+0x88>
 801134e:	2301      	movs	r3, #1
 8011350:	425b      	negs	r3, r3
 8011352:	e7e7      	b.n	8011324 <_strtoull_l.constprop.0+0xd0>
 8011354:	1c5a      	adds	r2, r3, #1
 8011356:	d10a      	bne.n	801136e <_strtoull_l.constprop.0+0x11a>
 8011358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801135a:	3323      	adds	r3, #35	; 0x23
 801135c:	6013      	str	r3, [r2, #0]
 801135e:	9b02      	ldr	r3, [sp, #8]
 8011360:	2001      	movs	r0, #1
 8011362:	4240      	negs	r0, r0
 8011364:	17c1      	asrs	r1, r0, #31
 8011366:	2b00      	cmp	r3, #0
 8011368:	d10e      	bne.n	8011388 <_strtoull_l.constprop.0+0x134>
 801136a:	b00b      	add	sp, #44	; 0x2c
 801136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801136e:	9a06      	ldr	r2, [sp, #24]
 8011370:	2a00      	cmp	r2, #0
 8011372:	d004      	beq.n	801137e <_strtoull_l.constprop.0+0x12a>
 8011374:	0006      	movs	r6, r0
 8011376:	000f      	movs	r7, r1
 8011378:	2100      	movs	r1, #0
 801137a:	4270      	negs	r0, r6
 801137c:	41b9      	sbcs	r1, r7
 801137e:	9a02      	ldr	r2, [sp, #8]
 8011380:	2a00      	cmp	r2, #0
 8011382:	d0f2      	beq.n	801136a <_strtoull_l.constprop.0+0x116>
 8011384:	2b00      	cmp	r3, #0
 8011386:	d001      	beq.n	801138c <_strtoull_l.constprop.0+0x138>
 8011388:	1e6b      	subs	r3, r5, #1
 801138a:	9301      	str	r3, [sp, #4]
 801138c:	9b02      	ldr	r3, [sp, #8]
 801138e:	9a01      	ldr	r2, [sp, #4]
 8011390:	601a      	str	r2, [r3, #0]
 8011392:	e7ea      	b.n	801136a <_strtoull_l.constprop.0+0x116>
 8011394:	2430      	movs	r4, #48	; 0x30
 8011396:	2e00      	cmp	r6, #0
 8011398:	d000      	beq.n	801139c <_strtoull_l.constprop.0+0x148>
 801139a:	e785      	b.n	80112a8 <_strtoull_l.constprop.0+0x54>
 801139c:	3608      	adds	r6, #8
 801139e:	e783      	b.n	80112a8 <_strtoull_l.constprop.0+0x54>
 80113a0:	2c30      	cmp	r4, #48	; 0x30
 80113a2:	d100      	bne.n	80113a6 <_strtoull_l.constprop.0+0x152>
 80113a4:	e777      	b.n	8011296 <_strtoull_l.constprop.0+0x42>
 80113a6:	260a      	movs	r6, #10
 80113a8:	e77e      	b.n	80112a8 <_strtoull_l.constprop.0+0x54>
 80113aa:	46c0      	nop			; (mov r8, r8)
 80113ac:	08014379 	.word	0x08014379

080113b0 <_strtoull_r>:
 80113b0:	b510      	push	{r4, lr}
 80113b2:	f7ff ff4f 	bl	8011254 <_strtoull_l.constprop.0>
 80113b6:	bd10      	pop	{r4, pc}

080113b8 <_mbrtowc_r>:
 80113b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113ba:	0004      	movs	r4, r0
 80113bc:	0010      	movs	r0, r2
 80113be:	4a0b      	ldr	r2, [pc, #44]	; (80113ec <_mbrtowc_r+0x34>)
 80113c0:	9d06      	ldr	r5, [sp, #24]
 80113c2:	32e4      	adds	r2, #228	; 0xe4
 80113c4:	6816      	ldr	r6, [r2, #0]
 80113c6:	2800      	cmp	r0, #0
 80113c8:	d10c      	bne.n	80113e4 <_mbrtowc_r+0x2c>
 80113ca:	2301      	movs	r3, #1
 80113cc:	0001      	movs	r1, r0
 80113ce:	4a08      	ldr	r2, [pc, #32]	; (80113f0 <_mbrtowc_r+0x38>)
 80113d0:	9500      	str	r5, [sp, #0]
 80113d2:	0020      	movs	r0, r4
 80113d4:	47b0      	blx	r6
 80113d6:	1c43      	adds	r3, r0, #1
 80113d8:	d103      	bne.n	80113e2 <_mbrtowc_r+0x2a>
 80113da:	2300      	movs	r3, #0
 80113dc:	602b      	str	r3, [r5, #0]
 80113de:	338a      	adds	r3, #138	; 0x8a
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80113e4:	0002      	movs	r2, r0
 80113e6:	9500      	str	r5, [sp, #0]
 80113e8:	e7f3      	b.n	80113d2 <_mbrtowc_r+0x1a>
 80113ea:	46c0      	nop			; (mov r8, r8)
 80113ec:	20000448 	.word	0x20000448
 80113f0:	08014703 	.word	0x08014703

080113f4 <iswspace>:
 80113f4:	b510      	push	{r4, lr}
 80113f6:	2100      	movs	r1, #0
 80113f8:	f000 f802 	bl	8011400 <iswspace_l>
 80113fc:	bd10      	pop	{r4, pc}
	...

08011400 <iswspace_l>:
 8011400:	0003      	movs	r3, r0
 8011402:	2000      	movs	r0, #0
 8011404:	2bff      	cmp	r3, #255	; 0xff
 8011406:	d803      	bhi.n	8011410 <iswspace_l+0x10>
 8011408:	4a02      	ldr	r2, [pc, #8]	; (8011414 <iswspace_l+0x14>)
 801140a:	5cd0      	ldrb	r0, [r2, r3]
 801140c:	2308      	movs	r3, #8
 801140e:	4018      	ands	r0, r3
 8011410:	4770      	bx	lr
 8011412:	46c0      	nop			; (mov r8, r8)
 8011414:	08014379 	.word	0x08014379

08011418 <fiprintf>:
 8011418:	b40e      	push	{r1, r2, r3}
 801141a:	b517      	push	{r0, r1, r2, r4, lr}
 801141c:	4c05      	ldr	r4, [pc, #20]	; (8011434 <fiprintf+0x1c>)
 801141e:	ab05      	add	r3, sp, #20
 8011420:	cb04      	ldmia	r3!, {r2}
 8011422:	0001      	movs	r1, r0
 8011424:	6820      	ldr	r0, [r4, #0]
 8011426:	9301      	str	r3, [sp, #4]
 8011428:	f000 f954 	bl	80116d4 <_vfiprintf_r>
 801142c:	bc1e      	pop	{r1, r2, r3, r4}
 801142e:	bc08      	pop	{r3}
 8011430:	b003      	add	sp, #12
 8011432:	4718      	bx	r3
 8011434:	200006d8 	.word	0x200006d8

08011438 <__ssprint_r>:
 8011438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801143a:	6813      	ldr	r3, [r2, #0]
 801143c:	b087      	sub	sp, #28
 801143e:	0017      	movs	r7, r2
 8011440:	9303      	str	r3, [sp, #12]
 8011442:	6893      	ldr	r3, [r2, #8]
 8011444:	2200      	movs	r2, #0
 8011446:	000c      	movs	r4, r1
 8011448:	9005      	str	r0, [sp, #20]
 801144a:	9202      	str	r2, [sp, #8]
 801144c:	9201      	str	r2, [sp, #4]
 801144e:	4293      	cmp	r3, r2
 8011450:	d10d      	bne.n	801146e <__ssprint_r+0x36>
 8011452:	2000      	movs	r0, #0
 8011454:	2300      	movs	r3, #0
 8011456:	607b      	str	r3, [r7, #4]
 8011458:	b007      	add	sp, #28
 801145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801145c:	9b03      	ldr	r3, [sp, #12]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	9302      	str	r3, [sp, #8]
 8011462:	9b03      	ldr	r3, [sp, #12]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	9301      	str	r3, [sp, #4]
 8011468:	9b03      	ldr	r3, [sp, #12]
 801146a:	3308      	adds	r3, #8
 801146c:	9303      	str	r3, [sp, #12]
 801146e:	9a01      	ldr	r2, [sp, #4]
 8011470:	68a6      	ldr	r6, [r4, #8]
 8011472:	6823      	ldr	r3, [r4, #0]
 8011474:	2a00      	cmp	r2, #0
 8011476:	d0f1      	beq.n	801145c <__ssprint_r+0x24>
 8011478:	42b2      	cmp	r2, r6
 801147a:	d32e      	bcc.n	80114da <__ssprint_r+0xa2>
 801147c:	2190      	movs	r1, #144	; 0x90
 801147e:	89a2      	ldrh	r2, [r4, #12]
 8011480:	00c9      	lsls	r1, r1, #3
 8011482:	420a      	tst	r2, r1
 8011484:	d029      	beq.n	80114da <__ssprint_r+0xa2>
 8011486:	2003      	movs	r0, #3
 8011488:	6921      	ldr	r1, [r4, #16]
 801148a:	1a5b      	subs	r3, r3, r1
 801148c:	9304      	str	r3, [sp, #16]
 801148e:	6963      	ldr	r3, [r4, #20]
 8011490:	4343      	muls	r3, r0
 8011492:	0fdd      	lsrs	r5, r3, #31
 8011494:	18ed      	adds	r5, r5, r3
 8011496:	9b04      	ldr	r3, [sp, #16]
 8011498:	9801      	ldr	r0, [sp, #4]
 801149a:	3301      	adds	r3, #1
 801149c:	181b      	adds	r3, r3, r0
 801149e:	106d      	asrs	r5, r5, #1
 80114a0:	42ab      	cmp	r3, r5
 80114a2:	d900      	bls.n	80114a6 <__ssprint_r+0x6e>
 80114a4:	001d      	movs	r5, r3
 80114a6:	0552      	lsls	r2, r2, #21
 80114a8:	d532      	bpl.n	8011510 <__ssprint_r+0xd8>
 80114aa:	0029      	movs	r1, r5
 80114ac:	9805      	ldr	r0, [sp, #20]
 80114ae:	f7f9 fa35 	bl	800a91c <_malloc_r>
 80114b2:	1e06      	subs	r6, r0, #0
 80114b4:	d036      	beq.n	8011524 <__ssprint_r+0xec>
 80114b6:	9a04      	ldr	r2, [sp, #16]
 80114b8:	6921      	ldr	r1, [r4, #16]
 80114ba:	f7fa fd94 	bl	800bfe6 <memcpy>
 80114be:	89a2      	ldrh	r2, [r4, #12]
 80114c0:	4b1e      	ldr	r3, [pc, #120]	; (801153c <__ssprint_r+0x104>)
 80114c2:	401a      	ands	r2, r3
 80114c4:	2380      	movs	r3, #128	; 0x80
 80114c6:	4313      	orrs	r3, r2
 80114c8:	81a3      	strh	r3, [r4, #12]
 80114ca:	9b04      	ldr	r3, [sp, #16]
 80114cc:	6126      	str	r6, [r4, #16]
 80114ce:	18f6      	adds	r6, r6, r3
 80114d0:	6026      	str	r6, [r4, #0]
 80114d2:	6165      	str	r5, [r4, #20]
 80114d4:	9e01      	ldr	r6, [sp, #4]
 80114d6:	1aed      	subs	r5, r5, r3
 80114d8:	60a5      	str	r5, [r4, #8]
 80114da:	9b01      	ldr	r3, [sp, #4]
 80114dc:	429e      	cmp	r6, r3
 80114de:	d900      	bls.n	80114e2 <__ssprint_r+0xaa>
 80114e0:	001e      	movs	r6, r3
 80114e2:	0032      	movs	r2, r6
 80114e4:	9902      	ldr	r1, [sp, #8]
 80114e6:	6820      	ldr	r0, [r4, #0]
 80114e8:	f001 f86d 	bl	80125c6 <memmove>
 80114ec:	9a01      	ldr	r2, [sp, #4]
 80114ee:	68a3      	ldr	r3, [r4, #8]
 80114f0:	4694      	mov	ip, r2
 80114f2:	1b9b      	subs	r3, r3, r6
 80114f4:	60a3      	str	r3, [r4, #8]
 80114f6:	6823      	ldr	r3, [r4, #0]
 80114f8:	199b      	adds	r3, r3, r6
 80114fa:	6023      	str	r3, [r4, #0]
 80114fc:	9b02      	ldr	r3, [sp, #8]
 80114fe:	4463      	add	r3, ip
 8011500:	9302      	str	r3, [sp, #8]
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	1a9b      	subs	r3, r3, r2
 8011506:	60bb      	str	r3, [r7, #8]
 8011508:	d0a3      	beq.n	8011452 <__ssprint_r+0x1a>
 801150a:	2300      	movs	r3, #0
 801150c:	9301      	str	r3, [sp, #4]
 801150e:	e7ae      	b.n	801146e <__ssprint_r+0x36>
 8011510:	002a      	movs	r2, r5
 8011512:	9805      	ldr	r0, [sp, #20]
 8011514:	f7ff fbc0 	bl	8010c98 <_realloc_r>
 8011518:	1e06      	subs	r6, r0, #0
 801151a:	d1d6      	bne.n	80114ca <__ssprint_r+0x92>
 801151c:	6921      	ldr	r1, [r4, #16]
 801151e:	9805      	ldr	r0, [sp, #20]
 8011520:	f7fa fddc 	bl	800c0dc <_free_r>
 8011524:	230c      	movs	r3, #12
 8011526:	9a05      	ldr	r2, [sp, #20]
 8011528:	2001      	movs	r0, #1
 801152a:	6013      	str	r3, [r2, #0]
 801152c:	89a2      	ldrh	r2, [r4, #12]
 801152e:	3334      	adds	r3, #52	; 0x34
 8011530:	4313      	orrs	r3, r2
 8011532:	81a3      	strh	r3, [r4, #12]
 8011534:	2300      	movs	r3, #0
 8011536:	4240      	negs	r0, r0
 8011538:	60bb      	str	r3, [r7, #8]
 801153a:	e78b      	b.n	8011454 <__ssprint_r+0x1c>
 801153c:	fffffb7f 	.word	0xfffffb7f

08011540 <_sungetc_r>:
 8011540:	b570      	push	{r4, r5, r6, lr}
 8011542:	0014      	movs	r4, r2
 8011544:	1c4b      	adds	r3, r1, #1
 8011546:	d103      	bne.n	8011550 <_sungetc_r+0x10>
 8011548:	2501      	movs	r5, #1
 801154a:	426d      	negs	r5, r5
 801154c:	0028      	movs	r0, r5
 801154e:	bd70      	pop	{r4, r5, r6, pc}
 8011550:	8993      	ldrh	r3, [r2, #12]
 8011552:	2220      	movs	r2, #32
 8011554:	4393      	bics	r3, r2
 8011556:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011558:	81a3      	strh	r3, [r4, #12]
 801155a:	b2ce      	uxtb	r6, r1
 801155c:	6863      	ldr	r3, [r4, #4]
 801155e:	b2cd      	uxtb	r5, r1
 8011560:	2a00      	cmp	r2, #0
 8011562:	d010      	beq.n	8011586 <_sungetc_r+0x46>
 8011564:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011566:	429a      	cmp	r2, r3
 8011568:	dd07      	ble.n	801157a <_sungetc_r+0x3a>
 801156a:	6823      	ldr	r3, [r4, #0]
 801156c:	3b01      	subs	r3, #1
 801156e:	6023      	str	r3, [r4, #0]
 8011570:	701e      	strb	r6, [r3, #0]
 8011572:	6863      	ldr	r3, [r4, #4]
 8011574:	3301      	adds	r3, #1
 8011576:	6063      	str	r3, [r4, #4]
 8011578:	e7e8      	b.n	801154c <_sungetc_r+0xc>
 801157a:	0021      	movs	r1, r4
 801157c:	f000 ff1a 	bl	80123b4 <__submore>
 8011580:	2800      	cmp	r0, #0
 8011582:	d0f2      	beq.n	801156a <_sungetc_r+0x2a>
 8011584:	e7e0      	b.n	8011548 <_sungetc_r+0x8>
 8011586:	6921      	ldr	r1, [r4, #16]
 8011588:	6822      	ldr	r2, [r4, #0]
 801158a:	2900      	cmp	r1, #0
 801158c:	d007      	beq.n	801159e <_sungetc_r+0x5e>
 801158e:	4291      	cmp	r1, r2
 8011590:	d205      	bcs.n	801159e <_sungetc_r+0x5e>
 8011592:	1e51      	subs	r1, r2, #1
 8011594:	7808      	ldrb	r0, [r1, #0]
 8011596:	42a8      	cmp	r0, r5
 8011598:	d101      	bne.n	801159e <_sungetc_r+0x5e>
 801159a:	6021      	str	r1, [r4, #0]
 801159c:	e7ea      	b.n	8011574 <_sungetc_r+0x34>
 801159e:	63e3      	str	r3, [r4, #60]	; 0x3c
 80115a0:	0023      	movs	r3, r4
 80115a2:	3340      	adds	r3, #64	; 0x40
 80115a4:	6323      	str	r3, [r4, #48]	; 0x30
 80115a6:	2303      	movs	r3, #3
 80115a8:	6363      	str	r3, [r4, #52]	; 0x34
 80115aa:	0023      	movs	r3, r4
 80115ac:	3342      	adds	r3, #66	; 0x42
 80115ae:	63a2      	str	r2, [r4, #56]	; 0x38
 80115b0:	701e      	strb	r6, [r3, #0]
 80115b2:	6023      	str	r3, [r4, #0]
 80115b4:	2301      	movs	r3, #1
 80115b6:	e7de      	b.n	8011576 <_sungetc_r+0x36>

080115b8 <__ssrefill_r>:
 80115b8:	b510      	push	{r4, lr}
 80115ba:	000c      	movs	r4, r1
 80115bc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80115be:	2900      	cmp	r1, #0
 80115c0:	d00e      	beq.n	80115e0 <__ssrefill_r+0x28>
 80115c2:	0023      	movs	r3, r4
 80115c4:	3340      	adds	r3, #64	; 0x40
 80115c6:	4299      	cmp	r1, r3
 80115c8:	d001      	beq.n	80115ce <__ssrefill_r+0x16>
 80115ca:	f7fa fd87 	bl	800c0dc <_free_r>
 80115ce:	2000      	movs	r0, #0
 80115d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80115d2:	6320      	str	r0, [r4, #48]	; 0x30
 80115d4:	6063      	str	r3, [r4, #4]
 80115d6:	4283      	cmp	r3, r0
 80115d8:	d002      	beq.n	80115e0 <__ssrefill_r+0x28>
 80115da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80115dc:	6023      	str	r3, [r4, #0]
 80115de:	bd10      	pop	{r4, pc}
 80115e0:	6923      	ldr	r3, [r4, #16]
 80115e2:	2001      	movs	r0, #1
 80115e4:	6023      	str	r3, [r4, #0]
 80115e6:	2300      	movs	r3, #0
 80115e8:	89a2      	ldrh	r2, [r4, #12]
 80115ea:	6063      	str	r3, [r4, #4]
 80115ec:	3320      	adds	r3, #32
 80115ee:	4313      	orrs	r3, r2
 80115f0:	81a3      	strh	r3, [r4, #12]
 80115f2:	4240      	negs	r0, r0
 80115f4:	e7f3      	b.n	80115de <__ssrefill_r+0x26>

080115f6 <_sfread_r>:
 80115f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115f8:	0014      	movs	r4, r2
 80115fa:	435c      	muls	r4, r3
 80115fc:	b087      	sub	sp, #28
 80115fe:	1e26      	subs	r6, r4, #0
 8011600:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011602:	9005      	str	r0, [sp, #20]
 8011604:	9101      	str	r1, [sp, #4]
 8011606:	9202      	str	r2, [sp, #8]
 8011608:	9303      	str	r3, [sp, #12]
 801160a:	d11e      	bne.n	801164a <_sfread_r+0x54>
 801160c:	0020      	movs	r0, r4
 801160e:	b007      	add	sp, #28
 8011610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011612:	003a      	movs	r2, r7
 8011614:	9801      	ldr	r0, [sp, #4]
 8011616:	f7fa fce6 	bl	800bfe6 <memcpy>
 801161a:	682b      	ldr	r3, [r5, #0]
 801161c:	0029      	movs	r1, r5
 801161e:	19db      	adds	r3, r3, r7
 8011620:	602b      	str	r3, [r5, #0]
 8011622:	2300      	movs	r3, #0
 8011624:	606b      	str	r3, [r5, #4]
 8011626:	9b01      	ldr	r3, [sp, #4]
 8011628:	9805      	ldr	r0, [sp, #20]
 801162a:	19db      	adds	r3, r3, r7
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	1bf3      	subs	r3, r6, r7
 8011630:	9304      	str	r3, [sp, #16]
 8011632:	f7ff ffc1 	bl	80115b8 <__ssrefill_r>
 8011636:	2800      	cmp	r0, #0
 8011638:	d006      	beq.n	8011648 <_sfread_r+0x52>
 801163a:	193c      	adds	r4, r7, r4
 801163c:	1ba0      	subs	r0, r4, r6
 801163e:	9902      	ldr	r1, [sp, #8]
 8011640:	f7ee fd7c 	bl	800013c <__udivsi3>
 8011644:	0004      	movs	r4, r0
 8011646:	e7e1      	b.n	801160c <_sfread_r+0x16>
 8011648:	9e04      	ldr	r6, [sp, #16]
 801164a:	686f      	ldr	r7, [r5, #4]
 801164c:	6829      	ldr	r1, [r5, #0]
 801164e:	42b7      	cmp	r7, r6
 8011650:	d3df      	bcc.n	8011612 <_sfread_r+0x1c>
 8011652:	0032      	movs	r2, r6
 8011654:	9801      	ldr	r0, [sp, #4]
 8011656:	f7fa fcc6 	bl	800bfe6 <memcpy>
 801165a:	686b      	ldr	r3, [r5, #4]
 801165c:	9c03      	ldr	r4, [sp, #12]
 801165e:	1b9b      	subs	r3, r3, r6
 8011660:	606b      	str	r3, [r5, #4]
 8011662:	682b      	ldr	r3, [r5, #0]
 8011664:	199b      	adds	r3, r3, r6
 8011666:	602b      	str	r3, [r5, #0]
 8011668:	e7d0      	b.n	801160c <_sfread_r+0x16>

0801166a <__sprint_r>:
 801166a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801166c:	6893      	ldr	r3, [r2, #8]
 801166e:	b085      	sub	sp, #20
 8011670:	9001      	str	r0, [sp, #4]
 8011672:	000d      	movs	r5, r1
 8011674:	0014      	movs	r4, r2
 8011676:	1e18      	subs	r0, r3, #0
 8011678:	d018      	beq.n	80116ac <__sprint_r+0x42>
 801167a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801167c:	049b      	lsls	r3, r3, #18
 801167e:	d524      	bpl.n	80116ca <__sprint_r+0x60>
 8011680:	6817      	ldr	r7, [r2, #0]
 8011682:	2600      	movs	r6, #0
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	9302      	str	r3, [sp, #8]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	9300      	str	r3, [sp, #0]
 801168c:	089b      	lsrs	r3, r3, #2
 801168e:	9303      	str	r3, [sp, #12]
 8011690:	9b03      	ldr	r3, [sp, #12]
 8011692:	42b3      	cmp	r3, r6
 8011694:	dc0e      	bgt.n	80116b4 <__sprint_r+0x4a>
 8011696:	2203      	movs	r2, #3
 8011698:	9b00      	ldr	r3, [sp, #0]
 801169a:	68a0      	ldr	r0, [r4, #8]
 801169c:	4393      	bics	r3, r2
 801169e:	1ac0      	subs	r0, r0, r3
 80116a0:	60a0      	str	r0, [r4, #8]
 80116a2:	3708      	adds	r7, #8
 80116a4:	2800      	cmp	r0, #0
 80116a6:	d1ec      	bne.n	8011682 <__sprint_r+0x18>
 80116a8:	2300      	movs	r3, #0
 80116aa:	60a3      	str	r3, [r4, #8]
 80116ac:	2300      	movs	r3, #0
 80116ae:	6063      	str	r3, [r4, #4]
 80116b0:	b005      	add	sp, #20
 80116b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116b4:	9902      	ldr	r1, [sp, #8]
 80116b6:	00b3      	lsls	r3, r6, #2
 80116b8:	58c9      	ldr	r1, [r1, r3]
 80116ba:	002a      	movs	r2, r5
 80116bc:	9801      	ldr	r0, [sp, #4]
 80116be:	f000 ff59 	bl	8012574 <_fputwc_r>
 80116c2:	1c43      	adds	r3, r0, #1
 80116c4:	d0f0      	beq.n	80116a8 <__sprint_r+0x3e>
 80116c6:	3601      	adds	r6, #1
 80116c8:	e7e2      	b.n	8011690 <__sprint_r+0x26>
 80116ca:	9801      	ldr	r0, [sp, #4]
 80116cc:	f000 fd14 	bl	80120f8 <__sfvwrite_r>
 80116d0:	e7ea      	b.n	80116a8 <__sprint_r+0x3e>
	...

080116d4 <_vfiprintf_r>:
 80116d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116d6:	b0c1      	sub	sp, #260	; 0x104
 80116d8:	001c      	movs	r4, r3
 80116da:	001f      	movs	r7, r3
 80116dc:	9006      	str	r0, [sp, #24]
 80116de:	9103      	str	r1, [sp, #12]
 80116e0:	9207      	str	r2, [sp, #28]
 80116e2:	2800      	cmp	r0, #0
 80116e4:	d004      	beq.n	80116f0 <_vfiprintf_r+0x1c>
 80116e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d101      	bne.n	80116f0 <_vfiprintf_r+0x1c>
 80116ec:	f7fa fa98 	bl	800bc20 <__sinit>
 80116f0:	9b03      	ldr	r3, [sp, #12]
 80116f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80116f4:	07db      	lsls	r3, r3, #31
 80116f6:	d407      	bmi.n	8011708 <_vfiprintf_r+0x34>
 80116f8:	9b03      	ldr	r3, [sp, #12]
 80116fa:	899b      	ldrh	r3, [r3, #12]
 80116fc:	059b      	lsls	r3, r3, #22
 80116fe:	d403      	bmi.n	8011708 <_vfiprintf_r+0x34>
 8011700:	9b03      	ldr	r3, [sp, #12]
 8011702:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011704:	f7fa fc62 	bl	800bfcc <__retarget_lock_acquire_recursive>
 8011708:	9b03      	ldr	r3, [sp, #12]
 801170a:	220c      	movs	r2, #12
 801170c:	5e9a      	ldrsh	r2, [r3, r2]
 801170e:	2380      	movs	r3, #128	; 0x80
 8011710:	019b      	lsls	r3, r3, #6
 8011712:	421a      	tst	r2, r3
 8011714:	d107      	bne.n	8011726 <_vfiprintf_r+0x52>
 8011716:	4313      	orrs	r3, r2
 8011718:	9a03      	ldr	r2, [sp, #12]
 801171a:	8193      	strh	r3, [r2, #12]
 801171c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801171e:	4aa3      	ldr	r2, [pc, #652]	; (80119ac <_vfiprintf_r+0x2d8>)
 8011720:	4013      	ands	r3, r2
 8011722:	9a03      	ldr	r2, [sp, #12]
 8011724:	6653      	str	r3, [r2, #100]	; 0x64
 8011726:	9b03      	ldr	r3, [sp, #12]
 8011728:	899b      	ldrh	r3, [r3, #12]
 801172a:	071b      	lsls	r3, r3, #28
 801172c:	d503      	bpl.n	8011736 <_vfiprintf_r+0x62>
 801172e:	9b03      	ldr	r3, [sp, #12]
 8011730:	691b      	ldr	r3, [r3, #16]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d118      	bne.n	8011768 <_vfiprintf_r+0x94>
 8011736:	9903      	ldr	r1, [sp, #12]
 8011738:	9806      	ldr	r0, [sp, #24]
 801173a:	f000 fe79 	bl	8012430 <__swsetup_r>
 801173e:	2800      	cmp	r0, #0
 8011740:	d012      	beq.n	8011768 <_vfiprintf_r+0x94>
 8011742:	9b03      	ldr	r3, [sp, #12]
 8011744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011746:	07db      	lsls	r3, r3, #31
 8011748:	d505      	bpl.n	8011756 <_vfiprintf_r+0x82>
 801174a:	2301      	movs	r3, #1
 801174c:	425b      	negs	r3, r3
 801174e:	9308      	str	r3, [sp, #32]
 8011750:	9808      	ldr	r0, [sp, #32]
 8011752:	b041      	add	sp, #260	; 0x104
 8011754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011756:	9b03      	ldr	r3, [sp, #12]
 8011758:	899b      	ldrh	r3, [r3, #12]
 801175a:	059b      	lsls	r3, r3, #22
 801175c:	d4f5      	bmi.n	801174a <_vfiprintf_r+0x76>
 801175e:	9b03      	ldr	r3, [sp, #12]
 8011760:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011762:	f7fa fc34 	bl	800bfce <__retarget_lock_release_recursive>
 8011766:	e7f0      	b.n	801174a <_vfiprintf_r+0x76>
 8011768:	221a      	movs	r2, #26
 801176a:	9b03      	ldr	r3, [sp, #12]
 801176c:	899b      	ldrh	r3, [r3, #12]
 801176e:	401a      	ands	r2, r3
 8011770:	2a0a      	cmp	r2, #10
 8011772:	d116      	bne.n	80117a2 <_vfiprintf_r+0xce>
 8011774:	9a03      	ldr	r2, [sp, #12]
 8011776:	210e      	movs	r1, #14
 8011778:	5e52      	ldrsh	r2, [r2, r1]
 801177a:	2a00      	cmp	r2, #0
 801177c:	db11      	blt.n	80117a2 <_vfiprintf_r+0xce>
 801177e:	9a03      	ldr	r2, [sp, #12]
 8011780:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011782:	07d2      	lsls	r2, r2, #31
 8011784:	d405      	bmi.n	8011792 <_vfiprintf_r+0xbe>
 8011786:	059b      	lsls	r3, r3, #22
 8011788:	d403      	bmi.n	8011792 <_vfiprintf_r+0xbe>
 801178a:	9b03      	ldr	r3, [sp, #12]
 801178c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801178e:	f7fa fc1e 	bl	800bfce <__retarget_lock_release_recursive>
 8011792:	0023      	movs	r3, r4
 8011794:	9a07      	ldr	r2, [sp, #28]
 8011796:	9903      	ldr	r1, [sp, #12]
 8011798:	9806      	ldr	r0, [sp, #24]
 801179a:	f000 fc69 	bl	8012070 <__sbprintf>
 801179e:	9008      	str	r0, [sp, #32]
 80117a0:	e7d6      	b.n	8011750 <_vfiprintf_r+0x7c>
 80117a2:	2300      	movs	r3, #0
 80117a4:	ad17      	add	r5, sp, #92	; 0x5c
 80117a6:	9514      	str	r5, [sp, #80]	; 0x50
 80117a8:	9316      	str	r3, [sp, #88]	; 0x58
 80117aa:	9315      	str	r3, [sp, #84]	; 0x54
 80117ac:	930c      	str	r3, [sp, #48]	; 0x30
 80117ae:	930d      	str	r3, [sp, #52]	; 0x34
 80117b0:	930e      	str	r3, [sp, #56]	; 0x38
 80117b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80117b4:	9308      	str	r3, [sp, #32]
 80117b6:	9c07      	ldr	r4, [sp, #28]
 80117b8:	7823      	ldrb	r3, [r4, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d002      	beq.n	80117c4 <_vfiprintf_r+0xf0>
 80117be:	2b25      	cmp	r3, #37	; 0x25
 80117c0:	d000      	beq.n	80117c4 <_vfiprintf_r+0xf0>
 80117c2:	e08d      	b.n	80118e0 <_vfiprintf_r+0x20c>
 80117c4:	9b07      	ldr	r3, [sp, #28]
 80117c6:	1ae6      	subs	r6, r4, r3
 80117c8:	429c      	cmp	r4, r3
 80117ca:	d016      	beq.n	80117fa <_vfiprintf_r+0x126>
 80117cc:	602b      	str	r3, [r5, #0]
 80117ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80117d0:	606e      	str	r6, [r5, #4]
 80117d2:	199b      	adds	r3, r3, r6
 80117d4:	9316      	str	r3, [sp, #88]	; 0x58
 80117d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117d8:	3508      	adds	r5, #8
 80117da:	3301      	adds	r3, #1
 80117dc:	9315      	str	r3, [sp, #84]	; 0x54
 80117de:	2b07      	cmp	r3, #7
 80117e0:	dd08      	ble.n	80117f4 <_vfiprintf_r+0x120>
 80117e2:	9903      	ldr	r1, [sp, #12]
 80117e4:	9806      	ldr	r0, [sp, #24]
 80117e6:	aa14      	add	r2, sp, #80	; 0x50
 80117e8:	f7ff ff3f 	bl	801166a <__sprint_r>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d000      	beq.n	80117f2 <_vfiprintf_r+0x11e>
 80117f0:	e3d9      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 80117f2:	ad17      	add	r5, sp, #92	; 0x5c
 80117f4:	9b08      	ldr	r3, [sp, #32]
 80117f6:	199b      	adds	r3, r3, r6
 80117f8:	9308      	str	r3, [sp, #32]
 80117fa:	7823      	ldrb	r3, [r4, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d101      	bne.n	8011804 <_vfiprintf_r+0x130>
 8011800:	f000 fbf6 	bl	8011ff0 <_vfiprintf_r+0x91c>
 8011804:	2200      	movs	r2, #0
 8011806:	a912      	add	r1, sp, #72	; 0x48
 8011808:	70ca      	strb	r2, [r1, #3]
 801180a:	2101      	movs	r1, #1
 801180c:	1c63      	adds	r3, r4, #1
 801180e:	0014      	movs	r4, r2
 8011810:	4249      	negs	r1, r1
 8011812:	9105      	str	r1, [sp, #20]
 8011814:	9209      	str	r2, [sp, #36]	; 0x24
 8011816:	1c5a      	adds	r2, r3, #1
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	9207      	str	r2, [sp, #28]
 801181c:	0018      	movs	r0, r3
 801181e:	3820      	subs	r0, #32
 8011820:	285a      	cmp	r0, #90	; 0x5a
 8011822:	d900      	bls.n	8011826 <_vfiprintf_r+0x152>
 8011824:	e362      	b.n	8011eec <_vfiprintf_r+0x818>
 8011826:	f7ee fc7f 	bl	8000128 <__gnu_thumb1_case_uhi>
 801182a:	0078      	.short	0x0078
 801182c:	03610361 	.word	0x03610361
 8011830:	03610081 	.word	0x03610081
 8011834:	03610361 	.word	0x03610361
 8011838:	0361005d 	.word	0x0361005d
 801183c:	00830361 	.word	0x00830361
 8011840:	0361008b 	.word	0x0361008b
 8011844:	008f0089 	.word	0x008f0089
 8011848:	00ad0361 	.word	0x00ad0361
 801184c:	00af00af 	.word	0x00af00af
 8011850:	00af00af 	.word	0x00af00af
 8011854:	00af00af 	.word	0x00af00af
 8011858:	00af00af 	.word	0x00af00af
 801185c:	036100af 	.word	0x036100af
 8011860:	03610361 	.word	0x03610361
 8011864:	03610361 	.word	0x03610361
 8011868:	03610361 	.word	0x03610361
 801186c:	03610361 	.word	0x03610361
 8011870:	00e600da 	.word	0x00e600da
 8011874:	03610361 	.word	0x03610361
 8011878:	03610361 	.word	0x03610361
 801187c:	03610361 	.word	0x03610361
 8011880:	03610361 	.word	0x03610361
 8011884:	03610361 	.word	0x03610361
 8011888:	03610143 	.word	0x03610143
 801188c:	03610361 	.word	0x03610361
 8011890:	03610182 	.word	0x03610182
 8011894:	0361027c 	.word	0x0361027c
 8011898:	02ae0361 	.word	0x02ae0361
 801189c:	03610361 	.word	0x03610361
 80118a0:	03610361 	.word	0x03610361
 80118a4:	03610361 	.word	0x03610361
 80118a8:	03610361 	.word	0x03610361
 80118ac:	03610361 	.word	0x03610361
 80118b0:	00e800da 	.word	0x00e800da
 80118b4:	03610361 	.word	0x03610361
 80118b8:	00c30361 	.word	0x00c30361
 80118bc:	00d600e8 	.word	0x00d600e8
 80118c0:	00cf0361 	.word	0x00cf0361
 80118c4:	01260361 	.word	0x01260361
 80118c8:	01740145 	.word	0x01740145
 80118cc:	036100d6 	.word	0x036100d6
 80118d0:	007f0182 	.word	0x007f0182
 80118d4:	0361027e 	.word	0x0361027e
 80118d8:	02cd0361 	.word	0x02cd0361
 80118dc:	007f0361 	.word	0x007f0361
 80118e0:	3401      	adds	r4, #1
 80118e2:	e769      	b.n	80117b8 <_vfiprintf_r+0xe4>
 80118e4:	9806      	ldr	r0, [sp, #24]
 80118e6:	f7fe fa47 	bl	800fd78 <_localeconv_r>
 80118ea:	6843      	ldr	r3, [r0, #4]
 80118ec:	0018      	movs	r0, r3
 80118ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80118f0:	f7ee fc08 	bl	8000104 <strlen>
 80118f4:	900e      	str	r0, [sp, #56]	; 0x38
 80118f6:	9806      	ldr	r0, [sp, #24]
 80118f8:	f7fe fa3e 	bl	800fd78 <_localeconv_r>
 80118fc:	6883      	ldr	r3, [r0, #8]
 80118fe:	930d      	str	r3, [sp, #52]	; 0x34
 8011900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011902:	2b00      	cmp	r3, #0
 8011904:	d010      	beq.n	8011928 <_vfiprintf_r+0x254>
 8011906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00d      	beq.n	8011928 <_vfiprintf_r+0x254>
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00a      	beq.n	8011928 <_vfiprintf_r+0x254>
 8011912:	2380      	movs	r3, #128	; 0x80
 8011914:	00db      	lsls	r3, r3, #3
 8011916:	431c      	orrs	r4, r3
 8011918:	e006      	b.n	8011928 <_vfiprintf_r+0x254>
 801191a:	ab12      	add	r3, sp, #72	; 0x48
 801191c:	78da      	ldrb	r2, [r3, #3]
 801191e:	3303      	adds	r3, #3
 8011920:	2a00      	cmp	r2, #0
 8011922:	d101      	bne.n	8011928 <_vfiprintf_r+0x254>
 8011924:	3220      	adds	r2, #32
 8011926:	701a      	strb	r2, [r3, #0]
 8011928:	9b07      	ldr	r3, [sp, #28]
 801192a:	e774      	b.n	8011816 <_vfiprintf_r+0x142>
 801192c:	2301      	movs	r3, #1
 801192e:	e7f2      	b.n	8011916 <_vfiprintf_r+0x242>
 8011930:	cf08      	ldmia	r7!, {r3}
 8011932:	9309      	str	r3, [sp, #36]	; 0x24
 8011934:	2b00      	cmp	r3, #0
 8011936:	daf7      	bge.n	8011928 <_vfiprintf_r+0x254>
 8011938:	425b      	negs	r3, r3
 801193a:	9309      	str	r3, [sp, #36]	; 0x24
 801193c:	2304      	movs	r3, #4
 801193e:	e7ea      	b.n	8011916 <_vfiprintf_r+0x242>
 8011940:	222b      	movs	r2, #43	; 0x2b
 8011942:	ab12      	add	r3, sp, #72	; 0x48
 8011944:	70da      	strb	r2, [r3, #3]
 8011946:	e7ef      	b.n	8011928 <_vfiprintf_r+0x254>
 8011948:	9b07      	ldr	r3, [sp, #28]
 801194a:	1c5a      	adds	r2, r3, #1
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	2b2a      	cmp	r3, #42	; 0x2a
 8011950:	d00f      	beq.n	8011972 <_vfiprintf_r+0x29e>
 8011952:	2100      	movs	r1, #0
 8011954:	9105      	str	r1, [sp, #20]
 8011956:	0019      	movs	r1, r3
 8011958:	3930      	subs	r1, #48	; 0x30
 801195a:	9207      	str	r2, [sp, #28]
 801195c:	2909      	cmp	r1, #9
 801195e:	d900      	bls.n	8011962 <_vfiprintf_r+0x28e>
 8011960:	e75c      	b.n	801181c <_vfiprintf_r+0x148>
 8011962:	200a      	movs	r0, #10
 8011964:	9b05      	ldr	r3, [sp, #20]
 8011966:	4343      	muls	r3, r0
 8011968:	185b      	adds	r3, r3, r1
 801196a:	9305      	str	r3, [sp, #20]
 801196c:	7813      	ldrb	r3, [r2, #0]
 801196e:	3201      	adds	r2, #1
 8011970:	e7f1      	b.n	8011956 <_vfiprintf_r+0x282>
 8011972:	cf08      	ldmia	r7!, {r3}
 8011974:	9305      	str	r3, [sp, #20]
 8011976:	2b00      	cmp	r3, #0
 8011978:	da02      	bge.n	8011980 <_vfiprintf_r+0x2ac>
 801197a:	2301      	movs	r3, #1
 801197c:	425b      	negs	r3, r3
 801197e:	9305      	str	r3, [sp, #20]
 8011980:	9207      	str	r2, [sp, #28]
 8011982:	e7d1      	b.n	8011928 <_vfiprintf_r+0x254>
 8011984:	2380      	movs	r3, #128	; 0x80
 8011986:	e7c6      	b.n	8011916 <_vfiprintf_r+0x242>
 8011988:	2100      	movs	r1, #0
 801198a:	9a07      	ldr	r2, [sp, #28]
 801198c:	9109      	str	r1, [sp, #36]	; 0x24
 801198e:	200a      	movs	r0, #10
 8011990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011992:	3b30      	subs	r3, #48	; 0x30
 8011994:	4341      	muls	r1, r0
 8011996:	185b      	adds	r3, r3, r1
 8011998:	9309      	str	r3, [sp, #36]	; 0x24
 801199a:	0013      	movs	r3, r2
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	3201      	adds	r2, #1
 80119a0:	0019      	movs	r1, r3
 80119a2:	3930      	subs	r1, #48	; 0x30
 80119a4:	9207      	str	r2, [sp, #28]
 80119a6:	2909      	cmp	r1, #9
 80119a8:	d9f1      	bls.n	801198e <_vfiprintf_r+0x2ba>
 80119aa:	e737      	b.n	801181c <_vfiprintf_r+0x148>
 80119ac:	ffffdfff 	.word	0xffffdfff
 80119b0:	9b07      	ldr	r3, [sp, #28]
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	2b68      	cmp	r3, #104	; 0x68
 80119b6:	d105      	bne.n	80119c4 <_vfiprintf_r+0x2f0>
 80119b8:	9b07      	ldr	r3, [sp, #28]
 80119ba:	3301      	adds	r3, #1
 80119bc:	9307      	str	r3, [sp, #28]
 80119be:	2380      	movs	r3, #128	; 0x80
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	e7a8      	b.n	8011916 <_vfiprintf_r+0x242>
 80119c4:	2340      	movs	r3, #64	; 0x40
 80119c6:	e7a6      	b.n	8011916 <_vfiprintf_r+0x242>
 80119c8:	9b07      	ldr	r3, [sp, #28]
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	2b6c      	cmp	r3, #108	; 0x6c
 80119ce:	d104      	bne.n	80119da <_vfiprintf_r+0x306>
 80119d0:	9b07      	ldr	r3, [sp, #28]
 80119d2:	3301      	adds	r3, #1
 80119d4:	9307      	str	r3, [sp, #28]
 80119d6:	2320      	movs	r3, #32
 80119d8:	e79d      	b.n	8011916 <_vfiprintf_r+0x242>
 80119da:	2310      	movs	r3, #16
 80119dc:	e79b      	b.n	8011916 <_vfiprintf_r+0x242>
 80119de:	003a      	movs	r2, r7
 80119e0:	ca08      	ldmia	r2!, {r3}
 80119e2:	ae27      	add	r6, sp, #156	; 0x9c
 80119e4:	7033      	strb	r3, [r6, #0]
 80119e6:	2300      	movs	r3, #0
 80119e8:	9204      	str	r2, [sp, #16]
 80119ea:	aa12      	add	r2, sp, #72	; 0x48
 80119ec:	70d3      	strb	r3, [r2, #3]
 80119ee:	2201      	movs	r2, #1
 80119f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80119f2:	9205      	str	r2, [sp, #20]
 80119f4:	e0b0      	b.n	8011b58 <_vfiprintf_r+0x484>
 80119f6:	2310      	movs	r3, #16
 80119f8:	431c      	orrs	r4, r3
 80119fa:	06a3      	lsls	r3, r4, #26
 80119fc:	d52a      	bpl.n	8011a54 <_vfiprintf_r+0x380>
 80119fe:	2307      	movs	r3, #7
 8011a00:	3707      	adds	r7, #7
 8011a02:	439f      	bics	r7, r3
 8011a04:	0039      	movs	r1, r7
 8011a06:	c90c      	ldmia	r1!, {r2, r3}
 8011a08:	9200      	str	r2, [sp, #0]
 8011a0a:	9301      	str	r3, [sp, #4]
 8011a0c:	9104      	str	r1, [sp, #16]
 8011a0e:	9a01      	ldr	r2, [sp, #4]
 8011a10:	2301      	movs	r3, #1
 8011a12:	2a00      	cmp	r2, #0
 8011a14:	da09      	bge.n	8011a2a <_vfiprintf_r+0x356>
 8011a16:	9e00      	ldr	r6, [sp, #0]
 8011a18:	9f01      	ldr	r7, [sp, #4]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	4271      	negs	r1, r6
 8011a1e:	41ba      	sbcs	r2, r7
 8011a20:	9100      	str	r1, [sp, #0]
 8011a22:	9201      	str	r2, [sp, #4]
 8011a24:	212d      	movs	r1, #45	; 0x2d
 8011a26:	aa12      	add	r2, sp, #72	; 0x48
 8011a28:	70d1      	strb	r1, [r2, #3]
 8011a2a:	9901      	ldr	r1, [sp, #4]
 8011a2c:	9a00      	ldr	r2, [sp, #0]
 8011a2e:	430a      	orrs	r2, r1
 8011a30:	9905      	ldr	r1, [sp, #20]
 8011a32:	3101      	adds	r1, #1
 8011a34:	d100      	bne.n	8011a38 <_vfiprintf_r+0x364>
 8011a36:	e2e9      	b.n	801200c <_vfiprintf_r+0x938>
 8011a38:	2180      	movs	r1, #128	; 0x80
 8011a3a:	0027      	movs	r7, r4
 8011a3c:	438f      	bics	r7, r1
 8011a3e:	2a00      	cmp	r2, #0
 8011a40:	d000      	beq.n	8011a44 <_vfiprintf_r+0x370>
 8011a42:	e2e7      	b.n	8012014 <_vfiprintf_r+0x940>
 8011a44:	9a05      	ldr	r2, [sp, #20]
 8011a46:	2a00      	cmp	r2, #0
 8011a48:	d100      	bne.n	8011a4c <_vfiprintf_r+0x378>
 8011a4a:	e243      	b.n	8011ed4 <_vfiprintf_r+0x800>
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d000      	beq.n	8011a52 <_vfiprintf_r+0x37e>
 8011a50:	e2e3      	b.n	801201a <_vfiprintf_r+0x946>
 8011a52:	e1e7      	b.n	8011e24 <_vfiprintf_r+0x750>
 8011a54:	003a      	movs	r2, r7
 8011a56:	ca08      	ldmia	r2!, {r3}
 8011a58:	9204      	str	r2, [sp, #16]
 8011a5a:	06e2      	lsls	r2, r4, #27
 8011a5c:	d503      	bpl.n	8011a66 <_vfiprintf_r+0x392>
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	17db      	asrs	r3, r3, #31
 8011a62:	9301      	str	r3, [sp, #4]
 8011a64:	e7d3      	b.n	8011a0e <_vfiprintf_r+0x33a>
 8011a66:	0662      	lsls	r2, r4, #25
 8011a68:	d501      	bpl.n	8011a6e <_vfiprintf_r+0x39a>
 8011a6a:	b21b      	sxth	r3, r3
 8011a6c:	e7f7      	b.n	8011a5e <_vfiprintf_r+0x38a>
 8011a6e:	05a2      	lsls	r2, r4, #22
 8011a70:	d5f5      	bpl.n	8011a5e <_vfiprintf_r+0x38a>
 8011a72:	b25b      	sxtb	r3, r3
 8011a74:	e7f3      	b.n	8011a5e <_vfiprintf_r+0x38a>
 8011a76:	1d3b      	adds	r3, r7, #4
 8011a78:	9304      	str	r3, [sp, #16]
 8011a7a:	06a3      	lsls	r3, r4, #26
 8011a7c:	d506      	bpl.n	8011a8c <_vfiprintf_r+0x3b8>
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	9a08      	ldr	r2, [sp, #32]
 8011a82:	601a      	str	r2, [r3, #0]
 8011a84:	17d2      	asrs	r2, r2, #31
 8011a86:	605a      	str	r2, [r3, #4]
 8011a88:	9f04      	ldr	r7, [sp, #16]
 8011a8a:	e694      	b.n	80117b6 <_vfiprintf_r+0xe2>
 8011a8c:	06e3      	lsls	r3, r4, #27
 8011a8e:	d503      	bpl.n	8011a98 <_vfiprintf_r+0x3c4>
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	9a08      	ldr	r2, [sp, #32]
 8011a94:	601a      	str	r2, [r3, #0]
 8011a96:	e7f7      	b.n	8011a88 <_vfiprintf_r+0x3b4>
 8011a98:	0663      	lsls	r3, r4, #25
 8011a9a:	d503      	bpl.n	8011aa4 <_vfiprintf_r+0x3d0>
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	9a08      	ldr	r2, [sp, #32]
 8011aa0:	801a      	strh	r2, [r3, #0]
 8011aa2:	e7f1      	b.n	8011a88 <_vfiprintf_r+0x3b4>
 8011aa4:	05a4      	lsls	r4, r4, #22
 8011aa6:	d5f3      	bpl.n	8011a90 <_vfiprintf_r+0x3bc>
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	9a08      	ldr	r2, [sp, #32]
 8011aac:	701a      	strb	r2, [r3, #0]
 8011aae:	e7eb      	b.n	8011a88 <_vfiprintf_r+0x3b4>
 8011ab0:	2310      	movs	r3, #16
 8011ab2:	431c      	orrs	r4, r3
 8011ab4:	2320      	movs	r3, #32
 8011ab6:	0020      	movs	r0, r4
 8011ab8:	4018      	ands	r0, r3
 8011aba:	421c      	tst	r4, r3
 8011abc:	d00d      	beq.n	8011ada <_vfiprintf_r+0x406>
 8011abe:	3b19      	subs	r3, #25
 8011ac0:	3707      	adds	r7, #7
 8011ac2:	439f      	bics	r7, r3
 8011ac4:	0039      	movs	r1, r7
 8011ac6:	c90c      	ldmia	r1!, {r2, r3}
 8011ac8:	9200      	str	r2, [sp, #0]
 8011aca:	9301      	str	r3, [sp, #4]
 8011acc:	9104      	str	r1, [sp, #16]
 8011ace:	4bcc      	ldr	r3, [pc, #816]	; (8011e00 <_vfiprintf_r+0x72c>)
 8011ad0:	401c      	ands	r4, r3
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	aa12      	add	r2, sp, #72	; 0x48
 8011ad8:	e7a6      	b.n	8011a28 <_vfiprintf_r+0x354>
 8011ada:	003a      	movs	r2, r7
 8011adc:	ca08      	ldmia	r2!, {r3}
 8011ade:	0021      	movs	r1, r4
 8011ae0:	9204      	str	r2, [sp, #16]
 8011ae2:	2210      	movs	r2, #16
 8011ae4:	4011      	ands	r1, r2
 8011ae6:	4214      	tst	r4, r2
 8011ae8:	d002      	beq.n	8011af0 <_vfiprintf_r+0x41c>
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	9001      	str	r0, [sp, #4]
 8011aee:	e7ee      	b.n	8011ace <_vfiprintf_r+0x3fa>
 8011af0:	2240      	movs	r2, #64	; 0x40
 8011af2:	0020      	movs	r0, r4
 8011af4:	4010      	ands	r0, r2
 8011af6:	4214      	tst	r4, r2
 8011af8:	d003      	beq.n	8011b02 <_vfiprintf_r+0x42e>
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	9101      	str	r1, [sp, #4]
 8011b00:	e7e5      	b.n	8011ace <_vfiprintf_r+0x3fa>
 8011b02:	2280      	movs	r2, #128	; 0x80
 8011b04:	0021      	movs	r1, r4
 8011b06:	0092      	lsls	r2, r2, #2
 8011b08:	4011      	ands	r1, r2
 8011b0a:	4214      	tst	r4, r2
 8011b0c:	d0f6      	beq.n	8011afc <_vfiprintf_r+0x428>
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	e7eb      	b.n	8011aea <_vfiprintf_r+0x416>
 8011b12:	003b      	movs	r3, r7
 8011b14:	cb04      	ldmia	r3!, {r2}
 8011b16:	49bb      	ldr	r1, [pc, #748]	; (8011e04 <_vfiprintf_r+0x730>)
 8011b18:	9304      	str	r3, [sp, #16]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	9200      	str	r2, [sp, #0]
 8011b1e:	aa13      	add	r2, sp, #76	; 0x4c
 8011b20:	8011      	strh	r1, [r2, #0]
 8011b22:	4ab9      	ldr	r2, [pc, #740]	; (8011e08 <_vfiprintf_r+0x734>)
 8011b24:	9301      	str	r3, [sp, #4]
 8011b26:	3302      	adds	r3, #2
 8011b28:	431c      	orrs	r4, r3
 8011b2a:	920c      	str	r2, [sp, #48]	; 0x30
 8011b2c:	e7d2      	b.n	8011ad4 <_vfiprintf_r+0x400>
 8011b2e:	003b      	movs	r3, r7
 8011b30:	2700      	movs	r7, #0
 8011b32:	cb40      	ldmia	r3!, {r6}
 8011b34:	9304      	str	r3, [sp, #16]
 8011b36:	ab12      	add	r3, sp, #72	; 0x48
 8011b38:	70df      	strb	r7, [r3, #3]
 8011b3a:	9b05      	ldr	r3, [sp, #20]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	d100      	bne.n	8011b42 <_vfiprintf_r+0x46e>
 8011b40:	e0ea      	b.n	8011d18 <_vfiprintf_r+0x644>
 8011b42:	0039      	movs	r1, r7
 8011b44:	0030      	movs	r0, r6
 8011b46:	9a05      	ldr	r2, [sp, #20]
 8011b48:	f7fe f92e 	bl	800fda8 <memchr>
 8011b4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8011b4e:	42b8      	cmp	r0, r7
 8011b50:	d002      	beq.n	8011b58 <_vfiprintf_r+0x484>
 8011b52:	1b83      	subs	r3, r0, r6
 8011b54:	9305      	str	r3, [sp, #20]
 8011b56:	970b      	str	r7, [sp, #44]	; 0x2c
 8011b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b5a:	9a05      	ldr	r2, [sp, #20]
 8011b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	da00      	bge.n	8011b64 <_vfiprintf_r+0x490>
 8011b62:	920a      	str	r2, [sp, #40]	; 0x28
 8011b64:	ab12      	add	r3, sp, #72	; 0x48
 8011b66:	3303      	adds	r3, #3
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	1e5a      	subs	r2, r3, #1
 8011b6c:	4193      	sbcs	r3, r2
 8011b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b70:	18d3      	adds	r3, r2, r3
 8011b72:	930a      	str	r3, [sp, #40]	; 0x28
 8011b74:	0022      	movs	r2, r4
 8011b76:	2302      	movs	r3, #2
 8011b78:	401a      	ands	r2, r3
 8011b7a:	9210      	str	r2, [sp, #64]	; 0x40
 8011b7c:	421c      	tst	r4, r3
 8011b7e:	d002      	beq.n	8011b86 <_vfiprintf_r+0x4b2>
 8011b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b82:	3302      	adds	r3, #2
 8011b84:	930a      	str	r3, [sp, #40]	; 0x28
 8011b86:	2384      	movs	r3, #132	; 0x84
 8011b88:	0022      	movs	r2, r4
 8011b8a:	401a      	ands	r2, r3
 8011b8c:	9211      	str	r2, [sp, #68]	; 0x44
 8011b8e:	421c      	tst	r4, r3
 8011b90:	d11e      	bne.n	8011bd0 <_vfiprintf_r+0x4fc>
 8011b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b96:	1a9f      	subs	r7, r3, r2
 8011b98:	2f00      	cmp	r7, #0
 8011b9a:	dd19      	ble.n	8011bd0 <_vfiprintf_r+0x4fc>
 8011b9c:	0029      	movs	r1, r5
 8011b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ba0:	489a      	ldr	r0, [pc, #616]	; (8011e0c <_vfiprintf_r+0x738>)
 8011ba2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	3108      	adds	r1, #8
 8011ba8:	6028      	str	r0, [r5, #0]
 8011baa:	2f10      	cmp	r7, #16
 8011bac:	dd00      	ble.n	8011bb0 <_vfiprintf_r+0x4dc>
 8011bae:	e1a7      	b.n	8011f00 <_vfiprintf_r+0x82c>
 8011bb0:	606f      	str	r7, [r5, #4]
 8011bb2:	18bf      	adds	r7, r7, r2
 8011bb4:	000d      	movs	r5, r1
 8011bb6:	9716      	str	r7, [sp, #88]	; 0x58
 8011bb8:	9315      	str	r3, [sp, #84]	; 0x54
 8011bba:	2b07      	cmp	r3, #7
 8011bbc:	dd08      	ble.n	8011bd0 <_vfiprintf_r+0x4fc>
 8011bbe:	9903      	ldr	r1, [sp, #12]
 8011bc0:	9806      	ldr	r0, [sp, #24]
 8011bc2:	aa14      	add	r2, sp, #80	; 0x50
 8011bc4:	f7ff fd51 	bl	801166a <__sprint_r>
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	d000      	beq.n	8011bce <_vfiprintf_r+0x4fa>
 8011bcc:	e1eb      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011bce:	ad17      	add	r5, sp, #92	; 0x5c
 8011bd0:	a912      	add	r1, sp, #72	; 0x48
 8011bd2:	78c8      	ldrb	r0, [r1, #3]
 8011bd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bd8:	3103      	adds	r1, #3
 8011bda:	2800      	cmp	r0, #0
 8011bdc:	d012      	beq.n	8011c04 <_vfiprintf_r+0x530>
 8011bde:	6029      	str	r1, [r5, #0]
 8011be0:	2101      	movs	r1, #1
 8011be2:	3301      	adds	r3, #1
 8011be4:	1852      	adds	r2, r2, r1
 8011be6:	6069      	str	r1, [r5, #4]
 8011be8:	9216      	str	r2, [sp, #88]	; 0x58
 8011bea:	9315      	str	r3, [sp, #84]	; 0x54
 8011bec:	3508      	adds	r5, #8
 8011bee:	2b07      	cmp	r3, #7
 8011bf0:	dd08      	ble.n	8011c04 <_vfiprintf_r+0x530>
 8011bf2:	9903      	ldr	r1, [sp, #12]
 8011bf4:	9806      	ldr	r0, [sp, #24]
 8011bf6:	aa14      	add	r2, sp, #80	; 0x50
 8011bf8:	f7ff fd37 	bl	801166a <__sprint_r>
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	d000      	beq.n	8011c02 <_vfiprintf_r+0x52e>
 8011c00:	e1d1      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011c02:	ad17      	add	r5, sp, #92	; 0x5c
 8011c04:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011c06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011c08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c0a:	2900      	cmp	r1, #0
 8011c0c:	d013      	beq.n	8011c36 <_vfiprintf_r+0x562>
 8011c0e:	a913      	add	r1, sp, #76	; 0x4c
 8011c10:	6029      	str	r1, [r5, #0]
 8011c12:	2102      	movs	r1, #2
 8011c14:	3301      	adds	r3, #1
 8011c16:	1852      	adds	r2, r2, r1
 8011c18:	6069      	str	r1, [r5, #4]
 8011c1a:	9216      	str	r2, [sp, #88]	; 0x58
 8011c1c:	9315      	str	r3, [sp, #84]	; 0x54
 8011c1e:	3508      	adds	r5, #8
 8011c20:	2b07      	cmp	r3, #7
 8011c22:	dd08      	ble.n	8011c36 <_vfiprintf_r+0x562>
 8011c24:	9903      	ldr	r1, [sp, #12]
 8011c26:	9806      	ldr	r0, [sp, #24]
 8011c28:	aa14      	add	r2, sp, #80	; 0x50
 8011c2a:	f7ff fd1e 	bl	801166a <__sprint_r>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d000      	beq.n	8011c34 <_vfiprintf_r+0x560>
 8011c32:	e1b8      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011c34:	ad17      	add	r5, sp, #92	; 0x5c
 8011c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c38:	2b80      	cmp	r3, #128	; 0x80
 8011c3a:	d11e      	bne.n	8011c7a <_vfiprintf_r+0x5a6>
 8011c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c40:	1a9f      	subs	r7, r3, r2
 8011c42:	2f00      	cmp	r7, #0
 8011c44:	dd19      	ble.n	8011c7a <_vfiprintf_r+0x5a6>
 8011c46:	0029      	movs	r1, r5
 8011c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c4a:	4871      	ldr	r0, [pc, #452]	; (8011e10 <_vfiprintf_r+0x73c>)
 8011c4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011c4e:	3301      	adds	r3, #1
 8011c50:	3108      	adds	r1, #8
 8011c52:	6028      	str	r0, [r5, #0]
 8011c54:	2f10      	cmp	r7, #16
 8011c56:	dd00      	ble.n	8011c5a <_vfiprintf_r+0x586>
 8011c58:	e164      	b.n	8011f24 <_vfiprintf_r+0x850>
 8011c5a:	606f      	str	r7, [r5, #4]
 8011c5c:	18bf      	adds	r7, r7, r2
 8011c5e:	000d      	movs	r5, r1
 8011c60:	9716      	str	r7, [sp, #88]	; 0x58
 8011c62:	9315      	str	r3, [sp, #84]	; 0x54
 8011c64:	2b07      	cmp	r3, #7
 8011c66:	dd08      	ble.n	8011c7a <_vfiprintf_r+0x5a6>
 8011c68:	9903      	ldr	r1, [sp, #12]
 8011c6a:	9806      	ldr	r0, [sp, #24]
 8011c6c:	aa14      	add	r2, sp, #80	; 0x50
 8011c6e:	f7ff fcfc 	bl	801166a <__sprint_r>
 8011c72:	2800      	cmp	r0, #0
 8011c74:	d000      	beq.n	8011c78 <_vfiprintf_r+0x5a4>
 8011c76:	e196      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011c78:	ad17      	add	r5, sp, #92	; 0x5c
 8011c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c7c:	9a05      	ldr	r2, [sp, #20]
 8011c7e:	1a9f      	subs	r7, r3, r2
 8011c80:	2f00      	cmp	r7, #0
 8011c82:	dd19      	ble.n	8011cb8 <_vfiprintf_r+0x5e4>
 8011c84:	0029      	movs	r1, r5
 8011c86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c88:	4861      	ldr	r0, [pc, #388]	; (8011e10 <_vfiprintf_r+0x73c>)
 8011c8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	3108      	adds	r1, #8
 8011c90:	6028      	str	r0, [r5, #0]
 8011c92:	2f10      	cmp	r7, #16
 8011c94:	dd00      	ble.n	8011c98 <_vfiprintf_r+0x5c4>
 8011c96:	e157      	b.n	8011f48 <_vfiprintf_r+0x874>
 8011c98:	606f      	str	r7, [r5, #4]
 8011c9a:	18bf      	adds	r7, r7, r2
 8011c9c:	000d      	movs	r5, r1
 8011c9e:	9716      	str	r7, [sp, #88]	; 0x58
 8011ca0:	9315      	str	r3, [sp, #84]	; 0x54
 8011ca2:	2b07      	cmp	r3, #7
 8011ca4:	dd08      	ble.n	8011cb8 <_vfiprintf_r+0x5e4>
 8011ca6:	9903      	ldr	r1, [sp, #12]
 8011ca8:	9806      	ldr	r0, [sp, #24]
 8011caa:	aa14      	add	r2, sp, #80	; 0x50
 8011cac:	f7ff fcdd 	bl	801166a <__sprint_r>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d000      	beq.n	8011cb6 <_vfiprintf_r+0x5e2>
 8011cb4:	e177      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011cb6:	ad17      	add	r5, sp, #92	; 0x5c
 8011cb8:	9b05      	ldr	r3, [sp, #20]
 8011cba:	9a05      	ldr	r2, [sp, #20]
 8011cbc:	606b      	str	r3, [r5, #4]
 8011cbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011cc0:	602e      	str	r6, [r5, #0]
 8011cc2:	189b      	adds	r3, r3, r2
 8011cc4:	9316      	str	r3, [sp, #88]	; 0x58
 8011cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cc8:	3508      	adds	r5, #8
 8011cca:	3301      	adds	r3, #1
 8011ccc:	9315      	str	r3, [sp, #84]	; 0x54
 8011cce:	2b07      	cmp	r3, #7
 8011cd0:	dd08      	ble.n	8011ce4 <_vfiprintf_r+0x610>
 8011cd2:	9903      	ldr	r1, [sp, #12]
 8011cd4:	9806      	ldr	r0, [sp, #24]
 8011cd6:	aa14      	add	r2, sp, #80	; 0x50
 8011cd8:	f7ff fcc7 	bl	801166a <__sprint_r>
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	d000      	beq.n	8011ce2 <_vfiprintf_r+0x60e>
 8011ce0:	e161      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011ce2:	ad17      	add	r5, sp, #92	; 0x5c
 8011ce4:	0764      	lsls	r4, r4, #29
 8011ce6:	d500      	bpl.n	8011cea <_vfiprintf_r+0x616>
 8011ce8:	e140      	b.n	8011f6c <_vfiprintf_r+0x898>
 8011cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	da00      	bge.n	8011cf4 <_vfiprintf_r+0x620>
 8011cf2:	0013      	movs	r3, r2
 8011cf4:	9a08      	ldr	r2, [sp, #32]
 8011cf6:	18d3      	adds	r3, r2, r3
 8011cf8:	9308      	str	r3, [sp, #32]
 8011cfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d007      	beq.n	8011d10 <_vfiprintf_r+0x63c>
 8011d00:	9903      	ldr	r1, [sp, #12]
 8011d02:	9806      	ldr	r0, [sp, #24]
 8011d04:	aa14      	add	r2, sp, #80	; 0x50
 8011d06:	f7ff fcb0 	bl	801166a <__sprint_r>
 8011d0a:	2800      	cmp	r0, #0
 8011d0c:	d000      	beq.n	8011d10 <_vfiprintf_r+0x63c>
 8011d0e:	e14a      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011d10:	2300      	movs	r3, #0
 8011d12:	ad17      	add	r5, sp, #92	; 0x5c
 8011d14:	9315      	str	r3, [sp, #84]	; 0x54
 8011d16:	e6b7      	b.n	8011a88 <_vfiprintf_r+0x3b4>
 8011d18:	0030      	movs	r0, r6
 8011d1a:	f7ee f9f3 	bl	8000104 <strlen>
 8011d1e:	9005      	str	r0, [sp, #20]
 8011d20:	e719      	b.n	8011b56 <_vfiprintf_r+0x482>
 8011d22:	2310      	movs	r3, #16
 8011d24:	431c      	orrs	r4, r3
 8011d26:	2320      	movs	r3, #32
 8011d28:	0020      	movs	r0, r4
 8011d2a:	4018      	ands	r0, r3
 8011d2c:	421c      	tst	r4, r3
 8011d2e:	d009      	beq.n	8011d44 <_vfiprintf_r+0x670>
 8011d30:	3b19      	subs	r3, #25
 8011d32:	3707      	adds	r7, #7
 8011d34:	439f      	bics	r7, r3
 8011d36:	0039      	movs	r1, r7
 8011d38:	c90c      	ldmia	r1!, {r2, r3}
 8011d3a:	9200      	str	r2, [sp, #0]
 8011d3c:	9301      	str	r3, [sp, #4]
 8011d3e:	9104      	str	r1, [sp, #16]
 8011d40:	2301      	movs	r3, #1
 8011d42:	e6c7      	b.n	8011ad4 <_vfiprintf_r+0x400>
 8011d44:	003b      	movs	r3, r7
 8011d46:	cb04      	ldmia	r3!, {r2}
 8011d48:	0021      	movs	r1, r4
 8011d4a:	9304      	str	r3, [sp, #16]
 8011d4c:	2310      	movs	r3, #16
 8011d4e:	4019      	ands	r1, r3
 8011d50:	421c      	tst	r4, r3
 8011d52:	d003      	beq.n	8011d5c <_vfiprintf_r+0x688>
 8011d54:	9200      	str	r2, [sp, #0]
 8011d56:	9001      	str	r0, [sp, #4]
 8011d58:	3b0f      	subs	r3, #15
 8011d5a:	e6bb      	b.n	8011ad4 <_vfiprintf_r+0x400>
 8011d5c:	2340      	movs	r3, #64	; 0x40
 8011d5e:	0020      	movs	r0, r4
 8011d60:	4018      	ands	r0, r3
 8011d62:	421c      	tst	r4, r3
 8011d64:	d003      	beq.n	8011d6e <_vfiprintf_r+0x69a>
 8011d66:	b293      	uxth	r3, r2
 8011d68:	9300      	str	r3, [sp, #0]
 8011d6a:	9101      	str	r1, [sp, #4]
 8011d6c:	e7e8      	b.n	8011d40 <_vfiprintf_r+0x66c>
 8011d6e:	2380      	movs	r3, #128	; 0x80
 8011d70:	0021      	movs	r1, r4
 8011d72:	009b      	lsls	r3, r3, #2
 8011d74:	4019      	ands	r1, r3
 8011d76:	421c      	tst	r4, r3
 8011d78:	d003      	beq.n	8011d82 <_vfiprintf_r+0x6ae>
 8011d7a:	b2d3      	uxtb	r3, r2
 8011d7c:	9300      	str	r3, [sp, #0]
 8011d7e:	9001      	str	r0, [sp, #4]
 8011d80:	e7de      	b.n	8011d40 <_vfiprintf_r+0x66c>
 8011d82:	9200      	str	r2, [sp, #0]
 8011d84:	e7f1      	b.n	8011d6a <_vfiprintf_r+0x696>
 8011d86:	4a23      	ldr	r2, [pc, #140]	; (8011e14 <_vfiprintf_r+0x740>)
 8011d88:	0020      	movs	r0, r4
 8011d8a:	920c      	str	r2, [sp, #48]	; 0x30
 8011d8c:	2220      	movs	r2, #32
 8011d8e:	4010      	ands	r0, r2
 8011d90:	4214      	tst	r4, r2
 8011d92:	d019      	beq.n	8011dc8 <_vfiprintf_r+0x6f4>
 8011d94:	3a19      	subs	r2, #25
 8011d96:	3707      	adds	r7, #7
 8011d98:	4397      	bics	r7, r2
 8011d9a:	0038      	movs	r0, r7
 8011d9c:	c806      	ldmia	r0!, {r1, r2}
 8011d9e:	9100      	str	r1, [sp, #0]
 8011da0:	9201      	str	r2, [sp, #4]
 8011da2:	9004      	str	r0, [sp, #16]
 8011da4:	07e2      	lsls	r2, r4, #31
 8011da6:	d509      	bpl.n	8011dbc <_vfiprintf_r+0x6e8>
 8011da8:	9a00      	ldr	r2, [sp, #0]
 8011daa:	9901      	ldr	r1, [sp, #4]
 8011dac:	430a      	orrs	r2, r1
 8011dae:	d005      	beq.n	8011dbc <_vfiprintf_r+0x6e8>
 8011db0:	aa13      	add	r2, sp, #76	; 0x4c
 8011db2:	2130      	movs	r1, #48	; 0x30
 8011db4:	7053      	strb	r3, [r2, #1]
 8011db6:	2302      	movs	r3, #2
 8011db8:	7011      	strb	r1, [r2, #0]
 8011dba:	431c      	orrs	r4, r3
 8011dbc:	4b10      	ldr	r3, [pc, #64]	; (8011e00 <_vfiprintf_r+0x72c>)
 8011dbe:	401c      	ands	r4, r3
 8011dc0:	2302      	movs	r3, #2
 8011dc2:	e687      	b.n	8011ad4 <_vfiprintf_r+0x400>
 8011dc4:	4a10      	ldr	r2, [pc, #64]	; (8011e08 <_vfiprintf_r+0x734>)
 8011dc6:	e7df      	b.n	8011d88 <_vfiprintf_r+0x6b4>
 8011dc8:	0039      	movs	r1, r7
 8011dca:	c904      	ldmia	r1!, {r2}
 8011dcc:	0026      	movs	r6, r4
 8011dce:	9104      	str	r1, [sp, #16]
 8011dd0:	2110      	movs	r1, #16
 8011dd2:	400e      	ands	r6, r1
 8011dd4:	420c      	tst	r4, r1
 8011dd6:	d002      	beq.n	8011dde <_vfiprintf_r+0x70a>
 8011dd8:	9200      	str	r2, [sp, #0]
 8011dda:	9001      	str	r0, [sp, #4]
 8011ddc:	e7e2      	b.n	8011da4 <_vfiprintf_r+0x6d0>
 8011dde:	2140      	movs	r1, #64	; 0x40
 8011de0:	0020      	movs	r0, r4
 8011de2:	4008      	ands	r0, r1
 8011de4:	420c      	tst	r4, r1
 8011de6:	d003      	beq.n	8011df0 <_vfiprintf_r+0x71c>
 8011de8:	b292      	uxth	r2, r2
 8011dea:	9200      	str	r2, [sp, #0]
 8011dec:	9601      	str	r6, [sp, #4]
 8011dee:	e7d9      	b.n	8011da4 <_vfiprintf_r+0x6d0>
 8011df0:	2180      	movs	r1, #128	; 0x80
 8011df2:	0026      	movs	r6, r4
 8011df4:	0089      	lsls	r1, r1, #2
 8011df6:	400e      	ands	r6, r1
 8011df8:	420c      	tst	r4, r1
 8011dfa:	d0f6      	beq.n	8011dea <_vfiprintf_r+0x716>
 8011dfc:	b2d2      	uxtb	r2, r2
 8011dfe:	e7eb      	b.n	8011dd8 <_vfiprintf_r+0x704>
 8011e00:	fffffbff 	.word	0xfffffbff
 8011e04:	00007830 	.word	0x00007830
 8011e08:	0801465c 	.word	0x0801465c
 8011e0c:	08014769 	.word	0x08014769
 8011e10:	08014779 	.word	0x08014779
 8011e14:	0801466d 	.word	0x0801466d
 8011e18:	9b01      	ldr	r3, [sp, #4]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d109      	bne.n	8011e32 <_vfiprintf_r+0x75e>
 8011e1e:	9b00      	ldr	r3, [sp, #0]
 8011e20:	2b09      	cmp	r3, #9
 8011e22:	d806      	bhi.n	8011e32 <_vfiprintf_r+0x75e>
 8011e24:	26b7      	movs	r6, #183	; 0xb7
 8011e26:	ab12      	add	r3, sp, #72	; 0x48
 8011e28:	18f6      	adds	r6, r6, r3
 8011e2a:	9b00      	ldr	r3, [sp, #0]
 8011e2c:	3330      	adds	r3, #48	; 0x30
 8011e2e:	7033      	strb	r3, [r6, #0]
 8011e30:	e115      	b.n	801205e <_vfiprintf_r+0x98a>
 8011e32:	2380      	movs	r3, #128	; 0x80
 8011e34:	2400      	movs	r4, #0
 8011e36:	00db      	lsls	r3, r3, #3
 8011e38:	403b      	ands	r3, r7
 8011e3a:	ae40      	add	r6, sp, #256	; 0x100
 8011e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8011e3e:	220a      	movs	r2, #10
 8011e40:	9800      	ldr	r0, [sp, #0]
 8011e42:	9901      	ldr	r1, [sp, #4]
 8011e44:	2300      	movs	r3, #0
 8011e46:	f7ee fb2d 	bl	80004a4 <__aeabi_uldivmod>
 8011e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e4c:	3e01      	subs	r6, #1
 8011e4e:	3230      	adds	r2, #48	; 0x30
 8011e50:	900b      	str	r0, [sp, #44]	; 0x2c
 8011e52:	9110      	str	r1, [sp, #64]	; 0x40
 8011e54:	7032      	strb	r2, [r6, #0]
 8011e56:	3401      	adds	r4, #1
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d01a      	beq.n	8011e92 <_vfiprintf_r+0x7be>
 8011e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	42a3      	cmp	r3, r4
 8011e62:	d116      	bne.n	8011e92 <_vfiprintf_r+0x7be>
 8011e64:	2cff      	cmp	r4, #255	; 0xff
 8011e66:	d014      	beq.n	8011e92 <_vfiprintf_r+0x7be>
 8011e68:	9b01      	ldr	r3, [sp, #4]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <_vfiprintf_r+0x7a0>
 8011e6e:	9b00      	ldr	r3, [sp, #0]
 8011e70:	2b09      	cmp	r3, #9
 8011e72:	d90e      	bls.n	8011e92 <_vfiprintf_r+0x7be>
 8011e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011e78:	1af6      	subs	r6, r6, r3
 8011e7a:	001a      	movs	r2, r3
 8011e7c:	0030      	movs	r0, r6
 8011e7e:	f7f9 ffe6 	bl	800be4e <strncpy>
 8011e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e84:	2400      	movs	r4, #0
 8011e86:	785b      	ldrb	r3, [r3, #1]
 8011e88:	1e5a      	subs	r2, r3, #1
 8011e8a:	4193      	sbcs	r3, r2
 8011e8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e8e:	18d3      	adds	r3, r2, r3
 8011e90:	930d      	str	r3, [sp, #52]	; 0x34
 8011e92:	9b01      	ldr	r3, [sp, #4]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d103      	bne.n	8011ea0 <_vfiprintf_r+0x7cc>
 8011e98:	9b00      	ldr	r3, [sp, #0]
 8011e9a:	2b09      	cmp	r3, #9
 8011e9c:	d800      	bhi.n	8011ea0 <_vfiprintf_r+0x7cc>
 8011e9e:	e0de      	b.n	801205e <_vfiprintf_r+0x98a>
 8011ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ea2:	9300      	str	r3, [sp, #0]
 8011ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ea6:	9301      	str	r3, [sp, #4]
 8011ea8:	e7c9      	b.n	8011e3e <_vfiprintf_r+0x76a>
 8011eaa:	200f      	movs	r0, #15
 8011eac:	9b00      	ldr	r3, [sp, #0]
 8011eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011eb0:	4003      	ands	r3, r0
 8011eb2:	5cd3      	ldrb	r3, [r2, r3]
 8011eb4:	3e01      	subs	r6, #1
 8011eb6:	7033      	strb	r3, [r6, #0]
 8011eb8:	9b01      	ldr	r3, [sp, #4]
 8011eba:	0719      	lsls	r1, r3, #28
 8011ebc:	9b00      	ldr	r3, [sp, #0]
 8011ebe:	091a      	lsrs	r2, r3, #4
 8011ec0:	9b01      	ldr	r3, [sp, #4]
 8011ec2:	4311      	orrs	r1, r2
 8011ec4:	091b      	lsrs	r3, r3, #4
 8011ec6:	9301      	str	r3, [sp, #4]
 8011ec8:	000b      	movs	r3, r1
 8011eca:	9a01      	ldr	r2, [sp, #4]
 8011ecc:	9100      	str	r1, [sp, #0]
 8011ece:	4313      	orrs	r3, r2
 8011ed0:	d1ec      	bne.n	8011eac <_vfiprintf_r+0x7d8>
 8011ed2:	e0c4      	b.n	801205e <_vfiprintf_r+0x98a>
 8011ed4:	ae40      	add	r6, sp, #256	; 0x100
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d000      	beq.n	8011edc <_vfiprintf_r+0x808>
 8011eda:	e0c0      	b.n	801205e <_vfiprintf_r+0x98a>
 8011edc:	07e4      	lsls	r4, r4, #31
 8011ede:	d400      	bmi.n	8011ee2 <_vfiprintf_r+0x80e>
 8011ee0:	e0bd      	b.n	801205e <_vfiprintf_r+0x98a>
 8011ee2:	26b7      	movs	r6, #183	; 0xb7
 8011ee4:	ab12      	add	r3, sp, #72	; 0x48
 8011ee6:	18f6      	adds	r6, r6, r3
 8011ee8:	2330      	movs	r3, #48	; 0x30
 8011eea:	e7a0      	b.n	8011e2e <_vfiprintf_r+0x75a>
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d100      	bne.n	8011ef2 <_vfiprintf_r+0x81e>
 8011ef0:	e07e      	b.n	8011ff0 <_vfiprintf_r+0x91c>
 8011ef2:	ae27      	add	r6, sp, #156	; 0x9c
 8011ef4:	7033      	strb	r3, [r6, #0]
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	aa12      	add	r2, sp, #72	; 0x48
 8011efa:	70d3      	strb	r3, [r2, #3]
 8011efc:	9704      	str	r7, [sp, #16]
 8011efe:	e576      	b.n	80119ee <_vfiprintf_r+0x31a>
 8011f00:	2010      	movs	r0, #16
 8011f02:	1812      	adds	r2, r2, r0
 8011f04:	6068      	str	r0, [r5, #4]
 8011f06:	9216      	str	r2, [sp, #88]	; 0x58
 8011f08:	9315      	str	r3, [sp, #84]	; 0x54
 8011f0a:	2b07      	cmp	r3, #7
 8011f0c:	dd07      	ble.n	8011f1e <_vfiprintf_r+0x84a>
 8011f0e:	9903      	ldr	r1, [sp, #12]
 8011f10:	9806      	ldr	r0, [sp, #24]
 8011f12:	aa14      	add	r2, sp, #80	; 0x50
 8011f14:	f7ff fba9 	bl	801166a <__sprint_r>
 8011f18:	2800      	cmp	r0, #0
 8011f1a:	d144      	bne.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011f1c:	a917      	add	r1, sp, #92	; 0x5c
 8011f1e:	000d      	movs	r5, r1
 8011f20:	3f10      	subs	r7, #16
 8011f22:	e63b      	b.n	8011b9c <_vfiprintf_r+0x4c8>
 8011f24:	2010      	movs	r0, #16
 8011f26:	1812      	adds	r2, r2, r0
 8011f28:	6068      	str	r0, [r5, #4]
 8011f2a:	9216      	str	r2, [sp, #88]	; 0x58
 8011f2c:	9315      	str	r3, [sp, #84]	; 0x54
 8011f2e:	2b07      	cmp	r3, #7
 8011f30:	dd07      	ble.n	8011f42 <_vfiprintf_r+0x86e>
 8011f32:	9903      	ldr	r1, [sp, #12]
 8011f34:	9806      	ldr	r0, [sp, #24]
 8011f36:	aa14      	add	r2, sp, #80	; 0x50
 8011f38:	f7ff fb97 	bl	801166a <__sprint_r>
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	d132      	bne.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011f40:	a917      	add	r1, sp, #92	; 0x5c
 8011f42:	000d      	movs	r5, r1
 8011f44:	3f10      	subs	r7, #16
 8011f46:	e67e      	b.n	8011c46 <_vfiprintf_r+0x572>
 8011f48:	2010      	movs	r0, #16
 8011f4a:	1812      	adds	r2, r2, r0
 8011f4c:	6068      	str	r0, [r5, #4]
 8011f4e:	9216      	str	r2, [sp, #88]	; 0x58
 8011f50:	9315      	str	r3, [sp, #84]	; 0x54
 8011f52:	2b07      	cmp	r3, #7
 8011f54:	dd07      	ble.n	8011f66 <_vfiprintf_r+0x892>
 8011f56:	9903      	ldr	r1, [sp, #12]
 8011f58:	9806      	ldr	r0, [sp, #24]
 8011f5a:	aa14      	add	r2, sp, #80	; 0x50
 8011f5c:	f7ff fb85 	bl	801166a <__sprint_r>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	d120      	bne.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011f64:	a917      	add	r1, sp, #92	; 0x5c
 8011f66:	000d      	movs	r5, r1
 8011f68:	3f10      	subs	r7, #16
 8011f6a:	e68b      	b.n	8011c84 <_vfiprintf_r+0x5b0>
 8011f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f70:	2610      	movs	r6, #16
 8011f72:	1a9c      	subs	r4, r3, r2
 8011f74:	2c00      	cmp	r4, #0
 8011f76:	dc00      	bgt.n	8011f7a <_vfiprintf_r+0x8a6>
 8011f78:	e6b7      	b.n	8011cea <_vfiprintf_r+0x616>
 8011f7a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011f7c:	4a3b      	ldr	r2, [pc, #236]	; (801206c <_vfiprintf_r+0x998>)
 8011f7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011f80:	3101      	adds	r1, #1
 8011f82:	602a      	str	r2, [r5, #0]
 8011f84:	2c10      	cmp	r4, #16
 8011f86:	dc22      	bgt.n	8011fce <_vfiprintf_r+0x8fa>
 8011f88:	606c      	str	r4, [r5, #4]
 8011f8a:	18e4      	adds	r4, r4, r3
 8011f8c:	9416      	str	r4, [sp, #88]	; 0x58
 8011f8e:	9115      	str	r1, [sp, #84]	; 0x54
 8011f90:	2907      	cmp	r1, #7
 8011f92:	dc00      	bgt.n	8011f96 <_vfiprintf_r+0x8c2>
 8011f94:	e6a9      	b.n	8011cea <_vfiprintf_r+0x616>
 8011f96:	9903      	ldr	r1, [sp, #12]
 8011f98:	9806      	ldr	r0, [sp, #24]
 8011f9a:	aa14      	add	r2, sp, #80	; 0x50
 8011f9c:	f7ff fb65 	bl	801166a <__sprint_r>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	d100      	bne.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011fa4:	e6a1      	b.n	8011cea <_vfiprintf_r+0x616>
 8011fa6:	9b03      	ldr	r3, [sp, #12]
 8011fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011faa:	07db      	lsls	r3, r3, #31
 8011fac:	d407      	bmi.n	8011fbe <_vfiprintf_r+0x8ea>
 8011fae:	9b03      	ldr	r3, [sp, #12]
 8011fb0:	899b      	ldrh	r3, [r3, #12]
 8011fb2:	059b      	lsls	r3, r3, #22
 8011fb4:	d403      	bmi.n	8011fbe <_vfiprintf_r+0x8ea>
 8011fb6:	9b03      	ldr	r3, [sp, #12]
 8011fb8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011fba:	f7fa f808 	bl	800bfce <__retarget_lock_release_recursive>
 8011fbe:	9b03      	ldr	r3, [sp, #12]
 8011fc0:	899b      	ldrh	r3, [r3, #12]
 8011fc2:	065b      	lsls	r3, r3, #25
 8011fc4:	d401      	bmi.n	8011fca <_vfiprintf_r+0x8f6>
 8011fc6:	f7ff fbc3 	bl	8011750 <_vfiprintf_r+0x7c>
 8011fca:	f7ff fbbe 	bl	801174a <_vfiprintf_r+0x76>
 8011fce:	3310      	adds	r3, #16
 8011fd0:	606e      	str	r6, [r5, #4]
 8011fd2:	9316      	str	r3, [sp, #88]	; 0x58
 8011fd4:	9115      	str	r1, [sp, #84]	; 0x54
 8011fd6:	3508      	adds	r5, #8
 8011fd8:	2907      	cmp	r1, #7
 8011fda:	dd07      	ble.n	8011fec <_vfiprintf_r+0x918>
 8011fdc:	9903      	ldr	r1, [sp, #12]
 8011fde:	9806      	ldr	r0, [sp, #24]
 8011fe0:	aa14      	add	r2, sp, #80	; 0x50
 8011fe2:	f7ff fb42 	bl	801166a <__sprint_r>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	d1dd      	bne.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011fea:	ad17      	add	r5, sp, #92	; 0x5c
 8011fec:	3c10      	subs	r4, #16
 8011fee:	e7c4      	b.n	8011f7a <_vfiprintf_r+0x8a6>
 8011ff0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d102      	bne.n	8011ffc <_vfiprintf_r+0x928>
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	9315      	str	r3, [sp, #84]	; 0x54
 8011ffa:	e7d4      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 8011ffc:	9903      	ldr	r1, [sp, #12]
 8011ffe:	9806      	ldr	r0, [sp, #24]
 8012000:	aa14      	add	r2, sp, #80	; 0x50
 8012002:	f7ff fb32 	bl	801166a <__sprint_r>
 8012006:	2800      	cmp	r0, #0
 8012008:	d0f5      	beq.n	8011ff6 <_vfiprintf_r+0x922>
 801200a:	e7cc      	b.n	8011fa6 <_vfiprintf_r+0x8d2>
 801200c:	0027      	movs	r7, r4
 801200e:	2a00      	cmp	r2, #0
 8012010:	d100      	bne.n	8012014 <_vfiprintf_r+0x940>
 8012012:	e51b      	b.n	8011a4c <_vfiprintf_r+0x378>
 8012014:	2b01      	cmp	r3, #1
 8012016:	d100      	bne.n	801201a <_vfiprintf_r+0x946>
 8012018:	e6fe      	b.n	8011e18 <_vfiprintf_r+0x744>
 801201a:	ae40      	add	r6, sp, #256	; 0x100
 801201c:	2b02      	cmp	r3, #2
 801201e:	d100      	bne.n	8012022 <_vfiprintf_r+0x94e>
 8012020:	e743      	b.n	8011eaa <_vfiprintf_r+0x7d6>
 8012022:	2307      	movs	r3, #7
 8012024:	469c      	mov	ip, r3
 8012026:	4663      	mov	r3, ip
 8012028:	9900      	ldr	r1, [sp, #0]
 801202a:	0032      	movs	r2, r6
 801202c:	400b      	ands	r3, r1
 801202e:	9901      	ldr	r1, [sp, #4]
 8012030:	3e01      	subs	r6, #1
 8012032:	074c      	lsls	r4, r1, #29
 8012034:	9900      	ldr	r1, [sp, #0]
 8012036:	3330      	adds	r3, #48	; 0x30
 8012038:	08c8      	lsrs	r0, r1, #3
 801203a:	9901      	ldr	r1, [sp, #4]
 801203c:	4304      	orrs	r4, r0
 801203e:	08c9      	lsrs	r1, r1, #3
 8012040:	9101      	str	r1, [sp, #4]
 8012042:	0021      	movs	r1, r4
 8012044:	9801      	ldr	r0, [sp, #4]
 8012046:	7033      	strb	r3, [r6, #0]
 8012048:	9400      	str	r4, [sp, #0]
 801204a:	4301      	orrs	r1, r0
 801204c:	d1eb      	bne.n	8012026 <_vfiprintf_r+0x952>
 801204e:	07f9      	lsls	r1, r7, #31
 8012050:	d505      	bpl.n	801205e <_vfiprintf_r+0x98a>
 8012052:	2b30      	cmp	r3, #48	; 0x30
 8012054:	d003      	beq.n	801205e <_vfiprintf_r+0x98a>
 8012056:	2330      	movs	r3, #48	; 0x30
 8012058:	3e01      	subs	r6, #1
 801205a:	7033      	strb	r3, [r6, #0]
 801205c:	1e96      	subs	r6, r2, #2
 801205e:	9b05      	ldr	r3, [sp, #20]
 8012060:	003c      	movs	r4, r7
 8012062:	930b      	str	r3, [sp, #44]	; 0x2c
 8012064:	ab40      	add	r3, sp, #256	; 0x100
 8012066:	1b9b      	subs	r3, r3, r6
 8012068:	9305      	str	r3, [sp, #20]
 801206a:	e575      	b.n	8011b58 <_vfiprintf_r+0x484>
 801206c:	08014769 	.word	0x08014769

08012070 <__sbprintf>:
 8012070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012072:	0015      	movs	r5, r2
 8012074:	2202      	movs	r2, #2
 8012076:	4c1e      	ldr	r4, [pc, #120]	; (80120f0 <__sbprintf+0x80>)
 8012078:	001f      	movs	r7, r3
 801207a:	898b      	ldrh	r3, [r1, #12]
 801207c:	44a5      	add	sp, r4
 801207e:	4393      	bics	r3, r2
 8012080:	466a      	mov	r2, sp
 8012082:	8193      	strh	r3, [r2, #12]
 8012084:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012086:	0006      	movs	r6, r0
 8012088:	9319      	str	r3, [sp, #100]	; 0x64
 801208a:	89cb      	ldrh	r3, [r1, #14]
 801208c:	a816      	add	r0, sp, #88	; 0x58
 801208e:	81d3      	strh	r3, [r2, #14]
 8012090:	69cb      	ldr	r3, [r1, #28]
 8012092:	000c      	movs	r4, r1
 8012094:	9307      	str	r3, [sp, #28]
 8012096:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8012098:	9309      	str	r3, [sp, #36]	; 0x24
 801209a:	ab1a      	add	r3, sp, #104	; 0x68
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	9304      	str	r3, [sp, #16]
 80120a0:	2380      	movs	r3, #128	; 0x80
 80120a2:	00db      	lsls	r3, r3, #3
 80120a4:	9302      	str	r3, [sp, #8]
 80120a6:	9305      	str	r3, [sp, #20]
 80120a8:	2300      	movs	r3, #0
 80120aa:	9306      	str	r3, [sp, #24]
 80120ac:	f7f9 ff8c 	bl	800bfc8 <__retarget_lock_init_recursive>
 80120b0:	002a      	movs	r2, r5
 80120b2:	003b      	movs	r3, r7
 80120b4:	4669      	mov	r1, sp
 80120b6:	0030      	movs	r0, r6
 80120b8:	f7ff fb0c 	bl	80116d4 <_vfiprintf_r>
 80120bc:	1e05      	subs	r5, r0, #0
 80120be:	db07      	blt.n	80120d0 <__sbprintf+0x60>
 80120c0:	4669      	mov	r1, sp
 80120c2:	0030      	movs	r0, r6
 80120c4:	f7fd fdf6 	bl	800fcb4 <_fflush_r>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	d001      	beq.n	80120d0 <__sbprintf+0x60>
 80120cc:	2501      	movs	r5, #1
 80120ce:	426d      	negs	r5, r5
 80120d0:	466b      	mov	r3, sp
 80120d2:	899a      	ldrh	r2, [r3, #12]
 80120d4:	2340      	movs	r3, #64	; 0x40
 80120d6:	421a      	tst	r2, r3
 80120d8:	d002      	beq.n	80120e0 <__sbprintf+0x70>
 80120da:	89a2      	ldrh	r2, [r4, #12]
 80120dc:	4313      	orrs	r3, r2
 80120de:	81a3      	strh	r3, [r4, #12]
 80120e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80120e2:	f7f9 ff72 	bl	800bfca <__retarget_lock_close_recursive>
 80120e6:	0028      	movs	r0, r5
 80120e8:	4b02      	ldr	r3, [pc, #8]	; (80120f4 <__sbprintf+0x84>)
 80120ea:	449d      	add	sp, r3
 80120ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120ee:	46c0      	nop			; (mov r8, r8)
 80120f0:	fffffb94 	.word	0xfffffb94
 80120f4:	0000046c 	.word	0x0000046c

080120f8 <__sfvwrite_r>:
 80120f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120fa:	6893      	ldr	r3, [r2, #8]
 80120fc:	b087      	sub	sp, #28
 80120fe:	000c      	movs	r4, r1
 8012100:	9002      	str	r0, [sp, #8]
 8012102:	9204      	str	r2, [sp, #16]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d102      	bne.n	801210e <__sfvwrite_r+0x16>
 8012108:	2000      	movs	r0, #0
 801210a:	b007      	add	sp, #28
 801210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801210e:	898b      	ldrh	r3, [r1, #12]
 8012110:	071b      	lsls	r3, r3, #28
 8012112:	d557      	bpl.n	80121c4 <__sfvwrite_r+0xcc>
 8012114:	690b      	ldr	r3, [r1, #16]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d054      	beq.n	80121c4 <__sfvwrite_r+0xcc>
 801211a:	9b04      	ldr	r3, [sp, #16]
 801211c:	2202      	movs	r2, #2
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	9301      	str	r3, [sp, #4]
 8012122:	89a3      	ldrh	r3, [r4, #12]
 8012124:	001f      	movs	r7, r3
 8012126:	4017      	ands	r7, r2
 8012128:	4213      	tst	r3, r2
 801212a:	d171      	bne.n	8012210 <__sfvwrite_r+0x118>
 801212c:	2201      	movs	r2, #1
 801212e:	2101      	movs	r1, #1
 8012130:	401a      	ands	r2, r3
 8012132:	420b      	tst	r3, r1
 8012134:	d100      	bne.n	8012138 <__sfvwrite_r+0x40>
 8012136:	e0a5      	b.n	8012284 <__sfvwrite_r+0x18c>
 8012138:	0038      	movs	r0, r7
 801213a:	003e      	movs	r6, r7
 801213c:	9703      	str	r7, [sp, #12]
 801213e:	9b03      	ldr	r3, [sp, #12]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d100      	bne.n	8012146 <__sfvwrite_r+0x4e>
 8012144:	e10b      	b.n	801235e <__sfvwrite_r+0x266>
 8012146:	2800      	cmp	r0, #0
 8012148:	d10a      	bne.n	8012160 <__sfvwrite_r+0x68>
 801214a:	001a      	movs	r2, r3
 801214c:	210a      	movs	r1, #10
 801214e:	0030      	movs	r0, r6
 8012150:	f7fd fe2a 	bl	800fda8 <memchr>
 8012154:	9b03      	ldr	r3, [sp, #12]
 8012156:	1c5f      	adds	r7, r3, #1
 8012158:	2800      	cmp	r0, #0
 801215a:	d001      	beq.n	8012160 <__sfvwrite_r+0x68>
 801215c:	3001      	adds	r0, #1
 801215e:	1b87      	subs	r7, r0, r6
 8012160:	9b03      	ldr	r3, [sp, #12]
 8012162:	9705      	str	r7, [sp, #20]
 8012164:	429f      	cmp	r7, r3
 8012166:	d900      	bls.n	801216a <__sfvwrite_r+0x72>
 8012168:	9305      	str	r3, [sp, #20]
 801216a:	6820      	ldr	r0, [r4, #0]
 801216c:	6922      	ldr	r2, [r4, #16]
 801216e:	68a5      	ldr	r5, [r4, #8]
 8012170:	6963      	ldr	r3, [r4, #20]
 8012172:	4290      	cmp	r0, r2
 8012174:	d800      	bhi.n	8012178 <__sfvwrite_r+0x80>
 8012176:	e0fb      	b.n	8012370 <__sfvwrite_r+0x278>
 8012178:	9a05      	ldr	r2, [sp, #20]
 801217a:	18ed      	adds	r5, r5, r3
 801217c:	42aa      	cmp	r2, r5
 801217e:	dc00      	bgt.n	8012182 <__sfvwrite_r+0x8a>
 8012180:	e0f6      	b.n	8012370 <__sfvwrite_r+0x278>
 8012182:	0031      	movs	r1, r6
 8012184:	002a      	movs	r2, r5
 8012186:	f000 fa1e 	bl	80125c6 <memmove>
 801218a:	6823      	ldr	r3, [r4, #0]
 801218c:	0021      	movs	r1, r4
 801218e:	195b      	adds	r3, r3, r5
 8012190:	9802      	ldr	r0, [sp, #8]
 8012192:	6023      	str	r3, [r4, #0]
 8012194:	f7fd fd8e 	bl	800fcb4 <_fflush_r>
 8012198:	2800      	cmp	r0, #0
 801219a:	d16e      	bne.n	801227a <__sfvwrite_r+0x182>
 801219c:	2001      	movs	r0, #1
 801219e:	1b7f      	subs	r7, r7, r5
 80121a0:	d105      	bne.n	80121ae <__sfvwrite_r+0xb6>
 80121a2:	0021      	movs	r1, r4
 80121a4:	9802      	ldr	r0, [sp, #8]
 80121a6:	f7fd fd85 	bl	800fcb4 <_fflush_r>
 80121aa:	2800      	cmp	r0, #0
 80121ac:	d165      	bne.n	801227a <__sfvwrite_r+0x182>
 80121ae:	9b03      	ldr	r3, [sp, #12]
 80121b0:	9a04      	ldr	r2, [sp, #16]
 80121b2:	1b5b      	subs	r3, r3, r5
 80121b4:	9303      	str	r3, [sp, #12]
 80121b6:	9b04      	ldr	r3, [sp, #16]
 80121b8:	1976      	adds	r6, r6, r5
 80121ba:	689b      	ldr	r3, [r3, #8]
 80121bc:	1b5b      	subs	r3, r3, r5
 80121be:	6093      	str	r3, [r2, #8]
 80121c0:	d1bd      	bne.n	801213e <__sfvwrite_r+0x46>
 80121c2:	e7a1      	b.n	8012108 <__sfvwrite_r+0x10>
 80121c4:	0021      	movs	r1, r4
 80121c6:	9802      	ldr	r0, [sp, #8]
 80121c8:	f000 f932 	bl	8012430 <__swsetup_r>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d0a4      	beq.n	801211a <__sfvwrite_r+0x22>
 80121d0:	2001      	movs	r0, #1
 80121d2:	4240      	negs	r0, r0
 80121d4:	e799      	b.n	801210a <__sfvwrite_r+0x12>
 80121d6:	9b01      	ldr	r3, [sp, #4]
 80121d8:	681e      	ldr	r6, [r3, #0]
 80121da:	685d      	ldr	r5, [r3, #4]
 80121dc:	3308      	adds	r3, #8
 80121de:	9301      	str	r3, [sp, #4]
 80121e0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80121e2:	69e1      	ldr	r1, [r4, #28]
 80121e4:	2d00      	cmp	r5, #0
 80121e6:	d0f6      	beq.n	80121d6 <__sfvwrite_r+0xde>
 80121e8:	4a6e      	ldr	r2, [pc, #440]	; (80123a4 <__sfvwrite_r+0x2ac>)
 80121ea:	002b      	movs	r3, r5
 80121ec:	4295      	cmp	r5, r2
 80121ee:	d900      	bls.n	80121f2 <__sfvwrite_r+0xfa>
 80121f0:	0013      	movs	r3, r2
 80121f2:	0032      	movs	r2, r6
 80121f4:	9802      	ldr	r0, [sp, #8]
 80121f6:	47b8      	blx	r7
 80121f8:	2800      	cmp	r0, #0
 80121fa:	dd3e      	ble.n	801227a <__sfvwrite_r+0x182>
 80121fc:	9b04      	ldr	r3, [sp, #16]
 80121fe:	9a04      	ldr	r2, [sp, #16]
 8012200:	689b      	ldr	r3, [r3, #8]
 8012202:	1836      	adds	r6, r6, r0
 8012204:	1a1b      	subs	r3, r3, r0
 8012206:	1a2d      	subs	r5, r5, r0
 8012208:	6093      	str	r3, [r2, #8]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d1e8      	bne.n	80121e0 <__sfvwrite_r+0xe8>
 801220e:	e77b      	b.n	8012108 <__sfvwrite_r+0x10>
 8012210:	2600      	movs	r6, #0
 8012212:	0035      	movs	r5, r6
 8012214:	e7e4      	b.n	80121e0 <__sfvwrite_r+0xe8>
 8012216:	9b01      	ldr	r3, [sp, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	9303      	str	r3, [sp, #12]
 801221c:	9b01      	ldr	r3, [sp, #4]
 801221e:	685d      	ldr	r5, [r3, #4]
 8012220:	3308      	adds	r3, #8
 8012222:	9301      	str	r3, [sp, #4]
 8012224:	220c      	movs	r2, #12
 8012226:	5ea3      	ldrsh	r3, [r4, r2]
 8012228:	6820      	ldr	r0, [r4, #0]
 801222a:	68a6      	ldr	r6, [r4, #8]
 801222c:	2d00      	cmp	r5, #0
 801222e:	d0f2      	beq.n	8012216 <__sfvwrite_r+0x11e>
 8012230:	2180      	movs	r1, #128	; 0x80
 8012232:	0089      	lsls	r1, r1, #2
 8012234:	b29a      	uxth	r2, r3
 8012236:	420b      	tst	r3, r1
 8012238:	d062      	beq.n	8012300 <__sfvwrite_r+0x208>
 801223a:	42ae      	cmp	r6, r5
 801223c:	d837      	bhi.n	80122ae <__sfvwrite_r+0x1b6>
 801223e:	2390      	movs	r3, #144	; 0x90
 8012240:	00db      	lsls	r3, r3, #3
 8012242:	421a      	tst	r2, r3
 8012244:	d033      	beq.n	80122ae <__sfvwrite_r+0x1b6>
 8012246:	6921      	ldr	r1, [r4, #16]
 8012248:	1a43      	subs	r3, r0, r1
 801224a:	2003      	movs	r0, #3
 801224c:	9305      	str	r3, [sp, #20]
 801224e:	6963      	ldr	r3, [r4, #20]
 8012250:	4343      	muls	r3, r0
 8012252:	0fdf      	lsrs	r7, r3, #31
 8012254:	18ff      	adds	r7, r7, r3
 8012256:	9b05      	ldr	r3, [sp, #20]
 8012258:	107f      	asrs	r7, r7, #1
 801225a:	3301      	adds	r3, #1
 801225c:	195b      	adds	r3, r3, r5
 801225e:	42bb      	cmp	r3, r7
 8012260:	d900      	bls.n	8012264 <__sfvwrite_r+0x16c>
 8012262:	001f      	movs	r7, r3
 8012264:	0552      	lsls	r2, r2, #21
 8012266:	d53c      	bpl.n	80122e2 <__sfvwrite_r+0x1ea>
 8012268:	0039      	movs	r1, r7
 801226a:	9802      	ldr	r0, [sp, #8]
 801226c:	f7f8 fb56 	bl	800a91c <_malloc_r>
 8012270:	1e06      	subs	r6, r0, #0
 8012272:	d10a      	bne.n	801228a <__sfvwrite_r+0x192>
 8012274:	230c      	movs	r3, #12
 8012276:	9a02      	ldr	r2, [sp, #8]
 8012278:	6013      	str	r3, [r2, #0]
 801227a:	2340      	movs	r3, #64	; 0x40
 801227c:	89a2      	ldrh	r2, [r4, #12]
 801227e:	4313      	orrs	r3, r2
 8012280:	81a3      	strh	r3, [r4, #12]
 8012282:	e7a5      	b.n	80121d0 <__sfvwrite_r+0xd8>
 8012284:	0015      	movs	r5, r2
 8012286:	9203      	str	r2, [sp, #12]
 8012288:	e7cc      	b.n	8012224 <__sfvwrite_r+0x12c>
 801228a:	9a05      	ldr	r2, [sp, #20]
 801228c:	6921      	ldr	r1, [r4, #16]
 801228e:	f7f9 feaa 	bl	800bfe6 <memcpy>
 8012292:	89a2      	ldrh	r2, [r4, #12]
 8012294:	4b44      	ldr	r3, [pc, #272]	; (80123a8 <__sfvwrite_r+0x2b0>)
 8012296:	401a      	ands	r2, r3
 8012298:	2380      	movs	r3, #128	; 0x80
 801229a:	4313      	orrs	r3, r2
 801229c:	81a3      	strh	r3, [r4, #12]
 801229e:	9b05      	ldr	r3, [sp, #20]
 80122a0:	6126      	str	r6, [r4, #16]
 80122a2:	18f6      	adds	r6, r6, r3
 80122a4:	6026      	str	r6, [r4, #0]
 80122a6:	002e      	movs	r6, r5
 80122a8:	6167      	str	r7, [r4, #20]
 80122aa:	1aff      	subs	r7, r7, r3
 80122ac:	60a7      	str	r7, [r4, #8]
 80122ae:	002f      	movs	r7, r5
 80122b0:	42ae      	cmp	r6, r5
 80122b2:	d900      	bls.n	80122b6 <__sfvwrite_r+0x1be>
 80122b4:	002e      	movs	r6, r5
 80122b6:	0032      	movs	r2, r6
 80122b8:	9903      	ldr	r1, [sp, #12]
 80122ba:	6820      	ldr	r0, [r4, #0]
 80122bc:	f000 f983 	bl	80125c6 <memmove>
 80122c0:	68a3      	ldr	r3, [r4, #8]
 80122c2:	1b9b      	subs	r3, r3, r6
 80122c4:	60a3      	str	r3, [r4, #8]
 80122c6:	6823      	ldr	r3, [r4, #0]
 80122c8:	199b      	adds	r3, r3, r6
 80122ca:	6023      	str	r3, [r4, #0]
 80122cc:	9b03      	ldr	r3, [sp, #12]
 80122ce:	9a04      	ldr	r2, [sp, #16]
 80122d0:	19db      	adds	r3, r3, r7
 80122d2:	9303      	str	r3, [sp, #12]
 80122d4:	9b04      	ldr	r3, [sp, #16]
 80122d6:	1bed      	subs	r5, r5, r7
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	1bdb      	subs	r3, r3, r7
 80122dc:	6093      	str	r3, [r2, #8]
 80122de:	d1a1      	bne.n	8012224 <__sfvwrite_r+0x12c>
 80122e0:	e712      	b.n	8012108 <__sfvwrite_r+0x10>
 80122e2:	003a      	movs	r2, r7
 80122e4:	9802      	ldr	r0, [sp, #8]
 80122e6:	f7fe fcd7 	bl	8010c98 <_realloc_r>
 80122ea:	1e06      	subs	r6, r0, #0
 80122ec:	d1d7      	bne.n	801229e <__sfvwrite_r+0x1a6>
 80122ee:	6921      	ldr	r1, [r4, #16]
 80122f0:	9802      	ldr	r0, [sp, #8]
 80122f2:	f7f9 fef3 	bl	800c0dc <_free_r>
 80122f6:	2280      	movs	r2, #128	; 0x80
 80122f8:	89a3      	ldrh	r3, [r4, #12]
 80122fa:	4393      	bics	r3, r2
 80122fc:	81a3      	strh	r3, [r4, #12]
 80122fe:	e7b9      	b.n	8012274 <__sfvwrite_r+0x17c>
 8012300:	6923      	ldr	r3, [r4, #16]
 8012302:	4283      	cmp	r3, r0
 8012304:	d302      	bcc.n	801230c <__sfvwrite_r+0x214>
 8012306:	6967      	ldr	r7, [r4, #20]
 8012308:	42af      	cmp	r7, r5
 801230a:	d916      	bls.n	801233a <__sfvwrite_r+0x242>
 801230c:	42ae      	cmp	r6, r5
 801230e:	d900      	bls.n	8012312 <__sfvwrite_r+0x21a>
 8012310:	002e      	movs	r6, r5
 8012312:	0032      	movs	r2, r6
 8012314:	9903      	ldr	r1, [sp, #12]
 8012316:	f000 f956 	bl	80125c6 <memmove>
 801231a:	68a3      	ldr	r3, [r4, #8]
 801231c:	6822      	ldr	r2, [r4, #0]
 801231e:	1b9b      	subs	r3, r3, r6
 8012320:	1992      	adds	r2, r2, r6
 8012322:	0037      	movs	r7, r6
 8012324:	60a3      	str	r3, [r4, #8]
 8012326:	6022      	str	r2, [r4, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d1cf      	bne.n	80122cc <__sfvwrite_r+0x1d4>
 801232c:	0021      	movs	r1, r4
 801232e:	9802      	ldr	r0, [sp, #8]
 8012330:	f7fd fcc0 	bl	800fcb4 <_fflush_r>
 8012334:	2800      	cmp	r0, #0
 8012336:	d0c9      	beq.n	80122cc <__sfvwrite_r+0x1d4>
 8012338:	e79f      	b.n	801227a <__sfvwrite_r+0x182>
 801233a:	4b1c      	ldr	r3, [pc, #112]	; (80123ac <__sfvwrite_r+0x2b4>)
 801233c:	0028      	movs	r0, r5
 801233e:	429d      	cmp	r5, r3
 8012340:	d900      	bls.n	8012344 <__sfvwrite_r+0x24c>
 8012342:	481b      	ldr	r0, [pc, #108]	; (80123b0 <__sfvwrite_r+0x2b8>)
 8012344:	0039      	movs	r1, r7
 8012346:	f7ed ff83 	bl	8000250 <__divsi3>
 801234a:	003b      	movs	r3, r7
 801234c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801234e:	4343      	muls	r3, r0
 8012350:	9a03      	ldr	r2, [sp, #12]
 8012352:	69e1      	ldr	r1, [r4, #28]
 8012354:	9802      	ldr	r0, [sp, #8]
 8012356:	47b0      	blx	r6
 8012358:	1e07      	subs	r7, r0, #0
 801235a:	dcb7      	bgt.n	80122cc <__sfvwrite_r+0x1d4>
 801235c:	e78d      	b.n	801227a <__sfvwrite_r+0x182>
 801235e:	9b01      	ldr	r3, [sp, #4]
 8012360:	2000      	movs	r0, #0
 8012362:	681e      	ldr	r6, [r3, #0]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	9303      	str	r3, [sp, #12]
 8012368:	9b01      	ldr	r3, [sp, #4]
 801236a:	3308      	adds	r3, #8
 801236c:	9301      	str	r3, [sp, #4]
 801236e:	e6e6      	b.n	801213e <__sfvwrite_r+0x46>
 8012370:	9a05      	ldr	r2, [sp, #20]
 8012372:	4293      	cmp	r3, r2
 8012374:	dc08      	bgt.n	8012388 <__sfvwrite_r+0x290>
 8012376:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012378:	0032      	movs	r2, r6
 801237a:	69e1      	ldr	r1, [r4, #28]
 801237c:	9802      	ldr	r0, [sp, #8]
 801237e:	47a8      	blx	r5
 8012380:	1e05      	subs	r5, r0, #0
 8012382:	dd00      	ble.n	8012386 <__sfvwrite_r+0x28e>
 8012384:	e70a      	b.n	801219c <__sfvwrite_r+0xa4>
 8012386:	e778      	b.n	801227a <__sfvwrite_r+0x182>
 8012388:	9a05      	ldr	r2, [sp, #20]
 801238a:	0031      	movs	r1, r6
 801238c:	f000 f91b 	bl	80125c6 <memmove>
 8012390:	9a05      	ldr	r2, [sp, #20]
 8012392:	68a3      	ldr	r3, [r4, #8]
 8012394:	0015      	movs	r5, r2
 8012396:	1a9b      	subs	r3, r3, r2
 8012398:	60a3      	str	r3, [r4, #8]
 801239a:	6823      	ldr	r3, [r4, #0]
 801239c:	189b      	adds	r3, r3, r2
 801239e:	6023      	str	r3, [r4, #0]
 80123a0:	e6fc      	b.n	801219c <__sfvwrite_r+0xa4>
 80123a2:	46c0      	nop			; (mov r8, r8)
 80123a4:	7ffffc00 	.word	0x7ffffc00
 80123a8:	fffffb7f 	.word	0xfffffb7f
 80123ac:	7ffffffe 	.word	0x7ffffffe
 80123b0:	7fffffff 	.word	0x7fffffff

080123b4 <__submore>:
 80123b4:	000b      	movs	r3, r1
 80123b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123b8:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80123ba:	3340      	adds	r3, #64	; 0x40
 80123bc:	000c      	movs	r4, r1
 80123be:	429d      	cmp	r5, r3
 80123c0:	d11c      	bne.n	80123fc <__submore+0x48>
 80123c2:	2680      	movs	r6, #128	; 0x80
 80123c4:	00f6      	lsls	r6, r6, #3
 80123c6:	0031      	movs	r1, r6
 80123c8:	f7f8 faa8 	bl	800a91c <_malloc_r>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	d102      	bne.n	80123d6 <__submore+0x22>
 80123d0:	2001      	movs	r0, #1
 80123d2:	4240      	negs	r0, r0
 80123d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80123d6:	0023      	movs	r3, r4
 80123d8:	6320      	str	r0, [r4, #48]	; 0x30
 80123da:	6366      	str	r6, [r4, #52]	; 0x34
 80123dc:	3342      	adds	r3, #66	; 0x42
 80123de:	781a      	ldrb	r2, [r3, #0]
 80123e0:	4b10      	ldr	r3, [pc, #64]	; (8012424 <__submore+0x70>)
 80123e2:	54c2      	strb	r2, [r0, r3]
 80123e4:	0023      	movs	r3, r4
 80123e6:	3341      	adds	r3, #65	; 0x41
 80123e8:	781a      	ldrb	r2, [r3, #0]
 80123ea:	4b0f      	ldr	r3, [pc, #60]	; (8012428 <__submore+0x74>)
 80123ec:	54c2      	strb	r2, [r0, r3]
 80123ee:	782a      	ldrb	r2, [r5, #0]
 80123f0:	4b0e      	ldr	r3, [pc, #56]	; (801242c <__submore+0x78>)
 80123f2:	54c2      	strb	r2, [r0, r3]
 80123f4:	18c0      	adds	r0, r0, r3
 80123f6:	6020      	str	r0, [r4, #0]
 80123f8:	2000      	movs	r0, #0
 80123fa:	e7eb      	b.n	80123d4 <__submore+0x20>
 80123fc:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80123fe:	0029      	movs	r1, r5
 8012400:	0073      	lsls	r3, r6, #1
 8012402:	001a      	movs	r2, r3
 8012404:	9301      	str	r3, [sp, #4]
 8012406:	f7fe fc47 	bl	8010c98 <_realloc_r>
 801240a:	1e05      	subs	r5, r0, #0
 801240c:	d0e0      	beq.n	80123d0 <__submore+0x1c>
 801240e:	1987      	adds	r7, r0, r6
 8012410:	0001      	movs	r1, r0
 8012412:	0032      	movs	r2, r6
 8012414:	0038      	movs	r0, r7
 8012416:	f7f9 fde6 	bl	800bfe6 <memcpy>
 801241a:	9b01      	ldr	r3, [sp, #4]
 801241c:	6027      	str	r7, [r4, #0]
 801241e:	6325      	str	r5, [r4, #48]	; 0x30
 8012420:	6363      	str	r3, [r4, #52]	; 0x34
 8012422:	e7e9      	b.n	80123f8 <__submore+0x44>
 8012424:	000003ff 	.word	0x000003ff
 8012428:	000003fe 	.word	0x000003fe
 801242c:	000003fd 	.word	0x000003fd

08012430 <__swsetup_r>:
 8012430:	4b30      	ldr	r3, [pc, #192]	; (80124f4 <__swsetup_r+0xc4>)
 8012432:	b570      	push	{r4, r5, r6, lr}
 8012434:	0005      	movs	r5, r0
 8012436:	6818      	ldr	r0, [r3, #0]
 8012438:	000c      	movs	r4, r1
 801243a:	2800      	cmp	r0, #0
 801243c:	d004      	beq.n	8012448 <__swsetup_r+0x18>
 801243e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012440:	2b00      	cmp	r3, #0
 8012442:	d101      	bne.n	8012448 <__swsetup_r+0x18>
 8012444:	f7f9 fbec 	bl	800bc20 <__sinit>
 8012448:	230c      	movs	r3, #12
 801244a:	5ee2      	ldrsh	r2, [r4, r3]
 801244c:	b293      	uxth	r3, r2
 801244e:	0711      	lsls	r1, r2, #28
 8012450:	d423      	bmi.n	801249a <__swsetup_r+0x6a>
 8012452:	06d9      	lsls	r1, r3, #27
 8012454:	d407      	bmi.n	8012466 <__swsetup_r+0x36>
 8012456:	2309      	movs	r3, #9
 8012458:	2001      	movs	r0, #1
 801245a:	602b      	str	r3, [r5, #0]
 801245c:	3337      	adds	r3, #55	; 0x37
 801245e:	4313      	orrs	r3, r2
 8012460:	81a3      	strh	r3, [r4, #12]
 8012462:	4240      	negs	r0, r0
 8012464:	bd70      	pop	{r4, r5, r6, pc}
 8012466:	075b      	lsls	r3, r3, #29
 8012468:	d513      	bpl.n	8012492 <__swsetup_r+0x62>
 801246a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801246c:	2900      	cmp	r1, #0
 801246e:	d008      	beq.n	8012482 <__swsetup_r+0x52>
 8012470:	0023      	movs	r3, r4
 8012472:	3340      	adds	r3, #64	; 0x40
 8012474:	4299      	cmp	r1, r3
 8012476:	d002      	beq.n	801247e <__swsetup_r+0x4e>
 8012478:	0028      	movs	r0, r5
 801247a:	f7f9 fe2f 	bl	800c0dc <_free_r>
 801247e:	2300      	movs	r3, #0
 8012480:	6323      	str	r3, [r4, #48]	; 0x30
 8012482:	2224      	movs	r2, #36	; 0x24
 8012484:	89a3      	ldrh	r3, [r4, #12]
 8012486:	4393      	bics	r3, r2
 8012488:	81a3      	strh	r3, [r4, #12]
 801248a:	2300      	movs	r3, #0
 801248c:	6063      	str	r3, [r4, #4]
 801248e:	6923      	ldr	r3, [r4, #16]
 8012490:	6023      	str	r3, [r4, #0]
 8012492:	2308      	movs	r3, #8
 8012494:	89a2      	ldrh	r2, [r4, #12]
 8012496:	4313      	orrs	r3, r2
 8012498:	81a3      	strh	r3, [r4, #12]
 801249a:	6923      	ldr	r3, [r4, #16]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d10b      	bne.n	80124b8 <__swsetup_r+0x88>
 80124a0:	21a0      	movs	r1, #160	; 0xa0
 80124a2:	2280      	movs	r2, #128	; 0x80
 80124a4:	89a3      	ldrh	r3, [r4, #12]
 80124a6:	0089      	lsls	r1, r1, #2
 80124a8:	0092      	lsls	r2, r2, #2
 80124aa:	400b      	ands	r3, r1
 80124ac:	4293      	cmp	r3, r2
 80124ae:	d003      	beq.n	80124b8 <__swsetup_r+0x88>
 80124b0:	0021      	movs	r1, r4
 80124b2:	0028      	movs	r0, r5
 80124b4:	f000 f8e8 	bl	8012688 <__smakebuf_r>
 80124b8:	220c      	movs	r2, #12
 80124ba:	5ea3      	ldrsh	r3, [r4, r2]
 80124bc:	2001      	movs	r0, #1
 80124be:	001a      	movs	r2, r3
 80124c0:	b299      	uxth	r1, r3
 80124c2:	4002      	ands	r2, r0
 80124c4:	4203      	tst	r3, r0
 80124c6:	d00f      	beq.n	80124e8 <__swsetup_r+0xb8>
 80124c8:	2200      	movs	r2, #0
 80124ca:	60a2      	str	r2, [r4, #8]
 80124cc:	6962      	ldr	r2, [r4, #20]
 80124ce:	4252      	negs	r2, r2
 80124d0:	61a2      	str	r2, [r4, #24]
 80124d2:	2000      	movs	r0, #0
 80124d4:	6922      	ldr	r2, [r4, #16]
 80124d6:	4282      	cmp	r2, r0
 80124d8:	d1c4      	bne.n	8012464 <__swsetup_r+0x34>
 80124da:	0609      	lsls	r1, r1, #24
 80124dc:	d5c2      	bpl.n	8012464 <__swsetup_r+0x34>
 80124de:	2240      	movs	r2, #64	; 0x40
 80124e0:	4313      	orrs	r3, r2
 80124e2:	81a3      	strh	r3, [r4, #12]
 80124e4:	3801      	subs	r0, #1
 80124e6:	e7bd      	b.n	8012464 <__swsetup_r+0x34>
 80124e8:	0788      	lsls	r0, r1, #30
 80124ea:	d400      	bmi.n	80124ee <__swsetup_r+0xbe>
 80124ec:	6962      	ldr	r2, [r4, #20]
 80124ee:	60a2      	str	r2, [r4, #8]
 80124f0:	e7ef      	b.n	80124d2 <__swsetup_r+0xa2>
 80124f2:	46c0      	nop			; (mov r8, r8)
 80124f4:	200006d8 	.word	0x200006d8

080124f8 <__fputwc>:
 80124f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124fa:	b085      	sub	sp, #20
 80124fc:	000e      	movs	r6, r1
 80124fe:	0015      	movs	r5, r2
 8012500:	9001      	str	r0, [sp, #4]
 8012502:	f7f9 fccf 	bl	800bea4 <__locale_mb_cur_max>
 8012506:	0004      	movs	r4, r0
 8012508:	2801      	cmp	r0, #1
 801250a:	d119      	bne.n	8012540 <__fputwc+0x48>
 801250c:	1e73      	subs	r3, r6, #1
 801250e:	2bfe      	cmp	r3, #254	; 0xfe
 8012510:	d816      	bhi.n	8012540 <__fputwc+0x48>
 8012512:	ab02      	add	r3, sp, #8
 8012514:	711e      	strb	r6, [r3, #4]
 8012516:	2700      	movs	r7, #0
 8012518:	42a7      	cmp	r7, r4
 801251a:	d020      	beq.n	801255e <__fputwc+0x66>
 801251c:	ab03      	add	r3, sp, #12
 801251e:	5dd9      	ldrb	r1, [r3, r7]
 8012520:	68ab      	ldr	r3, [r5, #8]
 8012522:	3b01      	subs	r3, #1
 8012524:	60ab      	str	r3, [r5, #8]
 8012526:	2b00      	cmp	r3, #0
 8012528:	da04      	bge.n	8012534 <__fputwc+0x3c>
 801252a:	69aa      	ldr	r2, [r5, #24]
 801252c:	4293      	cmp	r3, r2
 801252e:	db19      	blt.n	8012564 <__fputwc+0x6c>
 8012530:	290a      	cmp	r1, #10
 8012532:	d017      	beq.n	8012564 <__fputwc+0x6c>
 8012534:	682b      	ldr	r3, [r5, #0]
 8012536:	1c5a      	adds	r2, r3, #1
 8012538:	602a      	str	r2, [r5, #0]
 801253a:	7019      	strb	r1, [r3, #0]
 801253c:	3701      	adds	r7, #1
 801253e:	e7eb      	b.n	8012518 <__fputwc+0x20>
 8012540:	002b      	movs	r3, r5
 8012542:	0032      	movs	r2, r6
 8012544:	9801      	ldr	r0, [sp, #4]
 8012546:	335c      	adds	r3, #92	; 0x5c
 8012548:	a903      	add	r1, sp, #12
 801254a:	f000 f857 	bl	80125fc <_wcrtomb_r>
 801254e:	0004      	movs	r4, r0
 8012550:	1c43      	adds	r3, r0, #1
 8012552:	d1e0      	bne.n	8012516 <__fputwc+0x1e>
 8012554:	2340      	movs	r3, #64	; 0x40
 8012556:	0006      	movs	r6, r0
 8012558:	89aa      	ldrh	r2, [r5, #12]
 801255a:	4313      	orrs	r3, r2
 801255c:	81ab      	strh	r3, [r5, #12]
 801255e:	0030      	movs	r0, r6
 8012560:	b005      	add	sp, #20
 8012562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012564:	002a      	movs	r2, r5
 8012566:	9801      	ldr	r0, [sp, #4]
 8012568:	f000 f8cc 	bl	8012704 <__swbuf_r>
 801256c:	1c43      	adds	r3, r0, #1
 801256e:	d1e5      	bne.n	801253c <__fputwc+0x44>
 8012570:	0006      	movs	r6, r0
 8012572:	e7f4      	b.n	801255e <__fputwc+0x66>

08012574 <_fputwc_r>:
 8012574:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012576:	b570      	push	{r4, r5, r6, lr}
 8012578:	0005      	movs	r5, r0
 801257a:	000e      	movs	r6, r1
 801257c:	0014      	movs	r4, r2
 801257e:	07db      	lsls	r3, r3, #31
 8012580:	d405      	bmi.n	801258e <_fputwc_r+0x1a>
 8012582:	8993      	ldrh	r3, [r2, #12]
 8012584:	059b      	lsls	r3, r3, #22
 8012586:	d402      	bmi.n	801258e <_fputwc_r+0x1a>
 8012588:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801258a:	f7f9 fd1f 	bl	800bfcc <__retarget_lock_acquire_recursive>
 801258e:	230c      	movs	r3, #12
 8012590:	5ee2      	ldrsh	r2, [r4, r3]
 8012592:	2380      	movs	r3, #128	; 0x80
 8012594:	019b      	lsls	r3, r3, #6
 8012596:	421a      	tst	r2, r3
 8012598:	d104      	bne.n	80125a4 <_fputwc_r+0x30>
 801259a:	431a      	orrs	r2, r3
 801259c:	81a2      	strh	r2, [r4, #12]
 801259e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80125a0:	4313      	orrs	r3, r2
 80125a2:	6663      	str	r3, [r4, #100]	; 0x64
 80125a4:	0028      	movs	r0, r5
 80125a6:	0022      	movs	r2, r4
 80125a8:	0031      	movs	r1, r6
 80125aa:	f7ff ffa5 	bl	80124f8 <__fputwc>
 80125ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125b0:	0005      	movs	r5, r0
 80125b2:	07db      	lsls	r3, r3, #31
 80125b4:	d405      	bmi.n	80125c2 <_fputwc_r+0x4e>
 80125b6:	89a3      	ldrh	r3, [r4, #12]
 80125b8:	059b      	lsls	r3, r3, #22
 80125ba:	d402      	bmi.n	80125c2 <_fputwc_r+0x4e>
 80125bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125be:	f7f9 fd06 	bl	800bfce <__retarget_lock_release_recursive>
 80125c2:	0028      	movs	r0, r5
 80125c4:	bd70      	pop	{r4, r5, r6, pc}

080125c6 <memmove>:
 80125c6:	b510      	push	{r4, lr}
 80125c8:	4288      	cmp	r0, r1
 80125ca:	d902      	bls.n	80125d2 <memmove+0xc>
 80125cc:	188b      	adds	r3, r1, r2
 80125ce:	4298      	cmp	r0, r3
 80125d0:	d303      	bcc.n	80125da <memmove+0x14>
 80125d2:	2300      	movs	r3, #0
 80125d4:	e007      	b.n	80125e6 <memmove+0x20>
 80125d6:	5c8b      	ldrb	r3, [r1, r2]
 80125d8:	5483      	strb	r3, [r0, r2]
 80125da:	3a01      	subs	r2, #1
 80125dc:	d2fb      	bcs.n	80125d6 <memmove+0x10>
 80125de:	bd10      	pop	{r4, pc}
 80125e0:	5ccc      	ldrb	r4, [r1, r3]
 80125e2:	54c4      	strb	r4, [r0, r3]
 80125e4:	3301      	adds	r3, #1
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d1fa      	bne.n	80125e0 <memmove+0x1a>
 80125ea:	e7f8      	b.n	80125de <memmove+0x18>

080125ec <abort>:
 80125ec:	2006      	movs	r0, #6
 80125ee:	b510      	push	{r4, lr}
 80125f0:	f000 f906 	bl	8012800 <raise>
 80125f4:	2001      	movs	r0, #1
 80125f6:	f7f0 ff6d 	bl	80034d4 <_exit>
	...

080125fc <_wcrtomb_r>:
 80125fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80125fe:	001d      	movs	r5, r3
 8012600:	4b09      	ldr	r3, [pc, #36]	; (8012628 <_wcrtomb_r+0x2c>)
 8012602:	0004      	movs	r4, r0
 8012604:	33e0      	adds	r3, #224	; 0xe0
 8012606:	681e      	ldr	r6, [r3, #0]
 8012608:	002b      	movs	r3, r5
 801260a:	2900      	cmp	r1, #0
 801260c:	d101      	bne.n	8012612 <_wcrtomb_r+0x16>
 801260e:	000a      	movs	r2, r1
 8012610:	a901      	add	r1, sp, #4
 8012612:	0020      	movs	r0, r4
 8012614:	47b0      	blx	r6
 8012616:	1c43      	adds	r3, r0, #1
 8012618:	d103      	bne.n	8012622 <_wcrtomb_r+0x26>
 801261a:	2300      	movs	r3, #0
 801261c:	602b      	str	r3, [r5, #0]
 801261e:	338a      	adds	r3, #138	; 0x8a
 8012620:	6023      	str	r3, [r4, #0]
 8012622:	b004      	add	sp, #16
 8012624:	bd70      	pop	{r4, r5, r6, pc}
 8012626:	46c0      	nop			; (mov r8, r8)
 8012628:	20000448 	.word	0x20000448

0801262c <__swhatbuf_r>:
 801262c:	b570      	push	{r4, r5, r6, lr}
 801262e:	000e      	movs	r6, r1
 8012630:	001d      	movs	r5, r3
 8012632:	230e      	movs	r3, #14
 8012634:	5ec9      	ldrsh	r1, [r1, r3]
 8012636:	0014      	movs	r4, r2
 8012638:	b096      	sub	sp, #88	; 0x58
 801263a:	2900      	cmp	r1, #0
 801263c:	da09      	bge.n	8012652 <__swhatbuf_r+0x26>
 801263e:	89b2      	ldrh	r2, [r6, #12]
 8012640:	2380      	movs	r3, #128	; 0x80
 8012642:	0011      	movs	r1, r2
 8012644:	4019      	ands	r1, r3
 8012646:	421a      	tst	r2, r3
 8012648:	d018      	beq.n	801267c <__swhatbuf_r+0x50>
 801264a:	2100      	movs	r1, #0
 801264c:	3b40      	subs	r3, #64	; 0x40
 801264e:	0008      	movs	r0, r1
 8012650:	e010      	b.n	8012674 <__swhatbuf_r+0x48>
 8012652:	466a      	mov	r2, sp
 8012654:	f000 f8de 	bl	8012814 <_fstat_r>
 8012658:	2800      	cmp	r0, #0
 801265a:	dbf0      	blt.n	801263e <__swhatbuf_r+0x12>
 801265c:	23f0      	movs	r3, #240	; 0xf0
 801265e:	9901      	ldr	r1, [sp, #4]
 8012660:	021b      	lsls	r3, r3, #8
 8012662:	4019      	ands	r1, r3
 8012664:	4b07      	ldr	r3, [pc, #28]	; (8012684 <__swhatbuf_r+0x58>)
 8012666:	2080      	movs	r0, #128	; 0x80
 8012668:	18c9      	adds	r1, r1, r3
 801266a:	424b      	negs	r3, r1
 801266c:	4159      	adcs	r1, r3
 801266e:	2380      	movs	r3, #128	; 0x80
 8012670:	0100      	lsls	r0, r0, #4
 8012672:	00db      	lsls	r3, r3, #3
 8012674:	6029      	str	r1, [r5, #0]
 8012676:	6023      	str	r3, [r4, #0]
 8012678:	b016      	add	sp, #88	; 0x58
 801267a:	bd70      	pop	{r4, r5, r6, pc}
 801267c:	2380      	movs	r3, #128	; 0x80
 801267e:	00db      	lsls	r3, r3, #3
 8012680:	e7e5      	b.n	801264e <__swhatbuf_r+0x22>
 8012682:	46c0      	nop			; (mov r8, r8)
 8012684:	ffffe000 	.word	0xffffe000

08012688 <__smakebuf_r>:
 8012688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801268a:	2602      	movs	r6, #2
 801268c:	898b      	ldrh	r3, [r1, #12]
 801268e:	0005      	movs	r5, r0
 8012690:	000c      	movs	r4, r1
 8012692:	4233      	tst	r3, r6
 8012694:	d006      	beq.n	80126a4 <__smakebuf_r+0x1c>
 8012696:	0023      	movs	r3, r4
 8012698:	3343      	adds	r3, #67	; 0x43
 801269a:	6023      	str	r3, [r4, #0]
 801269c:	6123      	str	r3, [r4, #16]
 801269e:	2301      	movs	r3, #1
 80126a0:	6163      	str	r3, [r4, #20]
 80126a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80126a4:	466a      	mov	r2, sp
 80126a6:	ab01      	add	r3, sp, #4
 80126a8:	f7ff ffc0 	bl	801262c <__swhatbuf_r>
 80126ac:	9900      	ldr	r1, [sp, #0]
 80126ae:	0007      	movs	r7, r0
 80126b0:	0028      	movs	r0, r5
 80126b2:	f7f8 f933 	bl	800a91c <_malloc_r>
 80126b6:	2800      	cmp	r0, #0
 80126b8:	d108      	bne.n	80126cc <__smakebuf_r+0x44>
 80126ba:	220c      	movs	r2, #12
 80126bc:	5ea3      	ldrsh	r3, [r4, r2]
 80126be:	059a      	lsls	r2, r3, #22
 80126c0:	d4ef      	bmi.n	80126a2 <__smakebuf_r+0x1a>
 80126c2:	2203      	movs	r2, #3
 80126c4:	4393      	bics	r3, r2
 80126c6:	431e      	orrs	r6, r3
 80126c8:	81a6      	strh	r6, [r4, #12]
 80126ca:	e7e4      	b.n	8012696 <__smakebuf_r+0xe>
 80126cc:	2380      	movs	r3, #128	; 0x80
 80126ce:	89a2      	ldrh	r2, [r4, #12]
 80126d0:	6020      	str	r0, [r4, #0]
 80126d2:	4313      	orrs	r3, r2
 80126d4:	81a3      	strh	r3, [r4, #12]
 80126d6:	9b00      	ldr	r3, [sp, #0]
 80126d8:	6120      	str	r0, [r4, #16]
 80126da:	6163      	str	r3, [r4, #20]
 80126dc:	9b01      	ldr	r3, [sp, #4]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d00c      	beq.n	80126fc <__smakebuf_r+0x74>
 80126e2:	0028      	movs	r0, r5
 80126e4:	230e      	movs	r3, #14
 80126e6:	5ee1      	ldrsh	r1, [r4, r3]
 80126e8:	f000 f8a6 	bl	8012838 <_isatty_r>
 80126ec:	2800      	cmp	r0, #0
 80126ee:	d005      	beq.n	80126fc <__smakebuf_r+0x74>
 80126f0:	2303      	movs	r3, #3
 80126f2:	89a2      	ldrh	r2, [r4, #12]
 80126f4:	439a      	bics	r2, r3
 80126f6:	3b02      	subs	r3, #2
 80126f8:	4313      	orrs	r3, r2
 80126fa:	81a3      	strh	r3, [r4, #12]
 80126fc:	89a3      	ldrh	r3, [r4, #12]
 80126fe:	433b      	orrs	r3, r7
 8012700:	81a3      	strh	r3, [r4, #12]
 8012702:	e7ce      	b.n	80126a2 <__smakebuf_r+0x1a>

08012704 <__swbuf_r>:
 8012704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012706:	0006      	movs	r6, r0
 8012708:	000d      	movs	r5, r1
 801270a:	0014      	movs	r4, r2
 801270c:	2800      	cmp	r0, #0
 801270e:	d004      	beq.n	801271a <__swbuf_r+0x16>
 8012710:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012712:	2b00      	cmp	r3, #0
 8012714:	d101      	bne.n	801271a <__swbuf_r+0x16>
 8012716:	f7f9 fa83 	bl	800bc20 <__sinit>
 801271a:	69a3      	ldr	r3, [r4, #24]
 801271c:	60a3      	str	r3, [r4, #8]
 801271e:	89a3      	ldrh	r3, [r4, #12]
 8012720:	071b      	lsls	r3, r3, #28
 8012722:	d52e      	bpl.n	8012782 <__swbuf_r+0x7e>
 8012724:	6923      	ldr	r3, [r4, #16]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d02b      	beq.n	8012782 <__swbuf_r+0x7e>
 801272a:	230c      	movs	r3, #12
 801272c:	5ee2      	ldrsh	r2, [r4, r3]
 801272e:	2380      	movs	r3, #128	; 0x80
 8012730:	019b      	lsls	r3, r3, #6
 8012732:	b2ef      	uxtb	r7, r5
 8012734:	b2ed      	uxtb	r5, r5
 8012736:	421a      	tst	r2, r3
 8012738:	d02c      	beq.n	8012794 <__swbuf_r+0x90>
 801273a:	6923      	ldr	r3, [r4, #16]
 801273c:	6820      	ldr	r0, [r4, #0]
 801273e:	1ac0      	subs	r0, r0, r3
 8012740:	6963      	ldr	r3, [r4, #20]
 8012742:	4283      	cmp	r3, r0
 8012744:	dc05      	bgt.n	8012752 <__swbuf_r+0x4e>
 8012746:	0021      	movs	r1, r4
 8012748:	0030      	movs	r0, r6
 801274a:	f7fd fab3 	bl	800fcb4 <_fflush_r>
 801274e:	2800      	cmp	r0, #0
 8012750:	d11d      	bne.n	801278e <__swbuf_r+0x8a>
 8012752:	68a3      	ldr	r3, [r4, #8]
 8012754:	3001      	adds	r0, #1
 8012756:	3b01      	subs	r3, #1
 8012758:	60a3      	str	r3, [r4, #8]
 801275a:	6823      	ldr	r3, [r4, #0]
 801275c:	1c5a      	adds	r2, r3, #1
 801275e:	6022      	str	r2, [r4, #0]
 8012760:	701f      	strb	r7, [r3, #0]
 8012762:	6963      	ldr	r3, [r4, #20]
 8012764:	4283      	cmp	r3, r0
 8012766:	d004      	beq.n	8012772 <__swbuf_r+0x6e>
 8012768:	89a3      	ldrh	r3, [r4, #12]
 801276a:	07db      	lsls	r3, r3, #31
 801276c:	d507      	bpl.n	801277e <__swbuf_r+0x7a>
 801276e:	2d0a      	cmp	r5, #10
 8012770:	d105      	bne.n	801277e <__swbuf_r+0x7a>
 8012772:	0021      	movs	r1, r4
 8012774:	0030      	movs	r0, r6
 8012776:	f7fd fa9d 	bl	800fcb4 <_fflush_r>
 801277a:	2800      	cmp	r0, #0
 801277c:	d107      	bne.n	801278e <__swbuf_r+0x8a>
 801277e:	0028      	movs	r0, r5
 8012780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012782:	0021      	movs	r1, r4
 8012784:	0030      	movs	r0, r6
 8012786:	f7ff fe53 	bl	8012430 <__swsetup_r>
 801278a:	2800      	cmp	r0, #0
 801278c:	d0cd      	beq.n	801272a <__swbuf_r+0x26>
 801278e:	2501      	movs	r5, #1
 8012790:	426d      	negs	r5, r5
 8012792:	e7f4      	b.n	801277e <__swbuf_r+0x7a>
 8012794:	4313      	orrs	r3, r2
 8012796:	81a3      	strh	r3, [r4, #12]
 8012798:	4a02      	ldr	r2, [pc, #8]	; (80127a4 <__swbuf_r+0xa0>)
 801279a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801279c:	4013      	ands	r3, r2
 801279e:	6663      	str	r3, [r4, #100]	; 0x64
 80127a0:	e7cb      	b.n	801273a <__swbuf_r+0x36>
 80127a2:	46c0      	nop			; (mov r8, r8)
 80127a4:	ffffdfff 	.word	0xffffdfff

080127a8 <_raise_r>:
 80127a8:	b570      	push	{r4, r5, r6, lr}
 80127aa:	0004      	movs	r4, r0
 80127ac:	000d      	movs	r5, r1
 80127ae:	291f      	cmp	r1, #31
 80127b0:	d904      	bls.n	80127bc <_raise_r+0x14>
 80127b2:	2316      	movs	r3, #22
 80127b4:	6003      	str	r3, [r0, #0]
 80127b6:	2001      	movs	r0, #1
 80127b8:	4240      	negs	r0, r0
 80127ba:	bd70      	pop	{r4, r5, r6, pc}
 80127bc:	0003      	movs	r3, r0
 80127be:	33fc      	adds	r3, #252	; 0xfc
 80127c0:	69db      	ldr	r3, [r3, #28]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d004      	beq.n	80127d0 <_raise_r+0x28>
 80127c6:	008a      	lsls	r2, r1, #2
 80127c8:	189b      	adds	r3, r3, r2
 80127ca:	681a      	ldr	r2, [r3, #0]
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	d108      	bne.n	80127e2 <_raise_r+0x3a>
 80127d0:	0020      	movs	r0, r4
 80127d2:	f000 f855 	bl	8012880 <_getpid_r>
 80127d6:	002a      	movs	r2, r5
 80127d8:	0001      	movs	r1, r0
 80127da:	0020      	movs	r0, r4
 80127dc:	f000 f83e 	bl	801285c <_kill_r>
 80127e0:	e7eb      	b.n	80127ba <_raise_r+0x12>
 80127e2:	2000      	movs	r0, #0
 80127e4:	2a01      	cmp	r2, #1
 80127e6:	d0e8      	beq.n	80127ba <_raise_r+0x12>
 80127e8:	1c51      	adds	r1, r2, #1
 80127ea:	d103      	bne.n	80127f4 <_raise_r+0x4c>
 80127ec:	2316      	movs	r3, #22
 80127ee:	3001      	adds	r0, #1
 80127f0:	6023      	str	r3, [r4, #0]
 80127f2:	e7e2      	b.n	80127ba <_raise_r+0x12>
 80127f4:	2400      	movs	r4, #0
 80127f6:	0028      	movs	r0, r5
 80127f8:	601c      	str	r4, [r3, #0]
 80127fa:	4790      	blx	r2
 80127fc:	0020      	movs	r0, r4
 80127fe:	e7dc      	b.n	80127ba <_raise_r+0x12>

08012800 <raise>:
 8012800:	b510      	push	{r4, lr}
 8012802:	4b03      	ldr	r3, [pc, #12]	; (8012810 <raise+0x10>)
 8012804:	0001      	movs	r1, r0
 8012806:	6818      	ldr	r0, [r3, #0]
 8012808:	f7ff ffce 	bl	80127a8 <_raise_r>
 801280c:	bd10      	pop	{r4, pc}
 801280e:	46c0      	nop			; (mov r8, r8)
 8012810:	200006d8 	.word	0x200006d8

08012814 <_fstat_r>:
 8012814:	2300      	movs	r3, #0
 8012816:	b570      	push	{r4, r5, r6, lr}
 8012818:	4d06      	ldr	r5, [pc, #24]	; (8012834 <_fstat_r+0x20>)
 801281a:	0004      	movs	r4, r0
 801281c:	0008      	movs	r0, r1
 801281e:	0011      	movs	r1, r2
 8012820:	602b      	str	r3, [r5, #0]
 8012822:	f7f0 fea6 	bl	8003572 <_fstat>
 8012826:	1c43      	adds	r3, r0, #1
 8012828:	d103      	bne.n	8012832 <_fstat_r+0x1e>
 801282a:	682b      	ldr	r3, [r5, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d000      	beq.n	8012832 <_fstat_r+0x1e>
 8012830:	6023      	str	r3, [r4, #0]
 8012832:	bd70      	pop	{r4, r5, r6, pc}
 8012834:	20000c98 	.word	0x20000c98

08012838 <_isatty_r>:
 8012838:	2300      	movs	r3, #0
 801283a:	b570      	push	{r4, r5, r6, lr}
 801283c:	4d06      	ldr	r5, [pc, #24]	; (8012858 <_isatty_r+0x20>)
 801283e:	0004      	movs	r4, r0
 8012840:	0008      	movs	r0, r1
 8012842:	602b      	str	r3, [r5, #0]
 8012844:	f7f0 fea3 	bl	800358e <_isatty>
 8012848:	1c43      	adds	r3, r0, #1
 801284a:	d103      	bne.n	8012854 <_isatty_r+0x1c>
 801284c:	682b      	ldr	r3, [r5, #0]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d000      	beq.n	8012854 <_isatty_r+0x1c>
 8012852:	6023      	str	r3, [r4, #0]
 8012854:	bd70      	pop	{r4, r5, r6, pc}
 8012856:	46c0      	nop			; (mov r8, r8)
 8012858:	20000c98 	.word	0x20000c98

0801285c <_kill_r>:
 801285c:	2300      	movs	r3, #0
 801285e:	b570      	push	{r4, r5, r6, lr}
 8012860:	4d06      	ldr	r5, [pc, #24]	; (801287c <_kill_r+0x20>)
 8012862:	0004      	movs	r4, r0
 8012864:	0008      	movs	r0, r1
 8012866:	0011      	movs	r1, r2
 8012868:	602b      	str	r3, [r5, #0]
 801286a:	f7f0 fe23 	bl	80034b4 <_kill>
 801286e:	1c43      	adds	r3, r0, #1
 8012870:	d103      	bne.n	801287a <_kill_r+0x1e>
 8012872:	682b      	ldr	r3, [r5, #0]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d000      	beq.n	801287a <_kill_r+0x1e>
 8012878:	6023      	str	r3, [r4, #0]
 801287a:	bd70      	pop	{r4, r5, r6, pc}
 801287c:	20000c98 	.word	0x20000c98

08012880 <_getpid_r>:
 8012880:	b510      	push	{r4, lr}
 8012882:	f7f0 fe11 	bl	80034a8 <_getpid>
 8012886:	bd10      	pop	{r4, pc}

08012888 <round>:
 8012888:	b570      	push	{r4, r5, r6, lr}
 801288a:	004a      	lsls	r2, r1, #1
 801288c:	000d      	movs	r5, r1
 801288e:	4920      	ldr	r1, [pc, #128]	; (8012910 <round+0x88>)
 8012890:	0d52      	lsrs	r2, r2, #21
 8012892:	1851      	adds	r1, r2, r1
 8012894:	0006      	movs	r6, r0
 8012896:	2913      	cmp	r1, #19
 8012898:	dc18      	bgt.n	80128cc <round+0x44>
 801289a:	2900      	cmp	r1, #0
 801289c:	da09      	bge.n	80128b2 <round+0x2a>
 801289e:	0feb      	lsrs	r3, r5, #31
 80128a0:	2200      	movs	r2, #0
 80128a2:	07db      	lsls	r3, r3, #31
 80128a4:	3101      	adds	r1, #1
 80128a6:	d101      	bne.n	80128ac <round+0x24>
 80128a8:	491a      	ldr	r1, [pc, #104]	; (8012914 <round+0x8c>)
 80128aa:	430b      	orrs	r3, r1
 80128ac:	0019      	movs	r1, r3
 80128ae:	0010      	movs	r0, r2
 80128b0:	e017      	b.n	80128e2 <round+0x5a>
 80128b2:	4c19      	ldr	r4, [pc, #100]	; (8012918 <round+0x90>)
 80128b4:	410c      	asrs	r4, r1
 80128b6:	0022      	movs	r2, r4
 80128b8:	402a      	ands	r2, r5
 80128ba:	4302      	orrs	r2, r0
 80128bc:	d013      	beq.n	80128e6 <round+0x5e>
 80128be:	2280      	movs	r2, #128	; 0x80
 80128c0:	0312      	lsls	r2, r2, #12
 80128c2:	410a      	asrs	r2, r1
 80128c4:	1953      	adds	r3, r2, r5
 80128c6:	43a3      	bics	r3, r4
 80128c8:	2200      	movs	r2, #0
 80128ca:	e7ef      	b.n	80128ac <round+0x24>
 80128cc:	2933      	cmp	r1, #51	; 0x33
 80128ce:	dd0d      	ble.n	80128ec <round+0x64>
 80128d0:	2380      	movs	r3, #128	; 0x80
 80128d2:	00db      	lsls	r3, r3, #3
 80128d4:	4299      	cmp	r1, r3
 80128d6:	d106      	bne.n	80128e6 <round+0x5e>
 80128d8:	0002      	movs	r2, r0
 80128da:	002b      	movs	r3, r5
 80128dc:	0029      	movs	r1, r5
 80128de:	f7ed ff6b 	bl	80007b8 <__aeabi_dadd>
 80128e2:	0006      	movs	r6, r0
 80128e4:	000d      	movs	r5, r1
 80128e6:	0030      	movs	r0, r6
 80128e8:	0029      	movs	r1, r5
 80128ea:	bd70      	pop	{r4, r5, r6, pc}
 80128ec:	4c0b      	ldr	r4, [pc, #44]	; (801291c <round+0x94>)
 80128ee:	1912      	adds	r2, r2, r4
 80128f0:	2401      	movs	r4, #1
 80128f2:	4264      	negs	r4, r4
 80128f4:	40d4      	lsrs	r4, r2
 80128f6:	4220      	tst	r0, r4
 80128f8:	d0f5      	beq.n	80128e6 <round+0x5e>
 80128fa:	2233      	movs	r2, #51	; 0x33
 80128fc:	1a51      	subs	r1, r2, r1
 80128fe:	3a32      	subs	r2, #50	; 0x32
 8012900:	408a      	lsls	r2, r1
 8012902:	1812      	adds	r2, r2, r0
 8012904:	4282      	cmp	r2, r0
 8012906:	4180      	sbcs	r0, r0
 8012908:	4240      	negs	r0, r0
 801290a:	182b      	adds	r3, r5, r0
 801290c:	43a2      	bics	r2, r4
 801290e:	e7cd      	b.n	80128ac <round+0x24>
 8012910:	fffffc01 	.word	0xfffffc01
 8012914:	3ff00000 	.word	0x3ff00000
 8012918:	000fffff 	.word	0x000fffff
 801291c:	fffffbed 	.word	0xfffffbed

08012920 <_init>:
 8012920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012922:	46c0      	nop			; (mov r8, r8)
 8012924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012926:	bc08      	pop	{r3}
 8012928:	469e      	mov	lr, r3
 801292a:	4770      	bx	lr

0801292c <_fini>:
 801292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801292e:	46c0      	nop			; (mov r8, r8)
 8012930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012932:	bc08      	pop	{r3}
 8012934:	469e      	mov	lr, r3
 8012936:	4770      	bx	lr
